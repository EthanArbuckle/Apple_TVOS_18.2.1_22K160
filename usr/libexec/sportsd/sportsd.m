int main(int argc, const char **argv, const char **envp)
{
  id v3;
  if (qword_100087090 != -1) {
    swift_once(&qword_100087090, sub_100029864);
  }
  sub_1000299B0();
  if (qword_100087088 != -1) {
    swift_once(&qword_100087088, sub_1000285AC);
  }
  v3 = [(id)objc_opt_self(NSRunLoop) mainRunLoop];
  [v3 run];

  exit(1);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for AMSError(uint64_t a1)
{
}

uint64_t sub_100004E8C()
{
  return sub_1000058CC(*v0, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

NSString sub_100004EB4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  NSString result = sub_100005898(a1);
  *a2 = result;
  return result;
}

id sub_100004ED8()
{
  return *v0;
}

uint64_t sub_100004EE0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100004EEC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorDomain);
}

uint64_t sub_100004EFC(uint64_t a1)
{
  uint64_t v2 = sub_100005388( &qword_1000871C8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066F90);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100004F3C(uint64_t a1)
{
  uint64_t v2 = sub_100005388( &qword_1000871C8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066F90);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100004F7C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100005388( &qword_1000871C8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066F90);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100004FE0()
{
  return sub_100004FE8(*v0);
}

uint64_t sub_100004FE8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100005018(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005388( &qword_1000871C8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066F90);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100005068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

void sub_1000050C4(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

  ;
}

uint64_t sub_1000050FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = nullsub_1(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100005124@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100005168@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100005190(uint64_t a1)
{
  uint64_t v2 = sub_100005388( &qword_1000871F8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_10006718C);
  uint64_t v3 = sub_100005388( (unint64_t *)&unk_100087200,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_10006712C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100005214(uint64_t a1)
{
  uint64_t v2 = sub_100005388( &qword_100087190,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066F4C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005254(uint64_t a1)
{
  uint64_t v2 = sub_100005388( &qword_100087190,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066F4C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005298(uint64_t a1)
{
  uint64_t v2 = sub_100005388( &qword_1000871C8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066F90);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000052D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005388( &qword_1000871C8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066F90);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100005330()
{
  return sub_100005388( &qword_100087180,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066E64);
}

uint64_t sub_10000535C()
{
  return sub_100005388( &qword_100087188,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066E90);
}

uint64_t sub_100005388(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000053C8()
{
  return sub_100005388( &qword_100087190,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066F4C);
}

uint64_t sub_1000053F4()
{
  return sub_100005388( &qword_100087198,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066F18);
}

uint64_t sub_100005420()
{
  return sub_100005388( &qword_1000871A0,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066ED4);
}

uint64_t sub_10000544C()
{
  return sub_100005388( &qword_1000871A8,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_100067038);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_10000548C()
{
  return sub_100005388( &qword_1000871B0,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_100066FFC);
}

unint64_t sub_1000054BC()
{
  unint64_t result = qword_1000871B8;
  if (!qword_1000871B8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1000871B8);
  }

  return result;
}

uint64_t sub_1000054F8()
{
  return sub_100005388( &qword_1000871C0,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_100067074);
}

uint64_t sub_100005524()
{
  return sub_100005388( &qword_1000871C8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100066F90);
}

BOOL sub_100005550(uint64_t *a1, uint64_t *a2)
{
  return sub_1000417C4(*a1, *a2);
}

void type metadata accessor for AMSBagKey(uint64_t a1)
{
}

void sub_100005570(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1000055B4()
{
  return sub_100005388( &qword_1000871E0,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_1000670F0);
}

uint64_t sub_1000055E0()
{
  return sub_100005388( &qword_1000871E8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_1000670C4);
}

uint64_t sub_10000560C()
{
  return sub_1000058CC(*v0, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10000562C(uint64_t a1)
{
  return sub_100005674(a1, *v1);
}

Swift::Int sub_100005634(uint64_t a1)
{
  return sub_1000056B4(a1, *v1);
}

uint64_t sub_10000563C(uint64_t *a1, uint64_t *a2)
{
  return sub_100005724(*a1, *a2);
}

uint64_t sub_100005648()
{
  return sub_100005388( &qword_1000871F0,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_100067160);
}

uint64_t sub_100005674(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000056B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  Swift::Int v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_100005724(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000057A8(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100005824(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

NSString sub_100005898(uint64_t a1)
{
  uint64_t v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  return v3;
}

uint64_t sub_1000058CC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = a2(v3);
  swift_bridgeObjectRelease(v5);
  return v6;
}

void sub_100005904()
{
  qword_1000872D0 = 0x302E302E31LL;
  *(void *)algn_1000872D8 = 0xE500000000000000LL;
}

uint64_t sub_100005924()
{
  id v0 = [(id)objc_opt_self(NSBundle) mainBundle];
  uint64_t v1 = sub_10000A39C(v0);
  if (!v1)
  {
    __int128 v5 = 0u;
    __int128 v6 = 0u;
    goto LABEL_6;
  }

  uint64_t v2 = v1;
  sub_10003BD2C(0xD00000000000001ALL, 0x800000010006AE20LL, v1, &v5);
  swift_bridgeObjectRelease(v2);
  if (!*((void *)&v6 + 1))
  {
LABEL_6:
    sub_10000BBA4((uint64_t)&v5, qword_100087690);
    return 3157555LL;
  }

  return 3157555LL;
}

void sub_1000059F8()
{
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_100006BEC(&qword_100087438);
  sub_10000C318();
  __chkstk_darwin(v10);
  v12 = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v37[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  *(_BYTE *)(v9 + 48) = v3;
  sub_10000B2DC((uint64_t)v1, v9 + 56);
  sub_10000B31C(v7, (uint64_t)&v40, &qword_100087440);
  if (v41)
  {
    sub_10000B388(&v40, (uint64_t)v43);
    sub_10000C6C0();
  }

  else
  {
    sub_10000BBA4((uint64_t)&v40, &qword_100087440);
    NSString v17 = String._bridgeToObjectiveC()();
    char v18 = MGGetBoolAnswer();

    uint64_t v39 = v7;
    if ((v18 & 1) != 0)
    {
      type metadata accessor for BagProvider();
      type metadata accessor for ContainerConstants(0LL);
      static ContainerConstants.tempoUrlUserDefaultKey.getter();
      uint64_t v20 = v19;
      sub_100024884();
      uint64_t v22 = v21;
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v22);
      BOOL v38 = v22 != 0;
    }

    else
    {
      BOOL v38 = 0;
    }

    id v23 = [(id)objc_opt_self(NSURLSessionConfiguration) defaultSessionConfiguration];
    id v24 = [objc_allocWithZone(AMSURLSession) initWithConfiguration:v23];

    if (qword_100087140 != -1) {
      swift_once(&qword_100087140, sub_10005DD28);
    }
    uint64_t v25 = qword_10008F3F8;
    uint64_t v41 = type metadata accessor for SportsPerformanceMeasurement(0LL);
    v42 = &off_100082010;
    *(void *)&__int128 v40 = v25;
    swift_retain(v25);
    unint64_t v26 = sub_10003F2FC();
    uint64_t v28 = v27;
    v44 = &type metadata for ApiAgent;
    v45 = &off_100080488;
    v43[0] = sub_10000C41C((uint64_t)&unk_10007ED40, 112LL);
    sub_100021EAC(v24, (uint64_t)&v40, v38, v26, v28, (void *)(v43[0] + 16LL));

    swift_bridgeObjectRelease(v28);
    sub_100006E64(&v40);
    sub_10000C6C0();
    uint64_t v7 = v39;
  }

  uint64_t v29 = sub_10000C718();
  sub_10000C5C4(v29);
  uint64_t v30 = JSONDecoder.init()();
  void *v16 = sub_10002D36C;
  v16[1] = 0LL;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))( v16,  enum case for JSONDecoder.DateDecodingStrategy.custom(_:),  v13);
  dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v16);
  uint64_t v31 = v5;
  if (!v5)
  {
    swift_retain(v30);
    uint64_t v31 = v30;
  }

  *(void *)(v9 + 40) = v31;
  swift_retain(v5);
  uint64_t v32 = swift_retain(v31);
  static SportsJSONContext.Property<A>.initFailureObserver.getter(v32);
  uint64_t v33 = type metadata accessor for DefaultSportsJSONInitFailureObserver(0LL);
  sub_10000C5C4(v33);
  uint64_t v34 = DefaultSportsJSONInitFailureObserver.init()();
  v44 = (ValueMetadata *)v33;
  v45 = (_UNKNOWN **)&protocol witness table for DefaultSportsJSONInitFailureObserver;
  v43[0] = v34;
  v35 = (void (*)(__int128 *, void))dispatch thunk of JSONDecoder.userInfo.modify(&v40);
  uint64_t v36 = sub_100006BEC(&qword_100087448);
  Dictionary<>.subscript.setter(v43, v12, v36);
  v35(&v40, 0LL);
  sub_10000C5D0();
  swift_release(v31);
  swift_release(v5);
  sub_100006E64(v1);
  sub_10000BBA4(v7, &qword_100087440);
  sub_10000C248();
}

void sub_100005D84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  char v56 = v25;
  char v57 = v24;
  uint64_t v52 = v26;
  uint64_t v53 = v27;
  uint64_t v54 = v28;
  uint64_t v55 = v29;
  uint64_t v51 = v30;
  uint64_t v50 = v31;
  uint64_t v32 = sub_100006BEC(&qword_1000874B0);
  uint64_t v58 = *(void *)(v32 - 8);
  sub_10000C318();
  __chkstk_darwin(v33);
  sub_10000C42C();
  uint64_t v34 = sub_100006BEC(&qword_1000874B8);
  uint64_t v59 = *(void *)(v34 - 8);
  sub_10000C318();
  __chkstk_darwin(v35);
  sub_10000C444();
  v60[0] = *(void *)(*sub_100006C2C((void *)(v21 + 56), *(void *)(v21 + 80)) + 24LL);
  uint64_t v61 = *(void *)(*sub_100006C2C((void *)(v21 + 56), *(void *)(v21 + 80)) + 48LL);
  swift_retain(v60[0]);
  sub_10000C6B8();
  uint64_t v36 = sub_100006BEC(&qword_1000872F0);
  uint64_t v37 = sub_100006BEC(&qword_1000874C0);
  sub_10000C5F8(&qword_100087300, &qword_1000872F0);
  uint64_t v39 = v38;
  sub_10000C5F8(&qword_1000874C8, &qword_1000874C0);
  Publishers.Zip.init(_:_:)(v60, &v61, v36, v37, v39, v40);
  sub_100006DF0(v21, (uint64_t)v60);
  uint64_t v41 = sub_10000C41C((uint64_t)&unk_10007EE80, 176LL);
  *(void *)(v41 + 16) = v52;
  *(void *)(v41 + 24) = v53;
  *(void *)(v41 + 32) = v50;
  *(void *)(v41 + 40) = v51;
  *(void *)(v41 + 48) = v54;
  *(void *)(v41 + 56) = v55;
  *(_BYTE *)(v41 + 64) = v56;
  *(_BYTE *)(v41 + 65) = v57;
  memcpy((void *)(v41 + 72), v60, 0x60uLL);
  *(void *)(v41 + 168) = a21;
  uint64_t v42 = sub_10000C41C((uint64_t)&unk_10007EEA8, 32LL);
  *(void *)(v42 + 16) = sub_10000B8D8;
  *(void *)(v42 + 24) = v41;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(a21);
  sub_10000C688();
  uint64_t v43 = swift_bridgeObjectRetain(v51);
  uint64_t v44 = static Subscribers.Demand.unlimited.getter(v43);
  uint64_t v45 = sub_100006BEC(&qword_1000874D0);
  sub_10000C04C(&qword_1000874D8, &qword_1000874B0);
  uint64_t v47 = v46;
  sub_10000C04C(&qword_1000874E0, &qword_1000874D0);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v44, sub_10000B920, v42, v32, v45, v47, v48);
  sub_10000C6B0();
  sub_10000C498(v23, *(uint64_t (**)(uint64_t, uint64_t))(v58 + 8));
  sub_10000C04C(&qword_1000874E8, &qword_1000874B8);
  Publisher.eraseToAnyPublisher()(v34, v49);
  sub_10000C370(v22, *(uint64_t (**)(uint64_t, uint64_t))(v59 + 8));
  sub_10000C248();
}

uint64_t sub_100006058( unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, char a10, unsigned __int8 a11, void *a12, uint64_t a13)
{
  v113._uint64_t countAndFlagsBits = a2;
  v113._object = a3;
  unint64_t v114 = a1;
  uint64_t v18 = sub_100006BEC(&qword_1000874F8);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for URL(0LL);
  uint64_t v115 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v98 - v26;
  uint64_t v28 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    uint64_t v28 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v28)
  {
    uint64_t v33 = 0xD000000000000012LL;
    uint64_t v34 = 0x800000010006AE00LL;
LABEL_19:
    uint64_t v117 = (uint64_t)sub_100027DC8(1u, v33, v34);
    uint64_t v51 = sub_100006BEC(&qword_100087520);
    uint64_t v52 = sub_100006BEC((uint64_t *)&unk_100088B90);
    Fail.init(error:)(&v117, v51, v52, &protocol self-conformance witness table for Error);
    sub_10000C04C(&qword_100087528, &qword_1000874F8);
    uint64_t v54 = Publisher.eraseToAnyPublisher()(v18, v53);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    return v54;
  }

  uint64_t v29 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v29 = a6 & 0xFFFFFFFFFFFFLL;
  }
  if (!v29)
  {
    uint64_t v34 = 0x800000010006ADE0LL;
    uint64_t v33 = 0xD000000000000014LL;
    goto LABEL_19;
  }

  uint64_t v106 = v25;
  uint64_t v110 = a6;
  v111 = v24;
  if (!a9) {
    goto LABEL_13;
  }
  uint64_t v30 = HIBYTE(a9) & 0xF;
  if ((a9 & 0x2000000000000000LL) == 0) {
    uint64_t v30 = a8 & 0xFFFFFFFFFFFFLL;
  }
  if (v30)
  {
    uint64_t v117 = a8;
    unint64_t v118 = a9;
    swift_bridgeObjectRetain(a9);
    v31._uint64_t countAndFlagsBits = 58LL;
    v31._object = (void *)0xE100000000000000LL;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = v110;
    v32._object = (void *)a7;
    String.append(_:)(v32);
    a7 = v118;
    uint64_t v110 = v117;
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRetain(a7);
  }

  unint64_t v35 = v114;
  unint64_t v107 = a7;
  if (qword_1000870F8 != -1) {
    swift_once(&qword_1000870F8, sub_10004BF1C);
  }
  uint64_t v36 = type metadata accessor for Logger(0LL);
  uint64_t v37 = sub_10000B928(v36, (uint64_t)qword_10008F348);
  v105 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v115 + 16);
  uint64_t v38 = v105(v27, v35, v22);
  uint64_t v102 = v37;
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  BOOL v41 = os_log_type_enabled(v39, v40);
  uint64_t v42 = &unk_100067000;
  uint64_t v108 = a4;
  uint64_t v112 = v22;
  if (v41)
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    uint64_t v117 = v44;
    *(_DWORD *)uint64_t v43 = 136315138;
    sub_10000BAA8(&qword_100087518, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v22, v45);
    unint64_t v48 = v47;
    uint64_t v116 = sub_100015AD4(v46, v47, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease(v48);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v27, v22);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Tempo /register base url: %s", v43, 0xCu);
    swift_arrayDestroy(v44, 1LL);
    uint64_t v49 = v44;
    unint64_t v35 = v114;
    swift_slowDealloc(v49, -1LL, -1LL);
    uint64_t v50 = v43;
    uint64_t v42 = (void *)&unk_100067000;
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v115 + 8))(v27, v22);
  }

  uint64_t v55 = sub_100006BEC(&qword_100087500);
  uint64_t inited = swift_initStackObject(v55, v121);
  __int128 v104 = xmmword_100067230;
  *(_OWORD *)(inited + 16) = xmmword_100067230;
  unint64_t v57 = v107;
  if (qword_1000870C8 != -1) {
    swift_once(&qword_1000870C8, sub_100047A68);
  }
  uint64_t v58 = unk_10008F2E0;
  *(void *)(inited + 32) = qword_10008F2D8;
  *(void *)(inited + 40) = v58;
  *(void *)(inited + 48) = 5000257LL;
  *(void *)(inited + 56) = 0xE300000000000000LL;
  swift_bridgeObjectRetain(v58);
  uint64_t v59 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String);
  if ((a10 & 1) != 0)
  {
    if (qword_1000870E0 != -1) {
      swift_once(&qword_1000870E0, sub_100049510);
    }
    swift_bridgeObjectRetain(unk_10008F310);
    swift_isUniquelyReferenced_nonNull_native(v59);
    uint64_t v117 = v59;
    sub_100060CA8();
    uint64_t v59 = v117;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  v119 = &type metadata for TVAppFeatureFlags;
  unint64_t v120 = sub_10000B940();
  char v60 = isFeatureEnabled(_:)(&v117);
  sub_100006E64(&v117);
  if ((v60 & 1) != 0)
  {
    uint64_t v117 = 791901743LL;
    unint64_t v118 = 0xE400000000000000LL;
    String.append(_:)(v113);
    v61._uint64_t countAndFlagsBits = 0x657473696765722FLL;
    v61._object = (void *)0xE900000000000072LL;
    String.append(_:)(v61);
    uint64_t v62 = v117;
    unint64_t v63 = v118;
  }

  else
  {
    unint64_t v63 = 0xEC00000072657473LL;
    uint64_t v62 = 0x696765722F33762FLL;
  }

  v113._object = (void *)v62;
  uint64_t v64 = swift_bridgeObjectRetain_n(v63, 2LL);
  v65 = (os_log_s *)Logger.logObject.getter(v64);
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  BOOL v67 = os_log_type_enabled(v65, v66);
  unint64_t v114 = v63;
  uint64_t v109 = a5;
  uint64_t v103 = v59;
  if (v67)
  {
    v68 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v69 = swift_slowAlloc(32LL, -1LL);
    uint64_t v117 = v69;
    *(_DWORD *)v68 = v42[68];
    unint64_t v70 = v114;
    swift_bridgeObjectRetain(v114);
    uint64_t v116 = sub_100015AD4((uint64_t)v113._object, v70, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v68 + 4, v68 + 12);
    swift_bridgeObjectRelease_n(v70, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "Tempo /register path: %s", v68, 0xCu);
    swift_arrayDestroy(v69, 1LL);
    swift_slowDealloc(v69, -1LL, -1LL);
    v71 = v68;
    a5 = v109;
    swift_slowDealloc(v71, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v63, 2LL);
  }

  v113._uint64_t countAndFlagsBits = a13;
  v105(v111, v35, v112);
  v105 = (uint64_t (*)(char *, unint64_t, uint64_t))sub_100005924();
  uint64_t v102 = v72;
  if (qword_100087030 != -1) {
    swift_once(&qword_100087030, sub_100005904);
  }
  uint64_t v73 = *(void *)algn_1000872D8;
  uint64_t v101 = qword_1000872D0;
  uint64_t v74 = qword_1000870D0;
  swift_bridgeObjectRetain(*(void *)algn_1000872D8);
  swift_bridgeObjectRetain(a5);
  if (v74 != -1) {
    swift_once(&qword_1000870D0, sub_100047A8C);
  }
  uint64_t v75 = unk_10008F2F0;
  uint64_t v100 = qword_10008F2E8;
  uint64_t v99 = sub_100047768(a11);
  uint64_t v77 = v76;
  uint64_t v78 = sub_100006BEC(&qword_100087510);
  uint64_t v79 = swift_allocObject(v78, 48LL, 7LL);
  *(_OWORD *)(v79 + 16) = v104;
  *(void *)(v79 + 32) = v110;
  *(void *)(v79 + 40) = v57;
  swift_bridgeObjectRetain(v75);
  uint64_t v80 = sub_1000471BC();
  uint64_t v81 = v115;
  uint64_t v82 = *(unsigned __int8 *)(v115 + 80);
  uint64_t v83 = (v82 + 32) & ~v82;
  uint64_t v84 = v83 + v106;
  unint64_t v85 = (v83 + v106) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v86 = swift_allocObject(&unk_10007EED0, v85 + 120, v82 | 7);
  uint64_t v87 = v81;
  uint64_t v88 = v86;
  unint64_t v89 = v85 + v86;
  unint64_t v90 = v114;
  *(void *)(v86 + 16) = v113._object;
  *(void *)(v86 + 24) = v90;
  (*(void (**)(uint64_t, char *, uint64_t))(v87 + 32))(v86 + v83, v111, v112);
  *(_BYTE *)(v88 + v84) = 1;
  uint64_t v91 = v102;
  *(void *)(v89 + 8) = v105;
  *(void *)(v89 + 16) = v91;
  *(void *)(v89 + 24) = v101;
  *(void *)(v89 + 32) = v73;
  uint64_t v92 = v109;
  *(void *)(v89 + 40) = v108;
  *(void *)(v89 + 48) = v92;
  *(void *)(v89 + 56) = v100;
  *(void *)(v89 + 64) = v75;
  *(void *)(v89 + 72) = v99;
  *(void *)(v89 + 80) = v77;
  uint64_t v93 = v103;
  *(void *)(v89 + 88) = v79;
  *(void *)(v89 + 96) = v93;
  *(_BYTE *)(v89 + 104) = 1;
  *(void *)(v89 + 112) = v80;
  v94 = sub_100006C2C(a12, a12[3]);
  uint64_t v95 = a12[5];
  uint64_t countAndFlagsBits = v113._countAndFlagsBits;
  swift_bridgeObjectRetain(v113._countAndFlagsBits);
  uint64_t v54 = sub_10000A64C((uint64_t)sub_10000BA04, v88, countAndFlagsBits, 0LL, v95, (uint64_t)v94);
  swift_bridgeObjectRelease(countAndFlagsBits);
  swift_release(v88);
  return v54;
}

uint64_t sub_100006994@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100006BEC(&qword_1000874F0);
  uint64_t result = a2(a1, *(void *)(a1 + *(int *)(v6 + 48)), *(void *)(a1 + *(int *)(v6 + 48) + 8));
  *a3 = result;
  return result;
}

void sub_1000069E8()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v21 = sub_100006BEC(&qword_1000872E0);
  uint64_t v22 = *(void *)(v21 - 8);
  sub_10000C318();
  __chkstk_darwin(v10);
  sub_10000C42C();
  uint64_t v23 = *(void *)(sub_100006BEC(&qword_1000872E8) - 8);
  sub_10000C318();
  __chkstk_darwin(v11);
  sub_10000C444();
  v24[12] = *(void *)(*sub_100006C2C((void *)(v3 + 56), *(void *)(v3 + 80)) + 24LL);
  sub_100006DF0(v3, (uint64_t)v24);
  v12 = (void *)sub_10000C41C((uint64_t)&unk_10007EB10, 136LL);
  v12[2] = v9;
  v12[3] = v7;
  sub_10000C2F4(v12 + 4);
  v12[16] = v5;
  sub_10000C6B8();
  sub_10000C688();
  uint64_t v13 = sub_10000C610();
  uint64_t v14 = static Subscribers.Demand.unlimited.getter(v13);
  uint64_t v15 = sub_10000C6A8();
  uint64_t v16 = sub_100006BEC(&qword_1000872F8);
  sub_10000C04C(&qword_100087300, &qword_1000872F0);
  uint64_t v18 = v17;
  sub_10000C04C(&qword_100087308, &qword_1000872F8);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v14, sub_100006E84, v12, v15, v16, v18, v19);
  sub_10000C5D0();
  sub_10000C720();
  sub_10000C04C(&qword_100087310, &qword_1000872E0);
  Publisher.map<A>(_:)(sub_100006ED8, 0LL, v21, &type metadata for Bool);
  sub_10000C370(v2, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  sub_10000C04C(&qword_100087318, &qword_1000872E8);
  sub_10000C59C(v20);
  sub_10000C498(v1, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
  sub_10000C248();
}

uint64_t sub_100006BEC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

void *sub_100006C2C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_100006C50@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __n128 v12 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, a1, v9, v12);
  uint64_t v30 = 0LL;
  unint64_t v31 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(17LL);
  swift_bridgeObjectRelease(v31);
  uint64_t v30 = 0x65726E752F33762FLL;
  unint64_t v31 = 0xEF2F726574736967LL;
  v14._uint64_t countAndFlagsBits = a2;
  v14._object = a3;
  String.append(_:)(v14);
  uint64_t v16 = v30;
  unint64_t v15 = v31;
  uint64_t v17 = sub_1000471BC();
  uint64_t v18 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v19 = (v18 + 32) & ~v18;
  uint64_t v20 = v19 + v11;
  uint64_t v21 = swift_allocObject(&unk_10007EB38, (v20 & 0xFFFFFFFFFFFFFFF8LL) + 16, v18 | 7);
  *(void *)(v21 + 16) = v16;
  *(void *)(v21 + 24) = v15;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v21 + v19, v13, v9);
  *(_BYTE *)(v21 + v20) = 1;
  *(void *)((v20 & 0xFFFFFFFFFFFFFFF8LL) + v21 + 8) = v17;
  uint64_t v22 = sub_100006C2C(v27, v27[3]);
  uint64_t v23 = v28;
  swift_bridgeObjectRetain(v28);
  uint64_t v24 = sub_10000A8F0((uint64_t)sub_10000A8D4, v21, v23, 0LL, (uint64_t)v22);
  swift_bridgeObjectRelease(v23);
  uint64_t result = swift_release(v21);
  *uint64_t v29 = v24;
  return result;
}

uint64_t sub_100006DF0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100006E24()
{
  return swift_deallocObject(v0, 136LL, 7LL);
}

uint64_t sub_100006E64(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100006E84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100006C50(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), (void *)(v2 + 32), *(void *)(v2 + 128), a2);
}

uint64_t sub_100006E94(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

int *sub_100006ED8@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = (int *)sub_100006BEC(&qword_100087320);
  uint64_t v5 = *(void *)(a1 + result[8]);
  if (v5
    && (v6 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse), (uint64_t result = (int *)swift_dynamicCastObjCClass(v5, v6)) != 0LL))
  {
    uint64_t result = (int *)[result statusCode];
    BOOL v7 = (unint64_t)(result - 50) < 0x64;
  }

  else
  {
    BOOL v7 = 1;
  }

  *a2 = v7;
  return result;
}

void sub_100006F50()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v27 = sub_100006BEC(&qword_1000872E0);
  uint64_t v28 = *(void *)(v27 - 8);
  sub_10000C318();
  __chkstk_darwin(v14);
  sub_10000C42C();
  uint64_t v29 = *(void *)(sub_100006BEC(&qword_100087390) - 8);
  sub_10000C318();
  __chkstk_darwin(v15);
  sub_10000C444();
  uint64_t v16 = *(void *)(*sub_100006C2C((void *)(v3 + 56), *(void *)(v3 + 80)) + 24LL);
  v30[12] = v16;
  sub_100006DF0(v3, (uint64_t)v30);
  uint64_t v17 = (void *)sub_10000C41C((uint64_t)&unk_10007EC00, 152LL);
  v17[2] = v13;
  v17[3] = v11;
  v17[4] = v9;
  v17[5] = v7;
  sub_10000C2F4(v17 + 6);
  v17[18] = v5;
  swift_retain(v16);
  swift_bridgeObjectRetain(v11);
  sub_10000C688();
  uint64_t v18 = sub_10000C610();
  uint64_t v19 = static Subscribers.Demand.unlimited.getter(v18);
  uint64_t v20 = sub_10000C6A8();
  uint64_t v21 = sub_100006BEC(&qword_1000872F8);
  sub_10000C04C(&qword_100087300, &qword_1000872F0);
  uint64_t v23 = v22;
  sub_10000C04C(&qword_100087308, &qword_1000872F8);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v19, sub_10000AC58, v17, v20, v21, v23, v24);
  swift_release(v17);
  sub_10000C720();
  uint64_t v25 = sub_100006BEC(&qword_100087398);
  sub_10000C04C(&qword_100087310, &qword_1000872E0);
  Publisher.map<A>(_:)(sub_10000733C, 0LL, v27, v25);
  sub_10000C498(v2, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
  sub_10000C04C(&qword_1000873A0, &qword_100087390);
  sub_10000C59C(v26);
  sub_10000C498(v1, *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
  sub_10000C248();
}

uint64_t sub_10000717C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  unint64_t v35 = a8;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __n128 v16 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v17, a1, v13, v16);
  uint64_t v36 = 0LL;
  unint64_t v37 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(20LL);
  swift_bridgeObjectRelease(v37);
  uint64_t v36 = 0x65726E752F33762FLL;
  unint64_t v37 = 0xEF2F726574736967LL;
  v18._uint64_t countAndFlagsBits = a2;
  v18._object = a3;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = 47LL;
  v19._object = (void *)0xE100000000000000LL;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = a4;
  v20._object = a5;
  String.append(_:)(v20);
  uint64_t v21 = v36;
  unint64_t v22 = v37;
  uint64_t v23 = sub_1000471BC();
  uint64_t v24 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  uint64_t v26 = v25 + v15;
  uint64_t v27 = swift_allocObject(&unk_10007EC28, (v26 & 0xFFFFFFFFFFFFFFF8LL) + 16, v24 | 7);
  *(void *)(v27 + 16) = v21;
  *(void *)(v27 + 2sub_100006E64(v0 + 4) = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v27 + v25, v17, v13);
  *(_BYTE *)(v27 + v26) = 1;
  *(void *)((v26 & 0xFFFFFFFFFFFFFFF8LL) + v27 + 8) = v23;
  uint64_t v28 = sub_100006C2C(v33, v33[3]);
  uint64_t v29 = v34;
  swift_bridgeObjectRetain(v34);
  uint64_t v30 = sub_10000A8F0((uint64_t)sub_10000AD08, v27, v29, 0LL, (uint64_t)v28);
  swift_bridgeObjectRelease(v29);
  uint64_t result = swift_release(v27);
  *unint64_t v35 = v30;
  return result;
}

id sub_10000733C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URLRequest(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100006BEC((uint64_t *)&unk_100088B50);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100006BEC(&qword_100087320);
  Swift::String v20 = *(void **)(a1 + *(int *)(v11 + 32));
  if (v20
    && (v12 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse), (uint64_t v13 = (void *)swift_dynamicCastObjCClass(v20, v12)) != 0LL))
  {
    uint64_t v14 = (char *)[v13 statusCode];
    sub_10000B31C(a1, (uint64_t)v10, (uint64_t *)&unk_100088B50);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + *(int *)(v11 + 28), v4);
    uint64_t v15 = (int *)sub_100006BEC(&qword_100087398);
    *(_BYTE *)(a2 + v15[10]) = (unint64_t)(v14 - 200) < 0x64;
    sub_10000AC6C((uint64_t)v10, a2);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2 + v15[7], v7, v4);
  }

  else
  {
    sub_10000B31C(a1, a2, (uint64_t *)&unk_100088B50);
    uint64_t v16 = a1 + *(int *)(v11 + 28);
    uint64_t v15 = (int *)sub_100006BEC(&qword_100087398);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2 + v15[7], v16, v4);
    *(_BYTE *)(a2 + v15[10]) = 1;
  }

  uint64_t v17 = v20;
  *(void *)(a2 + v15[8]) = v20;
  *(_OWORD *)(a2 + v15[9]) = xmmword_100067240;
  return v17;
}

void sub_10000751C()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v20 = *(void *)(sub_100006BEC(&qword_1000873B0) - 8);
  sub_10000C318();
  __chkstk_darwin(v9);
  sub_10000C640();
  uint64_t v10 = *(void *)(*sub_100006C2C((void *)(v2 + 56), *(void *)(v2 + 80)) + 24LL);
  v21[12] = v10;
  sub_100006DF0(v2, (uint64_t)v21);
  uint64_t v11 = (void *)sub_10000C41C((uint64_t)&unk_10007EC50, 136LL);
  v11[2] = v8;
  v11[3] = v6;
  v11[4] = v4;
  sub_10000C2F4(v11 + 5);
  sub_10000C6A0();
  sub_10000C610();
  uint64_t v12 = swift_retain(v10);
  uint64_t v13 = static Subscribers.Demand.unlimited.getter(v12);
  uint64_t v14 = sub_10000C6A8();
  uint64_t v15 = sub_100006BEC(&qword_1000873B8);
  sub_10000C5F8(&qword_100087300, &qword_1000872F0);
  uint64_t v17 = v16;
  sub_10000C5F8(&qword_1000873C0, &qword_1000873B8);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v13, sub_10000ADEC, v11, v14, v15, v17, v18);
  sub_10000C6B0();
  sub_10000C720();
  sub_10000C04C(&qword_1000873C8, &qword_1000873B0);
  sub_10000C690(v19);
  sub_10000C370(v1, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
  sub_10000C248();
}

uint64_t sub_100007698@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v33 = a5;
  uint64_t v34 = a4;
  unint64_t v35 = a6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __n128 v12 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, a1, v9, v12);
  uint64_t v14 = (void *)0xE000000000000000LL;
  unint64_t v36 = 0LL;
  unint64_t v37 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease(v37);
  unint64_t v36 = 0xD000000000000018LL;
  unint64_t v37 = 0x800000010006ADA0LL;
  if (a3) {
    uint64_t v14 = a3;
  }
  else {
    a2 = 0LL;
  }
  swift_bridgeObjectRetain(a3);
  v15._uint64_t countAndFlagsBits = a2;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  unint64_t v16 = v36;
  unint64_t v17 = v37;
  uint64_t v32 = sub_1000471BC();
  uint64_t v18 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  unint64_t v20 = (v11 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = (v20 + 39) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(&unk_10007EC78, v21 + 8, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v22 + v19, v13, v9);
  uint64_t v23 = (unint64_t *)(v22 + v20);
  *uint64_t v23 = v16;
  v23[1] = v17;
  unint64_t v24 = v22 + ((v20 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *(void *)unint64_t v24 = 0LL;
  *(_BYTE *)(v24 + 8) = 0;
  uint64_t v25 = v33;
  *(void *)(v22 + v21) = v32;
  uint64_t v26 = v25;
  uint64_t v27 = sub_100006C2C(v25, v25[3]);
  uint64_t v28 = v26[5];
  uint64_t v29 = v34;
  swift_bridgeObjectRetain(v34);
  uint64_t v30 = sub_10000AF3C((uint64_t)sub_10000AE98, v22, v29, 0LL, v28, (uint64_t)v27);
  swift_bridgeObjectRelease(v29);
  uint64_t result = swift_release(v22);
  *unint64_t v35 = v30;
  return result;
}

uint64_t sub_100007874(uint64_t a1)
{
  unint64_t v2 = sub_10000B814();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000789C(uint64_t a1)
{
  unint64_t v2 = sub_10000B814();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000078C4(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t sub_1000078E0()
{
  return 1LL;
}

uint64_t sub_1000078E8()
{
  return 0LL;
}

uint64_t sub_1000078F4()
{
  return 0LL;
}

uint64_t sub_100007900(void *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7 = sub_100006BEC(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100006C2C(a1, v11);
  uint64_t v13 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v13, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1000079D0(void *a1)
{
  return sub_100007900( a1,  &qword_100087490,  (uint64_t (*)(void))sub_10000B814,  (uint64_t)&_s7sportsd13TempoApiAgentV9EmptyBodyV10CodingKeysON_0);
}

uint64_t sub_1000079FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000078C4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100007A24()
{
  return sub_1000078E8();
}

uint64_t sub_100007A3C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1000078E0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100007A64(uint64_t a1)
{
  unint64_t v2 = sub_10000B850();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100007A8C(uint64_t a1)
{
  unint64_t v2 = sub_10000B850();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100007AB4(void *a1)
{
  return sub_100007900( a1,  &qword_1000874A0,  (uint64_t (*)(void))sub_10000B850,  (uint64_t)&type metadata for TempoApiAgent.EmptyBody.CodingKeys);
}

uint64_t sub_100007AE0(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = v20[0];
  uint64_t v21 = v20[1];
  int64_t v4 = v20[3];
  unint64_t v5 = v20[4];
  int64_t v6 = (unint64_t)(v20[2] + 64LL) >> 6;
  uint64_t result = sub_10000C6A0();
  if (!v5) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v4 << 6);
  while (1)
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    unint64_t v17 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v9);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    sub_10000C6A0();
    sub_10000C688();
    a2(v15, v16, v18, v19);
    swift_bridgeObjectRelease(v19);
    uint64_t result = swift_bridgeObjectRelease(v16);
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      break;
    }
    if (v10 >= v6) {
      return swift_release(v3);
    }
    unint64_t v11 = *(void *)(v21 + 8 * v10);
    int64_t v12 = v4 + 1;
    if (!v11)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v6) {
        return swift_release(v3);
      }
      unint64_t v11 = *(void *)(v21 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v6) {
          return swift_release(v3);
        }
        unint64_t v11 = *(void *)(v21 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v4 + 4;
          if (v4 + 4 >= v6) {
            return swift_release(v3);
          }
          unint64_t v11 = *(void *)(v21 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v4 + 5;
            if (v4 + 5 >= v6) {
              return swift_release(v3);
            }
            unint64_t v11 = *(void *)(v21 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v4 + 6;
              while (v13 < v6)
              {
                unint64_t v11 = *(void *)(v21 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }

              return swift_release(v3);
            }
          }
        }
      }
    }

LABEL_18:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v4 = v12;
  }

  __break(1u);
  return result;
}

  *a2 = v12;
  a2[1] = v11;
}

    int64_t v4 = (v9 - 1) & v9;
    uint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    uint64_t v3 = v10;
  }

  uint64_t v25 = 0;
  uint64_t v26 = (unint64_t)(63 - v20) >> 6;
  while (++v22 != v26 || (v25 & 1) == 0)
  {
    uint64_t v27 = v22 == v26;
    if (v22 == v26) {
      uint64_t v22 = 0LL;
    }
    v25 |= v27;
    uint64_t v28 = v19[v22];
    if (v28 != -1)
    {
      uint64_t v23 = __clz(__rbit64(~v28)) + (v22 << 6);
      goto LABEL_32;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

    int64_t v4 = (v8 - 1) & v8;
    int64_t v6 = __clz(__rbit64(v8)) + (v9 << 6);
    uint64_t v3 = v9;
  }

  uint64_t v25 = 0;
  uint64_t v26 = (unint64_t)(63 - v20) >> 6;
  while (++v22 != v26 || (v25 & 1) == 0)
  {
    uint64_t v27 = v22 == v26;
    if (v22 == v26) {
      uint64_t v22 = 0LL;
    }
    v25 |= v27;
    uint64_t v28 = v19[v22];
    if (v28 != -1)
    {
      uint64_t v23 = __clz(__rbit64(~v28)) + (v22 << 6);
      goto LABEL_32;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
}

    sub_1000618DC();
    unint64_t v11 = v20 & v19;
  }

  uint64_t v18 = v16 + 2;
  if (v18 < v42)
  {
    if (!v43[v18])
    {
      while (1)
      {
        int64_t v13 = v18 + 1;
        if (__OFADD__(v18, 1LL)) {
          goto LABEL_42;
        }
        if (v13 >= v42) {
          goto LABEL_32;
        }
        ++v18;
        if (v43[v13]) {
          goto LABEL_18;
        }
      }
    }

    int64_t v13 = v18;
    goto LABEL_18;
  }

      sub_1000618DC();
      unint64_t v11 = v19 & v18;
    }
  }

  sub_1000617A0();
  *int64_t v4 = v6;
  sub_1000617C0();
}

      sub_1000618DC();
      unint64_t v11 = v21 & v20;
    }

    sub_1000617A0();
    int64_t v4 = v44;
    uint64_t v18 = v45;
    if ((a2 & 1) == 0) {
      goto LABEL_40;
    }
LABEL_36:
    sub_10006182C();
    if (v42 != v43) {
      *uint64_t v18 = -1LL << v41;
    }
    else {
      sub_10006188C(v41);
    }
    v3[2] = 0LL;
  }

    int64_t v4 = (v9 - 1) & v9;
    uint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    uint64_t v3 = v10;
  }

  unint64_t v24 = 0;
  uint64_t v25 = (unint64_t)(63 - v19) >> 6;
  while (++v21 != v25 || (v24 & 1) == 0)
  {
    uint64_t v26 = v21 == v25;
    if (v21 == v25) {
      uint64_t v21 = 0LL;
    }
    v24 |= v26;
    uint64_t v27 = v18[v21];
    if (v27 != -1)
    {
      uint64_t v22 = __clz(__rbit64(~v27)) + (v21 << 6);
      goto LABEL_32;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

void (**sub_100007C80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6))(char *, void, uint64_t)
{
  uint64_t v52 = a4;
  uint64_t v50 = a6;
  uint64_t v54 = a3;
  uint64_t v55 = a1;
  uint64_t v57 = a2;
  uint64_t v7 = type metadata accessor for URLError.Code(0LL);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URLError(0LL);
  uint64_t v51 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100006BEC(&qword_100087368);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = type metadata accessor for URL(0LL);
  unint64_t v20 = *(void (***)(char *, void, uint64_t))(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  memcpy(__dst, a5, 0x61uLL);
  v20[2](v15, v54, v19);
  sub_10000AB60((uint64_t)v15, 0LL, 1LL, v19);
  URL.init(string:relativeTo:)(v55, v57, v15);
  sub_10000BBA4((uint64_t)v15, &qword_100087368);
  if (sub_10000AB6C((uint64_t)v18, 1LL, v19) == 1)
  {
    sub_10000BBA4((uint64_t)v18, &qword_100087368);
    static URLError.Code.badURL.getter(v23);
    unint64_t v24 = sub_10000A0C0((uint64_t)_swiftEmptyArrayStorage);
    sub_10000BAA8( (unint64_t *)&qword_100087370,  (uint64_t (*)(uint64_t))&type metadata accessor for URLError);
    uint64_t v26 = _BridgedStoredNSError.init(_:userInfo:)(v9, v24, v10, v25);
    URLError._nsError.getter(v26);
    uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v12, v10);
    swift_willThrow(v27);
  }

  else
  {
    uint64_t v28 = v20;
    uint64_t v29 = v22;
    ((void (**)(char *, char *, uint64_t))v20)[4](v22, v18, v19);
    id v30 = objc_allocWithZone(&OBJC_CLASS___AMSURLRequest);
    URL._bridgeToObjectiveC()(v31);
    uint64_t v33 = v32;
    id v34 = [v30 initWithURL:v32];

    [v34 setTimeoutInterval:10.0];
    uint64_t v35 = qword_100067458[(char)v52];
    id v36 = v34;
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35);
    [v36 setHTTPMethod:v37];

    uint64_t v38 = type metadata accessor for JSONEncoder(0LL);
    swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    unint64_t v20 = (void (**)(char *, void, uint64_t))v36;
    uint64_t v39 = JSONEncoder.init()();
    unint64_t v40 = sub_10000BB68();
    uint64_t v41 = v53;
    uint64_t v42 = dispatch thunk of JSONEncoder.encode<A>(_:)(__dst, &unk_100080BA8, v40);
    if (v41)
    {
      ((void (*)(char *, uint64_t))v28[1])(v29, v19);

      swift_release(v39);
    }

    else
    {
      uint64_t v44 = v42;
      unint64_t v45 = v43;
      swift_release(v39);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000ABB4(v44, v45);
      [v20 setHTTPBody:isa];

      __chkstk_darwin(v47);
      *(&v49 - 2) = (uint64_t)v20;
      sub_100007AE0(v50, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10000C1A0);
      ((void (*)(char *, uint64_t))v28[1])(v29, v19);
    }
  }

  return v20;
}

char *sub_1000080B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v52 = a4;
  uint64_t v50 = a5;
  uint64_t v55 = a2;
  uint64_t v54 = a1;
  uint64_t v6 = type metadata accessor for URLError.Code(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URLError(0LL);
  uint64_t v51 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100006BEC(&qword_100087368);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v49 - v16;
  uint64_t v18 = type metadata accessor for URL(0LL);
  __n128 v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))(v14, a3, v18, v19);
  sub_10000AB60((uint64_t)v14, 0LL, 1LL, v18);
  URL.init(string:relativeTo:)(v54, v55, v14);
  sub_10000BBA4((uint64_t)v14, &qword_100087368);
  if (sub_10000AB6C((uint64_t)v17, 1LL, v18) == 1)
  {
    sub_10000BBA4((uint64_t)v17, &qword_100087368);
    static URLError.Code.badURL.getter(v24);
    unint64_t v25 = sub_10000A0C0((uint64_t)_swiftEmptyArrayStorage);
    sub_10000BAA8( (unint64_t *)&qword_100087370,  (uint64_t (*)(uint64_t))&type metadata accessor for URLError);
    uint64_t v27 = _BridgedStoredNSError.init(_:userInfo:)(v8, v25, v9, v26);
    URLError._nsError.getter(v27);
    uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v11, v9);
    swift_willThrow(v28);
  }

  else
  {
    uint64_t v29 = v21;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v21, v17, v18);
    id v30 = objc_allocWithZone(&OBJC_CLASS___AMSURLRequest);
    URL._bridgeToObjectiveC()(v31);
    uint64_t v33 = v32;
    id v34 = [v30 initWithURL:v32];

    [v34 setTimeoutInterval:10.0];
    uint64_t v35 = qword_100067458[(char)v52];
    id v36 = v34;
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35);
    [v36 setHTTPMethod:v37];

    uint64_t v38 = type metadata accessor for JSONEncoder(0LL);
    swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    uint64_t v17 = (char *)v36;
    uint64_t v39 = JSONEncoder.init()();
    unint64_t v40 = sub_10000AB78();
    uint64_t v41 = v53;
    uint64_t v42 = dispatch thunk of JSONEncoder.encode<A>(_:)(v40, &_s7sportsd13TempoApiAgentV9EmptyBodyVN_0, v40);
    if (v41)
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v18);

      swift_release(v39);
    }

    else
    {
      uint64_t v44 = v42;
      unint64_t v45 = v43;
      swift_release(v39);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000ABB4(v44, v45);
      [v17 setHTTPBody:isa];

      __chkstk_darwin(v47);
      *(&v49 - 2) = (uint64_t)v17;
      sub_100007AE0(v50, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10000ABF8);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v18);
    }
  }

  return v17;
}

char *sub_1000084C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v52 = a4;
  uint64_t v50 = a5;
  uint64_t v55 = a2;
  uint64_t v54 = a1;
  uint64_t v6 = type metadata accessor for URLError.Code(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URLError(0LL);
  uint64_t v51 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100006BEC(&qword_100087368);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v49 - v16;
  uint64_t v18 = type metadata accessor for URL(0LL);
  __n128 v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))(v14, a3, v18, v19);
  sub_10000AB60((uint64_t)v14, 0LL, 1LL, v18);
  URL.init(string:relativeTo:)(v54, v55, v14);
  sub_10000BBA4((uint64_t)v14, &qword_100087368);
  if (sub_10000AB6C((uint64_t)v17, 1LL, v18) == 1)
  {
    sub_10000BBA4((uint64_t)v17, &qword_100087368);
    static URLError.Code.badURL.getter(v24);
    unint64_t v25 = sub_10000A0C0((uint64_t)_swiftEmptyArrayStorage);
    sub_10000BAA8( (unint64_t *)&qword_100087370,  (uint64_t (*)(uint64_t))&type metadata accessor for URLError);
    uint64_t v27 = _BridgedStoredNSError.init(_:userInfo:)(v8, v25, v9, v26);
    URLError._nsError.getter(v27);
    uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v11, v9);
    swift_willThrow(v28);
  }

  else
  {
    uint64_t v29 = v21;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v21, v17, v18);
    id v30 = objc_allocWithZone(&OBJC_CLASS___AMSURLRequest);
    URL._bridgeToObjectiveC()(v31);
    uint64_t v33 = v32;
    id v34 = [v30 initWithURL:v32];

    [v34 setTimeoutInterval:10.0];
    uint64_t v35 = qword_100067458[(char)v52];
    id v36 = v34;
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35);
    [v36 setHTTPMethod:v37];

    uint64_t v38 = type metadata accessor for JSONEncoder(0LL);
    swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    uint64_t v17 = (char *)v36;
    uint64_t v39 = JSONEncoder.init()();
    unint64_t v40 = sub_10000AD70();
    uint64_t v41 = v53;
    uint64_t v42 = dispatch thunk of JSONEncoder.encode<A>(_:)(v40, &type metadata for TempoApiAgent.EmptyBody, v40);
    if (v41)
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v18);

      swift_release(v39);
    }

    else
    {
      uint64_t v44 = v42;
      unint64_t v45 = v43;
      swift_release(v39);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000ABB4(v44, v45);
      [v17 setHTTPBody:isa];

      __chkstk_darwin(v47);
      *(&v49 - 2) = (uint64_t)v17;
      sub_100007AE0(v50, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10000C1A0);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v18);
    }
  }

  return v17;
}

id sub_1000088E0()
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  URL._bridgeToObjectiveC()(v2);
  int64_t v4 = v3;
  id v5 = [v1 initWithURL:v3];

  uint64_t v6 = sub_10000C4E8();
  sub_10000C5B0(v6);
  return v5;
}

void sub_100008948()
{
  uint64_t v4 = v3;
  uint64_t v57 = v5;
  uint64_t v54 = v6;
  uint64_t v56 = v7;
  uint64_t v52 = sub_10000C424();
  uint64_t v8 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  sub_10000C4A0(v9, v10, v11, v12, v13, v14, v15, v16, v46);
  uint64_t v17 = sub_100006BEC((uint64_t *)&unk_100088B50);
  uint64_t v18 = sub_10000C734(v17);
  __chkstk_darwin(v18);
  sub_10000C4C0(v19, v20, v21, v22, v23, v24, v25, v26, v47);
  sub_100006BEC(&qword_1000873F8);
  sub_10000C6D8();
  __chkstk_darwin(v27);
  sub_10000C628();
  uint64_t v53 = *(void *)(sub_100006BEC(&qword_100087450) - 8);
  sub_10000C318();
  __chkstk_darwin(v28);
  sub_10000C4F0(v29, v48);
  uint64_t v55 = *(void *)(sub_100006BEC(&qword_100087458) - 8);
  sub_10000C318();
  __chkstk_darwin(v30);
  sub_10000C2A0(v31, v49);
  sub_10000C748();
  uint64_t v32 = sub_100006BEC(&qword_100087460);
  uint64_t v58 = v4;
  uint64_t v33 = sub_10000C718();
  sub_10000C04C(&qword_100087410, &qword_1000873F8);
  uint64_t v35 = v34;
  unint64_t v36 = sub_10000B784();
  sub_10000BAA8(&qword_100087420, (uint64_t (*)(uint64_t))&type metadata accessor for JSONDecoder);
  Publisher.decode<A, B>(type:decoder:)(v32, &v58, v0, v32, v33, v35, v36, v37);
  sub_10000C370(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10000C48C();
  sub_10000B31C(v57, v50, (uint64_t *)&unk_100088B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v51, v56, v52);
  sub_10000C658();
  sub_10000C260();
  uint64_t v40 = swift_allocObject(&unk_10007EE30, v38, v39);
  sub_10000C2F4((void *)(v40 + 16));
  *(void *)(v40 + 112) = v54;
  sub_10000C6F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v40 + v33, v51, v52);
  sub_10000C470();
  id v41 = v54;
  uint64_t v42 = sub_100006BEC(&qword_100087478);
  sub_10000C04C(&qword_100087480, &qword_100087450);
  sub_10000C3A8((uint64_t)sub_10000B804);
  sub_10000C5D0();
  sub_10000C370(v42, *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8));
  sub_10000B31C(v57, v50, (uint64_t *)&unk_100088B50);
  sub_10000C48C();
  sub_10000C608((uint64_t)&v60);
  sub_10000C618();
  sub_10000C340();
  uint64_t v44 = sub_10000C728((uint64_t)&unk_10007EE58, v43);
  sub_10000C3F8(v44);
  sub_10000C2F4((void *)(v0 + v36));
  sub_10000C608((uint64_t)&v59);
  sub_10000C5D8();
  uint64_t v45 = sub_100006BEC((uint64_t *)&unk_100088B90);
  sub_10000C04C(&qword_100087488, &qword_100087458);
  sub_10000C378((uint64_t)sub_10000B2D8);
  swift_release(v0);
  sub_10000C498(v45, *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8));
  sub_10000C248();
}

void sub_100008D10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v69 = v27;
  uint64_t v78 = v29;
  uint64_t v81 = v30;
  uint64_t v76 = sub_10000C424();
  uint64_t v80 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  sub_10000C4A0(v31, v32, v33, v34, v35, v36, v37, v38, v69);
  uint64_t v39 = sub_100006BEC((uint64_t *)&unk_100088B50);
  uint64_t v40 = sub_10000C734(v39);
  __chkstk_darwin(v40);
  sub_10000C4C0(v41, v42, v43, v44, v45, v46, v47, v48, v70);
  sub_100006BEC(&qword_1000873F8);
  sub_10000C6D8();
  __chkstk_darwin(v49);
  sub_10000C628();
  uint64_t v77 = *(void *)(sub_100006BEC(&qword_100087580) - 8);
  sub_10000C318();
  __chkstk_darwin(v50);
  sub_10000C4F0(v51, v71);
  uint64_t v79 = *(void *)(sub_100006BEC(&qword_100087588) - 8);
  sub_10000C318();
  __chkstk_darwin(v52);
  sub_10000C2A0(v53, v72);
  sub_10000C748();
  uint64_t v54 = sub_100006BEC(&qword_100087590);
  uint64_t v82 = v26;
  uint64_t v55 = sub_10000C718();
  sub_10000C04C(&qword_100087410, &qword_1000873F8);
  uint64_t v57 = v56;
  sub_10000C04C(&qword_100087598, &qword_100087590);
  uint64_t v59 = v58;
  sub_10000BAA8(&qword_100087420, (uint64_t (*)(uint64_t))&type metadata accessor for JSONDecoder);
  Publisher.decode<A, B>(type:decoder:)(v54, &v82, v20, v54, v55, v57, v59, v60);
  sub_10000C370(v21, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  sub_10000C48C();
  sub_10000B31C(v28, v74, (uint64_t *)&unk_100088B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v75, v81, v76);
  sub_10000C658();
  sub_10000C260();
  uint64_t v63 = swift_allocObject(&unk_10007EF98, v61, v62);
  sub_10000C2F4((void *)(v63 + 16));
  *(void *)(v63 + 112) = v78;
  sub_10000C6F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 32))(v63 + v54, v75, v76);
  sub_10000C470();
  id v64 = v78;
  uint64_t v65 = sub_100006BEC(&qword_1000875A0);
  sub_10000C04C(&qword_1000875A8, &qword_100087580);
  sub_10000C3A8((uint64_t)sub_10000BD88);
  sub_10000C5D0();
  sub_10000C370(v65, *(uint64_t (**)(uint64_t, uint64_t))(v77 + 8));
  sub_10000B31C(v73, v74, (uint64_t *)&unk_100088B50);
  sub_10000C48C();
  sub_10000C608((uint64_t)&v83);
  sub_10000C618();
  sub_10000C340();
  uint64_t v67 = sub_10000C728((uint64_t)&unk_10007EFC0, v66);
  sub_10000C3F8(v67);
  sub_10000C2F4((void *)(v80 + v57));
  sub_10000C608((uint64_t)&a18);
  sub_10000C5D8();
  uint64_t v68 = sub_100006BEC((uint64_t *)&unk_100088B90);
  sub_10000C04C(&qword_1000875B0, &qword_100087588);
  sub_10000C378((uint64_t)sub_10000B2D8);
  swift_release(v80);
  sub_10000C498(v68, *(uint64_t (**)(uint64_t, uint64_t))(v79 + 8));
  sub_10000C248();
}

uint64_t sub_1000090F4@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v73 = a8;
  uint64_t v82 = a7;
  uint64_t v61 = a5;
  uint64_t v71 = a4;
  uint64_t v79 = a3;
  uint64_t v75 = a9;
  uint64_t v67 = type metadata accessor for URLRequest(0LL);
  uint64_t v78 = *(void *)(v67 - 8);
  uint64_t v68 = *(void *)(v78 + 64);
  __chkstk_darwin(v67);
  uint64_t v66 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100006BEC((uint64_t *)&unk_100088B50);
  uint64_t v65 = *(void *)(v14 - 8);
  uint64_t v80 = *(void *)(v65 + 64);
  __chkstk_darwin(v14);
  uint64_t v64 = (uint64_t)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100006BEC(&qword_1000873F8);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = sub_100006BEC(&qword_100087550);
  uint64_t v70 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v63 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = sub_100006BEC(&qword_100087558);
  uint64_t v74 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v81 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v76 = a1;
  __src[0] = a1;
  __src[1] = a2;
  unint64_t v77 = a2;
  sub_10000B210(a1, a2);
  Just.init(_:)(__src);
  uint64_t v22 = _s20RegistrationResponseVMa(0LL);
  __src[0] = a6;
  uint64_t v23 = type metadata accessor for JSONDecoder(0LL);
  sub_10000C04C(&qword_100087410, &qword_1000873F8);
  uint64_t v25 = v24;
  sub_10000BAA8(&qword_100087560, _s20RegistrationResponseVMa);
  uint64_t v27 = v26;
  sub_10000BAA8(&qword_100087420, (uint64_t (*)(uint64_t))&type metadata accessor for JSONDecoder);
  Publisher.decode<A, B>(type:decoder:)(v22, __src, v16, v22, v23, v25, v27, v28);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  sub_10000AAA8(v82, (uint64_t)__src);
  uint64_t v29 = v64;
  sub_10000B31C(a5, v64, (uint64_t *)&unk_100088B50);
  uint64_t v30 = v78;
  uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
  uint64_t v31 = v66;
  uint64_t v32 = v67;
  v62(v66, v79, v67);
  uint64_t v33 = *(unsigned __int8 *)(v65 + 80);
  uint64_t v34 = (v33 + 120) & ~v33;
  uint64_t v35 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v36 = (v80 + v35 + v34) & ~v35;
  uint64_t v65 = v33 | v35 | 7;
  v68 += 7LL;
  unint64_t v37 = (v68 + v36) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v38 = swift_allocObject(&unk_10007EF48, v37 + 16, v65);
  memcpy((void *)(v38 + 16), __src, 0x60uLL);
  uint64_t v39 = v71;
  *(void *)(v38 + 112) = v71;
  sub_10000AC6C(v29, v38 + v34);
  uint64_t v78 = *(void *)(v78 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v78)(v38 + v36, v31, v32);
  uint64_t v40 = (uint64_t *)(v38 + v37);
  uint64_t v41 = v76;
  unint64_t v42 = v77;
  *uint64_t v40 = v76;
  v40[1] = v42;
  sub_10000B210(v41, v42);
  id v43 = v39;
  uint64_t v44 = sub_100006BEC(&qword_100087520);
  sub_10000C04C(&qword_100087568, &qword_100087550);
  uint64_t v45 = v69;
  uint64_t v46 = v44;
  uint64_t v47 = v63;
  Publisher.map<A>(_:)(sub_10000BAE0, v38, v69, v46);
  swift_release(v38);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v47, v45);
  sub_10000B31C(v61, v29, (uint64_t *)&unk_100088B50);
  sub_10000AAA8(v82, (uint64_t)__src);
  uint64_t v48 = v31;
  v62(v31, v79, v32);
  sub_10000B2DC(v73, (uint64_t)v83);
  uint64_t v49 = (v33 + 32) & ~v33;
  unint64_t v50 = (v80 + v49 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v51 = (v35 + v50 + 96) & ~v35;
  unint64_t v52 = (v68 + v51) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v53 = swift_allocObject(&unk_10007EF70, v52 + 40, v65);
  uint64_t v54 = v76;
  unint64_t v55 = v77;
  *(void *)(v53 + 16) = v76;
  *(void *)(v53 + 2sub_100006E64(v0 + 4) = v55;
  sub_10000AC6C(v29, v53 + v49);
  memcpy((void *)(v53 + v50), __src, 0x60uLL);
  ((void (*)(uint64_t, char *, uint64_t))v78)(v53 + v51, v48, v32);
  sub_10000B388(v83, v53 + v52);
  sub_10000B210(v54, v55);
  uint64_t v56 = sub_100006BEC((uint64_t *)&unk_100088B90);
  sub_10000C04C(&qword_100087570, &qword_100087558);
  uint64_t v57 = v72;
  uint64_t v58 = v56;
  uint64_t v59 = v81;
  Publisher.mapError<A>(_:)(sub_10000B2D8, v53, v72, v58);
  swift_release(v53);
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v59, v57);
}

uint64_t sub_100009700@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v72 = a8;
  uint64_t v81 = a7;
  uint64_t v60 = a5;
  uint64_t v70 = a4;
  uint64_t v78 = a3;
  uint64_t v74 = a9;
  uint64_t v67 = type metadata accessor for URLRequest(0LL);
  uint64_t v77 = *(void *)(v67 - 8);
  uint64_t v13 = *(void *)(v77 + 64);
  __chkstk_darwin(v67);
  uint64_t v66 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100006BEC((uint64_t *)&unk_100088B50);
  uint64_t v65 = *(void *)(v14 - 8);
  uint64_t v79 = *(void *)(v65 + 64);
  __chkstk_darwin(v14);
  uint64_t v64 = (uint64_t)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100006BEC(&qword_1000873F8);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = sub_100006BEC(&qword_100087400);
  uint64_t v69 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v63 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = sub_100006BEC(&qword_100087408);
  uint64_t v73 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v80 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v75 = a1;
  __src[0] = a1;
  __src[1] = a2;
  unint64_t v76 = a2;
  sub_10000B210(a1, a2);
  Just.init(_:)(__src);
  __src[0] = a6;
  uint64_t v22 = type metadata accessor for JSONDecoder(0LL);
  sub_10000C04C(&qword_100087410, &qword_1000873F8);
  uint64_t v24 = v23;
  unint64_t v25 = sub_10000B254();
  sub_10000BAA8(&qword_100087420, (uint64_t (*)(uint64_t))&type metadata accessor for JSONDecoder);
  Publisher.decode<A, B>(type:decoder:)(&unk_10007FF88, __src, v16, &unk_10007FF88, v22, v24, v25, v26);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  sub_10000AAA8(v81, (uint64_t)__src);
  uint64_t v27 = v64;
  sub_10000B31C(a5, v64, (uint64_t *)&unk_100088B50);
  uint64_t v28 = v77;
  uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
  uint64_t v29 = v66;
  uint64_t v30 = v67;
  v61(v66, v78, v67);
  uint64_t v31 = *(unsigned __int8 *)(v65 + 80);
  uint64_t v32 = (v31 + 120) & ~v31;
  uint64_t v33 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v34 = (v79 + v33 + v32) & ~v33;
  uint64_t v65 = v31 | v33 | 7;
  uint64_t v62 = v13 + 7;
  unint64_t v35 = (v13 + 7 + v34) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v36 = swift_allocObject(&unk_10007ECF0, v35 + 16, v65);
  memcpy((void *)(v36 + 16), __src, 0x60uLL);
  unint64_t v37 = v70;
  *(void *)(v36 + 112) = v70;
  sub_10000AC6C(v27, v36 + v32);
  uint64_t v77 = *(void *)(v77 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v77)(v36 + v34, v29, v30);
  uint64_t v38 = (uint64_t *)(v36 + v35);
  uint64_t v39 = v75;
  unint64_t v40 = v76;
  *uint64_t v38 = v75;
  v38[1] = v40;
  sub_10000B210(v39, v40);
  id v41 = v37;
  uint64_t v42 = sub_100006BEC(&qword_1000873D8);
  sub_10000C04C(&qword_100087428, &qword_100087400);
  uint64_t v43 = v68;
  uint64_t v44 = v42;
  uint64_t v45 = v63;
  Publisher.map<A>(_:)(sub_10000B294, v36, v68, v44);
  swift_release(v36);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v45, v43);
  sub_10000B31C(v60, v27, (uint64_t *)&unk_100088B50);
  sub_10000AAA8(v81, (uint64_t)__src);
  uint64_t v46 = v29;
  uint64_t v47 = v30;
  v61(v29, v78, v30);
  sub_10000B2DC(v72, (uint64_t)v82);
  uint64_t v48 = (v31 + 32) & ~v31;
  unint64_t v49 = (v79 + v48 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v50 = (v33 + v49 + 96) & ~v33;
  unint64_t v51 = (v62 + v50) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v52 = swift_allocObject(&unk_10007ED18, v51 + 40, v65);
  uint64_t v53 = v75;
  unint64_t v54 = v76;
  *(void *)(v52 + 16) = v75;
  *(void *)(v52 + 2sub_100006E64(v0 + 4) = v54;
  sub_10000AC6C(v27, v52 + v48);
  memcpy((void *)(v52 + v49), __src, 0x60uLL);
  ((void (*)(uint64_t, char *, uint64_t))v77)(v52 + v50, v46, v47);
  sub_10000B388(v82, v52 + v51);
  sub_10000B210(v53, v54);
  uint64_t v55 = sub_100006BEC((uint64_t *)&unk_100088B90);
  sub_10000C04C(&qword_100087430, &qword_100087408);
  uint64_t v56 = v71;
  uint64_t v57 = v55;
  uint64_t v58 = v80;
  Publisher.mapError<A>(_:)(sub_10000B2D8, v52, v71, v57);
  swift_release(v52);
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v58, v56);
}

uint64_t sub_100009CDC@<X0>( uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14 = (int *)sub_100006BEC(&qword_100087478);
  uint64_t v15 = a7 + v14[7];
  uint64_t v16 = type metadata accessor for URLRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v15, a4, v16);
  *(void *)(a7 + v14[10]) = a1;
  *(void *)(a7 + v14[8]) = a2;
  uint64_t v17 = (uint64_t *)(a7 + v14[9]);
  *uint64_t v17 = a5;
  v17[1] = a6;
  id v18 = a2;
  swift_bridgeObjectRetain(a1);
  return sub_10000B210(a5, a6);
}

uint64_t sub_100009DB0@<X0>( uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14 = (int *)sub_100006BEC(&qword_1000875A0);
  uint64_t v15 = a7 + v14[7];
  uint64_t v16 = type metadata accessor for URLRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v15, a4, v16);
  *(void *)(a7 + v14[10]) = a1;
  *(void *)(a7 + v14[8]) = a2;
  uint64_t v17 = (uint64_t *)(a7 + v14[9]);
  *uint64_t v17 = a5;
  v17[1] = a6;
  id v18 = a2;
  swift_retain(a1);
  return sub_10000B210(a5, a6);
}

uint64_t sub_100009E84@<X0>( uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14 = (int *)sub_100006BEC(&qword_100087520);
  uint64_t v15 = a7 + v14[7];
  uint64_t v16 = type metadata accessor for URLRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v15, a4, v16);
  sub_10000BB24(a1, a7 + v14[10]);
  *(void *)(a7 + v14[8]) = a2;
  uint64_t v17 = (uint64_t *)(a7 + v14[9]);
  *uint64_t v17 = a5;
  v17[1] = a6;
  id v18 = a2;
  return sub_10000B210(a5, a6);
}

uint64_t sub_100009F58@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, unint64_t a9)
{
  uint64_t v17 = (int *)sub_100006BEC(&qword_1000873D8);
  uint64_t v18 = a8 + v17[7];
  uint64_t v19 = type metadata accessor for URLRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))(v18, a6, v19);
  uint64_t v20 = (void *)(a8 + v17[10]);
  *uint64_t v20 = a1;
  v20[1] = a2;
  v20[2] = a3;
  *(void *)(a8 + v17[8]) = a4;
  uint64_t v21 = (uint64_t *)(a8 + v17[9]);
  *uint64_t v21 = a7;
  v21[1] = a9;
  id v22 = a4;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  return sub_10000B210(a7, a9);
}

uint64_t sub_10000A050(char *a1, uint64_t (*a2)(uint64_t, uint64_t, char *, void, char *))
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = (int *)sub_100006BEC(&qword_100088BB0);
  return a2(v4, v5, &a1[v6[12]], *(void *)&a1[v6[16]], &a1[v6[20]]);
}

unint64_t sub_10000A0C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100006BEC(&qword_100087380);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000B31C(v7, (uint64_t)&v16, &qword_100087388);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_10000A1F4(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_10000AC00(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000A1F4(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_10000A258(a1, a2, v4);
}

unint64_t sub_10000A258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    uint64_t v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t i = (i + 1) & v13;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v14 = (void *)(v9 + 16 * i);
        uint64_t v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v13; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
          {
            uint64_t v17 = (void *)(v9 + 16 * i);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

uint64_t sub_10000A39C(void *a1)
{
  id v2 = [a1 infoDictionary];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  return v3;
}

uint64_t sub_10000A410@<X0>( uint64_t *a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return sub_100009CDC(*a1, a2, a3, a4, a5, a6, a7);
}

void sub_10000A418()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = sub_100006BEC(&qword_100087348);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10000C640();
  v21[3] = &type metadata for AMSApiRequest;
  v21[4] = &off_10007F7E0;
  uint64_t v13 = (void *)sub_10000C41C((uint64_t)&unk_10007EBB0, 48LL);
  v21[0] = v13;
  v13[2] = v10;
  v13[3] = v8;
  v13[4] = v6;
  v13[5] = v4;
  sub_10000AAA8(v2, (uint64_t)v20);
  sub_10000B2DC((uint64_t)v21, (uint64_t)v19);
  uint64_t v14 = sub_10000C41C((uint64_t)&unk_10007EBD8, 152LL);
  memcpy((void *)(v14 + 16), v20, 0x60uLL);
  sub_10000B388(v19, v14 + 112);
  uint64_t v15 = sub_100006BEC(&qword_100087350);
  sub_10000C5C4(v15);
  id v16 = v4;
  sub_10000C6B8();
  sub_10000C610();
  v20[0] = Future.init(_:)(sub_10000AB54, v14);
  uint64_t v17 = sub_100006BEC((uint64_t *)&unk_100088B90);
  sub_10000C04C(&qword_100087358, &qword_100087350);
  Publisher.mapError<A>(_:)(sub_10003EAB0, 0LL, v15, v17);
  sub_10000C6B0();
  sub_10000C04C(&qword_100087360, &qword_100087348);
  sub_10000C690(v18);
  sub_10000C370(v0, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  sub_100006E64(v21);
  sub_10000C248();
}

uint64_t sub_10000A5CC@<X0>( uint64_t *a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return sub_100009DB0(*a1, a2, a3, a4, a5, a6, a7);
}

void (**sub_10000A5D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__src, uint64_t a6))(char *, void, uint64_t)
{
  return sub_100007C80(a1, a2, a3, a4, __dst, a6);
}

uint64_t sub_10000A64C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100006BEC(&qword_100087530);
  uint64_t v32 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v36[3] = &type metadata for AMSApiRequest;
  v36[4] = &off_10007F7E0;
  uint64_t v15 = (void *)swift_allocObject(&unk_10007EBB0, 48LL, 7LL);
  v36[0] = v15;
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  id v16 = a4;
  swift_retain(a2);
  swift_bridgeObjectRetain(a3);
  sub_10000A418();
  uint64_t v35 = v17;
  sub_10000AAA8(a6, (uint64_t)__src);
  sub_10000B2DC((uint64_t)v36, (uint64_t)v33);
  uint64_t v18 = swift_allocObject(&unk_10007EEF8, 160LL, 7LL);
  *(void *)(v18 + 16) = a5;
  memcpy((void *)(v18 + 24), __src, 0x60uLL);
  sub_10000B388(v33, v18 + 120);
  uint64_t v19 = swift_allocObject(&unk_10007EF20, 32LL, 7LL);
  *(void *)(v19 + 16) = sub_10000BA98;
  *(void *)(v19 + 2sub_100006E64(v0 + 4) = v18;
  uint64_t v20 = swift_retain(a5);
  uint64_t v21 = static Subscribers.Demand.unlimited.getter(v20);
  uint64_t v22 = sub_100006BEC(&qword_100087330);
  uint64_t v23 = sub_100006BEC(&qword_100087520);
  uint64_t v24 = sub_100006BEC(&qword_100087538);
  sub_10000C04C(&qword_100087338, &qword_100087330);
  uint64_t v26 = v25;
  sub_10000C04C(&qword_100087540, &qword_100087538);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v21, sub_10000C1B4, v19, v22, v23, v24, v26, v27);
  swift_release(v19);
  swift_release(v35);
  sub_10000C04C(&qword_100087548, &qword_100087530);
  uint64_t v29 = Publisher.eraseToAnyPublisher()(v12, v28);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v12);
  sub_100006E64(v36);
  return v29;
}

uint64_t sub_10000A8D4()
{
  return sub_10000AD24((uint64_t (*)(void, void, uint64_t, void, void))sub_1000080B0);
}

uint64_t sub_10000A8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_100006BEC(&qword_100087328);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &__src[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_10000A418();
  uint64_t v20 = v10;
  sub_10000AAA8(a5, (uint64_t)__src);
  uint64_t v11 = swift_allocObject(&unk_10007EB60, 112LL, 7LL);
  memcpy((void *)(v11 + 16), __src, 0x60uLL);
  uint64_t v12 = swift_allocObject(&unk_10007EB88, 32LL, 7LL);
  *(void *)(v12 + 16) = sub_10000AAE8;
  *(void *)(v12 + 2sub_100006E64(v0 + 4) = v11;
  uint64_t v13 = sub_100006BEC(&qword_100087330);
  uint64_t v14 = sub_100006BEC(&qword_100087320);
  sub_10000C04C(&qword_100087338, &qword_100087330);
  Publisher.map<A>(_:)(sub_10000C1B4, v12, v13, v14);
  swift_release(v12);
  swift_release(v20);
  sub_10000C04C(&qword_100087340, &qword_100087328);
  uint64_t v16 = Publisher.eraseToAnyPublisher()(v6, v15);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  return v16;
}

uint64_t sub_10000AAA8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10000AAE8@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_10003D8D8(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10000AAF0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10000AB24()
{
  return swift_deallocObject(v0, 152LL, 7LL);
}

void sub_10000AB54()
{
}

uint64_t sub_10000AB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_10000AB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

unint64_t sub_10000AB78()
{
  unint64_t result = qword_100087378;
  if (!qword_100087378)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000672C4, &_s7sportsd13TempoApiAgentV9EmptyBodyVN_0);
    atomic_store(result, (unint64_t *)&qword_100087378);
  }

  return result;
}

uint64_t sub_10000ABB4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000ABF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000222A0(a1, a2, a3, a4, *(void *)(v4 + 16));
}

_OWORD *sub_10000AC00(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10000AC10()
{
  return swift_deallocObject(v0, 152LL, 7LL);
}

uint64_t sub_10000AC58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10000717C( a1,  *(void *)(v2 + 16),  *(void **)(v2 + 24),  *(void *)(v2 + 32),  *(void **)(v2 + 40),  (void *)(v2 + 48),  *(void *)(v2 + 144),  a2);
}

uint64_t sub_10000AC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006BEC((uint64_t *)&unk_100088B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000ACB8()
{
  uint64_t v6 = v5 + 16;
  sub_10000C4E0();
  sub_10000C370(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  swift_bridgeObjectRelease(*(void *)(v4 + 8));
  return sub_10000C45C(v0, v6, v1);
}

uint64_t sub_10000AD08()
{
  return sub_10000AD24((uint64_t (*)(void, void, uint64_t, void, void))sub_1000084C8);
}

uint64_t sub_10000AD24(uint64_t (*a1)(void, void, uint64_t, void, void))
{
  return a1( *(void *)(v1 + 16),  *(void *)(v1 + 24),  v1 + v3,  *(unsigned __int8 *)(v1 + v4),  *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + v1 + 8));
}

unint64_t sub_10000AD70()
{
  unint64_t result = qword_1000873A8;
  if (!qword_1000873A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006729C, &type metadata for TempoApiAgent.EmptyBody);
    atomic_store(result, (unint64_t *)&qword_1000873A8);
  }

  return result;
}

uint64_t sub_10000ADAC()
{
  return swift_deallocObject(v0, 136LL, 7LL);
}

uint64_t sub_10000ADEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100007698(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), (void *)(v2 + 40), a2);
}

uint64_t sub_10000ADFC()
{
  uint64_t v1 = sub_10000C4E8();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 39) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + ((v6 + 23) & 0xFFFFFFFFFFFFF8LL)));
  swift_bridgeObjectRelease(*(void *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

id sub_10000AE98()
{
  return sub_1000222A4( v0 + v1,  *(void *)(v0 + v2),  *(void *)(v0 + v2 + 8),  *(void *)(v0 + ((v2 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(unsigned __int8 *)(v0 + ((v2 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(v0 + ((v2 + 39) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10000AEF8@<X0>( uint64_t *a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return sub_100009F58(*a1, a1[1], a1[2], a2, a3, a4, a5, a7, a6);
}

uint64_t sub_10000AF3C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100006BEC(&qword_1000873D0);
  uint64_t v32 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v36[3] = &type metadata for AMSApiRequest;
  v36[4] = &off_10007F7E0;
  uint64_t v15 = (void *)swift_allocObject(&unk_10007EBB0, 48LL, 7LL);
  v36[0] = v15;
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  id v16 = a4;
  swift_retain(a2);
  swift_bridgeObjectRetain(a3);
  sub_10000A418();
  uint64_t v35 = v17;
  sub_10000AAA8(a6, (uint64_t)__src);
  sub_10000B2DC((uint64_t)v36, (uint64_t)v33);
  uint64_t v18 = swift_allocObject(&unk_10007ECA0, 160LL, 7LL);
  *(void *)(v18 + 1sub_100006E64(v0 + 6) = a5;
  memcpy((void *)(v18 + 24), __src, 0x60uLL);
  sub_10000B388(v33, v18 + 120);
  uint64_t v19 = swift_allocObject(&unk_10007ECC8, 32LL, 7LL);
  *(void *)(v19 + 1sub_100006E64(v0 + 6) = sub_10000B1C4;
  *(void *)(v19 + 2sub_100006E64(v0 + 4) = v18;
  uint64_t v20 = swift_retain(a5);
  uint64_t v21 = static Subscribers.Demand.unlimited.getter(v20);
  uint64_t v22 = sub_100006BEC(&qword_100087330);
  uint64_t v23 = sub_100006BEC(&qword_1000873D8);
  uint64_t v24 = sub_100006BEC(&qword_1000873E0);
  sub_10000C04C(&qword_100087338, &qword_100087330);
  uint64_t v26 = v25;
  sub_10000C04C(&qword_1000873E8, &qword_1000873E0);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v21, sub_10000B1F8, v19, v22, v23, v24, v26, v27);
  swift_release(v19);
  swift_release(v35);
  sub_10000C04C(&qword_1000873F0, &qword_1000873D0);
  uint64_t v29 = Publisher.eraseToAnyPublisher()(v12, v28);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v12);
  sub_100006E64(v36);
  return v29;
}

uint64_t sub_10000B1C4@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_100009700(a1, a2, a3, a4, a5, *(void *)(v6 + 16), v6 + 24, v6 + 120, a6);
}

uint64_t sub_10000B1D4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000B1F8(char *a1)
{
  return sub_10000A050(a1, *(uint64_t (**)(uint64_t, uint64_t, char *, void, char *))(v1 + 16));
}

uint64_t sub_10000B210(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    ((void (*)(void))swift_retain)();
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_10000B254()
{
  unint64_t result = qword_100087418;
  if (!qword_100087418)
  {
    unint64_t result = swift_getWitnessTable(&unk_100067F10, &unk_10007FF88);
    atomic_store(result, (unint64_t *)&qword_100087418);
  }

  return result;
}

uint64_t sub_10000B294()
{
  uint64_t v0 = (uint64_t *)sub_10000C1F4();
  return sub_10000AEF8(v0, v1, v2, v3, v4, v5, v6);
}

void sub_10000B2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 2sub_100006E64(v0 + 4) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_10000C510();
}

void sub_10000B31C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100006BEC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_10000C510();
}

uint64_t sub_10000B360()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_10000B388(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 1sub_100006E64(v0 + 6) = v3;
  return a2;
}

ValueMetadata *type metadata accessor for TempoApiAgent.EmptyBody()
{
  return &type metadata for TempoApiAgent.EmptyBody;
}

ValueMetadata *_s7sportsd13TempoApiAgentV9EmptyBodyVMa_0()
{
  return &_s7sportsd13TempoApiAgentV9EmptyBodyVN_0;
}

uint64_t initializeBufferWithCopyOfBuffer for TempoApiAgent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for TempoApiAgent(void *a1)
{
  return sub_100006E64(a1 + 7);
}

uint64_t initializeWithCopy for TempoApiAgent(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2sub_100006E64(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v6 = a2 + 56;
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain(v5);
  v9(a1 + 56, v6, v8);
  return a1;
}

uint64_t assignWithCopy for TempoApiAgent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  sub_10000B504((void *)(a1 + 56), (void *)(a2 + 56));
  return a1;
}

void *sub_10000B504(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        unint64_t result = (void *)swift_release(v11);
        void *v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          void *v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          void *v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

void *initializeWithTake for TempoApiAgent(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for TempoApiAgent(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release(v6);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  sub_100006E64((void *)(a1 + 56));
  *(_OWORD *)(a1 + 5sub_100006E64(v0 + 6) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for TempoApiAgent(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TempoApiAgent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 5sub_100006E64(v0 + 6) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_100006E64(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 9sub_100006E64(v0 + 6) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_100006E64(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 9sub_100006E64(v0 + 6) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for TempoApiAgent()
{
  return &type metadata for TempoApiAgent;
}

unint64_t sub_10000B784()
{
  unint64_t result = qword_100087468;
  if (!qword_100087468)
  {
    uint64_t v1 = sub_100006E94(&qword_100087460);
    sub_10000BAA8(&qword_100087470, (uint64_t (*)(uint64_t))&type metadata accessor for SportingEvent);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100087468);
  }

  return result;
}

uint64_t sub_10000B804(uint64_t a1)
{
  return sub_10000BD94(a1, (uint64_t (*)(uint64_t))sub_10000A410);
}

unint64_t sub_10000B814()
{
  unint64_t result = qword_100087498;
  if (!qword_100087498)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000673E8, &_s7sportsd13TempoApiAgentV9EmptyBodyV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_100087498);
  }

  return result;
}

unint64_t sub_10000B850()
{
  unint64_t result = qword_1000874A8;
  if (!qword_1000874A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100067398, &type metadata for TempoApiAgent.EmptyBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000874A8);
  }

  return result;
}

uint64_t sub_10000B88C()
{
  return swift_deallocObject(v0, 176LL, 7LL);
}

uint64_t sub_10000B8D8(unint64_t a1, uint64_t a2, void *a3)
{
  return sub_100006058( a1,  a2,  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(void *)(v3 + 48),  *(void *)(v3 + 56),  *(_BYTE *)(v3 + 64),  *(_BYTE *)(v3 + 65),  (void *)(v3 + 72),  *(void *)(v3 + 168));
}

uint64_t sub_10000B920@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100006994(a1, *(uint64_t (**)(uint64_t, void, void))(v2 + 16), a2);
}

uint64_t sub_10000B928(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_10000B940()
{
  unint64_t result = qword_100087508;
  if (!qword_100087508)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069A2C, &type metadata for TVAppFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100087508);
  }

  return result;
}

uint64_t sub_10000B97C()
{
  uint64_t v6 = v5 + 120;
  sub_10000C4E0();
  sub_10000C370(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  swift_bridgeObjectRelease(v4[2]);
  swift_bridgeObjectRelease(v4[4]);
  swift_bridgeObjectRelease(v4[6]);
  swift_bridgeObjectRelease(v4[8]);
  swift_bridgeObjectRelease(v4[10]);
  swift_bridgeObjectRelease(v4[11]);
  swift_bridgeObjectRelease(v4[12]);
  swift_bridgeObjectRelease(v4[14]);
  return sub_10000C45C(v0, v6, v1);
}

void (**sub_10000BA04())(char *, void, uint64_t)
{
  return sub_10000A5D4( *(void *)(v0 + 16),  *(void *)(v0 + 24),  v0 + v1,  *(unsigned __int8 *)(v0 + v2),  (void *)((v2 & 0xFFFFFFFFFFFFFFF8LL) + v0 + 8),  *(void *)((v2 & 0xFFFFFFFFFFFFFFF8LL) + v0 + 112));
}

uint64_t sub_10000BA4C()
{
  sub_100006E64((void *)(v0 + 32));
  swift_unknownObjectRelease(*(void *)(v0 + 72));
  sub_100006E64((void *)(v0 + 80));
  sub_100006E64((void *)(v0 + 120));
  return swift_deallocObject(v0, 160LL, 7LL);
}

uint64_t sub_10000BA98@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_1000090F4(a1, a2, a3, a4, a5, *(void *)(v6 + 16), v6 + 24, v6 + 120, a6);
}

void sub_10000BAA8(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = a2(255LL);
    atomic_store(sub_10000C754(v3), a1);
  }

  sub_10000C510();
}

uint64_t sub_10000BAE0()
{
  uint64_t v0 = sub_10000C1F4();
  return sub_100009E84(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_10000BB24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s20RegistrationResponseVMa(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000BB68()
{
  unint64_t result = qword_100087578;
  if (!qword_100087578)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068DC0, &unk_100080BA8);
    atomic_store(result, (unint64_t *)&qword_100087578);
  }

  return result;
}

void sub_10000BBA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_100006BEC(a2);
  sub_10000C5B0(v2);
  sub_10000C510();
}

uint64_t sub_10000BBD0()
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100006BEC((uint64_t *)&unk_100088B50) - 8) + 80LL);
  uint64_t v5 = sub_10000C39C();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  sub_10000C704();
  sub_10000C52C();
  sub_10000C600();

  uint64_t v9 = sub_10000C70C();
  if (!sub_10000C518(v9))
  {
    type metadata accessor for Date(0LL);
    sub_10000C23C(v2[12]);
    uint64_t v10 = sub_10000C4E8();
    sub_10000C23C(v2[19]);
    sub_10000C23C(v2[20]);
    sub_10000C23C(v2[21]);
    sub_10000C23C(v2[22]);
    sub_10000C23C(v2[23]);
  }

  uint64_t v11 = (((v4 + 120) & ~v4) + v3 + v7) & ~v7;
  unint64_t v12 = (v8 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v11, v5);
  sub_10000ABB4(*(void *)(v0 + v12), *(void *)(v0 + v12 + 8));
  return sub_10000C324(v0, v12 + 16, v4 | v7 | 7);
}

uint64_t sub_10000BD88(uint64_t a1)
{
  return sub_10000BD94(a1, (uint64_t (*)(uint64_t))sub_10000A5CC);
}

uint64_t sub_10000BD94(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2 = sub_10000C1F4();
  return a2(v2);
}

uint64_t sub_10000BDE8()
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100006BEC((uint64_t *)&unk_100088B50) - 8) + 80LL);
  uint64_t v5 = sub_10000C39C();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  sub_10000ABB4(*(void *)(v0 + 16), *(void *)(v0 + 24));
  uint64_t v9 = sub_10000C70C();
  if (!sub_10000C518(v9))
  {
    type metadata accessor for Date(0LL);
    sub_10000C23C(v2[12]);
    uint64_t v10 = sub_10000C4E8();
    sub_10000C23C(v2[19]);
    sub_10000C23C(v2[20]);
    sub_10000C23C(v2[21]);
    sub_10000C23C(v2[22]);
    sub_10000C23C(v2[23]);
  }

  unint64_t v11 = (v3 + ((v4 + 32) & ~v4) + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v12 = (v11 + v7 + 96) & ~v7;
  unint64_t v13 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v14 = v4 | v7 | 7;
  uint64_t v15 = (void *)(v0 + v11);

  sub_100006E64(v15 + 1);
  swift_unknownObjectRelease(v15[6]);
  sub_100006E64(v15 + 7);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v12, v5);
  sub_100006E64((void *)(v0 + v13));
  return sub_10000C324(v0, v13 + 40, v14);
}

void sub_10000BFC0()
{
}

void sub_10000C04C(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_100006E94(a2);
    atomic_store(sub_10000C754(v3), a1);
  }

  sub_10000C510();
}

ValueMetadata *type metadata accessor for TempoApiAgent.EmptyBody.CodingKeys()
{
  return &type metadata for TempoApiAgent.EmptyBody.CodingKeys;
}

ValueMetadata *_s7sportsd13TempoApiAgentV9EmptyBodyV10CodingKeysOMa_0()
{
  return &_s7sportsd13TempoApiAgentV9EmptyBodyV10CodingKeysON_0;
}

unint64_t sub_10000C0A4()
{
  unint64_t result = qword_1000875B8;
  if (!qword_1000875B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100067348, &type metadata for TempoApiAgent.EmptyBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000875B8);
  }

  return result;
}

unint64_t sub_10000C0E4()
{
  unint64_t result = qword_1000875C0;
  if (!qword_1000875C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100067370, &type metadata for TempoApiAgent.EmptyBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000875C0);
  }

  return result;
}

unint64_t sub_10000C124()
{
  unint64_t result = qword_1000875C8;
  if (!qword_1000875C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000672F8, &_s7sportsd13TempoApiAgentV9EmptyBodyV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1000875C8);
  }

  return result;
}

unint64_t sub_10000C164()
{
  unint64_t result = qword_1000875D0;
  if (!qword_1000875D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100067320, &_s7sportsd13TempoApiAgentV9EmptyBodyV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1000875D0);
  }

  return result;
}

uint64_t sub_10000C1C0@<X0>(uint64_t a1@<X8>)
{
  return sub_10000AB6C(v1 + a1, 1LL, v2);
}

uint64_t sub_10000C1D4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 - 8) + 8LL))(v1, v0);
}

uint64_t sub_10000C1E8(uint64_t a1)
{
  return sub_10000AB6C(a1, 1LL, v1);
}

uint64_t sub_10000C1F4()
{
  return v0;
}

uint64_t sub_10000C23C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

  ;
}

void sub_10000C260()
{
  *(void *)(v2 - 368) = v1 | v0 | 7;
  *(void *)(v2 - 344) += 7LL;
}

uint64_t sub_10000C2A0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v4 - 240) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v4 - 280) = v3;
  *(void *)(v4 - 18sub_100006E64(v0 + 4) = v3;
  *(void *)(v4 - 17sub_100006E64(v0 + 6) = v2;
  *(void *)(v4 - 272) = v2;
  return sub_10000B210(v3, v2);
}

uint64_t sub_10000C2D8()
{
  return type metadata accessor for URLRequest(0LL);
}

void *sub_10000C2F4(void *a1)
{
  return memcpy(a1, (const void *)(v1 - 184), 0x60uLL);
}

  ;
}

  ;
}

uint64_t sub_10000C324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

  ;
}

uint64_t sub_10000C370@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10000C378(uint64_t a1)
{
  return Publisher.mapError<A>(_:)(a1, v1, *(void *)(v3 - 312), v2);
}

uint64_t sub_10000C39C()
{
  return type metadata accessor for URLRequest(0LL);
}

uint64_t sub_10000C3A8(uint64_t a1)
{
  return Publisher.map<A>(_:)(a1, v2, *(void *)(v3 - 336), v1);
}

  ;
}

uint64_t sub_10000C3F8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v3 - 272);
  *(void *)(a1 + 1sub_100006E64(v0 + 6) = *(void *)(v3 - 280);
  *(void *)(a1 + 2sub_100006E64(v0 + 4) = v4;
  return sub_10000AC6C(v2, a1 + v1);
}

uint64_t sub_10000C41C(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

uint64_t sub_10000C424()
{
  return type metadata accessor for URLRequest(0LL);
}

  ;
}

  ;
}

uint64_t sub_10000C45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10000C470()
{
  uint64_t v3 = (uint64_t *)(v1 + v0);
  uint64_t v4 = *(void *)(v2 - 280);
  unint64_t v5 = *(void *)(v2 - 272);
  uint64_t *v3 = v4;
  v3[1] = v5;
  return sub_10000B210(v4, v5);
}

uint64_t sub_10000C48C()
{
  return sub_10000AAA8(*(void *)(v0 - 232), v0 - 184);
}

uint64_t sub_10000C498@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_10000C4A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 360) = (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_10000C4C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 37sub_100006E64(v0 + 6) = (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10000C4E0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

uint64_t sub_10000C4E8()
{
  return type metadata accessor for URL(0LL);
}

void sub_10000C4F0(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 38sub_100006E64(v0 + 4) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

  ;
}

uint64_t sub_10000C518(uint64_t a1)
{
  return sub_10000AB6C(v1, 1LL, a1);
}

uint64_t sub_10000C52C()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 64));
}

uint64_t sub_10000C544()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t sub_10000C558()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t sub_10000C56C(uint64_t a1)
{
  return sub_10000AB6C(v1, 1LL, a1);
}

  ;
}

uint64_t sub_10000C59C(uint64_t a1)
{
  return Publisher.eraseToAnyPublisher()(*(void *)(v1 - 208), a1);
}

uint64_t sub_10000C5B0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_10000C5C4(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_10000C5D0()
{
  return swift_release(v0);
}

uint64_t sub_10000C5D8()
{
  return sub_10000B210(v3, v2);
}

void sub_10000C5F8(unint64_t *a1, uint64_t *a2)
{
}

uint64_t sub_10000C600()
{
  return sub_100006E64((void *)(v0 + 72));
}

uint64_t sub_10000C608@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 - 256))();
}

uint64_t sub_10000C610()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_10000C618()
{
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10000C688()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10000C690(uint64_t a1)
{
  return Publisher.eraseToAnyPublisher()(v1, a1);
}

uint64_t sub_10000C6A0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10000C6A8()
{
  return sub_100006BEC(v0);
}

uint64_t sub_10000C6B0()
{
  return swift_release(v0);
}

uint64_t sub_10000C6B8()
{
  return swift_retain(v0);
}

uint64_t sub_10000C6C0()
{
  return sub_10000B388((__int128 *)(v1 - 120), v0);
}

uint64_t sub_10000C6CC()
{
  return type metadata accessor for URL(0LL);
}

  ;
}

  ;
}

uint64_t sub_10000C6F8()
{
  return sub_10000AC6C(v2, v1 + v0);
}

void sub_10000C704()
{
}

uint64_t sub_10000C70C()
{
  return type metadata accessor for ApiRequestMetrics(0LL);
}

uint64_t sub_10000C718()
{
  return type metadata accessor for JSONDecoder(0LL);
}

uint64_t sub_10000C720()
{
  return swift_release(*(void *)(v0 - 88));
}

uint64_t sub_10000C728(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, *(void *)(v2 - 368));
}

uint64_t sub_10000C734(uint64_t result)
{
  *(void *)(v1 - 368) = *(void *)(result - 8);
  return result;
}

uint64_t sub_10000C748()
{
  return Just.init(_:)(v0 - 184);
}

uint64_t sub_10000C754(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_10000C760(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = sub_10000CC74();

  if (v9)
  {
    sub_10000CC90();
    swift_unknownObjectRelease(v9);
  }

  else
  {
    __int128 v40 = 0u;
    __int128 v41 = 0u;
  }

  uint64_t v10 = sub_10000CC84();
  if (!v34)
  {
    sub_10000CBDC((uint64_t)v33);
    goto LABEL_8;
  }

  if (!sub_10000CC60(v10, v11, v12, (uint64_t)&type metadata for String))
  {
LABEL_8:
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = sub_10000CC74();

    if (v16)
    {
      sub_10000CC90();
      swift_unknownObjectRelease(v16);
    }

    else
    {
      __int128 v40 = 0u;
      __int128 v41 = 0u;
    }

    uint64_t v17 = sub_10000CC84();
    if (v34)
    {
      int v20 = sub_10000CC60(v17, v18, v19, (uint64_t)&type metadata for String);
      if (v20) {
        uint64_t v13 = v43;
      }
      else {
        uint64_t v13 = 0LL;
      }
      if (v20) {
        uint64_t v14 = v42;
      }
      else {
        uint64_t v14 = 0LL;
      }
    }

    else
    {
      sub_10000CBDC((uint64_t)v33);
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
    }

    goto LABEL_19;
  }

  uint64_t v14 = v42;
  uint64_t v13 = v43;
LABEL_19:
  uint64_t v21 = *(void *)(v3 + OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_entitlement);
  uint64_t v22 = *(void *)(v3 + OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_entitlement + 8);
  sub_10000CC1C(v3 + OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_apsListening, (uint64_t)v33);
  uint64_t v23 = qword_100087090;
  swift_bridgeObjectRetain(v22);
  id v24 = a2;
  if (v23 != -1) {
    swift_once(&qword_100087090, sub_100029864);
  }
  uint64_t v25 = qword_10008F290;
  uint64_t v26 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  swift_retain(v25);
  id v27 = [v26 defaultManager];
  NSFileManager.currentContainerURL.getter();

  uint64_t v28 = type metadata accessor for PlaysStore(0LL);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  uint64_t v29 = PlaysStore.init(storeUrl:)(v7);
  sub_10000CC1C(v3 + OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_metadataProvider, (uint64_t)&v37);
  sub_10000CC1C(v3 + OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_tempoApiProvider, (uint64_t)&v38);
  sub_10000CC1C(v3 + OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_supressionManager, (uint64_t)&v39);
  uint64_t v35 = v25;
  uint64_t v36 = v29;
  id v30 = objc_allocWithZone((Class)type metadata accessor for SportsKitRequestXPCSession());
  id v31 = sub_10004C740(v21, v22, v24, v33, v14, v13);
  sub_100052C90();

  return 1LL;
}

void sub_10000CAA8()
{
}

id sub_10000CAE0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SportsKitRequestXPCServer()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd25SportsKitRequestXPCServer);
}

uint64_t sub_10000CB94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006BEC(qword_100087690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000CBDC(uint64_t a1)
{
  uint64_t v2 = sub_100006BEC(qword_100087690);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10000CC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 2sub_100006E64(v0 + 4) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000CC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 104, v5 - 320, v4 + 8, a4, 6LL);
}

id sub_10000CC74()
{
  return objc_msgSend(v0, *(SEL *)(v2 + 912), v1);
}

uint64_t sub_10000CC84()
{
  return sub_10000CB94(v0 - 144, v0 - 320);
}

uint64_t sub_10000CC90()
{
  return _bridgeAnyObjectToAny(_:)(v0);
}

uint64_t sub_10000CC9C@<X0>(uint64_t a1@<X8>)
{
  return sub_100006E64((void *)(v1 + a1));
}

uint64_t sub_10000CCA8(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 96);
}

BOOL sub_10000CCF8(char a1, char a2)
{
  return a1 == a2;
}

void sub_10000CD08(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_10000CD2C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x746E65746E6F63LL && a2 == 0xE700000000000000LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746E65746E6F63LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else
  {
    BOOL v6 = a1 == 0x7365536F706D6574LL && a2 == 0xEE0064496E6F6973LL;
    if (v6
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7365536F706D6574LL, 0xEE0064496E6F6973LL, a1, a2, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(a2);
      return 1LL;
    }

    else
    {
      BOOL v7 = a1 == 0x6556616D65686373LL && a2 == 0xED00006E6F697372LL;
      if (v7
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6556616D65686373LL, 0xED00006E6F697372LL, a1, a2, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a2);
        return 2LL;
      }

      else
      {
        BOOL v8 = a1 == 1701869940 && a2 == 0xE400000000000000LL;
        if (v8
          || (_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(a2);
          return 3LL;
        }

        else
        {
          BOOL v9 = a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL;
          if (v9
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL) & 1) != 0)
          {
            swift_bridgeObjectRelease(a2);
            return 4LL;
          }

          else
          {
            BOOL v10 = a1 == 0x6E756F4365747962LL && a2 == 0xE900000000000074LL;
            if (v10
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F4365747962LL, 0xE900000000000074LL, a1, a2, 0LL) & 1) != 0)
            {
              swift_bridgeObjectRelease(a2);
              return 5LL;
            }

            else if (a1 == 0x496C656E6E616863LL && a2 == 0xE900000000000044LL)
            {
              swift_bridgeObjectRelease(a2);
              return 6LL;
            }

            else
            {
              char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x496C656E6E616863LL, 0xE900000000000044LL, a1, a2, 0LL);
              swift_bridgeObjectRelease(a2);
              if ((v12 & 1) != 0) {
                return 6LL;
              }
              else {
                return 7LL;
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_10000CFF0()
{
  return 7LL;
}

Swift::Int sub_10000CFF8(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10000D03C(char a1)
{
  return *(void *)&aContent_2[8 * a1];
}

BOOL sub_10000D05C(char *a1, char *a2)
{
  return sub_10000CCF8(*a1, *a2);
}

Swift::Int sub_10000D070()
{
  return sub_10000CFF8(*v0);
}

void sub_10000D07C(uint64_t a1)
{
}

Swift::Int sub_10000D088()
{
  return Hasher._finalize()();
}

uint64_t sub_10000D0CC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v49 = a4;
  uint64_t v58 = type metadata accessor for Date(0LL);
  uint64_t v53 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  sub_10000E5C4();
  uint64_t v52 = v7;
  uint64_t v57 = *(void *)(a2 - 8);
  __chkstk_darwin(v8);
  sub_10000E5C4();
  uint64_t v56 = v9;
  uint64_t v11 = type metadata accessor for CloudChannelMessageProcessor.CloudChannelMessageContentWrapper.CodingKeys( 255LL,  a2,  a3,  v10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000676A0, v11);
  uint64_t v55 = type metadata accessor for KeyedDecodingContainer(0LL, v11, WitnessTable);
  uint64_t v50 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v51 = a3;
  uint64_t v16 = type metadata accessor for CloudChannelMessageProcessor.CloudChannelMessageContentWrapper(0LL, a2, a3, v15);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v48 - v18;
  uint64_t v21 = (uint64_t *)((char *)&v48 + v20[13] - v18);
  *uint64_t v21 = 0LL;
  *((_BYTE *)v21 + 8) = 1;
  uint64_t v63 = v20;
  uint64_t v22 = (uint64_t *)((char *)&v48 + v20[14] - v18);
  *uint64_t v22 = 0LL;
  v22[1] = 0LL;
  uint64_t v60 = v22;
  uint64_t v61 = v19;
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  uint64_t v59 = a1;
  sub_100006C2C(a1, v23);
  unint64_t v54 = v14;
  uint64_t v25 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v11, v11, WitnessTable, v23, v24);
  if (v25)
  {
    uint64_t v28 = v60;
    sub_10000E5A8();
    return swift_bridgeObjectRelease(v28[1]);
  }

  else
  {
    uint64_t v62 = v21;
    uint64_t v26 = v50;
    char v70 = 0;
    uint64_t v27 = v55;
    KeyedDecodingContainer.decode<A>(_:forKey:)(a2, &v70, v55, a2, v51);
    uint64_t v29 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v61, v56, a2);
    char v69 = 1;
    uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)(&v69, v27);
    uint64_t v31 = v27;
    uint64_t v32 = v63;
    uint64_t v33 = (uint64_t *)&v29[v63[9]];
    *uint64_t v33 = v30;
    v33[1] = v34;
    char v68 = 2;
    uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)(&v68, v31);
    uint64_t v36 = v60;
    uint64_t v37 = (uint64_t *)&v29[v32[10]];
    *uint64_t v37 = v35;
    v37[1] = v38;
    char v67 = 3;
    *(void *)&v29[v32[11]] = KeyedDecodingContainer.decode(_:forKey:)(&v67, v55);
    char v66 = 4;
    unint64_t v39 = sub_10000E3A4();
    uint64_t v40 = v58;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v58, &v66, v55, v58, v39);
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(&v29[v32[12]], v52, v40);
    char v65 = 5;
    uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v65, v55);
    uint64_t v42 = v62;
    *uint64_t v62 = v41;
    *((_BYTE *)v42 + 8) = v43 & 1;
    char v64 = 6;
    uint64_t v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v64, v55);
    uint64_t v46 = v45;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v54, v55);
    swift_bridgeObjectRelease(v36[1]);
    *uint64_t v36 = v44;
    v36[1] = v46;
    (*(void (**)(uint64_t, char *, int *))(v17 + 16))(v49, v29, v32);
    sub_10000E5A8();
    return (*(uint64_t (**)(char *, int *))(v17 + 8))(v29, v32);
  }

uint64_t sub_10000D570()
{
  return sub_10000D03C(*v0);
}

uint64_t sub_10000D57C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10000CD2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000D5A8()
{
  return sub_1000078E8();
}

uint64_t sub_10000D5C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10000CFF0();
  *a1 = result;
  return result;
}

uint64_t sub_10000D5F4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000676A0, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_10000D628(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000676A0, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_10000D65C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10000D0CC(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_10000D678(void **a1, uint64_t a2)
{
  uint64_t v3 = sub_1000189BC(*a1);
  if (v4)
  {
    uint64_t v5 = v4;
    if (*(void *)(a2 + 16))
    {
      sub_100038BF4(v3, v4, a2);
      char v7 = v6;
    }

    else
    {
      char v7 = 1;
    }

    swift_bridgeObjectRelease(v5);
  }

  else
  {
    char v7 = 0;
  }

  return v7 & 1;
}

uint64_t sub_10000D6D8(void **a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = sub_1000189C8(*a1);
    if (v6)
    {
      uint64_t v7 = v6;
      if (v5 == a2 && v6 == a3) {
        char v9 = 1;
      }
      else {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v5, v6, 0LL);
      }
      swift_bridgeObjectRelease(v7);
    }

    else
    {
      char v9 = 0;
    }
  }

  else
  {
    char v9 = 1;
  }

  return v9 & 1;
}

uint64_t sub_10000D760()
{
  return v0;
}

uint64_t sub_10000D784()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for CloudChannelMessageProcessor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000D7B0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CloudChannelMessageProcessor);
}

uint64_t sub_10000D7B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10000D7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48LL);
}

uint64_t sub_10000D7E4(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = &unk_100067548;
    v5[2] = &unk_100067548;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[4] = *(void *)(result - 8) + 64LL;
      v5[5] = &unk_100067560;
      v5[6] = &unk_100067578;
      swift_initStructMetadata(a1, 0LL, 7LL, v5, a1 + 32);
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_10000D898(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 + 8;
  uint64_t v12 = *(void *)(v9 + 64);
  unsigned int v13 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v12
       + ((v10 + 8 + ((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)) & ~v10)
       + 23) & 0xFFFFFFFFFFFFFFF8LL)
     + 16 > 0x18)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v13 | 7) + 16LL) & ~(unint64_t)(v13 | 7)));
    swift_retain(v16);
  }

  else
  {
    uint64_t v17 = v8;
    uint64_t v18 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    uint64_t v19 = (void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    int v20 = (void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v19 = *v20;
    uint64_t v21 = v20[1];
    v19[1] = v21;
    uint64_t v22 = (void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v23 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v22 = *v23;
    uint64_t v24 = v23[1];
    v22[1] = v24;
    uint64_t v25 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v26 = (void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v25 = *v26;
    unint64_t v27 = ((unint64_t)v25 + v11) & v18;
    unint64_t v28 = ((unint64_t)v26 + v11) & v18;
    uint64_t v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v24);
    v29(v27, v28, v17);
    unint64_t v30 = (v27 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v31 = (v28 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v32 = *(void *)v31;
    *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
    *(void *)unint64_t v30 = v32;
    uint64_t v33 = (void *)((v27 + v12 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v34 = (void *)((v28 + v12 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v33 = *v34;
    uint64_t v35 = v34[1];
    v33[1] = v35;
    swift_bridgeObjectRetain(v35);
  }

  return a1;
}

uint64_t sub_10000DA70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v3 + 8))();
  unint64_t v4 = (a1 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease(*(void *)(v4 + 8));
  unint64_t v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease(*(void *)(v5 + 8));
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = (((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, v6);
  return swift_bridgeObjectRelease(*(void *)(((*(void *)(v7 + 64) + v8 + 23) & 0xFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_10000DB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v7 = *v8;
  uint64_t v9 = v8[1];
  v7[1] = v9;
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v10 = *v11;
  uint64_t v12 = v11[1];
  v10[1] = v12;
  unsigned int v13 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v14 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *unsigned int v13 = *v14;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = ((unint64_t)v13 + v17 + 8) & ~v17;
  uint64_t v19 = ((unint64_t)v14 + v17 + 8) & ~v17;
  int v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  v20(v18, v19, v15);
  uint64_t v21 = *(void *)(v16 + 64);
  uint64_t v22 = v18 + v21;
  uint64_t v23 = v19 + v21;
  unint64_t v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v25 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  char v26 = *(_BYTE *)(v25 + 8);
  *(void *)unint64_t v24 = *(void *)v25;
  *(_BYTE *)(v24 + 8) = v26;
  unint64_t v27 = (void *)((v22 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v28 = (void *)((v23 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v27 = *v28;
  uint64_t v29 = v28[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  return a1;
}

uint64_t sub_10000DC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v7 = *v8;
  uint64_t v9 = v8[1];
  uint64_t v10 = v7[1];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v12 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v11 = *v12;
  uint64_t v13 = v12[1];
  uint64_t v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v16 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v15 = *v16;
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = ((unint64_t)v15 + v19 + 8) & ~v19;
  uint64_t v21 = ((unint64_t)v16 + v19 + 8) & ~v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 24))(v20, v21, v17);
  uint64_t v22 = *(void *)(v18 + 64);
  uint64_t v23 = v20 + v22;
  uint64_t v24 = v21 + v22;
  unint64_t v25 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v26 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  char v27 = *(_BYTE *)(v26 + 8);
  *(void *)unint64_t v25 = *(void *)v26;
  *(_BYTE *)(v25 + 8) = v27;
  unint64_t v28 = (void *)((v23 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v29 = (void *)((v24 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v28 = *v29;
  uint64_t v30 = v29[1];
  uint64_t v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t sub_10000DDA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  uint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v7 = *v8;
  uint64_t v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v10 = (_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v11 = *v12;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = ((unint64_t)v11 + v15 + 8) & ~v15;
  uint64_t v17 = ((unint64_t)v12 + v15 + 8) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v16, v17, v13);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v19 = v16 + v18;
  uint64_t v20 = v17 + v18;
  unint64_t v21 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  char v23 = *(_BYTE *)(v22 + 8);
  *(void *)unint64_t v21 = *(void *)v22;
  *(_BYTE *)(v21 + 8) = v23;
  *(_OWORD *)((v19 + 23) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((v20 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t sub_10000DE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v7 = *v8;
  uint64_t v9 = v7[1];
  v7[1] = v8[1];
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v10 = *v11;
  uint64_t v12 = v10[1];
  v10[1] = v11[1];
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v14 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v13 = *v14;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = ((unint64_t)v13 + v17 + 8) & ~v17;
  uint64_t v19 = ((unint64_t)v14 + v17 + 8) & ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40))(v18, v19, v15);
  uint64_t v20 = *(void *)(v16 + 64);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = v19 + v20;
  unint64_t v23 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  char v25 = *(_BYTE *)(v24 + 8);
  *(void *)unint64_t v23 = *(void *)v24;
  *(_BYTE *)(v23 + 8) = v25;
  unint64_t v26 = (void *)((v21 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  char v27 = (void *)((v22 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v26 = *v27;
  uint64_t v28 = v26[1];
  v26[1] = v27[1];
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t sub_10000DFDC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  else {
    unsigned int v11 = v7;
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = v14 + 8;
  if (v12 < a2)
  {
    if (((((*(void *)(v9 + 64)
           + ((v15 + ((((((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)) & ~v14)
           + 23) & 0xFFFFFFFFFFFFFFF8LL)
         + 16) & 0xFFFFFFF8) != 0)
      unsigned int v16 = 2;
    else {
      unsigned int v16 = a2 - v12 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0LL;
    }
    __asm { BR              X17 }
  }

  if ((_DWORD)v7 == v12) {
    return sub_10000AB6C(a1, v7, v5);
  }
  unint64_t v20 = (a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  if ((v11 & 0x80000000) != 0) {
    return sub_10000AB6C((v15 + ((((v20 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)) & ~v14, v10, v8);
  }
  unint64_t v21 = *(void *)(v20 + 8);
  if (v21 >= 0xFFFFFFFF) {
    LODWORD(v21) = -1;
  }
  return (v21 + 1);
}

void sub_10000E190(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(type metadata accessor for Date(0LL) - 8);
  if (v8 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v10 = v8;
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v10;
  }
  size_t v12 = ((*(void *)(v9 + 64)
        + ((*(unsigned __int8 *)(v9 + 80)
          + 8LL
          + ((((((*(void *)(v7 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + 23) & 0xFFFFFFFFFFFFFFF8LL)
      + 16;
  if (v11 >= a3)
  {
    int v15 = 0;
  }

  else
  {
    if ((_DWORD)v12) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = a3 - v11 + 1;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
  }

  if (a2 > v11)
  {
    if ((_DWORD)v12)
    {
      unsigned int v16 = ~v11 + a2;
      bzero(a1, v12);
      *a1 = v16;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X15 }

void sub_10000E2D0(uint64_t a1@<X2>, uint64_t a2@<X3>, int a3@<W8>)
{
  *(_BYTE *)(v8 + vsub_100006E64(v0 + 11) = 0;
  if ((_DWORD)v7)
  {
    if ((_DWORD)v10 == v3)
    {
      unint64_t v12 = v8;
      uint64_t v13 = v7;
      a1 = v10;
      a2 = v9;
LABEL_8:
      sub_10000AB60(v12, v13, a1, a2);
      return;
    }

    int v14 = (void *)((v8 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    if (a3 < 0)
    {
      unint64_t v12 = (v4 + (((((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)) & v6;
      uint64_t v13 = v7;
      goto LABEL_8;
    }

    if ((v7 & 0x80000000) != 0)
    {
      *int v14 = v7 ^ 0x80000000;
      v14[1] = 0LL;
    }

    else
    {
      v14[1] = (v7 - 1);
    }
  }

uint64_t type metadata accessor for CloudChannelMessageProcessor.CloudChannelMessageContentWrapper( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000D7B0( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for CloudChannelMessageProcessor.CloudChannelMessageContentWrapper);
}

uint64_t type metadata accessor for CloudChannelMessageProcessor.CloudChannelMessageContentWrapper.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000D7B0( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for CloudChannelMessageProcessor.CloudChannelMessageContentWrapper.CodingKeys);
}

unint64_t sub_10000E3A4()
{
  unint64_t result = qword_1000877A0[0];
  if (!qword_1000877A0[0])
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, qword_1000877A0);
  }

  return result;
}

uint64_t sub_10000E3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

_BYTE *initializeBufferWithCopyOfBuffer for SportsEnvironment(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t sub_10000E3FC(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2D;
  int v5 = v6 - 45;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10000E484(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10000E4D0 + 4 * byte_1000674B4[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10000E504 + 4 * byte_1000674AF[v4]))();
}

uint64_t sub_10000E504(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000E50C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000E514LL);
  }
  return result;
}

uint64_t sub_10000E520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000E528LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_10000E52C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000E534(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000E540(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10000E54C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

uint64_t sub_10000E554(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100067678, a1);
}

uint64_t sub_10000E564(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000675E8, a1);
}

uint64_t sub_10000E574(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100067610, a1);
}

uint64_t sub_10000E584()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10000E598()
{
  return v0;
}

uint64_t sub_10000E5A8()
{
  return sub_100006E64(*(void **)(v0 - 120));
}

uint64_t sub_10000E5B0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 152));
}

uint64_t sub_10000E5B8@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

  ;
}

uint64_t sub_10000E5D8(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007E0C8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000E628(char a1)
{
  if ((a1 & 1) != 0) {
    return 7759204LL;
  }
  else {
    return 1685025392LL;
  }
}

void sub_10000E650(char *a1, unsigned __int8 *a2)
{
}

void sub_10000E65C()
{
}

uint64_t sub_10000E664(uint64_t a1)
{
  return sub_100041CC4(a1, *v1);
}

void sub_10000E66C(uint64_t a1)
{
}

uint64_t sub_10000E674@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10000E5D8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000E6A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10000E628(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10000E6C8()
{
  uint64_t v0 = sub_100006BEC(&qword_1000878C8);
  v13[0] = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  Swift::String v2 = (char *)v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100087080 != -1) {
    swift_once(&qword_100087080, sub_100024D08);
  }
  uint64_t v3 = *(void *)(qword_10008F280 + 24);
  v13[1] = v3;
  uint64_t v4 = swift_retain(v3);
  uint64_t v5 = static Subscribers.Demand.unlimited.getter(v4);
  uint64_t v6 = sub_100006BEC(&qword_1000872F0);
  uint64_t v7 = sub_100006BEC(&qword_1000878D0);
  uint64_t v8 = sub_10000EBD4( &qword_100087300,  &qword_1000872F0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v9 = sub_10000EBD4( (unint64_t *)&qword_1000878D8,  &qword_1000878D0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v5, sub_10000E868, 0LL, v6, v7, v8, v9);
  swift_release(v3);
  uint64_t v10 = sub_10000EBD4( &qword_1000878E0,  &qword_1000878C8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v11 = Publisher.eraseToAnyPublisher()(v0, v10);
  (*(void (**)(char *, uint64_t))(v13[0] + 8LL))(v2, v0);
  return v11;
}

uint64_t sub_10000E868@<X0>(uint64_t *a1@<X8>)
{
  char v25 = a1;
  uint64_t v1 = sub_100006BEC(&qword_1000878E8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100006BEC(&qword_1000878F0);
  uint64_t v23 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100006BEC(&qword_100087510);
  uint64_t result = swift_initStackObject(v6, v29);
  uint64_t v8 = result;
  unint64_t v9 = 0LL;
  *(_OWORD *)(result + 1sub_100006E64(v0 + 6) = xmmword_100067770;
  *(void *)(result + 40) = 0xE400000000000000LL;
  uint64_t v10 = (void *)(result + 40);
  *(void *)(result + 32) = 1936553065LL;
  *(void *)(result + 48) = 0x6567617473LL;
  *(void *)(result + 5sub_100006E64(v0 + 6) = 0xE500000000000000LL;
  *(void *)(result + 6sub_100006E64(v0 + 4) = 7630441LL;
  *(void *)(result + 72) = 0xE300000000000000LL;
  *(void *)(result + 80) = 24945LL;
  *(void *)(result + 88) = 0xE200000000000000LL;
  *(void *)(result + 9sub_100006E64(v0 + 6) = 7759204LL;
  *(void *)(result + 10sub_100006E64(v0 + 4) = 0xE300000000000000LL;
  *(void *)(result + 1sub_100006E64(v0 + 12) = 6516592LL;
  *(void *)(result + 120) = 0xE300000000000000LL;
  *(void *)(result + 128) = 1953719668LL;
  *(void *)(result + 13sub_100006E64(v0 + 6) = 0xE400000000000000LL;
  while (v9 < *(void *)(v8 + 16))
  {
    uint64_t v12 = *(v10 - 1);
    uint64_t v11 = *v10;
    uint64_t v13 = swift_bridgeObjectRetain(*v10);
    uint64_t v27 = URL.absoluteString.getter(v13);
    uint64_t v28 = v14;
    v26[0] = v12;
    v26[1] = v11;
    uint64_t v15 = type metadata accessor for Locale(0LL);
    sub_10000AB60((uint64_t)v3, 1LL, 1LL, v15);
    unint64_t v16 = sub_10000EB58();
    StringProtocol.range<A>(of:options:range:locale:)( v26,  1LL,  0LL,  0LL,  1LL,  v3,  &type metadata for String,  &type metadata for String,  v16,  v16);
    char v18 = v17;
    sub_10000EB94((uint64_t)v3);
    uint64_t v19 = v28;
    swift_bridgeObjectRelease(v11);
    uint64_t result = swift_bridgeObjectRelease(v19);
    if ((v18 & 1) == 0)
    {
      swift_setDeallocating(v8);
      sub_10002CC98();
      LOBYTE(v27) = 1;
      goto LABEL_7;
    }

    ++v9;
    v10 += 2;
    if (v9 == 7)
    {
      swift_setDeallocating(v8);
      sub_10002CC98();
      LOBYTE(v27) = 0;
LABEL_7:
      Just.init(_:)(&v27);
      uint64_t v20 = sub_10000EBD4(&qword_1000878F8, &qword_1000878F0, (uint64_t)&protocol conformance descriptor for Just<A>);
      uint64_t v21 = v24;
      uint64_t v22 = Publisher.eraseToAnyPublisher()(v24, v20);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v5, v21);
      *char v25 = v22;
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10000EB28()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for SportsEnvironmentPublisher()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd26SportsEnvironmentPublisher);
}

unint64_t sub_10000EB58()
{
  unint64_t result = qword_100087AE0;
  if (!qword_100087AE0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100087AE0);
  }

  return result;
}

uint64_t sub_10000EB94(uint64_t a1)
{
  uint64_t v2 = sub_100006BEC(&qword_1000878E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10000EBD4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100006E94(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for SportsEnvironment(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for SportsEnvironment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10000ECE8 + 4 * byte_100067785[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10000ED1C + 4 * byte_100067780[v4]))();
}

uint64_t sub_10000ED1C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000ED24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000ED2CLL);
  }
  return result;
}

uint64_t sub_10000ED38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000ED40LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10000ED44(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000ED4C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10000ED58(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SportsEnvironment()
{
  return &type metadata for SportsEnvironment;
}

unint64_t sub_10000ED78()
{
  unint64_t result = qword_100087900;
  if (!qword_100087900)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006783C, &type metadata for SportsEnvironment);
    atomic_store(result, (unint64_t *)&qword_100087900);
  }

  return result;
}

uint64_t sub_10000EDB4()
{
  uint64_t v0 = type metadata accessor for CloudChannelTaskActor();
  uint64_t v1 = swift_allocObject(v0, 112LL, 15LL);
  uint64_t result = swift_defaultActor_initialize();
  qword_10008F1E0 = v1;
  return result;
}

uint64_t *sub_10000EDEC()
{
  if (qword_100087038 != -1) {
    swift_once(&qword_100087038, sub_10000EDB4);
  }
  return &qword_10008F1E0;
}

uint64_t sub_10000EE2C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for CloudChannelTaskActor()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd21CloudChannelTaskActor);
}

uint64_t sub_10000EE68()
{
  return v0;
}

uint64_t sub_10000EE74()
{
  return sub_10000EE68();
}

uint64_t sub_10000EE8C()
{
  return swift_retain(qword_10008F1E0);
}

uint64_t sub_10000EEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CloudChannelTaskActor();
  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

void sub_10000EECC(unsigned __int8 *a1, uint64_t a2)
{
  int v3 = *a1;
  uint64_t v4 = a2 + 16;
  sub_100019910(a2 + 16, (uint64_t)v42);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    unsigned int v6 = (char *)Strong;
    BOOL v7 = &APSEnvironmentDevelopment;
    if (!v3) {
      BOOL v7 = &APSEnvironmentProduction;
    }
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v7);
    uint64_t v10 = v9;
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v11 = sub_10001939C();
    sub_10000B928(v11, (uint64_t)qword_10008F348);
    uint64_t v12 = sub_1000194E8(v10);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (sub_100019758(v14))
    {
      uint64_t v15 = (uint8_t *)sub_100019148(12LL);
      uint64_t v16 = sub_100019148(32LL);
      uint64_t v41 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      sub_100019194();
      uint64_t v17 = sub_10001973C();
      uint64_t v40 = sub_100015AD4(v17, v18, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v15 + 4, v15 + 12);
      sub_1000195A8(v10);
      sub_1000194B8((void *)&_mh_execute_header, v13, v2, "Current environment: %s", v15);
      sub_1000194B0(v16);
      sub_1000190E8(v16);
      sub_1000190E8((uint64_t)v15);
    }

    else
    {

      uint64_t v20 = sub_100019124(v10);
    }

    sub_1000198D4(v20, &qword_100087C30, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v21 = sub_100019194();
    uint64_t v22 = (void *)static OS_dispatch_queue.main.getter(v21);
    id v23 = objc_allocWithZone(&OBJC_CLASS___APSConnection);
    uint64_t v24 = sub_10001973C();
    id v27 = sub_100014AA8(v24, v25, 0xD000000000000015LL, v26, v22);
    uint64_t v28 = OBJC_IVAR____TtC7sportsd11ApsListener_apsConnection;
    uint64_t v29 = *(void **)&v6[OBJC_IVAR____TtC7sportsd11ApsListener_apsConnection];
    *(void *)&v6[OBJC_IVAR____TtC7sportsd11ApsListener_apsConnection] = v27;

    uint64_t v30 = *(void **)&v6[v28];
    if (v30)
    {
      sub_100018A38((uint64_t)&off_10007E118, v30, (SEL *)&selRef__setEnabledTopics_);
      uint64_t v31 = *(void **)&v6[v28];
      if (v31)
      {
        sub_100018A38((uint64_t)&off_10007E148, v31, (SEL *)&selRef__setOpportunisticTopics_);
        uint64_t v32 = *(void **)&v6[v28];
        if (v32) {
          [v32 setDelegate:v6];
        }
      }
    }

    uint64_t v33 = (uint64_t *)&v6[OBJC_IVAR____TtC7sportsd11ApsListener_currentAPSConnectionEnvironment];
    uint64_t v34 = *(void *)&v6[OBJC_IVAR____TtC7sportsd11ApsListener_currentAPSConnectionEnvironment + 8];
    *uint64_t v33 = v8;
    v33[1] = v10;
    swift_bridgeObjectRelease(v34);
    uint64_t v35 = *(void **)&v6[v28];
    if (v35)
    {
      uint64_t v36 = *(os_unfair_lock_s **)&v6[OBJC_IVAR____TtC7sportsd11ApsListener_connection];
      uint64_t v37 = (uint64_t)&v36[4];
      uint64_t v38 = v36 + 7;
      unint64_t v39 = v35;
      os_unfair_lock_lock(v38);
      sub_10000F198(v37, v39);
      os_unfair_lock_unlock(v38);

      unsigned int v6 = v39;
    }
  }

void sub_10000F198(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) != 1)
    {
      *(void *)a1 = a2;
      *(_BYTE *)(a1 + 8) = 1;
      id v2 = a2;
    }
  }

  else
  {
    int v3 = *(uint64_t **)a1;
    *(void *)a1 = a2;
    *(_BYTE *)(a1 + 8) = 1;
    uint64_t v4 = v3[2];
    if (v4)
    {
      int v5 = v3 + 4;
      id v6 = a2;
      sub_100014894(v3, 0);
      do
      {
        uint64_t v7 = *v5++;
        **(void **)(*(void *)(v7 + 64) + 4_swift_stdlib_reportUnimplementedInitializer("sportsd.SportsKitRequestXPCServer", 33LL, "init()", 6LL, 0LL) = v6;
        id v8 = v6;
        swift_continuation_resume(v7);
        --v4;
      }

      while (v4);
      sub_1000148C0(v3, 0);
    }

    else
    {
      id v9 = a2;
    }

    sub_1000148C0(v3, 0);
  }

void sub_10000F260()
{
  id v2 = v0;
  uint64_t v3 = type metadata accessor for CloudChannelPreferences.AuditStrategy(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10000C640();
  static CloudChannelPreferences.subscriptionAuditStrategy.getter();
  if ((*(unsigned int (**)(double *, uint64_t))(v4 + 88))(v1, v3) == enum case for CloudChannelPreferences.AuditStrategy.nextPush(_:))
  {
    sub_1000198B4(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 96));
    double v5 = *v1;
    uint64_t v6 = OBJC_IVAR____TtC7sportsd11ApsListener_cloudChannelAuditDebouncer;
    id v7 = *(id *)&v2[OBJC_IVAR____TtC7sportsd11ApsListener_cloudChannelAuditDebouncer];
    if (v7) {
      id v7 = [v7 invalidate];
    }
    sub_1000198D4((uint64_t)v7, &qword_100087C08, &OBJC_CLASS___NSTimer_ptr);
    uint64_t v8 = sub_10000C41C((uint64_t)&unk_10007F510, 24LL);
    *(void *)(v8 + 1sub_100006E64(v0 + 6) = v2;
    id v9 = v2;
    id v10 = sub_100011144(0, (uint64_t)sub_100018F70, v8, v5);
    uint64_t v11 = *(void **)&v2[v6];
    *(void *)&v2[v6] = v10;

    id v12 = [(id)objc_opt_self(NSRunLoop) mainRunLoop];
    uint64_t v13 = *(void *)&v2[v6];
    if (v13)
    {
      os_log_type_t v14 = v12;
      [v12 addTimer:v13 forMode:NSRunLoopCommonModes];
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    sub_1000198B4(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }

uint64_t sub_10000F3BC()
{
  return swift_task_switch(sub_10000F3D0, 0LL, 0LL);
}

uint64_t sub_10000F3D0()
{
  *(void *)(v0 + 1sub_100006E64(v0 + 6) = sub_1000195C4();
  sub_100019324(&qword_100087AB0);
  sub_10001957C(v1);
  sub_10001955C();
  sub_10001944C();
  return sub_1000190D4();
}

uint64_t sub_10000F438()
{
  *(void *)(v0 + 2sub_100006E64(v0 + 4) = 0LL;
  swift_release(*(void *)(v0 + 16));
  uint64_t v1 = (uint64_t (*)(void))sub_100019280();
  return sub_100019104(v1);
}

uint64_t sub_10000F498()
{
  return sub_1000190BC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000F4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_100006BEC(&qword_100087B00);
  sub_10000C04C((unint64_t *)&qword_100087B08, &qword_100087B00);
  uint64_t v6 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v4, v5);
  swift_bridgeObjectRelease(v3);
  return v6;
}

uint64_t sub_10000F55C@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v3 = *a1;
  uint64_t v4 = sub_100006BEC(&qword_100087C20);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + 1sub_100006E64(v0 + 6) = xmmword_100067230;
  *(void *)(v5 + 5sub_100006E64(v0 + 6) = &type metadata for UInt8;
  *(void *)(v5 + 6sub_100006E64(v0 + 4) = &protocol witness table for UInt8;
  *(_BYTE *)(v5 + 32) = v3;
  uint64_t result = String.init(format:_:)(0x786868322E323025LL, 0xE800000000000000LL, v5);
  *a2 = result;
  a2[1] = v7;
  return result;
}

void sub_10000F5E8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

uint64_t sub_10000F648(uint64_t a1)
{
  uint64_t v8 = v2;
  if (v2)
  {
    uint64_t v38 = v2;
    char v37 = v1;
    *(void *)(v7 - 10sub_100006E64(v0 + 4) = v3;
    uint64_t v9 = v2 & ~(v2 >> 63);
    sub_100016630(0LL, v9, 0LL);
    uint64_t v10 = a1;
    uint64_t v3 = *(void *)(v7 - 104);
    if ((_DWORD)v6)
    {
      unint64_t v11 = v5;
      if ((_DWORD)v6 == 1) {
        uint64_t v12 = (int)a1;
      }
      else {
        uint64_t v12 = *(void *)(a1 + 16);
      }
      if (v8 < 0) {
        goto LABEL_43;
      }
    }

    else
    {
      if (v8 < 0)
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
      }

      unint64_t v11 = v5;
      uint64_t v12 = 0LL;
    }

    unint64_t v34 = v11 >> 16;
    unint64_t v35 = v11 >> 8;
    unint64_t v32 = HIDWORD(v11);
    unint64_t v33 = v11 >> 24;
    char v36 = v11;
    unint64_t v31 = v11 >> 40;
    while (v9)
    {
      *(void *)(v7 - 14sub_100006E64(v0 + 4) = v9;
      if ((_DWORD)v6)
      {
        if ((_DWORD)v6 == 1)
        {
          uint64_t v14 = v3;
          uint64_t v15 = v4;
          uint64_t v16 = ((uint64_t (*)(void))__DataStorage._bytes.getter)();
          if (!v16) {
            goto LABEL_45;
          }
          uint64_t v17 = v16;
          uint64_t v18 = ((uint64_t (*)(void))__DataStorage._offset.getter)();
          uint64_t v19 = v12 - v18;
          if (__OFSUB__(v12, v18)) {
            goto LABEL_40;
          }
        }

        else
        {
          if (v12 < *(void *)(v10 + 16)) {
            goto LABEL_39;
          }
          if (v12 >= *(void *)(v10 + 24)) {
            goto LABEL_41;
          }
          uint64_t v14 = v3;
          uint64_t v15 = v4;
          uint64_t v21 = ((uint64_t (*)(void))__DataStorage._bytes.getter)();
          if (!v21) {
            goto LABEL_46;
          }
          uint64_t v17 = v21;
          uint64_t v22 = ((uint64_t (*)(void))__DataStorage._offset.getter)();
          uint64_t v19 = v12 - v22;
          if (__OFSUB__(v12, v22)) {
            goto LABEL_42;
          }
        }

        char v20 = *(_BYTE *)(v17 + v19);
        uint64_t v4 = v15;
        uint64_t v10 = a1;
      }

      else
      {
        if (v12 >= v38) {
          goto LABEL_38;
        }
        uint64_t v14 = v3;
        *(_BYTE *)(v7 - 13sub_100006E64(v0 + 4) = v10;
        *(_WORD *)(v7 - 133) = *(_WORD *)((char *)&a1 + 1);
        *(_BYTE *)(v7 - 131) = BYTE3(a1);
        *(_BYTE *)(v7 - 130) = v37;
        *(_WORD *)(v7 - 129) = *(_WORD *)((char *)&a1 + 5);
        *(_BYTE *)(v7 - 127) = HIBYTE(a1);
        *(_BYTE *)(v7 - 12sub_100006E64(v0 + 6) = v36;
        *(_BYTE *)(v7 - 12sub_100006E64(v0 + 5) = v35;
        *(_BYTE *)(v7 - 12sub_100006E64(v0 + 4) = v34;
        *(_BYTE *)(v7 - 123) = v33;
        *(_BYTE *)(v7 - 122) = v32;
        *(_BYTE *)(v7 - 121) = v31;
        char v20 = *(_BYTE *)(v7 - 134 + v12);
      }

      *(_BYTE *)(v7 - 13sub_100006E64(v0 + 4) = v20;
      sub_10000F55C((char *)(v7 - 134), (uint64_t *)(v7 - 120));
      if (v4)
      {
        swift_release(v14);
        return v3;
      }

      uint64_t v23 = v10;
      uint64_t v24 = v6;
      uint64_t v25 = *(void *)(v7 - 120);
      uint64_t v26 = *(void *)(v7 - 112);
      uint64_t v3 = v14;
      *(void *)(v7 - 10sub_100006E64(v0 + 4) = v14;
      unint64_t v28 = *(void *)(v14 + 16);
      unint64_t v27 = *(void *)(v14 + 24);
      if (v28 >= v27 >> 1)
      {
        sub_100016630(v27 > 1, v28 + 1, 1LL);
        uint64_t v23 = a1;
        uint64_t v3 = *(void *)(v7 - 104);
      }

      *(void *)(v3 + 1sub_100006E64(v0 + 6) = v28 + 1;
      uint64_t v29 = v3 + 16 * v28;
      *(void *)(v29 + 32) = v25;
      *(void *)(v29 + 40) = v26;
      ++v12;
      uint64_t v9 = *(void *)(v7 - 144) - 1LL;
      --v8;
      uint64_t v6 = v24;
      uint64_t v10 = v23;
      if (!v8) {
        return v3;
      }
    }

    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    JUMPOUT(0x10000F950LL);
  }

  return v3;
}

uint64_t sub_10000F978()
{
  uint64_t v1 = sub_100006BEC(&qword_100087B70);
  __chkstk_darwin(v1);
  sub_10000C640();
  uint64_t v2 = sub_100006BEC(&qword_100087B78);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100019488();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC7sportsd11ApsListener_pushToken + 8);
  if (v7)
  {
    v17[0] = *(void *)(v0 + OBJC_IVAR____TtC7sportsd11ApsListener_pushToken);
    v17[1] = v7;
    swift_bridgeObjectRetain(v7);
    Just.init(_:)(v17);
    sub_10000C04C(&qword_100087B98, &qword_100087B78);
    uint64_t v9 = Publisher.eraseToAnyPublisher()(v2, v8);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  }

  else
  {
    v17[0] = *(void *)(v0 + OBJC_IVAR____TtC7sportsd11ApsListener_tokenPublisher);
    uint64_t v10 = sub_100006BEC(&qword_100087B80);
    sub_10000C04C(&qword_100087B88, &qword_100087B80);
    Publisher.first()(v10, v11);
    sub_10000C04C(&qword_100087B90, &qword_100087B70);
    uint64_t v9 = Publisher.eraseToAnyPublisher()(v1, v12);
    uint64_t v13 = sub_100019438();
    v15(v13, v14);
  }

  return v9;
}

uint64_t sub_10000FB14()
{
  *(void *)(v1 + 88) = v0;
  if (qword_100087038 != -1) {
    swift_once(&qword_100087038, sub_10000EDB4);
  }
  return sub_1000190C8();
}

uint64_t sub_10000FB70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = qword_10008F1E0;
  sub_100018DE4(&qword_100087A80, a2, (uint64_t (*)(uint64_t))type metadata accessor for CloudChannelTaskActor);
  if (v2)
  {
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType(v2);
    dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v4);
  }

  return sub_1000190B0();
}

uint64_t sub_10000FBE8()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[11];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_10000FCB4;
  uint64_t v3 = swift_continuation_init(v0 + 2, 0LL);
  uint64_t v4 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC7sportsd11ApsListener_connection);
  uint64_t v5 = swift_task_alloc(32LL);
  *(void *)(v5 + 1sub_100006E64(v0 + 6) = v3;
  os_unfair_lock_lock(v4 + 7);
  sub_10000FCEC((uint64_t)&v4[4], *(void *)(v5 + 16));
  os_unfair_lock_unlock(v4 + 7);
  swift_task_dealloc(v5);
  return swift_continuation_await(v1);
}

uint64_t sub_10000FCB4()
{
  uint64_t v1 = *v0;
  *uint64_t v2 = v1;
  return (*(uint64_t (**)(void))(v1 + 8))(*(void *)(v3 + 80));
}

void sub_10000FCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) == 1)
    {
      **(void **)(*(void *)(a2 + 64) + 4_swift_stdlib_reportUnimplementedInitializer("sportsd.SportsKitRequestXPCServer", 33LL, "init()", 6LL, 0LL) = v4;
      uint64_t v5 = v4;
      swift_continuation_resume(a2);
      return;
    }

    uint64_t v7 = sub_100006BEC(&qword_100087B18);
    uint64_t v8 = swift_allocObject(v7, 40LL, 7LL);
    *(_OWORD *)(v8 + 1sub_100006E64(v0 + 6) = xmmword_100067230;
    *(void *)(v8 + 32) = a2;
    *(void *)a1 = v8;
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)a1) & 1) == 0)
    {
      sub_100014F90();
      uint64_t v4 = v9;
    }

    unint64_t v6 = v4[2];
    if (v6 >= v4[3] >> 1)
    {
      sub_100014F90();
      uint64_t v4 = v10;
    }

    v4[2] = v6 + 1;
    v4[v6 + 4] = a2;
    *(void *)a1 = v4;
  }

  *(_BYTE *)(a1 + 8) = 0;
}

void sub_10000FE04()
{
}

uint64_t type metadata accessor for ApsListener()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd11ApsListener);
}

void sub_10000FEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_10000F4C4(a2, a3);
  uint64_t v5 = (uint64_t *)&v3[OBJC_IVAR____TtC7sportsd11ApsListener_pushToken];
  uint64_t v6 = *(void *)&v3[OBJC_IVAR____TtC7sportsd11ApsListener_pushToken + 8];
  *uint64_t v5 = v4;
  v5[1] = v7;
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = sub_10001973C();
  v23[0] = sub_10000F4C4(v8, v9);
  v23[1] = v10;
  PassthroughSubject.send(_:)(v23);
  sub_100019180();
  if (qword_1000870F0 != -1) {
    swift_once(&qword_1000870F0, sub_10004BF00);
  }
  uint64_t v11 = sub_10001939C();
  sub_10000B928(v11, (uint64_t)qword_10008F330);
  uint64_t v12 = v3;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)sub_100019148(12LL);
    uint64_t v16 = sub_100019148(32LL);
    v23[0] = v16;
    *(_DWORD *)uint64_t v15 = 136380675;
    uint64_t v17 = v5[1];
    if (v17)
    {
      uint64_t v18 = *v5;
      unint64_t v19 = v5[1];
    }

    else
    {
      uint64_t v18 = 0LL;
      unint64_t v19 = 0xE000000000000000LL;
    }

    swift_bridgeObjectRetain(v17);
    sub_100015AD4(v18, v19, v23);
    sub_10001988C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v21, v15 + 4, v22);

    sub_100019820();
    sub_1000194B8((void *)&_mh_execute_header, v13, v14, "Did receive push token %{private}s", v15);
    sub_1000194B0(v16);
    sub_1000190E8(v16);
    sub_1000190E8((uint64_t)v15);
  }

  else
  {
  }

void sub_100010154(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  sub_100006BEC(&qword_100088BD0);
  sub_100019690();
  __chkstk_darwin(v5);
  sub_100019488();
  uint64_t v8 = v7 - v6;
  sub_100006BEC(&qword_100087BF0);
  sub_100019690();
  __chkstk_darwin(v9);
  sub_100019488();
  uint64_t v12 = v11 - v10;
  sub_100018E18(a2, (SEL *)&selRef_channelID);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease(v13);
  if (v14)
  {
    if (qword_100087098 != -1) {
      swift_once(&qword_100087098, sub_10002D430);
    }
    v50[0] = a2;
    swift_retain(qword_10008F298);
    PassthroughSubject.send(_:)(v50);
    sub_100019444();
    sub_10000F260();
    goto LABEL_20;
  }

  uint64_t v48 = sub_100018E18(a2, (SEL *)&selRef_topic);
  if (v15)
  {
    uint64_t v16 = v15;
    if (qword_1000870F0 != -1) {
      swift_once(&qword_1000870F0, sub_10004BF00);
    }
    uint64_t v17 = sub_10001939C();
    sub_10000B928(v17, (uint64_t)qword_10008F330);
    uint64_t v18 = sub_1000194E8(v16);
    unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v47 = v3;
      uint64_t v21 = (uint8_t *)sub_100019148(12LL);
      uint64_t v22 = sub_100019148(32LL);
      v50[0] = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      sub_100019594();
      uint64_t v23 = sub_100019668();
      uint64_t v24 = sub_1000197E0(v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, v25, v21 + 4, v21 + 12);
      sub_1000195A8(v16);
      sub_1000194B8((void *)&_mh_execute_header, v19, v20, "Did receive push notification for topic %s", v21);
      sub_1000194B0(v22);
      sub_1000190E8(v22);
      uint64_t v26 = (uint64_t)v21;
      uint64_t v3 = v47;
      sub_1000190E8(v26);
    }

    else
    {

      sub_100019124(v16);
    }

    if (v48 == 0xD000000000000011LL && v16 == 0x800000010006A7D0LL
      || (sub_1000193C8(0xD000000000000011LL, 0x800000010006A7D0LL, v48) & 1) != 0)
    {
      sub_100019394();
      uint64_t v31 = type metadata accessor for TaskPriority(0LL);
      sub_10000AB60(v12, 1LL, 1LL, v31);
      uint64_t v32 = sub_10000C41C((uint64_t)&unk_10007F470, 24LL);
      swift_unknownObjectWeakInit(v32 + 16, v3);
      unint64_t v33 = (void *)sub_10000C41C((uint64_t)&unk_10007F4E8, 48LL);
      __int128 v33[2] = 0LL;
      void v33[3] = 0LL;
      v33[4] = v32;
      v33[5] = a2;
      id v34 = a2;
      uint64_t v35 = sub_100038E5C(v12, (uint64_t)&unk_100087C00, (uint64_t)v33);
      swift_release(v35);
LABEL_20:
      sub_10000C248();
      return;
    }

    if ((v48 != 0xD000000000000020LL || v16 != 0x800000010006A7F0LL)
      && (sub_1000193C8(0xD000000000000020LL, 0x800000010006A7F0LL, v48) & 1) == 0)
    {
      uint64_t v39 = sub_100019594();
      uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)sub_100019148(12LL);
        uint64_t v43 = sub_100019148(32LL);
        v50[0] = v43;
        *(_DWORD *)uint64_t v42 = 136315138;
        sub_100019594();
        uint64_t v44 = sub_100019668();
        uint64_t v45 = sub_1000197E0(v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, v46, v42 + 4, v42 + 12);
        sub_1000195A8(v16);
        sub_1000194B8((void *)&_mh_execute_header, v40, v41, "Topic not supported: %s", v42);
        sub_1000194B0(v43);
        sub_1000190E8(v43);
        sub_1000190E8((uint64_t)v42);
      }

      else
      {

        sub_100019124(v16);
      }

      goto LABEL_20;
    }

    sub_100019394();
    sub_10000CC1C(v3 + OBJC_IVAR____TtC7sportsd11ApsListener_messageProcessing, (uint64_t)v50);
    sub_100006C2C(v50, v50[3]);
    sub_1000189D4(a2);
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v38 = type metadata accessor for Date(0LL);
      sub_10000AB60(v8, 1LL, 1LL, v38);
      sub_100064028(v37, 1, v8, (uint64_t)nullsub_1, 0LL);
      sub_10001919C();
      sub_100019034(v8, &qword_100088BD0);
      sub_100006E64(v50);
      goto LABEL_20;
    }

    __break(1u);
  }

  else
  {
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v27 = sub_10001939C();
    uint64_t v28 = sub_10000B928(v27, (uint64_t)qword_10008F348);
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v29))
    {
      uint64_t v30 = (uint8_t *)sub_100019148(2LL);
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v29, "This message has no topic", v30, 2u);
      sub_1000190E8((uint64_t)v30);
    }
  }

uint64_t sub_1000106B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[10] = a4;
  v5[11] = a5;
  uint64_t v6 = sub_100006BEC(&qword_100088BD0);
  v5[12] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100010714, 0LL, 0LL);
}

void sub_100010714()
{
  uint64_t v1 = *(void *)(v0 + 80) + 16LL;
  sub_100019910(v1, v0 + 56);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (!Strong) {
    goto LABEL_4;
  }
  uint64_t v3 = (void *)Strong;
  uint64_t v4 = *(void **)(v0 + 88);
  sub_10000CC1C(Strong + OBJC_IVAR____TtC7sportsd11ApsListener_messageProcessing, v0 + 16);
  sub_100006C2C((void *)(v0 + 16), *(void *)(v0 + 40));
  sub_1000189D4(v4);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = type metadata accessor for Date(0LL);
    sub_10000AB60(v7, 1LL, 1LL, v8);
    sub_100064028(v6, 0, v7, (uint64_t)nullsub_1, 0LL);
    sub_100019394();

    sub_100019034(v7, &qword_100088BD0);
    sub_100006E64((void *)(v0 + 16));
LABEL_4:
    swift_task_dealloc(*(void *)(v0 + 96));
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  __break(1u);
}

uint64_t sub_100010878(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100006BEC(&qword_100087BF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  sub_10000AB60((uint64_t)v5, 1LL, 1LL, v6);
  uint64_t v7 = (void *)swift_allocObject(&unk_10007F560, 40LL, 7LL);
  v7[2] = 0LL;
  uint64_t v8 = v7 + 2;
  v7[3] = 0LL;
  v7[4] = a2;
  int v9 = sub_10000AB6C((uint64_t)v5, 1LL, v6);
  id v10 = a2;
  if (v9 == 1)
  {
    sub_100019034((uint64_t)v5, &qword_100087BF0);
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 7168LL;
  }

  else
  {
    unsigned __int8 v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
    uint64_t v13 = v14 | 0x1C00LL;
    uint64_t v15 = *v8;
    if (*v8)
    {
      uint64_t v16 = v7[3];
      uint64_t ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      uint64_t v12 = v18;
      swift_unknownObjectRelease(v15);
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
    }
  }

  if (v12 | v11)
  {
    v22[0] = 0LL;
    v22[1] = 0LL;
    unint64_t v19 = v22;
    v22[2] = v11;
    v22[3] = v12;
  }

  else
  {
    unint64_t v19 = 0LL;
  }

  uint64_t v20 = swift_task_create(v13, v19, (char *)&type metadata for () + 8, &unk_100087C18, v7);
  return swift_release(v20);
}

uint64_t sub_100010A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 1sub_100006E64(v0 + 6) = a4;
  return swift_task_switch(sub_100010A30, 0LL, 0LL);
}

uint64_t sub_100010A30()
{
  *(void *)(v0 + 2sub_100006E64(v0 + 4) = sub_1000195CC();
  *(void *)(v0 + 32) = sub_1000195C4();
  sub_100019324(&qword_100087AB0);
  sub_10001957C(v1);
  sub_10001955C();
  sub_10001944C();
  return sub_1000190D4();
}

uint64_t sub_100010A9C()
{
  v0[5] = dispatch thunk of CloudChannelSubscriptionManager.audit(clearExpiredEntries:)(1LL);
  v0[6] = 0LL;
  swift_release(v0[4]);
  return sub_1000190D4();
}

uint64_t sub_100010AFC()
{
  v0[7] = v1;
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_100087AC4);
  v0[8] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_100010B64;
  uint64_t v3 = sub_1000198DC(v0[5]);
  return sub_100010C28(v3, v4, v5);
}

uint64_t sub_100010B64()
{
  *(void *)(v0 + 72) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    return sub_1000190B0();
  }
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  sub_100019278();
  uint64_t v5 = (uint64_t (*)(void))sub_100019280();
  return sub_1000190E0(v5);
}

uint64_t sub_100010BC8()
{
  return sub_1000190BC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100010BF4()
{
  return sub_1000190BC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100010C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = sub_10001939C();
  v4[10] = sub_1000191D0(v5);
  if (qword_100087038 != -1) {
    swift_once(&qword_100087038, sub_10000EDB4);
  }
  v4[11] = qword_10008F1E0;
  uint64_t v6 = (void *)swift_task_alloc(dword_100087ABC);
  v4[12] = v6;
  uint64_t v7 = sub_100019350(v6, (uint64_t)sub_100010CB4);
  return sub_1000190F4(v7, v8);
}

uint64_t sub_100010CB4(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 96);
  uint64_t v4 = *v2;
  *(void *)(v4 + 10sub_100006E64(v0 + 4) = a1;
  *(void *)(v4 + 1sub_100006E64(v0 + 12) = v1;
  sub_1000192FC(v3);
  if (!v1) {
    return sub_1000190B0();
  }
  sub_100019884();
  return sub_1000190E0(*(uint64_t (**)(void))(v4 + 8));
}

#error "100010FBC: call analysis failed (funcsize=228)"
uint64_t sub_1000110D4(uint64_t a1)
{
  sub_100019228(a1);
  sub_1000194C0();
  return sub_1000190C8();
}

uint64_t sub_100011100()
{
  uint64_t v1 = (void *)v0[17];
  sub_100018A94(v0[15], v0[5], v0[6], v1, (SEL *)&selRef_unsubscribeFromChannels_forTopic_);

  sub_100019364();
  uint64_t v2 = (uint64_t (*)(void))sub_100019280();
  return sub_1000190BC(v2);
}

id sub_100011144(char a1, uint64_t a2, uint64_t a3, double a4)
{
  v10[4] = a2;
  uint64_t v11 = a3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256LL;
  v10[2] = sub_1000111F8;
  v10[3] = &unk_10007F528;
  uint64_t v7 = _Block_copy(v10);
  id v8 = [(id)swift_getObjCClassFromMetadata(v4) timerWithTimeInterval:a1 & 1 repeats:v7 block:a4];
  _Block_release(v7);
  swift_release(v11);
  return v8;
}

void sub_1000111F8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

uint64_t sub_100011248(uint64_t a1)
{
  if (qword_100087038 != -1) {
    swift_once(&qword_100087038, sub_10000EDB4);
  }
  sub_100014A6C(a1, v1 + 16);
  if (*(_BYTE *)(v1 + 48))
  {
    if (*(_BYTE *)(v1 + 48) == 1)
    {
      uint64_t v3 = (void *)swift_task_alloc(dword_100087A9C);
      *(void *)(v1 + 6sub_100006E64(v0 + 4) = v3;
      uint64_t v4 = sub_1000195D4(v3, (uint64_t)sub_100011394);
      return sub_100011D38(v4, v5, v6, v7);
    }

    else
    {
      uint64_t v11 = (void *)swift_task_alloc(dword_100087A94);
      *(void *)(v1 + 72) = v11;
      uint64_t v12 = sub_1000195D4(v11, (uint64_t)sub_1000113C0);
      return sub_100011FF0(v12, v13, v14, v15);
    }
  }

  else
  {
    uint64_t v9 = *(void *)(v1 + 16);
    id v10 = (void *)swift_task_alloc(dword_100087AA4);
    *(void *)(v1 + 5sub_100006E64(v0 + 6) = v10;
    *id v10 = v1;
    v10[1] = sub_100011368;
    return sub_1000113EC(v9);
  }

uint64_t sub_100011368()
{
  return sub_1000190BC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100011394()
{
  return sub_1000190BC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000113C0()
{
  return sub_1000190BC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000113EC(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v4 = sub_10001939C();
  v2[10] = sub_1000191D0(v4);
  if (qword_100087038 != -1) {
    swift_once(&qword_100087038, sub_10000EDB4);
  }
  v2[11] = qword_10008F1E0;
  uint64_t v5 = (void *)swift_task_alloc(dword_100087AAC);
  v2[12] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001147C;
  return sub_100012B5C(a1);
}

uint64_t sub_10001147C()
{
  *(void *)(v0 + 10sub_100006E64(v0 + 4) = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    return sub_1000190B0();
  }
  sub_100019884();
  return sub_1000190E0(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000114D4()
{
  *(void *)(v0 + 1sub_100006E64(v0 + 12) = sub_1000195CC();
  *(void *)(v0 + 120) = sub_1000195C4();
  sub_100019324(&qword_100087AB0);
  sub_10001957C(v1);
  sub_10001955C();
  sub_10001944C();
  return sub_1000190D4();
}

uint64_t sub_100011540()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = dispatch thunk of CloudChannelSubscriptionManager.signal(demand:)(v0[6]);
  v0[16] = v1;
  v0[17] = v2;
  v0[18] = v3;
  if (!v1) {
    swift_release(v0[15]);
  }
  return sub_1000190D4();
}

uint64_t sub_1000115AC()
{
  *(void *)(v0 + 152) = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_100087ABC);
  *(void *)(v0 + 160) = v2;
  sub_100019500(v2, (uint64_t)sub_100011600);
  uint64_t v3 = sub_100019438();
  return sub_1000190F4(v3, v4);
}

uint64_t sub_100011600(uint64_t a1)
{
  id v10 = *(void **)v2;
  uint64_t v4 = v10;
  sub_1000194CC(&v10);
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease(v4[19]);
  if (v1)
  {
    sub_100019180();
    sub_10001919C();
    swift_task_dealloc(v4[10]);
    return sub_1000190E0(*(uint64_t (**)(void))(v2 + 8));
  }

  else
  {
    v4[21] = a1;
    sub_1000194C0();
    return swift_task_switch(v7, v8, v9);
  }

uint64_t sub_100011694()
{
  if (v0[21]) {
    unint64_t v3 = v0[21];
  }
  else {
    unint64_t v3 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v3 >> 62)
  {
    sub_100019848();
    uint64_t result = sub_100019520();
    uint64_t v4 = result;
  }

  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = sub_100019848();
  }

  if (!v4)
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
LABEL_22:
    uint64_t v14 = v0[17];
    uint64_t v13 = v0[18];
    sub_100019124(v3);
    uint64_t v15 = sub_100013BF4((uint64_t)v6);
    v0[22] = sub_100013CA4(v14, v15);
    sub_10001991C();
    uint64_t v16 = sub_100019194();
    uint64_t v17 = sub_100013444(v16, v13);
    v0[23] = v17;
    uint64_t v18 = static CloudChannelSubscriptionManager.topic.getter();
    uint64_t v20 = v19;
    v0[24] = v19;
    uint64_t v21 = (void *)swift_task_alloc(dword_100087AC4);
    v0[25] = v21;
    sub_100019500(v21, (uint64_t)sub_10001185C);
    return sub_100010C28(v17, v18, v20);
  }

  if (v4 >= 1)
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      if ((v3 & 0xC000000000000001LL) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v3);
      }
      else {
        id v7 = sub_100019408(v3);
      }
      sub_10001959C(v7);
      sub_100019330();
      if (v2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        {
          sub_1000197C0();
          uint64_t v6 = v11;
        }

        unint64_t v8 = v6[2];
        if (v8 >= v6[3] >> 1)
        {
          sub_1000197C0();
          uint64_t v6 = v12;
        }

        v6[2] = v8 + 1;
        uint64_t v9 = &v6[2 * v8];
        v9[4] = v1;
        v9[5] = v2;
      }

      sub_1000196F0();
    }

    while (!v10);
    goto LABEL_22;
  }

  __break(1u);
  return result;
}

uint64_t sub_10001185C()
{
  *(void *)(v0 + 208) = v1;
  swift_task_dealloc(v3);
  if (!v1)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 192));
    sub_100019278();
  }

  return sub_1000190B0();
}

uint64_t sub_1000118C0()
{
  v0[27] = v1;
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_100087ACC);
  v0[28] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_100011928;
  uint64_t v3 = sub_1000198DC(v0[17]);
  return sub_100013CF4(v3, v4, v5);
}

uint64_t sub_100011928()
{
  *(void *)(v0 + 232) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_bridgeObjectRelease(*(void *)(v0 + 216));
  }
  return sub_1000190B0();
}

uint64_t sub_100011988( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, os_log_type_t type, uint64_t a14, uint64_t a15, uint64_t a16, os_log_t log, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31)
{
  a30 = v32;
  a31 = v33;
  a29 = v31;
  if (qword_100087110 != -1) {
    swift_once(&qword_100087110, sub_10004BF7C);
  }
  uint64_t v35 = v31[17];
  uint64_t v34 = v31[18];
  uint64_t v37 = v31[9];
  uint64_t v36 = v31[10];
  uint64_t v38 = v31[8];
  uint64_t v39 = sub_10000B928(v38, (uint64_t)qword_10008F390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v36, v39, v38);
  swift_bridgeObjectRetain_n(v34, 3LL);
  swift_bridgeObjectRetain_n(v35, 3LL);
  uint64_t v40 = sub_10000C610();
  os_log_type_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  BOOL v43 = sub_100019758(v42);
  uint64_t v44 = v31[22];
  uint64_t v46 = v31[17];
  uint64_t v45 = v31[18];
  uint64_t v48 = v31[9];
  uint64_t v47 = v31[10];
  uint64_t v49 = v31[8];
  if (v43)
  {
    loga = v41;
    uint64_t v50 = sub_100019148(22LL);
    uint64_t v64 = sub_100019148(64LL);
    *(_DWORD *)uint64_t v50 = 136315394;
    v31[2] = v46;
    a20 = v64;
    uint64_t v66 = v49;
    uint64_t v62 = sub_100006BEC(&qword_100087AD0);
    sub_10000C04C(&qword_100087AD8, &qword_100087AD0);
    uint64_t v52 = v51;
    os_log_type_t typea = v38;
    unint64_t v53 = sub_10000EB58();
    uint64_t v54 = Sequence<>.joined(separator:)(44LL, 0xE100000000000000LL, v62, v52, v53);
    v31[3] = sub_100015AD4(v54, v55, &a20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v31 + 3, v31 + 4, v50 + 4, v50 + 12);
    sub_100019278();
    sub_100019124(v46);
    sub_100019124(v45);
    *(_WORD *)(v50 + sub_100006E64(v0 + 12) = 2080;
    sub_10000C688();
    uint64_t v56 = swift_bridgeObjectRetain(v44);
    v31[4] = sub_100013444(v56, v45);
    uint64_t v57 = Sequence<>.joined(separator:)(44LL, 0xE100000000000000LL, v62, v52, v53);
    unint64_t v59 = v58;
    sub_10001919C();
    v31[5] = sub_100015AD4(v57, v59, &a20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v31 + 5, v31 + 6, v50 + 14, v50 + 22);
    sub_100019180();
    sub_100019124(v46);
    sub_100019124(v45);
    sub_100019124(v44);
    _os_log_impl( (void *)&_mh_execute_header,  loga,  typea,  "active channels: [%s], expired channels: [%s]",  (uint8_t *)v50,  0x16u);
    swift_arrayDestroy(v64, 2LL);
    sub_1000190E8(v64);
    sub_1000190E8(v50);

    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v66);
  }

  else
  {
    swift_bridgeObjectRelease_n(v31[17], 4LL);
    swift_bridgeObjectRelease_n(v45, 4LL);
    sub_100019124(v44);

    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
  }

  sub_100019364();
  uint64_t v60 = (uint64_t (*)(void))sub_100019280();
  return sub_10001912C(v60);
}

uint64_t sub_100011C68()
{
  return sub_1000190BC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100011C98()
{
  return sub_1000190E0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100011CEC()
{
  return sub_100019104(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100011D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_100087038 != -1) {
    swift_once(&qword_100087038, sub_10000EDB4);
  }
  *(void *)(v4 + 5sub_100006E64(v0 + 6) = qword_10008F1E0;
  uint64_t v5 = (void *)swift_task_alloc(dword_100087ABC);
  *(void *)(v4 + 6sub_100006E64(v0 + 4) = v5;
  uint64_t v6 = sub_100019350(v5, (uint64_t)sub_100011DAC);
  return sub_1000190F4(v6, v7);
}

uint64_t sub_100011DAC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 64);
  uint64_t v4 = *v2;
  *(void *)(v4 + 72) = a1;
  *(void *)(v4 + 80) = v1;
  sub_1000192FC(v3);
  if (v1) {
    return sub_1000190E0(*(uint64_t (**)(void))(v4 + 8));
  }
  else {
    return sub_1000190B0();
  }
}

uint64_t sub_100011E10()
{
  uint64_t v3 = v0[9];
  if (!v3)
  {
LABEL_20:
    id v19 = objc_allocWithZone(&OBJC_CLASS___PKPublicChannel);
    sub_10000C610();
    v0[11] = sub_100019788();
    uint64_t v20 = (void *)swift_task_alloc(dword_100087AFC);
    v0[12] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100011F90;
    return sub_1000192C4();
  }

  sub_10001985C();
  if (v5)
  {
    sub_10000C610();
    uint64_t result = sub_100019520();
    uint64_t v6 = result;
  }

  else
  {
    uint64_t v6 = *(void *)(v4 + 16);
    uint64_t result = sub_10000C610();
  }

  if (!v6)
  {
LABEL_18:
    sub_100019124(v3);
    sub_10001991C();
    sub_10001970C();
    uint64_t v17 = *(void *)(v16 + 16);
    swift_bridgeObjectRelease();
    if (v17)
    {
      uint64_t v18 = (uint64_t (*)(void))sub_100019280();
      return sub_1000192A8(v18);
    }

    goto LABEL_20;
  }

  if (v6 >= 1)
  {
    unint64_t v8 = v0[9] & 0xC000000000000001LL;
    uint64_t v9 = _swiftEmptyArrayStorage;
    do
    {
      if (v8) {
        char v10 = (void *)sub_1000193FC();
      }
      else {
        char v10 = sub_100019408(v3);
      }
      sub_10001959C(v10);
      sub_100019330();
      if (v2)
      {
        if ((sub_1000196FC() & 1) == 0)
        {
          sub_100019168();
          uint64_t v9 = v14;
        }

        unint64_t v11 = v9[2];
        if (v11 >= v9[3] >> 1)
        {
          sub_100019188();
          uint64_t v9 = v15;
        }

        v9[2] = v11 + 1;
        uint64_t v12 = &v9[2 * v11];
        v12[4] = v1;
        v12[5] = v2;
      }

      sub_1000196F0();
    }

    while (!v13);
    goto LABEL_18;
  }

  __break(1u);
  return result;
}

uint64_t sub_100011F90(uint64_t a1)
{
  return sub_1000190C8();
}

uint64_t sub_100011FBC()
{
  uint64_t v2 = sub_10001971C();
  sub_100018B28(v2, v3, v4, v5);

  uint64_t v6 = (uint64_t (*)(void))sub_100019280();
  return sub_1000190E0(v6);
}

uint64_t sub_100011FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_100087038 != -1) {
    swift_once(&qword_100087038, sub_10000EDB4);
  }
  *(void *)(v4 + 5sub_100006E64(v0 + 6) = qword_10008F1E0;
  uint64_t v5 = (void *)swift_task_alloc(dword_100087ABC);
  *(void *)(v4 + 6sub_100006E64(v0 + 4) = v5;
  uint64_t v6 = sub_100019350(v5, (uint64_t)sub_100012064);
  return sub_1000190F4(v6, v7);
}

uint64_t sub_100012064(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 64);
  uint64_t v4 = *v2;
  *(void *)(v4 + 72) = a1;
  *(void *)(v4 + 80) = v1;
  sub_1000192FC(v3);
  if (v1) {
    return sub_1000190E0(*(uint64_t (**)(void))(v4 + 8));
  }
  else {
    return sub_1000190B0();
  }
}

uint64_t sub_1000120C8()
{
  uint64_t v3 = v0[9];
  if (!v3)
  {
LABEL_20:
    uint64_t v20 = (uint64_t (*)(void))sub_100019280();
    return sub_1000192A8(v20);
  }

  sub_10001985C();
  if (v5)
  {
    sub_10000C610();
    uint64_t result = sub_100019520();
    uint64_t v6 = result;
  }

  else
  {
    uint64_t v6 = *(void *)(v4 + 16);
    uint64_t result = sub_10000C610();
  }

  if (!v6)
  {
LABEL_18:
    sub_100019124(v3);
    sub_10001991C();
    sub_10001970C();
    uint64_t v17 = *(void *)(v16 + 16);
    swift_bridgeObjectRelease();
    if (v17)
    {
      id v18 = objc_allocWithZone(&OBJC_CLASS___PKPublicChannel);
      sub_10000C610();
      v0[11] = sub_100019788();
      id v19 = (void *)swift_task_alloc(dword_100087AFC);
      v0[12] = v19;
      *id v19 = v0;
      v19[1] = sub_100012248;
      return sub_1000192C4();
    }

    goto LABEL_20;
  }

  if (v6 >= 1)
  {
    unint64_t v8 = v0[9] & 0xC000000000000001LL;
    uint64_t v9 = _swiftEmptyArrayStorage;
    do
    {
      if (v8) {
        char v10 = (void *)sub_1000193FC();
      }
      else {
        char v10 = sub_100019408(v3);
      }
      sub_10001959C(v10);
      sub_100019330();
      if (v2)
      {
        if ((sub_1000196FC() & 1) == 0)
        {
          sub_100019168();
          uint64_t v9 = v14;
        }

        unint64_t v11 = v9[2];
        if (v11 >= v9[3] >> 1)
        {
          sub_100019188();
          uint64_t v9 = v15;
        }

        v9[2] = v11 + 1;
        uint64_t v12 = &v9[2 * v11];
        v12[4] = v1;
        v12[5] = v2;
      }

      sub_1000196F0();
    }

    while (!v13);
    goto LABEL_18;
  }

  __break(1u);
  return result;
}

uint64_t sub_100012248(uint64_t a1)
{
  return sub_1000190C8();
}

uint64_t sub_100012274()
{
  uint64_t v2 = sub_10001971C();
  sub_100018B7C(v2, v3, v4, v5);

  uint64_t v6 = (uint64_t (*)(void))sub_100019280();
  return sub_1000190E0(v6);
}

uint64_t sub_1000122A8(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  if (qword_100087038 != -1) {
    swift_once(&qword_100087038, sub_10000EDB4);
  }
  v3[6] = qword_10008F1E0;
  uint64_t v4 = (void *)swift_task_alloc(dword_100087AFC);
  v3[7] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100012328;
  return sub_10000FB14();
}

uint64_t sub_100012328(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 64LL) = a1;
  sub_1000192FC(v2);
  sub_1000194C0();
  return sub_1000190C8();
}

uint64_t sub_100012374(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = qword_10008F1E0;
  sub_100018DE4(&qword_100087A80, a2, (uint64_t (*)(uint64_t))type metadata accessor for CloudChannelTaskActor);
  uint64_t v7 = v6;
  uint64_t v8 = swift_task_alloc(48LL);
  *(void *)(v2 + 72) = v8;
  __int128 v9 = *(_OWORD *)(v2 + 32);
  *(void *)(v8 + 1sub_100006E64(v0 + 6) = v3;
  *(void *)(v8 + 2sub_100006E64(v0 + 4) = v4;
  *(_OWORD *)(v8 + 32) = v9;
  char v10 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v2 + 80) = v10;
  uint64_t v11 = sub_100006BEC(&qword_100087B28);
  *char v10 = v2;
  v10[1] = sub_100012460;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v2 + 16,  v5,  v7,  0xD00000000000001BLL,  0x800000010006B2B0LL,  sub_100018C64,  v8,  v11);
}

uint64_t sub_100012460()
{
  *(void *)(v0 + 88) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_task_dealloc(*(void *)(v0 + 72));
  }
  return sub_1000190B0();
}

uint64_t sub_1000124C0()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_1000124F4()
{
  sub_100019528();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10001252C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100006BEC(&qword_100087B30);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = swift_allocObject(&unk_10007F470, 24LL, 7LL);
  swift_unknownObjectWeakInit(v13 + 16, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v10);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = (v14 + 24) & ~v14;
  uint64_t v16 = swift_allocObject(&unk_10007F498, v15 + v12, v14 | 7);
  *(void *)(v16 + 1sub_100006E64(v0 + 6) = v13;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))( v16 + v15,  (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
  aBlock[4] = sub_100018D0C;
  uint64_t v19 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100012AD0;
  aBlock[3] = &unk_10007F4B0;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release(v19);
  sub_100018BD0(a3, a4, (uint64_t)v17, a2);
  _Block_release(v17);
}

uint64_t sub_100012698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100006BEC(&qword_100087B38);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for CloudChannelError(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char **)((char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (a2)
  {
    uint64_t v42 = a3 + 16;
    swift_errorRetain(a2);
    if (qword_100087110 != -1) {
      swift_once(&qword_100087110, sub_10004BF7C);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000B928(v15, (uint64_t)qword_10008F390);
    swift_errorRetain(a2);
    uint64_t v16 = swift_errorRetain(a2);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc(12LL, -1LL);
      uint64_t v40 = v12;
      uint64_t v20 = (uint8_t *)v19;
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v46 = v21;
      uint64_t v39 = v10;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v41 = a4;
      swift_getErrorValue(a2, v44, v43);
      uint64_t v22 = Error.localizedDescription.getter(v43[1], v43[2]);
      unint64_t v24 = v23;
      uint64_t v45 = sub_100015AD4(v22, v23, &v46);
      uint64_t v10 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v24);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to fetch registered channels - error: %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
      uint64_t v25 = v20;
      uint64_t v12 = v40;
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(47LL);
    swift_bridgeObjectRelease(v47);
    uint64_t v46 = 0xD00000000000002DLL;
    unint64_t v47 = 0x800000010006B2F0LL;
    swift_getErrorValue(a2, v49, v48);
    v28._uint64_t countAndFlagsBits = Error.localizedDescription.getter(v48[1], v48[2]);
    object = v28._object;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(object);
    unint64_t v30 = v47;
    *uint64_t v14 = v46;
    v14[1] = v30;
    (*(void (**)(void *, void, uint64_t))(v12 + 104))( v14,  enum case for CloudChannelError.failedToFetchRegisteredChannels(_:),  v11);
    uint64_t v31 = v42;
    swift_beginAccess(v42, &v46, 0LL, 0LL);
    uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(v31);
    if (Strong)
    {
      uint64_t v33 = Strong;
      uint64_t v34 = *(void *)&Strong[OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor];
      if (v34)
      {
        swift_retain(*(void *)&Strong[OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor]);

        (*(void (**)(char *, void *, uint64_t))(v12 + 16))(v10, v14, v11);
        sub_10000AB60((uint64_t)v10, 0LL, 1LL, v11);
        sub_10003861C((uint64_t)v10);
        swift_release(v34);
        sub_100019034((uint64_t)v10, &qword_100087B38);
      }

      else
      {
      }
    }

    sub_100018DE4( (unint64_t *)&unk_100087B40,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CloudChannelError);
    uint64_t v36 = swift_allocError(v11, v35, 0LL, 0LL);
    (*(void (**)(uint64_t, void *, uint64_t))(v12 + 16))(v37, v14, v11);
    uint64_t v45 = v36;
    uint64_t v38 = sub_100006BEC(&qword_100087B30);
    CheckedContinuation.resume(throwing:)(&v45, v38);
    swift_errorRelease(a2);
    return (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  }

  else
  {
    uint64_t v46 = a1;
    swift_bridgeObjectRetain(a1);
    uint64_t v26 = sub_100006BEC(&qword_100087B30);
    return CheckedContinuation.resume(returning:)(&v46, v26);
  }

uint64_t sub_100012AD0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v7 = sub_10001906C(0LL, &qword_100087B10, &OBJC_CLASS___PKPublicChannel_ptr);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }

  swift_retain(v5);
  id v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_100012B5C(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = sub_100006BEC(&qword_100087B38);
  v2[6] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CloudChannelSubscription.Demand(0LL);
  v2[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[8] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v2[9] = swift_task_alloc(v6);
  v2[10] = swift_task_alloc(v6);
  if (qword_100087038 != -1) {
    swift_once(&qword_100087038, sub_10000EDB4);
  }
  v2[11] = qword_10008F1E0;
  return sub_1000190C8();
}

uint64_t sub_100012C18()
{
  if (qword_1000870A8 != -1) {
    swift_once(&qword_1000870A8, sub_10002DD6C);
  }
  *(void *)(v0 + 9sub_100006E64(v0 + 6) = qword_10008F2A8;
  return sub_1000190C8();
}

uint64_t sub_100012C74()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 96) + 112LL);
  *(void *)(v0 + 10sub_100006E64(v0 + 4) = v1;
  swift_retain(v1);
  sub_1000194C0();
  return sub_1000190C8();
}

uint64_t sub_100012CAC()
{
  uint64_t v3 = v2[13];
  if (v3)
  {
    uint64_t v4 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v2[14] = v4;
    uint64_t v5 = sub_100006BEC(&qword_100087B50);
    uint64_t v6 = sub_100006BEC((uint64_t *)&unk_100088B90);
    *uint64_t v4 = v2;
    v4[1] = sub_100012E78;
    return Task.value.getter(v2 + 3, v3, v5, v6, &protocol self-conformance witness table for Error);
  }

  else
  {
    v2[16] = 0LL;
    uint64_t v8 = *(void *)(v2[4] + 16LL);
    if (v8)
    {
      sub_1000193A4();
      int v9 = enum case for CloudChannelSubscription.Demand.leagues(_:);
      int v17 = enum case for CloudChannelSubscription.Demand.all(_:);
      swift_bridgeObjectRetain(v10);
      do
      {
        sub_1000193E0();
        sub_100019548();
        int v11 = sub_1000197B0();
        if (v11 == v9)
        {
          sub_1000195B0();
          sub_100019194();
          uint64_t v12 = (void *)sub_100019934();
        }

        else if (v11 == v17)
        {
          uint64_t v13 = sub_100019194();
          sub_100019530(v13, v14, v15);
          swift_bridgeObjectRelease();
          uint64_t v12 = v19;
        }

        else
        {
          sub_100019194();
          sub_100019798();
          uint64_t v12 = v1;
        }

        sub_1000196A0();
        sub_100019180();
        v0 += v18;
        --v8;
      }

      while (v8);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v12 = &_swiftEmptySetSingleton;
    }

    v2[17] = v12;
    v2[18] = sub_1000195CC();
    v2[19] = sub_1000195C4();
    sub_100019324(&qword_100087AB0);
    sub_10001961C(v16);
    sub_10001955C();
    sub_10001944C();
    return sub_10001928C();
  }

uint64_t sub_100012E78()
{
  *(void *)(v0 + 120) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_bridgeObjectRelease();
  }
  return sub_1000190B0();
}

uint64_t sub_100012ED8()
{
  v2[16] = v2[15];
  uint64_t v3 = *(void *)(v2[4] + 16LL);
  if (v3)
  {
    sub_1000193A4();
    int v4 = enum case for CloudChannelSubscription.Demand.leagues(_:);
    int v13 = enum case for CloudChannelSubscription.Demand.all(_:);
    swift_bridgeObjectRetain(v5);
    do
    {
      sub_1000193E0();
      sub_100019548();
      int v6 = sub_1000197B0();
      if (v6 == v4)
      {
        sub_1000195B0();
        sub_100019194();
        uint64_t v7 = (void *)sub_100019934();
      }

      else if (v6 == v13)
      {
        uint64_t v8 = sub_100019194();
        sub_100019530(v8, v9, v10);
        swift_bridgeObjectRelease();
        uint64_t v7 = v15;
      }

      else
      {
        sub_100019194();
        sub_100019798();
        uint64_t v7 = v1;
      }

      sub_1000196A0();
      sub_100019180();
      v0 += v14;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v7 = &_swiftEmptySetSingleton;
  }

  v2[17] = v7;
  v2[18] = sub_1000195CC();
  v2[19] = sub_1000195C4();
  sub_100019324(&qword_100087AB0);
  sub_10001961C(v11);
  sub_10001955C();
  sub_10001944C();
  return sub_10001928C();
}

uint64_t sub_100013028()
{
  uint64_t v1 = v0[16];
  v0[21] = dispatch thunk of CloudChannelSubscriptionManager.readChannelMap()();
  v0[22] = v1;
  swift_release(v0[19]);
  if (v1) {
    sub_100019278();
  }
  return sub_1000190D4();
}

uint64_t sub_10001309C()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[17];
  sub_10000C610();
  char v3 = sub_1000135C4(v2, v1);
  sub_100019278();
  sub_10001919C();
  if ((v3 & 1) != 0)
  {
    int v4 = (void *)swift_task_alloc(dword_1000884B4);
    v0[23] = v4;
    *int v4 = v0;
    v4[1] = sub_100013134;
    return sub_10002DDA8();
  }

  else
  {
    sub_1000198F0();
    sub_100019528();
    sub_100019924();
    int v6 = (uint64_t (*)(void))sub_100019280();
    return sub_100019104(v6);
  }

uint64_t sub_100013134()
{
  uint64_t v2 = v0[23];
  v0[24] = v3;
  v0[25] = v1;
  sub_1000192FC(v2);
  return sub_1000190B0();
}

uint64_t sub_10001318C()
{
  *(void *)(v0 + 208) = static CloudChannelSubscriptionManager.shared.getter();
  uint64_t v1 = sub_100019438();
  dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  sub_10001955C();
  sub_10001944C();
  return sub_1000190D4();
}

uint64_t sub_1000131E0()
{
  uint64_t v1 = v0[25];
  dispatch thunk of CloudChannelSubscriptionManager.updateChannelMap(_:)(v0[24]);
  v0[27] = v1;
  if (v1) {
    return sub_1000190D4();
  }
  swift_bridgeObjectRelease(v0[24]);
  sub_100019444();
  sub_1000198F0();
  sub_100019528();
  sub_100019924();
  uint64_t v3 = (uint64_t (*)(void))sub_100019280();
  return sub_100019104(v3);
}

uint64_t sub_100013254()
{
  return sub_100019104(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10001329C()
{
  if (*(void *)(*(void *)(v0 + 40) + OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor))
  {
    sub_10001933C();
    sub_10001992C();
    sub_100006BEC((uint64_t *)&unk_100088B90);
    uint64_t v1 = sub_100019588();
    int v2 = sub_1000191A4(v1);
    sub_100019254(v2);
    uint64_t v3 = sub_100019444();
    sub_100019840(v3, &qword_100087B38);
  }

  sub_1000198A0();
  sub_1000195FC();
  sub_100019528();
  sub_100019768();
  return sub_100019150(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100013324()
{
  if (*(void *)(*(void *)(v0 + 40) + OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor))
  {
    sub_10001933C();
    sub_10001992C();
    sub_100006BEC((uint64_t *)&unk_100088B90);
    uint64_t v1 = sub_100019588();
    int v2 = sub_1000191A4(v1);
    sub_100019254(v2);
    uint64_t v3 = sub_100019444();
    sub_100019840(v3, &qword_100087B38);
  }

  sub_1000198A0();
  sub_1000195FC();
  sub_100019528();
  sub_100019768();
  return sub_100019150(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000133AC()
{
  if (*(void *)(*(void *)(v0 + 40) + OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor))
  {
    sub_10001933C();
    sub_10001992C();
    sub_100006BEC((uint64_t *)&unk_100088B90);
    uint64_t v1 = sub_100019588();
    int v2 = sub_1000191A4(v1);
    sub_100019254(v2);
    uint64_t v3 = sub_100019444();
    sub_100019840(v3, &qword_100087B38);
  }

  sub_1000198A0();
  sub_1000195FC();
  sub_100019528();
  sub_100019768();
  return sub_100019150(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100013444(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0LL;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain(v16);
    sub_1000171C8(v17, v15, v16);
    uint64_t result = swift_bridgeObjectRelease(v17[1]);
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }

LABEL_20:
    unint64_t v7 = (v12 - 1) & v12;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v18;
  }

  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }

    uint64_t v15 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_21:
    uint64_t v26 = (uint64_t *)(*(void *)(v53 + 48) + 16 * v21);
    uint64_t v27 = v26[1];
    if (!*(void *)(a2 + 16))
    {
      sub_10000AB60(v22, 1LL, 1LL, v10);
      swift_bridgeObjectRetain(v27);
LABEL_29:
      sub_100019034(v22, &qword_100087B58);
      swift_bridgeObjectRelease(a2);
      swift_release(v53);
      swift_bridgeObjectRelease(v27);
      return 1LL;
    }

    Swift::String v28 = *v26;
    swift_bridgeObjectRetain_n(v26[1], 2LL);
    os_log_type_t v29 = sub_100015FF4(v28, v27);
    if ((v30 & 1) != 0)
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v54 + 16))( v22,  *(void *)(a2 + 56) + *(void *)(v54 + 72) * v29,  v10);
      uint64_t v31 = 0LL;
    }

    else
    {
      uint64_t v31 = 1LL;
    }

    sub_10000AB60(v22, v31, 1LL, v10);
    swift_bridgeObjectRelease(v27);
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 32);
    uint64_t v56 = v17;
    uint64_t v33 = v46;
    uint64_t v34 = v32(v46, v22, v10);
    uint64_t v35 = v49;
    uint64_t v36 = CloudChannelSubscription.CacheValue.expiration.getter(v34);
    static Date.now.getter(v36);
    sub_100018DE4(&qword_100087B60, 255LL, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v37 = v48;
    unint64_t v55 = dispatch thunk of static Comparable.< infix(_:_:)(v35, v19, v48, v38);
    uint64_t v39 = a2;
    uint64_t v40 = *(void (**)(char *, uint64_t))(v51 + 8);
    v40(v19, v37);
    uint64_t v41 = v35;
    uint64_t v10 = v47;
    v40(v41, v37);
    a2 = v39;
    uint64_t v42 = v33;
    int v17 = v56;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v42, v10);
    uint64_t result = swift_bridgeObjectRelease(v27);
    if ((v55 & 1) != 0)
    {
      swift_bridgeObjectRelease(v39);
      swift_release(v53);
      return 1LL;
    }
  }

  while (1)
  {
    int v17 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v17 >= v45) {
      goto LABEL_32;
    }
    unint64_t v24 = *(void *)(v44 + 8 * v17);
    ++v25;
    if (v24) {
      goto LABEL_20;
    }
  }

      uint64_t v10 = (v17 - 1) & v17;
    }

    while (1)
    {
      int64_t v13 = v18 + 1;
      if (__OFADD__(v18, 1LL)) {
        break;
      }
      if (v13 >= v32) {
        goto LABEL_32;
      }
      int v17 = *(void *)(v8 + 8 * v13);
      ++v18;
      if (v17) {
        goto LABEL_20;
      }
    }

    unint64_t v9 = (v15 - 1) & v15;
  }

  uint64_t v16 = v14 + 4;
  if (v16 >= v10)
  {
LABEL_23:

    swift_release(a1);
    return;
  }

  uint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v11 >= v10) {
      goto LABEL_23;
    }
    uint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

  uint64_t v39 = *(void *)(v101 + OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_environmentDataCenter + 8);
  if (v39)
  {
    uint64_t v40 = *(void *)(v101 + OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_environmentDataCenter);
    uint64_t v116 = (uint64_t)v31;
    unint64_t v114 = v40;
    v115[0] = v39;
  }

  else
  {
    unint64_t v114 = 0LL;
    v115[0] = 0LL;
    v115[1] = 0LL;
    uint64_t v116 = 1LL;
  }

  swift_bridgeObjectRetain(v39);
  sub_10005B7EC((uint64_t)&v114, 42LL);
LABEL_24:
  sub_10005E8A8((uint64_t)&v118);
  uint64_t v41 = v118;
  uint64_t v42 = *(void *)(v118 + 64);
  uint64_t v103 = v118 + 64;
  BOOL v43 = 1LL << *(_BYTE *)(v118 + 32);
  uint64_t v44 = -1LL;
  if (v43 < 64) {
    uint64_t v44 = ~(-1LL << v43);
  }
  uint64_t v45 = v44 & v42;
  uint64_t v46 = (char *)&v111 + 8;
  uint64_t v31 = v115;
  v105 = (unint64_t)(v43 + 63) >> 6;
  unint64_t v90 = v105 - 1;
  swift_bridgeObjectRetain(v118);
  int64_t v3 = 0LL;
  unint64_t v47 = &_swiftEmptyDictionarySingleton;
  isUniquelyReferenced_nonNull_native = qword_100087690;
  uint64_t v16 = &qword_100089FC8;
  uint64_t v102 = (char *)&type metadata for Any + 8;
  __int128 v104 = v115;
  if (v45)
  {
LABEL_27:
    sub_1000619A4();
    uint64_t v49 = v48 | (v3 << 6);
LABEL_28:
    uint64_t v50 = *(void *)(v41 + 56);
    LOBYTE(v1sub_100006E64(v0 + 11) = *(_BYTE *)(*(void *)(v41 + 48) + v49);
    sub_100035EAC(v50 + 32 * v49, (uint64_t)v46, qword_100087690);
    goto LABEL_47;
  }

  while (1)
  {
    uint64_t v51 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      swift_once(&qword_100087130, sub_100051030);
      goto LABEL_11;
    }

    if (v51 < v105)
    {
      uint64_t v52 = *(void *)(v103 + 8 * v51);
      if (v52) {
        goto LABEL_32;
      }
      unint64_t v53 = v3 + 2;
      ++v3;
      if (v51 + 1 < v105)
      {
        uint64_t v52 = *(void *)(v103 + 8 * v53);
        if (v52) {
          goto LABEL_35;
        }
        int64_t v3 = v51 + 1;
        if (v51 + 2 < v105)
        {
          uint64_t v52 = *(void *)(v103 + 8 * (v51 + 2));
          if (v52)
          {
            v51 += 2LL;
            goto LABEL_32;
          }

          unint64_t v53 = v51 + 3;
          int64_t v3 = v51 + 2;
          if (v51 + 3 < v105) {
            break;
          }
        }
      }
    }

LABEL_25:
  __break(1u);
  return result;
}

      uint64_t result = (unint64_t *)swift_bridgeObjectRelease(v12);
      goto LABEL_26;
    }

    uint64_t result = (unint64_t *)swift_bridgeObjectRelease(v12);
LABEL_13:
    unint64_t v23 = v32[v17];
    v32[v17] = v23 & ~v18;
    if ((v18 & v23) != 0)
    {
      unint64_t v24 = v33 - 1;
      if (__OFSUB__(v33, 1LL)) {
        goto LABEL_31;
      }
      --v33;
      if (!v24) {
        return (unint64_t *)&_swiftEmptySetSingleton;
      }
    }

    if (sub_10000AB6C((uint64_t)v105, 1LL, v5))
    {
      if (v102) {
        uint64_t v16 = v101;
      }
      else {
        uint64_t v16 = v101 + 1;
      }
      memcpy(a1, v105, v16);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, v105, v5);
      sub_10000AB60((uint64_t)a1, 0LL, 1LL, v5);
      if (v102) {
        uint64_t v16 = v101;
      }
      else {
        uint64_t v16 = v101 + 1;
      }
    }

    uint64_t v93 = a1;
    os_log_type_t v29 = (void *)(((unint64_t)a1 + v13 + v16) & v14);
    unint64_t v30 = (const void *)(((unint64_t)v105 + v13 + v16) & v14);
    if (sub_10000AB6C((uint64_t)v30, 1LL, v5))
    {
      memcpy(v29, v30, v16);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v29, v30, v5);
      sub_10000AB60((uint64_t)v29, 0LL, 1LL, v5);
    }

    uint64_t v31 = (void *)(((unint64_t)v30 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v32 = (void *)(((unint64_t)v29 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v32 = *v31;
    uint64_t v33 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v34 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v33 = *v34;
    uint64_t v35 = (void *)(((unint64_t)v33 + v13 + 8) & v14);
    v96 = v13 + 8;
    uint64_t v36 = (const void *)(((unint64_t)v34 + v13 + 8) & v14);
    v97 = v16 + 7;
    if (sub_10000AB6C((uint64_t)v36, 1LL, v5))
    {
      memcpy(v35, v36, v16);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v35, v36, v5);
      sub_10000AB60((uint64_t)v35, 0LL, 1LL, v5);
    }

    Swift::String v28 = v16 + v13;
    uint64_t v37 = (void *)(((unint64_t)v35 + v16 + v13) & v14);
    uint64_t v38 = (const void *)(((unint64_t)v36 + v16 + v13) & v14);
    if (sub_10000AB6C((uint64_t)v38, 1LL, v5))
    {
      memcpy(v37, v38, v16);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v37, v38, v5);
      sub_10000AB60((uint64_t)v37, 0LL, 1LL, v5);
    }

    uint64_t v39 = (void *)(((unint64_t)v37 + v28) & v14);
    uint64_t v40 = (const void *)(((unint64_t)v38 + v28) & v14);
    if (sub_10000AB6C((uint64_t)v40, 1LL, v5))
    {
      memcpy(v39, v40, v16);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v39, v40, v5);
      sub_10000AB60((uint64_t)v39, 0LL, 1LL, v5);
    }

    *((_BYTE *)v39 + v1sub_100006E64(v0 + 6) = *((_BYTE *)v40 + v16);
    uint64_t v41 = ((unint64_t)v39 + v16) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v42 = ((unint64_t)v40 + v16) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)(v41 + 8) = *(void *)(v42 + 8);
    BOOL v43 = *(void *)(v42 + 16);
    *(void *)(v41 + 1sub_100006E64(v0 + 6) = v43;
    uint64_t v44 = (void *)((v13 + 24 + v41) & v14);
    uint64_t v45 = (const void *)((v13 + 24 + v42) & v14);
    swift_bridgeObjectRetain(v43);
    if (sub_10000AB6C((uint64_t)v45, 1LL, v5))
    {
      memcpy(v44, v45, v16);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v44, v45, v5);
      sub_10000AB60((uint64_t)v44, 0LL, 1LL, v5);
    }

    uint64_t v46 = (void *)(((unint64_t)v44 + v16 + v15) & v104);
    v94 = v16 + v15;
    unint64_t v47 = (const void *)(((unint64_t)v45 + v16 + v15) & v104);
    if (sub_10000AB6C((uint64_t)v47, 1LL, v95))
    {
      uint64_t v48 = v99 == 0;
      uint64_t v100 = v99 == 0;
      if (v48) {
        uint64_t v49 = v103 + 1;
      }
      else {
        uint64_t v49 = v103;
      }
      memcpy(v46, v47, v49);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v46, v47, v95);
      sub_10000AB60((uint64_t)v46, 0LL, 1LL, v95);
      uint64_t v48 = v99 == 0;
      uint64_t v100 = v99 == 0;
      if (v48) {
        uint64_t v49 = v103 + 1;
      }
      else {
        uint64_t v49 = v103;
      }
    }

    uint64_t v50 = v49 + v13;
    uint64_t v51 = (void *)(((unint64_t)v46 + v49 + v13) & v14);
    uint64_t v52 = (const void *)(((unint64_t)v47 + v50) & v14);
    if (sub_10000AB6C((uint64_t)v52, 1LL, v5))
    {
      memcpy(v51, v52, v16);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v51, v52, v5);
      sub_10000AB60((uint64_t)v51, 0LL, 1LL, v5);
    }

    a1 = v93;
    unint64_t v53 = (void *)(((unint64_t)v51 + v28) & v14);
    uint64_t v54 = (const void *)(((unint64_t)v52 + v28) & v14);
    if (sub_10000AB6C((uint64_t)v54, 1LL, v5))
    {
      memcpy(v53, v54, v16);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v53, v54, v5);
      sub_10000AB60((uint64_t)v53, 0LL, 1LL, v5);
    }

    unint64_t v55 = (void *)(((unint64_t)v53 + v28) & v14);
    uint64_t v56 = (const void *)(((unint64_t)v54 + v28) & v14);
    if (sub_10000AB6C((uint64_t)v56, 1LL, v5))
    {
      memcpy(v55, v56, v16);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v55, v56, v5);
      sub_10000AB60((uint64_t)v55, 0LL, 1LL, v5);
    }

    uint64_t v25 = v13 + 24;
    uint64_t v57 = ((unint64_t)v55 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v58 = ((unint64_t)v56 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v59 = *(void *)v58;
    *(_BYTE *)(v57 + 8) = *(_BYTE *)(v58 + 8);
    *(void *)uint64_t v57 = v59;
    uint64_t v60 = (void *)(((unint64_t)v55 + v16 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v61 = (void *)(((unint64_t)v56 + v16 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v60 = *v61;
    uint64_t v62 = v61[1];
    v60[1] = v62;
    uint64_t v63 = (void *)(((unint64_t)v60 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v64 = (void *)(((unint64_t)v61 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v63 = *v64;
    char v65 = v64[1];
    v63[1] = v65;
    uint64_t v66 = (void *)(((unint64_t)v63 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    char v67 = (void *)(((unint64_t)v64 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v66 = *v67;
    char v68 = v67[1];
    v66[1] = v68;
    char v69 = (void *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    char v70 = (void *)(((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *char v69 = *v70;
    uint64_t v71 = v70[1];
    v69[1] = v71;
    uint64_t v72 = (void *)(((unint64_t)v69 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v73 = (void *)(((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v72 = *v73;
    uint64_t v74 = v73[1];
    v72[1] = v74;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v74);
    unint64_t v24 = v100;
    if (v102) {
      int v17 = v101 + v13;
    }
    else {
      int v17 = v16 + v13;
    }
    uint64_t v26 = v94;
    goto LABEL_72;
  }

  uint64_t v16 = v101;
  int v17 = v101 + v13;
  uint64_t v18 = v101 + 7;
  uint64_t v19 = v13 + 8;
LABEL_30:
  unint64_t v24 = v99 == 0;
  v96 = v19;
  v97 = v18;
  uint64_t v25 = v13 + 24;
  uint64_t v26 = v16 + v15;
  uint64_t v27 = v103 + v13;
  if (!v99) {
    ++v27;
  }
  memcpy( a1,  v105,  ((((((((((v16 + ((v17 + ((v17 + ((v27 + ((v16 + v15 + ((v13 + 24 + ((((v17 + ((v17 + ((v19 + ((((v18 + (v17 & v14)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v14)) & v14)) & v14)
                        + v16) & 0xFFFFFFFFFFFFFFF8LL)) & v14)) & v104)) & v14)) & v14)) & v14)
            + 23) & 0xFFFFFFFFFFFFFFF8LL)
          + 23) & 0xFFFFFFFFFFFFFFF8LL)
        + 23) & 0xFFFFFFFFFFFFFFF8LL)
      + 23) & 0xFFFFFFFFFFFFFFF8LL)
    + 23) & 0xFFFFFFFFFFFFFFF8LL)
  + 16);
  Swift::String v28 = v17;
LABEL_72:
  uint64_t v75 = (((((((((v16
               + ((v28
                 + ((v28
                   + ((v103
                     + v13
                     + v24
                     + ((v26
                       + ((v25
                         + ((((v28
                             + ((v28
                               + ((v96 + ((((v97 + (v17 & v14)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v14)) & v14)) & v14)
                           + v16) & 0xFFFFFFFFFFFFFFF8LL)) & v14)) & v104)) & v14)) & v14)) & v14)
               + 23) & 0xFFFFFFFFFFFFFFF8LL)
             + 23) & 0xFFFFFFFFFFFFFFF8LL)
           + 23) & 0xFFFFFFFFFFFFFFF8LL)
         + 23) & 0xFFFFFFFFFFFFFFF8LL)
       + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v76 = type metadata accessor for URLRequest(0LL);
  uint64_t v77 = *(void *)(v76 - 8);
  uint64_t v78 = *(unsigned __int8 *)(v77 + 80);
  uint64_t v79 = v75 + v78 + 16;
  uint64_t v80 = ((unint64_t)a1 + v79) & ~v78;
  uint64_t v81 = ((unint64_t)v105 + v79) & ~v78;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v77 + 16))(v80, v81, v76);
  uint64_t v82 = *(void *)(v77 + 64) + 7LL;
  uint64_t v83 = (void *)((v82 + v80) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v84 = (void **)((v82 + v81) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v85 = *v84;
  *uint64_t v83 = *v84;
  uint64_t v86 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v87 = (uint64_t *)(((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v88 = v87[1];
  unint64_t v89 = v85;
  if ((v88 & 0x3000000000000000LL) != 0)
  {
    *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
  }

  else
  {
    unint64_t v90 = *v87;
    sub_10000B210(*v87, v88);
    *(void *)uint64_t v86 = v90;
    *(void *)(v86 + 8) = v88;
  }

  uint64_t v91 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v91 + 16))( (v86 + *(unsigned __int8 *)(v91 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80),  ((unint64_t)v87 + *(unsigned __int8 *)(v91 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80));
  return a1;
}

  __break(1u);
}

uint64_t sub_1000135C4(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = type metadata accessor for Date(0LL);
  uint64_t v51 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v50 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v49 = (char *)&v43 - v6;
  uint64_t v7 = sub_100006BEC(&qword_100087B58);
  __n128 v8 = __chkstk_darwin(v7);
  uint64_t v52 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for CloudChannelSubscription.CacheValue(0LL, v8);
  uint64_t v54 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v46 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v44 = a1 + 56;
  uint64_t v13 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v45 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v53 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v17 = 0LL;
  uint64_t v47 = v10;
  uint64_t v18 = v54;
  uint64_t v19 = v50;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      uint64_t v22 = (uint64_t)v52;
      goto LABEL_21;
    }

    int64_t v23 = v17 + 1;
    uint64_t v22 = (uint64_t)v52;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_34;
    }

    if (v23 >= v45) {
      goto LABEL_32;
    }
    unint64_t v24 = *(void *)(v44 + 8 * v23);
    ++v17;
    if (!v24)
    {
      int64_t v17 = v23 + 1;
      if (v23 + 1 >= v45) {
        goto LABEL_32;
      }
      unint64_t v24 = *(void *)(v44 + 8 * v17);
      if (!v24)
      {
        int64_t v17 = v23 + 2;
        if (v23 + 2 >= v45) {
          goto LABEL_32;
        }
        unint64_t v24 = *(void *)(v44 + 8 * v17);
        if (!v24)
        {
          int64_t v17 = v23 + 3;
          if (v23 + 3 >= v45) {
            goto LABEL_32;
          }
          unint64_t v24 = *(void *)(v44 + 8 * v17);
          if (!v24)
          {
            int64_t v25 = v23 + 4;
            if (v25 >= v45)
            {
LABEL_32:
              swift_bridgeObjectRelease(a2);
              swift_release(v53);
              return 0LL;
            }

            unint64_t v24 = *(void *)(v44 + 8 * v25);
            int64_t v17 = v25;
            if (!v24) {
              break;
            }
          }
        }
      }
    }

LABEL_34:
  __break(1u);
  return result;
}

void *sub_100013A0C(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    objc_allocWithZone(&OBJC_CLASS___PKPublicChannel);
    sub_100019594();
    uint64_t result = sub_100014B50(v15, v16);
    if (result)
    {
      int64_t v17 = result;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v19 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v18 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v19 >= v18 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1LL);
      }
      uint64_t v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
      uint64_t result = (void *)specialized Array._endMutation()(v20);
    }
  }

  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_28;
  }

  if (v11 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release(a1);
    return _swiftEmptyArrayStorage;
  }

  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

LABEL_28:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    sub_1000528A4((uint64_t)v36);
    sub_100006E64(v38);
    uint64_t result = swift_bridgeObjectRelease();
  }

  if (v20 == 1) {
    goto LABEL_38;
  }
  unint64_t v24 = (uint64_t *)(v19 + 56);
  int64_t v25 = 1LL;
  while (1)
  {
    uint64_t v26 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    uint64_t v27 = *(v24 - 1);
    uint64_t v28 = *v24;
    if (v27 == v16 && v28 == v17) {
      goto LABEL_28;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v16, v17, 0LL);
    if ((result & 1) != 0) {
      goto LABEL_28;
    }
    v24 += 2;
    ++v25;
    if (v26 == v20) {
      goto LABEL_38;
    }
  }

  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_100013BF4(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_1000171C8(v9, v5, v6);
      swift_bridgeObjectRelease(v9[1]);
      v4 += 2;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(a1);
    return v10;
  }

  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease(a1);
  }

  return v7;
}

unint64_t *sub_100013CA4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) > *(void *)(a2 + 16) >> 3) {
    return sub_10001773C(a1, a2);
  }
  sub_100017338(a1);
  return (unint64_t *)a2;
}

uint64_t sub_100013CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = sub_10001939C();
  v4[10] = sub_1000191D0(v5);
  if (qword_100087038 != -1) {
    swift_once(&qword_100087038, sub_10000EDB4);
  }
  v4[11] = qword_10008F1E0;
  uint64_t v6 = (void *)swift_task_alloc(dword_100087ABC);
  v4[12] = v6;
  uint64_t v7 = sub_100019350(v6, (uint64_t)sub_100013D80);
  return sub_1000190F4(v7, v8);
}

uint64_t sub_100013D80(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 96);
  uint64_t v4 = *v2;
  *(void *)(v4 + 10sub_100006E64(v0 + 4) = a1;
  *(void *)(v4 + 1sub_100006E64(v0 + 12) = v1;
  sub_1000192FC(v3);
  if (!v1) {
    return sub_1000190B0();
  }
  sub_100019884();
  return sub_1000190E0(*(uint64_t (**)(void))(v4 + 8));
}

#error "100014088: call analysis failed (funcsize=228)"
uint64_t sub_1000141A0(uint64_t a1)
{
  sub_100019228(a1);
  sub_1000194C0();
  return sub_1000190C8();
}

uint64_t sub_1000141CC()
{
  uint64_t v1 = (void *)v0[17];
  sub_100018A94(v0[15], v0[5], v0[6], v1, (SEL *)&selRef_subscribeToChannels_forTopic_);

  sub_100019364();
  uint64_t v2 = (uint64_t (*)(void))sub_100019280();
  return sub_1000190BC(v2);
}

void sub_100014210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = -*(void *)(a1 + 16);
  uint64_t v16 = a1 + 40;
LABEL_2:
  uint64_t v8 = v5 + 1;
  unint64_t v9 = (uint64_t *)(v6 + 16 * v5);
  while (1)
  {
    if (v7 + v8 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }

    uint64_t v5 = v8;
    uint64_t v10 = *(v9 - 1);
    uint64_t v11 = *v9;
    if (v10 == a2 && v11 == a3)
    {
      uint64_t v10 = a2;
      uint64_t v11 = a3;
LABEL_12:
      sub_10000C688();
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_100016630(0LL, _swiftEmptyArrayStorage[2] + 1LL, 1LL);
      }
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_100016630(v13 > 1, v14 + 1, 1LL);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v10;
      v15[5] = v11;
      uint64_t v6 = v16;
      goto LABEL_2;
    }

    ++v8;
    v9 += 2;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, a2, a3, 0LL) & 1) != 0) {
      goto LABEL_12;
    }
  }

  __break(1u);
}

void sub_100014374(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  sub_100006BEC(&qword_100087B38);
  sub_100019690();
  __chkstk_darwin(v5);
  sub_100019488();
  uint64_t v39 = (void *)(v7 - v6);
  if (a2)
  {
    if (a2 >> 62) {
      goto LABEL_32;
    }
    uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    sub_100019734();
    for (; v8; uint64_t v8 = sub_100019520())
    {
      unint64_t v42 = a2 & 0xC000000000000001LL;
      uint64_t v40 = OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor;
      uint64_t v9 = 4LL;
      unsigned int v38 = enum case for CloudChannelError.failedToSubscribe(_:);
      uint64_t v41 = v8;
      while (1)
      {
        id v10 = v42 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, a2) : *(id *)(a2 + 8 * v9);
        uint64_t v11 = v10;
        if (__OFADD__(v9 - 4, 1LL)) {
          break;
        }
        uint64_t v12 = sub_100018E18(v10, (SEL *)&selRef_channelID);
        if (v13) {
          uint64_t v14 = v12;
        }
        else {
          uint64_t v14 = 0LL;
        }
        uint64_t v46 = v14;
        if (v13) {
          uint64_t v15 = v13;
        }
        else {
          uint64_t v15 = (void *)0xE000000000000000LL;
        }
        uint64_t v16 = sub_100018E18(v11, (SEL *)&selRef_pushTopic);
        if (v17) {
          uint64_t v18 = v16;
        }
        else {
          uint64_t v18 = 0LL;
        }
        uint64_t v44 = v18;
        if (v17) {
          unint64_t v19 = v17;
        }
        else {
          unint64_t v19 = (void *)0xE000000000000000LL;
        }
        unsigned int v45 = [v11 failureReason];
        if (qword_100087110 != -1) {
          swift_once(&qword_100087110, sub_10004BF7C);
        }
        uint64_t v20 = sub_10001939C();
        sub_10000B928(v20, (uint64_t)qword_10008F390);
        sub_1000194E8((uint64_t)v19);
        uint64_t v21 = sub_1000194E8((uint64_t)v15);
        uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
        os_log_type_t v23 = static os_log_type_t.error.getter();
        uint64_t v43 = v9 - 3;
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = sub_100019148(28LL);
          uint64_t v25 = v3;
          unint64_t v26 = a2;
          uint64_t v27 = sub_100019148(64LL);
          uint64_t v47 = v27;
          *(_DWORD *)uint64_t v24 = 136315650;
          sub_10000C688();
          *(void *)(v24 + sub_100006E64(v0 + 4) = sub_100015AD4(v44, (unint64_t)v19, &v47);
          sub_1000195A8((uint64_t)v19);
          *(_WORD *)(v24 + sub_100006E64(v0 + 12) = 2080;
          sub_100019848();
          *(void *)(v24 + 1sub_100006E64(v0 + 4) = sub_100015AD4(v46, (unint64_t)v15, &v47);
          sub_1000195A8((uint64_t)v15);
          *(_WORD *)(v24 + 22) = 1024;
          *(_DWORD *)(v24 + 2sub_100006E64(v0 + 4) = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Failed to subscribe to channel [%s:%s] with failure reason: %d",  (uint8_t *)v24,  0x1Cu);
          swift_arrayDestroy(v27, 2LL);
          uint64_t v28 = v27;
          a2 = v26;
          uint64_t v3 = v25;
          sub_1000190E8(v28);
          sub_1000190E8(v24);
        }

        else
        {

          sub_100019124((uint64_t)v15);
          sub_100019124((uint64_t)v19);
        }

        uint64_t v29 = *(void *)(v3 + v40);
        if (v29)
        {
          uint64_t v47 = 0LL;
          unint64_t v48 = 0xE000000000000000LL;
          swift_retain(v29);
          _StringGuts.grow(_:)(62LL);
          v30._uint64_t countAndFlagsBits = 0xD000000000000020LL;
          v30._object = (void *)0x800000010006B380LL;
          String.append(_:)(v30);
          v31._uint64_t countAndFlagsBits = v44;
          v31._object = v19;
          String.append(_:)(v31);
          swift_bridgeObjectRelease(v19);
          v32._uint64_t countAndFlagsBits = 58LL;
          v32._object = (void *)0xE100000000000000LL;
          String.append(_:)(v32);
          v33._uint64_t countAndFlagsBits = v46;
          v33._object = v15;
          String.append(_:)(v33);
          sub_100019704();
          v34._uint64_t countAndFlagsBits = 0xD000000000000017LL;
          v34._object = (void *)0x800000010006B3B0LL;
          String.append(_:)(v34);
          v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
          String.append(_:)(v35);
          sub_10001919C();
          unint64_t v36 = v48;
          *uint64_t v39 = v47;
          v39[1] = v36;
          uint64_t v37 = type metadata accessor for CloudChannelError(0LL);
          (*(void (**)(void *, void, uint64_t))(*(void *)(v37 - 8) + 104LL))(v39, v38, v37);
          sub_10000AB60((uint64_t)v39, 0LL, 1LL, v37);
          sub_10003861C((uint64_t)v39);

          swift_release(v29);
          sub_100019034((uint64_t)v39, &qword_100087B38);
        }

        else
        {
          swift_bridgeObjectRelease(v19);
          sub_100019704();
        }

        ++v9;
        if (v43 == v41)
        {
          sub_10001987C();
          sub_10000C248();
          return;
        }
      }

      __break(1u);
LABEL_32:
      sub_100019734();
    }

    swift_bridgeObjectRelease(a2);
  }

  else
  {
    __break(1u);
  }

uint64_t initializeBufferWithCopyOfBuffer for ApsListener.ConnectionState(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_100014894(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id sub_100014894(id result, char a2)
{
  if (a2 == 1) {
    return result;
  }
  if (!a2) {
    return (id)swift_bridgeObjectRetain(result);
  }
  return result;
}

void destroy for ApsListener.ConnectionState(uint64_t a1)
{
}

void sub_1000148C0(void *a1, char a2)
{
  if (a2 == 1)
  {
  }

  else if (!a2)
  {
    swift_bridgeObjectRelease(a1);
  }

uint64_t assignWithCopy for ApsListener.ConnectionState(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_100014894(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_1000148C0(v5, v6);
  return a1;
}

uint64_t initializeWithTake for ApsListener.ConnectionState(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for ApsListener.ConnectionState(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_1000148C0(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApsListener.ConnectionState(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApsListener.ConnectionState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100014A00(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100014A18(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ApsListener.ConnectionState()
{
  return &type metadata for ApsListener.ConnectionState;
}

void sub_100014A40(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100014A6C(uint64_t a1, uint64_t a2)
{
  return a2;
}

id sub_100014AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!a2)
  {
    NSString v9 = 0LL;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v10 = 0LL;
    goto LABEL_6;
  }

  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
LABEL_6:
  id v11 = [v5 initWithEnvironmentName:v9 namedDelegatePort:v10 queue:a5];

  return v11;
}

id sub_100014B50(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v5 = [v2 initWithChannelID:v4];

  return v5;
}

void sub_100014BB0()
{
  if ((v4 & 1) != 0)
  {
    sub_100019314();
    if (v5 != v6)
    {
      sub_1000195F0();
      if (v5)
      {
        __break(1u);
        return;
      }

      sub_100019304();
    }
  }

  sub_100019510();
  if (v3)
  {
    uint64_t v7 = sub_100006BEC(&qword_100087AF0);
    uint64_t v8 = (void *)sub_10000C41C(v7, v3 + 32);
    size_t v9 = j__malloc_size(v8);
    v8[2] = v2;
    v8[3] = 2 * v9 - 64;
  }

  if ((v1 & 1) != 0)
  {
    NSString v10 = (char *)sub_1000198A8();
    sub_100015500(v10, v11, v12);
    *(void *)(v0 + 1sub_100006E64(v0 + 6) = 0LL;
    sub_10001919C();
  }

  else
  {
    uint64_t v13 = sub_1000194F0();
    sub_100015044(v13, v14, v15, v16);
  }

  sub_10001942C();
}

void sub_100014C54()
{
  if ((v3 & 1) != 0)
  {
    sub_100019314();
    if (v4 != v5)
    {
      sub_1000195F0();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_100019304();
    }
  }

  sub_100019510();
  if (v2)
  {
    uint64_t v6 = sub_100006BEC(&qword_100087510);
    uint64_t v7 = (const void *)sub_10000C41C(v6, 16 * v2 + 32);
    size_t v8 = j__malloc_size(v7);
    sub_100019748(v8 - 32);
  }

  if ((v1 & 1) != 0)
  {
    size_t v9 = (char *)sub_1000198A8();
    sub_100015580(v9, v10, v11);
    *(void *)(v0 + 1sub_100006E64(v0 + 6) = 0LL;
    sub_10001919C();
  }

  else
  {
    uint64_t v12 = sub_1000194F0();
    sub_100015130(v12, v13, v14, v15);
  }

  sub_10001942C();
}

void sub_100014CFC()
{
  if ((v3 & 1) != 0)
  {
    sub_100019314();
    if (v4 != v5)
    {
      sub_1000195F0();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_100019304();
    }
  }

  sub_100019510();
  if (v2)
  {
    uint64_t v6 = sub_100006BEC(&qword_100087500);
    uint64_t v7 = (const void *)sub_10000C41C(v6, 32 * v2 + 32);
    size_t v8 = j__malloc_size(v7);
    sub_100019748(v8 - 32);
  }

  if ((v1 & 1) != 0)
  {
    size_t v9 = (char *)sub_1000198A8();
    sub_100015604(v9, v10, v11);
    *(void *)(v0 + 1sub_100006E64(v0 + 6) = 0LL;
    sub_10001919C();
  }

  else
  {
    uint64_t v12 = sub_1000194F0();
    sub_100015224(v12, v13, v14, v15);
  }

  sub_10001942C();
}

uint64_t sub_100014DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014DCC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_100087C40,  (void (*)(void))&type metadata accessor for SportingEventRunningClockFeature);
}

uint64_t sub_100014DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014DCC( a1,  a2,  a3,  a4,  &qword_100087C38,  (void (*)(void))&type metadata accessor for SportingEventSubscription.Competitor);
}

uint64_t sub_100014DCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  char v8 = a1;
  if ((a3 & 1) != 0)
  {
    sub_100019314();
    if (v10 != v11)
    {
      sub_1000195F0();
      if (v10)
      {
        __break(1u);
LABEL_23:
        sub_100019110();
        unint64_t v26 = "Division by zero";
        uint64_t v27 = 16LL;
LABEL_25:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v26,  v27,  2LL,  "Swift/IntegerTypes.swift",  24LL);
        __break(1u);
        return result;
      }

      sub_100019304();
    }
  }

  else
  {
    uint64_t v9 = a2;
  }

  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    unint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v14 = sub_100019868(a1, a2, a3, a4, a5);
  uint64_t v15 = *(void *)(((uint64_t (*)(void))a6)(0LL) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  unint64_t v19 = (void *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  size_t v20 = j__malloc_size(v19);
  if (!v16) {
    goto LABEL_23;
  }
  if (v20 - v18 == 0x8000000000000000LL && v16 == -1)
  {
    sub_100019110();
    unint64_t v26 = "Division results in an overflow";
    uint64_t v27 = 31LL;
    goto LABEL_25;
  }

  __int128 v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(((uint64_t (*)(void))a6)(0LL) - 8) + 80LL);
  uint64_t v23 = (v22 + 32) & ~v22;
  unint64_t v24 = (unint64_t)v19 + v23;
  if ((v8 & 1) != 0)
  {
    sub_1000156F8(a4 + v23, v12, v24, a6);
    *(void *)(a4 + 1sub_100006E64(v0 + 6) = 0LL;
    sub_10001919C();
  }

  else
  {
    sub_100015404(0LL, v12, v24, a4, (uint64_t (*)(void))a6);
  }

  return (uint64_t)v19;
}

uint64_t sub_100014F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014DCC( a1,  a2,  a3,  a4,  &qword_100087BB8,  (void (*)(void))&type metadata accessor for IngestionError);
}

void sub_100014F84()
{
}

void sub_100014F90()
{
  if ((v3 & 1) != 0)
  {
    sub_100019314();
    if (v4 != v5)
    {
      sub_1000195F0();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_100019304();
    }
  }

  sub_100019510();
  if (v2)
  {
    uint64_t v11 = sub_100019868(v6, v7, v8, v9, v10);
    uint64_t v12 = (const void *)sub_10000C41C(v11, 8 * v2 + 32);
    size_t v13 = j__malloc_size(v12);
    sub_100019748(v13 - 32);
  }

  if ((v1 & 1) != 0)
  {
    uint64_t v14 = (char *)sub_1000198A8();
    sub_100015688(v14, v15, v16);
    *(void *)(v0 + 1sub_100006E64(v0 + 6) = 0LL;
    sub_10001919C();
  }

  else
  {
    uint64_t v17 = sub_1000194F0();
    sub_100015338(v17, v18, v19, v20);
  }

  sub_10001942C();
}

uint64_t sub_100015030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014DCC( a1,  a2,  a3,  a4,  &qword_100087B68,  (void (*)(void))&type metadata accessor for CloudChannelSubscription.Demand);
}

char *sub_100015044(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if ((v4 & 0x8000000000000000LL) != 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v6 = (char *)(a4 + a1 + 32);
  uint64_t v7 = &__dst[v4];
  if (v6 >= &__dst[v4] || &v6[v4] <= __dst)
  {
    memcpy(__dst, v6, v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100015130(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100015224(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t v11 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v12 = 51LL;
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 32 * a1 + 32;
  unint64_t v8 = a3 + 32 * v4;
  if (v7 >= v8 || v7 + 32 * v4 <= a3)
  {
    sub_100006BEC(&qword_100087BB0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t v11 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v12 = 49LL;
LABEL_11:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v11,  v12,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

char *sub_100015338(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    sub_100019110();
    uint64_t v11 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v12 = 51LL;
    goto LABEL_11;
  }

  char v5 = (char *)(a4 + 8 * a1 + 32);
  unint64_t v6 = &__dst[8 * v4];
  if (v5 >= v6 || &v5[8 * v4] <= __dst)
  {
    memcpy(__dst, v5, 8 * v4);
    sub_10001919C();
    return v6;
  }

  sub_100019110();
  uint64_t v11 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v12 = 49LL;
LABEL_11:
  uint64_t result = (char *)sub_1000193D4( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v11,  v12,  v9,  (uint64_t)"Swift/UnsafePointer.swift",  v10,  v13,  v14,  v15);
  __break(1u);
  return result;
}

uint64_t sub_100015404( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    sub_100019110();
    uint64_t v20 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v21 = 51LL;
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_10001919C();
    return v14;
  }

  sub_100019110();
  uint64_t v20 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v21 = 49LL;
LABEL_11:
  uint64_t result = sub_1000193D4( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)v20,  v21,  v18,  (uint64_t)"Swift/UnsafePointer.swift",  v19,  v22,  v23,  v24);
  __break(1u);
  return result;
}

char *sub_100015500(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

char *sub_100015580(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }

  return __src;
}

char *sub_100015604(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }

  return __src;
}

char *sub_100015688(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    sub_100019110();
    __src = (char *)sub_1000193D4( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  55LL,  v4,  (uint64_t)"Swift/UnsafePointer.swift",  v5,  v6,  v7,  v8);
    __break(1u);
  }

  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }

  return __src;
}

uint64_t sub_1000156F8(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_100019110();
    uint64_t result = sub_1000193D4( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  55LL,  v11,  (uint64_t)"Swift/UnsafePointer.swift",  v12,  v13,  v14,  v15);
    __break(1u);
  }

  else if (a3 < a1 {
         || (uint64_t result = ((uint64_t (*)(void))a4)(0LL),
  }
             a1 + *(void *)(*(void *)(result - 8) + 72LL) * a2 <= a3))
  {
    a4(0LL);
    uint64_t v10 = sub_1000198FC();
    return swift_arrayInitWithTakeFrontToBack(v10);
  }

  else if (a3 != a1)
  {
    uint64_t v9 = sub_1000198FC();
    return swift_arrayInitWithTakeBackToFront(v9);
  }

  return result;
}

uint64_t sub_1000157CC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_100015898(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    uint64_t v5 = *(void *)(*(void *)(type metadata accessor for URLQueryItem(0LL) - 8) + 72LL) * a2;
    unint64_t v6 = a3 + v5;
    unint64_t v7 = a1 + v5;
    if (v6 <= a1 || v7 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_10001598C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[16 * a2] <= __src || &__src[16 * a2] <= __dst) {
      return memcpy(__dst, __src, 16 * a2);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_100015A54(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100015A74(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_100015AD4(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  sub_10001988C();
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, v10, v11, v8);
  uint64_t result = sub_100019278();
  *a1 = v8;
  return result;
}

uint64_t sub_100015AD4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100015BA0(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100018C20((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100018C20((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    sub_100019194();
  }

  sub_100006E64(v12);
  return v7;
}

void *sub_100015BA0(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100015CF4((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = sub_100015DB8(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_100015CF4(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_100015DB8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_100024614(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_100015E4C(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100015E4C((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  void v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

char *sub_100015E4C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100006BEC(&qword_100087AF0);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  int v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100015500(v14, v8, v13);
    *(void *)(a4 + 1sub_100006E64(v0 + 6) = 0LL;
  }

  else
  {
    sub_100015F20(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100015F20(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

_BYTE **sub_100015FE4(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

unint64_t sub_100015FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001973C();
  return sub_10001614C(v4, v5, v6);
}

unint64_t sub_100016048(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_1000197D4(a1);
  uint64_t v2 = sub_100050BB0(v1);
  String.hash(into:)(v6, v2, v3);
  sub_100019278();
  Swift::Int v4 = sub_1000197CC();
  return sub_10001622C(v1, v4);
}

unint64_t sub_1000160AC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000163A0(a1, v4);
}

unint64_t sub_1000160DC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for SportingEventPlayLevel(0LL);
  sub_100018DE4( &qword_100087BC8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventPlayLevel);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100016464(a1, v7);
}

unint64_t sub_10001614C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10001622C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = sub_100050BB0(*(_BYTE *)(*(void *)(v2 + 48) + v5));
    uint64_t v9 = v8;
    uint64_t v10 = sub_100050BB0(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = sub_100050BB0(*(_BYTE *)(*(void *)(v2 + 48) + v5));
          uint64_t v9 = v17;
          uint64_t v18 = sub_100050BB0(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t sub_1000163A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_100018D74(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100018DB0((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_100016464(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v19 = a1;
  uint64_t v5 = type metadata accessor for SportingEventPlayLevel(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v11 = a2 & ~v10;
  if (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v6 + 72);
    char v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v14(v9, *(void *)(v3 + 48) + v13 * v11, v5, v7);
      sub_100018DE4( &qword_100087BD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventPlayLevel);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v19, v5, v15);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  return v11;
}

void sub_1000165A8()
{
  uint64_t v1 = *v0;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  void *v0 = v1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    sub_100016630(0LL, *(void *)(v1 + 16) + 1LL, 1LL);
  }
}

void sub_1000165F0(uint64_t a1)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 24LL);
}

uint64_t sub_100016618(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 1sub_100006E64(v0 + 6) = result + 1;
  uint64_t v5 = v4 + 16 * result;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  return result;
}

void sub_100016630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3 = v4;
}

size_t sub_100016664(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000166B4(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

void sub_100016680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3 = v4;
}

size_t sub_1000166B4(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100006BEC(&qword_100087BD8);
  uint64_t v11 = *(void *)(type metadata accessor for URLQueryItem(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_24;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = *(unsigned __int8 *)(*(void *)(type metadata accessor for URLQueryItem(0LL) - 8) + 80LL);
  uint64_t v18 = (v17 + 32) & ~v17;
  unint64_t v19 = (unint64_t)v15 + v18;
  unint64_t v20 = a4 + v18;
  if ((v5 & 1) != 0)
  {
    sub_1000156F8(v20, v8, v19, (void (*)(void))&type metadata accessor for URLQueryItem);
    *(void *)(a4 + 1sub_100006E64(v0 + 6) = 0LL;
  }

  else
  {
    sub_100015898(v20, v8, v19);
  }

  swift_release(a4);
  return (size_t)v15;
}

void sub_100016800( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *), void (*a7)(uint64_t, uint64_t, void *))
{
  char v10 = a1;
  if ((a3 & 1) != 0)
  {
    sub_100019314();
    if (v12 != v13)
    {
      sub_1000195F0();
      if (v12)
      {
        __break(1u);
        return;
      }

      sub_100019304();
    }
  }

  else
  {
    uint64_t v11 = a2;
  }

  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    uint64_t v16 = sub_100019868(a1, a2, a3, a4, a5);
    uint64_t v17 = (void *)sub_10000C41C(v16, 16 * v15 + 32);
    size_t v18 = j__malloc_size(v17);
    uint64_t v17[2] = v14;
    v17[3] = 2 * ((uint64_t)(v18 - 32) / 16);
  }

  else
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
  }

  unint64_t v19 = v17 + 4;
  uint64_t v20 = a4 + 32;
  if ((v10 & 1) != 0)
  {
    a6(v20, v14, v19);
    *(void *)(a4 + 1sub_100006E64(v0 + 6) = 0LL;
  }

  else
  {
    a7(v20, v14, v19);
  }

  sub_100019780();
}

Swift::Int sub_1000168CC(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(_BYTE *)(a2 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (1LL << v4) + 63;
  uint64_t v7 = v6 >> 6;
  uint64_t v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v9 = (unint64_t *)((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100052454(0LL, v7, v9);
    Swift::Int v10 = sub_100016D30(v9, v7, v3, a2);
    swift_release(a2);
  }

  else
  {
    uint64_t v11 = (unint64_t *)swift_slowAlloc(v8, -1LL);
    sub_100052454(0LL, v7, v11);
    Swift::Int v10 = sub_100016D30(v11, v7, v3, a2);
    swift_release(a2);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  return v10;
}

Swift::Int sub_100016A58(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100006BEC(&qword_100087B20);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    Swift::String v32 = v2;
    Swift::String v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      unint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v20, v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      Swift::String v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
      *Swift::String v30 = v20;
      v30[1] = v21;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v10) {
        goto LABEL_35;
      }
      unint64_t v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = v33[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v10) {
            goto LABEL_35;
          }
          unint64_t v17 = v33[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              unint64_t v2 = v32;
              uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
              if (v31 > 63) {
                sub_100052454(0LL, (unint64_t)(v31 + 63) >> 6, v33);
              }
              else {
                *Swift::String v33 = -1LL << v31;
              }
              *(void *)(v3 + 1sub_100006E64(v0 + 6) = 0LL;
              break;
            }

            unint64_t v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v17 = v33[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

LABEL_23:
      unint64_t v9 = (v17 - 1) & v17;
    }
  }

  Swift::Int result = swift_release(v3);
  *unint64_t v2 = v6;
  return result;
}

    unint64_t v9 = (v15 - 1) & v15;
    int64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    int64_t v18 = *v17;
    unint64_t v19 = v17[1];
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    Swift::Int result = Hasher._finalize()();
    uint64_t v20 = -1LL << v8[32];
    uint64_t v21 = result & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      unint64_t v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        char v26 = v22 == v25;
        if (v22 == v25) {
          uint64_t v22 = 0LL;
        }
        v24 |= v26;
        unint64_t v27 = *(void *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    BOOL v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *BOOL v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }

  int64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_35;
  }
  uint64_t v15 = a1[v16];
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_35;
    }
    uint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    int64_t v13 = (v18 - 1) & v18;
  }

  unint64_t v19 = v17 + 2;
  if (v19 >= v14) {
    goto LABEL_26;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    unint64_t v9 = v19;
    goto LABEL_23;
  }

  while (1)
  {
    unint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }

Swift::Int sub_100016D30(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  uint64_t v34 = *(void *)(a3 + 16);
  if (!v34)
  {
    uint64_t v28 = 0LL;
    goto LABEL_27;
  }

  uint64_t v36 = a4 + 56;
  uint64_t v33 = a3 + 32;
  swift_bridgeObjectRetain(a3);
  uint64_t v31 = 0LL;
  for (uint64_t i = 0LL; i != v34; ++i)
  {
    uint64_t v7 = (uint64_t *)(v33 + 16 * i);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    Hasher.init(_seed:)(v35);
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(v35, v9, v8);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1LL << *(_BYTE *)(a4 + 32);
    unint64_t v12 = v10 & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = 1LL << v12;
    if (((1LL << v12) & *(void *)(v36 + 8 * (v12 >> 6))) == 0) {
      goto LABEL_22;
    }
    uint64_t v15 = *(void *)(a4 + 48);
    int64_t v16 = (void *)(v15 + 16 * v12);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v9 && v17 == v8;
    if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v9, v8, 0LL) & 1) == 0)
    {
      uint64_t v22 = ~v11;
      for (unint64_t j = v12 + 1; ; unint64_t j = v24 + 1)
      {
        unint64_t v24 = j & v22;
        unint64_t v25 = (void *)(v15 + 16 * v24);
        uint64_t v26 = v25[1];
        BOOL v27 = *v25 == v9 && v26 == v8;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v25, v26, v9, v8, 0LL) & 1) != 0)
        {
          Swift::Int result = swift_bridgeObjectRelease(v8);
          unint64_t v13 = v24 >> 6;
          uint64_t v14 = 1LL << v24;
          goto LABEL_10;
        }
      }

LABEL_22:
      swift_bridgeObjectRelease(v8);
      continue;
    }

    Swift::Int result = swift_bridgeObjectRelease(v8);
LABEL_10:
    unint64_t v20 = a1[v13];
    a1[v13] = v14 | v20;
    if ((v14 & v20) == 0 && __OFADD__(v31++, 1LL))
    {
      __break(1u);
      return result;
    }
  }

  swift_bridgeObjectRelease(a3);
  uint64_t v5 = a2;
  uint64_t v28 = v31;
LABEL_27:
  swift_retain(a4);
  return sub_100016F3C(a1, v5, v28, a4);
}

      uint64_t v7 = (v13 - 1) & v13;
      uint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
      uint64_t v9 = v14;
    }

    uint64_t v22 = *(void *)(v2 + 48);
    unint64_t v23 = (void *)(v22 + 16 * v21);
    unint64_t v24 = v23[1];
    unint64_t v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0LL) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      uint64_t v43 = a1;
      uint64_t v44 = v41;
      unsigned int v45 = v39;
      uint64_t v46 = v9;
      uint64_t v47 = v7;
    }

    else
    {
      uint64_t v26 = ~v20;
      do
      {
        uint64_t v21 = (v21 + 1) & v26;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
          goto LABEL_37;
        }
        BOOL v27 = (void *)(v22 + 16 * v21);
        uint64_t v28 = v27[1];
        uint64_t v29 = *v27 == v18 && v28 == v17;
      }

      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0LL) & 1) == 0);
      uint64_t v43 = a1;
      uint64_t v44 = v41;
      unsigned int v45 = v39;
      uint64_t v46 = v9;
      uint64_t v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }

    uint64_t v31 = *(_BYTE *)(v2 + 32);
    Swift::String v32 = v31 & 0x3F;
    uint64_t v33 = (1LL << v31) + 63;
    uint64_t v34 = v33 >> 6;
    Swift::String v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v35);
      uint64_t v36 = sub_100018514((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_100018C5C(v43);
    }

    else
    {
      uint64_t v37 = (void *)swift_slowAlloc(v35, -1LL);
      memcpy(v37, (const void *)(v2 + 56), v35);
      uint64_t v36 = sub_100018514((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_100018C5C(v43);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    return v36;
  }

  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

  unint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  unint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *unint64_t v24 = v8;
  v24[1] = a2;
  unint64_t v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  BOOL v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 1sub_100006E64(v0 + 6) = v27;
  }
  return result;
}

  __break(1u);
  return result;
}

Swift::Int sub_100016F3C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release(v4);
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100006BEC(&qword_100087B20);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v8 = (_BYTE *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

  sub_1000617A0();
  *uint64_t v4 = v6;
  sub_1000617C0();
}

uint64_t sub_1000171C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v26);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v26, a2, a3);
  Swift::Int v8 = sub_1000197CC();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_100019940();
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    unint64_t v13 = (uint64_t *)(v12 + 16 * v10);
    uint64_t v14 = v13[1];
    BOOL v15 = *v13 == a2 && v14 == a3;
    if (v15 || (sub_100019648(*v13, v14) & 1) != 0)
    {
LABEL_7:
      sub_10001987C();
      swift_bridgeObjectRelease(v7);
      uint64_t v16 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0LL;
    }

    uint64_t v19 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v19;
      sub_100019940();
      if ((v20 & 1) == 0) {
        break;
      }
      unint64_t v21 = (uint64_t *)(v12 + 16 * v10);
      uint64_t v22 = v21[1];
      BOOL v23 = *v21 == a2 && v22 == a3;
      if (v23 || (sub_100019648(*v21, v22) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v26[0] = *v3;
  void *v3 = 0x8000000000000000LL;
  sub_100019734();
  sub_100017BAC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v25 = *v3;
  void *v3 = v26[0];
  swift_bridgeObjectRelease(v25);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_100017338(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  Swift::Int result = swift_bridgeObjectRetain(result);
  int64_t v8 = 0LL;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain(v16);
    sub_100018164(v15, v16);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v16);
    Swift::Int result = swift_bridgeObjectRelease(v18);
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v11 >= v7) {
      return swift_release(v2);
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        return swift_release(v2);
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          return swift_release(v2);
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            return swift_release(v2);
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }

LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v7) {
    return swift_release(v2);
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      return swift_release(v2);
    }
    unint64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

LABEL_27:
  __break(1u);
  return result;
}

              swift_release(v10);
              return;
            }
          }
        }
      }
    }

unint64_t *sub_1000174D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    sub_100019780();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

  uint64_t v33 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (unint64_t *)v2;
  }
  uint64_t v4 = a2 + 56;
  uint64_t v31 = a1 + 32;
  sub_100019734();
  uint64_t v5 = 0LL;
  while (1)
  {
    unint64_t v6 = (uint64_t *)(v31 + 16 * v5);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    ++v5;
    Hasher.init(_seed:)(v32);
    sub_100019594();
    String.hash(into:)(v32, v8, v7);
    Swift::Int v9 = Hasher._finalize()();
    uint64_t v10 = -1LL << *(_BYTE *)(v2 + 32);
    uint64_t v11 = v9 & ~v10;
    sub_1000198C0();
    if ((v12 & 1) != 0) {
      break;
    }
LABEL_18:
    sub_100019394();
    if (v5 == v3)
    {
      sub_10001987C();
      return (unint64_t *)v2;
    }
  }

  uint64_t v13 = *(void *)(v2 + 48);
  uint64_t v14 = (uint64_t *)(v13 + 16 * v11);
  uint64_t v15 = v14[1];
  BOOL v16 = *v14 == v8 && v15 == v7;
  if (!v16 && (sub_1000193C8(*v14, v15, v8) & 1) == 0)
  {
    uint64_t v17 = ~v10;
    while (1)
    {
      uint64_t v11 = (v11 + 1) & v17;
      sub_1000198C0();
      if ((v18 & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v19 = (uint64_t *)(v13 + 16 * v11);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == v8 && v20 == v7;
      if (v21 || (sub_1000193C8(*v19, v20, v8) & 1) != 0)
      {
        uint64_t v34 = v5;
        uint64_t isStackAllocationSafe = sub_100019394();
        goto LABEL_22;
      }
    }
  }

  uint64_t isStackAllocationSafe = sub_100019394();
  uint64_t v34 = v5;
LABEL_22:
  char v23 = *(_BYTE *)(v2 + 32);
  unsigned int v24 = v23 & 0x3F;
  unint64_t v25 = (1LL << v23) + 63;
  uint64_t v26 = 8 * (v25 >> 6);
  if (v24 >= 0xE)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v25 >> 6), 8LL);
    if (!(_DWORD)isStackAllocationSafe)
    {
      uint64_t v27 = (char *)sub_100019148(v26);
      sub_100019870(v27);
      uint64_t v28 = sub_100019410();
      sub_100019780();
      if (v2 != -56) {
        goto LABEL_32;
      }
      swift_bridgeObjectRelease(v33);
      sub_1000190E8((uint64_t)v27);
      return v28;
    }
  }

  __chkstk_darwin(isStackAllocationSafe);
  uint64_t v27 = (char *)v32 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0LL);
  sub_100019870(v27);
  uint64_t v28 = sub_100019410();
  uint64_t v29 = sub_100019780();
  if (v2 == -56)
  {
    swift_bridgeObjectRelease(v33);
    return v28;
  }

  swift_willThrow(v29);
  swift_errorRelease(v2 + 56);
  __break(1u);
LABEL_32:
  swift_errorRelease(v4);
  Swift::Int result = (unint64_t *)sub_1000190E8((uint64_t)v27);
  __break(1u);
  return result;
}

unint64_t *sub_10001773C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v41 = a1 + 56;
    uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v39 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1LL << -(char)v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & v4;
    int64_t v40 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    int64_t v9 = 0LL;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
    while (1)
    {
      BOOL v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)(v42);
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1LL << *(_BYTE *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0) {
        break;
      }
LABEL_37:
      swift_bridgeObjectRelease(v17);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1LL))
      {
        __break(1u);
        goto LABEL_50;
      }

      if (v12 >= v40) {
        goto LABEL_48;
      }
      unint64_t v13 = *(void *)(v41 + 8 * v12);
      int64_t v14 = v9 + 1;
      if (!v13)
      {
        int64_t v14 = v9 + 2;
        if (v9 + 2 >= v40) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v41 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 3;
          if (v9 + 3 >= v40) {
            goto LABEL_48;
          }
          unint64_t v13 = *(void *)(v41 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 4;
            if (v9 + 4 >= v40) {
              goto LABEL_48;
            }
            unint64_t v13 = *(void *)(v41 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v9 + 5;
              if (v9 + 5 >= v40)
              {
LABEL_48:
                sub_100018C5C(a1);
                return (unint64_t *)v2;
              }

              unint64_t v13 = *(void *)(v41 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  int64_t v14 = v15 + 1;
                  if (__OFADD__(v15, 1LL)) {
                    break;
                  }
                  if (v14 >= v40) {
                    goto LABEL_48;
                  }
                  unint64_t v13 = *(void *)(v41 + 8 * v14);
                  ++v15;
                  if (v13) {
                    goto LABEL_22;
                  }
                }

LABEL_50:
                __break(1u);
              }

              int64_t v14 = v9 + 5;
            }
          }
        }
      }

uint64_t sub_100017BAC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100016A58(v11);
  }

  else
  {
    if (v10 > v9)
    {
      Swift::Int result = (uint64_t)sub_100017D44();
      goto LABEL_22;
    }

    sub_100017EE0(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  Swift::Int result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    BOOL v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

void *sub_100017D44()
{
  uint64_t v1 = v0;
  sub_100006BEC(&qword_100087B20);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 1sub_100006E64(v0 + 6) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    Swift::Int result = (void *)swift_bridgeObjectRetain(v21);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v14) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }

Swift::Int sub_100017EE0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100006BEC(&qword_100087B20);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = v3 + 56;
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    char v31 = v2;
    int64_t v32 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain_n(v3, 2LL);
    int64_t v13 = 0LL;
    if (!v10) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      int64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)(v33);
      swift_bridgeObjectRetain(v21);
      String.hash(into:)(v33, v20, v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_30;
          }
        }

        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_30:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      uint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
      *uint64_t v30 = v20;
      v30[1] = v21;
      ++*(void *)(v6 + 16);
      if (v10) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_36;
      }
      if (v16 >= v32) {
        goto LABEL_32;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v16);
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v32) {
          goto LABEL_32;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v16 + 2;
          if (v18 >= v32)
          {
LABEL_32:
            Swift::Int result = swift_release_n(v3, 3LL);
            uint64_t v2 = v31;
            goto LABEL_34;
          }

          unint64_t v17 = *(void *)(v8 + 8 * v18);
          int64_t v13 = v18;
          if (!v17) {
            break;
          }
        }
      }

LABEL_37:
    __break(1u);
  }

  else
  {
    Swift::Int result = swift_release(v3);
LABEL_34:
    *uint64_t v2 = v6;
  }

  return result;
}

uint64_t sub_100018164(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v22);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v17 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v17;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      int64_t v18 = (void *)(v9 + 16 * v8);
      uint64_t v19 = v18[1];
      BOOL v20 = *v18 == a1 && v19 == a2;
    }

    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease(v5);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v22[0] = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100017D44();
    uint64_t v14 = v22[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_100018804(v8);
  uint64_t v16 = *v2;
  *uint64_t v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

unint64_t *sub_1000182F0( unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  int64_t v32 = result;
  uint64_t v33 = v6 - 1;
  uint64_t v8 = *a5;
  unint64_t v7 = a5[1];
  unint64_t v9 = *(void *)(*a5 + 16LL);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain(a3);
    return (unint64_t *)sub_100016F3C(v32, a2, v33, a3);
  }

  uint64_t v35 = a3 + 56;
  while ((v7 & 0x8000000000000000LL) == 0)
  {
    if (v7 >= v9) {
      goto LABEL_30;
    }
    uint64_t v11 = v8 + 16 * v7;
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v12 = *(void *)(v11 + 40);
    a5[1] = v7 + 1;
    Hasher.init(_seed:)(v34);
    swift_bridgeObjectRetain(v12);
    String.hash(into:)(v34, v13, v12);
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    uint64_t v18 = 1LL << v16;
    if (((1LL << v16) & *(void *)(v35 + 8 * (v16 >> 6))) == 0) {
      goto LABEL_25;
    }
    uint64_t v19 = *(void *)(a3 + 48);
    BOOL v20 = (void *)(v19 + 16 * v16);
    uint64_t v21 = v20[1];
    BOOL v22 = *v20 == v13 && v21 == v12;
    if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v13, v12, 0LL) & 1) == 0)
    {
      uint64_t v25 = ~v15;
      for (unint64_t i = v16 + 1; ; unint64_t i = v27 + 1)
      {
        unint64_t v27 = i & v25;
        BOOL v28 = (void *)(v19 + 16 * v27);
        uint64_t v29 = v28[1];
        BOOL v30 = *v28 == v13 && v29 == v12;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v13, v12, 0LL) & 1) != 0)
        {
          Swift::Int result = (unint64_t *)swift_bridgeObjectRelease(v12);
          unint64_t v17 = v27 >> 6;
          uint64_t v18 = 1LL << v27;
          goto LABEL_13;
        }
      }

LABEL_26:
    uint64_t v8 = *a5;
    unint64_t v7 = a5[1];
    unint64_t v9 = *(void *)(*a5 + 16LL);
    if (v7 == v9) {
      goto LABEL_2;
    }
  }

  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

unint64_t *sub_100018514( unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v41 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v43 = a3 + 56;
  while (2)
  {
    uint64_t v40 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_15;
        }

        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          goto LABEL_48;
        }

        int64_t v14 = (unint64_t)(a5[2] + 64LL) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_46;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_46;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_14;
            }

            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_46;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v38 = v9 + 6;
                while (v38 < v14)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    int64_t v13 = v38 - 1;
                    goto LABEL_14;
                  }
                }

                int64_t v15 = v14 - 1;
LABEL_46:
                a5[3] = v15;
                a5[4] = 0LL;
                swift_retain(a3);
                return (unint64_t *)sub_100016F3C(v41, a2, v40, a3);
              }

              goto LABEL_14;
            }
          }

          int64_t v13 = v18;
        }

LABEL_14:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_15:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48LL) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42);
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v42, v21, v20);
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1LL << *(_BYTE *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1LL << v24;
        if (((1LL << v24) & *(void *)(v43 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        BOOL v28 = (void *)(v27 + 16 * v24);
        uint64_t v29 = v28[1];
        BOOL v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0LL) & 1) != 0) {
          break;
        }
        uint64_t v32 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v34 + 1)
        {
          unint64_t v34 = i & v32;
          uint64_t v35 = (void *)(v27 + 16 * v34);
          uint64_t v36 = v35[1];
          BOOL v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0LL) & 1) != 0)
          {
            Swift::Int result = (unint64_t *)swift_bridgeObjectRelease(v20);
            unint64_t v25 = v34 >> 6;
            uint64_t v26 = 1LL << v34;
            goto LABEL_22;
          }
        }

  sub_10003EEB0(0LL, (v41 & 0xC000000000000001LL) == 0, v41);
  v138 = v41 & 0xC000000000000001LL;
  if ((v41 & 0xC000000000000001LL) != 0) {
    uint64_t v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v41);
  }
  else {
    uint64_t v43 = *(id *)(v41 + 32);
  }
  uint64_t v44 = v43;
  v136 = v19;
  v137 = v42 - 1;
  if (v42 != 1)
  {
    if (v42 < 2)
    {
      __break(1u);
      return;
    }

    uint64_t v45 = v138 == 0;
    sub_10003EEB0(1LL, v45, v41);
    sub_10003EEB0(v137, v45, v41);
    int64_t v46 = 0LL;
    unint64_t v47 = v41;
    do
    {
      if (v138) {
        unint64_t v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46 + 1, v41);
      }
      else {
        unint64_t v48 = *(id *)(v41 + 8 * v46 + 40);
      }
      uint64_t v49 = v48;
      uint64_t v50 = COERCE_DOUBLE(((uint64_t (*)(void))dispatch thunk of SportingEventCoverageLastUpdate.timestamp.getter)());
      if ((v51 & 1) != 0) {
        uint64_t v52 = 0.0;
      }
      else {
        uint64_t v52 = v50;
      }
      uint64_t v53 = COERCE_DOUBLE(((uint64_t (*)(void))dispatch thunk of SportingEventCoverageLastUpdate.timestamp.getter)());
      if (v52 < 0.0) {
        int v55 = v44;
      }
      else {
        int v55 = v49;
      }
      if (v52 < 0.0) {
        int64_t v56 = v49;
      }
      else {
        int64_t v56 = v44;
      }
      if (v52 >= v53) {
        uint64_t v57 = v49;
      }
      else {
        uint64_t v57 = v44;
      }
      if (v52 >= v53) {
        unint64_t v58 = v44;
      }
      else {
        unint64_t v58 = v49;
      }
      if ((v54 & 1) != 0)
      {
        uint64_t v44 = v56;
      }

      else
      {
        int v55 = v57;
        uint64_t v44 = v58;
      }

      ++v46;
      uint64_t v41 = v47;
    }

    while (v137 != v46);
  }

  unint64_t v59 = swift_bridgeObjectRelease_n(v41, 2LL);
  uint64_t v60 = COERCE_DOUBLE(dispatch thunk of SportingEventCoverageLastUpdate.timestamp.getter(v59));
  uint64_t v62 = v61;

  if ((v62 & 1) != 0) {
    v132 = 0LL;
  }
  else {
    v132 = sub_100052BF8(v60);
  }
  uint64_t v63 = v147;
  uint64_t v19 = v136;
LABEL_58:
  if (qword_100087140 != -1) {
    swift_once(&qword_100087140, sub_10005DD28);
  }
  v138 = qword_10008F3F8;
  v147 = v63;
  if (v63)
  {
    char v67 = v63;
    v133 = SportingEvent.canonicalId.getter();
    v134 = v68;
  }

  else
  {
    v133 = 0LL;
    v134 = 0LL;
  }

  char v69 = sub_100006BEC(&qword_100088920);
  uint64_t inited = swift_initStackObject(v69, v151);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067BF0;
  sub_10000B31C(a2, (uint64_t)v25, &qword_100088910);
  if (sub_10000AB6C((uint64_t)v25, 1LL, (uint64_t)v29) == 1)
  {
    sub_100019034((uint64_t)v25, &qword_100088910);
    uint64_t v71 = 0LL;
    uint64_t v72 = 0LL;
  }

  else
  {
    uint64_t v71 = *((void *)v25 + 1);
    uint64_t v72 = *((void *)v25 + 2);
    swift_bridgeObjectRetain(v72);
    sub_100019034((uint64_t)v25, &qword_100088918);
  }

  *(void *)(inited + 32) = v71;
  *(void *)(inited + 40) = v72;
  uint64_t v73 = &qword_100088910;
  sub_10000B31C(a2, (uint64_t)v22, &qword_100088910);
  if (sub_10000AB6C((uint64_t)v22, 1LL, (uint64_t)v29) == 1)
  {
    uint64_t v74 = 0LL;
    uint64_t v75 = 0LL;
  }

  else
  {
    unint64_t v76 = &v22[v29[14]];
    uint64_t v74 = *(void *)v76;
    uint64_t v75 = *((void *)v76 + 1);
    swift_bridgeObjectRetain(v75);
    uint64_t v73 = &qword_100088918;
  }

  sub_100019034((uint64_t)v22, v73);
  *(void *)(inited + 48) = v74;
  *(void *)(inited + 5sub_100006E64(v0 + 6) = v75;
  uint64_t v77 = *(void *)(inited + 40);
  if (v77)
  {
    uint64_t v78 = *(void *)(inited + 32);
    swift_bridgeObjectRetain(*(void *)(inited + 40));
    sub_100014C54();
    uint64_t v80 = v79;
    uint64_t v81 = v79[2];
    if (v81 >= v79[3] >> 1)
    {
      sub_100014C54();
      uint64_t v80 = v122;
    }

    v80[2] = v81 + 1;
    uint64_t v82 = &v80[2 * v81];
    v82[4] = v78;
    v82[5] = v77;
    uint64_t v74 = *(void *)(inited + 48);
    uint64_t v75 = *(void *)(inited + 56);
    if (!v75) {
      goto LABEL_80;
    }
    goto LABEL_75;
  }

  uint64_t v80 = _swiftEmptyArrayStorage;
  if (v75)
  {
LABEL_75:
    swift_bridgeObjectRetain(v75);
    if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0)
    {
      sub_100014C54();
      uint64_t v80 = v123;
    }

    uint64_t v83 = v80[2];
    if (v83 >= v80[3] >> 1)
    {
      sub_100014C54();
      uint64_t v80 = v124;
    }

    v80[2] = v83 + 1;
    uint64_t v84 = &v80[2 * v83];
    v84[4] = v74;
    v84[5] = v75;
  }

  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

LABEL_32:
        Swift::Int result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }

      Swift::Int result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_22:
      unint64_t v31 = v41[v25];
      v41[v25] = v31 & ~v26;
    }

    while ((v26 & v31) == 0);
    uint64_t v8 = v40 - 1;
    if (__OFSUB__(v40, 1LL))
    {
LABEL_48:
      __break(1u);
      return result;
    }

    if (v40 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

  uint64_t v106 = v66;
  sub_10003EEB0(0LL, (v105 & 0xC000000000000001LL) == 0, v105);
  if ((v105 & 0xC000000000000001LL) != 0) {
    unint64_t v107 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v105);
  }
  else {
    unint64_t v107 = *(id *)(v105 + 32);
  }
  uint64_t v108 = v107;
  uint64_t v109 = swift_bridgeObjectRelease(v105);
  v196 = (char *)SportingEventLocalizedDisplayName.text.getter(v109);
  v111 = v110;

  uint64_t v66 = v106;
LABEL_43:
  uint64_t v117 = v104;
  unint64_t v118 = (void *)dispatch thunk of SportingEvent.league.getter();

  v200 = v66;
  if (v118)
  {
    v119 = SportingEventLeague.localizedDisplayName.getter();

    if ((unint64_t)v119 >> 62)
    {
      if (v119 < 0) {
        v126 = v119;
      }
      else {
        v126 = v119 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v119);
      v127 = _CocoaArrayWrapper.endIndex.getter(v126);
      swift_bridgeObjectRelease(v119);
      if (v127) {
        goto LABEL_46;
      }
    }

    else if (*(void *)((v119 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_46:
      sub_10003EEB0(0LL, (v119 & 0xC000000000000001LL) == 0, v119);
      if ((v119 & 0xC000000000000001LL) != 0) {
        unint64_t v120 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v119);
      }
      else {
        unint64_t v120 = *(id *)(v119 + 32);
      }
      v121 = v120;
      v122 = swift_bridgeObjectRelease(v119);
      v123 = SportingEventLocalizedDisplayName.text.getter(v122);
      v125 = v124;

      goto LABEL_55;
    }

    swift_bridgeObjectRelease(v119);
  }

  v123 = 0LL;
  v125 = 0xE000000000000000LL;
LABEL_55:
  v128 = v203;
  swift_bridgeObjectRetain(v203);
  v129 = (uint64_t)v201;
  SportingEventSubscription.Metadata.init(eventStartDate:competitors:preGameTitle:shortTitle:eventURL:localizedLeagueName:)( v209,  v199,  v198,  v197,  v196,  v111,  v202,  v128,  v123,  v125);
  v130 = v225;
  sub_10000BBA4(v225, &qword_1000885D0);
  sub_10000AB60(v129, 0LL, 1LL, (uint64_t)v223);
  sub_100035ED8(v129, v130, &qword_1000885D0);
  v131 = v117;
  v132 = (void *)dispatch thunk of SportingEvent.league.getter();

  if (v132)
  {
    swift_bridgeObjectRelease(v217);
    v133 = swift_bridgeObjectRelease(v216);
    v214 = SportingEventLeague.canonicalId.getter(v133);
    v216 = v134;
    v135 = (void *)SportingEventLeague.sport.getter();
    v136 = SportingEventSport.canonicalId.getter();
    char v69 = v137;

    (*(void (**)(char *, uint64_t))(v204 + 8))(v210, v208);
    v210 = v231;
    swift_bridgeObjectRetain(v231);
    uint64_t v66 = v200;
LABEL_60:
    swift_bridgeObjectRetain(v69);
    v138 = v205;
    v224 = v136;
    v217 = v69;
    v139 = Sport.init(rawValue:)(v136);
    v209 = (char *)Sport.rawValue.getter(v139);
    v208 = v140;
    (*(void (**)(char *, uint64_t))(v206 + 8))(v138, v207);
    goto LABEL_62;
  }

  (*(void (**)(char *, uint64_t))(v204 + 8))(v210, v208);
  char v69 = v217;
  uint64_t v66 = v200;
LABEL_58:
  v210 = (char *)swift_bridgeObjectRetain(v231);
  if (v69)
  {
    v136 = v224;
    goto LABEL_60;
  }

  v209 = 0LL;
  v217 = 0LL;
  v208 = 0xE000000000000000LL;
LABEL_62:
  v141 = v5[31];
  v207 = v5[30];
  v142 = *(void *)v226;
  v144 = v5[19];
  v143 = v5[20];
  v223 = v5;
  v206 = v141;
  swift_bridgeObjectRetain(v141);
  swift_bridgeObjectRetain(v142);
  swift_bridgeObjectRetain(v143);
  v145 = sub_10003BDF0(v144, v143, v142);
  v147 = v146;
  swift_bridgeObjectRelease(v143);
  swift_bridgeObjectRelease(v142);
  v148 = v58;
  if (v147)
  {
    URL.init(string:)(v145, v147);
    swift_bridgeObjectRelease(v147);
  }

  else
  {
    v149 = type metadata accessor for URL(0LL);
    sub_10000AB60(v220, 1LL, 1LL, v149);
  }

  v150 = v211;
  v151 = *((void *)v226 + 1);
  if (v151)
  {
    v152 = v66;
    swift_bridgeObjectRetain(v143);
    swift_bridgeObjectRetain(v151);
    v153 = sub_10003BDF0(v144, v143, v151);
    v155 = v154;
    swift_bridgeObjectRelease(v143);
    swift_bridgeObjectRelease(v151);
    if (v155)
    {
      swift_bridgeObjectRetain(v155);
      URL.init(string:)(v153, v155);
      swift_bridgeObjectRelease_n(v155, 2LL);
    }

    else
    {
      v157 = type metadata accessor for URL(0LL);
      sub_10000AB60(v221, 1LL, 1LL, v157);
    }

    uint64_t v66 = v152;
  }

  else
  {
    v156 = type metadata accessor for URL(0LL);
    sub_10000AB60(v221, 1LL, 1LL, v156);
  }

  v158 = *((void *)v226 + 2);
  if (v158
    && (swift_bridgeObjectRetain(v143),
        swift_bridgeObjectRetain(v158),
        v159 = sub_10003BDF0(v144, v143, v158),
        v161 = v160,
        swift_bridgeObjectRelease(v143),
        swift_bridgeObjectRelease(v158),
        v161))
  {
    swift_bridgeObjectRetain(v161);
    URL.init(string:)(v159, v161);
    swift_bridgeObjectRelease_n(v161, 2LL);
  }

  else
  {
    v162 = type metadata accessor for URL(0LL);
    sub_10000AB60(v222, 1LL, 1LL, v162);
  }

  sub_100035B1C((uint64_t)v223, (uint64_t)v150, type metadata accessor for SubscriptionRegisterOperation);
  if (v148)
  {
    v205 = v148;
  }

  else
  {
    type metadata accessor for SportingEventFactory(0LL);
    v205 = (char *)static SportingEventFactory.unknown(canonicalId:)(*((void *)v150 + 19), *((void *)v150 + 20));
  }

  v211 = v148;
  sub_100035AF4((uint64_t)v150, type metadata accessor for SubscriptionRegisterOperation);
  v204 = *((void *)v226 + 7);
  LODWORD(v203) = v226[64];
  v202 = *((void *)v226 + 9);
  LODWORD(v201) = v226[80];
  v163 = v66[2];
  if (v163)
  {
    swift_bridgeObjectRetain(v66);
    v200 = v66;
    v164 = v66 + 7;
    v165 = _swiftEmptyArrayStorage;
    do
    {
      v166 = *(v164 - 3);
      v167 = *(v164 - 2);
      v169 = *(v164 - 1);
      v168 = *v164;
      swift_bridgeObjectRetain(*v164);
      swift_bridgeObjectRetain(v167);
      SportingEventRunningClockFeature.init(feature:value:)(v166, v167, v169, v168);
      if (sub_10000AB6C((uint64_t)v9, 1LL, v10) == 1)
      {
        sub_10000BBA4((uint64_t)v9, &qword_1000887B0);
      }

      else
      {
        v170 = *(void (**)(void, void, void))(v229 + 32);
        v171 = v227;
        v170(v227, v9, v10);
        v170(v228, v171, v10);
        if ((swift_isUniquelyReferenced_nonNull_native(v165) & 1) == 0) {
          v165 = (void *)sub_100014DA4(0LL, v165[2] + 1LL, 1LL, (uint64_t)v165);
        }
        v173 = v165[2];
        v172 = v165[3];
        if (v173 >= v172 >> 1) {
          v165 = (void *)sub_100014DA4(v172 > 1, v173 + 1, 1LL, (uint64_t)v165);
        }
        v165[2] = v173 + 1;
        v170( (char *)v165 + ((*(unsigned __int8 *)(v229 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v229 + 80))
        + *(void *)(v229 + 72) * v173,
          v228,
          v10);
      }

      v164 += 4;
      --v163;
    }

    while (v163);
    uint64_t v66 = v200;
    swift_bridgeObjectRelease(v200);
  }

  else
  {
    v165 = _swiftEmptyArrayStorage;
  }

  v174 = v231;
  swift_bridgeObjectRelease(v66);
  swift_bridgeObjectRelease(v174);
  v175 = (uint64_t)v226;
  v176 = *((void *)v226 + 11);
  v228 = (char *)*((void *)v226 + 12);
  v177 = v228;
  v229 = v176;
  v178 = v212;
  sub_100035EAC(v225, v212, &qword_1000885D0);
  v179 = v213;
  sub_100035EAC(v175 + *(int *)(v215 + 44), v213, &qword_1000887B8);
  v180 = (uint64_t)v223;
  v181 = v223[19];
  v182 = v223[20];
  swift_bridgeObjectRetain(v177);
  v183 = sub_100047814(v181, v182);
  LODWORD(v21sub_100006E64(v0 + 5) = (v183 == 2) | v183;
  v184 = v219;
  v185 = (uint64_t *)(v180 + *(int *)(v219 + 80));
  v187 = *v185;
  v186 = v185[1];
  v188 = sub_100047768(*(_BYTE *)(v180 + 256));
  v190 = v189;
  v191 = (uint64_t *)(v180 + *(int *)(v184 + 84));
  v192 = *v191;
  v193 = v191[1];
  v227 = (char *)objc_allocWithZone((Class)type metadata accessor for SportingEventSubscription(0LL));
  swift_bridgeObjectRetain(v186);
  swift_bridgeObjectRetain(v193);
  v194 = SportingEventSubscription.init(consumers:sportId:sport:leagueId:leagueAbbreviation:eventStateURL:fullPayloadBaseURL:imageServiceBaseURL:sportingEventDetails:heartbeatTTLSeconds:heartbeatSessionsTTLSeconds:liveActivityTTLSeconds:clockFeatures:registrationId:metadata:view:shouldDisplayPlayByPlay:qosRegistrationId:applicationType:clientApp:)( v210,  v224,  v217,  v209,  v208,  v214,  v216,  v207,  v206,  v220,  v221,  v222,  v205,  v204,  (_BYTE)v203,  v202,  (_BYTE)v201,  0LL,  1,  v165,  v229,  v228,  v178,  v179,  v215 & 1,  v187,  v186,  v188,  v190,  v192,  v193);

  sub_10000BBA4(v225, &qword_1000885D0);
  sub_100035AF4(v175, _s20RegistrationResponseVMa);
  return v194;
}

  *a2 = 0LL;
  a2[1] = 0LL;
}

  sub_1000617A0();
  uint64_t v4 = v41;
LABEL_34:
  if ((v44 & 1) != 0)
  {
    sub_10006182C();
    if (v39 != v40) {
      *unint64_t v17 = -1LL << v38;
    }
    else {
      sub_10006188C(v38);
    }
    v3[2] = 0LL;
  }

unint64_t sub_100018804(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v24);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v24, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        Swift::Int v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            uint64_t v17 = *(void *)(v3 + 48);
            int64_t v18 = (_OWORD *)(v17 + 16 * v2);
            uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
            BOOL v20 = v2 != v6 || v18 >= v19 + 1;
            int64_t v2 = v6;
            if (v20)
            {
              *int64_t v18 = *v19;
              int64_t v2 = v6;
            }
          }
        }

        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    Swift::Int result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 1sub_100006E64(v0 + 6) = v23;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_1000189BC(void *a1)
{
  return sub_100018E18(a1, (SEL *)&selRef_channelID);
}

uint64_t sub_1000189C8(void *a1)
{
  return sub_100018E18(a1, (SEL *)&selRef_topic);
}

void sub_1000189D4(void *a1)
{
  id v1 = [a1 userInfo];
  if (v1)
  {
    int64_t v2 = v1;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  sub_10000C510();
}

void sub_100018A38(uint64_t a1, void *a2, SEL *a3)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_100019180();
  objc_msgSend(a2, *a3, isa);
}

void sub_100018A94(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_100019394();
  sub_10001973C();
  id v8 = String._bridgeToObjectiveC()();
  objc_msgSend(a4, *a5, isa, v8);
}

void sub_100018B28(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = String._bridgeToObjectiveC()();
  [a4 subscribeToChannel:a1 forTopic:v6];
}

void sub_100018B7C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = String._bridgeToObjectiveC()();
  [a4 unsubscribeFromChannel:a1 forTopic:v6];
}

void sub_100018BD0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = String._bridgeToObjectiveC()();
  [a4 getRegisteredChannelsForTopic:v6 withCompletion:a3];
}

uint64_t sub_100018C20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 2sub_100006E64(v0 + 4) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100018C5C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_100018C64(uint64_t a1)
{
}

uint64_t sub_100018C70()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100018C94()
{
  uint64_t v1 = sub_100006BEC(&qword_100087B30);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100018D0C()
{
  uint64_t v0 = sub_100019438();
  return sub_100012698(v0, v1, v2, v3);
}

uint64_t sub_100018D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018D6C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100018D74(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100018DB0(uint64_t a1)
{
  return a1;
}

void sub_100018DE4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v4 = a3(a2);
    atomic_store(sub_10000C754(v4), a1);
  }

  sub_10000C510();
}

uint64_t sub_100018E18(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

uint64_t sub_100018E74()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100018EA8()
{
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc(dword_100087BFC);
  *(void *)(v1 + 1sub_100006E64(v0 + 6) = v4;
  uint64_t v5 = sub_1000196C8(v4);
  return sub_1000106B8(v5, v6, v7, v3, v2);
}

uint64_t sub_100018F10()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018F4C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100018F70(uint64_t a1)
{
  return sub_100010878(a1, *(void **)(v1 + 16));
}

uint64_t sub_100018F78()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100018FA4()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_100087C14);
  *(void *)(v1 + 1sub_100006E64(v0 + 6) = v3;
  uint64_t v4 = sub_1000196C8(v3);
  return sub_100010A18(v4, v5, v6, v2);
}

uint64_t sub_100019000()
{
  return sub_1000190BC(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100019034(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100006BEC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_10000C510();
}

uint64_t sub_10001906C(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_1000190B0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1000190BC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000190C8()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1000190D4()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1000190E0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000190E8(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_1000190F4(uint64_t a1, uint64_t a2)
{
  return sub_1000122A8(a1, a2);
}

uint64_t sub_100019104(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_100019124(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

uint64_t sub_10001912C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100019148(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t sub_100019150(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100019168()
{
}

uint64_t sub_100019180()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_100019188()
{
}

uint64_t sub_100019194()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001919C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000191A4(uint64_t a1)
{
  return swift_dynamicCast(v2, v1, v3, a1, 6LL);
}

uint64_t sub_1000191C0()
{
  *(void *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t sub_1000191D0(uint64_t a1)
{
  *(void *)(v1 + 6sub_100006E64(v0 + 4) = a1;
  uint64_t v2 = *(void *)(a1 - 8);
  *(void *)(v1 + 72) = v2;
  return swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_1000191EC()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_1000191FC(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 - 8) = *v1;
  uint64_t v4 = *(void *)(v3 + 96);
  *(void *)(v2 - 8) = *v1;
  *(void *)(v3 + 10sub_100006E64(v0 + 4) = a1;
  return swift_task_dealloc(v4);
}

uint64_t sub_100019228(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 - 8) = *v1;
  uint64_t v4 = *(void *)(v3 + 128);
  *(void *)(v2 - 8) = *v1;
  *(void *)(v3 + 13sub_100006E64(v0 + 6) = a1;
  return swift_task_dealloc(v4);
}

void sub_100019254(int a1)
{
}

uint64_t sub_100019278()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100019280()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_10001928C()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1000192A8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000192C4()
{
  return sub_10000FB14();
}

uint64_t sub_1000192E0()
{
  return sub_10000FB14();
}

uint64_t sub_1000192FC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

  ;
}

  ;
}

void sub_100019324(unint64_t *a1)
{
}

void sub_100019330()
{
}

uint64_t sub_10001933C()
{
  *(void *)(v2 + 1sub_100006E64(v0 + 6) = v0;
  return swift_retain(v1);
}

uint64_t sub_100019350@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100019364()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

void sub_10001936C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)(a16 + 1sub_100006E64(v0 + 6) = v16;
}

uint64_t sub_100019394()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001939C()
{
  return type metadata accessor for Logger(0LL);
}

  ;
}

uint64_t sub_1000193C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0LL);
}

uint64_t sub_1000193D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_1000193E0()
{
  return v2(*(void *)(v1 + 80), v0, *(void *)(v1 + 56));
}

uint64_t sub_1000193FC()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

id sub_100019408@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

unint64_t *sub_100019410()
{
  return sub_1000182F0(v3, v2, v0, v1, (void *)(v4 - 104));
}

  ;
}

uint64_t sub_100019438()
{
  return v0;
}

uint64_t sub_100019444()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_100019458( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)(v16 + 2sub_100006E64(v0 + 4) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v15, a15, v17, v18 + 12);
}

void sub_100019470(unint64_t a1@<X8>)
{
}

  ;
}

void sub_100019498()
{
}

uint64_t sub_1000194B0(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1LL);
}

void sub_1000194B8(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

void sub_1000194CC(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_1000194D8()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_1000194E8(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t sub_1000194F0()
{
  return 0LL;
}

void *sub_100019500@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

  ;
}

uint64_t sub_100019520()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100019528()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100019530(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return sub_1000171C8((uint64_t *)va, 5000257LL, 0xE300000000000000LL);
}

uint64_t sub_100019548()
{
  return v3(v1, v0, v2);
}

  ;
}

uint64_t sub_100019568(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, a1, v1);
}

uint64_t sub_10001957C(uint64_t a1)
{
  return dispatch thunk of Actor.unownedExecutor.getter(v1, a1);
}

uint64_t sub_100019588()
{
  return type metadata accessor for CloudChannelError(0LL);
}

uint64_t sub_100019594()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001959C(void *a1)
{
  return sub_100018E18(a1, v1);
}

uint64_t sub_1000195A8(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

uint64_t sub_1000195B0()
{
  return (*(uint64_t (**)(void, void))(v1 + 96))(*(void *)(v0 + 72), *(void *)(v0 + 56));
}

uint64_t sub_1000195C4()
{
  return static CloudChannelSubscriptionManager.shared.getter();
}

uint64_t sub_1000195CC()
{
  return type metadata accessor for CloudChannelSubscriptionManager(0LL);
}

uint64_t sub_1000195D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

  ;
}

uint64_t sub_1000195FC()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

uint64_t sub_100019608(uint64_t a1)
{
  return BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v1, a1);
}

uint64_t sub_10001961C(uint64_t a1)
{
  *(void *)(v2 + 160) = a1;
  return dispatch thunk of Actor.unownedExecutor.getter(v1, a1);
}

  ;
}

uint64_t sub_100019648(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_100019658( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_100015AD4(v8, v9, (uint64_t *)va);
}

uint64_t sub_100019668()
{
  return sub_100015AD4(*(void *)(v1 - 136), v0, (uint64_t *)(v1 - 128));
}

void sub_100019678()
{
  *(void *)(v4 + 1sub_100006E64(v0 + 6) = v0;
  uint64_t v5 = v4 + 16 * v1;
  *(void *)(v5 + 32) = v3;
  *(void *)(v5 + 40) = v2;
}

  ;
}

uint64_t sub_1000196A0()
{
  return (*(uint64_t (**)(void, void))(v1 + 8))(*(void *)(v0 + 80), *(void *)(v0 + 56));
}

uint64_t sub_1000196B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = result;
  return result;
}

uint64_t sub_1000196C8(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

BOOL sub_1000196E0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_1000196FC()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_100019704()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_10001970C()
{
}

uint64_t sub_10001971C()
{
  return *(void *)(v0 + 88);
}

uint64_t sub_100019734()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001973C()
{
  return v0;
}

void sub_100019748(uint64_t a1@<X8>)
{
  *(void *)(v3 + 1sub_100006E64(v0 + 6) = v2;
  *(void *)(v3 + 2sub_100006E64(v0 + 4) = 2 * (a1 / v1);
}

BOOL sub_100019758(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100019768()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100019770()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100019780()
{
  return swift_release(v0);
}

id sub_100019788()
{
  return sub_100014B50(v0, v1);
}

uint64_t sub_100019798()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000197A8()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_1000197B0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v0, v1);
}

void sub_1000197C0()
{
}

Swift::Int sub_1000197CC()
{
  return Hasher._finalize()();
}

void *sub_1000197D4(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_1000197E0(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t sub_1000197F4()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

  ;
}

  ;
}

uint64_t sub_100019820()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100019828@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

void sub_100019834()
{
}

void sub_100019840(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100019848()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100019850(void *a1)
{
  return sub_100018E18(a1, v1);
}

  ;
}

uint64_t sub_100019868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_100006BEC(a5);
}

void *sub_100019870(void *a1)
{
  return memcpy(a1, v1, v2);
}

uint64_t sub_10001987C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100019884()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

  ;
}

uint64_t sub_1000198A0()
{
  return swift_willThrow();
}

uint64_t sub_1000198A8()
{
  return v0 + 32;
}

uint64_t sub_1000198B4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

  ;
}

uint64_t sub_1000198D4(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_10001906C(0LL, a2, a3);
}

uint64_t sub_1000198DC@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_1000198F0()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

uint64_t sub_1000198FC()
{
  return v0;
}

uint64_t sub_100019910(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

uint64_t sub_10001991C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100019924()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10001992C()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100019934()
{
  return sub_100013444(v0, v1);
}

  ;
}

uint64_t type metadata accessor for AccountManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd14AccountManager);
}

uint64_t sub_100019974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32LL);
}

void sub_10001997C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for URLRequest(319LL);
    if (v5 <= 0x3F)
    {
      v8[1] = *(void *)(v4 - 8) + 64LL;
      v8[2] = "\b";
      v8[3] = &unk_100067A58;
      uint64_t v6 = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
      if (v7 <= 0x3F)
      {
        v8[4] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 0LL, 5LL, v8, a1 + 24);
      }
    }
  }

uint64_t *sub_100019A44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v112 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v112 - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v109 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v109 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  unsigned int v10 = v9 - 1;
  if (!(_DWORD)v9) {
    unsigned int v10 = 0;
  }
  if (v6 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = v6;
  }
  if (v11 <= 0x7FFFFFFE) {
    int v12 = 2147483646;
  }
  else {
    int v12 = v11;
  }
  int v110 = v12;
  unsigned int v113 = v5;
  uint64_t v106 = *(void *)(v4 + 64);
  if (v5) {
    size_t v13 = *(void *)(v4 + 64);
  }
  else {
    size_t v13 = *(void *)(v4 + 64) + 1LL;
  }
  uint64_t v116 = v4;
  int v14 = *(_DWORD *)(v4 + 80);
  uint64_t v15 = v14;
  uint64_t v16 = *(_DWORD *)(v7 + 80);
  uint64_t v102 = *(void *)(v109 - 8);
  size_t v17 = *(void *)(v7 + 64);
  if (!(_DWORD)v9) {
    ++v17;
  }
  size_t v114 = v17;
  uint64_t v18 = type metadata accessor for URLRequest(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  int v20 = *(_DWORD *)(v19 + 80);
  uint64_t v21 = *(void *)(a3 + 16);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(_DWORD *)(v22 + 80);
  unint64_t v24 = v16 | v14 | v20 | v23;
  if (v24 > 7
    || ((v8 | v14 | v20 | *(_DWORD *)(v22 + 80)) & 0x100000) != 0
    || (size_t v25 = v13 + v14,
        uint64_t v108 = v14 + 24LL,
        size_t v107 = v13 + v8,
        size_t v105 = v114 + v14,
        unint64_t __n = ((((((((((v13
                      + 23
                      + ((v25
                        + ((v25
                          + ((v105
                            + ((v107
                              + ((v108
                                + ((((v25
                                    + ((v25
                                      + ((v14
                                        + 8LL
                                        + ((((v13 + 7 + (v25 & ~(unint64_t)v14)) & 0xFFFFFFFFFFFFFFF8LL)
                                          + 15) & 0xFFFFFFFFFFFFFFF8LL)) & ~(unint64_t)v14)) & ~(unint64_t)v14)) & ~(unint64_t)v14)
                                  + v13) & 0xFFFFFFFFFFFFFFF8LL)) & ~(unint64_t)v14)) & ~v16)) & ~(unint64_t)v14)) & ~(unint64_t)v14)) & ~(unint64_t)v14)) & 0xFFFFFFFFFFFFFFF8LL)
                    + 23) & 0xFFFFFFFFFFFFFFF8LL)
                  + 23) & 0xFFFFFFFFFFFFFFF8LL)
                + 23) & 0xFFFFFFFFFFFFFFF8LL)
              + 23) & 0xFFFFFFFFFFFFFFF8LL)
            + 16,
        uint64_t v26 = v23 + 16,
        ((v23
        + 16
        + ((((*(void *)(v19 + 64) + 7LL + ((__n + v20) & ~(unint64_t)v20)) & 0xFFFFFFFFFFFFFFF8LL)
          + 15) & 0xFFFFFFFFFFFFFFF8LL)) & ~v23)
      + *(void *)(v22 + 64) > 0x18))
  {
    uint64_t v33 = *a2;
    *a1 = *a2;
    uint64_t v29 = (uint64_t *)(v33 + ((v24 & 0xF8 ^ 0x1F8) & (v24 + 16)));
    swift_retain(v33);
    return v29;
  }

  uint64_t v27 = ~v15;
  uint64_t v103 = ~v16;
  unint64_t v93 = ~(unint64_t)v20;
  uint64_t v94 = *(void *)(v19 + 64) + 7LL;
  BOOL v28 = v6 == v110;
  size_t v111 = v13 + 7;
  uint64_t v100 = *(void *)(v21 - 8);
  uint64_t v101 = v15 + 8;
  uint64_t v98 = *(void *)(v18 - 8);
  uint64_t v99 = v18;
  uint64_t v96 = *(_DWORD *)(v22 + 80);
  uint64_t v97 = *(_DWORD *)(v19 + 80);
  uint64_t v95 = v21;
  size_t v92 = v13 + 23;
  if (v28)
  {
    uint64_t v29 = a1;
    BOOL v30 = a2;
    uint64_t v31 = v112;
    if (v113 < 2) {
      goto LABEL_33;
    }
    unsigned int v32 = sub_10000AB6C((uint64_t)a2, v113, v112);
    BOOL v30 = a2;
    if (v32 < 2) {
      goto LABEL_33;
    }
  }

  else
  {
    unint64_t v34 = (((v25
           + ((v25
             + ((v15
               + 8
    uint64_t v29 = a1;
    if (v11 <= 0x7FFFFFFE)
    {
      unint64_t v35 = *(void *)(v34 + 16);
      if (v35 >= 0xFFFFFFFF) {
        LODWORD(v3sub_100006E64(v0 + 5) = -1;
      }
      BOOL v30 = a2;
      uint64_t v31 = v112;
LABEL_33:
      BOOL v37 = v30;
      if (sub_10000AB6C((uint64_t)v30, 1LL, v31))
      {
        memcpy(v29, v37, v13);
      }

      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v116 + 16))(v29, v37, v31);
        sub_10000AB60((uint64_t)v29, 0LL, 1LL, v31);
      }

      uint64_t v39 = (const void *)(((unint64_t)v37 + v25) & v27);
      if (sub_10000AB6C((uint64_t)v39, 1LL, v31))
      {
        memcpy((void *)(((unint64_t)v29 + v25) & v27), v39, v13);
      }

      else
      {
        (*(void (**)(unint64_t, const void *, uint64_t))(v116 + 16))( ((unint64_t)v29 + v25) & v27,  v39,  v31);
        sub_10000AB60(((unint64_t)v29 + v25) & v27, 0LL, 1LL, v31);
      }

      uint64_t v40 = (void *)((v111 + (((unint64_t)v29 + v25) & v27)) & 0xFFFFFFFFFFFFF8LL);
      uint64_t v41 = (void *)(((unint64_t)v39 + v111) & 0xFFFFFFFFFFFFFFF8LL);
      *uint64_t v40 = *v41;
      unint64_t v42 = (void *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8LL);
      uint64_t v43 = (void *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8LL);
      *unint64_t v42 = *v43;
      uint64_t v44 = (void *)(((unint64_t)v42 + v101) & v27);
      uint64_t v45 = (const void *)(((unint64_t)v43 + v101) & v27);
      if (sub_10000AB6C((uint64_t)v45, 1LL, v31))
      {
        memcpy(v44, v45, v13);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v44, v45, v31);
        sub_10000AB60((uint64_t)v44, 0LL, 1LL, v31);
      }

      int64_t v46 = (void *)(((unint64_t)v44 + v25) & v27);
      unint64_t v47 = (const void *)(((unint64_t)v45 + v25) & v27);
      if (sub_10000AB6C((uint64_t)v47, 1LL, v31))
      {
        memcpy(v46, v47, v13);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v46, v47, v31);
        sub_10000AB60((uint64_t)v46, 0LL, 1LL, v31);
      }

      unint64_t v48 = (void *)(((unint64_t)v46 + v25) & v27);
      uint64_t v49 = (const void *)(((unint64_t)v47 + v25) & v27);
      if (sub_10000AB6C((uint64_t)v49, 1LL, v31))
      {
        memcpy(v48, v49, v13);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v48, v49, v31);
        sub_10000AB60((uint64_t)v48, 0LL, 1LL, v31);
      }

      *((_BYTE *)v48 + vsub_100006E64(v0 + 13) = *((_BYTE *)v49 + v13);
      unint64_t v50 = ((unint64_t)v48 + v13) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v51 = ((unint64_t)v49 + v13) & 0xFFFFFFFFFFFFFFF8LL;
      *(void *)(v50 + 8) = *(void *)(v51 + 8);
      uint64_t v52 = *(void *)(v51 + 16);
      *(void *)(v50 + 1sub_100006E64(v0 + 6) = v52;
      uint64_t v53 = (void *)((v108 + v50) & v27);
      uint64_t v54 = (const void *)((v108 + v51) & v27);
      swift_bridgeObjectRetain(v52);
      if (sub_10000AB6C((uint64_t)v54, 1LL, v31))
      {
        memcpy(v53, v54, v13);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v53, v54, v31);
        sub_10000AB60((uint64_t)v53, 0LL, 1LL, v31);
      }

      int v55 = (void *)(((unint64_t)v53 + v107) & v103);
      int64_t v56 = (const void *)(((unint64_t)v54 + v107) & v103);
      if (sub_10000AB6C((uint64_t)v56, 1LL, v109))
      {
        memcpy(v55, v56, v114);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v102 + 16))(v55, v56, v109);
        sub_10000AB60((uint64_t)v55, 0LL, 1LL, v109);
      }

      uint64_t v57 = (void *)(((unint64_t)v55 + v105) & v27);
      unint64_t v58 = (const void *)(((unint64_t)v56 + v105) & v27);
      if (sub_10000AB6C((uint64_t)v58, 1LL, v31))
      {
        memcpy(v57, v58, v13);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v57, v58, v31);
        sub_10000AB60((uint64_t)v57, 0LL, 1LL, v31);
      }

      unint64_t v59 = (void *)(((unint64_t)v57 + v25) & v27);
      uint64_t v60 = (const void *)(((unint64_t)v58 + v25) & v27);
      if (sub_10000AB6C((uint64_t)v60, 1LL, v31))
      {
        memcpy(v59, v60, v13);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v59, v60, v31);
        sub_10000AB60((uint64_t)v59, 0LL, 1LL, v31);
      }

      uint64_t v61 = (void *)(((unint64_t)v59 + v25) & v27);
      uint64_t v62 = (const void *)(((unint64_t)v60 + v25) & v27);
      uint64_t v63 = v26;
      if (sub_10000AB6C((uint64_t)v62, 1LL, v31))
      {
        memcpy(v61, v62, v13);
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v61, v62, v31);
        sub_10000AB60((uint64_t)v61, 0LL, 1LL, v31);
      }

      unint64_t v64 = ((unint64_t)v61 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v65 = ((unint64_t)v62 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v66 = *(void *)v65;
      *(_BYTE *)(v64 + 8) = *(_BYTE *)(v65 + 8);
      *(void *)unint64_t v64 = v66;
      char v67 = (void *)(((unint64_t)v61 + v13 + 23) & 0xFFFFFFFFFFFFFFF8LL);
      char v68 = (void *)(((unint64_t)v62 + v13 + 23) & 0xFFFFFFFFFFFFFFF8LL);
      *char v67 = *v68;
      uint64_t v69 = v68[1];
      v67[1] = v69;
      char v70 = (void *)(((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF8LL);
      uint64_t v71 = (void *)(((unint64_t)v68 + 23) & 0xFFFFFFFFFFFFFFF8LL);
      *char v70 = *v71;
      uint64_t v72 = v71[1];
      v70[1] = v72;
      uint64_t v73 = (void *)(((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF8LL);
      uint64_t v74 = (void *)(((unint64_t)v71 + 23) & 0xFFFFFFFFFFFFFFF8LL);
      *uint64_t v73 = *v74;
      uint64_t v75 = v74[1];
      v73[1] = v75;
      unint64_t v76 = (void *)(((unint64_t)v73 + 23) & 0xFFFFFFFFFFFFFFF8LL);
      uint64_t v77 = (void *)(((unint64_t)v74 + 23) & 0xFFFFFFFFFFFFFFF8LL);
      *unint64_t v76 = *v77;
      uint64_t v78 = v77[1];
      v76[1] = v78;
      uint64_t v79 = (void *)(((unint64_t)v76 + 23) & 0xFFFFFFFFFFFFFFF8LL);
      uint64_t v80 = (void *)(((unint64_t)v77 + 23) & 0xFFFFFFFFFFFFFFF8LL);
      *uint64_t v79 = *v80;
      size_t v81 = v13;
      uint64_t v82 = v80[1];
      v79[1] = v82;
      swift_bridgeObjectRetain(v69);
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v82);
      uint64_t v26 = v63;
      unint64_t v38 = __n;
      if (v113) {
        unint64_t v38 = ((((((((((v92
      }
                      + ((v25
                        + ((v25
                          + ((v105
                            + ((v107
                              + ((v108
                                + ((((v25
                                    + ((v25
                                      + ((v101
                                        + ((((v111 + ((v106 + v15) & v27)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v27)) & v27)) & v27)
                                  + v81) & 0xFFFFFFFFFFFFFFF8LL)) & v27)) & v103)) & v27)) & v27)) & v27)) & 0xFFFFFFFFFFFFFFF8LL)
                    + 23) & 0xFFFFFFFFFFFFFFF8LL)
                  + 23) & 0xFFFFFFFFFFFFFFF8LL)
                + 23) & 0xFFFFFFFFFFFFFFF8LL)
              + 23) & 0xFFFFFFFFFFFFFFF8LL)
            + 16;
      goto LABEL_66;
    }

    BOOL v30 = a2;
    uint64_t v31 = v112;
    unsigned int v36 = sub_10000AB6C((v107 + ((v108 + v34) & v27)) & v103, v9, v109);
    BOOL v30 = a2;
    if (v36 <= 1) {
      goto LABEL_33;
    }
  }

LABEL_35:
  unint64_t v38 = __n;
  memcpy(v29, v30, __n);
LABEL_66:
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v98 + 16))( ((unint64_t)v29 + v97 + v38) & v93,  ((unint64_t)a2 + v97 + v38) & v93,  v99);
  uint64_t v83 = (void *)((v94 + (((unint64_t)v29 + v97 + v38) & v93)) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v84 = (void **)((v94 + (((unint64_t)a2 + v97 + v38) & v93)) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v85 = *v84;
  *uint64_t v83 = *v84;
  unint64_t v86 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v87 = (uint64_t *)(((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v88 = v87[1];
  id v89 = v85;
  if ((v88 & 0x3000000000000000LL) != 0)
  {
    *(_OWORD *)unint64_t v86 = *(_OWORD *)v87;
  }

  else
  {
    uint64_t v90 = *v87;
    sub_10000B210(*v87, v88);
    *(void *)unint64_t v86 = v90;
    *(void *)(v86 + 8) = v88;
  }

  (*(void (**)(unint64_t, unint64_t, uint64_t))(v100 + 16))( (v26 + v86) & ~v96,  ((unint64_t)v87 + v26) & ~v96,  v95);
  return v29;
}

              sub_100018C5C(v2);
              return (Swift::Int)v40;
            }
          }
        }
      }
    }

              sub_100018C5C(v2);
              return;
            }
          }
        }
      }
    }

              sub_100018C5C(v2);
              return (Swift::Int)v39;
            }
          }
        }
      }
    }

uint64_t sub_10001A47C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  if ((_DWORD)v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v45 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v45 - 8);
  unsigned int v51 = *(_DWORD *)(v7 + 84);
  unsigned int v8 = v51 - 1;
  if (!v51) {
    unsigned int v8 = 0;
  }
  if (v6 > v8) {
    unsigned int v8 = v6;
  }
  if (v8 <= 0x7FFFFFFE) {
    int v9 = 2147483646;
  }
  else {
    int v9 = v8;
  }
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = ~v11;
  uint64_t v49 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v50 = a1;
  uint64_t v48 = ~v49;
  uint64_t v47 = *(void *)(v7 + 64);
  if (v6 == v9)
  {
    if (v5 >= 2 && sub_10000AB6C(a1, v5, v3) >= 2)
    {
      uint64_t v13 = v10 + v11;
      uint64_t v14 = v10 + 7;
      uint64_t v15 = v11 + 8;
      uint64_t v16 = v10;
      goto LABEL_51;
    }

    goto LABEL_25;
  }

  if ((_DWORD)v5) {
    uint64_t v16 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v16 = v10 + 1;
  }
  uint64_t v13 = v16 + v11;
  uint64_t v14 = v16 + 7;
  unint64_t v17 = (((v16 + 7 + ((v16 + v11 + a1) & v12)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = v11 + 8;
  unint64_t v18 = (((v16 + v11 + ((v16 + v11 + ((v11 + 8 + v17) & v12)) & v12)) & v12) + v16) & 0xFFFFFFFFFFFFFFF8LL;
  if (v8 > 0x7FFFFFFE)
  {
    if (v51 >= 2)
    {
      unsigned int v20 = sub_10000AB6C((v16 + v49 + ((v11 + v18 + 24) & v12)) & v48, v51, v45);
      uint64_t v14 = v16 + 7;
      if (v20 > 1) {
        goto LABEL_51;
      }
    }

    goto LABEL_25;
  }

  unint64_t v19 = *(void *)(v18 + 16);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  if ((v19 + 1) < 2)
  {
LABEL_25:
    if ((_DWORD)v5) {
      uint64_t v16 = v10;
    }
    else {
      uint64_t v16 = v10 + 1;
    }
    uint64_t v21 = (v16 + v50 + v11) & v12;
    uint64_t v15 = v11 + 8;
    unint64_t v22 = (v11 + 8 + ((((v16 + 7 + v21) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v12;
    uint64_t v13 = v16 + v11;
    uint64_t v23 = (v16 + v11 + v22) & v12;
    uint64_t v24 = (v13 + v23) & v12;
    unint64_t v25 = (v24 + v16) & 0xFFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRelease(*(void *)(v25 + 16));
    uint64_t v26 = (v11 + v25 + 24) & v12;
    uint64_t v27 = (v16 + v49 + v26) & v48;
    uint64_t v28 = v47 + v11;
    if (!v51) {
      ++v28;
    }
    uint64_t v29 = (v28 + v27) & v12;
    uint64_t v30 = (v13 + v29) & v12;
    uint64_t v31 = (v13 + v30) & v12;
    unint64_t v32 = (v16 + v31 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRelease(*(void *)(v32 + 8));
    unint64_t v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRelease(*(void *)(v33 + 8));
    unint64_t v34 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRelease(*(void *)(v34 + 8));
    unint64_t v35 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRelease(*(void *)(v35 + 8));
    swift_bridgeObjectRelease(*(void *)(((v35 + 23) & 0xFFFFFFFFFFFFF8LL) + 8));
    uint64_t v14 = v16 + 7;
  }

LABEL_51:
  uint64_t v36 = v47 + v11;
  if (!v51) {
    ++v36;
  }
  unint64_t v37 = (((((((((v16
               + ((v13
                 + ((v13
                   + ((v36
                     + ((v16
                       + v49
                       + ((v11
                         + ((((v13
                             + ((v13
                               + ((v15 + ((((v14 + (v13 & v12)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v12)) & v12)) & v12)
                           + v16) & 0xFFFFFFFFFFFFFFF8LL)
                         + 24) & v12)) & v48)) & v12)) & v12)) & v12)
               + 23) & 0xFFFFFFFFFFFFFFF8LL)
             + 23) & 0xFFFFFFFFFFFFFFF8LL)
           + 23) & 0xFFFFFFFFFFFFFFF8LL)
         + 23) & 0xFFFFFFFFFFFFFFF8LL)
       + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v38 = type metadata accessor for URLRequest(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  unint64_t v40 = (v50 + *(unsigned __int8 *)(v39 + 80) + v37 + 16) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  (*(void (**)(unint64_t, uint64_t))(v39 + 8))(v40, v38);
  uint64_t v41 = (id *)((*(void *)(v39 + 64) + v40 + 7) & 0xFFFFFFFFFFFFFFF8LL);

  unint64_t v42 = (uint64_t *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v43 = v42[1];
  if ((v43 & 0x3000000000000000LL) == 0) {
    sub_10000ABB4(*v42, v43);
  }
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))(((unint64_t)v42 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL));
}

void *sub_10001A9CC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  unsigned int v99 = *(_DWORD *)(v10 + 84);
  unsigned int v11 = v99 - 1;
  if (!v99) {
    unsigned int v11 = 0;
  }
  if (v8 > v11) {
    unsigned int v11 = v8;
  }
  if (v11 <= 0x7FFFFFFE) {
    int v12 = 2147483646;
  }
  else {
    int v12 = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = ~v13;
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v104 = ~v15;
  size_t v103 = *(void *)(v10 + 64);
  size_t v105 = (const void *)a2;
  unsigned int v102 = v7;
  size_t v101 = *(void *)(v6 + 64);
  uint64_t v95 = v9;
  if (v8 != v12)
  {
    if (v7) {
      size_t v16 = *(void *)(v6 + 64);
    }
    else {
      size_t v16 = *(void *)(v6 + 64) + 1LL;
    }
    size_t v17 = v16 + v13;
    size_t v20 = (v16 + v13 + a2) & v14;
    size_t v18 = v16 + 7;
    uint64_t v19 = v13 + 8;
    unint64_t v21 = (((v16
           + v13
           + ((v16 + v13 + ((v13 + 8 + ((((v16 + 7 + v20) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v14)) & v14)) & v14)
         + v16) & 0xFFFFFFFFFFFFFFF8LL;
    if (v11 > 0x7FFFFFFE)
    {
      if (v99 >= 2)
      {
        unsigned int v23 = sub_10000AB6C((v16 + v15 + ((v13 + v21 + 24) & v14)) & v104, v99, v9);
        uint64_t v19 = v13 + 8;
        if (v23 > 1) {
          goto LABEL_30;
        }
      }
    }

    else
    {
      unint64_t v22 = *(void *)(v21 + 16);
      if (v22 >= 0xFFFFFFFF) {
        LODWORD(v22) = -1;
      }
    }

void *sub_10001B364(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v232 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v232 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  unsigned int v10 = v9 - 1;
  if (!(_DWORD)v9) {
    unsigned int v10 = 0;
  }
  if (v7 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = v7;
  }
  if (v11 <= 0x7FFFFFFE) {
    int v12 = 2147483646;
  }
  else {
    int v12 = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = ~v13;
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v236 = ~v15;
  uint64_t v214 = *(void *)(v232 - 8);
  size_t v234 = *(void *)(v8 + 64);
  unsigned int v231 = v6;
  size_t v224 = *(void *)(v5 + 64);
  if (v7 != v12)
  {
    uint64_t v227 = *(unsigned __int8 *)(v8 + 80);
    if (v6) {
      size_t v19 = *(void *)(v5 + 64);
    }
    else {
      size_t v19 = *(void *)(v5 + 64) + 1LL;
    }
    size_t v20 = v19 + v13;
    size_t v21 = v19 + 7;
    uint64_t v22 = v13 + 8;
    unint64_t v23 = (((v19
           + v13
           + ((v19
             + v13
             + ((v13
               + 8
    if (v11 > 0x7FFFFFFE)
    {
      if (v9 >= 2)
      {
        unsigned int v25 = sub_10000AB6C((v19 + v227 + ((v13 + v23 + 24) & v14)) & v236, v9, v232);
        size_t v21 = v19 + 7;
        uint64_t v9 = v9;
        if (v25 >= 2) {
          goto LABEL_32;
        }
      }
    }

    else
    {
      unint64_t v24 = *(void *)(v23 + 16);
      if (v24 >= 0xFFFFFFFF) {
        LODWORD(v2sub_100006E64(v0 + 4) = -1;
      }
      if ((v24 + 1) >= 2)
      {
LABEL_32:
        unint64_t v28 = (((v20
               + ((v20
                 + ((v22 + ((((v21 + ((v19 + a2 + v13) & v14)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v14)) & v14)) & v14)
             + v19) & 0xFFFFFFFFFFFFFFF8LL;
        if (v11 > 0x7FFFFFFE)
        {
          size_t v16 = (const void *)a2;
          if (v9 >= 2)
          {
            uint64_t v58 = (v19 + v227 + ((v13 + v28 + 24) & v14)) & v236;
            uint64_t v59 = v9;
            int v219 = v9;
            uint64_t v9 = (uint64_t)a1;
            uint64_t v60 = v13;
            uint64_t v61 = v5;
            uint64_t v62 = v22;
            size_t v63 = v21;
            unsigned int v64 = sub_10000AB6C(v58, v59, v232);
            size_t v21 = v63;
            uint64_t v22 = v62;
            uint64_t v5 = v61;
            uint64_t v13 = v60;
            a1 = (void *)v9;
            LODWORD(v9) = v219;
            if (v64 > 1) {
              goto LABEL_83;
            }
          }
        }

        else
        {
          unint64_t v29 = *(void *)(v28 + 16);
          if (v29 >= 0xFFFFFFFF) {
            LODWORD(v29) = -1;
          }
          size_t v16 = (const void *)a2;
        }

        goto LABEL_78;
      }
    }

    unint64_t v26 = (((v20
           + ((v20
             + ((v22 + ((((v21 + ((v19 + a2 + v13) & v14)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v14)) & v14)) & v14)
         + v19) & 0xFFFFFFFFFFFFFFF8LL;
    if (v11 > 0x7FFFFFFE)
    {
      size_t v16 = (const void *)a2;
      uint64_t v15 = v227;
      if (v9 >= 2
        && sub_10000AB6C((v19 + v227 + ((v13 + v26 + 24) & v14)) & v236, v9, v232) > 1)
      {
        goto LABEL_48;
      }
    }

    else
    {
      unint64_t v27 = *(void *)(v26 + 16);
      if (v27 >= 0xFFFFFFFF) {
        LODWORD(v27) = -1;
      }
      size_t v16 = (const void *)a2;
      uint64_t v15 = v227;
    }

    goto LABEL_39;
  }

  size_t v16 = (const void *)a2;
  if (v6 < 2) {
    goto LABEL_39;
  }
  unsigned int v17 = sub_10000AB6C((uint64_t)a1, v6, v4);
  unsigned int v18 = sub_10000AB6C(a2, v231, v4);
  if (v17 < 2)
  {
    if (v18 >= 2)
    {
LABEL_48:
      int v218 = v9;
      uint64_t v228 = v15;
      if (v231) {
        size_t v19 = v224;
      }
      else {
        size_t v19 = v224 + 1;
      }
      uint64_t v35 = ((unint64_t)a1 + v13 + v19) & v14;
      uint64_t v36 = v13 + 8;
      unint64_t v37 = (v13 + 8 + ((((v19 + 7 + v35) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v14;
      size_t v20 = v19 + v13;
      uint64_t v38 = (v19 + v13 + v37) & v14;
      uint64_t v39 = (v20 + v38) & v14;
      unint64_t v40 = (v39 + v19) & 0xFFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRelease(*(void *)(v40 + 16));
      uint64_t v225 = v13;
      uint64_t v230 = v13 + 24;
      uint64_t v41 = (v13 + 24 + v40) & v14;
      uint64_t v42 = v5;
      uint64_t v220 = v36;
      size_t v229 = v19 + v228;
      uint64_t v43 = (v229 + v41) & v236;
      size_t v44 = v234;
      if (!v218) {
        size_t v44 = v234 + 1;
      }
      uint64_t v45 = v44 + v225;
      uint64_t v46 = (v44 + v225 + v43) & v14;
      uint64_t v47 = (v20 + v46) & v14;
      uint64_t v48 = a3;
      uint64_t v49 = (v20 + v47) & v14;
      unint64_t v50 = (v19 + 23 + v49) & 0xFFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRelease(*(void *)(v50 + 8));
      unint64_t v51 = (v50 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRelease(*(void *)(v51 + 8));
      unint64_t v52 = (v51 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRelease(*(void *)(v52 + 8));
      unint64_t v53 = (v52 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRelease(*(void *)(v53 + 8));
      swift_bridgeObjectRelease(*(void *)(((v53 + 23) & 0xFFFFFFFFFFFFF8LL) + 8));
      size_t v54 = v45
          + ((v229
            + ((v230
              + ((((v20
                  + ((v20
                    + ((v220 + ((((v19 + 7 + (v20 & v14)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v14)) & v14)) & v14)
                + v19) & 0xFFFFFFFFFFFFFFF8LL)) & v14)) & v236);
      uint64_t v22 = v220;
      memcpy( a1,  v16,  ((((((((((v19 + 23 + ((v20 + ((v20 + (v54 & v14)) & v14)) & v14)) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
            + 23) & 0xFFFFFFFFFFFFFFF8LL)
          + 23) & 0xFFFFFFFFFFFFFFF8LL)
        + 23) & 0xFFFFFFFFFFFFFFF8LL)
      + 16);
      size_t v55 = v19 + 7;
      BOOL v56 = v218 == 0;
      size_t v57 = v234;
      uint64_t v13 = v225;
      goto LABEL_160;
    }

LABEL_39:
    int v30 = sub_10000AB6C((uint64_t)a1, 1LL, v4);
    int v31 = sub_10000AB6C((uint64_t)v16, 1LL, v4);
    int v217 = v9;
    if (v30)
    {
      if (!v31)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, v16, v4);
        sub_10000AB60((uint64_t)a1, 0LL, 1LL, v4);
LABEL_87:
        unsigned int v32 = v231;
        size_t v34 = v224;
        goto LABEL_88;
      }
    }

    else
    {
      if (!v31)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 24))(a1, v16, v4);
        goto LABEL_87;
      }

      (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    }

    unsigned int v32 = v231;
    if (v231) {
      size_t v33 = v224;
    }
    else {
      size_t v33 = v224 + 1;
    }
    memcpy(a1, v16, v33);
    size_t v34 = v224;
LABEL_88:
    if (v32) {
      size_t v19 = v34;
    }
    else {
      size_t v19 = v34 + 1;
    }
    v215 = a1;
    uint64_t v69 = (void *)(((unint64_t)a1 + v13 + v19) & v14);
    char v70 = (const void *)(((unint64_t)v16 + v13 + v19) & v14);
    int v71 = sub_10000AB6C((uint64_t)v69, 1LL, v4);
    int v72 = sub_10000AB6C((uint64_t)v70, 1LL, v4);
    if (v71)
    {
      if (!v72)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v69, v70, v4);
        sub_10000AB60((uint64_t)v69, 0LL, 1LL, v4);
        goto LABEL_97;
      }
    }

    else
    {
      if (!v72)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 24))(v69, v70, v4);
LABEL_97:
        size_t v222 = v19 + 7;
        uint64_t v73 = (void *)(((unint64_t)v70 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL);
        uint64_t v74 = (void *)(((unint64_t)v69 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL);
        *uint64_t v74 = *v73;
        unint64_t v75 = (void *)(((unint64_t)v74 + 15) & 0xFFFFFFFFFFFFFFF8LL);
        uint64_t v76 = (void *)(((unint64_t)v73 + 15) & 0xFFFFFFFFFFFFFFF8LL);
        *unint64_t v75 = *v76;
        uint64_t v77 = (void *)(((unint64_t)v75 + v13 + 8) & v14);
        uint64_t v78 = (const void *)(((unint64_t)v76 + v13 + 8) & v14);
        int v79 = sub_10000AB6C((uint64_t)v77, 1LL, v4);
        int v80 = sub_10000AB6C((uint64_t)v78, 1LL, v4);
        uint64_t v221 = v13 + 8;
        if (v79)
        {
          if (!v80)
          {
            (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v77, v78, v4);
            sub_10000AB60((uint64_t)v77, 0LL, 1LL, v4);
            goto LABEL_103;
          }
        }

        else
        {
          if (!v80)
          {
            (*(void (**)(void *, const void *, uint64_t))(v5 + 24))(v77, v78, v4);
LABEL_103:
            size_t v20 = v19 + v13;
            unint64_t v81 = (void *)(((unint64_t)v77 + v19 + v13) & v14);
            uint64_t v82 = (const void *)(((unint64_t)v78 + v19 + v13) & v14);
            int v83 = sub_10000AB6C((uint64_t)v81, 1LL, v4);
            int v84 = sub_10000AB6C((uint64_t)v82, 1LL, v4);
            if (v83)
            {
              if (!v84)
              {
                (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v81, v82, v4);
                sub_10000AB60((uint64_t)v81, 0LL, 1LL, v4);
                goto LABEL_109;
              }
            }

            else
            {
              if (!v84)
              {
                (*(void (**)(void *, const void *, uint64_t))(v5 + 24))(v81, v82, v4);
LABEL_109:
                unint64_t v85 = (_BYTE *)(((unint64_t)v81 + v20) & v14);
                unint64_t v86 = (_BYTE *)(((unint64_t)v82 + v20) & v14);
                int v87 = sub_10000AB6C((uint64_t)v85, 1LL, v4);
                int v88 = sub_10000AB6C((uint64_t)v86, 1LL, v4);
                if (v87)
                {
                  if (!v88)
                  {
                    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v85, v86, v4);
                    sub_10000AB60((uint64_t)v85, 0LL, 1LL, v4);
                    goto LABEL_115;
                  }
                }

                else
                {
                  if (!v88)
                  {
                    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 24))(v85, v86, v4);
LABEL_115:
                    unint64_t v89 = (unint64_t)&v86[v19];
                    v85[v19] = v86[v19];
                    unint64_t v90 = (unint64_t)&v85[v19] & 0xFFFFFFFFFFFFFFF8LL;
                    unint64_t v91 = v89 & 0xFFFFFFFFFFFFFFF8LL;
                    *(void *)(v90 + 8) = *(void *)((v89 & 0xFFFFFFFFFFFFFFF8LL) + 8);
                    uint64_t v92 = *(void *)((v89 & 0xFFFFFFFFFFFFFFF8LL) + 16);
                    uint64_t v93 = *(void *)(v90 + 16);
                    *(void *)(v90 + 1sub_100006E64(v0 + 6) = v92;
                    swift_bridgeObjectRetain(v92);
                    swift_bridgeObjectRelease(v93);
                    size_t v94 = (void *)((v13 + 24 + v90) & v14);
                    uint64_t v230 = v13 + 24;
                    uint64_t v95 = (const void *)((v13 + 24 + v91) & v14);
                    LODWORD(v91) = sub_10000AB6C((uint64_t)v94, 1LL, v4);
                    int v96 = sub_10000AB6C((uint64_t)v95, 1LL, v4);
                    if ((_DWORD)v91)
                    {
                      if (!v96)
                      {
                        (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v94, v95, v4);
                        sub_10000AB60((uint64_t)v94, 0LL, 1LL, v4);
                        goto LABEL_121;
                      }
                    }

                    else
                    {
                      if (!v96)
                      {
                        (*(void (**)(void *, const void *, uint64_t))(v5 + 24))(v94, v95, v4);
LABEL_121:
                        size_t v97 = (void *)(((unint64_t)v94 + v19 + v15) & v236);
                        size_t v229 = v19 + v15;
                        uint64_t v98 = (const void *)(((unint64_t)v95 + v19 + v15) & v236);
                        int v99 = sub_10000AB6C((uint64_t)v97, 1LL, v232);
                        int v100 = sub_10000AB6C((uint64_t)v98, 1LL, v232);
                        uint64_t v226 = v13;
                        uint64_t v101 = v5;
                        if (v99)
                        {
                          if (!v100)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v214 + 16))(v97, v98, v232);
                            sub_10000AB60((uint64_t)v97, 0LL, 1LL, v232);
LABEL_136:
                            a1 = v215;
                            size_t v103 = v234;
                            int v102 = v217;
                            goto LABEL_137;
                          }
                        }

                        else
                        {
                          if (!v100)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v214 + 24))(v97, v98, v232);
                            goto LABEL_136;
                          }

                          (*(void (**)(void *, uint64_t))(v214 + 8))(v97, v232);
                        }

                        int v102 = v217;
                        size_t v103 = v234;
                        if (v217) {
                          size_t v104 = v234;
                        }
                        else {
                          size_t v104 = v234 + 1;
                        }
                        memcpy(v97, v98, v104);
                        a1 = v215;
LABEL_137:
                        BOOL v233 = v102 == 0;
                        if (v102) {
                          size_t v105 = v103;
                        }
                        else {
                          size_t v105 = v103 + 1;
                        }
                        uint64_t v106 = v105 + v226;
                        size_t v107 = (void *)(((unint64_t)v97 + v106) & v14);
                        uint64_t v108 = (const void *)(((unint64_t)v98 + v106) & v14);
                        int v109 = sub_10000AB6C((uint64_t)v107, 1LL, v4);
                        int v110 = sub_10000AB6C((uint64_t)v108, 1LL, v4);
                        if (v109)
                        {
                          size_t v16 = (const void *)a2;
                          if (!v110)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v101 + 16))(v107, v108, v4);
                            sub_10000AB60((uint64_t)v107, 0LL, 1LL, v4);
                            goto LABEL_146;
                          }
                        }

                        else
                        {
                          size_t v16 = (const void *)a2;
                          if (!v110)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v101 + 24))(v107, v108, v4);
LABEL_146:
                            size_t v111 = (void *)(((unint64_t)v107 + v20) & v14);
                            uint64_t v112 = (const void *)(((unint64_t)v108 + v20) & v14);
                            int v113 = sub_10000AB6C((uint64_t)v111, 1LL, v4);
                            int v114 = sub_10000AB6C((uint64_t)v112, 1LL, v4);
                            if (v113)
                            {
                              if (!v114)
                              {
                                (*(void (**)(void *, const void *, uint64_t))(v101 + 16))(v111, v112, v4);
                                sub_10000AB60((uint64_t)v111, 0LL, 1LL, v4);
                                goto LABEL_152;
                              }
                            }

                            else
                            {
                              if (!v114)
                              {
                                (*(void (**)(void *, const void *, uint64_t))(v101 + 24))(v111, v112, v4);
LABEL_152:
                                uint64_t v115 = (void *)(((unint64_t)v111 + v20) & v14);
                                uint64_t v116 = (const void *)(((unint64_t)v112 + v20) & v14);
                                int v117 = sub_10000AB6C((uint64_t)v115, 1LL, v4);
                                int v118 = sub_10000AB6C((uint64_t)v116, 1LL, v4);
                                if (v117)
                                {
                                  if (!v118)
                                  {
                                    (*(void (**)(void *, const void *, uint64_t))(v101 + 16))(v115, v116, v4);
                                    sub_10000AB60((uint64_t)v115, 0LL, 1LL, v4);
LABEL_158:
                                    uint64_t v48 = a3;
                                    uint64_t v13 = v226;
                                    unint64_t v119 = ((unint64_t)v115 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
                                    unint64_t v120 = ((unint64_t)v116 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
                                    uint64_t v121 = *(void *)v120;
                                    *(_BYTE *)(v119 + 8) = *(_BYTE *)(v120 + 8);
                                    *(void *)unint64_t v119 = v121;
                                    v122 = (void *)(((unint64_t)v115 + v19 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    v123 = (void *)(((unint64_t)v116 + v19 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    void *v122 = *v123;
                                    uint64_t v124 = v123[1];
                                    uint64_t v125 = v122[1];
                                    v122[1] = v124;
                                    swift_bridgeObjectRetain(v124);
                                    swift_bridgeObjectRelease(v125);
                                    v126 = (void *)(((unint64_t)v122 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    v127 = (void *)(((unint64_t)v123 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    void *v126 = *v127;
                                    uint64_t v128 = v127[1];
                                    uint64_t v129 = v126[1];
                                    v126[1] = v128;
                                    swift_bridgeObjectRetain(v128);
                                    swift_bridgeObjectRelease(v129);
                                    v130 = (void *)(((unint64_t)v126 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    v131 = (void *)(((unint64_t)v127 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    void *v130 = *v131;
                                    uint64_t v132 = v131[1];
                                    uint64_t v133 = v130[1];
                                    v130[1] = v132;
                                    swift_bridgeObjectRetain(v132);
                                    swift_bridgeObjectRelease(v133);
                                    v134 = (void *)(((unint64_t)v130 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    v135 = (void *)(((unint64_t)v131 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    void *v134 = *v135;
                                    uint64_t v136 = v135[1];
                                    uint64_t v137 = v134[1];
                                    v134[1] = v136;
                                    swift_bridgeObjectRetain(v136);
                                    swift_bridgeObjectRelease(v137);
                                    v138 = (void *)(((unint64_t)v134 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    v139 = (void *)(((unint64_t)v135 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    void *v138 = *v139;
                                    uint64_t v140 = v139[1];
                                    uint64_t v141 = v138[1];
                                    v138[1] = v140;
                                    swift_bridgeObjectRetain(v140);
                                    swift_bridgeObjectRelease(v141);
LABEL_159:
                                    BOOL v56 = v233;
                                    size_t v57 = v234;
                                    uint64_t v22 = v221;
                                    size_t v55 = v222;
LABEL_160:
                                    size_t v142 = v20;
                                    goto LABEL_161;
                                  }
                                }

                                else
                                {
                                  if (!v118)
                                  {
                                    (*(void (**)(void *, const void *, uint64_t))(v101 + 24))(v115, v116, v4);
                                    goto LABEL_158;
                                  }

                                  (*(void (**)(void *, uint64_t))(v101 + 8))(v115, v4);
                                }

                                memcpy(v115, v116, v19);
                                goto LABEL_158;
                              }

                              (*(void (**)(void *, uint64_t))(v101 + 8))(v111, v4);
                            }

                            memcpy(v111, v112, v19);
                            goto LABEL_152;
                          }

                          (*(void (**)(void *, uint64_t))(v101 + 8))(v107, v4);
                        }

                        memcpy(v107, v108, v19);
                        goto LABEL_146;
                      }

                      (*(void (**)(void *, uint64_t))(v5 + 8))(v94, v4);
                    }

                    memcpy(v94, v95, v19);
                    goto LABEL_121;
                  }

                  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v85, v4);
                }

                memcpy(v85, v86, v19);
                goto LABEL_115;
              }

              (*(void (**)(void *, uint64_t))(v5 + 8))(v81, v4);
            }

            memcpy(v81, v82, v19);
            goto LABEL_109;
          }

          (*(void (**)(void *, uint64_t))(v5 + 8))(v77, v4);
        }

        memcpy(v77, v78, v19);
        goto LABEL_103;
      }

      (*(void (**)(void *, uint64_t))(v5 + 8))(v69, v4);
    }

    memcpy(v69, v70, v19);
    goto LABEL_97;
  }

  uint64_t v227 = v15;
  if (v18 >= 2)
  {
    size_t v19 = v224;
    size_t v20 = v224 + v13;
    size_t v21 = v224 + 7;
    uint64_t v22 = v13 + 8;
LABEL_83:
    BOOL v65 = (_DWORD)v9 == 0;
    BOOL v66 = (_DWORD)v9 == 0;
    uint64_t v230 = v13 + 24;
    size_t v229 = v19 + v227;
    size_t v57 = v234;
    size_t v67 = v234 + v13;
    if (v65) {
      ++v67;
    }
    size_t v68 = v21;
    memcpy( a1,  v16,  ((((((((((v19 + ((v20 + ((v20 + ((v67 + ((v229 + ((v13 + 24 + ((((v20 + ((v20 + ((v22 + ((((v21 + (v20 & v14)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v14)) & v14)) & v14)
                          + v19) & 0xFFFFFFFFFFFFFFF8LL)) & v14)) & v236)) & v14)) & v14)) & v14)
              + 23) & 0xFFFFFFFFFFFFFFF8LL)
            + 23) & 0xFFFFFFFFFFFFFFF8LL)
          + 23) & 0xFFFFFFFFFFFFFFF8LL)
        + 23) & 0xFFFFFFFFFFFFFFF8LL)
      + 23) & 0xFFFFFFFFFFFFFFF8LL)
    + 16);
    BOOL v56 = v66;
    size_t v55 = v68;
    uint64_t v48 = a3;
    goto LABEL_160;
  }

    unsigned int v32 = sub_10000AB6C((uint64_t)a1, 1LL, v4);
    size_t v33 = sub_10000AB6C((uint64_t)v17, 1LL, v4);
    uint64_t v200 = v10;
    if (v32)
    {
      if (!v33)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, v17, v4);
        sub_10000AB60((uint64_t)a1, 0LL, 1LL, v4);
LABEL_87:
        size_t v34 = v213;
        uint64_t v36 = v207;
        goto LABEL_88;
      }
    }

    else
    {
      if (!v33)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 40))(a1, v17, v4);
        goto LABEL_87;
      }

      (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    }

    size_t v34 = v213;
    if (v213) {
      uint64_t v35 = v207;
    }
    else {
      uint64_t v35 = v207 + 1;
    }
    memcpy(a1, v17, v35);
    uint64_t v36 = v207;
LABEL_88:
    if (v34) {
      size_t v21 = v36;
    }
    else {
      size_t v21 = v36 + 1;
    }
    v198 = a1;
    int v72 = (void *)(((unint64_t)a1 + v14 + v21) & v15);
    uint64_t v73 = (const void *)(((unint64_t)v17 + v14 + v21) & v15);
    uint64_t v74 = sub_10000AB6C((uint64_t)v72, 1LL, v4);
    unint64_t v75 = sub_10000AB6C((uint64_t)v73, 1LL, v4);
    if (v74)
    {
      if (!v75)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v72, v73, v4);
        sub_10000AB60((uint64_t)v72, 0LL, 1LL, v4);
        goto LABEL_97;
      }
    }

    else
    {
      if (!v75)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 40))(v72, v73, v4);
LABEL_97:
        v205 = v21 + 7;
        uint64_t v76 = (void *)(((unint64_t)v73 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL);
        uint64_t v77 = (void *)(((unint64_t)v72 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL);
        *uint64_t v77 = *v76;
        uint64_t v78 = (void *)(((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8LL);
        int v79 = (void *)(((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFFFF8LL);
        *uint64_t v78 = *v79;
        int v80 = (void *)(((unint64_t)v78 + v14 + 8) & v15);
        unint64_t v81 = (const void *)(((unint64_t)v79 + v14 + 8) & v15);
        uint64_t v82 = sub_10000AB6C((uint64_t)v80, 1LL, v4);
        int v83 = sub_10000AB6C((uint64_t)v81, 1LL, v4);
        v204 = v14 + 8;
        if (v82)
        {
          if (!v83)
          {
            (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v80, v81, v4);
            sub_10000AB60((uint64_t)v80, 0LL, 1LL, v4);
            goto LABEL_103;
          }
        }

        else
        {
          if (!v83)
          {
            (*(void (**)(void *, const void *, uint64_t))(v5 + 40))(v80, v81, v4);
LABEL_103:
            uint64_t v22 = v21 + v14;
            int v84 = (void *)(((unint64_t)v80 + v21 + v14) & v15);
            unint64_t v85 = (const void *)(((unint64_t)v81 + v21 + v14) & v15);
            unint64_t v86 = sub_10000AB6C((uint64_t)v84, 1LL, v4);
            int v87 = sub_10000AB6C((uint64_t)v85, 1LL, v4);
            if (v86)
            {
              if (!v87)
              {
                (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v84, v85, v4);
                sub_10000AB60((uint64_t)v84, 0LL, 1LL, v4);
                goto LABEL_109;
              }
            }

            else
            {
              if (!v87)
              {
                (*(void (**)(void *, const void *, uint64_t))(v5 + 40))(v84, v85, v4);
LABEL_109:
                int v88 = (_BYTE *)(((unint64_t)v84 + v22) & v15);
                unint64_t v89 = (_BYTE *)(((unint64_t)v85 + v22) & v15);
                unint64_t v90 = sub_10000AB6C((uint64_t)v88, 1LL, v4);
                unint64_t v91 = sub_10000AB6C((uint64_t)v89, 1LL, v4);
                if (v90)
                {
                  if (!v91)
                  {
                    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v88, v89, v4);
                    sub_10000AB60((uint64_t)v88, 0LL, 1LL, v4);
                    goto LABEL_115;
                  }
                }

                else
                {
                  if (!v91)
                  {
                    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 40))(v88, v89, v4);
LABEL_115:
                    v88[v21] = v89[v21];
                    uint64_t v92 = (unint64_t)&v88[v21] & 0xFFFFFFFFFFFFFFF8LL;
                    uint64_t v93 = (unint64_t)&v89[v21] & 0xFFFFFFFFFFFFFFF8LL;
                    *(void *)(v92 + 8) = *(void *)(v93 + 8);
                    size_t v94 = *(void *)(v92 + 16);
                    *(void *)(v92 + 1sub_100006E64(v0 + 6) = *(void *)(v93 + 16);
                    swift_bridgeObjectRelease(v94);
                    uint64_t v95 = (void *)((v14 + 24 + v92) & v15);
                    uint64_t v212 = v14 + 24;
                    int v96 = (const void *)((v14 + 24 + v93) & v15);
                    size_t v97 = sub_10000AB6C((uint64_t)v95, 1LL, v4);
                    uint64_t v98 = sub_10000AB6C((uint64_t)v96, 1LL, v4);
                    if (v97)
                    {
                      if (!v98)
                      {
                        (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v95, v96, v4);
                        sub_10000AB60((uint64_t)v95, 0LL, 1LL, v4);
                        goto LABEL_121;
                      }
                    }

                    else
                    {
                      if (!v98)
                      {
                        (*(void (**)(void *, const void *, uint64_t))(v5 + 40))(v95, v96, v4);
LABEL_121:
                        int v99 = (void *)(((unint64_t)v95 + v21 + v16) & v218);
                        v210 = v21 + v16;
                        int v100 = (const void *)(((unint64_t)v96 + v21 + v16) & v218);
                        uint64_t v101 = sub_10000AB6C((uint64_t)v99, 1LL, v214);
                        int v102 = sub_10000AB6C((uint64_t)v100, 1LL, v214);
                        uint64_t v209 = v14;
                        size_t v103 = v5;
                        if (v101)
                        {
                          if (!v102)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v197 + 32))(v99, v100, v214);
                            sub_10000AB60((uint64_t)v99, 0LL, 1LL, v214);
LABEL_136:
                            a1 = v198;
                            size_t v105 = v216;
                            size_t v104 = v200;
                            goto LABEL_137;
                          }
                        }

                        else
                        {
                          if (!v102)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v197 + 40))(v99, v100, v214);
                            goto LABEL_136;
                          }

                          (*(void (**)(void *, uint64_t))(v197 + 8))(v99, v214);
                        }

                        size_t v104 = v200;
                        size_t v105 = v216;
                        if (v200) {
                          uint64_t v106 = v216;
                        }
                        else {
                          uint64_t v106 = v216 + 1;
                        }
                        memcpy(v99, v100, v106);
                        a1 = v198;
LABEL_137:
                        v215 = v104 == 0;
                        if (v104) {
                          size_t v107 = v105;
                        }
                        else {
                          size_t v107 = v105 + 1;
                        }
                        uint64_t v108 = v107 + v209;
                        int v109 = (void *)(((unint64_t)v99 + v108) & v15);
                        int v110 = (const void *)(((unint64_t)v100 + v108) & v15);
                        size_t v111 = sub_10000AB6C((uint64_t)v109, 1LL, v4);
                        uint64_t v112 = sub_10000AB6C((uint64_t)v110, 1LL, v4);
                        if (v111)
                        {
                          unsigned int v17 = (const void *)a2;
                          if (!v112)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v103 + 32))(v109, v110, v4);
                            sub_10000AB60((uint64_t)v109, 0LL, 1LL, v4);
                            goto LABEL_146;
                          }
                        }

                        else
                        {
                          unsigned int v17 = (const void *)a2;
                          if (!v112)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v103 + 40))(v109, v110, v4);
LABEL_146:
                            int v113 = (void *)(((unint64_t)v109 + v22) & v15);
                            int v114 = (const void *)(((unint64_t)v110 + v22) & v15);
                            uint64_t v115 = sub_10000AB6C((uint64_t)v113, 1LL, v4);
                            uint64_t v116 = sub_10000AB6C((uint64_t)v114, 1LL, v4);
                            if (v115)
                            {
                              if (!v116)
                              {
                                (*(void (**)(void *, const void *, uint64_t))(v103 + 32))(v113, v114, v4);
                                sub_10000AB60((uint64_t)v113, 0LL, 1LL, v4);
                                goto LABEL_152;
                              }
                            }

                            else
                            {
                              if (!v116)
                              {
                                (*(void (**)(void *, const void *, uint64_t))(v103 + 40))(v113, v114, v4);
LABEL_152:
                                int v117 = (void *)(((unint64_t)v113 + v22) & v15);
                                int v118 = (const void *)(((unint64_t)v114 + v22) & v15);
                                unint64_t v119 = sub_10000AB6C((uint64_t)v117, 1LL, v4);
                                unint64_t v120 = sub_10000AB6C((uint64_t)v118, 1LL, v4);
                                if (v119)
                                {
                                  if (!v120)
                                  {
                                    (*(void (**)(void *, const void *, uint64_t))(v103 + 32))(v117, v118, v4);
                                    sub_10000AB60((uint64_t)v117, 0LL, 1LL, v4);
LABEL_158:
                                    uint64_t v49 = a3;
                                    uint64_t v14 = v209;
                                    uint64_t v121 = ((unint64_t)v117 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
                                    v122 = ((unint64_t)v118 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
                                    v123 = *(void *)v122;
                                    *(_BYTE *)(v121 + 8) = *(_BYTE *)(v122 + 8);
                                    *(void *)uint64_t v121 = v123;
                                    uint64_t v124 = (void *)(((unint64_t)v117 + v21 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    uint64_t v125 = (void *)(((unint64_t)v118 + v21 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    *uint64_t v124 = *v125;
                                    v126 = v124[1];
                                    v124[1] = v125[1];
                                    swift_bridgeObjectRelease(v126);
                                    v127 = (void *)(((unint64_t)v124 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    uint64_t v128 = (void *)(((unint64_t)v125 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    void *v127 = *v128;
                                    uint64_t v129 = v127[1];
                                    v127[1] = v128[1];
                                    swift_bridgeObjectRelease(v129);
                                    v130 = (void *)(((unint64_t)v127 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    v131 = (void *)(((unint64_t)v128 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    void *v130 = *v131;
                                    uint64_t v132 = v130[1];
                                    v130[1] = v131[1];
                                    swift_bridgeObjectRelease(v132);
                                    uint64_t v133 = (void *)(((unint64_t)v130 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    v134 = (void *)(((unint64_t)v131 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    *uint64_t v133 = *v134;
                                    v135 = v133[1];
                                    v133[1] = v134[1];
                                    swift_bridgeObjectRelease(v135);
                                    uint64_t v136 = (void *)(((unint64_t)v133 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    uint64_t v137 = (void *)(((unint64_t)v134 + 23) & 0xFFFFFFFFFFFFFFF8LL);
                                    *uint64_t v136 = *v137;
                                    v138 = v136[1];
                                    v136[1] = v137[1];
                                    swift_bridgeObjectRelease(v138);
LABEL_159:
                                    size_t v57 = v215;
                                    uint64_t v58 = v216;
                                    BOOL v56 = v204;
                                    size_t v55 = v205;
LABEL_160:
                                    v139 = v22;
                                    goto LABEL_161;
                                  }
                                }

                                else
                                {
                                  if (!v120)
                                  {
                                    (*(void (**)(void *, const void *, uint64_t))(v103 + 40))(v117, v118, v4);
                                    goto LABEL_158;
                                  }

                                  (*(void (**)(void *, uint64_t))(v103 + 8))(v117, v4);
                                }

                                memcpy(v117, v118, v21);
                                goto LABEL_158;
                              }

                              (*(void (**)(void *, uint64_t))(v103 + 8))(v113, v4);
                            }

                            memcpy(v113, v114, v21);
                            goto LABEL_152;
                          }

                          (*(void (**)(void *, uint64_t))(v103 + 8))(v109, v4);
                        }

                        memcpy(v109, v110, v21);
                        goto LABEL_146;
                      }

                      (*(void (**)(void *, uint64_t))(v5 + 8))(v95, v4);
                    }

                    memcpy(v95, v96, v21);
                    goto LABEL_121;
                  }

                  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v88, v4);
                }

                memcpy(v88, v89, v21);
                goto LABEL_115;
              }

              (*(void (**)(void *, uint64_t))(v5 + 8))(v84, v4);
            }

            memcpy(v84, v85, v21);
            goto LABEL_109;
          }

          (*(void (**)(void *, uint64_t))(v5 + 8))(v80, v4);
        }

        memcpy(v80, v81, v21);
        goto LABEL_103;
      }

      (*(void (**)(void *, uint64_t))(v5 + 8))(v72, v4);
    }

    memcpy(v72, v73, v21);
    goto LABEL_97;
  }

  if (v19 >= 2)
  {
    size_t v21 = v207;
    uint64_t v22 = v207 + v14;
    unint64_t v23 = v207 + 7;
    unint64_t v24 = v14 + 8;
LABEL_83:
    BOOL v66 = (_DWORD)v10 == 0;
    size_t v67 = (_DWORD)v10 == 0;
    uint64_t v212 = v14 + 24;
    v210 = v21 + v16;
    uint64_t v58 = v216;
    size_t v68 = v216 + v14;
    if (v66) {
      ++v68;
    }
    uint64_t v69 = ((((((((((v21
                  + ((v22
                    + ((v22
                      + ((v68
                        + ((v21
                          + v16
                          + ((v14
                            + 24
                            + ((((v22
                                + ((v22
                                  + ((v24 + ((((v23 + (v22 & v15)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v15)) & v15)) & v15)
                              + v21) & 0xFFFFFFFFFFFFFFF8LL)) & v15)) & v218)) & v15)) & v15)) & v15)
                  + 23) & 0xFFFFFFFFFFFFFFF8LL)
                + 23) & 0xFFFFFFFFFFFFFFF8LL)
              + 23) & 0xFFFFFFFFFFFFFFF8LL)
            + 23) & 0xFFFFFFFFFFFFFFF8LL)
          + 23) & 0xFFFFFFFFFFFFFFF8LL)
        + 16;
    char v70 = v24;
    int v71 = v23;
    memcpy(a1, v17, v69);
    size_t v57 = v67;
    size_t v55 = v71;
    BOOL v56 = v70;
    uint64_t v49 = a3;
    goto LABEL_160;
  }

  __break(1u);
}

  sub_1000617A0();
  *uint64_t v4 = v6;
}

LABEL_78:
  if (sub_10000AB6C((uint64_t)v16, 1LL, v4))
  {
    if (v231) {
      size_t v19 = v224;
    }
    else {
      size_t v19 = v224 + 1;
    }
    memcpy(a1, v16, v19);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, v16, v4);
    sub_10000AB60((uint64_t)a1, 0LL, 1LL, v4);
    if (v231) {
      size_t v19 = v224;
    }
    else {
      size_t v19 = v224 + 1;
    }
  }

  v167 = v16;
  v216 = a1;
  v168 = (void *)(((unint64_t)a1 + v13 + v19) & v14);
  v169 = (const void *)(((unint64_t)v167 + v13 + v19) & v14);
  if (sub_10000AB6C((uint64_t)v169, 1LL, v4))
  {
    memcpy(v168, v169, v19);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v168, v169, v4);
    sub_10000AB60((uint64_t)v168, 0LL, 1LL, v4);
  }

  size_t v222 = v19 + 7;
  v170 = (void *)(((unint64_t)v169 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  v171 = (void *)(((unint64_t)v168 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  void *v171 = *v170;
  v172 = (void *)(((unint64_t)v171 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  v173 = (void *)(((unint64_t)v170 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  void *v172 = *v173;
  v174 = (void *)(((unint64_t)v172 + v13 + 8) & v14);
  v175 = (const void *)(((unint64_t)v173 + v13 + 8) & v14);
  if (sub_10000AB6C((uint64_t)v175, 1LL, v4))
  {
    memcpy(v174, v175, v19);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v174, v175, v4);
    sub_10000AB60((uint64_t)v174, 0LL, 1LL, v4);
  }

  size_t v20 = v19 + v13;
  v176 = (void *)(((unint64_t)v174 + v19 + v13) & v14);
  v177 = (const void *)(((unint64_t)v175 + v19 + v13) & v14);
  if (sub_10000AB6C((uint64_t)v177, 1LL, v4))
  {
    memcpy(v176, v177, v19);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v176, v177, v4);
    sub_10000AB60((uint64_t)v176, 0LL, 1LL, v4);
  }

  v178 = (void *)(((unint64_t)v176 + v20) & v14);
  v179 = (const void *)(((unint64_t)v177 + v20) & v14);
  if (sub_10000AB6C((uint64_t)v179, 1LL, v4))
  {
    memcpy(v178, v179, v19);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v178, v179, v4);
    sub_10000AB60((uint64_t)v178, 0LL, 1LL, v4);
  }

  *((_BYTE *)v178 + v19) = *((_BYTE *)v179 + v19);
  unint64_t v180 = ((unint64_t)v178 + v19) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v181 = ((unint64_t)v179 + v19) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)(v180 + 8) = *(void *)(v181 + 8);
  uint64_t v182 = *(void *)(v181 + 16);
  *(void *)(v180 + 1sub_100006E64(v0 + 6) = v182;
  v183 = (void *)((v13 + 24 + v180) & v14);
  uint64_t v230 = v13 + 24;
  v184 = (const void *)((v13 + 24 + v181) & v14);
  swift_bridgeObjectRetain(v182);
  if (sub_10000AB6C((uint64_t)v184, 1LL, v4))
  {
    memcpy(v183, v184, v19);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v183, v184, v4);
    sub_10000AB60((uint64_t)v183, 0LL, 1LL, v4);
  }

  uint64_t v213 = v5;
  v185 = (void *)(((unint64_t)v183 + v19 + v227) & v236);
  size_t v229 = v19 + v227;
  v186 = (const void *)(((unint64_t)v184 + v229) & v236);
  uint64_t v221 = v13 + 8;
  if (sub_10000AB6C((uint64_t)v186, 1LL, v232))
  {
    BOOL v233 = (_DWORD)v9 == 0;
    if ((_DWORD)v9) {
      size_t v187 = v234;
    }
    else {
      size_t v187 = v234 + 1;
    }
    memcpy(v185, v186, v187);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v214 + 16))(v185, v186, v232);
    sub_10000AB60((uint64_t)v185, 0LL, 1LL, v232);
    BOOL v233 = (_DWORD)v9 == 0;
    if ((_DWORD)v9) {
      size_t v187 = v234;
    }
    else {
      size_t v187 = v234 + 1;
    }
  }

  size_t v188 = v187 + v13;
  v189 = (void *)(((unint64_t)v185 + v187 + v13) & v14);
  v190 = (const void *)(((unint64_t)v186 + v188) & v14);
  if (sub_10000AB6C((uint64_t)v190, 1LL, v4))
  {
    memcpy(v189, v190, v19);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v213 + 16))(v189, v190, v4);
    sub_10000AB60((uint64_t)v189, 0LL, 1LL, v4);
  }

  a1 = v216;
  v191 = (void *)(((unint64_t)v189 + v20) & v14);
  v192 = (const void *)(((unint64_t)v190 + v20) & v14);
  if (sub_10000AB6C((uint64_t)v192, 1LL, v4))
  {
    memcpy(v191, v192, v19);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v213 + 16))(v191, v192, v4);
    sub_10000AB60((uint64_t)v191, 0LL, 1LL, v4);
  }

  v193 = (void *)(((unint64_t)v191 + v20) & v14);
  v194 = (const void *)(((unint64_t)v192 + v20) & v14);
  if (sub_10000AB6C((uint64_t)v194, 1LL, v4))
  {
    memcpy(v193, v194, v19);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v213 + 16))(v193, v194, v4);
    sub_10000AB60((uint64_t)v193, 0LL, 1LL, v4);
  }

  unint64_t v195 = ((unint64_t)v193 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v196 = ((unint64_t)v194 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v197 = *(void *)v196;
  *(_BYTE *)(v195 + 8) = *(_BYTE *)(v196 + 8);
  *(void *)unint64_t v195 = v197;
  v198 = (void *)(((unint64_t)v193 + v19 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  v199 = (void *)(((unint64_t)v194 + v19 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  void *v198 = *v199;
  uint64_t v200 = v199[1];
  v198[1] = v200;
  v201 = (void *)(((unint64_t)v198 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  v202 = (void *)(((unint64_t)v199 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  void *v201 = *v202;
  uint64_t v203 = v202[1];
  v201[1] = v203;
  v204 = (void *)(((unint64_t)v201 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  v205 = (void *)(((unint64_t)v202 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  void *v204 = *v205;
  uint64_t v206 = v205[1];
  v204[1] = v206;
  v207 = (void *)(((unint64_t)v204 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  v208 = (void *)(((unint64_t)v205 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  void *v207 = *v208;
  uint64_t v209 = v208[1];
  v207[1] = v209;
  v210 = (void *)(((unint64_t)v207 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  v211 = (void *)(((unint64_t)v208 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  void *v210 = *v211;
  uint64_t v212 = v211[1];
  v210[1] = v212;
  swift_bridgeObjectRetain(v200);
  swift_bridgeObjectRetain(v203);
  swift_bridgeObjectRetain(v206);
  swift_bridgeObjectRetain(v209);
  swift_bridgeObjectRetain(v212);
  if (!v231)
  {
    uint64_t v48 = a3;
    size_t v16 = (const void *)a2;
    goto LABEL_159;
  }

  uint64_t v48 = a3;
  size_t v142 = v224 + v13;
  size_t v16 = (const void *)a2;
  BOOL v56 = v233;
  size_t v57 = v234;
  uint64_t v22 = v13 + 8;
  size_t v55 = v19 + 7;
LABEL_161:
  unint64_t v143 = (((((((((v19
                + ((v20
                  + ((v20
                    + ((v57
                      + v13
                      + v56
                      + ((v229
                        + ((v230
                          + ((((v20
                              + ((v20
                                + ((v22 + ((((v55 + (v142 & v14)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v14)) & v14)) & v14)
                            + v19) & 0xFFFFFFFFFFFFFFF8LL)) & v14)) & v236)) & v14)) & v14)) & v14)
                + 23) & 0xFFFFFFFFFFFFFFF8LL)
              + 23) & 0xFFFFFFFFFFFFFFF8LL)
            + 23) & 0xFFFFFFFFFFFFFFF8LL)
          + 23) & 0xFFFFFFFFFFFFFFF8LL)
        + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v144 = type metadata accessor for URLRequest(0LL);
  uint64_t v145 = *(void *)(v144 - 8);
  uint64_t v146 = *(unsigned __int8 *)(v145 + 80);
  uint64_t v147 = v143 + v146 + 16;
  unint64_t v148 = ((unint64_t)a1 + v147) & ~v146;
  unint64_t v149 = ((unint64_t)v16 + v147) & ~v146;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v145 + 24))(v148, v149, v144);
  uint64_t v150 = *(void *)(v145 + 64) + 7LL;
  v151 = (void **)((v150 + v148) & 0xFFFFFFFFFFFFFFF8LL);
  v152 = (void **)((v150 + v149) & 0xFFFFFFFFFFFFFFF8LL);
  v153 = *v152;
  v154 = *v151;
  *v151 = *v152;
  id v155 = v153;

  v156 = (uint64_t *)(((unint64_t)v151 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v157 = ((unint64_t)v152 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v158 = v156[1];
  uint64_t v159 = *(void *)(v157 + 8);
  uint64_t v160 = v159 & 0x3000000000000000LL;
  if ((v158 & 0x3000000000000000LL) == 0)
  {
    if (!v160)
    {
      uint64_t v164 = *(void *)v157;
      sub_10000B210(*(void *)v157, *(void *)(v157 + 8));
      uint64_t v165 = *v156;
      unint64_t v166 = v156[1];
      uint64_t *v156 = v164;
      v156[1] = v159;
      sub_10000ABB4(v165, v166);
      goto LABEL_167;
    }

    sub_10000ABB4(*v156, v158);
    goto LABEL_166;
  }

  if (v160)
  {
LABEL_166:
    *(_OWORD *)v156 = *(_OWORD *)v157;
    goto LABEL_167;
  }

  uint64_t v161 = *(void *)v157;
  sub_10000B210(*(void *)v157, *(void *)(v157 + 8));
  uint64_t *v156 = v161;
  v156[1] = v159;
LABEL_167:
  uint64_t v162 = *(void *)(*(void *)(v48 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v162 + 24))( ((unint64_t)v156 + *(unsigned __int8 *)(v162 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80),  (v157 + *(unsigned __int8 *)(v162 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
  return a1;
}

  if (sub_10000AB6C((uint64_t)v17, 1LL, v4))
  {
    if (v213) {
      size_t v21 = v207;
    }
    else {
      size_t v21 = v207 + 1;
    }
    memcpy(a1, v17, v21);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, v17, v4);
    sub_10000AB60((uint64_t)a1, 0LL, 1LL, v4);
    if (v213) {
      size_t v21 = v207;
    }
    else {
      size_t v21 = v207 + 1;
    }
  }

  unint64_t v158 = v17;
  v199 = a1;
  uint64_t v159 = (void *)(((unint64_t)a1 + v14 + v21) & v15);
  uint64_t v160 = (const void *)(((unint64_t)v158 + v14 + v21) & v15);
  if (sub_10000AB6C((uint64_t)v160, 1LL, v4))
  {
    memcpy(v159, v160, v21);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v159, v160, v4);
    sub_10000AB60((uint64_t)v159, 0LL, 1LL, v4);
  }

  v205 = v21 + 7;
  uint64_t v161 = (void *)(((unint64_t)v160 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v162 = (void *)(((unint64_t)v159 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v162 = *v161;
  v163 = (void *)(((unint64_t)v162 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v164 = (void *)(((unint64_t)v161 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *v163 = *v164;
  uint64_t v165 = (void *)(((unint64_t)v163 + v14 + 8) & v15);
  unint64_t v166 = (const void *)(((unint64_t)v164 + v14 + 8) & v15);
  if (sub_10000AB6C((uint64_t)v166, 1LL, v4))
  {
    memcpy(v165, v166, v21);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v165, v166, v4);
    sub_10000AB60((uint64_t)v165, 0LL, 1LL, v4);
  }

  uint64_t v22 = v21 + v14;
  v167 = (void *)(((unint64_t)v165 + v21 + v14) & v15);
  v168 = (const void *)(((unint64_t)v166 + v21 + v14) & v15);
  if (sub_10000AB6C((uint64_t)v168, 1LL, v4))
  {
    memcpy(v167, v168, v21);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v167, v168, v4);
    sub_10000AB60((uint64_t)v167, 0LL, 1LL, v4);
  }

  v169 = (void *)(((unint64_t)v167 + v22) & v15);
  v170 = (const void *)(((unint64_t)v168 + v22) & v15);
  if (sub_10000AB6C((uint64_t)v170, 1LL, v4))
  {
    memcpy(v169, v170, v21);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v169, v170, v4);
    sub_10000AB60((uint64_t)v169, 0LL, 1LL, v4);
  }

  *((_BYTE *)v169 + v21) = *((_BYTE *)v170 + v21);
  v171 = ((unint64_t)v169 + v21) & 0xFFFFFFFFFFFFFFF8LL;
  v172 = ((unint64_t)v170 + v21) & 0xFFFFFFFFFFFFFFF8LL;
  *(_OWORD *)(v171 + 8) = *(_OWORD *)(v172 + 8);
  v173 = (void *)((v14 + 24 + v171) & v15);
  uint64_t v212 = v14 + 24;
  v174 = (const void *)((v14 + 24 + v172) & v15);
  if (sub_10000AB6C((uint64_t)v174, 1LL, v4))
  {
    memcpy(v173, v174, v21);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v173, v174, v4);
    sub_10000AB60((uint64_t)v173, 0LL, 1LL, v4);
  }

  v204 = v14 + 8;
  v175 = (void *)(((unint64_t)v173 + v21 + v16) & v218);
  v210 = v21 + v16;
  v176 = (const void *)(((unint64_t)v174 + v21 + v16) & v218);
  unint64_t v196 = v5;
  if (sub_10000AB6C((uint64_t)v176, 1LL, v214))
  {
    v215 = (_DWORD)v10 == 0;
    if ((_DWORD)v10) {
      v177 = v216;
    }
    else {
      v177 = v216 + 1;
    }
    memcpy(v175, v176, v177);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v197 + 32))(v175, v176, v214);
    sub_10000AB60((uint64_t)v175, 0LL, 1LL, v214);
    v215 = (_DWORD)v10 == 0;
    if ((_DWORD)v10) {
      v177 = v216;
    }
    else {
      v177 = v216 + 1;
    }
  }

  v178 = v177 + v14;
  v179 = (void *)(((unint64_t)v175 + v177 + v14) & v15);
  unint64_t v180 = (const void *)(((unint64_t)v176 + v178) & v15);
  if (sub_10000AB6C((uint64_t)v180, 1LL, v4))
  {
    memcpy(v179, v180, v21);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v196 + 32))(v179, v180, v4);
    sub_10000AB60((uint64_t)v179, 0LL, 1LL, v4);
  }

  a1 = v199;
  unsigned int v17 = (const void *)a2;
  unint64_t v181 = (void *)(((unint64_t)v179 + v22) & v15);
  uint64_t v182 = (const void *)(((unint64_t)v180 + v22) & v15);
  if (sub_10000AB6C((uint64_t)v182, 1LL, v4))
  {
    memcpy(v181, v182, v21);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v196 + 32))(v181, v182, v4);
    sub_10000AB60((uint64_t)v181, 0LL, 1LL, v4);
  }

  v183 = (void *)(((unint64_t)v181 + v22) & v15);
  v184 = (const void *)(((unint64_t)v182 + v22) & v15);
  if (sub_10000AB6C((uint64_t)v184, 1LL, v4))
  {
    memcpy(v183, v184, v21);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v196 + 32))(v183, v184, v4);
    sub_10000AB60((uint64_t)v183, 0LL, 1LL, v4);
  }

  v185 = ((unint64_t)v183 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  v186 = ((unint64_t)v184 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  size_t v187 = *(void *)v186;
  *(_BYTE *)(v185 + 8) = *(_BYTE *)(v186 + 8);
  *(void *)v185 = v187;
  size_t v188 = (_OWORD *)(((unint64_t)v183 + v21 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  v189 = (_OWORD *)(((unint64_t)v184 + v21 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *size_t v188 = *v189;
  v190 = (_OWORD *)(((unint64_t)v188 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  v191 = (_OWORD *)(((unint64_t)v189 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  const void *v190 = *v191;
  v192 = (_OWORD *)(((unint64_t)v190 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  v193 = (_OWORD *)(((unint64_t)v191 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  const void *v192 = *v193;
  v194 = (_OWORD *)(((unint64_t)v192 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v195 = (_OWORD *)(((unint64_t)v193 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  const void *v194 = *v195;
  *(_OWORD *)(((unint64_t)v194 + 23) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)(((unint64_t)v195 + 23) & 0xFFFFFFFFFFFFF8LL);
  if (!v213)
  {
    uint64_t v49 = a3;
    goto LABEL_159;
  }

  uint64_t v49 = a3;
  v139 = v207 + v14;
  size_t v57 = v215;
  uint64_t v58 = v216;
  BOOL v56 = v14 + 8;
  size_t v55 = v21 + 7;
LABEL_161:
  uint64_t v140 = (((((((((v21
                + ((v22
                  + ((v22
                    + ((v58
                      + v14
                      + v57
                      + ((v210
                        + ((v212
                          + ((((v22
                              + ((v22
                                + ((v56 + ((((v55 + (v139 & v15)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v15)) & v15)) & v15)
                            + v21) & 0xFFFFFFFFFFFFFFF8LL)) & v15)) & v218)) & v15)) & v15)) & v15)
                + 23) & 0xFFFFFFFFFFFFFFF8LL)
              + 23) & 0xFFFFFFFFFFFFFFF8LL)
            + 23) & 0xFFFFFFFFFFFFFFF8LL)
          + 23) & 0xFFFFFFFFFFFFFFF8LL)
        + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v141 = type metadata accessor for URLRequest(0LL);
  size_t v142 = *(void *)(v141 - 8);
  unint64_t v143 = *(unsigned __int8 *)(v142 + 80);
  uint64_t v144 = v140 + v143 + 16;
  uint64_t v145 = ((unint64_t)a1 + v144) & ~v143;
  uint64_t v146 = ((unint64_t)v17 + v144) & ~v143;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v142 + 40))(v145, v146, v141);
  uint64_t v147 = *(void *)(v142 + 64) + 7LL;
  unint64_t v148 = (void **)((v147 + v145) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v149 = (void **)((v147 + v146) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v150 = *v148;
  *unint64_t v148 = *v149;

  v151 = (uint64_t *)(((unint64_t)v148 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  v152 = (uint64_t *)(((unint64_t)v149 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  v153 = v151[1];
  if ((v153 & 0x3000000000000000LL) == 0)
  {
    v154 = v152[1];
    if ((v154 & 0x3000000000000000LL) == 0)
    {
      unint64_t v157 = *v151;
      *v151 = *v152;
      v151[1] = v154;
      sub_10000ABB4(v157, v153);
      goto LABEL_165;
    }

    sub_10000ABB4(*v151, v153);
  }

  *(_OWORD *)v151 = *(_OWORD *)v152;
LABEL_165:
  id v155 = *(void *)(*(void *)(v49 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v155 + 40))( ((unint64_t)v151 + *(unsigned __int8 *)(v155 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80),  ((unint64_t)v152 + *(unsigned __int8 *)(v155 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80));
  return a1;
}

void *sub_10001CB34(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  unsigned int v12 = v11 - 1;
  if (!(_DWORD)v11) {
    unsigned int v12 = 0;
  }
  if (v8 > v12) {
    unsigned int v12 = v8;
  }
  if (v12 <= 0x7FFFFFFE) {
    int v13 = 2147483646;
  }
  else {
    int v13 = v12;
  }
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = ~v14;
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v103 = ~v16;
  uint64_t v92 = *(void *)(v9 - 8);
  size_t v102 = *(void *)(v10 + 64);
  uint64_t v96 = v9;
  uint64_t v98 = a2;
  unsigned int v101 = v7;
  size_t v100 = *(void *)(v6 + 64);
  if (v8 == v13)
  {
    unsigned int v17 = (const void *)a2;
    if (v7 >= 2)
    {
      int v18 = *(_DWORD *)(v10 + 84);
      unsigned int v19 = sub_10000AB6C(a2, v101, v5);
      LODWORD(vsub_100006E64(v0 + 11) = v18;
      if (v19 >= 2)
      {
        size_t v20 = v100;
        size_t v21 = v100 + v14;
        size_t v22 = v100 + 7;
        uint64_t v23 = v14 + 8;
LABEL_30:
        uint64_t v28 = v16;
        BOOL v29 = (_DWORD)v11 == 0;
        uint64_t v30 = v14 + 24;
        int v31 = v17;
        size_t v32 = v20 + v28;
        unint64_t v33 = (v20
             + v28
             + ((v14
               + 24
               + ((((v21
                   + ((v21 + ((v23 + ((((v22 + (v21 & v15)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v15)) & v15)) & v15)
                 + v20) & 0xFFFFFFFFFFFFFFF8LL)) & v15)) & v103;
        size_t v34 = v102 + v14;
        if (!(_DWORD)v11) {
          ++v34;
        }
        size_t v35 = v22;
        uint64_t v36 = v23;
        memcpy( a1,  v31,  ((((((((((v20 + ((v21 + ((v21 + ((v34 + v33) & v15)) & v15)) & v15) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
              + 23) & 0xFFFFFFFFFFFFFFF8LL)
            + 23) & 0xFFFFFFFFFFFFFFF8LL)
          + 23) & 0xFFFFFFFFFFFFFFF8LL)
        + 16);
        BOOL v37 = v29;
        uint64_t v38 = v36;
        size_t v39 = v35;
        size_t v40 = v21;
        goto LABEL_72;
      }
    }
  }

  else
  {
    if (v7) {
      size_t v20 = *(void *)(v6 + 64);
    }
    else {
      size_t v20 = *(void *)(v6 + 64) + 1LL;
    }
    size_t v21 = v20 + v14;
    size_t v22 = v20 + 7;
    uint64_t v23 = v14 + 8;
    unint64_t v24 = (((v20
           + v14
           + ((v20
             + v14
             + ((v14 + 8 + ((((v20 + 7 + ((v20 + v14 + a2) & v15)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v15)) & v15)) & v15)
         + v20) & 0xFFFFFFFFFFFFFFF8LL;
    unsigned int v17 = (const void *)a2;
    if (v12 > 0x7FFFFFFE)
    {
      if (v11 >= 2)
      {
        int v26 = *(_DWORD *)(v10 + 84);
        unsigned int v27 = sub_10000AB6C((v20 + v16 + ((v14 + v24 + 24) & v15)) & v103, v11, v9);
        LODWORD(vsub_100006E64(v0 + 11) = v26;
        uint64_t v23 = v14 + 8;
        size_t v22 = v20 + 7;
        if (v27 > 1) {
          goto LABEL_30;
        }
      }
    }

    else
    {
      unint64_t v25 = *(void *)(v24 + 16);
      if (v25 >= 0xFFFFFFFF) {
        LODWORD(v2sub_100006E64(v0 + 5) = -1;
      }
    }
  }

  int v93 = v11;
  if (sub_10000AB6C((uint64_t)v17, 1LL, v5))
  {
    if (v101) {
      size_t v20 = v100;
    }
    else {
      size_t v20 = v100 + 1;
    }
    memcpy(a1, v17, v20);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, v17, v5);
    sub_10000AB60((uint64_t)a1, 0LL, 1LL, v5);
    if (v101) {
      size_t v20 = v100;
    }
    else {
      size_t v20 = v100 + 1;
    }
  }

  size_t v94 = a1;
  uint64_t v41 = (void *)(((unint64_t)a1 + v14 + v20) & v15);
  uint64_t v42 = (const void *)(((unint64_t)v17 + v14 + v20) & v15);
  if (sub_10000AB6C((uint64_t)v42, 1LL, v5))
  {
    memcpy(v41, v42, v20);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v41, v42, v5);
    sub_10000AB60((uint64_t)v41, 0LL, 1LL, v5);
  }

  uint64_t v43 = (void *)(((unint64_t)v42 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  size_t v44 = (void *)(((unint64_t)v41 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  void *v44 = *v43;
  uint64_t v45 = (void *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v46 = (void *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v45 = *v46;
  uint64_t v47 = (void *)(((unint64_t)v45 + v14 + 8) & v15);
  uint64_t v48 = (const void *)(((unint64_t)v46 + v14 + 8) & v15);
  if (sub_10000AB6C((uint64_t)v48, 1LL, v5))
  {
    memcpy(v47, v48, v20);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v47, v48, v5);
    sub_10000AB60((uint64_t)v47, 0LL, 1LL, v5);
  }

  size_t v40 = v20 + v14;
  uint64_t v49 = (void *)(((unint64_t)v47 + v20 + v14) & v15);
  unint64_t v50 = (const void *)(((unint64_t)v48 + v20 + v14) & v15);
  if (sub_10000AB6C((uint64_t)v50, 1LL, v5))
  {
    memcpy(v49, v50, v20);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v49, v50, v5);
    sub_10000AB60((uint64_t)v49, 0LL, 1LL, v5);
  }

  unint64_t v51 = (void *)(((unint64_t)v49 + v40) & v15);
  unint64_t v52 = (const void *)(((unint64_t)v50 + v40) & v15);
  if (sub_10000AB6C((uint64_t)v52, 1LL, v5))
  {
    memcpy(v51, v52, v20);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v51, v52, v5);
    sub_10000AB60((uint64_t)v51, 0LL, 1LL, v5);
  }

  *((_BYTE *)v51 + v20) = *((_BYTE *)v52 + v20);
  unint64_t v53 = ((unint64_t)v51 + v20) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v54 = ((unint64_t)v52 + v20) & 0xFFFFFFFFFFFFFFF8LL;
  *(_OWORD *)(v53 + 8) = *(_OWORD *)(v54 + 8);
  size_t v55 = (void *)((v14 + 24 + v53) & v15);
  BOOL v56 = (const void *)((v14 + 24 + v54) & v15);
  if (sub_10000AB6C((uint64_t)v56, 1LL, v5))
  {
    memcpy(v55, v56, v20);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v55, v56, v5);
    sub_10000AB60((uint64_t)v55, 0LL, 1LL, v5);
  }

  size_t v32 = v20 + v16;
  size_t v57 = (void *)(((unint64_t)v55 + v20 + v16) & v103);
  uint64_t v58 = (const void *)(((unint64_t)v56 + v20 + v16) & v103);
  uint64_t v95 = v6;
  if (sub_10000AB6C((uint64_t)v58, 1LL, v96))
  {
    BOOL v97 = v93 == 0;
    if (v93) {
      size_t v59 = v102;
    }
    else {
      size_t v59 = v102 + 1;
    }
    memcpy(v57, v58, v59);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v92 + 32))(v57, v58, v96);
    sub_10000AB60((uint64_t)v57, 0LL, 1LL, v96);
    BOOL v97 = v93 == 0;
    if (v93) {
      size_t v59 = v102;
    }
    else {
      size_t v59 = v102 + 1;
    }
  }

  size_t v60 = v59 + v14;
  uint64_t v61 = (void *)(((unint64_t)v57 + v59 + v14) & v15);
  uint64_t v62 = (const void *)(((unint64_t)v58 + v60) & v15);
  if (sub_10000AB6C((uint64_t)v62, 1LL, v5))
  {
    memcpy(v61, v62, v20);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v95 + 32))(v61, v62, v5);
    sub_10000AB60((uint64_t)v61, 0LL, 1LL, v5);
  }

  a1 = v94;
  size_t v63 = (void *)(((unint64_t)v61 + v40) & v15);
  unsigned int v64 = (const void *)(((unint64_t)v62 + v40) & v15);
  if (sub_10000AB6C((uint64_t)v64, 1LL, v5))
  {
    memcpy(v63, v64, v20);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v95 + 32))(v63, v64, v5);
    sub_10000AB60((uint64_t)v63, 0LL, 1LL, v5);
  }

  BOOL v65 = (void *)(((unint64_t)v63 + v40) & v15);
  BOOL v66 = (const void *)(((unint64_t)v64 + v40) & v15);
  if (sub_10000AB6C((uint64_t)v66, 1LL, v5))
  {
    memcpy(v65, v66, v20);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v95 + 32))(v65, v66, v5);
    sub_10000AB60((uint64_t)v65, 0LL, 1LL, v5);
  }

  size_t v39 = v20 + 7;
  uint64_t v38 = v14 + 8;
  BOOL v37 = v97;
  unint64_t v67 = ((unint64_t)v65 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v68 = ((unint64_t)v66 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v69 = *(void *)v68;
  *(_BYTE *)(v67 + 8) = *(_BYTE *)(v68 + 8);
  *(void *)unint64_t v67 = v69;
  char v70 = (_OWORD *)(((unint64_t)v65 + v20 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  int v71 = (_OWORD *)(((unint64_t)v66 + v20 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *char v70 = *v71;
  int v72 = (_OWORD *)(((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v73 = (_OWORD *)(((unint64_t)v71 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *int v72 = *v73;
  uint64_t v74 = (_OWORD *)(((unint64_t)v72 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v75 = (_OWORD *)(((unint64_t)v73 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v74 = *v75;
  uint64_t v76 = (_OWORD *)(((unint64_t)v74 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v77 = (_OWORD *)(((unint64_t)v75 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v76 = *v77;
  *(_OWORD *)(((unint64_t)v76 + 23) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)(((unint64_t)v77 + 23) & 0xFFFFFFFFFFFFF8LL);
  if (v101) {
    size_t v21 = v100 + v14;
  }
  else {
    size_t v21 = v20 + v14;
  }
  uint64_t v30 = v14 + 24;
LABEL_72:
  unint64_t v78 = (((((((((v20
               + ((v40
                 + ((v40
                   + ((v102
                     + v14
                     + v37
                     + ((v32
                       + ((v30
                         + ((((v40
                             + ((v40
                               + ((v38 + ((((v39 + (v21 & v15)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v15)) & v15)) & v15)
                           + v20) & 0xFFFFFFFFFFFFFFF8LL)) & v15)) & v103)) & v15)) & v15)) & v15)
               + 23) & 0xFFFFFFFFFFFFFFF8LL)
             + 23) & 0xFFFFFFFFFFFFFFF8LL)
           + 23) & 0xFFFFFFFFFFFFFFF8LL)
         + 23) & 0xFFFFFFFFFFFFFFF8LL)
       + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = type metadata accessor for URLRequest(0LL);
  uint64_t v80 = *(void *)(v79 - 8);
  uint64_t v81 = *(unsigned __int8 *)(v80 + 80);
  uint64_t v82 = v78 + v81 + 16;
  unint64_t v83 = ((unint64_t)a1 + v82) & ~v81;
  uint64_t v84 = (v82 + v98) & ~v81;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v80 + 32))(v83, v84, v79);
  uint64_t v85 = *(void *)(v80 + 64) + 7LL;
  unint64_t v86 = (void *)((v85 + v83) & 0xFFFFFFFFFFFFFFF8LL);
  int v87 = (void *)((v85 + v84) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v86 = *v87;
  int v88 = (_OWORD *)(((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v89 = (_OWORD *)(((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *int v88 = *v89;
  uint64_t v90 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v90 + 32))( ((unint64_t)v88 + *(unsigned __int8 *)(v90 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80),  ((unint64_t)v89 + *(unsigned __int8 *)(v90 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
  return a1;
}

void *sub_10001D45C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  unsigned int v11 = v10 - 1;
  if (!(_DWORD)v10) {
    unsigned int v11 = 0;
  }
  if (v7 <= v11) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = v7;
  }
  if (v12 <= 0x7FFFFFFE) {
    int v13 = 2147483646;
  }
  else {
    int v13 = v12;
  }
  uint64_t v14 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = ~v14;
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v218 = ~v16;
  uint64_t v197 = *(void *)(v8 - 8);
  uint64_t v214 = v8;
  size_t v216 = *(void *)(v9 + 64);
  unsigned int v213 = v6;
  size_t v207 = *(void *)(v5 + 64);
  if (v7 != v13)
  {
    uint64_t v20 = v8;
    if (v6) {
      size_t v21 = *(void *)(v5 + 64);
    }
    else {
      size_t v21 = *(void *)(v5 + 64) + 1LL;
    }
    size_t v22 = v21 + v14;
    size_t v23 = v21 + 7;
    uint64_t v24 = v14 + 8;
    unint64_t v25 = (((v21
           + v14
           + ((v21
             + v14
             + ((v14
               + 8
    if (v12 > 0x7FFFFFFE)
    {
      if (v10 >= 2)
      {
        unsigned int v27 = sub_10000AB6C((v21 + v16 + ((v14 + v25 + 24) & v15)) & v218, v10, v8);
        size_t v23 = v21 + 7;
        uint64_t v20 = v214;
        uint64_t v24 = v14 + 8;
        uint64_t v10 = v10;
        if (v27 >= 2) {
          goto LABEL_32;
        }
      }
    }

    else
    {
      unint64_t v26 = *(void *)(v25 + 16);
      if (v26 >= 0xFFFFFFFF) {
        LODWORD(v2sub_100006E64(v0 + 6) = -1;
      }
      if ((v26 + 1) >= 2)
      {
LABEL_32:
        unint64_t v30 = (((v22
               + ((v22
                 + ((v24 + ((((v23 + ((v21 + a2 + v14) & v15)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v15)) & v15)) & v15)
             + v21) & 0xFFFFFFFFFFFFFFF8LL;
        if (v12 > 0x7FFFFFFE)
        {
          unsigned int v17 = (const void *)a2;
          if (v10 >= 2)
          {
            uint64_t v59 = (v21 + v16 + ((v14 + v30 + 24) & v15)) & v218;
            uint64_t v60 = v10;
            int v202 = v10;
            uint64_t v10 = (uint64_t)a1;
            uint64_t v61 = v24;
            uint64_t v211 = v16;
            uint64_t v62 = v14;
            uint64_t v63 = v5;
            size_t v64 = v23;
            unsigned int v65 = sub_10000AB6C(v59, v60, v20);
            size_t v23 = v64;
            uint64_t v5 = v63;
            uint64_t v14 = v62;
            uint64_t v16 = v211;
            uint64_t v24 = v61;
            a1 = (void *)v10;
            LODWORD(v10) = v202;
            if (v65 > 1) {
              goto LABEL_83;
            }
          }
        }

        else
        {
          unint64_t v31 = *(void *)(v30 + 16);
          if (v31 >= 0xFFFFFFFF) {
            LODWORD(v31) = -1;
          }
          unsigned int v17 = (const void *)a2;
        }

        goto LABEL_78;
      }
    }

    unint64_t v28 = (((v22
           + ((v22
             + ((v24 + ((((v23 + ((v21 + a2 + v14) & v15)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v15)) & v15)) & v15)
         + v21) & 0xFFFFFFFFFFFFFFF8LL;
    if (v12 > 0x7FFFFFFE)
    {
      unsigned int v17 = (const void *)a2;
      if (v10 >= 2
        && sub_10000AB6C((v21 + v16 + ((v14 + v28 + 24) & v15)) & v218, v10, v20) > 1)
      {
        goto LABEL_48;
      }
    }

    else
    {
      unint64_t v29 = *(void *)(v28 + 16);
      if (v29 >= 0xFFFFFFFF) {
        LODWORD(v29) = -1;
      }
      unsigned int v17 = (const void *)a2;
    }

    goto LABEL_39;
  }

  unsigned int v17 = (const void *)a2;
  if (v6 < 2) {
    goto LABEL_39;
  }
  unsigned int v18 = sub_10000AB6C((uint64_t)a1, v6, v4);
  unsigned int v19 = sub_10000AB6C(a2, v213, v4);
  if (v18 < 2)
  {
    if (v19 >= 2)
    {
LABEL_48:
      int v201 = v10;
      if (v213) {
        size_t v21 = v207;
      }
      else {
        size_t v21 = v207 + 1;
      }
      uint64_t v37 = ((unint64_t)a1 + v14 + v21) & v15;
      unint64_t v38 = (v14 + 8 + ((((v21 + 7 + v37) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v15;
      size_t v22 = v21 + v14;
      uint64_t v39 = (v21 + v14 + v38) & v15;
      uint64_t v40 = (v22 + v39) & v15;
      unint64_t v41 = (v40 + v21) & 0xFFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRelease(*(void *)(v41 + 16));
      uint64_t v208 = v14;
      uint64_t v212 = v14 + 24;
      uint64_t v42 = (v14 + 24 + v41) & v15;
      uint64_t v203 = v14 + 8;
      uint64_t v43 = v5;
      size_t v210 = v21 + v16;
      uint64_t v44 = (v21 + v16 + v42) & v218;
      size_t v45 = v216;
      if (!v201) {
        size_t v45 = v216 + 1;
      }
      uint64_t v46 = v45 + v208;
      uint64_t v47 = (v45 + v208 + v44) & v15;
      uint64_t v48 = (v22 + v47) & v15;
      uint64_t v49 = a3;
      uint64_t v50 = (v22 + v48) & v15;
      unint64_t v51 = (v21 + 23 + v50) & 0xFFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRelease(*(void *)(v51 + 8));
      unint64_t v52 = (v51 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRelease(*(void *)(v52 + 8));
      unint64_t v53 = (v52 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRelease(*(void *)(v53 + 8));
      unint64_t v54 = (v53 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRelease(*(void *)(v54 + 8));
      swift_bridgeObjectRelease(*(void *)(((v54 + 23) & 0xFFFFFFFFFFFFF8LL) + 8));
      memcpy( a1,  v17,  ((((((((((v21 + 23 + ((v22 + ((v22 + ((v46 + ((v210 + ((v212 + ((((v22 + ((v22 + ((v203 + ((((v21 + 7 + (v22 & v15)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & v15)) & v15)) & v15)
                            + v21) & 0xFFFFFFFFFFFFFFF8LL)) & v15)) & v218)) & v15)) & v15)) & v15)) & 0xFFFFFFFFFFFFFFF8LL)
              + 23) & 0xFFFFFFFFFFFFFFF8LL)
            + 23) & 0xFFFFFFFFFFFFFFF8LL)
          + 23) & 0xFFFFFFFFFFFFFFF8LL)
        + 23) & 0xFFFFFFFFFFFFFFF8LL)
      + 16);
      size_t v55 = v21 + 7;
      uint64_t v56 = v203;
      BOOL v57 = v201 == 0;
      size_t v58 = v216;
      uint64_t v14 = v208;
      goto LABEL_160;
    }

uint64_t sub_10001EB4C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v50 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v50 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  if ((_DWORD)v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v49 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v49 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  unsigned int v10 = v9 - 1;
  if (!(_DWORD)v9) {
    unsigned int v10 = 0;
  }
  if (v7 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = v7;
  }
  if (v11 <= 0x7FFFFFFE) {
    int v12 = 2147483646;
  }
  else {
    int v12 = v11;
  }
  int v51 = v12;
  unsigned int v13 = v12 - 1;
  uint64_t v14 = type metadata accessor for URLRequest(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int *)(v15 + 84);
  else {
    unsigned int v17 = *(_DWORD *)(v15 + 84);
  }
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int *)(v19 + 84);
  else {
    unsigned int v21 = v17;
  }
  if (v21 <= 0x7FFFFFFE) {
    unsigned int v22 = 2147483646;
  }
  else {
    unsigned int v22 = v21;
  }
  uint64_t v23 = *(void *)(v5 + 64);
  if (!(_DWORD)v6) {
    ++v23;
  }
  if ((_DWORD)v9) {
    uint64_t v24 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v24 = *(void *)(v8 + 64) + 1LL;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v25 = v14;
  uint64_t v26 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v27 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v28 = *(unsigned __int8 *)(v15 + 80);
  unint64_t v29 = ((((((((((v23
                + ((v23
                  + v26
                  + ((v23
                    + v26
                    + ((v24
                      + v26
                      + ((v23
                        + v27
                        + ((v26
                          + 24
                          + ((((v23
                              + v26
                              + ((v23
                                + v26
                                + ((v26
                                  + 8
                                  + ((((v23 + 7 + ((v23 + v26) & ~v26)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & ~v26)) & ~v26)) & ~v26)
                            + v23) & 0xFFFFFFFFFFFFFFF8LL)) & ~v26)) & ~v27)) & ~v26)) & ~v26)) & ~v26)
                + 23) & 0xFFFFFFFFFFFFFFF8LL)
              + 23) & 0xFFFFFFFFFFFFFFF8LL)
            + 23) & 0xFFFFFFFFFFFFFFF8LL)
          + 23) & 0xFFFFFFFFFFFFFFF8LL)
        + 23) & 0xFFFFFFFFFFFFFFF8LL)
      + v28
      + 16;
  uint64_t v30 = *(void *)(v15 + 64) + 7LL;
  uint64_t v31 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v32 = v31 + 16;
  uint64_t v33 = a1;
  if (a2 <= v22) {
    goto LABEL_45;
  }
  unint64_t v34 = ((v32 + ((((v30 + (v29 & ~v28)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & ~v31)
      + *(void *)(v19 + 64);
  char v35 = 8 * v34;
  unsigned int v37 = ((a2 - v22 + ~(-1 << v35)) >> v35) + 1;
  if (HIWORD(v37))
  {
    int v36 = *(_DWORD *)(a1 + v34);
    if (v36) {
      goto LABEL_36;
    }
  }

  else
  {
    if (v37 <= 0xFF)
    {
      if (v37 < 2) {
        goto LABEL_45;
      }
LABEL_29:
      int v36 = *(unsigned __int8 *)(a1 + v34);
      if (!*(_BYTE *)(a1 + v34)) {
        goto LABEL_45;
      }
LABEL_36:
      int v38 = (v36 - 1) << v35;
      if ((_DWORD)v34)
      {
        else {
          int v39 = 4;
        }
        __asm { BR              X12 }
      }

      return v22 + v38 + 1;
    }

    int v36 = *(unsigned __int16 *)(a1 + v34);
    if (*(_WORD *)(a1 + v34)) {
      goto LABEL_36;
    }
  }

LABEL_45:
  if (v13 == v22)
  {
    if (v7 == v51)
    {
      uint64_t v40 = v6;
      uint64_t v41 = v50;
    }

    else
    {
      unint64_t v43 = (((v23
             + v26
             + ((v23
               + v26
               + ((v26
                 + 8
                 + ((((v23 + 7 + ((v23 + v26 + a1) & ~v26)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & ~v26)) & ~v26)) & ~v26)
           + v23) & 0xFFFFFFFFFFFFFFF8LL;
      if (v11 <= 0x7FFFFFFE)
      {
        unint64_t v44 = *(void *)(v43 + 16);
        if (v44 >= 0xFFFFFFFF) {
          LODWORD(v4sub_100006E64(v0 + 4) = -1;
        }
        if ((v44 + 1) >= 2)
        {
LABEL_66:
          uint64_t result = (v44 - 1);
        }

        return 0LL;
      }

      uint64_t v33 = (v23 + v27 + ((v26 + 24 + v43) & ~v26)) & ~v27;
      uint64_t v40 = v9;
      uint64_t v41 = v49;
    }

    unsigned int v47 = sub_10000AB6C(v33, v40, v41);
    if (v47 >= 2)
    {
      LODWORD(v4sub_100006E64(v0 + 4) = v47 - 1;
      goto LABEL_66;
    }

    return 0LL;
  }

  unint64_t v42 = (v29 + a1) & ~v28;
  if ((_DWORD)v16 == v22)
  {
    uint64_t v20 = v16;
    uint64_t v18 = v25;
    return sub_10000AB6C(v42, v20, v18);
  }

  size_t v45 = (unint64_t *)((v30 + v42) & 0xFFFFFFFFFFFFFFF8LL);
  if (v21 > 0x7FFFFFFE)
  {
    unint64_t v42 = (v32 + (((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8LL)) & ~v31;
    return sub_10000AB6C(v42, v20, v18);
  }

  unint64_t v46 = *v45;
  if (v46 >= 0xFFFFFFFF) {
    LODWORD(v4sub_100006E64(v0 + 6) = -1;
  }
  else {
    return 0LL;
  }
}

void sub_10001EF60(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(type metadata accessor for Date(0LL) - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  uint64_t v9 = *(void *)(type metadata accessor for URL(0LL) - 8);
  int v10 = *(_DWORD *)(v9 + 84);
  unsigned int v11 = v10 - 1;
  if (!v10) {
    unsigned int v11 = 0;
  }
  if (v8 <= v11) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = v8;
  }
  if (v12 <= 0x7FFFFFFE) {
    int v13 = 2147483646;
  }
  else {
    int v13 = v12;
  }
  unsigned int v14 = v13 - 1;
  int v36 = 0;
  uint64_t v15 = *(void *)(type metadata accessor for URLRequest(0LL) - 8);
  if (*(_DWORD *)(v15 + 84) <= v14) {
    unsigned int v16 = v14;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v15 + 84);
  }
  uint64_t v17 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (v16 <= *(_DWORD *)(v17 + 84)) {
    unsigned int v18 = *(_DWORD *)(v17 + 84);
  }
  else {
    unsigned int v18 = v16;
  }
  if (v18 <= 0x7FFFFFFE) {
    unsigned int v19 = 2147483646;
  }
  else {
    unsigned int v19 = v18;
  }
  uint64_t v20 = *(void *)(v6 + 64);
  if (!v7) {
    ++v20;
  }
  uint64_t v21 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v23 = *(void *)(v9 + 64);
  if (!v10) {
    ++v23;
  }
  uint64_t v24 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v25 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v22 = *(unsigned __int8 *)(v9 + 80);
  size_t v26 = ((v25
        + 16
        + ((((*(void *)(v15 + 64)
            + 7LL
            + ((((((((((((((v20
                          + v21
                          + ((v20
                            + v21
                            + ((v23
                              + v21
                              + ((v20
                                + v22
                                + ((v21
                                  + 24
                                  + ((((v20
                                      + v21
                                      + ((v20
                                        + v21
                                        + ((v21
                                          + 8
                                          + ((((v20 + 7 + ((v20 + v21) & ~v21)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & ~v21)) & ~v21)) & ~v21)
                                    + v20) & 0xFFFFFFFFFFFFFFF8LL)) & ~v21)) & ~v22)) & ~v21)) & ~v21)) & ~v21)
                        + v20
                        + 23) & 0xFFFFFFFFFFFFFFF8LL)
                      + 23) & 0xFFFFFFFFFFFFFFF8LL)
                    + 23) & 0xFFFFFFFFFFFFFFF8LL)
                  + 23) & 0xFFFFFFFFFFFFFFF8LL)
                + 23) & 0xFFFFFFFFFFFFFFF8LL)
              + v24
              + 16) & ~v24)) & 0xFFFFFFFFFFFFFFF8LL)
          + 15) & 0xFFFFFFFFFFFFFFF8LL)) & ~v25)
      + *(void *)(v17 + 64);
  char v27 = 8 * v26;
  BOOL v28 = a3 >= v19;
  unsigned int v29 = a3 - v19;
  if (v29 != 0 && v28)
  {
    if (v26 <= 3)
    {
      unsigned int v31 = ((v29 + ~(-1 << v27)) >> v27) + 1;
      if (HIWORD(v31))
      {
        int v30 = 4;
      }

      else
      {
        int v30 = v31 > 1;
        if (v31 >= 0x100) {
          int v30 = 2;
        }
      }
    }

    else
    {
      int v30 = 1;
    }

    int v36 = v30;
  }

  if (v19 >= a2) {
    __asm { BR              X28 }
  }

  unsigned int v32 = ~v19 + a2;
  if (v26 < 4)
  {
    if ((_DWORD)v26)
    {
      int v33 = v32 & ~(-1 << v27);
      bzero(a1, v26);
      if ((_DWORD)v26 == 3)
      {
        *(_WORD *)a1 = v33;
        a1[2] = BYTE2(v33);
      }

      else
      {
        if ((_DWORD)v26 != 2)
        {
          int v34 = v36;
          *a1 = v33;
LABEL_44:
          __asm { BR              X10 }
        }

        *(_WORD *)a1 = v33;
      }
    }
  }

  else
  {
    bzero(a1, v26);
    *(_DWORD *)a1 = v32;
  }

  int v34 = v36;
  goto LABEL_44;
}

uint64_t type metadata accessor for ApiResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000D7B0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ApiResponse);
}

uint64_t type metadata accessor for ApiRequestMetrics(uint64_t a1)
{
  uint64_t result = qword_100087DC8;
  if (!qword_100087DC8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApiRequestMetrics);
  }
  return result;
}

uint64_t *sub_10001F4B0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    if (sub_10000AB6C((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_100006BEC(&qword_100088BD0);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      sub_10000AB60((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = a3[5];
    unsigned int v11 = (char *)a1 + v10;
    unsigned int v12 = (char *)a2 + v10;
    if (sub_10000AB6C((uint64_t)a2 + v10, 1LL, v7))
    {
      uint64_t v13 = sub_100006BEC(&qword_100088BD0);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v11, v12, v7);
      sub_10000AB60((uint64_t)v11, 0LL, 1LL, v7);
    }

    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v1sub_100006E64(v0 + 4) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v15 = a3[8];
    unsigned int v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (sub_10000AB6C((uint64_t)a2 + v15, 1LL, v7))
    {
      uint64_t v18 = sub_100006BEC(&qword_100088BD0);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v16, v17, v7);
      sub_10000AB60((uint64_t)v16, 0LL, 1LL, v7);
    }

    uint64_t v19 = a3[9];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    if (sub_10000AB6C((uint64_t)a2 + v19, 1LL, v7))
    {
      uint64_t v22 = sub_100006BEC(&qword_100088BD0);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v20, v21, v7);
      sub_10000AB60((uint64_t)v20, 0LL, 1LL, v7);
    }

    uint64_t v23 = a3[10];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    if (sub_10000AB6C((uint64_t)a2 + v23, 1LL, v7))
    {
      uint64_t v26 = sub_100006BEC(&qword_100088BD0);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v24, v25, v7);
      sub_10000AB60((uint64_t)v24, 0LL, 1LL, v7);
    }

    uint64_t v27 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    BOOL v28 = (uint64_t *)((char *)a1 + v27);
    unsigned int v29 = (uint64_t *)((char *)a2 + v27);
    uint64_t v30 = v29[1];
    *BOOL v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = a3[13];
    unsigned int v32 = (char *)a1 + v31;
    int v33 = (char *)a2 + v31;
    swift_bridgeObjectRetain(v30);
    if (sub_10000AB6C((uint64_t)v33, 1LL, v7))
    {
      uint64_t v34 = sub_100006BEC(&qword_100088BD0);
      memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v32, v33, v7);
      sub_10000AB60((uint64_t)v32, 0LL, 1LL, v7);
    }

    uint64_t v35 = a3[14];
    int v36 = (char *)a1 + v35;
    unsigned int v37 = (char *)a2 + v35;
    uint64_t v38 = type metadata accessor for URL(0LL);
    if (sub_10000AB6C((uint64_t)v37, 1LL, v38))
    {
      uint64_t v39 = sub_100006BEC(&qword_100087368);
      memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16LL))(v36, v37, v38);
      sub_10000AB60((uint64_t)v36, 0LL, 1LL, v38);
    }

    uint64_t v40 = a3[15];
    uint64_t v41 = (char *)a1 + v40;
    unint64_t v42 = (char *)a2 + v40;
    if (sub_10000AB6C((uint64_t)a2 + v40, 1LL, v7))
    {
      uint64_t v43 = sub_100006BEC(&qword_100088BD0);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v41, v42, v7);
      sub_10000AB60((uint64_t)v41, 0LL, 1LL, v7);
    }

    uint64_t v44 = a3[16];
    size_t v45 = (char *)a1 + v44;
    unint64_t v46 = (char *)a2 + v44;
    if (sub_10000AB6C((uint64_t)a2 + v44, 1LL, v7))
    {
      uint64_t v47 = sub_100006BEC(&qword_100088BD0);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v45, v46, v7);
      sub_10000AB60((uint64_t)v45, 0LL, 1LL, v7);
    }

    uint64_t v48 = a3[17];
    uint64_t v49 = (char *)a1 + v48;
    uint64_t v50 = (char *)a2 + v48;
    if (sub_10000AB6C((uint64_t)a2 + v48, 1LL, v7))
    {
      uint64_t v51 = sub_100006BEC(&qword_100088BD0);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v49, v50, v7);
      sub_10000AB60((uint64_t)v49, 0LL, 1LL, v7);
    }

    uint64_t v52 = a3[18];
    uint64_t v53 = a3[19];
    unint64_t v54 = (char *)a1 + v52;
    size_t v55 = (char *)a2 + v52;
    *(void *)unint64_t v54 = *(void *)v55;
    v54[8] = v55[8];
    uint64_t v56 = (uint64_t *)((char *)a1 + v53);
    BOOL v57 = (uint64_t *)((char *)a2 + v53);
    uint64_t v58 = v57[1];
    *uint64_t v56 = *v57;
    v56[1] = v58;
    uint64_t v59 = a3[20];
    uint64_t v60 = a3[21];
    uint64_t v61 = (uint64_t *)((char *)a1 + v59);
    uint64_t v62 = (uint64_t *)((char *)a2 + v59);
    uint64_t v63 = v62[1];
    *uint64_t v61 = *v62;
    v61[1] = v63;
    size_t v64 = (uint64_t *)((char *)a1 + v60);
    unsigned int v65 = (uint64_t *)((char *)a2 + v60);
    uint64_t v66 = v65[1];
    *size_t v64 = *v65;
    v64[1] = v66;
    uint64_t v67 = a3[22];
    uint64_t v68 = a3[23];
    size_t v69 = (uint64_t *)((char *)a1 + v67);
    uint64_t v70 = (uint64_t *)((char *)a2 + v67);
    uint64_t v71 = v70[1];
    *size_t v69 = *v70;
    v69[1] = v71;
    int v72 = (uint64_t *)((char *)a1 + v68);
    uint64_t v73 = (uint64_t *)((char *)a2 + v68);
    uint64_t v74 = v73[1];
    *int v72 = *v73;
    v72[1] = v74;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v74);
  }

  return a1;
}

uint64_t sub_10001FA54(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = a1 + a2[9];
  uint64_t v8 = a1 + a2[10];
  swift_bridgeObjectRelease(*(void *)(a1 + a2[12] + 8));
  uint64_t v9 = a1 + a2[13];
  uint64_t v10 = a1 + a2[14];
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = a1 + a2[15];
  uint64_t v13 = a1 + a2[16];
  uint64_t v14 = a1 + a2[17];
  swift_bridgeObjectRelease(*(void *)(a1 + a2[19] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[20] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[21] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[22] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[23] + 8));
}

char *sub_10001FCD0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  if (sub_10000AB6C((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_100006BEC(&qword_100088BD0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    sub_10000AB60((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (sub_10000AB6C((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_100006BEC(&qword_100088BD0);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v9, v10, v6);
    sub_10000AB60((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[8];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  if (sub_10000AB6C((uint64_t)&a2[v13], 1LL, v6))
  {
    uint64_t v16 = sub_100006BEC(&qword_100088BD0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v14, v15, v6);
    sub_10000AB60((uint64_t)v14, 0LL, 1LL, v6);
  }

  uint64_t v17 = a3[9];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if (sub_10000AB6C((uint64_t)&a2[v17], 1LL, v6))
  {
    uint64_t v20 = sub_100006BEC(&qword_100088BD0);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v18, v19, v6);
    sub_10000AB60((uint64_t)v18, 0LL, 1LL, v6);
  }

  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  if (sub_10000AB6C((uint64_t)&a2[v21], 1LL, v6))
  {
    uint64_t v24 = sub_100006BEC(&qword_100088BD0);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v22, v23, v6);
    sub_10000AB60((uint64_t)v22, 0LL, 1LL, v6);
  }

  uint64_t v25 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)uint64_t v26 = *(void *)v27;
  *((void *)v26 + 1) = v28;
  uint64_t v29 = a3[13];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  swift_bridgeObjectRetain(v28);
  if (sub_10000AB6C((uint64_t)v31, 1LL, v6))
  {
    uint64_t v32 = sub_100006BEC(&qword_100088BD0);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v30, v31, v6);
    sub_10000AB60((uint64_t)v30, 0LL, 1LL, v6);
  }

  uint64_t v33 = a3[14];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = type metadata accessor for URL(0LL);
  if (sub_10000AB6C((uint64_t)v35, 1LL, v36))
  {
    uint64_t v37 = sub_100006BEC(&qword_100087368);
    memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16LL))(v34, v35, v36);
    sub_10000AB60((uint64_t)v34, 0LL, 1LL, v36);
  }

  uint64_t v38 = a3[15];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  if (sub_10000AB6C((uint64_t)&a2[v38], 1LL, v6))
  {
    uint64_t v41 = sub_100006BEC(&qword_100088BD0);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v39, v40, v6);
    sub_10000AB60((uint64_t)v39, 0LL, 1LL, v6);
  }

  uint64_t v42 = a3[16];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  if (sub_10000AB6C((uint64_t)&a2[v42], 1LL, v6))
  {
    uint64_t v45 = sub_100006BEC(&qword_100088BD0);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v43, v44, v6);
    sub_10000AB60((uint64_t)v43, 0LL, 1LL, v6);
  }

  uint64_t v46 = a3[17];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  if (sub_10000AB6C((uint64_t)&a2[v46], 1LL, v6))
  {
    uint64_t v49 = sub_100006BEC(&qword_100088BD0);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v47, v48, v6);
    sub_10000AB60((uint64_t)v47, 0LL, 1LL, v6);
  }

  uint64_t v50 = a3[18];
  uint64_t v51 = a3[19];
  uint64_t v52 = &a1[v50];
  uint64_t v53 = &a2[v50];
  *(void *)uint64_t v52 = *(void *)v53;
  v52[8] = v53[8];
  unint64_t v54 = &a1[v51];
  size_t v55 = &a2[v51];
  uint64_t v56 = *((void *)v55 + 1);
  *(void *)unint64_t v54 = *(void *)v55;
  *((void *)v54 + 1) = v56;
  uint64_t v57 = a3[20];
  uint64_t v58 = a3[21];
  uint64_t v59 = &a1[v57];
  uint64_t v60 = &a2[v57];
  uint64_t v61 = *((void *)v60 + 1);
  *(void *)uint64_t v59 = *(void *)v60;
  *((void *)v59 + 1) = v61;
  uint64_t v62 = &a1[v58];
  uint64_t v63 = &a2[v58];
  uint64_t v64 = *((void *)v63 + 1);
  *(void *)uint64_t v62 = *(void *)v63;
  *((void *)v62 + 1) = v64;
  uint64_t v65 = a3[22];
  uint64_t v66 = a3[23];
  uint64_t v67 = &a1[v65];
  uint64_t v68 = &a2[v65];
  uint64_t v69 = *((void *)v68 + 1);
  *(void *)uint64_t v67 = *(void *)v68;
  *((void *)v67 + 1) = v69;
  uint64_t v70 = &a1[v66];
  uint64_t v71 = &a2[v66];
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = v72;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v72);
  return a1;
}

char *sub_100020248(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  int v7 = sub_10000AB6C((uint64_t)a1, 1LL, v6);
  int v8 = sub_10000AB6C((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      sub_10000AB60((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_100006BEC(&qword_100088BD0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = sub_10000AB6C((uint64_t)&a1[v11], 1LL, v6);
  int v15 = sub_10000AB6C((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v12, v13, v6);
      sub_10000AB60((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_100006BEC(&qword_100088BD0);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = sub_10000AB6C((uint64_t)&a1[v18], 1LL, v6);
  int v22 = sub_10000AB6C((uint64_t)v20, 1LL, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v19, v20, v6);
      sub_10000AB60((uint64_t)v19, 0LL, 1LL, v6);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v23 = *(void *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    uint64_t v24 = sub_100006BEC(&qword_100088BD0);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v19, v20, v6);
LABEL_19:
  uint64_t v25 = a3[9];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  int v28 = sub_10000AB6C((uint64_t)&a1[v25], 1LL, v6);
  int v29 = sub_10000AB6C((uint64_t)v27, 1LL, v6);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v26, v27, v6);
      sub_10000AB60((uint64_t)v26, 0LL, 1LL, v6);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  uint64_t v30 = *(void *)(v6 - 8);
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
LABEL_24:
    uint64_t v31 = sub_100006BEC(&qword_100088BD0);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v26, v27, v6);
LABEL_25:
  uint64_t v32 = a3[10];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  int v35 = sub_10000AB6C((uint64_t)&a1[v32], 1LL, v6);
  int v36 = sub_10000AB6C((uint64_t)v34, 1LL, v6);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v33, v34, v6);
      sub_10000AB60((uint64_t)v33, 0LL, 1LL, v6);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  uint64_t v37 = *(void *)(v6 - 8);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v6);
LABEL_30:
    uint64_t v38 = sub_100006BEC(&qword_100088BD0);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v33, v34, v6);
LABEL_31:
  a1[a3[11]] = a2[a3[11]];
  uint64_t v39 = a3[12];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  uint64_t v43 = *((void *)v40 + 1);
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  uint64_t v44 = a3[13];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  int v47 = sub_10000AB6C((uint64_t)&a1[v44], 1LL, v6);
  int v48 = sub_10000AB6C((uint64_t)v46, 1LL, v6);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v45, v46, v6);
      sub_10000AB60((uint64_t)v45, 0LL, 1LL, v6);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  uint64_t v49 = *(void *)(v6 - 8);
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v45, v6);
LABEL_36:
    uint64_t v50 = sub_100006BEC(&qword_100088BD0);
    memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v49 + 24))(v45, v46, v6);
LABEL_37:
  uint64_t v51 = a3[14];
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  uint64_t v54 = type metadata accessor for URL(0LL);
  int v55 = sub_10000AB6C((uint64_t)v52, 1LL, v54);
  int v56 = sub_10000AB6C((uint64_t)v53, 1LL, v54);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16LL))(v52, v53, v54);
      sub_10000AB60((uint64_t)v52, 0LL, 1LL, v54);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  uint64_t v57 = *(void *)(v54 - 8);
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v52, v54);
LABEL_42:
    uint64_t v58 = sub_100006BEC(&qword_100087368);
    memcpy(v52, v53, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v57 + 24))(v52, v53, v54);
LABEL_43:
  uint64_t v59 = a3[15];
  uint64_t v60 = &a1[v59];
  uint64_t v61 = &a2[v59];
  int v62 = sub_10000AB6C((uint64_t)&a1[v59], 1LL, v6);
  int v63 = sub_10000AB6C((uint64_t)v61, 1LL, v6);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v60, v61, v6);
      sub_10000AB60((uint64_t)v60, 0LL, 1LL, v6);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  uint64_t v64 = *(void *)(v6 - 8);
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v60, v6);
LABEL_48:
    uint64_t v65 = sub_100006BEC(&qword_100088BD0);
    memcpy(v60, v61, *(void *)(*(void *)(v65 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v64 + 24))(v60, v61, v6);
LABEL_49:
  uint64_t v66 = a3[16];
  uint64_t v67 = &a1[v66];
  uint64_t v68 = &a2[v66];
  int v69 = sub_10000AB6C((uint64_t)&a1[v66], 1LL, v6);
  int v70 = sub_10000AB6C((uint64_t)v68, 1LL, v6);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v67, v68, v6);
      sub_10000AB60((uint64_t)v67, 0LL, 1LL, v6);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  uint64_t v71 = *(void *)(v6 - 8);
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v67, v6);
LABEL_54:
    uint64_t v72 = sub_100006BEC(&qword_100088BD0);
    memcpy(v67, v68, *(void *)(*(void *)(v72 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v71 + 24))(v67, v68, v6);
LABEL_55:
  uint64_t v73 = a3[17];
  uint64_t v74 = &a1[v73];
  int v75 = &a2[v73];
  int v76 = sub_10000AB6C((uint64_t)&a1[v73], 1LL, v6);
  int v77 = sub_10000AB6C((uint64_t)v75, 1LL, v6);
  if (!v76)
  {
    uint64_t v78 = *(void *)(v6 - 8);
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v78 + 24))(v74, v75, v6);
      goto LABEL_61;
    }

    (*(void (**)(char *, uint64_t))(v78 + 8))(v74, v6);
    goto LABEL_60;
  }

  if (v77)
  {
LABEL_60:
    uint64_t v79 = sub_100006BEC(&qword_100088BD0);
    memcpy(v74, v75, *(void *)(*(void *)(v79 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v74, v75, v6);
  sub_10000AB60((uint64_t)v74, 0LL, 1LL, v6);
LABEL_61:
  uint64_t v80 = a3[18];
  uint64_t v81 = &a1[v80];
  int v82 = &a2[v80];
  uint64_t v83 = *(void *)v82;
  v81[8] = v82[8];
  *(void *)uint64_t v81 = v83;
  uint64_t v84 = a3[19];
  uint64_t v85 = &a1[v84];
  int v86 = &a2[v84];
  *(void *)uint64_t v85 = *(void *)v86;
  uint64_t v87 = *((void *)v86 + 1);
  uint64_t v88 = *((void *)v85 + 1);
  *((void *)v85 + 1) = v87;
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRelease(v88);
  uint64_t v89 = a3[20];
  int v90 = &a1[v89];
  int v91 = &a2[v89];
  *(void *)int v90 = *(void *)v91;
  uint64_t v92 = *((void *)v91 + 1);
  uint64_t v93 = *((void *)v90 + 1);
  *((void *)v90 + 1) = v92;
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRelease(v93);
  uint64_t v94 = a3[21];
  uint64_t v95 = &a1[v94];
  uint64_t v96 = &a2[v94];
  *(void *)uint64_t v95 = *(void *)v96;
  uint64_t v97 = *((void *)v96 + 1);
  uint64_t v98 = *((void *)v95 + 1);
  *((void *)v95 + 1) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v98);
  uint64_t v99 = a3[22];
  size_t v100 = &a1[v99];
  int v101 = &a2[v99];
  *(void *)size_t v100 = *(void *)v101;
  uint64_t v102 = *((void *)v101 + 1);
  uint64_t v103 = *((void *)v100 + 1);
  *((void *)v100 + 1) = v102;
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRelease(v103);
  uint64_t v104 = a3[23];
  size_t v105 = &a1[v104];
  size_t v106 = &a2[v104];
  *(void *)size_t v105 = *(void *)v106;
  uint64_t v107 = *((void *)v106 + 1);
  uint64_t v108 = *((void *)v105 + 1);
  *((void *)v105 + 1) = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108);
  return a1;
}

char *sub_100020B0C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  if (sub_10000AB6C((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_100006BEC(&qword_100088BD0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    sub_10000AB60((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (sub_10000AB6C((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_100006BEC(&qword_100088BD0);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v9, v10, v6);
    sub_10000AB60((uint64_t)v9, 0LL, 1LL, v6);
  }

  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[8];
  int v14 = &a1[v13];
  int v15 = &a2[v13];
  if (sub_10000AB6C((uint64_t)&a2[v13], 1LL, v6))
  {
    uint64_t v16 = sub_100006BEC(&qword_100088BD0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v14, v15, v6);
    sub_10000AB60((uint64_t)v14, 0LL, 1LL, v6);
  }

  uint64_t v17 = a3[9];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if (sub_10000AB6C((uint64_t)&a2[v17], 1LL, v6))
  {
    uint64_t v20 = sub_100006BEC(&qword_100088BD0);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v18, v19, v6);
    sub_10000AB60((uint64_t)v18, 0LL, 1LL, v6);
  }

  uint64_t v21 = a3[10];
  int v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  if (sub_10000AB6C((uint64_t)&a2[v21], 1LL, v6))
  {
    uint64_t v24 = sub_100006BEC(&qword_100088BD0);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v22, v23, v6);
    sub_10000AB60((uint64_t)v22, 0LL, 1LL, v6);
  }

  uint64_t v25 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  *(_OWORD *)&a1[v25] = *(_OWORD *)&a2[v25];
  uint64_t v26 = a3[13];
  uint64_t v27 = &a1[v26];
  int v28 = &a2[v26];
  if (sub_10000AB6C((uint64_t)&a2[v26], 1LL, v6))
  {
    uint64_t v29 = sub_100006BEC(&qword_100088BD0);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v27, v28, v6);
    sub_10000AB60((uint64_t)v27, 0LL, 1LL, v6);
  }

  uint64_t v30 = a3[14];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = type metadata accessor for URL(0LL);
  if (sub_10000AB6C((uint64_t)v32, 1LL, v33))
  {
    uint64_t v34 = sub_100006BEC(&qword_100087368);
    memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32LL))(v31, v32, v33);
    sub_10000AB60((uint64_t)v31, 0LL, 1LL, v33);
  }

  uint64_t v35 = a3[15];
  int v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  if (sub_10000AB6C((uint64_t)&a2[v35], 1LL, v6))
  {
    uint64_t v38 = sub_100006BEC(&qword_100088BD0);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v36, v37, v6);
    sub_10000AB60((uint64_t)v36, 0LL, 1LL, v6);
  }

  uint64_t v39 = a3[16];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  if (sub_10000AB6C((uint64_t)&a2[v39], 1LL, v6))
  {
    uint64_t v42 = sub_100006BEC(&qword_100088BD0);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v40, v41, v6);
    sub_10000AB60((uint64_t)v40, 0LL, 1LL, v6);
  }

  uint64_t v43 = a3[17];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  if (sub_10000AB6C((uint64_t)&a2[v43], 1LL, v6))
  {
    uint64_t v46 = sub_100006BEC(&qword_100088BD0);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v44, v45, v6);
    sub_10000AB60((uint64_t)v44, 0LL, 1LL, v6);
  }

  uint64_t v47 = a3[18];
  uint64_t v48 = a3[19];
  uint64_t v49 = &a1[v47];
  uint64_t v50 = &a2[v47];
  *(void *)uint64_t v49 = *(void *)v50;
  char v49[8] = v50[8];
  *(_OWORD *)&a1[v48] = *(_OWORD *)&a2[v48];
  uint64_t v51 = a3[21];
  *(_OWORD *)&a1[a3[20]] = *(_OWORD *)&a2[a3[20]];
  *(_OWORD *)&a1[v51] = *(_OWORD *)&a2[v51];
  uint64_t v52 = a3[23];
  *(_OWORD *)&a1[a3[22]] = *(_OWORD *)&a2[a3[22]];
  *(_OWORD *)&a1[v52] = *(_OWORD *)&a2[v52];
  return a1;
}

char *sub_10002102C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  int v7 = sub_10000AB6C((uint64_t)a1, 1LL, v6);
  int v8 = sub_10000AB6C((uint64_t)a2, 1LL, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      sub_10000AB60((uint64_t)a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_100006BEC(&qword_100088BD0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = sub_10000AB6C((uint64_t)&a1[v11], 1LL, v6);
  int v15 = sub_10000AB6C((uint64_t)v13, 1LL, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v12, v13, v6);
      sub_10000AB60((uint64_t)v12, 0LL, 1LL, v6);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    uint64_t v17 = sub_100006BEC(&qword_100088BD0);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  uint64_t v18 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v18] = *(void *)&a2[v18];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  int v22 = sub_10000AB6C((uint64_t)&a1[v19], 1LL, v6);
  int v23 = sub_10000AB6C((uint64_t)v21, 1LL, v6);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v20, v21, v6);
      sub_10000AB60((uint64_t)v20, 0LL, 1LL, v6);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v24 = *(void *)(v6 - 8);
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v20, v6);
LABEL_18:
    uint64_t v25 = sub_100006BEC(&qword_100088BD0);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v20, v21, v6);
LABEL_19:
  uint64_t v26 = a3[9];
  uint64_t v27 = &a1[v26];
  int v28 = &a2[v26];
  int v29 = sub_10000AB6C((uint64_t)&a1[v26], 1LL, v6);
  int v30 = sub_10000AB6C((uint64_t)v28, 1LL, v6);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v27, v28, v6);
      sub_10000AB60((uint64_t)v27, 0LL, 1LL, v6);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  uint64_t v31 = *(void *)(v6 - 8);
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v6);
LABEL_24:
    uint64_t v32 = sub_100006BEC(&qword_100088BD0);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v27, v28, v6);
LABEL_25:
  uint64_t v33 = a3[10];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  int v36 = sub_10000AB6C((uint64_t)&a1[v33], 1LL, v6);
  int v37 = sub_10000AB6C((uint64_t)v35, 1LL, v6);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v34, v35, v6);
      sub_10000AB60((uint64_t)v34, 0LL, 1LL, v6);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  uint64_t v38 = *(void *)(v6 - 8);
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v34, v6);
LABEL_30:
    uint64_t v39 = sub_100006BEC(&qword_100088BD0);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v34, v35, v6);
LABEL_31:
  uint64_t v40 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  uint64_t v44 = *(void *)v42;
  uint64_t v43 = *((void *)v42 + 1);
  uint64_t v45 = *((void *)v41 + 1);
  *(void *)uint64_t v41 = v44;
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = a3[13];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  int v49 = sub_10000AB6C((uint64_t)&a1[v46], 1LL, v6);
  int v50 = sub_10000AB6C((uint64_t)v48, 1LL, v6);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v47, v48, v6);
      sub_10000AB60((uint64_t)v47, 0LL, 1LL, v6);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  uint64_t v51 = *(void *)(v6 - 8);
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v6);
LABEL_36:
    uint64_t v52 = sub_100006BEC(&qword_100088BD0);
    memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v51 + 40))(v47, v48, v6);
LABEL_37:
  uint64_t v53 = a3[14];
  uint64_t v54 = &a1[v53];
  int v55 = &a2[v53];
  uint64_t v56 = type metadata accessor for URL(0LL);
  int v57 = sub_10000AB6C((uint64_t)v54, 1LL, v56);
  int v58 = sub_10000AB6C((uint64_t)v55, 1LL, v56);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 32LL))(v54, v55, v56);
      sub_10000AB60((uint64_t)v54, 0LL, 1LL, v56);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  uint64_t v59 = *(void *)(v56 - 8);
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v54, v56);
LABEL_42:
    uint64_t v60 = sub_100006BEC(&qword_100087368);
    memcpy(v54, v55, *(void *)(*(void *)(v60 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v54, v55, v56);
LABEL_43:
  uint64_t v61 = a3[15];
  int v62 = &a1[v61];
  int v63 = &a2[v61];
  int v64 = sub_10000AB6C((uint64_t)&a1[v61], 1LL, v6);
  int v65 = sub_10000AB6C((uint64_t)v63, 1LL, v6);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v62, v63, v6);
      sub_10000AB60((uint64_t)v62, 0LL, 1LL, v6);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  uint64_t v66 = *(void *)(v6 - 8);
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v62, v6);
LABEL_48:
    uint64_t v67 = sub_100006BEC(&qword_100088BD0);
    memcpy(v62, v63, *(void *)(*(void *)(v67 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v66 + 40))(v62, v63, v6);
LABEL_49:
  uint64_t v68 = a3[16];
  int v69 = &a1[v68];
  int v70 = &a2[v68];
  int v71 = sub_10000AB6C((uint64_t)&a1[v68], 1LL, v6);
  int v72 = sub_10000AB6C((uint64_t)v70, 1LL, v6);
  if (v71)
  {
    if (!v72)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v69, v70, v6);
      sub_10000AB60((uint64_t)v69, 0LL, 1LL, v6);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  uint64_t v73 = *(void *)(v6 - 8);
  if (v72)
  {
    (*(void (**)(char *, uint64_t))(v73 + 8))(v69, v6);
LABEL_54:
    uint64_t v74 = sub_100006BEC(&qword_100088BD0);
    memcpy(v69, v70, *(void *)(*(void *)(v74 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v73 + 40))(v69, v70, v6);
LABEL_55:
  uint64_t v75 = a3[17];
  int v76 = &a1[v75];
  int v77 = &a2[v75];
  int v78 = sub_10000AB6C((uint64_t)&a1[v75], 1LL, v6);
  int v79 = sub_10000AB6C((uint64_t)v77, 1LL, v6);
  if (!v78)
  {
    uint64_t v80 = *(void *)(v6 - 8);
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 40))(v76, v77, v6);
      goto LABEL_61;
    }

    (*(void (**)(char *, uint64_t))(v80 + 8))(v76, v6);
    goto LABEL_60;
  }

  if (v79)
  {
LABEL_60:
    uint64_t v81 = sub_100006BEC(&qword_100088BD0);
    memcpy(v76, v77, *(void *)(*(void *)(v81 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v76, v77, v6);
  sub_10000AB60((uint64_t)v76, 0LL, 1LL, v6);
LABEL_61:
  uint64_t v82 = a3[18];
  uint64_t v83 = a3[19];
  uint64_t v84 = &a1[v82];
  uint64_t v85 = &a2[v82];
  *(void *)uint64_t v84 = *(void *)v85;
  v84[8] = v85[8];
  int v86 = &a1[v83];
  uint64_t v87 = &a2[v83];
  uint64_t v89 = *(void *)v87;
  uint64_t v88 = *((void *)v87 + 1);
  uint64_t v90 = *((void *)v86 + 1);
  *(void *)int v86 = v89;
  *((void *)v86 + 1) = v88;
  swift_bridgeObjectRelease(v90);
  uint64_t v91 = a3[20];
  uint64_t v92 = &a1[v91];
  uint64_t v93 = &a2[v91];
  uint64_t v95 = *(void *)v93;
  uint64_t v94 = *((void *)v93 + 1);
  uint64_t v96 = *((void *)v92 + 1);
  *(void *)uint64_t v92 = v95;
  *((void *)v92 + 1) = v94;
  swift_bridgeObjectRelease(v96);
  uint64_t v97 = a3[21];
  uint64_t v98 = &a1[v97];
  uint64_t v99 = &a2[v97];
  uint64_t v101 = *(void *)v99;
  uint64_t v100 = *((void *)v99 + 1);
  uint64_t v102 = *((void *)v98 + 1);
  *(void *)uint64_t v98 = v101;
  *((void *)v98 + 1) = v100;
  swift_bridgeObjectRelease(v102);
  uint64_t v103 = a3[22];
  uint64_t v104 = &a1[v103];
  size_t v105 = &a2[v103];
  uint64_t v107 = *(void *)v105;
  uint64_t v106 = *((void *)v105 + 1);
  uint64_t v108 = *((void *)v104 + 1);
  *(void *)uint64_t v104 = v107;
  *((void *)v104 + 1) = v106;
  swift_bridgeObjectRelease(v108);
  uint64_t v109 = a3[23];
  int v110 = &a1[v109];
  int v111 = &a2[v109];
  uint64_t v113 = *(void *)v111;
  uint64_t v112 = *((void *)v111 + 1);
  uint64_t v114 = *((void *)v110 + 1);
  *(void *)int v110 = v113;
  *((void *)v110 + 1) = v112;
  swift_bridgeObjectRelease(v114);
  return a1;
}

uint64_t sub_100021884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100021890);
}

uint64_t sub_100021890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100006BEC(&qword_100088BD0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = a1;
    return sub_10000AB6C(v8, a2, v7);
  }

  if ((_DWORD)a2 != 2147483646)
  {
    uint64_t v7 = sub_100006BEC(&qword_100087368);
    uint64_t v8 = a1 + *(int *)(a3 + 56);
    return sub_10000AB6C(v8, a2, v7);
  }

  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 48) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_100021944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100021950);
}

uint64_t sub_100021950(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100006BEC(&qword_100088BD0);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = a1;
  }

  else
  {
    if (a3 == 2147483646)
    {
      *(void *)(a1 + *(int *)(a4 + 48) + 8) = a2;
      return result;
    }

    uint64_t v9 = sub_100006BEC(&qword_100087368);
    uint64_t v10 = a1 + *(int *)(a4 + 56);
  }

  return sub_10000AB60(v10, a2, a2, v9);
}

void sub_1000219F4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    v7[0] = v4;
    v7[1] = v4;
    v7[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v7[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v7[4] = v4;
    v7[5] = v4;
    v7[6] = v4;
    v7[7] = &unk_100067A98;
    v7[8] = &unk_100067AB0;
    void v7[9] = v4;
    sub_100021AE4( 319LL,  (unint64_t *)&unk_100087DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v6 <= 0x3F)
    {
      void v7[10] = *(void *)(v5 - 8) + 64LL;
      v7[11] = v4;
      v7[12] = v4;
      v7[13] = v4;
      v7[14] = &unk_100067AC8;
      v7[15] = &unk_100067AB0;
      v7[16] = &unk_100067AB0;
      v7[17] = &unk_100067AB0;
      v7[18] = &unk_100067AB0;
      v7[19] = &unk_100067AB0;
      swift_initStructMetadata(a1, 256LL, 20LL, v7, a1 + 16);
    }
  }

void sub_100021AE4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

unint64_t sub_100021B30(uint64_t a1, void *a2)
{
  unint64_t v2 = 0xD000000000000013LL;
  if (a2)
  {
    _StringGuts.grow(_:)(40LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v5._uint64_t countAndFlagsBits = a1;
    v5._object = a2;
    String.append(_:)(v5);
    return 0xD000000000000026LL;
  }

  return v2;
}

uint64_t sub_100021BD8(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100006BEC(&qword_100087E58);
  uint64_t inited = swift_initStackObject(v4, v11);
  unint64_t v6 = (void *)inited;
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067B00;
  *(_BYTE *)(inited + 32) = 22;
  uint64_t v7 = 1LL;
  if (!a2) {
    uint64_t v7 = 2LL;
  }
  *(void *)(inited + 6sub_100006E64(v0 + 4) = &type metadata for Int;
  *(void *)(inited + 40) = v7;
  *(_BYTE *)(inited + 72) = 23;
  *(void *)(inited + 10sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(inited + 80) = 0xD00000000000001BLL;
  *(void *)(inited + 88) = 0x800000010006B450LL;
  *(_BYTE *)(inited + 1sub_100006E64(v0 + 12) = 24;
  unint64_t v8 = sub_100021B30(a1, a2);
  v6[18] = &type metadata for String;
  v6[15] = v8;
  v6[16] = v9;
  sub_100006BEC(qword_100087690);
  sub_100021CD0();
  return Dictionary.init(dictionaryLiteral:)(v6, &type metadata for SportsMetricsKey);
}

uint64_t sub_100021CC8()
{
  return sub_100021BD8(*(void *)v0, *(void **)(v0 + 8));
}

unint64_t sub_100021CD0()
{
  unint64_t result = qword_100087E60;
  if (!qword_100087E60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069914, &type metadata for SportsMetricsKey);
    atomic_store(result, (unint64_t *)&qword_100087E60);
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for LiveStatsError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for LiveStatsError(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for LiveStatsError(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for LiveStatsError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for LiveStatsError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveStatsError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for LiveStatsError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 1sub_100006E64(v0 + 6) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 1sub_100006E64(v0 + 6) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

uint64_t sub_100021E60(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(sub_10000B388((__int128 *)(v4 - 224), v0 + v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100021E78(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for LiveStatsError()
{
  return &type metadata for LiveStatsError;
}

void sub_100021EAC( void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  if (qword_100087080 != -1) {
    swift_once(&qword_100087080, sub_100024D08);
  }
  id v12 = *(id *)(qword_10008F280 + 16);
  id v13 = sub_1000234DC();
  sub_100022FF4(a4, a5, v13);

  id v14 = sub_1000234DC();
  id v15 = [(id)objc_opt_self(AMSProcessInfo) currentProcess];

  id v16 = [objc_allocWithZone(AMSURLRequestEncoder) initWithBag:v12];
  [v16 setUrlKnownToBeTrusted:a3 & 1];
  a6[4] = sub_10001906C(0LL, &qword_100087E78, &OBJC_CLASS___AMSURLRequestEncoder_ptr);
  a6[5] = &off_10007F6F8;
  a6[1] = v16;
  sub_10000CC1C(a2, (uint64_t)(a6 + 7));
  id v17 = objc_allocWithZone((Class)type metadata accessor for AMSTaskDelegate());
  id v18 = a1;
  id v19 = v16;
  id v20 = [v17 init];

  *a6 = v18;
  a6[6] = v20;
  sub_10000C248();
}

uint64_t sub_100022054(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v24 = v3;
  __chkstk_darwin(v3);
  Swift::String v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (!v6) {
    return (uint64_t)v7;
  }
  uint64_t v21 = v1;
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_100016664(0LL, v6, 0);
  uint64_t v7 = v27;
  uint64_t result = sub_1000231C0(a1);
  if ((result & 0x8000000000000000LL) == 0)
  {
    unint64_t v10 = result;
    if (result < 1LL << *(_BYTE *)(a1 + 32))
    {
      uint64_t v11 = a1 + 64;
      uint64_t v22 = a1 + 64;
      while ((*(void *)(v11 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
      {
        if ((_DWORD)v9 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_18;
        }
        int64_t v25 = v6;
        uint64_t v26 = v9;
        id v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
        uint64_t v14 = *v12;
        uint64_t v13 = v12[1];
        id v15 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v10);
        uint64_t v16 = *v15;
        uint64_t v17 = v15[1];
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v17);
        URLQueryItem.init(name:value:)(v14, v13, v16, v17);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v13);
        uint64_t v27 = v7;
        unint64_t v19 = v7[2];
        unint64_t v18 = v7[3];
        if (v19 >= v18 >> 1)
        {
          sub_100016664(v18 > 1, v19 + 1, 1);
          uint64_t v7 = v27;
        }

        v7[2] = v19 + 1;
        uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v23 + 32))( (unint64_t)v7 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))
                 + *(void *)(v23 + 72) * v19,
                   v5,
                   v24);
        uint64_t v20 = -1LL << *(_BYTE *)(a1 + 32);
        uint64_t v11 = v22;
        if ((*(void *)(v22 + 8 * (v10 >> 6)) & (1LL << v10)) == 0) {
          goto LABEL_20;
        }
        if ((_DWORD)v26 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_21;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)(v10, v22, ~v20);
        int64_t v6 = v25 - 1;
        if (v25 == 1) {
          return (uint64_t)v7;
        }
        unint64_t v10 = result;
        if ((result & 0x8000000000000000LL) == 0)
        {
          uint64_t v9 = *(unsigned int *)(a1 + 36);
          if (result < 1LL << *(_BYTE *)(a1 + 32)) {
            continue;
          }
        }

        goto LABEL_22;
      }

      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }

id sub_1000222A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v60 = a5;
  uint64_t v61 = a6;
  uint64_t v62 = a2;
  uint64_t v63 = a4;
  type metadata accessor for URLError.Code(0LL);
  sub_10000C318();
  __chkstk_darwin(v8);
  sub_100019488();
  uint64_t v66 = v10 - v9;
  uint64_t v11 = type metadata accessor for URLError(0LL);
  uint64_t v67 = *(void *)(v11 - 8);
  sub_10000C318();
  __chkstk_darwin(v12);
  sub_100019488();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for URLComponents(0LL);
  uint64_t v64 = *(void *)(v16 - 8);
  sub_10000C318();
  __chkstk_darwin(v17);
  sub_100019488();
  uint64_t v20 = v19 - v18;
  sub_100006BEC(&qword_100087368);
  sub_10000C318();
  __chkstk_darwin(v21);
  sub_10000C42C();
  uint64_t v22 = type metadata accessor for URL(0LL);
  uint64_t v59 = *(void *)(v22 - 8);
  sub_10000C318();
  __chkstk_darwin(v23);
  int v57 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  int v58 = (char *)&v56 - v26;
  sub_100006BEC(&qword_100087E68);
  sub_10000C318();
  __chkstk_darwin(v27);
  sub_100019488();
  uint64_t v30 = v29 - v28;
  uint64_t v32 = URL.absoluteString.getter(v31);
  uint64_t v34 = v33;
  URLComponents.init(string:)(v32);
  swift_bridgeObjectRelease(v34);
  if (!sub_1000234CC())
  {
    if (a3) {
      uint64_t v35 = v62;
    }
    else {
      uint64_t v35 = 0LL;
    }
    if (a3) {
      unint64_t v36 = a3;
    }
    else {
      unint64_t v36 = 0xE000000000000000LL;
    }
    swift_bridgeObjectRetain(a3);
    URLComponents.path.setter(v35, v36);
  }

  if (!sub_1000234CC())
  {
    uint64_t v37 = v63;
    if (v63)
    {
      uint64_t v38 = swift_bridgeObjectRetain(v63);
      uint64_t v39 = v65;
      uint64_t v40 = sub_100022054(v38);
      uint64_t v65 = v39;
      swift_bridgeObjectRelease(v37);
    }

    else
    {
      uint64_t v40 = 0LL;
    }

    URLComponents.queryItems.setter(v40);
  }

  if (sub_1000234CC())
  {
    sub_10000AB60(v6, 1LL, 1LL, v22);
  }

  else
  {
    uint64_t v41 = v64;
    uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 16))(v20, v30, v16);
    URLComponents.url.getter(v42);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v20, v16);
    if (sub_10000AB6C(v6, 1LL, v22) != 1)
    {
      uint64_t v51 = v58;
      uint64_t v50 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v58, v6, v22);
      sub_10001906C(0LL, &qword_100087E70, &OBJC_CLASS___AMSURLRequest_ptr);
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v57, v51, v22);
      id v52 = sub_1000088E0();
      [v52 setTimeoutInterval:10.0];
      uint64_t v53 = qword_100067BD8[(char)v60];
      id v45 = v52;
      NSString v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v53);
      [v45 setHTTPMethod:v54];

      __chkstk_darwin(v55);
      *(&v56 - 2) = (uint64_t)v45;
      sub_100007AE0(v61, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000234C8);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v22);
      sub_1000230C4(v30, &qword_100087E68);
      return v45;
    }
  }

  uint64_t v43 = sub_1000230C4(v6, &qword_100087368);
  uint64_t v44 = v66;
  static URLError.Code.badURL.getter(v43);
  id v45 = (id)sub_10000A0C0((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v46 = sub_100023084();
  uint64_t v47 = _BridgedStoredNSError.init(_:userInfo:)(v44, v45, v11, v46);
  URLError._nsError.getter(v47);
  uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v15, v11);
  swift_willThrow(v48);
  sub_1000230C4(v30, &qword_100087E68);
  return v45;
}

id sub_1000226E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10000C42C();
  sub_10001906C(0LL, &qword_100087E70, &OBJC_CLASS___AMSURLRequest_ptr);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, a1, v5);
  id v7 = sub_1000088E0();
  [v7 setTimeoutInterval:10.0];
  id v8 = v7;
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 setHTTPMethod:v9];

  sub_100007AE0(a2, sub_1000234B0);
  return v8;
}

void sub_100022800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = String._bridgeToObjectiveC()();
  sub_100023038(a3, a4, (uint64_t)v8, a5);
}

uint64_t sub_100022854()
{
  uint64_t v1 = *v0;
  swift_retain(v0[1]);
  return v1;
}

uint64_t sub_100022880()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

void sub_100022888(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  sub_10000CC1C(a1, (uint64_t)aBlock);
  uint64_t v5 = sub_100006BEC(&qword_100087E80);
  uint64_t v6 = swift_dynamicCast(v31, aBlock, v5, &type metadata for AMSApiRequest, 6LL);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = v32;
    uint64_t v8 = v33;
    NSString v9 = v34;
    [v2 setAccount:v34];

    swift_bridgeObjectRelease(v8);
    uint64_t v6 = swift_release(v7);
  }

  __chkstk_darwin(v6);
  uint64_t v10 = (void *)sub_10002AAD8((void (*)(uint64_t *__return_ptr, uint64_t *))sub_100023240);
  uint64_t v11 = v10;
  if ((v12 & 1) != 0)
  {
    uint64_t v17 = 1LL;
    sub_10002325C(v10, 1);
    uint64_t v18 = type metadata accessor for ApiAgentError(0LL);
    swift_storeEnumTagMultiPayload(a2, v18, 3LL);
  }

  else
  {
    id v13 = [objc_allocWithZone(AMSMutablePromise) init];
    uint64_t v14 = sub_100023100(v11);
    if (v15 >> 60 == 15)
    {
      id v16 = [v2 requestByEncodingRequest:v11 parameters:0];
      [v13 finishWithPromise:v16];
    }

    else
    {
      uint64_t v19 = v14;
      unint64_t v20 = v15;
      type metadata accessor for MescalSignature();
      uint64_t v21 = (void *)sub_100050934(v19, v20);
      uint64_t v22 = (void *)swift_allocObject(&unk_10007F718, 40LL, 7LL);
      v22[2] = v11;
      v22[3] = v13;
      void v22[4] = v3;
      aBlock[4] = sub_10002329C;
      uint64_t v30 = v22;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_100022F60;
      aBlock[3] = &unk_10007F730;
      uint64_t v23 = _Block_copy(aBlock);
      uint64_t v24 = v30;
      sub_1000232C0(v11, 0);
      id v25 = v13;
      id v26 = v3;
      swift_release(v24);
      [v21 addFinishBlock:v23];
      _Block_release(v23);

      sub_1000232CC(v19, v20);
    }

    uint64_t v27 = *(int *)(sub_100006BEC(&qword_100087E90) + 48);
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v11);
    sub_10002325C(v11, 0);
    uint64_t v17 = 0LL;
    *(void *)(a2 + v27) = v13;
  }

  uint64_t v28 = sub_100006BEC(&qword_100087E88);
  swift_storeEnumTagMultiPayload(a2, v28, v17);
  sub_10000C248();
}

uint64_t sub_100022B18@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100006C2C(a1, v6);
  uint64_t v8 = (uint64_t (*)(void))(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  uint64_t v10 = v9;
  uint64_t v11 = v8();
  if (v3)
  {
    uint64_t result = swift_release(v10);
    *a2 = v3;
  }

  else
  {
    uint64_t v13 = v11;
    uint64_t result = swift_release(v10);
    *a3 = v13;
  }

  return result;
}

void sub_100022BAC(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)&double v12 = __chkstk_darwin(v10).n128_u64[0];
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v15 = objc_msgSend(a3, "mutableCopy", v12);
  _bridgeAnyObjectToAny(_:)(v15);
  swift_unknownObjectRelease(v15);
  uint64_t v16 = sub_10001906C(0LL, &qword_100087E98, &OBJC_CLASS___NSMutableURLRequest_ptr);
  if ((swift_dynamicCast(&v39, v40, (char *)&type metadata for Any + 8, v16, 6LL) & 1) != 0)
  {
    id v17 = v39;
    if (a1)
    {
      id v18 = a1;
      id v19 = [v18 base64EncodedStringWithOptions:0];
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v22 = v21;

      NSString v23 = String._bridgeToObjectiveC()();
      sub_100023160(v20, v22, (uint64_t)v23, v17);

      id v24 = [a5 requestByEncodingRequest:v17 parameters:0];
      [a4 finishWithPromise:v24];

      goto LABEL_14;
    }
  }

  unint64_t v36 = a3;
  if (qword_1000870F8 != -1) {
    swift_once(&qword_1000870F8, sub_10004BF1C);
  }
  uint64_t v25 = sub_10000B928(v10, (uint64_t)qword_10008F348);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v25, v10);
  swift_errorRetain(a2);
  uint64_t v26 = swift_errorRetain(a2);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v35 = a4;
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    v40[0] = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v34 = a5;
    if (a2)
    {
      swift_getErrorValue(a2, v38, v37);
      uint64_t v31 = Error.localizedDescription.getter(v37[1], v37[2]);
      unint64_t v33 = v32;
    }

    else
    {
      unint64_t v33 = 0xE300000000000000LL;
      uint64_t v31 = 7104878LL;
    }

    id v39 = (id)sub_100015AD4(v31, v33, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v33);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to sign request, error = %s", v29, 0xCu);
    swift_arrayDestroy(v30, 1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    a5 = v34;
    a4 = v35;
  }

  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }

  id v24 = objc_msgSend(a5, "requestByEncodingRequest:parameters:", v36, 0, v34);
  [a4 finishWithPromise:v24];
LABEL_14:
}

void sub_100022F60(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

void sub_100022FD4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100022FF4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "set_sourceApplicationBundleIdentifier:", v4);
}

void sub_100023038(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = String._bridgeToObjectiveC()();
  [a4 setValue:v6 forHTTPHeaderField:a3];
}

unint64_t sub_100023084()
{
  unint64_t result = qword_100087370;
  if (!qword_100087370)
  {
    uint64_t v1 = type metadata accessor for URLError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for URLError, v1);
    atomic_store(result, (unint64_t *)&qword_100087370);
  }

  return result;
}

uint64_t sub_1000230C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100006BEC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100023100(void *a1)
{
  id v1 = [a1 HTTPBody];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_100023160(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a4 setValue:v7 forHTTPHeaderField:a3];
}

uint64_t sub_1000231C0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 10LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_100023240@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100022B18(*(void **)(v2 + 16), a1, a2);
}

void sub_10002325C(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_100023268()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10002329C(void *a1, uint64_t a2)
{
}

uint64_t sub_1000232A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000232B8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_1000232C0(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    return (id)swift_errorRetain(a1);
  }
  else {
    return a1;
  }
}

uint64_t sub_1000232CC(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000ABB4(result, a2);
  }
  return result;
}

void destroy for AMSApiRequest(uint64_t a1)
{
}

void *initializeWithCopy for AMSApiRequest(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  char v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  id v6 = v5;
  return a1;
}

void *assignWithCopy for AMSApiRequest(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  id v8 = (void *)a1[3];
  uint64_t v9 = (void *)a2[3];
  a1[3] = v9;
  id v10 = v9;

  return a1;
}

__n128 initializeWithTake for AMSApiRequest(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for AMSApiRequest(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 6) = a2[1];

  return a1;
}

uint64_t getEnumTagSinglePayload for AMSApiRequest(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AMSApiRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 1sub_100006E64(v0 + 6) = 0LL;
    *(void *)(result + 2sub_100006E64(v0 + 4) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AMSApiRequest()
{
  return &type metadata for AMSApiRequest;
}

void sub_1000234B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1000234CC()
{
  return sub_10000AB6C(v1, 1LL, v0);
}

id sub_1000234DC()
{
  return [v0 *(SEL *)(v1 + 1088)];
}

uint64_t destroy for SubscriptionOperationFactory(void *a1)
{
  return sub_100006E64(a1 + 17);
}

uint64_t initializeWithCopy for SubscriptionOperationFactory(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2sub_100006E64(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain(v5);
  swift_retain(v6);
  v9(a1 + 56, a2 + 56, v8);
  __int128 v10 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 96, a2 + 96);
  __int128 v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 160) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 136, a2 + 136);
  return a1;
}

void *assignWithCopy for SubscriptionOperationFactory(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  uint64_t v5 = a1[5];
  a1[5] = v4;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a2[6];
  uint64_t v7 = a1[6];
  a1[6] = v6;
  swift_retain(v6);
  swift_release(v7);
  sub_10000B504(a1 + 7, a2 + 7);
  sub_10000B504(a1 + 12, a2 + 12);
  sub_10000B504(a1 + 17, a2 + 17);
  return a1;
}

void *initializeWithTake for SubscriptionOperationFactory(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB0uLL);
}

uint64_t assignWithTake for SubscriptionOperationFactory(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release(v6);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release(v7);
  sub_100006E64((void *)(a1 + 56));
  *(_OWORD *)(a1 + 5sub_100006E64(v0 + 6) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  sub_100006E64((void *)(a1 + 96));
  __int128 v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 9sub_100006E64(v0 + 6) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 12) = v8;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  sub_100006E64((void *)(a1 + 136));
  *(_OWORD *)(a1 + 13sub_100006E64(v0 + 6) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionOperationFactory(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 176))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubscriptionOperationFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0LL;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 13sub_100006E64(v0 + 6) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 10sub_100006E64(v0 + 4) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 5sub_100006E64(v0 + 6) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_100006E64(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 17sub_100006E64(v0 + 6) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_100006E64(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17sub_100006E64(v0 + 6) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SubscriptionOperationFactory()
{
  return &type metadata for SubscriptionOperationFactory;
}

void sub_1000237F0( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_100019488();
  uint64_t v25 = v24 - v23;
  uint64_t v26 = sub_100006BEC(&qword_100087EA0);
  __chkstk_darwin(v26);
  sub_100019488();
  uint64_t v29 = v28 - v27;
  sub_10000CC1C(v18, (uint64_t)&v63);
  uint64_t v30 = *(void *)(v18 + 40);
  uint64_t v31 = *(void *)(v18 + 48);
  sub_10000CC1C(v18 + 96, (uint64_t)v62);
  sub_10000CC1C(v18 + 136, (uint64_t)v61);
  sub_100023DE4(a16, v29);
  uint64_t v32 = sub_100006BEC(&qword_100087510);
  uint64_t v33 = swift_allocObject(v32, 64LL, 7LL);
  *(_OWORD *)(v33 + 1sub_100006E64(v0 + 6) = xmmword_100067BF0;
  uint64_t v60 = a3;
  *(void *)(v33 + 32) = a3;
  *(void *)(v33 + 40) = a4;
  swift_retain(v30);
  uint64_t v52 = v31;
  swift_retain(v31);
  uint64_t v53 = a4;
  uint64_t v34 = sub_100019194();
  uint64_t v35 = UUID.init()(v34);
  uint64_t v36 = UUID.uuidString.getter(v35);
  uint64_t v38 = v37;
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v25, v21);
  *(void *)(v33 + 48) = v36;
  *(void *)(v33 + 5sub_100006E64(v0 + 6) = v38;
  uint64_t v39 = sub_100006BEC(&qword_100087B00);
  unint64_t v40 = sub_100023E2C();
  uint64_t v41 = BidirectionalCollection<>.joined(separator:)(46LL, 0xE100000000000000LL, v39, v40);
  uint64_t v50 = v42;
  swift_bridgeObjectRelease(v33);
  if (a18)
  {
    uint64_t v43 = a17;
    uint64_t v44 = a18;
  }

  else
  {
    if (qword_100087130 != -1) {
      swift_once(&qword_100087130, sub_100051030);
    }
    uint64_t v43 = qword_10008F3D0;
    uint64_t v44 = *(void *)algn_10008F3D8;
    swift_bridgeObjectRetain(*(void *)algn_10008F3D8);
  }

  a9[3] = type metadata accessor for SubscriptionRegisterOperation(0LL);
  a9[4] = &off_100080100;
  id v45 = sub_100023D5C(a9);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain_n(a18, 2LL);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(a14);
  swift_bridgeObjectRetain(a11);
  *(void *)&__int128 v49 = swift_bridgeObjectRetain(a8);
  *((void *)&v49 + 1) = a10;
  *(void *)&__int128 v48 = a6;
  *((void *)&v48 + 1) = a7;
  *(void *)&__int128 v47 = a18;
  *((void *)&v47 + 1) = a5;
  *(void *)&__int128 v46 = v53;
  *((void *)&v46 + 1) = a17;
  sub_10002F400( &v63,  v30,  v52,  v62,  v61,  a1,  a2,  v60,  (uint64_t)v45,  v46,  v47,  v48,  v49,  a11,  a12 & 1,  a13,  a14,  a15,  v29,  v41,  v50,  v43,  v44);
  sub_10000C248();
}

uint64_t sub_100023B9C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = v5;
  sub_10000CC1C(v6, (uint64_t)v18);
  uint64_t v12 = *(void *)(v6 + 40);
  sub_10000CC1C(v6 + 96, (uint64_t)v17);
  sub_10000CC1C(v6 + 136, (uint64_t)v16);
  a5[3] = (uint64_t)&type metadata for SubscriptionUnregisterOperation;
  a5[4] = (uint64_t)&off_10007FE50;
  uint64_t v13 = swift_allocObject(&unk_10007F8A8, 184LL, 7LL);
  uint64_t v14 = (void *)(v13 + 16);
  *a5 = v13;
  swift_retain(v12);
  sub_100019194();
  sub_10001991C();
  return sub_10002AB30(v18, v12, v17, v16, a1, a2, a3, a4, v14);
}

void sub_100023C7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t refreshed = type metadata accessor for SportsManager.RefreshOptions(0LL);
  uint64_t v10 = *(void *)(refreshed - 8);
  __chkstk_darwin(refreshed);
  sub_100019488();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = *(void *)(v4 + 40);
  uint64_t v15 = *(void *)(v4 + 48);
  sub_100023F58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, a3, refreshed);
  a4[3] = type metadata accessor for SubscriptionRefreshOperation(0LL);
  a4[4] = &off_100082158;
  uint64_t v16 = sub_100023D5C(a4);
  swift_retain(v14);
  swift_retain(v15);
  sub_10001991C();
  sub_1000619B8(v14, v15, &v17, a1, a2, 1, v13, (uint64_t)v16);
  sub_10000C248();
}

void *sub_100023D5C(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_100023D98()
{
  return swift_deallocObject(v0, 184LL, 7LL);
}

uint64_t sub_100023DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006BEC(&qword_100087EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100023E2C()
{
  unint64_t result = qword_100087B08;
  if (!qword_100087B08)
  {
    uint64_t v1 = sub_100006E94(&qword_100087B00);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100087B08);
  }

  return result;
}

void sub_100023E70( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100019488();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = *(void *)(v6 + 40);
  sub_100023F58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v16, a3, v12);
  a6[3] = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0LL);
  a6[4] = &off_1000804A8;
  uint64_t v18 = sub_100023D5C(a6);
  swift_retain(v17);
  sub_100019194();
  sub_10001991C();
  sub_10003F4F8(v17, &v20, a1, a2, v16, 1, a4, a5, v18);
  sub_10000C248();
}

uint64_t sub_100023F58()
{
  return sub_10000CC1C(v0 + 96, v1 - 120);
}

uint64_t sub_100023F64()
{
  uint64_t result = sub_100023F84();
  static Secrets.tempoAPIKey = result;
  qword_10008F1F0 = v1;
  return result;
}

uint64_t sub_100023F84()
{
  uint64_t v0 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = static Array._allocateBufferUninitialized(minimumCapacity:)(64LL, &type metadata for UInt8);
  *(void *)(v3 + 1sub_100006E64(v0 + 6) = 64LL;
  *(_OWORD *)(v3 + 3sub_100006E64(v0 + 2) = 0u;
  *(_OWORD *)(v3 + 4sub_100006E64(v0 + 8) = 0u;
  *(_OWORD *)(v3 + 6sub_100006E64(v0 + 4) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  uint64_t v15 = v3;
  sub_1000243B4(0xD000000000000016LL, 0x800000010006B830LL, 0xD000000000000016LL, 0x800000010006B830LL, (uint64_t)&v15);
  uint64_t v4 = v15;
  sub_10002448C((uint64_t)&off_10007E080, v15);
  uint64_t v6 = v5;
  uint64_t v7 = swift_bridgeObjectRelease(v4);
  uint64_t v15 = v6;
  static String.Encoding.utf8.getter(v7);
  uint64_t v8 = sub_100006BEC(&qword_100087EA8);
  unint64_t v9 = sub_1000247D4();
  uint64_t v10 = String.init<A>(bytes:encoding:)(&v15, v2, v8, v9);
  uint64_t v12 = v11;
  uint64_t result = swift_bridgeObjectRelease(v6);
  if (v12) {
    return v10;
  }
  __break(1u);
  return result;
}

void static Secrets.read(key:salt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = swift_bridgeObjectRetain(a3);
  uint64_t v4 = sub_100024870(v3, (uint64_t)&type metadata for UInt8);
  uint64_t v5 = sub_100024818(v4);
  sub_100024834(v5);
  uint64_t v6 = sub_10001919C();
  sub_100024860(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  sub_10001919C();
  sub_100024850();
}

uint64_t *Secrets.tempoAPIKey.unsafeMutableAddressor()
{
  if (qword_100087040 != -1) {
    swift_once(&qword_100087040, sub_100023F64);
  }
  return &static Secrets.tempoAPIKey;
}

uint64_t static Secrets.tempoAPIKey.getter()
{
  if (qword_100087040 != -1) {
    swift_once(&qword_100087040, sub_100023F64);
  }
  sub_10002487C((uint64_t)&static Secrets.tempoAPIKey, (uint64_t)v2, 0LL);
  uint64_t v0 = static Secrets.tempoAPIKey;
  swift_bridgeObjectRetain(qword_10008F1F0);
  return v0;
}

uint64_t static Secrets.tempoAPIKey.setter(uint64_t a1, uint64_t a2)
{
  if (qword_100087040 != -1) {
    swift_once(&qword_100087040, sub_100023F64);
  }
  sub_10002487C((uint64_t)&static Secrets.tempoAPIKey, (uint64_t)v6, 1LL);
  uint64_t v4 = qword_10008F1F0;
  static Secrets.tempoAPIKey = a1;
  qword_10008F1F0 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*static Secrets.tempoAPIKey.modify(uint64_t a1))(void)
{
  if (qword_100087040 != -1) {
    swift_once(&qword_100087040, sub_100023F64);
  }
  sub_10002487C((uint64_t)&static Secrets.tempoAPIKey, a1, 33LL);
  return j__swift_endAccess;
}

unsigned __int8 *sub_1000242A0@<X0>( const void *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, unsigned __int8 **a5@<X8>)
{
  if ((a3 & 0x1000000000000000LL) != 0)
  {
    unint64_t v8 = String.UTF8View._foreignCount()();
    if ((v8 & 0x8000000000000000LL) != 0)
    {
      uint64_t v9 = "Negative value is not representable";
      uint64_t v10 = 35LL;
      goto LABEL_6;
    }
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0)
    {
LABEL_7:
      unint64_t v8 = HIBYTE(a3) & 0xF;
      goto LABEL_8;
    }

    unint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
  }

  if (HIDWORD(v8))
  {
    uint64_t v9 = "Not enough bits to represent the passed value";
    uint64_t v10 = 45LL;
LABEL_6:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v9, v10, 2LL, "Swift/Integers.swift", 20LL);
    __break(1u);
    goto LABEL_7;
  }

LABEL_8:
  sub_1000245B4(0LL);
  uint64_t result = CC_SHA512(a1, v8, (unsigned __int8 *)(*(void *)a4 + 32LL));
  *a5 = result;
  return result;
}

  sub_10000C248();
}

  uint64_t v6 = sub_10004228C();
  if (!v6)
  {
    uint64_t v7 = 0xE700000000000000LL;
    goto LABEL_12;
  }

  if (v6 == 1)
  {
    uint64_t v7 = 0xE900000000000067LL;
    uint64_t v1 = 0x6E69747563657865LL;
LABEL_12:
    _stringCompareWithSmolCheck(_:_:expecting:)(v1, v7, 0x64656873696E6966LL, 0xE800000000000000LL, 0LL);
  }

  sub_100019278();
LABEL_14:
  sub_10001942C();
}

unsigned __int8 *sub_1000243B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRelease(a4);
    return 0LL;
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v11[0] = a1;
      v11[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v9 = v11;
    }

    else if ((a1 & 0x1000000000000000LL) != 0)
    {
      uint64_t v9 = (void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v9 = (void *)_StringObject.sharedUTF8.getter(a1, a2);
    }

    sub_1000242A0(v9, a3, a4, a5, &v12);
    if (v5)
    {
      return (unsigned __int8 *)swift_bridgeObjectRelease(a4);
    }

    else
    {
      swift_bridgeObjectRelease(a4);
      return v12;
    }
  }

void sub_10002448C(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v5 = static Array._allocateBufferUninitialized(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for UInt8);
    *(void *)(v5 + 1sub_100006E64(v0 + 6) = v2;
    bzero((void *)(v5 + 32), v2);
    if (v2 > *(void *)(a2 + 16))
    {
      __break(1u);
    }

    else
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(_BYTE *)(v5 + i + 3sub_100006E64(v0 + 2) = *(_BYTE *)(a2 + 32 + i) ^ *(_BYTE *)(a1 + 32 + i);
    }
  }

void static Secrets.generate(key:salt:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100024614(a1, a2);
  swift_bridgeObjectRelease(a2);
  uint64_t v8 = swift_bridgeObjectRetain(a4);
  uint64_t v9 = sub_100024870(v8, (uint64_t)&type metadata for UInt8);
  uint64_t v10 = sub_100024818(v9);
  sub_100024834(v10);
  uint64_t v11 = sub_10001919C();
  sub_100024860(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  swift_release(v7);
  sub_10001919C();
  sub_100024850();
}

void sub_1000245B4(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || a1 > *(void *)(v3 + 24) >> 1)
  {
    sub_100014BB0();
    uint64_t v3 = v4;
  }

  *uint64_t v1 = v3;
}

void *sub_100024614(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return _swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
LABEL_6:
  uint64_t v5 = sub_100024770(v4, 0LL);
  if (v4 < 0)
  {
    sub_100019110();
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    sub_100019110();
    uint64_t v9 = "Insufficient space allocated to copy string contents";
    uint64_t v10 = "Swift/StringUTF8View.swift";
    uint64_t v11 = 52LL;
    uint64_t v12 = 26LL;
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  sub_100019110();
  uint64_t v9 = "invalid Collection: less than 'count' elements in collection";
  uint64_t v10 = "Swift/ContiguousArrayBuffer.swift";
  uint64_t v11 = 60LL;
  uint64_t v12 = 33LL;
LABEL_15:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v9, v11, 2LL, v10, v12);
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Secrets()
{
  return &type metadata for Secrets;
}

void *sub_100024770(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100006BEC(&qword_100087AF0);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

unint64_t sub_1000247D4()
{
  unint64_t result = qword_100087EB0;
  if (!qword_100087EB0)
  {
    uint64_t v1 = sub_100006E94(&qword_100087EA8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100087EB0);
  }

  return result;
}

uint64_t sub_100024818(uint64_t a1)
{
  *(void *)(a1 + 1sub_100006E64(v0 + 6) = v2;
  *(_OWORD *)(a1 + 3sub_100006E64(v0 + 2) = 0u;
  *(_OWORD *)(a1 + 4sub_100006E64(v0 + 8) = 0u;
  *(_OWORD *)(a1 + 6sub_100006E64(v0 + 4) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  return swift_bridgeObjectRetain(v1);
}

unsigned __int8 *sub_100024834(uint64_t a1, ...)
{
  return sub_1000243B4(v2, v1, v2, v1, (uint64_t)va);
}

  ;
}

void sub_100024860( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_100024870(uint64_t a1, uint64_t a2)
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)(64LL, a2);
}

uint64_t sub_10002487C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0LL);
}

uint64_t sub_100024884()
{
  uint64_t v0 = type metadata accessor for CharacterSet(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for ContainerConstants(0LL);
  static ContainerConstants.defaultSuiteName.getter();
  id v4 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  id v5 = sub_100027D54();
  if (!v5) {
    return 0LL;
  }
  id v6 = v5;
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 stringForKey:v7];

  if (!v8)
  {

    return 0LL;
  }

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  uint64_t v19 = v9;
  uint64_t v20 = v11;
  static CharacterSet.whitespacesAndNewlines.getter(v12);
  unint64_t v13 = sub_10000EB58();
  uint64_t v14 = StringProtocol.trimmingCharacters(in:)(v3, &type metadata for String, v13);
  unint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease(v20);

  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = v14 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17)
  {
    swift_bridgeObjectRelease(v16);
    return 0LL;
  }

  return v14;
}

uint64_t sub_100024A04()
{
  uint64_t v1 = v0;
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v1);
  qword_10008F1F8 = (uint64_t)v2;
  unk_10008F200 = 0xD00000000000001FLL;
  qword_10008F208 = 0x800000010006BA70LL;
  return result;
}

NSString sub_100024A68()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10008F210 = (uint64_t)result;
  unk_10008F218 = 0xD000000000000020LL;
  qword_10008F220 = 0x800000010006BA10LL;
  return result;
}

uint64_t sub_100024AB4()
{
  NSString v0 = String._bridgeToObjectiveC()();
  uint64_t v1 = sub_100006BEC(&qword_100088010);
  uint64_t v2 = swift_allocObject(v1, 96LL, 7LL);
  *(_OWORD *)(v2 + 1sub_100006E64(v0 + 6) = xmmword_100067230;
  *(void *)(v2 + 5sub_100006E64(v0 + 6) = &type metadata for String;
  *(void *)(v2 + 3sub_100006E64(v0 + 2) = 0x427363697274656DLL;
  *(void *)(v2 + 40) = 0xEB00000000657361LL;
  uint64_t v3 = sub_100006BEC(&qword_100087500);
  uint64_t inited = swift_initStackObject(v3, v7);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067230;
  *(void *)(inited + 3sub_100006E64(v0 + 2) = 0xD000000000000010LL;
  *(void *)(inited + 40) = 0x800000010006B9C0LL;
  *(void *)(inited + 4sub_100006E64(v0 + 8) = 0x312D313434333431LL;
  *(void *)(inited + 5sub_100006E64(v0 + 6) = 0xE800000000000000LL;
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String);
  *(void *)(v2 + 8sub_100006E64(v0 + 8) = sub_100006BEC(&qword_100087B50);
  *(void *)(v2 + 6sub_100006E64(v0 + 4) = v5;
  sub_10001906C(0LL, &qword_100087FF8, &OBJC_CLASS___NSDictionary_ptr);
  uint64_t result = NSDictionary.init(dictionaryLiteral:)(v2);
  qword_10008F228 = (uint64_t)v0;
  qword_10008F230 = result;
  return result;
}

NSString sub_100024C00()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10008F238 = (uint64_t)result;
  unk_10008F240 = 0x53552D6E65LL;
  qword_10008F248 = 0xE500000000000000LL;
  return result;
}

NSString sub_100024C50()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10008F250 = (uint64_t)result;
  *(void *)algn_10008F258 = 5LL;
  return result;
}

NSString sub_100024C8C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10008F260 = (uint64_t)result;
  *(void *)algn_10008F268 = 10LL;
  return result;
}

NSString sub_100024CC8()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10008F270 = (uint64_t)result;
  *(void *)algn_10008F278 = 172800LL;
  return result;
}

void *sub_100024D08()
{
  uint64_t v0 = type metadata accessor for BagProvider();
  swift_allocObject(v0, 80LL, 7LL);
  NSString result = sub_100024DC8();
  qword_10008F280 = (uint64_t)result;
  return result;
}

id sub_100024D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v8 = sub_100027DB0();
  swift_bridgeObjectRelease(a4);
  id v9 = [(id)swift_getObjCClassFromMetadata(v4) bagForProfile:v7 profileVersion:v8];

  return v9;
}

void *sub_100024DC8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_100006BEC(&qword_100087F90);
  uint64_t v65 = *(void *)(v3 - 8);
  uint64_t v66 = v3;
  __chkstk_darwin(v3);
  uint64_t v64 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = sub_100006BEC(&qword_100087F98);
  uint64_t v5 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  NSString v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001906C(0LL, (unint64_t *)&qword_100087FA0, &OBJC_CLASS___AMSBag_ptr);
  id v8 = sub_100024D40(0x647374726F7073LL, 0xE700000000000000LL, 49LL, 0xE100000000000000LL);
  v0[2] = v8;
  if (qword_100087048 != -1)
  {
    swift_once(&qword_100087048, sub_100024A04);
    id v8 = (id)v0[2];
  }

  id v9 = (void *)qword_10008F1F8;
  uint64_t v10 = qword_10008F200;
  uint64_t v11 = qword_10008F208;
  id v12 = v8;
  uint64_t v13 = sub_1000253F8(v9, v10, v11, (uint64_t)v12);

  uint64_t v69 = v13;
  uint64_t v14 = sub_100006BEC(&qword_1000874C0);
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v68 = v2;
  uint64_t v16 = v15;
  uint64_t v17 = sub_10000EBD4( &qword_1000874C8,  &qword_1000874C0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v63 = v16;
  Publisher.map<A>(_:)(sub_100025848, 0LL, v14, v16);
  swift_release(v13);
  uint64_t v18 = sub_10000EBD4( &qword_100087FA8,  &qword_100087F98,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v19 = v67;
  uint64_t v20 = Publisher.eraseToAnyPublisher()(v67, v18);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v7, v19);
  v1[3] = v20;
  if (qword_100087050 != -1) {
    swift_once(&qword_100087050, sub_100024A68);
  }
  uint64_t v22 = (void *)qword_10008F210;
  uint64_t v23 = qword_10008F218;
  uint64_t v24 = qword_10008F220;
  id v25 = (id)v1[2];
  uint64_t v26 = sub_1000253F8(v22, v23, v24, (uint64_t)v25);

  uint64_t v69 = v26;
  Publisher.map<A>(_:)(sub_100025868, 0LL, v14, v63);
  swift_release(v26);
  uint64_t v27 = v67;
  uint64_t v28 = Publisher.eraseToAnyPublisher()(v67, v18);
  v21(v7, v27);
  v1[4] = v28;
  if (qword_100087058 != -1) {
    swift_once(&qword_100087058, sub_100024AB4);
  }
  uint64_t v29 = (void *)qword_10008F228;
  uint64_t v30 = (void *)qword_10008F230;
  id v31 = (id)v1[2];
  uint64_t v32 = sub_1000259E4(v29, v30, v31);

  uint64_t v69 = v32;
  uint64_t v33 = sub_100006BEC(&qword_100087FB0);
  sub_10000EBD4(&qword_100087FB8, &qword_100087FB0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v34 = v64;
  Publisher.map<A>(_:)(sub_100025B74, 0LL, v33, &type metadata for String);
  swift_release(v32);
  uint64_t v35 = sub_10000EBD4( &qword_100087FC0,  &qword_100087F90,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v36 = v66;
  uint64_t v37 = Publisher.eraseToAnyPublisher()(v66, v35);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v34, v36);
  v1[5] = v37;
  if (qword_100087060 != -1) {
    swift_once(&qword_100087060, sub_100024C00);
  }
  uint64_t v38 = (void *)qword_10008F238;
  uint64_t v39 = unk_10008F240;
  uint64_t v40 = qword_10008F248;
  id v41 = (id)v1[2];
  uint64_t v42 = sub_1000253F8(v38, v39, v40, (uint64_t)v41);

  uint64_t v69 = v42;
  uint64_t v43 = Publisher.eraseToAnyPublisher()(v14, v17);
  swift_release(v42);
  v1[6] = v43;
  if (qword_100087068 != -1) {
    swift_once(&qword_100087068, sub_100024C50);
  }
  uint64_t v44 = (void *)qword_10008F250;
  uint64_t v45 = *(void *)algn_10008F258;
  id v46 = (id)v1[2];
  uint64_t v47 = sub_100025EF4(v44, v45, v46);

  uint64_t v69 = v47;
  uint64_t v48 = sub_100006BEC(&qword_100087FC8);
  uint64_t v49 = sub_10000EBD4( (unint64_t *)&qword_100087FD0,  &qword_100087FC8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v50 = Publisher.eraseToAnyPublisher()(v48, v49);
  swift_release(v47);
  v1[7] = v50;
  if (qword_100087070 != -1) {
    swift_once(&qword_100087070, sub_100024C8C);
  }
  uint64_t v51 = (void *)qword_10008F260;
  uint64_t v52 = *(void *)algn_10008F268;
  id v53 = (id)v1[2];
  uint64_t v54 = sub_100025EF4(v51, v52, v53);

  uint64_t v69 = v54;
  uint64_t v55 = Publisher.eraseToAnyPublisher()(v48, v49);
  swift_release(v54);
  v1[8] = v55;
  if (qword_100087078 != -1) {
    swift_once(&qword_100087078, sub_100024CC8);
  }
  uint64_t v56 = (void *)qword_10008F270;
  uint64_t v57 = *(void *)algn_10008F278;
  id v58 = (id)v1[2];
  uint64_t v59 = sub_100025EF4(v56, v57, v58);

  uint64_t v69 = v59;
  uint64_t v60 = Publisher.eraseToAnyPublisher()(v48, v49);
  swift_release(v59);
  v1[9] = v60;
  return v1;
}

uint64_t sub_1000253F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a2;
  uint64_t v51 = a4;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = ((uint64_t (*)(void))__chkstk_darwin)();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v50 - v10;
  uint64_t v12 = sub_100006BEC(&qword_100087B78);
  uint64_t v53 = *(void *)(v12 - 8);
  uint64_t v54 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v16 = v15;
  uint64_t v52 = sub_100024884();
  unint64_t v18 = v17;
  uint64_t v19 = swift_bridgeObjectRelease(v16);
  if (v18)
  {
    uint64_t v20 = a3;
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000B928(v21, (uint64_t)qword_10008F348);
    id v22 = a1;
    swift_bridgeObjectRetain_n(a3, 2LL);
    swift_bridgeObjectRetain_n(v18, 2LL);
    id v23 = v22;
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v51 = swift_slowAlloc(64LL, -1LL);
      v56[0] = v51;
      *(_DWORD *)uint64_t v26 = 136315394;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      uint64_t v28 = v20;
      unint64_t v30 = v29;
      uint64_t v55 = sub_100015AD4(v27, v29, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease_n(v28, 2LL);

      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v26 + sub_100006E64(v0 + 12) = 2080;
      swift_bridgeObjectRetain(v18);
      uint64_t v31 = v52;
      uint64_t v55 = sub_100015AD4(v52, v18, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease_n(v18, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "BagProvider: Successfully resolved preferred AMSBag(%s) value: %s",  (uint8_t *)v26,  0x16u);
      uint64_t v32 = v51;
      swift_arrayDestroy(v51, 2LL);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v18, 2LL);
      swift_bridgeObjectRelease_n(v20, 2LL);

      uint64_t v31 = v52;
    }

    v56[0] = v31;
    v56[1] = v18;
    Just.init(_:)(v56);
    uint64_t v47 = sub_10000EBD4(&qword_100087B98, &qword_100087B78, (uint64_t)&protocol conformance descriptor for Just<A>);
    uint64_t v48 = v54;
    uint64_t v46 = Publisher.eraseToAnyPublisher()(v54, v47);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v48);
  }

  else
  {
    Date.init()(v19);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))( (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v11,  v6);
    uint64_t v33 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v34 = (v33 + 48) & ~v33;
    uint64_t v35 = (char *)swift_allocObject(&unk_10007FA68, v34 + v8, v33 | 7);
    uint64_t v36 = v6;
    uint64_t v37 = a3;
    uint64_t v38 = v50;
    uint64_t v39 = (void *)v51;
    *((void *)v35 + sub_100006E64(v0 + 2) = v51;
    *((void *)v35 + 3) = a1;
    *((void *)v35 + sub_100006E64(v0 + 4) = v38;
    *((void *)v35 + sub_100006E64(v0 + 5) = v37;
    uint64_t v40 = v36;
    (*(void (**)(char *, char *))(v7 + 32))(&v35[v34], (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v41 = sub_100006BEC(&qword_100088018);
    swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
    id v42 = a1;
    id v43 = v39;
    swift_bridgeObjectRetain(v37);
    uint64_t v44 = Future.init(_:)(sub_100027B2C, v35);
    v56[0] = v44;
    uint64_t v45 = sub_10000EBD4(&qword_100088020, &qword_100088018, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v46 = Publisher.eraseToAnyPublisher()(v41, v45);
    swift_release(v44);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v40);
  }

  return v46;
}

uint64_t sub_100025848@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100025888(a1, &qword_100087048, &qword_10008F200, &qword_10008F208, (uint64_t)sub_100024A04, a2);
}

uint64_t sub_100025868@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100025888(a1, &qword_100087050, &qword_10008F218, &qword_10008F220, (uint64_t)sub_100024A68, a2);
}

uint64_t sub_100025888@<X0>( void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_100006BEC(&qword_100087368);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v20 - v16;
  URL.init(string:)(*a1, a1[1]);
  uint64_t v18 = type metadata accessor for URL(0LL);
  if (*a2 != -1LL) {
    swift_once(a2, a5);
  }
  URL.init(string:)(*a3, *a4);
  uint64_t result = sub_10000AB6C((uint64_t)v15, 1LL, v18);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(a6, v15, v18);
    return sub_1000230C4((uint64_t)v17, &qword_100087368);
  }

  return result;
}

uint64_t sub_1000259E4(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v25 - v12;
  Date.init()(v11);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v13, v6);
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = (v14 + 40) & ~v14;
  uint64_t v16 = (char *)swift_allocObject(&unk_10007F9C8, v15 + v8, v14 | 7);
  *((void *)v16 + sub_100006E64(v0 + 2) = a3;
  *((void *)v16 + 3) = a1;
  *((void *)v16 + sub_100006E64(v0 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v16[v15], v10, v6);
  uint64_t v17 = sub_100006BEC(&qword_100088000);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  id v18 = a3;
  id v19 = a1;
  id v20 = a2;
  uint64_t v21 = Future.init(_:)(sub_100027980, v16);
  v25[1] = v21;
  uint64_t v22 = sub_10000EBD4(&qword_100088008, &qword_100088000, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v23 = Publisher.eraseToAnyPublisher()(v17, v22);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  return v23;
}

void sub_100025B74(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (qword_100087058 != -1) {
    swift_once(&qword_100087058, sub_100024AB4);
  }
  uint64_t v4 = (void *)qword_10008F230;
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 objectForKey:v5];

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v6);
    swift_unknownObjectRelease(v6);
  }

  else
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
  }

  sub_10000CB94((uint64_t)&v21, (uint64_t)&v23);
  if (!*((void *)&v24 + 1)) {
    goto LABEL_16;
  }
  uint64_t v7 = sub_10001906C(0LL, &qword_100087FF8, &OBJC_CLASS___NSDictionary_ptr);
  if ((swift_dynamicCast(v20, &v23, (char *)&type metadata for Any + 8, v7, 6LL) & 1) == 0)
  {
LABEL_17:
    uint64_t v12 = 0LL;
    unint64_t v11 = 0xE000000000000000LL;
    goto LABEL_18;
  }

  uint64_t v8 = *(void **)&v20[0];
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 objectForKey:v9];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)(v10);
    swift_unknownObjectRelease(v10);
  }

  else
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
  }

  sub_10000CB94((uint64_t)&v21, (uint64_t)&v23);
  if (!*((void *)&v24 + 1))
  {

LABEL_16:
    sub_1000230C4((uint64_t)&v23, qword_100087690);
    goto LABEL_17;
  }

  if ((swift_dynamicCast(v20, &v23, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {

    goto LABEL_17;
  }

  unint64_t v11 = *((void *)&v20[0] + 1);
  uint64_t v12 = *(void *)&v20[0];
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v3 objectForKey:v13];

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)(v14);
    swift_unknownObjectRelease(v14);
  }

  else
  {
    memset(v20, 0, sizeof(v20));
  }

  sub_10000CB94((uint64_t)v20, (uint64_t)&v21);
  if (!*((void *)&v22 + 1))
  {

    sub_1000230C4((uint64_t)&v21, qword_100087690);
LABEL_27:
    __int128 v23 = 0u;
    __int128 v24 = 0u;
LABEL_28:
    sub_1000230C4((uint64_t)&v23, qword_100087690);
    goto LABEL_18;
  }

  if ((swift_dynamicCast(&v19, &v21, (char *)&type metadata for Any + 8, v7, 6LL) & 1) == 0)
  {

    goto LABEL_27;
  }

  uint64_t v15 = v19;
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 objectForKey:v16];

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)(v17);
    swift_unknownObjectRelease(v17);
  }

  else
  {

    __int128 v21 = 0u;
    __int128 v22 = 0u;
  }

  sub_10000CB94((uint64_t)&v21, (uint64_t)&v23);
  if (!*((void *)&v24 + 1)) {
    goto LABEL_28;
  }
  if ((swift_dynamicCast(&v21, &v23, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
  {
    unint64_t v18 = *((void *)&v21 + 1);
    uint64_t v12 = v21;
    swift_bridgeObjectRelease(v11);
    unint64_t v11 = v18;
  }

uint64_t sub_100025EF4(void *a1, uint64_t a2, void *a3)
{
  uint64_t v42 = a2;
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  NSString v9 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = sub_100006BEC(&qword_100087FD8);
  uint64_t v44 = *(void *)(v12 - 8);
  uint64_t v45 = v12;
  __chkstk_darwin(v12);
  id v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v16 = v15;
  uint64_t v43 = sub_1000262C0();
  char v18 = v17;
  uint64_t v19 = swift_bridgeObjectRelease(v16);
  if ((v18 & 1) != 0)
  {
    Date.init()(v19);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    uint64_t v30 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v31 = (v30 + 40) & ~v30;
    uint64_t v32 = (char *)swift_allocObject(&unk_10007F928, v31 + v7, v30 | 7);
    *((void *)v32 + sub_100006E64(v0 + 2) = a3;
    *((void *)v32 + 3) = a1;
    *((void *)v32 + sub_100006E64(v0 + 4) = v42;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v32[v31], v9, v5);
    uint64_t v33 = sub_100006BEC(&qword_100087FE0);
    swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    id v34 = a1;
    id v35 = a3;
    uint64_t v36 = Future.init(_:)(sub_100027870, v32);
    uint64_t v47 = v36;
    uint64_t v37 = sub_10000EBD4(&qword_100087FE8, &qword_100087FE0, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v38 = Publisher.eraseToAnyPublisher()(v33, v37);
    swift_release(v36);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }

  else
  {
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_10000B928(v20, (uint64_t)qword_10008F348);
    id v21 = a1;
    __int128 v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc(22LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      uint64_t v47 = v25;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      unint64_t v28 = v27;
      uint64_t v46 = sub_100015AD4(v26, v27, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v24 + 4, v24 + 12);

      swift_bridgeObjectRelease(v28);
      *(_WORD *)(v24 + sub_100006E64(v0 + 12) = 2048;
      uint64_t v29 = v43;
      uint64_t v46 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v24 + 14, v24 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "BagProvider: Successfully resolved preferred AMSBag(%s) value: %ld",  (uint8_t *)v24,  0x16u);
      swift_arrayDestroy(v25, 1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {

      uint64_t v29 = v43;
    }

    uint64_t v47 = v29;
    Just.init(_:)(&v47);
    uint64_t v39 = sub_10000EBD4(&qword_100087FF0, &qword_100087FD8, (uint64_t)&protocol conformance descriptor for Just<A>);
    uint64_t v40 = v45;
    uint64_t v38 = Publisher.eraseToAnyPublisher()(v45, v39);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v14, v40);
  }

  return v38;
}

uint64_t sub_1000262C0()
{
  id v0 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  id v1 = sub_100027D54();
  if (!v1)
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
LABEL_11:
    sub_1000230C4((uint64_t)&v7, qword_100087690);
    return 0LL;
  }

  uint64_t v2 = v1;
  NSString v3 = sub_100027DB0();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v4);
    swift_unknownObjectRelease(v4);
  }

  else
  {
    memset(v6, 0, sizeof(v6));
  }

  sub_10000CB94((uint64_t)v6, (uint64_t)&v7);
  if (!*((void *)&v8 + 1)) {
    goto LABEL_11;
  }
  else {
    return 0LL;
  }
}

void sub_1000263EC(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = swift_allocObject(&unk_10007FA90, 32LL, 7LL);
  *(void *)(v16 + 1sub_100006E64(v0 + 6) = a1;
  *(void *)(v16 + 2sub_100006E64(v0 + 4) = a2;
  swift_retain(a2);
  id v17 = [a3 stringForKey:a4];
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a7, v12);
  uint64_t v18 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  unint64_t v20 = (v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(&unk_10007FAB8, v21 + 16, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22 + v19, v15, v12);
  os_log_type_t v23 = (void *)(v22 + v20);
  uint64_t v24 = v30;
  uint64_t v25 = v31;
  *os_log_type_t v23 = a4;
  v23[1] = v24;
  uint64_t v23[2] = v25;
  uint64_t v26 = (uint64_t (**)(uint64_t, uint64_t, char))(v22 + v21);
  *uint64_t v26 = sub_100027B7C;
  v26[1] = (uint64_t (*)(uint64_t, uint64_t, char))v16;
  aBlock[4] = sub_100027C28;
  uint64_t v33 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100026A64;
  aBlock[3] = &unk_10007FAD0;
  unint64_t v27 = _Block_copy(aBlock);
  uint64_t v28 = v33;
  id v29 = a4;
  swift_bridgeObjectRetain(v25);
  swift_release(v28);
  [v17 valueWithCompletion:v27];
  _Block_release(v27);
}

uint64_t sub_1000265BC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void (*a8)(void), uint64_t a9)
{
  uint64_t v54 = a9;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    id v20 = a1;
    Date.init()();
    double v21 = Date.timeIntervalSince(_:)(a4);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_10000B928(v22, (uint64_t)qword_10008F348);
    id v23 = v20;
    id v24 = a5;
    swift_bridgeObjectRetain_n(a7, 2LL);
    id v25 = v23;
    id v26 = v24;
    unint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v52 = swift_slowAlloc(64LL, -1LL);
      uint64_t v58 = v52;
      *(_DWORD *)uint64_t v29 = 136315650;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v53 = a8;
      unint64_t v32 = v31;
      uint64_t v57 = sub_100015AD4(v30, v31, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease_n(a7, 2LL);

      swift_bridgeObjectRelease(v32);
      *(_WORD *)(v29 + sub_100006E64(v0 + 12) = 2048;
      uint64_t v57 = *(void *)&v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v29 + 14, v29 + 22);
      *(_WORD *)(v29 + 2sub_100006E64(v0 + 2) = 2080;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      unint64_t v35 = v34;
      uint64_t v57 = sub_100015AD4(v33, v34, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v29 + 24, v29 + 32);

      unint64_t v36 = v35;
      a8 = v53;
      swift_bridgeObjectRelease(v36);
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "BagProvider: Successfully resolved AMSBag(%s) value in %f seconds. Value: %s",  (uint8_t *)v29,  0x20u);
      uint64_t v37 = v52;
      swift_arrayDestroy(v52, 2LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a7, 2LL);
    }

    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    uint64_t v49 = v48;
    a8(v47);

    return swift_bridgeObjectRelease(v49);
  }

  else
  {
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    sub_10000B928(v38, (uint64_t)qword_10008F348);
    swift_errorRetain(a3);
    uint64_t v39 = swift_errorRetain(a3);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      uint64_t v58 = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      if (a3)
      {
        swift_getErrorValue(a3, v56, v55);
        uint64_t v44 = Error.localizedDescription.getter(v55[1], v55[2]);
        unint64_t v46 = v45;
      }

      else
      {
        uint64_t v44 = 0LL;
        unint64_t v46 = 0xE000000000000000LL;
      }

      uint64_t v57 = sub_100015AD4(v44, v46, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease(v46);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "BagProvider: Unable to load bag. Using hardcoded default value. Error: %s",  v42,  0xCu);
      swift_arrayDestroy(v43, 1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    return ((uint64_t (*)(uint64_t, uint64_t, void))a8)(a6, a7, 0LL);
  }

void sub_100026A68(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a5;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = swift_allocObject(&unk_10007F950, 32LL, 7LL);
  *(void *)(v15 + 1sub_100006E64(v0 + 6) = a1;
  *(void *)(v15 + 2sub_100006E64(v0 + 4) = a2;
  swift_retain(a2);
  id v16 = [a3 integerForKey:a4];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a6, v11);
  uint64_t v17 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  unint64_t v19 = (v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_10007F978, v20 + 16, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v21 + v18, v14, v11);
  uint64_t v22 = (void *)(v21 + v19);
  uint64_t v23 = v29;
  *uint64_t v22 = a4;
  v22[1] = v23;
  id v24 = (void *)(v21 + v20);
  *id v24 = sub_1000278DC;
  v24[1] = v15;
  aBlock[4] = sub_100027914;
  uint64_t v31 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100026A64;
  aBlock[3] = &unk_10007F990;
  id v25 = _Block_copy(aBlock);
  uint64_t v26 = v31;
  id v27 = a4;
  swift_release(v26);
  [v16 valueWithCompletion:v25];
  _Block_release(v25);
}

void sub_100026C2C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void (*a7)(void, void))
{
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    id v17 = a1;
    Date.init()(v17);
    double v18 = Date.timeIntervalSince(_:)(a4);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10000B928(v19, (uint64_t)qword_10008F348);
    id v20 = v17;
    id v21 = a5;
    id v22 = v20;
    id v23 = v21;
    id v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      uint64_t v48 = v44;
      *(_DWORD *)uint64_t v26 = 136315650;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v28 = a7;
      unint64_t v30 = v29;
      uint64_t v47 = sub_100015AD4(v27, v29, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v26 + 4, v26 + 12);

      unint64_t v31 = v30;
      a7 = v28;
      swift_bridgeObjectRelease(v31);
      *(_WORD *)(v26 + sub_100006E64(v0 + 12) = 2048;
      uint64_t v47 = *(void *)&v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v26 + 14, v26 + 22);
      *(_WORD *)(v26 + 2sub_100006E64(v0 + 2) = 2048;
      id v32 = [v22 integerValue];

      uint64_t v47 = (uint64_t)v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v26 + 24, v26 + 32);

      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "BagProvider: Successfully resolved AMSBag(%s) value in %f seconds. Value: %ld",  (uint8_t *)v26,  0x20u);
      uint64_t v33 = v44;
      swift_arrayDestroy(v44, 1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
    }

    a7([v22 integerValue], 0);
  }

  else
  {
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    sub_10000B928(v34, (uint64_t)qword_10008F348);
    swift_errorRetain(a3);
    uint64_t v35 = swift_errorRetain(a3);
    unint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v39 = swift_slowAlloc(32LL, -1LL);
      uint64_t v48 = v39;
      *(_DWORD *)uint64_t v38 = 136315138;
      if (a3)
      {
        swift_getErrorValue(a3, v46, v45);
        uint64_t v40 = Error.localizedDescription.getter(v45[1], v45[2]);
        unint64_t v42 = v41;
      }

      else
      {
        uint64_t v40 = 0LL;
        unint64_t v42 = 0xE000000000000000LL;
      }

      uint64_t v47 = sub_100015AD4(v40, v42, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease(v42);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "BagProvider: Unable to load bag. Using hardcoded default value. Error: %s",  v38,  0xCu);
      swift_arrayDestroy(v39, 1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    a7(a6, 0LL);
  }

void sub_100027098(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  unint64_t v30 = a5;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = swift_allocObject(&unk_10007F9F0, 32LL, 7LL);
  *(void *)(v15 + 1sub_100006E64(v0 + 6) = a1;
  *(void *)(v15 + 2sub_100006E64(v0 + 4) = a2;
  swift_retain(a2);
  id v16 = [a3 dictionaryForKey:a4];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a6, v11);
  uint64_t v17 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  unint64_t v19 = (v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_10007FA18, v20 + 16, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v21 + v18, v14, v11);
  id v22 = (void *)(v21 + v19);
  id v23 = v30;
  *id v22 = a4;
  v22[1] = v23;
  id v24 = (void *)(v21 + v20);
  *id v24 = sub_1000278DC;
  v24[1] = v15;
  aBlock[4] = sub_100027A78;
  uint64_t v32 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100026A64;
  aBlock[3] = &unk_10007FA30;
  os_log_type_t v25 = _Block_copy(aBlock);
  uint64_t v26 = v32;
  id v27 = a4;
  id v28 = v23;
  swift_release(v26);
  [v16 valueWithCompletion:v25];
  _Block_release(v25);
}

void sub_100027260( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void (*a7)(void *, void), uint64_t a8)
{
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v51 = a8;
    uint64_t v52 = a7;
    id v19 = a1;
    Date.init()(v19);
    double v20 = Date.timeIntervalSince(_:)(a4);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000B928(v21, (uint64_t)qword_10008F348);
    id v22 = v19;
    id v23 = a5;
    id v24 = a6;
    id v25 = v22;
    id v26 = v23;
    id v27 = v24;
    id v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v50 = swift_slowAlloc(64LL, -1LL);
      uint64_t v56 = v50;
      *(_DWORD *)uint64_t v30 = 136315650;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      unint64_t v33 = v32;
      uint64_t v55 = sub_100015AD4(v31, v32, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v30 + 4, v30 + 12);

      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v30 + sub_100006E64(v0 + 12) = 2048;
      uint64_t v55 = *(void *)&v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v30 + 14, v30 + 22);
      *(_WORD *)(v30 + 2sub_100006E64(v0 + 2) = 2080;
      id v34 = [v25 description];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      unint64_t v37 = v36;

      uint64_t v55 = sub_100015AD4(v35, v37, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v30 + 24, v30 + 32);

      swift_bridgeObjectRelease(v37);
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "BagProvider: Successfully resolved AMSBag(%s) value in %f seconds. Value: %s",  (uint8_t *)v30,  0x20u);
      uint64_t v38 = v50;
      swift_arrayDestroy(v50, 2LL);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {
    }

    id v48 = v25;
    v52(a1, 0LL);
  }

  else
  {
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v39 = type metadata accessor for Logger(0LL);
    sub_10000B928(v39, (uint64_t)qword_10008F348);
    swift_errorRetain(a3);
    uint64_t v40 = swift_errorRetain(a3);
    unint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      uint64_t v56 = v44;
      *(_DWORD *)uint64_t v43 = 136315138;
      if (a3)
      {
        swift_getErrorValue(a3, v54, v53);
        uint64_t v45 = Error.localizedDescription.getter(v53[1], v53[2]);
        unint64_t v47 = v46;
      }

      else
      {
        uint64_t v45 = 0LL;
        unint64_t v47 = 0xE000000000000000LL;
      }

      uint64_t v55 = sub_100015AD4(v45, v47, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease(v47);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "BagProvider: Unable to load bag. Using hardcoded default value. Error: %s",  v43,  0xCu);
      swift_arrayDestroy(v44, 1LL);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    a7(a6, 0LL);
  }

void sub_100027720(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  __int128 v8 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  swift_retain(v7);
  id v10 = a2;
  id v9 = a4;
  v8(a2, a3, a4);
  swift_release(v7);
}

uint64_t sub_10002779C()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  swift_release(*(void *)(v0 + 72));
  return v0;
}

uint64_t sub_1000277F0()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t type metadata accessor for BagProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd11BagProvider);
}

uint64_t sub_100027830()
{
  uint64_t v0 = sub_100027D78();
  return sub_100027CA4(v0, v1, v2);
}

uint64_t sub_100027870(uint64_t a1, uint64_t a2)
{
  return sub_10002798C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, char *))sub_100026A68);
}

id sub_10002787C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v5 = [v2 initWithSuiteName:v4];

  return v5;
}

uint64_t sub_1000278E0()
{
  uint64_t v2 = sub_100027D0C();
  sub_100027CB4(v2);

  sub_100027D48();
  uint64_t v3 = sub_100027D68();
  return sub_100027CA4(v3, v4, v5);
}

uint64_t sub_100027914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100027A84(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100026C2C);
}

uint64_t sub_100027920(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100027930(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100027938()
{
  sub_100027D14();
  uint64_t v1 = sub_100027D78();
  return sub_100027CA4(v1, v2, v3);
}

uint64_t sub_100027980(uint64_t a1, uint64_t a2)
{
  return sub_10002798C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, char *))sub_100027098);
}

uint64_t sub_10002798C( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, char *))
{
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(sub_100027D0C() - 8) + 80LL);
  return a3(a1, a2, *((void *)v3 + 2), *((void *)v3 + 3), *((void *)v3 + 4), &v3[(v6 + 40) & ~v6]);
}

uint64_t sub_1000279EC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100027A10(uint64_t a1, char a2)
{
  uint64_t v3 = *(void (**)(uint64_t *))(v2 + 16);
  uint64_t v4 = a1;
  char v5 = a2 & 1;
  v3(&v4);
  sub_100027DBC();
}

uint64_t sub_100027A40()
{
  uint64_t v1 = sub_100027D0C();
  sub_100027CB4(v1);
  sub_100027DA4();

  sub_100027D48();
  uint64_t v2 = sub_100027D68();
  return sub_100027CA4(v2, v3, v4);
}

uint64_t sub_100027A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100027A84(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100027260);
}

uint64_t sub_100027A84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  return a4(a1, a2, a3);
}

uint64_t sub_100027AE4()
{
  uint64_t v1 = sub_100027D78();
  return sub_100027CA4(v1, v2, v3);
}

void sub_100027B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(sub_100027D0C() - 8) + 80LL);
  sub_1000263EC( a1,  a2,  *(void **)(v2 + 16),  *(void **)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  v2 + ((v5 + 48) & ~v5));
}

uint64_t sub_100027B7C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(uint64_t (**)(void *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  char v7 = a3 & 1;
  return v4(v6);
}

uint64_t sub_100027BB4()
{
  uint64_t v1 = sub_100027D0C();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  sub_100027DA4();
  swift_bridgeObjectRelease(*(void *)(v4 + 16));
  sub_100027D48();
  uint64_t v5 = sub_100027D68();
  return sub_100027CA4(v5, v6, v7);
}

uint64_t sub_100027C28(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000265BC( a1,  a2,  a3,  v9,  v10,  v11,  *(void *)(v7 + 16),  *(void (**)(void))(v3 + v8),  *(void *)(v3 + v8 + 8));
}

uint64_t sub_100027CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_100027CB4(uint64_t a1)
{
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))( v1 + ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL)),  a1);
}

void sub_100027CF4()
{
}

uint64_t sub_100027D0C()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_100027D14()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

  ;
}

uint64_t sub_100027D48()
{
  return swift_release(*(void *)(v0 + v1 + 8));
}

id sub_100027D54()
{
  return sub_10002787C(v0, v1);
}

uint64_t sub_100027D68()
{
  return v0;
}

uint64_t sub_100027D78()
{
  return v0;
}

  ;
}

void sub_100027D9C()
{
}

void sub_100027DA4()
{
}

NSString sub_100027DB0()
{
  return String._bridgeToObjectiveC()();
}

  ;
}

id sub_100027DC8(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = sub_100006BEC(&qword_100088028);
  uint64_t inited = swift_initStackObject(v6, &v12);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067230;
  *(void *)(inited + 3sub_100006E64(v0 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 7sub_100006E64(v0 + 2) = &type metadata for String;
  *(void *)(inited + 4sub_100006E64(v0 + 8) = a2;
  *(void *)(inited + 5sub_100006E64(v0 + 6) = a3;
  swift_bridgeObjectRetain(a3);
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String);
  id v10 = objc_allocWithZone(&OBJC_CLASS___NSError);
  return sub_100027EB0(0xD000000000000017LL, 0x800000010006BA90LL, v5, v9);
}

id sub_100027EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    v9.super.Class isa = 0LL;
  }

  id v10 = [v4 initWithDomain:v8 code:a3 userInfo:v9.super.isa];

  return v10;
}

void sub_100027F5C( _xpc_activity_s *a1, uint64_t a2, void (*a3)(uint64_t (*)(char a1), uint64_t))
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSDictionary v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  xpc_activity_state_t state = xpc_activity_get_state(a1);
  if (state == 2)
  {
    BOOL v19 = xpc_activity_set_state(a1, 4LL);
    if (v19)
    {
      uint64_t v20 = swift_allocObject(&unk_10007FB08, 64LL, 7LL);
      *(void *)(v20 + 1sub_100006E64(v0 + 6) = a1;
      __int128 v21 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v20 + 2sub_100006E64(v0 + 4) = *(_OWORD *)a2;
      *(_OWORD *)(v20 + 40) = v21;
      *(void *)(v20 + 5sub_100006E64(v0 + 6) = *(void *)(a2 + 32);
      sub_10002856C(a2);
      swift_unknownObjectRetain(a1);
      a3(sub_100028560, v20);
      swift_release(v20);
    }

    if (qword_1000870E8 != -1) {
      swift_once(&qword_1000870E8, sub_10004BEA8);
    }
    uint64_t v22 = sub_10000B928(v6, (uint64_t)qword_10008F318);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v22, v6);
    uint64_t v23 = *(void *)a2;
    unint64_t v24 = *(void *)(a2 + 8);
    uint64_t v25 = swift_bridgeObjectRetain_n(v24, 2LL);
    id v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = sub_100019148(22LL);
      uint64_t v38 = (os_log_s *)sub_100019148(64LL);
      uint64_t v40 = v38;
      *(_DWORD *)uint64_t v28 = 136315394;
      HIDWORD(v37) = v19;
      swift_bridgeObjectRetain(v24);
      uint64_t v39 = sub_100015AD4(v23, v24, (uint64_t *)&v40);
      sub_10002859C(v39, v29, v30, v28 + 12);
      sub_100028594();
      sub_100028594();
      sub_100028594();
      *(_WORD *)(v28 + sub_100006E64(v0 + 12) = 2080;
      if (HIDWORD(v37)) {
        uint64_t v31 = 0x49554E49544E4F43LL;
      }
      else {
        uint64_t v31 = 0xD000000000000012LL;
      }
      if (HIDWORD(v37)) {
        unint64_t v32 = 0xEA0000000000474ELL;
      }
      else {
        unint64_t v32 = 0x800000010006BAB0LL;
      }
      uint64_t v39 = sub_100015AD4(v31, v32, (uint64_t *)&v40);
      sub_10002859C(v39, v33, v34, v28 + 22);
      swift_bridgeObjectRelease(v32);
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Activity '%s' completed with state %s",  (uint8_t *)v28,  0x16u);
      uint64_t v35 = v38;
      swift_arrayDestroy(v38, 2LL);
      sub_1000190E8((uint64_t)v35);
      sub_1000190E8(v28);
    }

    else
    {
      sub_100028594();
      sub_100028594();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  else if (!state)
  {
    xpc_object_t v11 = xpc_activity_copy_criteria(a1);
    xpc_object_t v12 = v11;
    if (v11 && xpc_dictionary_get_BOOL(v11, XPC_ACTIVITY_REPEATING))
    {
      if (qword_1000870E8 != -1) {
        swift_once(&qword_1000870E8, sub_10004BEA8);
      }
      sub_10000B928(v6, (uint64_t)qword_10008F318);
      uint64_t v13 = *(void *)a2;
      unint64_t v14 = *(void *)(a2 + 8);
      uint64_t v15 = swift_bridgeObjectRetain_n(v14, 2LL);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v15);
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v38, v16))
      {
        uint64_t v17 = (uint8_t *)sub_100019148(12LL);
        uint64_t v18 = sub_100019148(32LL);
        uint64_t v40 = (os_log_s *)v18;
        *(_DWORD *)uint64_t v17 = 136315138;
        swift_bridgeObjectRetain(v14);
        uint64_t v39 = sub_100015AD4(v13, v14, (uint64_t *)&v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v17 + 4, v17 + 12);
        sub_100028594();
        sub_100028594();
        sub_100028594();
        _os_log_impl((void *)&_mh_execute_header, v38, v16, "Activity '%s' has been registered, continuing.", v17, 0xCu);
        swift_arrayDestroy(v18, 1LL);
        sub_1000190E8(v18);
        sub_1000190E8((uint64_t)v17);
        swift_unknownObjectRelease(v12);
      }

      else
      {
        swift_unknownObjectRelease(v12);
        sub_100028594();
        sub_100028594();
      }
    }

    else
    {
      xpc_object_t v36 = xpc_dictionary_create(0LL, 0LL, 0LL);
      xpc_dictionary_set_BOOL(v36, XPC_ACTIVITY_REPEATING, *(_BYTE *)(a2 + 16));
      xpc_dictionary_set_int64(v36, XPC_ACTIVITY_DELAY, *(void *)(a2 + 24));
      xpc_dictionary_set_int64(v36, XPC_ACTIVITY_GRACE_PERIOD, *(void *)(a2 + 32));
      xpc_dictionary_set_string(v36, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      xpc_dictionary_set_BOOL(v36, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_activity_set_criteria(a1, v36);
      swift_unknownObjectRelease(v36);
      swift_unknownObjectRelease(v12);
    }
  }

uint64_t sub_10002848C(char a1, xpc_activity_t activity, void *a3)
{
  if ((a1 & 1) != 0)
  {
    uint64_t result = xpc_activity_set_state(activity, 5LL);
    if ((_DWORD)result)
    {
      uint64_t result = (uint64_t)xpc_activity_copy_criteria(activity);
      if (result)
      {
        uint64_t v5 = result;
        xpc_activity_set_criteria(activity, (xpc_object_t)result);
        return swift_unknownObjectRelease(v5);
      }
    }
  }

  else
  {
    uint64_t v6 = String.utf8CString.getter(*a3, a3[1]);
    xpc_activity_unregister((const char *)(v6 + 32));
    return swift_release(v6);
  }

  return result;
}

uint64_t sub_10002850C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100028534()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100028560(char a1)
{
  return sub_10002848C(a1, *(xpc_activity_t *)(v1 + 16), (void *)(v1 + 24));
}

uint64_t sub_10002856C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100028594()
{
  return sub_10002850C(v0);
}

uint64_t sub_10002859C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 96, v5, v4, a4);
}

void *sub_1000285AC()
{
  uint64_t v0 = type metadata accessor for ServicesRepository();
  swift_allocObject(v0, 256LL, 7LL);
  uint64_t result = sub_1000285E4();
  qword_10008F288 = (uint64_t)result;
  return result;
}

void *sub_1000285E4()
{
  uint64_t v1 = v0;
  unint64_t v2 = 0xED000064656C6261LL;
  uint64_t v3 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v0[31] = &_swiftEmptySetSingleton;
  type metadata accessor for ApsMessageProcessor();
  uint64_t v6 = sub_100063E8C();
  uint64_t v44 = (uint64_t *)swift_retain(v6);
  uint64_t v7 = sub_100029268(v44);
  uint64_t v8 = type metadata accessor for ApsListener();
  v1[25] = v7;
  v1[28] = v8;
  v1[29] = &off_10007F440;
  uint64_t v47 = 0LL;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  if ((sub_10002A6EC() & 1) != 0)
  {
    _stringCompareWithSmolCheck(_:_:expecting:)( 0x69446C616373656DLL,  0xEE0064656C626173LL,  0x6E456C616373656DLL,  0xED000064656C6261LL,  0LL);
    unint64_t v2 = 0xEE0064656C626173LL;
  }

  swift_bridgeObjectRelease(v2);
  if (qword_100087080 != -1) {
    swift_once(&qword_100087080, sub_100024D08);
  }
  uint64_t v9 = qword_10008F280;
  uint64_t v55 = (ValueMetadata *)type metadata accessor for BagProvider();
  uint64_t v56 = &off_10007F8E0;
  uint64_t v43 = v55;
  *(void *)&__int128 v54 = v9;
  swift_retain(v9);
  sub_1000059F8();
  if (qword_100087128 != -1) {
    swift_once(&qword_100087128, sub_10005065C);
  }
  uint64_t v10 = qword_10008F3C8;
  uint64_t v42 = qword_10008F3C8;
  uint64_t v11 = qword_10008F280;
  sub_10000CC1C((uint64_t)(v1 + 25), (uint64_t)&v54);
  uint64_t v12 = sub_10002931C((uint64_t)&v54, (uint64_t)v55);
  __chkstk_darwin(v12);
  unint64_t v14 = (uint64_t *)((char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  sub_100006DF0((uint64_t)v57, (uint64_t)&v45);
  uint64_t v16 = *v14;
  swift_retain_n(v10, 2LL);
  uint64_t v41 = v11;
  swift_retain(v11);
  id v17 = sub_100029344(0xD000000000000022LL, 0x800000010006BB70LL, v16, v11, &v45, v10);
  sub_100006E64(&v54);
  v1[2] = v17;
  sub_1000295B4();
  id v18 = sub_100028BA8(0xD000000000000015LL, 0x800000010006BBA0LL);
  v1[30] = v18;
  [v18 setDelegate:v17];
  [v18 resume];
  id v19 = [(id)objc_opt_self(NSFileManager) defaultManager];
  NSFileManager.currentContainerURL.getter();

  uint64_t v20 = type metadata accessor for PlaysStore(0LL);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v40 = PlaysStore.init(storeUrl:)(v5);
  uint64_t v21 = type metadata accessor for PersistentStore(0LL);
  uint64_t v39 = PersistentStore.__allocating_init()();
  sub_100028CC8(&v45);
  uint64_t v22 = sub_10002931C((uint64_t)&v45, *((uint64_t *)&v46 + 1));
  __chkstk_darwin(v22);
  unint64_t v24 = (__int128 *)((char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(__int128 *))(v25 + 16))(v24);
  uint64_t v55 = &type metadata for ImageDownloader;
  uint64_t v56 = (char **)&off_1000807B8;
  __int128 v54 = *v24;
  uint64_t v26 = type metadata accessor for LogoRepository();
  uint64_t v27 = swift_allocObject(v26, 56LL, 7LL);
  uint64_t v28 = sub_10002931C((uint64_t)&v54, (uint64_t)&type metadata for ImageDownloader);
  __chkstk_darwin(v28);
  uint64_t v30 = (uint64_t *)((char *)&v39 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  ((void (*)(void *, uint64_t))v31->initializeWithCopy)(v30, v32);
  *(void *)(v27 + 40) = &type metadata for ImageDownloader;
  *(void *)(v27 + 4sub_100006E64(v0 + 8) = &off_1000807B8;
  *(_OWORD *)(v27 + 1sub_100006E64(v0 + 6) = *(_OWORD *)v30;
  sub_100006E64(&v54);
  sub_100006E64(&v45);
  uint64_t v33 = type metadata accessor for DataRepository();
  uint64_t v34 = (void *)swift_allocObject(v33, 72LL, 7LL);
  v34[5] = v21;
  v34[6] = &protocol witness table for PersistentStore;
  v34[2] = v39;
  v34[7] = &_swiftEmptySetSingleton;
  v34[8] = v27;
  sub_10000CC1C((uint64_t)(v1 + 25), (uint64_t)&v45);
  uint64_t v55 = v43;
  uint64_t v56 = &off_10007F8E0;
  uint64_t v35 = v41;
  *(void *)&__int128 v54 = v41;
  uint64_t v52 = &type metadata for TempoApiAgent;
  uint64_t v53 = &off_10007EAD0;
  *(void *)&__int128 v51 = swift_allocObject(&unk_10007FB30, 112LL, 7LL);
  sub_100006DF0((uint64_t)v57, v51 + 16);
  uint64_t v49 = type metadata accessor for WatchlistSuppressNotificationsXPCConnectionManager();
  uint64_t v50 = &off_100081450;
  *(void *)&__int128 v48 = v42;
  swift_retain(v35);
  sub_100029624(v57);
  sub_10000B388(&v45, (uint64_t)(v1 + 3));
  uint64_t v36 = v40;
  v1[8] = v34;
  v1[9] = v36;
  sub_10000B388(&v54, (uint64_t)(v1 + 10));
  sub_10000B388(&v51, (uint64_t)(v1 + 15));
  sub_10000B388(&v48, (uint64_t)(v1 + 20));
  sub_100029658((uint64_t)(v1 + 3), (uint64_t)&v45);
  uint64_t v37 = v44;
  swift_beginAccess(v44 + 17, &v54, 33LL, 0LL);
  sub_100029694((uint64_t)&v45, (uint64_t)(v37 + 17));
  swift_endAccess(&v54);
  swift_release(v37);
  return v1;
}

id sub_100028BA8(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithMachServiceName:v5];

  return v6;
}

uint64_t sub_100028C18()
{
  sub_100028C94((void *)(v0 + 24));
  sub_100006E64((void *)(v0 + 200));

  swift_bridgeObjectRelease(*(void *)(v0 + 248));
  return v0;
}

uint64_t sub_100028C54()
{
  return swift_deallocClassInstance(v0, 256LL, 7LL);
}

uint64_t type metadata accessor for ServicesRepository()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd18ServicesRepository);
}

void *sub_100028C94(void *a1)
{
  return a1;
}

void sub_100028CC8(void *a1@<X8>)
{
  id v2 = [(id)objc_opt_self(NSURLSession) sharedSession];
  unint64_t v3 = sub_10003F2FC();
  uint64_t v5 = v4;
  id v6 = [(id)objc_opt_self(NSFileManager) defaultManager];
  id v7 = v2;
  id v8 = [v7 configuration];
  sub_100028D98(v3, v5, v8);

  a1[3] = &type metadata for ImageDownloader;
  a1[4] = &off_1000807B8;
  *a1 = v7;
  a1[1] = v6;
}

void sub_100028D98(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, "set_sourceApplicationBundleIdentifier:", v5);
}

char *sub_100028DE8(uint64_t a1, char *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a2);
  uint64_t v5 = sub_100006BEC(&qword_100087BF0);
  __chkstk_darwin(v5);
  id v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  void v33[3] = type metadata accessor for ApsMessageProcessor();
  v33[4] = &off_1000822F0;
  v33[0] = a1;
  *(void *)&a2[OBJC_IVAR____TtC7sportsd11ApsListener_apsConnection] = 0LL;
  id v8 = &a2[OBJC_IVAR____TtC7sportsd11ApsListener_currentAPSConnectionEnvironment];
  *(void *)id v8 = 0LL;
  *((void *)v8 + 1) = 0xE000000000000000LL;
  *(void *)&a2[OBJC_IVAR____TtC7sportsd11ApsListener_cancellables] = &_swiftEmptySetSingleton;
  uint64_t v9 = OBJC_IVAR____TtC7sportsd11ApsListener_tokenPublisher;
  uint64_t v10 = sub_100006BEC(&qword_100087B80);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v11 = a2;
  *(void *)&a2[v9] = PassthroughSubject.init()();
  uint64_t v12 = &v11[OBJC_IVAR____TtC7sportsd11ApsListener_pushToken];
  *(void *)uint64_t v12 = 0LL;
  *((void *)v12 + 1) = 0LL;
  *(void *)&v11[OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor] = 0LL;
  *(void *)&v11[OBJC_IVAR____TtC7sportsd11ApsListener_cloudChannelAuditDebouncer] = 0LL;
  uint64_t v13 = OBJC_IVAR____TtC7sportsd11ApsListener_connection;
  uint64_t v14 = sub_100006BEC(&qword_100088160);
  uint64_t v15 = swift_allocObject(v14, 32LL, 7LL);
  *(_DWORD *)(v15 + 2sub_100006E64(v0 + 8) = 0;
  *(void *)(v15 + 1sub_100006E64(v0 + 6) = 0LL;
  *(_BYTE *)(v15 + 2sub_100006E64(v0 + 4) = 2;
  *(void *)&v11[v13] = v15;
  sub_10000CC1C((uint64_t)v33, (uint64_t)&v11[OBJC_IVAR____TtC7sportsd11ApsListener_messageProcessing]);

  v32.receiver = v11;
  v32.super_class = ObjectType;
  id v16 = objc_msgSendSuper2(&v32, "init");
  uint64_t v17 = type metadata accessor for ScoreboardSubscriptionMessageProcessor();
  swift_allocObject(v17, 24LL, 7LL);
  id v18 = (char *)v16;
  id v19 = sub_100037504();
  uint64_t v20 = *(void *)&v18[OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor];
  *(void *)&v18[OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor] = v19;
  swift_release(v20);
  uint64_t v21 = type metadata accessor for SportsEnvironmentPublisher();
  swift_initStaticObject(v21, &unk_100087150);
  v31[0] = sub_10000E6C8();
  uint64_t v22 = swift_allocObject(&unk_10007FB58, 24LL, 7LL);
  swift_unknownObjectWeakInit(v22 + 16, v18);
  uint64_t v23 = sub_100006BEC(&qword_1000878D0);
  unint64_t v24 = sub_100029708();
  uint64_t v25 = Publisher<>.sink(receiveValue:)(sub_100029700, v22, v23, v24);
  swift_release(v22);
  swift_release(v31[0]);
  uint64_t v26 = &v18[OBJC_IVAR____TtC7sportsd11ApsListener_cancellables];
  swift_beginAccess(&v18[OBJC_IVAR____TtC7sportsd11ApsListener_cancellables], v31, 33LL, 0LL);
  AnyCancellable.store(in:)(v26);
  swift_endAccess(v31);
  swift_release(v25);
  sub_10000F260();
  uint64_t v27 = type metadata accessor for TaskPriority(0LL);
  sub_10000AB60((uint64_t)v7, 1LL, 1LL, v27);
  uint64_t v28 = swift_allocObject(&unk_10007FB80, 32LL, 7LL);
  *(void *)(v28 + 1sub_100006E64(v0 + 6) = 0LL;
  *(void *)(v28 + 2sub_100006E64(v0 + 4) = 0LL;
  uint64_t v29 = sub_10002D7D0((uint64_t)v7, (uint64_t)&unk_100088168, v28);
  swift_release(v29);

  sub_100006E64(v33);
  return v18;
}

id sub_1000290D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, char *a7)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a7);
  v22[3] = type metadata accessor for ApsListener();
  void v22[4] = &off_10007F440;
  v22[0] = a3;
  v21[3] = type metadata accessor for BagProvider();
  v21[4] = &off_10007F8E0;
  v21[0] = a4;
  v20[3] = &type metadata for TempoApiAgent;
  v20[4] = &off_10007EAD0;
  v20[0] = swift_allocObject(&unk_10007FB30, 112LL, 7LL);
  memcpy((void *)(v20[0] + 16LL), a5, 0x60uLL);
  v19[3] = type metadata accessor for WatchlistSuppressNotificationsXPCConnectionManager();
  v19[4] = &off_100081450;
  v19[0] = a6;
  uint64_t v15 = &a7[OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_entitlement];
  *(void *)uint64_t v15 = a1;
  *((void *)v15 + 1) = a2;
  sub_10000CC1C((uint64_t)v22, (uint64_t)&a7[OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_apsListening]);
  sub_10000CC1C((uint64_t)v21, (uint64_t)&a7[OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_metadataProvider]);
  sub_10000CC1C((uint64_t)v20, (uint64_t)&a7[OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_tempoApiProvider]);
  sub_10000CC1C((uint64_t)v19, (uint64_t)&a7[OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_supressionManager]);
  v18.receiver = a7;
  v18.super_class = ObjectType;
  id v16 = objc_msgSendSuper2(&v18, "init");
  sub_100006E64(v19);
  sub_100006E64(v20);
  sub_100006E64(v21);
  sub_100006E64(v22);
  return v16;
}

char *sub_100029268(uint64_t *a1)
{
  uint64_t v10 = *a1;
  uint64_t v11 = &off_1000822F0;
  v9[0] = a1;
  uint64_t v1 = (char *)objc_allocWithZone((Class)type metadata accessor for ApsListener());
  uint64_t v2 = sub_10002931C((uint64_t)v9, v10);
  __chkstk_darwin(v2);
  uint64_t v4 = (void *)((char *)&v9[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v5 + 16))(v4);
  uint64_t v6 = sub_100028DE8(*v4, v1);
  sub_100006E64(v9);
  return v6;
}

uint64_t sub_10002931C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

id sub_100029344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v41 = type metadata accessor for ApsListener();
  uint64_t v42 = &off_10007F440;
  v40[0] = a3;
  uint64_t v38 = type metadata accessor for BagProvider();
  uint64_t v39 = &off_10007F8E0;
  v37[0] = a4;
  uint64_t v35 = &type metadata for TempoApiAgent;
  uint64_t v36 = &off_10007EAD0;
  v34[0] = swift_allocObject(&unk_10007FB30, 112LL, 7LL);
  memcpy((void *)(v34[0] + 16LL), a5, 0x60uLL);
  uint64_t v32 = type metadata accessor for WatchlistSuppressNotificationsXPCConnectionManager();
  uint64_t v33 = &off_100081450;
  v31[0] = a6;
  uint64_t v12 = (char *)objc_allocWithZone((Class)type metadata accessor for SportsKitRequestXPCServer());
  uint64_t v13 = sub_10002931C((uint64_t)v40, v41);
  __chkstk_darwin(v13);
  uint64_t v15 = (void *)((char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_10002931C((uint64_t)v37, v38);
  __chkstk_darwin(v17);
  id v19 = (void *)((char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = sub_10002931C((uint64_t)v34, (uint64_t)v35);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v24 + 16))(v23);
  uint64_t v25 = sub_10002931C((uint64_t)v31, v32);
  __chkstk_darwin(v25);
  uint64_t v27 = (void *)((char *)v31 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  id v29 = sub_1000290D8(a1, a2, *v15, *v19, v23, *v27, v12);
  sub_100006E64(v31);
  sub_100006E64(v34);
  sub_100006E64(v37);
  sub_100006E64(v40);
  return v29;
}

unint64_t sub_1000295B4()
{
  unint64_t result = qword_100088150;
  if (!qword_100088150)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSXPCListener);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100088150);
  }

  return result;
}

uint64_t sub_1000295F0()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

void *sub_100029624(void *a1)
{
  return a1;
}

uint64_t sub_100029658(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100029694(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006BEC(&qword_100088158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000296DC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100029700(unsigned __int8 *a1)
{
}

unint64_t sub_100029708()
{
  unint64_t result = qword_1000878D8;
  if (!qword_1000878D8)
  {
    uint64_t v1 = sub_100006E94(&qword_1000878D0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000878D8);
  }

  return result;
}

uint64_t sub_10002974C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100029770()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100087C2C);
  *(void *)(v0 + 1sub_100006E64(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000297D4;
  return sub_10000F3BC();
}

uint64_t sub_1000297D4()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10002981C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

void *sub_100029864()
{
  uint64_t v0 = type metadata accessor for PersistentStore(0LL);
  uint64_t v1 = PersistentStore.__allocating_init()();
  sub_100028CC8(v17);
  sub_10002931C((uint64_t)v17, v17[3]);
  sub_10002A64C();
  __chkstk_darwin(v2);
  uint64_t v4 = (__int128 *)((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(__int128 *))(v5 + 16))(v4);
  uint64_t v15 = &type metadata for ImageDownloader;
  uint64_t v16 = &off_1000807B8;
  __int128 v14 = *v4;
  uint64_t v6 = type metadata accessor for LogoRepository();
  uint64_t v7 = sub_10000C41C(v6, 56LL);
  sub_10002931C((uint64_t)&v14, (uint64_t)&type metadata for ImageDownloader);
  sub_10002A64C();
  __chkstk_darwin(v8);
  uint64_t v10 = (__int128 *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(_OWORD *))(v11 + 16))(v10);
  *(void *)(v7 + 40) = &type metadata for ImageDownloader;
  *(void *)(v7 + 4sub_100006E64(v0 + 8) = &off_1000807B8;
  *(_OWORD *)(v7 + 1sub_100006E64(v0 + 6) = *v10;
  sub_100006E64(&v14);
  sub_100006E64(v17);
  uint64_t v12 = type metadata accessor for DataRepository();
  unint64_t result = (void *)sub_10000C41C(v12, 72LL);
  result[5] = v0;
  result[6] = &protocol witness table for PersistentStore;
  result[2] = v1;
  result[7] = &_swiftEmptySetSingleton;
  result[8] = v7;
  qword_10008F290 = (uint64_t)result;
  return result;
}

uint64_t sub_1000299B0()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_100006C2C(v0 + 2, v1);
  dispatch thunk of PersistentStorable.initializeStoreIfNeeded()(v1, v2);
  uint64_t v3 = sub_10000C41C((uint64_t)&unk_10007FBA8, 24LL);
  swift_weakInit(v3 + 16, v0);
  uint64_t v4 = sub_10000C41C((uint64_t)&unk_10007FBD0, 72LL);
  *(void *)(v4 + 1sub_100006E64(v0 + 6) = 0xD00000000000001FLL;
  *(void *)(v4 + 2sub_100006E64(v0 + 4) = 0x800000010006BC10LL;
  *(_BYTE *)(v4 + 3sub_100006E64(v0 + 2) = 0;
  *(int64x2_t *)(v4 + 40) = vdupq_n_s64(0x12CuLL);
  *(void *)(v4 + 5sub_100006E64(v0 + 6) = sub_10002A558;
  *(void *)(v4 + 6sub_100006E64(v0 + 4) = v3;
  v8[4] = sub_10002A58C;
  uint64_t v9 = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256LL;
  v8[2] = sub_10002981C;
  v8[3] = &unk_10007FBE8;
  uint64_t v5 = _Block_copy(v8);
  uint64_t v6 = v9;
  swift_retain_n(v3, 2LL);
  swift_release(v6);
  xpc_activity_register("com.apple.sportsd.event-cleanup", XPC_ACTIVITY_CHECK_IN, v5);
  _Block_release(v5);
  return swift_release_n(v3, 2LL);
}

uint64_t sub_100029AF8(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v15, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v5);
  if (!Strong) {
    return a1();
  }
  uint64_t v7 = Strong;
  if (qword_100087080 != -1) {
    swift_once(&qword_100087080, sub_100024D08);
  }
  v14[0] = *(void *)(qword_10008F280 + 72);
  uint64_t v8 = v14[0];
  uint64_t v9 = (void *)swift_allocObject(&unk_10007FC20, 40LL, 7LL);
  uint64_t v9[2] = v7;
  void v9[3] = a1;
  v9[4] = a2;
  swift_retain(v8);
  swift_retain(v7);
  swift_retain(a2);
  uint64_t v10 = sub_100006BEC(&qword_100087FC8);
  unint64_t v11 = sub_10002A5E8();
  uint64_t v12 = Publisher<>.sink(receiveValue:)(sub_10002A5DC, v9, v10, v11);
  swift_release(v9);
  swift_release(v14[0]);
  swift_beginAccess(v7 + 56, v14, 33LL, 0LL);
  AnyCancellable.store(in:)(v7 + 56);
  swift_endAccess(v14);
  swift_release(v7);
  return swift_release(v12);
}

uint64_t sub_100029C4C(uint64_t *a1, void *a2, uint64_t (*a3)(uint64_t))
{
  double v4 = (double)*a1;
  uint64_t v5 = a2[5];
  uint64_t v6 = a2[6];
  sub_100006C2C(a2 + 2, v5);
  dispatch thunk of PersistentStorable.cleanUpFileSystem(olderThan:)(v5, v6, v4);
  return a3(1LL);
}

uint64_t sub_100029E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4[5];
  uint64_t v10 = v4[6];
  sub_100006C2C(v4 + 2, v9);
  return dispatch thunk of PersistentStorable.writeAPSMessage(_:canonicalId:isConventionalOrUnified:)( a1,  a2,  a3,  a4,  v9,  v10);
}

uint64_t sub_10002A098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10002A0C0( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of PersistentStorable.writeRegistrationResponse(_:canonicalId:isConventionalOrUnified:));
}

uint64_t sub_10002A0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10002A0C0( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of PersistentStorable.writeCurrentEventStateResponse(_:canonicalId:isConventionalOrUnified:));
}

uint64_t sub_10002A0C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = v6[5];
  uint64_t v14 = v6[6];
  sub_100006C2C(v6 + 2, v13);
  return a6(a1, a2, a3, a4, a5, v13, v14);
}

uint64_t sub_10002A304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v35 = a2;
  uint64_t v32 = a1;
  uint64_t v7 = type metadata accessor for SportsLogoSize(0LL, a5);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v36 = v5[8];
  uint64_t v14 = v5[5];
  uint64_t v34 = v5[6];
  sub_100006C2C(v5 + 2, v14);
  uint64_t v15 = *(void (**)(char *, void, uint64_t))(v8 + 104);
  v15(v13, enum case for SportsLogoSize.default(_:), v7);
  uint64_t v16 = a1;
  uint64_t v17 = v35;
  uint64_t v18 = dispatch thunk of PersistentStorable.pathForLogo(_:size:fileExtension:)( v16,  v35,  v13,  6778480LL,  0xE300000000000000LL,  v14,  v34);
  uint64_t v33 = v19;
  uint64_t v34 = v18;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v13, v7);
  uint64_t v22 = v5[5];
  uint64_t v21 = v5[6];
  sub_100006C2C(v5 + 2, v22);
  v15(v10, enum case for SportsLogoSize.small(_:), v7);
  uint64_t v23 = v32;
  uint64_t v24 = dispatch thunk of PersistentStorable.pathForLogo(_:size:fileExtension:)( v32,  v17,  v10,  6778480LL,  0xE300000000000000LL,  v22,  v21);
  uint64_t v26 = v25;
  v20(v10, v7);
  uint64_t v27 = v23;
  uint64_t v28 = v33;
  uint64_t v29 = sub_10005A208(v27, v17, v37, v38, v34, v33, v24, v26);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v26);
  return v29;
}

void *sub_10002A4C8()
{
  return v0;
}

uint64_t sub_10002A4F4()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for DataRepository()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd14DataRepository);
}

uint64_t sub_10002A534()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10002A558(uint64_t (*a1)(void), uint64_t a2)
{
  return sub_100029AF8(a1, a2, v2);
}

uint64_t sub_10002A560()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_10002A58C(_xpc_activity_s *a1)
{
}

uint64_t sub_10002A598(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002A5A8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10002A5B0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10002A5DC(uint64_t *a1)
{
  return sub_100029C4C(a1, *(void **)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

unint64_t sub_10002A5E8()
{
  unint64_t result = qword_100087FD0;
  if (!qword_100087FD0)
  {
    uint64_t v1 = sub_100006E94(&qword_100087FC8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087FD0);
  }

  return result;
}

uint64_t sub_10002A62C()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10002A634(uint64_t a1, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  return swift_getErrorValue(v1, va1, (uint64_t *)va);
}

uint64_t sub_10002A644()
{
  return swift_errorRetain(v0);
}

  ;
}

uint64_t sub_10002A660( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_100015AD4(a1, a2, (uint64_t *)va);
}

uint64_t sub_10002A66C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return Error.localizedDescription.getter(a11, a12);
}

uint64_t sub_10002A678()
{
  sub_100028C94((void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 240));
  return v0;
}

uint64_t sub_10002A6AC()
{
  return swift_deallocClassInstance(v0, 248LL, 7LL);
}

uint64_t type metadata accessor for UnsubscribeRetryXPCServer()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd25UnsubscribeRetryXPCServer);
}

uint64_t sub_10002A6EC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for ContainerConstants(0LL);
  uint64_t v4 = static ContainerConstants.defaultSuiteName.getter();
  uint64_t v6 = v5;
  id v7 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  id v8 = sub_10002787C(v4, v6);
  if (!v8) {
    goto LABEL_17;
  }
  uint64_t v9 = v8;
  id v10 = [v8 dictionaryRepresentation];
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v10,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  if (!*(void *)(v11 + 16))
  {

    swift_bridgeObjectRelease(v11);
LABEL_17:
    char v27 = 0;
    return v27 & 1;
  }

  sub_100015FF4(0xD000000000000018LL, 0x800000010006BCC0LL);
  char v13 = v12;
  swift_bridgeObjectRelease(v11);
  if ((v13 & 1) == 0)
  {

    goto LABEL_17;
  }

  NSString v14 = String._bridgeToObjectiveC()();
  unsigned int v15 = [v9 BOOLForKey:v14];

  BOOL v16 = v15 == 0;
  if (v15) {
    uint64_t v17 = 0x6E456C616373656DLL;
  }
  else {
    uint64_t v17 = 0x69446C616373656DLL;
  }
  if (v16) {
    uint64_t v18 = (void *)0xEE0064656C626173LL;
  }
  else {
    uint64_t v18 = (void *)0xED000064656C6261LL;
  }
  if (qword_1000870F0 != -1) {
    swift_once(&qword_1000870F0, sub_10004BF00);
  }
  uint64_t v19 = sub_10000B928(v0, (uint64_t)qword_10008F330);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v19, v0);
  uint64_t v20 = swift_bridgeObjectRetain_n(v18, 2LL);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    uint64_t v34 = v31;
    *(_DWORD *)uint64_t v23 = 136315138;
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, 0LL, 0xE000000000000000LL, 0LL);
    uint64_t v32 = v17;
    if ((v24 & 1) != 0)
    {
      unint64_t v25 = 0xE400000000000000LL;
      uint64_t v26 = 1819047278LL;
    }

    else
    {
      swift_bridgeObjectRetain(v18);
      uint64_t v26 = v17;
      unint64_t v25 = (unint64_t)v18;
    }

    uint64_t v33 = sub_100015AD4(v26, v25, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v23 + 4, v23 + 12);
    sub_10002AACC();
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "authentication defaults value: %s", v23, 0xCu);
    uint64_t v29 = v31;
    swift_arrayDestroy(v31, 1LL);
    sub_1000190E8(v29);
    sub_1000190E8((uint64_t)v23);

    sub_10002AABC();
    uint64_t v17 = v32;
  }

  else
  {

    sub_10002AACC();
    sub_10002AABC();
  }

  v35._uint64_t countAndFlagsBits = v17;
  v35._object = v18;
  char v30 = sub_10002AA6C(v35);

  char v27 = (v30 == 2) | v30;
  return v27 & 1;
}

uint64_t sub_10002AA6C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007E030, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10002AABC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10002AACC()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10002AAD8(void (*a1)(uint64_t *__return_ptr, uint64_t *))
{
  return v3;
}

uint64_t sub_10002AB30@<X0>( __int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_100019488();
  uint64_t v20 = v19 - v18;
  sub_10000B388(a1, (uint64_t)a9);
  a9[5] = a2;
  sub_10000B388(a3, (uint64_t)(a9 + 6));
  uint64_t v21 = sub_10000B388(a4, (uint64_t)(a9 + 11));
  a9[16] = a5;
  a9[17] = a6;
  a9[18] = a7;
  a9[19] = a8;
  Date.init()(v21);
  sub_100052B9C();
  uint64_t v23 = v22;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v20, v16);
  a9[20] = v23;
  return result;
}

void sub_10002AC1C()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_100006BEC(&qword_100088378);
  uint64_t v54 = *(void *)(v3 - 8);
  uint64_t v55 = v3;
  sub_10000C318();
  __chkstk_darwin(v4);
  sub_100019488();
  uint64_t v7 = v6 - v5;
  uint64_t v59 = sub_100006BEC(&qword_100088380);
  uint64_t v57 = *(void *)(v59 - 8);
  sub_10000C318();
  __chkstk_darwin(v8);
  sub_10000E5C4();
  uint64_t v56 = v9;
  uint64_t v10 = sub_100006BEC(&qword_100088388);
  uint64_t v60 = *(void *)(v10 - 8);
  sub_10000C318();
  __chkstk_darwin(v11);
  sub_10000E5C4();
  uint64_t v58 = v12;
  if (qword_1000870F8 != -1) {
    swift_once(&qword_1000870F8, sub_10004BF1C);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_10000B928(v13, (uint64_t)qword_10008F348);
  unsigned int v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (sub_10002D32C(v16))
  {
    uint64_t v17 = (uint8_t *)sub_100019148(8LL);
    *(_DWORD *)uint64_t v17 = 67109120;
    LODWORD(__src[0]) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(__src, (char *)__src + 4, v17 + 4, v17 + 8);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v1,  "Tempo start /unregister for isLowCapLiveActivity=%{BOOL}d",  v17,  8u);
    sub_1000190E8((uint64_t)v17);
  }

  uint64_t v18 = (void *)v2[5];
  uint64_t v19 = v2[18];
  uint64_t v20 = v2[19];
  uint64_t v21 = v18[5];
  uint64_t v22 = v18[6];
  sub_100006C2C(v18 + 2, v21);
  uint64_t v23 = dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)( v19,  v20,  1LL,  v21,  v22);
  if (v23)
  {
    unint64_t v25 = (void *)v23;
    uint64_t v26 = SportingEventSubscription.consumers.getter(v24);
    uint64_t v27 = sub_100006BEC(&qword_100087510);
    uint64_t inited = swift_initStackObject(v27, &v61);
    *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067230;
    uint64_t v29 = v2[17];
    *(void *)(inited + 3sub_100006E64(v0 + 2) = v2[16];
    *(void *)(inited + 40) = v29;
    swift_bridgeObjectRetain(v29);
    char v30 = sub_1000174D0(inited, v26);
    swift_setDeallocating(inited);
    sub_10002CC98();
    uint64_t v31 = (void *)SportingEventSubscription.byChangingConsumers(_:)(v30);
    swift_release(v30);
    sub_10002B438(v25, v31);
  }

  else
  {
    uint64_t v53 = v10;
    uint64_t v32 = sub_10002D35C(0LL, (uint64_t)__src);
    uint64_t v33 = sub_10002D35C(v32, (uint64_t)v64);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (sub_10002D32C(v35))
    {
      uint64_t v36 = sub_100019148(22LL);
      uint64_t v52 = sub_100019148(64LL);
      uint64_t v63 = v52;
      *(_DWORD *)uint64_t v36 = 136315394;
      uint64_t v37 = __src[18];
      unint64_t v38 = __src[19];
      swift_bridgeObjectRetain(__src[19]);
      uint64_t v62 = sub_100015AD4(v37, v38, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease(v38);
      sub_10002CC60(__src);
      *(_WORD *)(v36 + sub_100006E64(v0 + 12) = 2080;
      uint64_t v40 = v64[16];
      unint64_t v39 = v65;
      swift_bridgeObjectRetain(v65);
      uint64_t v62 = sub_100015AD4(v40, v39, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease(v39);
      sub_10002CC60(v64);
      _os_log_impl( (void *)&_mh_execute_header,  v34,  (os_log_type_t)v20,  "Tempo /unregister canonicalId=%s, remove consumer=%s, though there are no subscription exists",  (uint8_t *)v36,  0x16u);
      swift_arrayDestroy(v52, 2LL);
      sub_1000190E8(v52);
      sub_1000190E8(v36);
    }

    else
    {
      sub_10002CC60(__src);
      sub_10002CC60(v64);
    }

    sub_100006C2C(v2, v2[3]);
    v64[0] = sub_10000F978();
    sub_10002D35C(v64[0], (uint64_t)__src);
    uint64_t v41 = swift_allocObject(&unk_10007FC70, 184LL, 7LL);
    uint64_t v42 = memcpy((void *)(v41 + 16), __src, 0xA8uLL);
    uint64_t v43 = static Subscribers.Demand.unlimited.getter(v42);
    uint64_t v44 = sub_10000C6A8();
    uint64_t v45 = sub_100006BEC(&qword_100088390);
    uint64_t v46 = sub_10002D364(&qword_1000874C8, &qword_1000874C0);
    uint64_t v47 = sub_10002D364(&qword_100088398, &qword_100088390);
    Publisher<>.flatMap<A>(maxPublishers:_:)(v43, sub_10002CC90, v41, v44, v45, v46, v47);
    swift_release(v41);
    swift_release(v64[0]);
    sub_10000EBD4( &qword_1000883A0,  &qword_100088378,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    Publisher.map<A>(_:)(sub_10002D324, 0LL, v55, &type metadata for Bool);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v7, v55);
    uint64_t v48 = sub_10000C6A8();
    uint64_t v49 = sub_10000EBD4( &qword_1000883A8,  &qword_100088380,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    uint64_t v50 = sub_10002D364(&qword_100088368, &qword_100088360);
    Publisher.catch<A>(_:)(sub_10002B434, 0LL, v59, v48, v49, v50);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v59);
    uint64_t v51 = sub_10000EBD4( &qword_1000883B0,  &qword_100088388,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    Publisher.eraseToAnyPublisher()(v53, v51);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v58, v53);
  }

  sub_10000C248();
}

uint64_t sub_10002B1DC@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v10 = a1[19];
  swift_bridgeObjectRetain(v10);
  v4._uint64_t countAndFlagsBits = 47LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  v5._object = (void *)0x800000010006A850LL;
  v5._uint64_t countAndFlagsBits = 0xD000000000000021LL;
  String.append(_:)(v5);
  Swift::Int v6 = sub_10002B2B4();
  sub_100006F50();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease(v10);
  uint64_t result = swift_bridgeObjectRelease(v6);
  *a2 = v8;
  return result;
}

Swift::Int sub_10002B2B4()
{
  os_log_type_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::String v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = sub_100006BEC(&qword_100087E58);
  uint64_t inited = swift_initStackObject(v6, v18);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067DB0;
  *(_BYTE *)(inited + 3sub_100006E64(v0 + 2) = 2;
  uint64_t v9 = v1[18];
  uint64_t v8 = v1[19];
  *(void *)(inited + 6sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(inited + 40) = v9;
  *(void *)(inited + 4sub_100006E64(v0 + 8) = v8;
  *(_BYTE *)(inited + 7sub_100006E64(v0 + 2) = 7;
  uint64_t v10 = swift_bridgeObjectRetain(v8);
  Date.init()(v10);
  sub_100052B9C();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)(inited + 10sub_100006E64(v0 + 4) = &type metadata for UInt64;
  *(void *)(inited + 80) = v12;
  *(_BYTE *)(inited + 1sub_100006E64(v0 + 12) = 8;
  uint64_t v13 = v1[20];
  *(void *)(inited + 14sub_100006E64(v0 + 4) = &type metadata for UInt64;
  *(void *)(inited + 120) = v13;
  *(_BYTE *)(inited + 15sub_100006E64(v0 + 2) = 43;
  *(void *)(inited + 18sub_100006E64(v0 + 4) = &type metadata for Bool;
  *(_BYTE *)(inited + 160) = 1;
  *(_BYTE *)(inited + 19sub_100006E64(v0 + 2) = 44;
  *(void *)(inited + 22sub_100006E64(v0 + 4) = &type metadata for EventType.EventName;
  *(_BYTE *)(inited + 200) = 1;
  sub_100006BEC(qword_100087690);
  sub_100021CD0();
  uint64_t v14 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for SportsMetricsKey);
  Swift::Int v15 = sub_10002C624(v14);
  swift_bridgeObjectRelease(v14);
  return v15;
}

uint64_t sub_10002B438(void *a1, void *a2)
{
  uint64_t v124 = a1;
  uint64_t v3 = sub_100006BEC(&qword_1000883B8);
  v131 = *(uint64_t (***)(char *, uint64_t))(v3 - 8);
  uint64_t v132 = v3;
  __chkstk_darwin(v3);
  v130 = (char *)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v136 = sub_100006BEC(&qword_1000883C0);
  uint64_t v134 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  uint64_t v133 = (char *)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v135 = (void (**)(char *, uint64_t))((char *)&v114 - v7);
  uint64_t v8 = sub_100006BEC(&qword_1000883C8);
  uint64_t v117 = *(void *)(v8 - 8);
  uint64_t v118 = v8;
  __chkstk_darwin(v8);
  int v116 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100006BEC(&qword_1000883D0);
  uint64_t v120 = *(void *)(v10 - 8);
  uint64_t v121 = v10;
  __chkstk_darwin(v10);
  int v119 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = sub_100006BEC(&qword_1000883D8);
  uint64_t v123 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  unint64_t v122 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100006BEC(&qword_1000883E0);
  uint64_t v127 = *(void *)(v13 - 8);
  uint64_t v128 = v13;
  __chkstk_darwin(v13);
  uint64_t v126 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v129 = sub_100006BEC(&qword_1000883E8);
  Swift::Int v15 = *(char **)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v17 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100006BEC(&qword_1000883F0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (uint64_t (**)(char *, uint64_t))((char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v22 = sub_100006BEC(&qword_1000883F8);
  uint64_t v23 = *(void (***)(char *, uint64_t))(v22 - 8);
  __n128 v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v137 = a2;
  uint64_t v27 = SportingEventSubscription.consumers.getter(v24);
  uint64_t v28 = *(void *)(v27 + 16);
  swift_bridgeObjectRelease(v27);
  if (v28)
  {
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    sub_10000B928(v29, (uint64_t)qword_10008F348);
    uint64_t v30 = v138;
    sub_10002CC2C(v138, (uint64_t)__src);
    sub_10002CC2C(v30, (uint64_t)v141);
    id v31 = v137;
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      id v137 = (id)swift_slowAlloc(96LL, -1LL);
      uint64_t v140 = (uint64_t)v137;
      *(_DWORD *)uint64_t v34 = 136315650;
      uint64_t v35 = __src[18];
      unint64_t v36 = __src[19];
      swift_bridgeObjectRetain(__src[19]);
      uint64_t v139 = sub_100015AD4(v35, v36, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease(v36);
      sub_10002CC60(__src);
      *(_WORD *)(v34 + sub_100006E64(v0 + 12) = 2080;
      uint64_t v38 = v142;
      unint64_t v37 = v143;
      swift_bridgeObjectRetain(v143);
      uint64_t v139 = sub_100015AD4(v38, v37, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease(v37);
      sub_10002CC60(v141);
      *(_WORD *)(v34 + 2sub_100006E64(v0 + 2) = 2080;
      uint64_t v40 = SportingEventSubscription.consumers.getter(v39);
      uint64_t v41 = Set.description.getter(v40, &type metadata for String, &protocol witness table for String);
      unint64_t v43 = v42;
      swift_bridgeObjectRelease(v40);
      uint64_t v139 = sub_100015AD4(v41, v43, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v34 + 24, v34 + 32);

      swift_bridgeObjectRelease(v43);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Tempo skip /unregister canonicalId=%s, remove consumer=%s, active consumers=%s",  (uint8_t *)v34,  0x20u);
      id v44 = v137;
      swift_arrayDestroy(v137, 3LL);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      sub_10002CC60(__src);
      sub_10002CC60(v141);
    }

    LOBYTE(__src[0]) = 1;
    uint64_t v58 = v130;
    Just.init(_:)(__src);
    uint64_t v59 = sub_100006BEC((uint64_t *)&unk_100088B90);
    uint64_t v60 = v132;
    uint64_t v61 = v133;
    Just.setFailureType<A>(to:)(v59, v132, v59, &protocol self-conformance witness table for Error);
    uint64_t v62 = v131[1](v58, v60);
    __n128 v63 = __chkstk_darwin(v62);
    unint64_t v65 = v135;
    uint64_t v64 = v136;
    Result.Publisher.tryMap<A>(_:)(sub_10002CD18, v63);
    uint64_t v66 = *(void (**)(char *, uint64_t))(v134 + 8);
    v66(v61, v64);
    uint64_t v67 = sub_10000EBD4( &qword_100088400,  &qword_1000883C0,  (uint64_t)&protocol conformance descriptor for Result<A, B>.Publisher);
    uint64_t v68 = Publisher.eraseToAnyPublisher()(v64, v67);
    v66((char *)v65, v64);
  }

  else
  {
    int v115 = v17;
    v130 = v15;
    v131 = v21;
    uint64_t v135 = v23;
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v132 = v19;
    uint64_t v133 = v26;
    uint64_t v134 = v18;
    uint64_t v136 = v22;
    uint64_t v45 = type metadata accessor for Logger(0LL);
    sub_10000B928(v45, (uint64_t)qword_10008F348);
    uint64_t v46 = v138;
    sub_10002CC2C(v138, (uint64_t)__src);
    uint64_t v47 = sub_10002CC2C(v46, (uint64_t)v141);
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    uint64_t v51 = v124;
    if (v50)
    {
      uint64_t v52 = swift_slowAlloc(22LL, -1LL);
      uint64_t v53 = swift_slowAlloc(64LL, -1LL);
      uint64_t v140 = v53;
      *(_DWORD *)uint64_t v52 = 136315394;
      uint64_t v55 = __src[18];
      unint64_t v54 = __src[19];
      swift_bridgeObjectRetain(__src[19]);
      uint64_t v139 = sub_100015AD4(v55, v54, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease(v54);
      sub_10002CC60(__src);
      *(_WORD *)(v52 + sub_100006E64(v0 + 12) = 2080;
      uint64_t v57 = v142;
      unint64_t v56 = v143;
      swift_bridgeObjectRetain(v143);
      uint64_t v139 = sub_100015AD4(v57, v56, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v52 + 14, v52 + 22);
      swift_bridgeObjectRelease(v56);
      sub_10002CC60(v141);
      _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "Tempo start /unregister canonicalId=%s, remove consumer=%s, no consumers left",  (uint8_t *)v52,  0x16u);
      swift_arrayDestroy(v53, 2LL);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
      sub_10002CC60(__src);
      sub_10002CC60(v141);
    }

    uint64_t v69 = v119;
    int v70 = v116;
    __chkstk_darwin(v71);
    uint64_t v72 = v138;
    uint64_t v73 = sub_10002AAD8((void (*)(uint64_t *__return_ptr, uint64_t *))sub_10002CD30);
    char v75 = v74 & 1;
    __src[0] = v73;
    LOBYTE(__src[1]) = v74 & 1;
    uint64_t v76 = sub_100006BEC(&qword_100088408);
    Result.publisher.getter(v76);
    sub_10002CD4C(v73, v75);
    sub_10002CC2C(v72, (uint64_t)__src);
    uint64_t v77 = swift_allocObject(&unk_10007FC98, 184LL, 7LL);
    int v78 = memcpy((void *)(v77 + 16), __src, 0xA8uLL);
    uint64_t v79 = static Subscribers.Demand.unlimited.getter(v78);
    uint64_t v80 = v70;
    uint64_t v81 = sub_100006BEC(&qword_1000874C0);
    uint64_t v82 = sub_10000EBD4( &qword_100088410,  &qword_1000883C8,  (uint64_t)&protocol conformance descriptor for Result<A, B>.Publisher);
    uint64_t v83 = sub_10000EBD4( &qword_1000874C8,  &qword_1000874C0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v84 = v79;
    uint64_t v85 = v118;
    Publisher.flatMap<A>(maxPublishers:_:)(v84, sub_10002CD5C, v77, v118, v81, v82, v83);
    swift_release(v77);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v80, v85);
    sub_10002CC2C(v72, (uint64_t)__src);
    uint64_t v86 = swift_allocObject(&unk_10007FCC0, 192LL, 7LL);
    memcpy((void *)(v86 + 16), __src, 0xA8uLL);
    *(void *)(v86 + 18sub_100006E64(v0 + 4) = v51;
    uint64_t v87 = static Subscribers.Demand.unlimited.getter(v51);
    uint64_t v88 = sub_100006BEC(&qword_100087398);
    uint64_t v89 = sub_100006BEC(&qword_100088390);
    uint64_t v90 = v69;
    uint64_t v91 = sub_10000EBD4( &qword_100088418,  &qword_1000883D0,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    uint64_t v92 = sub_10000EBD4( &qword_100088398,  &qword_100088390,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v93 = v122;
    uint64_t v94 = v87;
    uint64_t v95 = v121;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v94, sub_10002CDA4, v86, v121, v88, v89, v91, v92);
    swift_release(v86);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v90, v95);
    sub_10000EBD4( &qword_100088420,  &qword_1000883D8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    uint64_t v96 = v125;
    uint64_t v97 = v126;
    Publisher.map<A>(_:)(sub_10002C228, 0LL, v125, &type metadata for Bool);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v93, v96);
    uint64_t v98 = sub_100006BEC(&qword_100088360);
    uint64_t v99 = sub_10000EBD4( &qword_100088428,  &qword_1000883E0,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    uint64_t v100 = sub_10000EBD4( &qword_100088368,  &qword_100088360,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v101 = v115;
    uint64_t v102 = v128;
    Publisher.catch<A>(_:)(sub_10002B434, 0LL, v128, v98, v99, v100);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v97, v102);
    sub_10002CC2C(v72, (uint64_t)__src);
    uint64_t v103 = swift_allocObject(&unk_10007FCE8, 184LL, 7LL);
    memcpy((void *)(v103 + 16), __src, 0xA8uLL);
    uint64_t v104 = sub_10000EBD4( &qword_100088430,  &qword_1000883E8,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    size_t v105 = (char *)v131;
    uint64_t v106 = v129;
    Publisher.tryMap<A>(_:)(sub_10002CDB4, v103, v129, &type metadata for Bool, v104);
    swift_release(v103);
    (*((void (**)(char *, uint64_t))v130 + 1))(v101, v106);
    sub_10002CC2C(v72, (uint64_t)__src);
    uint64_t v107 = swift_allocObject(&unk_10007FD10, 184LL, 7LL);
    memcpy((void *)(v107 + 16), __src, 0xA8uLL);
    uint64_t v108 = sub_10000EBD4( &qword_100088438,  &qword_1000883F0,  (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
    uint64_t v109 = v134;
    int v110 = v133;
    Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)( 0LL,  0LL,  sub_10002CE08,  v107,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  v134,  v108);
    swift_release(v107);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v105, v109);
    uint64_t v111 = sub_10000EBD4( &qword_100088440,  &qword_1000883F8,  (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
    uint64_t v112 = v136;
    uint64_t v68 = Publisher.eraseToAnyPublisher()(v136, v111);
    v135[1](v110, v112);
  }

  return v68;
}

uint64_t sub_10002C0E0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = v6[5];
  uint64_t v8 = v6[6];
  sub_100006C2C(v6 + 2, v7);
  uint64_t result = dispatch thunk of PersistentStorable.writeEventSubscription(_:isConventionalOrUnified:)(a2, 1LL, v7, v8);
  if (v3) {
    *a3 = v3;
  }
  return result;
}

uint64_t sub_10002C154@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10000F978();
  *a2 = result;
  return result;
}

uint64_t sub_10002C188@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = v3;
  Swift::Int v5 = sub_10002B2B4();
  sub_100006F50();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease(v4);
  uint64_t result = swift_bridgeObjectRelease(v5);
  *a2 = v7;
  return result;
}

void sub_10002C228(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10002C234@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100006BEC(&qword_100088448);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100019488();
  uint64_t v8 = v7 - v6;
  uint64_t v13 = *a1;
  swift_errorRetain(v13);
  uint64_t v9 = sub_100006BEC((uint64_t *)&unk_100088B90);
  Fail.init(error:)(&v13, &type metadata for Bool, v9, &protocol self-conformance witness table for Error);
  uint64_t v10 = sub_10000EBD4(&qword_100088450, &qword_100088448, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
  uint64_t v11 = Publisher.eraseToAnyPublisher()(v4, v10);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  *a2 = v11;
  return result;
}

void sub_10002C31C(void *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v4 = (void *)a1[5];
  uint64_t v5 = a1[18];
  uint64_t v6 = a1[19];
  uint64_t v7 = v4 + 2;
  uint64_t v8 = v4[5];
  uint64_t v9 = v4[6];
  sub_100006C2C(v4 + 2, v8);
  uint64_t v10 = dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)( v5,  v6,  1LL,  v8,  v9);
  if (v10)
  {
    uint64_t v12 = (void *)v10;
    uint64_t v13 = SportingEventSubscription.consumers.getter(v11);
    uint64_t v14 = *(void *)(v13 + 16);
    swift_bridgeObjectRelease(v13);
    if (v14)
    {
    }

    else
    {
      uint64_t v15 = v4[5];
      uint64_t v16 = v4[6];
      sub_100006C2C(v7, v15);
      dispatch thunk of PersistentStorable.deleteSportingEventSubscription(canonicalId:isConventionalOrUnified:)( v5,  v6,  1LL,  v15,  v16);

      if (v2) {
        return;
      }
    }
  }

  *a2 = 1;
}

void sub_10002C400(uint64_t a1, uint64_t a2)
{
  if (qword_1000870F8 != -1) {
    swift_once(&qword_1000870F8, sub_10004BF1C);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000B928(v3, (uint64_t)qword_10008F348);
  uint64_t v4 = sub_10002CC2C(a2, (uint64_t)v13);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(18LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v12 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = v13[18];
    unint64_t v10 = v14;
    swift_bridgeObjectRetain(v14);
    uint64_t v11 = sub_100015AD4(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v10);
    sub_10002CC60(v13);
    *(_WORD *)(v7 + sub_100006E64(v0 + 12) = 1024;
    LODWORD(vsub_100006E64(v0 + 11) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, (char *)&v11 + 4, v7 + 14, v7 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Tempo /unregister success for %s, isLowCapLiveActivity=%{BOOL}d",  (uint8_t *)v7,  0x12u);
    swift_arrayDestroy(v8, 1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    sub_10002CC60(v13);
  }
}

uint64_t sub_10002C5B0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  char v7 = *a1;
  uint64_t v8 = *(void **)(a2 + 40);
  uint64_t v9 = v8[5];
  uint64_t v10 = v8[6];
  sub_100006C2C(v8 + 2, v9);
  uint64_t result = dispatch thunk of PersistentStorable.writeEventSubscription(_:isConventionalOrUnified:)(a3, 1LL, v9, v10);
  if (!v4) {
    *a4 = v7;
  }
  return result;
}

Swift::Int sub_10002C624(uint64_t a1)
{
  uint64_t v40 = &_swiftEmptyDictionarySingleton;
  sub_1000500C0(v41);
  uint64_t v2 = v41[0];
  uint64_t v29 = v41[1];
  int64_t v3 = v41[3];
  unint64_t v4 = v41[4];
  int64_t v42 = (unint64_t)(v41[2] + 64LL) >> 6;
  Swift::Int result = swift_bridgeObjectRetain(a1);
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  unint64_t v7 = v6 | (v3 << 6);
  while (1)
  {
    char v12 = *(_BYTE *)(*(void *)(v2 + 48) + v7);
    sub_10002CE10(*(void *)(v2 + 56) + 32 * v7, (uint64_t)v38 + 8);
    LOBYTE(v38[0]) = v12;
    v36[0] = v38[0];
    v36[1] = v38[1];
    uint64_t v37 = v39;
    sub_10002CE10((uint64_t)v36 + 8, (uint64_t)&v30);
    if (!v31)
    {
      sub_1000230C4((uint64_t)v36, &qword_100088458);
      __n128 v24 = &v30;
      goto LABEL_33;
    }

    sub_10000AC00(&v30, v35);
    unsigned __int8 v13 = v36[0];
    char v33 = v36[0];
    sub_10000CB94((uint64_t)v36 + 8, (uint64_t)v34);
    sub_10000AC00(v35, v32);
    unint64_t v14 = v40;
    unint64_t v15 = v40[2];
    if (v40[3] <= v15)
    {
      sub_100060A7C(v15 + 1, 1);
      unint64_t v14 = v40;
    }

    Hasher.init(_seed:)(&v30);
    uint64_t v16 = sub_100050BB0(v13);
    uint64_t v18 = v17;
    String.hash(into:)(&v30, v16, v17);
    swift_bridgeObjectRelease(v18);
    Swift::Int result = Hasher._finalize()();
    uint64_t v19 = v14 + 8;
    uint64_t v20 = -1LL << *((_BYTE *)v14 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~v14[(v21 >> 6) + 8]) == 0) {
      break;
    }
    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~v14[(v21 >> 6) + 8])) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_32:
    *(void *)((char *)v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(_BYTE *)(v14[6] + v23) = v13;
    sub_10000AC00(v32, (_OWORD *)(v14[7] + 32 * v23));
    ++v14[2];
    __n128 v24 = (__int128 *)v34;
LABEL_33:
    Swift::Int result = sub_1000230C4((uint64_t)v24, qword_100087690);
    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v8 = v3 + 1;
    if (__OFADD__(v3, 1LL)) {
      goto LABEL_37;
    }
    if (v8 >= v42) {
      goto LABEL_35;
    }
    unint64_t v9 = *(void *)(v29 + 8 * v8);
    int64_t v10 = v3 + 1;
    if (!v9)
    {
      int64_t v10 = v3 + 2;
      if (v3 + 2 >= v42) {
        goto LABEL_35;
      }
      unint64_t v9 = *(void *)(v29 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v3 + 3;
        if (v3 + 3 >= v42) {
          goto LABEL_35;
        }
        unint64_t v9 = *(void *)(v29 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v3 + 4;
          if (v3 + 4 >= v42) {
            goto LABEL_35;
          }
          unint64_t v9 = *(void *)(v29 + 8 * v10);
          if (!v9)
          {
            int64_t v10 = v3 + 5;
            if (v3 + 5 >= v42) {
              goto LABEL_35;
            }
            unint64_t v9 = *(void *)(v29 + 8 * v10);
            if (!v9)
            {
              int64_t v11 = v3 + 6;
              while (v11 < v42)
              {
                unint64_t v9 = *(void *)(v29 + 8 * v11++);
                if (v9)
                {
                  int64_t v10 = v11 - 1;
                  goto LABEL_18;
                }
              }

void sub_10002C99C()
{
  uint64_t v1 = sub_100006BEC(&qword_100088358);
  uint64_t v14 = *(void *)(v1 - 8);
  sub_10000C318();
  __chkstk_darwin(v2);
  sub_100019488();
  uint64_t v5 = v4 - v3;
  sub_100006C2C(v0, v0[3]);
  uint64_t v16 = sub_10000F978();
  sub_10002CBC0((uint64_t)v0, (uint64_t)__src);
  uint64_t v6 = swift_allocObject(&unk_10007FC48, 96LL, 7LL);
  unint64_t v7 = memcpy((void *)(v6 + 16), __src, 0x50uLL);
  uint64_t v8 = static Subscribers.Demand.unlimited.getter(v7);
  uint64_t v9 = sub_10000C6A8();
  uint64_t v10 = sub_100006BEC(&qword_100088360);
  uint64_t v11 = sub_10000EBD4( &qword_1000874C8,  &qword_1000874C0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v12 = sub_10000EBD4( &qword_100088368,  &qword_100088360,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v8, sub_10002CC20, v6, v9, v10, v11, v12);
  swift_release(v6);
  swift_release(v16);
  uint64_t v13 = sub_10000EBD4( &qword_100088370,  &qword_100088358,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  Publisher.eraseToAnyPublisher()(v1, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v5, v1);
  sub_10000C248();
}

uint64_t sub_10002CB30@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for SportsMetricsKey);
  sub_1000069E8();
  uint64_t v5 = v4;
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v5;
  return result;
}

uint64_t sub_10002CBC0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10002CBF4()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_10002CC20@<X0>(void *a1@<X8>)
{
  return sub_10002CB30(v1 + 16, a1);
}

uint64_t sub_10002CC2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_10002CC60(void *a1)
{
  return a1;
}

uint64_t sub_10002CC90@<X0>(void *a1@<X8>)
{
  return sub_10002B1DC((void *)(v1 + 16), a1);
}

uint64_t sub_10002CC98()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_10002CCC8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100006BEC(&qword_100088460);
  swift_arrayDestroy(v0 + 32, v1);
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_10002CD18@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10002C5B0(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_10002CD30(void *a1)
{
  return sub_10002C0E0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10002CD4C(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t sub_10002CD5C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002C154((void *)(v1 + 16), a1);
}

uint64_t sub_10002CD64()
{
  return swift_deallocObject(v0, 192LL, 7LL);
}

uint64_t sub_10002CDA4@<X0>(void *a1@<X8>)
{
  return sub_10002C188(v1 + 16, a1);
}

void sub_10002CDB4(_BYTE *a1@<X8>)
{
}

uint64_t sub_10002CDD0()
{
  return swift_deallocObject(v0, 184LL, 7LL);
}

void sub_10002CE08(uint64_t a1)
{
}

uint64_t sub_10002CE10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006BEC(qword_100087690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t destroy for SubscriptionUnregisterOperation(void *a1)
{
  return swift_bridgeObjectRelease(a1[19]);
}

uint64_t initializeWithCopy for SubscriptionUnregisterOperation(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2sub_100006E64(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  __int128 v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 7sub_100006E64(v0 + 2) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain(v5);
  v8(a1 + 48, a2 + 48, v7);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 12) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 88, a2 + 88);
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 12sub_100006E64(v0 + 8) = *(void *)(a2 + 128);
  *(void *)(a1 + 13sub_100006E64(v0 + 6) = v10;
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 14sub_100006E64(v0 + 4) = *(void *)(a2 + 144);
  *(void *)(a1 + 15sub_100006E64(v0 + 2) = v11;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

void *assignWithCopy for SubscriptionUnregisterOperation(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  uint64_t v5 = a1[5];
  a1[5] = v4;
  swift_retain(v4);
  swift_release(v5);
  sub_10000B504(a1 + 6, a2 + 6);
  sub_10000B504(a1 + 11, a2 + 11);
  a1[16] = a2[16];
  uint64_t v6 = a2[17];
  uint64_t v7 = a1[17];
  a1[17] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[18] = a2[18];
  uint64_t v8 = a2[19];
  uint64_t v9 = a1[19];
  a1[19] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[20] = a2[20];
  return a1;
}

void *initializeWithTake for SubscriptionUnregisterOperation(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

uint64_t assignWithTake for SubscriptionUnregisterOperation(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release(v6);
  sub_100006E64((void *)(a1 + 48));
  __int128 v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4sub_100006E64(v0 + 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 6sub_100006E64(v0 + 4) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  sub_100006E64((void *)(a1 + 88));
  *(_OWORD *)(a1 + 8sub_100006E64(v0 + 8) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 10sub_100006E64(v0 + 4) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v8 = *(void *)(a1 + 136);
  *(void *)(a1 + 13sub_100006E64(v0 + 6) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 152);
  uint64_t v10 = *(void *)(a1 + 152);
  *(void *)(a1 + 14sub_100006E64(v0 + 4) = *(void *)(a2 + 144);
  *(void *)(a1 + 15sub_100006E64(v0 + 2) = v9;
  swift_bridgeObjectRelease(v10);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionUnregisterOperation(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 168))
    {
      LODWORD(vsub_100006E64(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100006E64(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_100006E64(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubscriptionUnregisterOperation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 13sub_100006E64(v0 + 6) = 0u;
    *(_OWORD *)(result + 15sub_100006E64(v0 + 2) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 10sub_100006E64(v0 + 4) = 0u;
    *(_OWORD *)(result + 8sub_100006E64(v0 + 8) = 0u;
    *(_OWORD *)(result + 7sub_100006E64(v0 + 2) = 0u;
    *(_OWORD *)(result + 5sub_100006E64(v0 + 6) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_100006E64(v0 + 4) = 0u;
    *(_OWORD *)(result + sub_100006E64(v0 + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 16sub_100006E64(v0 + 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_100006E64(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16sub_100006E64(v0 + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SubscriptionUnregisterOperation()
{
  return &type metadata for SubscriptionUnregisterOperation;
}

uint64_t destroy for SubscriptionUnregisterAllOperation(void *a1)
{
  return sub_100006E64(a1 + 5);
}

uint64_t initializeWithCopy for SubscriptionUnregisterAllOperation(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2sub_100006E64(v0 + 4) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 6sub_100006E64(v0 + 4) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

void *assignWithCopy for SubscriptionUnregisterAllOperation(void *a1, void *a2)
{
  return a1;
}

void *initializeWithTake for SubscriptionUnregisterAllOperation(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for SubscriptionUnregisterAllOperation(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 6) = v4;
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = *(void *)(a2 + 32);
  sub_100006E64((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 5sub_100006E64(v0 + 6) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 7sub_100006E64(v0 + 2) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionUnregisterAllOperation(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(vsub_100006E64(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100006E64(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_100006E64(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubscriptionUnregisterAllOperation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 7sub_100006E64(v0 + 2) = 0LL;
    *(_OWORD *)(result + 5sub_100006E64(v0 + 6) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_100006E64(v0 + 4) = 0u;
    *(_OWORD *)(result + sub_100006E64(v0 + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_100006E64(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SubscriptionUnregisterAllOperation()
{
  return &type metadata for SubscriptionUnregisterAllOperation;
}

BOOL sub_10002D32C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10002D33C()
{
  return swift_bridgeObjectRelease(v0[19]);
}

uint64_t sub_10002D35C(uint64_t a1, uint64_t a2)
{
  return sub_10002CC2C(v2, a2);
}

uint64_t sub_10002D364(unint64_t *a1, uint64_t *a2)
{
  return sub_10000EBD4(a1, a2, v2);
}

uint64_t sub_10002D36C(void *a1)
{
  uint64_t v2 = sub_10002D41C();
  uint64_t result = dispatch thunk of Decoder.singleValueContainer()(v2);
  if (!v1)
  {
    sub_100006C2C(v7, v7[3]);
    uint64_t v4 = sub_10002D41C();
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v4);
    v6.n128_f64[0] = (double)v5;
    if (v5 > 10000000000LL) {
      v6.n128_f64[0] = (double)v5 / 1000.0;
    }
    Date.init(timeIntervalSince1970:)(v6);
    return sub_100006E64(v7);
  }

  return result;
}

uint64_t sub_10002D41C()
{
  return v0;
}

uint64_t sub_10002D430()
{
  uint64_t v0 = sub_100006BEC(&qword_100088468);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t result = PassthroughSubject.init()();
  qword_10008F298 = result;
  return result;
}

uint64_t sub_10002D470()
{
  if (qword_100087098 != -1) {
    swift_once(&qword_100087098, sub_10002D430);
  }
  uint64_t v0 = sub_100006BEC(&qword_100088468);
  uint64_t v1 = sub_10000EBD4( &qword_100088470,  &qword_100088468,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  uint64_t v6 = Publisher.share()(v0, v1);
  uint64_t v2 = sub_100006BEC(&qword_100088478);
  uint64_t v3 = sub_10000EBD4( &qword_100088480,  &qword_100088478,  (uint64_t)&protocol conformance descriptor for Publishers.Share<A>);
  uint64_t v4 = Publisher.eraseToAnyPublisher()(v2, v3);
  uint64_t result = swift_release(v6);
  qword_10008F2A0 = v4;
  return result;
}

uint64_t sub_10002D560(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRetain(a2);
    uint64_t result = a4;
    return swift_bridgeObjectRetain(result);
  }

  if (!a5) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t destroy for CloudChannelOperation(uint64_t a1)
{
  return sub_10002D5B8( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t sub_10002D5B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRelease(a2);
    uint64_t result = a4;
    return swift_bridgeObjectRelease(result);
  }

  if (!a5) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t initializeWithCopy for CloudChannelOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(_BYTE *)(a2 + 32);
  sub_10002D560(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + sub_100006E64(v0 + 8) = v4;
  *(void *)(a1 + 1sub_100006E64(v0 + 6) = v5;
  *(void *)(a1 + 2sub_100006E64(v0 + 4) = v6;
  *(_BYTE *)(a1 + 3sub_100006E64(v0 + 2) = v7;
  return a1;
}

uint64_t assignWithCopy for CloudChannelOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(_BYTE *)(a2 + 32);
  sub_10002D560(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + sub_100006E64(v0 + 8) = v4;
  *(void *)(a1 + 1sub_100006E64(v0 + 6) = v5;
  *(void *)(a1 + 2sub_100006E64(v0 + 4) = v6;
  unsigned __int8 v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 3sub_100006E64(v0 + 2) = v7;
  sub_10002D5B8(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for CloudChannelOperation(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 3sub_100006E64(v0 + 2) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 6) = v3;
  return result;
}

uint64_t assignWithTake for CloudChannelOperation(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 6) = v8;
  unsigned __int8 v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 3sub_100006E64(v0 + 2) = v3;
  sub_10002D5B8(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudChannelOperation(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudChannelOperation( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 1sub_100006E64(v0 + 6) = 0LL;
    *(void *)(result + 2sub_100006E64(v0 + 4) = 0LL;
    *(_BYTE *)(result + 3sub_100006E64(v0 + 2) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + sub_100006E64(v0 + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 3sub_100006E64(v0 + 2) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10002D7B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_10002D7B8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 3sub_100006E64(v0 + 2) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CloudChannelOperation()
{
  return &type metadata for CloudChannelOperation;
}

uint64_t sub_10002D7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = sub_10000AB6C(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_100019034(a1, &qword_100087BF0);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  if (v15 | v13)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    uint64_t v16 = v18;
    __int128 v18[2] = v13;
    v18[3] = v15;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  return swift_task_create(v8, v16, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_10002D8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = sub_10000AB6C(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_100019034(a1, &qword_100087BF0);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = sub_100006BEC(&qword_100087B50);
  if (v15 | v13)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    __int128 v19[2] = v13;
    v19[3] = v15;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, v16, a2, a3);
}

uint64_t sub_10002DA24(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007E178, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10002DA78(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x736C656E6E616863LL;
  }
  else {
    return 0x6F724665726F7473LL;
  }
}

uint64_t sub_10002DAB4(void *a1)
{
  uint64_t v3 = sub_100006BEC(&qword_1000885A0);
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100006C2C(a1, v4);
  unint64_t v6 = sub_10002ED88();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_100080020, &unk_100080020, v6, v4, v5);
  if (v1)
  {
    sub_10002F018();
  }

  else
  {
    char v15 = 0;
    uint64_t v5 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
    uint64_t v9 = v8;
    uint64_t v10 = sub_100006BEC(&qword_100087B50);
    char v13 = 1;
    unint64_t v11 = sub_10002EDC4();
    swift_bridgeObjectRetain(v9);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v10, &v13, v3, v10, v11);
    sub_10002EFC4();
    uint64_t v12 = v14;
    swift_bridgeObjectRetain(v14);
    sub_10002F018();
    swift_bridgeObjectRelease(v12);
    sub_10002EFFC();
  }

  return v5;
}

void sub_10002DC40(char *a1, unsigned __int8 *a2)
{
}

void sub_10002DC4C()
{
}

uint64_t sub_10002DC54(uint64_t a1)
{
  return sub_100041C58(a1, *v1);
}

void sub_10002DC5C(uint64_t a1)
{
}

uint64_t sub_10002DC64@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10002DA24(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10002DC90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10002DA78(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10002DCB8()
{
  return sub_10002DA78(*v0);
}

uint64_t sub_10002DCC0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10002DA74(a1);
  *a2 = result;
  return result;
}

void sub_10002DCE4(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10002DCF0(uint64_t a1)
{
  unint64_t v2 = sub_10002ED88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002DD18(uint64_t a1)
{
  unint64_t v2 = sub_10002ED88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002DD40@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10002DAB4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_10002DD6C()
{
  uint64_t Task = type metadata accessor for CloudChannelFetchTask();
  uint64_t v1 = swift_allocObject(Task, 120LL, 15LL);
  uint64_t result = swift_defaultActor_initialize();
  *(void *)(v1 + 1sub_100006E64(v0 + 12) = 0LL;
  qword_10008F2A8 = v1;
  return result;
}

uint64_t sub_10002DDA8()
{
  v1[4] = v0;
  uint64_t v2 = sub_100006BEC(&qword_100087BF0);
  v1[5] = sub_10002EFEC(*(void *)(v2 - 8));
  uint64_t v3 = type metadata accessor for Date(0LL);
  v1[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[7] = v4;
  v1[8] = sub_10002EFEC(v4);
  return swift_task_switch(sub_10002DE14, v0, 0LL);
}

uint64_t sub_10002DE14(uint64_t a1)
{
  uint64_t v3 = v1[7];
  uint64_t v2 = v1[8];
  uint64_t v4 = v1[6];
  uint64_t v5 = v1[4];
  Date.init()(a1);
  sub_100052B9C();
  uint64_t v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v8 = *(void *)(v5 + 112);
  v1[9] = v8;
  if (v8)
  {
    uint64_t v9 = async function pointer to Task.value.getter[1];
    swift_retain(v8);
    uint64_t v10 = (void *)swift_task_alloc(v9);
    v1[10] = v10;
    uint64_t v11 = sub_100006BEC(&qword_100087B50);
    uint64_t v12 = sub_100006BEC((uint64_t *)&unk_100088B90);
    *uint64_t v10 = v1;
    v10[1] = sub_10002DFE4;
    char v13 = v1 + 3;
    uint64_t v14 = v8;
    return Task.value.getter(v13, v14, v11, v12, &protocol self-conformance witness table for Error);
  }

  uint64_t v16 = v1[4];
  uint64_t v15 = v1[5];
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  sub_10000AB60(v15, 1LL, 1LL, v17);
  unint64_t v18 = sub_10002EAC0();
  uint64_t v19 = (void *)swift_allocObject(&unk_10007FF08, 48LL, 7LL);
  __int128 v19[2] = v16;
  v19[3] = v18;
  void v19[4] = v16;
  void v19[5] = v7;
  swift_retain_n(v16, 2LL);
  uint64_t v20 = sub_10002D8F8(v15, (uint64_t)&unk_100088578, (uint64_t)v19);
  uint64_t v21 = *(void *)(v5 + 112);
  *(void *)(v5 + 1sub_100006E64(v0 + 12) = v20;
  uint64_t result = swift_release(v21);
  uint64_t v23 = *(void *)(v5 + 112);
  v1[12] = v23;
  if (v23)
  {
    uint64_t v24 = async function pointer to Task.value.getter[1];
    swift_retain(v23);
    char v25 = (void *)swift_task_alloc(v24);
    v1[13] = v25;
    uint64_t v11 = sub_100006BEC(&qword_100087B50);
    uint64_t v12 = sub_100006BEC((uint64_t *)&unk_100088B90);
    *char v25 = v1;
    v25[1] = sub_10002E084;
    char v13 = v1 + 2;
    uint64_t v14 = v23;
    return Task.value.getter(v13, v14, v11, v12, &protocol self-conformance witness table for Error);
  }

  __break(1u);
  return result;
}

uint64_t sub_10002DFE4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 8sub_100006E64(v0 + 8) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10002E128;
  }
  else {
    uint64_t v4 = sub_10002E048;
  }
  return swift_task_switch(v4, *(void *)(v2 + 32), 0LL);
}

uint64_t sub_10002E048()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_10002EFB8();
  sub_100019924();
  return sub_10002EFE0(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002E084()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 96LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  return sub_10002EFA8();
}

uint64_t sub_10002E0EC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10002F004(*(void *)(v0 + 32));
  sub_10002EFB8();
  sub_100019924();
  return sub_10002EFE0(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002E128()
{
  return sub_10002EFD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002E15C()
{
  return sub_10002EFD4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002E190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[27] = a4;
  v5[28] = a5;
  v5[26] = a1;
  uint64_t v7 = sub_100006BEC(&qword_100088580);
  v5[29] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100006BEC(&qword_100088588);
  v5[30] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[31] = v9;
  v5[32] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100006BEC(&qword_100088590);
  v5[33] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[34] = v11;
  v5[35] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10002E24C, a4, 0LL);
}

uint64_t sub_10002E24C()
{
  if (qword_100087110 != -1) {
    swift_once(&qword_100087110, sub_10004BF7C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000B928(v1, (uint64_t)qword_10008F390);
  v0[36] = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)sub_100019148(2LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "fetching available cloud channels", v5, 2u);
    sub_1000190E8((uint64_t)v5);
  }

  uint64_t v6 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String);
  v0[37] = v6;
  v0[24] = v6;
  if (qword_100087080 != -1) {
    swift_once(&qword_100087080, sub_100024D08);
  }
  uint64_t v8 = v0[31];
  uint64_t v7 = v0[32];
  uint64_t v9 = v0[30];
  uint64_t v10 = v0[28];
  uint64_t v11 = qword_10008F280;
  type metadata accessor for BagProvider();
  swift_retain(v11);
  sub_1000059F8();
  uint64_t v12 = sub_10002E944(v10);
  sub_10000751C();
  uint64_t v14 = v13;
  swift_bridgeObjectRelease(v12);
  sub_100029624(v0 + 2);
  v0[22] = v14;
  uint64_t v15 = sub_100006BEC(&qword_1000873B8);
  sub_10002EBA0(&qword_1000873C0, &qword_1000873B8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.values.getter(v15, v16);
  swift_release(v14);
  AsyncThrowingPublisher.makeAsyncIterator()(v9);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v0[38] = sub_10002EAC0();
  sub_10002EBA0( &qword_100088598,  &qword_100088590,  (uint64_t)&protocol conformance descriptor for AsyncThrowingPublisher<A>.Iterator);
  uint64_t v18 = v17;
  uint64_t v19 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[39] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_10002E4E4;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[29], v0[33], v18);
}

uint64_t sub_10002E4E4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 312);
  *(void *)(*v1 + 320) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 216);
  if (v0 && v4)
  {
    uint64_t v5 = *(void *)(v2 + 304);
    uint64_t ObjectType = swift_getObjectType(v4);
    dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v5);
  }

  return sub_10002EFA8();
}

uint64_t sub_10002E57C()
{
  uint64_t v1 = *(void *)(v0 + 232);
  (*(void (**)(void, void))(*(void *)(v0 + 272) + 8LL))(*(void *)(v0 + 280), *(void *)(v0 + 264));
  uint64_t v2 = sub_100006BEC(&qword_1000873D8);
  int v3 = sub_10000AB6C(v1, 1LL, v2);
  uint64_t v4 = *(void *)(v0 + 296);
  if (v3 != 1)
  {
    uint64_t v5 = *(void *)(v0 + 232);
    sub_100019180();
    uint64_t v4 = *(void *)(v5 + *(int *)(v2 + 40) + 16);
    swift_bridgeObjectRetain(v4);
    sub_100019034(v5, &qword_1000873D8);
    *(void *)(v0 + 19sub_100006E64(v0 + 2) = v4;
  }

  uint64_t v6 = swift_bridgeObjectRetain(v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)sub_100019148(12LL);
    *(_DWORD *)uint64_t v9 = 134217984;
    *(void *)(v0 + 200) = *(void *)(v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v9 + 4, v9 + 12);
    sub_100019180();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "fetched %ld available cloud channels", v9, 0xCu);
    sub_1000190E8((uint64_t)v9);
  }

  else
  {
    sub_100019180();
  }

  uint64_t v10 = *(void *)(v0 + 280);
  uint64_t v11 = *(void *)(v0 + 256);
  uint64_t v12 = *(void *)(v0 + 232);
  uint64_t v13 = *(void **)(v0 + 208);
  swift_beginAccess(v0 + 192, v0 + 112, 0LL, 0LL);
  *uint64_t v13 = *(void *)(v0 + 192);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002E71C()
{
  uint64_t v1 = v0[37];
  v0[20] = v0[40];
  uint64_t v2 = sub_100006BEC((uint64_t *)&unk_100088B90);
  swift_willThrowTypedImpl(v0 + 20, v2, &protocol self-conformance witness table for Error);
  swift_bridgeObjectRelease(v1);
  return sub_10002EFA8();
}

uint64_t sub_10002E788()
{
  uint64_t v1 = *(void *)(v0 + 320);
  (*(void (**)(void, void))(*(void *)(v0 + 272) + 8LL))(*(void *)(v0 + 280), *(void *)(v0 + 264));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  int v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 320);
    uint64_t v6 = (uint8_t *)sub_100019148(12LL);
    uint64_t v7 = sub_100019148(32LL);
    uint64_t v16 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_getErrorValue(v5, v0 + 168, v0 + 136);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 144), *(void *)(v0 + 152));
    unint64_t v10 = v9;
    *(void *)(v0 + 18sub_100006E64(v0 + 4) = sub_100015AD4(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "failed to fetch cloud channels. error=%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL);
    sub_1000190E8(v7);
    sub_1000190E8((uint64_t)v6);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 320);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  uint64_t v12 = *(void *)(v0 + 280);
  uint64_t v13 = *(void *)(v0 + 232);
  swift_willThrow(v14);
  swift_task_dealloc(v12);
  sub_100019924();
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002E944(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = sub_100006BEC(&qword_100088560);
  uint64_t inited = swift_initStackObject(v6, v12);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067B00;
  *(_BYTE *)(inited + 3sub_100006E64(v0 + 2) = 7;
  Date.init()(inited);
  sub_100052B9C();
  uint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)(inited + 6sub_100006E64(v0 + 4) = &type metadata for UInt64;
  *(void *)(inited + 40) = v9;
  *(_BYTE *)(inited + 7sub_100006E64(v0 + 2) = 8;
  *(void *)(inited + 10sub_100006E64(v0 + 4) = &type metadata for UInt64;
  *(void *)(inited + 80) = a1;
  *(_BYTE *)(inited + 1sub_100006E64(v0 + 12) = 44;
  *(void *)(inited + 14sub_100006E64(v0 + 4) = &type metadata for EventType.EventName;
  *(_BYTE *)(inited + 120) = 3;
  sub_100021CD0();
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for SportsMetricsKey);
}

uint64_t sub_10002EA5C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for CloudChannelFetchTask()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd21CloudChannelFetchTask);
}

void sub_10002EAA0()
{
}

void sub_10002EAA8()
{
}

unint64_t sub_10002EAC0()
{
  unint64_t result = qword_100088570;
  if (!qword_100088570)
  {
    uint64_t Task = type metadata accessor for CloudChannelFetchTask();
    unint64_t result = swift_getWitnessTable(&unk_100067EA8, Task);
    atomic_store(result, (unint64_t *)&qword_100088570);
  }

  return result;
}

uint64_t sub_10002EAFC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10002EB28(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_10008856C);
  *(void *)(v2 + 1sub_100006E64(v0 + 6) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000297D4;
  return sub_10002E190(a1, v4, v5, v7, v6);
}

void sub_10002EBA0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = sub_100006E94(a2);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_10000C510();
}

uint64_t sub_10002EBE0(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void sub_10002EC08(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_10000C510();
}

void *sub_10002EC40(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 sub_10002ECA4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *sub_10002ECB8(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10002ECFC(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(vsub_100006E64(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100006E64(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_100006E64(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10002ED3C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + sub_100006E64(v0 + 8) = 0LL;
    *(void *)(result + 1sub_100006E64(v0 + 6) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 2sub_100006E64(v0 + 4) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + sub_100006E64(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 2sub_100006E64(v0 + 4) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for CloudChannelFetchResponse()
{
}

unint64_t sub_10002ED88()
{
  unint64_t result = qword_1000885A8;
  if (!qword_1000885A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068034, &unk_100080020);
    atomic_store(result, (unint64_t *)&qword_1000885A8);
  }

  return result;
}

unint64_t sub_10002EDC4()
{
  unint64_t result = qword_1000885B0;
  if (!qword_1000885B0)
  {
    uint64_t v1 = sub_100006E94(&qword_100087B50);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000885B0);
  }

  return result;
}

uint64_t sub_10002EE20(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10002EE6C + 4 * byte_100067E75[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10002EEA0 + 4 * byte_100067E70[v4]))();
}

uint64_t sub_10002EEA0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002EEA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002EEB0LL);
  }
  return result;
}

uint64_t sub_10002EEBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002EEC4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10002EEC8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002EED0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for CloudChannelFetchResponse.CodingKeys()
{
}

unint64_t sub_10002EEEC()
{
  unint64_t result = qword_1000885B8;
  if (!qword_1000885B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006800C, &unk_100080020);
    atomic_store(result, (unint64_t *)&qword_1000885B8);
  }

  return result;
}

unint64_t sub_10002EF2C()
{
  unint64_t result = qword_1000885C0;
  if (!qword_1000885C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100067F44, &unk_100080020);
    atomic_store(result, (unint64_t *)&qword_1000885C0);
  }

  return result;
}

unint64_t sub_10002EF6C()
{
  unint64_t result = qword_1000885C8;
  if (!qword_1000885C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100067F6C, &unk_100080020);
    atomic_store(result, (unint64_t *)&qword_1000885C8);
  }

  return result;
}

uint64_t sub_10002EFA8()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10002EFB8()
{
  return swift_task_dealloc(*(void *)(v0 + 64));
}

uint64_t sub_10002EFC4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10002EFD4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10002EFE0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10002EFEC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10002EFFC()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10002F004@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = *(void *)(a1 + 112);
  *(void *)(a1 + 1sub_100006E64(v0 + 12) = 0LL;
  return swift_release(v1);
}

  ;
}

uint64_t sub_10002F018()
{
  return sub_100006E64(v0);
}

void *sub_10002F020(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    uint64_t v6 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v7 = *(v6 - 3);
      uint64_t v8 = *(v6 - 2);
      uint64_t v9 = *(v6 - 1);
      uint64_t v10 = *v6;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v10);
      uint64_t v11 = a2(v7, v8, v9, v10);
      swift_bridgeObjectRelease(v10);
      uint64_t v12 = swift_bridgeObjectRelease(v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      uint64_t v13 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
      specialized ContiguousArray._endMutation()(v14);
      v6 += 4;
      --v3;
    }

    while (v3);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

char *sub_10002F118(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100006BEC(&qword_1000887C8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SportingEventSubscription.Competitor(0LL);
  uint64_t v31 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  __int128 v30 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  BOOL v27 = (char *)&v25 - v12;
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v13; uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    uint64_t v32 = v9;
    unint64_t v29 = a1 & 0xC000000000000001LL;
    uint64_t v14 = (char *)_swiftEmptyArrayStorage;
    uint64_t v9 = 4LL;
    uint64_t v25 = a2;
    uint64_t v26 = a1;
    uint64_t v28 = v13;
    while (1)
    {
      id v15 = v29 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, a1) : *(id *)(a1 + 8 * v9);
      uint64_t v16 = v15;
      uint64_t v17 = v9 - 3;
      if (__OFADD__(v9 - 4, 1LL)) {
        break;
      }
      char v33 = v15;
      sub_100034B5C(&v33, a2, (uint64_t)v8);
      if (v3)
      {
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(a1);

        return v14;
      }

      uint64_t v18 = v32;
      if (sub_10000AB6C((uint64_t)v8, 1LL, v32) == 1)
      {
        sub_10000BBA4((uint64_t)v8, &qword_1000887C8);
      }

      else
      {
        uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
        uint64_t v20 = v27;
        v19(v27, v8, v18);
        v19(v30, v20, v18);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
          uint64_t v14 = (char *)sub_100014DB8(0LL, *((void *)v14 + 2) + 1LL, 1LL, (uint64_t)v14);
        }
        unint64_t v22 = *((void *)v14 + 2);
        unint64_t v21 = *((void *)v14 + 3);
        if (v22 >= v21 >> 1) {
          uint64_t v14 = (char *)sub_100014DB8(v21 > 1, v22 + 1, 1LL, (uint64_t)v14);
        }
        *((void *)v14 + sub_100006E64(v0 + 2) = v22 + 1;
        v19( &v14[((*(unsigned __int8 *)(v31 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))
             + *(void *)(v31 + 72) * v22],
          v30,
          v32);
        a2 = v25;
        a1 = v26;
      }

      ++v9;
      if (v17 == v28)
      {
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(a1);
        return v14;
      }
    }

    __break(1u);
LABEL_20:
    if (a1 < 0) {
      uint64_t v23 = a1;
    }
    else {
      uint64_t v23 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_10002F400@<X0>( __int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, __int128 a12, __int128 a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  uint64_t v55 = a7;
  uint64_t v56 = a8;
  uint64_t v54 = a6;
  uint64_t v60 = a22;
  uint64_t v61 = a23;
  uint64_t v58 = a20;
  uint64_t v59 = a21;
  uint64_t v57 = a19;
  int v53 = a18;
  uint64_t v51 = a5;
  uint64_t v52 = a17;
  uint64_t v50 = a16;
  __int128 v48 = a12;
  __int128 v49 = a13;
  __int128 v46 = a10;
  __int128 v47 = a11;
  uint64_t v28 = type metadata accessor for Date(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v46 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000B388(a1, a9);
  *(void *)(a9 + 40) = a2;
  *(void *)(a9 + 4sub_100006E64(v0 + 8) = a3;
  sub_10000B388(a4, a9 + 56);
  sub_10000B388(v51, a9 + 96);
  uint64_t v32 = v55;
  *(void *)(a9 + 13sub_100006E64(v0 + 6) = v54;
  *(void *)(a9 + 14sub_100006E64(v0 + 4) = v32;
  *(void *)(a9 + 15sub_100006E64(v0 + 2) = v56;
  __int128 v33 = v47;
  *(_OWORD *)(a9 + 160) = v46;
  *(_OWORD *)(a9 + 17sub_100006E64(v0 + 6) = v33;
  __int128 v34 = v49;
  *(_OWORD *)(a9 + 19sub_100006E64(v0 + 2) = v48;
  *(_OWORD *)(a9 + 20sub_100006E64(v0 + 8) = v34;
  *(void *)(a9 + 22sub_100006E64(v0 + 4) = a14;
  *(_BYTE *)(a9 + 23sub_100006E64(v0 + 2) = a15;
  uint64_t v35 = v52;
  *(void *)(a9 + 240) = v50;
  *(void *)(a9 + 24sub_100006E64(v0 + 8) = v35;
  *(_BYTE *)(a9 + 25sub_100006E64(v0 + 6) = v53;
  unint64_t v36 = (int *)sub_100035F90();
  sub_100035ED8(v57, a9 + v36[18], &qword_100087EA0);
  uint64_t v37 = v36[19];
  Date.init()(v38);
  sub_100052B9C();
  uint64_t v40 = v39;
  uint64_t result = sub_10000C498((uint64_t)v31, *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
  *(void *)(a9 + v37) = v40;
  int64_t v42 = (void *)(a9 + v36[20]);
  uint64_t v43 = v59;
  *int64_t v42 = v58;
  v42[1] = v43;
  id v44 = (void *)(a9 + v36[21]);
  uint64_t v45 = v61;
  void *v44 = v60;
  v44[1] = v45;
  return result;
}

uint64_t type metadata accessor for SubscriptionRegisterOperation(uint64_t a1)
{
  return sub_10002F89C( a1,  (uint64_t *)&unk_100088630,  (uint64_t)&nominal type descriptor for SubscriptionRegisterOperation);
}

uint64_t sub_10002F5E0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v28 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v28 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain(v28);
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 2sub_100006E64(v0 + 4) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = a2[5];
    uint64_t v9 = a2[6];
    *(void *)(v4 + 40) = v8;
    *(void *)(v4 + 4sub_100006E64(v0 + 8) = v9;
    __int128 v10 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v4 + 80) = v10;
    uint64_t v11 = v10;
    uint64_t v12 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v10 - 8);
    swift_retain(v8);
    swift_retain(v9);
    v12(v4 + 56, a2 + 7, v11);
    __int128 v13 = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(v4 + 120) = v13;
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v4 + 96, (uint64_t)(a2 + 12));
    uint64_t v14 = a2[18];
    *(void *)(v4 + 13sub_100006E64(v0 + 6) = a2[17];
    *(void *)(v4 + 14sub_100006E64(v0 + 4) = v14;
    uint64_t v15 = a2[20];
    *(void *)(v4 + 15sub_100006E64(v0 + 2) = a2[19];
    *(void *)(v4 + 160) = v15;
    uint64_t v16 = a2[22];
    *(void *)(v4 + 16sub_100006E64(v0 + 8) = a2[21];
    *(void *)(v4 + 17sub_100006E64(v0 + 6) = v16;
    uint64_t v17 = a2[24];
    *(void *)(v4 + 18sub_100006E64(v0 + 4) = a2[23];
    *(void *)(v4 + 19sub_100006E64(v0 + 2) = v17;
    uint64_t v18 = a2[26];
    *(void *)(v4 + 200) = a2[25];
    *(void *)(v4 + 20sub_100006E64(v0 + 8) = v18;
    uint64_t v19 = a2[28];
    *(void *)(v4 + 21sub_100006E64(v0 + 6) = a2[27];
    *(void *)(v4 + 22sub_100006E64(v0 + 4) = v19;
    *(_BYTE *)(v4 + 23sub_100006E64(v0 + 2) = *((_BYTE *)a2 + 232);
    uint64_t v20 = a2[30];
    uint64_t v21 = a2[31];
    *(_BYTE *)(v4 + 25sub_100006E64(v0 + 6) = *((_BYTE *)a2 + 256);
    uint64_t v22 = a3[18];
    __dst = (void *)(v4 + v22);
    int64_t v42 = a3;
    uint64_t v40 = (char *)a2 + v22;
    *(void *)(v4 + 240) = v20;
    *(void *)(v4 + 24sub_100006E64(v0 + 8) = v21;
    uint64_t v23 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0LL);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    uint64_t v24 = v19;
    uint64_t v25 = v23;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v21);
    if (sub_10000AB6C((uint64_t)v40, 1LL, v23))
    {
      uint64_t v26 = sub_100006BEC(&qword_100087EA0);
      memcpy(__dst, v40, *(void *)(*(void *)(v26 - 8) + 64LL));
      BOOL v27 = v42;
    }

    else
    {
      uint64_t v29 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
      if (sub_10000AB6C((uint64_t)v40, 1LL, v29))
      {
        uint64_t v30 = sub_100006BEC(&qword_1000885D0);
        memcpy(__dst, v40, *(void *)(*(void *)(v30 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v29 - 8) + 16LL))(__dst, v40, v29);
        sub_10000AB60((uint64_t)__dst, 0LL, 1LL, v29);
      }

      BOOL v27 = v42;
      sub_10000AB60((uint64_t)__dst, 0LL, 1LL, v25);
    }

    uint64_t v31 = v27[20];
    *(void *)(v4 + v27[19]) = *(uint64_t *)((char *)a2 + v27[19]);
    uint64_t v32 = (void *)(v4 + v31);
    __int128 v33 = (uint64_t *)((char *)a2 + v31);
    uint64_t v34 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = v27[21];
    unint64_t v36 = (void *)(v4 + v35);
    uint64_t v37 = (uint64_t *)((char *)a2 + v35);
    uint64_t v38 = v37[1];
    *unint64_t v36 = *v37;
    v36[1] = v38;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v38);
  }

  return v4;
}

uint64_t type metadata accessor for SubscriptionRegisterOperation.PreferredData(uint64_t a1)
{
  return sub_10002F89C( a1,  (uint64_t *)&unk_100088708,  (uint64_t)&nominal type descriptor for SubscriptionRegisterOperation.PreferredData);
}

uint64_t sub_10002F89C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_10002F8CC(void *a1, int *a2)
{
  uint64_t v4 = (uint64_t)a1 + a2[18];
  uint64_t v5 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0LL);
  if (!sub_10000AB6C(v4, 1LL, v5))
  {
    uint64_t v6 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
  }

  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[20] + 8));
  return swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[21] + 8));
}

uint64_t sub_10002F9C4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 2sub_100006E64(v0 + 4) = v5;
  (**(void (***)(void))(v5 - 8))();
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 4sub_100006E64(v0 + 8) = v7;
  __int128 v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v8;
  uint64_t v9 = v8;
  __int128 v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_retain(v6);
  swift_retain(v7);
  v10(a1 + 56, a2 + 56, v9);
  __int128 v11 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 96, a2 + 96);
  uint64_t v12 = *(void *)(a2 + 144);
  *(void *)(a1 + 13sub_100006E64(v0 + 6) = *(void *)(a2 + 136);
  *(void *)(a1 + 14sub_100006E64(v0 + 4) = v12;
  uint64_t v13 = *(void *)(a2 + 160);
  *(void *)(a1 + 15sub_100006E64(v0 + 2) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v13;
  uint64_t v14 = *(void *)(a2 + 176);
  *(void *)(a1 + 16sub_100006E64(v0 + 8) = *(void *)(a2 + 168);
  *(void *)(a1 + 17sub_100006E64(v0 + 6) = v14;
  uint64_t v15 = *(void *)(a2 + 192);
  *(void *)(a1 + 18sub_100006E64(v0 + 4) = *(void *)(a2 + 184);
  *(void *)(a1 + 19sub_100006E64(v0 + 2) = v15;
  uint64_t v16 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 20sub_100006E64(v0 + 8) = v16;
  uint64_t v17 = *(void *)(a2 + 224);
  *(void *)(a1 + 21sub_100006E64(v0 + 6) = *(void *)(a2 + 216);
  *(void *)(a1 + 22sub_100006E64(v0 + 4) = v17;
  *(_BYTE *)(a1 + 23sub_100006E64(v0 + 2) = *(_BYTE *)(a2 + 232);
  uint64_t v18 = *(void *)(a2 + 240);
  uint64_t v19 = *(void *)(a2 + 248);
  *(_BYTE *)(a1 + 25sub_100006E64(v0 + 6) = *(_BYTE *)(a2 + 256);
  uint64_t v20 = a3[18];
  uint64_t v34 = (const void *)(a2 + v20);
  __dst = (void *)(a1 + v20);
  *(void *)(a1 + 240) = v18;
  *(void *)(a1 + 24sub_100006E64(v0 + 8) = v19;
  uint64_t v21 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0LL);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  if (sub_10000AB6C((uint64_t)v34, 1LL, v21))
  {
    uint64_t v22 = sub_100006BEC(&qword_100087EA0);
    memcpy(__dst, v34, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    uint64_t v23 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
    if (sub_10000AB6C((uint64_t)v34, 1LL, v23))
    {
      uint64_t v24 = sub_100006BEC(&qword_1000885D0);
      memcpy(__dst, v34, *(void *)(*(void *)(v24 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 16LL))(__dst, v34, v23);
      sub_10000AB60((uint64_t)__dst, 0LL, 1LL, v23);
    }

    sub_10000AB60((uint64_t)__dst, 0LL, 1LL, v21);
  }

  uint64_t v25 = a3[20];
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  uint64_t v26 = (void *)(a1 + v25);
  BOOL v27 = (void *)(a2 + v25);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  uint64_t v29 = a3[21];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  uint64_t v32 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v32;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v32);
  return a1;
}

uint64_t sub_10002FC30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v6;
  swift_retain(v6);
  swift_release(v7);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 4sub_100006E64(v0 + 8) = v8;
  swift_retain(v8);
  swift_release(v9);
  sub_10000B504((void *)(a1 + 56), (void *)(a2 + 56));
  sub_10000B504((void *)(a1 + 96), (void *)(a2 + 96));
  *(void *)(a1 + 13sub_100006E64(v0 + 6) = *(void *)(a2 + 136);
  uint64_t v10 = *(void *)(a2 + 144);
  uint64_t v11 = *(void *)(a1 + 144);
  *(void *)(a1 + 14sub_100006E64(v0 + 4) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 15sub_100006E64(v0 + 2) = *(void *)(a2 + 152);
  uint64_t v12 = *(void *)(a2 + 160);
  uint64_t v13 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 16sub_100006E64(v0 + 8) = *(void *)(a2 + 168);
  uint64_t v14 = *(void *)(a2 + 176);
  uint64_t v15 = *(void *)(a1 + 176);
  *(void *)(a1 + 17sub_100006E64(v0 + 6) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(void *)(a1 + 18sub_100006E64(v0 + 4) = *(void *)(a2 + 184);
  uint64_t v16 = *(void *)(a2 + 192);
  uint64_t v17 = *(void *)(a1 + 192);
  *(void *)(a1 + 19sub_100006E64(v0 + 2) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v18 = *(void *)(a2 + 208);
  uint64_t v19 = *(void *)(a1 + 208);
  *(void *)(a1 + 20sub_100006E64(v0 + 8) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(void *)(a1 + 21sub_100006E64(v0 + 6) = *(void *)(a2 + 216);
  uint64_t v20 = *(void *)(a2 + 224);
  uint64_t v21 = *(void *)(a1 + 224);
  *(void *)(a1 + 22sub_100006E64(v0 + 4) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 23sub_100006E64(v0 + 2) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  uint64_t v22 = *(void *)(a2 + 248);
  uint64_t v23 = *(void *)(a1 + 248);
  *(void *)(a1 + 24sub_100006E64(v0 + 8) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + 25sub_100006E64(v0 + 6) = *(_BYTE *)(a2 + 256);
  uint64_t v24 = a3[18];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  uint64_t v27 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0LL);
  int v28 = sub_10000AB6C((uint64_t)v25, 1LL, v27);
  int v29 = sub_10000AB6C((uint64_t)v26, 1LL, v27);
  if (v28)
  {
    if (!v29)
    {
      uint64_t v30 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
      if (sub_10000AB6C((uint64_t)v26, 1LL, v30))
      {
        uint64_t v31 = sub_100006BEC(&qword_1000885D0);
        memcpy(v25, v26, *(void *)(*(void *)(v31 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v30 - 8) + 16LL))(v25, v26, v30);
        sub_10000AB60((uint64_t)v25, 0LL, 1LL, v30);
      }

      goto LABEL_13;
    }

    goto LABEL_7;
  }

  if (v29)
  {
    sub_100035AF4((uint64_t)v25, type metadata accessor for SubscriptionRegisterOperation.PreferredData);
LABEL_7:
    uint64_t v32 = &qword_100087EA0;
    goto LABEL_8;
  }

  uint64_t v27 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
  int v34 = sub_10000AB6C((uint64_t)v25, 1LL, v27);
  int v35 = sub_10000AB6C((uint64_t)v26, 1LL, v27);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v27 - 8) + 16LL))(v25, v26, v27);
LABEL_13:
      sub_10000AB60((uint64_t)v25, 0LL, 1LL, v27);
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v47 = *(void *)(v27 - 8);
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v47 + 24))(v25, v26, v27);
      goto LABEL_14;
    }

    (*(void (**)(void *, uint64_t))(v47 + 8))(v25, v27);
  }

  uint64_t v32 = &qword_1000885D0;
LABEL_8:
  uint64_t v33 = sub_100006BEC(v32);
  memcpy(v25, v26, *(void *)(*(void *)(v33 - 8) + 64LL));
LABEL_14:
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  uint64_t v36 = a3[20];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (void *)(a2 + v36);
  *uint64_t v37 = *v38;
  uint64_t v39 = v38[1];
  uint64_t v40 = v37[1];
  v37[1] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  uint64_t v41 = a3[21];
  int64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (void *)(a2 + v41);
  *int64_t v42 = *v43;
  uint64_t v44 = v43[1];
  uint64_t v45 = v42[1];
  v42[1] = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  return a1;
}

uint64_t sub_10002FFA0(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 6) = v6;
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 5sub_100006E64(v0 + 6) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 7sub_100006E64(v0 + 2) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 8sub_100006E64(v0 + 8) = *(void *)(a2 + 88);
  __int128 v7 = *(_OWORD *)(a2 + 96);
  __int128 v8 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 12sub_100006E64(v0 + 8) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 9sub_100006E64(v0 + 6) = v7;
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 12) = v8;
  *(_OWORD *)(a1 + 13sub_100006E64(v0 + 6) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 15sub_100006E64(v0 + 2) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 16sub_100006E64(v0 + 8) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 18sub_100006E64(v0 + 4) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 21sub_100006E64(v0 + 6) = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 23sub_100006E64(v0 + 2) = *(_BYTE *)(a2 + 232);
  __int128 v9 = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 25sub_100006E64(v0 + 6) = *(_BYTE *)(a2 + 256);
  uint64_t v10 = a3[18];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 240) = v9;
  uint64_t v13 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0LL);
  if (sub_10000AB6C((uint64_t)v12, 1LL, v13))
  {
    uint64_t v14 = sub_100006BEC(&qword_100087EA0);
    memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    uint64_t v15 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
    if (sub_10000AB6C((uint64_t)v12, 1LL, v15))
    {
      uint64_t v16 = sub_100006BEC(&qword_1000885D0);
      memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32LL))(v11, v12, v15);
      sub_10000AB60((uint64_t)v11, 0LL, 1LL, v15);
    }

    sub_10000AB60((uint64_t)v11, 0LL, 1LL, v13);
  }

  uint64_t v17 = a3[20];
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  return a1;
}

uint64_t sub_10003015C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 6) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_release(v8);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 4sub_100006E64(v0 + 8) = *(void *)(a2 + 48);
  swift_release(v9);
  sub_100006E64((void *)(a1 + 56));
  *(_OWORD *)(a1 + 5sub_100006E64(v0 + 6) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 7sub_100006E64(v0 + 2) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 8sub_100006E64(v0 + 8) = *(void *)(a2 + 88);
  sub_100006E64((void *)(a1 + 96));
  __int128 v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 9sub_100006E64(v0 + 6) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 12) = v10;
  *(_OWORD *)(a1 + 12sub_100006E64(v0 + 8) = *(_OWORD *)(a2 + 128);
  uint64_t v11 = *(void *)(a1 + 144);
  *(void *)(a1 + 14sub_100006E64(v0 + 4) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 160);
  uint64_t v13 = *(void *)(a1 + 160);
  *(void *)(a1 + 15sub_100006E64(v0 + 2) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 176);
  uint64_t v15 = *(void *)(a1 + 176);
  *(void *)(a1 + 16sub_100006E64(v0 + 8) = *(void *)(a2 + 168);
  *(void *)(a1 + 17sub_100006E64(v0 + 6) = v14;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a2 + 192);
  uint64_t v17 = *(void *)(a1 + 192);
  *(void *)(a1 + 18sub_100006E64(v0 + 4) = *(void *)(a2 + 184);
  *(void *)(a1 + 19sub_100006E64(v0 + 2) = v16;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a2 + 208);
  uint64_t v19 = *(void *)(a1 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 20sub_100006E64(v0 + 8) = v18;
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *(void *)(a2 + 224);
  uint64_t v21 = *(void *)(a1 + 224);
  *(void *)(a1 + 21sub_100006E64(v0 + 6) = *(void *)(a2 + 216);
  *(void *)(a1 + 22sub_100006E64(v0 + 4) = v20;
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 23sub_100006E64(v0 + 2) = *(_BYTE *)(a2 + 232);
  uint64_t v22 = *(void *)(a2 + 248);
  uint64_t v23 = *(void *)(a1 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 24sub_100006E64(v0 + 8) = v22;
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + 25sub_100006E64(v0 + 6) = *(_BYTE *)(a2 + 256);
  uint64_t v24 = a3[18];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  uint64_t v27 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0LL);
  int v28 = sub_10000AB6C((uint64_t)v25, 1LL, v27);
  int v29 = sub_10000AB6C((uint64_t)v26, 1LL, v27);
  if (v28)
  {
    if (!v29)
    {
      uint64_t v30 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
      if (sub_10000AB6C((uint64_t)v26, 1LL, v30))
      {
        uint64_t v31 = sub_100006BEC(&qword_1000885D0);
        memcpy(v25, v26, *(void *)(*(void *)(v31 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v30 - 8) + 32LL))(v25, v26, v30);
        sub_10000AB60((uint64_t)v25, 0LL, 1LL, v30);
      }

      goto LABEL_13;
    }

    goto LABEL_7;
  }

  if (v29)
  {
    sub_100035AF4((uint64_t)v25, type metadata accessor for SubscriptionRegisterOperation.PreferredData);
LABEL_7:
    uint64_t v32 = &qword_100087EA0;
    goto LABEL_8;
  }

  uint64_t v27 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
  int v34 = sub_10000AB6C((uint64_t)v25, 1LL, v27);
  int v35 = sub_10000AB6C((uint64_t)v26, 1LL, v27);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v27 - 8) + 32LL))(v25, v26, v27);
LABEL_13:
      sub_10000AB60((uint64_t)v25, 0LL, 1LL, v27);
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v49 = *(void *)(v27 - 8);
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v49 + 40))(v25, v26, v27);
      goto LABEL_14;
    }

    (*(void (**)(void *, uint64_t))(v49 + 8))(v25, v27);
  }

  uint64_t v32 = &qword_1000885D0;
LABEL_8:
  uint64_t v33 = sub_100006BEC(v32);
  memcpy(v25, v26, *(void *)(*(void *)(v33 - 8) + 64LL));
LABEL_14:
  uint64_t v36 = a3[20];
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  uint64_t v41 = v37[1];
  *uint64_t v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease(v41);
  uint64_t v42 = a3[21];
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (uint64_t *)(a2 + v42);
  uint64_t v46 = *v44;
  uint64_t v45 = v44[1];
  uint64_t v47 = v43[1];
  *uint64_t v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease(v47);
  return a1;
}

uint64_t sub_100030450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003045C);
}

uint64_t sub_10003045C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(vsub_100006E64(v0 + 4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100006BEC(&qword_100087EA0);
    return sub_10000AB6C(a1 + *(int *)(a3 + 72), a2, v8);
  }

uint64_t sub_1000304D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000304E0);
}

uint64_t sub_1000304E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 2sub_100006E64(v0 + 4) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_100006BEC(&qword_100087EA0);
    return sub_10000AB60(v5 + *(int *)(a4 + 72), a2, a2, v7);
  }

  return result;
}

void sub_100030550(uint64_t a1)
{
  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = "(";
  v4[4] = "(";
  v4[5] = &unk_1000680E8;
  v4[6] = &unk_1000680E8;
  v4[7] = &unk_100068100;
  v4[8] = &unk_100068100;
  v4[9] = &unk_100068100;
  v4[10] = &unk_100068100;
  v4[11] = &unk_100068118;
  v4[12] = &unk_100068100;
  v4[13] = &unk_100068130;
  sub_100021AE4( 319LL,  (unint64_t *)&unk_100088640,  type metadata accessor for SubscriptionRegisterOperation.PreferredData);
  if (v3 <= 0x3F)
  {
    v4[14] = *(void *)(v2 - 8) + 64LL;
    v4[15] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[16] = &unk_1000680E8;
    v4[17] = &unk_1000680E8;
    swift_initStructMetadata(a1, 256LL, 18LL, v4, a1 + 16);
  }

uint64_t *sub_100030628(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(sub_100006BEC(&qword_1000885D0) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v7);
  }

  else
  {
    uint64_t v6 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
    if (sub_10000AB6C((uint64_t)a2, 1LL, v6))
    {
      memcpy(a1, a2, *(void *)(v4 + 64));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      sub_10000AB60((uint64_t)a1, 0LL, 1LL, v6);
    }
  }

  return a1;
}

uint64_t sub_1000306EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
  uint64_t result = sub_10000AB6C(a1, 1LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  }
  return result;
}

void *sub_100030744(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
  if (sub_10000AB6C((uint64_t)a2, 1LL, v4))
  {
    uint64_t v5 = sub_100006BEC(&qword_1000885D0);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
    sub_10000AB60((uint64_t)a1, 0LL, 1LL, v4);
  }

  return a1;
}

void *sub_1000307E0(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
  int v5 = sub_10000AB6C((uint64_t)a1, 1LL, v4);
  int v6 = sub_10000AB6C((uint64_t)a2, 1LL, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 24))(a1, a2, v4);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }

  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_100006BEC(&qword_1000885D0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  sub_10000AB60((uint64_t)a1, 0LL, 1LL, v4);
  return a1;
}

void *sub_1000308C4(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
  if (sub_10000AB6C((uint64_t)a2, 1LL, v4))
  {
    uint64_t v5 = sub_100006BEC(&qword_1000885D0);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
    sub_10000AB60((uint64_t)a1, 0LL, 1LL, v4);
  }

  return a1;
}

void *sub_100030960(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
  int v5 = sub_10000AB6C((uint64_t)a1, 1LL, v4);
  int v6 = sub_10000AB6C((uint64_t)a2, 1LL, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 40))(a1, a2, v4);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }

  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_100006BEC(&qword_1000885D0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  sub_10000AB60((uint64_t)a1, 0LL, 1LL, v4);
  return a1;
}

uint64_t sub_100030A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100030A50);
}

uint64_t sub_100030A50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006BEC(&qword_1000885D0);
  return sub_10000AB6C(a1, a2, v4);
}

uint64_t sub_100030A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100030A94);
}

uint64_t sub_100030A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006BEC(&qword_1000885D0);
  return sub_10000AB60(a1, a2, a2, v4);
}

void sub_100030AD0(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
  }

void sub_100030B48(uint64_t a1)
{
  uint64_t v41 = &_swiftEmptyDictionarySingleton;
  sub_1000500C0(v42);
  uint64_t v2 = v42[0];
  int64_t v3 = v42[3];
  unint64_t v4 = v42[4];
  uint64_t v29 = v42[1];
  int64_t v30 = (unint64_t)(v42[2] + 64LL) >> 6;
  uint64_t v43 = (uint64_t)v39 + 8;
  swift_bridgeObjectRetain(a1);
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v5 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  unint64_t v6 = v5 | (v3 << 6);
  while (1)
  {
    char v11 = *(_BYTE *)(*(void *)(v2 + 48) + v6);
    sub_100035EAC(*(void *)(v2 + 56) + 32 * v6, v43, qword_100087690);
    LOBYTE(v39[0]) = v11;
    v37[0] = v39[0];
    v37[1] = v39[1];
    uint64_t v38 = v40;
    sub_100035EAC((uint64_t)v37 + 8, (uint64_t)&v31, qword_100087690);
    if (!v32)
    {
      sub_10000BBA4((uint64_t)v37, &qword_100088458);
      uint64_t v24 = &v31;
      goto LABEL_33;
    }

    sub_10000AC00(&v31, v36);
    unsigned __int8 v12 = v37[0];
    char v34 = v37[0];
    sub_100035ED8((uint64_t)v37 + 8, (uint64_t)v35, qword_100087690);
    sub_10000AC00(v36, v33);
    uint64_t v13 = v41;
    unint64_t v14 = v41[2];
    if (v41[3] <= v14)
    {
      sub_100060A7C(v14 + 1, 1);
      uint64_t v13 = v41;
    }

    Hasher.init(_seed:)(&v31);
    uint64_t v15 = sub_100050BB0(v12);
    uint64_t v17 = v16;
    String.hash(into:)(&v31, v15, v16);
    swift_bridgeObjectRelease(v17);
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = v13 + 8;
    uint64_t v20 = -1LL << *((_BYTE *)v13 + 32);
    unint64_t v21 = v18 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~v13[(v21 >> 6) + 8]) == 0) {
      break;
    }
    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~v13[(v21 >> 6) + 8])) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_32:
    *(void *)((char *)v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(_BYTE *)(v13[6] + v23) = v12;
    sub_10000AC00(v33, (_OWORD *)(v13[7] + 32 * v23));
    ++v13[2];
    uint64_t v24 = (__int128 *)v35;
LABEL_33:
    sub_10000BBA4((uint64_t)v24, qword_100087690);
    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v7 = v3 + 1;
    if (__OFADD__(v3, 1LL)) {
      goto LABEL_37;
    }
    if (v7 >= v30) {
      goto LABEL_35;
    }
    unint64_t v8 = *(void *)(v29 + 8 * v7);
    int64_t v9 = v3 + 1;
    if (!v8)
    {
      int64_t v9 = v3 + 2;
      if (v3 + 2 >= v30) {
        goto LABEL_35;
      }
      unint64_t v8 = *(void *)(v29 + 8 * v9);
      if (!v8)
      {
        int64_t v9 = v3 + 3;
        if (v3 + 3 >= v30) {
          goto LABEL_35;
        }
        unint64_t v8 = *(void *)(v29 + 8 * v9);
        if (!v8)
        {
          int64_t v9 = v3 + 4;
          if (v3 + 4 >= v30) {
            goto LABEL_35;
          }
          unint64_t v8 = *(void *)(v29 + 8 * v9);
          if (!v8)
          {
            int64_t v9 = v3 + 5;
            if (v3 + 5 >= v30) {
              goto LABEL_35;
            }
            unint64_t v8 = *(void *)(v29 + 8 * v9);
            if (!v8)
            {
              int64_t v10 = v3 + 6;
              while (v10 < v30)
              {
                unint64_t v8 = *(void *)(v29 + 8 * v10++);
                if (v8)
                {
                  int64_t v9 = v10 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_100030ECC()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = sub_100035F90();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100006BEC(&qword_100088748);
  uint64_t v81 = *(void *)(v6 - 8);
  uint64_t v82 = v6;
  sub_10000C318();
  __chkstk_darwin(v7);
  sub_10000E5C4();
  uint64_t v80 = v8;
  uint64_t v9 = sub_100006BEC(&qword_100088750);
  uint64_t v84 = *(void *)(v9 - 8);
  uint64_t v85 = v9;
  sub_10000C318();
  __chkstk_darwin(v10);
  sub_10000E5C4();
  uint64_t v83 = v11;
  uint64_t v12 = sub_100006BEC(&qword_100088758);
  uint64_t v87 = *(void *)(v12 - 8);
  uint64_t v88 = v12;
  sub_10000C318();
  __chkstk_darwin(v13);
  sub_10000E5C4();
  uint64_t v86 = v14;
  uint64_t v92 = sub_100006BEC(&qword_100088760);
  uint64_t v90 = *(void *)(v92 - 8);
  sub_10000C318();
  __chkstk_darwin(v15);
  sub_10000E5C4();
  uint64_t v89 = v16;
  uint64_t v17 = sub_100006BEC(&qword_100088768);
  uint64_t v93 = *(void *)(v17 - 8);
  sub_10000C318();
  __chkstk_darwin(v18);
  sub_10000E5C4();
  uint64_t v91 = v19;
  uint64_t v20 = (void *)v0[5];
  uint64_t v21 = v0[19];
  uint64_t v22 = v0[20];
  uint64_t v23 = (*(unsigned __int8 *)(v1 + 256) < 6u) & (0x27u >> *(_BYTE *)(v1 + 256));
  uint64_t v25 = v20[5];
  uint64_t v24 = v20[6];
  sub_100006C2C(v20 + 2, v25);
  unint64_t v26 = (void *)dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)( v21,  v22,  v23,  v25,  v24);
  BOOL v27 = v26;
  if (v26)
  {
    id v28 = v26;
    uint64_t v30 = SportingEventSubscription.consumers.getter(v29);
    uint64_t v31 = *(void *)(v30 + 16);
    swift_bridgeObjectRelease(v30);
    if (v31)
    {
      uint64_t v32 = sub_100031534();

      return v32;
    }
  }

  sub_100006C2C((void *)v1, *(void *)(v1 + 24));
  uint64_t v97 = sub_10000F978();
  sub_100035B1C( v1,  (uint64_t)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  type metadata accessor for SubscriptionRegisterOperation);
  uint64_t v34 = *(unsigned __int8 *)(v3 + 80);
  id v79 = v27;
  uint64_t v95 = ((v34 + 16) & ~v34) + v4;
  uint64_t v96 = (v34 + 16) & ~v34;
  uint64_t v35 = v96;
  uint64_t v94 = v34 | 7;
  uint64_t v36 = swift_allocObject(&unk_100080120, v95, v34 | 7);
  sub_100035B48( (uint64_t)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v36 + v35,  type metadata accessor for SubscriptionRegisterOperation);
  uint64_t v38 = static Subscribers.Demand.unlimited.getter(v37);
  uint64_t v39 = sub_100006BEC(&qword_1000874C0);
  uint64_t v40 = sub_100006BEC(&qword_1000874D0);
  uint64_t v78 = v17;
  uint64_t v41 = v40;
  sub_10000C04C(&qword_1000874C8, &qword_1000874C0);
  uint64_t v43 = v42;
  sub_10000C04C(&qword_1000874E0, &qword_1000874D0);
  uint64_t v44 = v80;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v38, sub_100035880, v36, v39, v41, v43, v45);
  swift_release(v36);
  swift_release(v97);
  uint64_t v46 = (uint64_t)v5;
  uint64_t v77 = v5;
  sub_100035B1C(v1, (uint64_t)v5, type metadata accessor for SubscriptionRegisterOperation);
  uint64_t v47 = v94;
  uint64_t v48 = swift_allocObject(&unk_100080148, v95, v94);
  sub_100035B48(v46, v48 + v96, type metadata accessor for SubscriptionRegisterOperation);
  uint64_t v50 = static Subscribers.Demand.unlimited.getter(v49);
  uint64_t v51 = sub_100006BEC(&qword_100088770);
  uint64_t v52 = sub_100006BEC(&qword_100088778);
  sub_10000C04C(&qword_100088780, &qword_100088748);
  uint64_t v54 = v53;
  sub_10000C04C(&qword_100088788, &qword_100088778);
  uint64_t v55 = v82;
  uint64_t v56 = v83;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v50, sub_1000359C8, v48, v82, v51, v52, v54, v57);
  swift_release(v48);
  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v44, v55);
  uint64_t v58 = (uint64_t)v77;
  sub_100035B1C(v1, (uint64_t)v77, type metadata accessor for SubscriptionRegisterOperation);
  uint64_t v59 = v95;
  uint64_t v60 = swift_allocObject(&unk_100080170, v95, v47);
  uint64_t v61 = v96;
  sub_100035B48(v58, v60 + v96, type metadata accessor for SubscriptionRegisterOperation);
  uint64_t v62 = sub_100035F98((uint64_t)&unk_100080198);
  *(void *)(v62 + 1sub_100006E64(v0 + 6) = sub_1000359F0;
  *(void *)(v62 + 2sub_100006E64(v0 + 4) = v60;
  sub_10000C04C(&qword_100088790, &qword_100088750);
  Publisher.tryFilter(_:)(sub_100035A78, v62, v85, v63);
  swift_release(v62);
  sub_10000C370(v56, *(uint64_t (**)(uint64_t, uint64_t))(v84 + 8));
  sub_100035B1C(v1, v58, type metadata accessor for SubscriptionRegisterOperation);
  uint64_t v64 = swift_allocObject(&unk_1000801C0, v59, v94);
  sub_100035B48(v58, v64 + v61, type metadata accessor for SubscriptionRegisterOperation);
  uint64_t v65 = sub_100035F98((uint64_t)&unk_1000801E8);
  *(void *)(v65 + 1sub_100006E64(v0 + 6) = sub_100035A98;
  *(void *)(v65 + 2sub_100006E64(v0 + 4) = v64;
  sub_10000C04C(&qword_100088798, &qword_100088758);
  uint64_t v66 = v89;
  Publisher.map<A>(_:)(sub_100035AEC, v65, v88, &type metadata for Bool);
  swift_release(v65);
  uint64_t v67 = sub_100035F84();
  sub_10000C370(v67, v68);
  uint64_t v69 = sub_100006BEC(&qword_100088360);
  sub_10000C04C(&qword_1000887A0, &qword_100088760);
  uint64_t v71 = v70;
  sub_10000C04C(&qword_100088368, &qword_100088360);
  Publisher.catch<A>(_:)(sub_100034A6C, 0LL, v92, v69, v71, v72);
  sub_10000C370(v66, *(uint64_t (**)(uint64_t, uint64_t))(v90 + 8));
  sub_10000C04C(&qword_1000887A8, &qword_100088768);
  uint64_t v74 = Publisher.eraseToAnyPublisher()(v78, v73);

  uint64_t v75 = sub_100035F84();
  sub_10000C498(v75, v76);
  return v74;
}

uint64_t sub_100031534()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006BEC(&qword_100088448);
  uint64_t v49 = *(void *)(v2 - 8);
  uint64_t v50 = v2;
  __chkstk_darwin(v2);
  uint64_t v48 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100006BEC(&qword_1000883B8);
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100006BEC(&qword_1000883C0);
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  __chkstk_darwin(v6);
  uint64_t v45 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100006BEC(&qword_100087EA0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100006BEC(&qword_1000885D0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __n128 v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = SportingEventSubscription.consumers.getter(v16);
  uint64_t v19 = v0[17];
  uint64_t v20 = v0[18];
  swift_bridgeObjectRetain(v20);
  sub_1000171C8(v51, v19, v20);
  swift_bridgeObjectRelease(v51[1]);
  uint64_t v21 = v0[24];
  if (v21)
  {
    uint64_t v22 = v1[26];
    if (v22)
    {
      uint64_t v41 = v1[23];
      uint64_t v23 = v1[25];
      uint64_t v24 = type metadata accessor for SubscriptionRegisterOperation(0LL);
      sub_100035EAC((uint64_t)v1 + *(int *)(v24 + 72), (uint64_t)v10, &qword_100087EA0);
      uint64_t v25 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0LL);
      if (sub_10000AB6C((uint64_t)v10, 1LL, v25) == 1)
      {
        sub_10000BBA4((uint64_t)v10, &qword_100087EA0);
        sub_10000AB60((uint64_t)v13, 1LL, 1LL, v14);
      }

      else
      {
        sub_100035EAC((uint64_t)v10, (uint64_t)v13, &qword_1000885D0);
        sub_100035AF4((uint64_t)v10, type metadata accessor for SubscriptionRegisterOperation.PreferredData);
        if (sub_10000AB6C((uint64_t)v13, 1LL, v14) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v13, v14);
          uint64_t v40 = v52;
          BOOL v27 = (void *)SportingEventSubscription.byChanging(leagueId:sportId:metadata:consumers:)( v41,  v21,  v23,  v22,  v18,  v52);
          swift_bridgeObjectRelease(v40);
          (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
          goto LABEL_8;
        }
      }

      sub_10000BBA4((uint64_t)v13, &qword_1000885D0);
    }
  }

  uint64_t v26 = v52;
  BOOL v27 = (void *)SportingEventSubscription.byChangingConsumers(_:)(v52);
  swift_bridgeObjectRelease(v26);
LABEL_8:
  id v28 = (void *)v1[5];
  uint64_t v29 = (*((unsigned __int8 *)v1 + 256) < 6u) & (0x27u >> *((_BYTE *)v1 + 256));
  uint64_t v30 = v28[5];
  uint64_t v31 = v28[6];
  sub_100006C2C(v28 + 2, v30);
  dispatch thunk of PersistentStorable.writeEventSubscription(_:isConventionalOrUnified:)(v27, v29, v30, v31);
  LOBYTE(v51[0]) = 1;
  uint64_t v32 = v42;
  Just.init(_:)(v51);
  uint64_t v33 = sub_100006BEC((uint64_t *)&unk_100088B90);
  uint64_t v34 = v44;
  uint64_t v35 = v45;
  Just.setFailureType<A>(to:)(v33, v44, v33, &protocol self-conformance witness table for Error);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v34);
  sub_10000C04C(&qword_100088400, &qword_1000883C0);
  uint64_t v36 = v47;
  uint64_t v38 = Publisher.eraseToAnyPublisher()(v47, v37);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v36);
  return v38;
}

uint64_t sub_1000319E0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v53 = a3;
  uint64_t v5 = type metadata accessor for SubscriptionRegisterOperation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v50 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (os_log_t *)((char *)&v50 - v12);
  __chkstk_darwin(v14);
  __n128 v16 = (char *)&v50 - v15;
  uint64_t v17 = *a1;
  unint64_t v18 = a1[1];
  if (qword_1000870F8 != -1) {
    swift_once(&qword_1000870F8, sub_10004BF1C);
  }
  uint64_t v54 = v17;
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_10000B928(v19, (uint64_t)qword_10008F348);
  sub_100035B1C(a2, (uint64_t)v16, type metadata accessor for SubscriptionRegisterOperation);
  sub_100035B1C(a2, (uint64_t)v13, type metadata accessor for SubscriptionRegisterOperation);
  sub_100035B1C(a2, (uint64_t)v10, type metadata accessor for SubscriptionRegisterOperation);
  sub_100035B1C(a2, (uint64_t)v7, type metadata accessor for SubscriptionRegisterOperation);
  uint64_t v20 = swift_bridgeObjectRetain_n(v18, 2LL);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  int v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = swift_slowAlloc(52LL, -1LL);
    uint64_t v52 = swift_slowAlloc(160LL, -1LL);
    v56[0] = v52;
    *(_DWORD *)uint64_t v24 = 136316162;
    HIDWORD(v51) = v23;
    os_log_t v50 = v21;
    uint64_t v25 = *((void *)v16 + 19);
    unint64_t v26 = *((void *)v16 + 20);
    swift_bridgeObjectRetain(v26);
    uint64_t v55 = sub_100015AD4(v25, v26, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v26);
    sub_100035AF4((uint64_t)v16, type metadata accessor for SubscriptionRegisterOperation);
    *(_WORD *)(v24 + sub_100006E64(v0 + 12) = 2080;
    swift_bridgeObjectRetain(v18);
    uint64_t v55 = sub_100015AD4(v54, v18, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease_n(v18, 3LL);
    *(_WORD *)(v24 + 2sub_100006E64(v0 + 2) = 2080;
    BOOL v27 = (uint64_t *)(*sub_100006C2C(v13, v13[3]) + OBJC_IVAR____TtC7sportsd11ApsListener_currentAPSConnectionEnvironment);
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    swift_bridgeObjectRetain(v29);
    uint64_t v55 = sub_100015AD4(v28, v29, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v24 + 24, v24 + 32);
    swift_bridgeObjectRelease(v29);
    sub_100035AF4((uint64_t)v13, type metadata accessor for SubscriptionRegisterOperation);
    *(_WORD *)(v24 + 3sub_100006E64(v0 + 2) = 2080;
    uint64_t v30 = *((void *)v10 + 17);
    unint64_t v31 = *((void *)v10 + 18);
    swift_bridgeObjectRetain(v31);
    uint64_t v55 = sub_100015AD4(v30, v31, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v24 + 34, v24 + 42);
    swift_bridgeObjectRelease(v31);
    sub_100035AF4((uint64_t)v10, type metadata accessor for SubscriptionRegisterOperation);
    *(_WORD *)(v24 + 4sub_100006E64(v0 + 2) = 2080;
    uint64_t v32 = sub_100047768(v7[256]);
    unint64_t v34 = v33;
    uint64_t v55 = sub_100015AD4(v32, v33, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v24 + 44, v24 + 52);
    swift_bridgeObjectRelease(v34);
    sub_100035AF4((uint64_t)v7, type metadata accessor for SubscriptionRegisterOperation);
    os_log_t v35 = v50;
    _os_log_impl( (void *)&_mh_execute_header,  v50,  BYTE4(v51),  "Tempo /register with id=%s, push_token=%s, aps_env=%s consumer_id=%s, applicationType=%s",  (uint8_t *)v24,  0x34u);
    uint64_t v36 = v52;
    swift_arrayDestroy(v52, 5LL);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
    sub_100035AF4((uint64_t)v16, type metadata accessor for SubscriptionRegisterOperation);
    swift_bridgeObjectRelease_n(v18, 2LL);
    sub_100035AF4((uint64_t)v13, type metadata accessor for SubscriptionRegisterOperation);
    sub_100035AF4((uint64_t)v10, type metadata accessor for SubscriptionRegisterOperation);
    sub_100035AF4((uint64_t)v7, type metadata accessor for SubscriptionRegisterOperation);
  }

  sub_100006C2C((void *)(a2 + 56), *(void *)(a2 + 80));
  uint64_t v37 = *(void *)(a2 + 152);
  uint64_t v38 = *(void *)(a2 + 160);
  uint64_t v39 = *(void *)(a2 + 184);
  uint64_t v40 = *(void *)(a2 + 192);
  uint64_t v41 = *(unsigned __int8 *)(a2 + 232);
  uint64_t v42 = *(unsigned __int8 *)(a2 + 256);
  uint64_t v43 = sub_100031E9C();
  sub_100030B48(v43);
  uint64_t v45 = v44;
  swift_bridgeObjectRelease(v43);
  sub_100005D84( v37,  v38,  v39,  v40,  v54,  v18,  v42,  v41,  v45,  v49,  (uint64_t)v50,  v51,  v52,  (uint64_t)v53,  v54,  v55,  v56[0],  v56[1],  v56[2],  v56[3],  v56[4]);
  uint64_t v47 = v46;
  uint64_t result = swift_bridgeObjectRelease(v45);
  *uint64_t v53 = v47;
  return result;
}

uint64_t sub_100031E9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100006BEC(&qword_100087E58);
  uint64_t inited = swift_initStackObject(v6, &v26);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100068090;
  *(_BYTE *)(inited + 3sub_100006E64(v0 + 2) = 2;
  uint64_t v8 = *(void *)(v1 + 152);
  uint64_t v9 = *(void *)(v1 + 160);
  *(void *)(inited + 6sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 4sub_100006E64(v0 + 8) = v9;
  *(_BYTE *)(inited + 7sub_100006E64(v0 + 2) = 20;
  uint64_t v10 = (int *)type metadata accessor for SubscriptionRegisterOperation(0LL);
  uint64_t v11 = (uint64_t *)(v1 + v10[20]);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  *(void *)(inited + 10sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(inited + 80) = v12;
  *(void *)(inited + 8sub_100006E64(v0 + 8) = v13;
  *(_BYTE *)(inited + 1sub_100006E64(v0 + 12) = 21;
  uint64_t v14 = sub_100047768(*(_BYTE *)(v1 + 256));
  *(void *)(inited + 14sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(inited + 120) = v14;
  *(void *)(inited + 12sub_100006E64(v0 + 8) = v15;
  *(_BYTE *)(inited + 15sub_100006E64(v0 + 2) = 7;
  swift_bridgeObjectRetain(v9);
  uint64_t v16 = swift_bridgeObjectRetain(v13);
  Date.init()(v16);
  sub_100052B9C();
  uint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)(inited + 18sub_100006E64(v0 + 4) = &type metadata for UInt64;
  *(void *)(inited + 160) = v18;
  *(_BYTE *)(inited + 19sub_100006E64(v0 + 2) = 8;
  uint64_t v19 = *(void *)(v1 + v10[19]);
  *(void *)(inited + 22sub_100006E64(v0 + 4) = &type metadata for UInt64;
  *(void *)(inited + 200) = v19;
  *(_BYTE *)(inited + 23sub_100006E64(v0 + 2) = 43;
  unsigned int v20 = *(unsigned __int8 *)(v1 + 256);
  *(void *)(inited + 26sub_100006E64(v0 + 4) = &type metadata for Bool;
  *(_BYTE *)(inited + 240) = (v20 < 6) & (0x27u >> v20);
  *(_BYTE *)(inited + 27sub_100006E64(v0 + 2) = 44;
  *(void *)(inited + 30sub_100006E64(v0 + 4) = &type metadata for EventType.EventName;
  *(_BYTE *)(inited + 280) = 0;
  *(_BYTE *)(inited + 3sub_100006E64(v0 + 12) = 1;
  uint64_t v21 = (uint64_t *)(v1 + v10[21]);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *(void *)(inited + 34sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(inited + 320) = v23;
  *(void *)(inited + 32sub_100006E64(v0 + 8) = v22;
  swift_bridgeObjectRetain(v22);
  sub_100006BEC(qword_100087690);
  sub_100021CD0();
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for SportsMetricsKey);
}

uint64_t sub_100032090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v86 = a3;
  uint64_t v85 = sub_100006BEC(&qword_100088770);
  __chkstk_darwin(v85);
  uint64_t v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100006BEC(&qword_100088800);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100006BEC(&qword_100088808);
  uint64_t v84 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100006BEC(&qword_100087520);
  uint64_t v74 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v75 = v14;
  uint64_t v76 = (uint64_t)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = sub_100006BEC(&qword_100088810);
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v71 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = sub_100006BEC(&qword_100088818);
  uint64_t v78 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v77 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100006BEC(&qword_100088820);
  uint64_t v81 = *(void *)(v17 - 8);
  uint64_t v82 = v17;
  __chkstk_darwin(v17);
  id v79 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v87[3] = &type metadata for TVAppFeatureFlags;
  v87[4] = sub_10000B940();
  char v19 = isFeatureEnabled(_:)(v87);
  sub_100006E64(v87);
  uint64_t v20 = a1;
  if ((v19 & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v21 = a1 + *(int *)(v13 + 40);
  uint64_t v22 = *(void *)(v21 + 48);
  if (!v22) {
    goto LABEL_6;
  }
  uint64_t v23 = v10;
  uint64_t v24 = v7;
  uint64_t v25 = *(void *)(v83 + 152);
  uint64_t v26 = *(void *)(v83 + 160);
  uint64_t v70 = v21;
  uint64_t v27 = v20;
  swift_bridgeObjectRetain(v26);
  uint64_t v69 = v25;
  uint64_t v28 = v25;
  uint64_t v7 = v24;
  uint64_t v10 = v23;
  sub_10003BDBC(v28, v26, v22);
  uint64_t v30 = v29;
  swift_bridgeObjectRelease(v26);
  uint64_t v20 = v27;
  uint64_t v31 = v70;
  if (v30)
  {
    unint64_t v32 = dispatch thunk of SportingEvent.competitors.getter();

    uint64_t v34 = *(void *)(v31 + 24);
    if (v34)
    {
      swift_bridgeObjectRetain(v26);
      uint64_t v35 = sub_10003BDF0(v69, v26, v34);
      uint64_t v37 = v36;
      uint64_t v33 = swift_bridgeObjectRelease(v26);
    }

    else
    {
      uint64_t v35 = 0LL;
      uint64_t v37 = 0LL;
    }

    __chkstk_darwin(v33);
    uint64_t v44 = v83;
    *(&v69 - sub_100006E64(v0 + 2) = v45;
    *(&v69 - 1) = v44;
    uint64_t v46 = sub_100053278((void (*)(uint64_t *__return_ptr, id *))sub_100035B74, (uint64_t)(&v69 - 4), v32);
    uint64_t v47 = swift_bridgeObjectRelease(v32);
    uint64_t v48 = *(void *)(v44 + 40);
    __chkstk_darwin(v47);
    *(&v69 - sub_100006E64(v0 + 2) = (uint64_t)sub_100035B8C;
    *(&v69 - 1) = v48;
    swift_retain(v48);
    uint64_t v49 = sub_10002F020((uint64_t)v46, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100035B90);
    swift_bridgeObjectRelease(v46);
    swift_release(v48);
    v87[0] = v49;
    uint64_t v50 = sub_100006BEC(&qword_100088830);
    uint64_t v51 = sub_100006BEC(&qword_100088838);
    sub_10000C04C(&qword_100088840, &qword_100088830);
    uint64_t v53 = v52;
    sub_10000C04C(&qword_100088848, &qword_100088838);
    uint64_t v54 = v71;
    Publishers.MergeMany.init<A>(_:)(v87, v50, v51, v53, v55);
    sub_10000C04C(&qword_100088850, &qword_100088810);
    uint64_t v56 = v77;
    uint64_t v57 = v73;
    Publisher.collect()(v73, v58);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v54, v57);
    uint64_t v59 = v76;
    sub_100035EAC(v27, v76, &qword_100087520);
    uint64_t v60 = *(unsigned __int8 *)(v74 + 80);
    uint64_t v61 = (v60 + 16) & ~v60;
    unint64_t v62 = (v75 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v63 = swift_allocObject(&unk_100080210, v62 + 16, v60 | 7);
    sub_100035ED8(v59, v63 + v61, &qword_100087520);
    uint64_t v64 = (uint64_t *)(v63 + v62);
    *uint64_t v64 = v35;
    v64[1] = v37;
    sub_10000C04C(&qword_100088858, &qword_100088818);
    uint64_t v66 = v79;
    uint64_t v65 = v80;
    Publisher.map<A>(_:)(sub_100035E44, v63, v80, v85);
    swift_release(v63);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v56, v65);
    sub_10000C04C(&qword_100088860, &qword_100088820);
    uint64_t v67 = v82;
    uint64_t v42 = Publisher.eraseToAnyPublisher()(v82, v68);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v66, v67);
  }

  else
  {
LABEL_6:
    uint64_t v38 = *(int *)(v85 + 48);
    uint64_t v39 = *(int *)(v85 + 64);
    sub_100035EAC(v20, (uint64_t)v5, &qword_100087520);
    *(void *)&v5[v38] = _swiftEmptyArrayStorage;
    *(_OWORD *)&v5[v39] = xmmword_1000680A0;
    Just.init(_:)(v5);
    uint64_t v40 = sub_100006BEC((uint64_t *)&unk_100088B90);
    Just.setFailureType<A>(to:)(v40, v6, v40, &protocol self-conformance witness table for Error);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_10000C04C(&qword_100088828, &qword_100088808);
    uint64_t v42 = Publisher.eraseToAnyPublisher()(v10, v41);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v12, v10);
  }

  *uint64_t v86 = v42;
  return result;
}

void sub_1000326FC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for TemplateImageUrl.ImageFormat(0LL);
  uint64_t v74 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100006BEC(&qword_100087368);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v15);
  if (!a2 || !*(void *)(a2 + 16)) {
    goto LABEL_37;
  }
  uint64_t v72 = v17;
  uint64_t v73 = v4;
  uint64_t v71 = (char *)v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *a1;
  uint64_t v19 = *(void *)(a3 + 152);
  uint64_t v20 = *(void *)(a3 + 160);
  swift_bridgeObjectRetain(v20);
  unint64_t v21 = sub_100015FF4(v19, v20);
  if ((v22 & 1) == 0)
  {
    uint64_t v36 = v20;
LABEL_36:
    swift_bridgeObjectRelease(v36);
LABEL_37:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 1sub_100006E64(v0 + 6) = 0u;
    return;
  }

  uint64_t v23 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v21);
  uint64_t v24 = v23[1];
  uint64_t v70 = *v23;
  swift_bridgeObjectRetain(v24);
  uint64_t v25 = swift_bridgeObjectRelease(v20);
  uint64_t v26 = (void *)SportingEventCompetitorContainer.competitor.getter(v25);
  uint64_t v27 = dispatch thunk of SportingEventCompetitor.images.getter();

  if (!v27)
  {
LABEL_35:
    uint64_t v36 = v24;
    goto LABEL_36;
  }

  if (!((unint64_t)v27 >> 62))
  {
    uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v27);
    if (v28) {
      goto LABEL_7;
    }
    goto LABEL_44;
  }

  if (v27 >= 0) {
    uint64_t v64 = v27 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v64 = v27;
  }
  swift_bridgeObjectRetain_n(v27, 2LL);
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v64);
  swift_bridgeObjectRelease(v27);
  if (!v28)
  {
LABEL_44:
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(v27, 2LL);
    goto LABEL_37;
  }

LABEL_7:
  unint64_t v67 = v27 & 0xC000000000000001LL;
  uint64_t v68 = v28;
  v65[1] = v18;
  uint64_t v69 = v27;
  if ((v27 & 0xC000000000000001LL) != 0) {
    goto LABEL_46;
  }
  for (id i = *(id *)(v27 + 32); ; id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v27))
  {
    uint64_t v30 = i;
    uint64_t v31 = SportingEventImage.type.getter();
    uint64_t v33 = v32;
    BOOL v34 = v31 == 1869049676 && v32 == 0xE400000000000000LL;
    uint64_t v66 = v9;
    if (v34) {
      break;
    }
    uint64_t v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, 1869049676LL, 0xE400000000000000LL, 0LL);
    swift_bridgeObjectRelease(v33);
    if ((v9 & 1) != 0)
    {
      uint64_t v9 = v24;
      uint64_t v35 = v69;
      uint64_t v33 = v69;
      goto LABEL_18;
    }

    v65[0] = v15;

    if (v68 == 1)
    {
LABEL_34:
      swift_bridgeObjectRelease_n(v69, 2LL);
      goto LABEL_35;
    }

    uint64_t v15 = 5LL;
    while (1)
    {
      uint64_t v27 = v15 - 4;
      id v58 = v67
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, v69)
          : *(id *)(v69 + 8 * v15);
      uint64_t v30 = v58;
      uint64_t v59 = v15 - 3;
      if (__OFADD__(v27, 1LL)) {
        break;
      }
      uint64_t v60 = SportingEventImage.type.getter();
      uint64_t v33 = v61;
      uint64_t v9 = v24;
      if (v60 == 1869049676 && v61 == 0xE400000000000000LL)
      {
        uint64_t v15 = v65[0];
        goto LABEL_17;
      }

      char v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, 1869049676LL, 0xE400000000000000LL, 0LL);
      swift_bridgeObjectRelease(v33);
      if ((v63 & 1) != 0)
      {
        uint64_t v35 = v69;
        uint64_t v33 = v69;
        uint64_t v15 = v65[0];
        goto LABEL_18;
      }

      ++v15;
      uint64_t v24 = v9;
      if (v59 == v68) {
        goto LABEL_34;
      }
    }

    __break(1u);
LABEL_46:
    ;
  }

  uint64_t v9 = v24;
LABEL_17:
  uint64_t v35 = v69;
  swift_bridgeObjectRelease(v69);
LABEL_18:
  swift_bridgeObjectRelease(v35);
  uint64_t v37 = swift_bridgeObjectRelease(v33);
  uint64_t v38 = SportingEventImage.token.getter(v37);
  uint64_t v40 = v39;

  uint64_t v41 = v9;
  uint64_t v42 = static TemplateImageUrl.templateThumbUrl(host:token:)(v70, v9, v38, v40);
  uint64_t v44 = v43;
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v41);
  uint64_t v45 = v66;
  if (!v44) {
    goto LABEL_37;
  }
  uint64_t v46 = v74;
  (*(void (**)(char *, void, uint64_t))(v74 + 104))( v11,  enum case for TemplateImageUrl.ImageFormat.png(_:),  v66);
  static TemplateImageUrl.imageUrl(templateUrl:width:height:format:)(v42, v44, 200LL, 200LL, v11);
  swift_bridgeObjectRelease(v44);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v45);
  if (sub_10000AB6C((uint64_t)v14, 1LL, v15) == 1)
  {
    sub_10000BBA4((uint64_t)v14, &qword_100087368);
    goto LABEL_37;
  }

  uint64_t v48 = v71;
  uint64_t v47 = v72;
  uint64_t v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v72 + 32))(v71, v14, v15);
  uint64_t v50 = (void *)SportingEventCompetitorContainer.competitor.getter(v49);
  uint64_t v51 = SportingEventCompetitor.canonicalId.getter();
  uint64_t v53 = v52;

  uint64_t v55 = URL.absoluteString.getter(v54);
  uint64_t v57 = v56;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v15);
  *(void *)a4 = v51;
  *(void *)(a4 + sub_100006E64(v0 + 8) = v53;
  *(void *)(a4 + 1sub_100006E64(v0 + 6) = v55;
  *(void *)(a4 + 2sub_100006E64(v0 + 4) = v57;
}

  sub_10005D278();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  swift_bridgeObjectRelease(v7);
  sub_10000BBA4((uint64_t)&v16, (uint64_t *)&unk_100088BA0);
  sub_10005BD28(v11, v13 & 0x101);
  swift_bridgeObjectRelease(v11);
  return sub_100006E64(v19);
}

uint64_t sub_100032BA4@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = sub_100006BEC(&qword_100088770);
  uint64_t v11 = *(int *)(v10 + 48);
  uint64_t v12 = (void *)(a5 + *(int *)(v10 + 64));
  sub_100035EAC(a2, a5, &qword_100087520);
  *(void *)(a5 + vsub_100006E64(v0 + 11) = v9;
  void *v12 = a3;
  v12[1] = a4;
  swift_bridgeObjectRetain(a4);
  return swift_bridgeObjectRetain(v9);
}

uint64_t sub_100032C28(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = _s20RegistrationResponseVMa(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100006BEC(&qword_100087520);
  sub_100035B1C((uint64_t)&a1[*(int *)(v13 + 40)], (uint64_t)v12, _s20RegistrationResponseVMa);
  uint64_t v14 = *((void *)v12 + 6);
  if (v14)
  {
    uint64_t v16 = *(void *)(a5 + 152);
    uint64_t v15 = *(void *)(a5 + 160);
    swift_bridgeObjectRetain(v15);
    sub_10003BDBC(v16, v15, v14);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(v15);
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  if (a4) {
    uint64_t v19 = a3;
  }
  else {
    uint64_t v19 = 0LL;
  }
  if (a4) {
    uint64_t v20 = a4;
  }
  else {
    uint64_t v20 = 0xE000000000000000LL;
  }
  swift_bridgeObjectRetain(a4);
  unint64_t v21 = (void *)sub_100032DEC(a1, a2, v19, v20);
  swift_bridgeObjectRelease(v20);
  if (v18)
  {
    type metadata accessor for ApsMessageProcessingOperation(0LL);
    id v22 = v18;
    id v23 = v21;
    sub_10005342C(v22, v21);
  }

  sub_100034174(*(void *)&a1[*(int *)(v13 + 36)], *(void *)&a1[*(int *)(v13 + 36) + 8]);
  uint64_t v24 = v26[1];
  sub_1000343F8((uint64_t)v21, v18);
  if (v24)
  {
    sub_100035AF4((uint64_t)v12, _s20RegistrationResponseVMa);
  }

  else
  {

    sub_100035AF4((uint64_t)v12, _s20RegistrationResponseVMa);
  }

  return 1LL;
}

uint64_t sub_100032DEC(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)v4;
  uint64_t v203 = a4;
  uint64_t v202 = a3;
  v199 = a2;
  uint64_t v226 = a1;
  uint64_t v6 = sub_100006BEC(&qword_1000887B0);
  __n128 v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v196 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SportingEventRunningClockFeature(0LL, v7);
  uint64_t v229 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v228 = (char *)&v196 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v227 = (char *)&v196 - v13;
  uint64_t v219 = type metadata accessor for SubscriptionRegisterOperation(0LL);
  __chkstk_darwin(v219);
  uint64_t v211 = (char *)&v196 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100006BEC(&qword_100087368);
  __chkstk_darwin(v15);
  uint64_t v222 = (uint64_t)&v196 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v221 = (uint64_t)&v196 - v18;
  __chkstk_darwin(v19);
  uint64_t v220 = (uint64_t)&v196 - v20;
  uint64_t v207 = type metadata accessor for Sport(0LL);
  uint64_t v206 = *(void *)(v207 - 8);
  __chkstk_darwin(v207);
  size_t v205 = (char *)&v196 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100006BEC(&qword_1000887B8);
  __chkstk_darwin(v22);
  uint64_t v213 = (uint64_t)&v196 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v198 = (uint64_t)&v196 - v25;
  uint64_t v26 = sub_100006BEC(&qword_1000887C0);
  __chkstk_darwin(v26);
  uint64_t v196 = (char *)&v196 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v208 = type metadata accessor for Date(0LL);
  uint64_t v204 = *(void *)(v208 - 8);
  __chkstk_darwin(v208);
  uint64_t v209 = (char *)&v196 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v29);
  uint64_t v197 = (char *)&v196 - v30;
  __chkstk_darwin(v31);
  size_t v210 = (char *)&v196 - v32;
  uint64_t v33 = sub_100006BEC(&qword_100087EA0);
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v196 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = sub_100006BEC(&qword_1000885D0);
  __chkstk_darwin(v36);
  uint64_t v212 = (uint64_t)&v196 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v38);
  int v201 = (char *)&v196 - v39;
  __chkstk_darwin(v40);
  uint64_t v217 = (uint64_t)&v196 - v41;
  __chkstk_darwin(v42);
  v223 = (char **)((char *)&v196 - v43);
  __chkstk_darwin(v44);
  uint64_t v225 = (uint64_t)&v196 - v45;
  uint64_t v215 = _s20RegistrationResponseVMa(0LL);
  __chkstk_darwin(v215);
  uint64_t v47 = (char *)&v196 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = *(void **)(v4 + 40);
  uint64_t v50 = *(void *)(v4 + 152);
  uint64_t v49 = *(void *)(v4 + 160);
  uint64_t v51 = (*(unsigned __int8 *)(v4 + 256) < 6u) & (0x27u >> *(_BYTE *)(v4 + 256));
  uint64_t v53 = v48[5];
  uint64_t v52 = v48[6];
  sub_100006C2C(v48 + 2, v53);
  uint64_t v54 = (void *)dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)( v50,  v49,  v51,  v53,  v52);
  uint64_t v55 = sub_100006BEC(&qword_100087520);
  sub_100035B1C((uint64_t)&v226[*(int *)(v55 + 40)], (uint64_t)v47, _s20RegistrationResponseVMa);
  uint64_t v226 = v47;
  uint64_t v56 = *((void *)v47 + 6);
  if (v56)
  {
    swift_bridgeObjectRetain(*((void *)v47 + 6));
    swift_bridgeObjectRetain(v49);
    sub_10003BDBC(v50, v49, v56);
    id v58 = v57;
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(v56);
  }

  else
  {
    id v58 = 0LL;
  }

  id v218 = v54;
  if (v54)
  {
    id v59 = v54;
    uint64_t v61 = (char *)SportingEventSubscription.consumers.getter(v60);
  }

  else
  {
    uint64_t v61 = (char *)&_swiftEmptySetSingleton;
  }

  unsigned int v231 = v61;
  uint64_t v62 = v5[17];
  uint64_t v63 = v5[18];
  swift_bridgeObjectRetain(v63);
  sub_1000171C8(v230, v62, v63);
  swift_bridgeObjectRelease(v230[1]);
  uint64_t v64 = *((void *)v226 + 4);
  if (!v64
    || (swift_bridgeObjectRetain(v49),
        swift_bridgeObjectRetain(v64),
        sub_10003BE40(v50, v49, v64),
        uint64_t v66 = v65,
        swift_bridgeObjectRelease(v49),
        swift_bridgeObjectRelease(v64),
        !v66))
  {
    swift_bridgeObjectRelease(0LL);
    uint64_t v66 = _swiftEmptyArrayStorage;
  }

  id v67 = v218;
  uint64_t v68 = v5[24];
  uint64_t v214 = v5[23];
  uint64_t v69 = v5[26];
  uint64_t v224 = v5[25];
  sub_100035EAC((uint64_t)v5 + *(int *)(v219 + 72), (uint64_t)v35, &qword_100087EA0);
  uint64_t v70 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0LL);
  int v71 = sub_10000AB6C((uint64_t)v35, 1LL, v70);
  uint64_t v72 = (uint64_t)v223;
  uint64_t v216 = v68;
  if (v71 == 1)
  {
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v68);
    sub_10000BBA4((uint64_t)v35, &qword_100087EA0);
    uint64_t v73 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
    sub_10000AB60(v72, 1LL, 1LL, v73);
  }

  else
  {
    sub_100035EAC((uint64_t)v35, (uint64_t)v223, &qword_1000885D0);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v68);
    sub_100035AF4((uint64_t)v35, type metadata accessor for SubscriptionRegisterOperation.PreferredData);
    uint64_t v74 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
    if (sub_10000AB6C(v72, 1LL, v74) != 1)
    {
      uint64_t v77 = v225;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 32LL))(v225, v72, v74);
      sub_10000AB60(v77, 0LL, 1LL, v74);
      goto LABEL_18;
    }
  }

  if (v67)
  {
    id v75 = v67;
    SportingEventSubscription.metadata.getter();
  }

  else
  {
    uint64_t v76 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
    sub_10000AB60(v225, 1LL, 1LL, v76);
  }

  sub_10000BBA4(v72, &qword_1000885D0);
LABEL_18:
  v230[3] = (uint64_t)&type metadata for TVAppFeatureFlags;
  v230[4] = sub_10000B940();
  char v78 = isFeatureEnabled(_:)(v230);
  sub_100006E64(v230);
  if ((v78 & 1) == 0) {
    goto LABEL_58;
  }
  id v79 = v66;
  uint64_t v80 = v58;
  uint64_t v81 = v217;
  sub_100035EAC(v225, v217, &qword_1000885D0);
  uint64_t v82 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
  int v83 = sub_10000AB6C(v81, 1LL, v82);
  uint64_t v84 = v81;
  id v58 = v80;
  uint64_t v66 = v79;
  sub_10000BBA4(v84, &qword_1000885D0);
  if (v83 != 1 || !v58) {
    goto LABEL_58;
  }
  v223 = (void *)v82;
  uint64_t v217 = v69;
  uint64_t v85 = v58;
  uint64_t v86 = dispatch thunk of SportingEvent.competitors.getter();

  uint64_t v87 = (uint64_t)v199;
  swift_bridgeObjectRetain(v199);
  v199 = sub_10002F118(v86, v87);
  uint64_t v88 = swift_bridgeObjectRelease(v86);
  uint64_t v89 = v210;
  Date.init()(v88);
  uint64_t v90 = v85;
  uint64_t v91 = (void *)dispatch thunk of SportingEvent.schedule.getter();

  uint64_t v92 = v208;
  uint64_t v93 = v204;
  if (v91)
  {
    uint64_t v94 = (void *)SportingEventSchedule.duration.getter();

    double v95 = SportingEventDuration.start.getter();
    uint64_t v89 = v210;
    uint64_t v96 = v197;
    v97.n128_f64[0] = v95;
    Date.init(timeIntervalSince1970:)(v97);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v89, v92);
    (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v89, v96, v92);
  }

  (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v209, v89, v92);
  uint64_t v98 = v198;
  sub_100035EAC((uint64_t)&v226[*(int *)(v215 + 44)], v198, &qword_1000887B8);
  uint64_t v99 = type metadata accessor for SportingEventViewContext(0LL);
  if (sub_10000AB6C(v98, 1LL, v99) == 1)
  {
    uint64_t v100 = &qword_1000887B8;
    uint64_t v101 = v98;
LABEL_27:
    sub_10000BBA4(v101, v100);
LABEL_28:
    swift_bridgeObjectRelease(0LL);
    uint64_t v198 = 0LL;
    uint64_t v197 = (char *)0xE000000000000000LL;
    goto LABEL_29;
  }

  uint64_t v102 = (uint64_t)v196;
  SportingEventViewContext.titles.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8LL))(v98, v99);
  uint64_t v103 = type metadata accessor for SportingEventViewContext.LocalizedTitles(0LL);
  if (sub_10000AB6C(v102, 1LL, v103) == 1)
  {
    uint64_t v100 = &qword_1000887C0;
    uint64_t v101 = v102;
    goto LABEL_27;
  }

  uint64_t v112 = SportingEventViewContext.LocalizedTitles.preGame.getter();
  uint64_t v114 = v113;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8LL))(v102, v103);
  if (!v114) {
    goto LABEL_28;
  }
  uint64_t v197 = v114;
  uint64_t v198 = v112;
LABEL_29:
  uint64_t v104 = v90;
  uint64_t v105 = dispatch thunk of SportingEvent.localizedShortName.getter();

  if (!v105)
  {
LABEL_42:
    uint64_t v196 = 0LL;
    unint64_t v111 = 0xE000000000000000LL;
    goto LABEL_43;
  }

  if ((unint64_t)v105 >> 62)
  {
    if (v105 >= 0) {
      uint64_t v115 = v105 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v115 = v105;
    }
    swift_bridgeObjectRetain(v105);
    uint64_t v116 = _CocoaArrayWrapper.endIndex.getter(v115);
    swift_bridgeObjectRelease(v105);
    if (v116) {
      goto LABEL_32;
    }
    goto LABEL_41;
  }

  if (!*(void *)((v105 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_41:
    swift_bridgeObjectRelease(v105);
    goto LABEL_42;
  }

void sub_100034174(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for SubscriptionRegisterOperation(0LL);
  __chkstk_darwin(v5);
  __n128 v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2 >> 60 != 15)
  {
    v17[3] = (uint64_t)&type metadata for TVAppFeatureFlags;
    v17[4] = sub_10000B940();
    sub_10000B210(a1, a2);
    char v8 = isFeatureEnabled(_:)(v17);
    sub_100006E64(v17);
    if ((v8 & 1) != 0)
    {
      sub_10002A098( a1,  a2,  *(void *)(v2 + 152),  *(void *)(v2 + 160),  (*(unsigned __int8 *)(v2 + 256) < 6u) & (0x27u >> *(_BYTE *)(v2 + 256)));
      sub_1000232CC(a1, a2);
      return;
    }

    sub_1000232CC(a1, a2);
  }

  if (qword_1000870F8 != -1) {
    swift_once(&qword_1000870F8, sub_10004BF1C);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000B928(v9, (uint64_t)qword_10008F348);
  sub_100035B1C(v2, (uint64_t)v7, type metadata accessor for SubscriptionRegisterOperation);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    v17[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v15 = *((void *)v7 + 19);
    unint64_t v16 = *((void *)v7 + 20);
    swift_bridgeObjectRetain(v16);
    uint64_t v18 = sub_100015AD4(v15, v16, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v16);
    sub_100035AF4((uint64_t)v7, type metadata accessor for SubscriptionRegisterOperation);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Unexpected empty response from Tempo registration for canonicalId: %s",  v13,  0xCu);
    swift_arrayDestroy(v14, 1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    sub_100035AF4((uint64_t)v7, type metadata accessor for SubscriptionRegisterOperation);
  }
}

void sub_1000343F8(uint64_t a1, void *a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v33 = &type metadata for TVAppFeatureFlags;
  unint64_t v8 = sub_10000B940();
  unint64_t v34 = v8;
  char v9 = isFeatureEnabled(_:)(&v31);
  sub_100006E64(&v31);
  if ((v9 & 1) == 0)
  {
    dispatch thunk of PlaysStore.removePlays(forCanonicalId:)(*(void *)(v5 + 152), *(void *)(v5 + 160));
    if (v3)
    {
      swift_errorRelease(v3);
      uint64_t v4 = 0LL;
    }
  }

  uint64_t v10 = *(void **)(v5 + 40);
  uint64_t v11 = (*(unsigned __int8 *)(v5 + 256) < 6u) & (0x27u >> *(_BYTE *)(v5 + 256));
  uint64_t v12 = v10[5];
  uint64_t v13 = v10[6];
  sub_100006C2C(v10 + 2, v12);
  dispatch thunk of PersistentStorable.writeEventSubscription(_:isConventionalOrUnified:)(a1, v11, v12, v13);
  if (!v4)
  {
    uint64_t v33 = &type metadata for TVAppFeatureFlags;
    unint64_t v34 = v8;
    char v14 = isFeatureEnabled(_:)(&v31);
    sub_100006E64(&v31);
    if ((v14 & 1) == 0)
    {
      if (a2)
      {
        uint64_t v15 = qword_1000870F8;
        id v16 = a2;
        if (v15 != -1) {
          swift_once(&qword_1000870F8, sub_10004BF1C);
        }
        uint64_t v17 = type metadata accessor for Logger(0LL);
        sub_10000B928(v17, (uint64_t)qword_10008F348);
        id v18 = v16;
        uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
        os_log_type_t v20 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v19, v20))
        {
          uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)uint64_t v21 = 134217984;
          uint64_t v22 = dispatch thunk of SportingEvent.plays.getter();
          uint64_t v23 = v22;
          if ((unint64_t)v22 >> 62)
          {
            if (v22 >= 0) {
              v22 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v22);
          }

          else
          {
            uint64_t v24 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          }

          swift_bridgeObjectRelease(v23);
          uint64_t v31 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v21 + 4, v21 + 12);

          _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Tempo /register - found initial data, plays=%ld",  v21,  0xCu);
          swift_slowDealloc(v21, -1LL, -1LL);
        }

        else
        {

          uint64_t v19 = (os_log_s *)v18;
        }

        uint64_t v30 = dispatch thunk of SportingEvent.plays.getter();
        dispatch thunk of PlaysStore.write(plays:forCanonicalId:)(v30, *(void *)(v5 + 152), *(void *)(v5 + 160));

        swift_bridgeObjectRelease(v30);
      }

      else
      {
        if (qword_1000870F8 != -1) {
          swift_once(&qword_1000870F8, sub_10004BF1C);
        }
        uint64_t v25 = type metadata accessor for Logger(0LL);
        uint64_t v26 = sub_10000B928(v25, (uint64_t)qword_10008F348);
        uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
        os_log_type_t v28 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v29 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Tempo /register - initial data not found", v29, 2u);
          swift_slowDealloc(v29, -1LL, -1LL);
        }
      }
    }
  }

uint64_t sub_10003472C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void))
{
  uint64_t v4 = sub_100006BEC(&qword_100088770);
  return a2( a1,  *(void *)(a1 + *(int *)(v4 + 48)),  *(void *)(a1 + *(int *)(v4 + 64)),  *(void *)(a1 + *(int *)(v4 + 64) + 8)) & 1;
}

uint64_t sub_10003478C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = type metadata accessor for SubscriptionRegisterOperation(0LL);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - v10;
  if (qword_1000870F8 != -1) {
    swift_once(&qword_1000870F8, sub_10004BF1C);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000B928(v12, (uint64_t)qword_10008F348);
  sub_100035B1C(a5, (uint64_t)v11, type metadata accessor for SubscriptionRegisterOperation);
  sub_100035B1C(a5, (uint64_t)v8, type metadata accessor for SubscriptionRegisterOperation);
  char v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v17 = swift_slowAlloc(64LL, -1LL);
    uint64_t v25 = v17;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v18 = *((void *)v11 + 19);
    unint64_t v19 = *((void *)v11 + 20);
    swift_bridgeObjectRetain(v19);
    uint64_t v24 = sub_100015AD4(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v19);
    sub_100035AF4((uint64_t)v11, type metadata accessor for SubscriptionRegisterOperation);
    *(_WORD *)(v16 + sub_100006E64(v0 + 12) = 2080;
    uint64_t v20 = sub_100047768(v8[256]);
    unint64_t v22 = v21;
    uint64_t v24 = sub_100015AD4(v20, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease(v22);
    sub_100035AF4((uint64_t)v8, type metadata accessor for SubscriptionRegisterOperation);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Tempo /register success for %s - %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2LL);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    sub_100035AF4((uint64_t)v11, type metadata accessor for SubscriptionRegisterOperation);
    sub_100035AF4((uint64_t)v8, type metadata accessor for SubscriptionRegisterOperation);
  }

  return 1LL;
}

uint64_t sub_100034A0C@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void, void, void)@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6 = sub_100006BEC(&qword_100088770);
  uint64_t result = a2( a1,  *(void *)(a1 + *(int *)(v6 + 48)),  *(void *)(a1 + *(int *)(v6 + 64)),  *(void *)(a1 + *(int *)(v6 + 64) + 8));
  *a3 = result & 1;
  return result;
}

uint64_t sub_100034A6C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100006BEC(&qword_100088448);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *a1;
  swift_errorRetain(v13);
  uint64_t v8 = sub_100006BEC((uint64_t *)&unk_100088B90);
  Fail.init(error:)(&v13, &type metadata for Bool, v8, &protocol self-conformance witness table for Error);
  sub_10000C04C(&qword_100088450, &qword_100088448);
  uint64_t v10 = Publisher.eraseToAnyPublisher()(v4, v9);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v10;
  return result;
}

uint64_t sub_100034B5C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v167 = a2;
  uint64_t v178 = a3;
  uint64_t v160 = type metadata accessor for SportingEventCompetitorQualifier(0LL);
  uint64_t v166 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v150 = (char *)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v159 = sub_100006BEC(&qword_1000887D0);
  __chkstk_darwin(v159);
  uint64_t v8 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100006BEC(&qword_1000887D8);
  __chkstk_darwin(v9);
  uint64_t v153 = (uint64_t)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v163 = (char *)&v144 - v12;
  __chkstk_darwin(v13);
  uint64_t v164 = (uint64_t)&v144 - v14;
  uint64_t v15 = sub_100006BEC(&qword_1000887E0);
  __chkstk_darwin(v15);
  uint64_t v156 = (char *)&v144 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v165 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0LL);
  uint64_t v158 = *(void *)(v165 - 8);
  __chkstk_darwin(v165);
  v152 = (char *)&v144 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v151 = (char *)&v144 - v19;
  uint64_t v169 = type metadata accessor for LogoDownloadResult(0LL);
  uint64_t v154 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  v174 = (uint64_t *)((char *)&v144 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = sub_100006BEC(&qword_1000887E8);
  __chkstk_darwin(v21);
  uint64_t v161 = (uint64_t)&v144 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v157 = (uint64_t)&v144 - v24;
  __chkstk_darwin(v25);
  uint64_t v155 = (char *)&v144 - v26;
  __n128 v28 = __chkstk_darwin(v27);
  uint64_t v168 = (uint64_t)&v144 - v29;
  uint64_t v30 = type metadata accessor for SportingEventMetadataType(0LL, v28);
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  int v183 = (char *)&v144 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v144 - v34;
  uint64_t v36 = *a1;
  uint64_t v38 = (void *)SportingEventCompetitorContainer.competitor.getter(v37);
  uint64_t v162 = dispatch thunk of SportingEventCompetitor.abbreviation.getter();
  uint64_t v40 = v39;

  if (!v40) {
    goto LABEL_65;
  }
  uint64_t v175 = v40;
  uint64_t v42 = (void *)SportingEventCompetitorContainer.competitor.getter(v41);
  uint64_t v43 = dispatch thunk of SportingEventCompetitor.localizedDisplayName.getter();

  if (!v43) {
    goto LABEL_23;
  }
  uint64_t v44 = v43 & 0xFFFFFFFFFFFFFF8LL;
  if ((unint64_t)v43 >> 62)
  {
LABEL_59:
    if (v43 >= 0) {
      uint64_t v139 = v44;
    }
    else {
      uint64_t v139 = v43;
    }
    swift_bridgeObjectRetain(v43);
    uint64_t v140 = _CocoaArrayWrapper.endIndex.getter(v139);
    swift_bridgeObjectRelease(v43);
    if (v140) {
      goto LABEL_5;
    }
LABEL_63:
    swift_bridgeObjectRelease(v175);
    uint64_t v65 = v43;
    goto LABEL_64;
  }

  if (!*(void *)((v43 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_63;
  }
LABEL_5:
  sub_10003EEB0(0LL, (v43 & 0xC000000000000001LL) == 0, v43);
  if ((v43 & 0xC000000000000001LL) != 0) {
    id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v43);
  }
  else {
    id v45 = *(id *)(v43 + 32);
  }
  uint64_t v46 = v45;
  uint64_t v47 = swift_bridgeObjectRelease(v43);
  uint64_t v146 = SportingEventLocalizedDisplayName.text.getter(v47);
  uint64_t v49 = v48;

  uint64_t v51 = (void *)SportingEventCompetitorContainer.competitor.getter(v50);
  uint64_t v52 = dispatch thunk of SportingEventCompetitor.metadata.getter();

  if (!v52)
  {
    swift_bridgeObjectRelease(v49);
LABEL_23:
    uint64_t v65 = v175;
LABEL_64:
    swift_bridgeObjectRelease(v65);
LABEL_65:
    uint64_t v138 = 1LL;
    goto LABEL_66;
  }

  uint64_t v147 = v49;
  uint64_t v148 = v4;
  uint64_t v53 = v175;
  if (!((unint64_t)v52 >> 62))
  {
    uint64_t v54 = *(void *)((v52 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v52);
    if (v54) {
      goto LABEL_10;
    }
LABEL_72:
    swift_bridgeObjectRelease(v147);
    uint64_t v64 = v53;
LABEL_73:
    swift_bridgeObjectRelease(v64);
    swift_bridgeObjectRelease_n(v52, 2LL);
    uint64_t v138 = 1LL;
    goto LABEL_66;
  }

  if (v52 >= 0) {
    uint64_t v143 = v52 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v143 = v52;
  }
  swift_bridgeObjectRetain(v52);
  uint64_t v54 = _CocoaArrayWrapper.endIndex.getter(v143);
  if (!v54) {
    goto LABEL_72;
  }
LABEL_10:
  uint64_t v149 = v36;
  uint64_t v145 = v8;
  unint64_t v173 = v52 & 0xC000000000000001LL;
  LODWORD(v171) = enum case for SportingEventMetadataType.backgroundColor(_:);
  uint64_t v4 = 4LL;
  unint64_t v172 = v52;
  unint64_t v170 = v54;
  while (1)
  {
    if (v173) {
      id v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v52);
    }
    else {
      id v55 = *(id *)(v52 + 8 * v4);
    }
    uint64_t v36 = v55;
    uint64_t v8 = v183;
    uint64_t v43 = v4 - 3;
    if (__OFADD__(v4 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_59;
    }

    SportingEventMetadata.metadataType.getter();
    (*(void (**)(char *, void, uint64_t))(v31 + 104))(v8, v171, v30);
    sub_10000BAA8( &qword_1000887F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventMetadataType);
    uint64_t v56 = v31;
    uint64_t v58 = v57;
    dispatch thunk of RawRepresentable.rawValue.getter(v30, v57);
    dispatch thunk of RawRepresentable.rawValue.getter(v30, v58);
    uint64_t v59 = v182;
    uint64_t v60 = v180;
    if (v181 == v179 && v182 == v180) {
      break;
    }
    int v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v181, v182, v179, v180, 0LL);
    size_t v177 = v36;
    LODWORD(v17sub_100006E64(v0 + 6) = v62;
    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease(v60);
    uint64_t v63 = *(void (**)(char *, uint64_t))(v56 + 8);
    v63(v8, v30);
    uint64_t v36 = v177;
    v63(v35, v30);
    if ((v176 & 1) != 0) {
      goto LABEL_25;
    }
    uint64_t v31 = v56;

    ++v4;
    uint64_t v52 = v172;
    if (v43 == v170)
    {
      swift_bridgeObjectRelease(v147);
      uint64_t v64 = v175;
      goto LABEL_73;
    }
  }

  swift_bridgeObjectRelease_n(v182, 2LL);
  uint64_t v66 = *(void (**)(char *, uint64_t))(v56 + 8);
  v66(v8, v30);
  v66(v35, v30);
LABEL_25:
  uint64_t v67 = swift_bridgeObjectRelease_n(v172, 2LL);
  uint64_t v68 = SportingEventMetadata.value.getter(v67);
  unint64_t v70 = v69;

  uint64_t v71 = dispatch thunk of SportingEventCompetitorContainer.ordinal.getter();
  if ((v72 & 1) != 0)
  {
    swift_bridgeObjectRelease(v175);
    swift_bridgeObjectRelease(v147);
    uint64_t v65 = v70;
    goto LABEL_64;
  }

  unint64_t v173 = v70;
  uint64_t v73 = *(void *)(v167 + 16);
  int v183 = (char *)v68;
  size_t v177 = (void *)v71;
  if (v73)
  {
    uint64_t v74 = v167 + ((*(unsigned __int8 *)(v154 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80));
    uint64_t v75 = *(void *)(v154 + 72);
    swift_bridgeObjectRetain(v167);
    uint64_t v76 = v174;
    while (1)
    {
      sub_100035B1C(v74, (uint64_t)v76, type metadata accessor for LogoDownloadResult);
      uint64_t v78 = *v76;
      uint64_t v77 = v76[1];
      uint64_t v80 = (void *)SportingEventCompetitorContainer.competitor.getter(v79);
      uint64_t v81 = SportingEventCompetitor.canonicalId.getter();
      uint64_t v83 = v82;

      if (v78 == v81 && v77 == v83)
      {
        swift_bridgeObjectRelease(v167);
        goto LABEL_40;
      }

      char v85 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v77, v81, v83, 0LL);
      swift_bridgeObjectRelease(v83);
      if ((v85 & 1) != 0) {
        break;
      }
      uint64_t v76 = v174;
      sub_100035AF4((uint64_t)v174, type metadata accessor for LogoDownloadResult);
      v74 += v75;
      if (!--v73)
      {
        swift_bridgeObjectRelease(v167);
        uint64_t v86 = 1LL;
        goto LABEL_37;
      }
    }

    uint64_t v77 = v167;
LABEL_40:
    uint64_t v87 = (uint64_t)v145;
    uint64_t v88 = (uint64_t)v156;
    uint64_t v90 = (uint64_t)v155;
    swift_bridgeObjectRelease(v77);
    uint64_t v89 = v168;
    sub_100035B48((uint64_t)v174, v168, type metadata accessor for LogoDownloadResult);
    uint64_t v86 = 0LL;
  }

  else
  {
    uint64_t v86 = 1LL;
LABEL_37:
    uint64_t v87 = (uint64_t)v145;
    uint64_t v88 = (uint64_t)v156;
    uint64_t v89 = v168;
    uint64_t v90 = (uint64_t)v155;
  }

  uint64_t v91 = v169;
  uint64_t v92 = sub_10000AB60(v89, v86, 1LL, v169);
  uint64_t v93 = (void *)SportingEventCompetitorContainer.competitor.getter(v92);
  uint64_t v94 = SportingEventCompetitor.canonicalId.getter();
  uint64_t v96 = v95;

  sub_100035EAC(v89, v90, &qword_1000887E8);
  int v97 = sub_10000AB6C(v90, 1LL, v91);
  uint64_t v176 = v94;
  v174 = (uint64_t *)v96;
  if (v97 == 1)
  {
    sub_10000BBA4(v90, &qword_1000887E8);
    uint64_t v98 = 0LL;
    unint64_t v172 = 0xE000000000000000LL;
  }

  else
  {
    uint64_t v98 = *(void *)(v90 + 16);
    unint64_t v172 = *(void *)(v90 + 24);
    swift_bridgeObjectRetain(v172);
    sub_100035AF4(v90, type metadata accessor for LogoDownloadResult);
  }

  uint64_t v99 = v157;
  sub_100035EAC(v89, v157, &qword_1000887E8);
  uint64_t v100 = v169;
  if (sub_10000AB6C(v99, 1LL, v169) == 1)
  {
    sub_10000BBA4(v99, &qword_1000887E8);
    unint64_t v170 = 0xE000000000000000LL;
    uint64_t v171 = 0LL;
    uint64_t v102 = v164;
    uint64_t v101 = v165;
  }

  else
  {
    uint64_t v103 = v99 + *(int *)(v100 + 24);
    uint64_t v104 = v158;
    uint64_t v105 = v98;
    uint64_t v106 = v87;
    uint64_t v107 = v88;
    uint64_t v108 = v99;
    uint64_t v109 = v151;
    (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v151, v103, v165);
    uint64_t v110 = v108;
    uint64_t v88 = v107;
    uint64_t v87 = v106;
    uint64_t v98 = v105;
    sub_100035AF4(v110, type metadata accessor for LogoDownloadResult);
    uint64_t v111 = SportingEventSubscription.Competitor.LogoFilePaths.defaultSize.getter();
    unint64_t v170 = v112;
    uint64_t v171 = v111;
    uint64_t v113 = v109;
    uint64_t v101 = v165;
    (*(void (**)(char *, uint64_t))(v104 + 8))(v113, v165);
    uint64_t v102 = v164;
  }

  uint64_t v114 = v89;
  uint64_t v115 = v161;
  sub_100035EAC(v114, v161, &qword_1000887E8);
  if (sub_10000AB6C(v115, 1LL, v100) == 1)
  {
    sub_10000BBA4(v115, &qword_1000887E8);
    SportingEventSubscription.Competitor.LogoFilePaths.init(smallSize:defaultSize:)(0LL, 0LL, 0LL, 0xE000000000000000LL);
  }

  else
  {
    uint64_t v116 = v115 + *(int *)(v100 + 24);
    uint64_t v117 = v115;
    uint64_t v118 = v158;
    uint64_t v119 = v152;
    (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v152, v116, v101);
    sub_100035AF4(v117, type metadata accessor for LogoDownloadResult);
    (*(void (**)(uint64_t, char *, uint64_t))(v118 + 32))(v88, v119, v101);
  }

  uint64_t v120 = v159;
  uint64_t v121 = v160;
  uint64_t v122 = sub_10000AB60(v88, 0LL, 1LL, v101);
  uint64_t v123 = (void *)SportingEventCompetitorContainer.competitor.getter(v122);
  dispatch thunk of SportingEventCompetitor.qualifier.getter();

  uint64_t v124 = (uint64_t)v163;
  (*(void (**)(char *, void, uint64_t))(v166 + 104))( v163,  enum case for SportingEventCompetitorQualifier.home(_:),  v121);
  sub_10000AB60(v124, 0LL, 1LL, v121);
  uint64_t v125 = v87 + *(int *)(v120 + 48);
  uint64_t v126 = &qword_1000887D8;
  sub_100035EAC(v102, v87, &qword_1000887D8);
  sub_100035EAC(v124, v125, &qword_1000887D8);
  if (sub_10000AB6C(v87, 1LL, v121) == 1)
  {
    sub_10000BBA4(v124, &qword_1000887D8);
    sub_10000BBA4(v102, &qword_1000887D8);
    if (sub_10000AB6C(v125, 1LL, v121) == 1)
    {
      char v127 = -1;
    }

    else
    {
      uint64_t v126 = &qword_1000887D0;
      char v127 = 0;
    }
  }

  else
  {
    uint64_t v128 = v153;
    sub_100035EAC(v87, v153, &qword_1000887D8);
    if (sub_10000AB6C(v125, 1LL, v121) == 1)
    {
      sub_10000BBA4(v124, &qword_1000887D8);
      sub_10000BBA4(v102, &qword_1000887D8);
      (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v128, v121);
      char v127 = 0;
      uint64_t v126 = &qword_1000887D0;
    }

    else
    {
      uint64_t v129 = v166;
      uint64_t v130 = *(void (**)(char *, uint64_t, uint64_t))(v166 + 32);
      uint64_t v169 = v98;
      uint64_t v131 = v124;
      uint64_t v132 = v150;
      v130(v150, v125, v121);
      sub_10000BAA8( &qword_1000887F8,  (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventCompetitorQualifier);
      uint64_t v133 = v128;
      char v127 = dispatch thunk of static Equatable.== infix(_:_:)(v128, v132, v121, v134);
      uint64_t v135 = *(void (**)(char *, uint64_t))(v129 + 8);
      v135(v132, v121);
      uint64_t v126 = &qword_1000887D8;
      uint64_t v136 = v131;
      uint64_t v98 = v169;
      sub_10000BBA4(v136, &qword_1000887D8);
      sub_10000BBA4(v164, &qword_1000887D8);
      v135((char *)v133, v121);
    }
  }

  unint64_t v137 = v173;
  sub_10000BBA4(v87, v126);
  SportingEventSubscription.Competitor.init(canonicalId:abbreviation:name:teamLogoUrl:localLogoUrl:logoFilePaths:teamColorHex:isHome:ordinal:)( v176,  v174,  v162,  v175,  v146,  v147,  v98,  v172,  v171,  v170,  v88,  v183,  v137,  v127 & 1,  v177);
  sub_10000BBA4(v168, &qword_1000887E8);
  uint64_t v138 = 0LL;
LABEL_66:
  uint64_t v141 = type metadata accessor for SportingEventSubscription.Competitor(0LL);
  return sub_10000AB60(v178, v138, 1LL, v141);
}

uint64_t sub_100035880(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)sub_100035F08(a1);
  return sub_1000319E0(v1, v2, v3);
}

uint64_t sub_1000358A8()
{
  uint64_t v1 = (int *)sub_100035F90();
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_100006E64((void *)(v0 + v4));
  swift_release(*(void *)(v0 + v4 + 40));
  swift_release(*(void *)(v0 + v4 + 48));
  sub_100006E64((void *)(v0 + v4 + 56));
  sub_100006E64((void *)(v0 + v4 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 144));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 160));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 176));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 192));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 208));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 224));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 248));
  uint64_t v6 = v0 + v4 + v1[18];
  uint64_t v7 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0LL);
  if (!sub_10000AB6C(v6, 1LL, v7))
  {
    uint64_t v8 = type metadata accessor for SportingEventSubscription.Metadata(0LL);
    if (!sub_10000C1E8(v6))
    {
      uint64_t v9 = sub_100035F84();
      v10(v9, v8);
    }
  }

  sub_10000C23C(v1[20]);
  sub_10000C23C(v1[21]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000359C8(uint64_t a1)
{
  uint64_t v1 = sub_100035F08(a1);
  return sub_100032090(v1, v2, v3);
}

uint64_t sub_1000359F0(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return sub_100032C28(a1, a2, a3, a4, v8) & 1;
}

uint64_t sub_100035A54()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100035A78(uint64_t a1)
{
  return sub_10003472C(a1, *(uint64_t (**)(uint64_t, void, void, void))(v1 + 16)) & 1;
}

uint64_t sub_100035A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003478C(a1, a2, a3, a4, v8);
}

uint64_t sub_100035AEC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100034A0C(a1, *(uint64_t (**)(uint64_t, void, void, void))(v2 + 16), a2);
}

void sub_100035AF4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_10000C5B0(v2);
  sub_10000C510();
}

void sub_100035B1C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_100035F5C(a1, a2, a3);
  sub_100035F40(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_10000C510();
}

void sub_100035B48(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_100035F5C(a1, a2, a3);
  sub_100035F40(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_10000C510();
}

void sub_100035B74(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100035B90()
{
}

uint64_t sub_100035BAC()
{
  uint64_t v1 = (int *)sub_100006BEC(&qword_100087520);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  uint64_t v7 = (int *)type metadata accessor for ApiRequestMetrics(0LL);
  if (!sub_10000AB6C(v0 + v4, 1LL, (uint64_t)v7))
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    sub_10000C23C(v7[12]);
    uint64_t v9 = v6 + v7[14];
    uint64_t v10 = type metadata accessor for URL(0LL);
    sub_10000C23C(v7[19]);
    sub_10000C23C(v7[20]);
    sub_10000C23C(v7[21]);
    sub_10000C23C(v7[22]);
    sub_10000C23C(v7[23]);
  }

  type metadata accessor for URLRequest(0LL);
  uint64_t v11 = sub_100035F84();
  v12(v11);

  uint64_t v13 = (uint64_t *)(v6 + v1[9]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10000ABB4(*v13, v14);
  }
  uint64_t v15 = (void *)(v6 + v1[10]);
  swift_bridgeObjectRelease(*v15);
  swift_bridgeObjectRelease(v15[1]);
  swift_bridgeObjectRelease(v15[2]);
  swift_bridgeObjectRelease(v15[3]);
  swift_bridgeObjectRelease(v15[4]);
  swift_bridgeObjectRelease(v15[5]);
  swift_bridgeObjectRelease(v15[6]);
  swift_bridgeObjectRelease(v15[12]);
  uint64_t v16 = (uint64_t)v15 + *(int *)(_s20RegistrationResponseVMa(0LL) + 44);
  uint64_t v17 = type metadata accessor for SportingEventViewContext(0LL);
  unint64_t v18 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v19 = v18 + 16;
  swift_bridgeObjectRelease(*(void *)(v0 + v18 + 8));
  return swift_deallocObject(v0, v19, v3 | 7);
}

uint64_t sub_100035E44@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_100006BEC(&qword_100087520) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (uint64_t *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_100032BA4(a1, v2 + v6, *v7, v7[1], a2);
}

void sub_100035EAC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100035F4C(a1, a2, a3);
  sub_100035F40(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_10000C510();
}

void sub_100035ED8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100035F4C(a1, a2, a3);
  sub_100035F40(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_10000C510();
}

uint64_t sub_100035F08(uint64_t a1)
{
  return a1;
}

uint64_t sub_100035F40@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100035F4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100006BEC(a3);
}

uint64_t sub_100035F5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

  ;
}

uint64_t sub_100035F84()
{
  return v0;
}

uint64_t sub_100035F90()
{
  return type metadata accessor for SubscriptionRegisterOperation(0LL);
}

uint64_t sub_100035F98(uint64_t a1)
{
  return swift_allocObject(a1, 32LL, 7LL);
}

uint64_t sub_100035FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100006BEC(&qword_100088990);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v24 - v13;
  *(void *)(v4 + 2sub_100006E64(v0 + 4) = &_swiftEmptySetSingleton;
  if (qword_1000870A0 != -1) {
    swift_once(&qword_1000870A0, sub_10002D470);
  }
  uint64_t v15 = qword_10008F2A0;
  uint64_t v25 = qword_10008F2A0;
  uint64_t v16 = swift_allocObject(&unk_1000802B8, 24LL, 7LL);
  *(void *)(v16 + 1sub_100006E64(v0 + 6) = a1;
  swift_retain(v15);
  uint64_t v17 = sub_100006BEC(&qword_100088968);
  sub_10002EBA0(&qword_100088970, &qword_100088968, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_100038AE4, v16, v17, v18);
  swift_release(v16);
  swift_release(v25);
  uint64_t v19 = swift_allocObject(&unk_1000802E0, 32LL, 7LL);
  *(void *)(v19 + 1sub_100006E64(v0 + 6) = a2;
  *(void *)(v19 + 2sub_100006E64(v0 + 4) = a3;
  Publishers.Filter.filter(_:)(sub_100038B10, v19, v8);
  swift_release(v19);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, v8);
  sub_10002EBA0(&qword_100088998, &qword_100088990, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  uint64_t v22 = Publisher.eraseToAnyPublisher()(v8, v21);
  v20(v14, v8);
  *(void *)(v4 + 1sub_100006E64(v0 + 6) = v22;
  return v4;
}

void sub_1000361A0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100006BEC(&qword_100087BF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  sub_10000AB60((uint64_t)v7, 1LL, 1LL, v8);
  uint64_t v9 = (void *)swift_allocObject(&unk_100080268, 56LL, 7LL);
  uint64_t v9[2] = 0LL;
  void v9[3] = 0LL;
  v9[4] = v2;
  v9[5] = a1;
  v9[6] = a2;
  swift_retain(v2);
  swift_retain(a2);
  uint64_t v10 = sub_100037404((uint64_t)v7, (uint64_t)&unk_100088948, (uint64_t)v9);
  swift_release(v10);
  sub_100019034((uint64_t)v7, &qword_100087BF0);
}

uint64_t sub_100036284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE v6[24] = a5;
  v6[25] = a6;
  v6[23] = a4;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v6[26] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[27] = v8;
  v6[28] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100006BEC(&qword_100088918);
  v6[29] = v9;
  v6[30] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0LL);
  v6[31] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[32] = v11;
  v6[33] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100006BEC(&qword_100087438);
  v6[34] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100006BEC(&qword_100088958);
  v6[35] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v6[36] = v14;
  v6[37] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100006BEC(&qword_100088960);
  v6[38] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v6[39] = v16;
  v6[40] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000363E0, 0LL, 0LL);
}

uint64_t sub_1000363E0()
{
  uint64_t v2 = v0[36];
  uint64_t v1 = v0[37];
  uint64_t v3 = v0[35];
  v0[16] = *(void *)(v0[23] + 16LL);
  uint64_t v4 = sub_100006BEC(&qword_100088968);
  sub_10002EBA0(&qword_100088970, &qword_100088968, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.values.getter(v4, v5);
  AsyncPublisher.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002EBA0( &qword_100088978,  &qword_100088960,  (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>.Iterator);
  uint64_t v7 = v6;
  v0[41] = v6;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[42] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100036514;
  uint64_t v9 = sub_100038B6C();
  return dispatch thunk of AsyncIteratorProtocol.next()(v9, v10, v7);
}

uint64_t sub_100036514()
{
  if (v1)
  {
    *(void *)(v0 + 36sub_100006E64(v0 + 8) = v1;
  }

  else
  {
    *(_DWORD *)(v0 + 41sub_100006E64(v0 + 6) = enum case for JSONDecoder.DateDecodingStrategy.millisecondsSince1970(_:);
    *(void *)(v0 + 34sub_100006E64(v0 + 4) = 0LL;
  }

  sub_100038B4C();
  return sub_1000190D4();
}

uint64_t sub_1000365BC()
{
  *(void *)(v0 + 35sub_100006E64(v0 + 2) = *(void *)(v0 + 168);
  sub_100038B4C();
  return sub_1000190C8();
}

uint64_t sub_100036618()
{
  uint64_t v1 = *(void **)(v0 + 352);
  if (!v1)
  {
    uint64_t v22 = *(void *)(v0 + 240);
    uint64_t v23 = *(void *)(v0 + 224);
    (*(void (**)(void, void))(*(void *)(v0 + 312) + 8LL))(*(void *)(v0 + 320), *(void *)(v0 + 304));
    sub_100019528();
    sub_100019924();
    sub_100019768();
    sub_100038BC0();
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    sub_100038B94();
    __asm { BR              X0 }
  }

  uint64_t v2 = os_transaction_create("com.apple.sportsd.aps.cloudchannel");
  *(void *)(v0 + 360) = v2;
  id v3 = [v1 channelID];
  uint64_t v4 = (void *)&unk_100067000;
  if (v3)
  {
    uint64_t v5 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v7 = v6;

    id v8 = [v1 userInfo];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v77 = v7;
      uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v8,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

      uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v10);
      *(void *)(v0 + 1sub_100006E64(v0 + 12) = 0LL;
      id v13 = [v11 dataWithJSONObject:isa options:0 error:v0 + 112];

      id v14 = *(id *)(v0 + 112);
      if (v13)
      {
        uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
        unint64_t v17 = v16;

        *(void *)(v0 + 37sub_100006E64(v0 + 6) = v15;
        *(void *)(v0 + 38sub_100006E64(v0 + 4) = v17;
        if (qword_100087110 != -1) {
          swift_once(&qword_100087110, sub_10004BF7C);
        }
        sub_10000B928(*(void *)(v0 + 208), (uint64_t)qword_10008F390);
        sub_100038BD4();
        uint64_t v18 = sub_100038BD4();
        uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
        os_log_type_t v20 = static os_log_type_t.debug.getter();
        unint64_t v79 = v17;
        uint64_t v80 = v2;
        unint64_t v69 = v17 >> 62;
        uint64_t v75 = v15;
        if (os_log_type_enabled(v19, v20))
        {
          uint64_t v21 = (_DWORD *)sub_100019148(12LL);
          *(void *)(v0 + 15sub_100006E64(v0 + 2) = sub_100019148(32LL);
          *uint64_t v21 = 136315138;
          __asm { BR              X10 }
        }

        sub_100038BC8();
        sub_100038BC8();

        uint64_t v74 = *(void *)(v0 + 344);
        unsigned int v72 = *(_DWORD *)(v0 + 416);
        uint64_t v51 = *(void *)(v0 + 264);
        uint64_t v52 = *(void *)(v0 + 272);
        uint64_t v70 = *(void *)(v0 + 256);
        uint64_t v71 = *(void *)(v0 + 248);
        uint64_t v53 = *(void *)(v0 + 232);
        uint64_t v54 = type metadata accessor for JSONDecoder(0LL);
        sub_10000C5C4(v54);
        uint64_t v55 = JSONDecoder.init()();
        *(void *)(v0 + 39sub_100006E64(v0 + 2) = v55;
        static SportsJSONContext.Property<A>.initFailureObserver.getter(v55);
        uint64_t v56 = type metadata accessor for DefaultSportsJSONInitFailureObserver(0LL);
        sub_10000C5C4(v56);
        uint64_t v57 = DefaultSportsJSONInitFailureObserver.init()();
        *(void *)(v0 + 40) = v56;
        *(void *)(v0 + 4sub_100006E64(v0 + 8) = &protocol witness table for DefaultSportsJSONInitFailureObserver;
        *(void *)(v0 + 1sub_100006E64(v0 + 6) = v57;
        uint64_t v58 = (void (*)(uint64_t, void))dispatch thunk of JSONDecoder.userInfo.modify(v0 + 56);
        uint64_t v59 = sub_100006BEC(&qword_100087448);
        Dictionary<>.subscript.setter(v0 + 16, v52, v59);
        v58(v0 + 56, 0LL);
        (*(void (**)(uint64_t, void, uint64_t))(v70 + 104))(v51, v72, v71);
        dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v51);
        sub_10002EBA0(&qword_100088980, &qword_100088918, (uint64_t)&unk_1000675A0);
        dispatch thunk of JSONDecoder.decode<A>(_:from:)(v53, v15, v79, v53, v60);
        if (!v74) {
          __asm { BR              X11 }
        }

        swift_release(v55);
        swift_bridgeObjectRelease(v77);
        swift_errorRetain(v74);
        uint64_t v61 = swift_errorRetain(v74);
        int v62 = (os_log_s *)Logger.logObject.getter(v61);
        os_log_type_t v63 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = (uint8_t *)sub_100019148(12LL);
          uint64_t v65 = sub_100019148(32LL);
          v81[0] = v65;
          *(_DWORD *)uint64_t v64 = 136315138;
          swift_getErrorValue(v74, v0 + 176, v0 + 88);
          uint64_t v66 = Error.localizedDescription.getter(*(void *)(v0 + 96), *(void *)(v0 + 104));
          unint64_t v68 = v67;
          *(void *)(v0 + 14sub_100006E64(v0 + 4) = sub_100015AD4(v66, v67, v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v64 + 4, v64 + 12);
          swift_bridgeObjectRelease(v68);
          sub_10002A62C();
          sub_10002A62C();
          sub_1000194B8( (void *)&_mh_execute_header,  v62,  v63,  "CloudChannelMessageProcessor - Encountered error while decoding expected type, error=%s",  v64);
          sub_1000194B0(v65);
          sub_1000190E8(v65);
          sub_1000190E8((uint64_t)v64);

          sub_10002A62C();
          sub_100038B7C(v75);
        }

        else
        {

          sub_100038B7C(v15);
          sub_10002A62C();
          sub_10002A62C();
          sub_10002A62C();
        }

        goto LABEL_17;
      }

      uint64_t v25 = v14;
      swift_bridgeObjectRelease(v77);
      uint64_t v26 = _convertNSErrorToError(_:)(v25);

      swift_willThrow(v27);
      swift_errorRelease(v26);
      uint64_t v4 = &unk_100067000;
    }

    else
    {
      swift_bridgeObjectRelease(v7);
    }
  }

  if (qword_100087110 != -1) {
    swift_once(&qword_100087110, sub_10004BF7C);
  }
  uint64_t v29 = *(void *)(v0 + 216);
  uint64_t v28 = *(void *)(v0 + 224);
  uint64_t v30 = *(void *)(v0 + 208);
  uint64_t v31 = sub_10000B928(v30, (uint64_t)qword_10008F390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v31, v30);
  id v32 = v1;
  uint64_t v33 = (void *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled((os_log_t)v33, v34))
  {
    uint64_t v44 = *(void *)(v0 + 216);
    uint64_t v43 = *(void *)(v0 + 224);
    uint64_t v45 = *(void *)(v0 + 208);

    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    uint64_t v42 = v2;
    goto LABEL_19;
  }

  uint64_t v80 = v2;
  uint64_t v35 = sub_100019148(12LL);
  uint64_t v36 = sub_100019148(32LL);
  *(void *)(v0 + 120) = v36;
  *(_DWORD *)uint64_t v35 = v4[68];
  sub_1000189D4(v32);
  if (!v37)
  {

    __break(1u);
    JUMPOUT(0x100037188LL);
  }

  uint64_t v38 = v37;
  uint64_t v73 = *(void *)(v0 + 216);
  uint64_t v76 = *(void *)(v0 + 208);
  uint64_t v78 = *(void *)(v0 + 224);
  uint64_t v39 = Dictionary.description.getter( v37,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  unint64_t v41 = v40;
  swift_bridgeObjectRelease(v38);
  *(void *)(v35 + sub_100006E64(v0 + 4) = sub_100015AD4(v39, v41, (uint64_t *)(v0 + 120));
  swift_bridgeObjectRelease(v41);

  sub_1000194B8( (void *)&_mh_execute_header,  (os_log_s *)v33,  v34,  "CloudChannelMessageProcessor - Failed to decode payload body %s",  (uint8_t *)v35);
  swift_arrayDestroy(v36, 1LL);
  sub_1000190E8(v36);
  sub_1000190E8(v35);

  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v78, v76);
LABEL_17:
  uint64_t v42 = v80;
LABEL_19:
  swift_unknownObjectRelease(v42);
  uint64_t v46 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(void *)(v0 + 40sub_100006E64(v0 + 8) = v46;
  *uint64_t v46 = v0;
  v46[1] = sub_10003736C;
  sub_100038B6C();
  sub_100038B94();
  return dispatch thunk of AsyncIteratorProtocol.next()(v47, v48, v49);
}

uint64_t sub_1000371A8()
{
  *(void *)(v0 + 13sub_100006E64(v0 + 6) = *(void *)(v0 + 368);
  uint64_t v1 = sub_100006BEC((uint64_t *)&unk_100088B90);
  uint64_t v2 = swift_dynamicCast(v1, v0 + 136, v1, &type metadata for Never, 7LL);
  return swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_100037234()
{
  uint64_t v2 = *v0;
  sub_100038B58(*(void *)(v2 + 400), &v2);
  sub_100038B4C();
  return sub_1000190C8();
}

uint64_t sub_1000372A4()
{
  unint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 240);

  sub_10000ABB4(v2, v1);
  sub_100019444();
  sub_100019034(v4, &qword_100088918);
  swift_unknownObjectRelease(v3);
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(void *)(v0 + 40sub_100006E64(v0 + 8) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10003736C;
  uint64_t v6 = sub_100038B6C();
  return dispatch thunk of AsyncIteratorProtocol.next()(v6, v7, v8);
}

uint64_t sub_10003736C()
{
  if (v1) {
    v0[46] = v1;
  }
  else {
    v0[43] = 0LL;
  }
  sub_100038B4C();
  return sub_1000190D4();
}

uint64_t sub_100037404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100038768(a1, 0, 0, 0, 1, 0, 0);
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v6);
    uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v7);
    uint64_t v11 = v10;
    swift_unknownObjectRelease(v6);
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
  }

  uint64_t v12 = swift_allocObject(&unk_100080290, 32LL, 7LL);
  *(void *)(v12 + 1sub_100006E64(v0 + 6) = a2;
  *(void *)(v12 + 2sub_100006E64(v0 + 4) = a3;
  if (v11 | v9)
  {
    v15[0] = 0LL;
    v15[1] = 0LL;
    id v13 = v15;
    v15[2] = v9;
    v15[3] = v11;
  }

  else
  {
    id v13 = 0LL;
  }

  return swift_task_create(v5, v13, (char *)&type metadata for () + 8, &unk_100088950, v12);
}

void *sub_100037504()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_100006BEC(&qword_100088928);
  swift_allocObject(v3, 32LL, 7LL);
  sub_100038B4C();
  uint64_t v7 = sub_100035FA4(v4, v5, v6);
  v1[2] = v7;
  uint64_t v8 = swift_allocObject(&unk_100080240, 24LL, 7LL);
  *(void *)(v8 + 1sub_100006E64(v0 + 6) = v2;
  swift_retain(v7);
  sub_1000361A0((uint64_t)&unk_100088938, v8);
  sub_100019444();
  swift_release(v8);
  return v1;
}

uint64_t sub_1000375A4(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  void v2[9] = a2;
  unint64_t v3 = (*(void *)(*(void *)(sub_100006BEC(&qword_100087B38) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[10] = swift_task_alloc(v3);
  v2[11] = swift_task_alloc(v3);
  unint64_t v4 = (*(void *)(*(void *)(sub_100006BEC(&qword_100088910) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[12] = swift_task_alloc(v4);
  v2[13] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for Date(0LL);
  v2[14] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[15] = v6;
  v2[16] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10003766C, 0LL, 0LL);
}

uint64_t sub_10003766C(uint64_t a1)
{
  uint64_t v3 = v1[15];
  uint64_t v2 = v1[16];
  uint64_t v4 = v1[14];
  uint64_t v5 = (void *)v1[8];
  Date.init()(a1);
  sub_100052B9C();
  v1[17] = v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v1[18] = *v5;
  uint64_t v7 = type metadata accessor for ScoreboardSubscriptionManager(0LL);
  v1[19] = static ScoreboardSubscriptionManager.shared.getter();
  unint64_t v8 = sub_100038A80();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  return swift_task_switch(sub_100037710, v9, v10);
}

uint64_t sub_100037710()
{
  v0[20] = 0LL;
  swift_release(v0[19]);
  sub_100038B4C();
  return sub_1000190D4();
}

uint64_t sub_100037768()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 88);
  sub_10000B31C(*(void *)(v0 + 64), v2, &qword_100088918);
  uint64_t v4 = sub_100006BEC(&qword_100088918);
  sub_10000AB60(v2, 0LL, 1LL, v4);
  uint64_t v5 = type metadata accessor for CloudChannelError(0LL);
  sub_100038B60(v3, v6, v7, v5);
  sub_100037AB8(v1, v2, v3);
  sub_100019034(v3, &qword_100087B38);
  sub_100019034(v2, &qword_100088910);
  sub_100038B84();
  sub_100019528();
  sub_100019924();
  sub_100019768();
  sub_100038BC0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100037838()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 80);
  swift_release(*(void *)(v0 + 152));
  uint64_t v5 = sub_100006BEC(&qword_100088918);
  sub_100038B60(v3, v6, v7, v5);
  *(void *)(v0 + 40) = v1;
  swift_errorRetain(v1);
  uint64_t v8 = sub_100006BEC((uint64_t *)&unk_100088B90);
  uint64_t v9 = type metadata accessor for CloudChannelError(0LL);
  int v10 = swift_dynamicCast(v4, v0 + 40, v8, v9, 6LL);
  sub_10000AB60(v4, v10 ^ 1u, 1LL, v9);
  sub_100037AB8(v2, v3, v4);
  sub_100019034(v3, &qword_100088910);
  sub_100019034(v4, &qword_100087B38);
  if (qword_100087118 != -1) {
    swift_once(&qword_100087118, sub_10004BFA8);
  }
  uint64_t v11 = *(void *)(v0 + 160);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000B928(v12, (uint64_t)qword_10008F3A8);
  swift_errorRetain(v11);
  uint64_t v13 = swift_errorRetain(v11);
  id v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.error.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = *(void *)(v0 + 160);
  if (v16)
  {
    uint64_t v18 = (uint8_t *)sub_100019148(12LL);
    uint64_t v19 = sub_100019148(32LL);
    uint64_t v24 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_getErrorValue(v17, v0 + 48, v0 + 16);
    uint64_t v20 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    unint64_t v22 = v21;
    *(void *)(v0 + 5sub_100006E64(v0 + 6) = sub_100015AD4(v20, v21, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v22);
    sub_10002A62C();
    sub_10002A62C();
    sub_1000194B8( (void *)&_mh_execute_header,  v14,  v15,  "ScoreboardSubscriptionMessageProcessor - Failed to process scoreboard subscription - %s",  v18);
    sub_1000194B0(v19);
    sub_1000190E8(v19);
    sub_1000190E8((uint64_t)v18);

    sub_10002A62C();
  }

  else
  {
    sub_10002A62C();
    sub_10002A62C();
    sub_10002A62C();
  }

  sub_100038B84();
  sub_100019528();
  sub_100019924();
  sub_100019768();
  sub_100038BC0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100037AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v140 = a3;
  uint64_t v146 = a1;
  uint64_t v4 = sub_100006BEC(&qword_100087B38);
  __chkstk_darwin(v4);
  uint64_t v145 = (uint64_t)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v142 = *(void *)(v6 - 8);
  uint64_t v143 = v6;
  __chkstk_darwin(v6);
  uint64_t v131 = (uint64_t)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v141 = (uint64_t)&v130 - v9;
  uint64_t v10 = sub_100006BEC(&qword_100088910);
  __chkstk_darwin(v10);
  uint64_t v144 = (uint64_t)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v139 = (uint64_t)&v130 - v13;
  __chkstk_darwin(v14);
  BOOL v16 = (char *)&v130 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v130 - v18;
  __chkstk_darwin(v20);
  unint64_t v22 = (char *)&v130 - v21;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v130 - v24;
  __chkstk_darwin(v26);
  uint64_t v28 = (uint64_t *)((char *)&v130 - v27);
  sub_10000B31C(a2, (uint64_t)&v130 - v27, &qword_100088910);
  uint64_t v29 = (int *)sub_100006BEC(&qword_100088918);
  if (sub_10000AB6C((uint64_t)v28, 1LL, (uint64_t)v29) == 1)
  {
    sub_100019034((uint64_t)v28, &qword_100088910);
LABEL_50:
    unint64_t v132 = 0LL;
    id v63 = 0LL;
    goto LABEL_58;
  }

  uint64_t v30 = *v28;
  swift_bridgeObjectRetain(*v28);
  sub_100019034((uint64_t)v28, &qword_100088918);
  if (!((unint64_t)v30 >> 62))
  {
    if (*(void *)((v30 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_5;
    }
LABEL_49:
    swift_bridgeObjectRelease(v30);
    goto LABEL_50;
  }

  if (v30 < 0) {
    uint64_t v64 = v30;
  }
  else {
    uint64_t v64 = v30 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v30);
  uint64_t v65 = _CocoaArrayWrapper.endIndex.getter(v64);
  swift_bridgeObjectRelease(v30);
  if (!v65) {
    goto LABEL_49;
  }
LABEL_5:
  sub_10003EEB0(0LL, 1LL, v30);
  id v31 = *(id *)(v30 + 32);
  swift_bridgeObjectRelease(v30);
  id v147 = v31;
  id v32 = v31;
  uint64_t v33 = (void *)dispatch thunk of SportingEvent.coverage.getter();

  if (v33)
  {
    os_log_type_t v34 = (void *)dispatch thunk of SportingEventCoverage.ingestion.getter();

    if (v34)
    {
      double v35 = COERCE_DOUBLE(dispatch thunk of SportingEventCoverageIngestion.last.getter());
      char v37 = v36;

      if ((v37 & 1) == 0)
      {
        unint64_t v132 = sub_100052BF8(v35);
LABEL_57:
        id v63 = v147;
        goto LABEL_58;
      }
    }
  }

  uint64_t v38 = dispatch thunk of SportingEvent.coverage.getter();
  if (!v38
    || (uint64_t v39 = (void *)v38,
        unint64_t v40 = (void *)dispatch thunk of SportingEventCoverage.ingestion.getter(),
        v39,
        !v40)
    || (uint64_t v41 = dispatch thunk of SportingEventCoverageIngestion.lastUpdates.getter(), v40, !v41))
  {
LABEL_56:
    unint64_t v132 = 0LL;
    goto LABEL_57;
  }

  if ((unint64_t)v41 >> 62)
  {
    if (v41 >= 0) {
      uint64_t v66 = v41 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v66 = v41;
    }
    swift_bridgeObjectRetain(v41);
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter(v66);
    if (v42) {
      goto LABEL_14;
    }
    goto LABEL_55;
  }

  uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v41);
  if (!v42)
  {
LABEL_55:
    swift_bridgeObjectRelease_n(v41, 2LL);
    goto LABEL_56;
  }

LABEL_80:
  swift_bridgeObjectRelease(inited);
  *(void *)&__int128 v148 = v80;
  uint64_t v85 = sub_100006BEC(&qword_100087B00);
  sub_10002EBA0( (unint64_t *)&qword_100087B08,  &qword_100087B00,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v136 = (char *)BidirectionalCollection<>.joined(separator:)(95LL, 0xE100000000000000LL, v85, v86);
  uint64_t v88 = v87;
  uint64_t v89 = swift_bridgeObjectRelease(v80);
  uint64_t v90 = v141;
  Date.init()(v89);
  sub_100052B9C();
  uint64_t v135 = v91;
  uint64_t v92 = v142;
  uint64_t v93 = *(void (**)(uint64_t, uint64_t))(v142 + 8);
  uint64_t v94 = v90;
  uint64_t v95 = v143;
  v93(v94, v143);
  sub_10000B31C(a2, (uint64_t)v19, &qword_100088910);
  int v96 = sub_10000AB6C((uint64_t)v19, 1LL, (uint64_t)v29);
  if (v96 == 1)
  {
    sub_100019034((uint64_t)v19, &qword_100088910);
    uint64_t v142 = 0LL;
  }

  else
  {
    int v97 = *(void (**)(uint64_t, char *, uint64_t))(v92 + 16);
    uint64_t v98 = v131;
    v97(v131, &v19[v29[12]], v95);
    sub_100019034((uint64_t)v19, &qword_100088918);
    sub_100052B9C();
    uint64_t v142 = v99;
    v93(v98, v95);
  }

  uint64_t v100 = v139;
  sub_10000B31C(a2, (uint64_t)v16, &qword_100088910);
  int v101 = sub_10000AB6C((uint64_t)v16, 1LL, (uint64_t)v29);
  uint64_t v137 = v88;
  if (v101 == 1)
  {
    sub_100019034((uint64_t)v16, &qword_100088910);
    uint64_t v102 = 0LL;
    uint64_t v103 = 0LL;
  }

  else
  {
    uint64_t v102 = *((void *)v16 + 3);
    uint64_t v103 = *((void *)v16 + 4);
    swift_bridgeObjectRetain(v103);
    sub_100019034((uint64_t)v16, &qword_100088918);
  }

  uint64_t v104 = &qword_100088910;
  sub_10000B31C(a2, v100, &qword_100088910);
  int v105 = sub_10000AB6C(v100, 1LL, (uint64_t)v29);
  if (v105 == 1)
  {
    uint64_t v106 = 0LL;
  }

  else
  {
    uint64_t v106 = *(void *)(v100 + 40);
    uint64_t v104 = &qword_100088918;
  }

  sub_100019034(v100, v104);
  uint64_t v107 = &qword_100088910;
  uint64_t v108 = v144;
  sub_10000B31C(a2, v144, &qword_100088910);
  char v109 = 1;
  if (sub_10000AB6C(v108, 1LL, (uint64_t)v29) == 1)
  {
    uint64_t v110 = 0LL;
  }

  else
  {
    uint64_t v111 = v108 + v29[13];
    uint64_t v110 = *(void *)v111;
    char v109 = *(_BYTE *)(v111 + 8);
    uint64_t v107 = &qword_100088918;
  }

  uint64_t v112 = v140;
  sub_100019034(v108, v107);
  uint64_t v113 = v145;
  sub_10000B31C(v112, v145, &qword_100087B38);
  uint64_t v114 = type metadata accessor for CloudChannelError(0LL);
  if (sub_10000AB6C(v113, 1LL, v114) == 1)
  {
    sub_100019034(v113, &qword_100087B38);
    __int128 v148 = 0u;
    __int128 v149 = 0u;
    uint64_t v150 = 0LL;
  }

  else
  {
    *((void *)&v149 + 1) = v114;
    uint64_t v150 = &off_100081F58;
    uint64_t v115 = sub_100023D5C(&v148);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v114 - 8) + 32LL))(v115, v113, v114);
  }

  LOBYTE(v12sub_100006E64(v0 + 9) = 0;
  LOBYTE(v12sub_100006E64(v0 + 8) = v109;
  LOBYTE(v12sub_100006E64(v0 + 6) = 1;
  LOBYTE(v127) = v105 == 1;
  LOBYTE(v12sub_100006E64(v0 + 5) = v96 == 1;
  uint64_t v116 = v134;
  uint64_t v117 = v137;
  sub_10005B86C( v133,  v134,  (uint64_t)v136,  v137,  v146,  0LL,  v135,  0LL,  v142,  v125,  v102,  v103,  v126,  v106,  v127,  v110,  v128,  v132,  v129,  0LL,  0LL,  0,  0LL,  (uint64_t)&v148,  v130,  v131,  v132,  v133,  v134,  v135,  (char)v136,  v137,  v138,  v139,  v140,  v141);
  uint64_t v119 = v118;
  __int16 v121 = v120;
  swift_bridgeObjectRelease(v117);
  swift_bridgeObjectRelease(v103);
  swift_bridgeObjectRelease(v116);
  sub_100019034((uint64_t)&v148, (uint64_t *)&unk_100088BA0);
  sub_10005BD28(v119, v121 & 0x101);
  swift_bridgeObjectRelease(v119);
}

void sub_10003861C(uint64_t a1)
{
  uint64_t v2 = sub_100006BEC(&qword_100088910);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Date.init()(v9);
  sub_100052B9C();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = sub_100006BEC(&qword_100088918);
  sub_100038B60((uint64_t)v4, v13, v14, v12);
  sub_100037AB8(v11, (uint64_t)v4, a1);
  sub_100019034((uint64_t)v4, &qword_100088910);
}

uint64_t sub_100038724()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for ScoreboardSubscriptionMessageProcessor()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd38ScoreboardSubscriptionMessageProcessor);
}

uint64_t sub_100038768(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14 = sub_100006BEC(&qword_100087BF0);
  __chkstk_darwin(v14);
  BOOL v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000B31C(a1, (uint64_t)v16, &qword_100087BF0);
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  uint64_t v18 = sub_10000AB6C((uint64_t)v16, 1LL, v17);
  if ((_DWORD)v18 == 1)
  {
    sub_100019034((uint64_t)v16, &qword_100087BF0);
    uint64_t result = 0LL;
    if ((a2 & 1) == 0) {
      goto LABEL_3;
    }
  }

  else
  {
    unsigned __int8 v20 = TaskPriority.rawValue.getter(v18);
    (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8LL))(v16, v17);
    uint64_t result = v20;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if ((a3 & 1) != 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  result |= 0x100uLL;
  if ((a3 & 1) != 0)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

LABEL_15:
  result |= 0x800uLL;
  if ((a5 & 1) != 0) {
LABEL_6:
  }
    result |= 0x1000uLL;
LABEL_7:
  if ((a6 & 1) != 0) {
    result |= 0x2000uLL;
  }
  if ((a7 & 1) != 0) {
    return result | 0x4000;
  }
  return result;
}

uint64_t sub_1000388A8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000388B8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_100088934);
  *(void *)(v2 + 1sub_100006E64(v0 + 6) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100038B18;
  return sub_1000375A4(a1, v4);
}

uint64_t sub_10003890C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100038940(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_100088944);
  *(void *)(v2 + 1sub_100006E64(v0 + 6) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1000389C0;
  return sub_100036284(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000389C0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000389EC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100038A10(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_100088ABC);
  *(void *)(v2 + 1sub_100006E64(v0 + 6) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000389C0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100088AB8 + dword_100088AB8))(a1, v4);
}

unint64_t sub_100038A80()
{
  unint64_t result = qword_100088988;
  if (!qword_100088988)
  {
    uint64_t v1 = type metadata accessor for ScoreboardSubscriptionManager(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ScoreboardSubscriptionManager, v1);
    atomic_store(result, (unint64_t *)&qword_100088988);
  }

  return result;
}

uint64_t sub_100038AC0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100038AE4(void **a1)
{
  return sub_10000D678(a1, *(void *)(v1 + 16));
}

uint64_t sub_100038AEC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100038B10(void **a1)
{
  return sub_10000D6D8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100038B1C()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - sub_100006E64(v0 + 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - sub_100006E64(v0 + 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_100038B3C()
{
  return v0;
}

  ;
}

uint64_t sub_100038B58@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_100038B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AB60(a1, 1LL, 1LL, a4);
}

uint64_t sub_100038B6C()
{
  return v0 + 168;
}

uint64_t sub_100038B7C(uint64_t a1)
{
  return sub_10000ABB4(a1, *(void *)(v1 - 120));
}

uint64_t sub_100038B84()
{
  return swift_task_dealloc(*(void *)(v0 + 128));
}

  ;
}

uint64_t sub_100038BB0()
{
  return swift_task_alloc(32LL);
}

uint64_t sub_100038BB8(uint64_t a1)
{
  return sub_10000ABB4(a1, v1);
}

uint64_t sub_100038BC0()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100038BC8()
{
  return sub_10000ABB4(v1, v0);
}

uint64_t sub_100038BD4()
{
  return sub_10000B210(v1, v0);
}

void sub_100038BE0()
{
  *(void *)(v1 - sub_100006E64(v0 + 8) = *v0;
}

void sub_100038BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v21);
    String.hash(into:)(v21, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_100019940();
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_10003BC50(*v11, v12) & 1) == 0)
      {
        uint64_t v14 = ~v7;
        uint64_t v15 = (v8 + 1) & v14;
        sub_100019940();
        if ((v16 & 1) != 0)
        {
          do
          {
            uint64_t v17 = (uint64_t *)(v10 + 16 * v15);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((sub_10003BC50(*v17, v18) & 1) != 0) {
              break;
            }
            uint64_t v15 = (v15 + 1) & v14;
            sub_100019940();
          }

          while ((v20 & 1) != 0);
        }
      }
    }
  }

void sub_100038CEC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v7 = 4LL;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1)
         : *(id *)(a1 + 8 * v7);
      char v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      uint64_t v11 = SportingEvent.canonicalId.getter();
      uint64_t v13 = v12;
      dispatch thunk of PlaysStore.append(play:forCanonicalId:)(v9, v11, v12);
      if (v4)
      {

        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v13);
        return;
      }

      swift_bridgeObjectRelease(v13);
      ++v7;
      if (v10 == v6) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_13:
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

LABEL_10:
  swift_bridgeObjectRelease(a1);
}

uint64_t sub_100038E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100038E7C(a1, a2, a3, (uint64_t)&unk_100080380, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_100088950);
}

uint64_t sub_100038E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  uint64_t v13 = sub_10000AB6C(a1, 1LL, v12);
  if ((_DWORD)v13 == 1)
  {
    sub_100019034(a1, &qword_100087BF0);
    uint64_t v14 = 7168LL;
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter(v13);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(a1, v12);
    uint64_t v14 = v15 | 0x1C00LL;
  }

  uint64_t v16 = *(void *)(a3 + 16);
  if (v16)
  {
    uint64_t v17 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v16);
    uint64_t v19 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
    uint64_t v21 = v20;
    swift_unknownObjectRelease(v16);
  }

  else
  {
    uint64_t v19 = 0LL;
    uint64_t v21 = 0LL;
  }

  uint64_t v22 = sub_100035F98(a4);
  *(void *)(v22 + 1sub_100006E64(v0 + 6) = a2;
  *(void *)(v22 + 2sub_100006E64(v0 + 4) = a3;
  if (v21 | v19)
  {
    v25[0] = 0LL;
    v25[1] = 0LL;
    uint64_t v23 = v25;
    void v25[2] = v19;
    v25[3] = v21;
  }

  else
  {
    uint64_t v23 = 0LL;
  }

  return swift_task_create(v14, v23, a5, a6, v22);
}

uint64_t sub_100038FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_messageVersion);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_messageVersion + 8);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease(v4);
}

void sub_100038FD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_message];
  uint64_t v3 = sub_100006BEC(&qword_100088A40);
  uint64_t v4 = sub_100035F98(v3);
  uint64_t v5 = swift_bridgeObjectRetain(v2);
  uint64_t v6 = sub_10003B190(v5);
  sub_10003BCA4();
  if (v7)
  {
    if (v4 < 0) {
      uint64_t v134 = v4;
    }
    else {
      uint64_t v134 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10000C610();
    if (_CocoaArrayWrapper.endIndex.getter(v134)) {
      goto LABEL_3;
    }
LABEL_25:
    sub_100019278();
    sub_10003BD04();
    sub_10003BC34();
    swift_release(v135);
    return;
  }

  uint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_10000C610();
  if (!v8) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10003EEB0(0LL, (v4 & 0xC000000000000001LL) == 0, v4);
  if ((v4 & 0xC000000000000001LL) != 0) {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v4);
  }
  else {
    id v9 = *(id *)(v4 + 32);
  }
  uint64_t v10 = v9;
  sub_100019278();
  if (qword_1000870F0 != -1) {
    swift_once(&qword_1000870F0, sub_10004BF00);
  }
  uint64_t v11 = sub_10001939C();
  sub_10000B928(v11, (uint64_t)qword_10008F330);
  swift_retain_n(v6, 8LL);
  id v12 = v10;
  uint64_t v13 = (os_log_s *)sub_10003BC90();
  os_log_type_t oslog = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, oslog))
  {
    log = v13;
    uint64_t v14 = sub_100019148(62LL);
    uint64_t v144 = sub_100019148(96LL);
    v147[0] = v144;
    *(_DWORD *)uint64_t v14 = 136316418;
    uint64_t v15 = sub_10003BC88();
    double v146 = COERCE_DOUBLE(sub_10002A660(v15, v16, v17, v18, v19, v20, v21, v22));
    sub_10003BBBC(*(uint64_t *)&v146, v23, v24, v14 + 12, v25, v26, v27, v28, v136);

    uint64_t v29 = sub_100019278();
    *(_WORD *)(v14 + sub_100006E64(v0 + 12) = 2080;
    uint64_t v30 = SportingEvent.version.getter(v29);
    double v146 = COERCE_DOUBLE(sub_10002A660(v30, v31, v32, v33, v34, v35, v36, v37));
    sub_10003BBBC(*(uint64_t *)&v146, v38, v39, v14 + 22, v40, v41, v42, v43, v137);

    uint64_t v44 = sub_100019278();
    *(_WORD *)(v14 + 2sub_100006E64(v0 + 2) = 2048;
    double v146 = Date.timeIntervalSince1970.getter(v44);
    sub_10003BBBC(v45, v46, v47, v14 + 32, v48, v49, v50, v51, v138);
    sub_10003BB84();
    *(_WORD *)(v14 + 3sub_100006E64(v0 + 2) = 2048;
    double v52 = *(double *)(v6[2] + 16LL);
    uint64_t v53 = sub_10003BC00();
    double v146 = v52;
    sub_10003BC78(v53, v54, v55, v14 + 42, v56, v57, v58, v59, v139);
    sub_10003BC00();
    *(_WORD *)(v14 + 4sub_100006E64(v0 + 2) = 2080;
    uint64_t v60 = v6[2];
    uint64_t v62 = *(void *)(v60 + 40);
    unint64_t v61 = *(void *)(v60 + 48);
    swift_bridgeObjectRetain(v61);
    double v146 = COERCE_DOUBLE(sub_100015AD4(v62, v61, v147));
    sub_10003BC78(*(uint64_t *)&v146, v63, v64, v14 + 52, v65, v66, v67, v68, v140);
    sub_10003BB84();
    sub_10003BCFC();
    *(_WORD *)(v14 + 5sub_100006E64(v0 + 2) = 2048;
    uint64_t v69 = v6[2] + qword_10008F3E8;
    double v70 = *(double *)v69;
    if (*(_BYTE *)(v69 + 8)) {
      double v70 = -1.0;
    }
    double v146 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v14 + 54, v14 + 62);
    sub_10003BB84();
    _os_log_impl( (void *)&_mh_execute_header,  log,  oslog,  "=== Begin apns log for %s, version %s, message timestamp %f, type %ld, tempoSessionId %s, liveActivityTtl %f ===",  (uint8_t *)v14,  0x3Eu);
    swift_arrayDestroy(v144, 3LL);
    sub_1000190E8(v144);
    sub_1000190E8(v14);
  }

  else
  {

    uint64_t v71 = swift_release_n(v6, 8LL);
  }

  uint64_t v72 = SportingEvent.version.getter(v71);
  sub_100038FBC(v72, v73);
  uint64_t v74 = *(void **)&v1[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_dataRepository];
  uint64_t v75 = sub_10003BC88();
  uint64_t v77 = v76;
  uint64_t v78 = v74 + 2;
  uint64_t v79 = v74[5];
  uint64_t v80 = v74[6];
  sub_100006C2C(v78, v79);
  unint64_t v81 = (void *)dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)( v75,  v77,  1LL,  v79,  v80);
  uint64_t v82 = sub_100019820();
  if (v81)
  {
    uint64_t v83 = dispatch thunk of SportingEvent.versionNumber.getter(v82);
    uint64_t v84 = (void *)SportingEventSubscription.sportingEventDetails.getter(v83);
    uint64_t v85 = dispatch thunk of SportingEvent.versionNumber.getter(v84);

    if (v83 >= v85)
    {
      uint64_t v86 = sub_10003BC88();
      sub_10003A0E8(v2, v86, v87, 1);
      sub_100019820();
    }

    sub_10003992C( (uint64_t)v6,  v81,  v12,  *(void *)(v6[2] + qword_10008F3E8),  *(_BYTE *)(v6[2] + qword_10008F3E8 + 8),  0);
    uint64_t v89 = dispatch thunk of SportingEvent.plays.getter(v88);
    id v90 = v12;
    sub_100038CEC(v89, v1, v90);
    swift_bridgeObjectRelease(v89);
    sub_100039870();
    sub_10003BC00();
  }

  else
  {
    id v91 = v12;
    swift_retain_n(v6, 2LL);
    id v92 = v91;
    uint64_t v93 = (os_log_s *)sub_10003BC90();
    os_log_type_t v94 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v93, v94))
    {
      uint64_t v95 = sub_100019148(32LL);
      uint64_t v96 = sub_100019148(64LL);
      v147[0] = v96;
      *(_DWORD *)uint64_t v95 = 136315650;
      uint64_t v97 = SportingEvent.canonicalId.getter();
      double v146 = COERCE_DOUBLE(sub_10002A660(v97, v98, v99, v100, v101, v102, v103, v104));
      sub_10003BBAC(*(uint64_t *)&v146, v105, v106, v95 + 12, v107, v108, v109, v110, v136);

      uint64_t v111 = sub_100019278();
      *(_WORD *)(v95 + sub_100006E64(v0 + 12) = 2080;
      uint64_t v112 = SportingEvent.version.getter(v111);
      double v146 = COERCE_DOUBLE(sub_10002A660(v112, v113, v114, v115, v116, v117, v118, v119));
      sub_10003BBAC(*(uint64_t *)&v146, v120, v121, v95 + 22, v122, v123, v124, v125, v141);

      uint64_t v126 = sub_100019278();
      *(_WORD *)(v95 + 2sub_100006E64(v0 + 2) = 2048;
      double v146 = Date.timeIntervalSince1970.getter(v126);
      sub_10003BBAC(v127, v128, v129, v95 + 32, v130, v131, v132, v133, v142);
      sub_10003BB84();
      _os_log_impl( (void *)&_mh_execute_header,  v93,  v94,  "Failed to process push notification for %s with version %s and message timestamp %f - no subscription exists",  (uint8_t *)v95,  0x20u);
      swift_arrayDestroy(v96, 2LL);
      sub_1000190E8(v96);
      sub_1000190E8(v95);
    }

    else
    {

      sub_10003BB84();
    }

    sub_10003BD04();
    sub_10003BC00();
  }

  sub_10003BC34();
}

uint64_t sub_100039870()
{
  if (qword_1000870F0 != -1) {
    swift_once(&qword_1000870F0, sub_10004BF00);
  }
  uint64_t v0 = sub_10001939C();
  uint64_t v1 = (os_log_s *)sub_10000B928(v0, (uint64_t)qword_10008F330);
  Logger.logObject.getter(v1);
  os_log_type_t v2 = sub_10003BCB8();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)sub_100019148(2LL);
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "=== End apns log ===", v3, 2u);
    sub_1000190E8((uint64_t)v3);
  }

  return sub_100042214();
}

void sub_10003992C(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v98 = a1;
  uint64_t v100 = a3;
  int v88 = a6;
  uint64_t v95 = a4;
  unsigned int v94 = a5 & 1;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  __chkstk_darwin(v8);
  sub_10000E5C4();
  uint64_t v89 = v9;
  sub_100006BEC(&qword_1000887B8);
  sub_100019690();
  __chkstk_darwin(v10);
  sub_10000E5C4();
  uint64_t v92 = v11;
  uint64_t v12 = type metadata accessor for SportingEventProgressStatus(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v87 - v16;
  uint64_t v18 = type metadata accessor for SportingEventPlayLevel(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_10003BC1C();
  uint64_t v20 = SportingEventSubscription.mostRecentPlay.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))( v6,  enum case for SportingEventPlayLevel.alerts(_:),  v18);
  sub_10003BEB8(v6, v20);
  id v96 = v21;
  sub_100019278();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v6, v18);
  uint64_t v22 = (void *)sub_10003BC14();
  uint64_t v23 = dispatch thunk of SportingEvent.alertUpdates.getter();

  if (v23)
  {
    if ((unint64_t)v23 >> 62)
    {
      if (v23 >= 0) {
        uint64_t v86 = v23 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v86 = v23;
      }
      sub_10000C610();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v86);
      sub_100019278();
    }

    else
    {
      uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v25 = v100;
    if (v24)
    {
      sub_10003EEB0(0LL, (v23 & 0xC000000000000001LL) == 0, v23);
      if ((v23 & 0xC000000000000001LL) != 0) {
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v23);
      }
      else {
        id v26 = *(id *)(v23 + 32);
      }
      id v93 = v26;
    }

    else
    {
      id v93 = 0LL;
    }

    sub_100019278();
  }

  else
  {
    id v93 = 0LL;
    uint64_t v25 = v100;
  }

  sub_10003BC14();
  sub_10003BCC0();

  uint64_t v27 = enum case for SportingEventProgressStatus.final(_:);
  sub_10003BC70((uint64_t)v14, enum case for SportingEventProgressStatus.final(_:));
  char v28 = sub_10003BBF4();
  sub_10003BBCC((uint64_t)v14);
  sub_10003BB90();
  if ((v28 & 1) != 0)
  {
    type metadata accessor for SportingEventFactory(0LL);
    sub_10003BC70((uint64_t)v17, v27);
    uint64_t v29 = (void *)static SportingEventFactory.eventWithProgressStatus(event:progressStatus:)(v25, v17);
    sub_10003BB90();
    uint64_t v30 = v99;
    SportingEventSubscription.update(sportingEventDetails:updatedAt:)( v29,  v99 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_processDate);

LABEL_25:
    uint64_t v68 = v98;
    uint64_t v69 = v92;
    sub_10000B31C(*(void *)(v98 + 16) + *(void *)(**(void **)(v98 + 16) + 176LL), v92, &qword_1000887B8);
    SportingEventSubscription.view.setter(v69);
    goto LABEL_31;
  }

  sub_10003BC14();
  sub_10003BCC0();

  sub_10003BC70((uint64_t)v14, enum case for SportingEventProgressStatus.inProgress(_:));
  char v31 = sub_10003BBF4();
  sub_10003BBCC((uint64_t)v14);
  uint64_t v32 = sub_10003BB90();
  if ((v31 & 1) != 0
    && (SportingEvent.progressStatus.getter(v32),
        sub_10003BC70((uint64_t)v14, enum case for SportingEventProgressStatus.preGame(_:)),
        char v33 = sub_10003BBF4(),
        sub_10003BBCC((uint64_t)v14),
        uint64_t v32 = sub_10003BB90(),
        (v33 & 1) != 0))
  {
    if (qword_100087108 != -1) {
      swift_once(&qword_100087108, sub_10004BF5C);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    sub_10000B928(v34, (uint64_t)qword_10008F378);
    id v35 = v25;
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v39 = sub_10003BC08();
      uint64_t v103 = v39;
      *(_DWORD *)uint64_t v38 = 136315138;
      uint64_t v40 = SportingEvent.canonicalId.getter();
      uint64_t v101 = sub_10003BD20(v40, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v38 + 4, v38 + 12);

      sub_100019278();
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Skipped pregame update for inProgress event. canonical id: %s",  v38,  0xCu);
      swift_arrayDestroy(v39, 1LL);
      sub_1000190E8(v39);
      sub_1000190E8((uint64_t)v38);
    }

    else
    {
    }

    uint64_t v30 = v99;
    uint64_t v25 = v100;
  }

  else
  {
    uint64_t v42 = dispatch thunk of SportingEvent.versionNumber.getter(v32);
    uint64_t v43 = (void *)sub_10003BC14();
    uint64_t v44 = dispatch thunk of SportingEvent.versionNumber.getter(v43);

    if (v42 >= v44)
    {
      uint64_t v30 = v99;
      SportingEventSubscription.update(sportingEventDetails:updatedAt:)( v25,  v99 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_processDate);
      goto LABEL_25;
    }

    if (qword_100087108 != -1) {
      swift_once(&qword_100087108, sub_10004BF5C);
    }
    uint64_t v45 = type metadata accessor for Logger(0LL);
    sub_10000B928(v45, (uint64_t)qword_10008F378);
    id v46 = v25;
    id v47 = a2;
    id v48 = v46;
    id v49 = v47;
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.error.getter();
    int v52 = v51;
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v53 = sub_10003BC08();
      uint64_t v92 = sub_10003BC08();
      uint64_t v103 = v92;
      *(_DWORD *)uint64_t v53 = 136315650;
      int v87 = v52;
      uint64_t v54 = SportingEvent.canonicalId.getter();
      uint64_t v101 = sub_10003BD20(v54, v55);
      sub_10003BC60(v101, v56, v57, v53 + 12);

      uint64_t v58 = sub_100019278();
      *(_WORD *)(v53 + sub_100006E64(v0 + 12) = 2048;
      uint64_t v59 = dispatch thunk of SportingEvent.versionNumber.getter(v58);

      uint64_t v101 = v59;
      sub_10003BC60(v60, v61, v62, v53 + 22);

      *(_WORD *)(v53 + 2sub_100006E64(v0 + 2) = 2048;
      uint64_t v64 = (void *)SportingEventSubscription.sportingEventDetails.getter(v63);
      uint64_t v65 = dispatch thunk of SportingEvent.versionNumber.getter(v64);

      uint64_t v101 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v53 + 24, v53 + 32);

      _os_log_impl( (void *)&_mh_execute_header,  v50,  (os_log_type_t)v87,  "Skipped stale activity update for canonical id: %s. (%ld < %ld)",  (uint8_t *)v53,  0x20u);
      uint64_t v66 = v92;
      swift_arrayDestroy(v92, 1LL);
      sub_1000190E8(v66);
      uint64_t v67 = v53;
      uint64_t v25 = v100;
      sub_1000190E8(v67);
    }

    else
    {
    }

    uint64_t v30 = v99;
  }

  uint64_t v68 = v98;
LABEL_31:
  SportingEventSubscription.liveActivityTTLSeconds.setter(v95, v94);
  double v70 = *(void **)(v30 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_dataRepository);
  uint64_t v71 = v70[5];
  uint64_t v72 = v70[6];
  sub_100006C2C(v70 + 2, v71);
  uint64_t v73 = v97;
  dispatch thunk of PersistentStorable.writeEventSubscription(_:isConventionalOrUnified:)(a2, 1LL, v71, v72);
  if (v73)
  {
  }

  else
  {
    uint64_t v75 = SportingEventSubscription.consumers.getter(v74);
    sub_100038BF4(0xD000000000000011LL, 0x800000010006A7D0LL, v75);
    char v77 = v76;
    sub_100019278();
    char v78 = v77 | v88;
    char v79 = (v77 | v88) & 1;
    sub_10003A174(v68, a2, v78 & 1);
    uint64_t v80 = SportingEventSubscription.canonicalId.getter();
    uint64_t v82 = v81;
    sub_10003AAA4(v80, v81, v68, 0LL);
    uint64_t v83 = swift_bridgeObjectRelease(v82);
    uint64_t v84 = v89;
    Date.init()(v83);
    sub_10003A868(v25, a2, v85, v79);

    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v84, v91);
  }

uint64_t sub_10003A0E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v10[3] = &type metadata for TVAppFeatureFlags;
  v10[4] = sub_10000B940();
  char v8 = isFeatureEnabled(_:)(v10);
  uint64_t result = sub_100006E64(v10);
  if ((v8 & 1) != 0) {
    return sub_100029E6C(a1, a2, a3, a4 & 1);
  }
  return result;
}

void sub_10003A174(uint64_t a1, void *a2, int a3)
{
  uint64_t v4 = v3;
  int v54 = a3;
  sub_100006BEC(&qword_100087BF0);
  sub_100019690();
  __chkstk_darwin(v7);
  sub_100019488();
  uint64_t v10 = v9 - v8;
  sub_100006BEC(&qword_100087368);
  sub_100019690();
  __chkstk_darwin(v11);
  sub_100019488();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = sub_10000C4E8();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v46 - v20;
  uint64_t v22 = (uint64_t *)(*(void *)(a1 + 16) + qword_10008F3F0);
  uint64_t v23 = v22[1];
  if (v23)
  {
    uint64_t v52 = v19;
    uint64_t v53 = v10;
    uint64_t v24 = a2;
    uint64_t v25 = v4;
    uint64_t v26 = *v22;
    uint64_t v27 = swift_bridgeObjectRetain(v23);
    os_log_type_t v51 = v24;
    SportingEventSubscription.fullPayloadBaseURL.getter(v27);
    if (sub_10000AB6C(v14, 1LL, v15) == 1)
    {
      sub_10003BCFC();
      char v28 = &qword_100087368;
      uint64_t v29 = (void *)v14;
LABEL_7:
      sub_100019034((uint64_t)v29, v28);
      goto LABEL_8;
    }

    uint64_t v50 = v26;
    uint64_t v30 = v16;
    char v31 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 32);
    v31(v21, v14, v15);
    sub_10000B31C( (uint64_t)v25 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_subscriptionOperationFactory,  (uint64_t)v55,  &qword_100088158);
    if (!v55[3])
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v15);
      sub_10003BCFC();
      char v28 = &qword_100088158;
      uint64_t v29 = v55;
      goto LABEL_7;
    }

    sub_10003BCE0(v56);
    uint64_t v32 = type metadata accessor for TaskPriority(0LL);
    sub_10000AB60(v53, 1LL, 1LL, v32);
    sub_100029658((uint64_t)v56, (uint64_t)v55);
    id v48 = v31;
    id v49 = v21;
    uint64_t v33 = v30;
    uint64_t v34 = v21;
    uint64_t v35 = v52;
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v52, v34, v15);
    uint64_t v36 = *(unsigned __int8 *)(v30 + 80);
    uint64_t v37 = (v36 + 216) & ~v36;
    uint64_t v38 = v37 + v17;
    unint64_t v39 = (v37 + v17) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v46 = (v39 + 31) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v47 = v38;
    uint64_t v40 = (char *)swift_allocObject(&unk_100080308, v46 + 8, v36 | 7);
    unint64_t v41 = &v40[v39];
    *((void *)v40 + sub_100006E64(v0 + 2) = 0LL;
    *((void *)v40 + 3) = 0LL;
    sub_10003BCE0(v40 + 32);
    uint64_t v42 = v51;
    *((void *)v40 + 2sub_100006E64(v0 + 6) = v51;
    v48(&v40[v37], v35, v15);
    v40[v47] = v54 & 1;
    *((void *)v41 + 1) = v50;
    *((void *)v41 + sub_100006E64(v0 + 2) = v23;
    *(void *)&v40[v46] = v25;
    id v43 = v42;
    id v44 = v25;
    uint64_t v45 = sub_100038E7C( v53,  (uint64_t)&unk_100088A78,  (uint64_t)v40,  (uint64_t)&unk_100080330,  (uint64_t)&type metadata for Bool,  (uint64_t)&unk_100088A88);
    swift_release(v45);
    sub_100028C94(v56);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v49, v15);
  }

uint64_t sub_10003A44C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 5sub_100006E64(v0 + 6) = v10;
  *(void *)(v8 + 6sub_100006E64(v0 + 4) = v11;
  *(void *)(v8 + 40) = a6;
  *(void *)(v8 + 4sub_100006E64(v0 + 8) = a8;
  *(_BYTE *)(v8 + 8sub_100006E64(v0 + 8) = a7;
  *(void *)(v8 + 2sub_100006E64(v0 + 4) = a4;
  *(void *)(v8 + 3sub_100006E64(v0 + 2) = a5;
  *(void *)(v8 + 1sub_100006E64(v0 + 6) = a1;
  return swift_task_switch(sub_10003A47C, 0LL, 0LL);
}

uint64_t sub_10003A47C()
{
  char v1 = *(_BYTE *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v4 = swift_task_alloc(80LL);
  *(void *)(v0 + 7sub_100006E64(v0 + 2) = v4;
  __int128 v5 = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v4 + 1sub_100006E64(v0 + 6) = *(_OWORD *)(v0 + 24);
  *(void *)(v4 + 3sub_100006E64(v0 + 2) = v3;
  *(_BYTE *)(v4 + 40) = v1;
  *(void *)(v4 + 4sub_100006E64(v0 + 8) = v2;
  *(_OWORD *)(v4 + 5sub_100006E64(v0 + 6) = v5;
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 80) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10003A53C;
  return withCheckedContinuation<A>(isolation:function:_:)( *(void *)(v0 + 16),  0LL,  0LL,  0xD000000000000039LL,  0x800000010006BF00LL,  sub_10003BAA0,  v4,  &type metadata for Bool);
}

uint64_t sub_10003A53C()
{
  uint64_t v1 = *(void *)(*v0 + 72);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 80));
  swift_task_dealloc(v1);
  return sub_1000190BC(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_10003A584( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v42 = a8;
  uint64_t v37 = a7;
  uint64_t v39 = a1;
  uint64_t v38 = sub_100006BEC(&qword_100088A90);
  uint64_t v10 = *(void *)(v38 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v38);
  uint64_t v12 = sub_100006BEC(&qword_100088A98);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v40 = v12;
  uint64_t v41 = v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = SportingEventSubscription.canonicalId.getter(v16);
  uint64_t v19 = v18;
  sub_100023E70(v17, v18, a4, a6, v37, v45);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = v46;
  uint64_t v21 = v47;
  sub_100006C2C(v45, v46);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
  uint64_t v44 = v22;
  char v43 = 0;
  uint64_t v23 = sub_100006BEC(&qword_100088360);
  sub_10002EBA0(&qword_100088368, &qword_100088360, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.replaceError(with:)(&v43, v23, v24);
  swift_release(v22);
  sub_100006E64(v45);
  uint64_t v25 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v39,  v38);
  uint64_t v26 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v27 = (v26 + 16) & ~v26;
  uint64_t v28 = swift_allocObject(&unk_100080358, v27 + v11, v26 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( v28 + v27,  (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v25);
  sub_10002EBA0( &qword_100088AA0,  &qword_100088A98,  (uint64_t)&protocol conformance descriptor for Publishers.ReplaceError<A>);
  uint64_t v29 = v40;
  uint64_t v31 = Publisher<>.sink(receiveValue:)(sub_10003BB1C, v28, v40, v30);
  swift_release(v28);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v29);
  uint64_t v32 = v42 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_cancellables;
  swift_beginAccess(v42 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_cancellables, v45, 33LL, 0LL);
  uint64_t v33 = sub_100006BEC(&qword_100088AA8);
  sub_10002EBA0(&qword_100088AB0, &qword_100088AA8, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v32, v33, v34);
  swift_endAccess(v45);
  return swift_release(v31);
}

uint64_t sub_10003A824(char *a1)
{
  char v3 = *a1;
  uint64_t v1 = sub_100006BEC(&qword_100088A90);
  return CheckedContinuation.resume(returning:)(&v3, v1);
}

void sub_10003A868(void *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v8 = static SportsSubscriptionState.activeSubscriptionEventId.getter();
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v9;
    uint64_t v12 = SportingEvent.canonicalId.getter();
    if (v10 == v12 && v11 == v13)
    {
      sub_100019278();
      sub_100019820();
    }

    else
    {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0LL);
      sub_100019278();
      sub_100019820();
      if ((v15 & 1) == 0) {
        return;
      }
    }

    if ((a4 & 1) != 0) {
      uint64_t v16 = 0x4E4F4953534553LL;
    }
    else {
      uint64_t v16 = 0x505041205654LL;
    }
    if ((a4 & 1) != 0) {
      unint64_t v17 = 0xE700000000000000LL;
    }
    else {
      unint64_t v17 = 0xE600000000000000LL;
    }
    if (qword_1000870F0 != -1) {
      swift_once(&qword_1000870F0, sub_10004BF00);
    }
    uint64_t v18 = sub_10001939C();
    uint64_t v19 = (os_log_s *)sub_10000B928(v18, (uint64_t)qword_10008F330);
    uint64_t v20 = swift_bridgeObjectRetain(v17);
    Logger.logObject.getter(v20);
    os_log_type_t v21 = sub_10003BCB8();
    if (os_log_type_enabled(v19, v21))
    {
      uint64_t v22 = (uint8_t *)sub_100019148(12LL);
      uint64_t v23 = sub_100019148(32LL);
      uint64_t v25 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_bridgeObjectRetain(v17);
      uint64_t v24 = sub_100015AD4(v16, v17, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease_n(v17, 3LL);
      sub_1000194B8((void *)&_mh_execute_header, v19, v21, "EVENT TYPE: %s", v22);
      sub_10003BC98();
      sub_1000190E8(v23);
      sub_1000190E8((uint64_t)v22);
    }

    else
    {

      swift_bridgeObjectRelease_n(v17, 2LL);
    }

    sub_10005342C(a1, a2);
  }

void sub_10003AAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SportingEventProgressStatus(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10003BC1C();
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100019488();
  uint64_t v14 = v13 - v12;
  sub_10000CC1C(v4 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_performance, (uint64_t)v62);
  char v15 = sub_100006C2C(v62, v62[3]);
  uint64_t v56 = (uint64_t)v15;
  if (a3)
  {
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = *(void *)(v16 + 48);
    uint64_t v55 = *(void *)(v16 + 40);
    char v15 = (void *)swift_bridgeObjectRetain(v17);
  }

  else
  {
    uint64_t v55 = 0LL;
    uint64_t v17 = 0LL;
  }

  uint64_t v54 = *(void *)(v4 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_notificationReceiptTime);
  Date.init()(v15);
  sub_100052B9C();
  uint64_t v53 = v18;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
  if (!a3)
  {
    uint64_t v25 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v52 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v21 = 0LL;
    if (!a4) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  uint64_t v19 = *(void *)(a3 + 16) + qword_10008F3E0;
  sub_100052B9C();
  uint64_t v21 = v20;
  uint64_t v22 = *(void **)(a3 + 16);
  uint64_t v23 = v22[4];
  uint64_t v50 = *(void *)(a3 + 24);
  uint64_t v51 = v22[3];
  uint64_t v52 = v22[2];
  sub_10003BCA4();
  if (v24)
  {
    if (v19 < 0) {
      uint64_t v36 = v19;
    }
    else {
      uint64_t v36 = v19 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v23);
    sub_10000C610();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v36);
    if (v25)
    {
LABEL_7:
      BOOL v26 = __OFSUB__(v25, 1LL);
      uint64_t v27 = v25 - 1;
      if (v26)
      {
        __break(1u);
      }

      else
      {
        uint64_t v49 = v21;
        sub_10003EEB0(v27, (v19 & 0xC000000000000001LL) == 0, v19);
        if ((v19 & 0xC000000000000001LL) == 0)
        {
          id v28 = *(id *)(v19 + 8 * v27 + 32);
LABEL_10:
          uint64_t v29 = v28;
          uint64_t v30 = sub_100019278();
          SportingEvent.progressStatus.getter(v30);

          uint64_t v25 = SportingEventProgressStatus.rawValue.getter(v31);
          uint64_t v33 = v32;
          (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v5, v8);
          uint64_t v21 = v49;
          goto LABEL_18;
        }
      }

      id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v19);
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v25 = *(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v23);
    sub_10000C610();
    if (v25) {
      goto LABEL_7;
    }
  }

  sub_100019278();
  uint64_t v33 = 0LL;
LABEL_18:
  uint64_t v34 = v50;
  uint64_t v35 = v51;
  if (!a4)
  {
LABEL_20:
    uint64_t v61 = 0LL;
    memset(v60, 0, sizeof(v60));
    goto LABEL_21;
  }

LABEL_19:
  uint64_t v59 = a4;
  swift_errorRetain(a4);
  uint64_t v37 = sub_100006BEC((uint64_t *)&unk_100088B90);
  uint64_t v38 = sub_100006BEC(&qword_100088A68);
  if ((swift_dynamicCast(v60, &v59, v37, v38, 6LL) & 1) == 0) {
    goto LABEL_20;
  }
LABEL_21:
  LOBYTE(v47) = 1;
  LOBYTE(v4sub_100006E64(v0 + 4) = 1;
  LOBYTE(v4sub_100006E64(v0 + 6) = a3 == 0;
  LOBYTE(v4sub_100006E64(v0 + 5) = a3 == 0;
  LOBYTE(v43) = a3 == 0;
  sub_10005B86C( a1,  a2,  v55,  v17,  v54,  0LL,  v53,  0LL,  v21,  v43,  v35,  v23,  v44,  v52,  v45,  v34,  v46,  0LL,  v47,  v25,  v33,  0,  0LL,  (uint64_t)v60,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  a1,  a2,  v59);
  uint64_t v40 = v39;
  __int16 v42 = v41;
  sub_100019278();
  swift_bridgeObjectRelease(v23);
  sub_100019820();
  sub_100019034((uint64_t)v60, (uint64_t *)&unk_100088BA0);
  sub_10005BD28(v40, v42 & 0x101);
  swift_bridgeObjectRelease(v40);
  sub_100006E64(v62);
  sub_10000C248();
}

    uint64_t v12 = (v17 - 1) & v17;
    char v15 = __clz(__rbit64(v17)) + (v18 << 6);
    uint64_t v11 = v18;
LABEL_20:
    uint64_t v20 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v15);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v10 + 56) + 8 * v15);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    CloudChannelSubscription.Demand.init(key:value:)(v21, v22, v23);
    if (sub_10000AB6C((uint64_t)v4, 1LL, v5) == 1)
    {
      sub_100019034((uint64_t)v4, &qword_100089348);
    }

    else
    {
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      uint64_t v25 = v30;
      v24(v30, v4, v5);
      uint64_t v31 = v24;
      v24(v32, v25, v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0) {
        uint64_t v35 = (char *)sub_100015030(0LL, *((void *)v35 + 2) + 1LL, 1LL, (uint64_t)v35);
      }
      uint64_t v27 = *((void *)v35 + 2);
      BOOL v26 = *((void *)v35 + 3);
      if (v27 >= v26 >> 1) {
        uint64_t v35 = (char *)sub_100015030(v26 > 1, v27 + 1, 1LL, (uint64_t)v35);
      }
      id v28 = v35;
      *((void *)v35 + sub_100006E64(v0 + 2) = v27 + 1;
      v31( &v28[((*(unsigned __int8 *)(v33 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))
           + *(void *)(v33 + 72) * v27],
        v32,
        v5);
    }
  }

  __break(1u);
}

        uint64_t v9 = (v13 - 1) & v13;
        uint64_t v11 = __clz(__rbit64(v13)) + (v3 << 6);
      }

      char v15 = (uint64_t *)(*(void *)(v39 + 48) + 16 * v11);
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      sub_100018C20(*(void *)(v39 + 56) + 32 * v11, (uint64_t)v38);
      v36[0] = v16;
      v36[1] = v17;
      sub_100018C20((uint64_t)v38, (uint64_t)&v37);
      uint64_t v18 = qword_100087138;
      swift_bridgeObjectRetain_n(v17, 2LL);
      if (v18 != -1) {
        swift_once(&qword_100087138, sub_100052010);
      }
      uint64_t v19 = (char *)off_100089728;
      uint64_t v20 = *((void *)off_100089728 + 2);
      if (v20) {
        break;
      }
LABEL_38:
      sub_1000528A4((uint64_t)v36);
      sub_100006E64(v38);
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v32 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      if (__OFADD__(v33++, 1LL)) {
        goto LABEL_45;
      }
    }

    uint64_t v21 = *((void *)off_100089728 + 4);
    uint64_t v22 = *((void *)off_100089728 + 5);
    if (v21 != v16 || v22 != v17)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v16, v17, 0LL);
      if ((result & 1) == 0) {
        break;
      }
    }

void sub_10003ADF8()
{
}

uint64_t sub_10003AE30()
{
  return swift_bridgeObjectRelease(*(void *)(v0
                                             + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_messageVersion
                                             + 8));
}

id sub_10003AF00()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApsMessageProcessingOperation(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10003B010()
{
  return type metadata accessor for ApsMessageProcessingOperation(0LL);
}

uint64_t type metadata accessor for ApsMessageProcessingOperation(uint64_t a1)
{
  uint64_t result = qword_100088A28;
  if (!qword_100088A28) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApsMessageProcessingOperation);
  }
  return result;
}

void sub_10003B050(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = "(";
  v4[4] = &unk_1000681F8;
  v4[5] = &unk_100068210;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = &unk_100068228;
  v4[8] = &unk_100068240;
  v4[9] = &unk_100068258;
  sub_10003B12C(319LL);
  if (v3 <= 0x3F)
  {
    v4[10] = *(void *)(v2 - 8) + 64LL;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[12] = &unk_100068258;
    swift_updateClassMetadata2(a1, 256LL, 13LL, v4, a1 + 184);
  }

void sub_10003B12C(uint64_t a1)
{
  if (!qword_100087DD8)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100087DD8);
    }
  }

uint64_t sub_10003B180(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

void *sub_10003B190(uint64_t a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = *v1;
  uint64_t v6 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0LL);
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100006BEC(&qword_100087438);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for String.Encoding(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v56[0] = 7565409LL;
  v56[1] = 0xE300000000000000LL;
  AnyHashable.init<A>(_:)(&v57, v56, &type metadata for String, &protocol witness table for String, v14);
  sub_10003BE78((uint64_t)&v57, a1, &v60);
  swift_bridgeObjectRelease(a1);
  sub_100018DB0((uint64_t)&v57);
  if (!v61)
  {
    sub_100019034((uint64_t)&v60, qword_100087690);
LABEL_11:
    uint64_t v31 = sub_100006BEC(&qword_100088A50);
    sub_10002EBA0(&qword_100088A58, &qword_100088A50, (uint64_t)&unk_10006A0A8);
    uint64_t v33 = swift_allocError(v31, v32, 0LL, 0LL);
    unint64_t v35 = 0xD000000000000014LL;
    uint64_t v36 = "Key is missing - aps";
LABEL_14:
    *uint64_t v34 = v35;
    v34[1] = (unint64_t)(v36 - 32) | 0x8000000000000000LL;
    swift_willThrow(v33);
    goto LABEL_15;
  }

  uint64_t v62 = v5;
  uint64_t v17 = sub_100006BEC(&qword_100088A60);
  if ((swift_dynamicCast(v56, &v60, (char *)&type metadata for Any + 8, v17, 6LL) & 1) == 0)
  {
    uint64_t v5 = v62;
    goto LABEL_11;
  }

  uint64_t v53 = v2;
  uint64_t v18 = v56[0];
  sub_10003BD2C(0x7472656C61LL, 0xE500000000000000LL, v56[0], &v57);
  swift_bridgeObjectRelease(v18);
  if (!v58)
  {
    sub_100019034((uint64_t)&v57, qword_100087690);
    goto LABEL_13;
  }

  if ((swift_dynamicCast(&v60, &v57, (char *)&type metadata for Any + 8, v17, 6LL) & 1) == 0)
  {
LABEL_13:
    uint64_t v5 = v62;
    uint64_t v37 = sub_100006BEC(&qword_100088A50);
    sub_10002EBA0(&qword_100088A58, &qword_100088A50, (uint64_t)&unk_10006A0A8);
    uint64_t v33 = swift_allocError(v37, v38, 0LL, 0LL);
    unint64_t v35 = 0xD000000000000016LL;
    uint64_t v36 = "Key is missing - alert";
    goto LABEL_14;
  }

  uint64_t v19 = v60;
  sub_10003BD2C(2036625250LL, 0xE400000000000000LL, v60, &v57);
  swift_bridgeObjectRelease(v19);
  if (!v58)
  {
    sub_100019034((uint64_t)&v57, qword_100087690);
    goto LABEL_18;
  }

  uint64_t v20 = swift_dynamicCast(&v60, &v57, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if ((v20 & 1) == 0)
  {
LABEL_18:
    uint64_t v40 = sub_100006BEC(&qword_100088A50);
    sub_10002EBA0(&qword_100088A58, &qword_100088A50, (uint64_t)&unk_10006A0A8);
    uint64_t v27 = swift_allocError(v40, v41, 0LL, 0LL);
    unint64_t v29 = 0xD000000000000015LL;
    uint64_t v30 = "Key is missing - body";
    goto LABEL_19;
  }

  __int128 v21 = v60;
  static String.Encoding.utf8.getter(v20);
  uint64_t v22 = String.data(using:allowLossyConversion:)(v16, 0LL, v21, *((void *)&v21 + 1));
  unint64_t v24 = v23;
  swift_bridgeObjectRelease(*((void *)&v21 + 1));
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if (v24 >> 60 == 15)
  {
    uint64_t v25 = sub_100006BEC(&qword_100088A50);
    sub_10002EBA0(&qword_100088A58, &qword_100088A50, (uint64_t)&unk_10006A0A8);
    uint64_t v27 = swift_allocError(v25, v26, 0LL, 0LL);
    unint64_t v29 = 0xD000000000000016LL;
    uint64_t v30 = "Unexpected data format";
LABEL_19:
    *id v28 = v29;
    v28[1] = (unint64_t)(v30 - 32) | 0x8000000000000000LL;
    swift_willThrow(v27);
    uint64_t v5 = v62;
    goto LABEL_15;
  }

  uint64_t v42 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  uint64_t v43 = JSONDecoder.init()();
  static SportsJSONContext.Property<A>.initFailureObserver.getter(v43);
  uint64_t v44 = type metadata accessor for DefaultSportsJSONInitFailureObserver(0LL);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  uint64_t v45 = DefaultSportsJSONInitFailureObserver.init()();
  uint64_t v58 = v44;
  uint64_t v59 = &protocol witness table for DefaultSportsJSONInitFailureObserver;
  *(void *)&__int128 v57 = v45;
  uint64_t v46 = (void (*)(__int128 *, void))dispatch thunk of JSONDecoder.userInfo.modify(&v60);
  uint64_t v47 = sub_100006BEC(&qword_100087448);
  Dictionary<>.subscript.setter(&v57, v11, v47);
  v46(&v60, 0LL);
  (*(void (**)(char *, void, uint64_t))(v54 + 104))( v8,  enum case for JSONDecoder.DateDecodingStrategy.secondsSince1970(_:),  v55);
  dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v8);
  uint64_t v48 = sub_100006BEC(&qword_100087590);
  sub_10002EBA0(&qword_100087598, &qword_100087590, (uint64_t)&unk_100069E40);
  uint64_t v49 = v22;
  uint64_t v50 = v53;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v48, v22, v24, v48, v51);
  uint64_t v5 = v62;
  if (!v50)
  {
    v3[2] = v57;
    uint64_t v52 = Data.count.getter(v49, v24);
    swift_release(v43);
    sub_1000232CC(v49, v24);
    v3[3] = v52;
    return v3;
  }

  swift_release(v43);
  sub_1000232CC(v49, v24);
LABEL_15:
  swift_deallocPartialClassInstance(v3, v5, 32LL, 7LL);
  return v3;
}

uint64_t sub_10003B74C(uint64_t a1, int *a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = swift_task_alloc(a2[1]);
  uint64_t v5 = (void *)sub_10003BD14(v4);
  *uint64_t v5 = v2;
  v5[1] = sub_10003B7AC;
  return v7(a1);
}

uint64_t sub_10003B7AC()
{
  return sub_1000190BC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003B7D4()
{
  uint64_t v1 = sub_10000C4E8();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 216) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8LL) + v0;
  unint64_t v8 = ((v5 & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  sub_100006E64((void *)(v0 + 32));
  swift_release(*(void *)(v0 + 72));
  swift_release(*(void *)(v0 + 80));
  sub_100006E64((void *)(v0 + 88));
  sub_100006E64((void *)(v0 + 128));
  sub_100006E64((void *)(v0 + 168));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v7 + 16));

  return swift_deallocObject(v0, v8 + 8, v6);
}

uint64_t sub_10003B8A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10000C4E8() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 216LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[26];
  uint64_t v9 = (uint64_t)v1 + v4;
  char v10 = *((_BYTE *)v1 + v5);
  uint64_t v11 = *(void *)((char *)v1 + (v5 & 0xFFFFFFFFFFFFFFF8LL) + 8);
  uint64_t v12 = swift_task_alloc(dword_100088A74);
  uint64_t v13 = (void *)sub_10003BD14(v12);
  *uint64_t v13 = v2;
  v13[1] = sub_10003B97C;
  return sub_10003A44C(a1, v6, v7, (uint64_t)(v1 + 4), v8, v9, v10, v11);
}

uint64_t sub_10003B97C()
{
  return sub_1000190BC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003B9A0(uint64_t a1, int *a2)
{
  *(void *)(v2 + 1sub_100006E64(v0 + 6) = a1;
  unint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 2sub_100006E64(v0 + 4) = v3;
  void *v3 = v2;
  v3[1] = sub_10003BA08;
  return v5(v2 + 32);
}

uint64_t sub_10003BA08()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(_BYTE **)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  *uint64_t v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10003BA58()
{
  uint64_t v0 = swift_task_alloc(dword_100088A84);
  uint64_t v1 = (void *)sub_10003BD14(v0);
  uint64_t v2 = sub_10003BBD4(v1);
  return sub_10003BB9C(v2, v3, v4, v5);
}

uint64_t sub_10003BAA0(uint64_t a1)
{
  return sub_10003A584( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(unsigned __int8 *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64));
}

uint64_t sub_10003BAB8()
{
  uint64_t v1 = sub_100006BEC(&qword_100088A90);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003BB1C(char *a1)
{
  return sub_10003A824(a1);
}

uint64_t sub_10003BB5C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10003BB84()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_10003BB90()
{
  return v1(v2, v0);
}

uint64_t sub_10003BB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_10003BBAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v9, v10, a4);
}

uint64_t sub_10003BBBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v9, v10, a4);
}

uint64_t sub_10003BBCC(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_10003BBD4(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10003BBF4()
{
  return sub_100041A3C(v1, v0);
}

uint64_t sub_10003BC00()
{
  return swift_release(v0);
}

uint64_t sub_10003BC08()
{
  return swift_slowAlloc(32LL, -1LL);
}

uint64_t sub_10003BC14()
{
  return SportingEventSubscription.sportingEventDetails.getter();
}

  ;
}

  ;
}

uint64_t sub_10003BC50(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_10003BC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 88, v4, v5, a4);
}

uint64_t sub_10003BC70(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_10003BC78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v10, v9, a4);
}

uint64_t sub_10003BC88()
{
  return SportingEvent.canonicalId.getter();
}

uint64_t sub_10003BC90()
{
  return Logger.logObject.getter();
}

uint64_t sub_10003BC98()
{
  return swift_arrayDestroy(v0, 1LL);
}

  ;
}

uint64_t sub_10003BCB8()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_10003BCC0()
{
  return SportingEvent.progressStatus.getter();
}

  ;
}

void *sub_10003BCE0(void *a1)
{
  return memcpy(a1, (const void *)(v1 + 72), 0xB0uLL);
}

uint64_t sub_10003BCEC@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1));
}

uint64_t sub_10003BCF4@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1));
}

uint64_t sub_10003BCFC()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10003BD04()
{
  return sub_100039870();
}

uint64_t sub_10003BD0C()
{
  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_10003BD14(uint64_t result)
{
  *(void *)(v1 + 1sub_100006E64(v0 + 6) = result;
  return result;
}

uint64_t sub_10003BD20(uint64_t a1, unint64_t a2)
{
  return sub_100015AD4(a1, a2, (uint64_t *)(v2 - 72));
}

void sub_10003BD2C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v5 = sub_10003F2AC(a1, a2), (v6 & 1) != 0))
  {
    uint64_t v7 = sub_10003F294(v5);
    sub_10003F200(v7, v8);
  }

  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    sub_10000C510();
  }

void sub_10003BD68(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_100016048(a1), (v6 & 1) != 0))
  {
    sub_100035EAC(*(void *)(a2 + 56) + 32 * v5, (uint64_t)a3, qword_100087690);
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
    a3[3] = 1LL;
  }

  sub_10000C510();
}

void sub_10003BDBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v3 = sub_10003F2AC(a1, a2);
    if ((v4 & 1) != 0) {
      sub_10003F2D8(v3);
    }
  }

  sub_10000C510();
}

uint64_t sub_10003BDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  unint64_t v4 = sub_10003F2AC(a1, a2);
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  char v6 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v4);
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain(v6[1]);
  return v7;
}

void sub_10003BE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v4 = sub_10003F2AC(a1, a2);
    if ((v5 & 1) != 0) {
      swift_bridgeObjectRetain(*(void *)(*(void *)(v3 + 56) + 8 * v4));
    }
  }

  sub_10000C510();
}

void sub_10003BE78(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v4 = sub_1000160AC(a1), (v5 & 1) != 0))
  {
    uint64_t v6 = sub_10003F294(v4);
    sub_10003F200(v6, v7);
  }

  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    sub_10000C510();
  }

void sub_10003BEB8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v2 = sub_1000160DC(a1);
    if ((v3 & 1) != 0) {
      sub_10003F2D8(v2);
    }
  }

  sub_10000C510();
}

void sub_10003BEF0(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v4 = sub_100016048(a1), (v5 & 1) != 0))
  {
    uint64_t v6 = sub_10003F294(v4);
    sub_10003F200(v6, v7);
  }

  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    sub_10000C510();
  }

void sub_10003BF30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v20;
  a20 = v21;
  unint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_100006BEC(&qword_100087368);
  sub_100019690();
  __chkstk_darwin(v26);
  id v28 = (char *)&v156 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v194 = sub_10000C424();
  uint64_t v162 = *(void *)(v194 - 8);
  __chkstk_darwin(v194);
  uint64_t v167 = (char *)&v156 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10003F208();
  __chkstk_darwin(v30);
  sub_10003F220();
  uint64_t v161 = v31;
  sub_10003F208();
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v156 - v33;
  sub_100006BEC(&qword_100088BD0);
  sub_100019690();
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v156 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v38);
  sub_10003F220();
  uint64_t v193 = v39;
  sub_10003F208();
  __chkstk_darwin(v40);
  sub_10003F220();
  uint64_t v192 = v41;
  sub_10003F208();
  __chkstk_darwin(v42);
  sub_10003F220();
  uint64_t v191 = v43;
  sub_10003F208();
  __chkstk_darwin(v44);
  sub_10003F220();
  uint64_t v190 = v45;
  sub_10003F208();
  __chkstk_darwin(v46);
  sub_10003F220();
  uint64_t v189 = v47;
  sub_10003F208();
  __chkstk_darwin(v48);
  sub_10003F220();
  uint64_t v188 = v49;
  sub_10003F208();
  __chkstk_darwin(v50);
  sub_10003F220();
  uint64_t v187 = v51;
  sub_10003F208();
  __chkstk_darwin(v52);
  uint64_t v186 = (uint64_t)&v156 - v53;
  uint64_t v54 = (int *)type metadata accessor for ApiRequestMetrics(0LL);
  sub_100019690();
  __chkstk_darwin(v55);
  sub_100019488();
  uint64_t v58 = v57 - v56;
  type metadata accessor for Date(0LL);
  sub_10003F1C4(v25, 1LL);
  uint64_t v182 = v25 + v54[5];
  sub_10003F1C4(v182, 1LL);
  uint64_t v181 = v25 + v54[8];
  sub_10003F1C4(v181, 1LL);
  uint64_t v180 = v25 + v54[9];
  sub_10003F1C4(v180, 1LL);
  uint64_t v179 = v25 + v54[10];
  sub_10003F1C4(v179, 1LL);
  sub_10003F2CC(v54[12]);
  uint64_t v177 = v59;
  uint64_t v178 = v25 + v54[13];
  sub_10003F1C4(v178, 1LL);
  uint64_t v60 = v25 + v54[14];
  uint64_t v61 = type metadata accessor for URL(0LL);
  uint64_t v176 = v60;
  sub_10000AB60(v60, 1LL, 1LL, v61);
  uint64_t v175 = v25 + v54[15];
  sub_10003F1C4(v175, 1LL);
  uint64_t v174 = v25 + v54[16];
  sub_10003F1C4(v174, 1LL);
  uint64_t v173 = v25 + v54[17];
  sub_10003F1C4(v173, 1LL);
  uint64_t v62 = v25 + v54[18];
  *(void *)uint64_t v62 = 0LL;
  *(_BYTE *)(v62 + sub_100006E64(v0 + 8) = 1;
  sub_10003F2CC(v54[19]);
  uint64_t v168 = v63;
  sub_10003F2CC(v54[20]);
  uint64_t v169 = v64;
  sub_10003F2CC(v54[21]);
  uint64_t v170 = v65;
  sub_10003F2CC(v54[22]);
  uint64_t v171 = v66;
  uint64_t v67 = (void *)(v25 + v54[23]);
  *uint64_t v67 = 0LL;
  v67[1] = 0LL;
  id v69 = sub_10003F1D0(v68, "response");
  unint64_t v172 = v67;
  if (v69)
  {
    double v70 = v69;
    uint64_t v71 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse);
    id v69 = (id)swift_dynamicCastObjCClass(v70, v71);
    id v185 = v69;
    if (v69) {
      goto LABEL_5;
    }
  }

  id v185 = 0LL;
LABEL_5:
  uint64_t v72 = v191;
  id v73 = sub_10003F1D0((uint64_t)v69, "connectEndDate");
  uint64_t v184 = v37;
  if (v73)
  {
    __n128 v74 = v73;
    uint64_t v75 = v186;
    sub_10003F28C();

    uint64_t v76 = v75;
    uint64_t v77 = 0LL;
  }

  else
  {
    uint64_t v77 = 1LL;
    uint64_t v76 = v186;
  }

  uint64_t v78 = 1LL;
  uint64_t v79 = sub_10003F1C4(v76, v77);
  id v80 = sub_10003F1D0(v79, "connectStartDate");
  if (v80)
  {
    uint64_t v81 = v80;
    uint64_t v82 = v187;
    sub_10003F28C();

    uint64_t v83 = v82;
    uint64_t v78 = 0LL;
  }

  else
  {
    uint64_t v83 = v187;
  }

  uint64_t v84 = 1LL;
  uint64_t v85 = sub_10003F1C4(v83, v78);
  id v158 = sub_10003F1D0(v85, "countOfRequestBodyBytesSent");
  id v166 = sub_10003F1D0((uint64_t)v158, "countOfResponseBodyBytesReceived");
  id v86 = sub_10003F1D0((uint64_t)v166, "domainLookupEndDate");
  if (v86)
  {
    int v87 = v86;
    uint64_t v88 = v188;
    sub_10003F2A4();

    uint64_t v89 = v88;
    uint64_t v84 = 0LL;
  }

  else
  {
    uint64_t v89 = v188;
  }

  uint64_t v90 = 1LL;
  uint64_t v91 = sub_10003F1C4(v89, v84);
  id v92 = sub_10003F1D0(v91, "domainLookupStartDate");
  if (v92)
  {
    id v93 = v92;
    uint64_t v94 = v189;
    sub_10003F28C();

    uint64_t v95 = v94;
    uint64_t v90 = 0LL;
  }

  else
  {
    uint64_t v95 = v189;
  }

  uint64_t v96 = 1LL;
  uint64_t v97 = sub_10003F1C4(v95, v90);
  id v98 = sub_10003F1D0(v97, "fetchStartDate");
  if (v98)
  {
    uint64_t v99 = v98;
    uint64_t v100 = v190;
    sub_10003F2A4();

    uint64_t v101 = v100;
    uint64_t v96 = 0LL;
  }

  else
  {
    uint64_t v101 = v190;
  }

  uint64_t v102 = 1LL;
  sub_10003F1C4(v101, v96);
  unsigned int v165 = [v23 isReusedConnection];
  uint64_t v164 = sub_100018E18(v23, (SEL *)&selRef_networkProtocolName);
  uint64_t v163 = v103;
  id v104 = sub_10003F1D0(v164, "requestStartDate");
  if (v104)
  {
    uint64_t v105 = v104;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v102 = 0LL;
  }

  uint64_t v106 = 1LL;
  uint64_t v107 = sub_10003F1C4(v72, v102);
  id v108 = sub_10003F1D0(v107, "request");
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v108);

  int v183 = v28;
  URLRequest.url.getter(v109);
  uint64_t v110 = *(uint64_t (**)(char *, uint64_t))(v162 + 8);
  uint64_t v111 = v110(v34, v194);
  id v112 = sub_10003F1D0(v111, "responseEndDate");
  if (v112)
  {
    unint64_t v113 = v112;
    uint64_t v114 = v192;
    sub_10003F2A4();

    uint64_t v115 = v114;
    uint64_t v106 = 0LL;
  }

  else
  {
    uint64_t v115 = v192;
  }

  uint64_t v116 = 1LL;
  uint64_t v117 = sub_10003F1C4(v115, v106);
  id v118 = sub_10003F1D0(v117, "responseStartDate");
  if (v118)
  {
    uint64_t v119 = v118;
    uint64_t v120 = v193;
    sub_10003F2A4();

    uint64_t v116 = 0LL;
  }

  else
  {
    uint64_t v120 = v193;
  }

  uint64_t v121 = 1LL;
  uint64_t v122 = sub_10003F1C4(v120, v116);
  id v123 = sub_10003F1D0(v122, "secureConnectionStartDate");
  if (v123)
  {
    uint64_t v124 = v123;
    uint64_t v125 = (uint64_t)v184;
    sub_10003F28C();

    uint64_t v121 = 0LL;
  }

  else
  {
    uint64_t v125 = (uint64_t)v184;
  }

  uint64_t v126 = v185;
  id v127 = (id)sub_10003F1C4(v125, v121);
  if (v126)
  {
    id v127 = [v126 statusCode];
    id v157 = v127;
  }

  else
  {
    id v157 = 0LL;
  }

  uint64_t v128 = v161;
  id v129 = sub_10003F1D0((uint64_t)v127, "request");
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v129);

  uint64_t v162 = URLRequest.httpMethod.getter();
  uint64_t v161 = v130;
  uint64_t v131 = v128;
  uint64_t v132 = v194;
  v110(v131, v194);
  uint64_t v160 = sub_100018E18(v23, (SEL *)&selRef_remoteAddress);
  uint64_t v159 = v133;
  id v134 = sub_10003F1D0(v160, "request");
  uint64_t v135 = v167;
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v134);

  uint64_t v136 = URLRequest.allHTTPHeaderFields.getter();
  v110(v135, v132);
  if (!v136)
  {
    uint64_t v194 = 0LL;
    uint64_t v167 = 0LL;
    if (v126) {
      goto LABEL_36;
    }
LABEL_39:

    uint64_t v156 = 0LL;
    uint64_t v144 = 0LL;
    uint64_t v141 = 0LL;
    uint64_t v143 = 0LL;
    goto LABEL_47;
  }

  uint64_t v194 = sub_10003BDF0(0x6567412D72657355LL, 0xEA0000000000746ELL, v136);
  uint64_t v167 = v137;
  sub_100019278();
  if (!v126) {
    goto LABEL_39;
  }
LABEL_36:
  id v138 = v126;
  NSString v139 = String._bridgeToObjectiveC()();
  id v140 = [v138 valueForHTTPHeaderField:v139];

  if (v140)
  {
    uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
    uint64_t v143 = v142;
  }

  else
  {
    uint64_t v141 = 0LL;
    uint64_t v143 = 0LL;
  }

  id v145 = v138;
  NSString v146 = String._bridgeToObjectiveC()();
  id v147 = sub_10003F270((uint64_t)v146);

  if (v147)
  {
    uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
    uint64_t v144 = v148;
  }

  else
  {
    NSString v149 = String._bridgeToObjectiveC()();
    id v150 = sub_10003F270((uint64_t)v149);

    if (v150)
    {
      uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v150);
      uint64_t v144 = v151;
    }

    else
    {

      uint64_t v156 = 0LL;
      uint64_t v144 = 0LL;
    }
  }

  uint64_t v125 = (uint64_t)v184;
  uint64_t v126 = v185;
LABEL_47:
  id v152 = v158;
  sub_10003F1E4(v186, v58);
  sub_10003F1E4(v187, v58 + v54[5]);
  *(void *)(v58 + v54[6]) = v152;
  *(void *)(v58 + v54[7]) = v166;
  sub_10003F1E4(v188, v58 + v54[8]);
  sub_10003F1E4(v189, v58 + v54[9]);
  sub_10003F1E4(v190, v58 + v54[10]);
  *(_BYTE *)(v58 + v54[11]) = v165;
  sub_10003F2F0((void *)(v58 + v54[12]));
  sub_10003F1E4(v191, v58 + v54[13]);
  sub_100035ED8((uint64_t)v183, v58 + v54[14], &qword_100087368);
  sub_10003F1E4(v192, v58 + v54[15]);
  sub_10003F1E4(v193, v58 + v54[16]);
  sub_10003F1E4(v125, v58 + v54[17]);
  uint64_t v153 = v58 + v54[18];
  *(void *)uint64_t v153 = v157;
  *(_BYTE *)(v153 + sub_100006E64(v0 + 8) = v126 == 0LL;
  sub_10003F2F0((void *)(v58 + v54[19]));
  sub_10003F2F0((void *)(v58 + v54[20]));
  sub_10003F2F0((void *)(v58 + v54[21]));
  uint64_t v154 = (uint64_t *)(v58 + v54[22]);
  uint64_t *v154 = v141;
  v154[1] = v143;
  uint64_t v155 = (uint64_t *)(v58 + v54[23]);
  *uint64_t v155 = v156;
  v155[1] = v144;
  sub_10003F1F8(v25);
  sub_10003F1F8(v182);
  sub_10003F1F8(v181);
  sub_10003F1F8(v180);
  sub_10003F1F8(v179);
  swift_bridgeObjectRelease(*(void *)(v177 + 8));
  sub_10003F1F8(v178);
  sub_10000BBA4(v176, &qword_100087368);
  sub_10003F1F8(v175);
  sub_10003F1F8(v174);
  sub_10003F1F8(v173);
  sub_10003F1EC((uint64_t)&a13);
  sub_10003F1EC((uint64_t)&a14);
  sub_10003F1EC((uint64_t)&a15);
  sub_10003F1EC((uint64_t)&a16);
  sub_10003F1EC((uint64_t)&a17);
  sub_100035B48(v58, v25, type metadata accessor for ApiRequestMetrics);
  sub_10000C248();
}

void sub_10003CA6C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = sub_100006BEC((uint64_t *)&unk_100088B50);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ApiRequestMetrics(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&double v12 = __chkstk_darwin(v11).n128_u64[0];
  __n128 v14 = (char *)&v37 - v13;
  id v15 = objc_msgSend(a3, "transactionMetrics", v12);
  unint64_t v16 = sub_10003EC38();
  uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  if (!((unint64_t)v17 >> 62))
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v18) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease(v17);
    sub_10000AB60((uint64_t)v7, 1LL, 1LL, v8);
    goto LABEL_15;
  }

  if (v17 < 0) {
    uint64_t v36 = v17;
  }
  else {
    uint64_t v36 = v17 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v17);
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v36);
  swift_bridgeObjectRelease(v17);
  if (!v18) {
    goto LABEL_14;
  }
LABEL_3:
  BOOL v19 = __OFSUB__(v18, 1LL);
  unint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    sub_10003EEB4(v20, (v17 & 0xC000000000000001LL) == 0, v17);
    if ((v17 & 0xC000000000000001LL) == 0)
    {
      id v21 = *(id *)(v17 + 8 * v20 + 32);
      goto LABEL_6;
    }
  }

  id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v17);
LABEL_6:
  uint64_t v22 = v21;
  swift_bridgeObjectRelease(v17);
  id v23 = v22;
  sub_10003BF30( (uint64_t)v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  (uint64_t)v37.receiver,  (uint64_t)v37.super_class,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  vars0,  vars8);
  sub_10000AB60((uint64_t)v7, 0LL, 1LL, v8);

  if (sub_10000AB6C((uint64_t)v7, 1LL, v8) == 1)
  {
LABEL_15:
    sub_10000BBA4((uint64_t)v7, (uint64_t *)&unk_100088B50);
    return;
  }

  sub_100035B48((uint64_t)v7, (uint64_t)v14, type metadata accessor for ApiRequestMetrics);
  id v31 = [a2 response];
  if (v31)
  {
    uint64_t v32 = v31;
    sub_100035B1C((uint64_t)v14, (uint64_t)v10, type metadata accessor for ApiRequestMetrics);
    uint64_t v33 = (objc_class *)sub_100006BEC((uint64_t *)&unk_100088BC0);
    uint64_t v34 = objc_allocWithZone(v33);
    sub_100035B1C( (uint64_t)v10,  (uint64_t)v34 + *(void *)((swift_isaMask & *v34) + 0x58LL),  type metadata accessor for ApiRequestMetrics);
    v37.receiver = v34;
    v37.super_class = v33;
    id v35 = objc_msgSendSuper2(&v37, "init");
    sub_100035AF4((uint64_t)v10, type metadata accessor for ApiRequestMetrics);
    sub_10003CD3C(v35);
  }

  sub_100035AF4((uint64_t)v14, type metadata accessor for ApiRequestMetrics);
}

void sub_10003CD3C(void *a1)
{
}

id sub_10003CE20()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AMSTaskDelegate();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_10003CE74()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AMSTaskDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AMSTaskDelegate()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsdP33_A8771DFE83AFD6B69A2F0EF64D464ABD15AMSTaskDelegate);
}

uint64_t sub_10003CEC8()
{
  id v1 = objc_getAssociatedObject(v0, &unk_100088AC0);
  swift_endAccess(v6);
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)(v1);
    swift_unknownObjectRelease(v1);
  }

  else
  {
    memset(v5, 0, sizeof(v5));
  }

  sub_100035ED8((uint64_t)v5, (uint64_t)v6, qword_100087690);
  if (v7)
  {
    uint64_t v2 = sub_100006BEC((uint64_t *)&unk_100088BC0);
    else {
      return 0LL;
    }
  }

  else
  {
    sub_10000BBA4((uint64_t)v6, qword_100087690);
    return 0LL;
  }

void sub_10003CFAC()
{
  id v1 = v0;
  uint64_t v2 = sub_10001939C();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100019488();
  uint64_t v6 = v5 - v4;
  if (v1)
  {
    uint64_t v7 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse);
    uint64_t v8 = swift_dynamicCastObjCClass(v1, v7);
    if (v8)
    {
      uint64_t v9 = (void *)v8;
      uint64_t v10 = qword_1000870F8;
      id v11 = v1;
      if (v10 != -1) {
        swift_once(&qword_1000870F8, sub_10004BF1C);
      }
      uint64_t v12 = sub_10000B928(v2, (uint64_t)qword_10008F348);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v6, v12, v2);
      id v13 = v11;
      __n128 v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        unint64_t v16 = (uint8_t *)sub_100019148(12LL);
        uint64_t v22 = sub_100019148(32LL);
        uint64_t v24 = v22;
        *(_DWORD *)unint64_t v16 = 136315138;
        NSString v17 = String._bridgeToObjectiveC()();
        id v18 = [v9 valueForHTTPHeaderField:v17];

        if (v18)
        {
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
          unint64_t v21 = v20;
        }

        else
        {
          unint64_t v21 = 0xE400000000000000LL;
          uint64_t v19 = 1701736270LL;
        }

        uint64_t v23 = sub_100015AD4(v19, v21, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v16 + 4, v16 + 12);

        swift_bridgeObjectRelease(v21);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "X-Apple-Jingle-Correlation-Key is %s", v16, 0xCu);
        swift_arrayDestroy(v22, 1LL);
        sub_1000190E8(v22);
        sub_1000190E8((uint64_t)v16);
      }

      else
      {
      }

      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
    }
  }

  sub_10000C248();
}

void sub_10003D1F4()
{
  uint64_t v45 = v1;
  uint64_t v3 = v2;
  uint64_t v47 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  sub_100006BEC((uint64_t *)&unk_100088B50);
  sub_100019690();
  __chkstk_darwin(v13);
  os_log_type_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for ApiAgentError(0LL);
  sub_100019690();
  __chkstk_darwin(v17);
  sub_10003F2B4();
  uint64_t v18 = *v10;
  if (qword_1000870F8 != -1) {
    swift_once(&qword_1000870F8, sub_10004BF1C);
  }
  uint64_t v19 = sub_10001939C();
  sub_10000B928(v19, (uint64_t)qword_10008F348);
  swift_errorRetain(v18);
  sub_10003F214();
  swift_errorRetain(v18);
  uint64_t v20 = sub_10003F214();
  unint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  int v44 = static os_log_type_t.error.getter();
  BOOL v22 = os_log_type_enabled(v21, (os_log_type_t)v44);
  uint64_t v46 = v3;
  if (v22)
  {
    uint64_t v41 = v21;
    uint64_t v42 = v6;
    uint64_t v43 = v12;
    uint64_t v23 = sub_100019148(22LL);
    uint64_t v40 = sub_100019148(64LL);
    uint64_t v50 = v40;
    *(_DWORD *)uint64_t v23 = 136315394;
    swift_getErrorValue(v18, &v49, v48);
    uint64_t v24 = Error.localizedDescription.getter(v48[1], v48[2]);
    uint64_t v26 = sub_100015AD4(v24, v25, &v50);
    sub_10003F244(v26, v27, v28, v23 + 12);
    sub_100019278();
    sub_10003F284();
    sub_10003F284();
    *(_WORD *)(v23 + sub_100006E64(v0 + 12) = 2080;
    __asm { BR              X9 }
  }

  sub_10003F284();
  sub_10003F284();
  sub_10003F1D8();
  sub_10003F1D8();

  uint64_t v29 = (uint64_t)&v0[*(int *)(sub_100006BEC(&qword_100088B88) + 48)];
  _BYTE *v0 = 1;
  sub_100035EAC(v6, v29, (uint64_t *)&unk_100088B50);
  swift_storeEnumTagMultiPayload(v0, v16, 1LL);
  uint64_t v30 = v6;
  uint64_t v31 = v45[3];
  uint64_t v32 = v45[4];
  sub_100006C2C(v45, v31);
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 16))(v31, v32);
  sub_100035EAC(v30, (uint64_t)v15, (uint64_t *)&unk_100088B50);
  uint64_t v34 = type metadata accessor for ApiRequestMetrics(0LL);
  if (sub_10000AB6C((uint64_t)v15, 1LL, v34) == 1)
  {
    sub_10000BBA4((uint64_t)v15, (uint64_t *)&unk_100088B50);
    uint64_t v35 = 0LL;
  }

  else
  {
    uint64_t v35 = sub_10005C7E0();
    sub_100035AF4((uint64_t)v15, type metadata accessor for ApiRequestMetrics);
  }

  sub_10003EBFC((unint64_t *)&qword_100088B70, type metadata accessor for ApiAgentError, (uint64_t)&unk_100068788);
  uint64_t v36 = sub_10003F25C();
  sub_100035B1C((uint64_t)v0, v37, type metadata accessor for ApiAgentError);
  sub_10003D770(v46, v33, v35, v36);
  sub_10003F284();
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v35);
  uint64_t *v12 = sub_10003F25C();
  sub_100035B48((uint64_t)v0, v38, type metadata accessor for ApiAgentError);
  sub_10000C248();
}

uint64_t sub_10003D770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v7 = a3;
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v18 = 0LL;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    swift_bridgeObjectRetain(a3);
    goto LABEL_7;
  }

  sub_100006BEC(qword_100087690);
  sub_100021CD0();
  uint64_t v7 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for SportsMetricsKey);
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v15 = a4;
  swift_bridgeObjectRetain(a3);
  swift_errorRetain(a4);
  uint64_t v8 = sub_100006BEC((uint64_t *)&unk_100088B90);
  uint64_t v9 = sub_100006BEC(&qword_100088A68);
  if ((swift_dynamicCast(&v16, &v15, v8, v9, 6LL) & 1) == 0)
  {
    uint64_t v18 = 0LL;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
  }

uint64_t sub_10003D8D8@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v12 = (int *)sub_100006BEC(&qword_100087320);
  uint64_t v13 = a6 + v12[7];
  uint64_t v14 = sub_10000C424();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v13, a3, v14);
  uint64_t v15 = (uint64_t *)(a6 + v12[10]);
  *uint64_t v15 = a1;
  v15[1] = a2;
  *(void *)(a6 + v12[8]) = a4;
  *(_OWORD *)(a6 + v12[9]) = xmmword_100067240;
  id v16 = a4;
  return sub_10000B210(a1, a2);
}

void sub_10003D9A0()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  double v70 = v5;
  id v69 = v6;
  uint64_t v63 = sub_100006BEC((uint64_t *)&unk_100088B60);
  sub_100019690();
  __chkstk_darwin(v7);
  sub_100019488();
  uint64_t v10 = (uint64_t *)(v9 - v8);
  uint64_t v61 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ApiAgentError(0LL);
  sub_100019690();
  __chkstk_darwin(v11);
  sub_100019488();
  uint64_t v62 = (void *)(v13 - v12);
  uint64_t v14 = sub_10000C424();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v66 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v64 = (char *)&v59 - v18;
  uint64_t v65 = v19;
  __chkstk_darwin(v20);
  BOOL v22 = (char *)&v59 - v21;
  uint64_t v23 = sub_100006BEC(&qword_100087E88);
  sub_100019690();
  __chkstk_darwin(v24);
  sub_10003F2B4();
  uint64_t v26 = (uint64_t)v4[4];
  unint64_t v25 = v4[5];
  uint64_t v67 = v4;
  sub_100006C2C(v4 + 1, v26);
  uint64_t v27 = (void (*)(uint64_t, uint64_t, void *))v25[1];
  uint64_t v68 = v2;
  v27(v2, v26, v25);
  if (swift_getEnumCaseMultiPayload(v0, v23) == 1)
  {
    uint64_t v28 = (uint64_t)v62;
    sub_100035B48(v0, (uint64_t)v62, type metadata accessor for ApiAgentError);
    sub_10003EBFC( (unint64_t *)&qword_100088B70,  type metadata accessor for ApiAgentError,  (uint64_t)&unk_100068788);
    uint64_t v30 = swift_allocError(v61, v29, 0LL, 0LL);
    sub_100035B1C(v28, v31, type metadata accessor for ApiAgentError);
    *uint64_t v10 = v30;
    swift_storeEnumTagMultiPayload(v10, v63, 1LL);
    v69(v10);
    sub_10000BBA4((uint64_t)v10, (uint64_t *)&unk_100088B60);
    sub_100035AF4(v28, type metadata accessor for ApiAgentError);
  }

  else
  {
    uint64_t v62 = *(void **)(v0 + *(int *)(sub_100006BEC(&qword_100087E90) + 48));
    uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 32);
    v61(v22, v0, v14);
    uint64_t v32 = v14;
    uint64_t v33 = v15;
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v34 = sub_10001939C();
    sub_10000B928(v34, (uint64_t)qword_10008F348);
    uint64_t v35 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v63 = (uint64_t)v22;
    uint64_t v36 = v35(v64, v22, v14);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)sub_100019148(12LL);
      uint64_t v40 = sub_100019148(32LL);
      v75[0] = v40;
      uint64_t v60 = v33;
      *(_DWORD *)uint64_t v39 = 136315138;
      sub_10003EBFC( &qword_100088B80,  (uint64_t (*)(uint64_t))&type metadata accessor for URLRequest,  (uint64_t)&protocol conformance descriptor for URLRequest);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v32, v41);
      uint64_t v71 = sub_100015AD4(v42, v43, v75);
      uint64_t v33 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v39 + 4, v39 + 12);
      sub_100019278();
      sub_10003F22C();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Request: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1LL);
      sub_1000190E8(v40);
      sub_1000190E8((uint64_t)v39);
    }

    else
    {
      sub_10003F22C();
    }

    int v44 = v70;
    uint64_t v45 = (uint64_t)v67;
    uint64_t v46 = v62;
    id v47 = [*v67 dataTaskPromiseWithRequestPromise:v62];
    sub_10000AAA8(v45, (uint64_t)v75);
    uint64_t v48 = v66;
    uint64_t v49 = v63;
    v35(v66, (char *)v63, v32);
    sub_10000B2DC(v68, (uint64_t)v74);
    uint64_t v50 = *(unsigned __int8 *)(v33 + 80);
    uint64_t v51 = v32;
    uint64_t v52 = (v50 + 112) & ~v50;
    unint64_t v53 = (v65 + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = (v53 + 47) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v55 = swift_allocObject(&unk_1000803C0, v54 + 16, v50 | 7);
    memcpy((void *)(v55 + 16), v75, 0x60uLL);
    v61((char *)(v55 + v52), (uint64_t)v48, v51);
    sub_10000B388(v74, v55 + v53);
    uint64_t v56 = (void (**)(uint64_t *))(v55 + v54);
    *uint64_t v56 = v69;
    v56[1] = v44;
    v72[3] = sub_10003EB74;
    uint64_t v73 = v55;
    uint64_t v71 = (uint64_t)_NSConcreteStackBlock;
    v72[0] = 1107296256LL;
    v72[1] = sub_100022F60;
    v72[2] = &unk_1000803D8;
    uint64_t v57 = _Block_copy(&v71);
    uint64_t v58 = v73;
    swift_retain(v44);
    swift_release(v58);
    [v47 addFinishBlock:v57];
    _Block_release(v57);

    ((void (*)(uint64_t, uint64_t))v64)(v49, v51);
  }

  sub_10000C248();
}

void sub_10003DF48( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t *), uint64_t a7)
{
  uint64_t v119 = a7;
  uint64_t v120 = a6;
  uint64_t v117 = a4;
  uint64_t v114 = a3;
  uint64_t v112 = type metadata accessor for ApiAgentError(0LL);
  __chkstk_darwin(v112);
  unint64_t v113 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v118 = sub_100006BEC((uint64_t *)&unk_100088B60);
  __chkstk_darwin(v118);
  uint64_t v12 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v121 = (void *)type metadata accessor for ApiRequestMetrics(0LL);
  __chkstk_darwin(v121);
  uint64_t v14 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100006BEC((uint64_t *)&unk_100088B50);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v111 - v19;
  *(void *)&double v22 = __chkstk_darwin(v21).n128_u64[0];
  uint64_t v24 = (char *)&v111 - v23;
  id v25 = objc_msgSend(a1, "response", v22);
  uint64_t v115 = a5;
  id v116 = v25;
  if (v25)
  {
    id v26 = v25;
    uint64_t v27 = (void *)sub_10003CEC8();

    if (v27)
    {
      sub_100035B1C( (uint64_t)v27 + *(void *)((swift_isaMask & *v27) + 0x58LL),  (uint64_t)v14,  type metadata accessor for ApiRequestMetrics);

      sub_100035B48((uint64_t)v14, (uint64_t)v24, type metadata accessor for ApiRequestMetrics);
      uint64_t v28 = 0LL;
      goto LABEL_13;
    }
  }

  if (a1)
  {
    id v29 = [a1 taskMetrics];
    if (v29)
    {
      uint64_t v30 = v29;
      id v31 = [v29 transactionMetrics];

      unint64_t v32 = sub_10003EC38();
      uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v32);

      if ((unint64_t)v33 >> 62)
      {
        if (v33 < 0) {
          uint64_t v110 = v33;
        }
        else {
          uint64_t v110 = v33 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v33);
        uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v110);
        swift_bridgeObjectRelease(v33);
        if (v34)
        {
LABEL_8:
          BOOL v35 = __OFSUB__(v34, 1LL);
          unint64_t v36 = v34 - 1;
          if (v35)
          {
            __break(1u);
          }

          else
          {
            sub_10003EEB4(v36, (v33 & 0xC000000000000001LL) == 0, v33);
            if ((v33 & 0xC000000000000001LL) == 0)
            {
              id v37 = *(id *)(v33 + 8 * v36 + 32);
LABEL_11:
              os_log_type_t v38 = v37;
              swift_bridgeObjectRelease(v33);
              id v39 = v38;
              sub_10003BF30( (uint64_t)v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  (uint64_t)v111,  v112,  (uint64_t)v113,  v114,  (uint64_t)v115,  (uint64_t)v116,  v117,  v118,  v119,  (uint64_t)v120,  (uint64_t)v121,  v122);
              id v47 = v121;
              sub_10000AB60((uint64_t)v24, 0LL, 1LL, (uint64_t)v121);

LABEL_14:
              id v48 = [a1 data];
              uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v48);
              unint64_t v51 = v50;

              uint64_t v52 = v115[3];
              uint64_t v53 = v115[4];
              sub_100006C2C(v115, v52);
              uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 16))(v52, v53);
              sub_100035EAC((uint64_t)v24, (uint64_t)v20, (uint64_t *)&unk_100088B50);
              if (sub_10000AB6C((uint64_t)v20, 1LL, (uint64_t)v47) == 1)
              {
                sub_10000BBA4((uint64_t)v20, (uint64_t *)&unk_100088B50);
                uint64_t v55 = 0LL;
              }

              else
              {
                uint64_t v55 = sub_10005C7E0();
                sub_100035AF4((uint64_t)v20, type metadata accessor for ApiRequestMetrics);
              }

              uint64_t v121 = v12;
              sub_10000B2DC(v114 + 56, (uint64_t)&v126);
              sub_100006C2C(&v126, v128);
              uint64_t v56 = (uint64_t)v24;
              if (v55)
              {
                uint64_t v57 = v55;
              }

              else
              {
                sub_100006BEC(qword_100087690);
                sub_100021CD0();
                uint64_t v57 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for SportsMetricsKey);
                uint64_t v55 = 0LL;
              }

              uint64_t v125 = 0LL;
              __int128 v123 = 0u;
              __int128 v124 = 0u;
              swift_bridgeObjectRetain(v55);
              uint64_t v67 = v117;
              sub_10005D278();
              uint64_t v69 = v68;
              __int16 v71 = v70;
              swift_bridgeObjectRelease(v57);
              sub_10000BBA4((uint64_t)&v123, (uint64_t *)&unk_100088BA0);
              sub_10005BD28(v69, v71 & 0x101);
              swift_bridgeObjectRelease(v69);
              sub_100006E64(&v126);
              swift_bridgeObjectRelease(v54);
              swift_bridgeObjectRelease(v55);
              uint64_t v72 = (int *)sub_100006BEC(&qword_100088BB0);
              uint64_t v73 = v121;
              __n128 v74 = (char *)v121 + v72[12];
              uint64_t v75 = v72[16];
              uint64_t v76 = (uint64_t)v121 + v72[20];
              *uint64_t v121 = v49;
              v73[1] = v51;
              uint64_t v77 = type metadata accessor for URLRequest(0LL);
              (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16LL))(v74, v67, v77);
              id v78 = v116;
              *(uint64_t *)((char *)v73 + v7sub_100006E64(v0 + 5) = (uint64_t)v116;
              uint64_t v24 = (char *)v56;
              sub_100035EAC(v56, v76, (uint64_t *)&unk_100088B50);
              swift_storeEnumTagMultiPayload(v73, v118, 0LL);
              id v79 = v78;
              sub_10000B210(v49, v51);
              v120(v73);
              sub_10000ABB4(v49, v51);

              sub_10000BBA4((uint64_t)v73, (uint64_t *)&unk_100088B60);
              goto LABEL_37;
            }
          }

          id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v33);
          goto LABEL_11;
        }
      }

      else
      {
        uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v34) {
          goto LABEL_8;
        }
      }

      swift_bridgeObjectRelease(v33);
      id v47 = v121;
      sub_10000AB60((uint64_t)v24, 1LL, 1LL, (uint64_t)v121);
      goto LABEL_14;
    }
  }

  uint64_t v28 = 1LL;
LABEL_13:
  id v47 = v121;
  sub_10000AB60((uint64_t)v24, v28, 1LL, (uint64_t)v121);
  if (a1) {
    goto LABEL_14;
  }
  if (!a2)
  {
    uint64_t v80 = sub_100006BEC(&qword_100088B88);
    uint64_t v81 = v113;
    uint64_t v82 = (uint64_t)&v113[*(int *)(v80 + 48)];
    *unint64_t v113 = 0;
    sub_100035EAC((uint64_t)v24, v82, (uint64_t *)&unk_100088B50);
    swift_storeEnumTagMultiPayload(v81, v112, 1LL);
    uint64_t v83 = v121;
    uint64_t v58 = (uint64_t *)v12;
LABEL_30:
    sub_100006BEC(qword_100087690);
    sub_100021CD0();
    uint64_t v90 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for SportsMetricsKey);
    goto LABEL_31;
  }

  swift_errorRetain(a2);
  uint64_t v58 = (uint64_t *)v12;
  if (qword_1000870F8 != -1) {
    swift_once(&qword_1000870F8, sub_10004BF1C);
  }
  uint64_t v59 = type metadata accessor for Logger(0LL);
  sub_10000B928(v59, (uint64_t)qword_10008F348);
  swift_errorRetain(a2);
  uint64_t v60 = swift_errorRetain(a2);
  uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
  os_log_type_t v62 = static os_log_type_t.error.getter();
  uint64_t v111 = v61;
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v64 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v63 = 138412290;
    swift_errorRetain(a2);
    uint64_t v65 = _swift_stdlib_bridgeErrorToNSError(a2);
    uint64_t v126 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v63 + 4, v63 + 12);
    *uint64_t v64 = v65;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    uint64_t v66 = v111;
    _os_log_impl((void *)&_mh_execute_header, v111, v62, "ApiAgent Error: %@", v63, 0xCu);
    sub_100006BEC(&qword_100088A48);
    swift_arrayDestroy(v64, 1LL);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_slowDealloc(v63, -1LL, -1LL);

    swift_errorRelease(a2);
  }

  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  uint64_t v83 = v121;
  uint64_t v84 = sub_100006BEC(&qword_100088B88);
  uint64_t v85 = v113;
  uint64_t v86 = (uint64_t)&v113[*(int *)(v84 + 48)];
  *unint64_t v113 = 0;
  sub_100035EAC((uint64_t)v24, v86, (uint64_t *)&unk_100088B50);
  swift_storeEnumTagMultiPayload(v85, v112, 1LL);
  uint64_t v126 = a2;
  swift_errorRetain(a2);
  uint64_t v87 = sub_100006BEC((uint64_t *)&unk_100088B90);
  type metadata accessor for AMSError(0LL);
  if ((swift_dynamicCast(&v123, &v126, v87, v88, 6LL) & 1) == 0) {
    goto LABEL_30;
  }
  uint64_t v89 = (void *)v123;
  uint64_t v90 = sub_10005D10C();

LABEL_31:
  uint64_t v91 = v115[3];
  uint64_t v92 = v115[4];
  sub_100006C2C(v115, v91);
  uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 16))(v91, v92);
  sub_100035EAC((uint64_t)v24, (uint64_t)v17, (uint64_t *)&unk_100088B50);
  if (sub_10000AB6C((uint64_t)v17, 1LL, (uint64_t)v83) == 1)
  {
    sub_10000BBA4((uint64_t)v17, (uint64_t *)&unk_100088B50);
    sub_100006BEC(qword_100087690);
    sub_100021CD0();
    uint64_t v94 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for SportsMetricsKey);
  }

  else
  {
    uint64_t v94 = sub_10005C7E0();
    sub_100035AF4((uint64_t)v17, type metadata accessor for ApiRequestMetrics);
  }

  uint64_t v95 = v114;
  uint64_t v96 = sub_10003EA34(v94, v90);
  sub_10003EBFC((unint64_t *)&qword_100088B70, type metadata accessor for ApiAgentError, (uint64_t)&unk_100068788);
  uint64_t v98 = v97;
  uint64_t v99 = swift_allocError(v112, v97, 0LL, 0LL);
  sub_100035B1C((uint64_t)v113, v100, type metadata accessor for ApiAgentError);
  sub_10000B2DC(v95 + 56, (uint64_t)&v126);
  sub_100006C2C(&v126, v128);
  uint64_t v122 = v99;
  swift_errorRetain(v99);
  uint64_t v101 = sub_100006BEC((uint64_t *)&unk_100088B90);
  uint64_t v102 = sub_100006BEC(&qword_100088A68);
  if ((swift_dynamicCast(&v123, &v122, v101, v102, 6LL) & 1) == 0)
  {
    uint64_t v125 = 0LL;
    __int128 v123 = 0u;
    __int128 v124 = 0u;
  }

  sub_10005D278();
  uint64_t v104 = v103;
  __int16 v106 = v105;
  sub_10000BBA4((uint64_t)&v123, (uint64_t *)&unk_100088BA0);
  sub_10005BD28(v104, v106 & 0x101);
  swift_bridgeObjectRelease(v104);
  sub_100006E64(&v126);
  swift_errorRelease(v99);
  swift_bridgeObjectRelease(v93);
  swift_bridgeObjectRelease(v96);
  uint64_t v107 = swift_allocError(v112, v98, 0LL, 0LL);
  id v108 = v113;
  sub_100035B1C((uint64_t)v113, v109, type metadata accessor for ApiAgentError);
  *uint64_t v58 = v107;
  swift_storeEnumTagMultiPayload(v58, v118, 1LL);
  v120(v58);

  sub_10000BBA4((uint64_t)v58, (uint64_t *)&unk_100088B60);
  sub_100035AF4((uint64_t)v108, type metadata accessor for ApiAgentError);
LABEL_37:
  sub_10000BBA4((uint64_t)v24, (uint64_t *)&unk_100088B50);
}

uint64_t sub_10003EA34(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v8 = a2;
  sub_10003EC74(a1, (uint64_t)sub_1000602F4, 0LL, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v2) {
    swift_bridgeObjectRelease(v6);
  }
  return v6;
}

uint64_t sub_10003EAB0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = v2;
  return swift_errorRetain(v2);
}

uint64_t sub_10003EABC()
{
  uint64_t v1 = sub_10000C424();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 112) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8LL;

  sub_100006E64((void *)(v0 + 24));
  swift_unknownObjectRelease(*(void *)(v0 + 64));
  sub_100006E64((void *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100006E64((void *)(v0 + v6));
  swift_release(*(void *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

void sub_10003EB74(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_10000C424() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 112LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10003DF48( a1,  a2,  v2 + 16,  v2 + v6,  (void *)(v2 + v7),  *(void (**)(uint64_t *))(v2 + ((v7 + 47) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v2 + ((v7 + 47) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_10003EBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003EBF4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10003EBFC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_10000C510();
}

unint64_t sub_10003EC38()
{
  unint64_t result = qword_100088BB8;
  if (!qword_100088BB8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSURLSessionTaskTransactionMetrics);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100088BB8);
  }

  return result;
}

uint64_t sub_10003EC74(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v25 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v24 = a3;
  swift_retain(a3);
  sub_1000613D4((uint64_t)v29);
  if (v31 == 1)
  {
LABEL_14:
    swift_release(v24);
    swift_bridgeObjectRelease(v25);
    sub_100018C5C(v32[0]);
    return swift_release(v32[6]);
  }

  while (1)
  {
    uint64_t v9 = v29[0];
    sub_100035ED8((uint64_t)&v30, (uint64_t)v28, qword_100087690);
    uint64_t v10 = *a5;
    unint64_t v12 = sub_100016048(v9);
    uint64_t v13 = *(void *)(v10 + 16);
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14)) {
      break;
    }
    char v16 = v11;
    if (*(void *)(v10 + 24) >= v15)
    {
      if ((a4 & 1) != 0)
      {
        if ((v11 & 1) != 0) {
          goto LABEL_9;
        }
      }

      else
      {
        sub_100006BEC(&qword_100088BD8);
        _NativeDictionary.copy()();
        if ((v16 & 1) != 0) {
          goto LABEL_9;
        }
      }
    }

    else
    {
      sub_10006083C(v15, a4 & 1);
      unint64_t v17 = sub_100016048(v9);
      if ((v16 & 1) != (v18 & 1)) {
        goto LABEL_17;
      }
      unint64_t v12 = v17;
      if ((v16 & 1) != 0)
      {
LABEL_9:
        sub_100035EAC(*(void *)(*a5 + 56) + 32 * v12, (uint64_t)v26, qword_100087690);
        sub_100035EAC((uint64_t)v26, (uint64_t)v27, qword_100087690);
        sub_10000BBA4((uint64_t)v26, qword_100087690);
        sub_10000BBA4((uint64_t)v28, qword_100087690);
        sub_10003EF0C((uint64_t)v27, *(void *)(*a5 + 56) + 32 * v12);
        goto LABEL_13;
      }
    }

    uint64_t v19 = (void *)*a5;
    *(void *)(*a5 + 8 * (v12 >> 6) + 64) |= 1LL << v12;
    *(_BYTE *)(v19[6] + vsub_100006E64(v0 + 12) = v9;
    sub_100035ED8((uint64_t)v28, v19[7] + 32 * v12, qword_100087690);
    uint64_t v20 = v19[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_16;
    }
    __int128 v19[2] = v22;
LABEL_13:
    sub_1000613D4((uint64_t)v29);
    a4 = 1;
    if (v31 == 1) {
      goto LABEL_14;
    }
  }

  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SportsMetricsKey);
  __break(1u);
  return result;
}

unint64_t sub_10003EEB4(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10003EED8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10003EF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006BEC(qword_100087690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t destroy for ApiAgent(uint64_t a1)
{
  return sub_100006E64((void *)(a1 + 56));
}

uint64_t initializeWithCopy for ApiAgent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;
  __int128 v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 3sub_100006E64(v0 + 2) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  id v10 = v4;
  v9(v5, v6, v8);
  uint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_100006E64(v0 + 8) = v11;
  uint64_t v12 = a2 + 56;
  __int128 v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v13;
  uint64_t v14 = v13;
  uint64_t v15 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
  swift_unknownObjectRetain(v11);
  v15(a1 + 56, v12, v14);
  return a1;
}

uint64_t assignWithCopy for ApiAgent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  sub_10000B504((void *)(a1 + 8), (void *)(a2 + 8));
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 4sub_100006E64(v0 + 8) = v7;
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRelease(v8);
  sub_10000B504((void *)(a1 + 56), (void *)(a2 + 56));
  return a1;
}

uint64_t assignWithTake for ApiAgent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  sub_100006E64((void *)(a1 + 8));
  *(_OWORD *)(a1 + sub_100006E64(v0 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 2sub_100006E64(v0 + 4) = *(_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4sub_100006E64(v0 + 8) = v5;
  swift_unknownObjectRelease(v6);
  sub_100006E64((void *)(a1 + 56));
  *(_OWORD *)(a1 + 5sub_100006E64(v0 + 6) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 7sub_100006E64(v0 + 2) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 8sub_100006E64(v0 + 8) = *(void *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApiAgent(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 96))
    {
      LODWORD(vsub_100006E64(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(vsub_100006E64(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApiAgent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8sub_100006E64(v0 + 8) = 0LL;
    *(_OWORD *)(result + 7sub_100006E64(v0 + 2) = 0u;
    *(_OWORD *)(result + 5sub_100006E64(v0 + 6) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_100006E64(v0 + 4) = 0u;
    *(_OWORD *)(result + sub_100006E64(v0 + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 9sub_100006E64(v0 + 6) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 9sub_100006E64(v0 + 6) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ApiAgent()
{
  return &type metadata for ApiAgent;
}

uint64_t sub_10003F1C4(uint64_t a1, uint64_t a2)
{
  return sub_10000AB60(a1, a2, 1LL, v2);
}

id sub_10003F1D0(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_10003F1D8()
{
  return sub_10000ABB4(v0, v1);
}

void sub_10003F1E4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10003F1EC@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(a1 - 256) + 8LL));
}

void sub_10003F1F8(uint64_t a1)
{
}

uint64_t sub_10003F200(uint64_t a1, uint64_t a2)
{
  return sub_100018C20(a1, a2);
}

  ;
}

uint64_t sub_10003F214()
{
  return sub_10000B210(v0, v1);
}

  ;
}

uint64_t sub_10003F22C()
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v3 - 32sub_100006E64(v0 + 8) = v4;
  return v4(v1, v0);
}

uint64_t sub_10003F244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 - 14sub_100006E64(v0 + 4) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 144, v5 - 136, v4, a4);
}

uint64_t sub_10003F25C()
{
  return swift_allocError(v0, v1, 0LL, 0LL);
}

id sub_10003F270(uint64_t a1)
{
  return objc_msgSend(v2, *(SEL *)(v1 + 1328), a1);
}

uint64_t sub_10003F284()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10003F28C()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10003F294(uint64_t a1)
{
  return *(void *)(v1 + 56) + 32 * a1;
}

uint64_t sub_10003F2A4()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

unint64_t sub_10003F2AC(uint64_t a1, uint64_t a2)
{
  return sub_100015FF4(a1, a2);
}

  ;
}

void sub_10003F2CC(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
}

id sub_10003F2D8(uint64_t a1)
{
  return *(id *)(*(void *)(v1 + 56) + 8 * a1);
}

uint64_t sub_10003F2E4(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 32LL, 0LL);
}

void sub_10003F2F0(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 - 256);
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_10003F2FC()
{
  v17[3] = &type metadata for TVAppFeatureFlags;
  v17[4] = sub_10000B940();
  char v1 = isFeatureEnabled(_:)(v17);
  sub_100006E64(v17);
  if ((v1 & 1) != 0)
  {
    unint64_t v0 = 0xD000000000000010LL;
    type metadata accessor for ContainerConstants(0LL);
    uint64_t v2 = static ContainerConstants.defaultSuiteName.getter();
    uint64_t v4 = v3;
    id v5 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
    id v6 = sub_10002787C(v2, v4);
    if (v6)
    {
      uint64_t v7 = v6;
      static ContainerConstants.liveActivitiesTargetAppKey.getter();
      uint64_t v9 = v8;
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
      id v11 = [v7 stringForKey:v10];

      if (v11)
      {
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        uint64_t v14 = v13;

        v18._uint64_t countAndFlagsBits = v12;
        v18._object = v14;
        uint64_t v15 = (char *)&loc_10003F420 + *((int *)qword_10003F488 + sub_10003F49C(v18));
        __asm { BR              X10 }
      }
    }
  }

  return v0;
}

unint64_t sub_10003F49C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007DF50, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

  ;
}

uint64_t sub_10003F4F8@<X0>( uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *a9 = a1;
  sub_10000B388(a2, (uint64_t)(a9 + 1));
  a9[6] = a3;
  a9[7] = a4;
  uint64_t v20 = (int *)sub_100041784();
  BOOL v21 = (char *)a9 + v20[7];
  uint64_t v22 = sub_10000C4E8();
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32LL))(v21, a5, v22);
  *((_BYTE *)a9 + v20[8]) = a6;
  uint64_t v24 = (void *)((char *)a9 + v20[9]);
  uint64_t v25 = v31;
  *uint64_t v24 = v30;
  v24[1] = v25;
  uint64_t v26 = v20[10];
  Date.init()(v23);
  sub_100052B9C();
  uint64_t v28 = v27;
  uint64_t result = sub_10000C498((uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
  *(void *)((char *)a9 + v2sub_100006E64(v0 + 6) = v28;
  return result;
}

uint64_t type metadata accessor for SubscriptionFetchFullApsMessageOperation(uint64_t a1)
{
  uint64_t result = qword_100088C38;
  if (!qword_100088C38) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SubscriptionFetchFullApsMessageOperation);
  }
  return result;
}

uint64_t sub_10003F648(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain(v5);
  }

  else
  {
    uint64_t v8 = a2 + 1;
    __int128 v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 3sub_100006E64(v0 + 2) = v9;
    uint64_t v10 = v9;
    id v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_retain(v5);
    v11(a1 + 8, v8, v10);
    uint64_t v12 = a2[7];
    *(void *)(a1 + 4sub_100006E64(v0 + 8) = a2[6];
    *(void *)(a1 + 5sub_100006E64(v0 + 6) = v12;
    uint64_t v13 = a3[7];
    uint64_t v14 = a1 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = type metadata accessor for URL(0LL);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL);
    swift_bridgeObjectRetain(v12);
    v17(v14, v15, v16);
    uint64_t v18 = a3[9];
    *(_BYTE *)(a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    uint64_t v19 = (void *)(a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    *(void *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    swift_bridgeObjectRetain(v21);
  }

  return a1;
}

uint64_t sub_10003F750(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(a2 + 36) + 8));
}

uint64_t sub_10003F7C0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  uint64_t v7 = a2 + 1;
  __int128 v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 3sub_100006E64(v0 + 2) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_retain(v6);
  v10(a1 + 8, v7, v9);
  uint64_t v11 = a2[7];
  *(void *)(a1 + 4sub_100006E64(v0 + 8) = a2[6];
  *(void *)(a1 + 5sub_100006E64(v0 + 6) = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t)a2 + v12;
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL);
  swift_bridgeObjectRetain(v11);
  v16(v13, v14, v15);
  uint64_t v17 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  *(void *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain(v20);
  return a1;
}

void *sub_10003F8A4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  sub_10000B504(a1 + 1, a2 + 1);
  a1[6] = a2[6];
  uint64_t v8 = a2[7];
  uint64_t v9 = a1[7];
  a1[7] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  return a1;
}

uint64_t sub_10003F990(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + sub_100006E64(v0 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 2sub_100006E64(v0 + 4) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 4sub_100006E64(v0 + 8) = *(_OWORD *)(a2 + 48);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  return a1;
}

uint64_t *sub_10003FA3C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  sub_100006E64(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + sub_100006E64(v0 + 5) = *(_OWORD *)(a2 + 5);
  uint64_t v7 = a1[7];
  a1[7] = a2[7];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = (uint64_t)a1 + v8;
  uint64_t v10 = (uint64_t)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v17 = v13[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  return a1;
}

uint64_t sub_10003FB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003FB1C);
}

uint64_t sub_10003FB1C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_10000C4E8();
    return sub_10000AB6C((uint64_t)a1 + *(int *)(a3 + 28), a2, v8);
  }

uint64_t sub_10003FB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003FB98);
}

void *sub_10003FB98(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_10000C4E8();
    return (void *)sub_10000AB60((uint64_t)v5 + *(int *)(a4 + 28), a2, a2, v7);
  }

  return result;
}

uint64_t sub_10003FC00(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "(";
  v4[2] = &unk_1000682F8;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    v4[4] = &unk_100068310;
    v4[5] = &unk_1000682F8;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10003FCA4()
{
  uint64_t v1 = sub_100041784();
  uint64_t v2 = *(void *)(*(void *)(v1 - 8) + 64LL);
  uint64_t v40 = *(void *)(v1 - 8);
  uint64_t v41 = v2;
  __chkstk_darwin(v1);
  os_log_type_t v38 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10000C4E8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v36 - v8;
  uint64_t v43 = sub_100006BEC(&qword_100088C88);
  uint64_t v45 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  sub_10000E5C4();
  uint64_t v39 = v10;
  uint64_t v44 = sub_100006BEC(&qword_100088C90);
  uint64_t v46 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  sub_10000E5C4();
  uint64_t v42 = v11;
  uint64_t v12 = sub_100006C2C((void *)(v0 + 8), *(void *)(v0 + 32));
  uint64_t v13 = (void *)(v0 + *(int *)(v1 + 36));
  uint64_t v37 = v0;
  URL.appendingPathComponent(_:)(*v13, v13[1]);
  Swift::Int v14 = sub_100040058();
  unint64_t v36 = sub_100006C2C(v12, v12[3]);
  uint64_t v15 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = v4;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v15, v9, v4);
  uint64_t v17 = sub_1000471BC();
  uint64_t v18 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  unint64_t v20 = (v6 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_1000804C8, v20 + 8, v18 | 7);
  uint64_t v22 = v21 + v19;
  uint64_t v23 = v16;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v22, v15, v16);
  *(void *)(v21 + v20) = v17;
  uint64_t v24 = v12[5];
  swift_bridgeObjectRetain(v14);
  uint64_t v25 = sub_100041248((uint64_t)sub_1000411F4, v21, v14, 0LL, v24, (uint64_t)v36);
  swift_bridgeObjectRelease_n(v14, 2LL);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v23);
  uint64_t v47 = v25;
  sub_1000417B8();
  uint64_t v26 = sub_1000417AC((uint64_t)&unk_1000804F0);
  sub_1000417A0(v26);
  uint64_t v27 = sub_100006BEC(&qword_100088C98);
  uint64_t v28 = sub_10000EBD4( &qword_100088CA0,  &qword_100088C98,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v29 = v39;
  Publisher.catch<A>(_:)(sub_100041558, v26, v27, v27, v28, v28);
  swift_release(v26);
  swift_release(v47);
  sub_1000417B8();
  uint64_t v30 = sub_1000417AC((uint64_t)&unk_100080518);
  sub_1000417A0(v30);
  uint64_t v31 = sub_10000EBD4( &qword_100088CA8,  &qword_100088C88,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  uint64_t v32 = v42;
  Publisher.tryMap<A>(_:)(sub_10004162C, v30, v43, &type metadata for Bool, v31);
  swift_release(v30);
  sub_10000C498(v29, *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8));
  uint64_t v33 = sub_10000EBD4( &qword_100088CB0,  &qword_100088C90,  (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
  uint64_t v34 = Publisher.eraseToAnyPublisher()(v44, v33);
  sub_10000C498(v32, *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
  return v34;
}

Swift::Int sub_100040058()
{
  uint64_t v1 = v0;
  uint64_t v24 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v4 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = (void *)*v0;
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t FullApsMessageOperation = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0LL);
  uint64_t v9 = *(int *)(FullApsMessageOperation + 32);
  uint64_t v10 = *((unsigned __int8 *)v0 + v9);
  uint64_t v11 = v5 + 2;
  uint64_t v12 = v5[5];
  uint64_t v13 = v5[6];
  sub_100006C2C(v11, v12);
  Swift::Int v14 = (void *)dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)( v6,  v7,  v10,  v12,  v13);
  uint64_t v15 = sub_100006BEC(&qword_100087E58);
  uint64_t inited = swift_initStackObject(v15, v25);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067DB0;
  *(_BYTE *)(inited + 3sub_100006E64(v0 + 2) = 2;
  *(void *)(inited + 6sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(inited + 40) = v6;
  *(void *)(inited + 4sub_100006E64(v0 + 8) = v7;
  *(_BYTE *)(inited + 7sub_100006E64(v0 + 2) = 7;
  uint64_t v17 = swift_bridgeObjectRetain(v7);
  Date.init()(v17);
  sub_100052B9C();
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v24);
  *(void *)(inited + 10sub_100006E64(v0 + 4) = &type metadata for UInt64;
  *(void *)(inited + 80) = v19;
  *(_BYTE *)(inited + 1sub_100006E64(v0 + 12) = 8;
  uint64_t v20 = *(void *)((char *)v1 + *(int *)(FullApsMessageOperation + 40));
  *(void *)(inited + 14sub_100006E64(v0 + 4) = &type metadata for UInt64;
  *(void *)(inited + 120) = v20;
  LOBYTE(v20) = *((_BYTE *)v1 + v9);
  *(_BYTE *)(inited + 15sub_100006E64(v0 + 2) = 43;
  *(void *)(inited + 18sub_100006E64(v0 + 4) = &type metadata for Bool;
  *(_BYTE *)(inited + 160) = v20;
  *(_BYTE *)(inited + 19sub_100006E64(v0 + 2) = 44;
  *(void *)(inited + 22sub_100006E64(v0 + 4) = &type metadata for EventType.EventName;
  *(_BYTE *)(inited + 200) = 4;
  sub_100006BEC(qword_100087690);
  sub_100021CD0();
  uint64_t v21 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for SportsMetricsKey);
  Swift::Int v22 = sub_10002C624(v21);
  swift_bridgeObjectRelease(v21);

  return v22;
}

uint64_t sub_100040248@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100006BEC(&qword_100088CB8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t FullApsMessageOperation = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0LL);
  __chkstk_darwin(FullApsMessageOperation);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *a1;
  if (qword_1000870F0 != -1) {
    swift_once(&qword_1000870F0, sub_10004BF00);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000B928(v14, (uint64_t)qword_10008F330);
  uint64_t v15 = sub_1000414CC(a2, (uint64_t)v12);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v33 = v13;
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = v7;
    uint64_t v20 = v19;
    uint64_t v37 = v19;
    uint64_t v34 = v9;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v32 = v18 + 4;
    uint64_t v21 = v6;
    Swift::Int v22 = a3;
    uint64_t v23 = *((void *)v12 + 6);
    unint64_t v24 = *((void *)v12 + 7);
    swift_bridgeObjectRetain(v24);
    uint64_t v25 = v23;
    a3 = v22;
    uint64_t v6 = v21;
    uint64_t v13 = v33;
    uint64_t v36 = sub_100015AD4(v25, v24, &v37);
    uint64_t v9 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v32, v18 + 12);
    swift_bridgeObjectRelease(v24);
    sub_100041674((uint64_t)v12);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Failed to parse full APS message for canonical id: %s.",  v18,  0xCu);
    swift_arrayDestroy(v20, 1LL);
    uint64_t v26 = v20;
    uint64_t v7 = v35;
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    sub_100041674((uint64_t)v12);
  }

  uint64_t v37 = v13;
  swift_errorRetain(v13);
  uint64_t v27 = sub_100006BEC(&qword_1000875A0);
  uint64_t v28 = sub_100006BEC((uint64_t *)&unk_100088B90);
  Fail.init(error:)(&v37, v27, v28, &protocol self-conformance witness table for Error);
  uint64_t v29 = sub_10000EBD4(&qword_100088CC0, &qword_100088CB8, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
  uint64_t v30 = Publisher.eraseToAnyPublisher()(v6, v29);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *a3 = v30;
  return result;
}

void sub_10004051C(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100006BEC(&qword_100088BD0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t FullApsMessageOperation = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0LL);
  __chkstk_darwin(FullApsMessageOperation);
  uint64_t v93 = (uint64_t)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v90 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v90 - v17;
  uint64_t v19 = *(void **)(a1 + *(int *)(sub_100006BEC(&qword_1000875A0) + 40));
  uint64_t v20 = *(void *)((char *)v19 + *(void *)(*v19 + 184LL));
  if (!((unint64_t)v20 >> 62))
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*(void *)((char *)v19 + *(void *)(*v19 + 184LL)));
    if (v21) {
      goto LABEL_3;
    }
LABEL_26:
    swift_bridgeObjectRelease(v20);
    if (qword_1000870F0 != -1) {
      swift_once(&qword_1000870F0, sub_10004BF00);
    }
    uint64_t v81 = type metadata accessor for Logger(0LL);
    sub_10000B928(v81, (uint64_t)qword_10008F330);
    uint64_t v82 = sub_1000414CC((uint64_t)a2, (uint64_t)v18);
    uint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
    os_log_type_t v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v86 = swift_slowAlloc(32LL, -1LL);
      uint64_t v96 = (void *)v86;
      *(_DWORD *)uint64_t v85 = 136315138;
      uint64_t v87 = *((void *)v18 + 6);
      unint64_t v88 = *((void *)v18 + 7);
      swift_bridgeObjectRetain(v88);
      uint64_t v98 = sub_100015AD4(v87, v88, (uint64_t *)&v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v85 + 4, v85 + 12);
      swift_bridgeObjectRelease(v88);
      sub_100041674((uint64_t)v18);
      _os_log_impl( (void *)&_mh_execute_header,  v83,  v84,  "Missing event with canonical id %s in full APS message.",  v85,  0xCu);
      swift_arrayDestroy(v86, 1LL);
      swift_slowDealloc(v86, -1LL, -1LL);
      swift_slowDealloc(v85, -1LL, -1LL);
    }

    else
    {
      sub_100041674((uint64_t)v18);
    }

    id v89 = sub_100027DC8(5u, 0xD000000000000014LL, 0x800000010006C0A0LL);
    swift_willThrow(v89);
    return;
  }

  if (v20 < 0) {
    uint64_t v80 = *(void *)((char *)v19 + *(void *)(*v19 + 184LL));
  }
  else {
    uint64_t v80 = v20 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(void *)((char *)v19 + *(void *)(*v19 + 184LL)));
  if (!_CocoaArrayWrapper.endIndex.getter(v80)) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t v91 = a3;
  sub_10003EEB0(0LL, (v20 & 0xC000000000000001LL) == 0, v20);
  uint64_t v92 = v4;
  if ((v20 & 0xC000000000000001LL) != 0) {
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v20);
  }
  else {
    id v22 = *(id *)(v20 + 32);
  }
  uint64_t v94 = v22;
  swift_bridgeObjectRelease(v20);
  uint64_t v23 = (void *)*a2;
  uint64_t v25 = a2[6];
  uint64_t v24 = a2[7];
  uint64_t v26 = *(int *)(FullApsMessageOperation + 32);
  uint64_t v95 = a2;
  uint64_t v27 = *((unsigned __int8 *)a2 + v26);
  uint64_t v28 = v23[5];
  uint64_t v29 = v23[6];
  sub_100006C2C(v23 + 2, v28);
  uint64_t v30 = (void *)dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)( v25,  v24,  v27,  v28,  v29);
  if (v30)
  {
    uint64_t v31 = v30;
    id v32 = v30;
    uint64_t v33 = v94;
    sub_100040DC8(v19, v94, v31);

    uint64_t v34 = (void *)((uint64_t (*)(void))SportingEvent.partialSportingEvent.getter)();
    uint64_t v35 = dispatch thunk of SportingEvent.versionNumber.getter(v34);

    uint64_t v37 = (void *)SportingEventSubscription.sportingEventDetails.getter(v36);
    uint64_t v38 = dispatch thunk of SportingEvent.versionNumber.getter(v37);

    if (v35 >= v38)
    {
      uint64_t v67 = (void *)((uint64_t (*)(void))SportingEvent.partialSportingEvent.getter)();
      uint64_t v68 = type metadata accessor for Date(0LL);
      sub_10000AB60((uint64_t)v10, 1LL, 1LL, v68);
      SportingEventSubscription.update(sportingEventDetails:updatedAt:)(v67, v10);

      sub_1000230C4((uint64_t)v10, &qword_100088BD0);
      uint64_t v69 = *((unsigned __int8 *)v95 + v26);
      uint64_t v70 = *(void *)(*v95 + 40LL);
      uint64_t v71 = *(void *)(*v95 + 48LL);
      sub_100006C2C((void *)(*v95 + 16LL), v70);
      uint64_t v72 = v92;
      dispatch thunk of PersistentStorable.writeEventSubscription(_:isConventionalOrUnified:)(v32, v69, v70, v71);
      if (v72)
      {

        return;
      }
    }

    else
    {
      uint64_t v39 = (uint64_t)v95;
      if (qword_1000870F0 != -1) {
        swift_once(&qword_1000870F0, sub_10004BF00);
      }
      uint64_t v40 = type metadata accessor for Logger(0LL);
      sub_10000B928(v40, (uint64_t)qword_10008F330);
      uint64_t v41 = v93;
      sub_1000414CC(v39, v93);
      id v42 = v32;
      id v43 = v33;
      id v44 = v42;
      id v45 = v43;
      uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = swift_slowAlloc(32LL, -1LL);
        uint64_t v95 = (void *)swift_slowAlloc(32LL, -1LL);
        uint64_t v96 = v95;
        *(_DWORD *)uint64_t v48 = 136315650;
        uint64_t v50 = *(void *)(v41 + 48);
        unint64_t v49 = *(void *)(v41 + 56);
        swift_bridgeObjectRetain(v49);
        uint64_t v98 = sub_100015AD4(v50, v49, (uint64_t *)&v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v48 + 4, v48 + 12);
        swift_bridgeObjectRelease(v49);
        uint64_t v51 = sub_100041674(v41);
        *(_WORD *)(v48 + sub_100006E64(v0 + 12) = 2048;
        uint64_t v52 = (void *)SportingEvent.partialSportingEvent.getter(v51);
        uint64_t v53 = dispatch thunk of SportingEvent.versionNumber.getter(v52);

        uint64_t v98 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v48 + 14, v48 + 22);

        *(_WORD *)(v48 + 2sub_100006E64(v0 + 2) = 2048;
        uint64_t v55 = (void *)SportingEventSubscription.sportingEventDetails.getter(v54);
        uint64_t v56 = dispatch thunk of SportingEvent.versionNumber.getter(v55);

        uint64_t v98 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v48 + 24, v48 + 32);

        _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "Skipped stale subscription when fetching full APS message for canonical id: %s. (%ld < %ld)",  (uint8_t *)v48,  0x20u);
        uint64_t v57 = (uint64_t)v95;
        swift_arrayDestroy(v95, 1LL);
        swift_slowDealloc(v57, -1LL, -1LL);
        swift_slowDealloc(v48, -1LL, -1LL);
      }

      else
      {

        sub_100041674(v41);
      }
    }

    *uint64_t v91 = 1;
  }

  else
  {
    if (qword_1000870F0 != -1) {
      swift_once(&qword_1000870F0, sub_10004BF00);
    }
    uint64_t v58 = type metadata accessor for Logger(0LL);
    sub_10000B928(v58, (uint64_t)qword_10008F330);
    uint64_t v59 = (uint64_t)v95;
    uint64_t v60 = sub_1000414CC((uint64_t)v95, (uint64_t)v15);
    uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v64 = swift_slowAlloc(32LL, -1LL);
      uint64_t v96 = (void *)v64;
      *(_DWORD *)uint64_t v63 = 136315138;
      uint64_t v65 = *((void *)v15 + 6);
      unint64_t v66 = *((void *)v15 + 7);
      swift_bridgeObjectRetain(v66);
      uint64_t v98 = sub_100015AD4(v65, v66, (uint64_t *)&v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease(v66);
      sub_100041674((uint64_t)v15);
      _os_log_impl( (void *)&_mh_execute_header,  v61,  v62,  "Missing subscription when fetching full APS message for canonical id: %s.",  v63,  0xCu);
      swift_arrayDestroy(v64, 1LL);
      uint64_t v59 = (uint64_t)v95;
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v63, -1LL, -1LL);
    }

    else
    {
      sub_100041674((uint64_t)v15);
    }

    uint64_t v73 = v94;
    uint64_t v96 = 0LL;
    uint64_t v97 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(72LL);
    v74._uint64_t countAndFlagsBits = 0xD000000000000046LL;
    v74._object = (void *)0x800000010006C050LL;
    String.append(_:)(v74);
    uint64_t v76 = *(void *)(v59 + 48);
    uint64_t v75 = *(void **)(v59 + 56);
    swift_bridgeObjectRetain(v75);
    v77._uint64_t countAndFlagsBits = v76;
    v77._object = v75;
    String.append(_:)(v77);
    swift_bridgeObjectRelease(v75);
    uint64_t v78 = v97;
    sub_100027DC8(3u, (uint64_t)v96, v97);
    uint64_t v79 = swift_bridgeObjectRelease(v78);
    swift_willThrow(v79);
  }

void sub_100040DC8(void *a1, void *a2, void *a3)
{
  if (qword_1000870F0 != -1) {
    swift_once(&qword_1000870F0, sub_10004BF00);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000B928(v6, (uint64_t)qword_10008F330);
  swift_retain_n(a1, 8LL);
  id v7 = a2;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(62LL, -1LL);
    uint64_t v27 = swift_slowAlloc(96LL, -1LL);
    uint64_t v29 = v27;
    *(_DWORD *)uint64_t v10 = 136316418;
    uint64_t v11 = SportingEvent.canonicalId.getter();
    unint64_t v13 = v12;
    uint64_t v28 = sub_100015AD4(v11, v12, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v10 + 4, v10 + 12);

    uint64_t v14 = swift_bridgeObjectRelease(v13);
    *(_WORD *)(v10 + sub_100006E64(v0 + 12) = 2080;
    uint64_t v15 = SportingEvent.version.getter(v14);
    unint64_t v17 = v16;
    uint64_t v28 = sub_100015AD4(v15, v16, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v10 + 14, v10 + 22);

    uint64_t v18 = swift_bridgeObjectRelease(v17);
    *(_WORD *)(v10 + 2sub_100006E64(v0 + 2) = 2048;
    uint64_t v28 = Date.timeIntervalSince1970.getter(v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v10 + 24, v10 + 32);
    swift_release_n(a1, 2LL);
    *(_WORD *)(v10 + 3sub_100006E64(v0 + 2) = 2048;
    uint64_t v19 = a1[2];
    swift_release(a1);
    uint64_t v28 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v10 + 34, v10 + 42);
    swift_release(a1);
    *(_WORD *)(v10 + 4sub_100006E64(v0 + 2) = 2080;
    uint64_t v20 = a1[5];
    unint64_t v21 = a1[6];
    swift_bridgeObjectRetain(v21);
    uint64_t v28 = sub_100015AD4(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v10 + 44, v10 + 52);
    swift_release_n(a1, 2LL);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v10 + 5sub_100006E64(v0 + 2) = 2048;
    double v22 = *(double *)((char *)a1 + qword_10008F3E8);
    if (*((_BYTE *)a1 + qword_10008F3E8 + 8)) {
      double v22 = -1.0;
    }
    uint64_t v28 = *(void *)&v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v10 + 54, v10 + 62);
    swift_release_n(a1, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "=== Fetched full APS message for %s, version %s, message timestamp %f, type %ld, tempoSessionId %s, liveActivityTtl %f ===",  (uint8_t *)v10,  0x3Eu);
    swift_arrayDestroy(v27, 3LL);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1, 8LL);
  }

  type metadata accessor for ApsMessageProcessingOperation(0LL);
  sub_10005342C(v7, a3);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "=== End full APS message ===", v26, 2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }
}

uint64_t sub_100041190()
{
  uint64_t v3 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v4);
  swift_bridgeObjectRelease(*(void *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v3);
}

id sub_1000411F4()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000226E4(v0 + v2, *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100041248(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100006BEC(&qword_100088CC8);
  uint64_t v31 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v35[3] = &type metadata for AMSApiRequest;
  v35[4] = &off_10007F7E0;
  uint64_t v15 = (void *)swift_allocObject(&unk_100080540, 48LL, 7LL);
  v35[0] = v15;
  v15[2] = a1;
  v15[3] = a2;
  void v15[4] = a3;
  v15[5] = a4;
  id v16 = a4;
  swift_retain(a2);
  swift_bridgeObjectRetain(a3);
  sub_10000A418();
  uint64_t v34 = v17;
  sub_10000AAA8(a6, (uint64_t)__src);
  sub_10000CC1C((uint64_t)v35, (uint64_t)v32);
  uint64_t v18 = swift_allocObject(&unk_100080568, 160LL, 7LL);
  *(void *)(v18 + 1sub_100006E64(v0 + 6) = a5;
  memcpy((void *)(v18 + 24), __src, 0x60uLL);
  sub_10000B388(v32, v18 + 120);
  uint64_t v19 = swift_allocObject(&unk_100080590, 32LL, 7LL);
  *(void *)(v19 + 1sub_100006E64(v0 + 6) = sub_100041730;
  *(void *)(v19 + 2sub_100006E64(v0 + 4) = v18;
  uint64_t v20 = swift_retain(a5);
  uint64_t v21 = static Subscribers.Demand.unlimited.getter(v20);
  uint64_t v22 = sub_100006BEC(&qword_100087330);
  uint64_t v23 = sub_100006BEC(&qword_1000875A0);
  uint64_t v24 = sub_100006BEC(&qword_100088CD0);
  uint64_t v25 = sub_10000EBD4( &qword_100087338,  &qword_100087330,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v26 = sub_10000EBD4( &qword_100088CD8,  &qword_100088CD0,  (uint64_t)&protocol conformance descriptor for Publishers.MapError<A, B>);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v21, sub_100041764, v19, v22, v23, v24, v25, v26);
  swift_release(v19);
  swift_release(v34);
  uint64_t v27 = sub_10000EBD4( &qword_100088CE0,  &qword_100088CC8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v28 = Publisher.eraseToAnyPublisher()(v12, v27);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v12);
  sub_100006E64(v35);
  return v28;
}

uint64_t sub_1000414CC(uint64_t a1, uint64_t a2)
{
  uint64_t FullApsMessageOperation = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(FullApsMessageOperation - 8) + 16LL))( a2,  a1,  FullApsMessageOperation);
  return a2;
}

uint64_t sub_100041514(uint64_t a1, uint64_t a2)
{
  uint64_t FullApsMessageOperation = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(FullApsMessageOperation - 8) + 32LL))( a2,  a1,  FullApsMessageOperation);
  return a2;
}

uint64_t sub_100041558@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100040248(a1, v4, a2);
}

uint64_t sub_100041594()
{
  uint64_t v1 = sub_100041784();
  sub_10004178C();
  uint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v6 = v5 | 7;
  uint64_t v7 = v0 + v3;
  swift_release(*(void *)(v0 + v3));
  sub_100006E64((void *)(v7 + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + 56));
  uint64_t v8 = v7 + *(int *)(v1 + 28);
  uint64_t v9 = sub_10000C4E8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease(*(void *)(v7 + *(int *)(v1 + 36) + 8));
  return swift_deallocObject(v0, v4, v6);
}

void sub_10004162C(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
}

uint64_t sub_100041674(uint64_t a1)
{
  uint64_t FullApsMessageOperation = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(FullApsMessageOperation - 8) + 8LL))( a1,  FullApsMessageOperation);
  return a1;
}

uint64_t sub_1000416B0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000416E4()
{
  sub_100006E64((void *)(v0 + 32));
  swift_unknownObjectRelease(*(void *)(v0 + 72));
  sub_100006E64((void *)(v0 + 80));
  sub_100006E64((void *)(v0 + 120));
  return swift_deallocObject(v0, 160LL, 7LL);
}

void sub_100041730( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

uint64_t sub_100041740()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100041764(uint64_t a1)
{
  return sub_10000A04C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

  ;
}

uint64_t sub_100041784()
{
  return type metadata accessor for SubscriptionFetchFullApsMessageOperation(0LL);
}

  ;
}

uint64_t sub_1000417A0(uint64_t a1)
{
  return sub_100041514(v2, a1 + v1);
}

uint64_t sub_1000417AC(uint64_t a1)
{
  return swift_allocObject(a1, v1, v2);
}

uint64_t sub_1000417B8()
{
  return sub_1000414CC(v0, v1);
}

BOOL sub_1000417C4(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void sub_1000417D0(uint64_t a1, uint64_t a2)
{
}

void sub_1000417DC(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x736C656E6E616863LL;
  }
  else {
    uint64_t v3 = 0x6F724665726F7473LL;
  }
  if (v2) {
    unint64_t v4 = 0xEA0000000000746ELL;
  }
  else {
    unint64_t v4 = 0xE800000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x736C656E6E616863LL;
  }
  else {
    uint64_t v5 = 0x6F724665726F7473LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE800000000000000LL;
  }
  else {
    unint64_t v6 = 0xEA0000000000746ELL;
  }
  if (v3 != v5 || v4 != v6) {
    sub_100042A90(v3, a2, v5);
  }
  sub_10001919C();
  sub_100019278();
  sub_10001942C();
}

void sub_100041864(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 7759204LL;
  }
  else {
    uint64_t v3 = 1685025392LL;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE300000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 7759204LL;
  }
  else {
    uint64_t v5 = 1685025392LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE300000000000000LL;
  }
  else {
    unint64_t v6 = 0xE400000000000000LL;
  }
  if (v3 != v5 || v4 != v6) {
    sub_100042A90(v3, a2, v5);
  }
  sub_10001919C();
  sub_100019278();
  sub_10001942C();
}

void sub_1000418D4(uint64_t a1, uint64_t a2)
{
}

void sub_1000418E0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000418EC(char a1, char a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)&aInitial_1[8 * a1];
  uint64_t v4 = *(void *)&aExecutinfinish[8 * v2 + 16];
  uint64_t v5 = *(void *)&aInitial_1[8 * a2];
  uint64_t v6 = *(void *)&aExecutinfinish[8 * a2 + 16];
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v8 & 1;
}

void sub_100041970(uint64_t a1, uint64_t a2)
{
}

void sub_10004197C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3();
  uint64_t v7 = v6;
  uint64_t v8 = ((uint64_t (*)(uint64_t))a3)(a2);
  if (v5 != v8 || v7 != v9) {
    sub_100042A90(v5, v9, v8);
  }
  sub_10001919C();
  sub_100019278();
  sub_10001942C();
}

BOOL sub_1000419E8(char a1, char a2)
{
  return qword_100068400[a1] == qword_100068400[a2];
}

uint64_t sub_100041A0C(int a1, char a2)
{
  return (a1 ^ ((a2 & 1) == 0)) & 1;
}

uint64_t sub_100041A20(uint64_t a1, uint64_t a2)
{
  return sub_100041A58( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for Sport,  &qword_100088D30,  (uint64_t)&protocol conformance descriptor for Sport);
}

uint64_t sub_100041A3C(uint64_t a1, uint64_t a2)
{
  return sub_100041A58( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventProgressStatus,  &qword_100088D38,  (uint64_t)&protocol conformance descriptor for SportingEventProgressStatus);
}

uint64_t sub_100041A58( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  if (v14 == v12 && v15 == v13) {
    char v10 = 1;
  }
  else {
    char v10 = sub_100042A90(v14, v8, v12);
  }
  sub_10001919C();
  sub_100019278();
  return v10 & 1;
}

void sub_100041B08(char a1)
{
}

void sub_100041B14(char a1)
{
}

Swift::Int sub_100041B20(char a1)
{
  return sub_100041EBC(0LL, a1);
}

void sub_100041B2C()
{
}

void sub_100041B34(uint64_t a1)
{
  char v1 = a1;
  sub_100042AA8(a1);
  if ((v1 & 1) != 0) {
    Swift::UInt v2 = 404LL;
  }
  else {
    Swift::UInt v2 = 3328LL;
  }
  sub_100042B0C(v2);
  sub_1000197CC();
  sub_100042A64();
}

void sub_100041B70(uint64_t a1)
{
  char v1 = a1;
  sub_100042AA8(a1);
  sub_100042B0C(qword_100068400[v1]);
  sub_1000197CC();
  sub_100042A64();
}

void sub_100041BA8(uint64_t a1)
{
}

void sub_100041BB4(uint64_t a1)
{
}

void sub_100041BC0(uint64_t a1)
{
}

void sub_100041BD0(uint64_t a1)
{
  int v1 = sub_100042AA8(a1);
  sub_100042B20(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_1000197CC();
  sub_100042A64();
}

void sub_100041BF8(uint64_t a1)
{
}

void sub_100041C04(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = a2(a1);
  sub_100042AC8((uint64_t)v5, v4);
  sub_10001919C();
  sub_1000197CC();
  sub_100042A64();
}

uint64_t sub_100041C4C(uint64_t a1, uint64_t a2)
{
  return sub_100041D68(a1, a2, (uint64_t (*)(uint64_t))sub_10005DC94);
}

uint64_t sub_100041C58(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x736C656E6E616863LL;
  }
  else {
    uint64_t v3 = 0x6F724665726F7473LL;
  }
  if (v2) {
    uint64_t v4 = 0xEA0000000000746ELL;
  }
  else {
    uint64_t v4 = 0xE800000000000000LL;
  }
  sub_100042AC8(a1, v3);
  return sub_100042AA0(v4);
}

void sub_100041CAC()
{
}

uint64_t sub_100041CC4(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 7759204LL;
  }
  else {
    uint64_t v3 = 1685025392LL;
  }
  if (v2) {
    uint64_t v4 = 0xE400000000000000LL;
  }
  else {
    uint64_t v4 = 0xE300000000000000LL;
  }
  sub_100042AC8(a1, v3);
  return sub_100042AA0(v4);
}

uint64_t sub_100041D04(uint64_t a1, uint64_t a2)
{
  return sub_100041D68(a1, a2, (uint64_t (*)(uint64_t))sub_100050BB0);
}

uint64_t sub_100041D10(uint64_t a1, uint64_t a2)
{
  return sub_100041D68(a1, a2, (uint64_t (*)(uint64_t))sub_100047768);
}

uint64_t sub_100041D1C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)&aExecutinfinish[8 * a2 + 16];
  String.hash(into:)(a1, *(void *)&aInitial_1[8 * a2], v2);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100041D5C(uint64_t a1, uint64_t a2)
{
  return sub_100041D68(a1, a2, (uint64_t (*)(uint64_t))sub_100048480);
}

uint64_t sub_100041D68(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = a3(a2);
  uint64_t v6 = v5;
  String.hash(into:)(a1, v4, v5);
  return sub_100042AA0(v6);
}

void sub_100041DA4()
{
}

void sub_100041DBC()
{
}

void sub_100041DDC(uint64_t a1, char a2)
{
}

void sub_100041E08(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    Swift::UInt v2 = 404LL;
  }
  else {
    Swift::UInt v2 = 3328LL;
  }
  Hasher._combine(_:)(v2);
  sub_10000C510();
}

void sub_100041E34(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    Swift::UInt v3 = 404LL;
  }
  else {
    Swift::UInt v3 = 3328LL;
  }
  sub_100042B0C(v3);
  sub_1000197CC();
  sub_100042A64();
}

void sub_100041E6C(uint64_t a1, char a2)
{
}

void sub_100041EA4(uint64_t a1)
{
}

void sub_100041EB0(uint64_t a1, uint64_t a2)
{
}

Swift::Int sub_100041EBC(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)&aInitial_1[8 * a2];
  uint64_t v4 = *(void *)&aExecutinfinish[8 * a2 + 16];
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_100041F20(uint64_t a1, uint64_t a2)
{
}

void sub_100041F2C(uint64_t a1, uint64_t a2)
{
}

void sub_100041F38(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    uint64_t v3 = 7759204LL;
  }
  else {
    uint64_t v3 = 1685025392LL;
  }
  sub_100042AC8((uint64_t)v4, v3);
  sub_10001919C();
  sub_1000197CC();
  sub_100042A64();
}

void sub_100041F90(uint64_t a1)
{
  int v1 = sub_100042AD0(a1);
  sub_100042B20(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_1000197CC();
  sub_100042A64();
}

void sub_100041FB8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x736C656E6E616863LL;
  }
  else {
    uint64_t v3 = 0x6F724665726F7473LL;
  }
  sub_100042AC8((uint64_t)v4, v3);
  sub_10001919C();
  sub_1000197CC();
  sub_100042A64();
}

void sub_100042020(uint64_t a1, uint64_t a2)
{
}

void sub_10004202C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = a3(a2);
  sub_100042AC8((uint64_t)v6, v5);
  sub_10001919C();
  sub_1000197CC();
  sub_100042A64();
}

void sub_100042074(uint64_t a1, void *a2, SEL *a3)
{
  uint64_t v6 = a1 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v11 = 0LL;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 16 * i + 8);
    swift_bridgeObjectRetain(v17);
    NSString v18 = String._bridgeToObjectiveC()();
    objc_msgSend(a2, *a3, v18);
    swift_bridgeObjectRelease(v17);

    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v14 >= v10) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v10) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v10) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15)
        {
          int64_t v11 = v14 + 3;
          if (v14 + 3 >= v10) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v11);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_100042214()
{
  int v0 = sub_10004228C();
  if (!v0)
  {
    uint64_t v1 = 0xE700000000000000LL;
    uint64_t v2 = sub_100042AD8();
    goto LABEL_6;
  }

  if (v0 != 1)
  {
    uint64_t v1 = 0xE800000000000000LL;
    uint64_t v2 = sub_100042AB4();
LABEL_6:
    char v3 = sub_100042A70(v2, v1);
    uint64_t result = sub_10001919C();
    if ((v3 & 1) == 0) {
      return result;
    }
    return sub_1000422EC(2);
  }

  sub_100042B44();
  return sub_1000422EC(2);
}

uint64_t sub_10004228C()
{
  uint64_t v1 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7sportsd14AsyncOperation_lock);
  sub_100042B50(v0 + OBJC_IVAR____TtC7sportsd14AsyncOperation_lock, (uint64_t)v4);
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7sportsd14AsyncOperation__state);
  os_unfair_lock_unlock(v1);
  swift_endAccess(v4);
  return v2;
}

uint64_t sub_1000422EC(char a1)
{
  if (qword_1000870B0 != -1) {
    swift_once(&qword_1000870B0, sub_100042524);
  }
  uint64_t v3 = qword_100088CE8;
  int v4 = v1;
  uint64_t v5 = swift_bridgeObjectRetain(v3);
  sub_100042074(v5, v4, (SEL *)&selRef_willChangeValueForKey_);
  swift_bridgeObjectRelease(v3);
  uint64_t v6 = (os_unfair_lock_s *)&v4[OBJC_IVAR____TtC7sportsd14AsyncOperation_lock];
  sub_100042B50((uint64_t)&v4[OBJC_IVAR____TtC7sportsd14AsyncOperation_lock], (uint64_t)v11);
  os_unfair_lock_lock(v6);
  v4[OBJC_IVAR____TtC7sportsd14AsyncOperation__state] = a1;
  os_unfair_lock_unlock(v6);
  swift_endAccess(v11);
  uint64_t v7 = qword_100088CE8;
  uint64_t v8 = v4;
  uint64_t v9 = swift_bridgeObjectRetain(v7);
  sub_100042074(v9, v8, (SEL *)&selRef_didChangeValueForKey_);
  return sub_10001919C();
}

unint64_t sub_1000423E0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007E1C8, v2);
  sub_10001919C();
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100042424(char a1)
{
  return *(void *)&aInitial_1[8 * a1];
}

uint64_t sub_100042444(char *a1, char *a2)
{
  return sub_1000418EC(*a1, *a2);
}

Swift::Int sub_100042450()
{
  return sub_100041B20(*v0);
}

uint64_t sub_100042458(uint64_t a1)
{
  return sub_100041D1C(a1, *v1);
}

Swift::Int sub_100042460(uint64_t a1)
{
  return sub_100041EBC(a1, *v1);
}

unint64_t sub_100042468@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000423E0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100042494@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100042424(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id sub_1000424BC()
{
  *(_DWORD *)&v0[OBJC_IVAR____TtC7sportsd14AsyncOperation_lock] = 0;
  v0[OBJC_IVAR____TtC7sportsd14AsyncOperation__state] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AsyncOperation();
  return objc_msgSendSuper2(&v2, "init");
}

Swift::Int sub_100042524()
{
  uint64_t v0 = sub_100006BEC(&qword_100087510);
  uint64_t inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067B00;
  *(void *)(inited + 3sub_100006E64(v0 + 2) = 0x7475636578457369LL;
  *(void *)(inited + 40) = 0xEB00000000676E69LL;
  *(void *)(inited + 4sub_100006E64(v0 + 8) = 0x79646165527369LL;
  *(void *)(inited + 5sub_100006E64(v0 + 6) = 0xE700000000000000LL;
  *(void *)(inited + 6sub_100006E64(v0 + 4) = 0x6873696E69467369LL;
  *(void *)(inited + 7sub_100006E64(v0 + 2) = 0xEA00000000006465LL;
  Swift::Int result = sub_100060F64(inited);
  qword_100088CE8 = result;
  return result;
}

uint64_t sub_1000425F4()
{
  int v0 = sub_10004228C();
  if (!v0)
  {
    uint64_t v2 = 0xE700000000000000LL;
    uint64_t v3 = sub_100042AD8();
LABEL_6:
    char v1 = sub_100042A70(v3, v2);
    goto LABEL_7;
  }

  if (v0 != 1)
  {
    uint64_t v2 = 0xE800000000000000LL;
    uint64_t v3 = sub_100042AB4();
    goto LABEL_6;
  }

  char v1 = 1;
LABEL_7:
  sub_10001919C();
  return v1 & 1;
}

void sub_100042688()
{
  uint64_t v1 = 0x6C616974696E69LL;
  if ([v0 isCancelled])
  {
    int v2 = sub_10004228C();
    if (v2)
    {
      if (v2 == 1)
      {
        sub_100042B44();
        goto LABEL_8;
      }

      uint64_t v3 = 0xE800000000000000LL;
      uint64_t v4 = sub_100042AB4();
    }

    else
    {
      uint64_t v3 = 0xE700000000000000LL;
      uint64_t v4 = sub_100042AD8();
    }

    char v5 = sub_100042A70(v4, v3);
    swift_bridgeObjectRelease(v3);
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
  }

uint64_t sub_100042784()
{
  uint64_t result = (uint64_t)[v0 isCancelled];
  if ((result & 1) == 0)
  {
    sub_1000422EC(1);
    return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA8LL))();
  }

  return result;
}

void sub_100042804()
{
}

id sub_10004287C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AsyncOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AsyncOperation()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd14AsyncOperation);
}

uint64_t getEnumTagSinglePayload for AsyncOperation.ExecutionState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for AsyncOperation.ExecutionState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000429A4 + 4 * byte_10006833D[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000429D8 + 4 * byte_100068338[v4]))();
}

uint64_t sub_1000429D8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000429E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000429E8LL);
  }
  return result;
}

uint64_t sub_1000429F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000429FCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100042A00(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100042A08(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AsyncOperation.ExecutionState()
{
  return &type metadata for AsyncOperation.ExecutionState;
}

unint64_t sub_100042A28()
{
  unint64_t result = qword_100088D28;
  if (!qword_100088D28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000683D8, &type metadata for AsyncOperation.ExecutionState);
    atomic_store(result, (unint64_t *)&qword_100088D28);
  }

  return result;
}

  ;
}

uint64_t sub_100042A70(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x6E69747563657865LL, 0xE900000000000067LL, 0LL);
}

uint64_t sub_100042A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0LL);
}

uint64_t sub_100042AA0(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void *sub_100042AA8(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_100042AB4()
{
  return 0x64656873696E6966LL;
}

uint64_t sub_100042AC8(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

void *sub_100042AD0(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_100042AD8()
{
  return 0x6C616974696E69LL;
}

void sub_100042AEC(uint64_t a1)
{
}

void sub_100042AF4()
{
}

void sub_100042AFC(uint64_t a1)
{
}

void sub_100042B04()
{
}

void sub_100042B0C(Swift::UInt a1)
{
}

uint64_t sub_100042B14()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

void sub_100042B20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_100042B2C()
{
}

void sub_100042B38()
{
}

uint64_t sub_100042B44()
{
  return swift_bridgeObjectRelease(0xE900000000000067LL);
}

uint64_t sub_100042B50(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33LL, 0LL);
}

void *sub_100042B5C()
{
  return v0;
}

uint64_t sub_100042B98()
{
  return swift_deallocClassInstance(v0, 120LL, 7LL);
}

uint64_t type metadata accessor for UTSHeadersApiAgent()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd18UTSHeadersApiAgent);
}

uint64_t sub_100042BD8( uint64_t a1, uint64_t a2, void (*a3)(uint64_t (*)(void), uint64_t))
{
  uint64_t v4 = String.utf8CString.getter(a1, a2);
  uint64_t v5 = os_transaction_create(v4 + 32);
  swift_release(v4);
  uint64_t v6 = swift_allocObject(&unk_1000806A8, 24LL, 7LL);
  *(void *)(v6 + 1sub_100006E64(v0 + 6) = v5;
  swift_unknownObjectRetain_n(v5, 2LL);
  a3(nullsub_1, v6);
  swift_unknownObjectRelease_n(v5, 2LL);
  return swift_release(v6);
}

uint64_t sub_100042C64()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100042C88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v10 = sub_10000C4E8();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __n128 v13 = __chkstk_darwin(v10);
  int64_t v14 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a1, v10, v13);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = (v15 + 32) & ~v15;
  unint64_t v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v18 = swift_allocObject(&unk_1000806D0, v17 + 16, v15 | 7);
  *(void *)(v18 + 1sub_100006E64(v0 + 6) = a4;
  *(void *)(v18 + 2sub_100006E64(v0 + 4) = a5;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v18 + v16, v14, v10);
  uint64_t v19 = (void *)(v18 + v17);
  *uint64_t v19 = a2;
  v19[1] = a3;
  uint64_t v20 = sub_100006BEC(&qword_100088EA0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  id v21 = a4;
  id v22 = a5;
  swift_bridgeObjectRetain(a3);
  uint64_t v23 = Future.init(_:)(sub_100043060, v18);
  v27[1] = v23;
  unint64_t v24 = sub_1000430C4();
  uint64_t v25 = Publisher.eraseToAnyPublisher()(v20, v24);
  swift_release(v23);
  return v25;
}

void sub_100042DE4(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a6;
  uint64_t v31 = a4;
  uint64_t v29 = a1;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for URLRequest(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v14, a5, v11, v17);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v14, 0LL, 60.0);
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  id v21 = (void *)swift_allocObject(&unk_1000806F8, 64LL, 7LL);
  v21[2] = v29;
  v21[3] = a2;
  id v22 = v31;
  v21[4] = v30;
  void v21[5] = a7;
  void v21[6] = a3;
  v21[7] = v22;
  aBlock[4] = sub_1000436F0;
  uint64_t v33 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004371C;
  aBlock[3] = &unk_100080710;
  uint64_t v23 = _Block_copy(aBlock);
  unint64_t v24 = v33;
  swift_retain(a2);
  swift_bridgeObjectRetain(a7);
  id v25 = a3;
  id v26 = v22;
  swift_release(v24);
  id v27 = [v25 downloadTaskWithRequest:isa completionHandler:v23];
  _Block_release(v23);

  [v27 resume];
}

uint64_t sub_100042FC8()
{
  uint64_t v1 = sub_10000C4E8();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_100043060(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_10000C4E8() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  BOOL v7 = (uint64_t *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  sub_100042DE4(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), v2 + v6, *v7, v7[1]);
}

unint64_t sub_1000430C4()
{
  unint64_t result = qword_100088EA8;
  if (!qword_100088EA8)
  {
    uint64_t v1 = sub_100006E94(&qword_100088EA0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Future<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100088EA8);
  }

  return result;
}

uint64_t sub_100043108( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v64 = a5;
  uint64_t v65 = a4;
  uint64_t v63 = sub_100006BEC(&qword_100088EB0);
  __chkstk_darwin(v63);
  int64_t v14 = (uint64_t *)((char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = sub_100006BEC(&qword_100087368);
  __chkstk_darwin(v15);
  __n128 v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for URL(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v62 - v23;
  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_10000B928(v25, (uint64_t)qword_10008F348);
    swift_errorRetain(a3);
    uint64_t v26 = swift_errorRetain(a3);
    id v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = (void *)swift_slowAlloc(32LL, -1LL);
      id v69 = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      swift_getErrorValue(a3, v68, v67);
      uint64_t v31 = Error.localizedDescription.getter(v67[1], v67[2]);
      unint64_t v33 = v32;
      uint64_t v66 = sub_100015AD4(v31, v32, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v33);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Could not download image. %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    *int64_t v14 = a3;
    swift_storeEnumTagMultiPayload(v14, v63, 1LL);
    swift_errorRetain(a3);
    v65(v14);
    swift_errorRelease(a3);
    return sub_1000230C4((uint64_t)v14, &qword_100088EB0);
  }

  sub_100043840(a1, (uint64_t)v17);
  if (sub_10000AB6C((uint64_t)v17, 1LL, v18) == 1)
  {
    sub_1000230C4((uint64_t)v17, &qword_100087368);
    id v34 = objc_allocWithZone(&OBJC_CLASS___NSError);
    *int64_t v14 = sub_100027EB0(0xD00000000000001FLL, 0x800000010006C200LL, 512LL, 0LL);
    swift_storeEnumTagMultiPayload(v14, v63, 1LL);
    v65(v14);
    return sub_1000230C4((uint64_t)v14, &qword_100088EB0);
  }

  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v17, v18);
  URL.init(fileURLWithPath:)(a6, a7);
  NSString v36 = String._bridgeToObjectiveC()();
  unsigned __int8 v37 = [a9 fileExistsAtPath:v36];

  if ((v37 & 1) != 0)
  {
    URL._bridgeToObjectiveC()(v38);
    uint64_t v40 = v39;
    id v69 = 0LL;
    unsigned int v41 = [a9 removeItemAtURL:v39 error:&v69];

    id v42 = v69;
    if (!v41) {
      goto LABEL_14;
    }
    id v43 = v69;
    URL._bridgeToObjectiveC()(v44);
    uint64_t v46 = v45;
    URL._bridgeToObjectiveC()(v47);
    unint64_t v49 = v48;
    id v69 = 0LL;
    unsigned int v50 = [a9 moveItemAtURL:v46 toURL:v48 error:&v69];

    id v42 = v69;
    if (!v50) {
      goto LABEL_14;
    }
  }

  else
  {
    URL._bridgeToObjectiveC()(v38);
    uint64_t v55 = v54;
    URL._bridgeToObjectiveC()(v56);
    uint64_t v58 = v57;
    id v69 = 0LL;
    unsigned __int8 v59 = [a9 moveItemAtURL:v55 toURL:v57 error:&v69];

    id v42 = v69;
    if ((v59 & 1) == 0)
    {
LABEL_14:
      id v51 = v42;
      uint64_t v52 = _convertNSErrorToError(_:)(v42);

      swift_willThrow();
      uint64_t v53 = *(void (**)(char *, uint64_t))(v19 + 8);
      v53(v21, v18);
      *int64_t v14 = v52;
      swift_storeEnumTagMultiPayload(v14, v63, 1LL);
      swift_errorRetain(v52);
      v65(v14);
      swift_errorRelease(v52);
      sub_1000230C4((uint64_t)v14, &qword_100088EB0);
      return ((uint64_t (*)(char *, uint64_t))v53)(v24, v18);
    }
  }

  id v60 = v42;
  (*(void (**)(void *, char *, uint64_t))(v19 + 16))(v14, v21, v18);
  swift_storeEnumTagMultiPayload(v14, v63, 0LL);
  v65(v14);
  sub_1000230C4((uint64_t)v14, &qword_100088EB0);
  uint64_t v61 = *(void (**)(char *, uint64_t))(v19 + 8);
  v61(v21, v18);
  return ((uint64_t (*)(char *, uint64_t))v61)(v24, v18);
}

uint64_t sub_1000436B4()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000436F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100043108( a1,  a2,  a3,  *(void (**)(void *))(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(void *)(v3 + 48),  *(void **)(v3 + 56));
}

uint64_t sub_10004371C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = sub_100006BEC(&qword_100087368);
  __n128 v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void (**)(char *, void *, void *))(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  if (a2)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(a2, v9);
    uint64_t v14 = type metadata accessor for URL(0LL);
    uint64_t v15 = 0LL;
  }

  else
  {
    uint64_t v14 = type metadata accessor for URL(0LL);
    uint64_t v15 = 1LL;
  }

  sub_10000AB60((uint64_t)v11, v15, 1LL, v14);
  swift_retain(v12);
  id v16 = a3;
  id v17 = a4;
  v13(v11, a3, a4);

  swift_release(v12);
  return sub_1000230C4((uint64_t)v11, &qword_100087368);
}

uint64_t sub_100043828(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100043838(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100043840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006BEC(&qword_100087368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for ImageDownloader(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for ImageDownloader(id *a1)
{
}

uint64_t assignWithCopy for ImageDownloader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  BOOL v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + sub_100006E64(v0 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for ImageDownloader(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for ImageDownloader(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(vsub_100006E64(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(vsub_100006E64(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageDownloader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + sub_100006E64(v0 + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 1sub_100006E64(v0 + 6) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 1sub_100006E64(v0 + 6) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ImageDownloader()
{
  return &type metadata for ImageDownloader;
}

void sub_100043A00()
{
  uint64_t v2 = (char *)sub_100043A6C + 4 * byte_1000684D8[sub_100047170()];
  __asm { BR              X10 }

unint64_t sub_100043A6C()
{
  return 0xD000000000000019LL;
}

unint64_t sub_100043AE4()
{
  return sub_100047144(28LL);
}

unint64_t sub_100043AFC()
{
  return sub_100047144(25LL);
}

unint64_t sub_100043B14()
{
  return sub_100047144(25LL);
}

unint64_t sub_100043B2C()
{
  return sub_100047144(27LL);
}

unint64_t sub_100043B44()
{
  return sub_100047144(29LL);
}

void sub_100043B5C()
{
  uint64_t v2 = (char *)sub_100043BAC + 4 * byte_1000684DD[sub_100047170()];
  __asm { BR              X10 }

uint64_t sub_100043BAC()
{
  return -1000LL;
}

uint64_t sub_100043C0C(char a1)
{
  if ((a1 & 1) != 0) {
    return 404LL;
  }
  else {
    return 3328LL;
  }
}

uint64_t sub_100043C20(char a1)
{
  return qword_100068BB0[a1];
}

void sub_100043C34()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100047194();
  sub_100019690();
  __chkstk_darwin(v3);
  id v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000446DC(v1, (uint64_t)v5);
  id v6 = (char *)sub_100043CB4 + 4 * byte_1000684E2[swift_getEnumCaseMultiPayload(v5, v2)];
  __asm { BR              X10 }

uint64_t sub_100043CB4()
{
  char v3 = *v1;
  uint64_t v4 = sub_100006BEC(&qword_100088028);
  uint64_t inited = swift_initStackObject(v4, v0 + 88);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067230;
  *(void *)(inited + 3sub_100006E64(v0 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(inited + 40) = v6;
  *(_BYTE *)(v2 - 20sub_100006E64(v0 + 9) = v3;
  unint64_t v7 = sub_100044604();
  uint64_t v8 = Error.localizedDescription.getter(&unk_1000808D8, v7);
  *(void *)(inited + 7sub_100006E64(v0 + 2) = &type metadata for String;
  *(void *)(inited + 4sub_100006E64(v0 + 8) = v8;
  *(void *)(inited + 5sub_100006E64(v0 + 6) = v9;
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String);
}

uint64_t sub_100043F20(uint64_t a1)
{
  uint64_t v2 = sub_100044760(&qword_100088EE0, (uint64_t)&unk_1000687C8);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100043F58(uint64_t a1)
{
  uint64_t v2 = sub_100044760(&qword_100088EE0, (uint64_t)&unk_1000687C8);
  return Error<>._code.getter(a1, v2);
}

BOOL sub_100043F90(uint64_t a1)
{
  return a1 != -1200;
}

BOOL sub_100043FAC@<W0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_100043F90(*a1);
  *a2 = result;
  return result;
}

void sub_100043FDC(void *a1@<X8>)
{
  *a1 = -1200LL;
}

unint64_t sub_100043FE8()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_100044004()
{
  return -1200LL;
}

uint64_t sub_10004400C()
{
  return sub_100044458((uint64_t)&unk_100080848);
}

uint64_t sub_100044028(uint64_t a1)
{
  unint64_t v2 = sub_1000447A0();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100044050(uint64_t a1, uint64_t a2)
{
  return sub_100044428(a1, a2, (uint64_t (*)(void))sub_1000447A0);
}

uint64_t sub_100044064(uint64_t a1)
{
  if (a1 == 404) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1 == 3328) {
    return 0LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_10004407C(unsigned __int8 *a1, char *a2)
{
  return sub_100041A0C(*a1, *a2);
}

void sub_100044088()
{
}

void sub_100044090(uint64_t a1)
{
}

void sub_100044098(uint64_t a1)
{
}

uint64_t sub_1000440A0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100044064(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000440C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100043C0C(*v1);
  *a1 = result;
  return result;
}

void sub_1000440F0(char a1)
{
  uint64_t v2 = sub_100006BEC(&qword_100088028);
  uint64_t inited = swift_initStackObject(v2, v8);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067230;
  *(void *)(inited + 3sub_100006E64(v0 + 2) = 1868983913LL;
  *(void *)(inited + 40) = 0xE400000000000000LL;
  char v7 = a1 & 1;
  uint64_t v4 = String.init<A>(describing:)(&v7, &unk_1000808D8);
  sub_1000471B0(v4, v5, (uint64_t)&type metadata for String);
  sub_100047138(v6);
  sub_100047188();
}

BOOL sub_10004417C(uint64_t a1)
{
  return a1 != -1000;
}

unint64_t sub_100044188()
{
  return 0xD000000000000019LL;
}

uint64_t sub_1000441A4()
{
  return sub_100043C0C(*v0);
}

void sub_1000441AC()
{
}

uint64_t sub_1000441B4(uint64_t a1)
{
  unint64_t v2 = sub_100044818();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000441DC(uint64_t a1, uint64_t a2)
{
  return sub_100044428(a1, a2, (uint64_t (*)(void))sub_100044818);
}

BOOL sub_1000441FC@<W0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_10004417C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100044230(uint64_t a1)
{
  if (a1 == -1011) {
    int v1 = 2;
  }
  else {
    int v1 = 3;
  }
  if (a1 == -1016) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = v1;
  }
  if (a1 == -2000) {
    return 0LL;
  }
  else {
    return v2;
  }
}

unint64_t sub_100044258()
{
  return 0xD000000000000019LL;
}

uint64_t sub_100044274()
{
  return -1000LL;
}

uint64_t sub_10004427C()
{
  return sub_100044458((uint64_t)&unk_100080968);
}

uint64_t sub_100044298(uint64_t a1)
{
  unint64_t v2 = sub_100044890();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000442C0(uint64_t a1, uint64_t a2)
{
  return sub_100044428(a1, a2, (uint64_t (*)(void))sub_100044890);
}

BOOL sub_1000442D4(char *a1, char *a2)
{
  return sub_1000419E8(*a1, *a2);
}

void sub_1000442E0()
{
}

void sub_1000442E8(uint64_t a1)
{
}

void sub_1000442F0(uint64_t a1)
{
}

uint64_t sub_1000442F8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100044230(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100044320@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100043C20(*v1);
  *a1 = result;
  return result;
}

void sub_100044348(char a1)
{
  uint64_t v2 = sub_100006BEC(&qword_100088028);
  uint64_t inited = (__n128 *)swift_initStackObject(v2, v8);
  sub_10004714C(inited, (__n128)xmmword_100067230);
  char v7 = a1;
  uint64_t v4 = String.init<A>(describing:)(&v7, &unk_1000809F8);
  sub_1000471B0(v4, v5, (uint64_t)&type metadata for String);
  sub_100047138(v6);
  sub_100047188();
}

unint64_t sub_1000443C0()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1000443DC()
{
  return sub_100043C20(*v0);
}

void sub_1000443E4()
{
}

uint64_t sub_1000443EC(uint64_t a1)
{
  unint64_t v2 = sub_100044908();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100044414(uint64_t a1, uint64_t a2)
{
  return sub_100044428(a1, a2, (uint64_t (*)(void))sub_100044908);
}

uint64_t sub_100044428(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return sub_10004712C();
}

uint64_t sub_100044458(uint64_t a1)
{
  uint64_t v2 = sub_100006BEC(&qword_100088028);
  uint64_t inited = (__n128 *)swift_initStackObject(v2, &v9);
  uint64_t v4 = sub_10004714C(inited, (__n128)xmmword_100067230);
  uint64_t v5 = String.init<A>(describing:)(v4, a1);
  sub_1000471B0(v5, v6, (uint64_t)&type metadata for String);
  return sub_100047138(v7);
}

unint64_t sub_1000444CC()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1000444E8()
{
  return sub_100044458((uint64_t)&unk_100080A88);
}

uint64_t sub_100044504(uint64_t a1)
{
  unint64_t v2 = sub_100044980();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10004452C(uint64_t a1, uint64_t a2)
{
  return sub_100044428(a1, a2, (uint64_t (*)(void))sub_100044980);
}

unint64_t sub_100044544()
{
  unint64_t result = qword_100088EB8;
  if (!qword_100088EB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068508, &unk_100080A88);
    atomic_store(result, (unint64_t *)&qword_100088EB8);
  }

  return result;
}

unint64_t sub_100044584()
{
  unint64_t result = qword_100088EC0;
  if (!qword_100088EC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068588, &unk_1000809F8);
    atomic_store(result, (unint64_t *)&qword_100088EC0);
  }

  return result;
}

unint64_t sub_1000445C4()
{
  unint64_t result = qword_100088EC8;
  if (!qword_100088EC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068608, &unk_100080968);
    atomic_store(result, (unint64_t *)&qword_100088EC8);
  }

  return result;
}

unint64_t sub_100044604()
{
  unint64_t result = qword_100088ED0;
  if (!qword_100088ED0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068688, &unk_1000808D8);
    atomic_store(result, (unint64_t *)&qword_100088ED0);
  }

  return result;
}

unint64_t sub_100044644()
{
  unint64_t result = qword_100088ED8;
  if (!qword_100088ED8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068708, &unk_100080848);
    atomic_store(result, (unint64_t *)&qword_100088ED8);
  }

  return result;
}

uint64_t sub_100044680()
{
  return sub_100044760((unint64_t *)&qword_100088B70, (uint64_t)&unk_100068788);
}

uint64_t type metadata accessor for ApiAgentError(uint64_t a1)
{
  uint64_t result = qword_100088FA8;
  if (!qword_100088FA8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApiAgentError);
  }
  return result;
}

uint64_t sub_1000446DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ApiAgentError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100044720(uint64_t a1)
{
  uint64_t v2 = sub_100006BEC((uint64_t *)&unk_100088B50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100044760(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for ApiAgentError(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000447A0()
{
  unint64_t result = qword_100088EE8;
  if (!qword_100088EE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068748, &unk_100080848);
    atomic_store(result, (unint64_t *)&qword_100088EE8);
  }

  return result;
}

unint64_t sub_1000447DC()
{
  unint64_t result = qword_100088EF0;
  if (!qword_100088EF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068B78, &unk_100080848);
    atomic_store(result, (unint64_t *)&qword_100088EF0);
  }

  return result;
}

unint64_t sub_100044818()
{
  unint64_t result = qword_100088EF8;
  if (!qword_100088EF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000686C8, &unk_1000808D8);
    atomic_store(result, (unint64_t *)&qword_100088EF8);
  }

  return result;
}

unint64_t sub_100044854()
{
  unint64_t result = qword_100088F00;
  if (!qword_100088F00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068B40, &unk_1000808D8);
    atomic_store(result, (unint64_t *)&qword_100088F00);
  }

  return result;
}

unint64_t sub_100044890()
{
  unint64_t result = qword_100088F08;
  if (!qword_100088F08)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068648, &unk_100080968);
    atomic_store(result, (unint64_t *)&qword_100088F08);
  }

  return result;
}

unint64_t sub_1000448CC()
{
  unint64_t result = qword_100088F10;
  if (!qword_100088F10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068B08, &unk_100080968);
    atomic_store(result, (unint64_t *)&qword_100088F10);
  }

  return result;
}

unint64_t sub_100044908()
{
  unint64_t result = qword_100088F18;
  if (!qword_100088F18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000685C8, &unk_1000809F8);
    atomic_store(result, (unint64_t *)&qword_100088F18);
  }

  return result;
}

unint64_t sub_100044944()
{
  unint64_t result = qword_100088F20;
  if (!qword_100088F20)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068AD0, &unk_1000809F8);
    atomic_store(result, (unint64_t *)&qword_100088F20);
  }

  return result;
}

unint64_t sub_100044980()
{
  unint64_t result = qword_100088F28;
  if (!qword_100088F28)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068548, &unk_100080A88);
    atomic_store(result, (unint64_t *)&qword_100088F28);
  }

  return result;
}

unint64_t sub_1000449BC()
{
  unint64_t result = qword_100088F30;
  if (!qword_100088F30)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068A98, &unk_100080A88);
    atomic_store(result, (unint64_t *)&qword_100088F30);
  }

  return result;
}

uint64_t sub_100044A04()
{
  return 0LL;
}

void type metadata accessor for ApiAgentError.SignatureError()
{
}

uint64_t sub_100044A18(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100044A64 + 4 * byte_1000684EC[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100044A98 + 4 * byte_1000684E7[v4]))();
}

uint64_t sub_100044A98(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100044AA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100044AA8LL);
  }
  return result;
}

uint64_t sub_100044AB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100044ABCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100044AC0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100044AC8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ApiAgentError.AMSBagError()
{
}

void type metadata accessor for ApiAgentError.AMSURLError()
{
}

uint64_t sub_100044AEC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100044B38 + 4 * byte_1000684F6[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100044B6C + 4 * byte_1000684F1[v4]))();
}

uint64_t sub_100044B6C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100044B74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100044B7CLL);
  }
  return result;
}

uint64_t sub_100044B88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100044B90LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100044B94(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100044B9C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ApiAgentError.DataTaskError()
{
}

uint64_t getEnumTagSinglePayload for TVAppFeatureFlags(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t sub_100044C04(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100044C44 + 4 * byte_1000684FB[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100044C64 + 4 * byte_100068500[v4]))();
  }
}

_BYTE *sub_100044C44(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100044C64(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100044C6C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100044C74(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100044C7C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100044C84(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void type metadata accessor for ApiAgentError.GenericURLError()
{
}

uint64_t *sub_100044C9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v13);
  }

  else if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v8 = *(int *)(sub_100006BEC(&qword_100088B88) + 48);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = (int *)type metadata accessor for ApiRequestMetrics(0LL);
    if (sub_10000AB6C((uint64_t)v10, 1LL, (uint64_t)v11))
    {
      uint64_t v12 = sub_100006BEC((uint64_t *)&unk_100088B50);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      uint64_t v14 = type metadata accessor for Date(0LL);
      if (sub_10000AB6C((uint64_t)v10, 1LL, v14))
      {
        uint64_t v15 = sub_100006BEC(&qword_100088BD0);
        memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v9, v10, v14);
        sub_10000AB60((uint64_t)v9, 0LL, 1LL, v14);
      }

      uint64_t v16 = v11[5];
      id v17 = &v9[v16];
      uint64_t v18 = &v10[v16];
      if (sub_10000AB6C((uint64_t)&v10[v16], 1LL, v14))
      {
        uint64_t v19 = sub_100006BEC(&qword_100088BD0);
        memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v17, v18, v14);
        sub_10000AB60((uint64_t)v17, 0LL, 1LL, v14);
      }

      *(void *)&v9[v11[6]] = *(void *)&v10[v11[6]];
      *(void *)&v9[v11[7]] = *(void *)&v10[v11[7]];
      uint64_t v20 = v11[8];
      id v21 = &v9[v20];
      uint64_t v22 = &v10[v20];
      if (sub_10000AB6C((uint64_t)&v10[v20], 1LL, v14))
      {
        uint64_t v23 = sub_100006BEC(&qword_100088BD0);
        memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v21, v22, v14);
        sub_10000AB60((uint64_t)v21, 0LL, 1LL, v14);
      }

      uint64_t v24 = v11[9];
      uint64_t v25 = &v9[v24];
      uint64_t v26 = &v10[v24];
      if (sub_10000AB6C((uint64_t)&v10[v24], 1LL, v14))
      {
        uint64_t v27 = sub_100006BEC(&qword_100088BD0);
        memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v25, v26, v14);
        sub_10000AB60((uint64_t)v25, 0LL, 1LL, v14);
      }

      uint64_t v28 = v11[10];
      uint64_t v29 = &v9[v28];
      uint64_t v30 = &v10[v28];
      if (sub_10000AB6C((uint64_t)&v10[v28], 1LL, v14))
      {
        uint64_t v31 = sub_100006BEC(&qword_100088BD0);
        memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v29, v30, v14);
        sub_10000AB60((uint64_t)v29, 0LL, 1LL, v14);
      }

      v9[v11[11]] = v10[v11[11]];
      uint64_t v32 = v11[12];
      unint64_t v33 = &v9[v32];
      id v34 = &v10[v32];
      uint64_t v35 = *((void *)v34 + 1);
      *(void *)unint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = v35;
      uint64_t v36 = v11[13];
      unsigned __int8 v37 = &v9[v36];
      uint64_t v38 = &v10[v36];
      swift_bridgeObjectRetain(v35);
      if (sub_10000AB6C((uint64_t)v38, 1LL, v14))
      {
        uint64_t v39 = sub_100006BEC(&qword_100088BD0);
        memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v37, v38, v14);
        sub_10000AB60((uint64_t)v37, 0LL, 1LL, v14);
      }

      uint64_t v40 = v11[14];
      unsigned int v41 = &v9[v40];
      id v42 = &v10[v40];
      uint64_t v43 = type metadata accessor for URL(0LL);
      if (sub_10000AB6C((uint64_t)v42, 1LL, v43))
      {
        uint64_t v44 = sub_100006BEC(&qword_100087368);
        memcpy(v41, v42, *(void *)(*(void *)(v44 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16LL))(v41, v42, v43);
        sub_10000AB60((uint64_t)v41, 0LL, 1LL, v43);
      }

      uint64_t v45 = v11[15];
      uint64_t v46 = &v9[v45];
      os_log_type_t v47 = &v10[v45];
      if (sub_10000AB6C((uint64_t)&v10[v45], 1LL, v14))
      {
        uint64_t v48 = sub_100006BEC(&qword_100088BD0);
        memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v46, v47, v14);
        sub_10000AB60((uint64_t)v46, 0LL, 1LL, v14);
      }

      uint64_t v49 = v11[16];
      unsigned int v50 = &v9[v49];
      id v51 = &v10[v49];
      if (sub_10000AB6C((uint64_t)&v10[v49], 1LL, v14))
      {
        uint64_t v52 = sub_100006BEC(&qword_100088BD0);
        memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v50, v51, v14);
        sub_10000AB60((uint64_t)v50, 0LL, 1LL, v14);
      }

      uint64_t v53 = v11[17];
      uint64_t v54 = &v9[v53];
      uint64_t v55 = &v10[v53];
      if (sub_10000AB6C((uint64_t)&v10[v53], 1LL, v14))
      {
        uint64_t v56 = sub_100006BEC(&qword_100088BD0);
        memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v54, v55, v14);
        sub_10000AB60((uint64_t)v54, 0LL, 1LL, v14);
      }

      uint64_t v57 = v11[18];
      uint64_t v58 = &v9[v57];
      unsigned __int8 v59 = &v10[v57];
      *(void *)uint64_t v58 = *(void *)v59;
      v58[8] = v59[8];
      uint64_t v60 = v11[19];
      uint64_t v61 = &v9[v60];
      uint64_t v62 = &v10[v60];
      uint64_t v63 = *((void *)v62 + 1);
      *(void *)uint64_t v61 = *(void *)v62;
      *((void *)v61 + 1) = v63;
      uint64_t v64 = v11[20];
      uint64_t v65 = &v9[v64];
      uint64_t v66 = &v10[v64];
      uint64_t v67 = *((void *)v66 + 1);
      *(void *)uint64_t v65 = *(void *)v66;
      *((void *)v65 + 1) = v67;
      uint64_t v68 = v11[21];
      id v69 = &v9[v68];
      uint64_t v70 = &v10[v68];
      uint64_t v71 = *((void *)v70 + 1);
      *(void *)id v69 = *(void *)v70;
      *((void *)v69 + 1) = v71;
      uint64_t v72 = v11[22];
      uint64_t v73 = &v9[v72];
      Swift::String v74 = &v10[v72];
      uint64_t v75 = *((void *)v74 + 1);
      *(void *)uint64_t v73 = *(void *)v74;
      *((void *)v73 + 1) = v75;
      uint64_t v76 = v11[23];
      Swift::String v77 = &v9[v76];
      uint64_t v78 = &v10[v76];
      uint64_t v79 = *((void *)v78 + 1);
      *(void *)Swift::String v77 = *(void *)v78;
      *((void *)v77 + 1) = v79;
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRetain(v67);
      swift_bridgeObjectRetain(v71);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v79);
      sub_10000AB60((uint64_t)v9, 0LL, 1LL, (uint64_t)v11);
    }

    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(v5 + 64));
  }

  return a1;
}

uint64_t sub_10004530C(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    uint64_t v4 = a1 + *(int *)(sub_100006BEC(&qword_100088B88) + 48);
    uint64_t v5 = (int *)type metadata accessor for ApiRequestMetrics(0LL);
    uint64_t result = sub_10000AB6C(v4, 1LL, (uint64_t)v5);
    if (!(_DWORD)result)
    {
      uint64_t v6 = type metadata accessor for Date(0LL);
      uint64_t v7 = v4 + v5[5];
      uint64_t v8 = v4 + v5[8];
      uint64_t v9 = v4 + v5[9];
      uint64_t v10 = v4 + v5[10];
      swift_bridgeObjectRelease(*(void *)(v4 + v5[12] + 8));
      uint64_t v11 = v4 + v5[13];
      uint64_t v12 = v4 + v5[14];
      uint64_t v13 = type metadata accessor for URL(0LL);
      uint64_t v14 = v4 + v5[15];
      uint64_t v15 = v4 + v5[16];
      uint64_t v16 = v4 + v5[17];
      swift_bridgeObjectRelease(*(void *)(v4 + v5[19] + 8));
      swift_bridgeObjectRelease(*(void *)(v4 + v5[20] + 8));
      swift_bridgeObjectRelease(*(void *)(v4 + v5[21] + 8));
      swift_bridgeObjectRelease(*(void *)(v4 + v5[22] + 8));
      return swift_bridgeObjectRelease(*(void *)(v4 + v5[23] + 8));
    }
  }

  return result;
}

_BYTE *sub_1000455D8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(sub_100006BEC(&qword_100088B88) + 48);
    uint64_t v7 = &a1[v6];
    uint64_t v8 = &a2[v6];
    uint64_t v9 = (int *)type metadata accessor for ApiRequestMetrics(0LL);
    if (sub_10000AB6C((uint64_t)v8, 1LL, (uint64_t)v9))
    {
      uint64_t v10 = sub_100006BEC((uint64_t *)&unk_100088B50);
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
    }

    else
    {
      uint64_t v11 = type metadata accessor for Date(0LL);
      if (sub_10000AB6C((uint64_t)v8, 1LL, v11))
      {
        uint64_t v12 = sub_100006BEC(&qword_100088BD0);
        memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v7, v8, v11);
        sub_10000AB60((uint64_t)v7, 0LL, 1LL, v11);
      }

      uint64_t v13 = v9[5];
      uint64_t v14 = &v7[v13];
      uint64_t v15 = &v8[v13];
      if (sub_10000AB6C((uint64_t)&v8[v13], 1LL, v11))
      {
        uint64_t v16 = sub_100006BEC(&qword_100088BD0);
        memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v14, v15, v11);
        sub_10000AB60((uint64_t)v14, 0LL, 1LL, v11);
      }

      *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
      *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
      uint64_t v17 = v9[8];
      uint64_t v18 = &v7[v17];
      uint64_t v19 = &v8[v17];
      if (sub_10000AB6C((uint64_t)&v8[v17], 1LL, v11))
      {
        uint64_t v20 = sub_100006BEC(&qword_100088BD0);
        memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v18, v19, v11);
        sub_10000AB60((uint64_t)v18, 0LL, 1LL, v11);
      }

      uint64_t v21 = v9[9];
      uint64_t v22 = &v7[v21];
      uint64_t v23 = &v8[v21];
      if (sub_10000AB6C((uint64_t)&v8[v21], 1LL, v11))
      {
        uint64_t v24 = sub_100006BEC(&qword_100088BD0);
        memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v22, v23, v11);
        sub_10000AB60((uint64_t)v22, 0LL, 1LL, v11);
      }

      uint64_t v25 = v9[10];
      uint64_t v26 = &v7[v25];
      uint64_t v27 = &v8[v25];
      if (sub_10000AB6C((uint64_t)&v8[v25], 1LL, v11))
      {
        uint64_t v28 = sub_100006BEC(&qword_100088BD0);
        memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v26, v27, v11);
        sub_10000AB60((uint64_t)v26, 0LL, 1LL, v11);
      }

      v7[v9[11]] = v8[v9[11]];
      uint64_t v29 = v9[12];
      uint64_t v30 = &v7[v29];
      uint64_t v31 = &v8[v29];
      uint64_t v32 = *((void *)v31 + 1);
      *(void *)uint64_t v30 = *(void *)v31;
      *((void *)v30 + 1) = v32;
      uint64_t v33 = v9[13];
      id v34 = &v7[v33];
      uint64_t v35 = &v8[v33];
      swift_bridgeObjectRetain(v32);
      if (sub_10000AB6C((uint64_t)v35, 1LL, v11))
      {
        uint64_t v36 = sub_100006BEC(&qword_100088BD0);
        memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v34, v35, v11);
        sub_10000AB60((uint64_t)v34, 0LL, 1LL, v11);
      }

      uint64_t v37 = v9[14];
      uint64_t v38 = &v7[v37];
      uint64_t v39 = &v8[v37];
      uint64_t v40 = type metadata accessor for URL(0LL);
      if (sub_10000AB6C((uint64_t)v39, 1LL, v40))
      {
        uint64_t v41 = sub_100006BEC(&qword_100087368);
        memcpy(v38, v39, *(void *)(*(void *)(v41 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16LL))(v38, v39, v40);
        sub_10000AB60((uint64_t)v38, 0LL, 1LL, v40);
      }

      uint64_t v42 = v9[15];
      uint64_t v43 = &v7[v42];
      uint64_t v44 = &v8[v42];
      if (sub_10000AB6C((uint64_t)&v8[v42], 1LL, v11))
      {
        uint64_t v45 = sub_100006BEC(&qword_100088BD0);
        memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v43, v44, v11);
        sub_10000AB60((uint64_t)v43, 0LL, 1LL, v11);
      }

      uint64_t v46 = v9[16];
      os_log_type_t v47 = &v7[v46];
      uint64_t v48 = &v8[v46];
      if (sub_10000AB6C((uint64_t)&v8[v46], 1LL, v11))
      {
        uint64_t v49 = sub_100006BEC(&qword_100088BD0);
        memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v47, v48, v11);
        sub_10000AB60((uint64_t)v47, 0LL, 1LL, v11);
      }

      uint64_t v50 = v9[17];
      id v51 = &v7[v50];
      uint64_t v52 = &v8[v50];
      if (sub_10000AB6C((uint64_t)&v8[v50], 1LL, v11))
      {
        uint64_t v53 = sub_100006BEC(&qword_100088BD0);
        memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v51, v52, v11);
        sub_10000AB60((uint64_t)v51, 0LL, 1LL, v11);
      }

      uint64_t v54 = v9[18];
      uint64_t v55 = &v7[v54];
      uint64_t v56 = &v8[v54];
      *(void *)uint64_t v55 = *(void *)v56;
      v55[8] = v56[8];
      uint64_t v57 = v9[19];
      uint64_t v58 = &v7[v57];
      unsigned __int8 v59 = &v8[v57];
      uint64_t v60 = *((void *)v59 + 1);
      *(void *)uint64_t v58 = *(void *)v59;
      *((void *)v58 + 1) = v60;
      uint64_t v61 = v9[20];
      uint64_t v62 = &v7[v61];
      uint64_t v63 = &v8[v61];
      uint64_t v64 = *((void *)v63 + 1);
      *(void *)uint64_t v62 = *(void *)v63;
      *((void *)v62 + 1) = v64;
      uint64_t v65 = v9[21];
      uint64_t v66 = &v7[v65];
      uint64_t v67 = &v8[v65];
      uint64_t v68 = *((void *)v67 + 1);
      *(void *)uint64_t v66 = *(void *)v67;
      *((void *)v66 + 1) = v68;
      uint64_t v69 = v9[22];
      uint64_t v70 = &v7[v69];
      uint64_t v71 = &v8[v69];
      uint64_t v72 = *((void *)v71 + 1);
      *(void *)uint64_t v70 = *(void *)v71;
      *((void *)v70 + 1) = v72;
      uint64_t v73 = v9[23];
      Swift::String v74 = &v7[v73];
      uint64_t v75 = &v8[v73];
      uint64_t v76 = *((void *)v75 + 1);
      *(void *)Swift::String v74 = *(void *)v75;
      *((void *)v74 + 1) = v76;
      swift_bridgeObjectRetain(v60);
      swift_bridgeObjectRetain(v64);
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRetain(v76);
      sub_10000AB60((uint64_t)v7, 0LL, 1LL, (uint64_t)v9);
    }

    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

_BYTE *sub_100045C20(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000462A8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(sub_100006BEC(&qword_100088B88) + 48);
      uint64_t v7 = &a1[v6];
      uint64_t v8 = &a2[v6];
      uint64_t v9 = (int *)type metadata accessor for ApiRequestMetrics(0LL);
      if (sub_10000AB6C((uint64_t)v8, 1LL, (uint64_t)v9))
      {
        uint64_t v10 = sub_100006BEC((uint64_t *)&unk_100088B50);
        memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
      }

      else
      {
        uint64_t v11 = type metadata accessor for Date(0LL);
        if (sub_10000AB6C((uint64_t)v8, 1LL, v11))
        {
          uint64_t v12 = sub_100006BEC(&qword_100088BD0);
          memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v7, v8, v11);
          sub_10000AB60((uint64_t)v7, 0LL, 1LL, v11);
        }

        uint64_t v13 = v9[5];
        uint64_t v14 = &v7[v13];
        uint64_t v15 = &v8[v13];
        if (sub_10000AB6C((uint64_t)&v8[v13], 1LL, v11))
        {
          uint64_t v16 = sub_100006BEC(&qword_100088BD0);
          memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v14, v15, v11);
          sub_10000AB60((uint64_t)v14, 0LL, 1LL, v11);
        }

        *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
        *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
        uint64_t v17 = v9[8];
        uint64_t v18 = &v7[v17];
        uint64_t v19 = &v8[v17];
        if (sub_10000AB6C((uint64_t)&v8[v17], 1LL, v11))
        {
          uint64_t v20 = sub_100006BEC(&qword_100088BD0);
          memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v18, v19, v11);
          sub_10000AB60((uint64_t)v18, 0LL, 1LL, v11);
        }

        uint64_t v21 = v9[9];
        uint64_t v22 = &v7[v21];
        uint64_t v23 = &v8[v21];
        if (sub_10000AB6C((uint64_t)&v8[v21], 1LL, v11))
        {
          uint64_t v24 = sub_100006BEC(&qword_100088BD0);
          memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v22, v23, v11);
          sub_10000AB60((uint64_t)v22, 0LL, 1LL, v11);
        }

        uint64_t v25 = v9[10];
        uint64_t v26 = &v7[v25];
        uint64_t v27 = &v8[v25];
        if (sub_10000AB6C((uint64_t)&v8[v25], 1LL, v11))
        {
          uint64_t v28 = sub_100006BEC(&qword_100088BD0);
          memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v26, v27, v11);
          sub_10000AB60((uint64_t)v26, 0LL, 1LL, v11);
        }

        v7[v9[11]] = v8[v9[11]];
        uint64_t v29 = v9[12];
        uint64_t v30 = &v7[v29];
        uint64_t v31 = &v8[v29];
        *(void *)uint64_t v30 = *(void *)v31;
        uint64_t v32 = *((void *)v31 + 1);
        *((void *)v30 + 1) = v32;
        uint64_t v33 = v9[13];
        id v34 = &v7[v33];
        uint64_t v35 = &v8[v33];
        swift_bridgeObjectRetain(v32);
        if (sub_10000AB6C((uint64_t)v35, 1LL, v11))
        {
          uint64_t v36 = sub_100006BEC(&qword_100088BD0);
          memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v34, v35, v11);
          sub_10000AB60((uint64_t)v34, 0LL, 1LL, v11);
        }

        uint64_t v37 = v9[14];
        uint64_t v38 = &v7[v37];
        uint64_t v39 = &v8[v37];
        uint64_t v40 = type metadata accessor for URL(0LL);
        if (sub_10000AB6C((uint64_t)v39, 1LL, v40))
        {
          uint64_t v41 = sub_100006BEC(&qword_100087368);
          memcpy(v38, v39, *(void *)(*(void *)(v41 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16LL))(v38, v39, v40);
          sub_10000AB60((uint64_t)v38, 0LL, 1LL, v40);
        }

        uint64_t v42 = v9[15];
        uint64_t v43 = &v7[v42];
        uint64_t v44 = &v8[v42];
        if (sub_10000AB6C((uint64_t)&v8[v42], 1LL, v11))
        {
          uint64_t v45 = sub_100006BEC(&qword_100088BD0);
          memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v43, v44, v11);
          sub_10000AB60((uint64_t)v43, 0LL, 1LL, v11);
        }

        uint64_t v46 = v9[16];
        os_log_type_t v47 = &v7[v46];
        uint64_t v48 = &v8[v46];
        if (sub_10000AB6C((uint64_t)&v8[v46], 1LL, v11))
        {
          uint64_t v49 = sub_100006BEC(&qword_100088BD0);
          memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v47, v48, v11);
          sub_10000AB60((uint64_t)v47, 0LL, 1LL, v11);
        }

        uint64_t v50 = v9[17];
        id v51 = &v7[v50];
        uint64_t v52 = &v8[v50];
        if (sub_10000AB6C((uint64_t)&v8[v50], 1LL, v11))
        {
          uint64_t v53 = sub_100006BEC(&qword_100088BD0);
          memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v51, v52, v11);
          sub_10000AB60((uint64_t)v51, 0LL, 1LL, v11);
        }

        uint64_t v54 = v9[18];
        uint64_t v55 = &v7[v54];
        uint64_t v56 = &v8[v54];
        uint64_t v57 = *(void *)v56;
        v55[8] = v56[8];
        *(void *)uint64_t v55 = v57;
        uint64_t v58 = v9[19];
        unsigned __int8 v59 = &v7[v58];
        uint64_t v60 = &v8[v58];
        *(void *)unsigned __int8 v59 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        *((void *)v59 + 1) = v61;
        uint64_t v62 = v9[20];
        uint64_t v63 = &v7[v62];
        uint64_t v64 = &v8[v62];
        *(void *)uint64_t v63 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        *((void *)v63 + 1) = v65;
        uint64_t v66 = v9[21];
        uint64_t v67 = &v7[v66];
        uint64_t v68 = &v8[v66];
        *(void *)uint64_t v67 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        *((void *)v67 + 1) = v69;
        uint64_t v70 = v9[22];
        uint64_t v71 = &v7[v70];
        uint64_t v72 = &v8[v70];
        *(void *)uint64_t v71 = *(void *)v72;
        uint64_t v73 = *((void *)v72 + 1);
        *((void *)v71 + 1) = v73;
        uint64_t v74 = v9[23];
        uint64_t v75 = &v7[v74];
        uint64_t v76 = &v8[v74];
        *(void *)uint64_t v75 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        *((void *)v75 + 1) = v77;
        swift_bridgeObjectRetain(v61);
        swift_bridgeObjectRetain(v65);
        swift_bridgeObjectRetain(v69);
        swift_bridgeObjectRetain(v73);
        swift_bridgeObjectRetain(v77);
        sub_10000AB60((uint64_t)v7, 0LL, 1LL, (uint64_t)v9);
      }

      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_1000462A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ApiAgentError(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

_BYTE *sub_1000462E4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(sub_100006BEC(&qword_100088B88) + 48);
    uint64_t v7 = &a1[v6];
    uint64_t v8 = &a2[v6];
    uint64_t v9 = (int *)type metadata accessor for ApiRequestMetrics(0LL);
    if (sub_10000AB6C((uint64_t)v8, 1LL, (uint64_t)v9))
    {
      uint64_t v10 = sub_100006BEC((uint64_t *)&unk_100088B50);
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
    }

    else
    {
      uint64_t v11 = type metadata accessor for Date(0LL);
      if (sub_10000AB6C((uint64_t)v8, 1LL, v11))
      {
        uint64_t v12 = sub_100006BEC(&qword_100088BD0);
        memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v7, v8, v11);
        sub_10000AB60((uint64_t)v7, 0LL, 1LL, v11);
      }

      uint64_t v13 = v9[5];
      uint64_t v14 = &v7[v13];
      uint64_t v15 = &v8[v13];
      if (sub_10000AB6C((uint64_t)&v8[v13], 1LL, v11))
      {
        uint64_t v16 = sub_100006BEC(&qword_100088BD0);
        memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v14, v15, v11);
        sub_10000AB60((uint64_t)v14, 0LL, 1LL, v11);
      }

      *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
      *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
      uint64_t v17 = v9[8];
      uint64_t v18 = &v7[v17];
      uint64_t v19 = &v8[v17];
      if (sub_10000AB6C((uint64_t)&v8[v17], 1LL, v11))
      {
        uint64_t v20 = sub_100006BEC(&qword_100088BD0);
        memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v18, v19, v11);
        sub_10000AB60((uint64_t)v18, 0LL, 1LL, v11);
      }

      uint64_t v21 = v9[9];
      uint64_t v22 = &v7[v21];
      uint64_t v23 = &v8[v21];
      if (sub_10000AB6C((uint64_t)&v8[v21], 1LL, v11))
      {
        uint64_t v24 = sub_100006BEC(&qword_100088BD0);
        memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v22, v23, v11);
        sub_10000AB60((uint64_t)v22, 0LL, 1LL, v11);
      }

      uint64_t v25 = v9[10];
      uint64_t v26 = &v7[v25];
      uint64_t v27 = &v8[v25];
      if (sub_10000AB6C((uint64_t)&v8[v25], 1LL, v11))
      {
        uint64_t v28 = sub_100006BEC(&qword_100088BD0);
        memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v26, v27, v11);
        sub_10000AB60((uint64_t)v26, 0LL, 1LL, v11);
      }

      v7[v9[11]] = v8[v9[11]];
      *(_OWORD *)&v7[v9[12]] = *(_OWORD *)&v8[v9[12]];
      uint64_t v29 = v9[13];
      uint64_t v30 = &v7[v29];
      uint64_t v31 = &v8[v29];
      if (sub_10000AB6C((uint64_t)&v8[v29], 1LL, v11))
      {
        uint64_t v32 = sub_100006BEC(&qword_100088BD0);
        memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v30, v31, v11);
        sub_10000AB60((uint64_t)v30, 0LL, 1LL, v11);
      }

      uint64_t v33 = v9[14];
      id v34 = &v7[v33];
      uint64_t v35 = &v8[v33];
      uint64_t v36 = type metadata accessor for URL(0LL);
      if (sub_10000AB6C((uint64_t)v35, 1LL, v36))
      {
        uint64_t v37 = sub_100006BEC(&qword_100087368);
        memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32LL))(v34, v35, v36);
        sub_10000AB60((uint64_t)v34, 0LL, 1LL, v36);
      }

      uint64_t v38 = v9[15];
      uint64_t v39 = &v7[v38];
      uint64_t v40 = &v8[v38];
      if (sub_10000AB6C((uint64_t)&v8[v38], 1LL, v11))
      {
        uint64_t v41 = sub_100006BEC(&qword_100088BD0);
        memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v39, v40, v11);
        sub_10000AB60((uint64_t)v39, 0LL, 1LL, v11);
      }

      uint64_t v42 = v9[16];
      uint64_t v43 = &v7[v42];
      uint64_t v44 = &v8[v42];
      if (sub_10000AB6C((uint64_t)&v8[v42], 1LL, v11))
      {
        uint64_t v45 = sub_100006BEC(&qword_100088BD0);
        memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v43, v44, v11);
        sub_10000AB60((uint64_t)v43, 0LL, 1LL, v11);
      }

      uint64_t v46 = v9[17];
      os_log_type_t v47 = &v7[v46];
      uint64_t v48 = &v8[v46];
      if (sub_10000AB6C((uint64_t)&v8[v46], 1LL, v11))
      {
        uint64_t v49 = sub_100006BEC(&qword_100088BD0);
        memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v47, v48, v11);
        sub_10000AB60((uint64_t)v47, 0LL, 1LL, v11);
      }

      uint64_t v50 = v9[18];
      id v51 = &v7[v50];
      uint64_t v52 = &v8[v50];
      *(void *)id v51 = *(void *)v52;
      v51[8] = v52[8];
      *(_OWORD *)&v7[v9[19]] = *(_OWORD *)&v8[v9[19]];
      *(_OWORD *)&v7[v9[20]] = *(_OWORD *)&v8[v9[20]];
      *(_OWORD *)&v7[v9[21]] = *(_OWORD *)&v8[v9[21]];
      *(_OWORD *)&v7[v9[22]] = *(_OWORD *)&v8[v9[22]];
      *(_OWORD *)&v7[v9[23]] = *(_OWORD *)&v8[v9[23]];
      sub_10000AB60((uint64_t)v7, 0LL, 1LL, (uint64_t)v9);
    }

    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

_BYTE *sub_1000468D4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000462A8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(sub_100006BEC(&qword_100088B88) + 48);
      uint64_t v7 = &a1[v6];
      uint64_t v8 = &a2[v6];
      uint64_t v9 = (int *)type metadata accessor for ApiRequestMetrics(0LL);
      if (sub_10000AB6C((uint64_t)v8, 1LL, (uint64_t)v9))
      {
        uint64_t v10 = sub_100006BEC((uint64_t *)&unk_100088B50);
        memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
      }

      else
      {
        uint64_t v11 = type metadata accessor for Date(0LL);
        if (sub_10000AB6C((uint64_t)v8, 1LL, v11))
        {
          uint64_t v12 = sub_100006BEC(&qword_100088BD0);
          memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v7, v8, v11);
          sub_10000AB60((uint64_t)v7, 0LL, 1LL, v11);
        }

        uint64_t v13 = v9[5];
        uint64_t v14 = &v7[v13];
        uint64_t v15 = &v8[v13];
        if (sub_10000AB6C((uint64_t)&v8[v13], 1LL, v11))
        {
          uint64_t v16 = sub_100006BEC(&qword_100088BD0);
          memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v14, v15, v11);
          sub_10000AB60((uint64_t)v14, 0LL, 1LL, v11);
        }

        *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
        *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
        uint64_t v17 = v9[8];
        uint64_t v18 = &v7[v17];
        uint64_t v19 = &v8[v17];
        if (sub_10000AB6C((uint64_t)&v8[v17], 1LL, v11))
        {
          uint64_t v20 = sub_100006BEC(&qword_100088BD0);
          memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v18, v19, v11);
          sub_10000AB60((uint64_t)v18, 0LL, 1LL, v11);
        }

        uint64_t v21 = v9[9];
        uint64_t v22 = &v7[v21];
        uint64_t v23 = &v8[v21];
        if (sub_10000AB6C((uint64_t)&v8[v21], 1LL, v11))
        {
          uint64_t v24 = sub_100006BEC(&qword_100088BD0);
          memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v22, v23, v11);
          sub_10000AB60((uint64_t)v22, 0LL, 1LL, v11);
        }

        uint64_t v25 = v9[10];
        uint64_t v26 = &v7[v25];
        uint64_t v27 = &v8[v25];
        if (sub_10000AB6C((uint64_t)&v8[v25], 1LL, v11))
        {
          uint64_t v28 = sub_100006BEC(&qword_100088BD0);
          memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v26, v27, v11);
          sub_10000AB60((uint64_t)v26, 0LL, 1LL, v11);
        }

        v7[v9[11]] = v8[v9[11]];
        *(_OWORD *)&v7[v9[12]] = *(_OWORD *)&v8[v9[12]];
        uint64_t v29 = v9[13];
        uint64_t v30 = &v7[v29];
        uint64_t v31 = &v8[v29];
        if (sub_10000AB6C((uint64_t)&v8[v29], 1LL, v11))
        {
          uint64_t v32 = sub_100006BEC(&qword_100088BD0);
          memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v30, v31, v11);
          sub_10000AB60((uint64_t)v30, 0LL, 1LL, v11);
        }

        uint64_t v33 = v9[14];
        id v34 = &v7[v33];
        uint64_t v35 = &v8[v33];
        uint64_t v36 = type metadata accessor for URL(0LL);
        if (sub_10000AB6C((uint64_t)v35, 1LL, v36))
        {
          uint64_t v37 = sub_100006BEC(&qword_100087368);
          memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32LL))(v34, v35, v36);
          sub_10000AB60((uint64_t)v34, 0LL, 1LL, v36);
        }

        uint64_t v38 = v9[15];
        uint64_t v39 = &v7[v38];
        uint64_t v40 = &v8[v38];
        if (sub_10000AB6C((uint64_t)&v8[v38], 1LL, v11))
        {
          uint64_t v41 = sub_100006BEC(&qword_100088BD0);
          memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v39, v40, v11);
          sub_10000AB60((uint64_t)v39, 0LL, 1LL, v11);
        }

        uint64_t v42 = v9[16];
        uint64_t v43 = &v7[v42];
        uint64_t v44 = &v8[v42];
        if (sub_10000AB6C((uint64_t)&v8[v42], 1LL, v11))
        {
          uint64_t v45 = sub_100006BEC(&qword_100088BD0);
          memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v43, v44, v11);
          sub_10000AB60((uint64_t)v43, 0LL, 1LL, v11);
        }

        uint64_t v46 = v9[17];
        os_log_type_t v47 = &v7[v46];
        uint64_t v48 = &v8[v46];
        if (sub_10000AB6C((uint64_t)&v8[v46], 1LL, v11))
        {
          uint64_t v49 = sub_100006BEC(&qword_100088BD0);
          memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v47, v48, v11);
          sub_10000AB60((uint64_t)v47, 0LL, 1LL, v11);
        }

        uint64_t v50 = v9[18];
        id v51 = &v7[v50];
        uint64_t v52 = &v8[v50];
        *(void *)id v51 = *(void *)v52;
        v51[8] = v52[8];
        *(_OWORD *)&v7[v9[19]] = *(_OWORD *)&v8[v9[19]];
        *(_OWORD *)&v7[v9[20]] = *(_OWORD *)&v8[v9[20]];
        *(_OWORD *)&v7[v9[21]] = *(_OWORD *)&v8[v9[21]];
        *(_OWORD *)&v7[v9[22]] = *(_OWORD *)&v8[v9[22]];
        *(_OWORD *)&v7[v9[23]] = *(_OWORD *)&v8[v9[23]];
        sub_10000AB60((uint64_t)v7, 0LL, 1LL, (uint64_t)v9);
      }

      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_100046EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

void sub_100046EF0(uint64_t a1)
{
  v5[0] = &unk_100068860;
  sub_100046F74(319LL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, &unk_100068878, *(void *)(v2 - 8) + 64LL);
    v5[1] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v5);
  }

void sub_100046F74(uint64_t a1)
{
  if (!qword_100087D68)
  {
    uint64_t v2 = type metadata accessor for ApiRequestMetrics(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100087D68);
    }
  }

unint64_t sub_100046FCC()
{
  unint64_t result = qword_100088FE0;
  if (!qword_100088FE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000688D0, &unk_100080A88);
    atomic_store(result, (unint64_t *)&qword_100088FE0);
  }

  return result;
}

unint64_t sub_10004700C()
{
  unint64_t result = qword_100088FE8;
  if (!qword_100088FE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068938, &unk_1000809F8);
    atomic_store(result, (unint64_t *)&qword_100088FE8);
  }

  return result;
}

unint64_t sub_10004704C()
{
  unint64_t result = qword_100088FF0;
  if (!qword_100088FF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000689A0, &unk_100080968);
    atomic_store(result, (unint64_t *)&qword_100088FF0);
  }

  return result;
}

unint64_t sub_10004708C()
{
  unint64_t result = qword_100088FF8;
  if (!qword_100088FF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068A08, &unk_1000808D8);
    atomic_store(result, (unint64_t *)&qword_100088FF8);
  }

  return result;
}

unint64_t sub_1000470CC()
{
  unint64_t result = qword_100089000;
  if (!qword_100089000)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068A70, &unk_100080848);
    atomic_store(result, (unint64_t *)&qword_100089000);
  }

  return result;
}

uint64_t sub_10004710C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return sub_1000446DC(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL));
}

uint64_t sub_10004712C()
{
  return ((uint64_t (*)(void))Error<>._code.getter)();
}

uint64_t sub_100047138@<X0>(uint64_t a1@<X8>)
{
  return Dictionary.init(dictionaryLiteral:)(v1, a1);
}

unint64_t sub_100047144(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

__n128 *sub_10004714C(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 1868983913LL;
  result[2].n128_u64[1] = 0xE400000000000000LL;
  return result;
}

uint64_t sub_100047164(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_100047170()
{
  return swift_getEnumCaseMultiPayload(v0, v1);
}

void sub_10004717C(void *a1@<X8>)
{
  *a1 = -1000LL;
}

  ;
}

uint64_t sub_100047194()
{
  return type metadata accessor for ApiAgentError(0LL);
}

uint64_t sub_10004719C()
{
  return v0;
}

uint64_t sub_1000471B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v3[9] = a3;
  v3[6] = result;
  v3[7] = a2;
  return result;
}

uint64_t sub_1000471BC()
{
  if (qword_1000870B8 != -1) {
    swift_once(&qword_1000870B8, sub_100047494);
  }
  uint64_t v0 = unk_10008F2C0;
  v11[0] = 0x2079654B697041LL;
  v11[1] = 0xE700000000000000LL;
  uint64_t v1 = qword_100087040;
  swift_bridgeObjectRetain(unk_10008F2C0);
  if (v1 != -1) {
    swift_once(&qword_100087040, sub_100023F64);
  }
  swift_beginAccess(&static Secrets.tempoAPIKey, v10, 0LL, 0LL);
  uint64_t v2 = static Secrets.tempoAPIKey;
  unint64_t v3 = (void *)qword_10008F1F0;
  swift_bridgeObjectRetain(qword_10008F1F0);
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  sub_100047760();
  v11[0] = &_swiftEmptyDictionarySingleton;
  sub_100060CA8();
  uint64_t v5 = v11[0];
  swift_bridgeObjectRelease(v0);
  sub_100047758();
  uint64_t v6 = sub_100047330();
  char v7 = sub_100047760();
  v11[0] = v5;
  sub_1000474F0((uint64_t)v6, (uint64_t)sub_100047718, 0LL, v7, v11);
  uint64_t v8 = v11[0];
  sub_100047758();
  return v8;
}

void *sub_100047330()
{
  uint64_t v0 = type metadata accessor for Locale(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000870C0 != -1) {
    swift_once(&qword_1000870C0, sub_1000474C4);
  }
  uint64_t v4 = unk_10008F2D0;
  swift_bridgeObjectRetain(unk_10008F2D0);
  sub_100047760();
  uint64_t v11 = &_swiftEmptyDictionarySingleton;
  sub_100060CA8();
  uint64_t v5 = v11;
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = sub_100047758();
  uint64_t v7 = static Locale.autoupdatingCurrent.getter(v6);
  Locale.identifier.getter(v7);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_isUniquelyReferenced_nonNull_native(v5);
  uint64_t v11 = v5;
  sub_100060CA8();
  uint64_t v8 = v11;
  sub_100047758();
  return v8;
}

void sub_100047494()
{
  unk_10008F2C6 = -4864;
}

void sub_1000474C4()
{
  unk_10008F2D5 = 0;
  unk_10008F2D6 = -5120;
}

uint64_t sub_1000474F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v43 = v44;
  uint64_t v41 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v42 = a3;
  swift_retain(a3);
  uint64_t v9 = sub_10006124C();
  if (v10)
  {
    uint64_t v13 = v9;
    uint64_t v14 = v10;
    uint64_t v15 = v11;
    uint64_t v16 = v12;
    while (1)
    {
      uint64_t v17 = (void *)*a5;
      unint64_t v19 = sub_100015FF4(v13, v14);
      uint64_t v20 = v17[2];
      BOOL v21 = (v18 & 1) == 0;
      uint64_t v22 = v20 + v21;
      if (__OFADD__(v20, v21)) {
        break;
      }
      char v23 = v18;
      if (v17[3] >= v22)
      {
        if ((a4 & 1) == 0)
        {
          sub_100006BEC(&qword_100089008);
          _NativeDictionary.copy()();
        }
      }

      else
      {
        sub_1000605B8(v22, a4 & 1);
        unint64_t v24 = sub_100015FF4(v13, v14);
        if ((v23 & 1) != (v25 & 1)) {
          goto LABEL_17;
        }
        unint64_t v19 = v24;
      }

      uint64_t v26 = (void *)*a5;
      if ((v23 & 1) != 0)
      {
        uint64_t v27 = (uint64_t *)(v26[7] + 16 * v19);
        uint64_t v29 = *v27;
        uint64_t v28 = v27[1];
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(v16);
        uint64_t v30 = (void *)(v26[7] + 16 * v19);
        swift_bridgeObjectRelease(v30[1]);
        *uint64_t v30 = v29;
        v30[1] = v28;
      }

      else
      {
        v26[(v19 >> 6) + 8] |= 1LL << v19;
        uint64_t v31 = (uint64_t *)(v26[6] + 16 * v19);
        *uint64_t v31 = v13;
        v31[1] = v14;
        uint64_t v32 = (void *)(v26[7] + 16 * v19);
        *uint64_t v32 = v15;
        v32[1] = v16;
        uint64_t v33 = v26[2];
        BOOL v34 = __OFADD__(v33, 1LL);
        uint64_t v35 = v33 + 1;
        if (v34) {
          goto LABEL_16;
        }
        void v26[2] = v35;
      }

      uint64_t v13 = sub_10006124C();
      uint64_t v14 = v36;
      uint64_t v15 = v37;
      uint64_t v16 = v38;
      a4 = 1;
      if (!v36) {
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }

  else
  {
LABEL_14:
    swift_bridgeObjectRelease(v41);
    uint64_t v39 = v45;
    swift_release(v42);
    sub_100018C5C(v43);
    return swift_release(v39);
  }

  return result;
}

uint64_t sub_100047718@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100060278(v7, *a1, a1[1], a1[2], a1[3]);
  uint64_t v4 = v7[0];
  uint64_t v5 = v7[1];
  *a2 = result;
  a2[1] = v6;
  a2[2] = v4;
  a2[3] = v5;
  return result;
}

uint64_t sub_100047758()
{
  return swift_bridgeObjectRelease(0x8000000000000000LL);
}

uint64_t sub_100047760()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_100047768(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000477A0 + 4 * byte_100068BD0[a1]))( 0xD000000000000012LL,  0x800000010006A830LL);
}

void sub_1000477A0()
{
}

uint64_t sub_1000477F0()
{
  return 0x4B434F4C435F5654LL;
}

uint64_t sub_100047814(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 40);
  if (!v3 || !*(void *)(v3 + 16)) {
    return 2LL;
  }
  swift_bridgeObjectRetain(a2);
  unint64_t v6 = sub_100015FF4(a1, a2);
  if ((v7 & 1) == 0)
  {
    uint64_t v18 = a2;
LABEL_23:
    swift_bridgeObjectRelease(v18);
    return 2LL;
  }

  uint64_t v8 = *(void *)(*(void *)(v3 + 56) + 8 * v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(a2);
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9)
  {
    uint64_t v18 = v8;
    goto LABEL_23;
  }

  swift_bridgeObjectRetain(v8);
  uint64_t v10 = (uint64_t *)(v8 + 56);
  uint64_t v11 = &qword_10008F2F8;
  while (1)
  {
    uint64_t v13 = *(v10 - 3);
    uint64_t v12 = *(v10 - 2);
    uint64_t v15 = *(v10 - 1);
    uint64_t v14 = *v10;
    uint64_t v16 = qword_1000870D8;
    swift_bridgeObjectRetain(v12);
    sub_10000C610();
    if (v16 != -1) {
      swift_once(&qword_1000870D8, sub_100047AA8);
    }
    BOOL v17 = v13 == qword_10008F2F8 && v12 == unk_10008F300;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, qword_10008F2F8, unk_10008F300, 0LL) & 1) != 0) {
      break;
    }
    v10 += 4;
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
    if (!--v9)
    {
      sub_10004BE20();
      return (uint64_t)v11;
    }
  }

  sub_10004BE20();
  swift_bridgeObjectRelease(v12);
  if (v14)
  {
    if (v15 == 1702195828 && v14 == 0xE400000000000000LL) {
      char v20 = 1;
    }
    else {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, 1702195828LL, 0xE400000000000000LL, 0LL);
    }
    swift_bridgeObjectRelease(v14);
    return v20 & 1;
  }

  return (uint64_t)v11;
}

void sub_1000479B0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007E230, v2);
  sub_10001919C();
  sub_10000C510();
}

void sub_1000479F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_1000479FC()
{
}

uint64_t sub_100047A04(uint64_t a1)
{
  return sub_100041D10(a1, *v1);
}

void sub_100047A0C(uint64_t a1)
{
}

void sub_100047A14(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

uint64_t sub_100047A40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100047768(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100047A68()
{
}

void sub_100047A8C()
{
}

void sub_100047AA8()
{
  qword_10008F2F8 = 0x495349565F504250LL;
  unk_10008F300 = 0xEB00000000454C42LL;
}

uint64_t sub_100047AD4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010006C300LL;
    if (a2 == 0x800000010006C300LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010006C300LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x800000010006C320LL)
  {
    unint64_t v6 = 0x800000010006C320LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010006C320LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x800000010006C340LL)
  {
    unint64_t v7 = 0x800000010006C340LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010006C340LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 0x4C70656544707061LL && a2 == 0xEE004C52556B6E69LL)
  {
    swift_bridgeObjectRelease(a2);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4C70656544707061LL, 0xEE004C52556B6E69LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_100047C8C()
{
  return 4LL;
}

uint64_t sub_100047C94(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100047CCC + 4 * byte_100068BD6[a1]))( 0xD000000000000010LL,  0x800000010006C300LL);
}

uint64_t sub_100047CCC(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_100047CF4()
{
  return 0x4C70656544707061LL;
}

void sub_100047D18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  uint64_t v38 = v24;
  uint64_t v39 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v31 = sub_100006BEC(&qword_100089230);
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v34 = v30[3];
  uint64_t v33 = v30[4];
  sub_100006C2C(v30, v34);
  unint64_t v35 = sub_10004B65C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &_s20RegistrationResponseV5LinksV10CodingKeysON,  &_s20RegistrationResponseV5LinksV10CodingKeysON,  v35,  v34,  v33);
  a10 = v28;
  char v40 = 0;
  uint64_t v36 = sub_100006BEC(&qword_100087B50);
  sub_10004AD24((uint64_t)&unk_100089160);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&a10, &v40, v31, v36, v37);
  if (!v20)
  {
    a10 = v39;
    sub_10004BC04(1);
    a10 = v26;
    sub_10004BC04(2);
    a10 = v38;
    sub_10004BC04(3);
  }

  sub_10004BDB4(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
  sub_10004BC28();
}

void sub_100047E70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = v11;
  uint64_t v13 = sub_100006BEC(&qword_100089200);
  __chkstk_darwin(v13);
  sub_10003BC1C();
  uint64_t v14 = v12[3];
  uint64_t v15 = v12[4];
  sub_100006C2C(v12, v14);
  unint64_t v16 = sub_10004B65C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &_s20RegistrationResponseV5LinksV10CodingKeysON,  &_s20RegistrationResponseV5LinksV10CodingKeysON,  v16,  v14,  v15);
  if (v10)
  {
    sub_10002F018();
  }

  else
  {
    uint64_t v17 = sub_100006BEC(&qword_100087B50);
    char v20 = 0;
    sub_10004AD24((uint64_t)&qword_1000885B0);
    uint64_t v19 = v18;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &v20, v13, v17, v18);
    sub_10004BE9C(1);
    sub_10004BC90();
    sub_10004BE9C(2);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v17, &v20, v13, v17, v19);
    char v20 = 3;
    swift_bridgeObjectRetain(a10);
    sub_10004BC90();
    sub_10004BC80();
    sub_10000C610();
    sub_10002F018();
    swift_bridgeObjectRelease(a10);
    sub_100019394();
    sub_100019394();
    swift_bridgeObjectRelease(a10);
  }

  sub_10004BC28();
}

BOOL sub_1000480B0(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_1000480C0(uint64_t a1, char a2)
{
}

void sub_1000480E4(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x65727574616566LL && a2 == 0xE700000000000000LL;
  if (v3
    || (sub_10004BE30(0x65727574616566LL, 0xE700000000000000LL) & 1) != 0
    || (a1 == 0x65756C6176LL ? (BOOL v5 = a2 == 0xE500000000000000LL) : (BOOL v5 = 0), v5))
  {
    sub_10001919C();
  }

  else
  {
    sub_10004BE30(0x65756C6176LL, 0xE500000000000000LL);
    sub_10001919C();
  }

  sub_10000C510();
}

uint64_t sub_100048198()
{
  return 2LL;
}

void sub_1000481A0(uint64_t a1)
{
}

uint64_t sub_1000481CC(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x65756C6176LL;
  }
  else {
    return 0x65727574616566LL;
  }
}

void sub_100048200( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v27;
  a23 = v28;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v47 = v33;
  uint64_t v45 = v34;
  uint64_t v46 = v35;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  sub_100006BEC(v40);
  sub_10000C6D8();
  __chkstk_darwin(v41);
  sub_10000C42C();
  uint64_t v42 = v39[3];
  uint64_t v43 = v39[4];
  sub_100006C2C(v39, v42);
  uint64_t v44 = v32();
  dispatch thunk of Encoder.container<A>(keyedBy:)(v30, v30, v44, v42, v43);
  a13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v37, v47, &a13, v23);
  if (!v24)
  {
    a12 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45, v46, &a12, v23);
  }

  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v23);
  sub_10004BC28();
}

void sub_1000482EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v24;
  a23 = v25;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v39 = sub_100006BEC(v32);
  __chkstk_darwin(v39);
  sub_10003BC1C();
  uint64_t v33 = v31[3];
  uint64_t v34 = v31[4];
  sub_100006C2C(v31, v33);
  uint64_t v35 = v29();
  dispatch thunk of Decoder.container<A>(keyedBy:)(v27, v27, v35, v33, v34);
  if (v23)
  {
    sub_10004BE5C();
  }

  else
  {
    a13 = 0;
    KeyedDecodingContainer.decode(_:forKey:)(&a13, v39);
    a12 = 1;
    swift_bridgeObjectRetain(v36);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a12, v39);
    uint64_t v38 = v37;
    sub_10004BD10();
    swift_bridgeObjectRetain(v38);
    sub_10004BE5C();
    sub_10004BE08();
    sub_100019820();
  }

  sub_10004BC28();
}

void sub_10004843C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007E2E0, v2);
  sub_10001919C();
  sub_10000C510();
}

uint64_t sub_100048480(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000484BC + 4 * byte_100068BDA[a1]))( 0xD000000000000013LL,  0x800000010006A8D0LL);
}

void sub_1000484C0()
{
}

unint64_t sub_1000484E0()
{
  return sub_10004BD80();
}

uint64_t sub_1000484F4()
{
  return 2003134838LL;
}

uint64_t sub_100048504(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100048540 + 4 * byte_100068BE2[a1]))( 0xD000000000000013LL,  0x800000010006A8D0LL);
}

void sub_100048544()
{
}

unint64_t sub_100048564()
{
  return sub_10004BD80();
}

uint64_t sub_100048578()
{
  return 2003134838LL;
}

void sub_100048588()
{
  unint64_t v5 = sub_10004BE64();
  sub_10004BD58((uint64_t)&unk_100080D78, v6, v5);
  uint64_t v7 = v1[3];
  uint64_t v18 = *v1;
  __int128 v19 = *(_OWORD *)(v1 + 1);
  uint64_t v20 = v7;
  char v17 = 0;
  unint64_t v8 = sub_10004AD70();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v0, &unk_100080EF0, v8);
  if (!v2)
  {
    sub_10004BD38(v1[7], *((unsigned __int8 *)v1 + 64), 1);
    sub_10004BD38(v1[9], *((unsigned __int8 *)v1 + 80), 2);
    uint64_t v18 = v1[4];
    char v17 = 3;
    sub_100006BEC(&qword_1000890E0);
    unint64_t v9 = sub_10004ADAC();
    sub_10004BC60(v9);
    uint64_t v18 = v1[5];
    char v17 = 4;
    sub_100006BEC(&qword_100089108);
    unint64_t v10 = sub_10004AE74();
    sub_10004BC60(v10);
    uint64_t v18 = v1[6];
    char v17 = 5;
    sub_100006BEC(&qword_100089130);
    unint64_t v11 = sub_10004AF90();
    sub_10004BC60(v11);
    uint64_t v12 = v1[11];
    uint64_t v13 = v1[12];
    LOBYTE(v1sub_100006E64(v0 + 8) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v18, v0);
    uint64_t v14 = (uint64_t)v1 + *(int *)(_s20RegistrationResponseVMa(0LL) + 44);
    LOBYTE(v1sub_100006E64(v0 + 8) = 7;
    uint64_t v15 = type metadata accessor for SportingEventViewContext(0LL);
    sub_10004B014((uint64_t)&unk_1000891C8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, &v18, v0, v15, v16);
  }

  sub_10004BDB4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_10004BDA0();
}

void sub_1000487A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v25;
  a23 = v26;
  uint64_t v28 = v27;
  uint64_t v47 = v29;
  uint64_t v30 = sub_100006BEC(&qword_1000887B8);
  __chkstk_darwin(v30);
  sub_10000C42C();
  uint64_t v48 = sub_100006BEC(&qword_1000890C8);
  __chkstk_darwin(v48);
  sub_100019488();
  uint64_t v31 = _s20RegistrationResponseVMa(0LL);
  __chkstk_darwin(v31);
  sub_100019488();
  uint64_t v49 = v33 - v32;
  uint64_t v34 = *(void *)(v28 + 24);
  uint64_t v35 = *(void *)(v28 + 32);
  unint64_t v36 = sub_10004BE64();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_100080D78, &unk_100080D78, v36, v34, v35);
  if (v23)
  {
    sub_10000E5A8();
  }

  else
  {
    a13 = 0;
    unint64_t v37 = sub_10004A9C8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&unk_100080EF0, &a13, v48, &unk_100080EF0, v37);
    uint64_t v38 = v52;
    *(void *)uint64_t v49 = v50;
    *(_OWORD *)(v49 + sub_100006E64(v0 + 8) = v51;
    *(void *)(v49 + 2sub_100006E64(v0 + 4) = v38;
    *(void *)(v49 + 5sub_100006E64(v0 + 6) = sub_10004BDDC(1);
    *(_BYTE *)(v49 + 6sub_100006E64(v0 + 4) = v39 & 1;
    *(void *)(v49 + 7sub_100006E64(v0 + 2) = sub_10004BDDC(2);
    *(_BYTE *)(v49 + 80) = v40 & 1;
    sub_100006BEC(&qword_1000890E0);
    a13 = 3;
    unint64_t v41 = sub_10004AA04();
    sub_10004BC40(v41);
    *(void *)(v49 + 3sub_100006E64(v0 + 2) = v50;
    sub_100006BEC(&qword_100089108);
    a13 = 4;
    unint64_t v42 = sub_10004AACC();
    sub_10004BC40(v42);
    *(void *)(v49 + 40) = v50;
    sub_100006BEC(&qword_100089130);
    a13 = 5;
    unint64_t v43 = sub_10004AB94();
    sub_10004BC40(v43);
    *(void *)(v49 + 4sub_100006E64(v0 + 8) = v50;
    LOBYTE(v50) = 6;
    *(void *)(v49 + 8sub_100006E64(v0 + 8) = KeyedDecodingContainer.decode(_:forKey:)(&v50, v48);
    *(void *)(v49 + 9sub_100006E64(v0 + 6) = v44;
    uint64_t v45 = type metadata accessor for SportingEventViewContext(0LL);
    LOBYTE(v50) = 7;
    sub_10004B014((uint64_t)&unk_100089140);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v45, &v50, v48, v45, v46);
    sub_10004BBCC();
    sub_10004AC18(v24, v49 + *(int *)(v31 + 44));
    sub_10000BB24(v49, v47);
    sub_10000E5A8();
    sub_10004AC60(v49);
  }

  sub_10004BC28();
}

uint64_t sub_100048B7C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6556746E65696C63LL && a2 == 0xED00006E6F697372LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6556746E65696C63LL, 0xED00006E6F697372LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else
  {
    BOOL v6 = a1 == 0x6556616D65686373LL && a2 == 0xED00006E6F697372LL;
    if (v6
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6556616D65686373LL, 0xED00006E6F697372LL, a1, a2, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(a2);
      return 1LL;
    }

    else
    {
      BOOL v7 = a1 == 0x6E656B6F74LL && a2 == 0xE500000000000000LL;
      if (v7
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F74LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a2);
        return 2LL;
      }

      else
      {
        BOOL v8 = a1 == 1701869940 && a2 == 0xE400000000000000LL;
        if (v8
          || (_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(a2);
          return 3LL;
        }

        else
        {
          BOOL v9 = a1 == 0x746163696C707061LL && a2 == 0xEB000000006E6F69LL;
          if (v9
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746163696C707061LL, 0xEB000000006E6F69LL, a1, a2, 0LL) & 1) != 0)
          {
            swift_bridgeObjectRelease(a2);
            return 4LL;
          }

          else
          {
            BOOL v10 = a1 == 0x6163696E6F6E6163LL && a2 == 0xEC0000007364496CLL;
            if (v10
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6163696E6F6E6163LL, 0xEC0000007364496CLL, a1, a2, 0LL) & 1) != 0)
            {
              swift_bridgeObjectRelease(a2);
              return 5LL;
            }

            else
            {
              BOOL v11 = a1 == 0x6574656D61726170LL && a2 == 0xEA00000000007372LL;
              if (v11
                || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6574656D61726170LL, 0xEA00000000007372LL, a1, a2, 0LL) & 1) != 0)
              {
                swift_bridgeObjectRelease(a2);
                return 6LL;
              }

              else if (a1 == 0x656469727265766FLL && a2 == 0xE800000000000000LL)
              {
                swift_bridgeObjectRelease(a2);
                return 7LL;
              }

              else
              {
                char v13 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x656469727265766FLL,  0xE800000000000000LL,  a1,  a2,  0LL);
                swift_bridgeObjectRelease(a2);
                if ((v13 & 1) != 0) {
                  return 7LL;
                }
                else {
                  return 8LL;
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_100048EA8()
{
  return 8LL;
}

void sub_100048EB0(uint64_t a1)
{
}

uint64_t sub_100048EDC(char a1)
{
  return *(void *)&aClientveschema[8 * a1];
}

void sub_100048EFC(void *a1)
{
  uint64_t v5 = v2;
  sub_100006BEC(&qword_100089148);
  sub_10000C6D8();
  __chkstk_darwin(v7);
  sub_100006C2C(a1, a1[3]);
  unint64_t v8 = sub_10004AC9C();
  sub_10004BD58((uint64_t)&_s23RegistrationRequestBodyV10CodingKeysON, v9, v8);
  uint64_t v10 = *(void *)v5;
  uint64_t v11 = *(void *)(v5 + 8);
  LOBYTE(v23) = 0;
  sub_10004BBF0(v10, v11);
  if (!v3)
  {
    uint64_t v12 = *(void *)(v5 + 16);
    uint64_t v13 = *(void *)(v5 + 24);
    LOBYTE(v23) = 1;
    sub_10004BBF0(v12, v13);
    uint64_t v14 = *(void *)(v5 + 32);
    uint64_t v15 = *(void *)(v5 + 40);
    LOBYTE(v23) = 2;
    sub_10004BBF0(v14, v15);
    uint64_t v16 = *(void *)(v5 + 48);
    uint64_t v17 = *(void *)(v5 + 56);
    LOBYTE(v23) = 3;
    sub_10004BBF0(v16, v17);
    uint64_t v18 = *(void *)(v5 + 64);
    uint64_t v19 = *(void *)(v5 + 72);
    LOBYTE(v23) = 4;
    sub_10004BBF0(v18, v19);
    uint64_t v23 = *(void *)(v5 + 80);
    sub_100006BEC(&qword_100087B00);
    sub_10004ACD8((uint64_t)&unk_100089158);
    sub_10004BCD8(v20);
    uint64_t v23 = *(void *)(v5 + 88);
    sub_100006BEC(&qword_100087B50);
    sub_10004AD24((uint64_t)&unk_100089160);
    sub_10004BCD8(v21);
    uint64_t v22 = *(unsigned __int8 *)(v5 + 96);
    LOBYTE(v23) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v23, v1);
  }

  sub_10004BDB4(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_10004BDA0();
}

void sub_1000490BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v27 = sub_100006BEC(&qword_100089168);
  __chkstk_darwin(v27);
  sub_100019488();
  uint64_t v28 = v24[3];
  uint64_t v29 = v24[4];
  sub_100006C2C(v24, v28);
  unint64_t v30 = sub_10004AC9C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &_s23RegistrationRequestBodyV10CodingKeysON,  &_s23RegistrationRequestBodyV10CodingKeysON,  v30,  v28,  v29);
  if (v20)
  {
    sub_10004BE4C();
  }

  else
  {
    LOBYTE(a10) = 0;
    uint64_t v31 = sub_10004BBDC();
    sub_10004BD20(v32, 1);
    uint64_t v53 = sub_10004BBDC();
    sub_10004BD20(v33, 2);
    uint64_t v52 = sub_10004BBDC();
    sub_10004BD20(v34, 3);
    uint64_t v51 = sub_10004BBDC();
    LOBYTE(a10) = 4;
    uint64_t v55 = v35;
    swift_bridgeObjectRetain(v35);
    uint64_t v36 = sub_10004BBDC();
    uint64_t v54 = v37;
    uint64_t v50 = v36;
    uint64_t v38 = sub_100006BEC(&qword_100087B00);
    char v56 = 5;
    sub_10004ACD8((uint64_t)&unk_100089170);
    uint64_t v40 = v39;
    swift_bridgeObjectRetain(v54);
    sub_10004BE10(v38, (uint64_t)&v56, v27, v38);
    if (v40)
    {
      sub_10004BBBC();
      sub_10004BD30();
      sub_10004BD50();
      sub_10004BDC0();
      sub_10004BDF0();
      swift_bridgeObjectRelease(v54);
      char v41 = 0;
    }

    else
    {
      uint64_t v42 = a10;
      uint64_t v47 = sub_100006BEC(&qword_100087B50);
      char v56 = 6;
      sub_10004AD24((uint64_t)&qword_1000885B0);
      uint64_t v44 = v43;
      uint64_t v49 = v42;
      sub_10000C610();
      sub_10004BE10(v47, (uint64_t)&v56, v27, v47);
      if (!v44)
      {
        uint64_t v45 = a10;
        LOBYTE(a10) = 7;
        uint64_t v48 = v45;
        swift_bridgeObjectRetain(v45);
        char v46 = KeyedDecodingContainer.decode(_:forKey:)(&a10, v27);
        sub_10004BBBC();
        sub_10004BE4C();
        swift_bridgeObjectRelease(v48);
        sub_100019820();
        swift_bridgeObjectRelease(v54);
        sub_10004BE08();
        sub_100019394();
        sub_10002EFFC();
        swift_bridgeObjectRelease(v28);
        *(void *)uint64_t v26 = v31;
        *(void *)(v26 + sub_100006E64(v0 + 8) = v28;
        *(void *)(v26 + 1sub_100006E64(v0 + 6) = v53;
        *(void *)(v26 + 2sub_100006E64(v0 + 4) = v28;
        *(void *)(v26 + 3sub_100006E64(v0 + 2) = v52;
        *(void *)(v26 + 40) = v28;
        *(void *)(v26 + 4sub_100006E64(v0 + 8) = v51;
        *(void *)(v26 + 5sub_100006E64(v0 + 6) = v55;
        *(void *)(v26 + 6sub_100006E64(v0 + 4) = v50;
        *(void *)(v26 + 7sub_100006E64(v0 + 2) = v54;
        *(void *)(v26 + 80) = v49;
        *(void *)(v26 + 8sub_100006E64(v0 + 8) = v48;
        *(_BYTE *)(v26 + 9sub_100006E64(v0 + 6) = v46 & 1;
        goto LABEL_6;
      }

      sub_10004BBBC();
      sub_10004BD30();
      sub_10004BD50();
      sub_10004BDC0();
      sub_10004BDF0();
      sub_10004BE88();
      swift_bridgeObjectRelease(v42);
      char v41 = 1;
    }

    sub_10004BE4C();
    sub_10004BD30();
    sub_10004BD50();
    sub_10004BDC0();
    sub_10004BDF0();
    sub_10004BE88();
    if ((v41 & 1) != 0) {
      sub_100019820();
    }
  }

LABEL_6:
  sub_10004BC28();
}

void sub_100049510()
{
}

BOOL sub_100049534(char *a1, char *a2)
{
  return sub_10000CCF8(*a1, *a2);
}

void sub_100049540()
{
}

void sub_100049558(uint64_t a1)
{
}

uint64_t sub_100049564()
{
  return sub_100047C94(*v0);
}

uint64_t sub_10004956C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100047AD4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100049590()
{
  return sub_1000078E8();
}

uint64_t sub_1000495AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100047C8C();
  *a1 = result;
  return result;
}

uint64_t sub_1000495D0(uint64_t a1)
{
  unint64_t v2 = sub_10004B65C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000495F8(uint64_t a1)
{
  unint64_t v2 = sub_10004B65C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100049620( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  if (!v9)
  {
    *a9 = v11;
    a9[1] = v12;
    a9[2] = v13;
    a9[3] = v14;
  }

#error "10004965C: call analysis failed (funcsize=7)"
uint64_t sub_100049668(uint64_t a1)
{
  unint64_t v2;
  unint64_t v2 = sub_10004B698();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100049690(uint64_t a1)
{
  unint64_t v2 = sub_10004B698();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000496B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100049834( a1,  a2,  a3,  &unk_100089210,  sub_10004B698,  &_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysON);
}

#error "10004970C: call analysis failed (funcsize=10)"
BOOL sub_100049718(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000480B0(*a1, *a2);
}

void sub_100049724()
{
}

void sub_10004973C(uint64_t a1)
{
}

void sub_100049744(uint64_t a1)
{
  int v1 = sub_10004BE90(a1);
  sub_100042B20(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_1000197CC();
  sub_100042A64();
}

uint64_t sub_100049768()
{
  return sub_1000481CC(*v0);
}

void sub_100049770(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = v4;
}

uint64_t sub_100049794@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100048198();
  *a1 = result;
  return result;
}

uint64_t sub_1000497B8(uint64_t a1)
{
  unint64_t v2 = sub_10004B6D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000497E0(uint64_t a1)
{
  unint64_t v2 = sub_10004B6D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100049808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100049834( a1,  a2,  a3,  &unk_100089220,  sub_10004B6D4,  &_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysON);
}

#error "100049850: call analysis failed (funcsize=14)"
#error "100049894: call analysis failed (funcsize=10)"
void sub_1000498A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  sub_100041970(*a1, *a2);
}

void sub_1000498AC()
{
}

uint64_t sub_1000498B4(uint64_t a1)
{
  return sub_100041D5C(a1, *v1);
}

void sub_1000498BC(uint64_t a1)
{
}

void sub_1000498C4(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

uint64_t sub_1000498F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100048480(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100049918()
{
  return sub_100048504(*v0);
}

uint64_t sub_100049920@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10004847C(a1);
  *a2 = result;
  return result;
}

void sub_100049944(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100049950(uint64_t a1)
{
  unint64_t v2 = sub_10004A98C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100049978(uint64_t a1)
{
  unint64_t v2 = sub_10004A98C();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "1000499A8: call analysis failed (funcsize=5)"
void sub_1000499B4()
{
  sub_100048588();
}

uint64_t sub_1000499C8()
{
  return sub_100048EDC(*v0);
}

uint64_t sub_1000499D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100048B7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000499F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100048EA8();
  *a1 = result;
  return result;
}

uint64_t sub_100049A18(uint64_t a1)
{
  unint64_t v2 = sub_10004AC9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100049A40(uint64_t a1)
{
  unint64_t v2 = sub_10004AC9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100049A68( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  if (!v9) {
    memcpy(a9, __src, 0x61uLL);
  }
}

void sub_100049AB0(void *a1)
{
}

uint64_t sub_100049AC4(void *a1)
{
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t sub_100049B14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + sub_100006E64(v0 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 1sub_100006E64(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100006E64(v0 + 4) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 4sub_100006E64(v0 + 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 5sub_100006E64(v0 + 6) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 6sub_100006E64(v0 + 4) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100006E64(v0 + 2) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 8sub_100006E64(v0 + 8) = v9;
  *(_BYTE *)(a1 + 9sub_100006E64(v0 + 6) = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_100049BB8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + sub_100006E64(v0 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 1sub_100006E64(v0 + 6) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 2sub_100006E64(v0 + 4) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 4sub_100006E64(v0 + 8) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 5sub_100006E64(v0 + 6) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 6sub_100006E64(v0 + 4) = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 7sub_100006E64(v0 + 2) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a2 + 88);
  uint64_t v17 = *(void *)(a1 + 88);
  *(void *)(a1 + 8sub_100006E64(v0 + 8) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 9sub_100006E64(v0 + 6) = *(_BYTE *)(a2 + 96);
  return a1;
}

void *sub_100049CBC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x61uLL);
}

uint64_t sub_100049CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + sub_100006E64(v0 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 1sub_100006E64(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100006E64(v0 + 4) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 4sub_100006E64(v0 + 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 5sub_100006E64(v0 + 6) = v10;
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 6sub_100006E64(v0 + 4) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease(*(void *)(a1 + 72));
  uint64_t v12 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 7sub_100006E64(v0 + 2) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a1 + 88);
  *(void *)(a1 + 8sub_100006E64(v0 + 8) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 9sub_100006E64(v0 + 6) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t sub_100049D60(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 97))
    {
      LODWORD(vsub_100006E64(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100006E64(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_100006E64(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100049DA0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8sub_100006E64(v0 + 8) = 0LL;
    *(_OWORD *)(result + 7sub_100006E64(v0 + 2) = 0u;
    *(_OWORD *)(result + 5sub_100006E64(v0 + 6) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 2sub_100006E64(v0 + 4) = 0u;
    *(_OWORD *)(result + sub_100006E64(v0 + 8) = 0u;
    *(_BYTE *)(result + 9sub_100006E64(v0 + 6) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 9sub_100006E64(v0 + 7) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + sub_100006E64(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 9sub_100006E64(v0 + 7) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void _s23RegistrationRequestBodyVMa()
{
}

uint64_t sub_100049E08(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    *(void *)(a1 + sub_100006E64(v0 + 8) = v6;
    *(void *)(a1 + 1sub_100006E64(v0 + 6) = v7;
    uint64_t v8 = a2[3];
    uint64_t v9 = a2[4];
    *(void *)(a1 + 2sub_100006E64(v0 + 4) = v8;
    *(void *)(a1 + 3sub_100006E64(v0 + 2) = v9;
    uint64_t v11 = a2[5];
    uint64_t v10 = a2[6];
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 4sub_100006E64(v0 + 8) = v10;
    *(void *)(a1 + 5sub_100006E64(v0 + 6) = a2[7];
    *(_BYTE *)(a1 + 6sub_100006E64(v0 + 4) = *((_BYTE *)a2 + 64);
    uint64_t v12 = a2[9];
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(void *)(a1 + 7sub_100006E64(v0 + 2) = v12;
    uint64_t v13 = a2[12];
    uint64_t v14 = *(int *)(a3 + 44);
    uint64_t v18 = (char *)a2 + v14;
    __dst = (void *)(a1 + v14);
    *(void *)(a1 + 8sub_100006E64(v0 + 8) = a2[11];
    *(void *)(a1 + 9sub_100006E64(v0 + 6) = v13;
    uint64_t v15 = type metadata accessor for SportingEventViewContext(0LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v13);
    if (sub_10000AB6C((uint64_t)v18, 1LL, v15))
    {
      uint64_t v16 = sub_100006BEC(&qword_1000887B8);
      memcpy(__dst, v18, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(__dst, v18, v15);
      sub_10000AB60((uint64_t)__dst, 0LL, 1LL, v15);
    }
  }

  return v5;
}

uint64_t sub_100049F88(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for SportingEventViewContext(0LL);
  uint64_t result = sub_10000AB6C(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

uint64_t sub_10004A02C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + sub_100006E64(v0 + 8) = v5;
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  *(void *)(a1 + 1sub_100006E64(v0 + 6) = v6;
  *(void *)(a1 + 2sub_100006E64(v0 + 4) = v7;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v11 = a2[6];
  uint64_t v10 = a2[7];
  *(void *)(a1 + 4sub_100006E64(v0 + 8) = v11;
  *(void *)(a1 + 5sub_100006E64(v0 + 6) = v10;
  *(_BYTE *)(a1 + 6sub_100006E64(v0 + 4) = *((_BYTE *)a2 + 64);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(void *)(a1 + 7sub_100006E64(v0 + 2) = a2[9];
  uint64_t v12 = a2[12];
  uint64_t v13 = *(int *)(a3 + 44);
  uint64_t v17 = (char *)a2 + v13;
  __dst = (void *)(a1 + v13);
  *(void *)(a1 + 8sub_100006E64(v0 + 8) = a2[11];
  *(void *)(a1 + 9sub_100006E64(v0 + 6) = v12;
  uint64_t v14 = type metadata accessor for SportingEventViewContext(0LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  if (sub_10000AB6C((uint64_t)v17, 1LL, v14))
  {
    uint64_t v15 = sub_100006BEC(&qword_1000887B8);
    memcpy(__dst, v17, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(__dst, v17, v14);
    sub_10000AB60((uint64_t)__dst, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t *sub_10004A17C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[1];
  uint64_t v9 = a2[1];
  a1[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  uint64_t v10 = a1[2];
  uint64_t v11 = a2[2];
  a1[2] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  uint64_t v12 = a1[3];
  uint64_t v13 = a2[3];
  a1[3] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  uint64_t v14 = a1[4];
  uint64_t v15 = a2[4];
  a1[4] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v14);
  uint64_t v16 = a1[5];
  uint64_t v17 = a2[5];
  a1[5] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  uint64_t v18 = a1[6];
  uint64_t v19 = a2[6];
  a1[6] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18);
  uint64_t v20 = a2[7];
  *((_BYTE *)a1 + 6sub_100006E64(v0 + 4) = *((_BYTE *)a2 + 64);
  a1[7] = v20;
  uint64_t v21 = a2[9];
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  a1[9] = v21;
  a1[11] = a2[11];
  uint64_t v22 = a2[12];
  uint64_t v23 = a1[12];
  a1[12] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *(int *)(a3 + 44);
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for SportingEventViewContext(0LL);
  int v28 = sub_10000AB6C((uint64_t)v25, 1LL, v27);
  int v29 = sub_10000AB6C((uint64_t)v26, 1LL, v27);
  if (!v28)
  {
    uint64_t v30 = *(void *)(v27 - 8);
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v25, v26, v27);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v27);
    goto LABEL_6;
  }

  if (v29)
  {
LABEL_6:
    uint64_t v31 = sub_100006BEC(&qword_1000887B8);
    memcpy(v25, v26, *(void *)(*(void *)(v31 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL))(v25, v26, v27);
  sub_10000AB60((uint64_t)v25, 0LL, 1LL, v27);
  return a1;
}

uint64_t sub_10004A360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 6) = v4;
  *(_OWORD *)(a1 + 3sub_100006E64(v0 + 2) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 4sub_100006E64(v0 + 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 5sub_100006E64(v0 + 6) = v5;
  *(_BYTE *)(a1 + 6sub_100006E64(v0 + 4) = *(_BYTE *)(a2 + 64);
  *(void *)(a1 + 7sub_100006E64(v0 + 2) = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 8sub_100006E64(v0 + 8) = *(_OWORD *)(a2 + 88);
  uint64_t v9 = type metadata accessor for SportingEventViewContext(0LL);
  if (sub_10000AB6C((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_100006BEC(&qword_1000887B8);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_10000AB60((uint64_t)v7, 0LL, 1LL, v9);
  }

  return a1;
}

uint64_t *sub_10004A43C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a1[6];
  a1[6] = a2[6];
  swift_bridgeObjectRelease(v12);
  a1[7] = a2[7];
  *((_BYTE *)a1 + 6sub_100006E64(v0 + 4) = *((_BYTE *)a2 + 64);
  a1[9] = a2[9];
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  uint64_t v13 = a2[12];
  uint64_t v14 = a1[12];
  a1[11] = a2[11];
  a1[12] = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(int *)(a3 + 44);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for SportingEventViewContext(0LL);
  int v19 = sub_10000AB6C((uint64_t)v16, 1LL, v18);
  int v20 = sub_10000AB6C((uint64_t)v17, 1LL, v18);
  if (!v19)
  {
    uint64_t v21 = *(void *)(v18 - 8);
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v16, v17, v18);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v18);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v22 = sub_100006BEC(&qword_1000887B8);
    memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
  sub_10000AB60((uint64_t)v16, 0LL, 1LL, v18);
  return a1;
}

uint64_t sub_10004A5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004A5E4);
}

uint64_t sub_10004A5E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100006BEC(&qword_1000887B8);
    return sub_10000AB6C((uint64_t)a1 + *(int *)(a3 + 44), a2, v8);
  }

uint64_t sub_10004A65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004A668);
}

void *sub_10004A668(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_100006BEC(&qword_1000887B8);
    return (void *)sub_10000AB60((uint64_t)v5 + *(int *)(a4 + 44), a2, a2, v7);
  }

  return result;
}

uint64_t _s20RegistrationResponseVMa(uint64_t a1)
{
  uint64_t result = qword_100089068;
  if (!qword_100089068) {
    return swift_getSingletonMetadata(a1, &_s20RegistrationResponseVMn);
  }
  return result;
}

void sub_10004A710(uint64_t a1)
{
  v4[0] = " ";
  v4[1] = &unk_100068C70;
  v4[2] = &unk_100068C70;
  v4[3] = &unk_100068C70;
  v4[4] = &unk_100068C88;
  v4[5] = &unk_100068C88;
  v4[6] = &unk_100068CA0;
  sub_10004A7A8(319LL);
  if (v3 <= 0x3F)
  {
    void v4[7] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
  }

void sub_10004A7A8(uint64_t a1)
{
  if (!qword_100089078)
  {
    uint64_t v2 = type metadata accessor for SportingEventViewContext(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100089078);
    }
  }

uint64_t sub_10004A7FC(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }

uint64_t sub_10004A884(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10004A8D0 + 4 * byte_100068BEF[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10004A904 + 4 * byte_100068BEA[v4]))();
}

uint64_t sub_10004A904(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004A90C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10004A914LL);
  }
  return result;
}

uint64_t sub_10004A920(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004A928LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10004A92C(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004A934(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

void type metadata accessor for ApplicationType()
{
}

unint64_t sub_10004A950()
{
  unint64_t result = qword_1000890C0;
  if (!qword_1000890C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068D48, &unk_100080C58);
    atomic_store(result, (unint64_t *)&qword_1000890C0);
  }

  return result;
}

unint64_t sub_10004A98C()
{
  unint64_t result = qword_1000890D0;
  if (!qword_1000890D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069144, &unk_100080D78);
    atomic_store(result, (unint64_t *)&qword_1000890D0);
  }

  return result;
}

unint64_t sub_10004A9C8()
{
  unint64_t result = qword_1000890D8;
  if (!qword_1000890D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006911C, &unk_100080EF0);
    atomic_store(result, (unint64_t *)&qword_1000890D8);
  }

  return result;
}

unint64_t sub_10004AA04()
{
  unint64_t result = qword_1000890E8;
  if (!qword_1000890E8)
  {
    uint64_t v1 = sub_100006E94(&qword_1000890E0);
    sub_10004AF00((uint64_t)&unk_1000890F0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000890E8);
  }

  return result;
}

unint64_t sub_10004AA90()
{
  unint64_t result = qword_100089100;
  if (!qword_100089100)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000690F4, &unk_100080E70);
    atomic_store(result, (unint64_t *)&qword_100089100);
  }

  return result;
}

unint64_t sub_10004AACC()
{
  unint64_t result = qword_100089110;
  if (!qword_100089110)
  {
    uint64_t v1 = sub_100006E94(&qword_100089108);
    sub_10004AF00((uint64_t)&unk_100089118);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100089110);
  }

  return result;
}

unint64_t sub_10004AB58()
{
  unint64_t result = qword_100089128;
  if (!qword_100089128)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000690CC, &unk_100080DF0);
    atomic_store(result, (unint64_t *)&qword_100089128);
  }

  return result;
}

unint64_t sub_10004AB94()
{
  unint64_t result = qword_100089138;
  if (!qword_100089138)
  {
    uint64_t v1 = sub_100006E94(&qword_100089130);
    sub_10004B014((uint64_t)&unk_100087470);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100089138);
  }

  return result;
}

uint64_t sub_10004AC18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006BEC(&qword_1000887B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004AC60(uint64_t a1)
{
  uint64_t v2 = _s20RegistrationResponseVMa(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10004AC9C()
{
  unint64_t result = qword_100089150;
  if (!qword_100089150)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006907C, &_s23RegistrationRequestBodyV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100089150);
  }

  return result;
}

void sub_10004ACD8(uint64_t a1)
{
  if (!sub_10004BE40(a1))
  {
    uint64_t v2 = sub_100006E94(&qword_100087B00);
    atomic_store(sub_10004BE80(v2, v2), v1);
  }

  sub_100024850();
}

void sub_10004AD24(uint64_t a1)
{
  if (!sub_10004BE40(a1))
  {
    uint64_t v2 = sub_100006E94(&qword_100087B50);
    atomic_store(sub_10004BE80(v2, v2), v1);
  }

  sub_100024850();
}

unint64_t sub_10004AD70()
{
  unint64_t result = qword_100089180;
  if (!qword_100089180)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069054, &unk_100080EF0);
    atomic_store(result, (unint64_t *)&qword_100089180);
  }

  return result;
}

unint64_t sub_10004ADAC()
{
  unint64_t result = qword_100089188;
  if (!qword_100089188)
  {
    uint64_t v1 = sub_100006E94(&qword_1000890E0);
    sub_10004AF00((uint64_t)&unk_100089190);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100089188);
  }

  return result;
}

unint64_t sub_10004AE38()
{
  unint64_t result = qword_100089198;
  if (!qword_100089198)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006902C, &unk_100080E70);
    atomic_store(result, (unint64_t *)&qword_100089198);
  }

  return result;
}

unint64_t sub_10004AE74()
{
  unint64_t result = qword_1000891A0;
  if (!qword_1000891A0)
  {
    uint64_t v1 = sub_100006E94(&qword_100089108);
    sub_10004AF00((uint64_t)&unk_1000891A8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000891A0);
  }

  return result;
}

void sub_10004AF00(uint64_t a1)
{
  if (!sub_10004BE40(a1))
  {
    uint64_t v5 = v4;
    unsigned int v6 = v3;
    uint64_t v7 = sub_100006E94(v2);
    v6();
    atomic_store(swift_getWitnessTable(v5, v7), v1);
  }

  sub_100024850();
}

unint64_t sub_10004AF54()
{
  unint64_t result = qword_1000891B0;
  if (!qword_1000891B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069004, &unk_100080DF0);
    atomic_store(result, (unint64_t *)&qword_1000891B0);
  }

  return result;
}

unint64_t sub_10004AF90()
{
  unint64_t result = qword_1000891B8;
  if (!qword_1000891B8)
  {
    uint64_t v1 = sub_100006E94(&qword_100089130);
    sub_10004B014((uint64_t)&unk_1000891C0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000891B8);
  }

  return result;
}

void sub_10004B014(uint64_t a1)
{
  if (!sub_10004BE40(a1))
  {
    uint64_t v3 = v2(255LL);
    atomic_store(sub_10004BE80(v3, v3), v1);
  }

  sub_10000C510();
}

ValueMetadata *_s23RegistrationRequestBodyV10CodingKeysOMa()
{
  return &_s23RegistrationRequestBodyV10CodingKeysON;
}

uint64_t _s23RegistrationRequestBodyV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }

uint64_t _s23RegistrationRequestBodyV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_10004B134 + 4 * byte_100068BF9[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10004B168 + 4 * byte_100068BF4[v4]))();
}

uint64_t sub_10004B168(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004B170(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10004B178LL);
  }
  return result;
}

uint64_t sub_10004B184(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004B18CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_10004B190(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004B198(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

void _s20RegistrationResponseV10CodingKeysOMa()
{
}

void _s20RegistrationResponseV16DeliveryFeaturesVMa()
{
}

uint64_t sub_10004B1D4(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void sub_10004B1FC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  sub_10000C610();
  sub_10000C510();
}

void *sub_10004B230(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  sub_10001919C();
  return a1;
}

void sub_10004B298(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  sub_10000C510();
}

uint64_t sub_10004B2D8(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(vsub_100006E64(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100006E64(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_100006E64(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10004B318(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 1sub_100006E64(v0 + 6) = 0LL;
    *(void *)(result + 2sub_100006E64(v0 + 4) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + sub_100006E64(v0 + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 3sub_100006E64(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + sub_100006E64(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 3sub_100006E64(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void _s20RegistrationResponseV19RunningClockFeatureVMa()
{
}

uint64_t sub_10004B364(void *a1)
{
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *sub_10004B39C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *sub_10004B3F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1[1];
  uint64_t v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = a1[2];
  uint64_t v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  uint64_t v10 = a1[3];
  uint64_t v11 = a2[3];
  a1[3] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  return a1;
}

void *sub_10004B47C(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  uint64_t v5 = a1[3];
  *((_OWORD *)a1 + Hasher._combine(_:)(v1 & 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  return a1;
}

void _s20RegistrationResponseV5LinksVMa()
{
}

unint64_t sub_10004B4E0()
{
  unint64_t result = qword_1000891D0;
  if (!qword_1000891D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068F24, &unk_100080D78);
    atomic_store(result, (unint64_t *)&qword_1000891D0);
  }

  return result;
}

unint64_t sub_10004B520()
{
  unint64_t result = qword_1000891D8;
  if (!qword_1000891D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068FDC, &_s23RegistrationRequestBodyV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000891D8);
  }

  return result;
}

unint64_t sub_10004B560()
{
  unint64_t result = qword_1000891E0;
  if (!qword_1000891E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068F4C, &_s23RegistrationRequestBodyV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000891E0);
  }

  return result;
}

unint64_t sub_10004B5A0()
{
  unint64_t result = qword_1000891E8;
  if (!qword_1000891E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068F74, &_s23RegistrationRequestBodyV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000891E8);
  }

  return result;
}

unint64_t sub_10004B5E0()
{
  unint64_t result = qword_1000891F0;
  if (!qword_1000891F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068E5C, &unk_100080D78);
    atomic_store(result, (unint64_t *)&qword_1000891F0);
  }

  return result;
}

unint64_t sub_10004B620()
{
  unint64_t result = qword_1000891F8;
  if (!qword_1000891F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100068E84, &unk_100080D78);
    atomic_store(result, (unint64_t *)&qword_1000891F8);
  }

  return result;
}

unint64_t sub_10004B65C()
{
  unint64_t result = qword_100089208;
  if (!qword_100089208)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006945C, &_s20RegistrationResponseV5LinksV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100089208);
  }

  return result;
}

unint64_t sub_10004B698()
{
  unint64_t result = qword_100089218;
  if (!qword_100089218)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006940C, &_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100089218);
  }

  return result;
}

unint64_t sub_10004B6D4()
{
  unint64_t result = qword_100089228;
  if (!qword_100089228)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000693BC, &_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100089228);
  }

  return result;
}

ValueMetadata *_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysOMa()
{
  return &_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysON;
}

uint64_t _s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10004B774 + 4 * byte_100068C03[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10004B7A8 + 4 * byte_100068BFE[v4]))();
}

uint64_t sub_10004B7A8(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004B7B0(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10004B7B8LL);
  }
  return result;
}

uint64_t sub_10004B7C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004B7CCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10004B7D0(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004B7D8(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysOMa()
{
  return &_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysON;
}

uint64_t _s20RegistrationResponseV5LinksV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

uint64_t _s20RegistrationResponseV5LinksV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10004B8C8 + 4 * byte_100068C0D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10004B8FC + 4 * byte_100068C08[v4]))();
}

uint64_t sub_10004B8FC(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004B904(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10004B90CLL);
  }
  return result;
}

uint64_t sub_10004B918(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004B920LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10004B924(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004B92C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *_s20RegistrationResponseV5LinksV10CodingKeysOMa()
{
  return &_s20RegistrationResponseV5LinksV10CodingKeysON;
}

unint64_t sub_10004B94C()
{
  unint64_t result = qword_100089248;
  if (!qword_100089248)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069224, &_s20RegistrationResponseV5LinksV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100089248);
  }

  return result;
}

unint64_t sub_10004B98C()
{
  unint64_t result = qword_100089250;
  if (!qword_100089250)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000692DC, &_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100089250);
  }

  return result;
}

unint64_t sub_10004B9CC()
{
  unint64_t result = qword_100089258;
  if (!qword_100089258)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069394, &_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100089258);
  }

  return result;
}

unint64_t sub_10004BA0C()
{
  unint64_t result = qword_100089260;
  if (!qword_100089260)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069304, &_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100089260);
  }

  return result;
}

unint64_t sub_10004BA4C()
{
  unint64_t result = qword_100089268;
  if (!qword_100089268)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006932C, &_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100089268);
  }

  return result;
}

unint64_t sub_10004BA8C()
{
  unint64_t result = qword_100089270;
  if (!qword_100089270)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006924C, &_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100089270);
  }

  return result;
}

unint64_t sub_10004BACC()
{
  unint64_t result = qword_100089278;
  if (!qword_100089278)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069274, &_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100089278);
  }

  return result;
}

unint64_t sub_10004BB0C()
{
  unint64_t result = qword_100089280;
  if (!qword_100089280)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069194, &_s20RegistrationResponseV5LinksV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100089280);
  }

  return result;
}

unint64_t sub_10004BB4C()
{
  unint64_t result = qword_100089288;
  if (!qword_100089288)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000691BC, &_s20RegistrationResponseV5LinksV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100089288);
  }

  return result;
}

uint64_t sub_10004BBBC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10004BBCC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10004BBDC()
{
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 72, v0);
}

uint64_t sub_10004BBF0(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v3 - 72, v2);
}

uint64_t sub_10004BC04@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v4 - 8Hasher._combine(_:)(v1 & 1) = a1;
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v4 - 72, v4 - 81, v1, v2, v3);
}

  ;
}

uint64_t sub_10004BC40(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v1, v3 - 65, v2, v1, a1);
}

uint64_t sub_10004BC60(uint64_t a1)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3 - 96, v3 - 97, v1, v2, a1);
}

uint64_t sub_10004BC80()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10004BC90()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v2, v3 - 81, v0, v2, v1);
}

uint64_t sub_10004BCB4()
{
  return 0x6172747369676572LL;
}

uint64_t sub_10004BCD8(uint64_t a1)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 72, v3 - 73, v1, v2, a1);
}

  ;
}

uint64_t sub_10004BD10()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10004BD20@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  *(_BYTE *)(v2 - 7sub_100006E64(v0 + 2) = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10004BD30()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 96));
}

uint64_t sub_10004BD38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 9sub_100006E64(v0 + 6) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 96, v3);
}

uint64_t sub_10004BD50()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 104));
}

uint64_t sub_10004BD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_10004BD6C()
{
  return 0x736B6E696CLL;
}

unint64_t sub_10004BD80()
{
  return 0xD000000000000010LL;
}

  ;
}

  ;
}

uint64_t sub_10004BDB4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_10004BDC0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 112));
}

uint64_t sub_10004BDC8()
{
  return 0x73746E657665LL;
}

uint64_t sub_10004BDDC@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 1sub_100006E64(v0 + 12) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v2 - 112, v1);
}

uint64_t sub_10004BDF0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 120));
}

void *sub_10004BDF8(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_10004BE08()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10004BE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4, v4);
}

uint64_t sub_10004BE20()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10004BE30(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_10004BE40(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_10004BE4C()
{
  return sub_100006E64(v0);
}

void sub_10004BE54(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = v2;
}

uint64_t sub_10004BE5C()
{
  return sub_100006E64(v0);
}

unint64_t sub_10004BE64()
{
  return sub_10004A98C();
}

uint64_t sub_10004BE80(uint64_t a1, uint64_t a2)
{
  return swift_getWitnessTable(v2, a2);
}

uint64_t sub_10004BE88()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 128));
}

void *sub_10004BE90(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_10004BE9C@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 8Hasher._combine(_:)(v1 & 1) = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_10004BEA8(uint64_t a1)
{
  return sub_10004BFD0(a1, qword_10008F318, 6516856LL, 0xE300000000000000LL);
}

uint64_t *sub_10004BEC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_10004BF00(uint64_t a1)
{
  return sub_10004BFD0(a1, qword_10008F330, 0x6E6F6D6D6F63LL, 0xE600000000000000LL);
}

uint64_t sub_10004BF1C(uint64_t a1)
{
  return sub_10004C044(a1, qword_10008F348, 0x696B726F7774656ELL, 26478LL);
}

uint64_t sub_10004BF3C(uint64_t a1)
{
  return sub_10004C044(a1, qword_10008F360, 0x74737973656C6966LL, 28005LL);
}

uint64_t sub_10004BF5C(uint64_t a1)
{
  return sub_10004BFD0(a1, qword_10008F378, 0x7974697669746361LL, 0xE800000000000000LL);
}

uint64_t sub_10004BF7C(uint64_t a1)
{
  return sub_10004BFD0(a1, qword_10008F390, 0x61684364756F6C63LL, 0xED0000736C656E6ELL);
}

uint64_t sub_10004BFA8(uint64_t a1)
{
  return sub_10004BFD0(a1, qword_10008F3A8, 0x616F6265726F6373LL, 0xEB00000000736472LL);
}

uint64_t sub_10004BFD0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10004BEC0(v7, a2);
  sub_10000B928(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010006A7D0LL, a3, a4);
}

uint64_t sub_10004C044(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10004BFD0(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xEA00000000000000LL);
}

void sub_10004C04C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a3;
  uint64_t v30 = type metadata accessor for Date(0LL);
  uint64_t v29 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    v25[1] = v4;
    uint64_t v35 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v10);
    v25[0] = a2;
    uint64_t v11 = (uint64_t)a2 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation;
    uint64_t v28 = (uint64_t)a2 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation + 96;
    uint64_t v27 = (uint64_t)a2 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation + 136;
    uint64_t v26 = &v33;
    uint64_t v12 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v14 = *(v12 - 1);
      uint64_t v13 = *v12;
      sub_10000B2DC(v11, (uint64_t)v32);
      uint64_t v15 = *(void *)(v11 + 40);
      sub_10000B2DC(v28, (uint64_t)v26);
      sub_10000B2DC(v27, (uint64_t)v34);
      v32[5] = v15;
      v34[5] = v31;
      v34[6] = a4;
      v34[7] = v14;
      v34[8] = v13;
      swift_bridgeObjectRetain_n(v13, 2LL);
      swift_retain(v15);
      uint64_t v16 = swift_bridgeObjectRetain(a4);
      uint64_t v17 = Date.init()(v16);
      double v18 = Date.timeIntervalSince1970.getter(v17) * 1000.0;
      if ((~*(void *)&v18 & 0x7FF0000000000000LL) == 0) {
        break;
      }
      if (v18 <= -1.0) {
        goto LABEL_11;
      }
      if (v18 >= 1.84467441e19) {
        goto LABEL_12;
      }
      v12 += 2;
      unint64_t v19 = (unint64_t)v18;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
      void v34[9] = v19;
      sub_10002AC1C();
      uint64_t v21 = v20;
      sub_10002CC60(v32);
      uint64_t v22 = swift_bridgeObjectRelease(v13);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      uint64_t v23 = v35[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      uint64_t v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      specialized ContiguousArray._endMutation()(v24);
      if (!--v10)
      {

        goto LABEL_9;
      }
    }

    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }

  else
  {

LABEL_9:
    swift_bridgeObjectRelease(a4);
  }

void sub_10004C2C4(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    goto LABEL_19;
  }
  uint64_t v6 = v4;
  if (v5)
  {
    uint64_t v20 = _swiftEmptyArrayStorage;
    sub_100016630(0LL, v5 & ~(v5 >> 63), 0LL);
    if (v5 < 0)
    {
LABEL_20:
      __break(1u);
      return;
    }

    uint64_t v9 = v20;
    int64_t v10 = a1;
    while (a2 != v10)
    {
      int64_t v18 = v10;
      sub_10004E914((unint64_t *)&v18, a3, a4, v19);
      if (v6)
      {
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(a3);
        swift_release(v9);
        return;
      }

      uint64_t v6 = 0LL;
      uint64_t v12 = v19[0];
      uint64_t v11 = v19[1];
      uint64_t v20 = v9;
      unint64_t v14 = v9[2];
      unint64_t v13 = v9[3];
      if (v14 >= v13 >> 1)
      {
        sub_100016630(v13 > 1, v14 + 1, 1LL);
        uint64_t v9 = v20;
      }

      uint64_t v9[2] = v14 + 1;
      uint64_t v15 = &v9[2 * v14];
      void v15[4] = v12;
      v15[5] = v11;
      if (a2 < a1) {
        goto LABEL_17;
      }
      if (v10 >= a2) {
        goto LABEL_18;
      }
      if (a2 == ++v10)
      {
        swift_bridgeObjectRelease(a3);
        goto LABEL_15;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  swift_bridgeObjectRelease(a3);
LABEL_15:
  swift_bridgeObjectRelease(a4);
}

void sub_10004C438(uint64_t a1)
{
  uint64_t v2 = sub_100006BEC(&qword_100089348);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for CloudChannelSubscription.Demand(0LL);
  uint64_t v33 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v32 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v30 = (char *)&v29 - v8;
  sub_1000500C4(a1, v34);
  uint64_t v10 = v34[0];
  uint64_t v9 = v34[1];
  int64_t v11 = v34[3];
  unint64_t v12 = v34[4];
  int64_t v13 = (unint64_t)(v34[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  uint64_t v35 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_20;
    }

    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v16 >= v13) {
      goto LABEL_27;
    }
    unint64_t v17 = *(void *)(v9 + 8 * v16);
    int64_t v18 = v11 + 1;
    if (!v17)
    {
      int64_t v18 = v11 + 2;
      if (v11 + 2 >= v13) {
        goto LABEL_27;
      }
      unint64_t v17 = *(void *)(v9 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v11 + 3;
        if (v11 + 3 >= v13) {
          goto LABEL_27;
        }
        unint64_t v17 = *(void *)(v9 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v11 + 4;
          if (v11 + 4 >= v13) {
            goto LABEL_27;
          }
          unint64_t v17 = *(void *)(v9 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = v11 + 5;
            if (v11 + 5 >= v13) {
              goto LABEL_27;
            }
            unint64_t v17 = *(void *)(v9 + 8 * v18);
            if (!v17)
            {
              int64_t v19 = v11 + 6;
              while (v19 < v13)
              {
                unint64_t v17 = *(void *)(v9 + 8 * v19++);
                if (v17)
                {
                  int64_t v18 = v19 - 1;
                  goto LABEL_19;
                }
              }

id sub_10004C740(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)&v6[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables] = &_swiftEmptySetSingleton;
  int64_t v11 = &v6[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId];
  *(void *)int64_t v11 = a5;
  *((void *)v11 + Hasher._combine(_:)(v1 & 1) = a6;
  unint64_t v12 = v6;
  swift_bridgeObjectRelease(0LL);
  sub_100029658((uint64_t)a4, (uint64_t)&v12[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation]);

  id v13 = a3;
  id v14 = sub_100052C44(a1, a2, (uint64_t)v13);
  [v13 setExportedObject:v14];
  id v15 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL____TtP7sportsd25SportsdXPCDaemon_Protocol_];
  [v13 setExportedInterface:v15];

  sub_100028C94(a4);
  return v14;
}

uint64_t sub_10004C854()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId + 8));
}

id sub_10004C894()
{
  uint64_t v2 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  if (qword_1000870E8 != -1) {
    swift_once(&qword_1000870E8, sub_10004BEA8);
  }
  uint64_t v4 = sub_10001939C();
  uint64_t v5 = (os_log_s *)sub_10000B928(v4, (uint64_t)qword_10008F318);
  Logger.logObject.getter(v5);
  os_log_type_t v6 = sub_10003BCB8();
  if (sub_1000503C4(v6))
  {
    uint64_t v7 = (uint8_t *)sub_100019148(2LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v1, "Connection closed.", v7, 2u);
    sub_1000190E8((uint64_t)v7);
  }

  v9.receiver = v2;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "dealloc");
}

void sub_10004C9E4( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v128 = a5;
  uint64_t v132 = a1;
  uint64_t v133 = a3;
  unint64_t v131 = a2;
  uint64_t v10 = sub_100006BEC(&qword_100087EA0);
  __n128 v11 = __chkstk_darwin(v10);
  uint64_t v129 = (uint64_t)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v127 = type metadata accessor for SportingEventSubscriptionRequest.ContextKey(0LL, v11);
  uint64_t v123 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v126 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v125 = (char *)&v119 - v15;
  __chkstk_darwin(v16);
  __int128 v124 = (char *)&v119 - v17;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v119 - v19;
  uint64_t v21 = type metadata accessor for SportingEventSubscriptionRequest.SubscriptionType(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v119 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  unint64_t v27 = (char *)&v119 - v26;
  uint64_t v28 = sub_100006BEC(&qword_100089380);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v119 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v119 - v32;
  uint64_t v134 = swift_allocObject(&unk_1000813D8, 24LL, 7LL);
  uint64_t v135 = a7;
  *(void *)(v134 + 1sub_100006E64(v0 + 6) = a7;
  uint64_t v130 = a6;
  unint64_t v34 = *(void *)(a6 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId + 8);
  if (v34)
  {
    uint64_t v35 = *(void *)(a6 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId);
    uint64_t v36 = HIBYTE(v34) & 0xF;
    if ((v34 & 0x2000000000000000LL) == 0) {
      uint64_t v36 = v35 & 0xFFFFFFFFFFFFLL;
    }
    if (v36)
    {
      _Block_copy(v135);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(a4);
      SportingEventSubscriptionRequest.SubscriptionType.init(rawValue:)(v133, a4);
      sub_1000501B4((uint64_t)v33, (uint64_t)v30);
      if (sub_10000AB6C((uint64_t)v30, 1LL, v21) == 1)
      {
        sub_100019034((uint64_t)v33, &qword_100089380);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v27, v30, v21);
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v27, v21);
        int v45 = sub_10004D5C8((uint64_t)v24);
        (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v21);
        sub_100019034((uint64_t)v33, &qword_100089380);
        if (v45 != 6)
        {
          uint64_t v133 = v35;
          unint64_t v56 = v131;
          unint64_t v57 = HIBYTE(v131) & 0xF;
          if ((v131 & 0x2000000000000000LL) == 0) {
            unint64_t v57 = v132 & 0xFFFFFFFFFFFFLL;
          }
          if (v57)
          {
            if (qword_1000870E8 != -1) {
              swift_once(&qword_1000870E8, sub_10004BEA8);
            }
            int v122 = v45;
            uint64_t v58 = type metadata accessor for Logger(0LL);
            sub_10000B928(v58, (uint64_t)qword_10008F318);
            uint64_t v59 = swift_bridgeObjectRetain_n(v56, 2LL);
            uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
            os_log_type_t v61 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v60, v61))
            {
              uint64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v63 = swift_slowAlloc(32LL, -1LL);
              v136[0] = v63;
              *(_DWORD *)uint64_t v62 = 136315138;
              swift_bridgeObjectRetain(v56);
              uint64_t v139 = sub_100015AD4(v132, v56, v136);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v62 + 4, v62 + 12);
              swift_bridgeObjectRelease_n(v56, 3LL);
              _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "SportsKitRequestXPCSession: Registering for event '%s'",  v62,  0xCu);
              swift_arrayDestroy(v63, 1LL);
              swift_slowDealloc(v63, -1LL, -1LL);
              swift_slowDealloc(v62, -1LL, -1LL);
            }

            else
            {

              swift_bridgeObjectRelease_n(v56, 2LL);
            }

            uint64_t v121 = v130 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation;
            uint64_t v73 = v123;
            uint64_t v74 = *(uint64_t (**)(char *, void, uint64_t))(v123 + 104);
            uint64_t v75 = v127;
            uint64_t v76 = v74(v20, enum case for SportingEventSubscriptionRequest.ContextKey.leagueId(_:), v127);
            uint64_t v77 = SportingEventSubscriptionRequest.ContextKey.rawValue.getter(v76);
            uint64_t v79 = v78;
            uint64_t v80 = *(void (**)(char *, uint64_t))(v73 + 8);
            v80(v20, v75);
            uint64_t v81 = v128;
            uint64_t v123 = sub_10003BDF0(v77, v79, v128);
            uint64_t v120 = v82;
            swift_bridgeObjectRelease(v79);
            uint64_t v83 = (uint64_t)v124;
            uint64_t v84 = v74(v124, enum case for SportingEventSubscriptionRequest.ContextKey.sportId(_:), v75);
            uint64_t v85 = SportingEventSubscriptionRequest.ContextKey.rawValue.getter(v84);
            uint64_t v87 = v86;
            v80((char *)v83, v75);
            __int128 v124 = (char *)sub_10003BDF0(v85, v87, v81);
            uint64_t v89 = v88;
            swift_bridgeObjectRelease(v87);
            uint64_t v90 = v125;
            uint64_t v91 = v74(v125, enum case for SportingEventSubscriptionRequest.ContextKey.source(_:), v75);
            uint64_t v92 = SportingEventSubscriptionRequest.ContextKey.rawValue.getter(v91);
            uint64_t v94 = v93;
            v80(v90, v75);
            uint64_t v95 = sub_10003BDF0(v92, v94, v81);
            uint64_t v97 = v96;
            swift_bridgeObjectRelease(v94);
            uint64_t v98 = v126;
            uint64_t v99 = v74(v126, enum case for SportingEventSubscriptionRequest.ContextKey.leagueAbbreviation(_:), v75);
            uint64_t v100 = SportingEventSubscriptionRequest.ContextKey.rawValue.getter(v99);
            uint64_t v102 = v101;
            v80(v98, v75);
            uint64_t v103 = sub_10003BDF0(v100, v102, v81);
            uint64_t v105 = v104;
            swift_bridgeObjectRelease(v102);
            uint64_t v106 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0LL);
            uint64_t v107 = v129;
            sub_10000AB60(v129, 1LL, 1LL, v106);
            uint64_t v108 = v132;
            unint64_t v109 = v131;
            uint64_t v110 = v120;
            sub_1000237F0( v133,  v34,  v132,  v131,  v123,  v120,  (uint64_t)v124,  v89,  v136,  v95,  v97,  0,  v103,  v105,  v122,  v107,  0LL,  0LL);
            swift_bridgeObjectRelease(v34);
            swift_bridgeObjectRelease(v105);
            swift_bridgeObjectRelease(v97);
            swift_bridgeObjectRelease(v89);
            swift_bridgeObjectRelease(v110);
            sub_100019034(v107, &qword_100087EA0);
            uint64_t v111 = v137;
            uint64_t v112 = v138;
            sub_100006C2C(v136, v137);
            uint64_t v139 = (*(uint64_t (**)(uint64_t, uint64_t))(v112 + 8))(v111, v112);
            unint64_t v113 = (void *)swift_allocObject(&unk_100081400, 48LL, 7LL);
            v113[2] = v108;
            v113[3] = v109;
            uint64_t v114 = v134;
            v113[4] = sub_100050244;
            v113[5] = v114;
            uint64_t v115 = (void *)swift_allocObject(&unk_100081428, 48LL, 7LL);
            v115[2] = v108;
            v115[3] = v109;
            v115[4] = sub_100050244;
            v115[5] = v114;
            swift_bridgeObjectRetain_n(v109, 2LL);
            swift_retain_n(v114, 2LL);
            uint64_t v116 = sub_100006BEC(&qword_100088360);
            sub_10002EBA0( &qword_100088368,  &qword_100088360,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
            uint64_t v117 = Publisher.sink(receiveCompletion:receiveValue:)(sub_100050200, v113, sub_100050234, v115, v116);
            swift_release(v113);
            swift_release(v115);
            swift_release(v139);
            sub_100006E64(v136);
            uint64_t v118 = v130 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables;
            swift_beginAccess(v130 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables, v136, 33LL, 0LL);
            AnyCancellable.store(in:)(v118);
            swift_endAccess(v136);
            swift_release(v114);
            swift_release(v117);
            uint64_t v55 = (void (**)(const void *, void *))v135;
          }

          else
          {
            swift_bridgeObjectRelease(v34);
            if (qword_1000870F8 != -1) {
              swift_once(&qword_1000870F8, sub_10004BF1C);
            }
            uint64_t v64 = type metadata accessor for Logger(0LL);
            uint64_t v65 = sub_10000B928(v64, (uint64_t)qword_10008F348);
            uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
            os_log_type_t v67 = static os_log_type_t.error.getter();
            BOOL v68 = os_log_type_enabled(v66, v67);
            uint64_t v69 = (void (**)(const void *, void *))v135;
            if (v68)
            {
              uint64_t v70 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)uint64_t v70 = 0;
              _os_log_impl((void *)&_mh_execute_header, v66, v67, "Tempo /register missing event canonical id", v70, 2u);
              swift_slowDealloc(v70, -1LL, -1LL);
            }

            id v71 = sub_100027DC8(1u, 0xD00000000000001ALL, 0x800000010006C410LL);
            uint64_t v72 = (void *)_convertErrorToNSError(_:)(v71);
            v69[2](v69, v72);

            swift_errorRelease(v71);
            swift_release(v134);
            uint64_t v55 = v69;
          }

          goto LABEL_19;
        }
      }

      swift_bridgeObjectRelease(v34);
      if (qword_1000870F8 != -1) {
        swift_once(&qword_1000870F8, sub_10004BF1C);
      }
      uint64_t v46 = type metadata accessor for Logger(0LL);
      sub_10000B928(v46, (uint64_t)qword_10008F348);
      uint64_t v47 = swift_bridgeObjectRetain_n(a4, 2LL);
      uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v51 = swift_slowAlloc(32LL, -1LL);
        v136[0] = v51;
        *(_DWORD *)uint64_t v50 = 136315138;
        swift_bridgeObjectRetain(a4);
        uint64_t v139 = sub_100015AD4(v133, a4, v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v50 + 4, v50 + 12);
        swift_bridgeObjectRelease_n(a4, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Tempo /register invalid subscriptionType: %s", v50, 0xCu);
        swift_arrayDestroy(v51, 1LL);
        swift_slowDealloc(v51, -1LL, -1LL);
        swift_slowDealloc(v50, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a4, 2LL);
      }

      id v52 = sub_100027DC8(1u, 0xD000000000000019LL, 0x800000010006C3F0LL);
      uint64_t v53 = (void *)_convertErrorToNSError(_:)(v52);
      uint64_t v54 = (void (**)(const void *, void *))v135;
      (*((void (**)(void *, void *))v135 + 2))(v135, v53);

      swift_errorRelease(v52);
      swift_release(v134);
      uint64_t v55 = v54;
LABEL_19:
      _Block_release(v55);
      return;
    }
  }

  uint64_t v37 = (void (**)(const void *, void *))v135;
  _Block_copy(v135);
  if (qword_1000870F8 != -1) {
    swift_once(&qword_1000870F8, sub_10004BF1C);
  }
  uint64_t v38 = type metadata accessor for Logger(0LL);
  uint64_t v39 = sub_10000B928(v38, (uint64_t)qword_10008F348);
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Tempo /register missing process bundle id", v42, 2u);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  id v43 = sub_100027DC8(1u, 0xD000000000000019LL, 0x800000010006C3A0LL);
  uint64_t v44 = (void *)_convertErrorToNSError(_:)(v43);
  v37[2](v37, v44);

  swift_errorRelease(v43);
  swift_release(v134);
  _Block_release(v37);
}

uint64_t sub_10004D5C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SportingEventSubscriptionRequest.SubscriptionType(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for SportingEventSubscriptionRequest.SubscriptionType.liveStatistics(_:)) {
    return 0LL;
  }
  if (v4 == enum case for SportingEventSubscriptionRequest.SubscriptionType.playByPlay(_:)) {
    return 1LL;
  }
  if (v4 == enum case for SportingEventSubscriptionRequest.SubscriptionType.tvClockScore(_:)) {
    return 5LL;
  }
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return 6LL;
}

void *sub_10004D674(void *result, uint64_t a2, unint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4 = *result;
  if (*result)
  {
    swift_errorRetain(*result);
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000B928(v8, (uint64_t)qword_10008F348);
    swift_errorRetain(v4);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(v4);
    uint64_t v9 = swift_bridgeObjectRetain(a3);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      uint64_t v13 = swift_slowAlloc(64LL, -1LL);
      uint64_t v20 = v13;
      *(_DWORD *)uint64_t v12 = 136315394;
      swift_bridgeObjectRetain(a3);
      uint64_t v19 = sub_100015AD4(a2, a3, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v12 + sub_100006E64(v0 + 12) = 2080;
      swift_getErrorValue(v4, v18, v17);
      uint64_t v14 = Error.localizedDescription.getter(v17[1], v17[2]);
      unint64_t v16 = v15;
      uint64_t v19 = sub_100015AD4(v14, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease(v16);
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Tempo /register failed for id=%s with error=%s",  (uint8_t *)v12,  0x16u);
      swift_arrayDestroy(v13, 2LL);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);
      swift_errorRelease(v4);
      swift_errorRelease(v4);
    }

    swift_errorRetain(v4);
    a4(v4);
    swift_errorRelease(v4);
    return (void *)swift_errorRelease(v4);
  }

  return result;
}

uint64_t sub_10004D8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4(0LL);
}

void sub_10004DA18(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_10004DA64(uint64_t a1, unint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = swift_allocObject(&unk_100081388, 24LL, 7LL);
  *(void *)(v8 + 1sub_100006E64(v0 + 6) = a4;
  unint64_t v9 = *(void *)(a3 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId + 8);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(a3 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId);
  uint64_t v11 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    _Block_copy(a4);
    uint64_t v12 = qword_1000870E8;
    swift_bridgeObjectRetain(v9);
    if (v12 != -1) {
      swift_once(&qword_1000870E8, sub_10004BEA8);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000B928(v13, (uint64_t)qword_10008F318);
    uint64_t v14 = swift_bridgeObjectRetain_n(a2, 2LL);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v33 = v8;
      uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      v35[0] = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain(a2);
      uint64_t v34 = sub_100015AD4(a1, a2, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "SportsKitRequestXPCSession: Unregistering for event '%s'",  v17,  0xCu);
      swift_arrayDestroy(v18, 1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
      uint64_t v19 = v17;
      uint64_t v8 = v33;
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    sub_100023B9C(v10, v9, a1, a2, v35);
    swift_bridgeObjectRelease(v9);
    uint64_t v27 = v36;
    uint64_t v28 = v37;
    sub_100006C2C(v35, v36);
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28);
    uint64_t v29 = (void *)swift_allocObject(&unk_1000813B0, 48LL, 7LL);
    v29[2] = a1;
    v29[3] = a2;
    v29[4] = sub_100050244;
    v29[5] = v8;
    swift_bridgeObjectRetain(a2);
    swift_retain(v8);
    uint64_t v30 = sub_100006BEC(&qword_100088360);
    sub_10002EBA0(&qword_100088368, &qword_100088360, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v31 = Publisher.sink(receiveCompletion:receiveValue:)(sub_1000501A8, v29, nullsub_1, 0LL, v30);
    swift_release(v29);
    swift_release(v34);
    sub_100006E64(v35);
    uint64_t v32 = a3 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables;
    swift_beginAccess(a3 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables, v35, 33LL, 0LL);
    AnyCancellable.store(in:)(v32);
    swift_endAccess(v35);
    swift_release(v8);
    swift_release(v31);
    _Block_release(a4);
  }

  else
  {
LABEL_9:
    _Block_copy(a4);
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_10000B928(v20, (uint64_t)qword_10008F348);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Tempo /unregister missing process bundle id", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    id v25 = sub_100027DC8(1u, 0xD000000000000019LL, 0x800000010006C3A0LL);
    uint64_t v26 = (void *)_convertErrorToNSError(_:)(v25);
    ((void (**)(void, void *))a4)[2](a4, v26);

    swift_errorRelease(v25);
    swift_release(v8);
    _Block_release(a4);
  }

uint64_t sub_10004DEF0(void *a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5 = *a1;
  if (!*a1) {
    return a4(0LL);
  }
  swift_errorRetain(*a1);
  if (qword_1000870F8 != -1) {
    swift_once(&qword_1000870F8, sub_10004BF1C);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_10000B928(v8, (uint64_t)qword_10008F348);
  swift_errorRetain(v5);
  swift_bridgeObjectRetain(a3);
  swift_errorRetain(v5);
  uint64_t v9 = swift_bridgeObjectRetain(a3);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = swift_slowAlloc(64LL, -1LL);
    uint64_t v21 = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v20 = sub_100015AD4(a2, a3, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v12 + sub_100006E64(v0 + 12) = 2080;
    swift_getErrorValue(v5, v19, v18);
    uint64_t v14 = Error.localizedDescription.getter(v18[1], v18[2]);
    unint64_t v16 = v15;
    uint64_t v20 = sub_100015AD4(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Tempo /unregister failed for id=%s - %s",  (uint8_t *)v12,  0x16u);
    swift_arrayDestroy(v13, 2LL);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }

  swift_errorRetain(v5);
  a4(v5);
  swift_errorRelease(v5);
  return swift_errorRelease(v5);
}

void sub_10004E1D8(uint64_t a1, char *a2, void (**a3)(void, void))
{
  uint64_t v6 = sub_100006BEC(&qword_100089350);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100006BEC(&qword_100089358);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_100081338, 24LL, 7LL);
  *(void *)(v14 + 1sub_100006E64(v0 + 6) = a3;
  id v63 = a2;
  unint64_t v15 = (uint64_t *)&a2[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId];
  unint64_t v16 = *(void *)&a2[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId + 8];
  if (!v16) {
    goto LABEL_9;
  }
  uint64_t v17 = *v15;
  uint64_t v18 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = v17 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    uint64_t v57 = v17;
    uint64_t v60 = v13;
    uint64_t v62 = v10;
    _Block_copy(a3);
    uint64_t v19 = qword_1000870E8;
    swift_bridgeObjectRetain(v16);
    if (v19 != -1) {
      swift_once(&qword_1000870E8, sub_10004BEA8);
    }
    uint64_t v58 = v7;
    uint64_t v59 = v6;
    uint64_t v61 = v11;
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_10000B928(v20, (uint64_t)qword_10008F318);
    uint64_t v21 = swift_bridgeObjectRetain_n(a1, 2LL);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc(12LL, -1LL);
      uint64_t v56 = v14;
      id v25 = (uint8_t *)v24;
      uint64_t v55 = swift_slowAlloc(32LL, -1LL);
      v65[0] = v55;
      *(_DWORD *)id v25 = 136315138;
      uint64_t v54 = v25 + 4;
      uint64_t v26 = swift_bridgeObjectRetain(a1);
      uint64_t v27 = Array.description.getter(v26, &type metadata for String);
      unint64_t v29 = v28;
      swift_bridgeObjectRelease(a1);
      uint64_t v64 = sub_100015AD4(v27, v29, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v54, v25 + 12);
      swift_bridgeObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease(v29);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "SportsKitRequestXPCSession: Unregistering for events %s",  v25,  0xCu);
      uint64_t v30 = v55;
      swift_arrayDestroy(v55, 1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
      uint64_t v31 = v25;
      uint64_t v14 = v56;
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a1, 2LL);
    }

    swift_bridgeObjectRetain(v16);
    uint64_t v39 = (char *)v63;
    sub_10004C04C(a1, v39, v57, v16);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease(v16);
    v65[0] = v41;
    uint64_t v42 = sub_100006BEC(&qword_100088360);
    uint64_t v43 = sub_100006BEC(&qword_100089360);
    sub_10002EBA0(&qword_100088368, &qword_100088360, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v45 = v44;
    sub_10002EBA0(&qword_100089368, &qword_100089360, (uint64_t)&protocol conformance descriptor for [A]);
    Publishers.MergeMany.init<A>(_:)(v65, v42, v43, v45, v46);
    sub_10002EBA0( &qword_100089370,  &qword_100089350,  (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
    uint64_t v47 = v59;
    uint64_t v48 = v60;
    Publisher.collect()(v59, v49);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v9, v47);
    uint64_t v50 = (void *)swift_allocObject(&unk_100081360, 40LL, 7LL);
    v50[2] = sub_100050244;
    v50[3] = v14;
    v50[4] = a1;
    sub_10002EBA0( &qword_100089378,  &qword_100089358,  (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
    swift_bridgeObjectRetain(a1);
    swift_retain(v14);
    uint64_t v51 = v62;
    uint64_t v52 = Publisher.sink(receiveCompletion:receiveValue:)(nullsub_1, 0LL, sub_100050198, v50, v62);
    swift_release(v50);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v48, v51);
    uint64_t v53 = &v39[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables];
    swift_beginAccess(&v39[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables], v65, 33LL, 0LL);
    AnyCancellable.store(in:)(v53);
    swift_endAccess(v65);
    swift_release(v14);
    swift_release(v52);
    _Block_release(a3);
  }

  else
  {
LABEL_9:
    _Block_copy(a3);
    if (qword_1000870F8 != -1) {
      swift_once(&qword_1000870F8, sub_10004BF1C);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    uint64_t v33 = sub_10000B928(v32, (uint64_t)qword_10008F348);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Tempo /unregister missing process bundle id", v36, 2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    id v37 = sub_100027DC8(1u, 0xD000000000000019LL, 0x800000010006C3A0LL);
    uint64_t v38 = (void *)_convertErrorToNSError(_:)(v37);
    ((void (**)(void, void *))a3)[2](a3, v38);

    swift_errorRelease(v37);
    swift_release(v14);
    _Block_release(a3);
  }

uint64_t sub_10004E7B0(uint64_t result, uint64_t (*a2)(id), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)result;
  int64_t v6 = *(void *)(*(void *)result + 16LL);
  if (!v6) {
    return a2(0LL);
  }
  if (*(_BYTE *)(v5 + 32) != 1)
  {
LABEL_9:
    _StringGuts.grow(_:)(46LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v5);
    sub_10004C2C4(0LL, v6, a4, v5);
    uint64_t v11 = v10;
    uint64_t v12 = Array.description.getter(v10, &type metadata for String);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease(v11);
    v15._uint64_t countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    id v16 = sub_100027DC8(2u, 0xD00000000000002CLL, 0x800000010006C3C0LL);
    swift_bridgeObjectRelease(0x800000010006C3C0LL);
    a2(v16);
    return swift_errorRelease(v16);
  }

  if (v6 == 1) {
    return a2(0LL);
  }
  for (uint64_t i = 33LL; ; ++i)
  {
    uint64_t v9 = i - 31;
    if (__OFADD__(i - 32, 1LL)) {
      break;
    }
    if (*(_BYTE *)(v5 + i) != 1) {
      goto LABEL_9;
    }
    if (v9 == v6) {
      return a2(0LL);
    }
  }

  __break(1u);
  return result;
}

void sub_10004E914(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v4 = *a1;
  if ((*a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 >= *(void *)(a2 + 16))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v7 = a2 + 16 * v4;
  uint64_t v11 = *(void *)(v7 + 32);
  uint64_t v12 = *(void *)(v7 + 40);
  swift_bridgeObjectRetain(v12);
  v8._uint64_t countAndFlagsBits = 8250LL;
  v8._object = (void *)0xE200000000000000LL;
  String.append(_:)(v8);
  if (v4 >= *(void *)(a3 + 16))
  {
LABEL_10:
    __break(1u);
    return;
  }

  if (*(_BYTE *)(a3 + v4 + 32)) {
    uint64_t v9 = 0x53534543435553LL;
  }
  else {
    uint64_t v9 = 0x4552554C494146LL;
  }
  unint64_t v10 = 0xE700000000000000LL;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(0xE700000000000000LL);
  *a4 = v11;
  a4[1] = v12;
}

uint64_t sub_10004EA64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_1000870E8 != -1) {
    swift_once(&qword_1000870E8, sub_10004BEA8);
  }
  uint64_t v6 = sub_10001939C();
  uint64_t v7 = (os_log_s *)sub_10000B928(v6, (uint64_t)qword_10008F318);
  Logger.logObject.getter(v7);
  os_log_type_t v8 = sub_10003BCB8();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)sub_100019148(2LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "SportsKitRequestXPCSession: Unsubscribing from all events",  v9,  2u);
    sub_1000190E8((uint64_t)v9);
  }

  uint64_t v10 = v3 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation;
  sub_10000B2DC(v3 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation, (uint64_t)v18);
  sub_10000B2DC(v10 + 96, (uint64_t)&v19);
  sub_10002C99C();
  uint64_t v17 = v11;
  uint64_t v12 = sub_100035F98((uint64_t)&unk_100081310);
  *(void *)(v12 + 1sub_100006E64(v0 + 6) = a1;
  *(void *)(v12 + 2sub_100006E64(v0 + 4) = a2;
  swift_retain(a2);
  sub_100006BEC(&qword_100088360);
  sub_10002EBA0(&qword_100088368, &qword_100088360, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v13 = sub_1000503F8((uint64_t)sub_100050130, v12, (uint64_t)nullsub_1);
  swift_release(v12);
  swift_release(v17);
  uint64_t v14 = sub_100050138(v18);
  uint64_t v15 = v3 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables;
  sub_10005039C((uint64_t)v14, (uint64_t)v18);
  AnyCancellable.store(in:)(v15);
  swift_endAccess(v18);
  return swift_release(v13);
}

uint64_t sub_10004EC1C(void *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return a2(0LL);
  }
  swift_errorRetain(*a1);
  if (qword_1000870F8 != -1) {
    swift_once(&qword_1000870F8, sub_10004BF1C);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000B928(v4, (uint64_t)qword_10008F348);
  swift_errorRetain(v3);
  uint64_t v5 = swift_errorRetain(v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v17 = v9;
    *(_DWORD *)os_log_type_t v8 = 136315138;
    swift_getErrorValue(v3, v16, v15);
    uint64_t v10 = Error.localizedDescription.getter(v15[1], v15[2]);
    unint64_t v12 = v11;
    uint64_t v14 = sub_100015AD4(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Tempo /unregister all failed - %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }

  swift_errorRetain(v3);
  a2(v3);
  swift_errorRelease(v3);
  return swift_errorRelease(v3);
}

uint64_t sub_10004EE90(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  uint64_t v54 = a4;
  uint64_t refreshed = type metadata accessor for SportsManager.RefreshOptions(0LL);
  uint64_t v13 = *(void *)(refreshed - 8);
  __chkstk_darwin(refreshed);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000870E8 != -1) {
    swift_once(&qword_1000870E8, sub_10004BEA8);
  }
  uint64_t v16 = sub_10001939C();
  uint64_t v17 = (os_log_s *)sub_10000B928(v16, (uint64_t)qword_10008F318);
  uint64_t v18 = swift_bridgeObjectRetain_n(a2, 2LL);
  Logger.logObject.getter(v18);
  os_log_type_t v19 = sub_10003BCB8();
  if (sub_1000503C4(v19))
  {
    uint64_t v20 = sub_100019148(22LL);
    uint64_t v53 = a3;
    uint64_t v21 = v20;
    uint64_t v22 = sub_100019148(64LL);
    uint64_t v52 = refreshed;
    uint64_t v50 = v22;
    v56[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315394;
    uint64_t v51 = a5;
    swift_bridgeObjectRetain(a2);
    uint64_t v23 = sub_100015AD4(a1, a2, v56);
    uint64_t v24 = sub_1000503AC(v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, v25, v26, v27);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v21 + sub_100006E64(v0 + 12) = 2080;
    uint64_t v55 = v53;
    uint64_t v28 = String.init<A>(reflecting:)(&v55, &type metadata for Int);
    uint64_t v29 = v13;
    uint64_t v30 = a1;
    unint64_t v32 = v31;
    uint64_t v33 = sub_100015AD4(v28, v31, v56);
    uint64_t v34 = sub_1000503AC(v33);
    a5 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v35, v36, v37);
    unint64_t v38 = v32;
    a1 = v30;
    uint64_t v13 = v29;
    swift_bridgeObjectRelease(v38);
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v6,  "SportsKitRequestXPCSession: Refreshing event '%s' with options %s",  (uint8_t *)v21,  0x16u);
    uint64_t v39 = v50;
    swift_arrayDestroy(v50, 2LL);
    uint64_t v40 = v39;
    uint64_t refreshed = v52;
    sub_1000190E8(v40);
    uint64_t v41 = v21;
    a3 = v53;
    sub_1000190E8(v41);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  SportsManager.RefreshOptions.init(rawValue:)(a3);
  sub_100023C7C(a1, a2, (uint64_t)v15, v56);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, refreshed);
  uint64_t v42 = v57;
  uint64_t v43 = v58;
  sub_100006C2C(v56, v57);
  uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v42, v43);
  uint64_t v44 = sub_100035F98((uint64_t)&unk_1000812C0);
  *(void *)(v44 + 1sub_100006E64(v0 + 6) = v54;
  *(void *)(v44 + 2sub_100006E64(v0 + 4) = a5;
  swift_retain(a5);
  sub_100006BEC(&qword_100088360);
  sub_10002EBA0(&qword_100088368, &qword_100088360, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v45 = sub_1000503F8((uint64_t)sub_100050128, v44, (uint64_t)nullsub_1);
  swift_release(v44);
  swift_release(v55);
  uint64_t v46 = sub_100006E64(v56);
  uint64_t v47 = v7 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables;
  sub_10005039C(v46, (uint64_t)v56);
  AnyCancellable.store(in:)(v47);
  swift_endAccess(v56);
  return swift_release(v45);
}

uint64_t sub_10004F1C4(void *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return a2(0LL);
  }
  swift_errorRetain(*a1);
  a2(v3);
  return swift_errorRelease(v3);
}

void sub_10004F2C4()
{
  if (qword_100087140 != -1) {
    swift_once(&qword_100087140, sub_10005DD28);
  }
  sub_10005D94C();
}

uint64_t sub_10004F338(uint64_t a1)
{
  *(void *)(v2 + 9sub_100006E64(v0 + 6) = a1;
  *(void *)(v2 + 10sub_100006E64(v0 + 4) = v1;
  return sub_1000502DC((uint64_t)sub_10004F348);
}

uint64_t sub_10004F348()
{
  uint64_t v1 = *(void *)(v0 + 104);
  sub_10004C438(*(void *)(v0 + 96));
  *(void *)(v0 + 1sub_100006E64(v0 + 12) = v2;
  *(void *)(v0 + 5sub_100006E64(v0 + 6) = v2;
  *(void *)(v0 + 7sub_100006E64(v0 + 2) = 0LL;
  *(void *)(v0 + 80) = 0LL;
  *(void *)(v0 + 6sub_100006E64(v0 + 4) = 0LL;
  *(_BYTE *)(v0 + 8sub_100006E64(v0 + 8) = 0;
  uint64_t v3 = sub_100050264((void *)(v1 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation));
  sub_1000502E8((uint64_t)v3);
  sub_10005034C();
  uint64_t v4 = (void *)swift_task_alloc(dword_100087A8C);
  *(void *)(v0 + 120) = v4;
  uint64_t v5 = sub_1000503D4(v4, (uint64_t)sub_10004F3C4);
  return sub_100050290(v5);
}

uint64_t sub_10004F3C4()
{
  uint64_t v2 = *(void *)(*v1 + 120);
  uint64_t v3 = *v1;
  *(void *)(v3 + 12sub_100006E64(v0 + 8) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0) {
    return sub_1000190B0();
  }
  sub_100006E64((void *)(v3 + 16));
  return sub_10002EFD4(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_10004F440()
{
  return sub_1000190BC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004F4D4(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = sub_100006BEC(&qword_100087AD0);
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a1,  &type metadata for String,  v6,  &protocol witness table for String);
  v3[4] = v7;
  uint64_t v8 = dword_100089344;
  a3;
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_10004F578;
  return sub_10004F338(v7);
}

uint64_t sub_10004F578()
{
  uint64_t v2 = *v1;
  uint64_t v5 = v2;
  uint64_t v3 = *(void **)(v2 + 16);
  sub_100050404(*(void *)(v2 + 40), &v5);

  sub_10001919C();
  if (v0)
  {
    _convertErrorToNSError(_:)(v0);
    sub_1000503E4();
    sub_100050378();
  }

  else
  {
    sub_100050368();
  }

  _Block_release(*(const void **)(v2 + 24));
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_10004F5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006BEC(&qword_100087BF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  sub_10000AB60((uint64_t)v6, 1LL, 1LL, v7);
  uint64_t v8 = (void *)swift_allocObject(&unk_1000811D0, 48LL, 7LL);
  v8[2] = 0LL;
  v8[3] = 0LL;
  v8[4] = a1;
  void v8[5] = a2;
  uint64_t v9 = (void *)swift_allocObject(&unk_1000811F8, 48LL, 7LL);
  uint64_t v9[2] = 0LL;
  void v9[3] = 0LL;
  v9[4] = &unk_1000892E8;
  v9[5] = v8;
  uint64_t v10 = sub_10004FD68((uint64_t)v6, (uint64_t)&unk_1000892F8, (uint64_t)v9);
  return swift_release(v10);
}

uint64_t sub_10004F6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  return sub_1000502DC((uint64_t)sub_10004F6E8);
}

uint64_t sub_10004F6E8()
{
  *(_BYTE *)(v0 + 8sub_100006E64(v0 + 8) = 1;
  uint64_t v2 = sub_100050264((void *)(v1 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation));
  sub_1000502E8((uint64_t)v2);
  sub_10005034C();
  uint64_t v3 = (void *)swift_task_alloc(dword_100087A8C);
  *(void *)(v0 + 13sub_100006E64(v0 + 6) = v3;
  uint64_t v4 = sub_1000503D4(v3, (uint64_t)sub_10004F748);
  return sub_100050290(v4);
}

uint64_t sub_10004F748()
{
  if (v1) {
    return sub_1000190B0();
  }
  sub_100006E64((void *)(v0 + 16));
  return sub_10002EFD4(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10004F7A4(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  v4[4] = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v13 = v12;
  v4[5] = v12;
  uint64_t v14 = dword_10008932C;
  a4;
  uint64_t v15 = (void *)swift_task_alloc(v14);
  v4[6] = v15;
  *uint64_t v15 = v4;
  v15[1] = sub_100050260;
  return sub_10004F6D0(v8, v10, v11, v13);
}

uint64_t sub_10004F858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  return sub_1000502DC((uint64_t)sub_10004F870);
}

uint64_t sub_10004F870()
{
  *(_BYTE *)(v0 + 8sub_100006E64(v0 + 8) = 2;
  uint64_t v2 = sub_100050264((void *)(v1 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation));
  sub_1000502E8((uint64_t)v2);
  sub_10005034C();
  uint64_t v3 = (void *)swift_task_alloc(dword_100087A8C);
  *(void *)(v0 + 13sub_100006E64(v0 + 6) = v3;
  uint64_t v4 = sub_1000503D4(v3, (uint64_t)sub_10004F8D0);
  return sub_100050290(v4);
}

uint64_t sub_10004F8D0()
{
  if (v1) {
    return sub_1000190B0();
  }
  sub_100006E64((void *)(v0 + 16));
  return sub_10002EFD4(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10004F918()
{
  return sub_1000190BC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004F958(void *a1, int a2, void *a3, void *a4, void *aBlock, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = sub_10005031C();
  uint64_t v15 = (void *)swift_allocObject(v12, v13, v14);
  v15[2] = a3;
  void v15[3] = a4;
  void v15[4] = v11;
  v15[5] = a1;
  id v16 = a3;
  id v17 = a4;
  id v18 = a1;
  return sub_10004F5F4(a7, (uint64_t)v15);
}

uint64_t type metadata accessor for SportsKitRequestXPCSession()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd26SportsKitRequestXPCSession);
}

uint64_t sub_10004F9E8(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  v4[4] = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v13 = v12;
  v4[5] = v12;
  uint64_t v14 = dword_100089314;
  a4;
  uint64_t v15 = (void *)swift_task_alloc(v14);
  v4[6] = v15;
  *uint64_t v15 = v4;
  v15[1] = sub_10004FA9C;
  return sub_10004F858(v8, v10, v11, v13);
}

uint64_t sub_10004FA9C()
{
  uint64_t v9 = v2;
  uint64_t v10 = v3;
  uint64_t v8 = v1;
  uint64_t v4 = (uint64_t *)*v1;
  uint64_t v8 = v4;
  uint64_t v5 = (void *)v4[4];
  uint64_t v6 = (void *)v4[2];
  sub_100050404(v4[6], &v8);

  sub_10001919C();
  swift_bridgeObjectRelease();
  if (v0)
  {
    _convertErrorToNSError(_:)(v0);
    sub_1000503E4();
    sub_100050378();
  }

  else
  {
    sub_100050368();
  }

  _Block_release((const void *)v4[3]);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_10004FB2C()
{
  uint64_t v1 = (void *)sub_1000503F0();
  *(void *)(v0 + 1sub_100006E64(v0 + 6) = v1;
  uint64_t v2 = sub_1000502B8(v1, (uint64_t)sub_1000389C0);
  return sub_1000502A4(v2, v3, v4, v5, v6);
}

uint64_t sub_10004FB70(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1 = Array.description.getter(v3, &type metadata for String);
  sub_10001919C();
  return v1;
}

uint64_t sub_10004FBCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + 1sub_100006E64(v0 + 6) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100038B18;
  return v6();
}

uint64_t sub_10004FC24()
{
  uint64_t v1 = (void *)sub_1000503F0();
  *(void *)(v0 + 1sub_100006E64(v0 + 6) = v1;
  uint64_t v2 = sub_1000502B8(v1, (uint64_t)sub_100038B18);
  return sub_1000502A4(v2, v3, v4, v5, v6);
}

uint64_t sub_10004FC68(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + 1sub_100006E64(v0 + 6) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100038B18;
  return v7();
}

uint64_t sub_10004FCC0()
{
  uint64_t v1 = sub_10005031C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004FCE4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1000892F4);
  *(void *)(v2 + 1sub_100006E64(v0 + 6) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100038B18;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1000892F0 + dword_1000892F0))( a1,  v4,  v5,  v6);
}

uint64_t sub_10004FD68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = sub_10000AB6C(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_100019034(a1, &qword_100087BF0);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = swift_allocObject(&unk_100081220, 32LL, 7LL);
  *(void *)(v16 + 1sub_100006E64(v0 + 6) = a2;
  *(void *)(v16 + 2sub_100006E64(v0 + 4) = a3;
  if (v15 | v13)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    id v17 = v19;
    void v19[2] = v13;
    v19[3] = v15;
  }

  else
  {
    id v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100089308, v16);
}

uint64_t sub_10004FEAC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 1sub_100006E64(v0 + 6) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10003B7AC;
  return v6(a1);
}

uint64_t sub_10004FF10()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004FF34(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_100089304);
  *(void *)(v2 + 1sub_100006E64(v0 + 6) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10003B97C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100089300 + dword_100089300))(a1, v4);
}

uint64_t sub_10004FFA8()
{
  _Block_release(*(const void **)(v0 + 32));
  uint64_t v1 = sub_10005031C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004FFDC()
{
  uint64_t v1 = (void *)sub_1000503F0();
  *(void *)(v0 + 1sub_100006E64(v0 + 6) = v1;
  uint64_t v2 = sub_1000502B8(v1, (uint64_t)sub_100038B18);
  return sub_1000502A4(v2, v3, v4, v5, v6);
}

uint64_t sub_100050020()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100050054()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_100089334);
  *(void *)(v1 + 1sub_100006E64(v0 + 6) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100038B18;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100089330 + dword_100089330))(v2, v3, v4);
}

uint64_t sub_1000500C4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0LL;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_1000500FC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100050120(uint64_t a1)
{
}

uint64_t sub_100050128(void *a1)
{
  return sub_10004F1C4(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100050130(void *a1)
{
  return sub_10004EC1C(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

void *sub_100050138(void *a1)
{
  return a1;
}

uint64_t sub_10005016C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100050198(uint64_t a1)
{
  return sub_10004E7B0(a1, *(uint64_t (**)(id))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000501A8(void *a1)
{
  return sub_10004DEF0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

uint64_t sub_1000501B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006BEC(&qword_100089380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void *sub_100050200(void *a1)
{
  return sub_10004D674(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_100050210()
{
  uint64_t v1 = sub_10005031C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100050234(uint64_t a1)
{
  return sub_10004D8D4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(void))(v1 + 32));
}

void *sub_100050264(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100006C2C(a1, v3);
  *(void *)(v2 + 40) = v3;
  *(void *)(v2 + 4sub_100006E64(v0 + 8) = *(void *)(v4 + 8);
  return sub_100023D5C(v1);
}

uint64_t sub_100050290(uint64_t a1)
{
  return sub_100011248(a1);
}

uint64_t sub_1000502A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_1000502B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_1000502DC(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t sub_1000502E8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(a1, v2, v1);
}

uint64_t sub_1000502FC()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 136);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 14sub_100006E64(v0 + 4) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10005031C()
{
  return v0;
}

__n128 sub_10005032C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 112);
  __n128 result = *(__n128 *)(v0 + 96);
  *(__n128 *)(v0 + 5sub_100006E64(v0 + 6) = result;
  *(void *)(v0 + 7sub_100006E64(v0 + 2) = v2;
  *(void *)(v0 + 80) = v1;
  return result;
}

void *sub_10005034C()
{
  return sub_100006C2C(v0, *(void *)(v1 + 40));
}

uint64_t sub_100050368()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 16))(v0, 0LL);
}

uint64_t sub_100050378()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16))(v0, v1);
}

  ;
}

uint64_t sub_10005039C(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(v2, a2, 33LL, 0LL);
}

uint64_t sub_1000503AC(uint64_t a1)
{
  *(void *)(v1 - 12sub_100006E64(v0 + 8) = a1;
  return v1 - 128;
}

BOOL sub_1000503C4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000503D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_1000503E4()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1000503F0()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_1000503F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publisher.sink(receiveCompletion:receiveValue:)(a1, a2, a3, 0LL, v3);
}

uint64_t sub_100050404@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_100050410()
{
  uint64_t v0 = type metadata accessor for WatchlistSuppressionActor();
  uint64_t v1 = swift_allocObject(v0, 112LL, 15LL);
  uint64_t result = swift_defaultActor_initialize();
  qword_10008F3C0 = v1;
  return result;
}

uint64_t *sub_100050448()
{
  if (qword_100087120 != -1) {
    swift_once(&qword_100087120, sub_100050410);
  }
  return &qword_10008F3C0;
}

uint64_t type metadata accessor for WatchlistSuppressionActor()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd25WatchlistSuppressionActor);
}

Swift::Int sub_1000504A8(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000504EC()
{
  return swift_retain(qword_10008F3C0);
}

uint64_t sub_100050508(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for WatchlistSuppressionActor();
  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

Swift::Int sub_10005052C()
{
  return sub_1000504A8(*v0);
}

Swift::Int sub_100050534()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_100050574()
{
  unint64_t v0 = sub_100050760();
  v1._uint64_t countAndFlagsBits = Error.localizedDescription.getter(&unk_100081578, v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 0xD000000000000013LL;
}

unint64_t sub_100050604()
{
  return sub_100050574();
}

unint64_t sub_100050618(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000017LL;
  }
  else {
    return 0xD000000000000020LL;
  }
}

unint64_t sub_100050654()
{
  return sub_100050618(*v0);
}

uint64_t sub_10005065C()
{
  uint64_t v0 = type metadata accessor for WatchlistSuppressNotificationsXPCConnectionManager();
  swift_allocObject(v0, 40LL, 7LL);
  uint64_t result = sub_100050694();
  qword_10008F3C8 = result;
  return result;
}

uint64_t sub_100050694()
{
  uint64_t v1 = v0;
  *(void *)(v0 + 1sub_100006E64(v0 + 6) = 0LL;
  type metadata accessor for PersistentStore(0LL);
  uint64_t v2 = PersistentStore.__allocating_init()();
  *(void *)(v1 + 2sub_100006E64(v0 + 4) = v2;
  uint64_t v3 = swift_retain(v2);
  uint64_t v4 = dispatch thunk of PersistentStore.retrieveSuppressionTally()(v3);
  swift_release(v2);
  *(void *)(v1 + 3sub_100006E64(v0 + 2) = v4;
  return v1;
}

uint64_t sub_1000506F0()
{
  swift_release(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return v0;
}

uint64_t sub_10005071C()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for WatchlistSuppressNotificationsXPCConnectionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd50WatchlistSuppressNotificationsXPCConnectionManager);
}

unint64_t sub_100050760()
{
  unint64_t result = qword_100089528;
  if (!qword_100089528)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006964C, &unk_100081578);
    atomic_store(result, (unint64_t *)&qword_100089528);
  }

  return result;
}

unint64_t sub_1000507A0()
{
  unint64_t result = qword_100089530;
  if (!qword_100089530)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000696D4, &unk_1000814E8);
    atomic_store(result, (unint64_t *)&qword_100089530);
  }

  return result;
}

unint64_t sub_1000507E0()
{
  unint64_t result = qword_100089538;
  if (!qword_100089538)
  {
    uint64_t v1 = type metadata accessor for WatchlistSuppressionActor();
    unint64_t result = swift_getWitnessTable(&unk_100069754, v1);
    atomic_store(result, (unint64_t *)&qword_100089538);
  }

  return result;
}

void type metadata accessor for WatchlistSuppressNotificationXPCConnectionManagerError()
{
}

uint64_t sub_10005082C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100050878 + 4 * byte_100069555[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000508AC + 4 * asc_100069550[v4]))();
}

uint64_t sub_1000508AC(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000508B4(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000508BCLL);
  }
  return result;
}

uint64_t sub_1000508C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000508D0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000508D4(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000508DC(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

void type metadata accessor for WatchlistSuppressionError()
{
}

unint64_t sub_1000508F8()
{
  unint64_t result = qword_100089540;
  if (!qword_100089540)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006981C, &unk_100081578);
    atomic_store(result, (unint64_t *)&qword_100089540);
  }

  return result;
}

uint64_t sub_100050934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)swift_slowAlloc(20LL, -1LL);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = -[objc_class bytes](isa, "bytes");
  uint64_t v7 = isa;
  unint64_t v8 = Data.count.getter(a1, a2);
  if ((v8 & 0x8000000000000000LL) != 0)
  {
    sub_100019110();
    id v17 = "Negative value is not representable";
    uint64_t v18 = 35LL;
LABEL_8:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v17,  v18,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    return result;
  }

  if (HIDWORD(v8))
  {
    sub_100019110();
    id v17 = "Not enough bits to represent the passed value";
    uint64_t v18 = 45LL;
    goto LABEL_8;
  }

  CC_SHA1(v6, v8, v4);
  uint64_t v9 = Data.init(bytes:count:)(v4, 20LL);
  unint64_t v11 = v10;
  id v12 = [(id)objc_opt_self(AMSMediaTokenService) createBagForSubProfile];
  if (!v12)
  {
    sub_100050B24();
    id v12 = sub_100024D40(0xD000000000000014LL, 0x800000010006C5C0LL, 49LL, 0xE100000000000000LL);
  }

  uint64_t v13 = (void *)objc_opt_self(&OBJC_CLASS___AMSMescal);
  Class v14 = Data._bridgeToObjectiveC()().super.isa;
  id v15 = [v13 signaturePromiseFromData:v14 type:1 bag:v12];

  sub_10000ABB4(v9, v11);
  return (uint64_t)v15;
}

uint64_t type metadata accessor for MescalSignature()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd15MescalSignature);
}

unint64_t sub_100050B24()
{
  unint64_t result = qword_100087FA0;
  if (!qword_100087FA0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSBag);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100087FA0);
  }

  return result;
}

uint64_t sub_100050B60(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_10007E3C0, a1, a2, &unk_100087160);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x2D) {
    return 45LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100050BB0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100050BEC + 4 * byte_100069860[a1]))( 0xD000000000000016LL,  0x800000010006A990LL);
}

uint64_t sub_100050BEC()
{
  return 7368801LL;
}

uint64_t sub_100050BFC()
{
  return 0x7041746E65696C63LL;
}

uint64_t sub_100050C1C()
{
  return 0x6163696E6F6E6163LL;
}

uint64_t sub_100050C3C()
{
  return 0x707954746E657665LL;
}

void sub_100050FB8(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_100050FC4()
{
}

uint64_t sub_100050FCC(uint64_t a1)
{
  return sub_100041D04(a1, *v1);
}

void sub_100050FD4(uint64_t a1)
{
}

uint64_t sub_100050FDC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100050B60(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100051008@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100050BB0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100051030()
{
  algn_10008F3D8[5] = 0;
  *(_WORD *)&algn_10008F3D8[6] = -5120;
}

uint64_t getEnumTagSinglePayload for SportsMetricsKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xD4)
  {
    if (a2 + 44 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 44) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 45;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for SportsMetricsKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 44 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 44) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xD4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xD3) {
    return ((uint64_t (*)(void))((char *)&loc_100051130 + 4 * byte_100069892[v4]))();
  }
  *a1 = a2 + 44;
  return ((uint64_t (*)(void))((char *)sub_100051164 + 4 * byte_10006988D[v4]))();
}

uint64_t sub_100051164(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10005116C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100051174LL);
  }
  return result;
}

uint64_t sub_100051180(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100051188LL);
  }
  *(_BYTE *)uint64_t result = a2 + 44;
  return result;
}

uint64_t sub_10005118C(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100051194(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SportsMetricsKey()
{
  return &type metadata for SportsMetricsKey;
}

unint64_t sub_1000511B4()
{
  unint64_t result = qword_1000895E0;
  if (!qword_1000895E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000698EC, &type metadata for SportsMetricsKey);
    atomic_store(result, (unint64_t *)&qword_1000895E0);
  }

  return result;
}

uint64_t sub_1000511F0()
{
  uint64_t v0 = sub_100006BEC(&qword_100087E58);
  uint64_t inited = swift_initStackObject(v0, v10);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067B00;
  *(_BYTE *)(inited + 3sub_100006E64(v0 + 2) = 22;
  sub_100043B5C();
  *(void *)(inited + 6sub_100006E64(v0 + 4) = &type metadata for Int;
  *(void *)(inited + 40) = v2;
  *(_BYTE *)(inited + 7sub_100006E64(v0 + 2) = 23;
  sub_100043A00();
  *(void *)(inited + 10sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(inited + 80) = v3;
  *(void *)(inited + 8sub_100006E64(v0 + 8) = v4;
  *(_BYTE *)(inited + 1sub_100006E64(v0 + 12) = 24;
  uint64_t v5 = type metadata accessor for ApiAgentError(0LL);
  unint64_t v6 = sub_1000512D0();
  uint64_t v7 = Error.localizedDescription.getter(v5, v6);
  *(void *)(inited + 14sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(inited + 120) = v7;
  *(void *)(inited + 12sub_100006E64(v0 + 8) = v8;
  sub_100006BEC(qword_100087690);
  sub_100021CD0();
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for SportsMetricsKey);
}

unint64_t sub_1000512D0()
{
  unint64_t result = qword_100088B70;
  if (!qword_100088B70)
  {
    uint64_t v1 = type metadata accessor for ApiAgentError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_100068788, v1);
    atomic_store(result, (unint64_t *)&qword_100088B70);
  }

  return result;
}

id sub_100051340()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 BOOLForKey:v1];

  return v2;
}

uint64_t type metadata accessor for InternalSettings()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd16InternalSettings);
}

uint64_t storeEnumTagSinglePayload for TVAppFeatureFlags(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100051400 + 4 * asc_1000699A0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100051420 + 4 * byte_1000699A5[v4]))();
  }
}

_BYTE *sub_100051400(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100051420(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100051428(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100051430(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100051438(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100051440(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TVAppFeatureFlags()
{
  return &type metadata for TVAppFeatureFlags;
}

unint64_t sub_100051460()
{
  unint64_t result = qword_100089688;
  if (!qword_100089688)
  {
    unint64_t result = swift_getWitnessTable(&unk_100069A04, &type metadata for TVAppFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100089688);
  }

  return result;
}

void sub_10005149C()
{
}

Swift::Int sub_1000514C0()
{
  return Hasher._finalize()();
}

Swift::Int sub_100051508()
{
  return Hasher._finalize()();
}

const char *sub_100051544()
{
  return "TVApp";
}

const char *sub_100051558()
{
  return "sports_app_live_activities";
}

BOOL SportsSessionType.init(rawValue:)(uint64_t a1)
{
  return a1 != 0;
}

uint64_t SportsActivityType.rawValue.getter()
{
  return 0LL;
}

BOOL sub_10005158C@<W0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = SportsSessionType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void sub_1000515BC(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t static SportsActivityCreationPolicy.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100027D0C();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100019488();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for SportsActivityCreationPolicy(0LL);
  __chkstk_darwin(v9);
  sub_100019488();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = sub_100006BEC(&qword_100089690);
  __chkstk_darwin(v13);
  sub_100019488();
  uint64_t v16 = v15 - v14;
  uint64_t v18 = v15 - v14 + *(int *)(v17 + 48);
  sub_10005178C(a1, v15 - v14);
  sub_10005178C(a2, v18);
  sub_100051EE0(v16);
  if (!v20)
  {
    sub_10005178C(v16, v12);
    sub_100051EE0(v18);
    if (!v20)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8, v18, v4);
      char v19 = static Date.== infix(_:_:)(v12, v8);
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v21(v8, v4);
      v21(v12, v4);
      sub_100051810(v16);
      return v19 & 1;
    }

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v12, v4);
LABEL_9:
    sub_1000517D0(v16);
    char v19 = 0;
    return v19 & 1;
  }

  sub_100051EE0(v18);
  if (!v20) {
    goto LABEL_9;
  }
  sub_100051810(v16);
  char v19 = 1;
  return v19 & 1;
}

uint64_t type metadata accessor for SportsActivityCreationPolicy(uint64_t a1)
{
  uint64_t result = qword_100089718;
  if (!qword_100089718) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SportsActivityCreationPolicy);
  }
  return result;
}

uint64_t sub_10005178C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SportsActivityCreationPolicy(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000517D0(uint64_t a1)
{
  uint64_t v2 = sub_100006BEC(&qword_100089690);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100051810(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SportsActivityCreationPolicy(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100051850()
{
  unint64_t result = qword_100089698;
  if (!qword_100089698)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SportsSessionType,  &type metadata for SportsSessionType);
    atomic_store(result, (unint64_t *)&qword_100089698);
  }

  return result;
}

unint64_t sub_100051890()
{
  unint64_t result = qword_1000896A0;
  if (!qword_1000896A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SportsActivityType,  &type metadata for SportsActivityType);
    atomic_store(result, (unint64_t *)&qword_1000896A0);
  }

  return result;
}

ValueMetadata *type metadata accessor for SportsSessionType()
{
  return &type metadata for SportsSessionType;
}

uint64_t _s7sportsd17SportsSessionTypeOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100051924 + 4 * byte_100069A60[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100051944 + 4 * byte_100069A65[v4]))();
  }
}

_BYTE *sub_100051924(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100051944(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10005194C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100051954(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10005195C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100051964(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SportsActivityType()
{
  return &type metadata for SportsActivityType;
}

uint64_t *initializeBufferWithCopyOfBuffer for SportsActivityCreationPolicy( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v8);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    if (sub_10000AB6C((uint64_t)a2, 1LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      sub_10000AB60((uint64_t)a1, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t destroy for SportsActivityCreationPolicy(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t result = sub_10000AB6C(a1, 1LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  }
  return result;
}

void *initializeWithCopy for SportsActivityCreationPolicy(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  if (sub_10000AB6C((uint64_t)a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    sub_10000AB60((uint64_t)a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *assignWithCopy for SportsActivityCreationPolicy(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  int v7 = sub_10000AB6C((uint64_t)a1, 1LL, v6);
  int v8 = sub_10000AB6C((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  sub_10000AB60((uint64_t)a1, 0LL, 1LL, v6);
  return a1;
}

void *initializeWithTake for SportsActivityCreationPolicy(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  if (sub_10000AB6C((uint64_t)a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    sub_10000AB60((uint64_t)a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *assignWithTake for SportsActivityCreationPolicy(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  int v7 = sub_10000AB6C((uint64_t)a1, 1LL, v6);
  int v8 = sub_10000AB6C((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  sub_10000AB60((uint64_t)a1, 0LL, 1LL, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsActivityCreationPolicy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100051D8C);
}

uint64_t sub_100051D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100027D0C();
  unsigned int v5 = sub_10000AB6C(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SportsActivityCreationPolicy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100051DD8);
}

uint64_t sub_100051DD8(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = sub_100027D0C();
  return sub_10000AB60(a1, v5, a3, v6);
}

uint64_t sub_100051E1C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  return sub_10000AB6C(a1, 1LL, v2);
}

uint64_t sub_100051E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  return sub_10000AB60(a1, a2, 1LL, v4);
}

uint64_t sub_100051E84(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 1LL);
    return 0LL;
  }

  return result;
}

uint64_t sub_100051EE0(uint64_t a1)
{
  return sub_10000AB6C(a1, 1LL, v1);
}

uint64_t sub_100051EFC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7sportsd30LiveActivityRequestMeasurement_metricsPipeline;
  uint64_t v2 = type metadata accessor for MetricsPipeline(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  sub_100006E64((void *)(v0 + OBJC_IVAR____TtC7sportsd30LiveActivityRequestMeasurement_eventRecorder));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100051F5C()
{
  return type metadata accessor for LiveActivityRequestMeasurement(0LL);
}

uint64_t type metadata accessor for LiveActivityRequestMeasurement(uint64_t a1)
{
  uint64_t result = qword_100089768;
  if (!qword_100089768) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LiveActivityRequestMeasurement);
  }
  return result;
}

uint64_t sub_100051F9C(uint64_t a1)
{
  uint64_t result = type metadata accessor for MetricsPipeline(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100052010()
{
  uint64_t v0 = sub_100006BEC(&qword_100087510);
  uint64_t result = swift_allocObject(v0, 144LL, 7LL);
  *(_OWORD *)(result + 1sub_100006E64(v0 + 6) = xmmword_100067770;
  *(void *)(result + 3sub_100006E64(v0 + 2) = 0x756F6D796E6F6E61LL;
  *(void *)(result + 40) = 0xE900000000000073LL;
  *(void *)(result + 4sub_100006E64(v0 + 8) = 0x65676175676E616CLL;
  *(void *)(result + 5sub_100006E64(v0 + 6) = 0xE800000000000000LL;
  strcpy((char *)(result + 64), "hardwareModel");
  *(_WORD *)(result + 7sub_100006E64(v0 + 8) = -4864;
  *(void *)(result + 80) = 0x6F724665726F7473LL;
  *(void *)(result + 8sub_100006E64(v0 + 8) = 0xEA0000000000746ELL;
  *(void *)(result + 9sub_100006E64(v0 + 6) = 0xD000000000000010LL;
  *(void *)(result + 10sub_100006E64(v0 + 4) = 0x800000010006C7B0LL;
  *(void *)(result + 1sub_100006E64(v0 + 12) = 0xD000000000000010LL;
  *(void *)(result + 120) = 0x800000010006C7D0LL;
  strcpy((char *)(result + 128), "xpSendMethod");
  *(_BYTE *)(result + 14Hasher._combine(_:)(v1 & 1) = 0;
  *(_WORD *)(result + 14sub_100006E64(v0 + 2) = -5120;
  off_100089728 = (_UNKNOWN *)result;
  return result;
}

void sub_100052110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (a3)
  {
    uint64_t v8 = a3;
  }

  else
  {
    a2 = v3[3];
    uint64_t v8 = v4[4];
    swift_bridgeObjectRetain(v8);
  }

  sub_100052418();
  swift_bridgeObjectRetain(a3);
  id v12 = sub_100052220(a2, v8);
  uint64_t v9 = LintedMetricsEvent.fields.getter();
  uint64_t v10 = sub_100052470(v9, v6);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release(v10);
  [v12 addPropertiesWithDictionary:isa];

  [(id)v4[2] enqueueEvent:v12];
}

id sub_100052220(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithTopic:v5];

  return v6;
}

uint64_t sub_100052290()
{
  uint64_t v1 = Promise<A>.init(_:)([*(id *)(v0 + 16) flush]);
  v4[3] = type metadata accessor for SyncTaskScheduler(0LL);
  v4[4] = &protocol witness table for SyncTaskScheduler;
  sub_100023D5C(v4);
  SyncTaskScheduler.init()();
  uint64_t v2 = Promise.map<A>(on:_:)(v4, sub_10005233C, 0LL, &type metadata for Int);
  swift_release(v1);
  sub_100006E64(v4);
  return v2;
}

id sub_10005233C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 integerValue];
  *a2 = result;
  return result;
}

uint64_t sub_100052374()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return v0;
}

uint64_t sub_100052398()
{
  uint64_t v0 = sub_100052374();
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for LiveActivityRequestEventRecorder()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsdP33_6DDAB5D8390E734ED5DDE618A87C673E32LiveActivityRequestEventRecorder);
}

void sub_1000523D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000523F8()
{
  return sub_100052290();
}

unint64_t sub_100052418()
{
  unint64_t result = qword_1000898A8;
  if (!qword_1000898A8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSMetricsEvent);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000898A8);
  }

  return result;
}

uint64_t sub_100052454(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

uint64_t sub_100052470(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (1LL << v5) + 63;
  uint64_t v8 = v7 >> 6;
  uint64_t v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100052454(0LL, v8, v10);
    uint64_t v11 = sub_1000525D8((uint64_t)v10, v8, v4);
    if (v2) {
      swift_willThrow(v11);
    }
    else {
      return v11;
    }
  }

  else
  {
    id v12 = (void *)swift_slowAlloc(v9, -1LL);
    sub_100052454(0LL, v8, v12);
    a2 = sub_1000525D8((uint64_t)v12, v8, v4);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  return a2;
}

uint64_t sub_1000525D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v32 = (unint64_t *)result;
  uint64_t v33 = 0LL;
  int64_t v3 = 0LL;
  uint64_t v39 = a3;
  uint64_t v6 = *(void *)(a3 + 64);
  uint64_t v4 = a3 + 64;
  uint64_t v5 = v6;
  uint64_t v7 = 1LL << *(_BYTE *)(v4 - 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & v5;
  uint64_t v34 = v4;
  int64_t v35 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    while (1)
    {
      if (v9)
      {
        unint64_t v10 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v11 = v10 | (v3 << 6);
      }

      else
      {
        int64_t v12 = v3 + 1;
        if (__OFADD__(v3, 1LL)) {
          goto LABEL_43;
        }
        if (v12 >= v35) {
          return sub_1000528E4(v32, a2, v33, v39);
        }
        unint64_t v13 = *(void *)(v34 + 8 * v12);
        ++v3;
        if (!v13)
        {
          int64_t v3 = v12 + 1;
          if (v12 + 1 >= v35) {
            return sub_1000528E4(v32, a2, v33, v39);
          }
          unint64_t v13 = *(void *)(v34 + 8 * v3);
          if (!v13)
          {
            int64_t v3 = v12 + 2;
            if (v12 + 2 >= v35) {
              return sub_1000528E4(v32, a2, v33, v39);
            }
            unint64_t v13 = *(void *)(v34 + 8 * v3);
            if (!v13)
            {
              int64_t v14 = v12 + 3;
              if (v14 >= v35) {
                return sub_1000528E4(v32, a2, v33, v39);
              }
              unint64_t v13 = *(void *)(v34 + 8 * v14);
              if (!v13)
              {
                while (1)
                {
                  int64_t v3 = v14 + 1;
                  if (__OFADD__(v14, 1LL)) {
                    goto LABEL_44;
                  }
                  if (v3 >= v35) {
                    return sub_1000528E4(v32, a2, v33, v39);
                  }
                  unint64_t v13 = *(void *)(v34 + 8 * v3);
                  ++v14;
                  if (v13) {
                    goto LABEL_19;
                  }
                }
              }

              int64_t v3 = v14;
            }
          }
        }

uint64_t sub_1000528A4(uint64_t a1)
{
  uint64_t v2 = sub_100006BEC(&qword_1000898B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000528E4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_100006BEC(&qword_100087380);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)(v5);
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }

    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_40;
      }
      if (v14 >= v30) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v30) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v30) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v30) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_41;
                }
                if (v10 >= v30) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v10 = v16;
          }
        }
      }

LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }

    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_100018C20(*(void *)(v4 + 56) + 32 * v13, (uint64_t)v34);
    sub_10000AC00(v34, v33);
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain(v18);
    String.hash(into:)(v32, v19, v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0) {
      break;
    }
    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    uint64_t v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *uint64_t v28 = v19;
    v28[1] = v18;
    uint64_t result = (uint64_t)sub_10000AC00(v33, (_OWORD *)(*(void *)(v8 + 56) + 32 * v23));
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_39;
    }
    if (!v5) {
      return v8;
    }
  }

  char v24 = 0;
  unint64_t v25 = (unint64_t)(63 - v20) >> 6;
  while (++v22 != v25 || (v24 & 1) == 0)
  {
    BOOL v26 = v22 == v25;
    if (v22 == v25) {
      unint64_t v22 = 0LL;
    }
    v24 |= v26;
    uint64_t v27 = *(void *)(v11 + 8 * v22);
    if (v27 != -1)
    {
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
      goto LABEL_34;
    }
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

    uint64_t v6 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    uint64_t v8 = v13;
  }

  uint64_t v14 = v8 + 5;
  if (v8 + 5 >= v30)
  {
LABEL_36:
    swift_release(v3);
    sub_100018C5C(a1);
    return;
  }

  unint64_t v12 = *(void *)(v31 + 8 * v14);
  if (v12)
  {
    unint64_t v13 = v8 + 5;
    goto LABEL_24;
  }

  while (1)
  {
    unint64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v13 >= v30) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v31 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }

void sub_100052B9C()
{
  double v0 = Date.timeIntervalSince1970.getter() * 1000.0;
  if ((~*(void *)&v0 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v0 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v0 >= 1.84467441e19) {
LABEL_7:
  }
    __break(1u);
}

unint64_t sub_100052BF8(double a1)
{
  double v1 = a1 * 1000.0;
  if ((~*(void *)&v1 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v1 < 1.84467441e19) {
    return (unint64_t)v1;
  }
LABEL_7:
  __break(1u);
  return result;
}

id sub_100052C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = &v3[OBJC_IVAR____TtC7sportsd16SportsXPCSession_entitlement];
  *(void *)uint64_t v4 = a1;
  *((void *)v4 + Hasher._combine(_:)(v1 & 1) = a2;
  *(void *)&v3[OBJC_IVAR____TtC7sportsd16SportsXPCSession_connection] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for SportsXPCSession();
  return objc_msgSendSuper2(&v6, "init");
}

uint64_t sub_100052C90()
{
  uint64_t v1 = v0;
  if (qword_1000870E8 != -1) {
    swift_once(&qword_1000870E8, sub_10004BEA8);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000B928(v2, (uint64_t)qword_10008F318);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    objc_super v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)objc_super v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "New daemon connection.", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC7sportsd16SportsXPCSession_connection);
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 valueForEntitlement:v8];

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)(v9);
    swift_unknownObjectRelease(v9);
  }

  else
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
  }

  sub_10000CB94((uint64_t)&v13, (uint64_t)v15);
  sub_10002CE10((uint64_t)v15, (uint64_t)&v13);
  if (!*((void *)&v14 + 1))
  {
    sub_10000CBDC((uint64_t)&v13);
LABEL_13:
    uint64_t v10 = &selRef_invalidate;
    goto LABEL_14;
  }

  if ((swift_dynamicCast(&v12, &v13, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) == 0
    || (v12 & 1) == 0)
  {
    goto LABEL_13;
  }

  uint64_t v10 = &selRef_resume;
LABEL_14:
  [v7 *v10];
  return sub_10000CBDC((uint64_t)v15);
}

void sub_100052E54()
{
}

id sub_100052E8C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SportsXPCSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SportsXPCSession()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd16SportsXPCSession);
}

uint64_t sub_100052F18()
{
  uint64_t v1 = (void *)sub_1000530D4();

  dispatch thunk of SportingEventClock.minutes.getter();
  SportingEvent.clock.getter();
  objc_super v2 = (void *)sub_1000530D4();

  uint64_t v3 = dispatch thunk of SportingEventClock.seconds.getter();
  char v5 = v4;

  SportingEvent.clock.getter();
  objc_super v6 = (void *)sub_1000530D4();

  uint64_t v7 = dispatch thunk of SportingEventClock.milliseconds.getter();
  char v9 = v8;

  uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  v10._uint64_t countAndFlagsBits = 58LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  if ((v5 & 1) != 0) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = v3;
  }
  uint64_t v12 = sub_100006BEC(&qword_100087C20);
  uint64_t v13 = sub_1000530C8(v12);
  *(_OWORD *)(v13 + 1sub_100006E64(v0 + 6) = xmmword_100067230;
  *(void *)(v13 + 5sub_100006E64(v0 + 6) = &type metadata for Int;
  *(void *)(v13 + 6sub_100006E64(v0 + 4) = &protocol witness table for Int;
  *(void *)(v13 + 3sub_100006E64(v0 + 2) = v11;
  v14._uint64_t countAndFlagsBits = String.init(format:_:)(1681010725LL, 0xE400000000000000LL, v13);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16._uint64_t countAndFlagsBits = 46LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  if ((v9 & 1) != 0) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = v7;
  }
  uint64_t v18 = sub_1000530C8(v12);
  *(_OWORD *)(v18 + 1sub_100006E64(v0 + 6) = xmmword_100067230;
  *(void *)(v18 + 5sub_100006E64(v0 + 6) = &type metadata for Int;
  *(void *)(v18 + 6sub_100006E64(v0 + 4) = &protocol witness table for Int;
  *(void *)(v18 + 3sub_100006E64(v0 + 2) = v17;
  v19._uint64_t countAndFlagsBits = String.init(format:_:)(1681076261LL, 0xE400000000000000LL, v18);
  uint64_t v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  return v22;
}

uint64_t sub_1000530C8(uint64_t a1)
{
  return swift_allocObject(a1, 72LL, 7LL);
}

uint64_t sub_1000530D4()
{
  return SportingEventCurrentClock.current.getter();
}

void sub_1000530DC(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v6)
  {
    unint64_t v23 = _swiftEmptyArrayStorage;
    sub_100016680(0LL, v6 & ~(v6 >> 63), 0LL);
    if (v6 < 0)
    {
      __break(1u);
      return;
    }

    uint64_t v7 = 0LL;
    char v8 = v23;
    while (v6 != v7)
    {
      if ((a3 & 0xC000000000000001LL) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a3);
      }
      else {
        id v9 = *(id *)(a3 + 8 * v7 + 32);
      }
      Swift::String v10 = v9;
      id v20 = v9;
      a1(&v21, &v20);
      if (v4)
      {
        swift_release(v8);

        return;
      }

      uint64_t v11 = v6;

      uint64_t v12 = v21;
      char v13 = v22;
      unint64_t v23 = v8;
      unint64_t v15 = v8[2];
      unint64_t v14 = v8[3];
      if (v15 >= v14 >> 1)
      {
        sub_100016680(v14 > 1, v15 + 1, 1LL);
        char v8 = v23;
      }

      ++v7;
      v8[2] = v15 + 1;
      Swift::String v16 = &v8[2 * v15];
      v16[4] = v12;
      *((_BYTE *)v16 + 40) = v13;
      uint64_t v6 = v11;
      BOOL v17 = v11 == v7;
      uint64_t v4 = 0LL;
      if (v17) {
        return;
      }
    }

    __break(1u);
LABEL_19:
    if (a3 < 0) {
      uint64_t v18 = a3;
    }
    else {
      uint64_t v18 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
  }

void *sub_100053278(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if (a3 >> 62) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_100019734();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    unint64_t v23 = v5 & 0xC000000000000001LL;
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v8 = 4LL;
    uint64_t v21 = v6;
    uint64_t v22 = v5;
    while (1)
    {
      id v9 = v23 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v5) : *(id *)(v5 + 8 * v8);
      Swift::String v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1LL)) {
        break;
      }
      id v30 = v9;
      a1(&v26, &v30);
      if (v4)
      {
        swift_bridgeObjectRelease(v7);
        sub_10001987C();

        return v7;
      }

      uint64_t v12 = v27;
      if (v27)
      {
        uint64_t v13 = v28;
        uint64_t v14 = v29;
        uint64_t v25 = v26;
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        {
          sub_100058074();
          sub_100014CFC();
          uint64_t v7 = v17;
        }

        unint64_t v15 = v7[2];
        if (v15 >= v7[3] >> 1)
        {
          sub_100014CFC();
          uint64_t v7 = v18;
        }

        void v7[2] = v15 + 1;
        Swift::String v16 = &v7[4 * v15];
        v16[4] = v25;
        v16[5] = v12;
        v16[6] = v13;
        v16[7] = v14;
        uint64_t v6 = v21;
        uint64_t v5 = v22;
      }

      ++v8;
      if (v11 == v6)
      {
        sub_10001987C();
        return v7;
      }
    }

    __break(1u);
LABEL_19:
    if (v5 < 0) {
      uint64_t v19 = v5;
    }
    else {
      uint64_t v19 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100019734();
  }

  sub_10001987C();
  return _swiftEmptyArrayStorage;
}

void sub_10005342C(void *a1, void *a2)
{
  v368 = a2;
  sub_100006BEC(&qword_1000898F0);
  sub_10000C318();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v360 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for IngestionError(0LL);
  v379 = *(void **)(v8 - 8);
  sub_10000C318();
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t)&v360 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  sub_10003F220();
  sub_100057EB0();
  __chkstk_darwin(v13);
  uint64_t v15 = sub_1000580A4((uint64_t)&v360 - v14);
  uint64_t v373 = type metadata accessor for SportingEventMetadataType(v15, v16);
  uint64_t v390 = *(void *)(v373 - 8);
  sub_10000C318();
  __chkstk_darwin(v17);
  sub_1000580BC();
  uint64_t v389 = v18;
  __n128 v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v360 - v21;
  unint64_t v23 = (void *)type metadata accessor for SportingEventCompetitorScoreStatisticType.StatisticName(0LL, v20);
  uint64_t v392 = *(v23 - 1);
  id v393 = v23;
  sub_10000C318();
  __chkstk_darwin(v24);
  sub_10000E5C4();
  v391 = (os_log_s *)v25;
  v367 = (void *)type metadata accessor for SportingEventProgressStatus(0LL);
  uint64_t v366 = *(v367 - 1);
  sub_10000C318();
  __chkstk_darwin(v26);
  sub_10000E5C4();
  uint64_t v28 = sub_1000580A4(v27);
  uint64_t v364 = type metadata accessor for SportingEventClockBreakType(v28);
  uint64_t v363 = *(void *)(v364 - 8);
  sub_10000C318();
  __chkstk_darwin(v29);
  sub_10000E5C4();
  uint64_t v362 = v30;
  sub_100006BEC(&qword_1000898F8);
  sub_10000C318();
  __chkstk_darwin(v31);
  sub_10000E5C4();
  uint64_t v374 = v32;
  sub_100006BEC(&qword_100089900);
  sub_10000C318();
  __chkstk_darwin(v33);
  sub_10000E5C4();
  uint64_t v35 = sub_1000580A4(v34);
  uint64_t v36 = type metadata accessor for Logger(v35);
  unint64_t v384 = *(void *)(v36 - 8);
  sub_10000C318();
  __chkstk_darwin(v37);
  sub_1000580BC();
  sub_100057EB0();
  __chkstk_darwin(v38);
  sub_10003F220();
  sub_100057EB0();
  __chkstk_darwin(v39);
  sub_10003F220();
  sub_100057EB0();
  __chkstk_darwin(v40);
  sub_10003F220();
  sub_100057EB0();
  __chkstk_darwin(v41);
  sub_10003F220();
  sub_100057EB0();
  __chkstk_darwin(v42);
  v386 = (uint64_t *)((char *)&v360 - v43);
  if (qword_1000870F0 != -1) {
    swift_once(&qword_1000870F0, sub_10004BF00);
  }
  uint64_t v380 = v36;
  uint64_t v44 = sub_10000B928(v36, (uint64_t)qword_10008F330);
  id v45 = a1;
  uint64_t v382 = v44;
  Logger.logObject.getter(v45);
  os_log_type_t v46 = sub_1000580B4();
  BOOL v47 = sub_100057FA4(v46);
  uint64_t v378 = v8;
  v377 = v7;
  v388 = v22;
  uint64_t v361 = v11;
  if (v47)
  {
    uint64_t v48 = (_DWORD *)sub_100019148(12LL);
    uint64_t v49 = sub_100019148(32LL);
    uint64_t v50 = sub_100058148(v49);
    *uint64_t v48 = 136315138;
    uint64_t v51 = SportingEvent.version.getter(v50);
    uint64_t v53 = sub_10005810C(v51, v52);
    sub_100057F50(v53);

    sub_100019278();
    sub_100057ECC((void *)&_mh_execute_header, v54, v55, "Version: %s");
    sub_1000194B0(v11);
    sub_1000190E8(v11);
    sub_1000190E8((uint64_t)v48);
  }

  else
  {
  }

  id v56 = v45;
  sub_100057EC0();
  os_log_type_t v57 = sub_1000580B4();
  BOOL v58 = sub_100057FA4(v57);
  unint64_t v59 = v384;
  if (v58)
  {
    uint64_t v60 = (_DWORD *)sub_100019148(12LL);
    uint64_t v61 = sub_100019148(32LL);
    sub_100058148(v61);
    *uint64_t v60 = 136315138;
    uint64_t v62 = sub_100052F18();
    uint64_t v64 = sub_10005810C(v62, v63);
    sub_100057F50(v64);

    sub_100019278();
    sub_100057ECC((void *)&_mh_execute_header, v65, v66, "Event clock: %s");
    sub_100057F20();
    sub_1000190E8(v11);
    sub_1000190E8((uint64_t)v60);
  }

  else
  {
  }

  uint64_t v67 = v387;
  BOOL v68 = v385;
  uint64_t v69 = (uint64_t)v386;
  uint64_t v70 = v380;
  v372 = *(void (**)(void **, uint64_t, uint64_t))(v59 + 16);
  v372((void **)v386, v382, v380);
  id v71 = v56;
  Logger.logObject.getter(v71);
  uint64_t v72 = sub_10005812C();
  if (os_log_type_enabled(v3, (os_log_type_t)v72))
  {
    int v371 = v72;
    uint64_t v73 = sub_100019148(32LL);
    uint64_t v74 = sub_100019148(96LL);
    v396 = (void *)v74;
    *(_DWORD *)uint64_t v73 = 136315650;
    sub_100058124();
    sub_1000530D4();
    sub_100058198();
    SportingEventClock.period.getter();
    sub_100057FC4();
    id v75 = v381;
    dispatch thunk of SportingEventClockPeriod.type.getter();

    uint64_t v76 = type metadata accessor for SportingEventClockPeriodType(0LL);
    uint64_t v77 = sub_100058174(v76);
    if (v280)
    {
      sub_100019034((uint64_t)v75, &qword_100089900);
      uint64_t v78 = (void *)0xE400000000000000LL;
    }

    else
    {
      uint64_t v78 = v75;
      SportingEventClockPeriodType.rawValue.getter(v77);
      sub_100057F88();
    }

    uint64_t v79 = v374;
    v394 = (void *)sub_100058040();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, &v395, v73 + 4, v73 + 12);

    sub_100019278();
    *(_WORD *)(v73 + sub_100006E64(v0 + 12) = 2080;
    sub_100058124();
    uint64_t v80 = sub_1000530D4();

    uint64_t v81 = (void *)SportingEventClock.period.getter();
    uint64_t v82 = (void *)dispatch thunk of SportingEventClockPeriod.index.getter();
    LOBYTE(v80) = v83;

    if ((v80 & 1) != 0)
    {
      uint64_t v84 = sub_100057FB4();
    }

    else
    {
      v394 = v82;
      uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    }

    BOOL v68 = v385;
    uint64_t v11 = v73 + 14;
    v394 = (void *)sub_100057F7C(v84);
    sub_100057F40((uint64_t)v394, v85, v86, v73 + 22);

    sub_100019278();
    *(_WORD *)(v73 + 2sub_100006E64(v0 + 2) = 2080;
    sub_100058124();
    sub_1000530D4();
    sub_100058198();
    SportingEventClock.period.getter();
    sub_100057FC4();
    dispatch thunk of SportingEventClockPeriod.subdivision.getter();

    uint64_t v87 = type metadata accessor for SportingEventClockPeriodSubdivision(0LL);
    uint64_t v88 = sub_100058174(v87);
    if (v280)
    {
      sub_100019034(v79, &qword_1000898F8);
      uint64_t v11 = 1819047278LL;
    }

    else
    {
      SportingEventClockPeriodSubdivision.rawValue.getter(v88);
      sub_100057F88();
    }

    unint64_t v89 = v384;
    uint64_t v72 = v73 + 24;
    uint64_t v90 = sub_100058040();
    uint64_t v91 = sub_100057EE0(v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, v92, v73 + 24, v93);

    sub_100019278();
    _os_log_impl( (void *)&_mh_execute_header,  v3,  (os_log_type_t)v371,  "Clock period: type=%s, index=%s, subdivision=%s",  (uint8_t *)v73,  0x20u);
    swift_arrayDestroy(v74, 3LL);
    sub_1000190E8(v74);
    sub_1000190E8(v73);

    uint64_t v94 = *(uint64_t (**)(uint64_t, uint64_t))(v89 + 8);
    uint64_t v70 = v380;
    sub_100058020((uint64_t)v386, v94);
    uint64_t v67 = v387;
  }

  else
  {

    sub_100058020(v69, *(uint64_t (**)(uint64_t, uint64_t))(v59 + 8));
  }

  sub_100057EA0((uint64_t)v68, v382);
  uint64_t v95 = v71;
  uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
  os_log_type_t v97 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v96, v97))
  {
    uint64_t v3 = (os_log_s *)sub_100019148(22LL);
    v386 = (void *)sub_100019148(64LL);
    v396 = v386;
    *(_DWORD *)uint64_t v3 = 136315394;
    sub_100057FCC();
    sub_1000530D4();
    sub_100058198();
    uint64_t v98 = (void *)v72;
    dispatch thunk of SportingEventClock.runningState.getter();
    sub_100057FC4();
    if (v72)
    {
      char v99 = dispatch thunk of SportingEventClockRunningState.isReliable.getter();
      sub_1000580F4();
      uint64_t v100 = sub_100057FB4();
      if ((_DWORD)v70 != 2)
      {
        uint64_t v100 = (v99 & 1) != 0 ? 1702195828LL : 0x65736C6166LL;
        if ((v99 & 1) == 0) {
          uint64_t v98 = (void *)0xE500000000000000LL;
        }
      }
    }

    else
    {
      uint64_t v100 = sub_100057FB4();
    }

    v394 = (void *)sub_100057F7C(v100);
    uint64_t v72 = (uint64_t)&v395;
    sub_100057F40((uint64_t)v394, v101, v102, (uint64_t)v3 + 12);

    sub_100019278();
    *((_WORD *)v3 + sub_100006E64(v0 + 6) = 2080;
    sub_100057FCC();
    uint64_t v103 = (void *)sub_1000530D4();

    uint64_t v104 = dispatch thunk of SportingEventClock.runningState.getter();
    if (v104)
    {
      char v105 = dispatch thunk of SportingEventClockRunningState.isActive.getter();
      sub_1000580F4();
      uint64_t v106 = 1819047278LL;
      if ((_DWORD)v70 != 2)
      {
        if ((v105 & 1) != 0) {
          uint64_t v106 = 1702195828LL;
        }
        else {
          uint64_t v106 = 0x65736C6166LL;
        }
      }
    }

    else
    {
      uint64_t v106 = sub_100057FB4();
    }

    uint64_t v11 = (uint64_t)v3 + 14;
    v394 = (void *)sub_100057F7C(v106);
    sub_100057F40((uint64_t)v394, v107, v108, (uint64_t)v3 + 22);

    sub_100019278();
    _os_log_impl( (void *)&_mh_execute_header,  v96,  v97,  "Running clock: isReliable=%s, isActive=%s",  (uint8_t *)v3,  0x16u);
    uint64_t v109 = (uint64_t)v386;
    sub_100058160((uint64_t)v386);
    sub_1000190E8(v109);
    sub_1000190E8((uint64_t)v3);

    uint64_t v70 = v380;
  }

  else
  {
  }

  sub_100057EF4();
  uint64_t v110 = v369;
  sub_1000555B8((uint64_t)v368);
  sub_100057FCC();
  uint64_t v111 = (void *)sub_1000530D4();

  dispatch thunk of SportingEventClock.activityStatus.getter();
  sub_1000580E4();
  v386 = v95;
  if (v111)
  {
    sub_100057EA0(v67, v382);
    id v112 = v111;
    Logger.logObject.getter(v112);
    os_log_type_t v113 = sub_10005812C();
    if (sub_100058084(v113))
    {
      uint64_t v11 = sub_100019148(22LL);
      uint64_t v72 = sub_100019148(64LL);
      v396 = (void *)v72;
      *(_DWORD *)uint64_t v11 = 136315394;
      if ((SportingEventClockActivityStatus.isBreak.getter() & 1) != 0) {
        uint64_t v114 = 1702195828LL;
      }
      else {
        uint64_t v114 = 0x65736C6166LL;
      }
      v394 = (void *)sub_100057F7C(v114);
      sub_100058030((uint64_t)v394, v115, v116, v11 + 12);

      uint64_t v117 = sub_100019278();
      *(_WORD *)(v11 + sub_100006E64(v0 + 12) = 2080;
      uint64_t v70 = v362;
      uint64_t v118 = SportingEventClockActivityStatus.breakType.getter(v117);
      SportingEventClockBreakType.rawValue.getter(v118);
      uint64_t v95 = v119;
      (*(void (**)(uint64_t, uint64_t))(v363 + 8))(v70, v364);
      v394 = (void *)sub_100057F6C();
      sub_100058030((uint64_t)v394, v120, v121, v11 + 22);

      sub_100058100();
      swift_bridgeObjectRelease(v122);
      sub_100057FE8((void *)&_mh_execute_header, v123, v124, "Clock activity status: isBreak=%s, breakType=%s");
      sub_100058160(v72);
      sub_1000190E8(v72);
      sub_1000190E8(v11);

      sub_100058094((uint64_t)&v401);
    }

    else
    {
    }

    sub_100057EF4();
  }

  else
  {
    uint64_t v125 = (os_log_s *)sub_100057EC0();
    uint64_t v126 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v125, (os_log_type_t)v126))
    {
      uint64_t v72 = sub_100019148(2LL);
      *(_WORD *)uint64_t v72 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v125,  (os_log_type_t)v126,  "Clock activity status: null",  (uint8_t *)v72,  2u);
      sub_1000190E8(v72);
    }
  }

  uint64_t v127 = (void *)sub_100057FCC();
  dispatch thunk of SportingEventCurrentClock.total.getter();
  sub_1000580E4();
  if (v127)
  {
    uint64_t v128 = (void *)dispatch thunk of SportingEventClock.additional.getter();

    if (v128)
    {
      id v129 = v128;
      sub_100057EC0();
      os_log_type_t v130 = sub_10005812C();
      if (sub_100058084(v130))
      {
        uint64_t v11 = sub_100019148(22LL);
        unint64_t v131 = (void *)sub_100019148(64LL);
        v394 = v131;
        *(_DWORD *)uint64_t v11 = 136315394;
        v396 = (void *)dispatch thunk of SportingEventClock.minutes.getter();
        LOBYTE(v39sub_100006E64(v0 + 7) = v132 & 1;
        uint64_t v95 = (void *)sub_100006BEC(&qword_100089910);
        uint64_t v70 = (uint64_t)&v396;
        uint64_t v133 = String.init<A>(describing:)(&v396, v95);
        uint64_t v135 = sub_100058118(v133, v134);
        sub_100057FFC(v135, v136, v137, v11 + 12);

        uint64_t v138 = sub_100019278();
        *(_WORD *)(v11 + sub_100006E64(v0 + 12) = 2080;
        uint64_t v72 = v11 + 14;
        v396 = (void *)dispatch thunk of SportingEventClock.seconds.getter(v138);
        LOBYTE(v39sub_100006E64(v0 + 7) = v139 & 1;
        sub_100058100();
        uint64_t v142 = String.init<A>(describing:)(v140, v141);
        uint64_t v144 = sub_100058118(v142, v143);
        sub_100057FFC(v144, v145, v146, v11 + 22);

        sub_100019278();
        sub_100057FE8((void *)&_mh_execute_header, v147, v148, "Clock injury time: minutes=%s, seconds=%s");
        sub_100058160((uint64_t)v131);
        sub_1000190E8((uint64_t)v131);
        sub_1000190E8(v11);
      }

      else
      {
      }
    }
  }

  uint64_t v149 = sub_100057FCC();
  dispatch thunk of SportingEventCurrentClock.periods.getter();
  sub_1000580E4();
  if (!v149)
  {
    id v152 = _swiftEmptyArrayStorage;
    goto LABEL_78;
  }

  if ((unint64_t)v149 >> 62)
  {
    if (v149 >= 0) {
      uint64_t v159 = v149 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v159 = v149;
    }
    sub_10000C610();
    uint64_t v150 = _CocoaArrayWrapper.endIndex.getter(v159);
    if (v150) {
      goto LABEL_58;
    }
  }

  else
  {
    uint64_t v150 = *(void *)((v149 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    sub_10000C610();
    if (v150)
    {
LABEL_58:
      if (v150 < 1)
      {
        __break(1u);
        goto LABEL_213;
      }

      uint64_t v11 = 0LL;
      uint64_t v95 = (void *)(v149 & 0xC000000000000001LL);
      id v152 = _swiftEmptyArrayStorage;
      do
      {
        if (v95) {
          uint64_t v153 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v149);
        }
        else {
          uint64_t v153 = sub_100019408(v149 + 8 * v11);
        }
        uint64_t v72 = (uint64_t)v153;
        v394 = v153;
        sub_100057438((uint64_t *)&v394, (uint64_t *)&v396);

        uint64_t v154 = v397;
        if (v397)
        {
          uint64_t v72 = (uint64_t)v396;
          if ((swift_isUniquelyReferenced_nonNull_native(v152) & 1) == 0)
          {
            sub_10005805C();
            sub_100014C54();
            id v152 = v157;
          }

          unint64_t v155 = v152[2];
          if (v155 >= v152[3] >> 1)
          {
            sub_100014C54();
            id v152 = v158;
          }

          v152[2] = v155 + 1;
          uint64_t v156 = &v152[2 * v155];
          v156[4] = v72;
          v156[5] = v154;
        }

        ++v11;
      }

      while (v150 != v11);
      goto LABEL_77;
    }
  }

  id v152 = _swiftEmptyArrayStorage;
LABEL_77:
  sub_100019124(v149);
  sub_100058100();
LABEL_78:
  if (v152[2])
  {
    sub_10000C6A0();
    uint64_t v160 = (os_log_s *)sub_100057EC0();
    os_log_type_t v161 = static os_log_type_t.debug.getter();
    uint64_t v72 = v161;
    if (os_log_type_enabled(v160, v161))
    {
      uint64_t v162 = (uint8_t *)sub_100019148(12LL);
      uint64_t v163 = sub_100019148(32LL);
      sub_100058148(v163);
      *(_DWORD *)uint64_t v162 = 136315138;
      uint64_t v95 = v162 + 12;
      uint64_t v164 = sub_10000C6A0();
      uint64_t v165 = Array.description.getter(v164, &type metadata for String);
      unint64_t v167 = v166;
      sub_100019820();
      uint64_t v168 = sub_100015AD4(v165, v167, (uint64_t *)&v396);
      sub_100057EE0(v168);
      sub_100058100();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v169, v170, v171, v172);
      sub_100019124((uint64_t)v152);
      swift_bridgeObjectRelease(v167);
      sub_1000194B8((void *)&_mh_execute_header, v160, (os_log_type_t)v72, "AnnouncedAdditional: %s", v162);
      sub_100057F20();
      sub_1000190E8(v11);
      sub_1000190E8((uint64_t)v162);
    }

    else
    {

      sub_100019124((uint64_t)v152);
    }
  }

  else
  {
    sub_100019820();
  }

  uint64_t v173 = v95;
  sub_100057EC0();
  os_log_type_t v174 = sub_1000580B4();
  BOOL v175 = sub_100057FA4(v174);
  uint64_t v364 = 0LL;
  if (v175)
  {
    uint64_t v176 = (_DWORD *)sub_100019148(12LL);
    uint64_t v177 = sub_100019148(32LL);
    uint64_t v178 = sub_100058148(v177);
    _DWORD *v176 = 136315138;
    uint64_t v179 = v365;
    uint64_t v180 = SportingEvent.progressStatus.getter(v178);
    uint64_t v181 = SportingEventProgressStatus.rawValue.getter(v180);
    unint64_t v183 = v182;
    (*(void (**)(uint64_t, void *))(v366 + 8))(v179, v367);
    uint64_t v184 = sub_100015AD4(v181, v183, (uint64_t *)&v396);
    uint64_t v185 = sub_100057EE0(v184);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v185, v186, v176 + 1, v176 + 3);

    swift_bridgeObjectRelease(v183);
    sub_100057ECC((void *)&_mh_execute_header, v187, v188, "Progress status: %s");
    sub_100057F20();
    sub_1000190E8(v11);
    sub_1000190E8((uint64_t)v176);
  }

  else
  {
  }

  sub_100057EA0((uint64_t)v383, v382);
  id v189 = (id)v173;
  Logger.logObject.getter(v189);
  int v190 = sub_1000580B4();
  BOOL v191 = os_log_type_enabled((os_log_t)v72, (os_log_type_t)v190);
  id v381 = v189;
  if (v191)
  {
    uint64_t v70 = sub_100019148(12LL);
    uint64_t v192 = (void *)sub_100019148(32LL);
    v396 = v192;
    *(_DWORD *)uint64_t v70 = 136315138;
    unint64_t v193 = dispatch thunk of SportingEvent.competitors.getter(v192);
    uint64_t v194 = v193;
    if (v193 >> 62)
    {
      swift_bridgeObjectRetain(v193);
      uint64_t v195 = sub_1000197A8();
    }

    else
    {
      uint64_t v195 = *(void *)((v193 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v193);
    }

    uint64_t v196 = _swiftEmptyArrayStorage;
    v385 = (os_log_s *)v72;
    unint64_t v384 = v70;
    LODWORD(v37sub_100006E64(v0 + 4) = v190;
    uint64_t v151 = &v397;
    v367 = v192;
    if (!v195)
    {
LABEL_105:
      sub_100019124(v194);
      uint64_t v211 = v196[2];
      if (v211)
      {
        v394 = _swiftEmptyArrayStorage;
        sub_1000580EC(0LL, v211);
        uint64_t v212 = 0LL;
        uint64_t v72 = (uint64_t)v394;
        do
        {
          v399 = (void *)v196[v212 + 4];
          uint64_t v173 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          uint64_t v214 = v213;
          v394 = (void *)v72;
          unint64_t v216 = *(void *)(v72 + 16);
          unint64_t v215 = *(void *)(v72 + 24);
          if (v216 >= v215 >> 1)
          {
            sub_100016630(v215 > 1, v216 + 1, 1LL);
            uint64_t v72 = (uint64_t)v394;
          }

          ++v212;
          *(void *)(v72 + 1sub_100006E64(v0 + 6) = v216 + 1;
          uint64_t v217 = v72 + 16 * v216;
          *(void *)(v217 + 3sub_100006E64(v0 + 2) = v173;
          *(void *)(v217 + 40) = v214;
        }

        while (v211 != v212);
        swift_bridgeObjectRelease(v196);
      }

      else
      {
        swift_bridgeObjectRelease(v196);
        uint64_t v72 = (uint64_t)_swiftEmptyArrayStorage;
      }

      v394 = (void *)v72;
      id v218 = (uint8_t *)v384;
      uint64_t v219 = sub_100006BEC(&qword_100087B00);
      unint64_t v220 = sub_100023E2C();
      sub_100057F00(v220);
      sub_100058010();
      uint64_t v221 = sub_100057F6C();
      sub_100057FD4(v221, v222, v223, (uint64_t)(v218 + 12));
      id v224 = v381;

      swift_bridgeObjectRelease(v219);
      uint64_t v225 = v385;
      sub_1000194B8((void *)&_mh_execute_header, v385, (os_log_type_t)v374, "Scores: %s", v218);
      uint64_t v226 = (uint64_t)v367;
      sub_1000194B0((uint64_t)v367);
      sub_1000190E8(v226);
      sub_1000190E8((uint64_t)v218);

      sub_100058094((uint64_t)&v400);
      goto LABEL_113;
    }

    if (v195 >= 1)
    {
      uint64_t v173 = 0LL;
      unint64_t v387 = v194 & 0xC000000000000001LL;
      LODWORD(v38sub_100006E64(v0 + 6) = enum case for SportingEventCompetitorScoreStatisticType.StatisticName.score(_:);
      uint64_t v197 = v194;
      uint64_t v198 = v195;
      uint64_t v200 = (uint64_t)v391;
      uint64_t v199 = v392;
      do
      {
        if (v387) {
          id v201 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v173, v194);
        }
        else {
          id v201 = sub_100019408(v194 + 8 * v173);
        }
        uint64_t v202 = v201;
        id v203 = v393;
        (*(void (**)(uint64_t, void, id))(v199 + 104))(v200, v386, v393);
        uint64_t v204 = (void *)dispatch thunk of SportingEventCompetitorContainer.getScoreEntry(name:)(v200);
        uint64_t v205 = (*(uint64_t (**)(uint64_t, id))(v199 + 8))(v200, v203);
        if (v204)
        {
          uint64_t v206 = v204;
          SportingEventCompetitorScoreEntry.value.getter(v205);
          sub_100057FC4();

          if ((swift_isUniquelyReferenced_nonNull_native(v196) & 1) == 0)
          {
            sub_100058074();
            sub_100014F84();
            uint64_t v196 = v209;
          }

          uint64_t v194 = v197;
          unint64_t v208 = v196[2];
          unint64_t v207 = v196[3];
          if (v208 >= v207 >> 1)
          {
            sub_100058134(v207);
            sub_100014F84();
            uint64_t v196 = v210;
          }

          v196[2] = v208 + 1;
          v196[v208 + 4] = v206;
        }

        else
        {

          uint64_t v194 = v197;
        }

        ++v173;
      }

      while (v198 != v173);
      goto LABEL_105;
    }

LABEL_213:
    __break(1u);
    goto LABEL_214;
  }

LABEL_113:
  uint64_t v227 = sub_100057EF4();
  unint64_t v228 = dispatch thunk of SportingEvent.competitors.getter(v227);
  uint64_t v229 = v228;
  if (v228 >> 62) {
    goto LABEL_172;
  }
  uint64_t v230 = *(void *)((v228 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v228);
  while (1)
  {
    unsigned int v231 = _swiftEmptyArrayStorage;
    if (!v230) {
      goto LABEL_129;
    }
    if (v230 < 1) {
      break;
    }
    uint64_t v232 = 0LL;
    unint64_t v387 = v229 & 0xC000000000000001LL;
    LODWORD(v38sub_100006E64(v0 + 6) = enum case for SportingEventCompetitorScoreStatisticType.StatisticName.shootout(_:);
    uint64_t v233 = v229;
    uint64_t v234 = (uint64_t)v391;
    do
    {
      if (v387) {
        id v235 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v232, v229);
      }
      else {
        id v235 = sub_100019408(v229 + 8 * v232);
      }
      uint64_t v72 = (uint64_t)v235;
      uint64_t v237 = v392;
      id v236 = v393;
      (*(void (**)(uint64_t, void, id))(v392 + 104))(v234, v386, v393);
      v238 = (void *)dispatch thunk of SportingEventCompetitorContainer.getScoreEntry(name:)(v234);
      uint64_t v239 = (*(uint64_t (**)(uint64_t, id))(v237 + 8))(v234, v236);
      if (v238)
      {
        SportingEventCompetitorScoreEntry.value.getter(v239);
        sub_100057FC4();

        if ((swift_isUniquelyReferenced_nonNull_native(v231) & 1) == 0)
        {
          sub_10005805C();
          sub_100014F84();
          unsigned int v231 = v242;
        }

        uint64_t v229 = v233;
        unint64_t v241 = v231[2];
        unint64_t v240 = v231[3];
        uint64_t v72 = v241 + 1;
        if (v241 >= v240 >> 1)
        {
          sub_100058134(v240);
          sub_100014F84();
          unsigned int v231 = v243;
        }

        v231[2] = v72;
        v231[v241 + 4] = v238;
      }

      else
      {

        uint64_t v229 = v233;
      }

      ++v232;
    }

    while (v230 != v232);
LABEL_129:
    sub_100019124(v229);
    if (!v231[2])
    {
      sub_100058050();
      goto LABEL_183;
    }

    sub_100057EA0(v375, v382);
    uint64_t v244 = sub_10000C6A0();
    v245 = (os_log_s *)Logger.logObject.getter(v244);
    int v246 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v245, (os_log_type_t)v246))
    {
      LODWORD(v393) = v246;
      v247 = (uint8_t *)sub_100019148(12LL);
      uint64_t v392 = sub_100019148(32LL);
      v396 = (void *)v392;
      *(_DWORD *)v247 = 136315138;
      uint64_t v248 = v231[2];
      v249 = _swiftEmptyArrayStorage;
      if (v248)
      {
        unint64_t v387 = (unint64_t)v247;
        v391 = v245;
        v394 = _swiftEmptyArrayStorage;
        sub_1000580EC(0LL, v248);
        v249 = v394;
        v250 = v231 + 4;
        do
        {
          v251 = (void *)*v250++;
          v399 = v251;
          uint64_t v252 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          uint64_t v254 = v253;
          v394 = v249;
          unint64_t v256 = v249[2];
          unint64_t v255 = v249[3];
          if (v256 >= v255 >> 1)
          {
            sub_100016630(v255 > 1, v256 + 1, 1LL);
            v249 = v394;
          }

          v249[2] = v256 + 1;
          v257 = &v249[2 * v256];
          v257[4] = v252;
          v257[5] = v254;
          --v248;
        }

        while (v248);
        v245 = v391;
        v247 = (uint8_t *)v387;
      }

      v394 = v249;
      uint64_t v258 = sub_100006BEC(&qword_100087B00);
      unint64_t v259 = sub_100023E2C();
      sub_100057F00(v259);
      sub_100058010();
      uint64_t v260 = sub_100057F6C();
      sub_100057FD4(v260, v261, v262, (uint64_t)(v247 + 12));
      sub_100019124((uint64_t)v231);
      swift_bridgeObjectRelease(v258);
      sub_1000194B8((void *)&_mh_execute_header, v245, (os_log_type_t)v393, "Shootout scores: %s", v247);
      uint64_t v263 = v392;
      sub_1000194B0(v392);
      sub_1000190E8(v263);
      sub_1000190E8((uint64_t)v247);
    }

    else
    {

      sub_100019124((uint64_t)v231);
    }

    sub_100057EF4();
    uint64_t v173 = v373;
    uint64_t v229 = v389;
    sub_100058050();
    uint64_t v72 = dispatch thunk of SportingEvent.competitors.getter(v264);
    v399 = _swiftEmptyArrayStorage;
    uint64_t v265 = v390;
    uint64_t v266 = *(void *)((v72 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_100019734();
    uint64_t v267 = v266;
    if (!v266) {
      goto LABEL_178;
    }
LABEL_142:
    uint64_t v268 = 0LL;
    unint64_t v384 = v72 & 0xC000000000000001LL;
    uint64_t v374 = v72 + 32;
    LODWORD(v38sub_100006E64(v0 + 7) = enum case for SportingEventMetadataType.shootoutsContext(_:);
    uint64_t v375 = v72;
    v383 = (void *)v267;
    v269 = v388;
    while (1)
    {
      v270 = v384
           ? (os_log_s *)specialized _ArrayBuffer._getElementSlowPath(_:)(v268, v72)
           : (os_log_s *)*(id *)(v374 + 8 * v268);
      BOOL v271 = __OFADD__(v268, 1LL);
      uint64_t v272 = v268 + 1;
      if (v271) {
        break;
      }
      v386 = (void *)v272;
      v273 = v270;
      v274 = (void *)SportingEventCompetitorContainer.competitor.getter(v270);
      unint64_t v275 = dispatch thunk of SportingEventCompetitor.metadata.getter();

      if (v275)
      {
        v385 = v273;
        if (v275 >> 62)
        {
          sub_10000C6A0();
          uint64_t v276 = sub_1000197A8();
          if (v276)
          {
LABEL_150:
            v391 = (os_log_s *)v275;
            uint64_t v392 = v275 & 0xC000000000000001LL;
            uint64_t v277 = 4LL;
            while (1)
            {
              id v278 = v392
                   ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v277 - 4, v275)
                   : *(id *)(v275 + 8 * v277);
              uint64_t v279 = v277 - 3;
              if (__OFADD__(v277 - 4, 1LL)) {
                break;
              }
              id v393 = v278;
              SportingEventMetadata.metadataType.getter();
              (*(void (**)(uint64_t, void, uint64_t))(v265 + 104))(v229, v387, v173);
              sub_10003EBFC( &qword_1000887F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventMetadataType,  (uint64_t)&protocol conformance descriptor for SportingEventMetadataType);
              sub_100058154();
              sub_100058154();
              BOOL v280 = v396 == v394 && v397 == v395;
              if (v280)
              {
                sub_100019124(v397);
                v282 = *(void (**)(uint64_t, uint64_t))(v265 + 8);
                v282(v229, v173);
                v282((uint64_t)v269, v173);
LABEL_164:
                uint64_t v283 = sub_100019124((uint64_t)v391);
                id v284 = v393;
                uint64_t v285 = SportingEventMetadata.value.getter(v283);
                uint64_t v287 = v286;

                v288 = v385;
                v290 = (void *)SportingEventCompetitorContainer.competitor.getter(v289);
                uint64_t v291 = SportingEventCompetitor.canonicalId.getter();
                uint64_t v293 = v292;

                sub_100057D14();
                uint64_t v294 = v399[2];
                uint64_t v295 = sub_100057D5C(v294, (uint64_t (*)(BOOL))sub_100014CFC);
                v296 = v399;
                v399[2] = v294 + 1;
                v297 = &v296[4 * v294];
                v297[4] = v291;
                v297[5] = v293;
                uint64_t v173 = v373;
                v297[6] = v285;
                v297[7] = v287;
                nullsub_1(v295);
                uint64_t v229 = v389;
                uint64_t v265 = v390;
LABEL_165:
                sub_100058050();
                uint64_t v72 = v375;
                goto LABEL_168;
              }

              uint64_t v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v396, v397, v394, v395, 0LL);
              sub_100019278();
              sub_10004BE08();
              v281 = *(void (**)(uint64_t, uint64_t))(v265 + 8);
              v281(v229, v173);
              v281((uint64_t)v269, v173);
              if ((v72 & 1) != 0) {
                goto LABEL_164;
              }

              ++v277;
              uint64_t v229 = v389;
              uint64_t v265 = v390;
              unint64_t v275 = (unint64_t)v391;
              if (v279 == v276)
              {
                sub_100058168();
                sub_100019124(v275);
                goto LABEL_165;
              }
            }

            __break(1u);
            break;
          }
        }

        else
        {
          uint64_t v276 = *(void *)((v275 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          sub_10000C6A0();
          if (v276) {
            goto LABEL_150;
          }
        }

        sub_100058168();
        sub_100019124(v275);
      }

      else
      {
      }

LABEL_168:
      uint64_t v268 = (uint64_t)v386;
      if (v386 == v383)
      {
        sub_100019124(v72);
        v298 = v399;
        goto LABEL_179;
      }
    }

    __break(1u);
LABEL_172:
    swift_bridgeObjectRetain(v229);
    uint64_t v230 = sub_1000197A8();
  }

  __break(1u);
LABEL_174:
  if (v72 < 0) {
    uint64_t v299 = v72;
  }
  else {
    uint64_t v299 = v72 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_100019734();
  uint64_t v300 = v299;
  uint64_t v265 = v390;
  uint64_t v267 = _CocoaArrayWrapper.endIndex.getter(v300);
  if (v267) {
    goto LABEL_142;
  }
LABEL_178:
  sub_100019124(v72);
  v298 = _swiftEmptyArrayStorage;
LABEL_179:
  uint64_t v301 = v298[2];
  if (v301)
  {
    sub_10000C6A0();
    v302 = v298 + 7;
    do
    {
      uint64_t v303 = *(v302 - 3);
      unint64_t v304 = *(v302 - 2);
      uint64_t v305 = *(v302 - 1);
      uint64_t v72 = *v302;
      sub_10000C610();
      sub_100019734();
      sub_100057A14(v303, v304, v305, v72);
      swift_bridgeObjectRelease(v72);
      sub_100019278();
      v302 += 4;
      --v301;
    }

    while (v301);
    sub_100019820();
  }

LABEL_183:
  uint64_t v306 = sub_100019820();
  uint64_t v307 = dispatch thunk of SportingEvent.coverage.getter(v306);
  if (!v307) {
    goto LABEL_210;
  }
  v308 = (void *)v307;
  v309 = (void **)dispatch thunk of SportingEventCoverage.ingestion.getter();

  if (!v309) {
    goto LABEL_210;
  }
  uint64_t v70 = dispatch thunk of SportingEventCoverageIngestion.coverageUpdates.getter();

  if (!v70) {
    goto LABEL_210;
  }
  v396 = _swiftEmptyArrayStorage;
  uint64_t v151 = (uint64_t *)(v70 & 0xFFFFFFFFFFFFFF8LL);
  if (!((unint64_t)v70 >> 62))
  {
    uint64_t v310 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v70);
    goto LABEL_188;
  }

LABEL_214:
  if (v70 >= 0) {
    v309 = (void **)v151;
  }
  else {
    v309 = (void **)v70;
  }
  swift_bridgeObjectRetain(v70);
  uint64_t v310 = sub_1000197A8();
LABEL_188:
  sub_1000580D0();
  if (!v310)
  {
    sub_100019124(v70);
    v322 = _swiftEmptyArrayStorage;
    goto LABEL_202;
  }

  if (v310 < 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v72 = 0LL;
    uint64_t v311 = (uint64_t)v377;
    uint64_t v312 = v370;
    do
    {
      if ((v70 & 0xC000000000000001LL) != 0) {
        v313 = (void **)specialized _ArrayBuffer._getElementSlowPath(_:)(v72, v70);
      }
      else {
        v313 = (void **)sub_100019408(v70 + 8 * v72);
      }
      v309 = v313;
      dispatch thunk of SportingEventCoverageIngestionUpdate.statusCode.getter();

      uint64_t v314 = v378;
      if (sub_10000AB6C(v311, 1LL, v378) == 1)
      {
        sub_100019034(v311, &qword_1000898F0);
      }

      else
      {
        v315 = (void (*)(uint64_t, uint64_t, uint64_t))v379[4];
        v315(v312, v311, v314);
        v315(v376, v312, v314);
        uint64_t v316 = (uint64_t)v396;
        if ((swift_isUniquelyReferenced_nonNull_native(v396) & 1) == 0)
        {
          uint64_t v319 = sub_100058074();
          uint64_t v316 = sub_100014F70(v319, v320, v321, v316);
          v396 = (void *)v316;
        }

        uint64_t v317 = *(void *)(v316 + 16);
        v309 = &v396;
        sub_100057D5C(v317, (uint64_t (*)(BOOL))sub_100014F70);
        uint64_t v318 = sub_100057D9C(v317, v376);
        nullsub_1(v318);
      }

      ++v72;
    }

    while (v310 != v72);
    sub_100019124(v70);
    v322 = v396;
    sub_1000580D0();
    sub_100058050();
LABEL_202:
    v372(v309, v382, v72);
    uint64_t v323 = sub_10000C41C((uint64_t)&unk_1000819F8, 24LL);
    *(void *)(v323 + 1sub_100006E64(v0 + 6) = v322;
    uint64_t v324 = sub_10000C41C((uint64_t)&unk_100081A20, 32LL);
    *(void *)(v324 + 1sub_100006E64(v0 + 6) = sub_100057E24;
    *(void *)(v324 + 2sub_100006E64(v0 + 4) = v323;
    swift_bridgeObjectRetain(v322);
    uint64_t v325 = swift_retain(v323);
    id v393 = (id)Logger.logObject.getter(v325);
    int v326 = static os_log_type_t.debug.getter();
    uint64_t v327 = sub_10000C41C((uint64_t)&unk_100081A48, 17LL);
    *(_BYTE *)(v327 + 1sub_100006E64(v0 + 6) = 32;
    uint64_t v328 = sub_10000C41C((uint64_t)&unk_100081A70, 17LL);
    *(_BYTE *)(v328 + 1sub_100006E64(v0 + 6) = 8;
    uint64_t v329 = sub_10000C41C((uint64_t)&unk_100081A98, 32LL);
    *(void *)(v329 + 1sub_100006E64(v0 + 6) = sub_100057E2C;
    *(void *)(v329 + 2sub_100006E64(v0 + 4) = v324;
    uint64_t v330 = sub_10000C41C((uint64_t)&unk_100081AC0, 32LL);
    *(void *)(v330 + 1sub_100006E64(v0 + 6) = sub_100057E68;
    *(void *)(v330 + 2sub_100006E64(v0 + 4) = v329;
    uint64_t v331 = sub_100006BEC(&qword_100089908);
    uint64_t inited = swift_initStackObject(v331, v398);
    *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067B00;
    *(void *)(inited + 3sub_100006E64(v0 + 2) = sub_100057E38;
    *(void *)(inited + 40) = v327;
    *(void *)(inited + 4sub_100006E64(v0 + 8) = sub_100057E94;
    *(void *)(inited + 5sub_100006E64(v0 + 6) = v328;
    *(void *)(inited + 6sub_100006E64(v0 + 4) = sub_100057E70;
    *(void *)(inited + 7sub_100006E64(v0 + 2) = v330;
    swift_setDeallocating(inited);
    swift_retain(v324);
    swift_retain(v329);
    swift_retain(v327);
    swift_retain(v328);
    swift_retain(v330);
    sub_10002CCC8();
    LODWORD(v39sub_100006E64(v0 + 2) = v326;
    os_log_type_t v333 = v326;
    v334 = (os_log_s *)v393;
    if (os_log_type_enabled((os_log_t)v393, v333))
    {
      v388 = (char *)v330;
      uint64_t v389 = v329;
      uint64_t v390 = v324;
      v391 = (os_log_s *)v323;
      v335 = (uint8_t *)sub_100019148(12LL);
      v336 = (os_log_s *)sub_100019148(32LL);
      v396 = v336;
      *(_WORD *)v335 = 258;
      v335[2] = 32;
      swift_release(v327);
      v335[3] = 8;
      swift_release(v328);
      uint64_t v337 = v322[2];
      v338 = _swiftEmptyArrayStorage;
      if (v337)
      {
        v385 = v336;
        v386 = v335;
        v394 = _swiftEmptyArrayStorage;
        sub_1000580EC(0LL, v337);
        v339 = v379;
        unint64_t v340 = (*((unsigned __int8 *)v339 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v339 + 80);
        unint64_t v387 = (unint64_t)v322;
        v341 = (char *)v322 + v340;
        uint64_t v342 = v379[9];
        v343 = (uint64_t (*)(uint64_t, char *, uint64_t))v379[2];
        uint64_t v344 = v378;
        uint64_t v345 = v361;
        do
        {
          uint64_t v346 = v343(v345, v341, v344);
          uint64_t v347 = IngestionError.rawValue.getter(v346);
          uint64_t v349 = v348;
          ((void (*)(uint64_t, uint64_t))v339[1])(v345, v344);
          sub_1000165A8();
          uint64_t v350 = v394[2];
          sub_1000165F0(v350);
          uint64_t v351 = v350;
          v339 = v379;
          uint64_t v352 = sub_100016618(v351, v347, v349);
          nullsub_1(v352);
          v341 += v342;
          --v337;
        }

        while (v337);
        v338 = v394;
        sub_100058050();
        v334 = (os_log_s *)v393;
        v335 = (uint8_t *)v386;
        v336 = v385;
      }

      uint64_t v353 = Array.description.getter(v338, &type metadata for String);
      unint64_t v355 = v354;
      sub_100019278();
      uint64_t v356 = sub_100015AD4(v353, v355, (uint64_t *)&v396);
      uint64_t v357 = sub_100057EE0(v356);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v357, v358, v335 + 4, v359);
      sub_10004BE08();
      swift_release(v391);
      swift_release(v390);
      swift_release(v389);
      swift_release(v388);
      swift_bridgeObjectRelease(v355);
      sub_1000194B8((void *)&_mh_execute_header, v334, (os_log_type_t)v392, "Ingestion Errors: %s", v335);
      sub_1000194B0((uint64_t)v336);
      sub_1000190E8((uint64_t)v336);
      sub_1000190E8((uint64_t)v335);
    }

    else
    {

      sub_10004BE08();
      swift_release(v323);
      swift_release(v324);
      swift_release(v329);
      swift_release(v330);
      swift_release(v328);
      swift_release(v327);
    }

    sub_100058094((uint64_t)v398);
    sub_100057EF4();
LABEL_210:
    sub_100056010(v368);
  }

void sub_1000555B8(uint64_t a1)
{
  uint64_t v2 = sub_100006BEC(&qword_1000887B8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SportingEventViewContext(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a1)
  {
    sub_10000AB60((uint64_t)v4, 1LL, 1LL, v5);
    goto LABEL_9;
  }

  SportingEventSubscription.view.getter(v7);
  if (sub_10000AB6C((uint64_t)v4, 1LL, v5) == 1)
  {
LABEL_9:
    sub_100019034((uint64_t)v4, &qword_1000887B8);
    return;
  }

  uint64_t v10 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
  uint64_t v11 = SportingEventViewContext.mode.getter(v10);
  p_base_meths = &SportsPerformanceMeasurement.base_meths;
  uint64_t v14 = &unk_100067000;
  if (v12)
  {
    unint64_t v15 = v12;
    uint64_t v46 = v11;
    if (qword_1000870F0 != -1) {
      swift_once(&qword_1000870F0, sub_10004BF00);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_10000B928(v16, (uint64_t)qword_10008F330);
    uint64_t v17 = swift_bridgeObjectRetain(v15);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      __n128 v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      v49[0] = v21;
      *(_DWORD *)__n128 v20 = 136315138;
      id v45 = v20 + 4;
      swift_bridgeObjectRetain(v15);
      uint64_t v47 = sub_100015AD4(v46, v15, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v45, v20 + 12);
      swift_bridgeObjectRelease_n(v15, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Mode: %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1LL);
      uint64_t v22 = v21;
      uint64_t v14 = (void *)&unk_100067000;
      swift_slowDealloc(v22, -1LL, -1LL);
      unint64_t v23 = v20;
      p_base_meths = (__objc2_meth_list **)(&SportsPerformanceMeasurement + 32);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {

      uint64_t v11 = swift_bridgeObjectRelease_n(v15, 2LL);
    }
  }

  uint64_t v24 = SportingEventViewContext.players.getter(v11);
  if (v24)
  {
    uint64_t v25 = v24;
    if (p_base_meths[30] != (__objc2_meth_list *)-1LL) {
      swift_once(&qword_1000870F0, sub_10004BF00);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    sub_10000B928(v26, (uint64_t)qword_10008F330);
    uint64_t v27 = swift_bridgeObjectRetain(v25);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v46 = swift_slowAlloc(32LL, -1LL);
      v49[0] = v46;
      *(_DWORD *)uint64_t v30 = v14[68];
      uint64_t v31 = v30 + 12;
      uint64_t v44 = v30 + 4;
      id v45 = v30;
      uint64_t v32 = swift_bridgeObjectRetain(v25);
      uint64_t v33 = Array.description.getter(v32, &type metadata for String);
      unint64_t v35 = v34;
      swift_bridgeObjectRelease(v25);
      uint64_t v47 = sub_100015AD4(v33, v35, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v44, v31);
      swift_bridgeObjectRelease_n(v25, 2LL);
      swift_bridgeObjectRelease(v35);
      uint64_t v36 = v45;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Players: %s", v45, 0xCu);
      uint64_t v37 = v46;
      swift_arrayDestroy(v46, 1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    else
    {

      uint64_t v24 = swift_bridgeObjectRelease_n(v25, 2LL);
    }
  }

  uint64_t v38 = SportingEventViewContext.statistics.getter(v24);
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v40 = *(void *)(v38 + 16);
    if (v40)
    {
      uint64_t v41 = (uint64_t *)(v38 + 40);
      do
      {
        uint64_t v42 = *v41;
        v49[0] = *(v41 - 1);
        v49[1] = v42;
        swift_bridgeObjectRetain(v42);
        sub_100055A44(v49);
        swift_bridgeObjectRelease(v42);
        v41 += 2;
        --v40;
      }

      while (v40);
    }

    swift_bridgeObjectRelease(v39);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

void sub_100055A44(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100006BEC(qword_100089940);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  swift_bridgeObjectRetain(v8);
  uint64_t v36 = v7;
  uint64_t v9 = SportingEventCompetitorStatisticType.StatisticName.init(rawValue:)(v7, v8);
  uint64_t v10 = dispatch thunk of SportingEvent.competitors.getter(v9);
  uint64_t v38 = v6;
  uint64_t v40 = v6;
  sub_1000530DC((void (*)(uint64_t *__return_ptr, id *))sub_100057E78, (uint64_t)v39, v10);
  uint64_t v12 = v11;
  uint64_t v37 = v2;
  swift_bridgeObjectRelease(v10);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    unint64_t v35 = v8;
    uint64_t v43 = _swiftEmptyArrayStorage;
    sub_100016630(0LL, v13, 0LL);
    uint64_t v14 = v43;
    uint64_t v34 = v12;
    unint64_t v15 = (double *)(v12 + 40);
    do
    {
      if ((*(_BYTE *)v15 & 1) != 0)
      {
        unint64_t v16 = 0xE300000000000000LL;
        uint64_t v17 = 4271950LL;
      }

      else
      {
        double v18 = *(v15 - 1);
        uint64_t v41 = 0LL;
        unint64_t v42 = 0xE000000000000000LL;
        Double.write<A>(to:)( &v41,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  v18);
        uint64_t v17 = (uint64_t)v41;
        unint64_t v16 = v42;
      }

      uint64_t v43 = v14;
      unint64_t v20 = v14[2];
      unint64_t v19 = v14[3];
      if (v20 >= v19 >> 1)
      {
        sub_100016630(v19 > 1, v20 + 1, 1LL);
        uint64_t v14 = v43;
      }

      v14[2] = v20 + 1;
      uint64_t v21 = &v14[2 * v20];
      v21[4] = v17;
      void v21[5] = v16;
      v15 += 2;
      --v13;
    }

    while (v13);
    swift_bridgeObjectRelease(v34);
    unint64_t v8 = v35;
  }

  else
  {
    swift_bridgeObjectRelease(v12);
    uint64_t v14 = _swiftEmptyArrayStorage;
  }

  uint64_t v41 = v14;
  uint64_t v22 = sub_100006BEC(&qword_100087B00);
  unint64_t v23 = sub_100023E2C();
  uint64_t v24 = BidirectionalCollection<>.joined(separator:)(2108704LL, 0xE300000000000000LL, v22, v23);
  unint64_t v26 = v25;
  swift_bridgeObjectRelease(v14);
  if (qword_1000870F0 != -1) {
    swift_once(&qword_1000870F0, sub_10004BF00);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  sub_10000B928(v27, (uint64_t)qword_10008F330);
  swift_bridgeObjectRetain_n(v8, 2LL);
  uint64_t v28 = swift_bridgeObjectRetain(v26);
  os_log_type_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = swift_slowAlloc(22LL, -1LL);
    uint64_t v32 = swift_slowAlloc(64LL, -1LL);
    uint64_t v41 = (void *)v32;
    *(_DWORD *)uint64_t v31 = 136315394;
    swift_bridgeObjectRetain(v8);
    uint64_t v43 = (void *)sub_100015AD4(v36, v8, (uint64_t *)&v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease_n(v8, 3LL);
    *(_WORD *)(v31 + sub_100006E64(v0 + 12) = 2080;
    swift_bridgeObjectRetain(v26);
    uint64_t v43 = (void *)sub_100015AD4(v24, v26, (uint64_t *)&v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease_n(v26, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Statistic '%s': %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 2LL);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v26, 2LL);
    swift_bridgeObjectRelease_n(v8, 2LL);
  }

  sub_100019034((uint64_t)v38, qword_100089940);
}

uint64_t sub_100055E20@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SportingEventCompetitorStatisticType.StatisticName(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100006BEC(qword_100089940);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000B31C(a1, (uint64_t)v11, qword_100089940);
  uint64_t result = sub_10000AB6C((uint64_t)v11, 1LL, v5);
  if ((_DWORD)result == 1)
  {
    uint64_t v13 = 0LL;
    char v14 = 1;
LABEL_5:
    *(void *)a2 = v13;
    *(_BYTE *)(a2 + sub_100006E64(v0 + 8) = v14;
    return result;
  }

  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
  sub_100055F88((uint64_t)v8, (uint64_t)&v15);
  if (!v2)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v13 = v15;
    char v14 = v16 & 1;
    goto LABEL_5;
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __break(1u);
  return result;
}

void sub_100055F88(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)SportingEventCompetitorContainer.competitor.getter();
  uint64_t v5 = (void *)dispatch thunk of SportingEventCompetitor.getStatistic(name:)(a1);

  if (v5)
  {
    double v6 = SportingEventCompetitorStatistic.value.getter();
  }

  else
  {
    double v6 = 0.0;
  }

  *(double *)a2 = v6;
  *(_BYTE *)(a2 + sub_100006E64(v0 + 8) = v5 == 0LL;
}

uint64_t sub_100056010(void *a1)
{
  id v217 = a1;
  uint64_t v190 = type metadata accessor for SportingEventPlay.BaseballPlay(0LL);
  uint64_t v189 = *(void *)(v190 - 8);
  __n128 v1 = __chkstk_darwin(v190);
  uint64_t v188 = (char *)&v187 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for SportingEventCompetitorContainer.BaseballScores(0LL, v1);
  uint64_t v222 = *(void *)(v3 - 8);
  uint64_t v223 = v3;
  __chkstk_darwin(v3);
  uint64_t v221 = (char *)&v187 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v201 = type metadata accessor for Sport(0LL);
  uint64_t v200 = *(void *)(v201 - 8);
  __chkstk_darwin(v201);
  uint64_t v199 = (char *)&v187 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v7 = __chkstk_darwin(v6);
  uint64_t v198 = (char *)&v187 - v8;
  uint64_t v9 = type metadata accessor for SportingEventPlayAnnotation(0LL, v7);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v225 = v9;
  uint64_t v226 = v10;
  __chkstk_darwin(v9);
  id v224 = (char *)&v187 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v194 = (char *)&v187 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v187 - v16;
  uint64_t v210 = type metadata accessor for CharacterSet(0LL);
  uint64_t v209 = *(void *)(v210 - 8);
  __n128 v18 = __chkstk_darwin(v210);
  unint64_t v208 = (char *)&v187 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = dispatch thunk of SportingEvent.plays.getter(v18);
  uint64_t v22 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v22)
  {
LABEL_3:
    unint64_t v23 = 0LL;
    unint64_t v207 = v20 & 0xC000000000000001LL;
    uint64_t v193 = v20 + 32;
    unint64_t v215 = &v234;
    unsigned int v197 = enum case for Sport.baseball(_:);
    *(void *)&__int128 v21 = 134219778LL;
    __int128 v196 = v21;
    *((void *)&v24 + Hasher._combine(_:)(v1 & 1) = 2LL;
    __int128 v191 = xmmword_100067230;
    uint64_t v195 = (char *)&type metadata for Any + 8;
    *(void *)&__int128 v24 = 134218754LL;
    __int128 v187 = v24;
    uint64_t v219 = v12;
    uint64_t v218 = v13;
    unint64_t v216 = v17;
    uint64_t v206 = v20;
    uint64_t v205 = v22;
    while (1)
    {
      unint64_t v25 = v207;
      sub_10003EEB0(v23, v207 == 0, v20);
      if (v25) {
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v20);
      }
      else {
        id v26 = *(id *)(v193 + 8LL * (void)v23);
      }
      id v27 = v26;
      BOOL v28 = __OFADD__(v23, 1LL);
      os_log_type_t v29 = (char *)v23 + 1;
      if (v28) {
        goto LABEL_116;
      }
      unint64_t v220 = v29;
      uint64_t v234 = 0LL;
      unint64_t v235 = 0xE000000000000000LL;
      uint64_t v30 = ((uint64_t (*)(void))dispatch thunk of SportingEventPlay.clock.getter)();
      if (v30)
      {
        uint64_t v31 = (void *)v30;
        uint64_t v17 = (char *)dispatch thunk of SportingEventClock.minutes.getter();
        char v33 = v32;

        if ((v33 & 1) == 0)
        {
          uint64_t v30 = ((uint64_t (*)(void))dispatch thunk of SportingEventPlay.clock.getter)();
          if (v30)
          {
            uint64_t v34 = (void *)v30;
            uint64_t v35 = dispatch thunk of SportingEventClock.seconds.getter();
            char v37 = v36;

            if ((v37 & 1) == 0)
            {
              uint64_t v233 = v17;
              uint64_t v12 = (uint64_t)&type metadata for Int;
              unsigned int v231 = (void *)dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
              unint64_t v232 = v38;
              v39._uint64_t countAndFlagsBits = 58LL;
              v39._object = (void *)0xE100000000000000LL;
              String.append(_:)(v39);
              uint64_t v40 = sub_100006BEC(&qword_100087C20);
              uint64_t v41 = swift_allocObject(v40, 72LL, 7LL);
              *(_OWORD *)(v41 + 1sub_100006E64(v0 + 6) = v191;
              *(void *)(v41 + 5sub_100006E64(v0 + 6) = &type metadata for Int;
              *(void *)(v41 + 6sub_100006E64(v0 + 4) = &protocol witness table for Int;
              *(void *)(v41 + 3sub_100006E64(v0 + 2) = v35;
              v42._uint64_t countAndFlagsBits = String.init(format:_:)(1681010725LL, 0xE400000000000000LL, v41);
              object = v42._object;
              String.append(_:)(v42);
              swift_bridgeObjectRelease(object);
              uint64_t v44 = v231;
              unint64_t v45 = v232;
              swift_beginAccess(&v234, v228, 1LL, 0LL);
              unint64_t v46 = v235;
              uint64_t v234 = v44;
              unint64_t v235 = v45;
              uint64_t v30 = swift_bridgeObjectRelease(v46);
            }
          }
        }
      }

      uint64_t v47 = dispatch thunk of SportingEventPlay.competitors.getter(v30);
      uint64_t v48 = v47;
      if ((unint64_t)v47 >> 62)
      {
        if (v47 >= 0) {
          v47 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v47);
        if (v13)
        {
LABEL_15:
          uint64_t v233 = (char *)_swiftEmptyArrayStorage;
          uint64_t v20 = (uint64_t)&v233;
          sub_100016630(0LL, v13 & ~(v13 >> 63), 0LL);
          if (v13 < 0) {
            goto LABEL_117;
          }
          id v227 = v27;
          uint64_t v17 = v233;
          uint64_t v49 = v13 + 3;
          while (2)
          {
            if (v49 == 0x8000000000000003LL)
            {
              __break(1u);
LABEL_110:
              __break(1u);
LABEL_111:
              __break(1u);
LABEL_112:
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              if (v20 < 0) {
                uint64_t v186 = v20;
              }
              else {
                uint64_t v186 = v20 & 0xFFFFFFFFFFFFFF8LL;
              }
              swift_bridgeObjectRetain(v20);
              uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v186);
              swift_bridgeObjectRelease(v20);
              if (!v22) {
                return swift_bridgeObjectRelease(v20);
              }
              goto LABEL_3;
            }

            unint64_t v50 = v49 - 4;
            if ((v48 & 0xC000000000000001LL) != 0)
            {
              id v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50, v48);
            }

            else
            {
              if ((v50 & 0x8000000000000000LL) != 0) {
                goto LABEL_111;
              }
              if (v50 >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
                goto LABEL_112;
              }
              id v51 = *(id *)(v48 + 8 * v49);
            }

            unint64_t v52 = v51;
            unsigned int v231 = 0LL;
            unint64_t v232 = 0xE000000000000000LL;
            uint64_t v53 = (void *)SportingEventCompetitorContainer.score.getter();
            uint64_t v13 = SportingEventCompetitorScore.scoreEntries.getter();

            if ((unint64_t)v13 >> 62)
            {
              if (v13 < 0) {
                uint64_t v58 = v13;
              }
              else {
                uint64_t v58 = v13 & 0xFFFFFFFFFFFFFF8LL;
              }
              swift_bridgeObjectRetain(v13);
              uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v58);
              swift_bridgeObjectRelease(v13);
              if (!v20) {
                goto LABEL_33;
              }
LABEL_25:
              if ((v13 & 0xC000000000000001LL) != 0)
              {
                id v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v13);
              }

              else
              {
                if (!*(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
                  goto LABEL_110;
                }
                id v54 = *(id *)(v13 + 32);
              }

              uint64_t v55 = v54;
              uint64_t v56 = swift_bridgeObjectRelease(v13);
              uint64_t v57 = SportingEventCompetitorScoreEntry.value.getter(v56);
            }

            else
            {
              uint64_t v20 = *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
              if (v20) {
                goto LABEL_25;
              }
LABEL_33:
              swift_bridgeObjectRelease(v13);
              uint64_t v57 = -1LL;
            }

            uint64_t v230 = v57;
            v59._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
            uint64_t v60 = v59._object;
            uint64_t v20 = (uint64_t)&v231;
            String.append(_:)(v59);

            swift_bridgeObjectRelease(v60);
            uint64_t v12 = (uint64_t)v231;
            unint64_t v61 = v232;
            uint64_t v233 = v17;
            unint64_t v63 = *((void *)v17 + 2);
            unint64_t v62 = *((void *)v17 + 3);
            uint64_t v13 = v63 + 1;
            if (v63 >= v62 >> 1)
            {
              uint64_t v20 = (uint64_t)&v233;
              sub_100016630(v62 > 1, v63 + 1, 1LL);
              uint64_t v17 = v233;
            }

            *((void *)v17 + sub_100006E64(v0 + 2) = v13;
            uint64_t v64 = &v17[16 * v63];
            *((void *)v64 + sub_100006E64(v0 + 4) = v12;
            *((void *)v64 + sub_100006E64(v0 + 5) = v61;
            if (--v49 == 3)
            {
              swift_bridgeObjectRelease(v48);
              uint64_t v12 = v219;
              uint64_t v13 = v218;
              id v27 = v227;
              goto LABEL_43;
            }

            continue;
          }
        }
      }

      else
      {
        uint64_t v13 = *(void *)((v47 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v13) {
          goto LABEL_15;
        }
      }

      swift_bridgeObjectRelease(v48);
      uint64_t v17 = (char *)_swiftEmptyArrayStorage;
      uint64_t v12 = v219;
      uint64_t v13 = v218;
LABEL_43:
      unsigned int v231 = v17;
      uint64_t v65 = sub_100006BEC(&qword_100087B00);
      unint64_t v66 = sub_100023E2C();
      uint64_t v214 = (void *)v65;
      uint64_t v213 = v66;
      uint64_t v67 = BidirectionalCollection<>.joined(separator:)(2108704LL, 0xE300000000000000LL, v65, v66);
      unint64_t v69 = v68;
      uint64_t v70 = swift_bridgeObjectRelease(v17);
      unsigned int v231 = (void *)SportingEventPlay.playDescription.getter(v70);
      unint64_t v232 = v71;
      uint64_t v72 = v208;
      static CharacterSet.whitespacesAndNewlines.getter(v231);
      unint64_t v73 = sub_10000EB58();
      uint64_t v74 = StringProtocol.trimmingCharacters(in:)(v72, &type metadata for String, v73);
      unint64_t v76 = v75;
      (*(void (**)(char *, uint64_t))(v209 + 8))(v72, v210);
      swift_bridgeObjectRelease(v232);
      swift_bridgeObjectRelease(v76);
      uint64_t v77 = HIBYTE(v76) & 0xF;
      if ((v76 & 0x2000000000000000LL) == 0) {
        uint64_t v77 = v74 & 0xFFFFFFFFFFFFLL;
      }
      if (!v77)
      {
        if (qword_1000870F0 != -1) {
          swift_once(&qword_1000870F0, sub_10004BF00);
        }
        uint64_t v78 = sub_10000B928(v12, (uint64_t)qword_10008F330);
        uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
        os_log_type_t v80 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v79, v80))
        {
          uint64_t v81 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v81 = 0;
          _os_log_impl((void *)&_mh_execute_header, v79, v80, "Blank Play:", v81, 2u);
          uint64_t v82 = v81;
          uint64_t v13 = v218;
          uint64_t v12 = v219;
          swift_slowDealloc(v82, -1LL, -1LL);
        }
      }

      uint64_t v17 = v216;
      if (qword_1000870F0 != -1) {
        swift_once(&qword_1000870F0, sub_10004BF00);
      }
      uint64_t v83 = sub_10000B928(v12, (uint64_t)qword_10008F330);
      uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      uint64_t v211 = v83;
      uint64_t v212 = v84;
      ((void (*)(char *))v84)(v17);
      id v85 = v27;
      uint64_t v86 = swift_bridgeObjectRetain(v69);
      uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
      int v88 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v87, (os_log_type_t)v88))
      {
        LODWORD(v203) = v88;
        os_log_t v204 = v87;
        uint64_t v89 = swift_slowAlloc(82LL, -1LL);
        uint64_t v202 = (void *)swift_slowAlloc(192LL, -1LL);
        unsigned int v231 = v202;
        *(_DWORD *)uint64_t v89 = v196;
        uint64_t v233 = v220;
        uint64_t v90 = v215;
        uint64_t v91 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v215, v89 + 4, v89 + 12);
        id v227 = v85;
        *(_WORD *)(v89 + sub_100006E64(v0 + 12) = 2080;
        uint64_t v92 = dispatch thunk of SportingEventPlay.id.getter(v91);
        uint64_t v12 = 1819047278LL;
        if (v93)
        {
          unint64_t v94 = v93;
        }

        else
        {
          uint64_t v92 = 1819047278LL;
          unint64_t v94 = 0xE400000000000000LL;
        }

        uint64_t v233 = (char *)sub_100015AD4(v92, v94, (uint64_t *)&v231);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v90, v89 + 14, v89 + 22);

        uint64_t v95 = swift_bridgeObjectRelease(v94);
        *(_WORD *)(v89 + 2sub_100006E64(v0 + 2) = 2048;
        uint64_t v96 = dispatch thunk of SportingEventPlay.stamp.getter(v95);
        char v98 = v97;

        if ((v98 & 1) != 0) {
          uint64_t v99 = -1LL;
        }
        else {
          uint64_t v99 = v96;
        }
        uint64_t v233 = (char *)v99;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v90, v89 + 24, v89 + 32);

        *(_WORD *)(v89 + 3sub_100006E64(v0 + 2) = 2080;
        swift_beginAccess(&v234, v229, 0LL, 0LL);
        uint64_t v100 = (uint64_t)v234;
        unint64_t v101 = v235;
        swift_bridgeObjectRetain(v235);
        uint64_t v233 = (char *)sub_100015AD4(v100, v101, (uint64_t *)&v231);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v90, v89 + 34, v89 + 42);
        swift_bridgeObjectRelease(v101);
        *(_WORD *)(v89 + 4sub_100006E64(v0 + 2) = 2080;
        swift_bridgeObjectRetain(v69);
        uint64_t v233 = (char *)sub_100015AD4(v67, v69, (uint64_t *)&v231);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v90, v89 + 44, v89 + 52);
        uint64_t v102 = swift_bridgeObjectRelease_n(v69, 3LL);
        *(_WORD *)(v89 + 5sub_100006E64(v0 + 2) = 2080;
        uint64_t v103 = SportingEventPlay.playDescription.getter(v102);
        unint64_t v105 = v104;
        uint64_t v233 = (char *)sub_100015AD4(v103, v104, (uint64_t *)&v231);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v90, v89 + 54, v89 + 62);

        uint64_t v106 = swift_bridgeObjectRelease(v105);
        *(_WORD *)(v89 + 6sub_100006E64(v0 + 2) = 2080;
        uint64_t v107 = dispatch thunk of SportingEventPlay.levels.getter(v106);
        uint64_t v108 = type metadata accessor for SportingEventPlayLevel(0LL);
        uint64_t v109 = Array.description.getter(v107, v108);
        unint64_t v111 = v110;
        swift_bridgeObjectRelease(v107);
        uint64_t v233 = (char *)sub_100015AD4(v109, v111, (uint64_t *)&v231);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v90, v89 + 64, v89 + 72);

        uint64_t v112 = swift_bridgeObjectRelease(v111);
        *(_WORD *)(v89 + 7sub_100006E64(v0 + 2) = 2080;
        id v85 = v227;
        uint64_t v113 = dispatch thunk of SportingEventPlay.annotations.getter(v112);
        if (v113)
        {
          uint64_t v12 = *(void *)(v113 + 16);
          if (v12)
          {
            unint64_t v114 = (*(unsigned __int8 *)(v226 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v226 + 80);
            uint64_t v192 = v113;
            unint64_t v115 = v113 + v114;
            uint64_t v116 = *(void *)(v226 + 72);
            uint64_t v117 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v226 + 16);
            uint64_t v118 = _swiftEmptyArrayStorage;
            do
            {
              uint64_t v120 = v224;
              uint64_t v119 = v225;
              uint64_t v121 = v117(v224, v115, v225);
              uint64_t v122 = SportingEventPlayAnnotation.rawValue.getter(v121);
              uint64_t v124 = v123;
              (*(void (**)(char *, uint64_t))(v226 + 8))(v120, v119);
              if ((swift_isUniquelyReferenced_nonNull_native(v118) & 1) == 0)
              {
                sub_100014C54();
                uint64_t v118 = v127;
              }

              unint64_t v125 = v118[2];
              if (v125 >= v118[3] >> 1)
              {
                sub_100014C54();
                uint64_t v118 = v128;
              }

              v118[2] = v125 + 1;
              uint64_t v126 = &v118[2 * v125];
              v126[4] = v122;
              v126[5] = v124;
              v115 += v116;
              --v12;
            }

            while (v12);
            swift_bridgeObjectRelease(v192);
            id v85 = v227;
          }

          else
          {
            swift_bridgeObjectRelease(v113);
            uint64_t v118 = _swiftEmptyArrayStorage;
          }
        }

        else
        {
          uint64_t v130 = sub_100006BEC(&qword_100087510);
          uint64_t v118 = (void *)swift_allocObject(v130, 48LL, 7LL);
          *((_OWORD *)v118 + Hasher._combine(_:)(v1 & 1) = v191;
          v118[4] = 1819047278LL;
          v118[5] = 0xE400000000000000LL;
        }

        uint64_t v131 = Array.description.getter(v118, &type metadata for String);
        uint64_t v17 = v132;
        swift_bridgeObjectRelease(v118);
        uint64_t v233 = (char *)sub_100015AD4(v131, (unint64_t)v17, (uint64_t *)&v231);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v215, v89 + 74, v89 + 82);

        swift_bridgeObjectRelease(v17);
        os_log_t v133 = v204;
        _os_log_impl( (void *)&_mh_execute_header,  v204,  (os_log_type_t)v203,  "Play[%ld], id: %s, play stamp: %ld, play clock: %s, play score: %s - %s, play levels: %s, play annotations: %s",  (uint8_t *)v89,  0x52u);
        unint64_t v134 = v202;
        swift_arrayDestroy(v202, 6LL);
        swift_slowDealloc(v134, -1LL, -1LL);
        swift_slowDealloc(v89, -1LL, -1LL);

        uint64_t v13 = v218;
        id v129 = *(os_log_s **)(v218 + 8);
        ((void (*)(char *, uint64_t))v129)(v216, v219);
      }

      else
      {

        swift_bridgeObjectRelease_n(v69, 2LL);
        id v129 = *(os_log_s **)(v13 + 8);
        ((void (*)(char *, uint64_t))v129)(v17, v12);
      }

      if (v217)
      {
        os_log_t v204 = v129;
        id v135 = v217;
        uint64_t v136 = SportingEventSubscription.sport.getter();
        uint64_t v13 = (uint64_t)v198;
        Sport.init(rawValue:)(v136);
        uint64_t v137 = v200;
        uint64_t v17 = v199;
        uint64_t v12 = v201;
        (*(void (**)(char *, void, uint64_t))(v200 + 104))(v199, v197, v201);
        char v138 = sub_100041A20(v13, (uint64_t)v17);
        char v139 = *(void (**)(char *, uint64_t))(v137 + 8);
        v139(v17, v12);
        uint64_t v140 = ((uint64_t (*)(uint64_t, uint64_t))v139)(v13, v12);
        if ((v138 & 1) != 0)
        {
          id v203 = v135;
          uint64_t v141 = dispatch thunk of SportingEventPlay.competitors.getter(v140);
          uint64_t v142 = v141;
          if ((unint64_t)v141 >> 62)
          {
            if (v141 >= 0) {
              v141 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v141);
            if (v13)
            {
LABEL_77:
              unsigned int v231 = _swiftEmptyArrayStorage;
              uint64_t v20 = (uint64_t)&v231;
              sub_100016630(0LL, v13 & ~(v13 >> 63), 0LL);
              if ((v13 & 0x8000000000000000LL) == 0)
              {
                id v227 = v85;
                uint64_t v17 = (char *)(v142 & 0xFFFFFFFFFFFFFF8LL);
                uint64_t v12 = v13 + 3;
                while (v12 != 0x8000000000000003LL)
                {
                  unint64_t v143 = v12 - 4;
                  if ((v142 & 0xC000000000000001LL) != 0)
                  {
                    id v144 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v143, v142);
                  }

                  else
                  {
                    if ((v143 & 0x8000000000000000LL) != 0) {
                      goto LABEL_114;
                    }
                    if (v143 >= *(void *)((v142 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
                      goto LABEL_115;
                    }
                    id v144 = *(id *)(v142 + 8 * v12);
                  }

                  uint64_t v145 = v144;
                  uint64_t v146 = v221;
                  SportingEventCompetitorContainer.baseballScores.getter();
                  sub_10003EBFC( &qword_100089930,  (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventCompetitorContainer.BaseballScores,  (uint64_t)&protocol conformance descriptor for SportingEventCompetitorContainer.BaseballScores);
                  uint64_t v20 = (uint64_t)v146;
                  uint64_t v147 = v223;
                  uint64_t v149 = dispatch thunk of CustomStringConvertible.description.getter(v223, v148);
                  uint64_t v151 = v150;
                  (*(void (**)(char *, uint64_t))(v222 + 8))(v146, v147);

                  uint64_t v13 = (uint64_t)v231;
                  if ((swift_isUniquelyReferenced_nonNull_native(v231) & 1) == 0)
                  {
                    uint64_t v20 = (uint64_t)&v231;
                    sub_100016630(0LL, *(void *)(v13 + 16) + 1LL, 1LL);
                    uint64_t v13 = (uint64_t)v231;
                  }

                  unint64_t v153 = *(void *)(v13 + 16);
                  unint64_t v152 = *(void *)(v13 + 24);
                  if (v153 >= v152 >> 1)
                  {
                    uint64_t v20 = (uint64_t)&v231;
                    sub_100016630(v152 > 1, v153 + 1, 1LL);
                    uint64_t v13 = (uint64_t)v231;
                  }

                  *(void *)(v13 + 1sub_100006E64(v0 + 6) = v153 + 1;
                  uint64_t v154 = v13 + 16 * v153;
                  *(void *)(v154 + 3sub_100006E64(v0 + 2) = v149;
                  *(void *)(v154 + 40) = v151;
                  if (--v12 == 3)
                  {
                    swift_bridgeObjectRelease(v142);
                    id v85 = v227;
                    goto LABEL_97;
                  }
                }

                goto LABEL_113;
              }

              goto LABEL_118;
            }
          }

          else
          {
            uint64_t v13 = *(void *)((v141 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            if (v13) {
              goto LABEL_77;
            }
          }

          swift_bridgeObjectRelease(v142);
          uint64_t v13 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_97:
          unsigned int v231 = (void *)v13;
          uint64_t v155 = BidirectionalCollection<>.joined(separator:)(539831584LL, 0xE400000000000000LL, v214, v213);
          unint64_t v157 = v156;
          swift_bridgeObjectRelease(v13);
          id v158 = v194;
          uint64_t v12 = v219;
          v212(v194, v211, v219);
          id v159 = v85;
          uint64_t v160 = swift_bridgeObjectRetain(v157);
          os_log_type_t v161 = (os_log_s *)Logger.logObject.getter(v160);
          uint64_t v13 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v161, (os_log_type_t)v13))
          {
            LODWORD(v22sub_100006E64(v0 + 7) = v13;
            uint64_t v162 = swift_slowAlloc(42LL, -1LL);
            uint64_t v213 = v155;
            uint64_t v163 = v162;
            uint64_t v214 = (void *)swift_slowAlloc(96LL, -1LL);
            unsigned int v231 = v214;
            *(_DWORD *)uint64_t v163 = v187;
            uint64_t v233 = v220;
            uint64_t v164 = v215;
            uint64_t v165 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v215, v163 + 4, v163 + 12);
            *(_WORD *)(v163 + sub_100006E64(v0 + 12) = 2080;
            uint64_t v17 = v188;
            SportingEventPlay.baseballPlay.getter(v165);
            sub_10003EBFC( &qword_100089938,  (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventPlay.BaseballPlay,  (uint64_t)&protocol conformance descriptor for SportingEventPlay.BaseballPlay);
            uint64_t v166 = v190;
            uint64_t v168 = dispatch thunk of CustomStringConvertible.description.getter(v190, v167);
            unint64_t v170 = v169;
            (*(void (**)(char *, uint64_t))(v189 + 8))(v17, v166);
            uint64_t v233 = (char *)sub_100015AD4(v168, v170, (uint64_t *)&v231);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v164, v163 + 14, v163 + 22);

            swift_bridgeObjectRelease(v170);
            *(_WORD *)(v163 + 2sub_100006E64(v0 + 2) = 2080;
            swift_bridgeObjectRetain(v157);
            uint64_t v233 = (char *)sub_100015AD4(v213, v157, (uint64_t *)&v231);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v164, v163 + 24, v163 + 32);
            uint64_t v171 = swift_bridgeObjectRelease_n(v157, 3LL);
            *(_WORD *)(v163 + 3sub_100006E64(v0 + 2) = 2080;
            uint64_t v172 = dispatch thunk of SportingEventPlay.clock.getter(v171);
            if (v172)
            {
              uint64_t v173 = (void *)v172;
              os_log_type_t v174 = (void *)SportingEventClock.period.getter();

              BOOL v175 = (void *)dispatch thunk of SportingEventClockPeriod.subPeriod.getter();
              uint64_t v12 = (uint64_t)v203;
              if (!v175
                || (uint64_t v176 = dispatch thunk of SportingEventClockPeriod.index.getter(),
                    char v178 = v177,
                    v175,
                    (v178 & 1) != 0))
              {
                unint64_t v181 = 0xE400000000000000LL;
                uint64_t v179 = 1819047278LL;
              }

              else
              {
                uint64_t v233 = (char *)v176;
                uint64_t v179 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
                unint64_t v181 = v180;
              }
            }

            else
            {
              unint64_t v181 = 0xE400000000000000LL;
              uint64_t v179 = 1819047278LL;
              uint64_t v12 = (uint64_t)v203;
            }

            uint64_t v13 = v163 + 34;
            uint64_t v233 = (char *)sub_100015AD4(v179, v181, (uint64_t *)&v231);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v215, v163 + 34, v163 + 42);

            swift_bridgeObjectRelease(v181);
            _os_log_impl( (void *)&_mh_execute_header,  v161,  (os_log_type_t)v227,  "Play_baseball[%ld]: %s, Scores: %s SubPeriod: %s",  (uint8_t *)v163,  0x2Au);
            uint64_t v184 = v214;
            swift_arrayDestroy(v214, 3LL);
            swift_slowDealloc(v184, -1LL, -1LL);
            swift_slowDealloc(v163, -1LL, -1LL);

            unint64_t v182 = v194;
            uint64_t v183 = v219;
          }

          else
          {

            swift_bridgeObjectRelease_n(v157, 2LL);
            unint64_t v182 = v158;
            uint64_t v183 = v12;
          }

          ((void (*)(char *, uint64_t))v204)(v182, v183);
          goto LABEL_107;
        }
      }

LABEL_107:
      swift_bridgeObjectRelease(v235);
      uint64_t v20 = v206;
      unint64_t v23 = v220;
    }
  }

  return swift_bridgeObjectRelease(v20);
}

void sub_100057438(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100006BEC(&qword_100089900);
  __n128 v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SportingEventClockTimeType(0LL, v7);
  uint64_t v72 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v63 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = sub_100006BEC(&qword_100089918);
  __chkstk_darwin(v70);
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100006BEC(&qword_100089920);
  __chkstk_darwin(v14);
  uint64_t v65 = (uint64_t)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v74 = (uint64_t *)((char *)&v59 - v17);
  __n128 v19 = __chkstk_darwin(v18);
  uint64_t v66 = (uint64_t)&v59 - v20;
  uint64_t v62 = *a1;
  uint64_t v21 = dispatch thunk of SportingEventClockTimeContainer.clockTimes.getter(v19);
  if (!v21) {
    goto LABEL_32;
  }
  uint64_t v22 = v21 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v71 = v21;
  if ((unint64_t)v21 >> 62)
  {
LABEL_27:
    if (v21 >= 0) {
      uint64_t v58 = v22;
    }
    else {
      uint64_t v58 = v21;
    }
    swift_bridgeObjectRetain(v21);
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v58);
    if (v23) {
      goto LABEL_4;
    }
LABEL_31:
    swift_bridgeObjectRelease_n(v71, 2LL);
    goto LABEL_32;
  }

  uint64_t v23 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v21);
  if (!v23) {
    goto LABEL_31;
  }
LABEL_4:
  Swift::String v59 = v9;
  uint64_t v60 = a2;
  uint64_t v61 = v3;
  unint64_t v69 = v71 & 0xC000000000000001LL;
  unsigned int v68 = enum case for SportingEventClockTimeType.announcedAdditional(_:);
  uint64_t v24 = 4LL;
  unint64_t v25 = &qword_100089920;
  uint64_t v3 = v66;
  uint64_t v67 = (char *)v23;
  while (1)
  {
    if (v69) {
      uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v24 - 4, v71);
    }
    else {
      uint64_t v21 = (uint64_t)*(id *)(v71 + 8 * v24);
    }
    uint64_t v9 = (char *)(v24 - 3);
    if (__OFADD__(v24 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    id v73 = (id)v21;
    dispatch thunk of SportingEventClockTime.clockType.getter();
    a2 = v74;
    (*(void (**)(uint64_t *, void, uint64_t))(v72 + 104))(v74, v68, v10);
    sub_10000AB60((uint64_t)a2, 0LL, 1LL, v10);
    uint64_t v26 = (uint64_t)&v13[*(int *)(v70 + 48)];
    id v27 = v25;
    sub_10000B31C(v3, (uint64_t)v13, v25);
    sub_10000B31C((uint64_t)a2, v26, v25);
    uint64_t v28 = v65;
    sub_10000B31C((uint64_t)v13, v65, v25);
    if (sub_10000AB6C(v26, 1LL, v10) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v28, v10);
      uint64_t v3 = v66;
      goto LABEL_14;
    }

    a2 = (uint64_t *)v72;
    os_log_type_t v29 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v63, v26, v10);
    sub_10003EBFC( &qword_100089928,  (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventClockTimeType,  (uint64_t)&protocol conformance descriptor for SportingEventClockTimeType);
    int v64 = dispatch thunk of static Equatable.== infix(_:_:)(v28, v29, v10, v30);
    uint64_t v31 = (void (*)(uint64_t, uint64_t))a2[1];
    v31(v28, v10);
    v31((uint64_t)v29, v10);
    sub_100019034((uint64_t)v13, v27);
    sub_100019034((uint64_t)v74, v27);
    uint64_t v3 = v66;
    sub_100019034(v66, v27);
    unint64_t v25 = v27;
    if ((v64 & 1) != 0) {
      goto LABEL_18;
    }
LABEL_16:

    ++v24;
    if (v9 == v67)
    {
      swift_bridgeObjectRelease_n(v71, 2LL);
      a2 = v60;
      goto LABEL_32;
    }
  }

  if (sub_10000AB6C(v26, 1LL, v10) != 1)
  {
LABEL_14:
    sub_100019034((uint64_t)v13, &qword_100089918);
    sub_100019034((uint64_t)v74, v25);
    sub_100019034(v3, v25);
    goto LABEL_16;
  }

  sub_100019034((uint64_t)v13, &qword_100089920);
  sub_100019034((uint64_t)v74, &qword_100089920);
  sub_100019034(v3, &qword_100089920);
LABEL_18:
  uint64_t v32 = swift_bridgeObjectRelease_n(v71, 2LL);
  id v33 = v73;
  uint64_t v34 = dispatch thunk of SportingEventClockTime.minutes.getter(v32);
  char v36 = v35;

  a2 = v60;
  uint64_t v37 = (uint64_t)v59;
  if ((v36 & 1) == 0)
  {
    uint64_t v38 = ((uint64_t (*)(void))dispatch thunk of SportingEventClockTimeContainer.period.getter)();
    if (v38)
    {
      Swift::String v39 = (void *)v38;
      dispatch thunk of SportingEventClockPeriod.type.getter();

      uint64_t v40 = type metadata accessor for SportingEventClockPeriodType(0LL);
      if (sub_10000AB6C(v37, 1LL, v40) == 1)
      {
        sub_100019034(v37, &qword_100089900);
        goto LABEL_32;
      }

      uint64_t v41 = SportingEventClockPeriodType.rawValue.getter();
      uint64_t v42 = v37;
      unint64_t v44 = v43;
      uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8LL))(v42, v40);
      uint64_t v46 = dispatch thunk of SportingEventClockTimeContainer.period.getter(v45);
      if (v46)
      {
        uint64_t v47 = (void *)v46;
        uint64_t v48 = dispatch thunk of SportingEventClockPeriod.index.getter();
        char v50 = v49;

        if ((v50 & 1) == 0)
        {
          uint64_t v75 = 0LL;
          unint64_t v76 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(17LL);
          swift_bridgeObjectRelease(v76);
          uint64_t v75 = v41;
          unint64_t v76 = v44;
          v51._uint64_t countAndFlagsBits = 32LL;
          v51._object = (void *)0xE100000000000000LL;
          String.append(_:)(v51);
          uint64_t v77 = v48;
          v52._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          object = v52._object;
          String.append(_:)(v52);
          swift_bridgeObjectRelease(object);
          v54._uint64_t countAndFlagsBits = 0x736574756E696D20LL;
          v54._object = (void *)0xEA0000000000203ALL;
          String.append(_:)(v54);
          uint64_t v77 = v34;
          v55._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          uint64_t v56 = v55._object;
          String.append(_:)(v55);
          swift_bridgeObjectRelease(v56);
          unint64_t v57 = v76;
          *a2 = v75;
          a2[1] = v57;
          return;
        }
      }

      swift_bridgeObjectRelease(v44);
    }
  }

void sub_100057A14(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (qword_1000870F0 != -1) {
    swift_once(&qword_1000870F0, sub_10004BF00);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_10000B928(v8, (uint64_t)qword_10008F330);
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v9 = swift_bridgeObjectRetain_n(a4, 2LL);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = swift_slowAlloc(64LL, -1LL);
    uint64_t v15 = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_bridgeObjectRetain(a2);
    uint64_t v14 = sub_100015AD4(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v12 + sub_100006E64(v0 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    uint64_t v14 = sub_100015AD4(a3, a4, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease_n(a4, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Competitor: %s; Contextual shootout: %s)",
      (uint8_t *)v12,
      0x16u);
    swift_arrayDestroy(v13, 2LL);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

void sub_100057C1C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_100016630(0LL, v3, 0LL);
    uint64_t v5 = *(void *)(type metadata accessor for IngestionError(0LL) - 8);
    uint64_t v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v7 = *(void *)(v5 + 72);
    do
    {
      uint64_t v8 = IngestionError.rawValue.getter();
      uint64_t v10 = v9;
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_100016630(v11 > 1, v12 + 1, 1LL);
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      v6 += v7;
      --v3;
    }

    while (v3);
  }

  *a2 = _swiftEmptyArrayStorage;
}

void sub_100057D14()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  void *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100014CFC();
    void *v0 = v3;
  }

uint64_t sub_100057D5C(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24LL);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }

  return result;
}

uint64_t sub_100057D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 1sub_100006E64(v0 + 6) = a1 + 1;
  uint64_t v6 = type metadata accessor for IngestionError(0LL);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))( v5 + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
         + *(void *)(*(void *)(v6 - 8) + 72LL) * a1,
           a2,
           v6);
}

uint64_t sub_100057E00()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100057E24(void *a1@<X8>)
{
}

uint64_t sub_100057E2C()
{
  return sub_10004FB70(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

_BYTE **sub_100057E38(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  return sub_100015FE4(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_100057E44()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100057E68()
{
  return sub_100015A54(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100057E70(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_100015A74(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_100057E78@<X0>(uint64_t a1@<X8>)
{
  return sub_100055E20(*(void *)(v1 + 16), a1);
}

uint64_t sub_100057EA0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 392))(a1, a2, v2);
}

void sub_100057EB0()
{
  *(void *)(v1 - 25sub_100006E64(v0 + 6) = v0;
}

uint64_t sub_100057EC0()
{
  return Logger.logObject.getter();
}

void sub_100057ECC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_100057EE0(uint64_t a1)
{
  *(void *)(v1 - 20sub_100006E64(v0 + 8) = a1;
  return v1 - 208;
}

uint64_t sub_100057EF4()
{
  return (*(uint64_t (**)(void))(v0 - 400))();
}

uint64_t sub_100057F00(uint64_t a1)
{
  return BidirectionalCollection<>.joined(separator:)(2108704LL, 0xE300000000000000LL, v1, a1);
}

uint64_t sub_100057F20()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_100057F30()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100057F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 208, v4, v5, a4);
}

uint64_t sub_100057F50(uint64_t a1)
{
  *(void *)(v3 - 20sub_100006E64(v0 + 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 208, v3 - 200, v2, v1);
}

uint64_t sub_100057F6C()
{
  return sub_100015AD4(v0, v1, (uint64_t *)(v2 - 192));
}

uint64_t sub_100057F7C(uint64_t a1)
{
  return sub_100015AD4(a1, v1, (uint64_t *)(v2 - 192));
}

uint64_t sub_100057F88()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

BOOL sub_100057FA4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100057FB4()
{
  return 1819047278LL;
}

void sub_100057FC4()
{
}

uint64_t sub_100057FCC()
{
  return SportingEvent.clock.getter();
}

uint64_t sub_100057FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 20sub_100006E64(v0 + 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 208, v4 + 8, v5, a4);
}

void sub_100057FE8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_100057FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 19sub_100006E64(v0 + 2) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 192, v4 + 8, v5, a4);
}

uint64_t sub_100058010()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100058020@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  *(void *)(v3 - 400) = a2;
  return a2(a1, v2);
}

uint64_t sub_100058030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 208, v5, v4, a4);
}

uint64_t sub_100058040()
{
  return sub_100015AD4(v1, v0, (uint64_t *)(v2 - 192));
}

  ;
}

uint64_t sub_10005805C()
{
  return 0LL;
}

uint64_t sub_100058074()
{
  return 0LL;
}

BOOL sub_100058084(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100058094@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t sub_1000580A4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 25sub_100006E64(v0 + 6) = a1;
  return 0LL;
}

uint64_t sub_1000580B4()
{
  return static os_log_type_t.debug.getter();
}

  ;
}

  ;
}

void sub_1000580E4()
{
}

void sub_1000580EC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000580F4()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_10005810C(uint64_t a1, unint64_t a2)
{
  return sub_100015AD4(a1, a2, (uint64_t *)(v2 - 192));
}

uint64_t sub_100058118(uint64_t a1, unint64_t a2)
{
  return sub_100015AD4(a1, a2, (uint64_t *)(v2 - 208));
}

uint64_t sub_100058124()
{
  return SportingEvent.clock.getter();
}

uint64_t sub_10005812C()
{
  return static os_log_type_t.debug.getter();
}

BOOL sub_100058134@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_100058148(uint64_t result)
{
  *(void *)(v1 - 19sub_100006E64(v0 + 2) = result;
  return result;
}

uint64_t sub_100058154()
{
  return dispatch thunk of RawRepresentable.rawValue.getter(v0, v1);
}

uint64_t sub_100058160(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2LL);
}

void sub_100058168()
{
}

uint64_t sub_100058174(uint64_t a1)
{
  return sub_10000AB6C(v1, 1LL, a1);
}

void sub_100058198()
{
}

uint64_t sub_1000581A0(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.Int64 + 64;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 128);
}

uint64_t sub_1000581F0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x73746E657665LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(a2);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746E657665LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_10005826C()
{
  return 0x73746E657665LL;
}

void *sub_100058280(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v25 = a2;
  uint64_t v26 = a4;
  v27[0] = a2;
  v27[1] = a3;
  void v27[2] = a4;
  v27[3] = a5;
  v27[4] = a6;
  v27[5] = a7;
  uint64_t v9 = type metadata accessor for ApsPayload.ContentWrapper.CodingKeys(255LL, (uint64_t)v27);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10006A278, v9);
  uint64_t v11 = type metadata accessor for KeyedDecodingContainer(0LL, v9, WitnessTable);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v16 = a1[3];
  uint64_t v15 = a1[4];
  uint64_t v17 = sub_100006C2C(a1, v16);
  uint64_t v18 = v9;
  uint64_t v19 = v9;
  uint64_t v20 = v17;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v18, v19, WitnessTable, v16, v15);
  if (!v7)
  {
    uint64_t v21 = type metadata accessor for Array(0LL, v25);
    v27[7] = v26;
    uint64_t v22 = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v21);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v23, v11, v21, v22);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v20 = (void *)v27[0];
  }

  sub_100006E64(a1);
  return v20;
}

uint64_t sub_10005840C()
{
  return sub_1000078E0();
}

Swift::Int sub_100058420()
{
  return sub_1000514C0();
}

void sub_100058434()
{
}

Swift::Int sub_100058448()
{
  return Hasher._finalize()();
}

uint64_t sub_100058490()
{
  return sub_10005826C();
}

uint64_t sub_1000584A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000581F0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000584DC()
{
  return sub_1000078E8();
}

uint64_t sub_100058504@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1000078E0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10005853C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10006A278, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100058570(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10006A278, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

void *sub_1000585A4@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_100058280(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7]);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

void sub_1000585DC()
{
}

void sub_100058620()
{
  uint64_t v69 = v1;
  uint64_t v70 = v0;
  uint64_t v3 = v2;
  char v4 = *(void **)v0;
  uint64_t v5 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v56 = type metadata accessor for Optional(0LL, v5);
  v55[4] = *(void *)(v56 - 8);
  sub_10005A190();
  __chkstk_darwin(v6);
  uint64_t v58 = (char *)v55 - v7;
  v55[1] = *(void *)(v5 - 8);
  __chkstk_darwin(v8);
  sub_10000E5C4();
  v55[2] = v9;
  uint64_t v10 = v4[11];
  uint64_t v11 = type metadata accessor for Optional(0LL, v10);
  uint64_t v64 = *(void *)(v11 - 8);
  uint64_t v65 = v11;
  sub_10005A190();
  __chkstk_darwin(v12);
  Swift::String v59 = (char *)v55 - v13;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v66 = v14;
  uint64_t v67 = v15;
  __chkstk_darwin(v14);
  sub_10000E5C4();
  uint64_t v68 = v16;
  uint64_t v17 = v4[12];
  uint64_t v18 = v4[13];
  uint64_t v19 = v4[14];
  uint64_t v20 = v4[15];
  uint64_t v60 = v5;
  uint64_t v61 = v17;
  v72[0] = v5;
  v72[1] = v10;
  uint64_t v63 = v10;
  v72[2] = v17;
  v72[3] = v18;
  void v55[3] = v18;
  uint64_t v62 = v19;
  void v72[4] = v19;
  v72[5] = v20;
  uint64_t v57 = v20;
  uint64_t v21 = type metadata accessor for ApsPayload.PayloadWrapper.CodingKeys(255LL, (uint64_t)v72);
  uint64_t v22 = sub_10005A1BC((uint64_t)&unk_10006A110);
  uint64_t v23 = type metadata accessor for KeyedDecodingContainer(0LL, v21, v22);
  uint64_t v24 = *(void *)(v23 - 8);
  sub_10005A190();
  __chkstk_darwin(v25);
  id v27 = (char *)v55 - v26;
  uint64_t v28 = v3[3];
  uint64_t v29 = v3[4];
  sub_100006C2C(v3, v28);
  uint64_t v30 = v29;
  uint64_t v31 = v69;
  uint64_t v32 = v70;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v21, v21, v22, v28, v30);
  if (v31)
  {
    swift_deallocPartialClassInstance( v32,  v4,  *(unsigned int *)(*(void *)v32 + 48LL),  *(unsigned __int16 *)(*(void *)v32 + 52LL));
  }

  else
  {
    uint64_t v33 = v68;
    LOBYTE(v72[0]) = 0;
    uint64_t v34 = v27;
    *((void *)v32 + sub_100006E64(v0 + 2) = KeyedDecodingContainer.decode(_:forKey:)(v72, v23);
    *((void *)v32 + 3) = sub_10005A17C(1);
    *((void *)v32 + sub_100006E64(v0 + 4) = v35;
    *((void *)v32 + sub_100006E64(v0 + 5) = sub_10005A17C(2);
    *((void *)v32 + sub_100006E64(v0 + 6) = v36;
    LOBYTE(v72[0]) = 3;
    uint64_t v37 = sub_100059D6C(qword_1000877A0, (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v38 = v33;
    uint64_t v39 = v23;
    uint64_t v40 = v66;
    uint64_t v69 = 0LL;
    sub_10005A1D0(v66, (uint64_t)v72, v39, v66, v37);
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(&v32[qword_10008F3E0], v38, v40);
    LOBYTE(v72[0]) = 4;
    v55[0] = v34;
    uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v72, v39);
    uint64_t v42 = v39;
    uint64_t v44 = v63;
    uint64_t v45 = &v32[qword_10008F3E8];
    *(void *)uint64_t v45 = v41;
    v45[8] = v43 & 1;
    LOBYTE(v72[0]) = 5;
    uint64_t v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v72, v42);
    uint64_t v47 = (uint64_t *)&v32[qword_10008F3F0];
    *uint64_t v47 = v46;
    v47[1] = v48;
    LOBYTE(v72[0]) = 6;
    char v49 = v59;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v44, v72, v42, v44, v62);
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v32[*(void *)(*(void *)v32 + 176LL)], v49, v65);
    uint64_t v50 = type metadata accessor for Array(0LL, v60);
    char v71 = 7;
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v50);
    uint64_t v68 = v42;
    uint64_t v52 = v55[0];
    sub_10005A1D0(v50, (uint64_t)&v71, v42, v50, WitnessTable);
    uint64_t v53 = v72[0];
    Swift::String v54 = v70;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v52, v68);
    *(void *)((char *)v54 + *(void *)(*v54 + 184LL)) = v53;
  }

  sub_100006E64(v3);
  sub_10004BC28();
}

uint64_t sub_100058D24(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 1701869940 && a2 == 0xE400000000000000LL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else
  {
    BOOL v6 = a1 == 0x6556616D65686373LL && a2 == 0xED00006E6F697372LL;
    if (v6
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6556616D65686373LL, 0xED00006E6F697372LL, a1, a2, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(a2);
      return 1LL;
    }

    else
    {
      BOOL v7 = a1 == 0x7365536F706D6574LL && a2 == 0xEE0064496E6F6973LL;
      if (v7
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7365536F706D6574LL, 0xEE0064496E6F6973LL, a1, a2, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a2);
        return 2LL;
      }

      else
      {
        BOOL v8 = a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL;
        if (v8
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(a2);
          return 3LL;
        }

        else
        {
          BOOL v9 = a1 == 0x697463416576696CLL && a2 == 0xEF6C745479746976LL;
          if (v9
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0x697463416576696CLL, 0xEF6C745479746976LL, a1, a2, 0LL) & 1) != 0)
          {
            swift_bridgeObjectRelease(a2);
            return 4LL;
          }

          else
          {
            BOOL v10 = a1 == 0x5464616F6C796170LL && a2 == 0xEC0000006E656B6FLL;
            if (v10
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0x5464616F6C796170LL, 0xEC0000006E656B6FLL, a1, a2, 0LL) & 1) != 0)
            {
              swift_bridgeObjectRelease(a2);
              return 5LL;
            }

            else
            {
              BOOL v11 = a1 == 2003134838 && a2 == 0xE400000000000000LL;
              if (v11
                || (_stringCompareWithSmolCheck(_:_:expecting:)(2003134838LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
              {
                swift_bridgeObjectRelease(a2);
                return 6LL;
              }

              else if (a1 == 0x746E65746E6F63LL && a2 == 0xE700000000000000LL)
              {
                swift_bridgeObjectRelease(a2);
                return 7LL;
              }

              else
              {
                char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E65746E6F63LL, 0xE700000000000000LL, a1, a2, 0LL);
                swift_bridgeObjectRelease(a2);
                if ((v13 & 1) != 0) {
                  return 7LL;
                }
                else {
                  return 8LL;
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_100059058(char a1)
{
  return *(void *)&aType_3[8 * a1];
}

BOOL sub_100059078(char *a1, char *a2)
{
  return sub_10000CCF8(*a1, *a2);
}

Swift::Int sub_100059094()
{
  return sub_10000CFF8(*v0);
}

void sub_1000590A8(uint64_t a1)
{
}

Swift::Int sub_1000590BC()
{
  return Hasher._finalize()();
}

uint64_t sub_100059108()
{
  return sub_100059058(*v0);
}

uint64_t sub_10005911C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_100059738( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_100058D24,  a4);
}

uint64_t sub_100059128()
{
  return sub_1000078E8();
}

uint64_t sub_100059150@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_1000597A8( a1,  a2,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_100048EA8,  a3);
}

uint64_t sub_10005915C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10006A110, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100059190(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10006A110, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t *sub_1000591C4()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for Date(0LL);
  sub_10000C5B0(v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for Optional(0LL, *(void *)(v1 + 88));
  sub_10000C5B0(v3);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100059254()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

void sub_100059278( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v25;
  a23 = v26;
  id v27 = v23;
  uint64_t v29 = v28;
  uint64_t v30 = *v27;
  uint64_t v31 = *(void *)(*v27 + 120LL);
  uint64_t v66 = *(void *)(*v27 + 80LL);
  uint64_t v67 = v24;
  uint64_t v69 = v66;
  __int128 v64 = *(_OWORD *)(v30 + 88);
  __int128 v70 = v64;
  __int128 v63 = *(_OWORD *)(v30 + 104);
  __int128 v71 = v63;
  uint64_t v65 = v31;
  uint64_t v72 = v31;
  uint64_t v32 = type metadata accessor for ApsPayload.PayloadWrapper.CodingKeys(255LL, (uint64_t)&v69);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10006A110, v32);
  uint64_t v34 = type metadata accessor for KeyedEncodingContainer(0LL, v32, WitnessTable);
  uint64_t v35 = *(void *)(v34 - 8);
  sub_10005A190();
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v63 - v37;
  uint64_t v39 = v29[3];
  uint64_t v40 = v29[4];
  sub_100006C2C(v29, v39);
  uint64_t v41 = v32;
  uint64_t v42 = v32;
  uint64_t v43 = v34;
  dispatch thunk of Encoder.container<A>(keyedBy:)(v41, v42, WitnessTable, v39, v40);
  uint64_t v44 = v27[2];
  LOBYTE(v6sub_100006E64(v0 + 9) = 0;
  uint64_t v45 = v67;
  KeyedEncodingContainer.encode(_:forKey:)(v44, &v69, v34);
  if (!v45)
  {
    uint64_t v47 = v65;
    uint64_t v46 = v66;
    sub_10005A164(v27[3], v27[4], 1);
    sub_10005A164(v27[5], v27[6], 2);
    uint64_t v67 = v27;
    uint64_t v48 = (uint64_t)v27 + qword_10008F3E0;
    LOBYTE(v6sub_100006E64(v0 + 9) = 3;
    uint64_t v49 = type metadata accessor for Date(0LL);
    uint64_t v50 = sub_100059D6C(&qword_100089A48, (uint64_t)&protocol conformance descriptor for Date);
    sub_10005A1D8(v48, (uint64_t)&v69, v43, v49, v50);
    Swift::String v51 = v67;
    sub_10005A1A4(4);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v52, v53, v54, v55);
    sub_10005A1A4(5);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v56, v57, v58, v59);
    uint64_t v60 = (uint64_t)v51 + *(void *)(*v51 + 176LL);
    LOBYTE(v6sub_100006E64(v0 + 9) = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v60, &v69, v43, v64, v47);
    uint64_t v69 = *(void *)((char *)v51 + *(void *)(*v51 + 184LL));
    a13 = 7;
    uint64_t v61 = type metadata accessor for Array(0LL, v46);
    uint64_t v68 = v63;
    uint64_t v62 = sub_10005A1BC((uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_10005A1D8((uint64_t)&v69, (uint64_t)&a13, v43, v61, v62);
  }

  (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v43);
  sub_10004BC28();
}

void sub_10005950C(void *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
}

#error "100059544: call analysis failed (funcsize=8)"
uint64_t sub_100059554(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v7;
  uint64_t v3 = a1 == 0x64616F6C796170LL && a2 == 0xE700000000000000LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x64616F6C796170LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 0x756F437365747962LL && a2 == 0xEA0000000000746ELL)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else
  {
    BOOL v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x756F437365747962LL, 0xEA0000000000746ELL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100059640(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x756F437365747962LL;
  }
  else {
    return 0x64616F6C796170LL;
  }
}

BOOL sub_10005967C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000480B0(*a1, *a2);
}

Swift::Int sub_100059698()
{
  return sub_1000504A8(*v0);
}

void sub_1000596B0(uint64_t a1)
{
}

Swift::Int sub_1000596C8()
{
  return Hasher._finalize()();
}

uint64_t sub_100059714()
{
  return sub_100059640(*v0);
}

uint64_t sub_10005972C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_100059738( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_100059554,  a4);
}

uint64_t sub_100059738@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, void, void, void, void, void, void)@<X4>, _BYTE *a5@<X8>)
{
  uint64_t result = a4(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7]);
  *a5 = result;
  return result;
}

uint64_t sub_100059770()
{
  return sub_1000078E8();
}

uint64_t sub_10005979C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_1000597A8( a1,  a2,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_100048198,  a3);
}

uint64_t sub_1000597A8@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t (*a3)(uint64_t, void, void, void, void, void, void)@<X3>, _BYTE *a4@<X8>)
{
  uint64_t result = a3(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7]);
  *a4 = result;
  return result;
}

uint64_t sub_1000597E0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10006A160, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100059814(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10006A160, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_100059848()
{
  return v0;
}

uint64_t sub_100059864()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for ApsPayload(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ApsPayload);
}

void sub_100059890( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v52 = v21;
  uint64_t v24 = v20;
  uint64_t v26 = v25;
  uint64_t v27 = *v24;
  uint64_t v29 = *(void *)(*v24 + 80LL);
  uint64_t v28 = *(void *)(*v24 + 88LL);
  uint64_t v30 = *(void *)(*v24 + 104LL);
  uint64_t v49 = *(void *)(*v24 + 96LL);
  uint64_t v50 = v28;
  uint64_t v32 = *(void *)(v27 + 112);
  uint64_t v31 = *(void *)(v27 + 120);
  uint64_t v47 = v32;
  uint64_t v48 = v30;
  uint64_t v46 = v31;
  uint64_t v54 = v29;
  uint64_t v55 = v28;
  uint64_t v56 = v49;
  uint64_t v57 = v30;
  uint64_t v58 = v32;
  uint64_t v59 = v31;
  uint64_t v33 = sub_10005A1F0();
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10006A160, v33);
  uint64_t v35 = type metadata accessor for KeyedEncodingContainer(0LL, v33, WitnessTable);
  uint64_t v51 = *(void *)(v35 - 8);
  sub_10005A190();
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v46 - v37;
  uint64_t v39 = v26[3];
  uint64_t v40 = v26[4];
  sub_100006C2C(v26, v39);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v33, v33, WitnessTable, v39, v40);
  a10 = v24[2];
  char v53 = 0;
  uint64_t v54 = v29;
  uint64_t v55 = v50;
  uint64_t v56 = v49;
  uint64_t v57 = v48;
  uint64_t v58 = v47;
  uint64_t v59 = v46;
  uint64_t v41 = sub_10005A1FC();
  uint64_t v42 = sub_10005A1BC((uint64_t)&unk_100069E18);
  uint64_t v43 = v52;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&a10, &v53, v35, v41, v42);
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v38, v35);
  }

  else
  {
    uint64_t v44 = v51;
    uint64_t v45 = v24[3];
    LOBYTE(v5sub_100006E64(v0 + 4) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v45, &v54, v35);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v35);
  }

  sub_10004BC28();
}

void sub_100059A20(uint64_t a1)
{
}

uint64_t sub_100059A64(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[1] = &unk_100069DA8;
  void v5[2] = &unk_100069DA8;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v5[3] = *(void *)(result - 8) + 64LL;
    v5[4] = &unk_100069DC0;
    v5[5] = &unk_100069DD8;
    uint64_t result = type metadata accessor for Optional(319LL, *(void *)(a1 + 88));
    if (v4 <= 0x3F)
    {
      v5[6] = *(void *)(result - 8) + 64LL;
      void v5[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t result = swift_initClassMetadata2(a1, 0LL, 8LL, v5, a1 + 128);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t type metadata accessor for ApsPayload.PayloadWrapper(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ApsPayload.PayloadWrapper);
}

void sub_100059B38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = v10;
  uint64_t v14 = v13;
  uint64_t v15 = *v10;
  uint64_t v16 = *(void *)(*v10 + 80);
  uint64_t v17 = *(void *)(*v10 + 96);
  uint64_t v18 = *(void *)(*v10 + 104);
  uint64_t v19 = *(void *)(*v10 + 112);
  uint64_t v20 = *(void *)(*v10 + 120);
  uint64_t v41 = *(void *)(*v10 + 88);
  uint64_t v42 = v16;
  uint64_t v45 = v11;
  uint64_t v46 = v16;
  uint64_t v47 = v41;
  uint64_t v48 = v17;
  uint64_t v39 = v18;
  uint64_t v40 = v17;
  uint64_t v49 = v18;
  uint64_t v50 = v19;
  uint64_t v37 = v20;
  uint64_t v38 = v19;
  uint64_t v51 = v20;
  uint64_t v21 = sub_10005A1F0();
  uint64_t v22 = sub_10005A1BC((uint64_t)&unk_10006A160);
  uint64_t v44 = type metadata accessor for KeyedDecodingContainer(0LL, v21, v22);
  sub_10005A190();
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v36 - v24;
  uint64_t v27 = v14[3];
  uint64_t v26 = v14[4];
  sub_100006C2C(v14, v27);
  uint64_t v43 = v25;
  uint64_t v28 = v22;
  uint64_t v29 = v12;
  uint64_t v30 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v21, v21, v28, v27, v26);
  if (v30)
  {
    swift_deallocPartialClassInstance(v12, v15, 32LL, 7LL);
    uint64_t v35 = v14;
  }

  else
  {
    uint64_t v45 = v14;
    uint64_t v46 = v42;
    uint64_t v47 = v41;
    uint64_t v48 = v40;
    uint64_t v49 = v39;
    uint64_t v50 = v38;
    uint64_t v51 = v37;
    uint64_t v31 = sub_10005A1FC();
    LOBYTE(v4sub_100006E64(v0 + 6) = 0;
    uint64_t WitnessTable = swift_getWitnessTable(&unk_100069E40, v31);
    uint64_t v33 = v44;
    sub_10005A1D0(v31, (uint64_t)&v46, v44, v31, WitnessTable);
    v29[2] = a10;
    LOBYTE(v4sub_100006E64(v0 + 6) = 1;
    uint64_t v34 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v33);
    sub_10005A154();
    v29[3] = v34;
    uint64_t v35 = v45;
  }

  sub_100006E64(v35);
  sub_10004BC28();
}

void sub_100059D0C(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!v2) {
    *a2 = v4;
  }
}

#error "100059D44: call analysis failed (funcsize=8)"
uint64_t type metadata accessor for ApsPayload.CodingKeys(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ApsPayload.CodingKeys);
}

uint64_t type metadata accessor for ApsPayload.PayloadWrapper.CodingKeys(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ApsPayload.PayloadWrapper.CodingKeys);
}

uint64_t sub_100059D6C(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for Date(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t type metadata accessor for ApsPayload.ContentWrapper(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ApsPayload.ContentWrapper);
}

uint64_t type metadata accessor for ApsPayload.PayloadError(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ApsPayload.PayloadError);
}

uint64_t sub_100059DC4(uint64_t a1, uint64_t a2)
{
  if (sub_100059E04(a2, a2)) {
    return sub_100006BEC(qword_100089A50);
  }
  else {
    return type metadata accessor for _ContiguousArrayStorage(0LL, a2);
  }
}

uint64_t sub_100059E04(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t sub_100059E30(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(vsub_100006E64(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100006E64(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_100006E64(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100059E70(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + sub_100006E64(v0 + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 1sub_100006E64(v0 + 6) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + sub_100006E64(v0 + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 1sub_100006E64(v0 + 6) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_100059EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 56LL);
}

uint64_t sub_100059EB4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_100059F00 + 4 * byte_100069D1D[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100059F34 + 4 * byte_100069D18[v4]))();
}

uint64_t sub_100059F34(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100059F3C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100059F44LL);
  }
  return result;
}

uint64_t sub_100059F50(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100059F58LL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_100059F5C(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100059F64(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100059F70(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100059FBC + 4 * byte_100069D27[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100059FF0 + 4 * byte_100069D22[v4]))();
}

uint64_t sub_100059FF0(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100059FF8(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10005A000LL);
  }
  return result;
}

uint64_t sub_10005A00C(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10005A014LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10005A018(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10005A020(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10005A02C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100069FC8, a1);
}

uint64_t sub_10005A03C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10006A080, a1);
}

uint64_t sub_10005A04C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100069FF0, a1);
}

uint64_t sub_10005A05C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10006A018, a1);
}

uint64_t sub_10005A06C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100069F38, a1);
}

uint64_t sub_10005A07C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100069F60, a1);
}

uint64_t type metadata accessor for ApsPayload.ContentWrapper.CodingKeys(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ApsPayload.ContentWrapper.CodingKeys);
}

uint64_t sub_10005A098(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10005A0D8 + 4 * byte_100069D2C[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10005A0F8 + 4 * byte_100069D31[v4]))();
  }
}

_BYTE *sub_10005A0D8(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10005A0F8(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10005A100(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10005A108(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10005A110(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10005A118(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_10005A124(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10006A250, a1);
}

uint64_t sub_10005A134(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10006A1C0, a1);
}

uint64_t sub_10005A144(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10006A1E8, a1);
}

uint64_t sub_10005A154()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_10005A164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 12sub_100006E64(v0 + 8) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 128, v3);
}

uint64_t sub_10005A17C@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 13sub_100006E64(v0 + 6) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 136, v1);
}

  ;
}

uint64_t sub_10005A19C()
{
  return swift_errorRelease(v0);
}

void sub_10005A1A4(char a1@<W8>)
{
  *(_BYTE *)(v1 - 12sub_100006E64(v0 + 8) = a1;
}

uint64_t sub_10005A1BC(uint64_t a1)
{
  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_10005A1C4(uint64_t a1, uint64_t a2)
{
  return sub_10000AB60(a1, a2, 1LL, v2);
}

uint64_t sub_10005A1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10005A1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

  ;
}

uint64_t sub_10005A1F0()
{
  return type metadata accessor for ApsPayload.CodingKeys(255LL, v0 - 128);
}

uint64_t sub_10005A1FC()
{
  return type metadata accessor for ApsPayload.PayloadWrapper(0LL, v0 - 128);
}

uint64_t sub_10005A208( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_100006BEC(&qword_100089D78);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100019488();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = sub_100006BEC(&qword_100089D80);
  uint64_t v49 = *(void *)(v14 - 8);
  uint64_t v50 = v14;
  __chkstk_darwin(v14);
  sub_100019488();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = sub_100006BEC(&qword_100089D88);
  uint64_t v51 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_100019488();
  uint64_t v47 = v20 - v19;
  uint64_t v21 = sub_100006BEC(&qword_100087368);
  __chkstk_darwin(v21);
  sub_100019488();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = type metadata accessor for URL(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  sub_100019488();
  uint64_t v29 = v28 - v27;
  if (a4)
  {
    swift_bridgeObjectRetain(a4);
    URL.init(string:)(a3, a4);
    if (sub_10000AB6C(v24, 1LL, v25) != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v29, v24, v25);
      uint64_t v35 = (void **)sub_100006C2C((void *)(v44 + 16), *(void *)(v44 + 40));
      uint64_t v56 = sub_100042C88(v29, a5, a6, *v35, v35[1]);
      uint64_t v36 = sub_100006BEC(&qword_100089D98);
      uint64_t v43 = v18;
      uint64_t v37 = sub_100006BEC((uint64_t *)&unk_100088B90);
      sub_10000EBD4( &qword_100089DA0,  &qword_100089D98,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      Publisher.mapError<A>(_:)(sub_10003EAB0, 0LL, v36, v37);
      swift_release(v56);
      uint64_t v38 = swift_allocObject(&unk_100081EF8, 24LL, 7LL);
      swift_weakInit(v38 + 16);
      uint64_t v39 = (void *)swift_allocObject(&unk_100081F20, 88LL, 7LL);
      _OWORD v39[2] = a5;
      v39[3] = a6;
      v39[4] = a7;
      v39[5] = a8;
      v39[6] = v38;
      v39[7] = a1;
      v39[8] = a2;
      v39[9] = a3;
      v39[10] = a4;
      uint64_t v40 = sub_10005B7E4();
      sub_10000EBD4( &qword_100089DA8,  &qword_100089D80,  (uint64_t)&protocol conformance descriptor for Publishers.MapError<A, B>);
      swift_bridgeObjectRetain(a6);
      swift_bridgeObjectRetain(a8);
      swift_bridgeObjectRetain(a2);
      Publisher.map<A>(_:)(sub_10005B2C8, v39, v50, v40);
      swift_release(v39);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v17, v50);
      uint64_t v41 = sub_10000EBD4( &qword_100089DB0,  &qword_100089D88,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      uint64_t v34 = Publisher.eraseToAnyPublisher()(v43, v41);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v47, v43);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v25);
      return v34;
    }

    swift_bridgeObjectRelease(a4);
    sub_10005B220(v24);
  }

  id v30 = objc_allocWithZone(&OBJC_CLASS___NSError);
  uint64_t v56 = (uint64_t)sub_100027EB0(0xD00000000000001ELL, 0x800000010006C8F0LL, 1LL, 0LL);
  uint64_t v31 = sub_10005B7E4();
  uint64_t v32 = sub_100006BEC((uint64_t *)&unk_100088B90);
  Fail.init(error:)(&v56, v31, v32, &protocol self-conformance witness table for Error);
  uint64_t v33 = sub_10000EBD4(&qword_100089D90, &qword_100089D78, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
  uint64_t v34 = Publisher.eraseToAnyPublisher()(v9, v33);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  return v34;
}

uint64_t sub_10005A65C(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  BOOL v7 = v4 == *a2 && v5 == v6;
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  BOOL v12 = v8 == v10 && v9 == v11;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v10, v11, 0LL) & 1) == 0) {
    return 0LL;
  }
  uint64_t v13 = *(int *)(sub_10005B7E4() + 24);
  return static SportingEventSubscription.Competitor.LogoFilePaths.== infix(_:_:)((char *)a1 + v13, (char *)a2 + v13);
}

uint64_t sub_10005A6E4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, char *a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v34 = a9;
  uint64_t v35 = a6;
  uint64_t v31 = a8;
  uint64_t v32 = a5;
  uint64_t v33 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0LL);
  uint64_t v14 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a4 += 16LL;
  URL.init(fileURLWithPath:)(a2, a3);
  swift_beginAccess(a4, v36, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a4);
  if (Strong)
  {
    uint64_t v22 = Strong;
    uint64_t v23 = sub_10005A890(a1, (uint64_t)v20);
    uint64_t v25 = v24;
    swift_release(v22);
  }

  else
  {
    uint64_t v23 = 0LL;
    uint64_t v25 = 0LL;
  }

  Swift::String v26 = URL.path(percentEncoded:)(1);
  SportingEventSubscription.Competitor.LogoFilePaths.init(smallSize:defaultSize:)( v23,  v25,  v26._countAndFlagsBits,  v26._object);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v28 = v34;
  uint64_t v27 = v35;
  *(void *)a7 = v32;
  *((void *)a7 + Hasher._combine(_:)(v1 & 1) = v27;
  *((void *)a7 + sub_100006E64(v0 + 2) = v31;
  *((void *)a7 + 3) = v28;
  uint64_t v29 = type metadata accessor for LogoDownloadResult(0LL);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&a7[*(int *)(v29 + 24)], v16, v33);
  swift_bridgeObjectRetain(v27);
  return swift_bridgeObjectRetain(v28);
}

uint64_t sub_10005A890(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v51 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  BOOL v7 = (char *)&v49 - v6;
  __n128 v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v49 - v10;
  uint64_t v12 = type metadata accessor for SportsLogoSize(0LL, v9);
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t, __n128))(v13 + 104))( v16,  enum case for SportsLogoSize.small(_:),  v12,  v14);
  CGImageRef v18 = sub_10005AF04(v17);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v20 = v18;
  v19(v16, v12);
  if (!v20)
  {
    if (qword_100087100 != -1) {
      swift_once(&qword_100087100, sub_10004BF3C);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    sub_10000B928(v34, (uint64_t)qword_10008F360);
    uint64_t v35 = v51;
    uint64_t v36 = v4;
    uint64_t v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 16))(v7, a1, v4);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v41 = swift_slowAlloc(32LL, -1LL);
      uint64_t v53 = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      uint64_t v42 = URL.absoluteString.getter(v41);
      unint64_t v44 = v43;
      uint64_t v52 = sub_100015AD4(v42, v43, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease(v44);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v36);
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "LogoRepository: can't create CGImage from URL: %s",  v40,  0xCu);
      swift_arrayDestroy(v41, 1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v4);
    }

    return 0LL;
  }

  uint64_t v21 = sub_10005B060(v20);
  if (v22 >> 60 == 15)
  {
    uint64_t v23 = v4;
    if (qword_100087100 != -1) {
      swift_once(&qword_100087100, sub_10004BF3C);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10000B928(v24, (uint64_t)qword_10008F360);
    uint64_t v25 = v51;
    uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 16))(v11, a1, v23);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v50 = v20;
      uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v53 = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v31 = URL.absoluteString.getter(v30);
      unint64_t v33 = v32;
      uint64_t v52 = sub_100015AD4(v31, v32, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v33);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v23);
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "LogoRepository: can't create data from image with URL: %s",  v29,  0xCu);
      swift_arrayDestroy(v30, 1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v23);
    }

    return 0LL;
  }

  uint64_t v45 = (uint64_t)v21;
  unint64_t v46 = v22;
  uint64_t v50 = v20;
  Data.write(to:options:)(a2, 0LL, v21, v22);
  uint64_t countAndFlagsBits = URL.path(percentEncoded:)(1)._countAndFlagsBits;
  sub_1000232CC(v45, v46);

  return countAndFlagsBits;
}

CGImageRef sub_10005AF04@<X0>(NSURL *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v3 = CGImageSourceCreateWithURL(v1, 0LL);

  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = sub_100006BEC(&qword_100089DB8);
  uint64_t inited = swift_initStackObject(v4, v13);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067B00;
  *(void *)(inited + 3sub_100006E64(v0 + 2) = kCGImageSourceThumbnailMaxPixelSize;
  *(void *)(inited + 40) = SportsLogoSize.rawValue.getter((id)kCGImageSourceThumbnailMaxPixelSize);
  *(void *)(inited + 6sub_100006E64(v0 + 4) = &type metadata for Int;
  *(void *)(inited + 7sub_100006E64(v0 + 2) = kCGImageSourceCreateThumbnailFromImageAlways;
  *(_BYTE *)(inited + 80) = 1;
  *(void *)(inited + 10sub_100006E64(v0 + 4) = &type metadata for Bool;
  *(void *)(inited + 1sub_100006E64(v0 + 12) = kCGImageSourceCreateThumbnailWithTransform;
  *(void *)(inited + 14sub_100006E64(v0 + 4) = &type metadata for Bool;
  *(_BYTE *)(inited + 120) = 1;
  unint64_t v6 = sub_10005B2FC();
  sub_10005B338();
  BOOL v7 = (id)kCGImageSourceCreateThumbnailFromImageAlways;
  uint64_t v8 = (id)kCGImageSourceCreateThumbnailWithTransform;
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)(inited, v6);
  Class isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  CGImageRef ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex(v3, 0LL, isa);

  return ThumbnailAtIndex;
}

__CFData *sub_10005B060(CGImage *a1)
{
  uint64_t v2 = type metadata accessor for UTType(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Mutable = CFDataCreateMutable(0LL, 0LL);
  if (Mutable)
  {
    uint64_t v7 = static UTType.png.getter();
    UTType.identifier.getter(v7);
    uint64_t v9 = v8;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v10 = (__CFString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
    uint64_t v11 = CGImageDestinationCreateWithData(Mutable, v10, 1uLL, 0LL);

    if (v11)
    {
      CGImageDestinationAddImage(v11, a1, 0LL);
      if (CGImageDestinationFinalize(v11))
      {
        uint64_t v12 = Mutable;
        Mutable = (__CFData *)static Data._unconditionallyBridgeFromObjectiveC(_:)(Mutable);

        return Mutable;
      }
    }

    else
    {
    }

    return 0LL;
  }

  return Mutable;
}

uint64_t sub_10005B1A4()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for LogoRepository()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd14LogoRepository);
}

uint64_t type metadata accessor for LogoDownloadResult(uint64_t a1)
{
  uint64_t result = qword_100089E28;
  if (!qword_100089E28) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LogoDownloadResult);
  }
  return result;
}

uint64_t sub_10005B220(uint64_t a1)
{
  uint64_t v2 = sub_100006BEC(&qword_100087368);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10005B260()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10005B284()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_10005B2C8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_10005A6E4(a1, v2[4], v2[5], v2[6], v2[7], v2[8], a2, v2[9], v2[10]);
}

unint64_t sub_10005B2FC()
{
  unint64_t result = qword_100089DC0;
  if (!qword_100089DC0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSString);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100089DC0);
  }

  return result;
}

unint64_t sub_10005B338()
{
  unint64_t result = qword_100089DC8;
  if (!qword_100089DC8)
  {
    unint64_t v1 = sub_10005B2FC();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100089DC8);
  }

  return result;
}

uint64_t *sub_10005B378(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v12 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v12);
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0LL);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }

  return v3;
}

uint64_t sub_10005B42C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_10005B47C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

void *sub_10005B504(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

_OWORD *sub_10005B5A0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

void *sub_10005B5FC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t sub_10005B678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005B684);
}

uint64_t sub_10005B684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(vsub_100006E64(v0 + 4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0LL);
    return sub_10000AB6C(a1 + *(int *)(a3 + 24), a2, v8);
  }

uint64_t sub_10005B6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005B704);
}

uint64_t sub_10005B704(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + sub_100006E64(v0 + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0LL);
    return sub_10000AB60(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }

  return result;
}

uint64_t sub_10005B770(uint64_t a1)
{
  v4[0] = &unk_10006A388;
  v4[1] = &unk_10006A388;
  uint64_t result = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10005B7E4()
{
  return type metadata accessor for LogoDownloadResult(0LL);
}

void sub_10005B7EC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) == 1LL)
  {
    sub_10000BBA4(a1, &qword_100089FC0);
    sub_1000600FC(a2, v3);
    sub_10000BBA4((uint64_t)v3, &qword_100089FC0);
  }

  else
  {
    sub_100035ED8(a1, (uint64_t)v3, qword_100087690);
    sub_10006020C((uint64_t)v3, a2);
  }

void sub_10005B86C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, char a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  char v37 = v36;
  uint64_t v39 = v38;
  char v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v52 = sub_100006BEC(&qword_100087E58);
  uint64_t inited = swift_initStackObject(v52, v101);
  uint64_t v54 = inited;
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_10006A3D0;
  *(_BYTE *)(inited + 3sub_100006E64(v0 + 2) = 2;
  if (v49)
  {
    uint64_t v55 = &type metadata for String;
    uint64_t v56 = v49;
  }

  else
  {
    uint64_t v51 = 0LL;
    uint64_t v56 = 0LL;
    uint64_t v55 = 0LL;
    *(void *)(inited + 5sub_100006E64(v0 + 6) = 0LL;
  }

  *(void *)(inited + 40) = v51;
  *(void *)(inited + 4sub_100006E64(v0 + 8) = v56;
  *(void *)(inited + 6sub_100006E64(v0 + 4) = v55;
  *(_BYTE *)(inited + 7sub_100006E64(v0 + 2) = 11;
  if (v45)
  {
    uint64_t v57 = &type metadata for String;
    uint64_t v58 = v45;
  }

  else
  {
    uint64_t v47 = 0LL;
    uint64_t v58 = 0LL;
    uint64_t v57 = 0LL;
    *(void *)(inited + 9sub_100006E64(v0 + 6) = 0LL;
  }

  *(void *)(inited + 80) = v47;
  *(void *)(inited + 8sub_100006E64(v0 + 8) = v58;
  *(void *)(inited + 10sub_100006E64(v0 + 4) = v57;
  *(_BYTE *)(inited + 1sub_100006E64(v0 + 12) = 12;
  if ((v41 & 1) != 0)
  {
    uint64_t v59 = 0LL;
    uint64_t v43 = 0LL;
    *(void *)(inited + 12sub_100006E64(v0 + 8) = 0LL;
    *(void *)(inited + 13sub_100006E64(v0 + 6) = 0LL;
  }

  else
  {
    uint64_t v59 = &type metadata for UInt64;
  }

  *(void *)(inited + 14sub_100006E64(v0 + 4) = v59;
  *(void *)(inited + 120) = v43;
  *(_BYTE *)(inited + 15sub_100006E64(v0 + 2) = 17;
  if ((a29 & 1) != 0)
  {
    uint64_t v61 = 0LL;
    a28 = 0LL;
    *(void *)(inited + 16sub_100006E64(v0 + 8) = 0LL;
    *(void *)(inited + 17sub_100006E64(v0 + 6) = 0LL;
  }

  else
  {
    uint64_t v61 = &type metadata for Int;
  }

  *(void *)(inited + 18sub_100006E64(v0 + 4) = v61;
  *(void *)(inited + 160) = a28;
  *(_BYTE *)(inited + 19sub_100006E64(v0 + 2) = 9;
  if ((v37 & 1) != 0)
  {
    uint64_t v62 = 0LL;
    uint64_t v39 = 0LL;
    *(void *)(inited + 20sub_100006E64(v0 + 8) = 0LL;
    *(void *)(inited + 21sub_100006E64(v0 + 6) = 0LL;
  }

  else
  {
    uint64_t v62 = &type metadata for UInt64;
  }

  *(void *)(inited + 22sub_100006E64(v0 + 4) = v62;
  *(void *)(inited + 200) = v39;
  *(_BYTE *)(inited + 23sub_100006E64(v0 + 2) = 13;
  if ((a22 & 1) != 0)
  {
    __int128 v64 = 0LL;
    a21 = 0LL;
    *(void *)(inited + 24sub_100006E64(v0 + 8) = 0LL;
    *(void *)(inited + 25sub_100006E64(v0 + 6) = 0LL;
  }

  else
  {
    __int128 v64 = &type metadata for UInt64;
  }

  *(void *)(inited + 26sub_100006E64(v0 + 4) = v64;
  *(void *)(inited + 240) = a21;
  *(_BYTE *)(inited + 27sub_100006E64(v0 + 2) = 15;
  if (a24)
  {
    uint64_t v66 = &type metadata for String;
    uint64_t v67 = a24;
  }

  else
  {
    a23 = 0LL;
    uint64_t v67 = 0LL;
    uint64_t v66 = 0LL;
    *(void *)(inited + 29sub_100006E64(v0 + 6) = 0LL;
  }

  *(void *)(inited + 280) = a23;
  *(void *)(inited + 28sub_100006E64(v0 + 8) = v67;
  *(void *)(inited + 30sub_100006E64(v0 + 4) = v66;
  *(_BYTE *)(inited + 3sub_100006E64(v0 + 12) = 14;
  if ((a31 & 1) != 0)
  {
    uint64_t v69 = 0LL;
    a30 = 0LL;
    *(void *)(inited + 32sub_100006E64(v0 + 8) = 0LL;
    *(void *)(inited + 33sub_100006E64(v0 + 6) = 0LL;
  }

  else
  {
    uint64_t v69 = &type metadata for UInt64;
  }

  *(void *)(inited + 34sub_100006E64(v0 + 4) = v69;
  *(void *)(inited + 320) = a30;
  *(_BYTE *)(inited + 35sub_100006E64(v0 + 2) = 16;
  uint64_t v70 = sub_100006BEC(&qword_100088920);
  uint64_t v71 = swift_initStackObject(v70, v100);
  uint64_t v72 = (void *)v71;
  *(_OWORD *)(v71 + 1sub_100006E64(v0 + 6) = xmmword_100067BF0;
  if ((a27 & 1) != 0)
  {
    *(void *)(v71 + 3sub_100006E64(v0 + 2) = 0LL;
    *(void *)(v71 + 40) = 0LL;
    *(void *)(v71 + 4sub_100006E64(v0 + 8) = a32;
    *(void *)(v71 + 5sub_100006E64(v0 + 6) = a33;
    sub_100019734();
    sub_100019194();
    sub_10000C610();
    sub_10000C6A0();
    uint64_t v77 = _swiftEmptyArrayStorage;
  }

  else
  {
    v97[0] = a26;
    sub_10000C6A0();
    sub_100019194();
    sub_10000C610();
    uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v75 = v74;
    void v72[4] = v73;
    v72[5] = v74;
    v72[6] = a32;
    void v72[7] = a33;
    sub_100019734();
    sub_100019194();
    sub_100014C54();
    uint64_t v77 = v76;
    unint64_t v78 = v76[2];
    if (v78 >= v76[3] >> 1)
    {
      sub_1000618A0();
      uint64_t v77 = v96;
    }

    v77[2] = v78 + 1;
    uint64_t v79 = &v77[2 * v78];
    v79[4] = v73;
    v79[5] = v75;
  }

  if (a33)
  {
    sub_100019734();
    if ((swift_isUniquelyReferenced_nonNull_native(v77) & 1) == 0)
    {
      sub_1000618A0();
      uint64_t v77 = v94;
    }

    unint64_t v80 = v77[2];
    if (v80 >= v77[3] >> 1)
    {
      sub_1000618A0();
      uint64_t v77 = v95;
    }

    v77[2] = v80 + 1;
    uint64_t v81 = &v77[2 * v80];
    v81[4] = a32;
    v81[5] = a33;
  }

  swift_release(v72);
  v97[0] = v77;
  uint64_t v82 = sub_100006BEC(&qword_100087B00);
  sub_10000C04C((unint64_t *)&qword_100087B08, &qword_100087B00);
  uint64_t v84 = BidirectionalCollection<>.joined(separator:)(95LL, 0xE100000000000000LL, v82, v83);
  uint64_t v86 = v85;
  swift_bridgeObjectRelease(v77);
  *(void *)(v54 + 38sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(v54 + 360) = v84;
  *(void *)(v54 + 36sub_100006E64(v0 + 8) = v86;
  *(_BYTE *)(v54 + 39sub_100006E64(v0 + 2) = 1;
  if (a35)
  {
    uint64_t v87 = a34;
    int v88 = &type metadata for String;
    uint64_t v89 = a35;
  }

  else
  {
    sub_100061784();
    *(void *)(v54 + 41sub_100006E64(v0 + 6) = 0LL;
  }

  *(void *)(v54 + 400) = v87;
  *(void *)(v54 + 40sub_100006E64(v0 + 8) = v89;
  *(void *)(v54 + 42sub_100006E64(v0 + 4) = v88;
  sub_10000C6A0();
  sub_100006BEC(qword_100087690);
  sub_100061884();
  uint64_t v90 = sub_10006194C(v54, (uint64_t)&type metadata for SportsMetricsKey);
  sub_100035EAC(a36, (uint64_t)v97, (uint64_t *)&unk_100088BA0);
  uint64_t v91 = v98;
  if (v98)
  {
    uint64_t v92 = v99;
    sub_100006C2C(v97, v98);
    uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 8))(v91, v92);
    sub_100006E64(v97);
  }

  else
  {
    sub_10000BBA4((uint64_t)v97, (uint64_t *)&unk_100088BA0);
    uint64_t v93 = sub_10006194C((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for SportsMetricsKey);
  }

  sub_10005D1FC(v93, v90);
  sub_10000C248();
}

void sub_10005BD28(uint64_t a1, __int16 a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = sub_100006BEC(&qword_100089FB0);
  uint64_t v100 = *(void *)(v7 - 8);
  sub_10000C318();
  __chkstk_darwin(v8);
  sub_10000E5C4();
  uint64_t v99 = v9;
  uint64_t v10 = type metadata accessor for MetricsFieldsContext(0LL);
  uint64_t v98 = *(void *)(v10 - 8);
  sub_10000C318();
  __chkstk_darwin(v11);
  sub_1000580BC();
  uint64_t v96 = v12;
  sub_10003F208();
  __n128 v14 = __chkstk_darwin(v13);
  char v97 = (char *)&v90 - v15;
  uint64_t v16 = (uint64_t *)type metadata accessor for MetricsData(0LL, v14);
  int isUniquelyReferenced_nonNull_native = (uint64_t *)*(v16 - 1);
  __chkstk_darwin(v16);
  sub_10003BC1C();
  sub_100006BEC(&qword_100089FB8);
  sub_10000C318();
  __chkstk_darwin(v18);
  sub_100019488();
  uint64_t v21 = v20 - v19;
  id v22 = [objc_allocWithZone(ACAccountStore) init];
  ACAccountStore.activeAccount.getter();

  uint64_t v23 = type metadata accessor for Account(0LL);
  if (sub_10000AB6C(v21, 1LL, v23) == 1)
  {
    sub_10000BBA4(v21, &qword_100089FB8);
    return;
  }

  uint64_t v91 = v7;
  sub_10000BBA4(v21, &qword_100089FB8);
  uint64_t v118 = a1;
  __int16 v119 = a2 & 0x101;
  uint64_t v24 = &OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_notificationLottery;
  if ((a2 & 1) == 0) {
    uint64_t v24 = &OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_loadUrlLottery;
  }
  uint64_t v25 = *v24;
  uint64_t v101 = v4;
  uint64_t v26 = (unint64_t *)(v4 + v25);
  unint64_t v27 = *v26;
  unint64_t v28 = v26[1];
  unint64_t v29 = 0x6C725564616F6CLL;
  unint64_t v30 = 0x800000010006CA00LL;
  if ((a2 & 1) == 0) {
    unint64_t v30 = 0xE700000000000000LL;
  }
  uint64_t v31 = &type metadata for String;
  if ((a2 & 1) != 0) {
    unint64_t v29 = 0xD000000000000011LL;
  }
  uint64_t v116 = (uint64_t)&type metadata for String;
  unint64_t v114 = v29;
  v115[0] = v30;
  sub_10001991C();
  sub_100019194();
  sub_10005B7EC((uint64_t)&v114, 3LL);
  uint64_t v116 = (uint64_t)&type metadata for Double;
  unint64_t v114 = v27;
  sub_10005B7EC((uint64_t)&v114, 18LL);
  sub_100019180();
  uint64_t v116 = (uint64_t)&type metadata for Double;
  unint64_t v114 = v28;
  sub_10005B7EC((uint64_t)&v114, 19LL);
  uint64_t v116 = (uint64_t)&type metadata for String;
  unint64_t v114 = 0xD000000000000011LL;
  v115[0] = 0x800000010006A7D0LL;
  sub_10005B7EC((uint64_t)&v114, 0LL);
  uint64_t v32 = v118;
  sub_10003BD68(1LL, v118, &v114);
  uint64_t v33 = v116;
  sub_10000BBA4((uint64_t)&v114, &qword_100089FC0);
  if (v33 != 1) {
    goto LABEL_12;
  }
  if (qword_100087130 != -1) {
    goto LABEL_71;
  }
LABEL_11:
  uint64_t v116 = (uint64_t)v31;
  unint64_t v114 = qword_10008F3D0;
  v115[0] = *(void *)algn_10008F3D8;
  swift_bridgeObjectRetain(*(void *)algn_10008F3D8);
  sub_10005B7EC((uint64_t)&v114, 1LL);
  uint64_t v32 = v118;
LABEL_12:
  sub_10003BD68(42LL, v32, &v111);
  uint64_t v95 = v16;
  unint64_t v94 = isUniquelyReferenced_nonNull_native;
  unint64_t v93 = v3;
  uint64_t v92 = v10;
  if (*((void *)&v112 + 1) == 1LL)
  {
    uint64_t v34 = &qword_100089FC0;
    uint64_t v35 = (unint64_t *)&v111;
LABEL_19:
    sub_10000BBA4((uint64_t)v35, v34);
    goto LABEL_20;
  }

  sub_100035ED8((uint64_t)&v111, (uint64_t)&v114, qword_100087690);
  if (!v116)
  {
    uint64_t v34 = qword_100087690;
    uint64_t v35 = &v114;
    goto LABEL_19;
  }

  if ((swift_dynamicCast(&v109, &v114, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
  {
    uint64_t v36 = *((void *)&v109 + 1);
    char v37 = (void *)(v101 + OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_environmentDataCenter);
    uint64_t v38 = *(void *)(v101 + OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_environmentDataCenter + 8);
    *char v37 = v109;
    v37[1] = v36;
    swift_bridgeObjectRelease(v38);
    goto LABEL_24;
  }

LABEL_46:
    uint64_t v45 = 0LL;
    __int128 v111 = 0u;
    __int128 v112 = 0u;
    uint64_t v113 = 1LL;
LABEL_47:
    sub_100035ED8((uint64_t)&v111, (uint64_t)&v114, &qword_100089FC8);
    if (v117 == (void *)1)
    {
      swift_release(v41);
      unint64_t v76 = v93;
      MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)( 0xD000000000000012LL,  0x800000010006A790LL,  0LL,  v47,  &_swiftEmptySetSingleton,  &_swiftEmptySetSingleton);
      char v77 = v119;
      uint64_t v78 = sub_100019734();
      char v79 = sub_10005F168(v78, v77);
      uint64_t v80 = sub_10001987C();
      if ((v79 & 1) != 0)
      {
        uint64_t v81 = v96;
        uint64_t v82 = MetricsFieldsContext.init()(v80);
        unint64_t v114 = 0xD000000000000012LL;
        v115[0] = 0x800000010006A790LL;
        uint64_t v83 = v99;
        static MetricsFieldsContext.Property<A>.topic.getter(v82);
        uint64_t v84 = v97;
        MetricsFieldsContext.addingValue<A>(_:forProperty:)(&v114, v83, &type metadata for String);
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v83, v91);
        swift_bridgeObjectRelease(v115[0]);
        uint64_t v85 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
        uint64_t v86 = v92;
        v85(v81, v92);
        uint64_t v87 = MetricsPipeline.process(_:using:)(v76, v84);
        v85((uint64_t)v84, v86);
        uint64_t v88 = sub_10001906C(0LL, &qword_100087C30, &OBJC_CLASS___OS_dispatch_queue_ptr);
        uint64_t v89 = static OS_dispatch_queue.main.getter(v88);
        uint64_t v116 = v88;
        uint64_t v117 = &protocol witness table for OS_dispatch_queue;
        unint64_t v114 = v89;
        Promise.then(perform:orCatchError:on:)(nullsub_1, 0LL, sub_10005F2B0, 0LL, &v114);
        swift_release(v87);
        sub_100006E64(&v114);
      }

      ((void (*)(unint64_t, uint64_t *))v94[1])(v76, v95);
      swift_bridgeObjectRelease(v118);
      return;
    }

    uint64_t v54 = v114;
    sub_100035ED8((uint64_t)v31, (uint64_t)&v111, qword_100087690);
    if ((v54 - 45) <= 0xFDu)
    {
      unint64_t v106 = v3;
      uint64_t v10 = sub_100050BB0(v54);
      sub_100035EAC((uint64_t)&v111, (uint64_t)&v109, qword_100087690);
      if (v110)
      {
        uint64_t v31 = (void *)v41;
        uint64_t v55 = v46;
        sub_10000AC00(&v109, v108);
        int isUniquelyReferenced_nonNull_native = (uint64_t *)swift_isUniquelyReferenced_nonNull_native(v47);
        uint64_t v107 = v47;
        sub_1000618CC();
        sub_1000618BC();
        uint64_t v16 = (uint64_t *)(v58 + v59);
        if (__OFADD__(v58, v59)) {
          goto LABEL_69;
        }
        unint64_t v3 = v56;
        char v60 = v57;
        sub_100006BEC(&qword_100089FD0);
        Swift::Bool v61 = _NativeDictionary.ensureUnique(isUnique:capacity:)( (Swift::Bool)isUniquelyReferenced_nonNull_native,  (Swift::Int)v16);
        int isUniquelyReferenced_nonNull_native = qword_100087690;
        uint64_t v16 = (uint64_t *)v54;
        if (v61)
        {
          unint64_t v62 = sub_100015FF4(v10, v54);
          if ((v60 & 1) != (v63 & 1)) {
            goto LABEL_73;
          }
          unint64_t v3 = v62;
        }

        uint64_t v47 = v107;
        if ((v60 & 1) != 0)
        {
          __int128 v64 = (void *)(v107[7] + 32 * v3);
          sub_100006E64(v64);
          uint64_t v65 = v64;
          uint64_t v16 = (uint64_t *)v54;
          sub_10000AC00(v108, v65);
        }

        else
        {
          v107[(v3 >> 6) + 8] |= 1LL << v3;
          uint64_t v72 = (uint64_t *)(v47[6] + 16 * v3);
          *uint64_t v72 = v10;
          v72[1] = v54;
          sub_10000AC00(v108, (_OWORD *)(v47[7] + 32 * v3));
          uint64_t v73 = v47[2];
          BOOL v74 = __OFADD__(v73, 1LL);
          uint64_t v75 = v73 + 1;
          if (v74) {
            goto LABEL_70;
          }
          v47[2] = v75;
          swift_bridgeObjectRetain(v54);
        }

        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(0x8000000000000000LL);
        uint64_t v46 = v55;
        uint64_t v41 = (uint64_t)v31;
        uint64_t v31 = v104;
        uint64_t v16 = &qword_100089FC8;
        unint64_t v3 = v106;
      }

      else
      {
        sub_10006191C((uint64_t)&v109);
        sub_10000C610();
        unint64_t v66 = sub_1000618CC();
        char v68 = v67;
        sub_100019278();
        if ((v68 & 1) != 0)
        {
          char v69 = swift_isUniquelyReferenced_nonNull_native(v47);
          uint64_t v107 = v47;
          Swift::Int v70 = v47[3];
          sub_100006BEC(&qword_100089FD0);
          Swift::Int v71 = v70;
          int isUniquelyReferenced_nonNull_native = qword_100087690;
          _NativeDictionary.ensureUnique(isUnique:capacity:)(v69, v71);
          uint64_t v47 = v107;
          swift_bridgeObjectRelease(*(void *)(v107[6] + 16 * v66 + 8));
          sub_10000AC00((_OWORD *)(v47[7] + 32 * v66), v108);
          _NativeDictionary._delete(at:)(v66, v47, &type metadata for String, v102, &protocol witness table for String);
          swift_bridgeObjectRelease(0x8000000000000000LL);
        }

        else
        {
          memset(v108, 0, sizeof(v108));
        }

        uint64_t v16 = &qword_100089FC8;
        unint64_t v3 = v106;
        sub_100019180();
        sub_10006191C((uint64_t)v108);
      }
    }

    sub_10006191C((uint64_t)&v111);
    if (v45) {
      goto LABEL_27;
    }
  }

  unint64_t v52 = *(void *)(v103 + 8 * v53);
  if (v52)
  {
LABEL_35:
    int64_t v51 = v53;
LABEL_32:
    uint64_t v45 = (v52 - 1) & v52;
    unint64_t v49 = __clz(__rbit64(v52)) + (v51 << 6);
    unint64_t v3 = v51;
    goto LABEL_28;
  }

  while (1)
  {
    int64_t v51 = v53 + 1;
    if (__OFADD__(v53, 1LL)) {
      break;
    }
    if (v51 >= v105)
    {
      unint64_t v3 = v90;
      goto LABEL_46;
    }

    unint64_t v52 = *(void *)(v103 + 8 * v51);
    ++v53;
    if (v52) {
      goto LABEL_32;
    }
  }

  __break(1u);
LABEL_73:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10005C7E0()
{
  uint64_t v127 = v1;
  uint64_t v128 = v2;
  sub_100006BEC(&qword_100087368);
  sub_10000C318();
  __chkstk_darwin(v3);
  sub_10000E5C4();
  uint64_t v121 = v4;
  sub_100006BEC(&qword_100088BD0);
  sub_10000C318();
  __chkstk_darwin(v5);
  sub_1000580BC();
  uint64_t v125 = v6;
  sub_10003F208();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v115 - v8;
  __chkstk_darwin(v10);
  sub_10003F220();
  uint64_t v123 = v11;
  sub_10003F208();
  __chkstk_darwin(v12);
  sub_10003F220();
  uint64_t v120 = v13;
  sub_10003F208();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v115 - v15;
  __chkstk_darwin(v17);
  sub_10003F220();
  uint64_t v119 = v18;
  sub_10003F208();
  __chkstk_darwin(v19);
  sub_10003F220();
  uint64_t v117 = v20;
  sub_10003F208();
  __chkstk_darwin(v21);
  sub_10003F220();
  uint64_t v116 = v22;
  sub_10003F208();
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v115 - v24;
  __chkstk_darwin(v26);
  unint64_t v28 = (char *)&v115 - v27;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v115 - v30;
  uint64_t v32 = sub_100006BEC(&qword_100087E58);
  uint64_t inited = swift_initStackObject(v32, &v126);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_10006A3E0;
  *(_BYTE *)(inited + 3sub_100006E64(v0 + 2) = 5;
  uint64_t v122 = type metadata accessor for ApiRequestMetrics(0LL);
  uint64_t v34 = v0;
  uint64_t v35 = v0 + *(int *)(v122 + 40);
  sub_100035EAC(v35, (uint64_t)v31, &qword_100088BD0);
  uint64_t v36 = type metadata accessor for Date(0LL);
  int v37 = sub_100061980((uint64_t)v31);
  uint64_t v124 = v9;
  uint64_t v118 = v35;
  if (v37 == 1)
  {
    sub_10000BBA4((uint64_t)v31, &qword_100088BD0);
    *(_OWORD *)(inited + 40) = 0u;
    *(_OWORD *)(inited + 5sub_100006E64(v0 + 6) = 0u;
  }

  else
  {
    sub_100052B9C();
    *(void *)(inited + 6sub_100006E64(v0 + 4) = &type metadata for UInt64;
    *(void *)(inited + 40) = v39;
    sub_10006177C((uint64_t)v31, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8LL));
  }

  uint64_t v40 = v34;
  uint64_t v41 = (int *)v122;
  *(_BYTE *)(inited + 7sub_100006E64(v0 + 2) = 6;
  uint64_t v42 = v40 + v41[15];
  sub_100061994(v42, v38, &qword_100088BD0);
  uint64_t v43 = sub_10006174C((uint64_t)v28);
  uint64_t v122 = v42;
  if (v44)
  {
    sub_10006199C(v43, &qword_100088BD0);
    sub_100061794();
  }

  else
  {
    sub_100052B9C();
    *(void *)(inited + 10sub_100006E64(v0 + 4) = &type metadata for UInt64;
    *(void *)(inited + 80) = v45;
    sub_10006177C((uint64_t)v28, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8LL));
  }

  uint64_t v46 = v121;
  *(_BYTE *)(inited + 1sub_100006E64(v0 + 12) = 25;
  sub_100035EAC(v40, (uint64_t)v25, &qword_100088BD0);
  uint64_t v47 = sub_10006174C((uint64_t)v25);
  if (v44)
  {
    sub_10006198C(v47, &qword_100088BD0);
    sub_100061794();
  }

  else
  {
    sub_100052B9C();
    *(void *)(inited + 14sub_100006E64(v0 + 4) = &type metadata for UInt64;
    *(void *)(inited + 120) = v48;
    sub_10006177C((uint64_t)v25, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8LL));
  }

  uint64_t v50 = v119;
  uint64_t v51 = v116;
  *(_BYTE *)(inited + 15sub_100006E64(v0 + 2) = 26;
  char v52 = *(_BYTE *)(v40 + v41[11]);
  *(void *)(inited + 18sub_100006E64(v0 + 4) = &type metadata for Bool;
  *(_BYTE *)(inited + 160) = v52;
  *(_BYTE *)(inited + 19sub_100006E64(v0 + 2) = 27;
  sub_1000618EC(v40 + v41[5], v49, &qword_100088BD0);
  sub_10006174C(v51);
  if (v44)
  {
    sub_10000BBA4(v51, &qword_100088BD0);
    sub_100061794();
  }

  else
  {
    sub_100052B9C();
    *(void *)(inited + 22sub_100006E64(v0 + 4) = &type metadata for UInt64;
    *(void *)(inited + 200) = v53;
    sub_100061768();
  }

  uint64_t v55 = v117;
  *(_BYTE *)(inited + 23sub_100006E64(v0 + 2) = 28;
  sub_1000618EC(v40 + v41[8], v54, &qword_100088BD0);
  sub_10006174C(v55);
  if (v44)
  {
    sub_10000BBA4(v55, &qword_100088BD0);
    sub_100061794();
  }

  else
  {
    sub_100052B9C();
    *(void *)(inited + 26sub_100006E64(v0 + 4) = &type metadata for UInt64;
    *(void *)(inited + 240) = v56;
    sub_100061768();
  }

  *(_BYTE *)(inited + 27sub_100006E64(v0 + 2) = 29;
  sub_100035EAC(v40 + v41[9], v50, &qword_100088BD0);
  uint64_t v57 = sub_10006174C(v50);
  if (v44)
  {
    sub_10006198C(v57, &qword_100088BD0);
    sub_100061794();
  }

  else
  {
    sub_100052B9C();
    *(void *)(inited + 30sub_100006E64(v0 + 4) = &type metadata for UInt64;
    *(void *)(inited + 280) = v58;
    sub_10006177C(v50, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8LL));
  }

  uint64_t v59 = v118;
  *(_BYTE *)(inited + 3sub_100006E64(v0 + 12) = 30;
  sub_100035EAC(v59, (uint64_t)v16, &qword_100088BD0);
  sub_10006174C((uint64_t)v16);
  if (v44)
  {
    sub_10000BBA4((uint64_t)v16, &qword_100088BD0);
    sub_100061794();
  }

  else
  {
    sub_100052B9C();
    *(void *)(inited + 34sub_100006E64(v0 + 4) = &type metadata for UInt64;
    *(void *)(inited + 320) = v60;
    sub_10006177C((uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8LL));
  }

  uint64_t v62 = v120;
  *(_BYTE *)(inited + 35sub_100006E64(v0 + 2) = 31;
  char v63 = (uint64_t *)(v40 + v41[12]);
  uint64_t v64 = v63[1];
  if (v64)
  {
    uint64_t v65 = *v63;
    unint64_t v66 = &type metadata for String;
    uint64_t v67 = v64;
  }

  else
  {
    sub_100061784();
    *(void *)(inited + 37sub_100006E64(v0 + 6) = 0LL;
  }

  *(void *)(inited + 360) = v65;
  *(void *)(inited + 36sub_100006E64(v0 + 8) = v67;
  *(void *)(inited + 38sub_100006E64(v0 + 4) = v66;
  *(_BYTE *)(inited + 39sub_100006E64(v0 + 2) = 32;
  uint64_t v68 = *(void *)(v40 + v41[6]);
  *(void *)(inited + 42sub_100006E64(v0 + 4) = &type metadata for Int64;
  *(void *)(inited + 400) = v68;
  *(_BYTE *)(inited + 43sub_100006E64(v0 + 2) = 33;
  sub_1000618EC(v40 + v41[13], v61, &qword_100088BD0);
  int v69 = sub_100061980(v62);
  swift_bridgeObjectRetain(v64);
  if (v69 == 1)
  {
    sub_10000BBA4(v62, &qword_100088BD0);
    *(_OWORD *)(inited + 440) = 0u;
    *(_OWORD *)(inited + 45sub_100006E64(v0 + 6) = 0u;
  }

  else
  {
    sub_100052B9C();
    *(void *)(inited + 46sub_100006E64(v0 + 4) = &type metadata for UInt64;
    *(void *)(inited + 440) = v71;
    sub_100061768();
  }

  *(_BYTE *)(inited + 47sub_100006E64(v0 + 2) = 4;
  sub_100061994(v40 + v41[14], v70, &qword_100087368);
  uint64_t v72 = type metadata accessor for URL(0LL);
  uint64_t v73 = sub_10000AB6C(v46, 1LL, v72);
  if ((_DWORD)v73 == 1)
  {
    sub_10006199C(v73, &qword_100087368);
    sub_100061794();
  }

  else
  {
    uint64_t v75 = URL.absoluteString.getter(v73);
    *(void *)(inited + 50sub_100006E64(v0 + 4) = &type metadata for String;
    *(void *)(inited + 480) = v75;
    *(void *)(inited + 48sub_100006E64(v0 + 8) = v76;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v72 - 8) + 8LL))(v46, v72);
  }

  uint64_t v78 = v123;
  uint64_t v77 = (uint64_t)v124;
  uint64_t v79 = v122;
  *(_BYTE *)(inited + 5sub_100006E64(v0 + 12) = 34;
  sub_100061994(v79, v74, &qword_100088BD0);
  uint64_t v80 = sub_10006174C(v78);
  if (v44)
  {
    sub_10006199C(v80, &qword_100088BD0);
    sub_100061794();
  }

  else
  {
    sub_100052B9C();
    *(void *)(inited + 54sub_100006E64(v0 + 4) = &type metadata for UInt64;
    *(void *)(inited + 520) = v81;
    sub_10006177C(v78, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8LL));
  }

  *(_BYTE *)(inited + 55sub_100006E64(v0 + 2) = 35;
  uint64_t v82 = *(void *)(v40 + v41[7]);
  *(void *)(inited + 58sub_100006E64(v0 + 4) = &type metadata for Int64;
  *(void *)(inited + 560) = v82;
  *(_BYTE *)(inited + 59sub_100006E64(v0 + 2) = 36;
  sub_100035EAC(v40 + v41[16], v77, &qword_100088BD0);
  sub_10006174C(v77);
  if (v44)
  {
    sub_10000BBA4(v77, &qword_100088BD0);
    sub_100061794();
  }

  else
  {
    sub_100052B9C();
    *(void *)(inited + 62sub_100006E64(v0 + 4) = &type metadata for UInt64;
    *(void *)(inited + 600) = v83;
    sub_10006177C(v77, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8LL));
  }

  *(_BYTE *)(inited + 63sub_100006E64(v0 + 2) = 37;
  uint64_t v85 = v125;
  sub_1000618EC(v40 + v41[17], v84, &qword_100088BD0);
  sub_10006174C(v85);
  if (v44)
  {
    sub_10000BBA4(v125, &qword_100088BD0);
    sub_100061794();
  }

  else
  {
    sub_100052B9C();
    *(void *)(inited + 66sub_100006E64(v0 + 4) = &type metadata for UInt64;
    *(void *)(inited + 640) = v86;
    sub_100061768();
  }

  *(_BYTE *)(inited + 67sub_100006E64(v0 + 2) = 38;
  uint64_t v87 = v40 + v41[18];
  if ((*(_BYTE *)(v87 + 8) & 1) != 0)
  {
    uint64_t v88 = 0LL;
    uint64_t v89 = 0LL;
    *(_OWORD *)(inited + 68sub_100006E64(v0 + 8) = 0u;
  }

  else
  {
    uint64_t v88 = *(void *)v87;
    uint64_t v89 = &type metadata for Int;
  }

  *(void *)(inited + 680) = v88;
  *(void *)(inited + 70sub_100006E64(v0 + 4) = v89;
  *(_BYTE *)(inited + 7sub_100006E64(v0 + 12) = 39;
  int64_t v90 = (uint64_t *)(v40 + v41[19]);
  uint64_t v91 = v90[1];
  if (v91)
  {
    uint64_t v92 = *v90;
    unint64_t v93 = &type metadata for String;
    uint64_t v94 = v91;
  }

  else
  {
    sub_100061784();
    *(void *)(inited + 73sub_100006E64(v0 + 6) = 0LL;
  }

  *(void *)(inited + 720) = v92;
  *(void *)(inited + 72sub_100006E64(v0 + 8) = v94;
  *(void *)(inited + 74sub_100006E64(v0 + 4) = v93;
  *(_BYTE *)(inited + 75sub_100006E64(v0 + 2) = 40;
  uint64_t v95 = (uint64_t *)(v40 + v41[20]);
  uint64_t v96 = v95[1];
  if (v96)
  {
    uint64_t v97 = *v95;
    uint64_t v98 = &type metadata for String;
    uint64_t v99 = v96;
  }

  else
  {
    sub_100061784();
    *(void *)(inited + 77sub_100006E64(v0 + 6) = 0LL;
  }

  *(void *)(inited + 760) = v97;
  *(void *)(inited + 76sub_100006E64(v0 + 8) = v99;
  *(void *)(inited + 78sub_100006E64(v0 + 4) = v98;
  *(_BYTE *)(inited + 79sub_100006E64(v0 + 2) = 41;
  uint64_t v100 = (uint64_t *)(v40 + v41[21]);
  uint64_t v101 = v100[1];
  if (v101)
  {
    uint64_t v102 = *v100;
    uint64_t v103 = &type metadata for String;
    uint64_t v104 = v101;
  }

  else
  {
    sub_100061784();
    *(void *)(inited + 81sub_100006E64(v0 + 6) = 0LL;
  }

  *(void *)(inited + 800) = v102;
  *(void *)(inited + 80sub_100006E64(v0 + 8) = v104;
  *(void *)(inited + 82sub_100006E64(v0 + 4) = v103;
  *(_BYTE *)(inited + 83sub_100006E64(v0 + 2) = 42;
  int64_t v105 = (uint64_t *)(v40 + v41[22]);
  uint64_t v106 = v105[1];
  if (v106)
  {
    uint64_t v107 = *v105;
    uint64_t v108 = &type metadata for String;
    uint64_t v109 = v106;
  }

  else
  {
    sub_100061784();
    *(void *)(inited + 85sub_100006E64(v0 + 6) = 0LL;
  }

  *(void *)(inited + 840) = v107;
  *(void *)(inited + 84sub_100006E64(v0 + 8) = v109;
  *(void *)(inited + 86sub_100006E64(v0 + 4) = v108;
  *(_BYTE *)(inited + 87sub_100006E64(v0 + 2) = 15;
  uint64_t v110 = (uint64_t *)(v40 + v41[23]);
  uint64_t v111 = v110[1];
  if (v111)
  {
    uint64_t v112 = *v110;
    uint64_t v113 = &type metadata for String;
  }

  else
  {
    uint64_t v112 = 0LL;
    uint64_t v113 = 0LL;
    *(void *)(inited + 89sub_100006E64(v0 + 6) = 0LL;
  }

  *(void *)(inited + 880) = v112;
  *(void *)(inited + 88sub_100006E64(v0 + 8) = v111;
  *(void *)(inited + 90sub_100006E64(v0 + 4) = v113;
  swift_bridgeObjectRetain(v106);
  sub_100019194();
  sub_10000C610();
  sub_10000C6A0();
  swift_bridgeObjectRetain(v101);
  sub_100006BEC(qword_100087690);
  sub_100061884();
  return sub_100061944(inited, (uint64_t)&type metadata for SportsMetricsKey);
}

uint64_t sub_10005D10C()
{
  uint64_t v0 = sub_100006BEC(&qword_100087E58);
  uint64_t v2 = sub_10006193C(v0, v1);
  *(_OWORD *)(v2 + 1sub_100006E64(v0 + 6) = xmmword_100067230;
  *(_BYTE *)(v2 + 3sub_100006E64(v0 + 2) = 38;
  type metadata accessor for AMSError(0LL);
  uint64_t v4 = v3;
  sub_10000BAA8(&qword_1000871C8, (uint64_t (*)(uint64_t))type metadata accessor for AMSError);
  uint64_t v6 = _BridgedStoredNSError.errorUserInfo.getter(v4, v5);
  sub_10003BD2C(0x7574617453534D41LL, 0xED000065646F4373LL, v6, (_OWORD *)(v2 + 40));
  sub_10001919C();
  sub_100006BEC(qword_100087690);
  sub_100021CD0();
  return Dictionary.init(dictionaryLiteral:)(v2, &type metadata for SportsMetricsKey);
}

uint64_t sub_10005D1FC(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v8 = a2;
  sub_1000603A8(a1, (uint64_t)sub_1000602F4, 0LL, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v2) {
    swift_bridgeObjectRelease(v6);
  }
  return v6;
}

void sub_10005D278()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_100006BEC(&qword_100087368);
  sub_10000C318();
  __chkstk_darwin(v5);
  sub_10003BC1C();
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100019488();
  uint64_t v10 = v9 - v8;
  sub_10003BEF0(43LL, v4, &v34);
  if (v35) {
    swift_dynamicCast(&v33, &v34, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
  }
  else {
    sub_10000BBA4((uint64_t)&v34, qword_100087690);
  }
  uint64_t v11 = sub_100006BEC(&qword_100087E58);
  uint64_t inited = swift_initStackObject(v11, &v37);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067B00;
  *(_BYTE *)(inited + 3sub_100006E64(v0 + 2) = 9;
  Date.init()(inited);
  sub_100052B9C();
  uint64_t v14 = v13;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  *(void *)(inited + 6sub_100006E64(v0 + 4) = &type metadata for UInt64;
  *(void *)(inited + 40) = v14;
  *(_BYTE *)(inited + 7sub_100006E64(v0 + 2) = 4;
  URLRequest.url.getter(v15);
  uint64_t v16 = type metadata accessor for URL(0LL);
  uint64_t v17 = sub_10000AB6C(v0, 1LL, v16);
  if ((_DWORD)v17 == 1)
  {
    sub_10006198C(v17, &qword_100087368);
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    *(void *)(inited + 9sub_100006E64(v0 + 6) = 0LL;
  }

  else
  {
    uint64_t v18 = URL.absoluteString.getter(v17);
    uint64_t v19 = v21;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v0, v16);
    uint64_t v20 = &type metadata for String;
  }

  *(void *)(inited + 80) = v18;
  *(void *)(inited + 8sub_100006E64(v0 + 8) = v19;
  *(void *)(inited + 10sub_100006E64(v0 + 4) = v20;
  *(_BYTE *)(inited + 1sub_100006E64(v0 + 12) = 39;
  uint64_t v22 = URLRequest.httpMethod.getter();
  if (v23)
  {
    uint64_t v24 = &type metadata for String;
  }

  else
  {
    uint64_t v22 = 0LL;
    uint64_t v24 = 0LL;
    *(void *)(inited + 13sub_100006E64(v0 + 6) = 0LL;
  }

  *(void *)(inited + 120) = v22;
  *(void *)(inited + 12sub_100006E64(v0 + 8) = v23;
  *(void *)(inited + 14sub_100006E64(v0 + 4) = v24;
  sub_100006BEC(qword_100087690);
  sub_100061884();
  uint64_t v25 = sub_100061958(inited, (uint64_t)&type metadata for SportsMetricsKey);
  sub_10005D578(v4);
  uint64_t v27 = sub_10005D1FC(v26, v25);
  uint64_t v28 = sub_10001991C();
  uint64_t v29 = sub_10005D1FC(v28, v27);
  sub_100035EAC(v2, (uint64_t)&v34, (uint64_t *)&unk_100088BA0);
  uint64_t v30 = v35;
  if (v35)
  {
    uint64_t v31 = v36;
    sub_100006C2C(&v34, v35);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, v31);
    sub_100006E64(&v34);
  }

  else
  {
    sub_10000BBA4((uint64_t)&v34, (uint64_t *)&unk_100088BA0);
    uint64_t v32 = sub_100061958((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for SportsMetricsKey);
  }

  sub_10005D1FC(v32, v29);
  sub_10000C248();
}

void sub_10005D578(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100006BEC(&qword_100089FD8);
    uint64_t v3 = (_BYTE *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v31 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v30 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = v3 + 64;
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  int64_t v8 = 0LL;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    unsigned __int8 v15 = *(_BYTE *)(*(void *)(a1 + 48) + v10);
    sub_100018C20(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v39 + 8);
    LOBYTE(v39[0]) = v15;
    v37[0] = v39[0];
    v37[1] = v39[1];
    uint64_t v38 = v40;
    v35[0] = v15;
    sub_10000AC00((_OWORD *)((char *)v37 + 8), v34);
    uint64_t v16 = sub_100006BEC(qword_100087690);
    swift_dynamicCast(v36, v34, (char *)&type metadata for Any + 8, v16, 7LL);
    unsigned __int8 v17 = v35[0];
    sub_100035ED8((uint64_t)v36, (uint64_t)v33, qword_100087690);
    sub_100035ED8((uint64_t)v33, (uint64_t)v35, qword_100087690);
    sub_100035ED8((uint64_t)v35, (uint64_t)v34, qword_100087690);
    Hasher.init(_seed:)(&v32);
    uint64_t v18 = sub_100050BB0(v17);
    uint64_t v20 = v19;
    String.hash(into:)(&v32, v18, v19);
    swift_bridgeObjectRelease(v20);
    Swift::Int v21 = Hasher._finalize()();
    uint64_t v22 = -1LL << v3[32];
    unint64_t v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)&v7[8 * (v23 >> 6)]) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)&v7[8 * v24];
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_34;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)&v7[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
    *(void *)&v7[(v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v25;
    *(_BYTE *)(*((void *)v3 + 6) + v2sub_100006E64(v0 + 5) = v17;
    sub_100035ED8((uint64_t)v34, *((void *)v3 + 7) + 32 * v25, qword_100087690);
    ++*((void *)v3 + 2);
    if (v6) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      goto LABEL_38;
    }
    if (v11 >= v30) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v31 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v30) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v31 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v30) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v31 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v30) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v31 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }

void sub_10005D94C()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v29 = *(void *)(v0 - 8);
  sub_10000C318();
  __chkstk_darwin(v1);
  sub_100019488();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  sub_10000C318();
  __chkstk_darwin(v6);
  sub_100019488();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for DispatchTime(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v26 - v15;
  uint64_t v17 = sub_10001906C(0LL, &qword_100087C30, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v18 = (void *)static OS_dispatch_queue.main.getter(v17);
  static DispatchTime.now()();
  + infix(_:_:)(v13, 2.0);
  char v26 = *(void (**)(char *, uint64_t))(v11 + 8);
  v26(v13, v10);
  uint64_t v19 = swift_allocObject(&unk_100082030, 24LL, 7LL);
  swift_weakInit(v19 + 16);
  v30[4] = sub_10005FBE4;
  uint64_t v31 = v19;
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 1107296256LL;
  v30[2] = sub_10005DBBC;
  v30[3] = &unk_100082048;
  uint64_t v20 = _Block_copy(v30);
  uint64_t v21 = swift_release(v31);
  static DispatchQoS.unspecified.getter(v21);
  v30[0] = _swiftEmptyArrayStorage;
  sub_10000BAA8(&qword_100089F70, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v23 = v22;
  uint64_t v24 = sub_100006BEC(&qword_100089F78);
  sub_10000C04C(&qword_100089F80, &qword_100089F78);
  dispatch thunk of SetAlgebra.init<A>(_:)(v30, v24, v25, v0, v23);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v16, v9, v4, v20);
  _Block_release(v20);

  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v4, v0);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v9, v28);
  v26(v16, v10);
  sub_10000C248();
}

uint64_t sub_10005DBBC(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

id sub_10005DBE8(uint64_t a1, uint64_t a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v7 = [(id)swift_getObjCClassFromMetadata(v3) keyWithName:v6 crossDeviceSync:a3 & 1];

  return v7;
}

unint64_t sub_10005DC50(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007E818, v2);
  sub_10001919C();
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10005DC94(char a1)
{
  return *(void *)&aRegistraunregi[8 * a1];
}

void sub_10005DCB4(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_10005DCC0()
{
}

uint64_t sub_10005DCC8(uint64_t a1)
{
  return sub_100041C4C(a1, *v1);
}

void sub_10005DCD0(uint64_t a1)
{
}

unint64_t sub_10005DCD8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10005DC50(*a1);
  *a2 = result;
  return result;
}

void sub_10005DD04(uint64_t *a1@<X8>)
{
  *a1 = sub_10005DC94(*v1);
  a1[1] = v3;
  sub_10000C510();
}

void sub_10005DD28()
{
  uint64_t v0 = type metadata accessor for SportsPerformanceMeasurement(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  qword_10008F3F8 = (uint64_t)sub_10005DD60();
  sub_10000C510();
}

void *sub_10005DD60()
{
  uint64_t v103 = *v0;
  uint64_t v1 = type metadata accessor for MetricsPipeline(0LL);
  uint64_t v100 = *(void *)(v1 - 8);
  uint64_t v101 = v1;
  __chkstk_darwin(v1);
  uint64_t v99 = (char *)&v85 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v97 = type metadata accessor for MetricsFieldExclusionRequest(0LL);
  uint64_t v96 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v95 = (char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = type metadata accessor for MetricsFieldsAggregator(0LL);
  uint64_t v92 = *(void *)(v98 - 8);
  uint64_t v4 = __chkstk_darwin(v98);
  uint64_t v91 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  unint64_t v93 = (char *)&v85 - v6;
  uint64_t v107 = type metadata accessor for MetricsPipeline.Configuration(0LL);
  uint64_t v94 = *(void *)(v107 - 8);
  uint64_t v7 = __chkstk_darwin(v107);
  uint64_t v89 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  int64_t v90 = (char *)&v85 - v10;
  __chkstk_darwin(v9);
  uint64_t v102 = (char *)&v85 - v11;
  uint64_t v12 = sub_100006BEC(&qword_100089F88);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for AMSMetricsIdentifierFieldsProvider(0LL);
  uint64_t v108 = *(void *)(v15 - 8);
  uint64_t v109 = v15;
  __chkstk_darwin(v15);
  uint64_t v106 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Bag(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v85 - v22;
  uint64_t v24 = OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_dataRepository;
  if (qword_100087090 != -1) {
    swift_once(&qword_100087090, sub_100029864);
  }
  uint64_t v25 = qword_10008F290;
  *(void *)((char *)v0 + v2sub_100006E64(v0 + 4) = qword_10008F290;
  char v26 = (void *)((char *)v0 + OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_environmentDataCenter);
  *char v26 = 0LL;
  v26[1] = 0LL;
  uint64_t v27 = qword_100087080;
  swift_retain(v25);
  int64_t v105 = v0;
  if (v27 != -1) {
    swift_once(&qword_100087080, sub_100024D08);
  }
  Bag.init(from:)(*(id *)(qword_10008F280 + 16));
  uint64_t v28 = sub_100006BEC(&qword_100089F90);
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v29(v21, v23, v17);
  uint64_t v104 = LowMemoryMetricsEventLinter.__allocating_init(defaultTopic:bag:rules:)( 0xD000000000000012LL,  0x800000010006A790LL,  v21,  _swiftEmptyArrayStorage);
  id v30 = [objc_allocWithZone(ACAccountStore) init];
  uint64_t v88 = v18;
  id v31 = v30;
  uint64_t v112 = sub_10001906C(0LL, &qword_100089F98, &OBJC_CLASS___ACAccountStore_ptr);
  uint64_t v113 = &protocol witness table for ACAccountStore;
  v111[0] = v31;
  uint64_t v32 = (uint64_t)v23;
  v29(v14, v23, v17);
  sub_10000AB60((uint64_t)v14, 0LL, 1LL, v17);
  uint64_t v33 = sub_100006BEC(qword_100089A50);
  uint64_t v34 = swift_allocObject(v33, 40LL, 7LL);
  *(_OWORD *)(v34 + 1sub_100006E64(v0 + 6) = xmmword_10006A3F0;
  sub_10001906C(0LL, &qword_100089FA0, &OBJC_CLASS___AMSMetricsIdentifierKey_ptr);
  *(void *)(v34 + 3sub_100006E64(v0 + 2) = sub_10005DBE8(0x6449746E65696C63LL, 0xE800000000000000LL, 0);
  uint64_t v110 = v34;
  specialized Array._endMutation()();
  uint64_t v35 = v110;
  id v36 = [(id)objc_opt_self(AMSProcessInfo) currentProcess];
  static AMSMetricsIdentifierFieldsProvider.metricsResetInterval.getter();
  uint64_t v37 = v106;
  AMSMetricsIdentifierFieldsProvider.init(accountProvider:process:bag:shouldMigrate:resetInterval:keys:activeITunesAccountRequired:)( v111,  v36,  v14,  0LL,  v35,  0LL);
  uint64_t v38 = type metadata accessor for AMSMetricsEventRecorder(0LL);
  uint64_t v86 = v32;
  uint64_t v39 = v17;
  uint64_t v87 = v17;
  v29(v21, (char *)v32, v17);
  Swift::Int v40 = sub_100060F64((uint64_t)&off_10007DFD0);
  uint64_t v41 = AMSMetricsEventRecorder.__allocating_init(bag:defaultTopic:anonymousTopics:)( v21,  0xD000000000000012LL,  0x800000010006A790LL,  v40);
  uint64_t v42 = OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_eventRecorder;
  uint64_t v43 = v105;
  *(void *)((char *)v105 + OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_eventRecorder) = v41;
  char v44 = v43;
  v29(v21, (char *)v32, v39);
  uint64_t v112 = v28;
  sub_10000C04C(&qword_100089FA8, &qword_100089F90);
  uint64_t v113 = v45;
  v111[0] = v104;
  swift_retain(v104);
  Swift::Int v46 = sub_100060F64((uint64_t)&off_10007E000);
  uint64_t v47 = v89;
  MetricsPipeline.Configuration.init(bag:linter:anonymousTopics:)(v21, v111, v46);
  uint64_t v48 = *(void *)((char *)v44 + v42);
  uint64_t v112 = v38;
  uint64_t v113 = &protocol witness table for AMSMetricsEventRecorder;
  v111[0] = v48;
  swift_retain(v48);
  uint64_t v49 = v90;
  MetricsPipeline.Configuration.withRecorder(_:)(v111);
  uint64_t v50 = v94;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v94 + 8);
  uint64_t v52 = v107;
  v51(v47, v107);
  uint64_t v85 = v51;
  uint64_t v53 = sub_100006E64(v111);
  uint64_t v54 = v91;
  MetricsFieldsAggregator.init()(v53);
  uint64_t v55 = v109;
  uint64_t v112 = v109;
  uint64_t v113 = &protocol witness table for AMSMetricsIdentifierFieldsProvider;
  uint64_t v56 = sub_100023D5C(v111);
  uint64_t v57 = (*(uint64_t (**)(void *, char *, uint64_t))(v108 + 16))(v56, v37, v55);
  uint64_t v58 = v95;
  static MetricsFieldExclusionRequest.amsMetricsID.getter(v57);
  uint64_t v59 = v93;
  MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)(v111, v58);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v58, v97);
  uint64_t v60 = *(void (**)(char *, uint64_t))(v92 + 8);
  uint64_t v61 = v98;
  v60(v54, v98);
  sub_100006E64(v111);
  uint64_t v62 = v102;
  MetricsPipeline.Configuration.withAggregator(_:)(v59);
  v60(v59, v61);
  v51(v49, v52);
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v49, v62, v52);
  char v63 = v99;
  MetricsPipeline.init(from:)(v49);
  (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))( (uint64_t)v44 + OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_metricsPipeline,  v63,  v101);
  uint64_t v64 = v86;
  id v65 = sub_10005E5E8(v86, 0xD000000000000017LL, (void *)0x800000010006C980LL);
  char v67 = v66;
  double v68 = COERCE_DOUBLE(sub_10005E5E8(v64, 0x446E6F6973736573LL, (void *)0xEF6E6F6974617275LL));
  char v70 = v69;
  double v71 = COERCE_DOUBLE(sub_10005E5E8(v64, 0xD000000000000028LL, (void *)0x800000010006C9A0LL));
  char v73 = v72;
  double v74 = COERCE_DOUBLE(sub_10005E5E8(v64, 0xD000000000000020LL, (void *)0x800000010006C9D0LL));
  if ((v75 & 1) != 0) {
    double v76 = 60.0;
  }
  else {
    double v76 = v74 / 1000.0;
  }
  if ((v73 & 1) != 0) {
    double v77 = 1.0;
  }
  else {
    double v77 = v71;
  }
  double v78 = v68 / 1000.0;
  if ((v70 & 1) != 0) {
    double v78 = 60.0;
  }
  double v79 = *(double *)&v65;
  if ((v67 & 1) != 0) {
    double v79 = 1.0;
  }
  uint64_t v80 = v104;
  uint64_t v81 = v105;
  uint64_t v82 = (double *)((char *)v105 + OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_loadUrlLottery);
  *uint64_t v82 = v79;
  v82[1] = v78;
  __int128 v82[2] = 1.26591641e-306;
  v82[3] = -1.39234638e188;
  swift_release(v80);
  v85(v62, v107);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v106, v109);
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v64, v87);
  unint64_t result = v81;
  uint64_t v84 = (uint64_t)v81 + OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_notificationLottery;
  *(double *)uint64_t v84 = v77;
  *(double *)(v84 + sub_100006E64(v0 + 8) = v76;
  *(void *)(v84 + 1sub_100006E64(v0 + 6) = 0xD000000000000011LL;
  *(void *)(v84 + 2sub_100006E64(v0 + 4) = 0x800000010006CA00LL;
  return result;
}

id sub_10005E5E8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)Bag.amsBag.getter();
  _StringGuts.grow(_:)(41LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  unint64_t v29 = 0x800000010006CA20LL;
  v6._uint64_t countAndFlagsBits = a2;
  v6._object = a3;
  String.append(_:)(v6);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x800000010006CA20LL);
  id v8 = [v5 doubleForKey:v7];

  swift_unknownObjectRelease(v5);
  id v28 = 0LL;
  id v9 = [v8 valueWithError:&v28];

  id v10 = v28;
  if (v9)
  {
    id v28 = 0LL;
    LOBYTE(v2sub_100006E64(v0 + 9) = 1;
    id v11 = v10;
    static Double._conditionallyBridgeFromObjectiveC(_:result:)(v9, &v28);

    id v12 = v28;
    int v13 = v29;
  }

  else
  {
    id v14 = v28;
    uint64_t v15 = _convertNSErrorToError(_:)(v10);

    swift_willThrow();
    swift_errorRelease(v15);
    id v12 = 0LL;
    int v13 = 1;
  }

  uint64_t v16 = (void *)Bag.amsBag.getter();
  id v28 = 0LL;
  unint64_t v29 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease(v29);
  id v28 = (id)0xD000000000000014LL;
  unint64_t v29 = 0x800000010006CA50LL;
  v17._uint64_t countAndFlagsBits = a2;
  v17._object = a3;
  String.append(_:)(v17);
  unint64_t v18 = v29;
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  id v20 = [v16 doubleForKey:v19];

  swift_unknownObjectRelease(v16);
  id v28 = 0LL;
  id v21 = [v20 valueWithError:&v28];

  id v22 = v28;
  if (v21)
  {
    id v28 = 0LL;
    LOBYTE(v2sub_100006E64(v0 + 9) = 1;
    id v23 = v22;
    static Double._conditionallyBridgeFromObjectiveC(_:result:)(v21, &v28);

    id v24 = v28;
  }

  else
  {
    id v25 = v28;
    uint64_t v26 = _convertNSErrorToError(_:)(v22);

    swift_willThrow();
    swift_errorRelease(v26);
    id v24 = 0LL;
  }

  if (v13) {
    return v24;
  }
  else {
    return v12;
  }
}

void sub_10005E8A8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Sport(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  id v10 = (char *)&v99 - v9;
  uint64_t v11 = *(void *)a1;
  if (*(void *)(*(void *)a1 + 16LL))
  {
    unint64_t v12 = sub_100016048(2LL);
    if ((v13 & 1) != 0)
    {
      sub_100035EAC(*(void *)(v11 + 56) + 32 * v12, (uint64_t)v108, qword_100087690);
      sub_100035ED8((uint64_t)v108, (uint64_t)&v110, qword_100087690);
      if (!v113)
      {
        sub_10000BBA4((uint64_t)&v110, qword_100087690);
        return;
      }

      if ((swift_dynamicCast(v107, &v110, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
      {
        uint64_t v14 = v107[0];
        uint64_t v15 = v107[1];
        uint64_t v16 = *(void **)(v2 + OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_dataRepository);
        uint64_t v17 = *(unsigned __int8 *)(a1 + 9);
        uint64_t v18 = v16[5];
        uint64_t v19 = v16[6];
        sub_100006C2C(v16 + 2, v18);
        id v20 = (void *)dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)( v14,  v15,  v17,  v18,  v19);
        uint64_t v21 = swift_bridgeObjectRelease(v15);
        if (v20)
        {
          uint64_t v22 = SportingEventSubscription.qosRegistrationId.getter(v21);
          if (v23)
          {
            uint64_t v113 = (uint64_t)&type metadata for String;
            uint64_t v110 = (void *)v22;
            uint64_t v111 = v23;
          }

          else
          {
            uint64_t v110 = 0LL;
            uint64_t v111 = 0LL;
            uint64_t v112 = 0LL;
            uint64_t v113 = 1LL;
          }

          sub_10005B7EC((uint64_t)&v110, 20LL);
          id v24 = (void *)((uint64_t (*)(void))SportingEventSubscription.sportingEventDetails.getter)();
          id v25 = (void *)dispatch thunk of SportingEvent.coverage.getter();

          if (v25
            && (uint64_t v26 = (void *)dispatch thunk of SportingEventCoverage.ingestion.getter(), v25, v26)
            && (double v27 = COERCE_DOUBLE(dispatch thunk of SportingEventCoverageIngestion.last.getter()),
                char v29 = v28,
                v26,
                (v29 & 1) == 0))
          {
            unint64_t v30 = sub_100052BF8(v27);
            uint64_t v109 = &type metadata for UInt64;
            v108[0] = v30;
            sub_100035ED8((uint64_t)v108, (uint64_t)&v110, qword_100087690);
          }

          else
          {
            uint64_t v113 = (uint64_t)&type metadata for Int;
            uint64_t v110 = 0LL;
          }

          sub_10005B7EC((uint64_t)&v110, 14LL);
          uint64_t v31 = SportingEventSubscription.applicationType.getter();
          if (v32)
          {
            uint64_t v113 = (uint64_t)&type metadata for String;
            uint64_t v110 = (void *)v31;
            uint64_t v111 = v32;
          }

          else
          {
            uint64_t v110 = 0LL;
            uint64_t v111 = 0LL;
            uint64_t v112 = 0LL;
            uint64_t v113 = 1LL;
          }

          sub_10005B7EC((uint64_t)&v110, 21LL);
          uint64_t v33 = SportingEventSubscription.clientApp.getter();
          uint64_t v113 = (uint64_t)&type metadata for String;
          uint64_t v110 = (void *)v33;
          uint64_t v111 = v34;
          sub_10005B7EC((uint64_t)&v110, 1LL);
          uint64_t v35 = SportingEventSubscription.sport.getter();
          Sport.init(rawValue:)(v35);
          (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for Sport.baseball(_:), v4);
          char v36 = sub_100041A20((uint64_t)v10, (uint64_t)v8);
          uint64_t v37 = *(void (**)(char *, uint64_t))(v5 + 8);
          v37(v8, v4);
          v37(v10, v4);
          if ((v36 & 1) == 0) {
            goto LABEL_31;
          }
          sub_10003BD68(44LL, *(void *)a1, v108);
          if (v109 == (void *)1)
          {
            uint64_t v38 = &qword_100089FC0;
            uint64_t v39 = (void **)v108;
LABEL_30:
            sub_10000BBA4((uint64_t)v39, v38);
            goto LABEL_31;
          }

          sub_100035ED8((uint64_t)v108, (uint64_t)&v110, qword_100087690);
          if (!v113)
          {
            uint64_t v38 = qword_100087690;
            uint64_t v39 = &v110;
            goto LABEL_30;
          }

          if ((swift_dynamicCast( v107,  &v110,  (char *)&type metadata for Any + 8,  &type metadata for EventType.EventName,  6LL) & 1) != 0)
          {
            uint64_t v40 = sub_10005DC94(v107[0]);
            uint64_t v42 = v41;
            if (v40 == 0x4D7370416C6C7566LL && v41 == 0xEE00656761737365LL)
            {
              uint64_t v45 = swift_bridgeObjectRelease(v41);
              goto LABEL_34;
            }

            char v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, 0x4D7370416C6C7566LL, 0xEE00656761737365LL, 0LL);
            uint64_t v45 = swift_bridgeObjectRelease(v42);
            if ((v44 & 1) != 0)
            {
LABEL_34:
              Swift::Int v46 = (void *)SportingEventSubscription.sportingEventDetails.getter(v45);
              int64_t v47 = dispatch thunk of SportingEvent.competitors.getter();

              uint64_t v48 = *(void *)((v47 & 0xFFFFFFFFFFFFF8LL) + 0x10);
              swift_bridgeObjectRetain(v47);
LABEL_36:
              if (!v48)
              {
                uint64_t v106 = _swiftEmptyArrayStorage;
LABEL_93:
                swift_bridgeObjectRelease_n(v47, 2LL);
                int64_t v90 = v106;
                uint64_t v110 = v106;
                uint64_t v91 = sub_100006BEC(&qword_100087B00);
                sub_10000C04C((unint64_t *)&qword_100087B08, &qword_100087B00);
                uint64_t v93 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v91, v92);
                unint64_t v95 = v94;
                swift_bridgeObjectRelease(v90);
                uint64_t v96 = HIBYTE(v95) & 0xF;
                if ((v95 & 0x2000000000000000LL) == 0) {
                  uint64_t v96 = v93 & 0xFFFFFFFFFFFFLL;
                }
                if (!v96)
                {

                  swift_bridgeObjectRelease(v95);
                  return;
                }

                uint64_t v97 = sub_100021BD8(v93, (void *)v95);
                swift_bridgeObjectRelease(v95);
                sub_100060320(v97, (uint64_t)sub_1000602F4, 0LL, (void *)a1);
                goto LABEL_31;
              }

              uint64_t v49 = 0LL;
              uint64_t v102 = v20;
              unint64_t v103 = v47 & 0xC000000000000001LL;
              int64_t v99 = v47 + 32;
              uint64_t v100 = v48;
              uint64_t v106 = _swiftEmptyArrayStorage;
              int64_t v101 = v47;
              while (1)
              {
                if (v103) {
                  id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v49, v47);
                }
                else {
                  id v50 = *(id *)(v99 + 8 * v49);
                }
                if (__OFADD__(v49++, 1LL))
                {
                  __break(1u);
LABEL_99:
                  __break(1u);
LABEL_100:
                  __break(1u);
LABEL_101:
                  if (v47 < 0) {
                    uint64_t v98 = v47;
                  }
                  else {
                    uint64_t v98 = v47 & 0xFFFFFFFFFFFFFF8LL;
                  }
                  swift_bridgeObjectRetain_n(v47, 2LL);
                  uint64_t v48 = _CocoaArrayWrapper.endIndex.getter(v98);
                  swift_bridgeObjectRelease(v47);
                  goto LABEL_36;
                }

                uint64_t v52 = v50;
                uint64_t v53 = (void *)SportingEventCompetitorContainer.competitor.getter();
                uint64_t v54 = dispatch thunk of SportingEventCompetitor.members.getter();

                if (v54) {
                  break;
                }

                id v20 = v102;
LABEL_90:
                if (v49 == v48) {
                  goto LABEL_93;
                }
              }

              id v104 = v52;
              uint64_t v105 = v49;
              uint64_t v110 = _swiftEmptyArrayStorage;
              if ((unint64_t)v54 >> 62)
              {
                if (v54 >= 0) {
                  uint64_t v66 = v54 & 0xFFFFFFFFFFFFFF8LL;
                }
                else {
                  uint64_t v66 = v54;
                }
                swift_bridgeObjectRetain(v54);
                uint64_t v55 = _CocoaArrayWrapper.endIndex.getter(v66);
                swift_bridgeObjectRelease(v54);
                if (v55) {
                  goto LABEL_45;
                }
              }

              else
              {
                uint64_t v55 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
                if (v55)
                {
LABEL_45:
                  if (v55 < 1) {
                    goto LABEL_99;
                  }
                  uint64_t v56 = 0LL;
                  int64_t v47 = v54 & 0xC000000000000001LL;
                  do
                  {
                    if (v47) {
                      id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v56, v54);
                    }
                    else {
                      id v57 = *(id *)(v54 + 8 * v56 + 32);
                    }
                    uint64_t v58 = v57;
                    uint64_t v59 = dispatch thunk of SportingEventParticipant.images.getter();
                    if (!v59) {
                      goto LABEL_54;
                    }
                    uint64_t v60 = v59;
                    if ((unint64_t)v59 >> 62)
                    {
                      if (v59 >= 0) {
                        v59 &= 0xFFFFFFFFFFFFFF8uLL;
                      }
                      uint64_t v61 = _CocoaArrayWrapper.endIndex.getter(v59);
                    }

                    else
                    {
                      uint64_t v61 = *(void *)((v59 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
                    }

                    uint64_t v62 = swift_bridgeObjectRelease(v60);
                    if (!v61)
                    {
                      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v62);
                      uint64_t v63 = v110[2];
                      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v63);
                      uint64_t v64 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v58);
                      specialized ContiguousArray._endMutation()(v64);
                    }

                    else
                    {
LABEL_54:
                    }

                    ++v56;
                  }

                  while (v55 != v56);
                  swift_bridgeObjectRelease(v54);
                  unint64_t v65 = (unint64_t)v110;
LABEL_67:
                  if ((v65 & 0x8000000000000000LL) != 0 || (v65 & 0x4000000000000000LL) != 0)
                  {
                    uint64_t v79 = swift_retain(v65);
                    uint64_t v67 = _CocoaArrayWrapper.endIndex.getter(v79);
                    if (v67) {
                      goto LABEL_70;
                    }
                  }

                  else
                  {
                    uint64_t v67 = *(void *)(v65 + 16);
                    swift_retain(v65);
                    if (v67)
                    {
LABEL_70:
                      if (v67 < 1) {
                        goto LABEL_100;
                      }
                      uint64_t v68 = 0LL;
                      char v69 = _swiftEmptyArrayStorage;
                      do
                      {
                        if ((v65 & 0xC000000000000001LL) != 0) {
                          id v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v68, v65);
                        }
                        else {
                          id v70 = *(id *)(v65 + 8 * v68 + 32);
                        }
                        double v71 = v70;
                        uint64_t v72 = dispatch thunk of SportingEventParticipant.displayName.getter();
                        uint64_t v74 = v73;

                        if (v74)
                        {
                          if ((swift_isUniquelyReferenced_nonNull_native(v69) & 1) == 0)
                          {
                            sub_100014C54();
                            char v69 = v77;
                          }

                          unint64_t v75 = v69[2];
                          if (v75 >= v69[3] >> 1)
                          {
                            sub_100014C54();
                            char v69 = v78;
                          }

                          v69[2] = v75 + 1;
                          double v76 = &v69[2 * v75];
                          v76[4] = v72;
                          v76[5] = v74;
                        }

                        ++v68;
                      }

                      while (v67 != v68);
                      goto LABEL_85;
                    }
                  }

                  char v69 = _swiftEmptyArrayStorage;
LABEL_85:
                  swift_release_n(v65, 2LL);
                  uint64_t v110 = v69;
                  uint64_t v80 = sub_100006BEC(&qword_100087B00);
                  sub_10000C04C((unint64_t *)&qword_100087B08, &qword_100087B00);
                  uint64_t v82 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v80, v81);
                  uint64_t v84 = v83;

                  swift_bridgeObjectRelease(v69);
                  if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) == 0)
                  {
                    sub_100014C54();
                    uint64_t v106 = v88;
                  }

                  int64_t v47 = v101;
                  id v20 = v102;
                  uint64_t v48 = v100;
                  unint64_t v85 = v106[2];
                  if (v85 >= v106[3] >> 1)
                  {
                    sub_100014C54();
                    uint64_t v106 = v89;
                  }

                  uint64_t v86 = v106;
                  v106[2] = v85 + 1;
                  uint64_t v87 = &v86[2 * v85];
                  v87[4] = v82;
                  v87[5] = v84;
                  uint64_t v49 = v105;
                  goto LABEL_90;
                }
              }

              swift_bridgeObjectRelease(v54);
              unint64_t v65 = (unint64_t)_swiftEmptyArrayStorage;
              goto LABEL_67;
            }
          }

LABEL_31:
        }
      }
    }
  }

uint64_t sub_10005F168(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if ((a2 & 1) != 0)
  {
    if (*(void *)(a1 + 16) && (unint64_t v8 = sub_100016048(2LL), (v9 & 1) != 0))
    {
      sub_100035EAC(*(void *)(a1 + 56) + 32 * v8, (uint64_t)&v13, qword_100087690);
      sub_10000BBA4((uint64_t)&v13, &qword_100089FC0);
    }

    else
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      uint64_t v16 = 1LL;
      sub_10000BBA4((uint64_t)&v13, &qword_100089FC0);
      sub_10003BD68(22LL, a1, &v13);
      uint64_t v10 = v16;
      sub_10000BBA4((uint64_t)&v13, &qword_100089FC0);
      if (v10 == 1) {
        goto LABEL_10;
      }
    }

    uint64_t v7 = OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_notificationLottery;
    goto LABEL_12;
  }

  if (*(void *)(a1 + 16))
  {
    unint64_t v5 = sub_100016048(4LL);
    if ((v6 & 1) != 0)
    {
      sub_100035EAC(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v13, qword_100087690);
      sub_10000BBA4((uint64_t)&v13, &qword_100089FC0);
      uint64_t v7 = OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_loadUrlLottery;
LABEL_12:
      char v11 = sub_10005F4EC( *(void *)(v3 + v7 + 16),  *(void *)(v3 + v7 + 24),  *(double *)(v3 + v7),  *(double *)(v3 + v7 + 8));
      return v11 & 1;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v16 = 1LL;
  sub_10000BBA4((uint64_t)&v13, &qword_100089FC0);
LABEL_10:
  char v11 = 0;
  return v11 & 1;
}

void sub_10005F2B0(uint64_t a1)
{
  if (qword_1000870F0 != -1) {
    swift_once(&qword_1000870F0, sub_10004BF00);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000B928(v2, (uint64_t)qword_10008F330);
  swift_errorRetain(a1);
  uint64_t v3 = swift_errorRetain(a1);
  os_log_type_t oslog = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    char v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v5 = 138412290;
    swift_errorRetain(a1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v5 + 4, v5 + 12);
    *char v6 = v7;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "SportsPerformanceMeasurement: error: %@", v5, 0xCu);
    sub_100006BEC(&qword_100088A48);
    swift_arrayDestroy(v6, 1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

uint64_t sub_10005F470(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_eventRecorder);
    swift_retain(v4);
    uint64_t v5 = swift_release(v3);
    uint64_t v6 = AMSMetricsEventRecorder.flush()(v5);
    swift_release(v4);
    return swift_release(v6);
  }

  return result;
}

uint64_t sub_10005F4EC(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = sub_100006BEC(&qword_100088BD0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v28 - v12;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  id v20 = (char *)&v28 - v19;
  if (a3 <= 0.0) {
    return 0LL;
  }
  if (a3 >= 1.0) {
    return 1LL;
  }
  sub_10005FFAC(a1, a2, (uint64_t)v13, a4);
  if (sub_10000AB6C((uint64_t)v13, 1LL, v14) != 1)
  {
    uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
    Date.init()(v22);
    char v23 = static Date.< infix(_:_:)(v17, v20);
    id v24 = *(void (**)(char *, uint64_t))(v15 + 8);
    v24(v17, v14);
    v24(v20, v14);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
    return 1LL;
  }

  sub_10000BBA4((uint64_t)v13, &qword_100088BD0);
LABEL_8:
  sub_100061108(0.0, 1.0);
  uint64_t v21 = 0LL;
  if ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFLL) != 0 && v26 <= a3)
  {
    Date.init()(v25);
    uint64_t v21 = 1LL;
    sub_10000AB60((uint64_t)v10, 0LL, 1LL, v14);
    sub_10005FE08((uint64_t)v10, a1, a2);
  }

  return v21;
}

void sub_10005F6F4()
{
  uint64_t v1 = type metadata accessor for MetricsPipeline(0LL);
  sub_10000C5B0(v1);
  sub_1000618F4(OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_loadUrlLottery);
  sub_1000618F4(OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_notificationLottery);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_dataRepository));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC7sportsd28SportsPerformanceMeasurement_eventRecorder));
  swift_bridgeObjectRelease();
  sub_10000C510();
}

uint64_t sub_10005F770()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10005F794()
{
  uint64_t v0 = sub_100006BEC(&qword_100087E58);
  uint64_t v2 = sub_10006193C(v0, v1);
  *(_OWORD *)(v2 + 1sub_100006E64(v0 + 6) = xmmword_100067B00;
  *(_BYTE *)(v2 + 3sub_100006E64(v0 + 2) = 22;
  id v3 = sub_100061900(v2, "code");
  uint64_t v4 = sub_100061964((uint64_t)v3, (uint64_t)&type metadata for Int);
  id v5 = sub_100061900(v4, "domain");
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  *(void *)(v2 + 10sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(v2 + 80) = v6;
  *(void *)(v2 + 8sub_100006E64(v0 + 8) = v8;
  *(_BYTE *)(v2 + 1sub_100006E64(v0 + 12) = 24;
  id v10 = sub_100061900(v9, "localizedDescription");
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  *(void *)(v2 + 14sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(v2 + 120) = v11;
  *(void *)(v2 + 12sub_100006E64(v0 + 8) = v13;
  sub_100006BEC(qword_100087690);
  sub_100061884();
  return sub_100061944(v2, (uint64_t)&type metadata for SportsMetricsKey);
}

uint64_t sub_10005F898()
{
  return sub_10005F794();
}

uint64_t sub_10005F8B8()
{
  uint64_t v0 = sub_100006BEC(&qword_100087E58);
  uint64_t v2 = sub_10006193C(v0, v1);
  *(_OWORD *)(v2 + 1sub_100006E64(v0 + 6) = xmmword_100067B00;
  *(_BYTE *)(v2 + 3sub_100006E64(v0 + 2) = 22;
  uint64_t v3 = CloudChannelError.errorCode.getter();
  uint64_t v4 = sub_100061964(v3, (uint64_t)&type metadata for Int);
  uint64_t v5 = static CloudChannelError.errorDomain.getter(v4);
  *(void *)(v2 + 10sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(v2 + 80) = v5;
  *(void *)(v2 + 8sub_100006E64(v0 + 8) = v6;
  *(_BYTE *)(v2 + 1sub_100006E64(v0 + 12) = 24;
  uint64_t v7 = CloudChannelError.errorUserInfo.getter();
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  sub_10003BD2C(v8, v9, v7, (_OWORD *)(v2 + 120));
  sub_10001987C();
  sub_100019278();
  sub_100006BEC(qword_100087690);
  sub_100061884();
  return sub_100061944(v2, (uint64_t)&type metadata for SportsMetricsKey);
}

uint64_t sub_10005F994()
{
  return sub_10005D10C();
}

uint64_t sub_10005F99C()
{
  return type metadata accessor for SportsPerformanceMeasurement(0LL);
}

uint64_t type metadata accessor for SportsPerformanceMeasurement(uint64_t a1)
{
  uint64_t result = qword_100089EC0;
  if (!qword_100089EC0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SportsPerformanceMeasurement);
  }
  return result;
}

uint64_t sub_10005F9DC(uint64_t a1)
{
  uint64_t result = type metadata accessor for MetricsPipeline(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = " ";
    void v4[2] = " ";
    void v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[5] = &unk_10006A4C8;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t destroy for MetricsSamplingLottery(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for MetricsSamplingLottery(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 1sub_100006E64(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100006E64(v0 + 4) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for MetricsSamplingLottery(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v3 = a2[3];
  uint64_t v4 = a1[3];
  a1[3] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for MetricsSamplingLottery(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 1sub_100006E64(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100006E64(v0 + 4) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsSamplingLottery(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(vsub_100006E64(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100006E64(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_100006E64(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsSamplingLottery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 1sub_100006E64(v0 + 6) = 0LL;
    *(void *)(result + 2sub_100006E64(v0 + 4) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + sub_100006E64(v0 + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 3sub_100006E64(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_100006E64(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 3sub_100006E64(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MetricsSamplingLottery()
{
  return &type metadata for MetricsSamplingLottery;
}

uint64_t sub_10005FBC0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10005FBE4()
{
  return sub_10005F470(v0);
}

uint64_t sub_10005FBEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005FBFC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10005FC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v6 = a3;
  uint64_t v7 = a4;
  swift_bridgeObjectRetain(a4);
  uint64_t v6 = String.init<A>(_:)( &v6,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v7 = v4;
  String.append<A>(contentsOf:)(v8, &type metadata for String, &protocol witness table for String);
  return v6;
}

uint64_t sub_10005FC80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v6 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  swift_bridgeObjectRetain(a2);
  sub_10005FC04(a1, a2, 0xD000000000000028LL, 0x800000010006CA70LL);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease(a2);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  id v10 = [v6 objectForKey:v9];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)(v10);
    swift_unknownObjectRelease(v10);
  }

  else
  {
    memset(v15, 0, sizeof(v15));
  }

  sub_100035ED8((uint64_t)v15, (uint64_t)v16, qword_100087690);
  if (!v17)
  {
    sub_10000BBA4((uint64_t)v16, qword_100087690);
    goto LABEL_8;
  }

  if ((swift_dynamicCast(&v14, v16, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) == 0)
  {
LABEL_8:
    uint64_t v11 = 1LL;
    goto LABEL_9;
  }

  Date.init(timeIntervalSinceReferenceDate:)(v14);
  uint64_t v11 = 0LL;
LABEL_9:
  uint64_t v12 = type metadata accessor for Date(0LL);
  return sub_10000AB60(a3, v11, 1LL, v12);
}

void sub_10005FE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100006BEC(&qword_100088BD0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  sub_100035EAC(a1, (uint64_t)v8, &qword_100088BD0);
  uint64_t v10 = type metadata accessor for Date(0LL);
  if (sub_10000AB6C((uint64_t)v8, 1LL, v10) == 1)
  {
    sub_10000BBA4((uint64_t)v8, &qword_100088BD0);
    uint64_t v11 = 0LL;
  }

  else
  {
    double v16 = Date.timeIntervalSinceReferenceDate.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v8, v10);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)(&v16, &type metadata for Double);
  }

  swift_bridgeObjectRetain(a3);
  sub_10005FC04(a2, a3, 0xD000000000000028LL, 0x800000010006CA70LL);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease(a3);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  [v9 setObject:v11 forKey:v14];

  swift_unknownObjectRelease(v11);
  sub_10000BBA4(a1, &qword_100088BD0);
}

uint64_t sub_10005FFAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D1>)
{
  uint64_t v8 = sub_100006BEC(&qword_100088BD0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  NSString v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10005FC80(a1, a2, (uint64_t)v10);
  if (sub_10000AB6C((uint64_t)v10, 1LL, v11) == 1)
  {
    sub_10000BBA4((uint64_t)v10, &qword_100088BD0);
    uint64_t v15 = 1LL;
  }

  else
  {
    uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    Date.addingTimeInterval(_:)(v16, a4);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v15 = 0LL;
  }

  return sub_10000AB60(a3, v15, 1LL, v11);
}

uint64_t sub_1000600FC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100016048(a1);
  LOBYTE(aHasher._combine(_:)(v1 & 1) = v8;
  uint64_t result = swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v16 = *v3;
    uint64_t v11 = *v3;
    void *v3 = 0x8000000000000000LL;
    Swift::Int v12 = *(void *)(v11 + 24);
    sub_100006BEC(&qword_100088BD8);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    sub_100035ED8(*(void *)(v16 + 56) + 32 * v7, (uint64_t)a2, qword_100087690);
    uint64_t v13 = sub_100006BEC(qword_100087690);
    unint64_t v14 = sub_100021CD0();
    _NativeDictionary._delete(at:)(v7, v16, &type metadata for SportsMetricsKey, v13, v14);
    uint64_t v15 = *v3;
    void *v3 = v16;
    return swift_bridgeObjectRelease(v15);
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
    a2[3] = 1LL;
  }

  return result;
}

uint64_t sub_10006020C(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  sub_100060DB0(a1, a2, isUniquelyReferenced_nonNull_native);
  uint64_t v6 = *v2;
  *uint64_t v2 = v8;
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100060278(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a4;
  a1[1] = a5;
  swift_bridgeObjectRetain(a3);
  sub_10001991C();
  return a2;
}

uint64_t sub_1000602BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2;
}

void sub_1000602F4(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = sub_1000602BC((uint64_t)(a2 + 8), *a1, (uint64_t)(a1 + 8));
  sub_10000C510();
}

uint64_t sub_100060320(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
  uint64_t v11 = *a4;
  *a4 = 0x8000000000000000LL;
  sub_1000603A8(a1, a2, a3, isUniquelyReferenced_nonNull_native, (uint64_t)&v11);
  uint64_t v9 = *a4;
  *a4 = v11;
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_1000603A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v8 = a1;
  sub_100061210(a1, a2, a3, v51);
  sub_10000C610();
  uint64_t v9 = swift_retain(a3);
  sub_100061924(v9, v10, v11, v12, v13, v14, v15, v16, v39, a3, v8, v43, v44, v45, v46);
  if (v50 == 1)
  {
LABEL_14:
    swift_release(v41);
    swift_bridgeObjectRelease(v42);
    sub_100018C5C(v51[0]);
    return swift_release(v51[6]);
  }

  while (1)
  {
    char v17 = v48[32];
    sub_100035ED8((uint64_t)&v49, (uint64_t)v48, qword_100087690);
    unint64_t v18 = sub_100061910();
    sub_1000618BC();
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      break;
    }
    char v23 = v19;
    if (*(void *)(v8 + 24) >= v22)
    {
      if ((a4 & 1) != 0)
      {
        if ((v19 & 1) != 0) {
          goto LABEL_9;
        }
      }

      else
      {
        sub_100006BEC(&qword_100088BD8);
        uint64_t v8 = a5;
        _NativeDictionary.copy()();
        if ((v23 & 1) != 0) {
          goto LABEL_9;
        }
      }
    }

    else
    {
      uint64_t v8 = a5;
      sub_10006083C(v22, a4 & 1);
      unint64_t v24 = sub_100061910();
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_17;
      }
      unint64_t v18 = v24;
      if ((v23 & 1) != 0)
      {
LABEL_9:
        sub_100035EAC(*(void *)(*(void *)a5 + 56LL) + 32 * v18, (uint64_t)&v43, qword_100087690);
        sub_100035EAC((uint64_t)&v43, (uint64_t)v47, qword_100087690);
        sub_10000BBA4((uint64_t)&v43, qword_100087690);
        sub_10000BBA4((uint64_t)v48, qword_100087690);
        uint64_t v26 = sub_10003EF0C((uint64_t)v47, *(void *)(*(void *)a5 + 56LL) + 32 * v18);
        goto LABEL_13;
      }
    }

    uint64_t v34 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v18 >> 6) + 64) |= 1LL << v18;
    *(_BYTE *)(v34[6] + v1sub_100006E64(v0 + 8) = v17;
    sub_100035ED8((uint64_t)v48, v34[7] + 32 * v18, qword_100087690);
    uint64_t v35 = v34[2];
    BOOL v36 = __OFADD__(v35, 1LL);
    uint64_t v37 = v35 + 1;
    if (v36) {
      goto LABEL_16;
    }
    _OWORD v34[2] = v37;
LABEL_13:
    sub_100061924(v26, v27, v28, v29, v30, v31, v32, v33, v40, v41, v42, v43, v44, v45, v46);
    a4 = 1;
    if (v50 == 1) {
      goto LABEL_14;
    }
  }

  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SportsMetricsKey);
  __break(1u);
  return result;
}

void sub_1000605B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  sub_100061858();
  sub_100006BEC(&qword_100089FE0);
  char v44 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)(v3, v2, a2);
  if (!v3[2]) {
    goto LABEL_39;
  }
  sub_1000617A8();
  uint64_t v43 = v9;
  if (v7 < 64) {
    uint64_t v10 = ~(-1LL << v7);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & v8;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  sub_100061908();
  int64_t v13 = 0LL;
  if (!v11) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = v21 + (v13 << 6))
  {
    uint64_t v22 = (uint64_t *)(v3[6] + 16 * i);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    char v25 = (uint64_t *)(v3[7] + 16 * i);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRetain(v22[1]);
      swift_bridgeObjectRetain(v27);
    }

    Hasher.init(_seed:)(v45);
    String.hash(into:)(v45, v24, v23);
    unint64_t v28 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v6 + 32));
    if (((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) == 0)
    {
      sub_100061804();
      while (++v30 != v31 || (v29 & 1) == 0)
      {
        BOOL v32 = v30 == v31;
        if (v30 == v31) {
          uint64_t v30 = 0LL;
        }
        v29 |= v32;
        if (*(void *)(v12 + 8 * v30) != -1LL)
        {
          sub_1000617F0();
          goto LABEL_30;
        }
      }

      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return;
    }

    sub_100061818();
LABEL_30:
    sub_1000617DC();
    *(void *)(v12 + v33) |= v34;
    BOOL v36 = (void *)(*(void *)(v6 + 48) + 16 * v35);
    *BOOL v36 = v24;
    v36[1] = v23;
    uint64_t v37 = (void *)(*(void *)(v6 + 56) + 16 * v35);
    *uint64_t v37 = v26;
    v37[1] = v27;
    sub_1000618AC();
    if (v11) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_41;
    }
    if (v16 >= v42)
    {
      sub_1000617A0();
      uint64_t v4 = v41;
      char v17 = v43;
      goto LABEL_34;
    }

    char v17 = v43;
    ++v13;
    if (!v43[v16])
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v42) {
        goto LABEL_32;
      }
      if (!v43[v13]) {
        break;
      }
    }

void sub_10006083C(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  sub_100061858();
  sub_100006BEC(&qword_100089FD8);
  uint64_t v6 = sub_100061840();
  if (v3[2])
  {
    int64_t v42 = v2;
    sub_1000617A8();
    char v44 = v9;
    if (v7 < 64) {
      uint64_t v10 = ~(-1LL << v7);
    }
    else {
      uint64_t v10 = -1LL;
    }
    uint64_t v11 = v10 & v8;
    int64_t v43 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v6 + 64;
    sub_100061908();
    int64_t v13 = 0LL;
    if (!v11) {
      goto LABEL_7;
    }
LABEL_6:
    sub_1000619A4();
    for (int64_t i = v14 | (v13 << 6); ; int64_t i = v20 + (v13 << 6))
    {
      unsigned __int8 v21 = *(_BYTE *)(v3[6] + i);
      uint64_t v22 = v3[7] + 32 * i;
      if ((a2 & 1) != 0) {
        sub_100035ED8(v22, (uint64_t)v45, qword_100087690);
      }
      else {
        sub_100035EAC(v22, (uint64_t)v45, qword_100087690);
      }
      sub_100061930(v23, v24, v25, v42);
      uint64_t v26 = sub_100050BB0(v21);
      sub_10006186C(v26, v27, v28, v29, v30);
      sub_100019278();
      unint64_t v31 = sub_100061978() & ~(-1LL << *(_BYTE *)(v6 + 32));
      if (((-1LL << v31) & ~*(void *)(v12 + 8 * (v31 >> 6))) == 0)
      {
        sub_100061804();
        while (++v33 != v34 || (v32 & 1) == 0)
        {
          BOOL v35 = v33 == v34;
          if (v33 == v34) {
            uint64_t v33 = 0LL;
          }
          v32 |= v35;
          if (*(void *)(v12 + 8 * v33) != -1LL)
          {
            sub_1000617F0();
            goto LABEL_31;
          }
        }

        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }

      sub_100061818();
LABEL_31:
      sub_1000617DC();
      *(void *)(v12 + v36) |= v37;
      *(_BYTE *)(*(void *)(v6 + 48) + v3sub_100006E64(v0 + 8) = v21;
      sub_100035ED8((uint64_t)v45, *(void *)(v6 + 56) + 32 * v38, qword_100087690);
      sub_1000618AC();
      if (v11) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_40;
      }
      if (v16 >= v43) {
        goto LABEL_33;
      }
      ++v13;
      if (!v44[v16])
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v43) {
          goto LABEL_33;
        }
        if (!v44[v13])
        {
          int64_t v17 = v16 + 2;
          if (v17 >= v43)
          {
LABEL_33:
            sub_1000617A0();
            uint64_t v4 = v42;
            if ((a2 & 1) != 0)
            {
              sub_10006182C();
              if (v40 != v41) {
                void *v44 = -1LL << v39;
              }
              else {
                sub_100052454(0LL, (unint64_t)(v39 + 63) >> 6, v44);
              }
              v3[2] = 0LL;
            }

            break;
          }

          if (!v44[v17])
          {
            while (1)
            {
              int64_t v13 = v17 + 1;
              if (__OFADD__(v17, 1LL)) {
                goto LABEL_41;
              }
              if (v13 >= v43) {
                goto LABEL_33;
              }
              ++v17;
              if (v44[v13]) {
                goto LABEL_18;
              }
            }
          }

          int64_t v13 = v17;
        }
      }

void sub_100060A7C(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  sub_100061858();
  sub_100006BEC(&qword_100089FE8);
  uint64_t v6 = sub_100061840();
  if (v3[2])
  {
    sub_1000617A8();
    char v44 = v2;
    uint64_t v45 = v9;
    if (v7 < 64) {
      uint64_t v10 = ~(-1LL << v7);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & v8;
    int64_t v12 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    sub_100061908();
    int64_t v14 = 0LL;
    if (!v11) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = v22 + (v14 << 6))
    {
      unsigned __int8 v23 = *(_BYTE *)(v3[6] + i);
      uint64_t v24 = (_OWORD *)(v3[7] + 32 * i);
      if ((a2 & 1) != 0) {
        uint64_t v25 = (uint64_t)sub_10000AC00(v24, v46);
      }
      else {
        uint64_t v25 = sub_100018C20((uint64_t)v24, (uint64_t)v46);
      }
      sub_100061930(v25, v26, v27);
      uint64_t v28 = sub_100050BB0(v23);
      sub_10006186C(v28, v29, v30, v31, v32);
      sub_100019278();
      unint64_t v33 = sub_100061978() & ~(-1LL << *(_BYTE *)(v6 + 32));
      if (((-1LL << v33) & ~*(void *)(v13 + 8 * (v33 >> 6))) == 0)
      {
        sub_100061804();
        while (++v35 != v36 || (v34 & 1) == 0)
        {
          BOOL v37 = v35 == v36;
          if (v35 == v36) {
            uint64_t v35 = 0LL;
          }
          v34 |= v37;
          if (*(void *)(v13 + 8 * v35) != -1LL)
          {
            sub_1000617F0();
            goto LABEL_31;
          }
        }

        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return;
      }

      sub_100061818();
LABEL_31:
      sub_1000617DC();
      *(void *)(v13 + v38) |= v39;
      *(_BYTE *)(*(void *)(v6 + 48) + v40) = v23;
      sub_10000AC00(v46, (_OWORD *)(*(void *)(v6 + 56) + 32 * v40));
      sub_1000618AC();
      if (v11) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_42;
      }
      if (v17 >= v12) {
        break;
      }
      uint64_t v18 = v45;
      ++v14;
      if (!v45[v17])
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v12) {
          goto LABEL_33;
        }
        if (!v45[v14])
        {
          int64_t v19 = v17 + 2;
          if (v19 >= v12)
          {
LABEL_33:
            sub_1000617A0();
            uint64_t v4 = v44;
            if ((a2 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_36;
          }

          if (!v45[v19])
          {
            while (1)
            {
              int64_t v14 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_43;
              }
              if (v14 >= v12) {
                goto LABEL_33;
              }
              ++v19;
              if (v45[v14]) {
                goto LABEL_18;
              }
            }
          }

          int64_t v14 = v19;
        }
      }

void sub_100060CA8()
{
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  sub_100015FF4(v6, v4);
  sub_1000618BC();
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v17 = v12;
  char v18 = v13;
  sub_100006BEC(&qword_100089008);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v16)) {
    goto LABEL_5;
  }
  unint64_t v19 = sub_100015FF4(v7, v5);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v17 = v19;
LABEL_5:
  uint64_t v21 = *v1;
  if ((v18 & 1) != 0)
  {
    uint64_t v22 = (uint64_t *)(v21[7] + 16 * v17);
    swift_bridgeObjectRelease(v22[1]);
    *uint64_t v22 = v11;
    v22[1] = v9;
    sub_10000C248();
  }

  else
  {
    sub_100060EA8(v17, v7, v5, v11, v9, v21);
    swift_bridgeObjectRetain(v5);
  }

void sub_100060DB0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_100016048(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  sub_100006BEC(&qword_100088BD8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_100016048(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SportsMetricsKey);
    __break(1u);
    return;
  }

  unint64_t v14 = v16;
LABEL_5:
  char v18 = *v4;
  if ((v15 & 1) != 0) {
    sub_10003EF0C(a1, v18[7] + 32 * v14);
  }
  else {
    sub_100060EF4(v14, a2, a1, v18);
  }
}

unint64_t sub_100060EA8( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

void sub_100060EF4(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(_BYTE *)(a4[6] + aHasher._combine(_:)(v1 & 1) = a2;
  sub_100035ED8(a3, a4[7] + 32 * a1, qword_100087690);
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
}

Swift::Int sub_100060F64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
    goto LABEL_25;
  }

  sub_100006BEC(&qword_100087B20);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v2);
  uint64_t v4 = (_BYTE *)result;
  uint64_t v27 = *(void *)(a1 + 16);
  if (!v27)
  {
LABEL_25:
    sub_10001919C();
    return (Swift::Int)v4;
  }

  unint64_t v5 = 0LL;
  Swift::Int v6 = result + 56;
  while (v5 < *(void *)(a1 + 16))
  {
    uint64_t v7 = (uint64_t *)(a1 + 32 + 16 * v5);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    Hasher.init(_seed:)(v28);
    sub_100019734();
    String.hash(into:)(v28, v9, v8);
    Swift::Int result = sub_100061978();
    uint64_t v10 = -1LL << v4[32];
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
    uint64_t v14 = 1LL << v11;
    if (((1LL << v11) & v13) != 0)
    {
      uint64_t v15 = *((void *)v4 + 6);
      unint64_t v16 = (uint64_t *)(v15 + 16 * v11);
      uint64_t v17 = v16[1];
      BOOL v18 = *v16 == v9 && v17 == v8;
      if (v18 || (Swift::Int result = sub_100019648(*v16, v17), (result & 1) != 0))
      {
LABEL_11:
        Swift::Int result = sub_10001987C();
        goto LABEL_22;
      }

      uint64_t v19 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v19;
        unint64_t v12 = v11 >> 6;
        uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
        uint64_t v14 = 1LL << v11;
        if ((v13 & (1LL << v11)) == 0) {
          break;
        }
        char v20 = (uint64_t *)(v15 + 16 * v11);
        uint64_t v21 = v20[1];
        if (*v20 != v9 || v21 != v8)
        {
          Swift::Int result = sub_100019648(*v20, v21);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_11;
      }
    }

    *(void *)(v6 + 8 * vsub_100006E64(v0 + 12) = v14 | v13;
    unsigned __int8 v23 = (void *)(*((void *)v4 + 6) + 16 * v11);
    *unsigned __int8 v23 = v9;
    v23[1] = v8;
    uint64_t v24 = *((void *)v4 + 2);
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_27;
    }
    *((void *)v4 + sub_100006E64(v0 + 2) = v26;
LABEL_22:
    if (++v5 == v27) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_100061108(double a1, double a2)
{
  if ((~COERCE__INT64(a2 - a1) & 0x7FF0000000000000LL) != 0) {
    sub_100061184(0x20000000000001uLL);
  }
  else {
    __break(1u);
  }
}

unint64_t sub_100061184(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v3 = 0LL;
    swift_stdlib_random(&v3, 8LL);
    Swift::Int result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          unint64_t v3 = 0LL;
          swift_stdlib_random(&v3, 8LL);
        }

        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100061210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v8 = -1LL;
  }
  a4[3] = 0LL;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_10006124C()
{
  void (*v13)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  void v22[4];
  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = (uint64_t *)(*(void *)(v1 + 56) + 16 * v6);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v13 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v22[0] = v8;
    v22[1] = v9;
    v22[2] = v11;
    v22[3] = v12;
    sub_10001991C();
    sub_100019194();
    v13(&v21, v22);
    sub_100019180();
    sub_10001919C();
    return v21;
  }

  uint64_t v15 = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
    __break(1u);
  }

  else
  {
    unint64_t v16 = (unint64_t)(v0[2] + 64) >> 6;
    if (v15 < v16)
    {
      uint64_t v17 = v0[1];
      BOOL v18 = *(void *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_7:
        uint64_t v5 = (v18 - 1) & v18;
        unint64_t v6 = __clz(__rbit64(v18)) + (v15 << 6);
        int64_t v4 = v15;
        goto LABEL_3;
      }

      uint64_t v19 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v16)
      {
        BOOL v18 = *(void *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_10:
          uint64_t v15 = v19;
          goto LABEL_7;
        }

        int64_t v4 = v3 + 2;
        if (v3 + 3 < v16)
        {
          BOOL v18 = *(void *)(v17 + 8 * (v3 + 3));
          if (v18)
          {
            uint64_t v15 = v3 + 3;
            goto LABEL_7;
          }

          uint64_t v19 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v16)
          {
            BOOL v18 = *(void *)(v17 + 8 * v19);
            if (v18) {
              goto LABEL_10;
            }
            uint64_t v15 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v16)
            {
              BOOL v18 = *(void *)(v17 + 8 * v15);
              if (v18) {
                goto LABEL_7;
              }
              int64_t v4 = v16 - 1;
              char v20 = v3 + 6;
              while (v20 < v16)
              {
                BOOL v18 = *(void *)(v17 + 8 * v20++);
                if (v18)
                {
                  uint64_t v15 = v20 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    uint64_t result = 0LL;
    v0[3] = v4;
    v0[4] = 0LL;
  }

  return result;
}

void sub_1000613D4(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    char v11 = *(_BYTE *)(*(void *)(v3 + 48) + v10);
    sub_100035EAC(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v22 + 8, qword_100087690);
    LOBYTE(v22[0]) = v11;
    goto LABEL_23;
  }

  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return;
  }

  int64_t v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    unint64_t v14 = *(void *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v10 = __clz(__rbit64(v14)) + (v12 << 6);
      int64_t v7 = v12;
      goto LABEL_3;
    }

    int64_t v15 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      unint64_t v14 = *(void *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        int64_t v12 = v15;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        unint64_t v14 = *(void *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          int64_t v12 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v15 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          unint64_t v14 = *(void *)(v4 + 8 * v15);
          if (v14) {
            goto LABEL_10;
          }
          int64_t v12 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            unint64_t v14 = *(void *)(v4 + 8 * v12);
            if (v14) {
              goto LABEL_7;
            }
            int64_t v7 = v13 - 1;
            int64_t v16 = v5 + 6;
            while (v16 < v13)
            {
              unint64_t v14 = *(void *)(v4 + 8 * v16++);
              if (v14)
              {
                int64_t v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  memset(v22, 0, sizeof(v22));
  uint64_t v23 = 1LL;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v17 = (void (*)(_OWORD *))v1[5];
  sub_100035ED8((uint64_t)v22, (uint64_t)v20, &qword_100089FC8);
  if (v21 == 1)
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 1sub_100006E64(v0 + 6) = 0u;
    *(void *)(a1 + 3sub_100006E64(v0 + 2) = 1LL;
  }

  else
  {
    v18[0] = v20[0];
    v18[1] = v20[1];
    uint64_t v19 = v21;
    v17(v18);
    sub_10000BBA4((uint64_t)v18, &qword_100088458);
  }

uint64_t getEnumTagSinglePayload for EventType.EventName(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for EventType.EventName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(vsub_100006E64(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100006E64(v0 + 4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10006168C + 4 * byte_10006A405[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000616C0 + 4 * byte_10006A400[v4]))();
}

uint64_t sub_1000616C0(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000616C8(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000616D0LL);
  }
  return result;
}

uint64_t sub_1000616DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000616E4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000616E8(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000616F0(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventType.EventName()
{
  return &type metadata for EventType.EventName;
}

unint64_t sub_100061710()
{
  unint64_t result = qword_100089FF0;
  if (!qword_100089FF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10006A5A4, &type metadata for EventType.EventName);
    atomic_store(result, (unint64_t *)&qword_100089FF0);
  }

  return result;
}

uint64_t sub_10006174C(uint64_t a1)
{
  return sub_10000AB6C(a1, 1LL, v1);
}

uint64_t sub_100061768()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t sub_10006177C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

  ;
}

double sub_100061794()
{
  double result = 0.0;
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t sub_1000617A0()
{
  return swift_release(v0);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100061840()
{
  return static _DictionaryStorage.resize(original:capacity:move:)(v1, v0, v2);
}

  ;
}

uint64_t sub_10006186C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return String.hash(into:)(va, a1, a2);
}

unint64_t sub_100061884()
{
  return sub_100021CD0();
}

uint64_t sub_10006188C@<X0>(uint64_t a1@<X8>)
{
  return sub_100052454(0LL, (unint64_t)(a1 + 63) >> 6, v1);
}

void sub_1000618A0()
{
}

void sub_1000618AC()
{
}

  ;
}

unint64_t sub_1000618CC()
{
  return sub_100015FF4(v1, v0);
}

  ;
}

void sub_1000618EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1000618F4@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 24));
}

id sub_100061900(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_100061908()
{
  return swift_retain(v0);
}

unint64_t sub_100061910()
{
  return sub_100016048(v0);
}

void sub_10006191C(uint64_t a1)
{
}

void sub_100061924( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void *sub_100061930(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_10006193C(uint64_t a1, uint64_t a2, ...)
{
  return swift_initStackObject(a1, va);
}

uint64_t sub_100061944(uint64_t a1, uint64_t a2)
{
  return Dictionary.init(dictionaryLiteral:)(a1, a2);
}

uint64_t sub_10006194C(uint64_t a1, uint64_t a2)
{
  return Dictionary.init(dictionaryLiteral:)(a1, a2);
}

uint64_t sub_100061958(uint64_t a1, uint64_t a2)
{
  return Dictionary.init(dictionaryLiteral:)(a1, a2);
}

uint64_t sub_100061964@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 6sub_100006E64(v0 + 4) = a2;
  *(void *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 7sub_100006E64(v0 + 2) = 23;
  return result;
}

Swift::Int sub_100061978()
{
  return Hasher._finalize()();
}

uint64_t sub_100061980(uint64_t a1)
{
  return sub_10000AB6C(a1, 1LL, v1);
}

void sub_10006198C(uint64_t a1, uint64_t *a2)
{
}

void sub_100061994(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_10006199C(uint64_t a1, uint64_t *a2)
{
}

  ;
}

uint64_t sub_1000619B8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v28 = a7;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  BOOL v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)a8 = a1;
  *(void *)(a8 + sub_100006E64(v0 + 8) = a2;
  sub_10000B388(a3, a8 + 16);
  *(void *)(a8 + 5sub_100006E64(v0 + 6) = a4;
  *(void *)(a8 + 6sub_100006E64(v0 + 4) = a5;
  *(_BYTE *)(a8 + 7sub_100006E64(v0 + 2) = a6;
  uint64_t v19 = sub_100063D5C();
  uint64_t v20 = a8 + *(int *)(v19 + 36);
  uint64_t v21 = sub_100063D3C();
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32LL))(v20, v28, v21);
  uint64_t v23 = *(int *)(v19 + 40);
  Date.init()(v22);
  sub_100052B9C();
  uint64_t v25 = v24;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  *(void *)(a8 + v23) = v25;
  return result;
}

uint64_t type metadata accessor for SubscriptionRefreshOperation(uint64_t a1)
{
  uint64_t result = qword_10008A050;
  if (!qword_10008A050) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SubscriptionRefreshOperation);
  }
  return result;
}

uint64_t sub_100061AF8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain(v5);
  }

  else
  {
    uint64_t v8 = a2[1];
    *(void *)(a1 + sub_100006E64(v0 + 8) = v8;
    uint64_t v9 = a2 + 2;
    __int128 v10 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 40) = v10;
    uint64_t v11 = v10;
    int64_t v12 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v10 - 8);
    swift_retain(v5);
    swift_retain(v8);
    v12(a1 + 16, v9, v11);
    uint64_t v13 = a2[8];
    *(void *)(a1 + 5sub_100006E64(v0 + 6) = a2[7];
    *(void *)(a1 + 6sub_100006E64(v0 + 4) = v13;
    *(_BYTE *)(a1 + 7sub_100006E64(v0 + 2) = *((_BYTE *)a2 + 72);
    uint64_t v14 = *(int *)(a3 + 36);
    uint64_t v15 = a1 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    uint64_t refreshed = type metadata accessor for SportsManager.RefreshOptions(0LL);
    BOOL v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(refreshed - 8) + 16LL);
    swift_bridgeObjectRetain(v13);
    v18(v15, v16, refreshed);
    *(void *)(a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 40)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 40));
  }

  return a1;
}

uint64_t sub_100061BF8(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 36);
  uint64_t refreshed = type metadata accessor for SportsManager.RefreshOptions(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(refreshed - 8) + 8LL))(v4, refreshed);
}

uint64_t sub_100061C58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + sub_100006E64(v0 + 8) = v7;
  uint64_t v8 = a2 + 2;
  __int128 v9 = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 40) = v9;
  uint64_t v10 = v9;
  uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
  swift_retain(v6);
  swift_retain(v7);
  v11(a1 + 16, v8, v10);
  uint64_t v12 = a2[8];
  *(void *)(a1 + 5sub_100006E64(v0 + 6) = a2[7];
  *(void *)(a1 + 6sub_100006E64(v0 + 4) = v12;
  *(_BYTE *)(a1 + 7sub_100006E64(v0 + 2) = *((_BYTE *)a2 + 72);
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t)a2 + v13;
  uint64_t refreshed = type metadata accessor for SportsManager.RefreshOptions(0LL);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(refreshed - 8) + 16LL);
  swift_bridgeObjectRetain(v12);
  v17(v14, v15, refreshed);
  *(void *)(a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 40)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t *sub_100061D2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  uint64_t v8 = a2[1];
  uint64_t v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  sub_10000B504(a1 + 2, a2 + 2);
  a1[7] = a2[7];
  uint64_t v10 = a2[8];
  a1[8] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + 7sub_100006E64(v0 + 2) = *((_BYTE *)a2 + 72);
  uint64_t v11 = *(int *)(a3 + 36);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  uint64_t refreshed = type metadata accessor for SportsManager.RefreshOptions(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(refreshed - 8) + 24LL))(v12, v13, refreshed);
  *(uint64_t *)((char *)a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 40)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_100061E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_100006E64(v0 + 6) = v6;
  *(_OWORD *)(a1 + 3sub_100006E64(v0 + 2) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4sub_100006E64(v0 + 8) = *(void *)(a2 + 48);
  __int128 v7 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 7sub_100006E64(v0 + 2) = *(_BYTE *)(a2 + 72);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + 5sub_100006E64(v0 + 6) = v7;
  uint64_t refreshed = type metadata accessor for SportsManager.RefreshOptions(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(refreshed - 8) + 32LL))(v9, v10, refreshed);
  *(void *)(a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 40)) = *(void *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t *sub_100061E98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  uint64_t v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  sub_100006E64(a1 + 2);
  __int128 v8 = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + Hasher._combine(_:)(v1 & 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + sub_100006E64(v0 + 2) = v8;
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + 7sub_100006E64(v0 + 2) = *((_BYTE *)a2 + 72);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = (uint64_t)a1 + v9;
  uint64_t v11 = (uint64_t)a2 + v9;
  uint64_t refreshed = type metadata accessor for SportsManager.RefreshOptions(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(refreshed - 8) + 40LL))(v10, v11, refreshed);
  *(uint64_t *)((char *)a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 40)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_100061F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100061F64);
}

uint64_t sub_100061F64(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100063D3C();
    return sub_10000AB6C((uint64_t)a1 + *(int *)(a3 + 36), a2, v8);
  }

uint64_t sub_100061FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100061FE0);
}

void *sub_100061FE0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_100063D3C();
    return (void *)sub_10000AB60((uint64_t)v5 + *(int *)(a4 + 36), a2, a2, v7);
  }

  return result;
}

uint64_t sub_100062048(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[2] = "(";
  void v4[3] = &unk_10006A658;
  v4[4] = &unk_10006A670;
  uint64_t result = type metadata accessor for SportsManager.RefreshOptions(319LL);
  if (v3 <= 0x3F)
  {
    void v4[5] = *(void *)(result - 8) + 64LL;
    void v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

Swift::Int sub_1000620EC(uint64_t a1)
{
  uint64_t v39 = &_swiftEmptyDictionarySingleton;
  sub_1000500C0(v40);
  uint64_t v2 = v40[0];
  uint64_t v28 = v40[1];
  int64_t v3 = v40[3];
  unint64_t v4 = v40[4];
  int64_t v41 = (unint64_t)(v40[2] + 64LL) >> 6;
  Swift::Int result = swift_bridgeObjectRetain(a1);
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  unint64_t v7 = v6 | (v3 << 6);
  while (1)
  {
    char v12 = *(_BYTE *)(*(void *)(v2 + 48) + v7);
    sub_10002CE10(*(void *)(v2 + 56) + 32 * v7, (uint64_t)v37 + 8);
    LOBYTE(v37[0]) = v12;
    v35[0] = v37[0];
    v35[1] = v37[1];
    uint64_t v36 = v38;
    sub_10002CE10((uint64_t)v35 + 8, (uint64_t)&v29);
    if (!v30)
    {
      sub_100063D10((uint64_t)v35, &qword_100088458);
      uint64_t v23 = &v29;
      goto LABEL_33;
    }

    sub_10000AC00(&v29, v34);
    unsigned __int8 v13 = v35[0];
    char v32 = v35[0];
    sub_10000CB94((uint64_t)v35 + 8, (uint64_t)v33);
    sub_10000AC00(v34, v31);
    uint64_t v14 = v39;
    unint64_t v15 = v39[2];
    if (v39[3] <= v15)
    {
      sub_100060A7C(v15 + 1, 1);
      uint64_t v14 = v39;
    }

    Hasher.init(_seed:)(&v29);
    uint64_t v16 = sub_100050BB0(v13);
    String.hash(into:)(&v29, v16, v17);
    swift_bridgeObjectRelease();
    Swift::Int result = Hasher._finalize()();
    BOOL v18 = v14 + 8;
    uint64_t v19 = -1LL << *((_BYTE *)v14 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1LL << v20) & ~v14[(v20 >> 6) + 8]) == 0) {
      break;
    }
    unint64_t v22 = __clz(__rbit64((-1LL << v20) & ~v14[(v20 >> 6) + 8])) | v20 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_32:
    *(void *)((char *)v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    *(_BYTE *)(v14[6] + v2sub_100006E64(v0 + 2) = v13;
    sub_10000AC00(v31, (_OWORD *)(v14[7] + 32 * v22));
    ++v14[2];
    uint64_t v23 = (__int128 *)v33;
LABEL_33:
    Swift::Int result = sub_100063D10((uint64_t)v23, qword_100087690);
    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v8 = v3 + 1;
    if (__OFADD__(v3, 1LL)) {
      goto LABEL_37;
    }
    if (v8 >= v41) {
      goto LABEL_35;
    }
    unint64_t v9 = *(void *)(v28 + 8 * v8);
    int64_t v10 = v3 + 1;
    if (!v9)
    {
      int64_t v10 = v3 + 2;
      if (v3 + 2 >= v41) {
        goto LABEL_35;
      }
      unint64_t v9 = *(void *)(v28 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v3 + 3;
        if (v3 + 3 >= v41) {
          goto LABEL_35;
        }
        unint64_t v9 = *(void *)(v28 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v3 + 4;
          if (v3 + 4 >= v41) {
            goto LABEL_35;
          }
          unint64_t v9 = *(void *)(v28 + 8 * v10);
          if (!v9)
          {
            int64_t v10 = v3 + 5;
            if (v3 + 5 >= v41) {
              goto LABEL_35;
            }
            unint64_t v9 = *(void *)(v28 + 8 * v10);
            if (!v9)
            {
              int64_t v11 = v3 + 6;
              while (v11 < v41)
              {
                unint64_t v9 = *(void *)(v28 + 8 * v11++);
                if (v9)
                {
                  int64_t v10 = v11 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_100062460()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006BEC(&qword_100088448);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v100 = v2;
  uint64_t v101 = v3;
  sub_10000C318();
  __chkstk_darwin(v4);
  sub_10000E5C4();
  uint64_t v102 = v5;
  uint64_t v6 = sub_100063D5C();
  uint64_t v86 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v87 = v7;
  uint64_t v88 = (uint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100006BEC(&qword_10008A0A0);
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  sub_10000C318();
  __chkstk_darwin(v9);
  sub_10000E5C4();
  uint64_t v89 = v10;
  uint64_t v11 = sub_100006BEC(&qword_10008A0A8);
  uint64_t v93 = *(void *)(v11 - 8);
  uint64_t v94 = v11;
  sub_10000C318();
  __chkstk_darwin(v12);
  sub_10000E5C4();
  uint64_t v92 = v13;
  uint64_t v14 = sub_100006BEC(&qword_10008A0B0);
  uint64_t v96 = *(void *)(v14 - 8);
  uint64_t v97 = v14;
  sub_10000C318();
  __chkstk_darwin(v15);
  sub_10000E5C4();
  uint64_t v95 = v16;
  sub_100006BEC(&qword_100087368);
  sub_10000C318();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for URL(0LL);
  int64_t v99 = *(void **)(v20 - 8);
  uint64_t v21 = v99[8];
  __chkstk_darwin(v20);
  unint64_t v22 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v98 = (char *)&v84 - v24;
  unint64_t v25 = *(void **)v0;
  uint64_t v27 = *(void *)(v0 + 56);
  uint64_t v26 = *(void *)(v0 + 64);
  uint64_t v28 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v29 = v25[5];
  uint64_t v30 = v25[6];
  sub_100006C2C(v25 + 2, v29);
  uint64_t v31 = dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)( v27,  v26,  v28,  v29,  v30);
  if (v31)
  {
    char v32 = (void *)v31;
    unint64_t v33 = v102;
    SportingEventSubscription.eventStateURL.getter();
    if (sub_10000AB6C((uint64_t)v19, 1LL, v20) != 1)
    {
      uint64_t v48 = (void (*)(void))v99[4];
      uint64_t v49 = v99;
      unint64_t v85 = v32;
      uint64_t v50 = v98;
      uint64_t v51 = v20;
      v48();
      uint64_t v52 = v48;
      uint64_t v53 = sub_100006C2C((void *)(v1 + 16), *(void *)(v1 + 40));
      Swift::Int v54 = sub_100062B54();
      uint64_t v102 = sub_100006C2C(v53, v53[3]);
      uint64_t v55 = (void (*)(char *, char *, uint64_t))v49[2];
      uint64_t v56 = v50;
      uint64_t v57 = v51;
      uint64_t v84 = v51;
      v55(v22, v56, v51);
      uint64_t v58 = sub_1000471BC();
      uint64_t v59 = *((unsigned __int8 *)v49 + 80);
      uint64_t v60 = (v59 + 16) & ~v59;
      unint64_t v61 = (v21 + v60 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v62 = swift_allocObject(&unk_100082178, v61 + 8, v59 | 7);
      ((void (*)(uint64_t, char *, uint64_t))v52)(v62 + v60, v22, v57);
      *(void *)(v62 + v6Hasher._combine(_:)(v1 & 1) = v58;
      uint64_t v63 = v53[5];
      sub_10001991C();
      uint64_t v64 = sub_1000637F0((uint64_t)sub_1000411F4, v62, v54, 0LL, v63, (uint64_t)v102);
      swift_bridgeObjectRelease_n(v54, 2LL);
      swift_release(v62);
      uint64_t v103 = v64;
      uint64_t v65 = v88;
      sub_100063A74(v1, v88);
      uint64_t v66 = *(unsigned __int8 *)(v86 + 80);
      uint64_t v67 = (v66 + 24) & ~v66;
      uint64_t v68 = swift_allocObject(&unk_1000821A0, v67 + v87, v66 | 7);
      char v69 = v85;
      *(void *)(v68 + 1sub_100006E64(v0 + 6) = v85;
      sub_100063B4C(v65, v68 + v67);
      id v70 = v69;
      uint64_t v71 = sub_100006BEC(&qword_10008A0B8);
      uint64_t v72 = sub_100063D50(&qword_10008A0C0);
      uint64_t v73 = v89;
      Publisher.tryFilter(_:)(sub_100063B90, v68, v71, v72);
      swift_release(v68);
      swift_release(v103);
      sub_10000EBD4( &qword_10008A0C8,  &qword_10008A0A0,  (uint64_t)&protocol conformance descriptor for Publishers.TryFilter<A>);
      uint64_t v74 = v91;
      uint64_t v75 = v92;
      Publisher.map<A>(_:)(sub_10002C228, 0LL, v91, &type metadata for Bool);
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v73, v74);
      uint64_t v76 = sub_100006BEC(&qword_100088360);
      uint64_t v77 = sub_10000EBD4( &qword_10008A0D0,  &qword_10008A0A8,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      uint64_t v78 = sub_100063D50(&qword_100088368);
      uint64_t v79 = v94;
      uint64_t v80 = v95;
      Publisher.catch<A>(_:)(sub_100063688, 0LL, v94, v76, v77, v78);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v75, v79);
      uint64_t v81 = sub_10000EBD4( &qword_10008A0D8,  &qword_10008A0B0,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
      uint64_t v82 = v97;
      uint64_t v39 = Publisher.eraseToAnyPublisher()(v97, v81);

      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v80, v82);
      int64_t v41 = v98;
      uint64_t v40 = (void (*)(void *, uint64_t))v99[1];
      uint64_t v47 = v84;
      goto LABEL_7;
    }

    sub_100063D10((uint64_t)v19, &qword_100087368);
    uint64_t v103 = 0LL;
    uint64_t v104 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(55LL);
    v34._object = (void *)0x800000010006CAE0LL;
    v34._uint64_t countAndFlagsBits = 0xD000000000000035LL;
    String.append(_:)(v34);
    sub_10001991C();
    sub_100063D44();
    sub_10001919C();
    id v35 = sub_100027DC8(4u, v103, v104);
    sub_10001919C();
    uint64_t v103 = (uint64_t)v35;
    uint64_t v36 = sub_100006BEC((uint64_t *)&unk_100088B90);
    Fail.init(error:)(&v103, &type metadata for Bool, v36, &protocol self-conformance witness table for Error);
    uint64_t v37 = sub_10000EBD4(&qword_100088450, &qword_100088448, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
    uint64_t v38 = v100;
    uint64_t v39 = Publisher.eraseToAnyPublisher()(v100, v37);

    uint64_t v40 = *(void (**)(void *, uint64_t))(v101 + 8);
    int64_t v41 = v33;
  }

  else
  {
    uint64_t v103 = 0LL;
    uint64_t v104 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(65LL);
    v42._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
    v42._object = (void *)0x800000010006CAA0LL;
    String.append(_:)(v42);
    sub_10001991C();
    sub_100063D44();
    sub_10001919C();
    id v43 = sub_100027DC8(3u, v103, v104);
    sub_10001919C();
    uint64_t v103 = (uint64_t)v43;
    uint64_t v44 = sub_100006BEC((uint64_t *)&unk_100088B90);
    uint64_t v45 = v102;
    Fail.init(error:)(&v103, &type metadata for Bool, v44, &protocol self-conformance witness table for Error);
    uint64_t v46 = sub_10000EBD4(&qword_100088450, &qword_100088448, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
    uint64_t v38 = v100;
    uint64_t v39 = Publisher.eraseToAnyPublisher()(v100, v46);
    uint64_t v40 = *(void (**)(void *, uint64_t))(v101 + 8);
    int64_t v41 = v45;
  }

  uint64_t v47 = v38;
LABEL_7:
  v40(v41, v47);
  return v39;
}

Swift::Int sub_100062B54()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = sub_100006BEC(&qword_100087E58);
  uint64_t inited = swift_initStackObject(v6, v18);
  *(_OWORD *)(inited + 1sub_100006E64(v0 + 6) = xmmword_100067DB0;
  *(_BYTE *)(inited + 3sub_100006E64(v0 + 2) = 2;
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  *(void *)(inited + 6sub_100006E64(v0 + 4) = &type metadata for String;
  *(void *)(inited + 40) = v9;
  *(void *)(inited + 4sub_100006E64(v0 + 8) = v8;
  *(_BYTE *)(inited + 7sub_100006E64(v0 + 2) = 7;
  uint64_t v10 = swift_bridgeObjectRetain(v8);
  Date.init()(v10);
  sub_100052B9C();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)(inited + 10sub_100006E64(v0 + 4) = &type metadata for UInt64;
  *(void *)(inited + 80) = v12;
  *(_BYTE *)(inited + 1sub_100006E64(v0 + 12) = 8;
  uint64_t v13 = *(void *)(v1 + *(int *)(type metadata accessor for SubscriptionRefreshOperation(0LL) + 40));
  *(void *)(inited + 14sub_100006E64(v0 + 4) = &type metadata for UInt64;
  *(void *)(inited + 120) = v13;
  *(_BYTE *)(inited + 15sub_100006E64(v0 + 2) = 43;
  LOBYTE(vsub_100006E64(v0 + 13) = *(_BYTE *)(v1 + 72);
  *(void *)(inited + 18sub_100006E64(v0 + 4) = &type metadata for Bool;
  *(_BYTE *)(inited + 160) = v13;
  *(_BYTE *)(inited + 19sub_100006E64(v0 + 2) = 44;
  *(void *)(inited + 22sub_100006E64(v0 + 4) = &type metadata for EventType.EventName;
  *(_BYTE *)(inited + 200) = 2;
  sub_100006BEC(qword_100087690);
  sub_100021CD0();
  uint64_t v14 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for SportsMetricsKey);
  Swift::Int v15 = sub_1000620EC(v14);
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_100062CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v94 = a3;
  uint64_t v96 = a2;
  uint64_t v6 = sub_100006BEC(&qword_100088BD0);
  __chkstk_darwin(v6);
  uint64_t v88 = (uint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t refreshed = type metadata accessor for SubscriptionRefreshOperation(0LL);
  __chkstk_darwin(refreshed);
  uint64_t v89 = (uint64_t)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v92 = (char *)&v84 - v10;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v84 - v12;
  uint64_t v14 = type metadata accessor for SportsManager.RefreshOptions(0LL);
  uint64_t v93 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for SportingEventProgressStatus(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v84 - v22;
  uint64_t v86 = sub_100006BEC(&qword_100087478);
  uint64_t v87 = a1;
  uint64_t v24 = *(void *)(a1 + *(int *)(v86 + 40));
  if (!((unint64_t)v24 >> 62))
  {
    uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v24);
    if (v25) {
      goto LABEL_3;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    id v82 = sub_100027DC8(5u, 0xD000000000000013LL, 0x800000010006CB20LL);
    swift_willThrow(v82);
    return 1LL;
  }

  if (v24 < 0) {
    uint64_t v81 = v24;
  }
  else {
    uint64_t v81 = v24 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v24);
  if (!_CocoaArrayWrapper.endIndex.getter(v81)) {
    goto LABEL_31;
  }
LABEL_3:
  uint64_t v90 = v4;
  sub_10003EEB0(0LL, (v24 & 0xC000000000000001LL) == 0, v24);
  if ((v24 & 0xC000000000000001LL) != 0) {
    id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v24);
  }
  else {
    id v26 = *(id *)(v24 + 32);
  }
  id v91 = v26;
  uint64_t v27 = swift_bridgeObjectRelease();
  uint64_t v28 = SportingEventSubscription.sportingEventDetails.getter(v27);
  SportingEvent.progressStatus.getter(v28);

  (*(void (**)(char *, void, uint64_t))(v18 + 104))( v20,  enum case for SportingEventProgressStatus.unknown(_:),  v17);
  int v85 = sub_100041A3C((uint64_t)v23, (uint64_t)v20);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v18 + 8);
  v29(v20, v17);
  uint64_t v30 = ((uint64_t (*)(char *, uint64_t))v29)(v23, v17);
  uint64_t v31 = v94;
  static SportsManager.RefreshOptions.plays.getter(v30);
  unint64_t v32 = sub_100063BE0();
  LOBYTE(v2sub_100006E64(v0 + 8) = dispatch thunk of SetAlgebra.isSuperset(of:)(v16, v14, v32);
  unint64_t v33 = *(void (**)(char *, uint64_t))(v93 + 8);
  v33(v16, v14);
  sub_100063A74(v31, (uint64_t)v13);
  if ((v28 & 1) != 0)
  {
    char v34 = v13[72];
    uint64_t v35 = sub_100063C20((uint64_t)v13);
    if ((v34 & 1) != 0)
    {
      void v97[3] = (uint64_t)&type metadata for TVAppFeatureFlags;
      v97[4] = sub_10000B940();
      char v36 = isFeatureEnabled(_:)(v97);
      uint64_t v35 = sub_100006E64(v97);
      if ((v36 & 1) == 0)
      {
        uint64_t v93 = *(void *)(v31 + 8);
        uint64_t v38 = *(void *)(v31 + 56);
        uint64_t v84 = *(void **)(v31 + 64);
        v39._rawValue = (void *)dispatch thunk of SportingEvent.plays.getter(v37);
        v40._uint64_t countAndFlagsBits = v38;
        v40._object = v84;
        PlaysStore.refreshAllPlays(for:with:)(v40, v39);
        if (v41)
        {

          swift_bridgeObjectRelease();
          return 1LL;
        }

        uint64_t v90 = 0LL;
        uint64_t v35 = swift_bridgeObjectRelease();
      }
    }
  }

  else
  {
    uint64_t v35 = sub_100063C20((uint64_t)v13);
  }

  uint64_t v42 = (uint64_t)v92;
  static SportsManager.RefreshOptions.subscription.getter(v35);
  char v43 = dispatch thunk of SetAlgebra.isSuperset(of:)(v16, v14, v32);
  v33(v16, v14);
  uint64_t v44 = sub_100063A74(v31, v42);
  if ((v43 & 1) != 0)
  {
    uint64_t v45 = sub_100063C20(v42);
    id v46 = v91;
  }

  else
  {
    static SportsManager.RefreshOptions.subscriptionIfUnknown.getter(v44);
    char v47 = dispatch thunk of SetAlgebra.isSuperset(of:)(v16, v14, v32);
    v33(v16, v14);
    uint64_t v45 = sub_100063C20(v42);
    if ((v47 & 1) == 0 || (id v46 = v91, (v85 & 1) == 0))
    {

      return 1LL;
    }
  }

  uint64_t v48 = (void *)SportingEvent.partialSportingEvent.getter(v45);
  uint64_t v49 = dispatch thunk of SportingEvent.versionNumber.getter(v48);

  uint64_t v50 = (void *)v96;
  uint64_t v52 = (void *)SportingEventSubscription.sportingEventDetails.getter(v51);
  uint64_t v53 = dispatch thunk of SportingEvent.versionNumber.getter(v52);

  if (v49 >= v53)
  {
    uint64_t v74 = (void *)SportingEvent.partialSportingEvent.getter(v54);
    uint64_t v75 = type metadata accessor for Date(0LL);
    uint64_t v76 = v88;
    sub_10000AB60(v88, 1LL, 1LL, v75);
    SportingEventSubscription.update(sportingEventDetails:updatedAt:)(v74, v76);

    sub_100063D10(v76, &qword_100088BD0);
    uint64_t v77 = *(unsigned __int8 *)(v31 + 72);
    uint64_t v78 = *(void *)(*(void *)v31 + 40LL);
    uint64_t v79 = *(void *)(*(void *)v31 + 48LL);
    sub_100006C2C((void *)(*(void *)v31 + 16LL), v78);
    uint64_t v80 = v90;
    dispatch thunk of PersistentStorable.writeEventSubscription(_:isConventionalOrUnified:)(v50, v77, v78, v79);
    if (!v80) {
      sub_100063470( *(void *)(v87 + *(int *)(v86 + 36)),  *(void *)(v87 + *(int *)(v86 + 36) + 8),  *(void *)(v31 + 56),  *(void *)(v31 + 64),  v77);
    }
  }

  else
  {
    if (qword_1000870F0 != -1) {
      swift_once(&qword_1000870F0, sub_10004BF00);
    }
    uint64_t v55 = type metadata accessor for Logger(0LL);
    sub_10000B928(v55, (uint64_t)qword_10008F330);
    uint64_t v56 = v31;
    uint64_t v57 = v89;
    sub_100063A74(v56, v89);
    id v58 = v46;
    id v59 = v50;
    id v60 = v58;
    id v61 = v59;
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = swift_slowAlloc(32LL, -1LL);
      uint64_t v96 = swift_slowAlloc(32LL, -1LL);
      v97[0] = v96;
      *(_DWORD *)uint64_t v64 = 136315650;
      uint64_t v65 = *(void *)(v57 + 56);
      unint64_t v66 = *(void *)(v57 + 64);
      swift_bridgeObjectRetain(v66);
      uint64_t v98 = sub_100015AD4(v65, v66, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v64 + 4, v64 + 12);
      swift_bridgeObjectRelease();
      uint64_t v67 = sub_100063C20(v57);
      *(_WORD *)(v64 + sub_100006E64(v0 + 12) = 2048;
      uint64_t v68 = (void *)SportingEvent.partialSportingEvent.getter(v67);
      uint64_t v69 = dispatch thunk of SportingEvent.versionNumber.getter(v68);

      uint64_t v98 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v64 + 14, v64 + 22);

      *(_WORD *)(v64 + 2sub_100006E64(v0 + 2) = 2048;
      uint64_t v71 = (void *)SportingEventSubscription.sportingEventDetails.getter(v70);
      uint64_t v72 = dispatch thunk of SportingEvent.versionNumber.getter(v71);

      uint64_t v98 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v64 + 24, v64 + 32);

      _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "Skipped stale subscription refresh update for canonical id: %s. (%ld < %ld)",  (uint8_t *)v64,  0x20u);
      uint64_t v73 = v96;
      swift_arrayDestroy(v96, 1LL);
      swift_slowDealloc(v73, -1LL, -1LL);
      swift_slowDealloc(v64, -1LL, -1LL);
    }

    else
    {

      sub_100063C20(v57);
    }
  }

  return 1LL;
}

void sub_100063470(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  void v18[3] = (uint64_t)&type metadata for TVAppFeatureFlags;
  void v18[4] = sub_10000B940();
  char v10 = isFeatureEnabled(_:)(v18);
  sub_100006E64(v18);
  if ((v10 & 1) != 0)
  {
    if (a2 >> 60 == 15)
    {
      if (qword_1000870F8 != -1) {
        swift_once(&qword_1000870F8, sub_10004BF1C);
      }
      uint64_t v11 = type metadata accessor for Logger(0LL);
      sub_10000B928(v11, (uint64_t)qword_10008F348);
      uint64_t v12 = swift_bridgeObjectRetain_n(a4, 2LL);
      uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v14 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v16 = swift_slowAlloc(32LL, -1LL);
        v18[0] = v16;
        *(_DWORD *)uint64_t v15 = 136315138;
        swift_bridgeObjectRetain(a4);
        uint64_t v17 = sub_100015AD4(a3, a4, v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v15 + 4, v15 + 12);
        swift_bridgeObjectRelease_n(a4, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Unexpected empty response from Tempo current event state for canonicalId: %s",  v15,  0xCu);
        swift_arrayDestroy(v16, 1LL);
        swift_slowDealloc(v16, -1LL, -1LL);
        swift_slowDealloc(v15, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a4, 2LL);
      }
    }

    else
    {
      sub_10000B210(a1, a2);
      sub_10002A0AC(a1, a2, a3, a4, a5 & 1);
      sub_1000232CC(a1, a2);
    }
  }

uint64_t sub_100063688@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100006BEC(&qword_100088448);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *a1;
  swift_errorRetain(v13);
  uint64_t v8 = sub_100006BEC((uint64_t *)&unk_100088B90);
  Fail.init(error:)(&v13, &type metadata for Bool, v8, &protocol self-conformance witness table for Error);
  uint64_t v9 = sub_10000EBD4(&qword_100088450, &qword_100088448, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
  uint64_t v10 = Publisher.eraseToAnyPublisher()(v4, v9);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v10;
  return result;
}

uint64_t sub_10006377C()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000637F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100006BEC(&qword_10008A0E8);
  uint64_t v31 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  os_log_type_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35[3] = &type metadata for AMSApiRequest;
  v35[4] = &off_10007F7E0;
  uint64_t v15 = (void *)swift_allocObject(&unk_1000821C8, 48LL, 7LL);
  v35[0] = v15;
  _OWORD v15[2] = a1;
  void v15[3] = a2;
  void v15[4] = a3;
  v15[5] = a4;
  id v16 = a4;
  swift_retain(a2);
  swift_bridgeObjectRetain(a3);
  sub_10000A418();
  uint64_t v34 = v17;
  sub_10000AAA8(a6, (uint64_t)__src);
  sub_10000CC1C((uint64_t)v35, (uint64_t)v32);
  uint64_t v18 = swift_allocObject(&unk_1000821F0, 160LL, 7LL);
  *(void *)(v18 + 1sub_100006E64(v0 + 6) = a5;
  memcpy((void *)(v18 + 24), __src, 0x60uLL);
  sub_10000B388(v32, v18 + 120);
  uint64_t v19 = swift_allocObject(&unk_100082218, 32LL, 7LL);
  *(void *)(v19 + 1sub_100006E64(v0 + 6) = sub_100063CDC;
  *(void *)(v19 + 2sub_100006E64(v0 + 4) = v18;
  uint64_t v20 = swift_retain(a5);
  uint64_t v21 = static Subscribers.Demand.unlimited.getter(v20);
  uint64_t v22 = sub_100006BEC(&qword_100087330);
  uint64_t v23 = sub_100006BEC(&qword_100087478);
  uint64_t v24 = sub_100006BEC(&qword_10008A0F0);
  uint64_t v25 = sub_10000EBD4( &qword_100087338,  &qword_100087330,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v26 = sub_10000EBD4( &qword_10008A0F8,  &qword_10008A0F0,  (uint64_t)&protocol conformance descriptor for Publishers.MapError<A, B>);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v21, sub_100041764, v19, v22, v23, v24, v25, v26);
  swift_release(v19);
  swift_release(v34);
  uint64_t v27 = sub_10000EBD4( qword_10008A100,  &qword_10008A0E8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v28 = Publisher.eraseToAnyPublisher()(v12, v27);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v12);
  sub_100006E64(v35);
  return v28;
}

uint64_t sub_100063A74(uint64_t a1, uint64_t a2)
{
  uint64_t refreshed = type metadata accessor for SubscriptionRefreshOperation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(refreshed - 8) + 16LL))(a2, a1, refreshed);
  return a2;
}

uint64_t sub_100063AB8()
{
  uint64_t v1 = *(void *)(sub_100063D5C() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;

  unint64_t v6 = (void *)(v0 + v3);
  swift_release(*v6);
  swift_release(v6[1]);
  sub_100006E64(v6 + 2);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_100063D3C();
  sub_10000C5B0(v7);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100063B4C(uint64_t a1, uint64_t a2)
{
  uint64_t refreshed = type metadata accessor for SubscriptionRefreshOperation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(refreshed - 8) + 32LL))(a2, a1, refreshed);
  return a2;
}

uint64_t sub_100063B90(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SubscriptionRefreshOperation(0LL) - 8) + 80LL);
  return sub_100062CE0(a1, *(void *)(v1 + 16), v1 + ((v3 + 24) & ~v3)) & 1;
}

unint64_t sub_100063BE0()
{
  unint64_t result = qword_10008A0E0;
  if (!qword_10008A0E0)
  {
    uint64_t refreshed = type metadata accessor for SportsManager.RefreshOptions(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SportsManager.RefreshOptions, refreshed);
    atomic_store(result, (unint64_t *)&qword_10008A0E0);
  }

  return result;
}

uint64_t sub_100063C20(uint64_t a1)
{
  uint64_t refreshed = type metadata accessor for SubscriptionRefreshOperation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(refreshed - 8) + 8LL))(a1, refreshed);
  return a1;
}

uint64_t sub_100063C5C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100063C90()
{
  sub_100006E64((void *)(v0 + 32));
  swift_unknownObjectRelease(*(void *)(v0 + 72));
  sub_100006E64((void *)(v0 + 80));
  sub_100006E64((void *)(v0 + 120));
  return swift_deallocObject(v0, 160LL, 7LL);
}

void sub_100063CDC()
{
}

uint64_t sub_100063CEC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100063D10(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100006BEC(a2);
  sub_10000C5B0(v3);
  return a1;
}

uint64_t sub_100063D3C()
{
  return type metadata accessor for SportsManager.RefreshOptions(0LL);
}

void sub_100063D44()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_100063D50(unint64_t *a1)
{
  return sub_10000EBD4(a1, v1, v2);
}

uint64_t sub_100063D5C()
{
  return type metadata accessor for SubscriptionRefreshOperation(0LL);
}

uint64_t sub_100063D64(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 1LL, &v4, a1 + 88);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void sub_100063DD4()
{
}

void sub_100063E00()
{
}

id sub_100063E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (objc_class *)type metadata accessor for Box(0LL, *(void *)((swift_isaMask & *v4) + 0x50LL), a3, a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t sub_100063E58(char *a1)
{
}

uint64_t type metadata accessor for Box(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000D7B0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Box);
}

void *sub_100063E8C()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = &v13[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v16 = 0LL;
  memset(v15, 0, sizeof(v15));
  sub_100064604((uint64_t)v15, (uint64_t)v14, &qword_100088A38);
  bzero(v13, 0xB0uLL);
  if (qword_100087090 != -1) {
    swift_once(&qword_100087090, sub_100029864);
  }
  uint64_t v3 = qword_10008F290;
  uint64_t v4 = qword_100087140;
  swift_retain(qword_10008F290);
  if (v4 != -1) {
    swift_once(&qword_100087140, sub_10005DD28);
  }
  uint64_t v5 = qword_10008F3F8;
  unint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  swift_retain(v5);
  id v7 = [v6 defaultManager];
  NSFileManager.currentContainerURL.getter();

  uint64_t v8 = type metadata accessor for PlaysStore(0LL);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = PlaysStore.init(storeUrl:)(v2);
  uint64_t v10 = sub_1000647AC(v3, v5, v9, (uint64_t)v14, (uint64_t)sub_100042BD8, 0LL, (uint64_t)v13);
  sub_1000230C4((uint64_t)v15, &qword_100088A38);
  return v10;
}

uint64_t sub_100064028(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = *(uint64_t (**)(unint64_t, unint64_t, void (*)(uint64_t, uint64_t), void *))(v5 + 120);
  void v8[2] = a1;
  char v9 = a2;
  uint64_t v10 = a4;
  uint64_t v11 = a5;
  uint64_t v12 = a3;
  return v6(0xD00000000000001DLL, 0x800000010006CBC0LL, sub_1000645F0, v8);
}

void sub_100064088( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v32 = a5;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v13 = sub_100006BEC(&qword_100088BD0);
  __chkstk_darwin(v13);
  uint64_t v15 = &v31[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = *(void *)(a4 + 16);
  uint64_t v17 = *(void *)(a4 + 64);
  sub_100064604(a4 + 72, (uint64_t)v39, &qword_100088A38);
  swift_beginAccess(a4 + 136, v38, 0LL, 0LL);
  sub_100064604(a4 + 136, (uint64_t)v36, &qword_100088158);
  sub_10000CC1C(a4 + 24, (uint64_t)v35);
  sub_100064604(a8, (uint64_t)v15, &qword_100088BD0);
  uint64_t v18 = sub_10002931C((uint64_t)v35, v35[3]);
  __n128 v19 = __chkstk_darwin(v18);
  uint64_t v21 = (uint64_t *)&v31[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(uint64_t *, __n128))(v22 + 16))(v21, v19);
  uint64_t v23 = *v21;
  swift_bridgeObjectRetain(a3);
  swift_retain(v16);
  swift_retain(v17);
  sub_100064C9C(a6, a7);
  id v24 = sub_100064B2C(a3, v16, v17, (uint64_t)v39, (uint64_t)v36, v23, v32, a6, a7, (uint64_t)v15);
  sub_100006E64(v35);
  uint64_t v25 = (void *)swift_allocObject(&unk_100082310, 40LL, 7LL);
  uint64_t v26 = v33;
  uint64_t v27 = v34;
  id v25[2] = v24;
  v25[3] = v26;
  void v25[4] = v27;
  v36[4] = sub_100064C78;
  __n128 v37 = v25;
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 1107296256LL;
  void v36[2] = sub_10005DBBC;
  v36[3] = &unk_100082328;
  uint64_t v28 = _Block_copy(v36);
  uint64_t v29 = v37;
  id v30 = v24;
  swift_retain(v27);
  sub_100064C9C((uint64_t)sub_100064C78, (uint64_t)v25);
  swift_release(v29);
  [v30 setCompletionBlock:v28];
  _Block_release(v28);

  swift_release(v25);
  [*(id *)(a4 + 112) addOperation:v30];
}

uint64_t sub_10006430C(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000870E8 != -1) {
    swift_once(&qword_1000870E8, sub_10004BEA8);
  }
  uint64_t v10 = sub_10000B928(v6, (uint64_t)qword_10008F318);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v11 = a1;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v22 = v7;
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    unint64_t v16 = *(void *)&v11[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_messageVersion + 8];
    uint64_t v23 = a3;
    id v24 = a2;
    if (v16)
    {
      uint64_t v17 = *(void *)&v11[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_messageVersion];
      unint64_t v18 = v16;
    }

    else
    {
      unint64_t v18 = 0xE300000000000000LL;
      uint64_t v17 = 7104878LL;
    }

    swift_bridgeObjectRetain(v16);
    uint64_t v25 = sub_100015AD4(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease(v18);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "releasing os_transaction taken for message version %s",  v14,  0xCu);
    swift_arrayDestroy(v15, 1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v9, v6);
    a2 = v24;
  }

  else
  {

    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  return a2(v19);
}

uint64_t sub_100064554()
{
  swift_release(*(void *)(v0 + 128));
  sub_1000230C4(v0 + 136, &qword_100088158);
  return v0;
}

uint64_t sub_1000645B0()
{
  return swift_deallocClassInstance(v0, 312LL, 7LL);
}

uint64_t type metadata accessor for ApsMessageProcessor()
{
  return objc_opt_self(&OBJC_CLASS____TtC7sportsd19ApsMessageProcessor);
}

void sub_1000645F0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100064604(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100006BEC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

void *sub_100064648( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  v19[3] = type metadata accessor for SportsPerformanceMeasurement(0LL);
  void v19[4] = &off_100082010;
  v19[0] = a2;
  bzero(a8 + 17, 0xB0uLL);
  a8[2] = a1;
  sub_10000CC1C((uint64_t)v19, (uint64_t)(a8 + 3));
  a8[8] = a3;
  sub_100064604(a4, (uint64_t)(a8 + 9), &qword_100088A38);
  a8[15] = a5;
  a8[16] = a6;
  swift_beginAccess(a8 + 17, v18, 33LL, 0LL);
  swift_retain(a1);
  swift_retain(a3);
  swift_retain(a6);
  sub_100064CAC(a7, (uint64_t)(a8 + 17));
  swift_endAccess(v18);
  id v16 = [objc_allocWithZone(NSOperationQueue) init];
  a8[14] = v16;
  [v16 setMaxConcurrentOperationCount:1];
  swift_release(a1);
  swift_release(a3);
  swift_release(a6);
  sub_1000230C4(a7, &qword_100088158);
  sub_1000230C4(a4, &qword_100088A38);
  sub_100006E64(v19);
  return a8;
}

void *sub_1000647AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = type metadata accessor for SportsPerformanceMeasurement(0LL);
  uint64_t v25 = &off_100082010;
  v23[0] = a2;
  uint64_t v14 = type metadata accessor for ApsMessageProcessor();
  uint64_t v15 = (void *)swift_allocObject(v14, 312LL, 7LL);
  uint64_t v16 = sub_10002931C((uint64_t)v23, v24);
  __chkstk_darwin(v16);
  unint64_t v18 = (void *)((char *)&v23[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  uint64_t v20 = sub_100064648(a1, *v18, a3, a4, a5, a6, a7, v15);
  sub_100006E64(v23);
  return v20;
}

id sub_1000648B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
  uint64_t v37 = a8;
  uint64_t v38 = a4;
  int v35 = a7;
  uint64_t v34 = a5;
  uint64_t v36 = a10;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for SportsPerformanceMeasurement(0LL);
  *(void *)&a11[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_cancellable] = 0LL;
  *(void *)&a11[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_cancellables] = _swiftEmptyArrayStorage;
  uint64_t v21 = &a11[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_messageVersion];
  *(void *)uint64_t v21 = 0LL;
  *((void *)v21 + Hasher._combine(_:)(v1 & 1) = 0LL;
  *(void *)&a11[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_message] = a1;
  void v40[3] = v20;
  uint64_t v40[4] = &off_100082010;
  v40[0] = a6;
  *(void *)&a11[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_dataRepository] = a2;
  *(void *)&a11[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_playsStore] = a3;
  sub_100064604( a4,  (uint64_t)&a11[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_activityUpdateable],  &qword_100088A38);
  uint64_t v22 = v34;
  sub_100064604( v34,  (uint64_t)&a11[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_subscriptionOperationFactory],  &qword_100088158);
  uint64_t v23 = a11;
  swift_retain(a2);
  uint64_t v24 = a3;
  uint64_t v25 = swift_retain(a3);
  Date.init()(v25);
  sub_100052B9C();
  uint64_t v27 = v26;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  *(void *)&v23[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_notificationReceiptTime] = v27;
  sub_10000CC1C((uint64_t)v40, (uint64_t)&v23[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_performance]);
  v23[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_isLowCapLiveActivity] = v35;
  uint64_t v28 = (uint64_t *)&v23[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_activityUpdateCompletion];
  uint64_t v29 = v36;
  uint64_t v30 = v37;
  *uint64_t v28 = v37;
  v28[1] = a9;
  sub_100064604( v29,  (uint64_t)&v23[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_processDate],  &qword_100088BD0);
  sub_100064C9C(v30, a9);

  uint64_t v31 = (objc_class *)type metadata accessor for ApsMessageProcessingOperation(0LL);
  v39.receiver = v23;
  v39.super_class = v31;
  id v32 = objc_msgSendSuper2(&v39, "init");
  sub_10003B180(v30, a9);
  swift_release(a2);
  swift_release(v24);
  sub_1000230C4(v29, &qword_100088BD0);
  sub_100006E64(v40);
  sub_1000230C4(v22, &qword_100088158);
  sub_1000230C4(v38, &qword_100088A38);
  return v32;
}

id sub_100064B2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v26 = a8;
  int v25 = a7;
  uint64_t v28 = type metadata accessor for SportsPerformanceMeasurement(0LL);
  uint64_t v29 = &off_100082010;
  v27[0] = a6;
  uint64_t v16 = (char *)objc_allocWithZone((Class)type metadata accessor for ApsMessageProcessingOperation(0LL));
  uint64_t v17 = sub_10002931C((uint64_t)v27, v28);
  __n128 v18 = __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *, __n128))(v21 + 16))(v20, v18);
  id v22 = sub_1000648B8(a1, a2, a3, a4, a5, *v20, v25, v26, a9, a10, v16);
  sub_100006E64(v27);
  return v22;
}

uint64_t sub_100064C4C()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100064C78()
{
  return sub_10006430C(*(void **)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100064C84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100006E64(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100064C94(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100064C9C(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_100064CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006BEC(&qword_100088158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}