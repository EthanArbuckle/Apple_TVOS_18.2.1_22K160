LABEL_17:
  v5 = 0LL;
  return v5;
}

  v15 = 1;
LABEL_20:
  self->_prefServerShouldRun = v15;
  if (!self->_prefClientEnabled && !self->_prefServerEnabled)
  {
    -[RPCompanionLinkDaemon _localDeviceCleanup](self, "_localDeviceCleanup");
    v17 = 0;
LABEL_26:
    -[RPCompanionLinkDaemon _homeKitEnsureStopped](self, "_homeKitEnsureStopped");
    if (!v17) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }

  -[RPCompanionLinkDaemon _localDeviceUpdate](self, "_localDeviceUpdate");
  if (!self->_prefHomeKitEnabled)
  {
    v17 = 1;
    goto LABEL_26;
  }

  -[RPCompanionLinkDaemon _homeKitEnsureStarted](self, "_homeKitEnsureStarted");
  LOBYTE(v17) = 1;
LABEL_27:
  if (self->_prefIPEnabled)
  {
    -[RPCompanionLinkDaemon _reachabilityEnsureStarted](self, "_reachabilityEnsureStarted");
    goto LABEL_30;
  }

  if (!-[NSMutableDictionary count](self->_tcpClientConnections, "count")
    && !-[NSMutableDictionary count](self->_tcpOnDemandClientConnections, "count")
    && !-[NSMutableSet count](self->_tcpServerConnections, "count"))
  {
    v11 = 0LL;
    p_wifiManager = &self->_wifiManager;
LABEL_25:
    -[CUWiFiManager setWakeOnWirelessEnabled:](*p_wifiManager, "setWakeOnWirelessEnabled:", v11);
    return;
  }

  wifiManager = self->_wifiManager;
  if (!wifiManager)
  {
    v8 = objc_alloc_init(&OBJC_CLASS___CUWiFiManager);
    v9 = self->_wifiManager;
    self->_wifiManager = v8;

    -[CUWiFiManager setDispatchQueue:](self->_wifiManager, "setDispatchQueue:", self->_dispatchQueue);
    -[CUWiFiManager setLabel:](self->_wifiManager, "setLabel:", @"CLink");
    -[CUWiFiManager activateWithCompletion:](self->_wifiManager, "activateWithCompletion:", 0LL);
    wifiManager = self->_wifiManager;
  }

  if ((-[CUWiFiManager wakeOnWirelessEnabled](wifiManager, "wakeOnWirelessEnabled") & 1) == 0)
  {
    p_wifiManager = &self->_wifiManager;
    v11 = 1LL;
    goto LABEL_25;
  }

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v18 = self->_xpcConnections;
  v19 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v24,  v34,  16LL);
  if (v19)
  {
    v20 = v19;
    v21 = *(void *)v25;
    do
    {
      for (j = 0LL; j != v20; j = (char *)j + 1)
      {
        if (*(void *)v25 != v21) {
          objc_enumerationMutation(v18);
        }
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v24 + 1) + 8 * (void)j), "client", (void)v24));
        objc_msgSend( v4,  "setFlags:",  objc_msgSend(v4, "flags") | (unsigned __int16)objc_msgSend(v23, "flags") & 0x4000);
      }

      v20 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v24,  v34,  16LL);
    }

    while (v20);
  }
}
  }

  else if (dword_100131328 <= 90 {
         && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
  }
  {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _sessionHandlePeerDisconnect:]",  90LL,  "### Session stop without cnx peerID: %@\n",  v4);
  }
}
  }

  else
  {
    LOBYTE(v10) = 1;
  }

  return (char)v10;
}

        v20 = xpc_event_publisher_fire(v17, a3, v18);
        goto LABEL_18;
      }

      if (dword_100131820 <= 90
        && (dword_100131820 != -1 || _LogCategory_Initialize(&dword_100131820, 90LL)))
      {
        LogPrintF( &dword_100131820,  "-[RPDaemon _xpcPublisherTriggeredToken:payload:responseHandler:]",  90LL,  "### XPC publisher trigger payload conversion failed\n");
      }
    }

    v18 = 0LL;
    if (v10) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

  if (dword_100131820 <= 90 && (dword_100131820 != -1 || _LogCategory_Initialize(&dword_100131820, 90LL))) {
    LogPrintF( &dword_100131820,  "-[RPDaemon _xpcPublisherTriggeredToken:payload:responseHandler:]",  90LL,  "### XPC publisher triggered without publisher, token %llu\n",  a3);
  }
  if (v10)
  {
    v21 = RPErrorF(4294960596LL, (uint64_t)"No XPC publisher", v11, v12, v13, v14, v15, v16, v23);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    v10[2](v10, 0LL, v22);
  }

  if (v10) {
    ((void (**)(id, void *, id))v10)[2](v10, &__NSDictionary0__struct, 0LL);
  }
LABEL_19:
}

  -[NSMutableString appendString:](v4, "appendString:", @" >");
  return v4;
}

Class sub_100002870()
{
  if (qword_100133198 != -1) {
    dispatch_once(&qword_100133198, &stru_100111080);
  }
  Class result = objc_getClass("LSApplicationWorkspace");
  qword_100133190 = (uint64_t)result;
  off_100130F88 = (uint64_t (*)())sub_1000028CC;
  return result;
}

id sub_1000028CC()
{
  return (id)qword_100133190;
}

void sub_1000028D8(id a1)
{
  qword_1001331A0 = (uint64_t)dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
}

LABEL_10:
}
}
}

  ;
}

uint64_t sub_10000393C(uint64_t a1)
{
  if (dword_100131110 <= 30 && (dword_100131110 != -1 || _LogCategory_Initialize(&dword_100131110, 30LL)))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) selectedUserProfile]);
    v3 = (void *)objc_claimAutoreleasedReturnValue([v2 iCloudAltDSID]);
    LogPrintF( &dword_100131110,  "-[RPAppleTVDeviceInfoManager userProfileManagerDidUpdate:]_block_invoke",  30LL,  "selectedUserProfileiCloudAltDSID %@",  v3);
  }

  uint64_t result = *(void *)(*(void *)(a1 + 32) + 8LL);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100003B84(uint64_t a1)
{
  if (dword_100131110 <= 30 && (dword_100131110 != -1 || _LogCategory_Initialize(&dword_100131110, 30LL)))
  {
    unsigned int v2 = [*(id *)(a1 + 32) supportsFindMyRemote];
    v3 = "no";
    if (v2) {
      v3 = "yes";
    }
    LogPrintF( &dword_100131110,  "-[RPAppleTVDeviceInfoManager tvsBluetoothManagerDidUpdate:]_block_invoke",  30LL,  "Updated supportsFindMyRemote %s",  v3);
  }

  uint64_t result = *(void *)(*(void *)(a1 + 32) + 8LL);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

Class sub_100003E30()
{
  if (qword_1001331B8 != -1) {
    dispatch_once(&qword_1001331B8, &stru_1001110C8);
  }
  Class result = objc_getClass("PBSUserProfileManager");
  qword_1001331B0 = (uint64_t)result;
  off_100131180 = (uint64_t (*)())sub_100003E8C;
  return result;
}

id sub_100003E8C()
{
  return (id)qword_1001331B0;
}

void sub_100003E98(id a1)
{
  qword_1001331C0 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/PineBoardServices.framework/PineBoardServices",  2);
}

Class sub_100003EC0()
{
  if (qword_1001331D0 != -1) {
    dispatch_once(&qword_1001331D0, &stru_1001110E8);
  }
  Class result = objc_getClass("TVSBluetoothManager");
  qword_1001331C8 = (uint64_t)result;
  off_100131188 = (uint64_t (*)())sub_100003F1C;
  return result;
}

id sub_100003F1C()
{
  return (id)qword_1001331C8;
}

void sub_100003F28(id a1)
{
  qword_1001331D8 = (uint64_t)dlopen("/System/Library/Frameworks/TVServices.framework/TVServices", 2);
}

id sub_100003F50()
{
  if (qword_1001331D0 != -1) {
    dispatch_once(&qword_1001331D0, &stru_1001110E8);
  }
  v0 = (id *)dlsym((void *)qword_1001331D8, "TVSBluetoothManagerDidUpdateNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_1001331A8, *v0);
  }
  off_100131190 = (uint64_t (*)())sub_100003FC8;
  return (id)qword_1001331A8;
}

id sub_100003FC8()
{
  return (id)qword_1001331A8;
}

void sub_1000040DC(id a1)
{
  v1 = objc_alloc_init(&OBJC_CLASS___RPCloudDaemon);
  unsigned int v2 = (void *)qword_1001331E0;
  qword_1001331E0 = (uint64_t)v1;
}

id sub_100004518(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  if (!v2[15])
  {
    v3 = objc_alloc_init(&OBJC_CLASS___CUSystemMonitor);
    uint64_t v4 = *(void *)(a1 + 32);
    v5 = *(void **)(v4 + 120);
    *(void *)(v4 + 120) = v3;

    [*(id *)(*(void *)(a1 + 32) + 120) setDispatchQueue:*(void *)(*(void *)(a1 + 32) + 128)];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100004668;
    v12[3] = &unk_1001110A8;
    uint64_t v13 = *(void *)(a1 + 32);
    [*(id *)(v13 + 120) setFirstUnlockHandler:v12];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100004670;
    v10[3] = &unk_1001110A8;
    uint64_t v11 = *(void *)(a1 + 32);
    [*(id *)(v11 + 120) setPrimaryAppleIDChangedHandler:v10];
    uint64_t v6 = *(void *)(a1 + 32);
    v7 = *(void **)(v6 + 120);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100004678;
    v9[3] = &unk_1001110A8;
    v9[4] = v6;
    [v7 activateWithCompletion:v9];
    unsigned int v2 = *(void **)(a1 + 32);
  }

  return [v2 prefsChanged];
}

id sub_100004668(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_100004670(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _primaryAppleIDChanged];
}

id sub_100004678(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_1000046D8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidate];
}

LABEL_9:
  self->_prefHasAppleTVForce = v4;
LABEL_10:
  uint64_t v6 = CFPrefs_GetInt64(@"com.apple.rapport", @"hasHomePodForce", &v26) != 0;
  if (v26) {
    v7 = -1;
  }
  else {
    v7 = v6;
  }
  prefHasHomePodForce = self->_prefHasHomePodForce;
  if (v7 != prefHasHomePodForce)
  {
    if (dword_1001311F8 <= 40)
    {
      if (dword_1001311F8 == -1)
      {
        prefHasHomePodForce = self->_prefHasHomePodForce;
      }

      LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon prefsChanged]",  40LL,  "HasHomePodForce: %d -> %d\n",  prefHasHomePodForce,  v7);
    }

  self->_prefFamilyIdentityPruneSeconds = v5;
LABEL_10:
  v7 = CFPrefs_GetInt64(@"com.apple.rapport", @"frPruneAccountSecs", &v69);
  if (v69) {
    v8 = 604800LL;
  }
  else {
    v8 = v7;
  }
  prefFriendAccountPruneSeconds = self->_prefFriendAccountPruneSeconds;
  if (v8 != prefFriendAccountPruneSeconds)
  {
    if (dword_100132930 <= 30)
    {
      if (dword_100132930 == -1)
      {
        prefFriendAccountPruneSeconds = self->_prefFriendAccountPruneSeconds;
      }

      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon prefsChanged]",  30LL,  "FriendAccountPruneSeconds: %lld -> %lld\n",  prefFriendAccountPruneSeconds,  v8);
    }

LABEL_18:
    self->_prefHasHomePodForce = v7;
  }

  v9 = CFPrefs_GetInt64(@"com.apple.rapport", @"hasiPadForce", &v26) != 0;
  if (v26) {
    v10 = -1;
  }
  else {
    v10 = v9;
  }
  prefHasiPadForce = self->_prefHasiPadForce;
  if (v10 != prefHasiPadForce)
  {
    if (dword_1001311F8 <= 40)
    {
      if (dword_1001311F8 == -1)
      {
        prefHasiPadForce = self->_prefHasiPadForce;
      }

      LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon prefsChanged]",  40LL,  "HasiPadForce: %d -> %d\n",  prefHasiPadForce,  v10);
    }
    }

    uint64_t v4 = v2->_idsHasHomePodCache > 0;
  }

  else
  {
    uint64_t v4 = prefHasHomePodForce != 0;
  }

  objc_sync_exit(v2);

  return v4;
}

    v22 = 0;
    goto LABEL_21;
  }

  if (!self->_prefAppSignIn || ![v16 isEqual:@"RPUserNotificationAppSignIn"])
  {
    if (([v16 isEqual:@"_companion-link._tcp"] & 1) != 0
      || self->_prefCompanionAuthentication
      && ([v16 isEqual:@"com.apple.CompanionAuthentication"] & 1) != 0)
    {
      goto LABEL_13;
    }

    goto LABEL_18;
  }

  -[RPXPCMatchingEntry setAppSignIn:](v10, "setAppSignIn:", 1LL);
LABEL_13:
  -[RPXPCMatchingEntry setEvent:](v10, "setEvent:", v8);
  -[RPXPCMatchingEntry setHandler:](v10, "setHandler:", v9);
  -[RPXPCMatchingEntry setToken:](v10, "setToken:", a3);
  xpcMatchingMap = self->_xpcMatchingMap;
  if (!xpcMatchingMap)
  {
    v19 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    v20 = self->_xpcMatchingMap;
    self->_xpcMatchingMap = v19;

    xpcMatchingMap = self->_xpcMatchingMap;
  }

  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a3));
  -[NSMutableDictionary setObject:forKeyedSubscript:](xpcMatchingMap, "setObject:forKeyedSubscript:", v10, v21);

  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL))) {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon addXPCMatchingToken:event:handler:]",  30LL,  "LaunchOnDemand added: %##@, token %llu\n",  v8,  a3);
  }
  -[RPCompanionLinkDaemon _reportXPCMatchingDiscoveryCLink](self, "_reportXPCMatchingDiscoveryCLink");
  -[RPCompanionLinkDaemon _updateForXPCClientChange](self, "_updateForXPCClientChange");
  v22 = 1;
LABEL_21:

  return v22;
}

  v28 = 0;
LABEL_38:

  return v28;
}

  v42 = *(_OWORD *)&self->_operatingSystemVersion.majorVersion;
  patchVersion = self->_operatingSystemVersion.patchVersion;
  v20 = sub_10000A85C((uint64_t *)&v42);
  v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  v22 = objc_claimAutoreleasedReturnValue([v4 productVersion]);
  if (!v22) {
    goto LABEL_26;
  }
  v23 = (void *)v22;
  v24 = (void *)objc_claimAutoreleasedReturnValue([v4 productVersion]);
  v25 = v21;
  v26 = v24;
  if (v25 == v26)
  {

    goto LABEL_26;
  }

  v27 = v26;
  if ((v25 == 0LL) == (v26 != 0LL))
  {

    goto LABEL_25;
  }

  v28 = [v25 isEqual:v26];

  if ((v28 & 1) == 0)
  {
LABEL_25:
    v29 = (void *)objc_claimAutoreleasedReturnValue([v4 productVersion]);
    sub_10000A948(v29, &v42);
    *(_OWORD *)&self->_operatingSystemVersion.majorVersion = v42;
    self->_operatingSystemVersion.patchVersion = patchVersion;

    v12 |= 2u;
  }

  v22 = (void *)objc_claimAutoreleasedReturnValue([v5 name]);
  v23 = v22;
  if (!v22) {
    goto LABEL_26;
  }
  name = self->_name;
  v25 = v22;
  v26 = name;
  if (v25 == v26)
  {

    goto LABEL_26;
  }

  v27 = v26;
  if (!v26)
  {

    goto LABEL_25;
  }

  v28 = -[NSString isEqual:](v25, "isEqual:", v26);

  if ((v28 & 1) == 0)
  {
LABEL_25:
    objc_storeStrong((id *)&self->_name, v23);
    v13 |= 0x10u;
  }

  v20 = (void *)objc_claimAutoreleasedReturnValue([v4 idsDeviceIdentifier]);
  v21 = v20;
  if (!v20) {
    goto LABEL_26;
  }
  idsDeviceIdentifier = self->_idsDeviceIdentifier;
  v23 = v20;
  v24 = idsDeviceIdentifier;
  if (v23 == v24)
  {

    goto LABEL_26;
  }

  v25 = v24;
  if (!v24)
  {

    goto LABEL_25;
  }

  v26 = -[NSString isEqual:](v23, "isEqual:", v24);

  if ((v26 & 1) == 0)
  {
LABEL_25:
    objc_storeStrong((id *)&self->_idsDeviceIdentifier, v21);
    v48 = 2;
  }

    goto LABEL_19;
  }

    self->_prefFriendAccountPruneSeconds = v8;
  }

  v10 = CFPrefs_GetInt64(@"com.apple.rapport", @"frRefreshMax", &v69);
  prefFriendRefreshMaxSeconds = self->_prefFriendRefreshMaxSeconds;
  if (v10 == prefFriendRefreshMaxSeconds) {
    goto LABEL_25;
  }
  if (dword_100132930 <= 30)
  {
    v12 = self->_prefFriendRefreshMaxSeconds;
    if (dword_100132930 == -1)
    {
      v12 = self->_prefFriendRefreshMaxSeconds;
    }

    LogPrintF(&dword_100132930, "-[RPPeopleDaemon prefsChanged]", 30LL, "FriendRefreshMax: %lld -> %lld\n", v12, v10);
  }

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_100096798;
  v17[3] = &unk_100112230;
  v17[4] = self;
  v18 = v4;
  v16 = v4;
  [v16 setAuthCompletionHandler:v17];
}
}

    if (v13 == (id)++v15)
    {
      uint64_t v13 = [v12 countByEnumeratingWithState:&v60 objects:v68 count:16];
      if (v13) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }

LABEL_22:
  v24 = v16;

  if (!v24) {
    goto LABEL_24;
  }
  v25 = 0;
LABEL_26:
  v40 = -[NSMutableSet count](self->_bufferedConnections, "count");
  if ((unint64_t)v40 < 6)
  {
    if ((v25 & 1) != 0)
    {
      v41 = 0LL;
    }

    else
    {
      v59 = 0LL;
      v41 = (void *)objc_claimAutoreleasedReturnValue( -[RPRemoteDisplayDaemon _acquireRBSAssertionForEntry:error:]( self,  "_acquireRBSAssertionForEntry:error:",  v24,  &v59));
      v42 = v59;
      if (v42)
      {
LABEL_56:

        goto LABEL_57;
      }
    }

    v43 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_activatedServerXPCCnxMap,  "objectForKeyedSubscript:",  v10));
    v44 = v43;
    if (v43)
    {
      v45 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v43 serverNetCnxs]);
      if (!v45)
      {
        v45 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        [v44 setServerNetCnxs:v45];
      }

      -[NSMutableSet addObject:](v45, "addObject:", v8);
      [v8 setClient:v44];
      v55[0] = _NSConcreteStackBlock;
      v55[1] = 3221225472LL;
      v55[2] = sub_10009F928;
      v55[3] = &unk_100113728;
      v46 = v55;
      v55[4] = v41;
      v56 = v52;
      [v44 sessionStartWithID:v51 netCnx:v8 completion:v55];
      -[NSMutableSet removeObject:](self->_bufferedConnections, "removeObject:", v8);
    }

    else
    {
      if (dword_100132BB0 <= 30)
      {
        if (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)) {
          LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _serverHandleSessionStartWithID:netCnx:completion:]",  30LL,  "Buffering incoming connection for proxied server: %@\n",  v8);
        }
        if (dword_100132BB0 <= 30
          && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
        {
          v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](self->_activatedServerXPCCnxMap, "allKeys"));
          LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _serverHandleSessionStartWithID:netCnx:completion:]",  30LL,  "Service types that are currently active: %@\n",  v49);
        }
      }

      v45 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v24 handler]);
      if (!v45) {
        goto LABEL_55;
      }
      v46 = v57;
      v57[0] = _NSConcreteStackBlock;
      v57[1] = 3221225472LL;
      v57[2] = sub_10009F874;
      v57[3] = &unk_100114A50;
      v57[4] = v24;
      v57[5] = self;
      v58 = v41;
      ((void (*)(NSMutableSet *, void, void, void *))v45[2].super.super.isa)(v45, 0LL, 0LL, v57);
    }

LABEL_55:
    v42 = 0LL;
    goto LABEL_56;
  }

  if (dword_100132BB0 <= 30 && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL))) {
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _serverHandleSessionStartWithID:netCnx:completion:]",  30LL,  "Rejecting incoming connection, too many buffered (%d)\n",  (_DWORD)v40);
  }
  v47 = RPErrorF( 4294960551LL,  (uint64_t)"Rejecting incoming connection, too many buffered (%d)\n",  v34,  v35,  v36,  v37,  v38,  v39,  (uint64_t)v40);
  v42 = (id)objc_claimAutoreleasedReturnValue(v47);
LABEL_57:

LABEL_58:
  ((void (*)(void))v53[2])();
}

LABEL_27:
    self->_prefHasiPadForce = v10;
  }

  v12 = CFPrefs_GetInt64(@"com.apple.rapport", @"hasMacForce", &v26) != 0;
  if (v26) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = v12;
  }
  prefHasMacForce = self->_prefHasMacForce;
  if (v13 != prefHasMacForce)
  {
    if (dword_1001311F8 <= 40)
    {
      if (dword_1001311F8 == -1)
      {
        prefHasMacForce = self->_prefHasMacForce;
      }

      LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon prefsChanged]",  40LL,  "HasMacForce: %d -> %d\n",  prefHasMacForce,  v13);
    }

  v26 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDaemon _getAppleID](self, "_getAppleID"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice accountID](self->_localDeviceInfo, "accountID"));
  v25 = v26;
  v28 = v27;
  if (v25 == v28)
  {
  }

  else
  {
    v29 = v28;
    if ((v25 == 0LL) != (v28 != 0LL))
    {
      v30 = [v25 isEqual:v28];

      if ((v30 & 1) != 0) {
        goto LABEL_34;
      }
    }

    else
    {
    }

    -[RPCompanionLinkDevice setAccountID:](self->_localDeviceInfo, "setAccountID:", v25);
    v179 = 1;
  }
}
}
    }
  }

          v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v15,  v19,  16LL);
        v7 = v14;
      }

      while (v14);
    }
  }
}

LABEL_36:
    self->_prefHasMacForce = v13;
  }

  v15 = CFPrefs_GetInt64(@"com.apple.rapport", @"hasRealityDeviceForce", &v26) != 0;
  if (v26) {
    v16 = -1;
  }
  else {
    v16 = v15;
  }
  prefHasRealityDeviceForce = self->_prefHasRealityDeviceForce;
  if (v16 != prefHasRealityDeviceForce)
  {
    if (dword_1001311F8 <= 40)
    {
      if (dword_1001311F8 == -1)
      {
        prefHasRealityDeviceForce = self->_prefHasRealityDeviceForce;
      }

      LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon prefsChanged]",  40LL,  "HasRealityDeviceForce: %d -> %d\n",  prefHasRealityDeviceForce,  v16);
    }

    v29 = "?";
    goto LABEL_37;
  }

        ;
      }

      uint64_t v11 = [obj countByEnumeratingWithState:&v48 objects:v59 count:16];
    }

    while (v11);
  }

  else
  {
    v36 = 0;
    v37 = 0;
  }

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v22 = *location;
  v23 = [v22 countByEnumeratingWithState:&v40 objects:v57 count:16];
  if (v23)
  {
    v24 = v23;
    v25 = 0;
    v26 = *(void *)v41;
    do
    {
      for (m = 0LL; m != v24; m = (char *)m + 1)
      {
        if (*(void *)v41 != v26) {
          objc_enumerationMutation(v22);
        }
        v28 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)m);
        if (([v28 present] & 1) == 0)
        {
          ++v25;
          if (dword_100132130 <= 30
            && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
          {
            LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _updateSameAccountIdentities]",  30LL,  "Removed same account identity: %@\n",  v28);
          }
        }
      }

      v24 = [v22 countByEnumeratingWithState:&v40 objects:v57 count:16];
    }

    while (v24);
  }

  else
  {
    v25 = 0;
  }

  v31 = v37 > 0 || v36 > 0 || v25 > 0;
  if (*location)
  {
    uint64_t v4 = 0LL;
    v3 = v34;
    if (v31)
    {
      if (dword_100132130 <= 30
        && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
      {
        LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _updateSameAccountIdentities]",  30,  "Updated same account device identities: %d total, %d added, %d changed, %d removed\n",  [obj count],  v37,  v36,  v25);
      }

      objc_storeStrong(location, v34);
LABEL_81:
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
      [v32 postDaemonInfoChanges:8];

      -[RPIdentityDaemon _postIdentitiesChangedNotification](v33, "_postIdentitiesChangedNotification");
      goto LABEL_84;
    }

    if (dword_100132130 <= 10
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 10LL)))
    {
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _updateSameAccountIdentities]",  10,  "Unchanged same account device identities: %d total\n",  [obj count]);
    }

    objc_storeStrong(location, v34);
  }

  else
  {
    uint64_t v4 = 0LL;
    v3 = v34;
    if (dword_100132130 <= 30
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
    {
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _updateSameAccountIdentities]",  30,  "Loaded same account device identities: %d total, %d added, %d changed, %d removed\n",  [obj count],  v37,  v36,  v25);
    }

    objc_storeStrong(location, v34);
    if (v31) {
      goto LABEL_81;
    }
  }

  v30 = (void *)objc_claimAutoreleasedReturnValue([v8 mediaRouteIdentifier]);
  v65 = v30;
  if (![v30 length]) {
    goto LABEL_46;
  }
  v31 = (id)objc_claimAutoreleasedReturnValue([v5 mediaRouteID]);
  v32 = v30;
  v33 = v32;
  if (v31 != v32)
  {
    if ((v32 != 0LL) == (v31 == 0LL))
    {
    }

    else
    {
      v34 = [v31 isEqual:v32];

      if ((v34 & 1) != 0) {
        goto LABEL_44;
      }
    }

    [v5 setMediaRouteID:v33];
    v11 |= 0x20000u;
LABEL_44:
    v25 = v66;
    goto LABEL_45;
  }

LABEL_45:
  v30 = v65;
LABEL_46:
  v35 = GestaltCopyAnswer(@"ProductType", 0LL, 0LL);
  v63 = v13;
  v61 = (void *)v35;
  if (!v35) {
    goto LABEL_55;
  }
  v36 = (void *)v35;
  v37 = (id)objc_claimAutoreleasedReturnValue([v5 model]);
  v38 = v36;
  v39 = v38;
  if (v37 == v38)
  {

    goto LABEL_55;
  }

  if (v37)
  {
    v40 = [v37 isEqual:v38];

    if ((v40 & 1) != 0) {
      goto LABEL_54;
    }
  }

  else
  {
  }

  [v5 setModel:v39];
  v11 |= 0x80u;
LABEL_54:
  v25 = v66;
LABEL_55:
  v41 = (void *)GestaltCopyAnswer(@"UserAssignedDeviceName", 0LL, 0LL);
  v62 = v18;
  if (!v41) {
    goto LABEL_64;
  }
  v42 = (id)objc_claimAutoreleasedReturnValue([v5 name]);
  v43 = v41;
  v44 = v43;
  if (v42 == v43)
  {

    goto LABEL_64;
  }

  if (v42)
  {
    v45 = [v42 isEqual:v43];

    if ((v45 & 1) != 0) {
      goto LABEL_63;
    }
  }

  else
  {
  }

  [v5 setName:v44];
  v11 |= 0x100u;
LABEL_63:
  v25 = v66;
LABEL_64:
  v46 = (void *)objc_claimAutoreleasedReturnValue([v6 btIRKData]);
  if (!v46) {
    goto LABEL_74;
  }
  v47 = v11;
  v48 = (id)objc_claimAutoreleasedReturnValue([v5 btIRKData]);
  v49 = v46;
  v50 = v49;
  if (v48 != v49)
  {
    if (v48)
    {
      v51 = [v48 isEqual:v49];

      if ((v51 & 1) != 0)
      {
        uint64_t v11 = v47;
LABEL_72:
        v25 = v66;
        goto LABEL_73;
      }
    }

    else
    {
    }

    [v5 setBtIRKData:v50];
    uint64_t v11 = v47 | 0x400000;
    goto LABEL_72;
  }

  uint64_t v11 = v47;
LABEL_73:
  v30 = v65;
LABEL_74:
  v52 = (void *)objc_claimAutoreleasedReturnValue([v6 btAddress]);
  if (v52)
  {
    v53 = v11;
    v54 = (id)objc_claimAutoreleasedReturnValue([v5 btAddress]);
    v55 = v52;
    v56 = v55;
    if (v54 != v55)
    {
      v60 = v9;
      v57 = v6;
      if (v54)
      {
        v58 = [v54 isEqual:v55];

        v25 = v66;
        if ((v58 & 1) != 0)
        {
          uint64_t v6 = v57;
          v9 = v60;
          uint64_t v11 = v53;
LABEL_82:
          v30 = v65;
          goto LABEL_83;
        }
      }

      else
      {

        v25 = v66;
      }

      [v5 setBtAddress:v56];
      uint64_t v11 = v53 | 0x800000;
      uint64_t v6 = v57;
      v9 = v60;
      goto LABEL_82;
    }

    uint64_t v11 = v53;
    v25 = v66;
    goto LABEL_82;
  }

  dispatch_assert_queue_V2((dispatch_queue_t)self->_dispatchQueue);
  uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
  [v14 addSelfIdentityInfoToMessage:v13 flags:v7];

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[RPCloudDaemon sharedCloudDaemon](&OBJC_CLASS___RPCloudDaemon, "sharedCloudDaemon"));
  v16 = (void *)objc_claimAutoreleasedReturnValue([v15 idsDeviceIDSelf]);

  if (v16) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v13, "setObject:forKeyedSubscript:", v16, @"_idsID");
  }

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[RPCloudDaemon sharedCloudDaemon](&OBJC_CLASS___RPCloudDaemon, "sharedCloudDaemon"));
  v18 = [v17 sendIDSMessage:v13 cloudServiceID:@"com.apple.private.alloy.nearby" frameType:v8 destinationID:v10 sendFlags:0 msgCtx:v11 error:0];

  return v18;
}
}

LABEL_45:
    self->_prefHasRealityDeviceForce = v16;
  }

  Int64 = CFPrefs_GetInt64(@"com.apple.rapport", @"idsEnabled", &v26);
  if (v26) {
    v19 = 0;
  }
  else {
    v19 = Int64 == 0;
  }
  v20 = !v19;
  if (self->_prefIDSEnabled != v20)
  {
    if (dword_1001311F8 <= 40
      && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 40LL)))
    {
      v21 = "yes";
      if (v20) {
        v22 = "no";
      }
      else {
        v22 = "yes";
      }
      if (!v20) {
        v21 = "no";
      }
      LogPrintF(&dword_1001311F8, "-[RPCloudDaemon prefsChanged]", 40LL, "IDS enabled: %s -> %s\n", v22, v21);
    }

    self->_prefIDSEnabled = v20;
  }

  v23 = CFPrefs_GetInt64(@"com.apple.rapport", @"isSignedInForce", &v26) != 0;
  if (v26) {
    v24 = -1;
  }
  else {
    v24 = v23;
  }
  prefIsSignedInForce = self->_prefIsSignedInForce;
  if (v24 != prefIsSignedInForce)
  {
    if (dword_1001311F8 <= 40)
    {
      if (dword_1001311F8 == -1)
      {
        prefIsSignedInForce = self->_prefIsSignedInForce;
      }

      LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon prefsChanged]",  40LL,  "IsSignedInForce: %d -> %d\n",  prefIsSignedInForce,  v24);
    }

  v57 = v27;
  v31 = -[RPCompanionLinkDevice mediaSystemRole](self->_localDeviceInfo, "mediaSystemRole");
  v32 = (void *)objc_claimAutoreleasedReturnValue( -[CUHomeKitManager selfAccessoryMediaSystemRole]( self->_homeKitManager,  "selfAccessoryMediaSystemRole"));
  homeKitManager = self->_homeKitManager;
  if (v32)
  {
    v34 = (void *)objc_claimAutoreleasedReturnValue(-[CUHomeKitManager selfAccessoryMediaSystemRole](homeKitManager, "selfAccessoryMediaSystemRole"));
    v35 = [v34 type];
    if (v35 == (id)1) {
      v36 = 1LL;
    }
    else {
      v36 = 2 * (v35 == (id)2);
    }
  }

  else
  {
    v34 = (void *)objc_claimAutoreleasedReturnValue(-[CUHomeKitManager selfAccessory](homeKitManager, "selfAccessory"));
    if (v34) {
      v36 = 3LL;
    }
    else {
      v36 = 0LL;
    }
  }

  v58 = v25;

  if ((_DWORD)v36 != v31)
  {
    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      if (v31 > 3) {
        v37 = "?";
      }
      else {
        v37 = off_1001124B8[v31];
      }
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _homeKitSelfAccessoryMediaSystemUpdated:]",  30LL,  "HomeKit SelfAccessory MediaSystem role changed: %s -> %s\n",  v37,  off_1001124B8[v36]);
    }

    -[RPCompanionLinkDevice setMediaSystemRole:](self->_localDeviceInfo, "setMediaSystemRole:", v36);
    if ((_DWORD)v36 == 1)
    {
      v38 = (id *)&RPDeviceRoleStereoLeft;
    }

    else
    {
      if ((_DWORD)v36 != 2)
      {
        v39 = 0LL;
        goto LABEL_67;
      }

      v38 = (id *)&RPDeviceRoleStereoRight;
    }

    v39 = *v38;
LABEL_67:
    -[RPCompanionLinkDevice setRole:](self->_localDeviceInfo, "setRole:", v39);

    v21 = 1;
    -[RPCompanionLinkDevice setChanged:](self->_localDeviceInfo, "setChanged:", 1LL);
  }

  v40 = -[RPCompanionLinkDevice mediaSystemRoleEffective]( self->_localDeviceInfo,  "mediaSystemRoleEffective");
  if (self->_stereoCnx) {
    v41 = v36;
  }
  else {
    v41 = 0LL;
  }
  if ((_DWORD)v41 == v40)
  {
    if (!v21) {
      goto LABEL_103;
    }
    goto LABEL_89;
  }

  if (dword_100131328 <= 30)
  {
    v42 = v40;
    if (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL))
    {
      if (v42 > 3) {
        v43 = "?";
      }
      else {
        v43 = off_1001124B8[v42];
      }
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _homeKitSelfAccessoryMediaSystemUpdated:]",  30LL,  "Effective MediaSystem role changed: %s -> %s\n",  v43,  off_1001124B8[v41]);
    }
  }

  -[RPCompanionLinkDevice setMediaSystemRoleEffective:](self->_localDeviceInfo, "setMediaSystemRoleEffective:", v41);
  -[RPCompanionLinkDevice setChanged:](self->_localDeviceInfo, "setChanged:", 1LL);
  if ((_DWORD)v41 == 1)
  {
    v44 = (id *)&RPDeviceRoleStereoLeft;
  }

  else
  {
    if ((_DWORD)v41 != 2)
    {
      v45 = 0LL;
      goto LABEL_88;
    }

    v44 = (id *)&RPDeviceRoleStereoRight;
  }

  v45 = *v44;
LABEL_88:
  CFPrefs_SetValue(@"com.apple.soundautoconfig", @"ForcedRole", v45);
  CFPreferencesAppSynchronize(@"com.apple.soundautoconfig");
LABEL_89:
  v55 = v17;
  v56 = v11;
  -[RPCompanionLinkDaemon _update](self, "_update");
  v60[0] = @"_forcedRole";
  v46 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice role](self->_localDeviceInfo, "role"));
  v47 = v46;
  if (!v46) {
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  v61[0] = v47;
  v60[1] = @"_msId";
  v48 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice mediaSystemIdentifier](self->_localDeviceInfo, "mediaSystemIdentifier"));
  v49 = v48;
  if (!v48) {
    v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  v50 = a3;
  v61[1] = v49;
  v60[2] = @"_msNm";
  v51 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice mediaSystemName](self->_localDeviceInfo, "mediaSystemName"));
  v52 = v51;
  if (!v51) {
    v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  v61[2] = v52;
  v60[3] = @"_msRo";
  v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  -[RPCompanionLinkDevice mediaSystemRole](self->_localDeviceInfo, "mediaSystemRole")));
  v61[3] = v53;
  v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v61,  v60,  4LL));
  -[RPCompanionLinkDaemon sendEventID:event:destinationID:options:completion:]( self,  "sendEventID:event:destinationID:options:completion:",  @"_systemInfoUpdate",  v54,  @"rapport:rdid:SameHome",  0LL,  0LL);

  if (!v51) {
  if (!v48)
  }

  if (!v46) {
  uint64_t v11 = v56;
  }
  v17 = v55;
  if (v50 <= 3) {
    -[RPCompanionLinkDaemon _stereoDeviceUpdate:](self, "_stereoDeviceUpdate:", (v50 + 1));
  }
LABEL_103:
  if (v11)
  {
    CFPreferencesAppSynchronize(@"com.apple.airplay");
    notify_post("com.apple.airplay.prefsChanged");
  }
}

LABEL_71:
    self->_prefIsSignedInForce = v24;
  }

  -[RPCloudDaemon _update](self, "_update");
}
}

void sub_10000536C(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 128LL));
  *(_BYTE *)(*(void *)(a1 + 32) + 76LL) = 0;
  if (!*(void *)(*(void *)(a1 + 32) + 8LL))
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    id v19 = v3;
    id obj = (id)objc_claimAutoreleasedReturnValue([v3 allValues]);
    id v4 = [obj countByEnumeratingWithState:&v25 objects:v30 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v26;
LABEL_4:
      uint64_t v7 = 0LL;
      while (1)
      {
        if (*(void *)v26 != v6) {
          objc_enumerationMutation(obj);
        }
        v8 = *(void **)(*((void *)&v25 + 1) + 8 * v7);
        __int128 v21 = 0u;
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        id v9 = v8;
        id v10 = [v9 countByEnumeratingWithState:&v21 objects:v29 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v22;
          while (2)
          {
            for (i = 0LL; i != v11; i = (char *)i + 1)
            {
              if (*(void *)v22 != v12) {
                objc_enumerationMutation(v9);
              }
              v14 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
              v15 = (void *)objc_claimAutoreleasedReturnValue([v14 senderCorrelationIdentifier]);

              if (v15)
              {
                uint64_t v16 = objc_claimAutoreleasedReturnValue([v14 senderCorrelationIdentifier]);
                if (dword_1001311F8 <= 30
                  && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 30LL)))
                {
                  LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon idsCorrelationIdentifier]_block_invoke",  30LL,  "Self IDS Correlation Identifier for primary AppleID: %@ changed from %@ -> %@\n",  *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 8LL),  v16);
                }

                uint64_t v17 = *(void *)(a1 + 32);
                v18 = *(void **)(v17 + 8);
                *(void *)(v17 + 8) = v16;

                goto LABEL_21;
              }
            }

            id v11 = [v9 countByEnumeratingWithState:&v21 objects:v29 count:16];
            if (v11) {
              continue;
            }
            break;
          }
        }

LABEL_21:
        if (*(void *)(*(void *)(a1 + 32) + 8LL)) {
          break;
        }
        if ((id)++v7 == v5)
        {
          id v5 = [obj countByEnumeratingWithState:&v25 objects:v30 count:16];
          if (v5) {
            goto LABEL_4;
          }
          break;
        }
      }
    }

    id v3 = v19;
    if (!*(void *)(*(void *)(a1 + 32) + 8LL)
      && dword_1001311F8 <= 30
      && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 30LL)))
    {
      LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon idsCorrelationIdentifier]_block_invoke",  30LL,  "Failed to get self IDS Correlation Identifier\n");
    }
  }
}

    goto LABEL_22;
  }

  if (dword_100131328 <= 90 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL))) {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _mediaRouteIDGet]_block_invoke",  90LL,  "### Get pairing identifier for media route failed: %{error}\n",  v5);
  }
LABEL_22:
}

      uint64_t v17 = 0;
      goto LABEL_22;
    }
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](self->_devices, "objectForKeyedSubscript:", v9));

  devices = self->_devices;
  if (!devices)
  {
    uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v13 = self->_devices;
    self->_devices = v12;

    devices = self->_devices;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](devices, "setObject:forKeyedSubscript:", v6, v9);
  v14 = -[NSXPCConnection processIdentifier](self->_xpcCnx, "processIdentifier");
  if (v14 == getpid()) {
    objc_msgSend( v6,  "setEncodeSensitiveProperties:",  -[RPCompanionLinkClient encodeSensitiveProperties](self->_client, "encodeSensitiveProperties"));
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(-[NSXPCConnection remoteObjectProxy](self->_xpcCnx, "remoteObjectProxy"));
  uint64_t v16 = v15;
  if (v10) {
    [v15 companionLinkChangedDevice:v6 changes:2];
  }
  else {
    [v15 companionLinkFoundDevice:v6];
  }

  uint64_t v17 = 1;
LABEL_22:

  return v17;
}

  -[RPCompanionLinkDevice setChanged:](self->_localDeviceInfo, "setChanged:", 0LL);
}

void sub_1000056D8(_Unwind_Exception *a1)
{
}

LABEL_11:
  objc_sync_exit(v5);
  return v7;
}

  uint64_t v7 = (id)v11[5];
  _Block_object_dispose(&v10, 8);

  return v7;
}
}

  return v6;
}

  return (char)v3;
}

  return (char)v7;
}

  return v6;
}
}
}

  return v7;
}

    if (v3) {
      -[RPNearFieldDaemonController _startTransactionControllerIfNeeded](self, "_startTransactionControllerIfNeeded");
    }
    else {
      -[RPNearFieldDaemonController _stopTransactionControllerIfNeeded](self, "_stopTransactionControllerIfNeeded");
    }
  }

  return v6;
}

  return (char)v6;
}

  return v6;
}

  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_10005635C;
  v26[3] = &unk_1001118A0;
  v26[4] = v5;
  -[RPConnection setReadErrorHandler:](v5, "setReadErrorHandler:", v26);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_100056460;
  v25[3] = &unk_100111968;
  v25[4] = v5;
  v25[5] = self;
  -[RPConnection setInvalidationHandler:](v5, "setInvalidationHandler:", v25);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_1000564B8;
  v24[3] = &unk_100111990;
  v24[4] = v5;
  v24[5] = self;
  -[RPConnection setReceivedEventHandler:](v5, "setReceivedEventHandler:", v24);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_10005654C;
  v23[3] = &unk_1001119B8;
  v23[4] = v5;
  v23[5] = self;
  -[RPConnection setReceivedRequestHandler:](v5, "setReceivedRequestHandler:", v23);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_1000565F4;
  v22[3] = &unk_1001119E0;
  v22[4] = v5;
  v22[5] = self;
  -[RPConnection setStateChangedHandler:](v5, "setStateChangedHandler:", v22);
  bleServerConnections = self->_bleServerConnections;
  if (!bleServerConnections)
  {
    v20 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    __int128 v21 = self->_bleServerConnections;
    self->_bleServerConnections = v20;

    bleServerConnections = self->_bleServerConnections;
  }

  -[NSMutableSet addObject:](bleServerConnections, "addObject:", v5);
  -[RPConnection activate](v5, "activate");
}

  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_10005821C;
  v28[3] = &unk_100111708;
  v28[4] = v3;
  v28[5] = self;
  v28[6] = v4;
  -[RPConnection setInvalidationHandler:](v3, "setInvalidationHandler:", v28);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_100058290;
  v27[3] = &unk_100112F78;
  v27[4] = v3;
  v27[5] = self;
  v27[6] = v4;
  -[RPConnection setReceivedEventHandler:](v3, "setReceivedEventHandler:", v27);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_100058320;
  v26[3] = &unk_100112FA0;
  v26[4] = v3;
  v26[5] = self;
  v26[6] = v4;
  -[RPConnection setReceivedRequestHandler:](v3, "setReceivedRequestHandler:", v26);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_1000583C4;
  v25[3] = &unk_100111A30;
  v25[4] = v3;
  v25[5] = self;
  v25[6] = v4;
  -[RPConnection setStateChangedHandler:](v3, "setStateChangedHandler:", v25);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_100058410;
  v24[3] = &unk_100112230;
  v24[4] = v3;
  v24[5] = v4;
  -[RPConnection setReadErrorHandler:](v3, "setReadErrorHandler:", v24);
  bleClientConnections = self->_bleClientConnections;
  if (!bleClientConnections)
  {
    __int128 v21 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v22 = self->_bleClientConnections;
    self->_bleClientConnections = v21;

    bleClientConnections = self->_bleClientConnections;
  }

  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v7 UUIDString]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](bleClientConnections, "setObject:forKeyedSubscript:", v3, v23);

  -[RPConnection activate](v3, "activate");
}

  return (char)v6;
}

  if (a4) {
    *a4 = 0;
  }
  if ((_DWORD)v8)
  {
    if (!-[NSMutableArray count](self->_sessions, "count") && self->_browseSession)
    {
      -[RPNWEndpoint startAgeOutTimer](self, "startAgeOutTimer");
      if (a4) {
        *a4 = 1;
      }
    }
  }

  return (char)v8;
}

  return v9;
}

    if (!sharedHomeDeviceIdentities) {
      sharedHomeDeviceIdentities = (NSMutableArray *)&__NSArray0__struct;
    }
    id v11 = sharedHomeDeviceIdentities;
    goto LABEL_14;
  }

  if ((_DWORD)v5 == 4)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[RPPeopleDaemon sharedPeopleDaemon](&OBJC_CLASS___RPPeopleDaemon, "sharedPeopleDaemon"));
    v15 = objc_claimAutoreleasedReturnValue([v14 getFamilyDeviceIdentities]);
  }

  else
  {
    if ((_DWORD)v5 != 6) {
      goto LABEL_5;
    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[RPPeopleDaemon sharedPeopleDaemon](&OBJC_CLASS___RPPeopleDaemon, "sharedPeopleDaemon"));
    v15 = objc_claimAutoreleasedReturnValue([v14 getFriendDeviceIdentities]);
  }

  uint64_t v16 = (void *)v15;
  uint64_t v17 = &__NSArray0__struct;
  if (v15) {
    uint64_t v17 = (void *)v15;
  }
  p_super = v17;

  return p_super;
}

    id v5 = v17;
  }

  return (unint64_t)v10;
}

  return v6;
}

void sub_100005840(_Unwind_Exception *a1)
{
}

void sub_100005924(_Unwind_Exception *a1)
{
}

void sub_100005ACC(_Unwind_Exception *a1)
{
}

void sub_100005D54(uint64_t a1, void *a2, void *a3)
{
  id v32 = a2;
  id v5 = a3;
  *(_BYTE *)(*(void *)(a1 + 32) + 76LL) = 0;
  if (dword_1001311F8 <= 30 && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 30LL))) {
    LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon idsFamilyEndpointsUpdateWithForce:]_block_invoke",  30LL,  "Family IDS query completed.\n");
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 128LL));
  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v7 = *(void *)(a1 + 32);
  v8 = *(void **)(v7 + 80);
  *(void *)(v7 + 80) = v6;

  if (v5)
  {
    if (dword_1001311F8 <= 90
      && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL)))
    {
      LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon idsFamilyEndpointsUpdateWithForce:]_block_invoke",  90LL,  "Error with family endpoint query: %@",  v5);
    }

    uint64_t v27 = *(void *)(a1 + 32);
    __int128 v28 = *(void **)(v27 + 80);
    *(void *)(v27 + 80) = 0LL;
  }

  else
  {
    uint64_t v29 = a1;
    id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([v32 allKeys]);
    id v33 = [obj countByEnumeratingWithState:&v40 objects:v45 count:16];
    if (v33)
    {
      uint64_t v31 = *(void *)v41;
      do
      {
        for (i = 0LL; i != v33; i = (char *)i + 1)
        {
          if (*(void *)v41 != v31) {
            objc_enumerationMutation(obj);
          }
          uint64_t v12 = *(void *)(*((void *)&v40 + 1) + 8LL * (void)i);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKey:v12]);
          v14 = (void *)objc_claimAutoreleasedReturnValue([v13 endpoints]);

          if (v14)
          {
            v34 = v13;
            v35 = i;
            __int128 v38 = 0u;
            __int128 v39 = 0u;
            __int128 v36 = 0u;
            __int128 v37 = 0u;
            v15 = (void *)objc_claimAutoreleasedReturnValue([v13 endpoints]);
            id v16 = [v15 countByEnumeratingWithState:&v36 objects:v44 count:16];
            if (v16)
            {
              id v17 = v16;
              uint64_t v18 = *(void *)v37;
              do
              {
                for (j = 0LL; j != v17; j = (char *)j + 1)
                {
                  if (*(void *)v37 != v18) {
                    objc_enumerationMutation(v15);
                  }
                  v20 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)j);
                  -[NSMutableArray addObject:](v9, "addObject:", v20);
                  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 familyEndpointData]);
                  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 deviceUniqueID]);

                  if (v22)
                  {
                    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v20, v22);
                  }

                  else if (dword_1001311F8 <= 90 {
                         && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL)))
                  }
                  {
                    LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon idsFamilyEndpointsUpdateWithForce:]_block_invoke",  90LL,  "Family endpoint IDS ID is nil");
                  }
                }

                id v17 = [v15 countByEnumeratingWithState:&v36 objects:v44 count:16];
              }

              while (v17);
            }

            uint64_t v13 = v34;
            i = v35;
          }

          else if (dword_1001311F8 <= 90 {
                 && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL)))
          }
          {
            LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon idsFamilyEndpointsUpdateWithForce:]_block_invoke",  90LL,  "Family infoResult.endpoints is nil for uri: %@",  v12);
          }
        }

        id v33 = [obj countByEnumeratingWithState:&v40 objects:v45 count:16];
      }

      while (v33);
    }

    uint64_t v23 = *(void *)(v29 + 32);
    __int128 v24 = *(void **)(v23 + 40);
    *(void *)(v23 + 40) = v10;
    __int128 v25 = v10;

    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
    [v26 postDaemonInfoChanges:2048];

    id v5 = 0LL;
  }
}

void sub_1000062D8(_Unwind_Exception *a1)
{
}

LABEL_15:
    }

    id v4 = v2->_idsHasAppleTVCache > 0;
  }

  else
  {
    id v4 = prefHasAppleTVForce != 0;
  }

  objc_sync_exit(v2);

  return v4;
}
    }

    id v4 = v2->_idsHasiPadCache > 0;
  }

  else
  {
    id v4 = prefHasiPadForce != 0;
  }

  objc_sync_exit(v2);

  return v4;
}
    }

    id v4 = v2->_idsHasMacCache > 0;
  }

  else
  {
    id v4 = prefHasMacForce != 0;
  }

  objc_sync_exit(v2);

  return v4;
}
    }

    id v4 = v2->_idsHasRealityDeviceCache > 0;
  }

  else
  {
    id v4 = prefHasRealityDeviceForce != 0;
  }

  objc_sync_exit(v2);

  return v4;
}
      }
    }

    id v4 = v2->_idsIsSignedInCache > 0;
  }

  else
  {
    id v4 = prefIsSignedInForce != 0;
  }

  objc_sync_exit(v2);

  return v4;
}

    objc_sync_exit(v7);
  }

  return result;
}

    if (self->_bleNearbyActionV2Device)
    {
LABEL_16:
      uint64_t v12 = objc_alloc_init(&OBJC_CLASS___RPNearbyActionV2Advertiser);
      bleNearbyActionV2Advertiser = self->_bleNearbyActionV2Advertiser;
      self->_bleNearbyActionV2Advertiser = v12;

      -[RPNearbyActionV2Advertiser setDispatchQueue:]( self->_bleNearbyActionV2Advertiser,  "setDispatchQueue:",  self->_dispatchQueue);
      v14 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice bleTargetData](self->_bleNearbyActionV2Device, "bleTargetData"));
      -[RPNearbyActionV2Advertiser setTargetData:](self->_bleNearbyActionV2Advertiser, "setTargetData:", v14);

      -[RPNearbyActionV2Advertiser setNearbyActionType:]( self->_bleNearbyActionV2Advertiser,  "setNearbyActionType:",  -[RPCompanionLinkDevice nearbyActionV2Type](self->_bleNearbyActionV2Device, "nearbyActionV2Type"));
      v15 = self->_bleNearbyActionV2Advertiser;
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      v16[2] = sub_10001580C;
      v16[3] = &unk_1001118A0;
      v16[4] = self;
      -[RPNearbyActionV2Advertiser activateWithCompletion:](v15, "activateWithCompletion:", v16);
      -[RPCompanionLinkDaemon _clientSendNeedsAWDLOverWiFi:](self, "_clientSendNeedsAWDLOverWiFi:", 1LL);
    }

    else if (dword_100131328 <= 30 {
           && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    }
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBLENearbyActionV2AdvertiserEnsureStarted]",  30LL,  "BLE NearbyActionV2 advertiser did not start, no known device found\n");
    }
  }

  return v12;
}

  __int128 v41 = 0LL;
  v94 = 0LL;
  v95 = &v94;
  v96 = 0x3032000000LL;
  v97 = sub_10000B284;
  v98 = sub_10000B294;
  v99 = 0LL;
  if (v105[5]) {
    goto LABEL_18;
  }
  xpcMatchingMap = self->_xpcMatchingMap;
  v93[0] = _NSConcreteStackBlock;
  v93[1] = 3221225472LL;
  v93[2] = sub_10003361C;
  v93[3] = &unk_100112168;
  v93[4] = v33;
  v93[5] = &v94;
  v93[6] = &v104;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](xpcMatchingMap, "enumerateKeysAndObjectsUsingBlock:", v93);
  if (v105[5])
  {
    __int128 v41 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue([(id)v95[5] handler]);
    if (v41)
    {
LABEL_18:
      sessionIDLast = self->_sessionIDLast;
      v56 = __CFADD__(sessionIDLast, 1);
      v57 = sessionIDLast + 1;
      v58 = sessionIDLast + 2;
      if (v56) {
        v59 = v58;
      }
      else {
        v59 = v57;
      }
      self->_sessionIDLast = v59;
      v60 = Int64 | (v59 << 32);
      v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v60));
      v62 = objc_alloc_init(&OBJC_CLASS___RPSession);
      -[RPSession setPeerID:](v62, "setPeerID:", v88);
      -[RPSession setServiceType:](v62, "setServiceType:", v33);
      -[RPSession setSessionID:](v62, "setSessionID:", v60);
      -[RPSession setStartTicks:](v62, "setStartTicks:", mach_absolute_time());
      -[RPSession setCnx:](v62, "setCnx:", v86);
      activeSessions = self->_activeSessions;
      if (!activeSessions)
      {
        v64 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        v65 = self->_activeSessions;
        self->_activeSessions = v64;

        activeSessions = self->_activeSessions;
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:](activeSessions, "setObject:forKeyedSubscript:", v62, v61);
      if (dword_100131328 <= 30
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
      {
        v66 = (void *)v95[5];
        if (v66) {
          v67 = (uint64_t)[v66 token];
        }
        else {
          v67 = -1LL;
        }
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _sessionHandleStartRequest:options:cnx:responseHandler:]",  30LL,  "Session start received: Service %@, PeerID %@, SID 0x%llX, Token %lld persona %@\n",  v33,  v88,  v60,  v67,  0LL);
      }

      if (v95[5] && v41)
      {
        v122[0] = @"type";
        v122[1] = @"serviceType";
        v123[0] = @"server";
        v123[1] = v33;
        v122[2] = @"sessionID";
        v122[3] = @"replyRequired";
        v123[2] = v61;
        v123[3] = &__kCFBooleanTrue;
        v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v123,  v122,  4LL));
        if (dword_100131328 <= 30
          && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
        {
          LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _sessionHandleStartRequest:options:cnx:responseHandler:]",  30LL,  "LaunchOnDemand service type %@ payload %@\n",  v33,  v68);
        }

        v90[0] = _NSConcreteStackBlock;
        v90[1] = 3221225472LL;
        v90[2] = sub_1000336C4;
        v90[3] = &unk_100112190;
        v90[4] = self;
        v90[5] = v61;
        v90[6] = v62;
        v91 = v85;
        v92 = v59;
        ((void (**)(void, void, void *, void *))v41)[2](v41, 0LL, v68, v90);
      }

      else
      {
        v120 = @"_sid";
        v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v59));
        v121 = v69;
        v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v121,  &v120,  1LL));

        (*((void (**)(id, void *, void, void))v85 + 2))(v85, v68, 0LL, 0LL);
      }

      goto LABEL_40;
    }

    v81 = RPErrorF(4294960534LL, (uint64_t)"No LaunchOnDemand handler", v49, v50, v51, v52, v53, v54, v83);
    v80 = objc_claimAutoreleasedReturnValue(v81);
  }

  else
  {
    v79 = RPErrorF(4294896131LL, (uint64_t)"Unsupported service type", v43, v44, v45, v46, v47, v48, v83);
    v80 = objc_claimAutoreleasedReturnValue(v79);
  }

  v82 = (void *)v115[5];
  v115[5] = v80;

LABEL_40:
  _Block_object_dispose(&v94, 8);

  _Block_object_dispose(&v104, 8);
LABEL_41:

LABEL_42:
  ((void (*)(void *))v84[2])(v84);

  _Block_object_dispose(&v114, 8);
}

    v14 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDaemon localDeviceInfo](self->_daemon, "localDeviceInfo"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkXPCConnection launchInstanceID](self, "launchInstanceID"));

    if (v15)
    {
      daemon = self->_daemon;
      id v17 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkXPCConnection launchInstanceID](self, "launchInstanceID"));
      uint64_t v18 = objc_claimAutoreleasedReturnValue( -[RPCompanionLinkDaemon homeHubDeviceForLaunchInstanceID:]( daemon,  "homeHubDeviceForLaunchInstanceID:",  v17));

      v14 = (void *)v18;
      if (!v18)
      {
        if (dword_100131328 > 90
          || dword_100131328 == -1 && !_LogCategory_Initialize(&dword_100131328, 90LL))
        {
          goto LABEL_42;
        }

        v14 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkXPCConnection launchInstanceID](self, "launchInstanceID"));
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkXPCConnection companionLinkUpdateClient:]",  90LL,  "### Unable to find local HomeHub device for launch instance %@, failed to update the client\n",  v14);
LABEL_41:

LABEL_42:
        id v5 = v29;
        goto LABEL_43;
      }
    }

    uint64_t v27 = v6;
    __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v14 siriInfo]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v29 siriInfo]);
    v20 = v19;
    if (v19)
    {
      __int128 v21 = v19;
      __int128 v22 = v28;
      uint64_t v23 = v22;
      if (v21 == v22)
      {
      }

      else
      {
        if (v22)
        {
          __int128 v24 = [v21 isEqual:v22];

          if ((v24 & 1) != 0) {
            goto LABEL_38;
          }
        }

        else
        {
        }

        if (dword_100131328 <= 30
          && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
        {
          LogPrintF( &dword_100131328,  "-[RPCompanionLinkXPCConnection companionLinkUpdateClient:]",  30,  "Siri info changed: %d items -> %d items\n",  [v23 count],  objc_msgSend(v21, "count"));
        }

        [v14 setSiriInfo:v21];
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
        [v23 setObject:v21 forKeyedSubscript:@"_siriInfo"];
        if (v15)
        {
          __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
          [v23 setObject:v25 forKeyedSubscript:@"_i"];

          __int128 v26 = @"_proxyUpdate";
        }

        else
        {
          __int128 v26 = @"_systemInfoUpdate";
        }

        -[RPCompanionLinkDaemon sendEventID:event:destinationID:options:completion:]( self->_daemon,  "sendEventID:event:destinationID:options:completion:",  v26,  v23,  @"rapport:rdid:SameHome",  0LL,  0LL);
      }
    }
}

    uint64_t v6 = (uint64_t)v45;
  }

  v48 = *(_OWORD *)&self->_operatingSystemVersion.majorVersion;
  patchVersion = self->_operatingSystemVersion.patchVersion;
  __int128 v22 = sub_10000A85C((uint64_t *)&v48);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  if (v9)
  {
    -[IDSDevice operatingSystemVersion](v9, "operatingSystemVersion");
    if (v47[3] >= 1)
    {
      -[IDSDevice operatingSystemVersion](v9, "operatingSystemVersion");
      __int128 v24 = sub_10000A85C(v47);
      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      __int128 v26 = v23;
      uint64_t v27 = v25;
      if (v26 == v27)
      {
      }

      else
      {
        __int128 v28 = v27;
        if ((v26 == 0LL) == (v27 != 0LL))
        {
        }

        else
        {
          uint64_t v29 = [v26 isEqual:v27];

          if ((v29 & 1) != 0) {
            goto LABEL_25;
          }
        }

        -[IDSDevice operatingSystemVersion](v9, "operatingSystemVersion");
        *(_OWORD *)&self->_operatingSystemVersion.majorVersion = v48;
        self->_operatingSystemVersion.patchVersion = patchVersion;
        v12 |= 2u;
      }

  id v10 = 1;
LABEL_25:

  return v10;
}
}

  if (dword_100131A38 <= 60 && (dword_100131A38 != -1 || _LogCategory_Initialize(&dword_100131A38, 60LL))) {
    LogPrintF( &dword_100131A38,  "-[RPHIDDaemon _handleGameControllerEvent:]",  60LL,  "### Inject Game Controller event failed: %#m\n",  v21);
  }
LABEL_11:
}
    }

    else
    {
      LOBYTE(v8) = 0;
    }
  }

  else
  {
    LOBYTE(v8) = 0;
  }

  return (char)v8;
}

  if ((v5 & 8) != 0)
  {
LABEL_16:
    if (self->_prefFamilyResolve)
    {
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v14 = (void *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 4LL, 0LL));
      v15 = [v14 countByEnumeratingWithState:&v47 objects:v58 count:16];
      if (v15)
      {
        id v16 = v15;
        id v17 = *(void *)v48;
        while (2)
        {
          for (j = 0LL; j != v16; j = (char *)j + 1)
          {
            if (*(void *)v48 != v17) {
              objc_enumerationMutation(v14);
            }
            if ([*(id *)(*((void *)&v47 + 1) + 8 * (void)j) verifySignature:v8 data:v9 error:0])
            {
              id v11 = v11 | 8;
              goto LABEL_27;
            }
          }

          id v16 = [v14 countByEnumeratingWithState:&v47 objects:v58 count:16];
          if (v16) {
            continue;
          }
          break;
        }
      }

  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v40, 8);
}

          v15 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_discoveredPeople,  "objectForKeyedSubscript:",  v11));
          id v16 = v15;
          if (v15)
          {
            id v17 = [v15 updateWithRPDevice:v27];
            if (dword_100132930 <= 30
              && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
            {
              uint64_t v18 = CUDescriptionWithLevel(v16, 30LL);
              id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
              LogPrintF( &dword_100132930,  "-[RPPeopleXPCConnection clientDeviceFound:report:]",  30LL,  "Person changed: %@, %#{flags}\n",  v19,  v17,  &unk_10010AF5D);
            }

            if (!v4) {
              goto LABEL_33;
            }
            v20 = (id)objc_claimAutoreleasedReturnValue(-[NSXPCConnection remoteObjectProxy](self->_xpcCnx, "remoteObjectProxy"));
            [v20 xpcPersonChanged:v16 changes:v17];
          }

          else
          {
            v20 = objc_alloc_init(&OBJC_CLASS___RPPerson);
            [v20 setIdentifier:v11];
            [v20 updateWithRPDevice:v27];
            discoveredPeople = self->_discoveredPeople;
            if (!discoveredPeople)
            {
              __int128 v22 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
              uint64_t v23 = self->_discoveredPeople;
              self->_discoveredPeople = v22;

              discoveredPeople = self->_discoveredPeople;
            }

            -[NSMutableDictionary setObject:forKeyedSubscript:]( discoveredPeople,  "setObject:forKeyedSubscript:",  v20,  v11);
            if (dword_100132930 <= 30
              && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
            {
              __int128 v24 = CUDescriptionWithLevel(v20, 30LL);
              __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
              LogPrintF( &dword_100132930,  "-[RPPeopleXPCConnection clientDeviceFound:report:]",  30LL,  "Person found: %@\n",  v25);
            }

            if (v4)
            {
              __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(-[NSXPCConnection remoteObjectProxy](self->_xpcCnx, "remoteObjectProxy"));
              [v26 xpcPersonFound:v20];
            }
          }

LABEL_33:
LABEL_34:

          goto LABEL_35;
        }
      }

      id v11 = @"$icloud";
      goto LABEL_15;
    }
  }

void sub_100006480(_Unwind_Exception *a1)
{
}

void sub_100006674(_Unwind_Exception *a1)
{
}

void sub_10000681C(_Unwind_Exception *a1)
{
}

void sub_1000069C4(_Unwind_Exception *a1)
{
}

void sub_100006B6C(_Unwind_Exception *a1)
{
}

void sub_100006CD8(_Unwind_Exception *a1)
{
}

void sub_100006E60(_Unwind_Exception *a1)
{
}

LABEL_54:
    uint64_t v27 = "?";
    goto LABEL_55;
  }

  if (dword_1001311F8 <= 90 && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL))) {
    LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon service:account:incomingData:fromID:context:]",  90LL,  "### IDS payload truncated from '%@', %zu bytes, <%.32@>\n",  v11,  v22,  v18);
  }
LABEL_16:
}

const char *sub_10000742C(int a1)
{
  if (a1 > 47)
  {
    if (a1 <= 63)
    {
      if (a1 == 48) {
        return "WatchIdentityRequest";
      }
      if (a1 == 49) {
        return "WatchIdentityResponse";
      }
    }

    else
    {
      switch(a1)
      {
        case '@':
          return "FriendIdentityRequest";
        case 'A':
          return "FriendIdentityResponse";
        case 'B':
          return "FriendIdentityUpdate";
      }
    }

    return "?";
  }

  else
  {
    Class result = "Invalid";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        Class result = "NoOp";
        break;
      case 3:
        Class result = "PS_Start";
        break;
      case 4:
        Class result = "PS_Next";
        break;
      case 5:
        Class result = "PV_Start";
        break;
      case 6:
        Class result = "PV_Next";
        break;
      case 7:
        Class result = "U_OPACK";
        break;
      case 8:
        Class result = "E_OPACK";
        break;
      case 9:
        Class result = "P_OPACK";
        break;
      case 10:
        Class result = "PA_Req";
        break;
      case 11:
        Class result = "PA_Rsp";
        break;
      case 16:
        Class result = "SessionStartRequest";
        break;
      case 17:
        Class result = "SessionStartResponse";
        break;
      case 18:
        Class result = "SessionData";
        break;
      case 32:
        Class result = "FamilyIdentityRequest";
        break;
      case 33:
        Class result = "FamilyIdentityResponse";
        break;
      case 34:
        Class result = "FamilyIdentityUpdate";
        break;
      default:
        return "?";
    }
  }

  return result;
}

LABEL_72:
    uint64_t v18 = "?";
    goto LABEL_73;
  }

  v14 = objc_opt_class(&OBJC_CLASS___NSDictionary, v11, v12);
  if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
  {
    v15 = (void *)IDSCopyRawAddressForDestination(v10);
    id v16 = v15;
    if (!v15)
    {
      if (dword_1001311F8 <= 90
        && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL)))
      {
        LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon _receivedFamilyIdentityFrameType:ptr:length:msgCtx:]",  90LL,  "### Family identity convert to AppleID failed (%@)\n",  v10);
      }

      goto LABEL_53;
    }

    else {
      id v17 = CUNormalizeEmailAddress(v16, 1LL);
    }
    v20 = (void *)objc_claimAutoreleasedReturnValue(v17);
    [v9 setAppleID:v20];

    switch(v8)
    {
      case '""':
        __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[RPPeopleDaemon sharedPeopleDaemon](&OBJC_CLASS___RPPeopleDaemon, "sharedPeopleDaemon"));
        [v21 receivedFamilyIdentityUpdate:v13 msgCtx:v9];
        break;
      case '!':
        __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[RPPeopleDaemon sharedPeopleDaemon](&OBJC_CLASS___RPPeopleDaemon, "sharedPeopleDaemon"));
        [v21 receivedFamilyIdentityResponse:v13 msgCtx:v9];
        break;
      case ' ':
        __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[RPPeopleDaemon sharedPeopleDaemon](&OBJC_CLASS___RPPeopleDaemon, "sharedPeopleDaemon"));
        [v21 receivedFamilyIdentityRequest:v13 msgCtx:v9];
        break;
      default:
        if (dword_1001311F8 <= 90
          && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL)))
        {
          sub_10000742C(v8);
          LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon _receivedFamilyIdentityFrameType:ptr:length:msgCtx:]",  90LL,  "### Unhandled family identity frame 0x%02X (%s)\n");
        }

        goto LABEL_53;
    }

LABEL_53:
    goto LABEL_94;
  }

  if (dword_1001311F8 <= 90 && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL)))
  {
    if (v8 <= 47)
    {
      id v19 = "Invalid";
      switch(v8)
      {
        case 0:
          goto LABEL_93;
        case 1:
          id v19 = "NoOp";
          break;
        case 3:
          id v19 = "PS_Start";
          break;
        case 4:
          id v19 = "PS_Next";
          break;
        case 5:
          id v19 = "PV_Start";
          break;
        case 6:
          id v19 = "PV_Next";
          break;
        case 7:
          id v19 = "U_OPACK";
          break;
        case 8:
          id v19 = "E_OPACK";
          break;
        case 9:
          id v19 = "P_OPACK";
          break;
        case 10:
          id v19 = "PA_Req";
          break;
        case 11:
          id v19 = "PA_Rsp";
          break;
        case 16:
          id v19 = "SessionStartRequest";
          break;
        case 17:
          id v19 = "SessionStartResponse";
          break;
        case 18:
          id v19 = "SessionData";
          break;
        case 32:
          id v19 = "FamilyIdentityRequest";
          break;
        case 33:
          id v19 = "FamilyIdentityResponse";
          break;
        case 34:
          id v19 = "FamilyIdentityUpdate";
          break;
        default:
          goto LABEL_92;
      }

      goto LABEL_93;
    }

    if (v8 <= 63)
    {
      if (v8 == 48)
      {
        id v19 = "WatchIdentityRequest";
        goto LABEL_93;
      }

      if (v8 == 49)
      {
        id v19 = "WatchIdentityResponse";
        goto LABEL_93;
      }
    }

    else
    {
      switch(v8)
      {
        case '@':
          id v19 = "FriendIdentityRequest";
          goto LABEL_93;
        case 'A':
          id v19 = "FriendIdentityResponse";
          goto LABEL_93;
        case 'B':
          id v19 = "FriendIdentityUpdate";
LABEL_93:
          LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon _receivedFamilyIdentityFrameType:ptr:length:msgCtx:]",  90LL,  "### Family identity message not dictionary: type %s, fromID '%@', %#m\n",  v19,  v10,  v22);
          goto LABEL_94;
      }
    }

    uint64_t v18 = "?";
    goto LABEL_73;
  }

  v14 = objc_opt_class(&OBJC_CLASS___NSDictionary, v11, v12);
  if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
  {
    v15 = (void *)IDSCopyRawAddressForDestination(v10);
    id v16 = v15;
    if (!v15)
    {
      if (dword_1001311F8 <= 90
        && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL)))
      {
        LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon _receivedFriendIdentityFrameType:ptr:length:msgCtx:]",  90LL,  "### Friend identity convert to AppleID failed (%@)\n",  v10);
      }

      goto LABEL_53;
    }

    else {
      id v17 = CUNormalizeEmailAddress(v16, 1LL);
    }
    v20 = (void *)objc_claimAutoreleasedReturnValue(v17);
    [v9 setAppleID:v20];

    switch(v8)
    {
      case 'B':
        __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[RPPeopleDaemon sharedPeopleDaemon](&OBJC_CLASS___RPPeopleDaemon, "sharedPeopleDaemon"));
        [v21 receivedFriendIdentityUpdate:v13 msgCtx:v9];
        break;
      case 'A':
        __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[RPPeopleDaemon sharedPeopleDaemon](&OBJC_CLASS___RPPeopleDaemon, "sharedPeopleDaemon"));
        [v21 receivedFriendIdentityResponse:v13 msgCtx:v9];
        break;
      case '@':
        __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[RPPeopleDaemon sharedPeopleDaemon](&OBJC_CLASS___RPPeopleDaemon, "sharedPeopleDaemon"));
        [v21 receivedFriendIdentityRequest:v13 msgCtx:v9];
        break;
      default:
        if (dword_1001311F8 <= 90
          && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL)))
        {
          sub_10000742C(v8);
          LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon _receivedFriendIdentityFrameType:ptr:length:msgCtx:]",  90LL,  "### Unhandled friend identity frame 0x%02X (%s)\n");
        }

        goto LABEL_53;
    }

LABEL_53:
    goto LABEL_94;
  }

  if (dword_1001311F8 <= 90 && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL)))
  {
    if (v8 <= 47)
    {
      id v19 = "Invalid";
      switch(v8)
      {
        case 0:
          goto LABEL_93;
        case 1:
          id v19 = "NoOp";
          break;
        case 3:
          id v19 = "PS_Start";
          break;
        case 4:
          id v19 = "PS_Next";
          break;
        case 5:
          id v19 = "PV_Start";
          break;
        case 6:
          id v19 = "PV_Next";
          break;
        case 7:
          id v19 = "U_OPACK";
          break;
        case 8:
          id v19 = "E_OPACK";
          break;
        case 9:
          id v19 = "P_OPACK";
          break;
        case 10:
          id v19 = "PA_Req";
          break;
        case 11:
          id v19 = "PA_Rsp";
          break;
        case 16:
          id v19 = "SessionStartRequest";
          break;
        case 17:
          id v19 = "SessionStartResponse";
          break;
        case 18:
          id v19 = "SessionData";
          break;
        case 32:
          id v19 = "FamilyIdentityRequest";
          break;
        case 33:
          id v19 = "FamilyIdentityResponse";
          break;
        case 34:
          id v19 = "FamilyIdentityUpdate";
          break;
        default:
          goto LABEL_92;
      }

      goto LABEL_93;
    }

    if (v8 <= 63)
    {
      if (v8 == 48)
      {
        id v19 = "WatchIdentityRequest";
        goto LABEL_93;
      }

      if (v8 == 49)
      {
        id v19 = "WatchIdentityResponse";
        goto LABEL_93;
      }
    }

    else
    {
      switch(v8)
      {
        case '@':
          id v19 = "FriendIdentityRequest";
          goto LABEL_93;
        case 'A':
          id v19 = "FriendIdentityResponse";
          goto LABEL_93;
        case 'B':
          id v19 = "FriendIdentityUpdate";
LABEL_93:
          LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon _receivedFriendIdentityFrameType:ptr:length:msgCtx:]",  90LL,  "### Friend identity message not dictionary: type %s, fromID '%@', %#m\n",  v19,  v10,  v22);
          goto LABEL_94;
      }
    }

    uint64_t v18 = "?";
    goto LABEL_73;
  }

  if (dword_1001311F8 <= 90 && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL))) {
    LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon _receivedWatchIdentityFrameType:ptr:length:fromID:]",  90LL,  "### Ignoring watch identity from unsupported fromID '%@'\n",  v10);
  }
LABEL_96:
}

LABEL_92:
    id v19 = "?";
    goto LABEL_93;
  }

    id v19 = "?";
    goto LABEL_93;
  }

        id v19 = "?";
        goto LABEL_93;
      }

LABEL_94:
}
}

LABEL_95:
      goto LABEL_96;
    }

    if (v8 <= 47)
    {
      uint64_t v18 = "Invalid";
      switch(v8)
      {
        case 0:
          goto LABEL_73;
        case 1:
          uint64_t v18 = "NoOp";
          break;
        case 3:
          uint64_t v18 = "PS_Start";
          break;
        case 4:
          uint64_t v18 = "PS_Next";
          break;
        case 5:
          uint64_t v18 = "PV_Start";
          break;
        case 6:
          uint64_t v18 = "PV_Next";
          break;
        case 7:
          uint64_t v18 = "U_OPACK";
          break;
        case 8:
          uint64_t v18 = "E_OPACK";
          break;
        case 9:
          uint64_t v18 = "P_OPACK";
          break;
        case 10:
          uint64_t v18 = "PA_Req";
          break;
        case 11:
          uint64_t v18 = "PA_Rsp";
          break;
        case 16:
          uint64_t v18 = "SessionStartRequest";
          break;
        case 17:
          uint64_t v18 = "SessionStartResponse";
          break;
        case 18:
          uint64_t v18 = "SessionData";
          break;
        case 32:
          uint64_t v18 = "FamilyIdentityRequest";
          break;
        case 33:
          uint64_t v18 = "FamilyIdentityResponse";
          break;
        case 34:
          uint64_t v18 = "FamilyIdentityUpdate";
          break;
        default:
          goto LABEL_72;
      }

      goto LABEL_73;
    }

    if (v8 <= 63)
    {
      if (v8 == 48)
      {
        uint64_t v18 = "WatchIdentityRequest";
        goto LABEL_73;
      }

      if (v8 == 49)
      {
        uint64_t v18 = "WatchIdentityResponse";
        goto LABEL_73;
      }
    }

    else
    {
      switch(v8)
      {
        case '@':
          uint64_t v18 = "FriendIdentityRequest";
          goto LABEL_73;
        case 'A':
          uint64_t v18 = "FriendIdentityResponse";
          goto LABEL_73;
        case 'B':
          uint64_t v18 = "FriendIdentityUpdate";
LABEL_73:
          LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon _receivedWatchIdentityFrameType:ptr:length:fromID:]",  90LL,  "### Watch identity message decode failed: type %s, fromID '%@', %#m\n",  v18,  v10,  v20);
          goto LABEL_94;
      }
    }

LABEL_38:
  if (a9) {
    *a9 = v28;
  }

  __int128 v26 = 0;
LABEL_41:

  return v26;
}
}

    if (v7 != v27) {
      -[RPCompanionLinkDaemon _updateForXPCClientChange](self->_daemon, "_updateForXPCClientChange");
    }

    goto LABEL_41;
  }

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 identitiesOfType:12 error:0]);

    if (v24)
    {
      -[NSMutableArray addObjectsFromArray:](v8, "addObjectsFromArray:", v24);
      if (dword_100131820 < 31
        && (dword_100131820 != -1 || _LogCategory_Initialize(&dword_100131820, 30LL)))
      {
        LogPrintF( &dword_100131820,  "-[RPDaemonXPCConnection getIdentitiesWithFlags:completion:]",  30,  "Loaded %lu SharedTVUser identities\n",  [v24 count]);
      }
    }

    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_47;
    }

  return (char)v8;
}

  uint64_t v18 = *p_prefFriendRefreshSeconds;
  if (prefFriendRefreshSeconds == *p_prefFriendRefreshSeconds) {
    goto LABEL_44;
  }
  if (dword_100132930 <= 30)
  {
    if (dword_100132930 == -1)
    {
      uint64_t v18 = *p_prefFriendRefreshSeconds;
    }

    LogPrintF( &dword_100132930,  "-[RPPeopleDaemon prefsChanged]",  30LL,  "FriendRefreshSecs: %lld -> %lld\n",  v18,  prefFriendRefreshSeconds);
  }

  if (!self->_friendsSuggestedGetting && (!self->_friendsSuggestedArray || self->_friendsSuggestedNeedsUpdate))
  {
    v14 = objc_alloc_init(off_1001329A8());
    [v14 setDispatchQueue:self->_dispatchQueue];
    v15 = objc_alloc_init(off_1001329B0());
    [v15 setMaxPeople:self->_prefFriendSuggestMax];
    id v16 = NSSelectorFromString(@"excludeBackfills");
    if ((objc_opt_respondsToSelector(v15, v16) & 1) != 0)
    {
      if (dword_100132930 <= 30
        && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
      {
        LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _friendsUpdateSuggestedIfNeeded]",  30LL,  "Friends update suggested - no backfills\n");
      }

      [v15 setValue:&__kCFBooleanTrue forKey:@"excludeBackfills"];
    }

    else
    {
      if (dword_100132930 > 30)
      {
LABEL_54:
        *(_WORD *)&self->_friendsSuggestedGetting = 1;
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472LL;
        v18[2] = sub_100089D18;
        v18[3] = &unk_1001131C0;
        v18[4] = self;
        id v19 = v14;
        id v17 = v14;
        [v17 getPeopleSuggestions:v15 completion:v18];

        return;
      }

      if (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)) {
        LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _friendsUpdateSuggestedIfNeeded]",  30LL,  "Friends update suggested didn't find backfills selector\n");
      }
    }

    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _friendsUpdateSuggestedIfNeeded]",  30LL,  "Friends update suggested get: max %d\n",  self->_prefFriendSuggestMax);
    }

    goto LABEL_54;
  }

      id v11 = "?";
      goto LABEL_39;
    }
  }

LABEL_30:
    uint64_t v18 = "?";
  }

  else
  {
    uint64_t v18 = "Invalid";
    switch(v12)
    {
      case 0:
        break;
      case 1:
        uint64_t v18 = "NoOp";
        break;
      case 3:
        uint64_t v18 = "PS_Start";
        break;
      case 4:
        uint64_t v18 = "PS_Next";
        break;
      case 5:
        uint64_t v18 = "PV_Start";
        break;
      case 6:
        uint64_t v18 = "PV_Next";
        break;
      case 7:
        uint64_t v18 = "U_OPACK";
        break;
      case 8:
        uint64_t v18 = "E_OPACK";
        break;
      case 9:
        uint64_t v18 = "P_OPACK";
        break;
      case 10:
        uint64_t v18 = "PA_Req";
        break;
      case 11:
        uint64_t v18 = "PA_Rsp";
        break;
      case 16:
        uint64_t v18 = "SessionStartRequest";
        break;
      case 17:
        uint64_t v18 = "SessionStartResponse";
        break;
      case 18:
        uint64_t v18 = "SessionData";
        break;
      case 32:
        uint64_t v18 = "FamilyIdentityRequest";
        break;
      case 33:
        uint64_t v18 = "FamilyIdentityResponse";
        break;
      case 34:
        uint64_t v18 = "FamilyIdentityUpdate";
        break;
      default:
        goto LABEL_30;
    }
  }
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

LABEL_31:
  Data = (void *)OPACKEncoderCreateData(a3, 0LL, v81);
  __int128 v26 = Data;
  if (Data)
  {
    v73 = v18;
    v74 = v15;
    v80[0] = v12;
    uint64_t v27 = [Data length];
    v80[1] = BYTE2(v27);
    v80[2] = BYTE1(v27);
    v80[3] = (_BYTE)v27;
    __int128 v28 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
    -[NSMutableData appendBytes:length:](v28, "appendBytes:length:", v80, 4LL);
    -[NSMutableData appendData:](v28, "appendData:", v26);
    uint64_t v29 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    v30 = v29;
    if ((v10 & 1) != 0)
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v29,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  IDSSendMessageOptionLocalDeliveryKey);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v30,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  IDSSendMessageOptionRequireBluetoothKey);
    }

    uint64_t v31 = IDSSendMessageOptionFromIDKey;
    id v32 = (void *)objc_claimAutoreleasedReturnValue([v17 toID]);
    if (v32)
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v30, "setObject:forKeyedSubscript:", v32, v31);
      id v33 = (void *)objc_claimAutoreleasedReturnValue(-[RPCloudDaemon _idsAccountWithURI:senderID:](self, "_idsAccountWithURI:senderID:", v32, 0LL));

      v15 = v74;
      if (v33) {
        goto LABEL_49;
      }
    }

    else
    {

      v15 = v74;
    }

    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v17 sendersKnownAlias]);
    v79 = objc_claimAutoreleasedReturnValue(-[RPCloudDaemon _idsURIWithID:](self, "_idsURIWithID:", v37));

    __int128 v38 = (void *)v79;
    if (v79)
    {
      id v33 = (void *)objc_claimAutoreleasedReturnValue(-[RPCloudDaemon _idsAccountWithURI:senderID:](self, "_idsAccountWithURI:senderID:", v79, &v79));
      __int128 v38 = (void *)v79;
      if (v33)
      {
        -[NSMutableDictionary setObject:forKeyedSubscript:](v30, "setObject:forKeyedSubscript:", v79, v31);
        __int128 v38 = (void *)v79;
      }
    }

    else
    {
      id v33 = 0LL;
    }

LABEL_49:
    if ([v17 nonWakingRequest]) {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v30,  "setObject:forKeyedSubscript:",  &off_10011ADA8,  IDSSendMessageOptionPushPriorityKey);
    }
    if (![v15 isEqual:@"com.apple.private.alloy.nearby"]
      || (v45 = self->_nearbyIDSService) == 0LL)
    {
      v49 = RPErrorF( 4294896131LL,  (uint64_t)"Unsupported cloudServiceID: '%@'",  v39,  v40,  v41,  v42,  v43,  v44,  (uint64_t)v15);
      v46 = (IDSService *)objc_claimAutoreleasedReturnValue(v49);
      if (dword_1001311F8 <= 90
        && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL)))
      {
        LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon sendIDSMessage:cloudServiceID:frameType:destinationID:sendFlags:msgCtx:error:]",  90LL,  "### IDS send frame failed: %s, %{error}\n",  v73,  v46);
      }

      if (a9)
      {
        v46 = v46;
        v50 = 0;
        *a9 = v46;
      }

      else
      {
        v50 = 0;
      }

      goto LABEL_92;
    }

    v46 = v45;
    id v16 = v16;
    v47 = v16;
    if ((-[__CFString hasPrefix:](v16, "hasPrefix:", @"token:") & 1) == 0)
    {
      if (-[__CFString _appearsToBePhoneNumber](v16, "_appearsToBePhoneNumber"))
      {
        v48 = IDSCopyIDForPhoneNumber(v16);
LABEL_69:
        v47 = (void *)v48;

        goto LABEL_70;
      }

      v47 = v16;
      if (-[__CFString _appearsToBeEmail](v16, "_appearsToBeEmail"))
      {
        v48 = IDSCopyIDForEmailAddress(v16);
        goto LABEL_69;
      }
    }

      v8 = 0LL;
      uint64_t v7 = v33;
    }
  }
}

LABEL_32:
              id v9 = v44;
              uint64_t v13 = v47;
            }

            id v5 = v46;
            id v16 = v48;
          }
        }

        id v10 = (char *)v10 + 1;
      }

      while (v10 != v8);
      v8 = [v6 countByEnumeratingWithState:&v57 objects:v63 count:16];
    }

    while (v8);
  }

  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v34 = v41->_sharedHomeExtraDeviceIdentities;
  v35 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v34,  "countByEnumeratingWithState:objects:count:",  &v49,  v61,  16LL);
  if (v35)
  {
    __int128 v36 = v35;
    __int128 v37 = *(void *)v50;
    do
    {
      for (i = 0LL; i != v36; i = (char *)i + 1)
      {
        if (*(void *)v50 != v37) {
          objc_enumerationMutation(v34);
        }
        __int128 v39 = *(void *)(*((void *)&v49 + 1) + 8LL * (void)i);
        -[NSMutableArray addObject:](v5, "addObject:", v39);
        if (dword_100132130 <= 30
          && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
        {
          LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolvableAccessoriesUpdated:]",  30LL,  "SharedHome identity added extra: %@\n",  v39);
        }
      }

      __int128 v36 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v34,  "countByEnumeratingWithState:objects:count:",  &v49,  v61,  16LL);
    }

    while (v36);
  }

  objc_storeStrong((id *)&v41->_sharedHomeDeviceIdentities, v5);
  if (dword_100132130 <= 30 && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL))) {
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolvableAccessoriesUpdated:]",  30LL,  "SharedHome peers updated: %d peer(s)\n",  -[NSMutableArray count](v5, "count"));
  }
  __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
  [v40 postDaemonInfoChanges:512];

  -[RPIdentityDaemon _postIdentitiesChangedNotification](v41, "_postIdentitiesChangedNotification");
}
    }

    if ((v4 & 8) != 0 && self->_prefFamilyResolve)
    {
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      id v11 = (NSArray *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 4LL, 0LL));
      __int128 v21 = -[NSArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v83,  v104,  16LL);
      if (v21)
      {
        __int128 v22 = v21;
        uint64_t v23 = *(void *)v84;
LABEL_36:
        __int128 v24 = 0LL;
        while (1)
        {
          if (*(void *)v84 != v23) {
            objc_enumerationMutation(v11);
          }
          id v16 = *(void **)(*((void *)&v83 + 1) + 8 * v24);
          if ([v16 verifyAuthTagPtr:v96 authTagLen:v95 dataPtr:v98 dataLen:6 type:1 error:0]) {
            break;
          }
          if (v22 == (id)++v24)
          {
            __int128 v22 = -[NSArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v83,  v104,  16LL);
            if (v22) {
              goto LABEL_36;
            }
            goto LABEL_42;
          }
        }

        if (dword_100132130 <= 20
          && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 20LL)))
        {
          v54 = CUDescriptionWithLevel(v6, 30LL);
          v51 = (void *)objc_claimAutoreleasedReturnValue(v54);
          LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForBonjourDevice:typeFlags:]",  20LL,  "Resolved DeviceAuthTag: family, %@ -> %@\n",  v51,  v16);
          goto LABEL_140;
        }

        goto LABEL_141;
      }

  -[RPMediaControlDaemon _mediaRemoteVolumeControlUpdate](self, "_mediaRemoteVolumeControlUpdate");
}
}

LABEL_70:
    if ([v47 isEqual:v16])
    {

      id v16 = @"=";
    }

    v71 = v47;
    if (v47)
    {
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v47));
      if (v33)
      {
        v78 = 0LL;
        v77 = 0LL;
        v69 = &v77;
        v58 = -[IDSService sendData:fromAccount:toDestinations:priority:options:identifier:error:]( v46,  "sendData:fromAccount:toDestinations:priority:options:identifier:error:",  v28,  v33,  v57,  300LL,  v30,  &v78);
        v70 = v78;
        v59 = v77;
      }

      else
      {
        v75 = 0LL;
        v76 = 0LL;
        v58 = -[IDSService sendData:toDestinations:priority:options:identifier:error:]( v46,  "sendData:toDestinations:priority:options:identifier:error:",  v28,  v57,  300LL,  v30,  &v76,  &v75);
        v70 = v76;
        v59 = v75;
      }

      v72 = v59;

      if ((v58 & 1) != 0)
      {
        if (dword_1001311F8 > 30)
        {
          v50 = 1;
          v15 = v74;
        }

        else
        {
          v15 = v74;
          if (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 30LL))
          {
            v65 = (void *)objc_claimAutoreleasedReturnValue([v33 loginID]);
            LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon sendIDSMessage:cloudServiceID:frameType:destinationID:sendFlags:msgCtx:error:]",  30LL,  "IDS send frame %s, to '%@' (%@), Account %@, ClSI '%@', %zu bytes, IDS ID %@\n",  v73,  v71,  v16,  v65,  v74,  v27,  v70);
          }

          v50 = 1;
        }
      }

      else
      {
        if (dword_1001311F8 <= 90
          && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL)))
        {
          LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon sendIDSMessage:cloudServiceID:frameType:destinationID:sendFlags:msgCtx:error:]",  90LL,  "### IDS send frame failed: %s, %{error}\n",  v73,  v72);
        }

        v15 = v74;
        if (a9)
        {
          v66 = RPNestedErrorF( (uint64_t)v72,  4294960549LL,  (uint64_t)"IDS send failed",  v60,  v61,  v62,  v63,  v64,  (uint64_t)v69);
          v50 = 0;
          *a9 = (id)objc_claimAutoreleasedReturnValue(v66);
        }

        else
        {
          v50 = 0;
        }
      }
    }

    else if (a9)
    {
      v68 = RPErrorF(4294960591LL, (uint64_t)"Bad destination ID", v51, v52, v53, v54, v55, v56, (uint64_t)v69);
      v50 = 0;
      *a9 = (id)objc_claimAutoreleasedReturnValue(v68);
    }

    else
    {
      v50 = 0;
    }

LABEL_92:
    goto LABEL_93;
  }

  if (v81[0]) {
    v34 = v81[0];
  }
  else {
    v34 = 4294960596LL;
  }
  v35 = RPErrorF(v34, (uint64_t)"Encode failed", v20, v21, v22, v23, v24, v25, (uint64_t)v69);
  __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
  if (dword_1001311F8 <= 90 && (dword_1001311F8 != -1 || _LogCategory_Initialize(&dword_1001311F8, 90LL))) {
    LogPrintF( &dword_1001311F8,  "-[RPCloudDaemon sendIDSMessage:cloudServiceID:frameType:destinationID:sendFlags:msgCtx:error:]",  90LL,  "### IDS send frame failed: %s, %{error}\n",  v18,  v36);
  }
  if (a9) {
    *a9 = v36;
  }

  v50 = 0;
LABEL_93:

  return v50;
}

    goto LABEL_76;
  }

void sub_100009BB8(_Unwind_Exception *a1)
{
}

unint64_t *RPBonjourFlagsUpdateWithRPCompanionLinkFlags(unint64_t *result, unsigned int a2)
{
  *Class result = *result & 0xFFFFFFFFFFFFF803LL | (a2 >> 1) & 4 | (2 * a2) & 0x68 | (16 * ((a2 >> 1) & 1)) | (a2 >> 1) & 0x80 | (a2 >> 2) & 0x700;
  return result;
}

BOOL sub_100009D20()
{
  if (qword_1001331F8 != -1) {
    dispatch_once(&qword_1001331F8, &stru_1001112A8);
  }
  return byte_1001331F0 && IsAppleInternalBuild() != 0;
}

void sub_100009D78(id a1)
{
  byte_1001331F0 = MGGetBoolAnswer(@"IsVirtualDevice");
}

id RPErrorF( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = NSErrorV(@"RPErrorDomain", a1, a2, &a9);
  return (id)objc_claimAutoreleasedReturnValue(v9);
}

id sub_100009DD8(void *a1)
{
  v1 = (void *)objc_claimAutoreleasedReturnValue([a1 componentsSeparatedByString:@","]);
  if ((unint64_t)[v1 count] < 2)
  {
    id v6 = 0LL;
  }

  else
  {
    unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([v1 objectAtIndexedSubscript:0]);
    id v3 = (char *)[v2 rangeOfString:@"iPad"];
    if (v4)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 substringFromIndex:&v3[v4]]);

      id v6 = [v5 intValue];
      unsigned int v2 = v5;
    }

    else
    {
      id v6 = 0LL;
    }
  }

  return v6;
}

id sub_100009E80(void *a1)
{
  v1 = (void *)objc_claimAutoreleasedReturnValue([a1 componentsSeparatedByString:@","]);
  if ((unint64_t)[v1 count] < 2)
  {
    id v3 = 0LL;
  }

  else
  {
    unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([v1 objectAtIndexedSubscript:1]);
    if ([v2 length]) {
      id v3 = [v2 intValue];
    }
    else {
      id v3 = 0LL;
    }
  }

  return v3;
}

id sub_100009F04(void *a1)
{
  v1 = (void *)objc_claimAutoreleasedReturnValue([a1 componentsSeparatedByString:@","]);
  if ((unint64_t)[v1 count] < 2)
  {
    id v6 = 0LL;
  }

  else
  {
    unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([v1 objectAtIndexedSubscript:0]);
    id v3 = (char *)[v2 rangeOfString:@"AppleTV"];
    if (v4)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 substringFromIndex:&v3[v4]]);

      id v6 = [v5 intValue];
      unsigned int v2 = v5;
    }

    else
    {
      id v6 = 0LL;
    }
  }

  return v6;
}

id RPNestedErrorF( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = NSErrorNestedV(@"RPErrorDomain", a2, a1, a3, &a9);
  return (id)objc_claimAutoreleasedReturnValue(v9);
}

id RPVersionToSourceVersionString(uint64_t a1)
{
  v3[0] = 0;
  SourceVersionToCString(a1, v3);
  if (v3[0]) {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3));
  }
  else {
    v1 = 0LL;
  }
  return v1;
}

id sub_10000A05C(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = GestaltProductTypeStringToDeviceClass();
  int v4 = *a2;
  unsigned int v5 = a2[2];
  unsigned int v6 = a2[4];
  if ((DeviceOSVersionAtOrLaterEx(v3, *a2, v5, v6, 180000LL, 150000LL, 180000LL, 110000LL, 20000) & 1) != 0)
  {
    uint64_t v7 = 6000000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLaterEx(v3, *a2, a2[2], a2[4], 170600LL, 140600LL, 170600LL, 100600LL, 10300) & 1) != 0)
  {
    uint64_t v7 = 5600000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLaterEx(v3, *a2, a2[2], a2[4], 170500LL, 140500LL, 170500LL, 100500LL, 10200) & 1) != 0)
  {
    uint64_t v7 = 5500000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLaterEx(v3, *a2, a2[2], a2[4], 170400LL, 140400LL, 170400LL, 100400LL, 10100) & 1) != 0)
  {
    uint64_t v7 = 5420000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLaterEx(v3, *a2, a2[2], a2[4], 170300LL, 140300LL, 170300LL, 100300LL, 10000) & 1) != 0)
  {
    uint64_t v7 = 5300000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLaterEx(v3, *a2, a2[2], a2[4], 170200LL, 140200LL, 170200LL, 100200LL, 10000) & 1) != 0)
  {
    uint64_t v7 = 5220000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLaterEx(v3, *a2, a2[2], a2[4], 170100LL, 140100LL, 170100LL, 100100LL, 10000) & 1) != 0)
  {
    uint64_t v7 = 5100000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 170000LL, 140000LL, 170000LL, 100000LL) & 1) != 0)
  {
    uint64_t v7 = 5000000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 160400LL, 130300LL, 160400LL, 90400LL) & 1) != 0)
  {
    uint64_t v7 = 4400000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 160300LL, 130200LL, 160300LL, 90300LL) & 1) != 0)
  {
    uint64_t v7 = 4300000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 160200LL, 130100LL, 160200LL, 90200LL) & 1) != 0)
  {
    uint64_t v7 = 4200000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 160100LL, 130000LL, 160100LL, 90100LL) & 1) != 0)
  {
    uint64_t v7 = 4100000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 160000LL, 130000LL, 160000LL, 90000LL) & 1) != 0)
  {
    uint64_t v7 = 4000000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 150400LL, 120300LL, 150400LL, 80500LL) & 1) != 0)
  {
    uint64_t v7 = 3400000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 150300LL, 120200LL, 150300LL, 80300LL) & 1) != 0)
  {
    uint64_t v7 = 3300000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 150200LL, 120100LL, 150200LL, 80300LL) & 1) != 0)
  {
    uint64_t v7 = 3200000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 150100LL, 120001LL, 150100LL, 80100LL) & 1) != 0)
  {
    uint64_t v7 = 3100000LL;
    goto LABEL_58;
  }

  if (DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 150000LL, 120000LL, 150000LL, 80000LL))
  {
    if ((_DWORD)v3 == 100) {
      uint64_t v7 = 3050000LL;
    }
    else {
      uint64_t v7 = 3000000LL;
    }
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 140700LL, 110500LL, 140700LL, 70600LL) & 1) != 0)
  {
    uint64_t v7 = 2600000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 140600LL, 110400LL, 140600LL, 70500LL) & 1) != 0)
  {
    uint64_t v7 = 2500000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 140500LL, 110300LL, 140500LL, 70400LL) & 1) != 0)
  {
    uint64_t v7 = 2400000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 140400LL, 110200LL, 140400LL, 70300LL) & 1) != 0)
  {
    uint64_t v7 = 2300000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 140300LL, 110100LL, 140300LL, 70200LL) & 1) != 0)
  {
    uint64_t v7 = 2200000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 140200LL, 110000LL, 140200LL, 70100LL) & 1) != 0)
  {
    uint64_t v7 = 2100000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 140000LL, 101600LL, 140000LL, 70000LL) & 1) != 0)
  {
    uint64_t v7 = 2000000LL;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 130202LL, 101504LL, 130202LL, 60102LL) & 1) != 0)
  {
    unsigned __int16 v8 = -16080;
LABEL_57:
    uint64_t v7 = v8 | 0x1D0000u;
    goto LABEL_58;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 130201LL, 101502LL, 130201LL, 60101LL) & 1) != 0)
  {
    unsigned __int16 v8 = 19456;
    goto LABEL_57;
  }

  if ((DeviceOSVersionAtOrLater(v3, *a2, a2[2], a2[4], 130200LL, 101501LL, 130200LL, 60100LL) & 1) != 0)
  {
    uint64_t v7 = 1900000LL;
  }

  else if (NADyFF4UGjtVGBmEW6h(v3, *a2, a2[2], a2[4]))
  {
    if (((v3 & 0xFFFFFFFD) == 1 || (_DWORD)v3 == 2) && 10000 * v4 + 100 * v5 + v6 > 0x1FC33) {
      uint64_t v7 = 1820000LL;
    }
    else {
      uint64_t v7 = 1800000LL;
    }
  }

  else if ((TN6sBSnEP2(v3, *a2, a2[2], a2[4]) & 1) != 0)
  {
    uint64_t v7 = 1660000LL;
  }

  else
  {
    if (!wInTP56r94EFs9NAAi(v3, *a2, a2[2], a2[4]))
    {
      id v10 = 0LL;
      return v10;
    }

    uint64_t v7 = 1600000LL;
  }

LABEL_58:
  id v9 = RPVersionToSourceVersionString(v7);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  return v10;
}

        id v33 = 0;
        goto LABEL_59;
      }

id sub_10000A85C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 < 1) {
    return 0LL;
  }
  id v3 = 0LL;
  NSAppendPrintF(&v3, "%d.%d.%d", v1, a1[1], a1[2]);
  return v3;
}

id sub_10000A8B0(uint64_t a1)
{
  id v7 = 0LL;
  NSAppendPrintF(&v7, "%#{pid}", a1);
  id v1 = v7;
  id v2 = [v1 rangeOfString:@":"];
  id v3 = 0LL;
  if (v2 != (id)0x7FFFFFFFFFFFFFFFLL) {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "substringWithRange:", 0, v2));
  }
  if (v3) {
    int v4 = v3;
  }
  else {
    int v4 = v1;
  }
  id v5 = v4;

  return v5;
}

void sub_10000A948(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  id v8 = (id)objc_claimAutoreleasedReturnValue([a1 componentsSeparatedByString:@"."]);
  id v3 = [v8 count];
  if (v3)
  {
    unint64_t v4 = (unint64_t)v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:0]);
    *a2 = [v5 integerValue];

    if (v4 != 1)
    {
      unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:1]);
      a2[1] = [v6 integerValue];

      if (v4 >= 3)
      {
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:2]);
        a2[2] = [v7 integerValue];
      }
    }
  }
}

BOOL sub_10000AA10(int a1)
{
  return a1 == 4 || a1 == 7;
}

BOOL sub_10000AA20()
{
  if (qword_100133208 != -1) {
    dispatch_once(&qword_100133208, &stru_1001112C8);
  }
  return (byte_100133200 & 1) == 0;
}

void sub_10000AA68(id a1)
{
  if (CFPrefs_GetInt64(@"com.apple.rapport", @"privateLoggingEnabled", v1)) {
    byte_100133200 = 0;
  }
}

id sub_10000AAC4(uint64_t a1, int a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithCString:encoding:]( &OBJC_CLASS___NSMutableString,  "stringWithCString:encoding:",  a1,  4LL));
  unint64_t v4 = v3;
  if (a2) {
    id v5 = @"'%@'";
  }
  else {
    id v5 = @"'%~@'";
  }
  [v3 appendString:v5];
  id v6 = v4;
  id v7 = [v6 UTF8String];

  return v7;
}

void sub_10000AE00(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___RPCompanionLinkDaemon);
  id v2 = (void *)qword_100133210;
  qword_100133210 = (uint64_t)v1;
}

BOOL sub_10000B018(id a1, NSString *a2)
{
  return -[NSString hasPrefix:](a2, "hasPrefix:", @"AppleTV");
}

BOOL sub_10000B028(id a1, NSString *a2)
{
  id v2 = a2;
  if (-[NSString hasPrefix:](v2, "hasPrefix:", @"AudioAccessory1,")
    || -[NSString hasPrefix:](v2, "hasPrefix:", @"AudioAccessory5,")
    || -[NSString hasPrefix:](v2, "hasPrefix:", @"AudioAccessory6,"))
  {
    unsigned __int8 v3 = 1;
  }

  else
  {
    unsigned __int8 v3 = -[NSString hasPrefix:](v2, "hasPrefix:", @"HomePod");
  }

  return v3;
}

BOOL sub_10000B0AC(id a1, NSString *a2)
{
  return -[NSString containsString:](a2, "containsString:", @"Mac");
}

BOOL sub_10000B0BC(id a1, NSString *a2)
{
  return -[NSString hasPrefix:](a2, "hasPrefix:", @"iPad");
}

BOOL sub_10000B0CC(id a1, NSString *a2)
{
  return -[NSString hasPrefix:](a2, "hasPrefix:", @"iPhone");
}

BOOL sub_10000B0DC(id a1, NSString *a2)
{
  return -[NSString hasPrefix:](a2, "hasPrefix:", @"iPod");
}

BOOL sub_10000B0EC(id a1, NSString *a2)
{
  return -[NSString hasPrefix:](a2, "hasPrefix:", @"Watch");
}

BOOL sub_10000B0FC(id a1, unint64_t a2)
{
  return (a2 >> 19) & 1;
}

BOOL sub_10000B104(id a1, unint64_t a2)
{
  return (a2 >> 14) & 1;
}

BOOL sub_10000B10C(id a1, unint64_t a2)
{
  return (a2 >> 17) & 1;
}

BOOL sub_10000B114(id a1, unint64_t a2)
{
  return (a2 >> 13) & 1;
}

void sub_10000B26C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10000B284(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10000B294(uint64_t a1)
{
}

void sub_10000B29C(void *a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  id v19 = v5;
  if (dword_100131328 <= 30)
  {
    if (dword_100131328 != -1 || (v9 = _LogCategory_Initialize(&dword_100131328, 30LL), id v5 = v19, v9))
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 peerIdentifier]);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v19 peerDeviceInfo]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 idsDeviceIdentifier]);
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon findServerClientFromID:senderIDS:]_block_invoke",  30LL,  "Checking peerIdentifier=%@, idsDeviceIdentifier=%@\n",  v6,  v8);

      id v5 = v19;
    }
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 peerIdentifier]);
  if ([v10 isEqualToString:a1[4]])
  {
  }

  else
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v19 peerDeviceInfo]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 idsDeviceIdentifier]);
    unsigned int v13 = [v12 isEqual:a1[5]];

    if (!v13) {
      goto LABEL_13;
    }
  }

  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue([v19 peerDeviceInfo]);
    v15 = (void *)objc_claimAutoreleasedReturnValue([v14 name]);
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon findServerClientFromID:senderIDS:]_block_invoke",  30LL,  "Found match, returning device='%@'\n",  v15);
  }

  uint64_t v16 = objc_claimAutoreleasedReturnValue([v19 peerDeviceInfo]);
  uint64_t v17 = *(void *)(a1[6] + 8LL);
  uint64_t v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v16;

  *a3 = 1;
LABEL_13:
}

void sub_10000B600( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10000B618(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v5 = objc_claimAutoreleasedReturnValue([a2 peerDeviceInfo]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *a3 = 1;
}

LABEL_14:
  __int128 v38 = (id *)(v296 + 5);
  v282 = (id)v296[5];
  NSAppendPrintF(&v282, "\n");
  objc_storeStrong(v38, v282);
  else {
    __int128 v39 = 0LL;
  }
  __int128 v40 = (id *)(v296 + 5);
  v281 = (id)v296[5];
  __int128 v41 = CUDescriptionWithLevel(self->_localDeviceInfo, v39);
  __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
  NSAppendPrintF(&v281, "Self: %@\n", v42);
  objc_storeStrong(v40, v281);

  else {
    __int128 v43 = 30LL;
  }
  v44 = self->_bleDiscovery;
  v45 = v44;
  if (v44)
  {
    v46 = (id *)(v296 + 5);
    v280 = (id)v296[5];
    v47 = CUDescriptionWithLevel(v44, v43);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    NSAppendPrintF(&v280, "%@\n", v48);
    objc_storeStrong(v46, v280);
  }

  v49 = self->_bleNeedsCLinkAdvertiser;
  v50 = v49;
  if (v49)
  {
    v51 = (id *)(v296 + 5);
    v279 = (id)v296[5];
    v52 = CUDescriptionWithLevel(v49, v43);
    v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
    NSAppendPrintF(&v279, "%@\n", v53);
    objc_storeStrong(v51, v279);
  }

  v54 = self->_bleNeedsCLinkAdvertiserProcessName;
  v55 = v54;
  if (v54)
  {
    v56 = (id *)(v296 + 5);
    v278 = (id)v296[5];
    NSAppendPrintF(&v278, "BLE NeedsCLink Process: %@\n", v54);
    objc_storeStrong(v56, v278);
  }

  v57 = self->_bleNeedsCLinkScanner;
  v58 = v57;
  if (v57)
  {
    v59 = (id *)(v296 + 5);
    v277 = (id)v296[5];
    v60 = CUDescriptionWithLevel(v57, v43);
    v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
    NSAppendPrintF(&v277, "%@\n", v61);
    objc_storeStrong(v59, v277);
  }

  bleNeedsCLinkDevices = self->_bleNeedsCLinkDevices;
  v275[0] = _NSConcreteStackBlock;
  v275[1] = 3221225472LL;
  v275[2] = sub_10000CC78;
  v275[3] = &unk_100111500;
  v275[4] = &v295;
  v276 = v43;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( bleNeedsCLinkDevices,  "enumerateKeysAndObjectsUsingBlock:",  v275);
  v63 = self->_bleNearbyActionV2Advertiser;
  v64 = v63;
  if (v63)
  {
    v65 = (id *)(v296 + 5);
    v274 = (id)v296[5];
    NSAppendPrintF(&v274, "%@\n", v63);
    objc_storeStrong(v65, v274);
  }

  v66 = self->_bleNearbyActionV2AdvertiserProcessName;
  v67 = v66;
  if (v66)
  {
    v68 = (id *)(v296 + 5);
    v273 = (id)v296[5];
    NSAppendPrintF(&v273, "NearbyActionV2 Adv Process: %@\n", v66);
    objc_storeStrong(v68, v273);
  }

  v69 = self->_bleNearbyActionV2Discovery;
  v70 = v69;
  if (v69)
  {
    v71 = (id *)(v296 + 5);
    v272 = (id)v296[5];
    NSAppendPrintF(&v272, "%@\n", v69);
    objc_storeStrong(v71, v272);
  }

  v72 = self->_bleNearbyInfoV2Discovery;
  v73 = v72;
  if (v72)
  {
    v74 = (id *)(v296 + 5);
    v271 = (id)v296[5];
    NSAppendPrintF(&v271, "%@\n", v72);
    objc_storeStrong(v74, v271);
  }

  if (self->_bonjourAWDLAdvertiseForPairing)
  {
    v75 = (id *)(v296 + 5);
    v270 = (id)v296[5];
    NSAppendPrintF(&v270, "AWDL advertiser for pairing: %s", "yes");
    objc_storeStrong(v75, v270);
  }

  v76 = self->_bonjourAdvertiser;
  v77 = v76;
  if (v76)
  {
    v78 = (id *)(v296 + 5);
    v269 = (id)v296[5];
    v79 = CUDescriptionWithLevel(v76, v43);
    v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
    NSAppendPrintF(&v269, "%@\n", v80);
    objc_storeStrong(v78, v269);
  }

  v81 = self->_bonjourAWDLAdvertiser;
  v82 = v81;
  if (v81)
  {
    v83 = (id *)(v296 + 5);
    v268 = (id)v296[5];
    v84 = CUDescriptionWithLevel(v81, v43);
    v85 = (void *)objc_claimAutoreleasedReturnValue(v84);
    NSAppendPrintF(&v268, "%@\n", v85);
    objc_storeStrong(v83, v268);
  }

  if (self->_bonjourAWDLAdvertiserForce)
  {
    v86 = (id *)(v296 + 5);
    v267 = (id)v296[5];
    NSAppendPrintF(&v267, "Force AWDL Advertiser\n");
    objc_storeStrong(v86, v267);
  }

  v87 = self->_bonjourBrowser;
  v88 = v87;
  if (v87)
  {
    v89 = (id *)(v296 + 5);
    v266 = (id)v296[5];
    v90 = CUDescriptionWithLevel(v87, v6);
    v91 = (void *)objc_claimAutoreleasedReturnValue(v90);
    NSAppendPrintF(&v266, "%@", v91);
    objc_storeStrong(v89, v266);
  }

  v92 = self->_bonjourBrowserAWDL;
  v93 = v92;
  if (v92)
  {
    v94 = (id *)(v296 + 5);
    v265 = (id)v296[5];
    v95 = CUDescriptionWithLevel(v92, v6);
    v96 = (void *)objc_claimAutoreleasedReturnValue(v95);
    NSAppendPrintF(&v265, "%@", v96);
    objc_storeStrong(v94, v265);
  }

  if (self->_bonjourBrowserAWDLForce)
  {
    v97 = (id *)(v296 + 5);
    v264 = (id)v296[5];
    NSAppendPrintF(&v264, "Force AWDL Browser\n");
    objc_storeStrong(v97, v264);
  }

  v98 = self->_bonjourBrowserAWDLProcess;
  v99 = v98;
  if (v98)
  {
    v100 = (id *)(v296 + 5);
    v263 = (id)v296[5];
    NSAppendPrintF(&v263, "AWDL Browser Process: %@\n", v98);
    objc_storeStrong(v100, v263);
  }

  v101 = self->_btPipe;
  v102 = v101;
  if (v101)
  {
    v103 = (id *)(v296 + 5);
    v262 = (id)v296[5];
    NSAppendPrintF(&v262, "%@\n", v101);
    objc_storeStrong(v103, v262);
  }

  v104 = self->_btPipeHighPriority;
  v105 = v104;
  if (v104)
  {
    v106 = (id *)(v296 + 5);
    v261 = (id)v296[5];
    NSAppendPrintF(&v261, "%@\n", v104);
    objc_storeStrong(v106, v261);
  }

  v107 = self->_netLinkManager;
  v108 = v107;
  if (v107)
  {
    v109 = (id *)(v296 + 5);
    v260 = (id)v296[5];
    v110 = CUDescriptionWithLevel(v107, v6);
    v111 = (void *)objc_claimAutoreleasedReturnValue(v110);
    NSAppendPrintF(&v260, "%@", v111);
    objc_storeStrong(v109, v260);
  }

  v112 = self->_tcpServer;
  v113 = v112;
  if (v112)
  {
    v114 = (id *)(v296 + 5);
    v259 = (id)v296[5];
    v115 = v112;
    if ((objc_opt_respondsToSelector(v115, "detailedDescription") & 1) != 0)
    {
      v116 = objc_claimAutoreleasedReturnValue(-[CUTCPServer detailedDescription](v115, "detailedDescription"));
    }

    else if ((objc_opt_respondsToSelector(v115, "descriptionWithLevel:") & 1) != 0)
    {
      v116 = objc_claimAutoreleasedReturnValue(-[CUTCPServer descriptionWithLevel:](v115, "descriptionWithLevel:", 20LL));
    }

    else
    {
      v117 = NSPrintF("%@\n", v115);
      v116 = objc_claimAutoreleasedReturnValue(v117);
    }

    v118 = (void *)v116;

    NSAppendPrintF(&v259, "%@", v118);
    objc_storeStrong(v114, v259);
  }

  if (self->_hidDaemon)
  {
    v258 = 0LL;
    NSAppendPrintF(&v258, " HID");
    v119 = v258;
  }

  else
  {
    v119 = 0LL;
  }

  if (self->_mediaControlDaemon)
  {
    v257 = v119;
    NSAppendPrintF(&v257, " MediaControl");
    v120 = v257;

    v119 = v120;
  }

  if (self->_siriDaemon)
  {
    v256 = v119;
    NSAppendPrintF(&v256, " Siri");
    v121 = v256;

    v119 = v121;
  }

  if (self->_textInputDaemon)
  {
    v255 = v119;
    NSAppendPrintF(&v255, " TextInput");
    v122 = v255;
  }

  else
  {
    v122 = v119;
  }

  v199 = v122;
  if (v122)
  {
    v123 = (id *)(v296 + 5);
    v254 = (id)v296[5];
    NSAppendPrintF(&v254, "Profiles: <%@ >\n", v199);
    objc_storeStrong(v123, v254);
  }

  v124 = self->_btPipeConnection != 0LL;
  v125 = (char *)-[NSMutableDictionary count](self->_bleClientConnections, "count");
  v126 = -[NSMutableDictionary count](self->_tcpClientConnections, "count");
  v127 = &v125[v124
  if (v127)
  {
    v128 = (id *)(v296 + 5);
    v253 = (id)v296[5];
    NSAppendPrintF(&v253, "%d Client Cnx\n", (_DWORD)v127);
    objc_storeStrong(v128, v253);
  }

  btPipeConnection = self->_btPipeConnection;
  if (btPipeConnection)
  {
    v130 = (id *)(v296 + 5);
    v252 = (id)v296[5];
    v131 = CUDescriptionWithLevel(btPipeConnection, v39);
    v132 = (void *)objc_claimAutoreleasedReturnValue(v131);
    NSAppendPrintF(&v252, "    %@\n", v132);
    objc_storeStrong(v130, v252);
  }

  tcpClientConnections = self->_tcpClientConnections;
  v250[0] = _NSConcreteStackBlock;
  v250[1] = 3221225472LL;
  v250[2] = sub_10000CCFC;
  v250[3] = &unk_100111528;
  v250[4] = &v295;
  v251 = v39;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( tcpClientConnections,  "enumerateKeysAndObjectsUsingBlock:",  v250);
  tcpOnDemandClientConnections = self->_tcpOnDemandClientConnections;
  v248[0] = _NSConcreteStackBlock;
  v248[1] = 3221225472LL;
  v248[2] = sub_10000CD64;
  v248[3] = &unk_100111528;
  v248[4] = &v295;
  v249 = v39;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( tcpOnDemandClientConnections,  "enumerateKeysAndObjectsUsingBlock:",  v248);
  bleClientConnections = self->_bleClientConnections;
  v246[0] = _NSConcreteStackBlock;
  v246[1] = 3221225472LL;
  v246[2] = sub_10000CDCC;
  v246[3] = &unk_100111528;
  v246[4] = &v295;
  v247 = v39;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( bleClientConnections,  "enumerateKeysAndObjectsUsingBlock:",  v246);
  v136 = (char *)-[NSMutableSet count](self->_bleServerConnections, "count");
  v137 = &v136[(void)-[NSMutableSet count](self->_tcpServerConnections, "count")];
  if (v137)
  {
    v138 = (id *)(v296 + 5);
    v245 = (id)v296[5];
    NSAppendPrintF(&v245, "%d Server Cnx\n", (_DWORD)v137);
    objc_storeStrong(v138, v245);
  }

  v243 = 0u;
  v244 = 0u;
  v241 = 0u;
  v242 = 0u;
  v139 = self->_tcpServerConnections;
  v140 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v139,  "countByEnumeratingWithState:objects:count:",  &v241,  v303,  16LL);
  if (v140)
  {
    v141 = *(void *)v242;
    do
    {
      v142 = 0LL;
      do
      {
        if (*(void *)v242 != v141) {
          objc_enumerationMutation(v139);
        }
        v143 = *(void *)(*((void *)&v241 + 1) + 8LL * (void)v142);
        v144 = (id *)(v296 + 5);
        v240 = (id)v296[5];
        v145 = CUDescriptionWithLevel(v143, v39);
        v146 = (void *)objc_claimAutoreleasedReturnValue(v145);
        NSAppendPrintF(&v240, "    %@\n", v146);
        objc_storeStrong(v144, v240);

        v142 = (char *)v142 + 1;
      }

      while (v140 != v142);
      v140 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v139,  "countByEnumeratingWithState:objects:count:",  &v241,  v303,  16LL);
    }

    while (v140);
  }

  v238 = 0u;
  v239 = 0u;
  v236 = 0u;
  v237 = 0u;
  v147 = self->_bleServerConnections;
  v148 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v147,  "countByEnumeratingWithState:objects:count:",  &v236,  v302,  16LL);
  if (v148)
  {
    v149 = *(void *)v237;
    do
    {
      v150 = 0LL;
      do
      {
        if (*(void *)v237 != v149) {
          objc_enumerationMutation(v147);
        }
        v151 = *(void *)(*((void *)&v236 + 1) + 8LL * (void)v150);
        v152 = (id *)(v296 + 5);
        v235 = (id)v296[5];
        v153 = CUDescriptionWithLevel(v151, v39);
        v154 = (void *)objc_claimAutoreleasedReturnValue(v153);
        NSAppendPrintF(&v235, "    %@\n", v154);
        objc_storeStrong(v152, v235);

        v150 = (char *)v150 + 1;
      }

      while (v148 != v150);
      v148 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v147,  "countByEnumeratingWithState:objects:count:",  &v236,  v302,  16LL);
    }

    while (v148);
  }

  personalCnx = self->_personalCnx;
  if (personalCnx)
  {
    v156 = (id *)(v296 + 5);
    v234 = (id)v296[5];
    v157 = CUDescriptionWithLevel(personalCnx, v39);
    v158 = (void *)objc_claimAutoreleasedReturnValue(v157);
    NSAppendPrintF(&v234, "Personal: %@\n", v158);
    objc_storeStrong(v156, v234);
  }

  stereoCnx = self->_stereoCnx;
  if (stereoCnx)
  {
    v160 = (id *)(v296 + 5);
    v233 = (id)v296[5];
    v161 = CUDescriptionWithLevel(stereoCnx, v39);
    v162 = (void *)objc_claimAutoreleasedReturnValue(v161);
    NSAppendPrintF(&v233, "Stereo: %@\n", v162);
    objc_storeStrong(v160, v233);
  }

  v229 = 0LL;
  v230 = &v229;
  v231 = 0x2020000000LL;
  v232 = 0LL;
  v163 = -[NSMutableDictionary count](self->_unauthDevices, "count");
  v164 = v163;
  if (v163)
  {
    v165 = (id *)(v296 + 5);
    v228 = (id)v296[5];
    NSAppendPrintF(&v228, "%d Unauth\n", (_DWORD)v163);
    objc_storeStrong(v165, v228);
  }

  unauthDevices = self->_unauthDevices;
  v226[0] = _NSConcreteStackBlock;
  v226[1] = 3221225472LL;
  v226[2] = sub_10000CE34;
  v226[3] = &unk_100111550;
  v227 = v39;
  v226[4] = &v295;
  v226[5] = &v229;
  v226[6] = v164;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](unauthDevices, "enumerateKeysAndObjectsUsingBlock:", v226);
  v230[3] = 0LL;
  v167 = -[NSMutableDictionary count](self->_bleDevices, "count");
  v168 = v167;
  if (v167)
  {
    v169 = (id *)(v296 + 5);
    v225 = (id)v296[5];
    NSAppendPrintF(&v225, "%d BLE\n", (_DWORD)v167);
    objc_storeStrong(v169, v225);
  }

  bleDevices = self->_bleDevices;
  v223[0] = _NSConcreteStackBlock;
  v223[1] = 3221225472LL;
  v223[2] = sub_10000CF14;
  v223[3] = &unk_100111550;
  v224 = v39;
  v223[4] = &v295;
  v223[5] = &v229;
  v223[6] = v168;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](bleDevices, "enumerateKeysAndObjectsUsingBlock:", v223);
  v230[3] = 0LL;
  v171 = -[NSMutableDictionary count](self->_nearbyInfoV2Devices, "count");
  v172 = v171;
  if (v171)
  {
    v173 = (id *)(v296 + 5);
    v222 = (id)v296[5];
    NSAppendPrintF(&v222, "%d NearbyInfoV2\n", (_DWORD)v171);
    objc_storeStrong(v173, v222);
  }

  nearbyInfoV2Devices = self->_nearbyInfoV2Devices;
  v220[0] = _NSConcreteStackBlock;
  v220[1] = 3221225472LL;
  v220[2] = sub_10000CFF4;
  v220[3] = &unk_100111550;
  v221 = v39;
  v220[4] = &v295;
  v220[5] = &v229;
  v220[6] = v172;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( nearbyInfoV2Devices,  "enumerateKeysAndObjectsUsingBlock:",  v220);
  v230[3] = 0LL;
  v175 = -[NSMutableDictionary count](self->_pairedDevices, "count");
  v176 = v175;
  if (v175)
  {
    v177 = (id *)(v296 + 5);
    v219 = (id)v296[5];
    NSAppendPrintF(&v219, "%d Paired\n", (_DWORD)v175);
    objc_storeStrong(v177, v219);
  }

  pairedDevices = self->_pairedDevices;
  v217[0] = _NSConcreteStackBlock;
  v217[1] = 3221225472LL;
  v217[2] = sub_10000D0D4;
  v217[3] = &unk_100111550;
  v218 = v39;
  v217[4] = &v295;
  v217[5] = &v229;
  v217[6] = v176;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](pairedDevices, "enumerateKeysAndObjectsUsingBlock:", v217);
  v230[3] = 0LL;
  v179 = -[NSMutableDictionary count](self->_homeHubDevices, "count");
  v180 = v179;
  if (v179)
  {
    v181 = (id *)(v296 + 5);
    v216 = (id)v296[5];
    NSAppendPrintF(&v216, "%d HomeHub\n", (_DWORD)v179);
    objc_storeStrong(v181, v216);
  }

  homeHubDevices = self->_homeHubDevices;
  v214[0] = _NSConcreteStackBlock;
  v214[1] = 3221225472LL;
  v214[2] = sub_10000D1B4;
  v214[3] = &unk_100111550;
  v215 = v39;
  v214[4] = &v295;
  v214[5] = &v229;
  v214[6] = v180;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](homeHubDevices, "enumerateKeysAndObjectsUsingBlock:", v214);
  if (-[NSMutableDictionary count](self->_xpcMatchingMap, "count"))
  {
    v183 = (id *)(v296 + 5);
    v213 = (id)v296[5];
    NSAppendPrintF( &v213,  "%d LaunchOnDemand\n",  -[NSMutableDictionary count](self->_xpcMatchingMap, "count"));
    objc_storeStrong(v183, v213);
    xpcMatchingMap = self->_xpcMatchingMap;
    v212[0] = _NSConcreteStackBlock;
    v212[1] = 3221225472LL;
    v212[2] = sub_10000D294;
    v212[3] = &unk_100111578;
    v212[4] = &v295;
    -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( xpcMatchingMap,  "enumerateKeysAndObjectsUsingBlock:",  v212);
  }

  v185 = mach_absolute_time();
  if (-[NSMutableDictionary count](self->_activeSessions, "count"))
  {
    v186 = (id *)(v296 + 5);
    v211 = (id)v296[5];
    NSAppendPrintF(&v211, "%d Session(s)\n", -[NSMutableDictionary count](self->_activeSessions, "count"));
    objc_storeStrong(v186, v211);
    activeSessions = self->_activeSessions;
    v210[0] = _NSConcreteStackBlock;
    v210[1] = 3221225472LL;
    v210[2] = sub_10000D378;
    v210[3] = &unk_1001115A0;
    v210[4] = &v295;
    v210[5] = v185;
    -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( activeSessions,  "enumerateKeysAndObjectsUsingBlock:",  v210);
  }

  if (-[NSMutableSet count](self->_xpcConnections, "count"))
  {
    v188 = (id *)(v296 + 5);
    v209 = (id)v296[5];
    NSAppendPrintF(&v209, "%d XPC Cnx\n", -[NSMutableSet count](self->_xpcConnections, "count"));
    objc_storeStrong(v188, v209);
    v207 = 0u;
    v208 = 0u;
    v205 = 0u;
    v206 = 0u;
    v189 = self->_xpcConnections;
    v190 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v189,  "countByEnumeratingWithState:objects:count:",  &v205,  v301,  16LL);
    if (v190)
    {
      v191 = *(void *)v206;
      do
      {
        v192 = 0LL;
        do
        {
          if (*(void *)v206 != v191) {
            objc_enumerationMutation(v189);
          }
          v193 = *(void *)(*((void *)&v205 + 1) + 8LL * (void)v192);
          v194 = (id *)(v296 + 5);
          v204 = (id)v296[5];
          v195 = CUDescriptionWithLevel(v193, v39);
          v196 = (void *)objc_claimAutoreleasedReturnValue(v195);
          NSAppendPrintF(&v204, "    %@", v196);
          objc_storeStrong(v194, v204);

          v192 = (char *)v192 + 1;
        }

        while (v190 != v192);
        v190 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v189,  "countByEnumeratingWithState:objects:count:",  &v205,  v301,  16LL);
      }

      while (v190);
    }
  }

  uint64_t v5 = (id)v296[5];
  _Block_object_dispose(&v229, 8);

  _Block_object_dispose(&v295, 8);
  return v5;
}

  return v3;
}

  v131 = v7;
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 accountID]);
  uint64_t v18 = v17;
  if (v17)
  {
    accountID = self->_accountID;
    v20 = v17;
    __int128 v21 = accountID;
    if (v20 == v21)
    {
    }

    else
    {
      __int128 v22 = v21;
      if (v21)
      {
        uint64_t v23 = -[NSString isEqual:](v20, "isEqual:", v21);

        if ((v23 & 1) != 0) {
          goto LABEL_22;
        }
      }

      else
      {
      }

      objc_storeStrong((id *)&self->_accountID, v18);
      id v8 = 2;
    }
  }
}

  -[NSMutableString appendString:](v4, "appendString:", @" atv");
  if ((a3 & 0x20) != 0)
  {
LABEL_15:
    uint64_t v5 = @" homepod";
    goto LABEL_16;
  }

    uint64_t v5 = 0LL;
    goto LABEL_15;
  }

  uint64_t v5 = v4;
LABEL_15:

  return v5;
}

    -[RPRemoteDisplayDaemon _update](self, "_update");
    id v7 = 1;
    goto LABEL_15;
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_xpcMatchingServerMap,  "objectForKeyedSubscript:",  v4));

  if (v6)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_xpcMatchingServerMap,  "setObject:forKeyedSubscript:",  0LL,  v4);
    if (dword_100132BB0 <= 30
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon removeXPCMatchingToken:]",  30LL,  "Removed server XPC matching token %llu\n");
    }

    goto LABEL_14;
  }

  id v7 = 0;
LABEL_15:

  return v7;
}

void sub_10000CBC0(_Unwind_Exception *a1)
{
}

void sub_10000CC78(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a3 bleDevice]);
  uint64_t v6 = CUDescriptionWithLevel(v5, *(unsigned int *)(a1 + 40));
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  NSAppendPrintF(&obj, "    %@\n", v7);
  objc_storeStrong((id *)(v4 + 40), obj);
}

void sub_10000CCFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v3 + 40);
  uint64_t v4 = CUDescriptionWithLevel(a3, *(unsigned int *)(a1 + 40));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  NSAppendPrintF(&obj, "    %@\n", v5);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_10000CD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v3 + 40);
  uint64_t v4 = CUDescriptionWithLevel(a3, *(unsigned int *)(a1 + 40));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  NSAppendPrintF(&obj, "   %@\n", v5);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_10000CDCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v3 + 40);
  uint64_t v4 = CUDescriptionWithLevel(a3, *(unsigned int *)(a1 + 40));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  NSAppendPrintF(&obj, "    %@\n", v5);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_10000CE34(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v6 + 40);
  uint64_t v7 = CUDescriptionWithLevel(a3, *(unsigned int *)(a1 + 56));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  NSAppendPrintF(&obj, "    %@\n", v8);
  objc_storeStrong((id *)(v6 + 40), obj);

  unint64_t v9 = ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v9 >= 0x11)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v11 = *(id *)(v10 + 40);
    NSAppendPrintF(&v11, "    ... %d more not shown\n", *(_DWORD *)(a1 + 48) - v9);
    objc_storeStrong((id *)(v10 + 40), v11);
    *a4 = 1;
  }

void sub_10000CF14(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v6 + 40);
  uint64_t v7 = CUDescriptionWithLevel(a3, *(unsigned int *)(a1 + 56));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  NSAppendPrintF(&obj, "    %@\n", v8);
  objc_storeStrong((id *)(v6 + 40), obj);

  unint64_t v9 = ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v9 >= 0x11)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v11 = *(id *)(v10 + 40);
    NSAppendPrintF(&v11, "    ... %d more not shown\n", *(_DWORD *)(a1 + 48) - v9);
    objc_storeStrong((id *)(v10 + 40), v11);
    *a4 = 1;
  }

void sub_10000CFF4(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v6 + 40);
  uint64_t v7 = CUDescriptionWithLevel(a3, *(unsigned int *)(a1 + 56));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  NSAppendPrintF(&obj, "    %@\n", v8);
  objc_storeStrong((id *)(v6 + 40), obj);

  unint64_t v9 = ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v9 >= 0x11)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v11 = *(id *)(v10 + 40);
    NSAppendPrintF(&v11, "    ... %d more not shown\n", *(_DWORD *)(a1 + 48) - v9);
    objc_storeStrong((id *)(v10 + 40), v11);
    *a4 = 1;
  }

void sub_10000D0D4(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v6 + 40);
  uint64_t v7 = CUDescriptionWithLevel(a3, *(unsigned int *)(a1 + 56));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  NSAppendPrintF(&obj, "    %@\n", v8);
  objc_storeStrong((id *)(v6 + 40), obj);

  unint64_t v9 = ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v9 >= 0x11)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v11 = *(id *)(v10 + 40);
    NSAppendPrintF(&v11, "    ... %d more not shown\n", *(_DWORD *)(a1 + 48) - v9);
    objc_storeStrong((id *)(v10 + 40), v11);
    *a4 = 1;
  }

void sub_10000D1B4(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v6 + 40);
  uint64_t v7 = CUDescriptionWithLevel(a3, *(unsigned int *)(a1 + 56));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  NSAppendPrintF(&obj, "    %@\n", v8);
  objc_storeStrong((id *)(v6 + 40), obj);

  unint64_t v9 = ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v9 >= 0x11)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v11 = *(id *)(v10 + 40);
    NSAppendPrintF(&v11, "    ... %d more not shown\n", *(_DWORD *)(a1 + 48) - v9);
    objc_storeStrong((id *)(v10 + 40), v11);
    *a4 = 1;
  }

void sub_10000D294(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 event]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"type"]);
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"serviceType"]);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v10 + 40);
  unsigned int v11 = [v5 state];

  NSAppendPrintF(&obj, "    %@ : %@, state %d, token %@\n", v8, v9, v11, v6);
  objc_storeStrong((id *)(v10 + 40), obj);
}

void sub_10000D378(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v4 + 40);
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 serviceType]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 peerID]);
  id v8 = [v5 sessionID];
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = [v5 startTicks];

  uint64_t v11 = UpTicksToSeconds(v9 - (void)v10);
  NSAppendPrintF(&obj, "    Service %@, PeerID %@, ID 0x%llX, %ll{dur}\n", v6, v7, v8, v11);
  objc_storeStrong((id *)(v4 + 40), obj);
}

id sub_10000D494(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (!*(_BYTE *)(v1 + 8))
  {
    *(_BYTE *)(v1 + _Block_object_dispose(&STACK[0x548], 8) = 1;
    return _[*((id *)result + 4) _activate];
  }

  return result;
}

id sub_10000D70C(uint64_t a1)
{
  return [*(id *)(a1 + 32) prefsChanged];
}

void *sub_10000D714(uint64_t a1)
{
  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
  {
    if (*(void *)(*(void *)(a1 + 32) + 536LL)) {
      id v2 = "yes";
    }
    else {
      id v2 = "no";
    }
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _activate]_block_invoke_2",  30LL,  "HomeKit wait ending: LTPK %s\n",  v2);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 560LL) = 0;
  Class result = *(void **)(a1 + 32);
  if (!result[67]) {
    return [result _update];
  }
  return result;
}

id sub_10000D7D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_10000D7D8(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 596LL) = 1;
  [*(id *)(a1 + 32) _localDeviceUpdate];
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
  [v1 updateSharedTVIdentities];
}

id sub_10000D878(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidate];
}

LABEL_26:
  if (self->_deviceAuthTagStr)
  {
    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon daemonInfoChanged:]",  30LL,  "Clearing cached DeviceAuthTag to re-generate for updated SelfIdentity\n");
    }

    deviceAuthTagStr = self->_deviceAuthTagStr;
    self->_deviceAuthTagStr = 0LL;
  }

  if (self->_deviceAWDLRandomID)
  {
    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon daemonInfoChanged:]",  30LL,  "Clearing cached AWDL Random ID to re-generate for updated SelfIdentity\n");
    }

    deviceAWDLRandomID = self->_deviceAWDLRandomID;
    self->_deviceAWDLRandomID = 0LL;
  }

  -[RPCompanionLinkDaemon _update](self, "_update");
  if ((a3 & 1) == 0)
  {
LABEL_5:
    if ((a3 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_40;
  }

    uint64_t v16 = v27;
    uint64_t v9 = v28;
  }

LABEL_28:
  return v15;
}

  model = self->_model;
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v4 productVersion]);
  sub_10000A948(v31, v41);
  id v32 = sub_10000A05C((uint64_t)model, v41);
  id v33 = (void *)objc_claimAutoreleasedReturnValue(v32);

  if (v33)
  {
    sourceVersion = self->_sourceVersion;
    p_sourceVersion = &self->_sourceVersion;
    __int128 v36 = v33;
    __int128 v37 = sourceVersion;
    if (v36 == v37)
    {
    }

    else
    {
      __int128 v38 = v37;
      if (v37)
      {
        __int128 v39 = -[NSString isEqual:](v36, "isEqual:", v37);

        if ((v39 & 1) != 0) {
          goto LABEL_34;
        }
      }

      else
      {
      }

      objc_storeStrong((id *)p_sourceVersion, v33);
      v12 |= 2u;
    }
  }

  v51 = *(_OWORD *)&self->_operatingSystemVersion.majorVersion;
  patchVersion = self->_operatingSystemVersion.patchVersion;
  uint64_t v29 = sub_10000A85C((uint64_t *)&v51);
  v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
  if (v5)
  {
    [v5 operatingSystemVersion];
    if (v48 < 1) {
      goto LABEL_38;
    }
    [v5 operatingSystemVersion];
    uint64_t v31 = sub_10000A85C(v47);
    id v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    id v33 = v30;
    v34 = v32;
    if (v33 == v34)
    {

      goto LABEL_38;
    }

    v35 = v34;
    if ((v33 == 0LL) == (v34 != 0LL))
    {
    }

    else
    {
      __int128 v36 = [v33 isEqual:v34];

      if ((v36 & 1) != 0)
      {
LABEL_38:
        p_sourceVersion = &self->_sourceVersion;
        if (self->_sourceVersion || !v16) {
          goto LABEL_43;
        }
        [v5 operatingSystemVersion];
        goto LABEL_41;
      }
    }

    [v5 operatingSystemVersion];
    *(_OWORD *)&self->_operatingSystemVersion.majorVersion = v51;
    self->_operatingSystemVersion.patchVersion = patchVersion;
    v13 |= 2u;
    goto LABEL_38;
  }

  v48 = 0LL;
  v49 = 0LL;
  v50 = 0LL;
  p_sourceVersion = &self->_sourceVersion;
  if (self->_sourceVersion || !v16) {
    goto LABEL_43;
  }
  memset(v46, 0, sizeof(v46));
LABEL_41:
  __int128 v38 = sub_10000A05C((uint64_t)v16, (unsigned int *)v46);
  __int128 v39 = objc_claimAutoreleasedReturnValue(v38);
  __int128 v40 = *p_sourceVersion;
  *p_sourceVersion = (NSString *)v39;

  if (*p_sourceVersion) {
    v13 |= 2u;
  }
LABEL_43:
  statusFlags = self->_statusFlags;
  __int128 v42 = [v5 supportsApplePay];
  __int128 v43 = 1572864LL;
  if (v42) {
    __int128 v43 = 9961472LL;
  }
  v44 = v43 | statusFlags;
  if (v44 != statusFlags)
  {
    self->_statusFlags = v44;
    v13 |= 2u;
  }

  return v13;
}

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v4 model]);
  __int128 v28 = v27;
  if (!v27) {
    goto LABEL_34;
  }
  uint64_t v29 = v14;
  v30 = v6;
  model = self->_model;
  id v32 = v27;
  id v33 = model;
  if (v32 == v33)
  {

    v14 = v29;
    goto LABEL_34;
  }

  v34 = v33;
  if (!v33)
  {

    id v6 = v30;
    v14 = v29;
    goto LABEL_33;
  }

  v35 = -[NSString isEqual:](v32, "isEqual:", v33);

  id v6 = v30;
  v14 = v29;
  if ((v35 & 1) == 0)
  {
LABEL_33:
    objc_storeStrong((id *)&self->_model, v28);
    v48 = 2;
  }

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 identitiesOfType:4 error:0]);

    if (v16) {
      -[NSMutableArray addObjectsFromArray:](v8, "addObjectsFromArray:", v16);
    }

    if ((v4 & 0x10) == 0)
    {
LABEL_8:
      if ((v4 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_32;
    }

    friendsSuggestedPollTimer = self->_friendsSuggestedPollTimer;
    if (!friendsSuggestedPollTimer) {
      goto LABEL_34;
    }
    if (dword_100132930 >= 31)
    {
      uint64_t v9 = friendsSuggestedPollTimer;
    }

    else
    {
      if (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)) {
        LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _friendsUpdateSuggestedIfNeeded]",  30LL,  "Friends suggest poll stop\n");
      }
      uint64_t v9 = self->_friendsSuggestedPollTimer;
      if (!v9)
      {
LABEL_34:
        if (prefFriendSuggestMax < 1) {
          return;
        }
        goto LABEL_38;
      }
    }

    dispatch_source_cancel((dispatch_source_t)v9);
    id v10 = self->_friendsSuggestedPollTimer;
    self->_friendsSuggestedPollTimer = 0LL;

    goto LABEL_34;
  }

  if (friendsSuggestedNotifyToken == -1)
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _friendsUpdateSuggestedIfNeeded]",  30LL,  "Friends suggest notify start\n");
    }

    dispatchQueue = (dispatch_queue_s *)self->_dispatchQueue;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_100089BE0;
    handler[3] = &unk_1001115C8;
    handler[4] = self;
    notify_register_dispatch( "com.apple.PeopleSuggester.ReQuery",  &self->_friendsSuggestedNotifyToken,  dispatchQueue,  handler);
  }

  prefFriendSuggestPollSeconds = self->_prefFriendSuggestPollSeconds;
  if (prefFriendSuggestPollSeconds < 1) {
    goto LABEL_26;
  }
  if (!self->_friendsSuggestedPollTimer)
  {
    if (dword_100132930 <= 30)
    {
      if (dword_100132930 == -1)
      {
        prefFriendSuggestPollSeconds = self->_prefFriendSuggestPollSeconds;
      }

      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _friendsUpdateSuggestedIfNeeded]",  30LL,  "Friends suggest poll start: %d seconds\n",  prefFriendSuggestPollSeconds);
    }

  return 0;
}

      uint64_t v16 = 0LL;
      v15 = 0;
      goto LABEL_27;
    }

    goto LABEL_20;
  }

  if (((unint64_t)[*(id *)(a1 + 40) statusFlags] & 0x2000000000) != 0
    && ![v5 count])
  {
    uint64_t v7 = dword_100132BB0;
    if (dword_100132BB0 <= 30)
    {
      if (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)) {
        LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _requestCameraCapabilitiesForDevice:]_block_invoke",  30,  "Not scheduling camera capabilities, deviceIdentifier %@ statusFlags %#ll{flags}",  *(void *)(a1 + 56),  [*(id *)(a1 + 40) statusFlags],  &unk_10010B0D1);
      }
      goto LABEL_26;
    }

LABEL_39:
  -[RPCompanionLinkDaemon _update](self, "_update");
  if ((a3 & 0x100) == 0)
  {
LABEL_6:
    if ((a3 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_41;
  }
}

LABEL_40:
  -[RPCompanionLinkDaemon _clientBonjourReevaluateUnauthDevices](self, "_clientBonjourReevaluateUnauthDevices");
  -[RPCompanionLinkDaemon _disconnectUnpairedDevices](self, "_disconnectUnpairedDevices");
  if ((a3 & 0x200) == 0)
  {
LABEL_7:
    if ((a3 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_42;
  }
  }

  if ((v5 & 0x400) != 0)
  {
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 12LL, 0LL));
    __int128 v25 = [v24 countByEnumeratingWithState:&v39 objects:v56 count:16];
    if (v25)
    {
      __int128 v26 = v25;
      uint64_t v27 = *(void *)v40;
      while (2)
      {
        for (m = 0LL; m != v26; m = (char *)m + 1)
        {
          if (*(void *)v40 != v27) {
            objc_enumerationMutation(v24);
          }
          if ([*(id *)(*((void *)&v39 + 1) + 8 * (void)m) verifySignature:v8 data:v9 error:0])
          {
            uint64_t v11 = v11 | 0x400;
            goto LABEL_52;
          }
        }

        __int128 v26 = [v24 countByEnumeratingWithState:&v39 objects:v56 count:16];
        if (v26) {
          continue;
        }
        break;
      }
    }

LABEL_41:
  -[RPCompanionLinkDaemon _clientBonjourReevaluateUnauthDevices](self, "_clientBonjourReevaluateUnauthDevices");
  -[RPCompanionLinkDaemon _disconnectRemovedSharedHomeDevices](self, "_disconnectRemovedSharedHomeDevices");
  if ((a3 & 8) == 0)
  {
LABEL_8:
    if ((a3 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_43;
  }

    if (!(_DWORD)v10) {
      goto LABEL_57;
    }
    goto LABEL_45;
  }

  uint64_t v18 = v17;
  id v19 = v15;
  v20 = v19;
  if (v18 == v19)
  {

    goto LABEL_15;
  }

  if (v19)
  {
    __int128 v21 = [v18 isEqual:v19];

    if ((v21 & 1) != 0) {
      goto LABEL_15;
    }
    if (a4) {
      goto LABEL_13;
    }
  }

  else
  {

    if (a4)
    {
LABEL_13:
      [v5 setIdsDeviceID:v18];
      id v10 = v10 | 0x40;
      goto LABEL_15;
    }
  }

  if (dword_100132130 <= 60 && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 60LL))) {
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _updateSelfIdentityPrivate:create:]",  60LL,  "SelfIdentity reset on IDSDeviceID change: %@ -> %@\n",  v20,  v18);
  }
  LODWORD(v10) = 1;
LABEL_57:

  return v10;
}
  }

  if (v20 != -[SFDeviceDiscovery trackPeers](self->_deviceDiscovery, "trackPeers"))
  {
    if (deviceDiscovery
      && dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      __int128 v26 = "yes";
      if (v20) {
        uint64_t v27 = "no";
      }
      else {
        uint64_t v27 = "yes";
      }
      if (!v20) {
        __int128 v26 = "no";
      }
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _discoveryEnsureStarted]",  30LL,  "Device discovery update track peers %s -> %s\n",  v27,  v26);
    }

    -[SFDeviceDiscovery setTrackPeers:](self->_deviceDiscovery, "setTrackPeers:", v20);
  }

  __int128 v28 = v20 | ((unsigned __int16)(v12 & 0x200) >> 9);
  if ((_DWORD)v28 != -[SFDeviceDiscovery overrideScreenOff](self->_deviceDiscovery, "overrideScreenOff"))
  {
    if (deviceDiscovery
      && dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      uint64_t v29 = "yes";
      if ((_DWORD)v28) {
        v30 = "no";
      }
      else {
        v30 = "yes";
      }
      if (!(_DWORD)v28) {
        uint64_t v29 = "no";
      }
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _discoveryEnsureStarted]",  30LL,  "Device discovery update screen off %s -> %s\n",  v30,  v29);
    }

    -[SFDeviceDiscovery setOverrideScreenOff:](self->_deviceDiscovery, "setOverrideScreenOff:", v28);
  }

  if (!deviceDiscovery) {
    -[SFDeviceDiscovery activateWithCompletion:](self->_deviceDiscovery, "activateWithCompletion:", &stru_100114528);
  }
}
}

          v91 = 0;
          __int128 v36 = CFDictionaryGetCFDataOfLength(v15, @"_edPK", 32LL, &v91);
          __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          if (!v37)
          {
LABEL_50:

            __int128 v42 = v91;
            if (v91 && dword_100132930 <= 60)
            {
              if (dword_100132930 != -1)
              {
LABEL_53:
                LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateIdentityType:idsDeviceID:appleID:contactID:msg:]",  60LL,  "### Device message missing EdPK: %s, '%{mask}', %.8@, %#m\n",  v16,  v13,  v12,  v42);
                goto LABEL_55;
              }

              if (_LogCategory_Initialize(&dword_100132930, 60LL))
              {
                __int128 v42 = v91;
                goto LABEL_53;
              }
            }
}

LABEL_42:
  -[RPCompanionLinkDaemon _clientBonjourReevaluateUnauthDevices](self, "_clientBonjourReevaluateUnauthDevices");
  -[RPCompanionLinkDaemon _forEachConnectionWithHandler:](self, "_forEachConnectionWithHandler:", &stru_100111608);
  if ((a3 & 0x20) == 0)
  {
LABEL_9:
    if ((a3 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }
    }

    if ((v4 & 0x20) != 0 && self->_prefFriendResolve)
    {
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      uint64_t v11 = (NSArray *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 6LL, 0LL));
      __int128 v25 = -[NSArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v79,  v103,  16LL);
      if (v25)
      {
        __int128 v26 = v25;
        uint64_t v27 = *(void *)v80;
LABEL_47:
        __int128 v28 = 0LL;
        while (1)
        {
          if (*(void *)v80 != v27) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void **)(*((void *)&v79 + 1) + 8 * v28);
          if ([v16 verifyAuthTagPtr:v96 authTagLen:v95 dataPtr:v98 dataLen:6 type:1 error:0]) {
            break;
          }
          if (v26 == (id)++v28)
          {
            __int128 v26 = -[NSArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v79,  v103,  16LL);
            if (v26) {
              goto LABEL_47;
            }
            goto LABEL_53;
          }
        }

        if (dword_100132130 <= 20
          && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 20LL)))
        {
          v56 = CUDescriptionWithLevel(v6, 30LL);
          v51 = (void *)objc_claimAutoreleasedReturnValue(v56);
          LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForBonjourDevice:typeFlags:]",  20LL,  "Resolved DeviceAuthTag: friend, %@ -> %@\n",  v51,  v16);
          goto LABEL_140;
        }

        goto LABEL_141;
      }

  if (dword_1001327D8 <= 30 && (dword_1001327D8 != -1 || _LogCategory_Initialize(&dword_1001327D8, 30LL)))
  {
    __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(-[RPNWAgentClient description](self, "description"));
    LogPrintF( &dword_1001327D8,  "-[RPNWAgentClient updateAgentClientInfo:browseResponse:listener:bundleID:advertiseDescriptor:browseDescriptor:isFl owHandler:isUsingQUIC:isTCP:agentClientPID:persona:]",  30LL,  "Updated %@",  v42);
  }
}

LABEL_43:
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
  id v8 = [v7 errorFlags];

  uint64_t v16 = 0u;
  uint64_t v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  uint64_t v9 = self->_xpcConnections;
  id v10 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v9,  "countByEnumeratingWithState:objects:count:",  &v14,  v18,  16LL);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v15;
    do
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v15 != v12) {
          objc_enumerationMutation(v9);
        }
        [*(id *)(*((void *)&v14 + 1) + 8 * (void)i) updateErrorFlags:v8];
      }

      uint64_t v11 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v9,  "countByEnumeratingWithState:objects:count:",  &v14,  v18,  16LL);
    }

    while (v11);
  }

  if ((a3 & 0x800) == 0)
  {
LABEL_10:
    if ((a3 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_56;
  }
}

  *p_prefFriendRefreshSeconds = prefFriendRefreshSeconds;
LABEL_44:
  id v19 = CFPrefs_GetInt64(@"com.apple.rapport", @"frSuggestMax", &v69);
  v20 = v69;
  if (!v69)
  {
    uint64_t v23 = "pref";
    goto LABEL_56;
  }

  v20 = 1;
  if ((DeviceClass > 0xB || ((1 << DeviceClass) & 0x80E) == 0) && DeviceClass != 100)
  {
    id v19 = 0LL;
    uint64_t v23 = "disabled";
    goto LABEL_56;
  }

  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKey:@"rapport-friend-keys-max-v2"]);

  if (v22)
  {
    uint64_t v23 = "server-v2";
  }

  else
  {
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:@"rapport-friend-keys-max"]);

    if (!v22)
    {
      uint64_t v23 = "default";
      goto LABEL_55;
    }

    uint64_t v23 = "server";
  }

  id v19 = CFGetInt64(v22, &v69);

LABEL_55:
  v20 = v69;
LABEL_56:
  __int128 v25 = v20 == 0;
  __int128 v26 = "clamped";
  uint64_t v27 = !v25;
  if (!v25) {
    __int128 v26 = v23;
  }
  if (v19 < -1) {
    uint64_t v27 = 1;
  }
  if (v19 > 1000) {
    uint64_t v27 = 1;
  }
  if (v27)
  {
    id v19 = 32LL;
    __int128 v28 = v26;
  }

  else
  {
    __int128 v28 = v23;
  }

  prefFriendSuggestMax = self->_prefFriendSuggestMax;
  if (v19 != prefFriendSuggestMax)
  {
    if (dword_100132930 <= 30)
    {
      if (dword_100132930 == -1)
      {
        LODWORD(prefFriendSuggestMax) = self->_prefFriendSuggestMax;
      }

      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon prefsChanged]",  30LL,  "FriendSuggestMax: %d -> %lld (%s)\n",  prefFriendSuggestMax,  v19,  v28);
    }

LABEL_51:
  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL))) {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon daemonInfoChanged:]",  30LL,  "Daemon info changed: %#ll{flags}\n",  a3,  &unk_100109400,  (void)v14);
  }
  -[RPCompanionLinkDaemon _clientBLEFamilyDeviceReportChanges](self, "_clientBLEFamilyDeviceReportChanges");
  if ((a3 & 0x4000) == 0)
  {
LABEL_11:
    if ((a3 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  return v8;
}

LABEL_56:
  -[RPCompanionLinkDaemon _update](self, "_update");
  if ((a3 & 0x40000) != 0) {
LABEL_12:
  }
    -[RPCompanionLinkDaemon _update](self, "_update");
LABEL_13:
  if ((a3 & 0x18000) != 0)
  {
    self->_inDiscoverySession = (a3 & 0x8000) != 0;
    -[RPCompanionLinkDaemon _update](self, "_update");
  }

  if ((a3 & 0x2000) != 0) {
    -[RPCompanionLinkDaemon _clientBonjourReevaluateUnauthDevices](self, "_clientBonjourReevaluateUnauthDevices");
  }
  if ((a3 & 2) != 0) {
    -[RPCompanionLinkDaemon _clientBonjourReevaluateUnauthDevices](self, "_clientBonjourReevaluateUnauthDevices");
  }
}

      id v33 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
      v34 = (void *)objc_claimAutoreleasedReturnValue([v33 identitiesOfType:15 error:0]);

      if (v34) {
        -[NSMutableArray addObjectsFromArray:](v8, "addObjectsFromArray:", v34);
      }

      goto LABEL_59;
    }

void sub_10000E070(id a1, RPConnection *a2, BOOL *a3)
{
}

LABEL_239:
    self->_prefMaxConnectionCount = v72;
  }

  v74 = CFPrefs_GetInt64(@"com.apple.rapport", @"mcEnabled", &v111);
  v75 = v74 != 0;
  if (v111) {
    v75 = self->_prefCommunal || v74 != 0;
  }
  if (self->_prefMediaControlEnabled != v75)
  {
    if (dword_100131328 <= 40
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 40LL)))
    {
      v77 = "yes";
      if (v75) {
        v78 = "no";
      }
      else {
        v78 = "yes";
      }
      if (!v75) {
        v77 = "no";
      }
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon prefsChanged]",  40LL,  "MediaControl enabled: %s -> %s\n",  v78,  v77);
    }

    self->_prefMediaControlEnabled = v75;
  }

  v79 = CFPrefs_GetInt64(@"com.apple.rapport", @"clServerBonjourAlways", &v111);
  v80 = v111 && self->_prefCommunal || v6 == 100 && v111 != 0 || v79 != 0;
  if (self->_prefServerBonjourAlways != v80)
  {
    if (dword_100131328 <= 40
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 40LL)))
    {
      v83 = "yes";
      if (v80) {
        v84 = "no";
      }
      else {
        v84 = "yes";
      }
      if (!v80) {
        v83 = "no";
      }
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon prefsChanged]",  40LL,  "Server Bonjour always: %s -> %s\n",  v84,  v83);
    }

    self->_prefServerBonjourAlways = v80;
  }

  v85 = CFPrefs_GetInt64(@"com.apple.rapport", @"clServerEnabled", &v111);
  v88 = v6 != 6 && v111 != 0 || v85 != 0;
  if (self->_prefServerEnabled != v88)
  {
    if (dword_100131328 <= 40
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 40LL)))
    {
      v89 = "yes";
      if (v88) {
        v90 = "no";
      }
      else {
        v90 = "yes";
      }
      if (!v88) {
        v89 = "no";
      }
      LogPrintF(&dword_100131328, "-[RPCompanionLinkDaemon prefsChanged]", 40LL, "Server enabled: %s -> %s\n", v90, v89);
    }

    self->_prefServerEnabled = v88;
  }

  v91 = CFPrefs_GetInt64(@"com.apple.rapport", @"siriEnabled", &v111);
  v92 = v91 != 0;
  if (v111) {
    v92 = self->_prefCommunal || v91 != 0;
  }
  if (self->_prefSiriEnabled != v92)
  {
    if (dword_100131328 <= 40
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 40LL)))
    {
      v94 = "yes";
      if (v92) {
        v95 = "no";
      }
      else {
        v95 = "yes";
      }
      if (!v92) {
        v94 = "no";
      }
      LogPrintF(&dword_100131328, "-[RPCompanionLinkDaemon prefsChanged]", 40LL, "Siri enabled: %s -> %s\n", v95, v94);
    }

    self->_prefSiriEnabled = v92;
  }

  v96 = CFPrefs_GetInt64(@"com.apple.rapport", @"textInputEnabled", &v111);
  v97 = v96 != 0;
  if (v111) {
    v97 = self->_prefCommunal || v96 != 0;
  }
  if (self->_prefTextInputEnabled != v97)
  {
    if (dword_100131328 <= 40
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 40LL)))
    {
      v99 = "yes";
      if (v97) {
        v100 = "no";
      }
      else {
        v100 = "yes";
      }
      if (!v97) {
        v99 = "no";
      }
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon prefsChanged]",  40LL,  "TextInput enabled: %s -> %s\n",  v100,  v99);
    }

    self->_prefTextInputEnabled = v97;
  }

  v101 = CFPrefs_GetInt64(@"com.apple.rapport", @"touchEnabled", &v111);
  LOBYTE(v102) = v101 != 0;
  if (v111 && v6 - 1 <= 0xA) {
    v102 = (0x42Fu >> (v6 - 1)) | (v101 != 0);
  }
  v103 = v102 & 1;
  if (self->_prefTouchEnabled != v103)
  {
    if (dword_100131328 <= 40
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 40LL)))
    {
      v104 = "yes";
      if (v103) {
        v105 = "no";
      }
      else {
        v105 = "yes";
      }
      if (!v103) {
        v104 = "no";
      }
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon prefsChanged]",  40LL,  "Touch enabled: %s -> %s\n",  v105,  v104);
    }

    self->_prefTouchEnabled = v103;
  }

  v106 = CFPrefs_GetInt64(@"com.apple.rapport", @"useTargetAuthTag", &v111);
  if (v111) {
    v107 = 0;
  }
  else {
    v107 = v106 == 0;
  }
  v108 = !v107;
  if (self->_prefUseTargetAuthTag != v108)
  {
    if (dword_100131328 <= 40
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 40LL)))
    {
      v109 = "yes";
      if (v108) {
        v110 = "no";
      }
      else {
        v110 = "yes";
      }
      if (!v108) {
        v109 = "no";
      }
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon prefsChanged]",  40LL,  "Use target AuthTag for AWDL bring up: %s -> %s\n",  v110,  v109);
    }

    self->_prefUseTargetAuthTag = v108;
  }

  -[RPCompanionLinkDaemon _update](self, "_update");
}

void sub_10000FB20(uint64_t a1, void *a2, void *a3)
{
  id v19 = a2;
  id v5 = a3;
  int v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 != [v5 state])
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 event]);
    CFTypeID TypeID = CFStringGetTypeID();
    uint64_t TypedValue = CFDictionaryGetTypedValue(v7, @"type", TypeID, 0LL);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(TypedValue);
    if ([v10 isEqual:@"discovery"])
    {
      CFTypeID v11 = CFStringGetTypeID();
      uint64_t v12 = CFDictionaryGetTypedValue(v7, @"serviceType", v11, 0LL);
      unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      if ([v13 isEqual:@"_companion-link._tcp"])
      {
        [v5 setState:*(unsigned __int8 *)(a1 + 32)];
        id v14 = [v19 unsignedLongLongValue];
        if (dword_100131328 <= 30)
        {
          id v15 = v14;
          if (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)) {
            LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _reportXPCMatchingDiscoveryCLink]_block_invoke",  30LL,  "LaunchOnDemand: Discovery CLink, token %llu, state %d\n",  v15,  *(unsigned __int8 *)(a1 + 32));
          }
        }

        uint64_t v16 = objc_claimAutoreleasedReturnValue([v5 handler]);
        uint64_t v17 = (void *)v16;
        if (v16)
        {
          if (*(_BYTE *)(a1 + 32)) {
            uint64_t v18 = 6LL;
          }
          else {
            uint64_t v18 = 5LL;
          }
          (*(void (**)(uint64_t, uint64_t, void, void))(v16 + 16))(v16, v18, 0LL, 0LL);
        }
      }
    }
  }
}

void sub_10000FD68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 event]);
  CFTypeID TypeID = CFStringGetTypeID();
  uint64_t TypedValue = CFDictionaryGetTypedValue(v7, @"type", TypeID, 0LL);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(TypedValue);
  if ([v10 isEqual:@"discovery"])
  {
    CFTypeID v11 = CFStringGetTypeID();
    uint64_t v12 = CFDictionaryGetTypedValue(v7, @"serviceType", v11, 0LL);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if ([v13 isEqual:@"com.apple.CompanionAuthentication"])
    {
      v20[0] = @"type";
      v20[1] = @"serviceType";
      v21[0] = v10;
      v21[1] = v13;
      v20[2] = @"deviceID";
      v21[2] = *(void *)(a1 + 32);
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v21,  v20,  3LL));
      if (dword_100131328 <= 30
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
      {
        id v15 = [v5 unsignedLongLongValue];
        uint64_t v16 = CUDescriptionWithLevel(*(void *)(a1 + 40), 20LL);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _reportXPCMatchingDiscoveryCompanionAuthenticationDevice:]_block_invoke",  30LL,  "LaunchOnDemand: Discovery Companion Authentication, token %llu, service %@, Device %@\n",  v15,  v13,  v17);
      }

      uint64_t v18 = objc_claimAutoreleasedReturnValue([v6 handler]);
      id v19 = (void *)v18;
      if (v18) {
        (*(void (**)(uint64_t, void, void *, void))(v18 + 16))(v18, 0LL, v14, 0LL);
      }
    }
  }
}

LABEL_29:
  -[RPCompanionLinkDaemon _reachabilityEnsureStopped](self, "_reachabilityEnsureStopped");
LABEL_30:
  uint64_t v18 = v17 ^ 1;
  if (self->_disabled) {
    uint64_t v18 = 1;
  }
  if ((v18 & 1) != 0) {
    -[RPCompanionLinkDaemon _bleServerEnsureStopped](self, "_bleServerEnsureStopped");
  }
  else {
    -[RPCompanionLinkDaemon _bleServerEnsureStarted](self, "_bleServerEnsureStarted");
  }
  if (self->_prefBTPipeEnabled) {
    -[RPCompanionLinkDaemon _btPipeEnsureStarted](self, "_btPipeEnsureStarted");
  }
  else {
    -[RPCompanionLinkDaemon _btPipeEnsureStopped](self, "_btPipeEnsureStopped");
  }
  if (!self->_prefClientEnabled || self->_disabled || self->_homeKitWaiting && !self->_homeKitLTPK) {
    -[RPCompanionLinkDaemon _clientEnsureStopped](self, "_clientEnsureStopped");
  }
  else {
    -[RPCompanionLinkDaemon _clientEnsureStarted](self, "_clientEnsureStarted");
  }
  if (self->_prefServerShouldRun || self->_serverBonjourInfraPairing) {
    -[RPCompanionLinkDaemon _serverEnsureStarted](self, "_serverEnsureStarted");
  }
  else {
    -[RPCompanionLinkDaemon _serverEnsureStopped](self, "_serverEnsureStopped");
  }
  id v19 = v17 ^ 1;
  if (!self->_prefHIDEnabled) {
    id v19 = 1;
  }
  if ((v19 & 1) != 0) {
    -[RPCompanionLinkDaemon _hidEnsureStopped](self, "_hidEnsureStopped");
  }
  else {
    -[RPCompanionLinkDaemon _hidEnsureStarted](self, "_hidEnsureStarted");
  }
  v20 = v17 ^ 1;
  if (!self->_prefMediaControlEnabled) {
    v20 = 1;
  }
  if ((v20 & 1) != 0) {
    -[RPCompanionLinkDaemon _mediaControlEnsureStopped](self, "_mediaControlEnsureStopped");
  }
  else {
    -[RPCompanionLinkDaemon _mediaControlEnsureStarted](self, "_mediaControlEnsureStarted");
  }
  if (self->_prefClientEnabled || self->_prefServerEnabled) {
    -[RPCompanionLinkDaemon _miscEnsureStarted](self, "_miscEnsureStarted");
  }
  else {
    -[RPCompanionLinkDaemon _miscEnsureStopped](self, "_miscEnsureStopped");
  }
  __int128 v21 = v17 ^ 1;
  if (!self->_prefSiriEnabled) {
    __int128 v21 = 1;
  }
  if ((v21 & 1) != 0) {
    -[RPCompanionLinkDaemon _siriEnsureStopped](self, "_siriEnsureStopped");
  }
  else {
    -[RPCompanionLinkDaemon _siriEnsureStarted](self, "_siriEnsureStarted");
  }
  __int128 v22 = v17 ^ 1;
  if (!self->_prefTextInputEnabled) {
    __int128 v22 = 1;
  }
  if ((v22 & 1) != 0) {
    -[RPCompanionLinkDaemon _textInputEnsureStopped](self, "_textInputEnsureStopped");
  }
  else {
    -[RPCompanionLinkDaemon _textInputEnsureStarted](self, "_textInputEnsureStarted");
  }
  -[RPCompanionLinkDaemon _clientSendActivityLevelOverWiFiIfNecessary]( self,  "_clientSendActivityLevelOverWiFiIfNecessary");
  -[RPCompanionLinkDaemon _updateAssertions](self, "_updateAssertions");
  if (self->_prefIPEnabled) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = 0;
  }
  if ((v23 & 1) == 0)
  {
    -[CUWiFiManager invalidate](self->_wifiManager, "invalidate");
    wifiManager = self->_wifiManager;
    self->_wifiManager = 0LL;
  }
}

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 identitiesOfType:5 error:0]);

    if (v18) {
      -[NSMutableArray addObjectsFromArray:](v8, "addObjectsFromArray:", v18);
    }

    if ((v4 & 0x20) == 0)
    {
LABEL_9:
      if ((v4 & 0x100) == 0) {
        goto LABEL_10;
      }
      goto LABEL_35;
    }

id sub_100010464(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_10001046C(uint64_t a1)
{
  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 784) meDeviceName]);
    unsigned int v3 = [*(id *)(*(void *)(a1 + 32) + 784) meDeviceIsMe];
    uint64_t v4 = "no";
    if (v3) {
      uint64_t v4 = "yes";
    }
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _update]_block_invoke_2",  30LL,  "Me device changed to %@ meDeviceIsMe: %s\n",  v2,  v4);
  }

  return [*(id *)(a1 + 32) _update];
}

id sub_100010524(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_10001052C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 633LL) = 1;
  return [*(id *)(a1 + 32) _update];
}

id sub_100010540(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_100010548(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_100010550(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_100010558(uint64_t a1)
{
  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
  {
    id v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 784) bluetoothAddressData]);
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _update]_block_invoke_8",  30,  "Bluetooth address changed to: %.6a",  COERCE_DOUBLE([v2 bytes]));
  }

void sub_1000105FC(id a1, NSError *a2)
{
  id v2 = a2;
  unsigned int v3 = v2;
  if (v2
    && dword_100131328 <= 90
    && ((v5 = v2, dword_100131328 != -1) || (int v4 = _LogCategory_Initialize(&dword_100131328, 90LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _update]_block_invoke_9",  90LL,  "Failed to start CBAdvertiser: %@",  v3);
  }

  else
  {
  }

void sub_100010F84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47)
{
}

void sub_100010FD8(uint64_t a1, void *a2)
{
  id v9 = a2;
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[RPCloudDaemon sharedCloudDaemon](&OBJC_CLASS___RPCloudDaemon, "sharedCloudDaemon"));
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 idsDeviceMap]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v9]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 nsuuid]);
  if (v6)
  {
    uint64_t v7 = *(void **)(a1 + 32);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 nsuuid]);
    [v7 addObject:v8];
LABEL_3:

    goto LABEL_8;
  }

  if (dword_100131328 <= 90 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _updateForXPCClientChange]_block_invoke",  90LL,  "Could not find BT ID for IDS DeviceID: %@ from client %@",  v9,  v8);
    goto LABEL_3;
  }

LABEL_8:
}
}

  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
  {
    if ([v14 length]) {
      id v8 = "set";
    }
    else {
      id v8 = "not set";
    }
    if ([v4 length]) {
      id v9 = "set";
    }
    else {
      id v9 = "not set";
    }
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _homeKitSelfAccessoryMediaAccessUpdated]",  30LL,  "HomeKit SelfAccessory MediaAccess password changed: %s -> %s\n",  v8,  v9);
  }

  -[RPCompanionLinkDevice setPassword:](self->_localDeviceInfo, "setPassword:", v4);
  uint64_t v7 = 1;
  -[RPCompanionLinkDevice setChanged:](self->_localDeviceInfo, "setChanged:", 1LL);
LABEL_19:
  id v10 = -[RPCompanionLinkDevice flags](self->_localDeviceInfo, "flags");
  CFTypeID v11 = -[CUHomeKitManager selfAccessoryMediaAccessFlags]( self->_homeKitManager,  "selfAccessoryMediaAccessFlags");
  uint64_t v12 = 8 * (v11 & 1);
  unsigned int v13 = v10 & 0xFFFFFFE3 | (16 * ((v11 >> 1) & 1)) | (4 * ([v4 length] != 0)) & 0xF7 | v12;
  if ((_DWORD)v13 != (_DWORD)v10)
  {
    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _homeKitSelfAccessoryMediaAccessUpdated]",  30LL,  "HomeKit SelfAccessory MediaAccess flags changed: %#{flags} -> %#{flags}\n",  v10,  &unk_1001097C4,  v13,  &unk_1001097C4);
    }

    -[RPCompanionLinkDevice setFlags:](self->_localDeviceInfo, "setFlags:", v13);
    -[RPCompanionLinkDevice setChanged:](self->_localDeviceInfo, "setChanged:", 1LL);
LABEL_29:
    -[RPCompanionLinkDaemon _update](self, "_update");
    if (!v12) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  if (v7) {
    goto LABEL_29;
  }
  if (v12) {
LABEL_22:
  }
    -[RPCompanionLinkDaemon _disconnectUnauthConnections](self, "_disconnectUnauthConnections");
LABEL_23:
}

    familyNotifyToken = self->_familyNotifyToken;
    p_familyNotifyToken = &self->_familyNotifyToken;
    id v8 = familyNotifyToken;
    *((void *)p_familyNotifyToken - 1) = v5[3];
    if (familyNotifyToken == -1)
    {
      notify_register_check("com.apple.rapport.familyFlagsChanged", p_familyNotifyToken);
      id v8 = *p_familyNotifyToken;
      id v5 = v13;
    }

    notify_set_state(v8, v5[3]);
    notify_post("com.apple.rapport.familyFlagsChanged");
  }

  _Block_object_dispose(&v12, 8);
}

  int v4 = sub_100098440();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = sub_100098440();
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = os_signpost_id_make_with_pointer(v7, self);

  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    id v9 = self->_bleNearbyActionV2Device;
    *(_DWORD *)buf = 138412290;
    uint64_t v16 = v9;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_INTERVAL_BEGIN,  v8,  "BLE NearbyActionV2 advertisement",  "BLE NearbyActionV2 advertiser start for device %@\n signpost_begin:begin_time",  buf,  0xCu);
  }

  id v10 = objc_alloc_init(&OBJC_CLASS___RPNearbyActionV2Advertiser);
  bleNearbyActionV2Advertiser = self->_bleNearbyActionV2Advertiser;
  self->_bleNearbyActionV2Advertiser = v10;

  -[RPNearbyActionV2Advertiser setDispatchQueue:]( self->_bleNearbyActionV2Advertiser,  "setDispatchQueue:",  self->_dispatchQueue);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[RPRemoteDisplayDevice bleTargetData](self->_bleNearbyActionV2Device, "bleTargetData"));
  -[RPNearbyActionV2Advertiser setTargetData:](self->_bleNearbyActionV2Advertiser, "setTargetData:", v12);

  -[RPNearbyActionV2Advertiser setNearbyActionType:]( self->_bleNearbyActionV2Advertiser,  "setNearbyActionType:",  -[RPRemoteDisplayDevice nearbyActionV2Type](self->_bleNearbyActionV2Device, "nearbyActionV2Type"));
  unsigned int v13 = self->_bleNearbyActionV2Advertiser;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10009913C;
  v14[3] = &unk_1001118A0;
  v14[4] = self;
  -[RPNearbyActionV2Advertiser activateWithCompletion:](v13, "activateWithCompletion:", v14);
  -[RPRemoteDisplayDaemon _clientSendNeedsAWDLOverWiFi:](self, "_clientSendNeedsAWDLOverWiFi:", 1LL);
}
}

  uint64_t v16 = self->_activeNetCnx;
  if (v16
    && dword_100132BB0 < 31
    && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
  {
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayXPCConnection sessionStartWithID:netCnx:completion:]",  30LL,  "Replacing active connection: %@ -> %@\n",  v16,  v9);
  }

  objc_storeStrong((id *)&self->_activeNetCnx, a4);
  xpcCnx = self->_xpcCnx;
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472LL;
  v57[2] = sub_1000A7614;
  v57[3] = &unk_100113728;
  uint64_t v18 = v8;
  v58 = v18;
  id v19 = v10;
  v59 = v19;
  v20 = (void *)objc_claimAutoreleasedReturnValue( -[NSXPCConnection remoteObjectProxyWithErrorHandler:]( xpcCnx,  "remoteObjectProxyWithErrorHandler:",  v57));
  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v14));
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472LL;
  v53[2] = sub_1000A76BC;
  v53[3] = &unk_100114D20;
  v54 = v18;
  v55 = v11;
  v45 = v19;
  v46 = v54;
  v56 = v45;
  v47 = v11;
  [v20 remoteDisplayStartServerSessionID:v54 device:v11 linkType:v21 completion:v53];

  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = v9;
  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v9 receivedMessages]);
  uint64_t v23 = [v22 countByEnumeratingWithState:&v49 objects:v60 count:16];
  if (v23)
  {
    __int128 v24 = v23;
    __int128 v25 = *(void *)v50;
    do
    {
      for (i = 0LL; i != v24; i = (char *)i + 1)
      {
        if (*(void *)v50 != v25) {
          objc_enumerationMutation(v22);
        }
        uint64_t v27 = *(void **)(*((void *)&v49 + 1) + 8LL * (void)i);
        __int128 v28 = objc_claimAutoreleasedReturnValue([v27 requestID]);
        if (v28)
        {
          uint64_t v29 = (void *)v28;
          v30 = objc_claimAutoreleasedReturnValue([v27 request]);
          if (v30)
          {
            uint64_t v31 = (void *)v30;
            id v32 = (void *)objc_claimAutoreleasedReturnValue([v27 sessionID]);

            if (v32)
            {
              if (dword_100132BB0 <= 30
                && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
              {
                id v33 = (void *)objc_claimAutoreleasedReturnValue([v27 requestID]);
                LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayXPCConnection sessionStartWithID:netCnx:completion:]",  30LL,  "Delivering buffered requestID %@\n",  v33);
              }

              v35 = (void *)objc_claimAutoreleasedReturnValue([v27 requestID]);
              __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v27 request]);
              __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v27 options]);
              __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v27 responseHandler]);
              __int128 v43 = (void *)objc_claimAutoreleasedReturnValue([v27 sessionID]);
              -[RPRemoteDisplayXPCConnection _receivedRequestID:request:options:responseHandler:sessionID:]( self,  "_receivedRequestID:request:options:responseHandler:sessionID:",  v35,  v40,  v41,  v42,  v43);

              goto LABEL_35;
            }
          }

          else
          {
          }
        }

        v34 = objc_claimAutoreleasedReturnValue([v27 eventID]);
        if (!v34) {
          continue;
        }
        v35 = (void *)v34;
        __int128 v36 = objc_claimAutoreleasedReturnValue([v27 event]);
        if (!v36) {
          goto LABEL_36;
        }
        __int128 v37 = (void *)v36;
        __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v27 sessionID]);

        if (!v38) {
          continue;
        }
        if (dword_100132BB0 <= 30
          && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
        {
          __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v27 eventID]);
          LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayXPCConnection sessionStartWithID:netCnx:completion:]",  30LL,  "Delivering buffered eventID %@\n",  v39);
        }

        v35 = (void *)objc_claimAutoreleasedReturnValue([v27 eventID]);
        __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v27 event]);
        __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v27 options]);
        __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v27 sessionID]);
        -[RPRemoteDisplayXPCConnection _receivedEventID:event:options:sessionID:]( self,  "_receivedEventID:event:options:sessionID:",  v35,  v40,  v41,  v42);
LABEL_35:

LABEL_36:
      }

      __int128 v24 = [v22 countByEnumeratingWithState:&v49 objects:v60 count:16];
    }

    while (v24);
  }

  v44 = (void *)objc_claimAutoreleasedReturnValue([v48 receivedMessages]);
  [v44 removeAllObjects];
}
}

void sub_1000110F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v11 = (id)objc_claimAutoreleasedReturnValue([a3 event]);
  CFTypeID TypeID = CFStringGetTypeID();
  uint64_t TypedValue = CFDictionaryGetTypedValue(v11, @"type", TypeID, 0LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(TypedValue);
  if ([v6 isEqual:@"discovery"])
  {
    CFTypeID v7 = CFStringGetTypeID();
    uint64_t v8 = CFDictionaryGetTypedValue(v11, @"serviceType", v7, 0LL);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if ([v9 isEqual:@"RPUserNotificationAppSignIn"])
    {
      uint64_t v10 = 0x4000000LL;
    }

    else
    {
      if (![v9 isEqual:@"com.apple.CompanionAuthentication"])
      {
LABEL_7:

        goto LABEL_8;
      }

      uint64_t v10 = 0x2000000000LL;
    }

    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) |= v10;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    goto LABEL_7;
  }

void sub_100011618(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 1096LL))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[RBSProcessPredicate predicateMatchingIdentifiers:]( &OBJC_CLASS___RBSProcessPredicate,  "predicateMatchingIdentifiers:"));
    id v13 = v2;
    if (*(void *)(*(void *)(a1 + 32) + 680LL))
    {
      if (dword_100131328 <= 30)
      {
        if (dword_100131328 != -1 || (v3 = _LogCategory_Initialize(&dword_100131328, 30LL), id v2 = v13, v3))
        {
          LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _updateRBSProcessMonitor]_block_invoke",  30LL,  "Updating RBS process monitor\n",  v13);
          id v2 = v13;
        }
      }

      int v4 = *(void **)(*(void *)(a1 + 32) + 680LL);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_100011BC8;
      v14[3] = &unk_100111780;
      id v5 = &v15;
      id v15 = v2;
      id v6 = v2;
      [v4 updateConfiguration:v14];
    }

    else
    {
      if (dword_100131328 <= 30)
      {
        if (dword_100131328 != -1 || (v7 = _LogCategory_Initialize(&dword_100131328, 30LL), id v2 = v13, v7))
        {
          LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _updateRBSProcessMonitor]_block_invoke",  30LL,  "Starting RBS process monitor\n",  v13);
          id v2 = v13;
        }
      }

      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      v16[2] = sub_1000117F4;
      v16[3] = &unk_100111758;
      id v5 = (id *)v17;
      uint64_t v8 = *(void *)(a1 + 32);
      v17[0] = v2;
      v17[1] = v8;
      id v9 = v2;
      uint64_t v10 = objc_claimAutoreleasedReturnValue( +[RBSProcessMonitor monitorWithConfiguration:]( &OBJC_CLASS___RBSProcessMonitor,  "monitorWithConfiguration:",  v16));
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void **)(v11 + 680);
      *(void *)(v11 + 680) = v10;
    }
  }

void sub_1000117F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___RBSProcessStateDescriptor);
  [v4 setValues:1];
  [v3 setStateDescriptor:v4];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", *(void *)(a1 + 32)));
  [v3 setPredicates:v5];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000118C0;
  v6[3] = &unk_100111730;
  v6[4] = *(void *)(a1 + 40);
  [v3 setUpdateHandler:v6];
}

void sub_1000118C0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 name]);
    id v11 = [v8 pid];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 previousState]);
    uint64_t v13 = NSStringFromRBSTaskState([v12 taskState]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v9 state]);
    uint64_t v16 = NSStringFromRBSTaskState([v15 taskState]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _updateRBSProcessMonitor]_block_invoke_3",  30LL,  "Process %@:%d state update %@ -> %@\n",  v10,  v11,  v14,  v17);
  }

  uint64_t v18 = *(void *)(a1 + 32);
  id v19 = *(dispatch_queue_s **)(v18 + 1040);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100011A60;
  block[3] = &unk_100111708;
  block[4] = v18;
  id v23 = v8;
  id v24 = v9;
  id v20 = v9;
  id v21 = v8;
  dispatch_async(v19, block);
}

void sub_100011A60(uint64_t a1)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 872LL);
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "xpcCnx", (void)v14));
        unsigned int v9 = [v8 processIdentifier];
        unsigned int v10 = [*(id *)(a1 + 40) pid];

        if (v9 == v10)
        {
          id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) state]);
          unsigned int v12 = [v11 taskState];

          if (v12 == 3)
          {
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v7 xpcCnx]);
            [v13 invalidate];
          }
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v4);
  }
}

void sub_100011BC8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v2));
  [v3 setPredicates:v4];
}

void sub_100011DCC(id a1, NSString *a2, RPConnection *a3, BOOL *a4)
{
}

void sub_100011DD4(id a1, NSString *a2, RPConnection *a3, BOOL *a4)
{
}

void sub_100011DDC(id a1, NSString *a2, RPConnection *a3, BOOL *a4)
{
}

_DWORD *sub_100012018(uint64_t a1, uint64_t a2)
{
  Class result = *(_DWORD **)(a1 + 32);
  if (result[18] == *(_DWORD *)(a1 + 40)) {
    return _[result _clientBLEDiscoveryDeviceFound:a2 deviceFlags:2];
  }
  return result;
}

_DWORD *sub_100012040(uint64_t a1, uint64_t a2)
{
  Class result = *(_DWORD **)(a1 + 32);
  if (result[18] == *(_DWORD *)(a1 + 40)) {
    return [result _clientBLEDiscoveryDeviceLost:a2 force:0 deviceFlags:2];
  }
  return result;
}

_DWORD *sub_10001206C(uint64_t a1, uint64_t a2)
{
  Class result = *(_DWORD **)(a1 + 32);
  if (result[18] == *(_DWORD *)(a1 + 40)) {
    return _[result _clientBLEDiscoveryDeviceFound:a2 deviceFlags:2];
  }
  return result;
}

uint64_t sub_100012094(uint64_t result)
{
  int v1 = *(_DWORD *)(*(void *)(result + 32) + 72LL);
  if (v1 == *(_DWORD *)(result + 40) && dword_100131328 <= 30)
  {
    if (dword_100131328 != -1) {
      return LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBLEActionDiscoveryEnsureStarted]_block_invoke_4",  30LL,  "BLE action discovery interrupted ID %u\n",  v1);
    }
    uint64_t v2 = result;
    Class result = _LogCategory_Initialize(&dword_100131328, 30LL);
    if ((_DWORD)result)
    {
      int v1 = *(_DWORD *)(v2 + 40);
      return LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBLEActionDiscoveryEnsureStarted]_block_invoke_4",  30LL,  "BLE action discovery interrupted ID %u\n",  v1);
    }
  }

  return result;
}

void sub_100012128(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v8 = v3;
    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBLEActionDiscoveryEnsureStarted]_block_invoke_5",  90LL,  "### BLE action discovery start failed: %{error}\n",  v8);
    }

    [*(id *)(*(void *)(a1 + 32) + 64) invalidate];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 64);
    *(void *)(v5 + 64) = 0LL;

    goto LABEL_10;
  }

  if (dword_100131328 <= 30)
  {
    id v8 = 0LL;
    if (dword_100131328 != -1 || (v7 = _LogCategory_Initialize(&dword_100131328, 30LL), id v4 = 0LL, v7))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBLEActionDiscoveryEnsureStarted]_block_invoke_5",  30LL,  "BLE action discovery started\n");
LABEL_10:
      id v4 = v8;
    }
  }
}

LABEL_44:
  if (self->_bleDiscovery)
  {
    id v23 = 0;
    goto LABEL_56;
  }

      -[RPCompanionLinkDaemon _update](self, "_update");

      goto LABEL_45;
    }

    uint64_t v27 = v6;
    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _serverBLENeedsCLinkScannerDeviceFound:]",  30LL,  "NeedsCLink device found: %@\n",  v4);
    }

    v30 = 0u;
    uint64_t v31 = 0u;
    __int128 v28 = 0u;
    uint64_t v29 = 0u;
    __int128 v26 = self;
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](self->_bleNeedsCLinkDevices, "allValues"));
    uint64_t v13 = [v12 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (!v13)
    {
LABEL_37:

      self = v26;
      id v6 = v27;
LABEL_43:
      id v8 = 0LL;
      goto LABEL_44;
    }

    __int128 v14 = v13;
    __int128 v15 = *(void *)v29;
LABEL_23:
    __int128 v16 = 0LL;
    while (1)
    {
      if (*(void *)v29 != v15) {
        objc_enumerationMutation(v12);
      }
      __int128 v17 = *(void **)(*((void *)&v28 + 1) + 8 * v16);
      uint64_t v18 = (id)objc_claimAutoreleasedReturnValue([v17 idsIdentifier]);
      id v19 = v7;
      id v20 = v19;
      if (v18 == v19) {
        break;
      }
      if ((v7 != 0LL) != (v18 == 0LL))
      {
        id v21 = [v18 isEqual:v19];

        if (v21) {
          goto LABEL_31;
        }
      }

      else
      {
      }

LABEL_35:
      if (v14 == (id)++v16)
      {
        __int128 v14 = [v12 countByEnumeratingWithState:&v28 objects:v32 count:16];
        if (v14) {
          goto LABEL_23;
        }
        goto LABEL_37;
      }
    }

LABEL_31:
    __int128 v22 = [v17 isBLEDeviceReplaced];

    if (v22)
    {
      if (dword_100131328 <= 30
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
      {
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _serverBLENeedsCLinkScannerDeviceFound:]",  30LL,  "Replaced NeedsCLink device %@ -> %@",  v17,  v4);
      }

      self = v26;
      id v23 = v26->_bleNeedsCLinkDevices;
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 UUIDString]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v23, "setObject:forKeyedSubscript:", 0LL, v25);

      id v6 = v27;
      goto LABEL_43;
    }

    goto LABEL_35;
  }

  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL))) {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _serverBLENeedsCLinkScannerDeviceFound:]",  30LL,  "Ignoring NeedsCLink found: No ID, %@\n",  v4);
  }
LABEL_45:
}

    id v20 = 0LL;
    goto LABEL_45;
  }

  if (dword_1001317B0 <= 30 && (dword_1001317B0 != -1 || _LogCategory_Initialize(&dword_1001317B0, 30LL))) {
    LogPrintF( &dword_1001317B0,  "+[RPNWListener findListenerForID:applicationService:fromPeer:]",  30LL,  "Found listener=%@\n",  v12);
  }
  if (![v12 automapped])
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 mappingID]);
    __int128 v14 = [v13 isEqual:v7];

    if ((v14 & 1) != 0)
    {
      id v24 = 0u;
      __int128 v25 = 0u;
      __int128 v22 = 0u;
      id v23 = 0u;
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v12 peerDevices]);
      __int128 v16 = [v15 countByEnumeratingWithState:&v22 objects:v26 count:16];
      if (v16)
      {
        __int128 v17 = v16;
        uint64_t v18 = *(void *)v23;
        while (2)
        {
          for (i = 0LL; i != v17; i = (char *)i + 1)
          {
            if (*(void *)v23 != v18) {
              objc_enumerationMutation(v15);
            }
            if ([*(id *)(*((void *)&v22 + 1) + 8 * (void)i) isEqualToDevice:v9])
            {

              goto LABEL_36;
            }
          }

          __int128 v17 = [v15 countByEnumeratingWithState:&v22 objects:v26 count:16];
          if (v17) {
            continue;
          }
          break;
        }
      }

      if (dword_1001317B0 <= 30
        && (dword_1001317B0 != -1 || _LogCategory_Initialize(&dword_1001317B0, 30LL)))
      {
        LogPrintF( &dword_1001317B0,  "+[RPNWListener findListenerForID:applicationService:fromPeer:]",  30LL,  "Failed to find authorized peer in set\n");
      }
    }

    else if (dword_1001317B0 <= 30 {
           && (dword_1001317B0 != -1 || _LogCategory_Initialize(&dword_1001317B0, 30LL)))
    }
    {
      LogPrintF( &dword_1001317B0,  "+[RPNWListener findListenerForID:applicationService:fromPeer:]",  30LL,  "Mismatching mapping ID\n");
    }

    goto LABEL_44;
  }

  if (dword_1001317B0 <= 30)
  {
    if (dword_1001317B0 != -1 || _LogCategory_Initialize(&dword_1001317B0, 30LL)) {
      LogPrintF( &dword_1001317B0,  "+[RPNWListener findListenerForID:applicationService:fromPeer:]",  30LL,  "Listener is automapped, bypassing mapping ID and peer validation\n");
    }
LABEL_36:
    if (dword_1001317B0 <= 30
      && (dword_1001317B0 != -1 || _LogCategory_Initialize(&dword_1001317B0, 30LL)))
    {
      LogPrintF( &dword_1001317B0,  "+[RPNWListener findListenerForID:applicationService:fromPeer:]",  30LL,  "Found listener for peer %@\n",  v9);
    }
  }

  id v20 = v12;
LABEL_45:

  return v20;
}

    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v25 identitiesOfType:7 error:0]);

    if (v26) {
      -[NSMutableArray addObjectsFromArray:](v8, "addObjectsFromArray:", v26);
    }

    if ((v4 & 0x80) == 0)
    {
LABEL_13:
      if ((v4 & 0x800) == 0) {
        goto LABEL_14;
      }
      goto LABEL_50;
    }

  v30 = 1;
LABEL_47:

  return v30;
}

LABEL_46:
  bleDiscoveryID = self->_bleDiscoveryID;
  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL))) {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBLEDiscoveryEnsureStarted]",  30LL,  "BLE discovery start ID %u\n",  bleDiscoveryID);
  }
  __int128 v25 = (SFDeviceDiscovery *)objc_alloc_init(off_100131398());
  __int128 v26 = self->_bleDiscovery;
  self->_bleDiscovery = v25;

  -[SFDeviceDiscovery setChangeFlags:](self->_bleDiscovery, "setChangeFlags:", 1LL);
  if (self->_bleProximityDetection) {
    -[SFDeviceDiscovery setChangeFlags:]( self->_bleDiscovery,  "setChangeFlags:",  -[SFDeviceDiscovery changeFlags](self->_bleDiscovery, "changeFlags") | 2);
  }
  id v23 = 1;
  -[SFDeviceDiscovery setRssiChangeDetection:](self->_bleDiscovery, "setRssiChangeDetection:", 1LL);
  -[SFDeviceDiscovery setDispatchQueue:](self->_bleDiscovery, "setDispatchQueue:", self->_dispatchQueue);
  -[SFDeviceDiscovery setPurpose:](self->_bleDiscovery, "setPurpose:", @"CLink");
  if (self->_bleRSSIThreshold) {
    bleRSSIThreshold = self->_bleRSSIThreshold;
  }
  else {
    bleRSSIThreshold = -60LL;
  }
  -[SFDeviceDiscovery setRssiThreshold:](self->_bleDiscovery, "setRssiThreshold:", bleRSSIThreshold);
  -[SFDeviceDiscovery setDeviceFilter:](self->_bleDiscovery, "setDeviceFilter:", v4);
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472LL;
  v42[2] = sub_1000129C0;
  v42[3] = &unk_100111828;
  v42[4] = self;
  __int128 v43 = bleDiscoveryID;
  -[SFDeviceDiscovery setDeviceFoundHandler:](self->_bleDiscovery, "setDeviceFoundHandler:", v42);
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472LL;
  v40[2] = sub_1000129E8;
  v40[3] = &unk_100111828;
  v40[4] = self;
  __int128 v41 = bleDiscoveryID;
  -[SFDeviceDiscovery setDeviceLostHandler:](self->_bleDiscovery, "setDeviceLostHandler:", v40);
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472LL;
  v38[2] = sub_100012A14;
  v38[3] = &unk_100111850;
  v38[4] = self;
  __int128 v39 = bleDiscoveryID;
  -[SFDeviceDiscovery setDeviceChangedHandler:](self->_bleDiscovery, "setDeviceChangedHandler:", v38);
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472LL;
  v36[2] = sub_100012A3C;
  v36[3] = &unk_100111878;
  v36[4] = self;
  __int128 v37 = bleDiscoveryID;
  -[SFDeviceDiscovery setInterruptionHandler:](self->_bleDiscovery, "setInterruptionHandler:", v36);
LABEL_56:
  if ((self->_bleDiscoveryControlFlags & 0x380000103C00LL) != 0)
  {
    __int128 v28 = 1LL;
  }

  else
  {
    uint64_t v29 = -[RPCompanionLinkDaemon _clientShouldFindNonSameAccountDevices]( self,  "_clientShouldFindNonSameAccountDevices");
    if (v4) {
      v30 = 1;
    }
    else {
      v30 = v29;
    }
    if (v30) {
      __int128 v28 = 1LL;
    }
    else {
      __int128 v28 = 33LL;
    }
  }

  if ((id)v28 != -[SFDeviceDiscovery discoveryFlags](self->_bleDiscovery, "discoveryFlags")) {
    -[SFDeviceDiscovery setDiscoveryFlags:](self->_bleDiscovery, "setDiscoveryFlags:", v28);
  }
  uint64_t v31 = -[SFDeviceDiscovery overrideScreenOff](self->_bleDiscovery, "overrideScreenOff");
  bleDiscoveryScreenOff = self->_bleDiscoveryScreenOff;
  if (bleDiscoveryScreenOff != v31) {
    -[SFDeviceDiscovery setOverrideScreenOff:](self->_bleDiscovery, "setOverrideScreenOff:", bleDiscoveryScreenOff != 0);
  }
  if (-[SFDeviceDiscovery overrideScreenOffRescanInterval](self->_bleDiscovery, "overrideScreenOffRescanInterval") != (id)self->_bleDiscoveryScreenOffRescanInterval) {
    -[SFDeviceDiscovery setOverrideScreenOffRescanInterval:](self->_bleDiscovery, "setOverrideScreenOffRescanInterval:");
  }
  else {
    bleDiscoveryScreenOffScanRate = self->_bleDiscoveryScreenOffScanRate;
  }
  -[SFDeviceDiscovery setScanRate:](self->_bleDiscovery, "setScanRate:", bleDiscoveryScreenOffScanRate);
  if (v23)
  {
    v34 = self->_bleDiscovery;
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_100012AD0;
    v35[3] = &unk_1001118A0;
    v35[4] = self;
    -[SFDeviceDiscovery activateWithCompletion:](v34, "activateWithCompletion:", v35);
  }
}

    v30 = 0;
    goto LABEL_47;
  }

  if (_os_feature_enabled_impl("Rapport", "NearbyInvitation"))
  {
    if (dword_100132768 <= 30
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent discoverDevices:response:nearbyInvitation:]",  30,  "Called discoverDevices, browse_invitation_scope=%d\n",  [v8 browseInvitationScope]);
    }

    __int128 v26 = self->_networkAgentID;
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v8 applicationService]);
    [v8 startNearbyInvitationDiscovery:v9 agentUUID:v26 applicationService:v27];
  }

_DWORD *sub_1000129C0(uint64_t a1, uint64_t a2)
{
  Class result = *(_DWORD **)(a1 + 32);
  if (result[27] == *(_DWORD *)(a1 + 40)) {
    return _[result _clientBLEDiscoveryDeviceFound:a2 deviceFlags:1];
  }
  return result;
}

_DWORD *sub_1000129E8(uint64_t a1, uint64_t a2)
{
  Class result = *(_DWORD **)(a1 + 32);
  if (result[27] == *(_DWORD *)(a1 + 40)) {
    return [result _clientBLEDiscoveryDeviceLost:a2 force:0 deviceFlags:1];
  }
  return result;
}

_DWORD *sub_100012A14(uint64_t a1, uint64_t a2)
{
  Class result = *(_DWORD **)(a1 + 32);
  if (result[27] == *(_DWORD *)(a1 + 40)) {
    return _[result _clientBLEDiscoveryDeviceFound:a2 deviceFlags:1];
  }
  return result;
}

uint64_t sub_100012A3C(uint64_t result)
{
  int v1 = *(_DWORD *)(*(void *)(result + 32) + 108LL);
  if (v1 == *(_DWORD *)(result + 40) && dword_100131328 <= 30)
  {
    if (dword_100131328 != -1) {
      return LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBLEDiscoveryEnsureStarted]_block_invoke_4",  30LL,  "BLE discovery interrupted ID %u\n",  v1);
    }
    uint64_t v2 = result;
    Class result = _LogCategory_Initialize(&dword_100131328, 30LL);
    if ((_DWORD)result)
    {
      int v1 = *(_DWORD *)(v2 + 40);
      return LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBLEDiscoveryEnsureStarted]_block_invoke_4",  30LL,  "BLE discovery interrupted ID %u\n",  v1);
    }
  }

  return result;
}

void sub_100012AD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v8 = v3;
    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBLEDiscoveryEnsureStarted]_block_invoke_5",  90LL,  "### BLE discovery start failed: %{error}\n",  v8);
    }

    [*(id *)(*(void *)(a1 + 32) + 88) invalidate];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 88);
    *(void *)(v5 + 8_Block_object_dispose(&STACK[0x548], 8) = 0LL;

    goto LABEL_10;
  }

  if (dword_100131328 <= 30)
  {
    id v8 = 0LL;
    if (dword_100131328 != -1 || (v7 = _LogCategory_Initialize(&dword_100131328, 30LL), id v4 = 0LL, v7))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBLEDiscoveryEnsureStarted]_block_invoke_5",  30LL,  "BLE discovery started\n");
LABEL_10:
      id v4 = v8;
    }
  }
}

LABEL_6:
  uint64_t v18 = *((_BYTE *)v15 + 24);
  _Block_object_dispose(&v21, 8);

  return v18;
}
}

    objc_storeStrong((id *)&self->_personalCnx, (id)v4[5]);
  }

  _Block_object_dispose(&v9, 8);
}

    -[RPDaemon _updateErrorFlags](self, "_updateErrorFlags");
  }

  return v9;
}

    self->_nearbyActionType = v3;
    -[CBAdvertiser setNearbyActionV2Type:](self->_actionV2Advertiser, "setNearbyActionV2Type:", v3);
  }
}

  id v3 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v3 + 152))
  {
    *(_BYTE *)(v3 + 152) = 0;
    [*(id *)(a1 + 40) _update];
    id v4 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = 0LL;
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}
}

void sub_100012E78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100012E90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v7 = v3;
    if (dword_100131328 <= 90)
    {
      if (dword_100131328 != -1 || (v5 = _LogCategory_Initialize(&dword_100131328, 90LL), id v4 = v7, v5))
      {
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBLETriggerEnhancedDiscovery:useCase:error:]_block_invoke",  90LL,  "### BLE triger enhanced discovery failed: %{error}\n",  v4);
        id v4 = v7;
      }
    }

    if (*(void *)(a1 + 40))
    {
      id v6 = v4;
      id v4 = v7;
      **(void **)(a1 + 40) = v6;
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
}

id sub_100013CC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 656);
  *(void *)(v2 + 656) = 0LL;

  return _[*(id *)(a1 + 32) _processPendingLostBLEDevices];
}

LABEL_5:
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identitiesOfType:12 error:0]);

  if ([v5 count])
  {
    id v6 = 1;
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 identitiesOfType:13 error:0]);

    id v6 = [v8 count] != 0;
  }

  return v6;
}
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
  }
}

LABEL_28:
    goto LABEL_29;
  }

  if (dword_100131328 <= 90 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL))) {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _serverNearbyInfoV2DeviceLost:idsIdentifier:force:deviceFlags:]",  90LL,  "### Ignoring NearbyInfoV2 device lost: no ID, %@\n",  v29);
  }
LABEL_29:
}

        goto LABEL_29;
      }

      __int128 v15 = [v12 isEqual:v13];

      if ((v15 & 1) == 0) {
        goto LABEL_39;
      }
    }

    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      uint64_t v18 = CUDescriptionWithLevel(v23, 30LL);
      id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBonjourAWDLBrowserLostDevice:]",  30LL,  "Lost AWDL device: %@, %@\n",  v7,  v19);
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_bonjourAWDLDevices,  "setObject:forKeyedSubscript:",  0LL,  v7);
    id v20 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_authenticatedAWDLPairingModeDevices,  "objectForKeyedSubscript:",  v7));
    id v21 = v20;
    if (v20)
    {
      objc_msgSend(v20, "setStatusFlags:", (unint64_t)objc_msgSend(v20, "statusFlags") & 0xFFFFFFFF7FFFFFFFLL);
      if (dword_100131328 < 31
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
      {
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBonjourAWDLBrowserLostDevice:]",  30LL,  "Auth AWDL Pairing Mode device lost: %@\n",  v21);
      }

      -[RPCompanionLinkDaemon _clientReportLostDevice:](self, "_clientReportLostDevice:", v21);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_authenticatedAWDLPairingModeDevices,  "setObject:forKeyedSubscript:",  0LL,  v7);
    }

    goto LABEL_28;
  }

  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
  {
    __int128 v16 = CUDescriptionWithLevel(v23, 30LL);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v16);
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBonjourAWDLBrowserLostDevice:]",  30LL,  "Ignoring lost unresolved AWDL device: %@\n",  v7);
LABEL_31:
  }
}

  if ((v5 & 0x20) != 0 && self->_prefFriendResolve)
  {
    v45 = 0u;
    v46 = 0u;
    __int128 v43 = 0u;
    v44 = 0u;
    id v19 = (void *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 6LL, 0LL));
    id v20 = [v19 countByEnumeratingWithState:&v43 objects:v57 count:16];
    if (v20)
    {
      id v21 = v20;
      __int128 v22 = *(void *)v44;
      while (2)
      {
        for (k = 0LL; k != v21; k = (char *)k + 1)
        {
          if (*(void *)v44 != v22) {
            objc_enumerationMutation(v19);
          }
          if ([*(id *)(*((void *)&v43 + 1) + 8 * (void)k) verifySignature:v8 data:v9 error:0])
          {
            id v11 = v11 | 0x20;
            goto LABEL_40;
          }
        }

        id v21 = [v19 countByEnumeratingWithState:&v43 objects:v57 count:16];
        if (v21) {
          continue;
        }
        break;
      }
    }

LABEL_29:
}

      (*((void (**)(id, void *, void, void))v6 + 2))(v6, &__NSDictionary0__struct, 0LL, 0LL);
      break;
    case 12:
      -[RPMediaControlDaemon _handleMediaCaptionGet:responseHandler:]( self,  "_handleMediaCaptionGet:responseHandler:",  v25,  v6);
      break;
    case 13:
      -[RPMediaControlDaemon _handleMediaCaptionSet:responseHandler:]( self,  "_handleMediaCaptionSet:responseHandler:",  v25,  v6);
      break;
    default:
      __int128 v16 = RPErrorF(4294960582LL, (uint64_t)"Unsupported command: %d", v7, v8, v9, v10, v11, v12, Int64Ranged);
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      if (dword_100132260 <= 60
        && (dword_100132260 != -1 || _LogCategory_Initialize(&dword_100132260, 60LL)))
      {
        LogPrintF( &dword_100132260,  "-[RPMediaControlDaemon _handleCommand:responseHandler:]",  60LL,  "### HandleCommand failed: %{error}",  v17);
      }

      (*((void (**)(id, void, void, void *))v6 + 2))(v6, 0LL, 0LL, v17);

      break;
  }
}

void sub_100014BE8(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (v10)
  {
    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBLENeedsCLinkAdvertiserEnsureStarted]_block_invoke",  90LL,  "### BLE NeedsCLink advertiser failed: %@\n",  v10);
    }

    [*(id *)(*(void *)(a1 + 32) + 176) invalidate];
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 176);
    *(void *)(v6 + 176) = 0LL;
    goto LABEL_18;
  }

  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = "yes";
    if (*(_BYTE *)(v3 + 220)) {
      int v5 = "yes";
    }
    else {
      int v5 = "no";
    }
    if (!*(_BYTE *)(v3 + 424)) {
      id v4 = "no";
    }
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBLENeedsCLinkAdvertiserEnsureStarted]_block_invoke",  30LL,  "BLE NeedsCLink advertiser started. ScreenOff: %s, AWDLGuestDiscovery %s, targeting %@ \n",  v5,  v4,  *(void *)(v3 + 192));
  }

  id v8 = *(void **)(*(void *)(a1 + 32) + 184LL);
  if (v8)
  {
    id v9 = v8;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[RPMetrics sharedMetrics](&OBJC_CLASS___RPMetrics, "sharedMetrics"));
    [v7 logNeedsAWDLAdvertisementClient:v9 actionType:51 bluetoothType:15];

LABEL_18:
  }
}

void sub_10001580C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    id v11 = v3;
    [*(id *)(v4 + 136) invalidate];
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 136);
    *(void *)(v5 + 136) = 0LL;
LABEL_5:

    id v3 = v11;
    goto LABEL_6;
  }

  id v7 = *(void **)(v4 + 144);
  if (v7)
  {
    id v11 = 0LL;
    id v8 = *(void **)(v4 + 160);
    id v9 = v7;
    id v10 = [v8 nearbyActionV2Type];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[RPMetrics sharedMetrics](&OBJC_CLASS___RPMetrics, "sharedMetrics"));
    [v6 logNeedsAWDLAdvertisementClient:v9 actionType:v10 bluetoothType:21];

    goto LABEL_5;
  }

void sub_100015E3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_100015E5C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!v3)
  {
    if (!*(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL)) {
      goto LABEL_11;
    }
    id v10 = 0LL;
    uint64_t v5 = *(void **)(a1[4] + 616LL);
    if (!v5)
    {
      uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
      uint64_t v7 = a1[4];
      id v8 = *(void **)(v7 + 616);
      *(void *)(v7 + 616) = v6;

      uint64_t v5 = *(void **)(a1[4] + 616LL);
    }

    [v5 addObject:a1[5]];
LABEL_9:
    uint64_t v4 = v10;
    goto LABEL_11;
  }

  if (dword_100131328 <= 30)
  {
    id v10 = v3;
    if (dword_100131328 != -1 || (v9 = _LogCategory_Initialize(&dword_100131328, 30LL), uint64_t v4 = v10, v9))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientSendNeedsAWDLOverWiFi:]_block_invoke",  30LL,  "### Failed to send NeedsAWDL event: %@\n",  v4);
      goto LABEL_9;
    }
  }

void *sub_100016140(uint64_t a1, uint64_t a2)
{
  Class result = *(void **)(a1 + 32);
  if (result[36]) {
    return [result _clientBonjourFoundDevice:a2 reevaluate:0];
  }
  return result;
}

void *sub_10001615C(uint64_t a1, uint64_t a2)
{
  Class result = *(void **)(a1 + 32);
  if (result[36]) {
    return [result _clientBonjourLostDevice:a2];
  }
  return result;
}

void *sub_100016174(uint64_t a1, uint64_t a2)
{
  Class result = *(void **)(a1 + 32);
  if (result[36]) {
    return [result _clientBonjourFoundDevice:a2 reevaluate:0];
  }
  return result;
}

LABEL_90:
          __int128 v28 = 0;
          goto LABEL_91;
        }

        __int128 v39 = objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_tcpClientConnections,  "objectForKeyedSubscript:",  v30));
        if (v39)
        {
          __int128 v40 = (void *)v39;
LABEL_76:
          __int128 v41 = 0LL;
          goto LABEL_77;
        }

        __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v25 idsDeviceID]);
        if (v42)
        {
          v71 = v42;
          __int128 v43 = objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_tcpClientConnections,  "objectForKeyedSubscript:",  v42));
          if (v43)
          {
            __int128 v40 = (void *)v43;

            goto LABEL_76;
          }

          __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDaemon _findWiFiConnectionByID:](self, "_findWiFiConnectionByID:", v71));
          if ([v40 linkType] == 6
            && ([v40 controlFlags] & 0x200) == 0)
          {

            if (v40) {
              goto LABEL_76;
            }
LABEL_99:
            v69 = (void *)objc_claimAutoreleasedReturnValue([v6 txtDictionary]);
            v44 = CFStringGetTypeID();
            v45 = CFDictionaryGetTypedValue(v69, @"rpBA", v44, 0LL);
            v72 = (void *)objc_claimAutoreleasedReturnValue(v45);

            __int128 v40 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_tcpClientConnections,  "objectForKeyedSubscript:",  v72));
            v70 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_unauthDevices,  "objectForKeyedSubscript:",  v72));
            v68 = objc_claimAutoreleasedReturnValue([v70 bonjourDevice]);

            if (v40)
            {
              __int128 v41 = (void *)v68;
LABEL_77:
              [v40 setBonjourPeerDevice:v6];
              [v40 setPresent:1];
              -[RPCompanionLinkDaemon _activeDeviceChangedForConnection:bonjourDevice:]( self,  "_activeDeviceChangedForConnection:bonjourDevice:",  v40,  v6);
              if (v41) {
                -[RPCompanionLinkDaemon _clientBonjourLostUnauthDevice:](self, "_clientBonjourLostUnauthDevice:", v41);
              }
              goto LABEL_79;
            }

            if (v75) {
              v46 = 0x8000000LL;
            }
            else {
              v46 = 0LL;
            }
            p_prots = &OBJC_PROTOCOL___NSSecureCoding.prots;
            if (dword_100131328 <= 30)
            {
              if (dword_100131328 != -1
                || (v50 = _LogCategory_Initialize(&dword_100131328, 30LL),
                    p_prots = &OBJC_PROTOCOL___NSSecureCoding.prots,
                    v50))
              {
                v48 = sub_100016C1C(v6);
                v73 = v46;
                v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
                LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBonjourFoundDevice:reevaluate:]",  30LL,  "Bonjour peer found <%@>: %@\n",  v30,  v49);

                p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL___NSSecureCoding + 16);
                v46 = v73;
              }
            }

            if (!self->_prefServerBonjourAlways
              || ((v21 & 2) != 0 ? (v51 = !self->_prefCommunal) : (v51 = 0), v51 || (v21 & 0x8000) != 0))
            {
              v55 = self;
              v56 = v6;
              v57 = v46;
            }

            else
            {
              if (self->_prefCommunal && (v21 & 2) == 0)
              {
                v52 = *((_DWORD *)p_prots + 202);
                v53 = sub_100016C1C(v6);
                v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
                LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBonjourFoundDevice:reevaluate:]",  10LL,  "Ignoring non-communal peer: %@\n",  v54,  v67);
                goto LABEL_127;
              }

              v58 = p_prots;
              v74 = v46;
              if ((v27 & v75) == 1)
              {
                if ((-[NSString compare:](self->_uniqueIDStr, "compare:", v76) & 0x8000000000000000LL) == 0)
                {
                  v59 = *((_DWORD *)v58 + 202);
                  uniqueIDStr = self->_uniqueIDStr;
                  v61 = sub_100016C1C(v6);
                  v54 = (void *)objc_claimAutoreleasedReturnValue(v61);
                  LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBonjourFoundDevice:reevaluate:]",  40LL,  "Ignoring lower peer %@ with hkKnown %d, unique local ID %@ vs peer %@, %@\n",  v30,  1LL,  uniqueIDStr,  v76,  v54);
                  goto LABEL_127;
                }
              }

              else
              {
                v62 = (void *)objc_claimAutoreleasedReturnValue([v25 idsDeviceID]);
                v63 = (unint64_t)[v77 compare:v62];

                if ((v63 & 0x8000000000000000LL) == 0)
                {
                  v64 = *((_DWORD *)v58 + 202);
                  v54 = (void *)objc_claimAutoreleasedReturnValue([v25 idsDeviceID]);
                  v65 = sub_100016C1C(v6);
                  v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
                  LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBonjourFoundDevice:reevaluate:]",  40LL,  "Ignoring lower peer %@, IDS local %@ vs peer %@, %@\n",  v30,  v77,  v54,  v66);

LABEL_127:
                  goto LABEL_121;
                }
              }

              v55 = self;
              v56 = v6;
              v57 = v74;
            }

            -[RPCompanionLinkDaemon _clientConnectionStart:controlFlags:uniqueID:identity:]( v55,  "_clientConnectionStart:controlFlags:uniqueID:identity:",  v56,  v57,  v30,  v25);
LABEL_121:
            __int128 v40 = 0LL;
            __int128 v41 = (void *)v68;
LABEL_79:

            __int128 v28 = 1;
LABEL_91:

            goto LABEL_92;
          }

          __int128 v42 = v71;
        }

        goto LABEL_99;
      }
    }

    else
    {
      id v19 = 0LL;
    }

    if (dword_100131328 <= 20
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 20LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBonjourFoundDevice:reevaluate:]",  20LL,  "Ignoring old version (%u) device: %@\n",  v19,  v6);
    }

    goto LABEL_72;
  }

  id v8 = CFStringGetTypeID();
  int v9 = CFDictionaryGetTypedValue(v7, @"rpBA", v8, 0LL);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = v10;
  if (!v10)
  {
    __int128 v14 = v6;
    if ((objc_opt_respondsToSelector(v14, "shortDescription") & 1) != 0)
    {
      __int128 v15 = objc_claimAutoreleasedReturnValue([v14 shortDescription]);
    }

    else if ((objc_opt_respondsToSelector(v14, "descriptionWithLevel:") & 1) != 0)
    {
      __int128 v15 = objc_claimAutoreleasedReturnValue([v14 descriptionWithLevel:50]);
    }

    else
    {
      __int128 v15 = objc_claimAutoreleasedReturnValue([v14 description]);
    }

    __int128 v37 = (void *)v15;

    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBonjourFoundDevice:reevaluate:]",  10LL,  "Ignoring device with no BLE address: %@\n",  v37);
    goto LABEL_71;
  }

  if (![v10 isEqual:self->_btAdvAddrStr])
  {

    goto LABEL_13;
  }

  unsigned int v12 = v6;
  if ((objc_opt_respondsToSelector(v12, "shortDescription") & 1) != 0)
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v12 shortDescription]);
  }

  else if ((objc_opt_respondsToSelector(v12, "descriptionWithLevel:") & 1) != 0)
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v12 descriptionWithLevel:50]);
  }

  else
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v12 description]);
  }

  __int128 v37 = (void *)v13;

  LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBonjourFoundDevice:reevaluate:]",  10LL,  "Ignoring our own Bonjour device: %@\n",  v37);
LABEL_71:

LABEL_72:
  __int128 v28 = 0;
LABEL_73:

  return v28;
}

  v135 = *(_OWORD *)&self->_operatingSystemVersion.majorVersion;
  patchVersion = self->_operatingSystemVersion.patchVersion;
  v79 = sub_10000A85C((uint64_t *)&v135);
  v80 = objc_claimAutoreleasedReturnValue(v79);
  v130 = v6;
  v126 = (void *)v80;
  if (!v66) {
    goto LABEL_102;
  }
  v81 = (void *)v80;
  -[IDSDevice operatingSystemVersion](v66, "operatingSystemVersion");
  if (v134[3] >= 1)
  {
    -[IDSDevice operatingSystemVersion](v66, "operatingSystemVersion");
    v82 = sub_10000A85C(v134);
    v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
    v84 = v81;
    v85 = v83;
    if (v84 == v85)
    {

      goto LABEL_99;
    }

    v86 = v85;
    if ((v84 == 0LL) == (v85 != 0LL))
    {
    }

    else
    {
      v87 = [v84 isEqual:v85];

      if ((v87 & 1) != 0)
      {
        v66 = v132;
        goto LABEL_99;
      }
    }

    v66 = v132;
    -[IDSDevice operatingSystemVersion](v132, "operatingSystemVersion");
    *(_OWORD *)&self->_operatingSystemVersion.majorVersion = v135;
    self->_operatingSystemVersion.patchVersion = patchVersion;
    v35 |= 2u;
  }
    }

    if ((v4 & 0x4000) != 0)
    {
      v65 = 0LL;
      CFDictionaryGetData(v7, @"rpTAD", v66, 6LL, &v65, &v97);
      if (v65 == 6)
      {
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 15LL, 0LL));
        __int128 v42 = [v41 countByEnumeratingWithState:&v61 objects:v99 count:16];
        if (v42)
        {
          __int128 v43 = v42;
          v44 = *(void *)v62;
          while (2)
          {
            for (j = 0LL; j != v43; j = (char *)j + 1)
            {
              if (*(void *)v62 != v44) {
                objc_enumerationMutation(v41);
              }
              v46 = *(void **)(*((void *)&v61 + 1) + 8LL * (void)j);
              if (([v46 disabled] & 1) == 0
                && (unint64_t)[v46 disabledUntilTicks] <= v10
                && [v46 verifyAuthTagPtr:v66 authTagLen:v65 dataPtr:v98 dataLen:6 type:1 error:0])
              {
                if (dword_100132130 <= 20
                  && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 20LL)))
                {
                  v59 = CUDescriptionWithLevel(v6, 30LL);
                  v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
                  LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForBonjourDevice:typeFlags:]",  20LL,  "Resolved DeviceAuthTag: AdHocPaired, %@ -> %@\n",  v60,  v46);
                }

                v48 = v46;

                goto LABEL_120;
              }
            }

            __int128 v43 = [v41 countByEnumeratingWithState:&v61 objects:v99 count:16];
            if (v43) {
              continue;
            }
            break;
          }
        }
      }
    }

    v47 = CUDescriptionWithLevel(v6, 30LL);
    int v9 = (void *)objc_claimAutoreleasedReturnValue(v47);
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForBonjourDevice:typeFlags:]",  9LL,  "Ignoring unresolved DeviceAuthTag: %@\n",  v9);
    goto LABEL_112;
  }

  if (dword_100132130 <= 30 && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL))) {
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForBonjourDevice:typeFlags:]",  30LL,  "Deferring ResolveIdentity until FirstUnlock\n");
  }
  v48 = 0LL;
LABEL_121:

  return v48;
}

id sub_100016C1C(void *a1)
{
  id v1 = a1;
  if ((objc_opt_respondsToSelector(v1, "shortDescription") & 1) != 0)
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue([v1 shortDescription]);
  }

  else if ((objc_opt_respondsToSelector(v1, "descriptionWithLevel:") & 1) != 0)
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue([v1 descriptionWithLevel:50]);
  }

  else
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue([v1 description]);
  }

  id v3 = (void *)v2;

  return v3;
}

void *sub_100017B8C(void *result)
{
  uint64_t v1 = result[5];
  if (result[4] == *(void *)(v1 + 328))
  {
    uint64_t v2 = result;
    *(void *)(v1 + 320) = 0LL;
    id v3 = *(void **)(result[5] + 328LL);
    if (v3)
    {
      uint64_t v4 = v3;
      dispatch_source_cancel(v4);
      uint64_t v5 = v2[5];
      uint64_t v6 = *(void **)(v5 + 328);
      *(void *)(v5 + 32_Block_object_dispose(va, 8) = 0LL;
    }

    return [(id)v2[5] _clientBonjourReevaluateAllDevices];
  }

  return result;
}

void *sub_100017FD0(uint64_t a1, uint64_t a2)
{
  Class result = *(void **)(a1 + 32);
  if (result[37]) {
    return _[result _clientBonjourAWDLBrowserFoundDevice:a2];
  }
  return result;
}

void *sub_100017FE8(uint64_t a1, uint64_t a2)
{
  Class result = *(void **)(a1 + 32);
  if (result[37]) {
    return _[result _clientBonjourAWDLBrowserLostDevice:a2];
  }
  return result;
}

void *sub_100018000(uint64_t a1, uint64_t a2)
{
  Class result = *(void **)(a1 + 32);
  if (result[37]) {
    return _[result _clientBonjourAWDLBrowserFoundDevice:a2];
  }
  return result;
}

LABEL_23:
      if (dword_100131328 <= 90
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
      {
        id v20 = CUDescriptionWithLevel(v3, 30LL);
        id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBonjourAWDLBrowserFoundDevice:]",  90LL,  "Ignoring AWDL device as ids identifier is not found: %@\n",  v21);
LABEL_143:
      }
    }

    else
    {
      -[RPCompanionLinkDaemon _clientBonjourFoundUnauthDevice:isAWDLDevice:]( self,  "_clientBonjourFoundUnauthDevice:isAWDLDevice:",  v3,  1LL);
    }

    goto LABEL_145;
  }

  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
  {
    int v9 = CUDescriptionWithLevel(v3, 30LL);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientBonjourAWDLBrowserFoundDevice:]",  30LL,  "Ignoring AWDL device: no ID, %@\n",  v10);
  }
}
  }

  ((void (*)(void *))v38[2])(v38);

  _Block_object_dispose(&v49, 8);
}

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 identitiesOfType:3 error:0]);

    if (v14) {
      -[NSMutableArray addObjectsFromArray:](v8, "addObjectsFromArray:", v14);
    }

    if ((v4 & 8) == 0)
    {
LABEL_7:
      if ((v4 & 0x10) == 0) {
        goto LABEL_8;
      }
      goto LABEL_29;
    }

    __int128 v15 = 0;
    goto LABEL_24;
  }

  if (!v4
    || (uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 flowAssignHandler])) == 0
    || (uint64_t v7 = (void *)v6,
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 localEndpoint]),
        v8,
        v7,
        !v8))
  {
    if (([v4 isUsingQUIC] & 1) == 0
      && dword_100132768 <= 40
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 40LL)))
    {
      unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v4 flowAssignHandler]);
      uint64_t v13 = objc_retainBlock(v12);
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v4 localEndpoint]);
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createListenerFramer:]",  40LL,  "createListenerFramer: called without all information; assign=%@, local=%@\n",
        v13,
        v14);
    }

    goto LABEL_23;
  }

  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
  {
    int v9 = (void *)objc_claimAutoreleasedReturnValue([v4 flowAssignHandler]);
    id v10 = objc_retainBlock(v9);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v4 localEndpoint]);
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createListenerFramer:]",  30LL,  "createListenerFramer assign=%@, local=%@\n",  v10,  v11);
  }

  if (([v4 isUsingQUIC] & 1) == 0)
  {
    v25[0] = 0LL;
    v25[1] = 0LL;
    -[NSUUID getUUIDBytes:](self->_networkAgentID, "getUUIDBytes:", v25);
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v4 localEndpoint]);
    nw_endpoint_set_agent_identifier(v17, v25);
  }

  start_handler[0] = _NSConcreteStackBlock;
  start_handler[1] = 3221225472LL;
  start_handler[2] = sub_100076BA8;
  start_handler[3] = &unk_100113B68;
  uint64_t v18 = v4;
  id v24 = v18;
  definition = nw_framer_create_definition("listen-pipe", 0, start_handler);
  options = nw_framer_create_options(definition);

  id v21 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue([v18 flowAssignHandler]);
  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v18 localEndpoint]);
  ((void (**)(void, void *, void, nw_protocol_options_t))v21)[2](v21, v22, 0LL, options);

  [v18 setFlowAssignHandler:0];
  __int128 v15 = 1;
LABEL_24:

  return v15;
}

LABEL_146:
}

id sub_100019B7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _clientBonjourReevaluateAllDevices];
}

void sub_100019BA8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) peerDeviceInfo]);
  if (v2)
  {
    id v3 = v2;
    [*(id *)(a1 + 32) _activeDeviceChanged:v2 changes:2];
    uint64_t v2 = v3;
  }
}

id sub_100019C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _receivedEventID:a2 event:a3 options:a4 unauth:0 cnx:*(void *)(a1 + 40)];
}

id sub_100019C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return [*(id *)(a1 + 32) _receivedRequestID:a2 request:a3 options:a4 responseHandler:a5 unauth:0 cnx:*(void *)(a1 + 40)];
}

id sub_100019C48(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _connectionStateChanged:a2 cnx:*(void *)(a1 + 40)];
}

void sub_100019C58(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 homeKitUserIdentifiers]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _filterHomeKitUserIdentifiers:v3]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
  [v5 setHomeKitUserIdentifiers:v4];
}

void sub_100019CDC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) peerIdentifier]);
  [v1 _sendProxyDeviceUpdateToPeer:v2];
}

LABEL_119:
        if (a5)
        {
          v92 = v92;
          *a5 = v92;
        }

        goto LABEL_74;
      }

      if (GestaltGetDeviceClass(v81, v82) == 1)
      {
        v99 = (void *)objc_claimAutoreleasedReturnValue([v8 model]);
        if ([v99 hasPrefix:@"Watch"])
        {
          v115 = (void *)objc_claimAutoreleasedReturnValue(+[RPCloudDaemon sharedCloudDaemon](&OBJC_CLASS___RPCloudDaemon, "sharedCloudDaemon"));
          v118 = [v115 idsHasWatch];

          if (v118)
          {
            v90 = 4294896150LL;
            v89 = "Phone with a paired watch can not open on-demand connection to another watch";
            goto LABEL_80;
          }
        }

        else
        {
        }
      }

      -[RPConnection setBleClientUseCase:](v26, "setBleClientUseCase:", [v24 bleClientUseCase]);
      -[RPConnection setBlePeerIdentifier:](v26, "setBlePeerIdentifier:", v74);
      if (-[RPConnection bleClientUseCase](v26, "bleClientUseCase") == (id)327680)
      {
        v100 = (void *)objc_claimAutoreleasedReturnValue([v24 appID]);
        -[RPConnection setClientBundleID:](v26, "setClientBundleID:", v100);
      }

      v117 = 0LL;
      __int128 v39 = 1;
LABEL_21:
      v56 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([v9 discoveryTimer]);
      v57 = v56;
      if (v56)
      {
        dispatch_source_cancel(v56);
        [v9 setDiscoveryTimer:0];
      }

      v58 = 576LL;
      if (v39) {
        v58 = 640LL;
      }
      v59 = v58 | v116 & 0xC08010000400LL;
      if (dword_100131328 <= 30
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
      {
        v60 = CUDescriptionWithLevel(v8, 20LL);
        v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientCreateConnection:xpcCnx:error:]",  30LL,  "Start on-demand connection (%s) to %@\n",  v38,  v61);
      }

      if ((v39 & 1) == 0) {
        -[RPConnection setBonjourPeerDevice:](v26, "setBonjourPeerDevice:", v117);
      }
      -[RPConnection setClient:](v26, "setClient:", v24);
      -[RPConnection setControlFlags:](v26, "setControlFlags:", v59);
      -[RPConnection setIdentifierOverride:](v26, "setIdentifierOverride:", v16);
      v64 = objc_alloc(&OBJC_CLASS___NSString);
      v65 = self->_cnxIDLast + 1;
      self->_cnxIDLast = v65;
      v66 = -[NSString initWithFormat:](v64, "initWithFormat:", @"%@Cnx-%u", @"CLink", v65);
      -[RPConnection setLabel:](v26, "setLabel:", v66);

      -[RPConnection setLocalDeviceInfo:](v26, "setLocalDeviceInfo:", self->_localDeviceInfo);
      v67 = (void *)objc_claimAutoreleasedReturnValue([v24 password]);
      -[RPConnection setPassword:](v26, "setPassword:", v67);

      -[RPConnection setPeerIdentifier:](v26, "setPeerIdentifier:", v16);
      -[RPConnection setPresent:](v26, "setPresent:", 1LL);
      [v9 setNetCnx:v26];
      v68 = [v24 passwordType];
      if (v68 && v68 != 3)
      {
        -[RPConnection setPasswordType:](v26, "setPasswordType:");
        if (([v24 internalAuthFlags] & 8) != 0)
        {
          v138[0] = _NSConcreteStackBlock;
          v138[1] = 3221225472LL;
          v138[2] = sub_10001A9FC;
          v138[3] = &unk_1001118A0;
          v139 = v9;
          -[RPConnection setAuthCompletionHandler:](v26, "setAuthCompletionHandler:", v138);
        }

        if (([v24 internalAuthFlags] & 4) != 0)
        {
          v135[0] = _NSConcreteStackBlock;
          v135[1] = 3221225472LL;
          v135[2] = sub_10001AA08;
          v135[3] = &unk_100111A08;
          v136 = v9;
          v137 = v26;
          -[RPConnection setPromptForPasswordHandler:](v137, "setPromptForPasswordHandler:", v135);
        }
      }

      v69 = (unint64_t)[v8 statusFlags];
      if ((v69 & 0x80000) != 0)
      {
        v70 = 2;
      }

      else if ((v69 & 0x8000) != 0)
      {
        v70 = 8;
      }

      else if ((v69 & 0x2000) != 0)
      {
        v70 = 9;
      }

      else if ((v69 & 0x4000) != 0)
      {
        v70 = 4;
      }

      else if ((v69 & 0x20000) != 0)
      {
        v70 = 6;
      }

      else if ((v69 & 0x4000000000LL) != 0)
      {
        v70 = 15;
      }

      else if (v69 & 0x2000000000LL | v116 & 0x800000000000LL)
      {
        v70 = 13;
      }

      else
      {
        v70 = 0;
      }

      if ((v116 & 0x8000000000LL) != 0) {
        v101 = 8;
      }
      else {
        v101 = v70;
      }
      if (v101) {
        -[RPConnection setPreferredIdentityType:](v26, "setPreferredIdentityType:");
      }
      -[RPCompanionLinkDaemon _configureConnectionForPairing:](self, "_configureConnectionForPairing:", v26);
      v132[0] = _NSConcreteStackBlock;
      v132[1] = 3221225472LL;
      v132[2] = sub_10001AA48;
      v132[3] = &unk_100111708;
      v132[4] = self;
      v102 = v26;
      v133 = v102;
      v134 = v16;
      -[RPConnection setInvalidationHandler:](v102, "setInvalidationHandler:", v132);
      v130[0] = _NSConcreteStackBlock;
      v130[1] = 3221225472LL;
      v130[2] = sub_10001ABB0;
      v130[3] = &unk_100111990;
      v130[4] = self;
      v103 = v102;
      v131 = v103;
      -[RPConnection setReceivedEventHandler:](v103, "setReceivedEventHandler:", v130);
      v128[0] = _NSConcreteStackBlock;
      v128[1] = 3221225472LL;
      v128[2] = sub_10001ABCC;
      v128[3] = &unk_1001119B8;
      v128[4] = self;
      v104 = v103;
      v129 = v104;
      -[RPConnection setReceivedRequestHandler:](v104, "setReceivedRequestHandler:", v128);
      v124[0] = _NSConcreteStackBlock;
      v124[1] = 3221225472LL;
      v124[2] = sub_10001ABEC;
      v124[3] = &unk_100111A30;
      v125 = v8;
      v126 = self;
      v105 = v104;
      v127 = v105;
      -[RPConnection setStateChangedHandler:](v105, "setStateChangedHandler:", v124);
      v121[0] = _NSConcreteStackBlock;
      v121[1] = 3221225472LL;
      v121[2] = sub_10001AC4C;
      v121[3] = &unk_100111968;
      v106 = v105;
      v122 = v106;
      v123 = self;
      -[RPConnection setHomeKitUserIdentifierHandler:](v106, "setHomeKitUserIdentifierHandler:", v121);
      v119[0] = _NSConcreteStackBlock;
      v119[1] = 3221225472LL;
      v119[2] = sub_10001ACD0;
      v119[3] = &unk_100111968;
      v119[4] = self;
      v107 = v106;
      v120 = v107;
      -[RPConnection setProxyDeviceUpdateHandler:](v107, "setProxyDeviceUpdateHandler:", v119);
      if ((v39 & 1) != 0)
      {
        bleClientConnections = self->_bleClientConnections;
        p_bleClientConnections = &self->_bleClientConnections;
        tcpOnDemandClientConnections = bleClientConnections;
        if (!bleClientConnections) {
          goto LABEL_133;
        }
      }

      else
      {
        tcpOnDemandClientConnections = self->_tcpOnDemandClientConnections;
        if (!tcpOnDemandClientConnections)
        {
          p_bleClientConnections = &self->_tcpOnDemandClientConnections;
LABEL_133:
          v111 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          v112 = *p_bleClientConnections;
          *p_bleClientConnections = v111;

          tcpOnDemandClientConnections = *p_bleClientConnections;
        }
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:]( tcpOnDemandClientConnections,  "setObject:forKeyedSubscript:",  v107,  v16);
      -[RPConnection activate](v107, "activate");
      v72 = v107;

      goto LABEL_135;
    }

LABEL_83:
    if ((v25 & 0x400000) == 0)
    {
      -[RPCompanionLinkDaemon _clientOnDemandDiscoveryStart:xpcCnx:]( self,  "_clientOnDemandDiscoveryStart:xpcCnx:",  v8,  v9);
      v72 = v26;
      goto LABEL_135;
    }

    v93 = RPErrorF(4294960539LL, (uint64_t)"Skip on-demand connection discovery", v32, v33, v34, v35, v36, v37, v114);
    v94 = (void *)objc_claimAutoreleasedReturnValue(v93);
    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientCreateConnection:xpcCnx:error:]",  90LL,  "### Skip on-demand connection discovery as the client opted out of using AWDL\n");
    }

    if (a5) {
      *a5 = v94;
    }

LABEL_74:
    v72 = 0LL;
LABEL_135:

LABEL_136:
    goto LABEL_137;
  }

  __int128 v40 = RPErrorF(4294960588LL, (uint64_t)"No identifier for on-demand device", v10, v11, v12, v13, v14, v15, v114);
  __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
  if (dword_100131328 <= 90 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
  {
    __int128 v42 = v8;
    if ((objc_opt_respondsToSelector(v42, "shortDescription") & 1) != 0)
    {
      __int128 v43 = objc_claimAutoreleasedReturnValue([v42 shortDescription]);
    }

    else if ((objc_opt_respondsToSelector(v42, "descriptionWithLevel:") & 1) != 0)
    {
      __int128 v43 = objc_claimAutoreleasedReturnValue([v42 descriptionWithLevel:50]);
    }

    else
    {
      __int128 v43 = objc_claimAutoreleasedReturnValue([v42 description]);
    }

    v71 = (void *)v43;

    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientCreateConnection:xpcCnx:error:]",  90LL,  "### Start on-demand connection failed: %@, %{error}\n",  v71,  v41);
  }

  if (a5) {
    *a5 = v41;
  }

  v72 = 0LL;
LABEL_137:

  return v72;
}

  return v11;
}

id sub_10001A9FC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) authCompletion:a2];
}

id sub_10001AA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "promptForPasswordType:flags:throttleSeconds:",  objc_msgSend(*(id *)(a1 + 40), "passwordTypeActual"),  a2,  a3);
}

void sub_10001AA48(uint64_t a1)
{
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 872LL);
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "netCnx", (void)v13));
        int v9 = v8;
        if (v8 == *(void **)(a1 + 40))
        {
        }

        else
        {
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 session]);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 cnx]);
          unsigned int v12 = *(void **)(a1 + 40);

          if (v11 != v12) {
            continue;
          }
        }

        [v7 handleDisconnect];
      }

      id v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v4);
  }
}

id sub_10001ABB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _receivedEventID:a2 event:a3 options:a4 unauth:0 cnx:*(void *)(a1 + 40)];
}

id sub_10001ABCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return [*(id *)(a1 + 32) _receivedRequestID:a2 request:a3 options:a4 responseHandler:a5 unauth:0 cnx:*(void *)(a1 + 40)];
}

id sub_10001ABEC(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2 == 1)
  {
  }

  return [*(id *)(a1 + 40) _connectionStateChanged:a2 cnx:*(void *)(a1 + 48)];
}

void sub_10001AC4C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 homeKitUserIdentifiers]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _filterHomeKitUserIdentifiers:v3]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
  [v5 setHomeKitUserIdentifiers:v4];
}

void sub_10001ACD0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) peerIdentifier]);
  [v1 _sendProxyDeviceUpdateToPeer:v2];
}

id sub_10001B69C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) authCompletion:a2];
}

id sub_10001B6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "promptForPasswordType:flags:throttleSeconds:",  objc_msgSend(*(id *)(a1 + 40), "passwordTypeActual"),  a2,  a3);
}

id sub_10001B6E8(uint64_t a1)
{
  return [*(id *)(a1 + 56) handleDisconnect];
}

id sub_10001B714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _receivedEventID:a2 event:a3 options:a4 unauth:1 cnx:*(void *)(a1 + 40)];
}

id sub_10001B730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return [*(id *)(a1 + 32) _receivedRequestID:a2 request:a3 options:a4 responseHandler:a5 unauth:1 cnx:*(void *)(a1 + 40)];
}

id sub_10001B750(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _connectionStateChanged:a2 cnx:*(void *)(a1 + 40)];
}

void sub_10001B760(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 homeKitUserIdentifiers]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _filterHomeKitUserIdentifiers:v3]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
  [v5 setHomeKitUserIdentifiers:v4];
}

void sub_10001B7E4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) peerIdentifier]);
  [v1 _sendProxyDeviceUpdateToPeer:v2];
}

id sub_10001BB54(uint64_t a1)
{
  return _[*(id *)(a1 + 40) _clientOnDemandAWDLDiscoveryTimedOutForDevice:*(void *)(a1 + 48) xpcCnx:*(void *)(a1 + 56)];
}

id sub_10001BD7C(uint64_t a1)
{
  if (dword_100131328 <= 90 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL))) {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientOnDemandAWDLDiscoveryStartForXPC:]_block_invoke",  90LL,  "### Start on-demand AWDL guest discovery timed out");
  }
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  [*(id *)(a1 + 40) setDiscoveryTimer:0];
  [*(id *)(a1 + 40) setNeedsCLink:0];
  *(_BYTE *)(*(void *)(a1 + 48) + 424LL) = 0;
  return [*(id *)(a1 + 48) _update];
}

LABEL_13:
  -[RPCompanionLinkDaemon _serverBonjourEnsureStopped](self, "_serverBonjourEnsureStopped");
LABEL_14:
  if (-[RPCompanionLinkDaemon _serverBonjourAWDLAdvertiserShouldRun](self, "_serverBonjourAWDLAdvertiserShouldRun")) {
    -[RPCompanionLinkDaemon _serverBonjourAWDLAdvertiserEnsureStarted]( self,  "_serverBonjourAWDLAdvertiserEnsureStarted");
  }
  else {
    -[RPCompanionLinkDaemon _serverBonjourAWDLAdvertiserEnsureStopped]( self,  "_serverBonjourAWDLAdvertiserEnsureStopped");
  }
}

    v9[2](v9, v13);
    goto LABEL_14;
  }

  if (v9)
  {
    unsigned int v12 = NSPrintF("### Error: %{error}\n", v10);
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    goto LABEL_13;
  }
  }

  return v3;
}

  -[NSMutableString appendString:](v4, "appendString:", @" watch");
  if ((a3 & 0x10) == 0)
  {
LABEL_7:
    if ((a3 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }

    v4[2](v4, v12);
    goto LABEL_26;
  }

  if (v4)
  {
    id v24 = RPErrorF(4294960561LL, (uint64_t)"Not supported", v5, v6, v7, v8, v9, v10, v27);
    unsigned int v12 = (id)objc_claimAutoreleasedReturnValue(v24);
    goto LABEL_13;
  }

    Class result = sub_1000AF5A8(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    id v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  id v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

id sub_10001CBE0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void *sub_10001CC0C(void *result, uint64_t a2)
{
  if (a2)
  {
    id v2 = result;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(result[4] + 1040LL));
    return [(id)v2[4] _serverNearbyActionV2DiscoveryEnsureStopped];
  }

  return result;
}

void sub_10001CE84(uint64_t a1, void *a2)
{
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 1040LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  [*(id *)(a1 + 32) _serverNearbyInfoV2DeviceFound:v4 deviceFlags:4];
}

void sub_10001CED4(uint64_t a1, void *a2)
{
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 1040LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  [*(id *)(a1 + 32) _serverNearbyInfoV2DeviceLost:v4 idsIdentifier:0 force:0 deviceFlags:4];
}

void sub_10001CF2C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) _serverNearbyInfoV2DiscoveryEnsureStopped];
  }
}

_DWORD *sub_10001D330(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  Class result = *(_DWORD **)(a1 + 32);
  if (v2 == result[54]) {
    return _[result _serverBLENeedsCLinkScannerDeviceFound:a2];
  }
  return result;
}

_DWORD *sub_10001D350(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  Class result = *(_DWORD **)(a1 + 32);
  if (v2 == result[54]) {
    return _[result _serverBLENeedsCLinkScannerDeviceLost:a2];
  }
  return result;
}

_DWORD *sub_10001D370(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  Class result = *(_DWORD **)(a1 + 32);
  if (v2 == result[54]) {
    return _[result _serverBLENeedsCLinkScannerDeviceFound:a2];
  }
  return result;
}

void sub_10001D390(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v8 = v3;
    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _serverBLENeedsCLinkScannerEnsureStarted]_block_invoke_4",  90LL,  "### BLE NeedsCLink scanner start failed: %{error}\n",  v8);
    }

    [*(id *)(*(void *)(a1 + 32) + 208) invalidate];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 208);
    *(void *)(v5 + 20_Block_object_dispose(va, 8) = 0LL;

    goto LABEL_10;
  }

  if (dword_100131328 <= 30)
  {
    id v8 = 0LL;
    if (dword_100131328 != -1 || (v7 = _LogCategory_Initialize(&dword_100131328, 30LL), id v4 = 0LL, v7))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _serverBLENeedsCLinkScannerEnsureStarted]_block_invoke_4",  30LL,  "BLE NeedsCLink scanner started\n");
LABEL_10:
      id v4 = v8;
    }
  }
}

id sub_10001DCCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 664);
  *(void *)(v2 + 664) = 0LL;

  return _[*(id *)(a1 + 32) _processPendingLostNeedsCLinkDevices];
}

LABEL_66:
LABEL_67:
  return v5;
}

void sub_10001F894(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 624LL);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 624);
    *(void *)(v4 + 624) = 0LL;
  }

  if (*(void *)(*(void *)(a1 + 32) + 608LL))
  {
    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _serverReceivedNeedsAWDLEvent:event:]_block_invoke",  90LL,  "### Removing expired NeedsAWDL requests\n");
    }

    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(void **)(v6 + 608);
    *(void *)(v6 + 60_Block_object_dispose(va, 8) = 0LL;

    [*(id *)(a1 + 32) _update];
  }

void sub_10001FC88(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (objc_msgSend( *(id *)(a1 + 32),  "_shouldReceiveActivityLevelOverWiFi:",  objc_msgSend(v5, "deviceType")))
  {
    id v3 = *(void **)(a1 + 40);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
    [v3 addObject:v4];
  }
}

void sub_10001FCF4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2
    && dword_100131328 <= 30
    && ((v5 = v2, dword_100131328 != -1) || (int v4 = _LogCategory_Initialize(&dword_100131328, 30LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _clientSendActivityLevelOverWiFiIfNecessary]_block_invoke_2",  30LL,  "### Failed to send ActivityLevelUpdate event: %@\n",  v3);
  }

  else
  {
  }

id sub_10001FE88(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _serverBTAddressChanged];
}

id sub_10001FE90(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _serverBTAddressChanged];
}

void sub_1000203F8(id a1, CUTCPConnection *a2)
{
}

void *sub_100020404(uint64_t a1, uint64_t a2)
{
  Class result = *(void **)(a1 + 32);
  if (result[103]) {
    return [result _serverTCPHandleConnectionStarted:a2];
  }
  return result;
}

id sub_100020858(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) invalidationHandled];
  return result;
}

void sub_100020890(uint64_t a1)
{
  if (([*(id *)(a1 + 32) controlFlags] & 0x200) == 0)
  {
    [*(id *)(a1 + 40) _stereoDeviceUpdate:0];
    [*(id *)(a1 + 40) _personalDeviceUpdate];
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
    if (v2)
    {
      id v3 = v2;
      [*(id *)(a1 + 40) _activeDeviceChanged:v2 changes:2];
      uint64_t v2 = v3;
    }
  }

void sub_100020910(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v7 = *(void **)(a1 + 32);
  id v8 = a4;
  id v9 = a3;
  id v10 = a2;
  objc_msgSend( *(id *)(a1 + 40),  "_receivedEventID:event:options:unauth:cnx:",  v10,  v9,  v8,  (unint64_t)objc_msgSend(v7, "flags") & 1,  *(void *)(a1 + 32));
}

void sub_100020994(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = *(void **)(a1 + 32);
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  objc_msgSend( *(id *)(a1 + 40),  "_receivedRequestID:request:options:responseHandler:unauth:cnx:",  v13,  v12,  v11,  v10,  (unint64_t)objc_msgSend(v9, "flags") & 1,  *(void *)(a1 + 32));
}

id sub_100020A2C(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 32) invalidationHandled];
  return result;
}

void sub_100020A6C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 homeKitUserIdentifiers]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _filterHomeKitUserIdentifiers:v3]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
  [v5 setHomeKitUserIdentifiers:v4];
}

void sub_100020AF0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) peerIdentifier]);
  [v1 _sendProxyDeviceUpdateToPeer:v2];
}

void sub_100020BA0(uint64_t a1, void *a2)
{
  id v3 = a2;
}

CUPairingIdentity *__cdecl sub_100020BF0(id a1, unint64_t a2, id *a3)
{
  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL))) {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _configureConnectionForPairing:]_block_invoke_2",  30LL,  "Copy identity handler options %lu\n",  a2);
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
  id v16 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 identityOfTemporarySelfAndReturnError:&v16]);
  id v7 = v16;

  if (v7) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v6 == 0LL;
  }
  if (v8)
  {
    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _configureConnectionForPairing:]_block_invoke_2",  90LL,  "### Failed to get temporary self identity: %@\n.",  v7);
    }

    id v9 = 0LL;
    if (a3) {
      *a3 = v7;
    }
  }

  else
  {
    id v9 = objc_alloc_init(&OBJC_CLASS___CUPairingIdentity);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 adHocPairingIdentifier]);
    -[CUPairingIdentity setIdentifier:](v9, "setIdentifier:", v11);

    id v12 = (void *)objc_claimAutoreleasedReturnValue([v6 deviceIRKData]);
    -[CUPairingIdentity setAltIRK:](v9, "setAltIRK:", v12);

    id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 edPKData]);
    -[CUPairingIdentity setPublicKey:](v9, "setPublicKey:", v13);

    if ((a2 & 2) != 0)
    {
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v6 edSKData]);
      -[CUPairingIdentity setSecretKey:](v9, "setSecretKey:", v14);
    }
  }

  return v9;
}

id sub_1000212D8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _bleServerHandleConnectionStarted:a2];
}

void sub_1000212E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    id v8 = v3;
    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _bleServerEnsureStarted]_block_invoke_2",  90LL,  "### BLE server start failed: %@\n",  v8);
    }

    [*(id *)(*(void *)(a1 + 32) + 232) invalidate];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 232);
    *(void *)(v5 + 232) = 0LL;

    goto LABEL_10;
  }

  if (dword_100131328 <= 30)
  {
    id v8 = 0LL;
    if (dword_100131328 != -1 || (v7 = _LogCategory_Initialize(&dword_100131328, 30LL), int v4 = 0LL, v7))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _bleServerEnsureStarted]_block_invoke_2",  30,  "BLE server started, PSM 0x%X\n",  [*(id *)(*(void *)(a1 + 32) + 232) listeningPSM]);
LABEL_10:
      int v4 = v8;
    }
  }
}

id sub_10002179C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) invalidationHandled];
  return result;
}

void sub_1000217D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v7 = *(void **)(a1 + 32);
  id v8 = a4;
  id v9 = a3;
  id v10 = a2;
  objc_msgSend( *(id *)(a1 + 40),  "_receivedEventID:event:options:unauth:cnx:",  v10,  v9,  v8,  (unint64_t)objc_msgSend(v7, "flags") & 1,  *(void *)(a1 + 32));
}

void sub_100021858(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = *(void **)(a1 + 32);
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  objc_msgSend( *(id *)(a1 + 40),  "_receivedRequestID:request:options:responseHandler:unauth:cnx:",  v13,  v12,  v11,  v10,  (unint64_t)objc_msgSend(v9, "flags") & 1,  *(void *)(a1 + 32));
}

id sub_1000218F0(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 32) invalidationHandled];
  return result;
}

void sub_100021930(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 homeKitUserIdentifiers]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _filterHomeKitUserIdentifiers:v3]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
  [v5 setHomeKitUserIdentifiers:v4];
}

void sub_1000219B4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) peerIdentifier]);
  [v1 _sendProxyDeviceUpdateToPeer:v2];
}

id *sub_100021BA8(id *result)
{
  if (result[4]) {
    return (id *)_objc_msgSend(result[5], "_btPipeHandleStateChanged:");
  }
  return result;
}

void sub_100021BBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    if (*(void *)(a1 + 32))
    {
      if (dword_100131328 <= 90)
      {
        id v6 = v3;
        if (dword_100131328 != -1 || (v5 = _LogCategory_Initialize(&dword_100131328, 90LL), int v4 = v6, v5))
        {
          LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _btPipeSetup:withPriority:]_block_invoke_2",  90LL,  "### BTPipe %s priority start failed: %{error}\n",  v4);
          int v4 = v6;
        }
      }
    }
  }
}

void sub_100021F40(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 376) state] == 1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 376) peerDeviceInfo]);
    if (v2)
    {
      id v6 = v2;
      unint64_t v3 = (unint64_t)[v2 statusFlags];
      BOOL v4 = [*(id *)(*(void *)(a1 + 32) + 368) peerHostState] == 1;
      id v2 = v6;
      char v5 = v4;
      if ((v3 & 0xFFFFFFFFFFFFFFDFLL | (32LL * (v5 & 1))) != v3)
      {
        objc_msgSend(v6, "setStatusFlags:");
        [*(id *)(a1 + 32) _activeDeviceChanged:v6 changes:2];
        id v2 = v6;
      }
    }
  }

id sub_100021FEC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleContextCollectorRequest:responseHandler:", a2);
}

id sub_100021FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _handleContextCollectorProxyRequest:a2 options:a3 responseHandler:a4];
}

id sub_1000222B8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _btPipeConnectionStart];
}

id sub_100022580(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _btPipeConnectionEnded:*(void *)(a1 + 40)];
}

void sub_10002258C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v6 = v3;
    BOOL v5 = GestaltGetDeviceClass(v3, v4) == 6;
    id v3 = v6;
    if (v5)
    {
      [*(id *)(a1 + 32) _btPipeSyncKeysIfNeeded];
      id v3 = v6;
    }
  }
}

void sub_1000225D8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
  if (v2)
  {
    id v3 = v2;
    [*(id *)(a1 + 40) _activeDeviceChanged:v2 changes:2];
    id v2 = v3;
  }
}

id sub_100022628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _receivedEventID:a2 event:a3 options:a4 unauth:0 cnx:*(void *)(a1 + 40)];
}

id sub_100022644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return [*(id *)(a1 + 32) _receivedRequestID:a2 request:a3 options:a4 responseHandler:a5 unauth:0 cnx:*(void *)(a1 + 40)];
}

id sub_100022664(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _connectionStateChanged:a2 cnx:*(void *)(a1 + 40)];
}

void sub_100022674(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 homeKitUserIdentifiers]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _filterHomeKitUserIdentifiers:v3]);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDeviceInfo]);
  [v5 setHomeKitUserIdentifiers:v4];
}

void sub_1000226F8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) peerIdentifier]);
  [v1 _sendProxyDeviceUpdateToPeer:v2];
}

LABEL_24:
  -[RPCompanionLinkDaemon _stereoDeviceUpdate:](self, "_stereoDeviceUpdate:", 0LL);
  -[RPCompanionLinkDaemon _reportXPCMatchingDiscoveryCLink](self, "_reportXPCMatchingDiscoveryCLink");
  notify_post("com.apple.rapport.CompanionLinkDeviceAdded");
  -[RPCompanionLinkDaemon _clientReportFoundDevice:](self, "_clientReportFoundDevice:", v20);
}

  id v23 = [v6 featureFlags];
  if (v23)
  {
    id v24 = v23;
    if ([v5 featureFlags] != v23)
    {
      [v5 setFeatureFlags:v24];
      v11 |= 0x400u;
    }
  }

  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v8 mediaRemoteIdentifier]);
  v66 = v25;
  if ([v25 length])
  {
    __int128 v26 = (id)objc_claimAutoreleasedReturnValue([v5 mediaRemoteID]);
    uint64_t v27 = v25;
    __int128 v28 = v27;
    if (v26 == v27)
    {

      goto LABEL_36;
    }

    if ((v27 != 0LL) == (v26 == 0LL))
    {
    }

    else
    {
      uint64_t v29 = [v26 isEqual:v27];

      if ((v29 & 1) != 0) {
        goto LABEL_35;
      }
    }

    [v5 setMediaRemoteID:v28];
    v11 |= 0x10000u;
LABEL_35:
    __int128 v25 = v66;
  }
}

  self->_prefFriendRefreshMaxSeconds = v10;
LABEL_25:
  id v13 = CFPrefs_GetInt64(@"com.apple.rapport", @"frRefreshMin", &v69);
  prefFriendRefreshMinSeconds = self->_prefFriendRefreshMinSeconds;
  if (v13 != prefFriendRefreshMinSeconds)
  {
    if (dword_100132930 <= 30)
    {
      if (dword_100132930 == -1)
      {
        prefFriendRefreshMinSeconds = self->_prefFriendRefreshMinSeconds;
      }

      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon prefsChanged]",  30LL,  "FriendRefreshMin: %lld -> %lld\n",  prefFriendRefreshMinSeconds,  v13);
    }

void sub_100022E24(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v26 = a2;
  id v7 = a3;
  id v8 = v7;
  if (*(id *)(a1 + 32) != v7)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 peerDeviceInfo]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 idsDeviceIdentifier]);
    unsigned int v11 = [v10 isEqual:*(void *)(a1 + 40)];

    if (v11)
    {
      if (dword_100131328 <= 30
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
      {
        uint64_t v18 = CUDescriptionWithLevel(*(void *)(a1 + 32), 20LL);
        id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        uint64_t v20 = CUDescriptionWithLevel(v8, 20LL);
        uint64_t v24 = (uint64_t)v19;
        __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(v20);
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _activeDeviceRemoved:cnx:]_block_invoke",  30LL,  "Invalidating disconnected duplicate: %@ -> %@\n");
      }

      id v21 = *(void **)(a1 + 32);
      id v22 = RPErrorF(4294960566LL, (uint64_t)"Disconnected Duplicate", v12, v13, v14, v15, v16, v17, v24);
      id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      [v21 invalidateWithError:v23];

      *a4 = 1;
    }
  }
}

void sub_10002370C(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) showPasswordHandler]);
  id v6 = (void *)v5;
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, id))(v5 + 16))(v5, a2, v7);
  }
}

void sub_10002376C(uint64_t a1, uint64_t a2)
{
  id v3 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) hidePasswordHandler]);
  if (v3)
  {
    id v4 = v3;
    v3[2](v3, a2);
    id v3 = (void (**)(void, void))v4;
  }
}

void sub_100024054(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identityResolved]);
  if ([v4 type] == 9)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v6 = *(id *)(a1 + 32);
    id v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v16;
      while (2)
      {
        for (i = 0LL; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(v6);
          }
          unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v15 + 1) + 8 * (void)i) identifier]);
          unsigned __int8 v12 = [v11 isEqual:v5];

          if ((v12 & 1) != 0)
          {

            goto LABEL_16;
          }
        }

        id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }

    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      uint64_t v13 = CUDescriptionWithLevel(v3, 20LL);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _disconnectRemovedSharedHomeDevices]_block_invoke",  30LL,  "Disconnect removed SharedHome device: %@\n",  v14);
    }

    [v3 invalidate];
LABEL_16:
  }
}

void sub_100024420(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identityVerified]);
  if ([v4 type] == 8)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v6 = *(id *)(a1 + 32);
    id v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v16;
      while (2)
      {
        for (i = 0LL; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(v6);
          }
          unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v15 + 1) + 8 * (void)i) identifier]);
          unsigned __int8 v12 = [v11 isEqual:v5];

          if ((v12 & 1) != 0)
          {

            goto LABEL_16;
          }
        }

        id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }

    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      uint64_t v13 = CUDescriptionWithLevel(v3, 20LL);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _disconnectUnpairedDevices]_block_invoke",  30LL,  "Disconnect unpaired device: %@\n",  v14);
    }

    [v3 invalidate];
LABEL_16:
  }
}

void sub_100024A60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100024A78(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6 = a2;
  unsigned int v7 = [v6 linkType];
  unint64_t v8 = *(void *)(a1 + 56);
  if (((v8 & 0x400000) == 0 || v7 != 4)
    && ((v8 & 0x200000) == 0 || (v7 & 0xFFFFFFFE) != 6)
    && (((v8 & 0x200000) == 0 || !*(_BYTE *)(*(void *)(a1 + 32) + 921LL)) && ((v8 >> 42) & 1) == 0 || v7 != 8)
    && ((v8 & 0x10000000) == 0 || v7 == 10)
    && ((v8 & 0x20000000000LL) == 0 || v7 != 1))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 peerDeviceInfo]);
    if (!v9) {
      goto LABEL_18;
    }
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 peerIdentifier]);
    unsigned __int8 v11 = [v10 isEqual:*(void *)(a1 + 40)];

    if ((v11 & 1) != 0
      || (unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]),
          unsigned __int8 v13 = [v12 isEqual:*(void *)(a1 + 40)],
          v12,
          (v13 & 1) != 0)
      || (uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v9 idsDeviceIdentifier]),
          unsigned __int8 v15 = [v14 isEqual:*(void *)(a1 + 40)],
          v14,
          (v15 & 1) != 0))
    {
      unsigned int v16 = 1;
    }

    else
    {
LABEL_18:
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v6 identityVerified]);
      __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 idsDeviceID]);
      unsigned int v16 = [v18 isEqual:*(void *)(a1 + 40)];
    }

    if ((*(_BYTE *)(a1 + 60) & 4) != 0)
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v6 proxyDevices]);

      if (!v19)
      {
        if (!v16)
        {
LABEL_37:

          goto LABEL_38;
        }

LABEL_34:
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v9);
        uint64_t v27 = *(id **)(a1 + 64);
        if (v27) {
          objc_storeStrong(v27, a2);
        }
        *a3 = 1;
        goto LABEL_37;
      }

      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v6 proxyDevices]);
      id v21 = [v20 countByEnumeratingWithState:&v29 objects:v33 count:16];
      if (v21)
      {
        id v22 = v21;
        __int128 v28 = v9;
        uint64_t v23 = *(void *)v30;
        while (2)
        {
          for (i = 0LL; i != v22; i = (char *)i + 1)
          {
            if (*(void *)v30 != v23) {
              objc_enumerationMutation(v20);
            }
            __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v29 + 1) + 8 * (void)i) identifier]);
            unsigned int v26 = [v25 isEqual:*(void *)(a1 + 40)];

            if (v26)
            {

              uint64_t v9 = v28;
              goto LABEL_34;
            }
          }

          id v22 = [v20 countByEnumeratingWithState:&v29 objects:v33 count:16];
          if (v22) {
            continue;
          }
          break;
        }

        uint64_t v9 = v28;
        goto LABEL_37;
      }
    }

    if ((v16 & 1) == 0) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }

  self->_needsPrimaryAppleIDUpdate = 0;
LABEL_35:
  if (-[RPCompanionLinkDaemon _shouldSendActivityLevelOverWiFi](self, "_shouldSendActivityLevelOverWiFi"))
  {
    else {
      __int128 v31 = 3LL;
    }
    -[RPCompanionLinkDevice setActivityLevel:](self->_localDeviceInfo, "setActivityLevel:", v31);
  }

  if (self->_prefHomeKitEnabled)
  {
    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice homeKitIdentifier](self->_localDeviceInfo, "homeKitIdentifier"));

    if (v32
      || (id v33 = (void *)objc_claimAutoreleasedReturnValue(-[CUHomeKitManager selfAccessory](self->_homeKitManager, "selfAccessory")),
          v34 = objc_claimAutoreleasedReturnValue([v33 uniqueIdentifier]),
          v33,
          (v174 = (void *)v34) == 0LL))
    {
      v174 = 0LL;
    }

    else
    {
      if (dword_100131328 <= 30
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
      {
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _localDeviceUpdate]",  30LL,  "HomeKit SelfAccessory identifier: %@\n",  v34);
      }

      -[RPCompanionLinkDevice setHomeKitIdentifier:](self->_localDeviceInfo, "setHomeKitIdentifier:", v34);
      v179 = 1;
    }

    v35 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 homeKitIdentity]);

    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice accountID](self->_localDeviceInfo, "accountID"));
    if (v37)
    {
      v173 = v25;
    }

    else
    {
      __int128 v38 = objc_claimAutoreleasedReturnValue([v36 accountID]);

      v173 = (void *)v38;
      if (v38)
      {
        if (dword_100131328 <= 30
          && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
        {
          __int128 v39 = (const char *)sub_10000AAC4((uint64_t)"HomeKit SelfAccessory accountID: ", v4);
          LogPrintF(&dword_100131328, "-[RPCompanionLinkDaemon _localDeviceUpdate]", 30LL, v39, v38);
        }

        -[RPCompanionLinkDevice setAccountID:](self->_localDeviceInfo, "setAccountID:", v38);
        v179 = 1;
      }

      else
      {
        v173 = 0LL;
      }
    }

    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice homeKitUserIdentifiers](self->_localDeviceInfo, "homeKitUserIdentifiers"));

    if (v40
      || (v172 = (void *)objc_claimAutoreleasedReturnValue(-[RPHomeKitManager homeKitUserIdentifiers](self->_rpHomeKitManager, "homeKitUserIdentifiers"))) == 0LL)
    {
      v172 = 0LL;
    }

    else
    {
      if (dword_100131328 <= 30
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
      {
        __int128 v41 = (const char *)sub_10000AAC4((uint64_t)"HomeKit SelfAccessory homeKitUserIdentifiers: ", v4);
        LogPrintF(&dword_100131328, "-[RPCompanionLinkDaemon _localDeviceUpdate]", 30LL, v41, v172);
      }

      -[RPCompanionLinkDevice setHomeKitUserIdentifiers:](self->_localDeviceInfo, "setHomeKitUserIdentifiers:", v172);
      v179 = 1;
    }
  }

  else
  {
    v172 = 0LL;
    v173 = v25;
    v174 = 0LL;
  }

  if (!self->_uniqueIDData)
  {
    v206.tv_nsec = 0LL;
    v206.tv_sec = 0LL;
    if (gethostuuid(v210, &v206))
    {
      __int128 v42 = NSRandomData(6LL, 0LL);
      __int128 v43 = (NSData *)objc_claimAutoreleasedReturnValue(v42);
    }

    else
    {
      __int128 v43 = -[NSData initWithBytes:length:](objc_alloc(&OBJC_CLASS___NSData), "initWithBytes:length:", v210, 6LL);
    }

    uniqueIDData = self->_uniqueIDData;
    self->_uniqueIDData = v43;

    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _localDeviceUpdate]",  30LL,  "Unique ID updated: <%@>\n",  self->_uniqueIDData);
    }

    v45 = NSPrintF( "%.3H",  -[NSData bytes](self->_uniqueIDData, "bytes"),  -[NSData length](self->_uniqueIDData, "length"),  -[NSData length](self->_uniqueIDData, "length"));
    v46 = (NSString *)objc_claimAutoreleasedReturnValue(v45);
    uniqueIDStr = self->_uniqueIDStr;
    self->_uniqueIDStr = v46;
  }

  v48 = self->_uniqueIDStr;
  if (v48)
  {
    v49 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice identifier](self->_localDeviceInfo, "identifier"));
    v50 = v48;
    v51 = v49;
    if (v50 == v51)
    {

      goto LABEL_85;
    }

    v52 = v51;
    if (v51)
    {
      v53 = -[NSString isEqual:](v50, "isEqual:", v51);

      if ((v53 & 1) != 0) {
        goto LABEL_85;
      }
    }

    else
    {
    }

    -[RPCompanionLinkDevice setIdentifier:](self->_localDeviceInfo, "setIdentifier:", self->_uniqueIDStr);
    v179 = 1;
  }

  return v12;
}

  __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v4 name]);
  __int128 v37 = v36;
  if (!v36)
  {
LABEL_40:
    v44 = v48;
    goto LABEL_43;
  }

  __int128 v38 = v6;
  name = self->_name;
  __int128 v40 = v36;
  __int128 v41 = name;
  if (v40 == v41)
  {

    id v6 = v38;
    goto LABEL_40;
  }

  __int128 v42 = v41;
  v47 = v14;
  if (v41)
  {
    __int128 v43 = -[NSString isEqual:](v40, "isEqual:", v41);

    if ((v43 & 1) != 0)
    {
      id v6 = v38;
      uint64_t v14 = v47;
      goto LABEL_40;
    }
  }

  else
  {
  }

  objc_storeStrong((id *)&self->_name, v37);
  v44 = v48 | 0x10;
  id v6 = v38;
  uint64_t v14 = v47;
LABEL_43:
  v45 = objc_msgSend(v4, "statusFlags", v47);
  if (v45 != (id)self->_statusFlags)
  {
    self->_statusFlags = (unint64_t)v45;
    v44 |= 2u;
  }

  if (v4)
  {
    [v4 operatingSystemVersion];
    if (v51 >= 1)
    {
      [v4 operatingSystemVersion];
      *(_OWORD *)&self->_operatingSystemVersion.majorVersion = v49;
      self->_operatingSystemVersion.patchVersion = v50;
      v44 |= 2u;
    }
  }

  return v44;
}

    if (dword_100132930 <= 90
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 90LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon diagnosticCommand:params:]",  90LL,  "### No AppleID for people identity message\n");
    }

    goto LABEL_49;
  }

  if (![v6 caseInsensitiveCompare:@"FamilyClearDates"])
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF(&dword_100132930, "-[RPPeopleDaemon diagnosticCommand:params:]", 30LL, "Diag: FamilyClearDates\n");
    }

    familyAccountIdentityMap = self->_familyAccountIdentityMap;
    uint64_t v20 = &stru_100114460;
    goto LABEL_100;
  }

  if (![v6 caseInsensitiveCompare:@"FriendClearDates"])
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF(&dword_100132930, "-[RPPeopleDaemon diagnosticCommand:params:]", 30LL, "Diag: FriendClearDates\n");
    }

    familyAccountIdentityMap = self->_friendAccountIdentityMap;
    uint64_t v20 = &stru_100114480;
LABEL_100:
    -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( familyAccountIdentityMap,  "enumerateKeysAndObjectsUsingBlock:",  v20);
LABEL_101:
    -[RPPeopleDaemon _update](self, "_update");
    goto LABEL_50;
  }

  if (![v6 caseInsensitiveCompare:@"FriendPrivacy"])
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF(&dword_100132930, "-[RPPeopleDaemon diagnosticCommand:params:]", 30LL, "Diag: FriendPrivacy\n");
    }

    -[RPPeopleDaemon _updateFriendPrivacy](self, "_updateFriendPrivacy");
    goto LABEL_50;
  }

  if ([v6 caseInsensitiveCompare:@"FriendSuggest"])
  {
    if ([v6 caseInsensitiveCompare:@"PruneFriends"])
    {
      if (![v6 caseInsensitiveCompare:@"ResetFriends"])
      {
        if (dword_100132930 <= 30
          && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
        {
          LogPrintF(&dword_100132930, "-[RPPeopleDaemon diagnosticCommand:params:]", 30LL, "Diag: ResetFriends\n");
        }

        -[RPPeopleDaemon _resetFriends](self, "_resetFriends");
        goto LABEL_50;
      }

      if (![v6 caseInsensitiveCompare:@"RegenerateSelfIdentity"])
      {
        if (dword_100132930 <= 30
          && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
        {
          LogPrintF( &dword_100132930,  "-[RPPeopleDaemon diagnosticCommand:params:]",  30LL,  "Diag: RegenerateSelfIdentity\n");
        }

        -[RPPeopleDaemon _regenerateSelfIdentity:](self, "_regenerateSelfIdentity:", @"dcmd");
        goto LABEL_50;
      }

      if ([v6 caseInsensitiveCompare:@"update"])
      {
        unint64_t v8 = 0;
        goto LABEL_51;
      }

      if (dword_100132930 <= 30
        && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
      {
        LogPrintF(&dword_100132930, "-[RPPeopleDaemon diagnosticCommand:params:]", 30LL, "Diag: Update\n");
      }

      goto LABEL_101;
    }

    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF(&dword_100132930, "-[RPPeopleDaemon diagnosticCommand:params:]", 30LL, "Diag: PruneFriends\n");
    }

    unint64_t v8 = 1;
    -[RPPeopleDaemon _pruneFriends:](self, "_pruneFriends:", 1LL);
  }

  else
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF(&dword_100132930, "-[RPPeopleDaemon diagnosticCommand:params:]", 30LL, "Diag: FriendSuggest\n");
    }

    unint64_t v8 = 1;
    self->_friendsSuggestedNeedsUpdate = 1;
    -[RPPeopleDaemon _update](self, "_update");
  }

    unsigned __int8 v12 = "?";
    goto LABEL_35;
  }

void sub_100024E18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100024E30(uint64_t a1, void *a2, _BYTE *a3)
{
  id v9 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v9 peerDeviceInfo]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 idsDeviceIdentifier]);
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8 && [v9 linkType] == 6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    *a3 = 1;
  }
}

void sub_1000251AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000251C4(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a2 peerDeviceInfo]);
  if (v5)
  {
    id obj = v5;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 publicIdentifier]);
    unsigned int v7 = [v6 isEqual:*(void *)(a1 + 32)];

    uint64_t v5 = obj;
    if (v7)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), obj);
      uint64_t v5 = obj;
      *a3 = 1;
    }
  }
}

void sub_100025554( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44)
{
}

uint64_t sub_10002558C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    *a4 = 1;
  }
  return result;
}

uint64_t sub_1000255E0(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    *a4 = 1;
  }
  return result;
}

uint64_t sub_100025634(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    *a4 = 1;
  }
  return result;
}

void sub_10002572C(uint64_t a1, void *a2)
{
  id v3 = a2;
}

void sub_100025844(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v8 peerDeviceInfo]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 identifier]);

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v8 peerDeviceInfo]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 idsDeviceIdentifier]);

  if (!(v4 | v6))
  {
    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _forEachUniqueMatchingDestinationID:handler:]_block_invoke",  90LL,  "Skipping connection without identifier or IDS identifier (%@) \n",  v8);
    }

    goto LABEL_17;
  }

  if (!v4)
  {
    unsigned __int8 v7 = 0;
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  unsigned __int8 v7 = [*(id *)(a1 + 32) containsObject:v4];
  if (v6) {
LABEL_7:
  }
    v7 |= [*(id *)(a1 + 32) containsObject:v6];
LABEL_8:
  if (v4) {
    [*(id *)(a1 + 32) addObject:v4];
  }
  if (v6) {
    [*(id *)(a1 + 32) addObject:v6];
  }
  if ((v7 & 1) == 0) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
LABEL_17:
}

LABEL_12:
  unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice deviceColor](self->_localDeviceInfo, "deviceColor"));
  if (!v16)
  {
    __int128 v17 = (void *)GestaltCopyAnswer(@"DeviceColor", 0LL, 0LL);
    if (v17)
    {
      -[RPCompanionLinkDevice setDeviceColor:](self->_localDeviceInfo, "setDeviceColor:", v17);
      v179 = 1;
    }
  }

  __int128 v18 = -[RPCompanionLinkDevice flags](self->_localDeviceInfo, "flags");
  if ((v18 & 0xFFFFE2DF | (32 * (-[CUSystemMonitor wifiFlags](self->_systemMonitor, "wifiFlags") & 1)) | (self->_prefHIDEnabled << 10) | (self->_prefMediaControlEnabled << 8) | (self->_prefSiriEnabled << 11) | (self->_prefTextInputEnabled << 12)) != v18)
  {
    -[RPCompanionLinkDevice setFlags:](self->_localDeviceInfo, "setFlags:");
    v179 = 1;
  }

  if (!self->_needsPrimaryAppleIDUpdate)
  {
    __int128 v25 = 0LL;
    v176 = 0LL;
    goto LABEL_35;
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDaemon _getAltDSID](self, "_getAltDSID"));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice accountAltDSID](self->_localDeviceInfo, "accountAltDSID"));
  id v21 = v19;
  id v22 = v20;
  v176 = v21;
  if (v21 == v22)
  {

    goto LABEL_27;
  }

  uint64_t v23 = v22;
  if ((v21 == 0LL) == (v22 != 0LL))
  {

    goto LABEL_26;
  }

  uint64_t v24 = [v21 isEqual:v22];

  if ((v24 & 1) == 0)
  {
LABEL_26:
    -[RPCompanionLinkDevice setAccountAltDSID:](self->_localDeviceInfo, "setAccountAltDSID:", v21);
    v179 = 1;
  }
}

    uint64_t v14 = [v17 passwordType];
    if ((_DWORD)v14 != -[RPServer passwordType](self->_server, "passwordType"))
    {
      -[RPServer setPasswordType:](self->_server, "setPasswordType:", v14);
      unsigned __int8 v7 = 1;
    }

    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      unsigned __int8 v15 = -[NSXPCConnection processIdentifier](self->_xpcCnx, "processIdentifier");
      unsigned int v16 = "no changes";
      if (v7) {
        unsigned int v16 = "changed";
      }
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkXPCConnection xpcServerUpdate:]",  30LL,  "Update server: %@, from %#{pid}, %s\n",  v17,  v15,  v16);
    }

    if (v7) {
      -[RPCompanionLinkDaemon _updateForXPCServerChange](self->_daemon, "_updateForXPCServerChange");
    }

    goto LABEL_23;
  }

  if (dword_100131328 <= 90 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL))) {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkXPCConnection xpcServerUpdate:]",  90LL,  "### Server update failed: no server, %@, from %#{pid}\n",  v17,  -[NSXPCConnection processIdentifier](self->_xpcCnx, "processIdentifier"));
  }
LABEL_23:
}

    uint64_t v14 = 0;
    goto LABEL_15;
  }

  if ((-[RPNearbyInvitationDiscovery shouldReportDevice:]( self->_activatedDiscovery,  "shouldReportDevice:",  v6) & 1) == 0)
  {
    if (a4)
    {
      uint64_t v14 = 0;
      unsigned __int8 v15 = @"activateDiscoveryIgnore";
      goto LABEL_11;
    }

    goto LABEL_12;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](self->_devices, "objectForKeyedSubscript:", v7));

  devices = self->_devices;
  if (!devices)
  {
    id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    unsigned __int8 v11 = self->_devices;
    self->_devices = v10;

    devices = self->_devices;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](devices, "setObject:forKeyedSubscript:", v6, v7);
  unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSXPCConnection remoteObjectProxy](self->_xpcCnx, "remoteObjectProxy"));
  unsigned __int8 v13 = v12;
  if (v8) {
    [v12 nearbyInvitationChangedDevice:v6 changes:2];
  }
  else {
    [v12 nearbyInvitationFoundDevice:v6];
  }

  uint64_t v14 = 1;
LABEL_15:

  return v14;
}
}

  -[NSMutableString appendString:](v4, "appendString:", @" mac");
  if ((a3 & 8) == 0)
  {
LABEL_6:
    if ((a3 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

LABEL_85:
  v54 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice idsDeviceIdentifier](self->_localDeviceInfo, "idsDeviceIdentifier"));
  if (!v54)
  {
    v55 = (void *)objc_claimAutoreleasedReturnValue(+[RPCloudDaemon sharedCloudDaemon](&OBJC_CLASS___RPCloudDaemon, "sharedCloudDaemon"));
    v56 = (void *)objc_claimAutoreleasedReturnValue([v55 idsDeviceIDSelf]);

    if (v56)
    {
      -[RPCompanionLinkDevice setIdsDeviceIdentifier:](self->_localDeviceInfo, "setIdsDeviceIdentifier:", v56);
      v179 = 1;
    }
  }

  v57 = (void *)objc_claimAutoreleasedReturnValue(+[RPCloudDaemon sharedCloudDaemon](&OBJC_CLASS___RPCloudDaemon, "sharedCloudDaemon"));
  v58 = (void *)objc_claimAutoreleasedReturnValue([v57 idsCorrelationIdentifier]);

  v59 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice idsCorrelationIdentifier](self->_localDeviceInfo, "idsCorrelationIdentifier"));
  v60 = v58;
  v61 = v59;
  if (v60 == v61)
  {
  }

  else
  {
    v62 = v61;
    if ((v60 == 0LL) == (v61 != 0LL))
    {

LABEL_96:
      v171 = v60;
      -[RPCompanionLinkDevice setIdsCorrelationIdentifier:](self->_localDeviceInfo, "setIdsCorrelationIdentifier:");
      v179 = 1;
      goto LABEL_97;
    }

    v63 = [v60 isEqual:v61];

    if ((v63 & 1) == 0) {
      goto LABEL_96;
    }
  }

  v171 = 0LL;
LABEL_97:
  if ((int)-[RPCompanionLinkDevice listeningPort](self->_localDeviceInfo, "listeningPort") > 0
    || (v64 = -[CUTCPServer tcpListeningPort](self->_tcpServer, "tcpListeningPort"), (int)v64 < 1))
  {
    v170 = 0;
  }

  else
  {
    -[RPCompanionLinkDevice setListeningPort:](self->_localDeviceInfo, "setListeningPort:", v64);
    v170 = 1;
    v179 = 1;
  }

  v65 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice model](self->_localDeviceInfo, "model"));

  if (!v65)
  {
    v66 = (void *)GestaltCopyAnswer(@"ProductType", 0LL, 0LL);
    if (v66)
    {
      -[RPCompanionLinkDevice setModel:](self->_localDeviceInfo, "setModel:", v66);
      v179 = 1;
    }
  }

  if (self->_prefCommunal)
  {
    v67 = (id)objc_claimAutoreleasedReturnValue(-[CUSystemMonitor meDeviceIDSDeviceID](self->_systemMonitor, "meDeviceIDSDeviceID"));

    v60 = v67;
  }

  else
  {
    v67 = 0LL;
  }

  v68 = (void *)objc_claimAutoreleasedReturnValue( -[RPCompanionLinkDevice idsPersonalDeviceIdentifier]( self->_localDeviceInfo,  "idsPersonalDeviceIdentifier"));
  v69 = v67;
  v70 = v68;
  v180 = v69;
  if (v69 == v70)
  {

    goto LABEL_133;
  }

  v71 = v70;
  if ((v69 == 0LL) != (v70 != 0LL))
  {
    v72 = [v69 isEqual:v70];

    if ((v72 & 1) != 0) {
      goto LABEL_133;
    }
  }

  else
  {
  }

  if (dword_100131328 <= 30)
  {
    if (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)) {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _localDeviceUpdate]",  30LL,  "PersonalIDSDeviceIdentifier (me device) changed: ");
    }
    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      if (v4) {
        v73 = "%@ -> %@\n";
      }
      else {
        v73 = "%~@ -> %~@\n";
      }
      v74 = (void *)objc_claimAutoreleasedReturnValue( -[RPCompanionLinkDevice idsPersonalDeviceIdentifier]( self->_localDeviceInfo,  "idsPersonalDeviceIdentifier"));
      LogPrintF(&dword_100131328, "-[RPCompanionLinkDaemon _localDeviceUpdate]", 30LL, v73, v74, v69);
    }
  }

  -[RPCompanionLinkDevice setIdsPersonalDeviceIdentifier:]( self->_localDeviceInfo,  "setIdsPersonalDeviceIdentifier:",  v69);
  v204 = 0u;
  v205 = 0u;
  v202 = 0u;
  v203 = 0u;
  v75 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](self->_homeHubDevices, "allValues"));
  v76 = [v75 countByEnumeratingWithState:&v202 objects:v212 count:16];
  if (v76)
  {
    v77 = v76;
    v78 = *(void *)v203;
    do
    {
      for (i = 0LL; i != v77; i = (char *)i + 1)
      {
        if (*(void *)v203 != v78) {
          objc_enumerationMutation(v75);
        }
        v80 = *(void **)(*((void *)&v202 + 1) + 8LL * (void)i);
        [v80 setIdsPersonalDeviceIdentifier:v180];
        [v80 setChanged:1];
      }

      v77 = [v75 countByEnumeratingWithState:&v202 objects:v212 count:16];
    }

    while (v77);
  }

  -[RPCompanionLinkDaemon _personalDeviceUpdate](self, "_personalDeviceUpdate");
  v179 = 1;
LABEL_133:
  if (!self->_mediaAccessControlKVO && v7)
  {
    airplayPrefs = self->_airplayPrefs;
    if (!airplayPrefs)
    {
      v83 = -[NSUserDefaults initWithSuiteName:]( objc_alloc(&OBJC_CLASS___NSUserDefaults),  "initWithSuiteName:",  @"com.apple.airplay");
      v84 = self->_airplayPrefs;
      self->_airplayPrefs = v83;

      airplayPrefs = self->_airplayPrefs;
    }

    -[NSUserDefaults addObserver:forKeyPath:options:context:]( airplayPrefs,  "addObserver:forKeyPath:options:context:",  self,  @"accessControlLevel",  1LL,  0LL);
    -[NSUserDefaults addObserver:forKeyPath:options:context:]( self->_airplayPrefs,  "addObserver:forKeyPath:options:context:",  self,  @"p2pAllow",  1LL,  0LL);
    self->_mediaAccessControlKVO = 1;
  }

  v85 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice mediaRemoteIdentifier](self->_localDeviceInfo, "mediaRemoteIdentifier"));

  if (!v85) {
    -[RPCompanionLinkDaemon _mediaRemoteIDGet](self, "_mediaRemoteIDGet");
  }
  v86 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice mediaRouteIdentifier](self->_localDeviceInfo, "mediaRouteIdentifier"));

  if (!v86) {
    -[RPCompanionLinkDaemon _mediaRouteIDGet](self, "_mediaRouteIDGet");
  }
  v87 = self->_localDeviceInfo;
  if (v87)
  {
    -[RPCompanionLinkDevice operatingSystemVersion](v87, "operatingSystemVersion");
    if (v199) {
      goto LABEL_155;
    }
  }

  else
  {
    v199 = 0LL;
    v200 = 0LL;
    v201 = 0LL;
  }

  v88 = (void *)objc_claimAutoreleasedReturnValue(+[RPCloudDaemon sharedCloudDaemon](&OBJC_CLASS___RPCloudDaemon, "sharedCloudDaemon"));
  v89 = v88;
  if (v88)
  {
    [v88 operatingSystemVersionForSelf];
  }

  else
  {
    memset(v210, 0, sizeof(v210));
    v211 = 0LL;
  }

  v197 = *(_OWORD *)v210;
  v198 = v211;
  -[RPCompanionLinkDevice setOperatingSystemVersion:](self->_localDeviceInfo, "setOperatingSystemVersion:", &v197);
  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
  {
    v195 = *(_OWORD *)v210;
    v196 = v211;
    v90 = sub_10000A85C((uint64_t *)&v195);
    v91 = (void *)objc_claimAutoreleasedReturnValue(v90);
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _localDeviceUpdate]",  30LL,  "Operating system version: %@\n",  v91);
  }

LABEL_155:
  v92 = -[RPCompanionLinkDevice personalDeviceState](self->_localDeviceInfo, "personalDeviceState");
  if (self->_prefCommunal && -[CUSystemMonitor meDeviceValid](self->_systemMonitor, "meDeviceValid"))
  {
    v93 = (void *)objc_claimAutoreleasedReturnValue(-[CUSystemMonitor meDeviceFMFDeviceID](self->_systemMonitor, "meDeviceFMFDeviceID"));
    if ([v93 length]) {
      v94 = 6LL;
    }
    else {
      v94 = 5LL;
    }
  }

  else
  {
    v94 = 0LL;
  }

  if ((_DWORD)v94 != v92)
  {
    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      if (v92 >= 8)
      {
        v95 = "?";
        if (v92 > 9) {
          v95 = "User";
        }
      }

      else
      {
        v95 = off_1001124D8[v92];
      }

      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _localDeviceUpdate]",  30LL,  "PersonalDeviceState changed: %s -> %s\n",  v95,  off_100112430[v94]);
    }

    -[RPCompanionLinkDevice setPersonalDeviceState:](self->_localDeviceInfo, "setPersonalDeviceState:", v94);
    v193 = 0u;
    v194 = 0u;
    v191 = 0u;
    v192 = 0u;
    v96 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](self->_homeHubDevices, "allValues"));
    v97 = [v96 countByEnumeratingWithState:&v191 objects:v209 count:16];
    if (v97)
    {
      v98 = v97;
      v99 = *(void *)v192;
      do
      {
        for (j = 0LL; j != v98; j = (char *)j + 1)
        {
          if (*(void *)v192 != v99) {
            objc_enumerationMutation(v96);
          }
          v101 = *(void **)(*((void *)&v191 + 1) + 8LL * (void)j);
          [v101 setPersonalDeviceState:v94];
          [v101 setChanged:1];
        }

        v98 = [v96 countByEnumeratingWithState:&v191 objects:v209 count:16];
      }

      while (v98);
    }

    v179 = 1;
  }

  v102 = (unint64_t)-[RPCompanionLinkDevice statusFlags](self->_localDeviceInfo, "statusFlags");
  if (-[NSMutableSet containsObject:](self->_registeredProfileIDs, "containsObject:", @"DuetSync"))
  {
    -[RPCompanionLinkDaemon _duetSyncEnsureStarted](self, "_duetSyncEnsureStarted");
    v103 = 256LL;
  }

  else
  {
    -[RPCompanionLinkDaemon _duetSyncEnsureStopped](self, "_duetSyncEnsureStopped");
    v103 = 0LL;
  }

  v104 = v103 | v102 & 0xFFFFFEFFFFFFFEFFLL;
  v105 = -[CUSystemMonitor meDeviceIsMe](self->_systemMonitor, "meDeviceIsMe");
  prefMeDeviceIsMeOverride = self->_prefMeDeviceIsMeOverride;
  if (prefMeDeviceIsMeOverride)
  {
    v105 = -[NSNumber BOOLValue](prefMeDeviceIsMeOverride, "BOOLValue");
  }

  else
  {
    v107 = sub_100009D20();
    if (v107) {
      v105 = GestaltGetDeviceClass(v107, v108) == 1;
    }
  }

  v109 = 0x10000000000LL;
  if (!v105) {
    v109 = 0LL;
  }
  v175 = v104 | v109;
  if ((v104 | v109) != v102)
  {
    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _localDeviceUpdate]",  30LL,  "StatusFlags changed: %#ll{flags} -> %#ll{flags}\n",  v102,  &unk_1001095EF,  v175,  &unk_1001095EF);
    }

    -[RPCompanionLinkDevice setStatusFlags:](self->_localDeviceInfo, "setStatusFlags:", v175);
    v179 = 1;
  }

  btAdvAddrStr = self->_btAdvAddrStr;
  if (btAdvAddrStr)
  {
    v111 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice publicIdentifier](self->_localDeviceInfo, "publicIdentifier"));
    v112 = btAdvAddrStr;
    v113 = v111;
    if (v112 == v113)
    {
    }

    else
    {
      v114 = v113;
      if (v113)
      {
        v115 = -[NSString isEqual:](v112, "isEqual:", v113);

        if ((v115 & 1) != 0) {
          goto LABEL_203;
        }
      }

      else
      {
      }

      -[RPCompanionLinkDevice setPublicIdentifier:](self->_localDeviceInfo, "setPublicIdentifier:", self->_btAdvAddrStr);
      v179 = 1;
    }
  }

LABEL_203:
  v116 = -[RPCompanionLinkDevice serversChangedState](self->_localDeviceInfo, "serversChangedState");
  if (v116 != 6 && v116)
  {
    v126 = 0LL;
  }

  else
  {
    v117 = v102;
    v118 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    v187 = 0u;
    v188 = 0u;
    v189 = 0u;
    v190 = 0u;
    v119 = self->_activeServers;
    v120 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v119,  "countByEnumeratingWithState:objects:count:",  &v187,  v208,  16LL);
    if (v120)
    {
      v121 = v120;
      v122 = *(void *)v188;
      do
      {
        for (k = 0LL; k != v121; k = (char *)k + 1)
        {
          if (*(void *)v188 != v122) {
            objc_enumerationMutation(v119);
          }
          v124 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v187 + 1) + 8 * (void)k) serviceType]);
          if (v124) {
            -[NSMutableArray addObject:](v118, "addObject:", v124);
          }
        }

        v121 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v119,  "countByEnumeratingWithState:objects:count:",  &v187,  v208,  16LL);
      }

      while (v121);
    }

    xpcMatchingMap = self->_xpcMatchingMap;
    v185[0] = _NSConcreteStackBlock;
    v185[1] = 3221225472LL;
    v185[2] = sub_10002819C;
    v185[3] = &unk_100111D78;
    v126 = v118;
    v186 = v126;
    -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( xpcMatchingMap,  "enumerateKeysAndObjectsUsingBlock:",  v185);
    -[RPCompanionLinkDevice setServiceTypes:](self->_localDeviceInfo, "setServiceTypes:", v126);
    -[RPCompanionLinkDevice setServersChangedState:](self->_localDeviceInfo, "setServersChangedState:", 5LL);

    v102 = v117;
  }

  if (self->_needsActiveUserAltDSIDUpdate)
  {
    v127 = (void *)objc_claimAutoreleasedReturnValue(-[RPAppleTVDeviceInfoManager activeUserAltDSID](self->_tvDeviceInfoManager, "activeUserAltDSID"));
    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      v128 = (const char *)sub_10000AAC4((uint64_t)"activeUserAltDSID: ", v4);
      LogPrintF(&dword_100131328, "-[RPCompanionLinkDaemon _localDeviceUpdate]", 30LL, v128, v127);
    }

    v129 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice activeUserAltDSID](self->_localDeviceInfo, "activeUserAltDSID"));
    v130 = [v129 isEqualToString:v127];

    if ((v130 & 1) != 0)
    {
      v177 = 0LL;
    }

    else
    {
      v131 = v127;
      -[RPCompanionLinkDevice setActiveUserAltDSID:](self->_localDeviceInfo, "setActiveUserAltDSID:", v131);
      v132 = v131;

      -[RPCompanionLinkDevice setAccountAltDSID:](self->_localDeviceInfo, "setAccountAltDSID:", v132);
      v179 = 1;
      v176 = v132;
      v177 = v132;
    }

    self->_needsActiveUserAltDSIDUpdate = 0;
  }

  else
  {
    v177 = 0LL;
  }

  v133 = -[RPAppleTVDeviceInfoManager supportsFindMyRemote](self->_tvDeviceInfoManager, "supportsFindMyRemote");
  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
  {
    v134 = "no";
    if (v133) {
      v134 = "yes";
    }
    LogPrintF(&dword_100131328, "-[RPCompanionLinkDaemon _localDeviceUpdate]", 30LL, "supports FindMyRemote %s", v134);
  }

  v135 = -[RPCompanionLinkDevice deviceCapabilityFlags](self->_localDeviceInfo, "deviceCapabilityFlags");
  v136 = v135 & 0xFFFFFFFE | v133;
  v168 = v135;
  if (v135 != (_DWORD)v136)
  {
    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _localDeviceUpdate]",  30LL,  "DeviceCapabilityFlags changed: %#ll{flags} -> %#ll{flags}\n",  v102,  &unk_1001097AE,  v175,  &unk_1001097AE);
    }

    -[RPCompanionLinkDevice setDeviceCapabilityFlags:](self->_localDeviceInfo, "setDeviceCapabilityFlags:", v136);
    v179 = 1;
  }

  v167 = v136;
  v178 = v126;
  v169 = v102;
  v183 = 0u;
  v184 = 0u;
  v181 = 0u;
  v182 = 0u;
  v137 = self;
  v138 = self->_xpcConnections;
  v139 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v138,  "countByEnumeratingWithState:objects:count:",  &v181,  v207,  16LL);
  if (v139)
  {
    v140 = v139;
    v141 = *(void *)v182;
    do
    {
      for (m = 0LL; m != v140; m = (char *)m + 1)
      {
        if (*(void *)v182 != v141) {
          objc_enumerationMutation(v138);
        }
        v143 = *(void **)(*((void *)&v181 + 1) + 8LL * (void)m);
        v144 = (void *)objc_claimAutoreleasedReturnValue([v143 client]);

        if (v144)
        {
          v145 = (void *)objc_claimAutoreleasedReturnValue([v143 netCnx]);
          v146 = v145;
          if (v145)
          {
            v147 = v145;
          }

          else
          {
            v148 = (void *)objc_claimAutoreleasedReturnValue([v143 session]);
            v147 = (id)objc_claimAutoreleasedReturnValue([v148 cnx]);
          }

          if (([v147 controlFlags] & 0x200) != 0)
          {
            v149 = (void *)objc_claimAutoreleasedReturnValue([v143 client]);
            v150 = [v149 usingOnDemandConnection];

            if ((v150 & 1) == 0)
            {
              v151 = (void *)objc_claimAutoreleasedReturnValue([v143 client]);
              [v151 setUsingOnDemandConnection:1];

              v152 = (void *)objc_claimAutoreleasedReturnValue([v143 xpcCnx]);
              v153 = (void *)objc_claimAutoreleasedReturnValue([v152 remoteObjectProxy]);
              v154 = (void *)objc_claimAutoreleasedReturnValue([v143 client]);
              [v153 companionLinkUpdateClientState:v154];
            }
          }

          v155 = (void *)objc_claimAutoreleasedReturnValue([v143 launchInstanceID]);
          if (v155)
          {
            -[RPCompanionLinkDaemon _proxyLocalDeviceUpdateOnConnection:launchInstanceID:]( v137,  "_proxyLocalDeviceUpdateOnConnection:launchInstanceID:",  v143,  v155);
          }

          else if ((v179 & 1) != 0 || ([v143 localDeviceUpdated] & 1) == 0)
          {
            v156 = (void *)objc_claimAutoreleasedReturnValue([v143 xpcCnx]);
            v157 = (void *)objc_claimAutoreleasedReturnValue([v156 remoteObjectProxy]);
            [v157 companionLinkLocalDeviceUpdated:v137->_localDeviceInfo];

            [v143 setLocalDeviceUpdated:1];
          }
        }
      }

      v140 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v138,  "countByEnumeratingWithState:objects:count:",  &v181,  v207,  16LL);
    }

    while (v140);
  }

  v158 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v159 = v158;
  if (v176) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v158,  "setObject:forKeyedSubscript:",  v176,  @"_accAltDSID");
  }
  if (v173) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v159, "setObject:forKeyedSubscript:", v173, @"_accID");
  }
  if (v174) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v159, "setObject:forKeyedSubscript:", v174, @"_hkID");
  }
  if (v172) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v159, "setObject:forKeyedSubscript:", v172, @"_hkUID");
  }
  if (v178) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v159, "setObject:forKeyedSubscript:", v178, @"_stA");
  }
  if (v170)
  {
    v160 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  -[RPCompanionLinkDevice listeningPort](v137->_localDeviceInfo, "listeningPort")));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v159, "setObject:forKeyedSubscript:", v160, @"_lP");
  }

  if (v175 != v169)
  {
    v161 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  (unint64_t)-[RPCompanionLinkDevice statusFlags](v137->_localDeviceInfo, "statusFlags") & 0x10000010100LL));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v159, "setObject:forKeyedSubscript:", v161, @"_sf");
  }

  if (v171)
  {
    v162 = (void *)objc_claimAutoreleasedReturnValue( -[RPCompanionLinkDevice idsCorrelationIdentifier]( v137->_localDeviceInfo,  "idsCorrelationIdentifier"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v159, "setObject:forKeyedSubscript:", v162, @"_idsCID");
  }

  if (v177)
  {
    v163 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice activeUserAltDSID](v137->_localDeviceInfo, "activeUserAltDSID"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v159, "setObject:forKeyedSubscript:", v163, @"_aaltDSID");
  }

  if (v168 != v167)
  {
    v164 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  -[RPCompanionLinkDevice deviceCapabilityFlags](v137->_localDeviceInfo, "deviceCapabilityFlags")));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v159, "setObject:forKeyedSubscript:", v164, @"_dCapF");
  }

  v165 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](v159, "allKeys"));
  v166 = [v165 count];

  if (v166) {
    -[RPCompanionLinkDaemon sendEventID:event:destinationID:options:completion:]( v137,  "sendEventID:event:destinationID:options:completion:",  @"_systemInfoUpdate",  v159,  @"rapport:rdid:SameHome",  0LL,  0LL);
  }
  -[RPCompanionLinkDevice setChanged:](v137->_localDeviceInfo, "setChanged:", 0LL);
}

void sub_10002819C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a3 server]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 serviceType]);

  uint64_t v5 = v6;
  if (v6)
  {
    [*(id *)(a1 + 32) addObject:v6];
    uint64_t v5 = v6;
  }
}

id sub_100028494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _interestSendEventID:a2 event:a3];
}

void sub_100028608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 593LL) = 0;
  if (a2 && !a3)
  {
    uint64_t v5 = MRPairedDeviceCopyIdentifier(a2);
    id v6 = (void *)v5;
    if (!v5)
    {
      if (dword_100131328 > 90) {
        goto LABEL_28;
      }
      id v13 = 0LL;
      if (dword_100131328 == -1)
      {
        int v12 = _LogCategory_Initialize(&dword_100131328, 90LL);
        id v6 = 0LL;
        if (!v12) {
          goto LABEL_28;
        }
      }

      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _mediaRemoteIDGet]_block_invoke",  90LL,  "### MRPairedDeviceCopyIdentifier failed\n");
LABEL_27:
      id v6 = v13;
LABEL_28:

      return;
    }

    id v13 = (id)v5;
    unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 1048) mediaRemoteIdentifier]);
    id v8 = v13;
    id v9 = v7;
    id v10 = v9;
    if (v8 == v9)
    {
    }

    else
    {
      if (v9)
      {
        unsigned __int8 v11 = [v8 isEqual:v9];

        if ((v11 & 1) != 0) {
          goto LABEL_26;
        }
      }

      else
      {
      }

      if (dword_100131328 <= 30
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
      {
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _mediaRemoteIDGet]_block_invoke",  30LL,  "MediaRemoteIdentifier changed: %@ -> %@\n",  v10,  v8);
      }

      [*(id *)(*(void *)(a1 + 32) + 1048) setMediaRemoteIdentifier:v8];
      [*(id *)(*(void *)(a1 + 32) + 1048) setChanged:1];
      [*(id *)(a1 + 32) _update];
      id v8 = (id)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
      [v8 postDaemonInfoChanges:0x20000];
    }

LABEL_26:
    goto LABEL_27;
  }

  if (dword_100131328 <= 90 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL))) {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _mediaRemoteIDGet]_block_invoke",  90LL,  "### MRMediaRemoteGetDeviceInfo failed: %{error}\n",  a3);
  }
}

void sub_1000288B4(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) invalidate];
  *(_BYTE *)(*(void *)(a1 + 40) + 594LL) = 0;
  if (v13 && !v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 1048) mediaRouteIdentifier]);
    unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 UUIDString]);

    if (v8)
    {
      id v9 = v8;
      id v10 = v6;
      unsigned __int8 v11 = v10;
      if (v9 == v10)
      {
      }

      else
      {
        if (v10)
        {
          unsigned __int8 v12 = [v9 isEqual:v10];

          if ((v12 & 1) != 0) {
            goto LABEL_21;
          }
        }

        else
        {
        }

        if (dword_100131328 <= 30
          && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
        {
          LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _mediaRouteIDGet]_block_invoke",  30LL,  "MediaRouteIdentifier changed: %@ -> %@\n",  v11,  v9);
        }

        [*(id *)(*(void *)(a1 + 40) + 1048) setMediaRouteIdentifier:v9];
        [*(id *)(*(void *)(a1 + 40) + 1048) setChanged:1];
        [*(id *)(a1 + 40) _update];
        unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
        [v11 postDaemonInfoChanges:0x20000];
      }
    }

id sub_100028CC8(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_miscHandleLaunchAppRequest:responseHandler:", a2);
}

id sub_100028CD4(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_miscHandleSpeakRequest:responseHandler:", a2);
}

id sub_100028CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _[*(id *)(a1 + 32) _sessionHandleStartRequest:a3 options:a4 cnx:a2 responseHandler:a5];
}

id sub_100028CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _[*(id *)(a1 + 32) _sessionHandleStopRequest:a3 options:a4 cnx:a2 responseHandler:a5];
}

void sub_100028FF8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48))
  {
    id v2 = off_1001313B0();
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    id v13 = v3;
    uint64_t v14 = &__kCFBooleanTrue;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL));
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  id v5 = -[objc_class optionsWithDictionary:](off_1001313B8(), "optionsWithDictionary:", v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = -[objc_class serviceWithDefaultShellEndpoint](off_1001313C0(), "serviceWithDefaultShellEndpoint");
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100029148;
  v10[3] = &unk_100111E40;
  id v9 = *(void **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = v9;
  [v8 openApplication:v11 withOptions:v6 completion:v10];
}

void sub_100029148(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _miscHandleLaunchAppRequest:responseHandler:]_block_invoke_2",  90LL,  "### Failed to launch application with bundle '%@': %@\n",  *(void *)(a1 + 32),  v5);
    }

    id v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    if (dword_100131328 <= 30
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _miscHandleLaunchAppRequest:responseHandler:]_block_invoke_2",  30LL,  "Successfully launched application with bundle ID '%@'\n",  *(void *)(a1 + 32));
    }

    id v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v6();
}

void sub_10002926C(uint64_t a1)
{
  id v2 = -[objc_class defaultWorkspace](off_1001313C8(), "defaultWorkspace");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(a1 + 32);
  id v16 = 0LL;
  unsigned __int8 v5 = [v3 openURL:v4 withOptions:&__NSDictionary0__struct error:&v16];
  id v6 = v16;

  if ((v5 & 1) != 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _miscHandleLaunchAppRequest:responseHandler:]_block_invoke_3",  90LL,  "### Launch URL failed: %@, %{error}\n",  *(void *)(a1 + 32),  v6);
    }

    uint64_t v12 = *(void *)(a1 + 40);
    id v13 = RPNestedErrorF((uint64_t)v6, 4294960541LL, (uint64_t)"Open URL failed", v7, v8, v9, v10, v11, v15);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    (*(void (**)(uint64_t, void, void, void *))(v12 + 16))(v12, 0LL, 0LL, v14);
  }
}

id sub_100029514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (a2) {
    unsigned __int8 v5 = 0LL;
  }
  else {
    unsigned __int8 v5 = &__NSDictionary0__struct;
  }
  (*(void (**)(uint64_t, void *, void, uint64_t))(v4 + 16))(v4, v5, 0LL, a2);
  return [*(id *)(a1 + 32) invalidate];
}

id sub_100029748(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(_BYTE *)(v1 + 753))
  {
    *(_BYTE *)(v1 + 752) = *((_BYTE *)result + 40);
    return [*((id *)result + 4) _stereoDeviceUpdate:0];
  }

  return result;
}

_BYTE *sub_10002976C(uint64_t a1)
{
  uint64_t result = *(_BYTE **)(a1 + 32);
  if (result[592]) {
    return [result _serverBonjourUpdateTXT];
  }
  return result;
}

void sub_1000298D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000298EC(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (([v7 statusFlags] & 0x80000) != 0
    && ([v7 controlFlags] & 0x200) == 0)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v7 peerDeviceInfo]);
    unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v4 idsDeviceIdentifier]);
    if ([v5 isEqual:*(void *)(a1 + 32)])
    {
      if (([v4 isPersonal] & 1) == 0)
      {
        [v4 setPersonal:1];
LABEL_8:
        objc_msgSend(v4, "setStatusFlags:", (unint64_t)objc_msgSend(v4, "statusFlags") | 0x80);
        [*(id *)(a1 + 40) _activeDeviceChanged:v4 changes:2];
      }
    }

    else
    {
      unint64_t v6 = (unint64_t)[v4 statusFlags] & 0x10000080000;
      if ([v4 isPersonal] != (v6 == 0x10000080000))
      {
        [v4 setPersonal:v6 == 0x10000080000];
        if (v6 != 0x10000080000LL)
        {
          objc_msgSend(v4, "setStatusFlags:", (unint64_t)objc_msgSend(v4, "statusFlags") & 0xFFFFFFFFFFFFFF7FLL);
          [*(id *)(a1 + 40) _activeDeviceChanged:v4 changes:2];
          goto LABEL_11;
        }

        goto LABEL_8;
      }

      if (v6 != 0x10000080000LL)
      {
LABEL_11:

        goto LABEL_12;
      }
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a2);
    goto LABEL_11;
  }

LABEL_76:
      objc_storeStrong((id *)&self->_stereoCnx, (id)v64[5]);
      uint64_t v24 = 1;
      goto LABEL_77;
    }

    if (v33 || !stereoCnx)
    {
      if (dword_100131328 > 30) {
        goto LABEL_76;
      }
      if (dword_100131328 == -1)
      {
        id v33 = (RPConnection *)v64[5];
      }

      v35 = (void *)objc_claimAutoreleasedReturnValue(-[RPConnection peerDeviceInfo](v33, "peerDeviceInfo"));
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _stereoDeviceUpdate:]",  30LL,  "Stereo counterpart changed: %@\n",  v35);
    }

    else
    {
      if (dword_100131328 > 30) {
        goto LABEL_76;
      }
      if (dword_100131328 == -1)
      {
        __int128 v36 = (void *)v64[5];
      }

      else
      {
        __int128 v36 = 0LL;
      }

      v35 = (void *)objc_claimAutoreleasedReturnValue([v36 peerDeviceInfo]);
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _stereoDeviceUpdate:]",  30LL,  "Stereo counterpart lost: %@\n",  v35);
    }

LABEL_77:
  if (a3 <= 3 && v24) {
    -[RPCompanionLinkDaemon _homeKitSelfAccessoryMediaSystemUpdated:]( self,  "_homeKitSelfAccessoryMediaSystemUpdated:",  (a3 + 1));
  }
  if (self->_prefCommunal)
  {
    __int128 v37 = v21 - 2;
    if ((v21 - 2) > 2)
    {
      __int128 v38 = 2;
    }

    else if (self->_stereoCnx)
    {
      __int128 v38 = 5;
    }

    else
    {
      __int128 v38 = 6;
    }

    airplayBuddyNotReachableState = self->_airplayBuddyNotReachableState;
    if (v38 == airplayBuddyNotReachableState) {
      goto LABEL_105;
    }
    if (dword_100131328 <= 30)
    {
      __int128 v40 = self->_airplayBuddyNotReachableState;
      if (dword_100131328 == -1)
      {
        __int128 v40 = self->_airplayBuddyNotReachableState;
      }

      if (v40 >= 8)
      {
        if (v40 <= 9) {
          __int128 v41 = "?";
        }
        else {
          __int128 v41 = "User";
        }
      }

      else
      {
        __int128 v41 = off_1001124D8[v40];
      }

      __int128 v42 = v38 - 2LL;
      else {
        __int128 v43 = off_100112490[v42];
      }
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _stereoDeviceUpdate:]",  30LL,  "AirPlay not reachable state changed: %s -> %s\n",  v41,  v43);
    }

LABEL_100:
    self->_airplayBuddyNotReachableState = v38;
    if (v38 == 2)
    {
      CFPrefs_RemoveValue(@"com.apple.airplay", @"tightSyncBuddyNotReachable");
    }

    else
    {
      v44 = &kCFBooleanTrue;
      if (v38 != 6) {
        v44 = &kCFBooleanFalse;
      }
      CFPrefs_SetValue(@"com.apple.airplay", @"tightSyncBuddyNotReachable", *v44);
    }

LABEL_105:
    if (v37 > 2) {
      v45 = 2;
    }
    else {
      v45 = -[RPCompanionLinkDaemon _airPlayLeaderStateUncached](self, "_airPlayLeaderStateUncached");
    }
    airplayLeaderState = self->_airplayLeaderState;
    if (v45 == airplayLeaderState)
    {
      if (v38 == airplayBuddyNotReachableState) {
        goto LABEL_131;
      }
LABEL_130:
      CFPreferencesAppSynchronize(@"com.apple.airplay");
      notify_post("com.apple.airplay.prefsChanged");
      goto LABEL_131;
    }

    if (dword_100131328 <= 30)
    {
      if (dword_100131328 != -1)
      {
LABEL_113:
        if (airplayLeaderState >= 8)
        {
          if (airplayLeaderState <= 9) {
            v47 = "?";
          }
          else {
            v47 = "User";
          }
        }

        else
        {
          v47 = off_1001124D8[airplayLeaderState];
        }

        if (v45 >= 8)
        {
          v48 = "?";
          if (v45 > 9) {
            v48 = "User";
          }
        }

        else
        {
          v48 = off_1001124D8[v45];
        }

        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _stereoDeviceUpdate:]",  30LL,  "AirPlay leader state changed: %s -> %s\n",  v47,  v48);
        goto LABEL_125;
      }

      if (_LogCategory_Initialize(&dword_100131328, 30LL))
      {
        airplayLeaderState = self->_airplayLeaderState;
        goto LABEL_113;
      }
    }

LABEL_125:
    self->_airplayLeaderState = v45;
    if (v45 == 2)
    {
      CFPrefs_RemoveValue(@"com.apple.airplay", @"tightSyncIsGroupLeader");
    }

    else
    {
      v49 = &kCFBooleanTrue;
      if (v45 != 6) {
        v49 = &kCFBooleanFalse;
      }
      CFPrefs_SetValue(@"com.apple.airplay", @"tightSyncIsGroupLeader", *v49);
    }

    goto LABEL_130;
  }

LABEL_131:
  if (v16)
  {
    dispatchQueue = (dispatch_queue_s *)self->_dispatchQueue;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10002A830;
    block[3] = &unk_1001110A8;
    block[4] = self;
    dispatch_async(dispatchQueue, block);
    v69[0] = @"_clFl";
    v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (unint64_t)-[RPCompanionLinkDevice flags](self->_localDeviceInfo, "flags") & 0x280));
    v69[1] = @"_msSt";
    v70[0] = v51;
    v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  -[RPCompanionLinkDevice mediaSystemState](self->_localDeviceInfo, "mediaSystemState")));
    v70[1] = v52;
    v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v70,  v69,  2LL));
    -[RPCompanionLinkDaemon sendEventID:event:destinationID:options:completion:]( self,  "sendEventID:event:destinationID:options:completion:",  @"_systemInfoUpdate",  v53,  @"rapport:rdid:SameHome",  0LL,  0LL);
  }

  _Block_object_dispose(&v57, 8);
  _Block_object_dispose(&v63, 8);
}

void sub_10002A6C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void sub_10002A724(uint64_t a1, void *a2)
{
  id v9 = a2;
  if (([v9 statusFlags] & 0x80000) != 0
    && ([v9 controlFlags] & 0x200) == 0
    && [v9 state] == 1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v9 peerDeviceInfo]);
    if ([v4 mediaSystemRole] == *(_DWORD *)(a1 + 56))
    {
      unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v4 mediaSystemIdentifier]);
      unsigned int v6 = [v5 isEqual:*(void *)(a1 + 32)];

      if (v6)
      {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v9 peerIdentifier]);
        uint64_t v8 = v7;
        if (v7
          && *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)
          && ((unint64_t)objc_msgSend(v7, "caseInsensitiveCompare:") & 0x8000000000000000) != 0)
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v8);
        }
      }
    }
  }
}

id sub_10002A830(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void *sub_10002AE94(void *result)
{
  if (*(void *)(result[4] + 544LL))
  {
    uint64_t v1 = result;
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1[4] + 544) resolvableAccessories]);
    [v2 resolvableAccessoriesUpdated:v3];

    return [(id)v1[4] _clientBonjourReevaluateUnauthDevices];
  }

  return result;
}

void *sub_10002AF14(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[68]) {
    return _[result _homeKitSelfAccessoryMediaAccessUpdated];
  }
  return result;
}

void *sub_10002AF28(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[68]) {
    return [result _homeKitSelfAccessoryMediaSystemUpdated:0];
  }
  return result;
}

void *sub_10002AF40(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[68]) {
    return _[result _homeKitSelfAccessoryUpdated];
  }
  return result;
}

void *sub_10002AF54(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[68]) {
    return _[result _homeKitSelfAccessoryUpdated];
  }
  return result;
}

void *sub_10002AF68(void *result, int a2)
{
  if (a2 == 1)
  {
    id v2 = result;
    uint64_t result = (void *)result[4];
    if (result[68])
    {
      if (!*((_BYTE *)result + 520) && !*((_BYTE *)result + 521))
      {
        if (dword_100131328 <= 30
          && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
        {
          LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _homeKitEnsureStarted]_block_invoke_6",  30LL,  "HomeKit identity force get\n");
        }

        *(_BYTE *)(v2[4] + 520LL) = 1;
        uint64_t result = (void *)v2[4];
      }

      return [result _homeKitEnsureStarted];
    }
  }

  return result;
}

id sub_10002B014(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updatePersonalRequestsStateForHomeHubDevices];
}

id sub_10002B01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _updateRoomInfoForHomeHubDevice:a2 roomName:a3];
}

void sub_10002B02C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 496) homeHubDeviceList]);
  [*(id *)(a1 + 32) _updateHomeHubDevices:v2];
}

id sub_10002B080(uint64_t a1, void *a2, int a3)
{
  unsigned __int8 v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 1040LL);
  id v6 = a2;
  dispatch_assert_queue_V2(v5);
  id v7 = *(void **)(a1 + 32);
  if (a3) {
    [v7 _homeHubDeviceAdded:v6];
  }
  else {
    [v7 _homeHubDeviceRemoved:v6];
  }

  return [*(id *)(a1 + 32) _update];
}

id sub_10002B2D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _homeKitGetPairingIdentities];
}

void *sub_10002B3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 521LL) = 0;
  uint64_t result = *(void **)(a1 + 32);
  if (result[68]) {
    return _[result _homeKitIdentityUpdated:a2 error:a3];
  }
  return result;
}

void sub_10002BAB8(id a1, RPConnection *a2, BOOL *a3)
{
  id v3 = a2;
}

LABEL_32:
              FatalErrorF("Bad HomeKitUniqueID length %d", -[NSData length](uniqueIDData, "length"));
            }
          }

          else
          {
            FatalErrorF("Bad BTAdvAddr length %d", -[NSData length](btAdvAddrData, "length"));
          }

          uniqueIDData = (NSData *)FatalErrorF( "Bad Discovery Nonce length %d",  [v14 length]);
          goto LABEL_32;
        }
      }
    }
  }

    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 identitiesOfType:6 error:0]);

    if (v20) {
      -[NSMutableArray addObjectsFromArray:](v8, "addObjectsFromArray:", v20);
    }

    if ((v4 & 0x100) == 0)
    {
LABEL_10:
      if ((v4 & 0x400) == 0) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }

    self->_prefFriendRefreshMinSeconds = v13;
    p_prefFriendRefreshSeconds = &self->_prefFriendRefreshSeconds;
    goto LABEL_33;
  }

  p_prefFriendRefreshSeconds = &self->_prefFriendRefreshSeconds;
  if (v10 == prefFriendRefreshMaxSeconds)
  {
    prefFriendRefreshSeconds = self->_prefFriendRefreshSeconds;
    goto LABEL_38;
  }
}

void sub_10002D4E0(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (v2
    && dword_100131328 <= 90
    && ((v5 = v2, dword_100131328 != -1) || (int v4 = _LogCategory_Initialize(&dword_100131328, 90LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _homeHubDeviceAdded:]_block_invoke",  90LL,  "### Failed to send device list for newly added proxy devices: %@\n",  v3);
  }

  else
  {
  }

void sub_10002D6E8(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (v2
    && dword_100131328 <= 90
    && ((v5 = v2, dword_100131328 != -1) || (int v4 = _LogCategory_Initialize(&dword_100131328, 90LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _homeHubDeviceRemoved:]_block_invoke",  90LL,  "### Failed to send device list for deleted proxy devices: %@\n",  v3);
  }

  else
  {
  }

LABEL_35:
    _Block_object_dispose(&v58, 8);
    _Block_object_dispose(v62, 8);
  }
}

    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 identitiesOfType:9 error:0]);

    if (v22) {
      -[NSMutableArray addObjectsFromArray:](v8, "addObjectsFromArray:", v22);
    }

    if ((v4 & 0x400) == 0)
    {
LABEL_11:
      if ((v4 & 0x40) == 0) {
        goto LABEL_12;
      }
      goto LABEL_44;
    }
      }

      id v7 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (!v7)
      {
LABEL_39:

        return v8;
      }
    }
  }

  if (dword_100132930 <= 10 && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 10LL))) {
    LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _pruneFriendAccounts:]",  10LL,  "Skipping prune friend accounts: invalid prune seconds %lld\n",  prefFriendAccountPruneSeconds);
  }
  return 0;
}

        id v13 = v90;
        goto LABEL_36;
      }
    }

    -[RPIdentity setContactID:](v19, "setContactID:", v27);
    v20 |= 0x8000u;
    goto LABEL_27;
  }

  if (dword_100132930 <= 90 && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 90LL))) {
    LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateIdentityType:idsDeviceID:appleID:contactID:msg:]",  90LL,  "### Update device with unsupported identity type: %d\n",  v10);
  }
  uint64_t v20 = 0;
LABEL_121:

  return v20;
}

void sub_10002E868( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

void sub_10002E8A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  else {
    uint64_t v4 = 0LL;
  }
  uint64_t v11 = (void *)OPACKEncoderCreateData(*(void *)(a1 + 40), v4, &v22);
  if (!v11)
  {
    if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
    {
      id v12 = RPErrorF(v22, (uint64_t)"OPACK encode failed", v5, v6, v7, v8, v9, v10, v20);
      uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);
      uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8LL);
      uint64_t v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

  uint64_t v16 = *(unsigned int *)(a1 + 80);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 56);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_10002E9B4;
  void v21[3] = &unk_100112008;
  uint64_t v19 = *(void *)(a1 + 64);
  v21[4] = *(void *)(a1 + 32);
  v21[5] = v19;
  [v3 sendEncryptedEventID:v17 data:v11 xid:v16 options:v18 completion:v21];
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
}

void sub_10002E9B4(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (v7)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v6 = *(void *)(v4 + 40);
    uint64_t v5 = (id *)(v4 + 40);
    if (!v6) {
      objc_storeStrong(v5, a2);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10002EA0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  else {
    uint64_t v4 = 0LL;
  }
  uint64_t v11 = (void *)OPACKEncoderCreateData(*(void *)(a1 + 40), v4, &v22);
  if (!v11)
  {
    if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
    {
      id v12 = RPErrorF(v22, (uint64_t)"OPACK encode failed", v5, v6, v7, v8, v9, v10, v20);
      uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);
      uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8LL);
      uint64_t v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

  uint64_t v16 = *(unsigned int *)(a1 + 80);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 56);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_10002EB1C;
  void v21[3] = &unk_100112008;
  uint64_t v19 = *(void *)(a1 + 64);
  v21[4] = *(void *)(a1 + 32);
  v21[5] = v19;
  [v3 sendEncryptedEventID:v17 data:v11 xid:v16 options:v18 completion:v21];
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
}

void sub_10002EB1C(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (v7)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v6 = *(void *)(v4 + 40);
    uint64_t v5 = (id *)(v4 + 40);
    if (!v6) {
      objc_storeStrong(v5, a2);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_10002EB74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  }
  return result;
}

LABEL_7:
}

    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _receivedEventID:event:options:unauth:cnx:]",  90LL,  "Ignoring received event '%@' from unauthenticated device (%@) \n",  v15,  v14);
    }

    goto LABEL_12;
  }

  if (![v15 isEqual:@"_needsAWDL"])
  {
LABEL_24:
    -[RPCompanionLinkDaemon _deliverEventID:event:options:unauth:cnx:outError:]( self,  "_deliverEventID:event:options:unauth:cnx:outError:",  v15,  v12,  v13,  v8,  v14,  0LL);
    goto LABEL_12;
  }

  if (!v8)
  {
    -[RPCompanionLinkDaemon _serverReceivedNeedsAWDLEvent:event:]( self,  "_serverReceivedNeedsAWDLEvent:event:",  v15,  v12);
    goto LABEL_24;
  }

  if (dword_100131328 <= 90 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL))) {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _receivedEventID:event:options:unauth:cnx:]",  90LL,  "Ignoring received event '%@' from unauthenticated device (%@)\n",  v15,  v14);
  }
LABEL_12:
}

  if (self->_personConfirmationSessionID)
  {
    uint64_t v18 = (unint64_t)[v15 unsignedIntegerValue];
    if (dword_100132BB0 <= 30
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
    {
      if (v18 > 7) {
        uint64_t v19 = "?";
      }
      else {
        uint64_t v19 = (&off_100114E38)[v18];
      }
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _handleConfirmationResult:fromDevice:]",  30LL,  "Received '%s' for continuity camera confirmation from device: %@\n",  v19,  v7);
    }

    v44 = v17;
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( -[RPRemoteDisplayDaemon _findMatchingDeviceWithIdentifier:]( self,  "_findMatchingDeviceWithIdentifier:",  v7));
    if (v18 == 1)
    {
      -[RPRemoteDisplayDaemon _sendConfirmationCancelToAllDevices](self, "_sendConfirmationCancelToAllDevices");
      if (!v24)
      {
        if (dword_100132BB0 <= 90
          && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
        {
          LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _handleConfirmationResult:fromDevice:]",  90LL,  "### Failed to find continuity camera device confirmed (IDS ID: %@), treat as decline\n",  v7);
        }

        personSelected = self->_personSelected;
        self->_personSelected = 0LL;

        goto LABEL_52;
      }

      __int128 v25 = self;
      unsigned int v26 = v7;
      uint64_t v27 = 1LL;
    }

    else
    {
      if (!-[NSMutableDictionary count](self->_personConfirmationClientMap, "count"))
      {
        __int128 v40 = v13;
        __int128 v41 = v10;
        __int128 v42 = v6;
        if (dword_100132BB0 <= 30
          && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
        {
          __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(-[RPRemoteDisplayPerson accountID](self->_personSelected, "accountID"));
          LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _handleConfirmationResult:fromDevice:]",  30LL,  "Received non-accept response from all devices for selected person: %{mask}@\n",  v28);
        }

        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        __int128 v29 = self->_xpcConnections;
        __int128 v30 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v29,  "countByEnumeratingWithState:objects:count:",  &v45,  v49,  16LL);
        if (v30)
        {
          __int128 v31 = v30;
          __int128 v32 = *(void *)v46;
          do
          {
            for (i = 0LL; i != v31; i = (char *)i + 1)
            {
              if (*(void *)v46 != v32) {
                objc_enumerationMutation(v29);
              }
              v34 = *(void **)(*((void *)&v45 + 1) + 8LL * (void)i);
              v35 = (void *)objc_claimAutoreleasedReturnValue([v34 activatedDiscovery]);

              if (v35)
              {
                __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v34 xpcCnx]);
                __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 remoteObjectProxy]);
                [v37 remoteDisplayPersonDeclined];
              }
            }

            __int128 v31 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v29,  "countByEnumeratingWithState:objects:count:",  &v45,  v49,  16LL);
          }

          while (v31);
        }

        __int128 v38 = self->_personSelected;
        self->_personSelected = 0LL;

        uint64_t v10 = v41;
        uint64_t v6 = v42;
        uint64_t v13 = v40;
      }

      __int128 v25 = self;
      unsigned int v26 = 0LL;
      uint64_t v27 = 0LL;
    }

    -[RPRemoteDisplayDaemon _processDiscoverySessionStateChangeForDevice:startReason:]( v25,  "_processDiscoverySessionStateChangeForDevice:startReason:",  v26,  v27);
LABEL_52:

    uint64_t v17 = v44;
    goto LABEL_53;
  }

  if (dword_100132BB0 <= 90 && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL))) {
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _handleConfirmationResult:fromDevice:]",  90LL,  "### Skip continuity camera confirmation, no confirmation session ID\n");
  }
LABEL_53:
}

void sub_10002F7FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void *sub_10002F814(void *result, void *a2, _BYTE *a3)
{
  uint64_t v3 = *(void *)(result[8] + 8LL);
  if (!*(_BYTE *)(v3 + 24))
  {
    *(_BYTE *)(v3 + 24) = 1;
    uint64_t result = [a2 sendEncryptedRequestID:result[4] request:result[5] xpcID:*((unsigned int *)result + 18) options:result[6] responseHandler:result[7]];
    *a3 = 1;
  }

  return result;
}

void sub_10003111C(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = v2;
  if (v2
    && dword_100131328 <= 90
    && ((v5 = v2, dword_100131328 != -1) || (int v4 = _LogCategory_Initialize(&dword_100131328, 90LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _sendProxyDeviceUpdateToPeer:]_block_invoke",  90LL,  "### Failed to send proxy device list: %@\n",  v3);
  }

  else
  {
  }

void sub_100031A04(uint64_t a1)
{
  id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 568) objectForKeyedSubscript:*(void *)(a1 + 48)]);
  [v13 setTimer:0];
  [*(id *)(*(void *)(a1 + 40) + 568) setObject:0 forKeyedSubscript:*(void *)(a1 + 48)];
  uint64_t v2 = mach_absolute_time();
  UpTicksToSecondsF(v2 - (void)[v13 sendTicks]);
  if (dword_100131328 <= 90 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v13 requestID]);
  }

  uint64_t v3 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue([v13 responseHandler]);
  id v10 = RPErrorF(4294960574LL, (uint64_t)"Request timed out on loopback", v4, v5, v6, v7, v8, v9, (uint64_t)v12);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  ((void (**)(void, void, void, void *))v3)[2](v3, 0LL, 0LL, v11);
}

void sub_100032058(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 568) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  if (v8)
  {
    [*(id *)(*(void *)(a1 + 32) + 568) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
    uint64_t v9 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([v8 timer]);
    [v8 setTimer:0];
    if (v9) {
      dispatch_source_cancel(v9);
    }
    id v10 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue([v8 responseHandler]);
    if (v7)
    {
      if (dword_100131328 <= 90
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
      {
        uint64_t v11 = *(unsigned int *)(a1 + 64);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) identifier]);
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _proxyDevice:loopbackRequestID:request:options:responseHandler:]_block_invoke",  90LL,  "### Received response XID 0x%x, error %(error), from proxy device %@ \n",  v11,  v7,  v12);
      }

      ((void (**)(void, void, void, id))v10)[2](v10, 0LL, 0LL, v7);
    }

    else
    {
      if (dword_100131328 <= 30
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
      {
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _proxyDevice:loopbackRequestID:request:options:responseHandler:]_block_invoke",  30,  "Received response XID 0x%x over loopback\n",  [*(id *)(a1 + 40) unsignedIntegerValue]);
      }

      v16[0] = @"dlt";
      v16[1] = @"senderID";
      uint64_t v14 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 48);
      v17[0] = &off_10011AE08;
      v17[1] = v13;
      v16[2] = @"xid";
      void v17[2] = v14;
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  3LL));
      ((void (**)(void, id, void *, void))v10)[2](v10, v6, v15, 0LL);
    }
  }

  else if (dword_100131328 <= 90 {
         && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
  }
  {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _proxyDevice:loopbackRequestID:request:options:responseHandler:]_block_invoke",  90,  "### Received response XID 0x%x, with no request from %@",  [*(id *)(a1 + 40) unsignedIntegerValue],  *(void *)(a1 + 48));
  }
}

void sub_1000327B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon sessionStartSend:session:xpcID:destinationID:completion:]_block_invoke",  90LL,  "### Session start send failed: Service %@, destinationID %@, CSID 0x%llX, %{error}\n",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 80),  v9);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    uint64_t Int64 = CFDictionaryGetInt64(v7, @"_sid", &v26);
    if (Int64)
    {
      uint64_t v17 = *(void *)(a1 + 80) | (Int64 << 32);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v17));
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) peerIdentifier]);
      [*(id *)(a1 + 48) setPeerID:v19];

      [*(id *)(a1 + 48) setSessionID:v17];
      uint64_t v20 = *(void **)(*(void *)(a1 + 64) + 1072LL);
      if (!v20)
      {
        id v21 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v22 = *(void *)(a1 + 64);
        uint64_t v23 = *(void **)(v22 + 1072);
        *(void *)(v22 + 1072) = v21;

        uint64_t v20 = *(void **)(*(void *)(a1 + 64) + 1072LL);
      }

      [v20 setObject:*(void *)(a1 + 48) forKeyedSubscript:v18];
      if (dword_100131328 <= 30
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL)))
      {
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon sessionStartSend:session:xpcID:destinationID:completion:]_block_invoke",  30LL,  "Session start response: Service %@, PeerID %@, SID 0x%llX\n",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  v17);
      }

      __int128 v25 = *(void (**)(void))(*(void *)(a1 + 72) + 16LL);
    }

    else
    {
      id v24 = RPErrorF(4294960591LL, (uint64_t)"Bad response sessionID: %#m", v11, v12, v13, v14, v15, v16, v26);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v24);
      if (dword_100131328 <= 90
        && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
      {
        LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon sessionStartSend:session:xpcID:destinationID:completion:]_block_invoke",  90LL,  "### Session start send failed: Service %@, PeerID %@, CSID 0x%llX, %{error}\n",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 80),  v18);
      }

      __int128 v25 = *(void (**)(void))(*(void *)(a1 + 72) + 16LL);
    }

    v25();
  }
}

void sub_100032CEC(void *a1, void *a2, void *a3, void *a4)
{
  id v9 = a2;
  id v7 = a3;
  id v8 = a4;
  if (dword_100131328 <= 30 && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 30LL))) {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon sessionStopSend:session:xpcID:completion:]_block_invoke",  30LL,  "Session stop response: Service %@, PeerID %@, SID 0x%llX, %{error}\n",  a1[4],  a1[5],  a1[7],  v8);
  }
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1000334D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

uint64_t sub_100033558(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100131328 <= 90)
    {
      if (dword_100131328 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      }

      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _sessionHandleStartRequest:options:cnx:responseHandler:]_block_invoke",  90LL,  "### Session start receive failed: %{error}\n",  v1);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

void sub_10003361C(void *a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v10 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v10 server]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 serviceType]);
  unsigned int v9 = [v8 isEqual:a1[4]];

  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8LL) + 40LL), a3);
    objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), v7);
    *a4 = 1;
  }
}

void sub_1000336C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    id v10 = RPNestedErrorF(a3, 4294960584LL, (uint64_t)"LaunchOnDemand response failed", a4, a5, a6, a7, a8, v14);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    (*(void (**)(uint64_t, void, void, void *))(v9 + 16))(v9, 0LL, 0LL, v11);

    [*(id *)(*(void *)(a1 + 32) + 1072) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
    [*(id *)(a1 + 48) invalidate];
  }

  else
  {
    uint64_t v15 = @"_sid";
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 64)));
    uint64_t v16 = v12;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

void sub_100033BE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_100033C24(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100131328 <= 90)
    {
      if (dword_100131328 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      }

      LogPrintF( &dword_100131328,  "-[RPCompanionLinkDaemon _sessionHandleStopRequest:options:cnx:responseHandler:]_block_invoke",  90LL,  "### Session stop failed: %{error}\n",  v1);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

void sub_10003407C(_Unwind_Exception *a1)
{
}

void sub_100034094(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)a1[4];
  if (v4) {
    BOOL v5 = v4 == v3;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    id v11 = v3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 session]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 cnx]);
    id v8 = v7;
    if (v7 == (void *)a1[5])
    {

      id v3 = v11;
LABEL_9:
      ++*(void *)(*(void *)(a1[6] + 8LL) + 24LL);
      goto LABEL_10;
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v11 netCnx]);
    id v10 = (void *)a1[5];

    id v3 = v11;
    if (v9 == v10) {
      goto LABEL_9;
    }
  }

void sub_100034154(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 cnx]);
  BOOL v5 = *(void **)(a1 + 32);

  if (v4 == v5) {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  }
}

uint64_t sub_1000343D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100034C2C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _xpcConnectionInvalidated:*(void *)(a1 + 40)];
}

void sub_100035768(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3
    && dword_100131328 <= 20
    && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 20LL)))
  {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkXPCConnection connectionInvalidated]_block_invoke",  20LL,  "Session stop for session %@ received error %{error}\n",  *(void *)(a1 + 32),  v3);
  }

  [*(id *)(a1 + 40) connectionInvalidatedCore];
}

void sub_100035A78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100035A90(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (([*(id *)(a1 + 32) _connectionHasActiveSessions:v5] & 1) == 0
    && ([v5 controlFlags] & 0x200) != 0)
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 client]);
    if (!v6
      || (id v7 = (void *)v6,
          id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 client]),
          uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 48LL),
          v8,
          v7,
          v8 == v9))
    {
      [v5 invalidate];
      [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v10];
    }
  }
}

void sub_100035F44(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) identifier]);
  if (v3
    || (id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) destinationDevice]),
        id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]),
        v4,
        v3))
  {
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "interestDeregisterEventID:peerIdentifier:owner:", v5, v3);
  }
}

void sub_100035FD4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (dword_100131328 <= 30
    && ((v5 = v2, dword_100131328 != -1) || (int v4 = _LogCategory_Initialize(&dword_100131328, 30LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_100131328,  "-[RPCompanionLinkXPCConnection connectionInvalidatedCore]_block_invoke_2",  30LL,  "Removing local device as context collector upon invalidation. Error: '%@'\n",  v3);
  }

  else
  {
  }

void sub_1000365E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  int v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) launchInstanceID]);
  LODWORD(v4) = [v4 shouldReportDevice:v6 toXPCConnectionWithLaunchInstanceID:v5 outReason:0];

  if ((_DWORD)v4) {
    [*(id *)(a1 + 48) addObject:v6];
  }
}

void sub_10003665C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  int v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) launchInstanceID]);
  LODWORD(v4) = [v4 shouldReportDevice:v6 toXPCConnectionWithLaunchInstanceID:v5 outReason:0];

  if ((_DWORD)v4) {
    [*(id *)(a1 + 48) addObject:v6];
  }
}

void sub_1000366D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  int v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) launchInstanceID]);
  LODWORD(v4) = [v4 shouldReportDevice:v6 toXPCConnectionWithLaunchInstanceID:v5 outReason:0];

  if ((_DWORD)v4) {
    [*(id *)(a1 + 48) addObject:v6];
  }
}

void sub_100036744(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  int v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) launchInstanceID]);
  LODWORD(v4) = [v4 shouldReportDevice:v6 toXPCConnectionWithLaunchInstanceID:v5 outReason:0];

  if ((_DWORD)v4) {
    [*(id *)(a1 + 48) addObject:v6];
  }
}

void sub_1000367B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  int v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) launchInstanceID]);
  LODWORD(v4) = [v4 shouldReportDevice:v6 toXPCConnectionWithLaunchInstanceID:v5 outReason:0];

  if ((_DWORD)v4) {
    [*(id *)(a1 + 48) addObject:v6];
  }
}

void sub_10003682C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  int v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) launchInstanceID]);
  LODWORD(v4) = [v4 shouldReportDevice:v6 toXPCConnectionWithLaunchInstanceID:v5 outReason:0];

  if ((_DWORD)v4) {
    [*(id *)(a1 + 48) addObject:v6];
  }
}

LABEL_104:
  ((void (*)(void *))v135[2])(v135);
  _Block_object_dispose(&v169, 8);
}

    self->_prefFriendSyncDelaySeconds = v35;
  }

  __int128 v40 = CFPrefs_GetInt64(@"com.apple.rapport", @"pdFamily", &v69);
  if (v69) {
    __int128 v41 = 0;
  }
  else {
    __int128 v41 = v40 == 0;
  }
  __int128 v42 = !v41;
  if (self->_prefPeopleDiscoveryFamily != v42)
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      __int128 v43 = "yes";
      if (v42) {
        v44 = "no";
      }
      else {
        v44 = "yes";
      }
      if (!v42) {
        __int128 v43 = "no";
      }
      LogPrintF(&dword_100132930, "-[RPPeopleDaemon prefsChanged]", 30LL, "PeopleDiscoveryFamily: %s -> %s\n", v44, v43);
    }

    self->_prefPeopleDiscoveryFamily = v42;
  }

  v45 = CFPrefs_GetInt64(@"com.apple.rapport", @"pdFriends", &v69);
  if (v69) {
    v46 = 0;
  }
  else {
    v46 = v45 == 0;
  }
  v47 = !v46;
  if (self->_prefPeopleDiscoveryFriends != v47)
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      v48 = "yes";
      if (v47) {
        v49 = "no";
      }
      else {
        v49 = "yes";
      }
      if (!v47) {
        v48 = "no";
      }
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon prefsChanged]",  30LL,  "PeopleDiscoveryFriends: %s -> %s\n",  v49,  v48);
    }

    self->_prefPeopleDiscoveryFriends = v47;
  }

  Double = CFPrefs_GetDouble(@"com.apple.rapport", @"pdPrivacyCoalesceMin", &v69);
  if (v69) {
    v51 = 300.0;
  }
  else {
    v51 = Double;
  }
  prefPrivacyCoalesceMinSecs = self->_prefPrivacyCoalesceMinSecs;
  if (v51 != prefPrivacyCoalesceMinSecs)
  {
    if (dword_100132930 <= 30)
    {
      if (dword_100132930 == -1)
      {
        prefPrivacyCoalesceMinSecs = self->_prefPrivacyCoalesceMinSecs;
      }

      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon prefsChanged]",  30LL,  "PeoplePrivacyCoalesceMinSeconds: %.0f -> %.0f\n",  prefPrivacyCoalesceMinSecs,  v51);
    }

void sub_1000380DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

uint64_t sub_100038170(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 56) + 8LL) + 40LL))
  {
    uint64_t v1 = (void *)result;
    if (dword_100131328 <= 90
      && (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)))
    {
      LogPrintF( &dword_100131328,  "-[RPCompanionLinkXPCConnection companionLinkActivateClient:completion:]_block_invoke",  90,  "### Activate client failed: %@, from %#{pid}, %{error}\n",  v1[4],  [*(id *)(v1[5] + 208) processIdentifier],  *(void *)(*(void *)(v1[7] + 8) + 40));
    }

    uint64_t result = v1[6];
    if (result) {
      return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  0LL,  *(void *)(*(void *)(v1[7] + 8LL) + 40LL));
    }
  }

  return result;
}

void sub_100038240(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 192) cnx]);
    unint64_t v5 = (unint64_t)[v4 statusFlags];

    id v6 = [*(id *)(a1 + 40) flags];
    if ((v5 & 0x70000AE000LL) == 0 && (v6 & 1) == 0)
    {
      if (dword_100131328 <= 90)
      {
        id v14 = v6;
        if (dword_100131328 != -1 || _LogCategory_Initialize(&dword_100131328, 90LL)) {
          LogPrintF( &dword_100131328,  "-[RPCompanionLinkXPCConnection companionLinkActivateClient:completion:]_block_invoke_2",  90LL,  "### Session for service type '%@' and client flags %#{flags} started on unauthenticated connection with stat us flags %#ll{flags}\n",  *(void *)(a1 + 48),  v14,  &unk_1001097C4,  v5,  &unk_1001095EF);
        }
      }

      id v15 = RPErrorF( 4294960542LL,  (uint64_t)"Session started on unauthenticated connection",  v7,  v8,  v9,  v10,  v11,  v12,  v18);
      id v3 = (id)objc_claimAutoreleasedReturnValue(v15);
    }

    else
    {
      id v3 = 0LL;
    }
  }

  uint64_t v16 = *(void *)(a1 + 56);
  if (v16)
  {
    if (v3) {
      uint64_t v17 = 0LL;
    }
    else {
      uint64_t v17 = &__NSArray0__struct;
    }
    id v19 = v3;
    (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v17);
    id v3 = v19;
  }
}

void sub_100039D88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

uint64_t sub_100039DE8(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100131328 <= 90)
    {
      if (dword_100131328 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
      }

      LogPrintF( &dword_100131328,  "-[RPCompanionLinkXPCConnection xpcServerActivate:completion:]_block_invoke",  90LL,  "### Activate server failed: %{error}\n",  v1);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

void sub_100039EA4(uint64_t a1, uint64_t a2, void *a3)
{
  int v4 = *(void **)(*(void *)(a1 + 32) + 208LL);
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 remoteObjectProxy]);
  [v6 xpcServerShowPassword:v5 flags:a2];
}

void sub_100039F04(uint64_t a1, uint64_t a2)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 208) remoteObjectProxy]);
  [v3 xpcServerHidePassword:a2];
}

Class sub_10003A674()
{
  if (qword_100133230 != -1) {
    dispatch_once(&qword_100133230, &stru_100112338);
  }
  Class result = objc_getClass("SFDeviceDiscovery");
  qword_100133228 = (uint64_t)result;
  off_100131398 = (uint64_t (*)())sub_10003A6D0;
  return result;
}

id sub_10003A6D0()
{
  return (id)qword_100133228;
}

void sub_10003A6DC(id a1)
{
  qword_100133238 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
}

Class sub_10003A704()
{
  if (qword_100133230 != -1) {
    dispatch_once(&qword_100133230, &stru_100112338);
  }
  Class result = objc_getClass("SFService");
  qword_100133240 = (uint64_t)result;
  off_1001313A0 = (uint64_t (*)())sub_10003A760;
  return result;
}

id sub_10003A760()
{
  return (id)qword_100133240;
}

Class sub_10003A76C()
{
  if (qword_100133230 != -1) {
    dispatch_once(&qword_100133230, &stru_100112338);
  }
  Class result = objc_getClass("SFClient");
  qword_100133248 = (uint64_t)result;
  off_1001313A8 = (uint64_t (*)())sub_10003A7C8;
  return result;
}

id sub_10003A7C8()
{
  return (id)qword_100133248;
}

id sub_10003A7D4()
{
  if (qword_100133250 != -1) {
    dispatch_once(&qword_100133250, &stru_100112358);
  }
  v0 = (id *)dlsym((void *)qword_100133258, "FBSOpenApplicationOptionKeyActivateSuspended");
  if (v0) {
    objc_storeStrong((id *)&qword_100133220, *v0);
  }
  off_1001313B0 = (uint64_t (*)())sub_10003A84C;
  return (id)qword_100133220;
}

id sub_10003A84C()
{
  return (id)qword_100133220;
}

void sub_10003A858(id a1)
{
  qword_100133258 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices",  2);
}

Class sub_10003A880()
{
  if (qword_100133250 != -1) {
    dispatch_once(&qword_100133250, &stru_100112358);
  }
  Class result = objc_getClass("FBSOpenApplicationOptions");
  qword_100133260 = (uint64_t)result;
  off_1001313B8 = (uint64_t (*)())sub_10003A8DC;
  return result;
}

id sub_10003A8DC()
{
  return (id)qword_100133260;
}

Class sub_10003A8E8()
{
  if (qword_100133250 != -1) {
    dispatch_once(&qword_100133250, &stru_100112358);
  }
  Class result = objc_getClass("FBSOpenApplicationService");
  qword_100133268 = (uint64_t)result;
  off_1001313C0 = (uint64_t (*)())sub_10003A944;
  return result;
}

id sub_10003A944()
{
  return (id)qword_100133268;
}

Class sub_10003A950()
{
  if (qword_100133278 != -1) {
    dispatch_once(&qword_100133278, &stru_100112378);
  }
  Class result = objc_getClass("LSApplicationWorkspace");
  qword_100133270 = (uint64_t)result;
  off_1001313C8 = (uint64_t (*)())sub_10003A9AC;
  return result;
}

id sub_10003A9AC()
{
  return (id)qword_100133270;
}

void sub_10003A9B8(id a1)
{
  qword_100133280 = (uint64_t)dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
}

void sub_10003AAC0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 60))
  {
    if (dword_100131550 <= 30
      && (dword_100131550 != -1 || _LogCategory_Initialize(&dword_100131550, 30LL)))
    {
      uint64_t v2 = +[RPNWFramer controlCodeToString:]( &OBJC_CLASS___RPNWFramer,  "controlCodeToString:",  *(unsigned int *)(a1 + 56));
      uint64_t v3 = *(unsigned __int8 *)(a1 + 60);
      int v4 = strerror(*(unsigned __int8 *)(a1 + 60));
      LogPrintF( &dword_100131550,  "+[RPNWFramer writeControlOnFramer:type:error:]_block_invoke",  30LL,  "Wrote CTRL message %s, error=%d (%s) on framer=%@\n",  v2,  v3,  v4,  *(void *)(a1 + 32));
    }
  }

  else if (dword_100131550 <= 30 {
         && (dword_100131550 != -1 || _LogCategory_Initialize(&dword_100131550, 30LL)))
  }
  {
    LogPrintF( &dword_100131550,  "+[RPNWFramer writeControlOnFramer:type:error:]_block_invoke",  30LL,  "Wrote CTRL message %s on framer=%@\n",  +[RPNWFramer controlCodeToString:](&OBJC_CLASS___RPNWFramer, "controlCodeToString:", *(unsigned int *)(a1 + 56)),  *(void *)(a1 + 32));
  }

void sub_10003ACD8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) length];
  uint64_t v3 = (const uint8_t *)[*(id *)(a1 + 32) bytes];
  *(void *)output_buffer = 0LL;
  id v5 = v2;
  nw_framer_write_output(*(nw_framer_t *)(a1 + 40), output_buffer, 0x10uLL);
  if (dword_100131550 <= 30 && (dword_100131550 != -1 || _LogCategory_Initialize(&dword_100131550, 30LL))) {
    LogPrintF( &dword_100131550,  "+[RPNWFramer writeDataOnFramer:data:]_block_invoke",  30LL,  "Wrote header, %d bytes",  16);
  }
  nw_framer_write_output(*(nw_framer_t *)(a1 + 40), v3, (size_t)v2);
  if (dword_100131550 <= 30 && (dword_100131550 != -1 || _LogCategory_Initialize(&dword_100131550, 30LL))) {
    LogPrintF( &dword_100131550,  "+[RPNWFramer writeDataOnFramer:data:]_block_invoke",  30LL,  "Wrote body, %d bytes",  (_DWORD)v2);
  }
}

void sub_10003B060( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10003B090(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  while (1)
  {
    do
    {
      uint64_t v4 = *(void *)(a1 + 56);
      if (*(_BYTE *)(*(void *)(v4 + 8) + 24LL)) {
        break;
      }
      uint64_t v21 = 0LL;
      uint64_t v22 = &v21;
      uint64_t v23 = 0x3010000000LL;
      id v24 = &unk_1000EF05A;
      uint64_t v25 = 0LL;
      uint64_t v26 = 0LL;
      parse[0] = _NSConcreteStackBlock;
      parse[1] = 3221225472LL;
      parse[2] = sub_10003B49C;
      parse[3] = &unk_1001125A8;
      uint64_t v20 = 16LL;
      parse[4] = &v21;
      parse[5] = v4;
      __int128 v19 = *(_OWORD *)(a1 + 64);
      if (!nw_framer_parse_input(v3, 0x10uLL, 0x10uLL, 0LL, parse))
      {
        _Block_object_dispose(&v21, 8);
        uint64_t v12 = 16LL;
        goto LABEL_41;
      }

      if (dword_100131550 <= 40
        && (dword_100131550 != -1 || _LogCategory_Initialize(&dword_100131550, 40LL)))
      {
        id v5 = +[RPNWFramer controlCodeToString:]( &OBJC_CLASS___RPNWFramer,  "controlCodeToString:",  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL));
        int v6 = *((unsigned __int8 *)v22 + 33);
        uint64_t v7 = strerror(v6);
        LogPrintF( &dword_100131550,  "+[RPNWFramer setupDaemonFramer:receiveHandler:closeHandler:]_block_invoke",  40LL,  "Daemon RX framer msg header={%s error: %d (%s), length: %zu}",  v5,  v6,  v7,  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL));
      }

      _Block_object_dispose(&v21, 8);
    }

    while (!*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
    {
      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) == 3)
      {
        if (dword_100131550 <= 40
          && (dword_100131550 != -1 || _LogCategory_Initialize(&dword_100131550, 40LL)))
        {
          LogPrintF( &dword_100131550,  "+[RPNWFramer setupDaemonFramer:receiveHandler:closeHandler:]_block_invoke",  40LL,  "Received CLOSE message");
        }
      }

      else
      {
        if (dword_100131550 <= 90
          && (dword_100131550 != -1 || _LogCategory_Initialize(&dword_100131550, 90LL)))
        {
          LogPrintF( &dword_100131550,  "+[RPNWFramer setupDaemonFramer:receiveHandler:closeHandler:]_block_invoke",  90LL,  "Invalid message type, closing connection");
        }

        nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 57);
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
      goto LABEL_40;
    }

    if (!*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL)) {
      break;
    }
    if (dword_100131550 <= 40
      && (dword_100131550 != -1 || _LogCategory_Initialize(&dword_100131550, 40LL)))
    {
      LogPrintF( &dword_100131550,  "+[RPNWFramer setupDaemonFramer:receiveHandler:closeHandler:]_block_invoke",  40LL,  "Daemon framer reading data message");
    }

    uint64_t v8 = *(void *)(a1 + 72);
    size_t v9 = *(void *)(*(void *)(v8 + 8) + 24LL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10003B50C;
    v14[3] = &unk_1001125D0;
    uint64_t v16 = v8;
    id v10 = *(id *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 56);
    id v15 = v10;
    uint64_t v17 = v11;
    if (!nw_framer_parse_input(v3, 1uLL, v9, 0LL, v14))
    {
      if (dword_100131550 <= 40
        && (dword_100131550 != -1 || _LogCategory_Initialize(&dword_100131550, 40LL)))
      {
        LogPrintF( &dword_100131550,  "+[RPNWFramer setupDaemonFramer:receiveHandler:closeHandler:]_block_invoke",  40LL,  "Requesting more body bytes");
      }

LABEL_40:
      uint64_t v12 = 0LL;
      goto LABEL_41;
    }
  }

  if (dword_100131550 <= 40 && (dword_100131550 != -1 || _LogCategory_Initialize(&dword_100131550, 40LL))) {
    LogPrintF( &dword_100131550,  "+[RPNWFramer setupDaemonFramer:receiveHandler:closeHandler:]_block_invoke",  40LL,  "Daemon framer reading empty message");
  }
  uint64_t v12 = 0LL;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 0;
LABEL_41:

  return v12;
}

void sub_10003B484(_Unwind_Exception *a1)
{
}

uint64_t sub_10003B49C(void *a1, _OWORD *a2, unint64_t a3)
{
  if (!a2 || a1[8] > a3) {
    return 0LL;
  }
  *(_OWORD *)(*(void *)(a1[4] + 8LL) + 32LL) = *a2;
  *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 1;
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = *(_BYTE *)(*(void *)(a1[4] + 8LL) + 32LL);
  *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = *(void *)(*(void *)(a1[4] + 8LL) + 40LL);
  return a1[8];
}

uint64_t sub_10003B50C(void *a1, uint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v3 = a3;
  if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= a3)
  {
    if (dword_100131550 <= 40
      && (dword_100131550 != -1 || _LogCategory_Initialize(&dword_100131550, 40LL)))
    {
      LogPrintF( &dword_100131550,  "+[RPNWFramer setupDaemonFramer:receiveHandler:closeHandler:]_block_invoke_3",  40LL,  "Received %zu bytes of remaining data from agent client",  v3);
    }

    (*(void (**)(void))(a1[4] + 16LL))();
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = 0LL;
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 0;
  }

  else
  {
    if (dword_100131550 <= 40
      && (dword_100131550 != -1 || _LogCategory_Initialize(&dword_100131550, 40LL)))
    {
      LogPrintF( &dword_100131550,  "+[RPNWFramer setupDaemonFramer:receiveHandler:closeHandler:]_block_invoke_3",  40LL,  "Received %zu bytes of partial data from agent client",  v3);
    }

    (*(void (**)(void))(a1[4] + 16LL))();
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v3;
  }

  return v3;
}

void sub_10003B664(id a1, OS_nw_framer *a2, OS_nw_protocol_metadata *a3, unint64_t a4, BOOL a5)
{
  uint64_t v7 = a2;
  int v6 = a3;
  if (dword_100131550 <= 90 && (dword_100131550 != -1 || _LogCategory_Initialize(&dword_100131550, 90LL))) {
    LogPrintF( &dword_100131550,  "+[RPNWFramer setupDaemonFramer:receiveHandler:closeHandler:]_block_invoke_4",  90LL,  "Cannot write on framer");
  }
}

void sub_10003B6F0(id a1, OS_nw_framer *a2)
{
  id v2 = a2;
  uint64_t v3 = v2;
  if (dword_100131550 <= 30
    && ((v5 = v2, dword_100131550 != -1) || (int v4 = _LogCategory_Initialize(&dword_100131550, 30LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_100131550,  "+[RPNWFramer setupDaemonFramer:receiveHandler:closeHandler:]_block_invoke_5",  30LL,  "Cleaning up connection framer=%@\n",  v3);
  }

  else
  {
  }

nw_protocol_definition_t nwrapport_copy_protocol_definition()
{
  nw_protocol_definition_t definition = nw_framer_create_definition("rapport-client-peer", 0, &stru_1001126B8);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "registering rapport peer protocol",  v2,  2u);
  }

  return definition;
}

int sub_10003B7F0(id a1, OS_nw_framer *a2)
{
  id v2 = a2;
  v13[0] = 0LL;
  v13[1] = v13;
  v13[2] = 0x2020000000LL;
  char v14 = 0;
  v12[0] = 0LL;
  v12[1] = v12;
  v12[2] = 0x3010000000LL;
  void v12[4] = 0LL;
  v12[5] = 0LL;
  v12[3] = &unk_1000EF05A;
  nw_framer_message_t v3 = nw_framer_message_create(v2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10003B940;
  v7[3] = &unk_100112708;
  id v10 = v13;
  uint64_t v11 = v12;
  int v4 = v2;
  uint64_t v8 = v4;
  id v5 = v3;
  size_t v9 = v5;
  nw_framer_set_input_handler(v4, v7);
  nw_framer_set_output_handler(v4, &stru_100112728);
  nw_framer_set_stop_handler(v4, &stru_100112768);
  nw_framer_set_cleanup_handler(v4, &stru_100112788);

  _Block_object_dispose(v12, 8);
  _Block_object_dispose(v13, 8);

  return 2;
}

void sub_10003B91C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10003B940(uint64_t a1, void *a2)
{
  nw_framer_message_t v3 = a2;
  uint64_t v4 = a1 + 56;
  uint64_t v5 = *(void *)(a1 + 48);
  BOOL v6 = *(_BYTE *)(*(void *)(v5 + 8) + 24LL) == 0;
  uint64_t v7 = 16LL;
  uint64_t v8 = &OBJC_IVAR___RPCompanionLinkXPCConnection__registeredProfileIDs;
  do
  {
    if (!v6) {
      break;
    }
    parse[0] = _NSConcreteStackBlock;
    parse[1] = 3221225472LL;
    parse[2] = sub_10003BC9C;
    parse[3] = &unk_1001126E0;
    parse[5] = v5;
    void parse[6] = 16LL;
    parse[4] = *(void *)v4;
    if (!nw_framer_parse_input(v3, 0x10uLL, 0x10uLL, 0LL, parse)) {
      goto LABEL_31;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG))
    {
      id v9 = [v8 + 826 controlCodeToString:*(unsigned __int8 *)(*(void *)(*(void *)v4 + 8) + 32)];
      int v10 = *(unsigned __int8 *)(*(void *)(*(void *)v4 + 8LL) + 33LL);
      uint64_t v11 = strerror(v10);
      uint64_t v12 = *(void *)(*(void *)(*(void *)v4 + 8LL) + 40LL);
      *(_DWORD *)buf = 136315906;
      id v36 = v9;
      uint64_t v8 = &OBJC_IVAR___RPCompanionLinkXPCConnection__registeredProfileIDs;
      __int16 v37 = 1024;
      int v38 = v10;
      __int16 v39 = 2080;
      __int128 v40 = v11;
      __int16 v41 = 2048;
      uint64_t v42 = v12;
      _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEBUG,  "Client RX framer msg header={%s error: %d (%s), length: %zu}",  buf,  0x26u);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    BOOL v6 = 1;
  }

  while (!*(_BYTE *)(*(void *)(v5 + 8) + 24LL));
  uint64_t v13 = (void *)nw_framer_connection_state_copy_object_value(v3, "started");
  BOOL v14 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG);
  if (v13)
  {
    if (v14) {
      sub_1000B0134(a1 + 56);
    }
    uint64_t v15 = *(void *)(*(void *)v4 + 8LL);
    if (!*(_BYTE *)(v15 + 32) && *(void *)(v15 + 40))
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
        sub_1000B00BC(a1 + 56, v25, v26, v27, v28, v29, v30, v31);
      }
      nw_framer_deliver_input_no_copy( v3,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL),  *(nw_framer_message_t *)(a1 + 40),  0);
      goto LABEL_30;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
      sub_1000B0044(a1 + 56, v16, v17, v18, v19, v20, v21, v22);
    }
    uint64_t v23 = *(nw_framer **)(a1 + 32);
    int v24 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 33LL);
  }

  else
  {
    if (v14) {
      sub_1000B0004();
    }
    if (*(_DWORD *)(*(void *)(*(void *)v4 + 8LL) + 36LL) == 320017171)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
        sub_1000AFF20();
      }
      nw_framer_connection_state_set_object_value(*(void *)(a1 + 32), "started", @"true");
      nw_framer_mark_ready(*(nw_framer_t *)(a1 + 32));
      goto LABEL_30;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000AFF8C();
    }
    uint64_t v32 = *(void *)(*(void *)v4 + 8LL);
    int v24 = *(unsigned __int8 *)(v32 + 33);
    if (!*(_BYTE *)(v32 + 33))
    {
      *(_BYTE *)(v32 + 33) = 53;
      int v24 = *(unsigned __int8 *)(*(void *)(*(void *)v4 + 8LL) + 33LL);
    }

    uint64_t v23 = *(nw_framer **)(a1 + 32);
  }

  nw_framer_mark_failed_with_error(v23, v24);
LABEL_30:
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;

  uint64_t v7 = 0LL;
LABEL_31:

  return v7;
}

uint64_t sub_10003BC9C(void *a1, _OWORD *a2, unint64_t a3)
{
  if (!a2 || a1[6] > a3) {
    return 0LL;
  }
  *(_OWORD *)(*(void *)(a1[4] + 8LL) + 32LL) = *a2;
  uint64_t v4 = a1[5];
  uint64_t result = a1[6];
  *(_BYTE *)(*(void *)(v4 + 8) + 24LL) = 1;
  return result;
}

void sub_10003BCD8(id a1, OS_nw_framer *a2, OS_nw_protocol_metadata *a3, unint64_t a4, BOOL a5)
{
  BOOL v6 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
    sub_1000B01C8(a4, v7, v8, v9, v10, v11, v12, v13);
  }
  v14[0] = 0LL;
  v14[1] = a4;
  nw_framer_write_output(v6, (const uint8_t *)v14, 0x10uLL);
  nw_framer_write_output_no_copy(v6, a4);
}

BOOL sub_10003BD48(id a1, OS_nw_framer *a2)
{
  id v2 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_1000B0234((uint64_t)v2);
  }
  +[RPNWFramer writeControlOnFramer:type:error:]( &OBJC_CLASS___RPNWFramer,  "writeControlOnFramer:type:error:",  v2,  3LL,  0LL);

  return 1;
}

void sub_10003BDA8(id a1, OS_nw_framer *a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v3 = 138412290;
    uint64_t v4 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Cleanup handler called for framer=%@",  (uint8_t *)&v3,  0xCu);
  }

void sub_10003BE4C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10003BE5C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_10003BEC8(id a1)
{
  uint64_t v1 = (void *)qword_100133288;
  qword_100133288 = (uint64_t)&off_10011B160;
}

void sub_10003CBB0(id a1, NSError *a2)
{
  id v2 = a2;
  int v3 = v2;
  if (dword_1001315C0 <= 90
    && ((v5 = v2, dword_1001315C0 != -1) || (int v4 = _LogCategory_Initialize(&dword_1001315C0, 90LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_1001315C0,  "-[RPNearFieldDaemonController _remoteObjectProxy]_block_invoke",  90LL,  "Failed to retrieve remote object proxy with error:%@\n",  v3);
  }

  else
  {
  }

void sub_10003CD84(uint64_t a1, int a2)
{
  int v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dispatchQueue]);
  dispatch_assert_queue_V2(v4);

  if (a2)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) tapEvent]);
    id v8 = (id)objc_claimAutoreleasedReturnValue([v5 contactID]);
  }

  else
  {
    id v8 = 0LL;
  }

  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) tapEvent]);
  [v6 setContactID:v8];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _remoteObjectProxy]);
  [v7 didUpdateTransaction:*(void *)(a1 + 40)];
}

void sub_10003D554(id a1)
{
  uint64_t v1 = (void *)qword_100133298;
  qword_100133298 = (uint64_t)&off_10011B178;
}

void sub_10003D628(id a1)
{
  uint64_t v1 = (void *)qword_1001332A8;
  qword_1001332A8 = (uint64_t)&off_10011B1A0;
}

id sub_10003F0DC(uint64_t a1)
{
  if (dword_1001317B0 <= 40 && (dword_1001317B0 != -1 || _LogCategory_Initialize(&dword_1001317B0, 40LL)))
  {
    id v2 = *(id *)(a1 + 32);
    int v3 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
    -[NSMutableString appendFormat:](v3, "appendFormat:", @"%p", v2);

    LogPrintF( &dword_1001317B0,  "+[RPNWListener startListenerMappingTimeout:]_block_invoke",  40LL,  "RPNWListener[%@] aged out\n",  v3);
  }

  int v4 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ageOutListenerTimer]);
  dispatch_source_cancel(v4);

  [*(id *)(a1 + 32) setAgeOutListenerTimer:0];
  return +[RPNWListener removeListenerForApplicationService:]( &OBJC_CLASS___RPNWListener,  "removeListenerForApplicationService:",  *(void *)(a1 + 40));
}

LABEL_16:
    LOBYTE(v7) = 0;
    return v7;
  }

  triggerTime = self->_triggerTime;
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  -[NSDate timeIntervalSinceDate:](triggerTime, "timeIntervalSinceDate:", v4);
  BOOL v6 = v5;

  if (v6 < 0.0)
  {
    if (dword_1001317B0 <= 40)
    {
      if (dword_1001317B0 == -1)
      {
        uint64_t v7 = _LogCategory_Initialize(&dword_1001317B0, 40LL);
        if (!v7) {
          return v7;
        }
      }

      LogPrintF( &dword_1001317B0,  "-[RPNWListener hasTriggeredConnection]",  40LL,  "Triggered connection is stale, %.0fs\n");
    }

    goto LABEL_16;
  }

  if (dword_1001317B0 <= 40 && (dword_1001317B0 != -1 || _LogCategory_Initialize(&dword_1001317B0, 40LL))) {
    LogPrintF( &dword_1001317B0,  "-[RPNWListener hasTriggeredConnection]",  40LL,  "Triggered connection outstanding, %.0fs\n",  v6);
  }
  LOBYTE(v7) = 1;
  return v7;
}

  -[RPIdentityDaemon _updateSameAccountIdentities](self, "_updateSameAccountIdentities");
  if ((v3 & 0x20000) == 0) {
    return;
  }
LABEL_17:
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[RPIdentity idsDeviceID](self->_selfIdentityCache, "idsDeviceID"));

  if (v7) {
    -[RPIdentityDaemon _saveSelfIdentityPublicWithPrivateIdentity:force:]( self,  "_saveSelfIdentityPublicWithPrivateIdentity:force:",  self->_selfIdentityCache,  0LL);
  }
}

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v6 edPKData]);
  if (v18)
  {
    uint64_t v19 = (id)objc_claimAutoreleasedReturnValue([v5 edPKData]);
    uint64_t v20 = v18;
    uint64_t v21 = v20;
    if (v19 == v20)
    {
    }

    else
    {
      if (v19)
      {
        uint64_t v22 = [v19 isEqual:v20];

        if ((v22 & 1) != 0) {
          goto LABEL_24;
        }
      }

      else
      {
      }

      [v5 setEdPKData:v21];
      v11 |= 8u;
    }
  }

    uint64_t v9 = 0LL;
  }

  return v9;
}

void sub_100040278(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___RPEndpoint);
  id v2 = (void *)qword_1001332C8;
  qword_1001332C8 = (uint64_t)v1;
}

LABEL_25:
      BOOL v6 = (uint64_t)v45;
    }
  }

  uint64_t v30 = self->_sourceVersion;
  if (v30)
  {
    uint64_t v31 = v30;
  }

  else
  {
    uint64_t v32 = CFStringGetTypeID();
    id v33 = CFDictionaryGetTypedValue(v6, @"rpVr", v32, 0LL);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    uint64_t v31 = (void *)v34;
    if (v9 && !v34)
    {
      -[IDSDevice operatingSystemVersion](v9, "operatingSystemVersion");
      v35 = sub_10000A05C((uint64_t)v11, v46);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v35);
    }

    if (v31)
    {
      objc_storeStrong((id *)&self->_sourceVersion, v31);
      v12 |= 2u;
    }
  }

  uint64_t Int64 = CFDictionaryGetInt64(v6, @"rpFl", 0LL);
  statusFlags = self->_statusFlags;
  int v38 = -[IDSDevice supportsApplePay](v9, "supportsApplePay");
  __int16 v39 = 4LL;
  if (v38) {
    __int16 v39 = 8388612LL;
  }
  __int128 v40 = (uint64x2_t)vdupq_n_s64(Int64);
  __int16 v41 = vorrq_s8( vandq_s8((int8x16_t)vshlq_u64(v40, (uint64x2_t)xmmword_100109D30), (int8x16_t)xmmword_100109D60),  vandq_s8((int8x16_t)vshlq_u64(v40, (uint64x2_t)xmmword_100109D40), (int8x16_t)xmmword_100109D50));
  uint64_t v42 = *(void *)&vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)) | statusFlags & 0xFFFFFFF27EBAF7FBLL | (Int64 >> 2) & 0x800 | (4 * (_DWORD)Int64) & 0x50000 | (Int64 << 11) & 0x400000000LL | ((unint64_t)((v44 & 0x18) != 0LL) << 24) | v39;
  if (v42 != statusFlags)
  {
    self->_statusFlags = v42;
    v12 |= 2u;
  }

  return v12;
}

LABEL_22:
  v129 = (void *)objc_claimAutoreleasedReturnValue([v5 bleDevice]);
  int v24 = [v129 decryptedActivityLevel];
  if (v24 != 16 && self->_activityLevel != v24)
  {
    self->_activityLevel = v24;
    uint64_t v25 = (NSDate *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    activityLevelTimeStamp = self->_activityLevelTimeStamp;
    self->_activityLevelTimeStamp = v25;

    id v8 = 2;
  }

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v5 bleDevice]);
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 advertisementData]);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[SFDevice bleDevice](v6, "bleDevice"));
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 advertisementData]);
  uint64_t v31 = v28;
  uint64_t v32 = v30;
  id v33 = v32;
  if (v31 == v32)
  {
    v34 = 1;
  }

  else if ((v31 == 0LL) == (v32 != 0LL))
  {
    v34 = 0;
  }

  else
  {
    v34 = [v31 isEqual:v32];
  }

  v35 = v8 | 1;
  if (v34) {
    id v36 = v8;
  }
  else {
    id v36 = v8 | 1;
  }
  __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([v5 bleDevice]);
  int v38 = (void *)objc_claimAutoreleasedReturnValue([v37 advertisementFields]);
  __int16 v39 = [v38 mutableCopy];

  __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(-[SFDevice bleDevice](v6, "bleDevice"));
  __int16 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 advertisementFields]);
  uint64_t v42 = [v41 mutableCopy];

  [v39 setObject:0 forKeyedSubscript:@"ch"];
  [v42 setObject:0 forKeyedSubscript:@"ch"];
  __int128 v43 = v39;
  v44 = v42;
  v127 = v44;
  v128 = v43;
  if (v43 == v44)
  {

    goto LABEL_38;
  }

  v45 = v44;
  if ((v43 == 0LL) == (v44 != 0LL))
  {

    goto LABEL_40;
  }

  v46 = [v43 isEqual:v44];

  if (v46) {
LABEL_38:
  }
    v35 = v36;
LABEL_40:
  v47 = (void *)objc_claimAutoreleasedReturnValue([v5 bleDevice]);
  v48 = (void *)objc_claimAutoreleasedReturnValue([v47 advertisementFields]);
  Int64Ranged = CFDictionaryGetInt64Ranged(v48, @"camS", 0LL, 255LL, 0LL);

  if (self->_cameraState != Int64Ranged)
  {
    self->_cameraState = Int64Ranged;
    v35 |= 2u;
  }

  hotspotInfo = self->_hotspotInfo;
  if (hotspotInfo != [v5 hotspotInfo])
  {
    self->_hotspotInfo = [v5 hotspotInfo];
    v35 |= 1u;
  }

  v51 = (void *)objc_claimAutoreleasedReturnValue([v5 idsIdentifier]);
  v52 = v51;
  if (v51)
  {
    idsDeviceIdentifier = self->_idsDeviceIdentifier;
    v54 = v51;
    v55 = idsDeviceIdentifier;
    if (v54 == v55)
    {

      goto LABEL_52;
    }

    v56 = v55;
    if (v55)
    {
      v57 = -[NSString isEqual:](v54, "isEqual:", v55);

      if ((v57 & 1) != 0) {
        goto LABEL_52;
      }
    }

    else
    {
    }

    objc_storeStrong((id *)&self->_idsDeviceIdentifier, v52);
    v35 |= 2u;
  }

      goto LABEL_23;
    }

    if (dword_100131820 <= 90
      && (dword_100131820 != -1 || _LogCategory_Initialize(&dword_100131820, 90LL)))
    {
      LogPrintF( &dword_100131820,  "-[RPDaemonXPCConnection serverCreateDeviceMappingInternal:applicationService:deviceID:endpointID:completion:]",  90LL,  "Failed to find device with deviceID=%@\n",  v13);
    }

    if (!v15) {
      goto LABEL_22;
    }
    __int16 v37 = "Failed to find device for mapping";
LABEL_21:
    int v38 = RPErrorF(4294960569LL, (uint64_t)v37, v20, v21, v22, v23, v24, v25, v40);
    __int16 v39 = objc_claimAutoreleasedReturnValue(v38);

    v15[2](v15, 0LL, (id)v39);
    uint64_t v17 = (id)v39;
    goto LABEL_22;
  }

  if (v15) {
    v15[2](v15, 0LL, v17);
  }
LABEL_23:
}
}
}

LABEL_52:
  v58 = [v5 inDiscoverySession];
  if (self->_inDiscoverySession != v58)
  {
    self->_inDiscoverySession = v58;
    v35 |= 0x400u;
  }

  v59 = (void *)objc_claimAutoreleasedReturnValue([v5 contactIdentifier]);
  v60 = v59;
  if (v59)
  {
    contactID = self->_contactID;
    v62 = v59;
    v63 = contactID;
    if (v62 == v63)
    {

      goto LABEL_62;
    }

    v64 = v63;
    if (v63)
    {
      v65 = -[NSString isEqual:](v62, "isEqual:", v63);

      if ((v65 & 1) != 0) {
        goto LABEL_62;
      }
    }

    else
    {
    }

    objc_storeStrong((id *)&self->_contactID, v60);
    v35 |= 2u;
  }
  }

  if ((v5 & 0x800) != 0)
  {
    __int16 v37 = 0u;
    int v38 = 0u;
    v35 = 0u;
    id v36 = 0u;
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 13LL, 0LL));
    uint64_t v30 = [v29 countByEnumeratingWithState:&v35 objects:v55 count:16];
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = *(void *)v36;
      while (2)
      {
        for (n = 0LL; n != v31; n = (char *)n + 1)
        {
          if (*(void *)v36 != v32) {
            objc_enumerationMutation(v29);
          }
          if ([*(id *)(*((void *)&v35 + 1) + 8 * (void)n) verifySignature:v8 data:v9 error:0])
          {
            uint64_t v11 = v11 | 0x800;
            goto LABEL_64;
          }
        }

        uint64_t v31 = [v29 countByEnumeratingWithState:&v35 objects:v55 count:16];
        if (v31) {
          continue;
        }
        break;
      }
    }

LABEL_62:
  if (self->_mediaRemoteIdentifier)
  {
    v66 = v132;
  }

  else
  {
    v67 = (void *)objc_claimAutoreleasedReturnValue([v5 mediaRemoteID]);
    if (v67)
    {
      objc_storeStrong((id *)&self->_mediaRemoteIdentifier, v67);
      v35 |= 2u;
    }

    v66 = v132;
  }

  if (self->_mediaRouteIdentifier)
  {
    v125 = (v131 & 0x400) == 0;
  }

  else
  {
    v68 = (void *)objc_claimAutoreleasedReturnValue([v5 mediaRouteID]);
    if (v68)
    {
      objc_storeStrong((id *)&self->_mediaRouteIdentifier, v68);
      v35 |= 2u;
    }

    if (self->_mediaRouteIdentifier || (v131 & 0x400) == 0)
    {
      v125 = (v131 & 0x400) == 0;
    }

    else
    {
      v69 = (void *)objc_claimAutoreleasedReturnValue([v5 rapportIdentifier]);
      if (v69)
      {
        objc_storeStrong((id *)&self->_mediaRouteIdentifier, v69);
        v35 |= 2u;
      }

      v125 = 0;
    }
  }

  v70 = self->_model;
  if (v70)
  {
    v71 = (__CFString *)v70;
    goto LABEL_82;
  }

  v71 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 model]);
  if (v71) {
    goto LABEL_81;
  }
  v71 = (__CFString *)objc_claimAutoreleasedReturnValue(-[IDSDevice modelIdentifier](v66, "modelIdentifier"));
  if (v71) {
    goto LABEL_81;
  }
  if ([v5 deviceClassCode] == 4)
  {
    if ([v5 deviceModelCode] == 5)
    {
      v71 = @"AudioAccessory5,1";
    }

    else if ([v5 deviceModelCode] == 6)
    {
      v71 = @"AudioAccessory6,1";
    }

    else
    {
      v71 = @"AudioAccessory1,1";
    }

LABEL_81:
    objc_storeStrong((id *)&self->_model, v71);
    v35 |= 2u;
    goto LABEL_82;
  }

  v71 = 0LL;
LABEL_82:
  v72 = (void *)objc_claimAutoreleasedReturnValue([v5 name]);
  v73 = v72;
  if (!v72) {
    goto LABEL_90;
  }
  name = self->_name;
  v75 = v72;
  v76 = name;
  if (v75 == v76)
  {

    v66 = v132;
    goto LABEL_90;
  }

  v77 = v76;
  if (!v76)
  {

    v66 = v132;
    goto LABEL_89;
  }

  v78 = -[NSString isEqual:](v75, "isEqual:", v76);

  v66 = v132;
  if ((v78 & 1) == 0)
  {
LABEL_89:
    objc_storeStrong((id *)&self->_name, v73);
    v35 |= 0x10u;
  }

LABEL_99:
  if (!self->_sourceVersion)
  {
    -[IDSDevice operatingSystemVersion](v66, "operatingSystemVersion");
    v88 = sub_10000A05C((uint64_t)v71, v133);
    v89 = (NSString *)objc_claimAutoreleasedReturnValue(v88);
    sourceVersion = self->_sourceVersion;
    self->_sourceVersion = v89;

    if (self->_sourceVersion) {
      v35 |= 2u;
    }
  }

LABEL_102:
  statusFlags = self->_statusFlags;
  v92 = [v5 deviceActionType];
  v93 = -[IDSDevice supportsApplePay](v66, "supportsApplePay");
  v94 = 2LL;
  if (v93) {
    v94 = 8388610LL;
  }
  v95 = statusFlags & 0xFFFFFF7FF7DFFEFDLL | v94 & 0xFFFFFF7FFFFFFFFFLL | ((((unint64_t)(v131 & 0x80) >> 7) & 1) << 39);
  if ((v131 & 8) != 0 && v92 == 28) {
    v97 = 0x200000LL;
  }
  else {
    v97 = 0LL;
  }
  v98 = [v5 duetSync];
  v99 = 256LL;
  if (!v98) {
    v99 = 0LL;
  }
  v100 = v95 | v97 | v99 | ((unint64_t)(v92 == 29) << 27);
  v101 = (void *)objc_claimAutoreleasedReturnValue([v5 bleDevice]);
  v102 = (void *)objc_claimAutoreleasedReturnValue([v101 advertisementFields]);
  v103 = CFDictionaryGetInt64Ranged(v102, @"wp", 0LL, 255LL, v137);

  if (!v137[0]) {
    v100 = v100 & 0xFFFFFFFFFFFFFDFFLL | ((unint64_t)(v103 != 0LL) << 9);
  }
  v104 = v100 & 0xFFFFFFFFBFFFFFFFLL | ((unint64_t)(v92 == 34) << 30);
  v105 = v71;
  v106 = -[__CFString hasPrefix:](v105, "hasPrefix:", @"AppleTV");

  v107 = v104 | 0x50800;
  if (!v106) {
    v107 = v104;
  }
  if ((v131 & 8) != 0) {
    v107 |= 0x80000uLL;
  }
  v108 = v107 | (v131 << 13) & 0x4000 | (((v131 >> 2) & 1) << 17);
  if (!v125) {
    v108 |= 0x8000uLL;
  }
  v109 = (v131 << 7) & 0x2000LL | ((unint64_t)(((unsigned __int16)(v131 & 0xC000) >> 8) >> 6) << 36) | v108;
  v110 = (void *)objc_claimAutoreleasedReturnValue([v5 bleDevice]);
  v111 = (void *)objc_claimAutoreleasedReturnValue([v110 advertisementFields]);
  uint64_t Int64 = CFDictionaryGetInt64(v111, @"meD", 0LL);

  v113 = v109 | 0x80;
  if (!Int64) {
    v113 = v109;
  }
  if (v113 == statusFlags)
  {
    v114 = v130;
    v115 = v35;
  }

  else
  {
    self->_statusFlags = v113;
    v115 = v35 | 2;
    v114 = v130;
  }

  v116 = (uint64_t)[v5 distance];
  if (v116 >= 21) {
    v117 = 30;
  }
  else {
    v117 = 20;
  }
  if (v116 < 11) {
    v117 = 10;
  }
  if (v117 != self->_proximity)
  {
    self->_proximity = v117;
    v115 |= 0x80u;
  }

  v118 = (void *)objc_claimAutoreleasedReturnValue([v5 bleDevice]);
  v119 = [v118 rssi];

  v120 = (void *)objc_claimAutoreleasedReturnValue(-[SFDevice bleDevice](v114, "bleDevice"));
  v121 = [v120 rssi];

  if (v119 == v121 || v119 == 0LL) {
    v123 = v115;
  }
  else {
    v123 = v115 | 0x20;
  }

  return v123;
}

LABEL_61:
  return v6;
}

uint64_t start(int a1, uint64_t a2)
{
  if (a1 >= 2)
  {
    char v2 = 0;
    int v3 = (const char **)(a2 + 8);
    uint64_t v4 = a1 - 1LL;
    while (1)
    {
      uint64_t v5 = *v3;
      if (!strcmp(*v3, "--system"))
      {
        char v2 = 1;
      }

      else
      {
        if (!strcmp(v5, "-V") || !strcmp(v5, "--version") || !strcmp(v5, "version"))
        {
          fprintf(__stdoutp, "Rapport daemon version %s\n", "630.42.2");
          return 0LL;
        }

        fprintf(__stderrp, "warning: unknown option '%s'\n", v5);
      }

      ++v3;
      if (!--v4) {
        goto LABEL_12;
      }
    }
  }

  char v2 = 0;
LABEL_12:
  BOOL v6 = objc_autoreleasePoolPush();
  if ((_set_user_dir_suffix("com.apple.rapportd") & 1) == 0
    && dword_100131820 <= 90
    && (dword_100131820 != -1 || _LogCategory_Initialize(&dword_100131820, 90LL)))
  {
    uint64_t v7 = __error();
    LogPrintF( &dword_100131820,  "int main(int, const char **)",  90LL,  "### _set_user_dir_suffix failed: %#m\n",  *v7);
  }

  if (!confstr(65537, v17, 0x400uLL)
    && dword_100131820 <= 90
    && (dword_100131820 != -1 || _LogCategory_Initialize(&dword_100131820, 90LL)))
  {
    id v8 = __error();
    LogPrintF( &dword_100131820,  "int main(int, const char **)",  90LL,  "### _CS_DARWIN_USER_TEMP_DIR failed: %#m\n",  *v8);
  }

  signal(13, (void (__cdecl *)(int))1);
  LogSetAppID(@"com.apple.rapport");
  LogControl("?.*:level=chatty,.*:flags=public");
  if ((v2 & 1) != 0)
  {
    if (dword_100131820 <= 30
      && (dword_100131820 != -1 || _LogCategory_Initialize(&dword_100131820, 30LL)))
    {
      LogPrintF(&dword_100131820, "int main(int, const char **)", 30LL, "Started (system) %s\n", "630.42.2");
    }
  }

  else
  {
    if (dword_100131820 <= 30
      && (dword_100131820 != -1 || _LogCategory_Initialize(&dword_100131820, 30LL)))
    {
      LogPrintF(&dword_100131820, "int main(int, const char **)", 30LL, "Started (user) %s\n", "630.42.2");
    }

    uint64_t v9 = objc_alloc_init(&OBJC_CLASS____TtC8rapportd27RPSwiftMemoryTest_objCClass);
    -[RPSwiftMemoryTest_objCClass performLog](v9, "performLog");
    id v10 = objc_alloc_init(&OBJC_CLASS___CUPairingDaemon);
    dispatch_queue_t v11 = dispatch_queue_create("CUPairingDaemon", 0LL);
    [v10 setDispatchQueue:v11];

    [v10 activate];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
    uint64_t v13 = CUMainQueue();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    [v12 setDispatchQueue:v14];

    [v12 activate];
  }

  objc_autoreleasePoolPop(v6);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](&OBJC_CLASS___NSRunLoop, "currentRunLoop"));
  [v15 run];

  return 0LL;
}

void sub_100043AFC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___RPDaemon);
  char v2 = (void *)qword_1001332D8;
  qword_1001332D8 = (uint64_t)v1;
}

void sub_100043E04(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
  [v1 postDaemonInfoChanges:0x80000];
}

LABEL_49:
            v58 = *v57;
            uint64_t v22 = v58;
          }

          ++v46;

          continue;
        }
      }

      v45 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v72,  "countByEnumeratingWithState:objects:count:",  &v79,  v104,  16LL);
    }

    while (v45);
  }

  v59 = v22;
  return v59;
}

    uint64_t v28 = 0;
    goto LABEL_50;
  }

  uint64_t v7 = (NEVirtualInterface_s *)NEVirtualInterfaceCreate(kCFAllocatorDefault, 1LL, v6, 0LL);
  self->_interface = v7;
  if (!v7)
  {
    if (dword_100132768 <= 90
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupPolicyWithQueue:browseAgent:]",  90LL,  "NEVirtualInterfaceCreate returned NULL interface");
    }

    goto LABEL_49;
  }

  id v8 = (void *)NEVirtualInterfaceCopyName();
  NEVirtualInterfaceSetRankNever(self->_interface, 1LL);
  interface = self->_interface;
  id v33 = 0;
  uint64_t v32 = 0LL;
  uint64_t v31 = 33022LL;
  id v10 = v8;
  arc4random_buf(&v32, 8uLL);
  inet_ntop(30, &v31, v35, 0x1Cu);
  dispatch_queue_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v35));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 stringByAppendingString:@"%"]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 stringByAppendingString:v10]);

  NEVirtualInterfaceAddAddress(interface, v13, 0LL);
  NEVirtualInterfaceUpdateAdHocService(self->_interface);
  NEVirtualInterfaceSetReadAutomatically(self->_interface, 1LL);
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupPolicyWithQueue:browseAgent:]",  30LL,  "Created interface, name='%@'\n",  v10);
  }
  uint64_t v22 = v10;
  uint64_t v23 = (void *)nw_interface_create_with_name([v22 UTF8String]);
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupPolicyWithQueue:browseAgent:]",  30LL,  "Calling nw_agent_add_to_interface agent=%@, interface=%@\n",  self->_networkAgent,  v23);
  }
  if ((nw_agent_add_to_interface(self->_networkAgent, v23) & 1) == 0)
  {
    if (dword_100132768 <= 90
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupPolicyWithQueue:browseAgent:]",  90LL,  "Failed to add agent to interface\n");
    }

    goto LABEL_49;
  }

LABEL_42:
  uint64_t v28 = 1;
LABEL_50:

  return v28;
}

          uint64_t v13 = v90;
          goto LABEL_50;
        }

        uint64_t v31 = (id)objc_claimAutoreleasedReturnValue(-[RPIdentity deviceIRKData](v19, "deviceIRKData"));
        uint64_t v32 = v30;
        id v33 = v32;
        if (v31 == v32)
        {
        }

        else
        {
          if (v31)
          {
            v34 = [v31 isEqual:v32];

            if ((v34 & 1) != 0) {
              goto LABEL_35;
            }
          }

          else
          {
          }

          -[RPIdentity setDeviceIRKData:](v19, "setDeviceIRKData:", v33);
          v20 |= 4u;
        }

id sub_100044D94(uint64_t a1)
{
  return [*(id *)(a1 + 32) _prefsChanged];
}

uint64_t sub_100044D9C(uint64_t result)
{
  if (*(_DWORD *)(*(void *)(result + 32) + 32LL) != -1)
  {
    uint64_t v1 = result;
    if (dword_100131820 <= 30)
    {
      if (dword_100131820 != -1 || (uint64_t result = _LogCategory_Initialize(&dword_100131820, 30LL), (_DWORD)result)) {
        uint64_t result = LogPrintF( &dword_100131820,  "-[RPDaemon activate]_block_invoke_2",  30LL,  "Language changed...forcing exit\n");
      }
    }

    *(_BYTE *)(*(void *)(v1 + 32) + 144LL) = 1;
    return xpc_transaction_exit_clean(result);
  }

  return result;
}

void sub_100044E30(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 145LL) = 1;
  [*(id *)(a1 + 32) _prefsChanged];
  exit(0);
}

id sub_100044EA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateErrorFlags];
}

id sub_100044F18(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateErrorFlags];
}

id sub_100044F88(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateErrorFlags];
}

id sub_100044FF8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateErrorFlags];
}

uint64_t sub_100045000(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result = (uint64_t)xpc_dictionary_get_string(xdict, _xpc_event_key_name);
  uint64_t v4 = (const char *)result;
  if (result && (uint64_t result = strcmp((const char *)result, "com.apple.rapport.prefsChanged"), !(_DWORD)result))
  {
    if (dword_100131820 <= 30
      && (dword_100131820 != -1 || _LogCategory_Initialize(&dword_100131820, 30LL)))
    {
      LogPrintF(&dword_100131820, "-[RPDaemon activate]_block_invoke_8", 30LL, "Prefs changed\n");
    }

    return (uint64_t)[*(id *)(a1 + 32) _prefsChanged];
  }

  else if (dword_100131820 <= 60)
  {
    if (dword_100131820 != -1) {
      return LogPrintF( &dword_100131820,  "-[RPDaemon activate]_block_invoke_8",  60LL,  "### Unexpected XPC event: %s\n",  v4);
    }
    uint64_t result = _LogCategory_Initialize(&dword_100131820, 60LL);
    if ((_DWORD)result) {
      return LogPrintF( &dword_100131820,  "-[RPDaemon activate]_block_invoke_8",  60LL,  "### Unexpected XPC event: %s\n",  v4);
    }
  }

  return result;
}

void *sub_100045110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[15]) {
    return _[result _xpcPublisherAction:a2 token:a3 event:a4];
  }
  return result;
}

uint64_t sub_100045130(uint64_t result, uint64_t a2)
{
  if (*(void *)(*(void *)(result + 32) + 120LL))
  {
    if (dword_100131820 <= 90)
    {
      if (dword_100131820 != -1) {
        return LogPrintF( &dword_100131820,  "-[RPDaemon activate]_block_invoke_10",  90LL,  "### XPC publisher error: %#m\n",  a2);
      }
      uint64_t result = _LogCategory_Initialize(&dword_100131820, 90LL);
      if ((_DWORD)result) {
        return LogPrintF( &dword_100131820,  "-[RPDaemon activate]_block_invoke_10",  90LL,  "### XPC publisher error: %#m\n",  a2);
      }
    }
  }

  return result;
}

uint64_t sub_1000451B4(uint64_t a1)
{
  return CUStateDumpWithObject("RPDaemon", *(void *)(a1 + 32), &dword_100131820);
}

os_state_data_s *__cdecl sub_1000451D0(id a1, os_state_hints_s *a2)
{
  char v2 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
  int v3 = (os_state_data_s *)CUStateDumpWithObject("RPIdentities", v2, &dword_100131820);

  return v3;
}

uint64_t sub_100045220(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keychainStateString]);
  uint64_t v2 = CUStateDumpWithObject("RPKeychain", v1, &dword_100131820);

  return v2;
}

os_state_data_s *__cdecl sub_10004526C(id a1, os_state_hints_s *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[RPPrivateDaemon sharedPrivateDaemon](&OBJC_CLASS___RPPrivateDaemon, "sharedPrivateDaemon"));
  int v3 = (os_state_data_s *)CUStateDumpWithObject("RPPrivateDiscovery", v2, &dword_100131820);

  return v3;
}

id sub_10004587C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) removeObject:*(void *)(a1 + 40)];
}

void sub_100045AF4(uint64_t a1)
{
  if (dword_100131820 <= 30 && (dword_100131820 != -1 || _LogCategory_Initialize(&dword_100131820, 30LL))) {
    LogPrintF( &dword_100131820,  "-[RPDaemon postDaemonInfoChanges:]_block_invoke",  30LL,  "Daemon info changed: %#ll{flags}\n",  *(void *)(a1 + 40),  &unk_10010A052);
  }
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 80LL);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * (void)i) daemonInfoChanged:*(void *)(a1 + 40)];
      }

      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_100046278(uint64_t a1, int a2, void *a3, void *a4)
{
  id v20 = a3;
  uint64_t v13 = a4;
  switch(a2)
  {
    case 6:
      BOOL v14 = *(void **)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = 1LL;
LABEL_7:
      [v14 _xpcPublisherStateChangedForToken:v15 state:v16];
      goto LABEL_12;
    case 5:
      BOOL v14 = *(void **)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = 0LL;
      goto LABEL_7;
    case 0:
      [*(id *)(a1 + 32) _xpcPublisherTriggeredToken:*(void *)(a1 + 40) payload:v20 responseHandler:v13];
      goto LABEL_14;
  }

  if (dword_100131820 <= 90 && (dword_100131820 != -1 || _LogCategory_Initialize(&dword_100131820, 90LL))) {
    LogPrintF( &dword_100131820,  "-[RPDaemon _xpcPublisherAddToken:event:]_block_invoke",  90LL,  "### XPC matching handler bad state: %d, token %llu\n",  a2,  *(void *)(a1 + 40));
  }
LABEL_12:
  if (v13)
  {
    id v17 = RPErrorF(4294960560LL, (uint64_t)"Not expecting response", v7, v8, v9, v10, v11, v12, v19);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v13[2](v13, 0LL, v18);
  }

id sub_100046784(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _xpcPublisherTriggeredReply:a2 token:*(void *)(a1 + 48) responseHandler:*(void *)(a1 + 40)];
}

void sub_1000469C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000469F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100046A08(uint64_t a1)
{
}

uint64_t sub_100046A10(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    id v2 = (void *)result;
    if (dword_100131820 <= 90)
    {
      if (dword_100131820 == -1)
      {
        uint64_t v1 = *(void *)(*(void *)(v2[5] + 8LL) + 40LL);
      }

      LogPrintF( &dword_100131820,  "-[RPDaemon _xpcPublisherTriggeredReply:token:responseHandler:]_block_invoke",  90LL,  "### XPC publisher reply failed: token %llu, %{error}\n",  v2[6],  v1);
    }

    return (*(uint64_t (**)(void))(v2[4] + 16LL))();
  }

  return result;
}

LABEL_47:
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 identitiesOfType:8 error:0]);

    if (v28) {
      -[NSMutableArray addObjectsFromArray:](v8, "addObjectsFromArray:", v28);
    }

    if ((v4 & 0x800) == 0)
    {
LABEL_14:
      if ((v4 & 0x2000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_53;
    }

          v54 = objc_alloc_init(&OBJC_CLASS___RPIdentity);
          v79 = v29;
          v55 = -[RPIdentity updateWithKeychainItem:error:]( v54,  "updateWithKeychainItem:error:",  v34,  &v79);
          v53 = v79;

          if (-[RPIdentity type](v54, "type") == 2 || -[RPIdentity type](v54, "type") == 1)
          {
            v56 = (void *)objc_claimAutoreleasedReturnValue( +[RPCompanionLinkDaemon sharedCompanionLinkDaemon]( &OBJC_CLASS___RPCompanionLinkDaemon,  "sharedCompanionLinkDaemon"));
            v57 = (void *)objc_claimAutoreleasedReturnValue([v56 localDeviceInfo]);
            v58 = (void *)objc_claimAutoreleasedReturnValue([v57 accountID]);

            if (v58)
            {
              v59 = (void *)objc_claimAutoreleasedReturnValue(-[RPIdentity accountID](v54, "accountID"));

              if (!v59) {
                -[RPIdentity setAccountID:](v54, "setAccountID:", v58);
              }
            }
          }

          if ((v55 & 1) != 0)
          {
            if (dword_100132130 <= 60
              && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 60LL)))
            {
              LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _identitiesOfType:error:]",  60LL,  "### Update identity from keychain failed: %@, %{error}\n",  v34,  v53);
            }
          }

          else
          {
            v60 = (void *)objc_claimAutoreleasedReturnValue(-[RPIdentity idsDeviceID](v54, "idsDeviceID"));
            v61 = v60;
            if (!v74 || !v60 || [v60 caseInsensitiveCompare:v74])
            {
              v62 = (void *)objc_claimAutoreleasedReturnValue(+[RPCloudDaemon sharedCloudDaemon](&OBJC_CLASS___RPCloudDaemon, "sharedCloudDaemon"));
              v63 = (void *)objc_claimAutoreleasedReturnValue([v62 idsDeviceMap]);
              v64 = (void *)objc_claimAutoreleasedReturnValue([v63 objectForKeyedSubscript:v61]);

              if (v64)
              {
                v65 = (void *)objc_claimAutoreleasedReturnValue([v64 modelIdentifier]);
                if (v65) {
                  -[RPIdentity setModel:](v54, "setModel:", v65);
                }

                v66 = (void *)objc_claimAutoreleasedReturnValue([v64 name]);
                if (v66) {
                  -[RPIdentity setName:](v54, "setName:", v66);
                }
              }

              -[NSMutableArray addObject:](v71, "addObject:", v54);
            }
          }

          uint64_t v29 = v53;
LABEL_70:
          uint64_t v9 = v76;

          if ((id)++v32 == v31)
          {
LABEL_78:
            uint64_t v23 = -[NSMutableArray copy](v71, "copy");

            uint64_t v29 = v53;
            uint64_t v26 = v69;
            uint64_t v25 = v70;
            goto LABEL_79;
          }

          continue;
        }

        -[RPIdentityDaemon _triggerKeychainRefetch](v73, "_triggerKeychainRefetch");
        goto LABEL_42;
      }

      goto LABEL_38;
    }
  }

  if (dword_100132130 <= 30 && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL))) {
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _identitiesOfType:error:]",  30LL,  "Deferring get identities until FirstUnlock\n");
  }
  if (!a4) {
    goto LABEL_14;
  }
  v67 = RPErrorF( 4294960593LL,  (uint64_t)"Identities not accessible before FirstUnlock",  v15,  v16,  v17,  v18,  v19,  v20,  v68);
  *a4 = (id)objc_claimAutoreleasedReturnValue(v67);
  return 0LL;
}

        id v33 = 0;
LABEL_48:
        v34 = v38;
LABEL_59:

        return v33;
      }

      uint64_t v28 = (void *)v27;
      objc_storeStrong(p_bleNearbyActionV2Device, v20);
      [*p_bleNearbyActionV2Device setNearbyActionV2Type:50];
      [v11 setUsingNearbyActionV2:1];

      if (*p_bleNearbyActionV2Device)
      {
LABEL_27:
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v11 xpcCnx]);
        uint64_t v30 = sub_10000A8B0((uint64_t)[v29 processIdentifier]);
        uint64_t v31 = objc_claimAutoreleasedReturnValue(v30);
        bleNearbyActionV2AdvertiserProcessName = v37->_bleNearbyActionV2AdvertiserProcessName;
        v37->_bleNearbyActionV2AdvertiserProcessName = (NSString *)v31;

        id v33 = 1;
        goto LABEL_48;
      }
    }

    uint64_t v7 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v42,  v46,  16LL);
    if (v7) {
      continue;
    }
    break;
  }

LABEL_50:
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 identitiesOfType:13 error:0]);

    if (v30) {
      -[NSMutableArray addObjectsFromArray:](v8, "addObjectsFromArray:", v30);
    }

    if ((v4 & 0x2000) == 0)
    {
LABEL_15:
      if ((v4 & 0x4000) == 0)
      {
LABEL_59:
        v6[2](v6, v8, 0LL);

        goto LABEL_60;
      }
}

LABEL_53:
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 identityOfTemporarySelfAndReturnError:0]);

    if (v32) {
      -[NSMutableArray addObject:](v8, "addObject:", v32);
    }

    if ((v4 & 0x4000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_56;
  }

  ((void (**)(id, NSMutableArray *, id))v6)[2](v6, 0LL, v7);
LABEL_60:
}
    }

    if ((v4 & 0x400) != 0)
    {
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      uint64_t v11 = (NSArray *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 12LL, 0LL));
      uint64_t v29 = -[NSArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v75,  v102,  16LL);
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = *(void *)v76;
LABEL_57:
        uint64_t v32 = 0LL;
        while (1)
        {
          if (*(void *)v76 != v31) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void **)(*((void *)&v75 + 1) + 8 * v32);
          if (([v16 disabled] & 1) == 0
            && (unint64_t)[v16 disabledUntilTicks] <= v10
            && [v16 verifyAuthTagPtr:v96 authTagLen:v95 dataPtr:v98 dataLen:6 type:1 error:0])
          {
            break;
          }

          if (v30 == (id)++v32)
          {
            uint64_t v30 = -[NSArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v75,  v102,  16LL);
            if (v30) {
              goto LABEL_57;
            }
            goto LABEL_65;
          }
        }

        if (dword_100132130 <= 20
          && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 20LL)))
        {
          v55 = CUDescriptionWithLevel(v6, 30LL);
          v51 = (void *)objc_claimAutoreleasedReturnValue(v55);
          LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForBonjourDevice:typeFlags:]",  20LL,  "Resolved DeviceAuthTag: SharedTVUser, %@ -> %@\n",  v51,  v16);
          goto LABEL_140;
        }

        goto LABEL_141;
      }

BOOL sub_10004894C()
{
  int v0 = dword_1001332E8;
  if (!dword_1001332E8)
  {
    id v1 = -[objc_class currentState](off_1001319C0(), "currentState");
    id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    id v3 = v2;
    if (v2)
    {
      else {
        int v4 = 6;
      }
      dword_1001332E8 = v4;
      if (dword_100131950 <= 50
        && (dword_100131950 != -1 || _LogCategory_Initialize(&dword_100131950, 50LL)))
      {
        LogPrintF( &dword_100131950,  "BOOL __isWiFiSingleBandModeRequired(void)",  50LL,  "isWiFiSingleBandModeRequired = %s");
      }
    }

    else if (dword_100131950 <= 90 {
           && (dword_100131950 != -1 || _LogCategory_Initialize(&dword_100131950, 90LL)))
    }
    {
      LogPrintF( &dword_100131950,  "BOOL __isWiFiSingleBandModeRequired(void)",  90LL,  "### isWiFiSingleBandModeRequired = Invalid, Fail to fetch WiFiP2PAWDLState");
    }

    int v0 = dword_1001332E8;
  }

  return v0 == 6;
}

Class sub_10004926C()
{
  if (qword_1001332F8 != -1) {
    dispatch_once(&qword_1001332F8, &stru_100112AB8);
  }
  Class result = objc_getClass("WiFiP2PAWDLState");
  qword_1001332F0 = (uint64_t)result;
  off_1001319C0 = (uint64_t (*)())sub_1000492C8;
  return result;
}

id sub_1000492C8()
{
  return (id)qword_1001332F0;
}

void sub_1000492D4(id a1)
{
  qword_100133300 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/WiFiPeerToPeer.framework/WiFiPeerToPeer", 2);
}

void sub_10004A504(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  id v2 = (void *)qword_100133308;
  qword_100133308 = (uint64_t)v1;

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSLocale localeWithLocaleIdentifier:]( &OBJC_CLASS___NSLocale,  "localeWithLocaleIdentifier:",  @"en_US_POSIX"));
  [(id)qword_100133308 setLocale:v3];

  [(id)qword_100133308 setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZZZZZ"];
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneForSecondsFromGMT:](&OBJC_CLASS___NSTimeZone, "timeZoneForSecondsFromGMT:", 0LL));
  [(id)qword_100133308 setTimeZone:v4];
}

id sub_10004A920(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleCommand:responseHandler:", a2);
}

id sub_10004A92C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleTouchStart:responseHandler:", a2);
}

id sub_10004A938(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleTouchStop:responseHandler:", a2);
}

id sub_10004A944(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleTouchEvent:a2];
}

id sub_10004A950(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleGameControllerStart:responseHandler:", a2);
}

id sub_10004A95C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleGameControllerStop:responseHandler:", a2);
}

id sub_10004A968(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleGameControllerEvent:a2];
}

void sub_10004AEEC( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 & 1) != 0)
  {
    if (dword_100131A38 <= 30
      && (dword_100131A38 != -1 || _LogCategory_Initialize(&dword_100131A38, 30LL)))
    {
      LogPrintF( &dword_100131A38,  "-[RPHIDDaemon _activateScreenSaverWithResponseHandler:]_block_invoke",  30LL,  "ScreenSaver activated\n");
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    id v9 = RPErrorF(4294960596LL, (uint64_t)"ScreenSaver not activated", a3, a4, a5, a6, a7, a8, v12);
    uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
    id v13 = (id)v10;
    if (dword_100131A38 <= 60)
    {
      if (dword_100131A38 != -1 || (int v11 = _LogCategory_Initialize(&dword_100131A38, 60LL), v10 = (uint64_t)v13, v11)) {
        LogPrintF( &dword_100131A38,  "-[RPHIDDaemon _activateScreenSaverWithResponseHandler:]_block_invoke",  60LL,  "### ActivateScreenSaver failed: %{error}",  v10);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

void sub_10004C6D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_10004C6F8(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result = [a3 getValue:v9];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL) + 6LL * (*(_BYTE *)(v7 + 24))++;
  *(_BYTE *)(v8 + 32) = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  *(_BYTE *)(v8 + 33) = (v9[2] - 1) < 3;
  *(_DWORD *)(v8 + 34) = v9[1];
  return result;
}

id sub_10004C884(uint64_t a1)
{
  return [*(id *)(a1 + 32) _injectKeyboardEventUsagePage:12 usageCode:128 buttonState:*(unsigned int *)(a1 + 40)];
}

Class sub_10004CC98()
{
  if (qword_100133330 != -1) {
    dispatch_once(&qword_100133330, &stru_100112BA8);
  }
  Class result = objc_getClass("PBSSystemServiceConnection");
  qword_100133328 = (uint64_t)result;
  off_100131AA8[0] = (uint64_t (*)())sub_10004CCF4;
  return result;
}

id sub_10004CCF4()
{
  return (id)qword_100133328;
}

void sub_10004CD00(id a1)
{
  qword_100133338 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/PineBoardServices.framework/PineBoardServices",  2);
}

id sub_10004CD28()
{
  if (qword_100133330 != -1) {
    dispatch_once(&qword_100133330, &stru_100112BA8);
  }
  int v0 = (id *)dlsym((void *)qword_100133338, "PBSSleepReasonExternalDevice");
  if (v0) {
    objc_storeStrong((id *)&qword_100133318, *v0);
  }
  off_100131AB0[0] = (uint64_t (*)())sub_10004CDA0;
  return (id)qword_100133318;
}

id sub_10004CDA0()
{
  return (id)qword_100133318;
}

id sub_10004CDAC()
{
  if (qword_100133330 != -1) {
    dispatch_once(&qword_100133330, &stru_100112BA8);
  }
  int v0 = (id *)dlsym((void *)qword_100133338, "PBSWakeReasonExternalDevice");
  if (v0) {
    objc_storeStrong((id *)&qword_100133320, *v0);
  }
  off_100131AB8 = (uint64_t (*)())sub_10004CE24;
  return (id)qword_100133320;
}

id sub_10004CE24()
{
  return (id)qword_100133320;
}

void sub_10004CE70(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___RPNearFieldDaemon);
  id v2 = (void *)qword_100133340;
  qword_100133340 = (uint64_t)v1;
}

id sub_10004CF84(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (!*(_BYTE *)(v1 + 8))
  {
    *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = 1;
    return _[*((id *)result + 4) _activate];
  }

  return result;
}

id sub_10004D1B0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidate];
}

void sub_10004D610(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionChangedHandler]);

  if (v2)
  {
    id v3 = (void (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionChangedHandler]);
    v3[2]();
  }

void sub_10004D678(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nearFieldController]);
  [v1 invalidate];
}

uint64_t sub_10004D858()
{
  int DeviceClass = GestaltGetDeviceClass();
  LODWORD(result) = _os_feature_enabled_impl("Sharing", "BoopToAction");
  if (DeviceClass == 1 || DeviceClass == 6) {
    return result;
  }
  else {
    return 0LL;
  }
}

BOOL sub_10004D898(unint64_t a1)
{
  return a1 < 2;
}

LABEL_48:
}
  }

  else if (dword_100132BB0 <= 90 {
         && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
  }
  {
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _clientAWDLPairingSessionWithDevice:]",  90LL,  "Ignoring device found over AWDL in pairing mode, incomplete pairing ID %@\n",  v9);
  }
}

const char *sub_10004E6E8(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }

        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }

      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }

            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }

            break;
        }
      }

      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }

            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }

            break;
        }
      }
    }

    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }

          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }

          break;
      }
    }
  }

  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }

        break;
    }
  }

  return result;
}

id sub_10004EE14(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _deviceFound:a2];
}

id sub_10004EE20(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _deviceLost:a2];
}

void sub_10004EE2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (v3)
  {
    if (dword_100131C00 <= 90)
    {
      if (dword_100131C00 != -1 || (int v4 = _LogCategory_Initialize(&dword_100131C00, 90LL), v3 = v5, v4)) {
        LogPrintF( &dword_100131C00,  "-[RPNearbyActionV2Discovery activateWithCompletion:]_block_invoke_3",  90LL,  " ### BLE NearbyActionV2 discovery failed to start: %@\n",  v3);
      }
    }
  }

  else if (dword_100131C00 <= 30 {
         && (dword_100131C00 != -1 || _LogCategory_Initialize(&dword_100131C00, 30LL)))
  }
  {
    LogPrintF( &dword_100131C00,  "-[RPNearbyActionV2Discovery activateWithCompletion:]_block_invoke_3",  30LL,  "BLE NearbyActionV2 discovery started\n");
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10004F564()
{
  if (qword_100133378 != -1) {
    dispatch_once(&qword_100133378, &stru_100112CE8);
  }
  return (id)qword_100133370;
}

Class sub_10004F870()
{
  if (qword_100133360 != -1) {
    dispatch_once(&qword_100133360, &stru_100112CC8);
  }
  Class result = objc_getClass("CBDiscovery");
  qword_100133358 = (uint64_t)result;
  off_100131C70 = (uint64_t (*)())sub_10004F8CC;
  return result;
}

id sub_10004F8CC()
{
  return (id)qword_100133358;
}

void sub_10004F8D8(id a1)
{
  qword_100133368 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreBluetooth.framework/CoreBluetooth", 2);
}

void sub_10004F900(id a1)
{
  uint64_t v1 = LogCategoryCopyOSLogHandle(&dword_100131C00);
  id v2 = (void *)qword_100133370;
  qword_100133370 = v1;
}

void sub_10004FD34(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  int v4 = objc_opt_new(&OBJC_CLASS___NSUUID);
  [v2 addMappingForDevice:v3 endpointID:v4];
}

id sub_10004FD94(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) updateMappingForDevice:a2];
}

id sub_10004FDA0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) removeDevice:a2];
}

id sub_10004FDAC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) removeAllDevices];
}

void sub_10005040C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

uint64_t sub_100050438(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100050448(uint64_t a1)
{
}

void sub_100050450(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) cachedValue]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000504E4(uint64_t a1)
{
  uint64_t v1 = (void (**)(void))objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 16LL));
  if (v1)
  {
    uint64_t v2 = v1;
    v1[2]();
    uint64_t v1 = v2;
  }
}

void sub_100050598(uint64_t a1)
{
  uint64_t v3 = (void (**)(id, void *, BOOL))objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 8LL));
  if (v3)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _deviceForHHEndpoint:*(void *)(a1 + 40)]);
    v3[2](v3, v2, [*(id *)(a1 + 40) state] == (id)2);
  }
}

Class sub_100050914()
{
  if (qword_100133388 != -1) {
    dispatch_once(&qword_100133388, &stru_100112D58);
  }
  Class result = objc_getClass("HHSynchronizedEndpointList");
  qword_100133380 = (uint64_t)result;
  off_100131D58 = (uint64_t (*)())sub_100050970;
  return result;
}

id sub_100050970()
{
  return (id)qword_100133380;
}

void sub_10005097C(id a1)
{
  qword_100133390 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/HomeHub.framework/HomeHub", 2);
}

void sub_100052D64(uint64_t a1, void *a2, void *a3)
{
  id v21 = a2;
  id v11 = a3;
  if (!v21)
  {
    id v18 = RPErrorF(4294960569LL, (uint64_t)"User's pairing identity was not found.\n", v5, v6, v7, v8, v9, v10, v20);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();

    if (!v11) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  if (v11) {
LABEL_3:
  }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
LABEL_4:
  uint64_t v12 = objc_alloc_init(&OBJC_CLASS___RPIdentity);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v21 publicKey]);
  BOOL v14 = (void *)objc_claimAutoreleasedReturnValue([v13 data]);
  -[RPIdentity setEdPKData:](v12, "setEdPKData:", v14);

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v21 privateKey]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 data]);
  -[RPIdentity setEdSKData:](v12, "setEdSKData:", v16);

  id v17 = (void *)objc_claimAutoreleasedReturnValue([v21 identifier]);
  -[RPIdentity setIdentifier:](v12, "setIdentifier:", v17);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100052F5C(uint64_t a1)
{
  uint64_t v2 = (void (**)(void))objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 40LL));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v7 = v2;
    if (dword_100131E30 <= 30)
    {
      if (dword_100131E30 != -1 || (int v6 = _LogCategory_Initialize(&dword_100131E30, 30LL), v3 = v7, v6))
      {
        int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) userID]);
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) name]);
        LogPrintF( &dword_100131E30,  "-[RPHomeKitManager user:didUpdateAssistantAccessControl:forHome:]_block_invoke",  30LL,  "DidUpdateAssistantAccessControl: user %{mask}, home '%@'",  v4,  v5);

        uint64_t v3 = v7;
      }
    }

    v3[2](v3);
    uint64_t v3 = v7;
  }
}

void sub_1000530E8(uint64_t a1)
{
  uint64_t v2 = (void (**)(id, void *, void *))objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 48LL));
  if (v2)
  {
    uint64_t v8 = v2;
    if (dword_100131E30 <= 30
      && (dword_100131E30 != -1 || _LogCategory_Initialize(&dword_100131E30, 30LL)))
    {
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
      int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) siriEndpointIdentifier]);
      LogPrintF( &dword_100131E30,  "-[RPHomeKitManager home:didUpdateRoom:forAccessory:]_block_invoke",  30LL,  "DidUpdateRoom: room name updated to '%@' for HomeHub device %@",  v3,  v4);
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) siriEndpointIdentifier]);
    int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 UUIDString]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
    v8[2](v8, v6, v7);

    uint64_t v2 = v8;
  }
}

Class sub_1000532F8()
{
  if (qword_1001333A8 != -1) {
    dispatch_once(&qword_1001333A8, &stru_100112DA0);
  }
  Class result = objc_getClass("HMHomeManagerConfiguration");
  qword_1001333A0 = (uint64_t)result;
  off_100131EA0 = (uint64_t (*)())sub_100053354;
  return result;
}

id sub_100053354()
{
  return (id)qword_1001333A0;
}

void sub_100053360(id a1)
{
  qword_1001333B0 = (uint64_t)dlopen("/System/Library/Frameworks/HomeKit.framework/HomeKit", 2);
}

Class sub_100053388()
{
  if (qword_1001333A8 != -1) {
    dispatch_once(&qword_1001333A8, &stru_100112DA0);
  }
  Class result = objc_getClass("HMHomeManager");
  qword_1001333B8 = (uint64_t)result;
  off_100131EA8 = (uint64_t (*)())sub_1000533E4;
  return result;
}

id sub_1000533E4()
{
  return (id)qword_1001333B8;
}

id sub_1000534A8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

id sub_100053644(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidate];
}

void sub_100053BA8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___RPNearbyInvitationDaemon);
  uint64_t v2 = (void *)qword_1001333C0;
  qword_1001333C0 = (uint64_t)v1;
}

id sub_100054120(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientBLENearbyActionDiscoveryDeviceFound:a2];
}

id sub_10005412C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientBLENearbyActionDiscoveryDeviceLost:a2];
}

id sub_100054138(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientBLENearbyActionDiscoveryDeviceFound:a2];
}

void sub_100054144(id a1)
{
  if (dword_100131F70 <= 30 && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 30LL))) {
    LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _clientBLENearbyActionDiscoveryEnsureStarted]_block_invoke_4",  30LL,  "BLE action discovery interrupted\n");
  }
}

void sub_1000541A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    id v6 = v3;
    if (dword_100131F70 <= 90
      && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 90LL)))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _clientBLENearbyActionDiscoveryEnsureStarted]_block_invoke_5",  90LL,  "### BLE NearbyAction scanner start failed: %{error}\n",  v6);
    }

    [*(id *)(a1 + 32) _clientBLENearbyActionDiscoveryEnsureStopped];
    goto LABEL_10;
  }

  if (dword_100131F70 <= 30)
  {
    id v6 = 0LL;
    if (dword_100131F70 != -1 || (v5 = _LogCategory_Initialize(&dword_100131F70, 30LL), int v4 = 0LL, v5))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _clientBLENearbyActionDiscoveryEnsureStarted]_block_invoke_5",  30LL,  "BLE NearbyAction scanner started\n");
LABEL_10:
      int v4 = v6;
    }
  }
}

id sub_100054AF8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 192LL);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 192);
    *(void *)(v4 + 192) = 0LL;
  }

  if (dword_100131F70 <= 50 && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 50LL))) {
    LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _clientBLENearbyActionDiscoveryScanRateStartTimer]_block_invoke",  50LL,  "Reducing NearbyAction scan rate\n");
  }
  return [*(id *)(*(void *)(a1 + 32) + 112) setScanRate:20];
}

id sub_100054D00(uint64_t a1)
{
  return [*(id *)(a1 + 32) _clientBLENearbyActionEnableDupeFilter];
}

void sub_10005512C(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (v5)
  {
    if (dword_100131F70 <= 90
      && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 90LL)))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _clientBLENearbyActionAdvertiserEnsureStarted]_block_invoke",  90LL,  "### BLE NearbyAction advertiser failed: %@\n",  v5);
    }

    [*(id *)(a1 + 32) _clientBLENearbyActionAdvertiserEnsureStopped];
  }

  else
  {
    if (dword_100131F70 <= 30
      && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 30LL)))
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) daemonDevice]);
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 bleTargetData]);
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _clientBLENearbyActionAdvertiserEnsureStarted]_block_invoke",  30LL,  "BLE NearbyAction advertiser started. targeting %@ \n",  v4);
    }

    [*(id *)(a1 + 32) _clientBLENearbyActionAdvertiserStartTimer];
  }
}

void sub_1000553D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 208LL);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 208);
    *(void *)(v4 + 20_Block_object_dispose(va, 8) = 0LL;
  }

  id v17 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _idleSessionConnection]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v17 activatedSession]);
  unsigned int v7 = [v6 waitingToConnect];

  if (v7)
  {
    if (dword_100131F70 <= 50
      && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 50LL)))
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v17 activatedSession]);
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _clientBLENearbyActionAdvertiserStartTimer]_block_invoke",  50LL,  "Timed out waiting for session to start: %@");
    }

    id v14 = RPErrorF(4294960574LL, (uint64_t)"Timed out trying to connect", v8, v9, v10, v11, v12, v13, (uint64_t)v16);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    [v17 sessionActivatedWithError:v15];
    [*(id *)(a1 + 32) _update];
  }
}

void sub_10005566C(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "objectForKeyedSubscript:"));
  if (v5)
  {
    if (dword_100131F70 <= 30
      && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 30LL)))
    {
      id v6 = @"NO";
      if ((_DWORD)a3) {
        id v6 = @"YES";
      }
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _clientProximityEstimatorEnsureStarted]_block_invoke",  30LL,  "Proximity region for device ID %@ in region: %@\n",  v7,  v6);
    }

    [v5 setInBubble:a3];
    if ((_DWORD)a3) {
      [v5 setWasTriggered:1];
    }
    if ([v5 inBubble])
    {
      [*(id *)(a1 + 32) _clientReportFoundDevice:v5];
    }

    else if (([v5 inBubble] & 1) == 0 {
           && ![*(id *)(*(void *)(a1 + 32) + 168) count])
    }
    {
      [*(id *)(a1 + 32) _clientReportLostDevice:v5];
    }

    [*(id *)(a1 + 32) _update];
  }
}

void sub_1000557A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v6 = v3;
    if (dword_100131F70 <= 90
      && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 90LL)))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _clientProximityEstimatorEnsureStarted]_block_invoke_2",  90LL,  "### Proximity estimator start failed: %{error}\n",  v6);
    }

    [*(id *)(a1 + 32) _clientBLENearbyActionDiscoveryEnsureStopped];
    goto LABEL_10;
  }

  if (dword_100131F70 <= 30)
  {
    id v6 = 0LL;
    if (dword_100131F70 != -1 || (v5 = _LogCategory_Initialize(&dword_100131F70, 30LL), uint64_t v4 = 0LL, v5))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _clientProximityEstimatorEnsureStarted]_block_invoke_2",  30LL,  "Proximity estimator started\n");
LABEL_10:
      uint64_t v4 = v6;
    }
  }
}

id sub_100055F04(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientBLEServerHandleConnectionStarted:a2];
}

void sub_100055F10(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v8 = v3;
    if (dword_100131F70 <= 90
      && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 90LL)))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _clientBLEServerEnsureStarted]_block_invoke_2",  90LL,  "### BLE server start failed: %@\n",  v8);
    }

    [*(id *)(*(void *)(a1 + 32) + 160) invalidate];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 160);
    *(void *)(v5 + 160) = 0LL;

    goto LABEL_10;
  }

  if (dword_100131F70 <= 30)
  {
    id v8 = 0LL;
    if (dword_100131F70 != -1 || (v7 = _LogCategory_Initialize(&dword_100131F70, 30LL), uint64_t v4 = 0LL, v7))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _clientBLEServerEnsureStarted]_block_invoke_2",  30,  "BLE server started, PSM 0x%X\n",  [*(id *)(*(void *)(a1 + 32) + 160) listeningPSM]);
LABEL_10:
      uint64_t v4 = v8;
    }
  }
}

void sub_10005635C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    id v3 = a2;
    id v6 = (id)objc_claimAutoreleasedReturnValue([v2 client]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 xpcCnx]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 remoteObjectProxyWithErrorHandler:&stru_100112E78]);
    [v5 nearbyInvitationSessionError:v3];
  }

void sub_1000563E0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (dword_100131F70 <= 90
    && ((v5 = v2, dword_100131F70 != -1) || (int v4 = _LogCategory_Initialize(&dword_100131F70, 90LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _clientBLEServerHandleConnectionStarted:]_block_invoke_2",  90LL,  "### Failed to send error handler ended call: %@",  v3);
  }

  else
  {
  }

void sub_100056460(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  if (([*(id *)(a1 + 32) invalidationHandled] & 1) == 0)
  {
    [*(id *)(a1 + 40) _clientBLEServerHandleConnectionEnded:*(void *)(a1 + 32)];
    [v2 setNetCnx:0];
  }
}

void sub_1000564B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v7 = *(void **)(a1 + 32);
  id v8 = a4;
  id v9 = a3;
  id v10 = a2;
  id v11 = (id)objc_claimAutoreleasedReturnValue([v7 client]);
  [*(id *)(a1 + 40) _receivedEventID:v10 event:v9 options:v8 xpcCnx:v11 sessionID:0];
}

void sub_10005654C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = *(void **)(a1 + 32);
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  id v14 = (id)objc_claimAutoreleasedReturnValue([v9 client]);
  [*(id *)(a1 + 40) _receivedRequestID:v13 request:v12 options:v11 responseHandler:v10 xpcCnx:v14 sessionID:0];
}

id sub_1000565F4(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 32) invalidationHandled];
  return result;
}

id sub_100056B84(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _serverBLENearbyInfoDiscoveryDeviceFound:a2];
}

id sub_100056B90(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _serverBLENearbyInfoDiscoveryDeviceLost:a2];
}

id sub_100056B9C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _serverBLENearbyInfoDiscoveryDeviceFound:a2];
}

void sub_100056BA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    id v6 = v3;
    if (dword_100131F70 <= 90
      && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 90LL)))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _serverBLENearbyInfoDiscoveryEnsureStarted]_block_invoke_4",  90LL,  "### BLE NearbyInfo scanner start failed: %{error}\n",  v6);
    }

    [*(id *)(a1 + 32) _serverBLENearbyInfoDiscoveryEnsureStopped];
    goto LABEL_10;
  }

  if (dword_100131F70 <= 30)
  {
    id v6 = 0LL;
    if (dword_100131F70 != -1 || (v5 = _LogCategory_Initialize(&dword_100131F70, 30LL), int v4 = 0LL, v5))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _serverBLENearbyInfoDiscoveryEnsureStarted]_block_invoke_4",  30LL,  "BLE NearbyInfo scanner started\n");
LABEL_10:
      int v4 = v6;
    }
  }
}

id sub_1000572EC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _serverBLENearbyActionDiscoveryDeviceFound:a2];
}

void sub_1000572F8(id a1, SFDevice *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (dword_100131F70 <= 10
    && ((v5 = v2, dword_100131F70 != -1) || (int v4 = _LogCategory_Initialize(&dword_100131F70, 10LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _serverBLENearbyActionDiscoveryEnsureStarted]_block_invoke_2",  10LL,  "BLE NearbyAction lost device: %@\n",  v3);
  }

  else
  {
  }

id sub_100057378(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _serverBLENearbyActionDiscoveryDeviceFound:a2];
}

void sub_100057384(id a1)
{
  if (dword_100131F70 <= 30 && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 30LL))) {
    LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _serverBLENearbyActionDiscoveryEnsureStarted]_block_invoke_4",  30LL,  "BLE action discovery interrupted\n");
  }
}

void sub_1000573E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    id v6 = v3;
    if (dword_100131F70 <= 90
      && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 90LL)))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _serverBLENearbyActionDiscoveryEnsureStarted]_block_invoke_5",  90LL,  "### BLE NearbyAction scanner start failed: %{error}\n",  v6);
    }

    [*(id *)(a1 + 32) _serverBLENearbyActionDiscoveryEnsureStopped];
    goto LABEL_10;
  }

  if (dword_100131F70 <= 30)
  {
    id v6 = 0LL;
    if (dword_100131F70 != -1 || (v5 = _LogCategory_Initialize(&dword_100131F70, 30LL), int v4 = 0LL, v5))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _serverBLENearbyActionDiscoveryEnsureStarted]_block_invoke_5",  30LL,  "BLE NearbyAction scanner started\n");
LABEL_10:
      int v4 = v6;
    }
  }
}

void sub_1000579DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (dword_100131F70 <= 90
      && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 90LL)))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _serverBLENearbyActionAdvertiserEnsureStarted]_block_invoke",  90LL,  "### BLE NearbyAction advertiser failed: %@\n",  v3);
    }

    [*(id *)(a1 + 32) _serverBLENearbyActionAdvertiserEnsureStopped];
  }

  else
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (dword_100131F70 <= 30
        && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 30LL)))
      {
        LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _serverBLENearbyActionAdvertiserEnsureStarted]_block_invoke",  30LL,  "BLE NearbyAction advertiser started. targeting %@ (%@) \n",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
      }
    }

    else if (dword_100131F70 <= 30 {
           && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 30LL)))
    }
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _serverBLENearbyActionAdvertiserEnsureStarted]_block_invoke",  30LL,  "BLE NearbyAction advertiser started\n");
    }

    [*(id *)(a1 + 32) _serverBLENearbyActionAdvertiserRestartTimer];
  }
}

void sub_100057D08(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 200LL);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 200);
    *(void *)(v4 + 200) = 0LL;
  }

  if (dword_100131F70 <= 50 && (dword_100131F70 != -1 || _LogCategory_Initialize(&dword_100131F70, 50LL))) {
    LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _serverBLENearbyActionAdvertiserRestartTimer]_block_invoke",  50LL,  "Stopping NearbyAction HasInvitation advertiser due to timer\n");
  }
  [*(id *)(a1 + 32) _serverBLENearbyActionAdvertiserEnsureStopped];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bleDeviceWantingInvitations]);

  if (v6)
  {
    int v7 = *(void **)(a1 + 32);
    id v8 = (void *)v7[17];
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 bleDeviceWantingInvitations]);
    [v8 removeObject:v9];

    _[*(id *)(a1 + 32) setDevicesWantingInvitations:0];
  }

void sub_10005821C(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  [*(id *)(a1 + 40) _bleClientConnectionEnded:*(void *)(a1 + 32)];
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 netCnx]);
  [v4 sessionEndedWithID:v2 netCnx:v3];

  [v4 setNetCnx:0];
}

void sub_100058290(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v7 = *(void **)(a1 + 32);
  id v8 = a4;
  id v9 = a3;
  id v10 = a2;
  id v11 = (id)objc_claimAutoreleasedReturnValue([v7 client]);
  [*(id *)(a1 + 40) _receivedEventID:v10 event:v9 options:v8 xpcCnx:v11 sessionID:*(void *)(a1 + 48)];
}

void sub_100058320(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = *(void **)(a1 + 32);
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  id v14 = (id)objc_claimAutoreleasedReturnValue([v9 client]);
  [*(id *)(a1 + 40) _receivedRequestID:v13 request:v12 options:v11 responseHandler:v10 xpcCnx:v14 sessionID:*(void *)(a1 + 48)];
}

id sub_1000583C4(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 32) invalidationHandled];
  if ((result & 1) == 0)
  {
    [*(id *)(a1 + 40) _bleClientConnectionStateChanged:a2 cnx:*(void *)(a1 + 32) sessionID:*(void *)(a1 + 48)];
    return [*(id *)(a1 + 40) _update];
  }

  return result;
}

void sub_100058410(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = a2;
    id v7 = (id)objc_claimAutoreleasedReturnValue([v3 client]);
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v7 xpcCnx]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 remoteObjectProxyWithErrorHandler:&stru_100112FC0]);
    [v6 nearbyInvitationSessionError:v4 withID:*(void *)(a1 + 40)];
  }

void sub_10005849C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (dword_100131F70 <= 90
    && ((v5 = v2, dword_100131F70 != -1) || (int v4 = _LogCategory_Initialize(&dword_100131F70, 90LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _serverBLEClientConnectionEnsureStarted]_block_invoke_6",  90LL,  "### Failed to send error handler call: %@",  v3);
  }

  else
  {
  }

id sub_100058828(uint64_t a1)
{
  return [*(id *)(a1 + 32) _xpcConnectionInvalidated:*(void *)(a1 + 40)];
}

id sub_100058978(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_100058B28(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) xpcCnx]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100058BCC;
  v4[3] = &unk_1001118A0;
  id v5 = *(id *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 remoteObjectProxyWithErrorHandler:v4]);
  [v3 nearbyInvitationReceivedEventID:*(void *)(a1 + 40) event:*(void *)(a1 + 48) options:*(void *)(a1 + 56) sessionID:*(void *)(a1 + 64)];
}

void sub_100058BCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (dword_100131F70 <= 90)
  {
    id v6 = v3;
    if (dword_100131F70 != -1 || (v5 = _LogCategory_Initialize(&dword_100131F70, 90LL), int v4 = v6, v5))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _receivedEventID:event:options:xpcCnx:sessionID:]_block_invoke_2",  90LL,  "### Failed to deliver incoming event '%@' error: %@\n",  *(void *)(a1 + 32),  v4);
      int v4 = v6;
    }
  }
}

void sub_100058D98(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) xpcCnx]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100058E40;
  v4[3] = &unk_1001118A0;
  id v5 = *(id *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 remoteObjectProxyWithErrorHandler:v4]);
  [v3 nearbyInvitationReceivedRequestID:*(void *)(a1 + 40) request:*(void *)(a1 + 48) options:*(void *)(a1 + 56) responseHandler:*(void *)(a1 + 72) sessionID:*(void *)(a1 + 64)];
}

void sub_100058E40(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (dword_100131F70 <= 90)
  {
    id v6 = v3;
    if (dword_100131F70 != -1 || (v5 = _LogCategory_Initialize(&dword_100131F70, 90LL), int v4 = v6, v5))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationDaemon _receivedRequestID:request:options:responseHandler:xpcCnx:sessionID:]_block_invoke_2",  90LL,  "### Failed to deliver incoming request '%@' error: %@\n",  *(void *)(a1 + 32),  v4);
      int v4 = v6;
    }
  }
}

void sub_100059664(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (dword_100131F70 <= 90)
  {
    if (dword_100131F70 != -1 || (int v4 = _LogCategory_Initialize(&dword_100131F70, 90LL), v3 = v6, v4))
    {
      LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationXPCConnection sessionStartWithID:netCnx:completion:]_block_invoke",  90LL,  "### Failed to send session start message: %@\n",  v3);
      id v3 = v6;
    }
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
    id v3 = v6;
  }
}

void sub_1000599EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (objc_msgSend(*(id *)(a1 + 32), "shouldReportDevice:"))
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 80) remoteObjectProxy]);
    [v4 nearbyInvitationFoundDevice:v5];
  }
}

LABEL_20:
  ((void (*)(void *))v10[2])(v10);
  _Block_object_dispose(&v64, 8);
}

  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( self->_familyAccountIdentityMap,  "enumerateKeysAndObjectsUsingBlock:",  &stru_100114440);
  -[RPPeopleDaemon _update](self, "_update");
  if ((v3 & 0x80000) != 0) {
    goto LABEL_21;
  }
}

        if (dword_100132930 <= 30
          && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
        {
          LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFamilyIdentityWithFamilyMember:]",  30LL,  "Updated family account identity: %@\n",  v11);
        }

        id v10 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
        [v10 saveIdentity:v11 error:0];

        LOBYTE(v10) = 1;
        goto LABEL_37;
      }
    }

    else
    {
      -[RPIdentity setType:](v11, "setType:", 3LL);
      if (v9) {
        goto LABEL_20;
      }
      LOBYTE(v10) = 1;
    }

    familyAccountIdentityMap = self->_familyAccountIdentityMap;
    if (!familyAccountIdentityMap)
    {
      id v17 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v18 = self->_familyAccountIdentityMap;
      self->_familyAccountIdentityMap = v17;

      familyAccountIdentityMap = self->_familyAccountIdentityMap;
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:]( familyAccountIdentityMap,  "setObject:forKeyedSubscript:",  v11,  v8);
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFamilyIdentityWithFamilyMember:]",  30LL,  "Added family account identity: %@\n",  v11);
    }

    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    [v19 saveIdentity:v11 error:0];

    goto LABEL_37;
  }

  if (dword_100132930 <= 50 && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 50LL))) {
    LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFamilyIdentityWithFamilyMember:]",  50LL,  "### Ignoring family member with no AppleID: %@\n",  v4);
  }
  LOBYTE(v10) = 0;
LABEL_38:

  return (char)v10;
}

      if (*p_bleNearbyActionV2Device) {
        goto LABEL_27;
      }
      uint64_t v27 = objc_claimAutoreleasedReturnValue([v20 bleTargetData]);
      if (!v27)
      {
        if (dword_100132BB0 <= 30)
        {
          v34 = v38;
          if (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)) {
            LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _clientBLENearbyActionV2AdvertiserShouldRun]",  30LL,  "Skip using NearbyActionV2 advertiser, targetAuthTag is nil\n");
          }
          goto LABEL_58;
        }

    uint64_t v16 = 0LL;
    uint64_t v15 = 0;
    goto LABEL_28;
  }

  uint64_t v16 = 0LL;
  uint64_t v15 = 1;
LABEL_27:
  id v7 = dword_100132BB0;
LABEL_28:
  if (v7 <= 90 && (v7 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
  {
    id v17 = "no";
    if (v15) {
      id v17 = "yes";
    }
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _requestCameraCapabilitiesForDevice:]_block_invoke",  90LL,  "### Failed to activate a client to remote display device %@: %@, reschedule: %s\n",  *(void *)(a1 + 56),  v3,  v17);
  }

  if (v15) {
    [*(id *)(a1 + 48) _scheduleCameraCapabilitiesRequest:*(void *)(a1 + 40) interval:v16];
  }
LABEL_36:
}

        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v17 + 6)));
        -[RPRemoteDisplayDaemon _serverHandleSessionStartWithID:netCnx:completion:]( self,  "_serverHandleSessionStartWithID:netCnx:completion:",  v20,  v11,  0LL);

        goto LABEL_21;
      }

      if ((v5 != 0LL) != (v12 == 0LL))
      {
        uint64_t v15 = [v12 isEqual:v13];

        if (v15) {
          goto LABEL_15;
        }
      }

      else
      {
      }
    }

    id v8 = [v7 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v8) {
      continue;
    }
    break;
  }

void sub_100059F98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100059FD0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100059FE0(uint64_t a1)
{
}

uint64_t sub_100059FE8(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100131F70 > 90) {
      goto LABEL_6;
    }
    if (dword_100131F70 == -1)
    {
      if (!_LogCategory_Initialize(&dword_100131F70, 90LL))
      {
LABEL_6:
        id result = *(void *)(v2 + 32);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL));
        }
        return result;
      }

      uint64_t v1 = *(void *)(*(void *)(*(void *)(v2 + 40) + 8LL) + 40LL);
    }

    LogPrintF( &dword_100131F70,  "-[RPNearbyInvitationXPCConnection nearbyInvitationActivateSession:completion:]_block_invoke",  90LL,  "### Activate session failed: %{error}\n",  v1);
    goto LABEL_6;
  }

  return result;
}

Class sub_10005A804()
{
  if (qword_1001333E8 != -1) {
    dispatch_once(&qword_1001333E8, &stru_100113078);
  }
  Class result = objc_getClass("SFDeviceDiscovery");
  qword_1001333E0 = (uint64_t)result;
  off_100131FE0 = (uint64_t (*)())sub_10005A860;
  return result;
}

id sub_10005A860()
{
  return (id)qword_1001333E0;
}

void sub_10005A86C(id a1)
{
  qword_1001333F0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
}

Class sub_10005A894()
{
  if (qword_1001333E8 != -1) {
    dispatch_once(&qword_1001333E8, &stru_100113078);
  }
  Class result = objc_getClass("SFService");
  qword_1001333F8 = (uint64_t)result;
  off_100131FE8 = (uint64_t (*)())sub_10005A8F0;
  return result;
}

id sub_10005A8F0()
{
  return (id)qword_1001333F8;
}

id sub_10005A8FC()
{
  if (qword_1001333E8 != -1) {
    dispatch_once(&qword_1001333E8, &stru_100113078);
  }
  int v0 = (id *)dlsym((void *)qword_1001333F0, "SFServiceIdentifierAcceptedInvitation");
  if (v0) {
    objc_storeStrong((id *)&qword_1001333D8, *v0);
  }
  off_100131FF0 = (uint64_t (*)())sub_10005A974;
  return (id)qword_1001333D8;
}

id sub_10005A974()
{
  return (id)qword_1001333D8;
}

id sub_10005A980()
{
  if (qword_1001333E8 != -1) {
    dispatch_once(&qword_1001333E8, &stru_100113078);
  }
  int v0 = (id *)dlsym((void *)qword_1001333F0, "SFServiceIdentifierHasInvitations");
  if (v0) {
    objc_storeStrong((id *)&qword_1001333D0, *v0);
  }
  off_100131FF8 = (uint64_t (*)())sub_10005A9F8;
  return (id)qword_1001333D0;
}

id sub_10005A9F8()
{
  return (id)qword_1001333D0;
}

void sub_10005B208(id a1)
{
}

void sub_10005C8F0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___RPIdentityDaemon);
  uint64_t v2 = (void *)qword_100133410;
  qword_100133410 = (uint64_t)v1;
}

id sub_10005D8B0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

id sub_10005D9D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_10005D9D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_10005DA38(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidate];
}

LABEL_65:
    }

    if ((v4 & 0x80) != 0 && self->_prefPairedResolve)
    {
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      uint64_t v11 = (NSArray *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 8LL, 0LL));
      id v33 = -[NSArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v71,  v101,  16LL);
      if (v33)
      {
        v34 = v33;
        v35 = *(void *)v72;
LABEL_70:
        id v36 = 0LL;
        while (1)
        {
          if (*(void *)v72 != v35) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void **)(*((void *)&v71 + 1) + 8 * v36);
          if (([v16 disabled] & 1) == 0
            && (unint64_t)[v16 disabledUntilTicks] <= v10
            && [v16 verifyAuthTagPtr:v96 authTagLen:v95 dataPtr:v98 dataLen:6 type:1 error:0])
          {
            break;
          }

          if (v34 == (id)++v36)
          {
            v34 = -[NSArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v71,  v101,  16LL);
            if (v34) {
              goto LABEL_70;
            }
            goto LABEL_78;
          }
        }

        if (dword_100132130 <= 20
          && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 20LL)))
        {
          v58 = CUDescriptionWithLevel(v6, 30LL);
          v51 = (void *)objc_claimAutoreleasedReturnValue(v58);
          LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForBonjourDevice:typeFlags:]",  20LL,  "Resolved DeviceAuthTag: paired, %@ -> %@\n",  v51,  v16);
          goto LABEL_140;
        }

        goto LABEL_141;
      }

LABEL_78:
    }

    if ((v4 & 0x800) != 0)
    {
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      uint64_t v11 = (NSArray *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 13LL, 0LL));
      __int16 v37 = -[NSArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v67,  v100,  16LL);
      if (v37)
      {
        int v38 = v37;
        __int16 v39 = *(void *)v68;
LABEL_82:
        __int128 v40 = 0LL;
        while (1)
        {
          if (*(void *)v68 != v39) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void **)(*((void *)&v67 + 1) + 8 * v40);
          if (([v16 disabled] & 1) == 0
            && (unint64_t)[v16 disabledUntilTicks] <= v10
            && [v16 verifyAuthTagPtr:v96 authTagLen:v95 dataPtr:v98 dataLen:6 type:1 error:0])
          {
            break;
          }

          if (v38 == (id)++v40)
          {
            int v38 = -[NSArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v67,  v100,  16LL);
            if (v38) {
              goto LABEL_82;
            }
            goto LABEL_90;
          }
        }

        if (dword_100132130 <= 20
          && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 20LL)))
        {
          v57 = CUDescriptionWithLevel(v6, 30LL);
          v51 = (void *)objc_claimAutoreleasedReturnValue(v57);
          LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForBonjourDevice:typeFlags:]",  20LL,  "Resolved DeviceAuthTag: SessionPaired, %@ -> %@\n",  v51,  v16);
          goto LABEL_140;
        }

LABEL_141:
        v48 = v16;
        goto LABEL_120;
      }

LABEL_96:
            v50 = v23;
            goto LABEL_97;
          }
        }

        uint64_t v20 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v78,  v88,  16LL);
        if (v20) {
          continue;
        }
        break;
      }
    }
  }

  if ((v7 & 8) != 0 && self->_prefFamilyResolve)
  {
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    id v18 = (NSArray *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 4LL, 0LL));
    int v24 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v74,  v87,  16LL);
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v26 = *(void *)v75;
      while (2)
      {
        for (j = 0LL; j != v25; j = (char *)j + 1)
        {
          if (*(void *)v75 != v26) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void **)(*((void *)&v74 + 1) + 8LL * (void)j);
          if ([v23 verifySignature:v10 data:v17 error:0])
          {
            if (dword_100132130 <= 30
              && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
            {
              LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForSignature:data:typeFlags:error:]",  30LL,  "Resolved identity for signature: family, %@\n",  v23);
            }

            goto LABEL_96;
          }
        }

        uint64_t v25 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v74,  v87,  16LL);
        if (v25) {
          continue;
        }
        break;
      }
    }
  }

  if ((v7 & 0x20) != 0 && self->_prefFriendResolve)
  {
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    id v18 = (NSArray *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 6LL, 0LL));
    uint64_t v28 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v70,  v86,  16LL);
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = *(void *)v71;
      while (2)
      {
        for (k = 0LL; k != v29; k = (char *)k + 1)
        {
          if (*(void *)v71 != v30) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void **)(*((void *)&v70 + 1) + 8LL * (void)k);
          if ([v23 verifySignature:v10 data:v17 error:0])
          {
            if (dword_100132130 <= 30
              && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
            {
              LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForSignature:data:typeFlags:error:]",  30LL,  "Resolved identity for signature: friend, %@\n",  v23);
            }

            goto LABEL_96;
          }
        }

        uint64_t v29 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v70,  v86,  16LL);
        if (v29) {
          continue;
        }
        break;
      }
    }
  }

  if ((v7 & 0x400) != 0)
  {
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    id v18 = (NSArray *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 12LL, 0LL));
    uint64_t v32 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v66,  v85,  16LL);
    if (v32)
    {
      id v33 = v32;
      v34 = *(void *)v67;
      while (2)
      {
        for (m = 0LL; m != v33; m = (char *)m + 1)
        {
          if (*(void *)v67 != v34) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void **)(*((void *)&v66 + 1) + 8LL * (void)m);
          if ([v23 verifySignature:v10 data:v17 error:0])
          {
            if (dword_100132130 <= 30
              && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
            {
              LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForSignature:data:typeFlags:error:]",  30LL,  "Resolved identity for signature: SharedTVUserDevice, %@\n",  v23);
            }

            goto LABEL_96;
          }
        }

        id v33 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v66,  v85,  16LL);
        if (v33) {
          continue;
        }
        break;
      }
    }
  }

  if ((v7 & 0x80) != 0 && self->_prefPairedResolve)
  {
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    id v18 = (NSArray *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 8LL, 0LL));
    id v36 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v62,  v84,  16LL);
    if (v36)
    {
      __int16 v37 = v36;
      int v38 = *(void *)v63;
      while (2)
      {
        for (n = 0LL; n != v37; n = (char *)n + 1)
        {
          if (*(void *)v63 != v38) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void **)(*((void *)&v62 + 1) + 8LL * (void)n);
          if ([v23 verifySignature:v10 data:v17 error:0])
          {
            if (dword_100132130 <= 30
              && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
            {
              LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForSignature:data:typeFlags:error:]",  30LL,  "Resolved identity for signature: paired, %@\n",  v23);
            }

            goto LABEL_96;
          }
        }

        __int16 v37 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v62,  v84,  16LL);
        if (v37) {
          continue;
        }
        break;
      }
    }
  }

  if ((v7 & 0x800) != 0)
  {
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    id v18 = (NSArray *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 13LL, 0LL));
    __int128 v40 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v58,  v83,  16LL);
    if (v40)
    {
      __int16 v41 = v40;
      uint64_t v42 = *(void *)v59;
      while (2)
      {
        for (ii = 0LL; ii != v41; ii = (char *)ii + 1)
        {
          if (*(void *)v59 != v42) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void **)(*((void *)&v58 + 1) + 8LL * (void)ii);
          if ([v23 verifySignature:v10 data:v17 error:0])
          {
            if (dword_100132130 <= 30
              && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
            {
              LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForSignature:data:typeFlags:error:]",  30LL,  "Resolved identity for signature: SessionPaired, %@\n",  v23);
            }

            goto LABEL_96;
          }
        }

        __int16 v41 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v58,  v83,  16LL);
        if (v41) {
          continue;
        }
        break;
      }
    }
  }

  if ((v7 & 0x4000) != 0)
  {
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v44 = (void *)objc_claimAutoreleasedReturnValue(-[RPIdentityDaemon identitiesOfType:error:](self, "identitiesOfType:error:", 15LL, 0LL));
    v45 = [v44 countByEnumeratingWithState:&v54 objects:v82 count:16];
    if (v45)
    {
      v46 = v45;
      v47 = *(void *)v55;
      while (2)
      {
        for (jj = 0LL; jj != v46; jj = (char *)jj + 1)
        {
          if (*(void *)v55 != v47) {
            objc_enumerationMutation(v44);
          }
          v49 = *(void **)(*((void *)&v54 + 1) + 8LL * (void)jj);
          if ([v49 verifySignature:v10 data:v17 error:0])
          {
            if (dword_100132130 <= 30
              && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
            {
              LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForSignature:data:typeFlags:error:]",  30LL,  "Resolved identity for signature: AdHocPaired, %@\n",  v49);
            }

            v50 = v49;

            goto LABEL_97;
          }
        }

        v46 = [v44 countByEnumeratingWithState:&v54 objects:v82 count:16];
        if (v46) {
          continue;
        }
        break;
      }
    }
  }

  if (dword_100132130 <= 90 && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 90LL))) {
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityForSignature:data:typeFlags:error:]",  90LL,  "### Resolve identity for signature failed: %#{flags}\n",  v7,  &unk_10010A3E8);
  }
  if (a6)
  {
    v52 = RPErrorF(4294960569LL, (uint64_t)"Resolved identity not found", v11, v12, v13, v14, v15, v16, v53);
    v50 = 0LL;
    *a6 = (id)objc_claimAutoreleasedReturnValue(v52);
  }

  else
  {
    v50 = 0LL;
  }

LABEL_97:
  return v50;
}

LABEL_64:
  }

  if (dword_100132130 <= 30 && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL))) {
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon resolveIdentityTypesForSignature:data:typeFlags:]",  30LL,  "Resolved identity types: %#{flags}\n",  v11,  &unk_10010A3E8);
  }

  return v11;
}

void sub_100060820(_Unwind_Exception *a1)
{
}

uint64_t sub_10006084C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10006085C(uint64_t a1)
{
}

void sub_100060864(uint64_t a1, void *a2, _BYTE *a3)
{
  id v11 = a2;
  unsigned int v6 = [*(id *)(a1 + 32) verifyWithIdentity:v11];
  id v7 = v11;
  if (v6)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v11 contactID]);

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v11 accountID]);
    unsigned int v10 = [v11 type];
    if (v8 || v10 == 2)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
      *a3 = 1;
      goto LABEL_7;
    }

    id v7 = v11;
    if (v9)
    {
      [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v11];
LABEL_7:
      id v7 = v11;
    }
  }
}

void sub_100060A5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100060A74(void *a1, void *a2)
{
  id v9 = a2;
  unsigned int v3 = [v9 verifySignature:a1[4] data:a1[5] error:0];
  int v4 = v9;
  if (v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v9 accountAltDSID]);
    if (!v5)
    {
      unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue( +[RPCompanionLinkDaemon sharedCompanionLinkDaemon]( &OBJC_CLASS___RPCompanionLinkDaemon,  "sharedCompanionLinkDaemon"));
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 localDeviceInfo]);
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v7 accountAltDSID]);
    }

    if ([v9 type] == 2
      || [v9 type] == 12
      || [v9 type] == 8)
    {
      uint64_t v8 = 0x80000LL;
    }

    else
    {
      uint64_t v8 = 0x4000LL;
    }

    *(void *)(*(void *)(a1[7] + 8LL) + 24LL) |= v8;
LABEL_10:

    int v4 = v9;
  }
}

void sub_100060D18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100060D3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) invalidate];
  if (v6)
  {
    if (dword_100132130 <= 60
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 60LL)))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) contactID]);
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon isContactValidForIdentity:completionBlock:]_block_invoke",  60LL,  "### Contact with ID %@ is invalid: '%{mask}', %{error}\n",  v7,  v5,  v6);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountID]);
    [*(id *)(a1 + 48) setEmailAddress:v8];

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountID]);
    [*(id *)(a1 + 48) setPhoneNumber:v9];

    [*(id *)(a1 + 48) setContactIdentifier:0];
    id v10 = objc_alloc_init((Class)off_1001321B8[0]());
    [v10 setDispatchQueue:*(void *)(*(void *)(a1 + 56) + 168)];
    id v11 = *(void **)(a1 + 48);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_100060F84;
    void v17[3] = &unk_100113130;
    id v18 = v10;
    id v19 = v11;
    id v12 = *(id *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 56);
    id v20 = v12;
    uint64_t v21 = v13;
    __int128 v16 = *(_OWORD *)(a1 + 64);
    id v14 = (id)v16;
    __int128 v22 = v16;
    id v15 = v10;
    [v15 findContact:v11 completion:v17];
  }

  else
  {
    if (dword_100132130 <= 30
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
    {
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon isContactValidForIdentity:completionBlock:]_block_invoke",  30LL,  "### ContactID for identity is valid: %@ \n",  *(void *)(a1 + 40));
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

void sub_100060F84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) invalidate];
  if (!v6)
  {
    if (dword_100132130 <= 30
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) accountID]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 contactIdentifier]);
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon isContactValidForIdentity:completionBlock:]_block_invoke_2",  30LL,  "### Updatating identity: %@ with new contactID: %s \n",  v7,  v8);
    }

    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[RPPeopleDaemon sharedPeopleDaemon](&OBJC_CLASS___RPPeopleDaemon, "sharedPeopleDaemon"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) accountID]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 contactIdentifier]);
    unsigned __int8 v15 = [v12 updateFriendIdentityWithAppleID:v13 contactID:v14];

    if ((v15 & 1) != 0)
    {
      if (dword_100132130 > 30
        || dword_100132130 == -1 && !_LogCategory_Initialize(&dword_100132130, 30LL))
      {
        char v18 = 1;
        goto LABEL_33;
      }

      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) accountID]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v5 contactIdentifier]);
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon isContactValidForIdentity:completionBlock:]_block_invoke_2",  30LL,  "### Updatating identity: %@ succeeded with new contactID: %s \n",  v16,  v17);
      char v18 = 1;
    }

    else
    {
      if (dword_100132130 > 30
        || dword_100132130 == -1 && !_LogCategory_Initialize(&dword_100132130, 30LL))
      {
        char v18 = 0;
        goto LABEL_33;
      }

      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) accountID]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v5 contactIdentifier]);
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon isContactValidForIdentity:completionBlock:]_block_invoke_2",  30LL,  "### Updatating identity: %@ failed with new contactID: %s \n",  v16,  v17);
      char v18 = 0;
    }

LABEL_33:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = v18;
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    goto LABEL_34;
  }

  if (dword_100132130 <= 60 && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 60LL))) {
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon isContactValidForIdentity:completionBlock:]_block_invoke_2",  60LL,  "### Contact with email and phone: %@ invalid : %{error}, Removing identity: %@ \n",  *(void *)(a1 + 40),  v6,  *(void *)(a1 + 48));
  }
  uint64_t v10 = *(void *)(a1 + 48);
  id v9 = *(void **)(a1 + 56);
  id v20 = 0LL;
  [v9 removeIdentity:v10 error:&v20];
  id v11 = v20;
  if (v11)
  {
    if (dword_100132130 <= 60
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 60LL)))
    {
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon isContactValidForIdentity:completionBlock:]_block_invoke_2",  60LL,  "### Removing identity: %@ failed with: %{error}\n",  *(void *)(a1 + 48),  v11);
    }
  }

  else if (dword_100132130 <= 30 {
         && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
  }
  {
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon isContactValidForIdentity:completionBlock:]_block_invoke_2",  30LL,  "### Removed identity: %@ \n",  *(void *)(a1 + 48),  v19);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 0;
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();

LABEL_34:
}

LABEL_79:
      return v23;
    }

    v69 = v26;
    v70 = v25;
    v71 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v30 = [v27 count];
    if (!v30)
    {
      v53 = v29;
      goto LABEL_78;
    }

    uint64_t v31 = v30;
    v73 = self;
    uint64_t v32 = 0LL;
    v76 = v9;
    v77 = kSecAttrViewHintHome;
    while (2)
    {
      id v33 = (void *)objc_claimAutoreleasedReturnValue([v78 objectAtIndexedSubscript:v32]);
      v34 = v33;
      if (v9 != 2) {
        goto LABEL_47;
      }
      v35 = (void *)objc_claimAutoreleasedReturnValue([v33 viewHint]);
      id v36 = [v35 isEqual:v77];

      if ((v36 & 1) != 0) {
        goto LABEL_47;
      }
      v72 = v29;
      __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([v34 identifier]);
      int v38 = (void *)objc_claimAutoreleasedReturnValue([v34 type]);
      __int16 v39 = (void *)objc_claimAutoreleasedReturnValue([v34 metadata]);
      Int64Ranged = CFDictionaryGetInt64Ranged(v39, @"revisionID", 0LL, 0xFFFFFFFFLL, 0LL);

      __int128 v40 = 0LL;
      while (v32 == v40)
      {
LABEL_43:
        if (v31 == (id)++v40)
        {
          v52 = 0LL;
          goto LABEL_45;
        }
      }

      __int16 v41 = (void *)objc_claimAutoreleasedReturnValue([v78 objectAtIndexedSubscript:v40]);
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v41 viewHint]);
      __int128 v43 = [v42 isEqual:v77];

      if (!v43)
      {
LABEL_42:

        goto LABEL_43;
      }

      v44 = (id)objc_claimAutoreleasedReturnValue([v41 identifier]);
      v45 = v37;
      v46 = v45;
      if (v44 == v45)
      {
      }

      else
      {
        if ((v37 != 0LL) == (v44 == 0LL))
        {
LABEL_38:

          goto LABEL_42;
        }

        v47 = [v44 isEqual:v45];

        if (!v47) {
          goto LABEL_42;
        }
      }

      v44 = (id)objc_claimAutoreleasedReturnValue([v41 type]);
      v48 = v38;
      v46 = v48;
      if (v44 == v48)
      {

        goto LABEL_40;
      }

      if ((v38 != 0LL) != (v44 == 0LL))
      {
        v49 = [v44 isEqual:v48];

        if (!v49) {
          goto LABEL_42;
        }
LABEL_40:
        v50 = (void *)objc_claimAutoreleasedReturnValue([0 metadata]);
        v51 = CFDictionaryGetInt64Ranged(v50, @"revisionID", 0LL, 0xFFFFFFFFLL, 0LL);

        if (Int64Ranged <= v51)
        {
          v52 = v41;
          if (dword_100132130 <= 30
            && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
          {
            LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _identitiesOfType:error:]",  30LL,  "Skipping non-synced duplicate item: %@ vs %@ (rev %u vs %u)\n",  v34,  v52,  Int64Ranged,  v51);
          }

LABEL_45:
          uint64_t v29 = v72;

          if (v52)
          {
            v53 = v72;
            goto LABEL_70;
          }

id sub_100061FDC(uint64_t a1)
{
  if (dword_100132130 <= 30 && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL))) {
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon regenerateTemporarySelfIdentity]_block_invoke",  30LL,  "Regenerating self temporary identity");
  }
  return [*(id *)(a1 + 32) _loadTemporarySelfIdentity];
}

void sub_100062108(uint64_t a1, void *a2, void *a3)
{
  id v20 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) invalidate];
  if (!v20 || v5)
  {
    if (!v5)
    {
      id v18 = RPErrorF(4294960569LL, (uint64_t)"Paired device identity not found", v6, v7, v8, v9, v10, v11, v19);
      id v5 = (RPIdentity *)objc_claimAutoreleasedReturnValue(v18);
    }

    if (dword_100132130 <= 90
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 90LL)))
    {
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon getPairedIdentityWithCompletion:]_block_invoke",  90LL,  "### Get pairing identifier for paired device failed: %{error}\n",  v5);
    }

    id v17 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___RPIdentity);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v20 identifier]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 UUIDString]);
    -[RPIdentity setIdentifier:](v5, "setIdentifier:", v13);

    id v14 = (void *)objc_claimAutoreleasedReturnValue([v20 publicKey]);
    -[RPIdentity setEdPKData:](v5, "setEdPKData:", v14);

    unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v20 secretKey]);
    -[RPIdentity setEdSKData:](v5, "setEdSKData:", v15);

    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v20 altIRK]);
    -[RPIdentity setDeviceIRKData:](v5, "setDeviceIRKData:", v16);

    id v17 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v17();
}

void sub_1000632E0(uint64_t a1)
{
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 128LL);
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v17;
LABEL_3:
    uint64_t v6 = 0LL;
    while (1)
    {
      if (*(void *)v17 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void **)(*((void *)&v16 + 1) + 8 * v6);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
      unsigned __int8 v10 = [v8 isEqual:v9];

      if ((v10 & 1) != 0) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }

    id v11 = v7;

    if (!v11) {
      goto LABEL_12;
    }
    [*(id *)(a1 + 32) updateSessionPairedIdentity:*(void *)(a1 + 40)];
  }

  else
  {
LABEL_9:

LABEL_12:
    id v12 = *(void **)(*(void *)(a1 + 32) + 128LL);
    if (!v12)
    {
      uint64_t v13 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      uint64_t v14 = *(void *)(a1 + 32);
      unsigned __int8 v15 = *(void **)(v14 + 128);
      *(void *)(v14 + 12_Block_object_dispose(va, 8) = v13;

      id v12 = *(void **)(*(void *)(a1 + 32) + 128LL);
    }

    [v12 addObject:*(void *)(a1 + 40)];
    if (dword_100132130 <= 30
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
    {
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon addSessionPairedIdentity:]_block_invoke",  30LL,  "Added session paired identity: %@\n",  *(void *)(a1 + 40));
    }

    [*(id *)(a1 + 32) _postIdentitiesChangedNotification];
    id v11 = (id)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
    [v11 postDaemonInfoChanges:0x2000];
  }
}

void sub_100063570(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 128LL);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
LABEL_3:
    uint64_t v6 = 0LL;
    while (1)
    {
      if (*(void *)v13 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * v6);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
      unsigned __int8 v9 = [v8 isEqual:*(void *)(a1 + 40)];

      if ((v9 & 1) != 0) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }

    id v10 = v7;

    if (!v10) {
      return;
    }
    if (dword_100132130 <= 30
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
    {
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon removeSessionPairedIdentityWithIdentifier:]_block_invoke",  30LL,  "Removed session paired identity: %@\n",  v10);
    }

    [*(id *)(*(void *)(a1 + 32) + 128) removeObject:v10];
    [*(id *)(a1 + 32) _postIdentitiesChangedNotification];
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
    [v11 postDaemonInfoChanges:0x2000];
  }

  else
  {
LABEL_9:
    id v10 = v2;
  }
}

void sub_100063828(uint64_t a1)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 128LL);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v18;
LABEL_3:
    uint64_t v5 = 0LL;
    while (1)
    {
      if (*(void *)v18 != v4) {
        objc_enumerationMutation(v2);
      }
      uint64_t v6 = *(void **)(*((void *)&v17 + 1) + 8 * v5);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
      unsigned __int8 v9 = [v7 isEqual:v8];

      if ((v9 & 1) != 0) {
        break;
      }
      if (v3 == (id)++v5)
      {
        id v3 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v3) {
          goto LABEL_3;
        }
        goto LABEL_28;
      }
    }

    id v3 = v6;

    if (!v3) {
      goto LABEL_29;
    }
    uint64_t v10 = objc_claimAutoreleasedReturnValue([v3 name]);
    if (v10)
    {
      id v11 = (void *)v10;
      int v12 = 0;
    }

    else
    {
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);

      if (!v13)
      {
        int v12 = 0;
LABEL_16:
        __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v3 model]);
        if (v14)
        {
        }

        else
        {
          __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) model]);

          if (v15)
          {
            __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) model]);
            [v3 setModel:v16];

LABEL_22:
            if (dword_100132130 <= 30
              && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
            {
              LogPrintF( &dword_100132130,  "-[RPIdentityDaemon updateSessionPairedIdentity:]_block_invoke",  30LL,  "Updated session paired identity: %@\n",  v3);
            }

            [*(id *)(a1 + 32) _postIdentitiesChangedNotification];
            id v2 = (id)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
            [v2 postDaemonInfoChanges:0x2000];
            goto LABEL_28;
          }
        }

        if (!v12) {
          goto LABEL_29;
        }
        goto LABEL_22;
      }

      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
      [v3 setName:v11];
      int v12 = 1;
    }

    goto LABEL_16;
  }

id sub_100063B2C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);

  if (!v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 UUIDString]);
    [*(id *)(a1 + 32) setIdentifier:v4];
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDeviceID]);

  if (!v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    [*(id *)(a1 + 32) setIdsDeviceID:v6];
  }

  if ([*(id *)(*(void *)(a1 + 40) + 136) count])
  {
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 136) objectAtIndexedSubscript:v7]);
      unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 edPKData]);
      int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) edPKData]);
      unsigned __int8 v13 = [v11 isEqual:v12];

      if ((v13 & 1) != 0) {
        goto LABEL_16;
      }
    }

LABEL_16:
    [*(id *)(*(void *)(a1 + 40) + 136) setObject:*(void *)(a1 + 32) atIndexedSubscript:v7];
    if (dword_100132130 <= 30
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
    {
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon addOrUpdateAdHocPairedIdentity:]_block_invoke",  30LL,  "Updating ad-hoc paired identity: %@\n",  *(void *)(a1 + 32));
    }
  }

  else
  {
LABEL_10:
    __int128 v14 = *(void **)(*(void *)(a1 + 40) + 136LL);
    if (!v14)
    {
      uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      uint64_t v16 = *(void *)(a1 + 40);
      __int128 v17 = *(void **)(v16 + 136);
      *(void *)(v16 + 136) = v15;

      __int128 v14 = *(void **)(*(void *)(a1 + 40) + 136LL);
    }

    [v14 addObject:*(void *)(a1 + 32)];
    if (dword_100132130 <= 30
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
    {
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon addOrUpdateAdHocPairedIdentity:]_block_invoke",  30LL,  "Added ad-hoc paired identity: %@\n",  *(void *)(a1 + 32));
    }
  }

  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
  [v18 postDaemonInfoChanges:0x4000];

  return [*(id *)(a1 + 40) _postIdentitiesChangedNotification];
}

void *sub_10006404C(void *result)
{
  if (*(_DWORD *)(result[4] + 8LL) != -1)
  {
    uint64_t v1 = result;
    if (dword_100132130 <= 30
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
    {
      LogPrintF(&dword_100132130, "-[RPIdentityDaemon _ensureStarted]_block_invoke", 30LL, "Home view changed\n");
    }

    return [(id)v1[4] _updateSameAccountIdentities];
  }

  return result;
}

void *sub_1000640D8(void *result)
{
  if (*(_DWORD *)(result[4] + 12LL) != -1)
  {
    uint64_t v1 = result;
    if (dword_100132130 <= 30
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
    {
      LogPrintF(&dword_100132130, "-[RPIdentityDaemon _ensureStarted]_block_invoke_2", 30LL, "Home view ready\n");
    }

    [(id)v1[4] _loadSelfIdentity:0];
    return [(id)v1[4] _updateSameAccountIdentities];
  }

  return result;
}

void *sub_100064170(void *result)
{
  if (*(_DWORD *)(result[4] + 56LL) != -1)
  {
    uint64_t v1 = result;
    if (dword_100132130 <= 30
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
    {
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _ensureStarted]_block_invoke_3",  30LL,  "Pairing devices changed\n");
    }

    return [(id)v1[4] _updatePairedDeviceIdentities];
  }

  return result;
}

void sub_10006443C(id a1)
{
  if (dword_100132130 <= 30 && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL))) {
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _postIdentitiesChangedNotification]_block_invoke",  30LL,  "Posting notification: %s\n",  "com.apple.rapport.identitiesChanged");
  }
  notify_post("com.apple.rapport.identitiesChanged");
}

void sub_100064658(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (dword_100132130 <= 30
    && ((v5 = v2, dword_100132130 != -1) || (int v4 = _LogCategory_Initialize(&dword_100132130, 30LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _triggerKeychainRefetch]_block_invoke",  30LL,  "Keychain refetch end: %{error}\n",  v3);
  }

  else
  {
  }

void sub_1000647A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) invalidate];
  if (v5)
  {
    uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    id v19 = v5;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v21;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v21 != v11) {
            objc_enumerationMutation(v8);
          }
          unsigned __int8 v13 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
          __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 UUIDString]);

          if (v15)
          {
            uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v13 altIRK]);
            if (v16)
            {
              __int128 v17 = -[RPIdentity initWithPairedPeer:type:]( objc_alloc(&OBJC_CLASS___RPIdentity),  "initWithPairedPeer:type:",  v13,  8LL);
              if (v17) {
                -[NSMutableArray addObject:](v7, "addObject:", v17);
              }
            }
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }

      while (v10);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 40) + 48LL), v7);
    if (dword_100132130 <= 30
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
    {
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _updatePairedDeviceIdentities]_block_invoke",  30LL,  "Paired peers updated: %d peer(s)\n",  -[NSMutableArray count](v7, "count"));
    }

    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
    [v18 postDaemonInfoChanges:256];

    [*(id *)(a1 + 40) _postIdentitiesChangedNotification];
    id v5 = v19;
  }

  else if (dword_100132130 <= 90 {
         && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 90LL)))
  }
  {
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _updatePairedDeviceIdentities]_block_invoke",  90LL,  "### Get paired peers failed: %{error}\n",  v6);
  }
}

LABEL_84:
}

            v62 = CFStringGetTypeID();
            v63 = CFDictionaryGetTypedValue(v15, @"name", v62, 0LL);
            v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
            v65 = v64;
            if (v64 && [v64 length])
            {
              v66 = (id)objc_claimAutoreleasedReturnValue(-[RPIdentity name](v19, "name"));
              v67 = v65;
              v68 = v67;
              if (v66 == v67)
              {

                goto LABEL_93;
              }

              if (v66)
              {
                v69 = [v66 isEqual:v67];

                if ((v69 & 1) != 0) {
                  goto LABEL_93;
                }
              }

              else
              {
              }

              -[RPIdentity setName:](v19, "setName:", v68);
              v20 |= 0x100u;
            }

void sub_100066FA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (dword_100132130 <= 30
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
    {
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _loadSharedTVUserDeviceIdentities]_block_invoke",  30LL,  "### Failed to fetch personas with error %@\n",  v6);
    }

    id v10 = [(Class)off_1001321C0[0]() currentPersona];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    id v12 = [v11 restorePersonaWithSavedPersonaContext:*(void *)(*(void *)(a1 + 32) + 32)];

    uint64_t v13 = *(void *)(a1 + 32);
    __int128 v14 = *(void **)(v13 + 32);
    *(void *)(v13 + 32) = 0LL;
  }

  else
  {
    uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 168LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000670F8;
    block[3] = &unk_100111A58;
    id v16 = v5;
    id v8 = *(id *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 32);
    id v17 = v8;
    uint64_t v18 = v9;
    uint64_t v19 = *(void *)(a1 + 48);
    dispatch_async(v7, block);
  }
}

void sub_1000670F8(id *a1)
{
  v34 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  int v38 = a1;
  id obj = a1[4];
  id v41 = [obj countByEnumeratingWithState:&v58 objects:v63 count:16];
  if (v41)
  {
    uint64_t v40 = *(void *)v59;
    uint64_t v35 = kSecAttrViewHintHome;
    do
    {
      for (i = 0LL; i != v41; i = (char *)i + 1)
      {
        if (*(void *)v59 != v40) {
          objc_enumerationMutation(obj);
        }
        id v3 = *(void **)(*((void *)&v58 + 1) + 8LL * (void)i);
        uint64_t v4 = off_1001321D0[0]();
        id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
        id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v5]);

        if ([v6 intValue] == 6)
        {
          uint64_t v7 = off_1001321D8[0]();
          id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v8]);

          if (v9)
          {
            if (dword_100132130 <= 30
              && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
            {
              LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _loadSharedTVUserDeviceIdentities]_block_invoke_2",  30LL,  "Received persona UUID: %@ dictionary: %@\n",  v9,  v3);
            }

            uint64_t v52 = 0LL;
            v53 = &v52;
            uint64_t v54 = 0x3032000000LL;
            v55 = sub_10006084C;
            v56 = sub_10006085C;
            id v57 = 0LL;
            id v10 = [(Class)off_1001321E0[0]() fetchProfilesRequestForPersonaUniqueIdentifier:v9];
            __int16 v39 = (void *)objc_claimAutoreleasedReturnValue(v10);
            id v11 = objc_alloc_init(off_1001321E8());
            v49[0] = _NSConcreteStackBlock;
            v49[1] = 3221225472LL;
            v49[2] = sub_100067968;
            v49[3] = &unk_1001131E8;
            id v12 = v9;
            id v50 = v12;
            v51 = &v52;
            [v11 fetchProfileForRequest:v39 completion:v49];
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v38[5] generateAndRestorePersonaContextWithPersonaUniqueString:v12]);
            if (v13)
            {
              if (dword_100132130 <= 90
                && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 90LL)))
              {
                LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _loadSharedTVUserDeviceIdentities]_block_invoke_2",  90LL,  "### Failed to change persona context to new persona with ID=%{public}@, error: %@",  v12,  v13);
              }
            }

            else
            {
              id v14 = v38[6];
              id v48 = 0LL;
              uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 _identitiesOfType:2 error:&v48]);
              id v16 = v48;
              id v17 = v16;
              if (!v15 || v16)
              {
                if (dword_100132130 <= 30
                  && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
                {
                  LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _loadSharedTVUserDeviceIdentities]_block_invoke_2",  30LL,  "Failed to fetch same device identities for persona %@ error %@\n",  v12,  v17);
                }
              }

              else
              {
                if (dword_100132130 <= 30
                  && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
                {
                  LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _loadSharedTVUserDeviceIdentities]_block_invoke_2",  30,  "Fetched %d identities for persona %@\n",  [v15 count],  v12);
                }

                __int128 v46 = 0u;
                __int128 v47 = 0u;
                __int128 v44 = 0u;
                __int128 v45 = 0u;
                id v18 = v15;
                id v19 = [v18 countByEnumeratingWithState:&v44 objects:v62 count:16];
                if (v19)
                {
                  uint64_t v20 = *(void *)v45;
                  do
                  {
                    for (j = 0LL; j != v19; j = (char *)j + 1)
                    {
                      if (*(void *)v45 != v20) {
                        objc_enumerationMutation(v18);
                      }
                      [*(id *)(*((void *)&v44 + 1) + 8 * (void)j) setType:12];
                    }

                    id v19 = [v18 countByEnumeratingWithState:&v44 objects:v62 count:16];
                  }

                  while (v19);
                }

                id v17 = 0LL;
                -[NSMutableArray addObjectsFromArray:](v34, "addObjectsFromArray:", v18);
              }

              id v36 = v15;
              __int128 v22 = objc_alloc_init(&OBJC_CLASS___RPIdentity);
              __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v38[7] idsDeviceID]);
              -[RPIdentity setIdentifier:](v22, "setIdentifier:", v23);

              -[RPIdentity setType:](v22, "setType:", 12LL);
              int v24 = (void *)objc_claimAutoreleasedReturnValue([v38[7] idsDeviceID]);
              -[RPIdentity setIdsDeviceID:](v22, "setIdsDeviceID:", v24);

              [v38[6] _updateSelfIdentityPublic:v22 privateIdentity:v38[7]];
              if (v53[5]) {
                -[RPIdentity setAccountAltDSID:](v22, "setAccountAltDSID:");
              }
              id v25 = objc_alloc_init(&OBJC_CLASS___CUKeychainItem);
              [v25 setAccessGroup:@"com.apple.rapport"];
              [v25 setAccessibleType:2];
              [v25 setInvisible:1];
              [v25 setSyncType:2];
              [v25 setViewHint:v35];
              id v43 = v17;
              id v26 = [v25 updateWithRPIdentity:v22 revisionUpdate:1 error:&v43];
              id v27 = v43;

              if ((v26 & 1) != 0)
              {
                if (dword_100132130 <= 90
                  && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 90LL)))
                {
                  LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _loadSharedTVUserDeviceIdentities]_block_invoke_2",  90LL,  "### SharedTVUserDevice public convert to keychain failed: %@, %{error}\n",  v22,  v27);
                }
              }

              else
              {
                id v28 = objc_alloc_init(&OBJC_CLASS___CUKeychainManager);

                id v42 = 0LL;
                [v28 addOrUpdateOrReAddItem:v25 logCategory:&dword_100132130 logLabel:@"SharedTVUserDeviceIdentity public" error:&v42];
                id v27 = v42;
                if (v27)
                {
                  if (dword_100132130 <= 90
                    && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 90LL)))
                  {
                    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _loadSharedTVUserDeviceIdentities]_block_invoke_2",  90LL,  "### SharedTVUserDeviceIdentity public save failed: %@, %{error}\n",  v25,  v27);
                  }
                }

                else if (dword_100132130 <= 30 {
                       && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL)))
                }
                {
                  LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _loadSharedTVUserDeviceIdentities]_block_invoke_2",  30LL,  "SharedTVUserDeviceIdentity public saved: %#{flags} (%@)\n",  v26,  &unk_10010A4CF,  v25);
                }
              }
            }

            _Block_object_dispose(&v52, 8);
          }
        }
      }

      id v41 = [obj countByEnumeratingWithState:&v58 objects:v63 count:16];
    }

    while (v41);
  }

  id v29 = [(Class)off_1001321C0[0]() currentPersona];
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
  id v31 = [v30 restorePersonaWithSavedPersonaContext:*((void *)v38[6] + 4)];

  uint64_t v32 = (void *)*((void *)v38[6] + 4);
  *((void *)v38[6] + 4) = 0LL;

  objc_storeStrong((id *)v38[6] + 14, v34);
  if (dword_100132130 <= 30 && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 30LL))) {
    LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _loadSharedTVUserDeviceIdentities]_block_invoke_2",  30,  "Shared TV user identities updated: %d peer(s)\n",  [*((id *)v38[6] + 14) count]);
  }
  id v33 = (void *)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
  [v33 postDaemonInfoChanges:4096];

  [v38[6] _postIdentitiesChangedNotification];
}

void sub_100067920( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

void sub_100067968(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (!v9 || v5)
  {
    if (dword_100132130 <= 90
      && (dword_100132130 != -1 || _LogCategory_Initialize(&dword_100132130, 90LL)))
    {
      LogPrintF( &dword_100132130,  "-[RPIdentityDaemon _loadSharedTVUserDeviceIdentities]_block_invoke_3",  90LL,  "### Failed to fetch user profile (%@) for persona %@ with error %@\n",  v9,  *(void *)(a1 + 32),  v5);
    }
  }

  else
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v9 iCloudAltDSID]);
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
}

id sub_100067AE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 112);
  *(void *)(v2 + 112) = 0LL;

  return [*(id *)(a1 + 32) _loadSharedTVUserDeviceIdentities];
}

LABEL_80:
  }
}

Class sub_100068224()
{
  if (qword_100133440 != -1) {
    dispatch_once(&qword_100133440, &stru_100113230);
  }
  Class result = objc_getClass("CBPeripheralManager");
  qword_100133438 = (uint64_t)result;
  off_1001321A0[0] = (uint64_t (*)())sub_100068280;
  return result;
}

id sub_100068280()
{
  return (id)qword_100133438;
}

void sub_10006828C(id a1)
{
  qword_100133448 = (uint64_t)dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
}

id sub_1000682B4()
{
  if (qword_100133440 != -1) {
    dispatch_once(&qword_100133440, &stru_100113230);
  }
  int v0 = (id *)dlsym((void *)qword_100133448, "CBManagerNeedsRestrictedStateOperation");
  if (v0) {
    objc_storeStrong((id *)&qword_100133430, *v0);
  }
  off_1001321A8[0] = (uint64_t (*)())sub_10006832C;
  return (id)qword_100133430;
}

id sub_10006832C()
{
  return (id)qword_100133430;
}

Class sub_100068338()
{
  if (qword_100133458 != -1) {
    dispatch_once(&qword_100133458, &stru_100113250);
  }
  Class result = objc_getClass("SFContactInfo");
  qword_100133450 = (uint64_t)result;
  off_1001321B0[0] = (uint64_t (*)())sub_100068394;
  return result;
}

id sub_100068394()
{
  return (id)qword_100133450;
}

void sub_1000683A0(id a1)
{
  qword_100133460 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
}

Class sub_1000683C8()
{
  if (qword_100133458 != -1) {
    dispatch_once(&qword_100133458, &stru_100113250);
  }
  Class result = objc_getClass("SFClient");
  qword_100133468 = (uint64_t)result;
  off_1001321B8[0] = (uint64_t (*)())sub_100068424;
  return result;
}

id sub_100068424()
{
  return (id)qword_100133468;
}

Class sub_100068430()
{
  if (qword_100133478 != -1) {
    dispatch_once(&qword_100133478, &stru_100113270);
  }
  Class result = objc_getClass("UMUserPersona");
  qword_100133470 = (uint64_t)result;
  off_1001321C0[0] = (uint64_t (*)())sub_10006848C;
  return result;
}

id sub_10006848C()
{
  return (id)qword_100133470;
}

void sub_100068498(id a1)
{
  qword_100133480 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
}

Class sub_1000684C0()
{
  if (qword_100133478 != -1) {
    dispatch_once(&qword_100133478, &stru_100113270);
  }
  Class result = objc_getClass("UMUserManager");
  qword_100133488 = (uint64_t)result;
  off_1001321C8[0] = (uint64_t (*)())sub_10006851C;
  return result;
}

id sub_10006851C()
{
  return (id)qword_100133488;
}

id sub_100068528()
{
  if (qword_100133478 != -1) {
    dispatch_once(&qword_100133478, &stru_100113270);
  }
  int v0 = (id *)dlsym((void *)qword_100133480, "kUMUserPersonaTypeKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100133420, *v0);
  }
  off_1001321D0[0] = (uint64_t (*)())sub_1000685A0;
  return (id)qword_100133420;
}

id sub_1000685A0()
{
  return (id)qword_100133420;
}

id sub_1000685AC()
{
  if (qword_100133478 != -1) {
    dispatch_once(&qword_100133478, &stru_100113270);
  }
  int v0 = (id *)dlsym((void *)qword_100133480, "kUMUserPersonaUniqueStringKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100133428, *v0);
  }
  off_1001321D8[0] = (uint64_t (*)())sub_100068624;
  return (id)qword_100133428;
}

id sub_100068624()
{
  return (id)qword_100133428;
}

Class sub_100068630()
{
  if (qword_100133498 != -1) {
    dispatch_once(&qword_100133498, &stru_100113290);
  }
  Class result = objc_getClass("UPFetchProfilesRequest");
  qword_100133490 = (uint64_t)result;
  off_1001321E0[0] = (uint64_t (*)())sub_10006868C;
  return result;
}

id sub_10006868C()
{
  return (id)qword_100133490;
}

void sub_100068698(id a1)
{
  qword_1001334A0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserProfiles.framework/UserProfiles", 2);
}

Class sub_1000686C0()
{
  if (qword_100133498 != -1) {
    dispatch_once(&qword_100133498, &stru_100113290);
  }
  Class result = objc_getClass("UPProfileStore");
  qword_1001334A8 = (uint64_t)result;
  off_1001321E8 = (uint64_t (*)())sub_10006871C;
  return result;
}

id sub_10006871C()
{
  return (id)qword_1001334A8;
}

BOOL sub_100068728(uint64_t a1)
{
  return a1 == 1;
}

void sub_100069408(os_unfair_lock_s *a1, void *a2)
{
  if (a1)
  {
    uint64_t v2 = a1 + 2;
    id v3 = a2;
    os_unfair_lock_lock(v2);
    v3[2](v3);

    os_unfair_lock_unlock(v2);
  }

void sub_1000694DC(uint64_t a1)
{
}

void sub_10006959C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000695B4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000695C4(uint64_t a1)
{
}

void sub_1000695CC(uint64_t a1)
{
}

uint64_t sub_100069638(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 32LL) = *(void *)(result + 40);
  return result;
}

void sub_1000696D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000696E8(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 32LL);
  return result;
}

void sub_100069830(uint64_t a1)
{
}

void sub_1000698F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100069908(uint64_t a1)
{
}

uint64_t sub_100069974(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 32LL) = *(void *)(result + 40);
  return result;
}

void sub_100069A0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100069A24(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 32LL);
  return result;
}

uint64_t sub_100069A90(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 40LL) = *(void *)(result + 40);
  return result;
}

void sub_100069B28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100069B40(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 40LL);
  return result;
}

uint64_t sub_100069BAC(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 48LL) = *(void *)(result + 40);
  return result;
}

void sub_100069C44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100069C5C(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 48LL);
  return result;
}

uint64_t sub_100069E98(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 24LL) = *(_DWORD *)(result + 40);
  return result;
}

void sub_100069F34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100069F4C(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 24LL);
  return result;
}

uint64_t sub_100069FB8(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 32LL) = *(void *)(result + 40);
  return result;
}

void sub_10006A050( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10006A068(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 32LL);
  return result;
}

uint64_t sub_10006A0D8(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 28LL) = *(_DWORD *)(result + 40);
  return result;
}

void sub_10006A174( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10006A18C(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 28LL);
  return result;
}

void sub_10006A220(uint64_t a1)
{
}

void sub_10006A2E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10006A2F8(uint64_t a1)
{
}

void sub_10006A374(uint64_t a1)
{
  __int128 v6 = *(_OWORD *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 56);
  id v2 = sub_10000A85C((uint64_t *)&v6);
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 48);
  *(void *)(v4 + 4_Block_object_dispose(va, 8) = v3;
}

void sub_10006A478( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10006A490(uint64_t a1)
{
}

id sub_10006AAD4(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleCommand:responseHandler:", a2);
}

void *sub_10006B060(void *result, int a2)
{
  if (*(_BYTE *)(result[4] + 48LL))
  {
    uint64_t v3 = result;
    if (dword_100132260 <= 30
      && (dword_100132260 != -1 || _LogCategory_Initialize(&dword_100132260, 30LL)))
    {
      uint64_t v4 = "yes";
      if (!a2) {
        uint64_t v4 = "no";
      }
      LogPrintF( &dword_100132260,  "-[RPMediaControlDaemon _mediaControlEnsureStarted]_block_invoke",  30LL,  "Volume control available initial: MR %s\n",  v4);
    }

    *(_DWORD *)(v3[4] + 44LL) = a2;
    return [(id)v3[4] _mediaRemoteVolumeControlUpdate];
  }

  return result;
}

id sub_10006B11C(uint64_t a1)
{
  id result = (id)*(unsigned int *)(*(void *)(a1 + 32) + 52LL);
  if ((_DWORD)result != -1)
  {
    uint64_t state64 = 0LL;
    id result = (id)notify_get_state((int)result, &state64);
    uint64_t v3 = state64;
    int v4 = state64 != 0;
    if (*(unsigned __int8 *)(*(void *)(a1 + 32) + 49LL) != v4)
    {
      if (dword_100132260 <= 30
        && (dword_100132260 != -1 || _LogCategory_Initialize(&dword_100132260, 30LL)))
      {
        id v5 = "no";
        if (v3) {
          id v5 = "yes";
        }
        LogPrintF( &dword_100132260,  "-[RPMediaControlDaemon _mediaControlEnsureStarted]_block_invoke_2",  30LL,  "Volume control available changed PB: %s\n",  v5);
      }

      *(_BYTE *)(*(void *)(a1 + 32) + 49LL) = v4;
      return [*(id *)(a1 + 32) _mediaRemoteVolumeControlUpdate];
    }
  }

  return result;
}

void *sub_10006B4AC(void *result)
{
  if (*(_BYTE *)(result[4] + 42LL))
  {
    uint64_t v1 = result;
    if (dword_100132260 <= 30
      && (dword_100132260 != -1 || _LogCategory_Initialize(&dword_100132260, 30LL)))
    {
      LogPrintF( &dword_100132260,  "-[RPMediaControlDaemon _mediaRemoteSupportedCommandsChanged]_block_invoke",  30LL,  "MediaRemote supported commands changed\n");
    }

    return [(id)v1[4] _mediaRemoteSupportedCommandsGet];
  }

  return result;
}

void sub_10006B5F4(uint64_t a1, const __CFArray *a2)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 41LL) = 0;
  if (!*(_BYTE *)(*(void *)(a1 + 32) + 42LL)) {
    return;
  }
  if (a2) {
    CFIndex Count = CFArrayGetCount(a2);
  }
  else {
    CFIndex Count = 0LL;
  }
  int v5 = dword_100132260;
  if (dword_100132260 > 9) {
    goto LABEL_42;
  }
  if (dword_100132260 != -1)
  {
LABEL_8:
    if (v5 != -1 || _LogCategory_Initialize(&dword_100132260, 9LL)) {
      LogPrintF( &dword_100132260,  "-[RPMediaControlDaemon _mediaRemoteSupportedCommandsGet]_block_invoke",  9LL,  "MediaRemote supported commands got: %@\n",  a2);
    }
    goto LABEL_19;
  }

  int v6 = _LogCategory_Initialize(&dword_100132260, 9LL);
  int v5 = dword_100132260;
  if (!v6)
  {
LABEL_42:
    if (v5 <= 30 && (v5 != -1 || _LogCategory_Initialize(&dword_100132260, 30LL))) {
      LogPrintF( &dword_100132260,  "-[RPMediaControlDaemon _mediaRemoteSupportedCommandsGet]_block_invoke",  30LL,  "MediaRemote supported commands got: %d items\n");
    }
    goto LABEL_19;
  }

  if (dword_100132260 <= 9) {
    goto LABEL_8;
  }
LABEL_19:
  if (Count < 1)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 0LL;
    for (CFIndex i = 0LL; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      if (MRMediaRemoteCommandInfoGetEnabled())
      {
        int Command = MRMediaRemoteCommandInfoGetCommand(ValueAtIndex);
        switch(Command)
        {
          case 0:
            v7 |= 1uLL;
            break;
          case 1:
            v7 |= 2uLL;
            break;
          case 2:
          case 3:
          case 6:
          case 7:
          case 9:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
            continue;
          case 4:
            v7 |= 4uLL;
            break;
          case 5:
            v7 |= 8uLL;
            break;
          case 8:
            v7 |= 0x10uLL;
            break;
          case 10:
            v7 |= 0x20uLL;
            break;
          case 17:
            v7 |= 0x200uLL;
            break;
          case 18:
            v7 |= 0x400uLL;
            break;
          default:
            uint64_t v11 = v7 | 0x80;
            if (Command != 26) {
              uint64_t v11 = v7;
            }
            if (Command == 25) {
              v7 |= 0x40uLL;
            }
            else {
              uint64_t v7 = v11;
            }
            break;
        }
      }
    }
  }

  _[*(id *)(a1 + 32) _mediaControlFlagsUpdate:v7 mask:1791];
}

void sub_10006B8A0(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(a1 + 32) + 48LL))
  {
    uint64_t v2 = kMRAVEndpointVolumeControlCapabilitiesUserInfoKey;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) userInfo]);
    int Int64Ranged = CFDictionaryGetInt64Ranged(v3, v2, 0LL, 0xFFFFFFFFLL, 0LL);

    if (*(_DWORD *)(*(void *)(a1 + 32) + 44LL) != Int64Ranged)
    {
      if (dword_100132260 <= 30
        && (dword_100132260 != -1 || _LogCategory_Initialize(&dword_100132260, 30LL)))
      {
        int v5 = "yes";
        if (!Int64Ranged) {
          int v5 = "no";
        }
        LogPrintF( &dword_100132260,  "-[RPMediaControlDaemon _mediaRemoteVolumeControlChanged:]_block_invoke",  30LL,  "Volume control available changed MR: %s\n",  v5);
      }

      *(_DWORD *)(*(void *)(a1 + 32) + 44LL) = Int64Ranged;
      [*(id *)(a1 + 32) _mediaRemoteVolumeControlUpdate];
    }
  }

uint64_t sub_10006C080(uint64_t a1)
{
  if (dword_100132260 <= 30 && (dword_100132260 != -1 || _LogCategory_Initialize(&dword_100132260, 30LL))) {
    LogPrintF( &dword_100132260,  "-[RPMediaControlDaemon _handleMovementCommand:endCommand:]_block_invoke",  30LL,  "Auto-ending movement on timeout\n");
  }
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  if (v2)
  {
    uint64_t v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = 0LL;
  }

  uint64_t result = MRMediaRemoteSendCommand(*(unsigned int *)(*(void *)(a1 + 32) + 20LL), 0LL);
  *(_DWORD *)(*(void *)(a1 + 32) + 16LL) = 3;
  return result;
}

Class sub_10006C74C()
{
  if (qword_1001334B8 != -1) {
    dispatch_once(&qword_1001334B8, &stru_100113500);
  }
  Class result = objc_getClass("PBSSystemServiceConnection");
  qword_1001334B0 = (uint64_t)result;
  off_1001322D0[0] = (uint64_t (*)())sub_10006C7A8;
  return result;
}

id sub_10006C7A8()
{
  return (id)qword_1001334B0;
}

void sub_10006C7B4(id a1)
{
  qword_1001334C0 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/PineBoardServices.framework/PineBoardServices",  2);
}

uint64_t sub_10006C7DC(uint64_t a1)
{
  if (qword_1001334C8 != -1) {
    dispatch_once(&qword_1001334C8, &stru_100113520);
  }
  off_1001322E0[0] = (uint64_t (*)())dlsym((void *)qword_1001334D0, "MACaptionAppearanceGetDisplayType");
  return ((uint64_t (*)(uint64_t))off_1001322E0[0])(a1);
}

void sub_10006C844(id a1)
{
  qword_1001334D0 = (uint64_t)dlopen("/System/Library/Frameworks/MediaAccessibility.framework/MediaAccessibility", 2);
}

uint64_t sub_10006C86C(uint64_t a1, uint64_t a2)
{
  if (qword_1001334C8 != -1) {
    dispatch_once(&qword_1001334C8, &stru_100113520);
  }
  off_1001322E8 = (uint64_t (*)())dlsym((void *)qword_1001334D0, "MACaptionAppearanceSetDisplayType");
  return ((uint64_t (*)(uint64_t, uint64_t))off_1001322E8)(a1, a2);
}

Class sub_10006C8DC()
{
  if (qword_1001334E0 != -1) {
    dispatch_once(&qword_1001334E0, &stru_100113540);
  }
  Class result = objc_getClass("AVSystemController");
  qword_1001334D8 = (uint64_t)result;
  off_1001322D8[0] = (uint64_t (*)())sub_10006C938;
  return result;
}

id sub_10006C938()
{
  return (id)qword_1001334D8;
}

void sub_10006C944(id a1)
{
  qword_1001334E8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MediaExperience.framework/MediaExperience", 2);
}

uint64_t sub_10006CCD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10006CCDC(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 2) != 0) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16LL))();
  }
  return result;
}

uint64_t sub_10006CCF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10006CCFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10006CD08(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v6 = v3;
    if (dword_1001322F0 <= 90
      && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 90LL)))
    {
      LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer startDiscovery:foundHandler:updateHandler:lostHandler:invalidationHandler:]_block_invoke_5",  90LL,  "Error activating RPNearbyInvitationDiscovery: %@",  v6);
    }

    [*(id *)(*(void *)(a1 + 32) + 16) invalidate];
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = 0LL;

    id v3 = v6;
  }
}

void sub_10006D08C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (dword_1001322F0 <= 30 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL)))
  {
    id v8 = objc_retainBlock(v7);
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer startServer:withCompletion:disconnectHandler:]_block_invoke",  30LL,  "Server: Session start: %@, completion: %@\n",  v6,  v8);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(v9 + 32);
  id v10 = (id *)(v9 + 32);
  if (v11)
  {
    if (dword_1001322F0 <= 90
      && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 90LL)))
    {
      LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer startServer:withCompletion:disconnectHandler:]_block_invoke",  90LL,  "Server: Received session start callback while session already active.\n");
    }
  }

  else
  {
    objc_storeStrong(v10, a2);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[RPNWNetworkAgent sharedNetworkAgent](&OBJC_CLASS___RPNWNetworkAgent, "sharedNetworkAgent"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 dispatchQueue]);
    [*(id *)(*(void *)(a1 + 32) + 32) setDispatchQueue:v13];

    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10006D2B8;
    v18[3] = &unk_100113690;
    id v19 = v6;
    id v14 = *(id *)(a1 + 48);
    uint64_t v20 = *(void *)(a1 + 32);
    id v21 = v14;
    [*(id *)(v20 + 32) setInvalidationHandler:v18];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) invalidationHandler]);
    [*(id *)(*(void *)(a1 + 32) + 32) setInterruptionHandler:v15];

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_10006D35C;
    void v16[3] = &unk_1001118A0;
    uint64_t v17 = *(void *)(a1 + 32);
    [*(id *)(v17 + 32) setErrorHandler:v16];
    [*(id *)(a1 + 32) handleConnectionRequest:*(void *)(*(void *)(a1 + 32) + 32) agentClient:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) handleConnectionData:1];
  }
}

void sub_10006D2B8(uint64_t a1)
{
  if (dword_1001322F0 <= 30 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL)))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destinationDevice]);
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer startServer:withCompletion:disconnectHandler:]_block_invoke_2",  30LL,  "Server: Lost connectivity to '%@'",  v2);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = 0LL;
}

void sub_10006D35C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (dword_1001322F0 <= 90 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 90LL))) {
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer startServer:withCompletion:disconnectHandler:]_block_invoke_3",  90LL,  "Server: Received error on NearbyInvitation session: '%@'. Invalidating session.",  v3);
  }
  [*(id *)(*(void *)(a1 + 32) + 32) invalidate];
}

void sub_10006D3F0(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (dword_1001322F0 <= 30 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL))) {
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer startServer:withCompletion:disconnectHandler:]_block_invoke_4",  30LL,  "Server: Session end: %@, error: %@\n",  v9,  v5);
  }
  id v6 = *(void **)(*(void *)(a1 + 32) + 32LL);
  if (v6)
  {
    [v6 invalidate];
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = *(void **)(v7 + 32);
    *(void *)(v7 + 32) = 0LL;
  }
}

void sub_10006D4A8(id a1)
{
  if (dword_1001322F0 <= 30 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL))) {
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer startServer:withCompletion:disconnectHandler:]_block_invoke_5",  30LL,  "Server invalidated.\n");
  }
}

void sub_10006D508(uint64_t a1)
{
  if (dword_1001322F0 <= 30 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL)))
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) serviceType]);
  }

void sub_10006D5A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = v3;
  if (v3)
  {
    if (dword_1001322F0 <= 90
      && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 90LL)))
    {
      LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer startServer:withCompletion:disconnectHandler:]_block_invoke_7",  90LL,  "Server activation failed with error: %@\n",  v9);
    }

    [*(id *)(*(void *)(a1 + 32) + 24) invalidate];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = 0LL;

    id v3 = v9;
  }

  if (dword_1001322F0 <= 30)
  {
    if (dword_1001322F0 != -1 || (v7 = _LogCategory_Initialize(&dword_1001322F0, 30LL), id v3 = v9, v7))
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) serviceType]);

      id v3 = v9;
    }
  }

  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v9);
    id v3 = v9;
  }
}

void sub_10006D974(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (dword_1001322F0 <= 90
      && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 90LL)))
    {
      LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer connectToPeer:inboundConnection:applicationService:listenerID:connectionID:connectHan dler:disconnectHandler:]_block_invoke",  90LL,  "Client: Failed to connect to device '%@'. Error - %@",  *(void *)(a1 + 32),  v3);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10006DB64;
    v15[3] = &unk_100113690;
    id v16 = *(id *)(a1 + 32);
    id v4 = *(id *)(a1 + 80);
    uint64_t v17 = *(void *)(a1 + 40);
    id v18 = v4;
    [*(id *)(v17 + 32) setInvalidationHandler:v15];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) invalidationHandler]);
    [*(id *)(*(void *)(a1 + 40) + 32) setInterruptionHandler:v5];

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_10006DBF8;
    void v13[3] = &unk_1001118A0;
    uint64_t v14 = *(void *)(a1 + 40);
    [*(id *)(v14 + 32) setErrorHandler:v13];
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10006DC8C;
    v10[3] = &unk_100113750;
    id v9 = *(void **)(a1 + 40);
    id v11 = *(id *)(a1 + 32);
    id v12 = *(id *)(a1 + 72);
    [v9 sendWithRequestID:@"com.apple.oneapi.nearbyinvitation.connection" data:0 status:0 applicationService:v6 listenerID:v7 connectionID:v8 responseHandler:v10];
  }
}

void sub_10006DB64(void *a1)
{
  if (dword_1001322F0 <= 30 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL))) {
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer connectToPeer:inboundConnection:applicationService:listenerID:connectionID:connectHandl er:disconnectHandler:]_block_invoke_2",  30LL,  "Client: Lost connectivity to '%@'",  a1[4]);
  }
  (*(void (**)(void))(a1[6] + 16LL))();
  uint64_t v2 = a1[5];
  id v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0LL;
}

void sub_10006DBF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (dword_1001322F0 <= 90 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 90LL))) {
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer connectToPeer:inboundConnection:applicationService:listenerID:connectionID:connectHandl er:disconnectHandler:]_block_invoke_3",  90LL,  "Client: Received error on NearbyInvitation session: '%@'. Invalidating session.",  v3);
  }
  [*(id *)(*(void *)(a1 + 32) + 32) invalidate];
}

void sub_10006DC8C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  if (dword_1001322F0 <= 30 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL))) {
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer connectToPeer:inboundConnection:applicationService:listenerID:connectionID:connectHandl er:disconnectHandler:]_block_invoke_4",  30LL,  "Client: Got connection request response %s from device='%@'",  +[RPNWPeer responseCodeToString:](&OBJC_CLASS___RPNWPeer, "responseCodeToString:", a2),  *(void *)(a1 + 32));
  }
  if ((_DWORD)a2 == 2)
  {
    if (dword_1001322F0 <= 30
      && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL)))
    {
      LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer connectToPeer:inboundConnection:applicationService:listenerID:connectionID:connectHan dler:disconnectHandler:]_block_invoke_4",  30LL,  "Client: NearbyInvitation connected to device '%@'",  *(void *)(a1 + 32));
    }

    id v5 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v5();
}

BOOL sub_10006DF5C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (dword_1001322F0 <= 30 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL)))
  {
    if (*(_BYTE *)(a1 + 32)) {
      uint64_t v13 = "SERVER";
    }
    else {
      uint64_t v13 = "CLIENT";
    }
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer handleConnectionData:]_block_invoke",  30LL,  "RPNW-DATA %s Received data from peer",  v13);
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v11 nearbyInvitationConnection]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 framer]);

  if (v15)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v11 nearbyInvitationConnection]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 framer]);
  }

  else
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "listen_framer"));
  }

  BOOL v18 = +[RPNWFramer writeDataOnFramer:data:](&OBJC_CLASS___RPNWFramer, "writeDataOnFramer:data:", v17, v9);

  return v18;
}

void sub_10006E0B4(id a1, RPNWAgentClient *a2, NSUUID *a3, int a4)
{
  uint64_t v4 = *(void *)&a4;
  uint64_t v14 = a2;
  id v6 = a3;
  if (dword_1001322F0 <= 30 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL))) {
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer handleConnectionData:]_block_invoke_2",  30LL,  "Received connection status %s for connection %@ with AgentClient %@",  +[RPNWNearbyInvitationPeer statusCodeToString:](&OBJC_CLASS___RPNWNearbyInvitationPeer, "statusCodeToString:", v4),  v6,  v14);
  }
  uint64_t v7 = objc_claimAutoreleasedReturnValue(-[RPNWAgentClient nearbyInvitationConnection](v14, "nearbyInvitationConnection"));
  if (v7
    && (uint64_t v8 = (void *)v7,
        id v9 = (void *)objc_claimAutoreleasedReturnValue(-[RPNWAgentClient nearbyInvitationConnection](v14, "nearbyInvitationConnection")),
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 framer]),
        v10,
        v9,
        v8,
        v10))
  {
    if ((_DWORD)v4 == 1)
    {
      uint64_t v11 = 53LL;
      goto LABEL_14;
    }

    if ((_DWORD)v4 == 4)
    {
      uint64_t v11 = 57LL;
LABEL_14:
      id v12 = (void *)objc_claimAutoreleasedReturnValue(-[RPNWAgentClient nearbyInvitationConnection](v14, "nearbyInvitationConnection"));
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 framer]);
      +[RPNWFramer writeErrorOnFramer:error:](&OBJC_CLASS___RPNWFramer, "writeErrorOnFramer:error:", v13, v11);
    }
  }

  else if (dword_1001322F0 <= 90 {
         && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 90LL)))
  }
  {
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer handleConnectionData:]_block_invoke_2",  90LL,  "Agent client has no nearbyInvitationConnection framer");
  }
}

uint64_t sub_10006E304(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10 = a2;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = v13;
  if (v11 && v12 && v13)
  {
    if ([*(id *)(a1 + 32) findNearbyInvitationListenerAndCreateConnection:*(void *)(a1 + 40) applicationService:v11 listenerID:v12 connectionID:v13 agentClient:*(void *)(a1 + 48)]) {
      uint64_t v15 = 2LL;
    }
    else {
      uint64_t v15 = 0LL;
    }
  }

  else
  {
    if (dword_1001322F0 <= 90
      && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 90LL)))
    {
      LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer handleConnectionRequest:agentClient:]_block_invoke",  90LL,  "Not a valid CONNECT request\n");
    }

    uint64_t v15 = 0LL;
  }

  return v15;
}

void sub_10006E834(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"request"]);
  if (dword_1001322F0 <= 30 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL)))
  {
    id v34 = [v10 length];
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer receiveWithRequestID:receiveHandler:]_block_invoke",  30LL,  "RX DATA (%d bytes) from peer, requestID=%@\n");
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"status"]);
  id v12 = v11;
  if (v11) {
    [v11 intValue];
  }
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"applicationService"]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"senderID"]);
  if (v20)
  {
    id v36 = v9;
    id v37 = v8;
    int v38 = v10;
    uint64_t v21 = objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"senderIDS"]);
    if (dword_1001322F0 <= 30
      && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL)))
    {
      LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer receiveWithRequestID:receiveHandler:]_block_invoke",  30LL,  "appSvc=%@, SenderID=%@, SenderIDS='%@'\n",  v13,  v20,  v21);
    }

    uint64_t v35 = (void *)v21;
    __int128 v22 = objc_alloc(&OBJC_CLASS___NSUUID);
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"connectionID"]);
    int v24 = -[NSUUID initWithUUIDString:](v22, "initWithUUIDString:", v23);

    id v25 = objc_alloc(&OBJC_CLASS___NSUUID);
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"listenerID"]);
    id v27 = -[NSUUID initWithUUIDString:](v25, "initWithUUIDString:", v26);

    uint64_t v28 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v29 = 0LL;
    uint64_t v30 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v28));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v30, "setObject:forKeyedSubscript:", v31, @"response");
    if (v29)
    {
      if (dword_1001322F0 <= 30
        && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL)))
      {
        LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer receiveWithRequestID:receiveHandler:]_block_invoke",  30LL,  "Receive handler response code=%@, listenerID=%@\n",  v31,  v29);
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:](v30, "setObject:forKeyedSubscript:", v29, @"listenerID");
      id v8 = v37;
    }

    else
    {
      id v8 = v37;
      if (dword_1001322F0 <= 30
        && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL)))
      {
        LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer receiveWithRequestID:receiveHandler:]_block_invoke",  30LL,  "Receive handler response code=%@\n",  v31);
      }
    }

    (*((void (**)(id, NSMutableDictionary *, void, void))v36 + 2))(v36, v30, 0LL, 0LL);

    id v9 = v36;
    id v10 = v38;
  }

  else
  {
    if (dword_1001322F0 <= 90
      && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 90LL)))
    {
      LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer receiveWithRequestID:receiveHandler:]_block_invoke",  90LL,  "No sender ID, discarding\n");
    }

    id v32 = RPErrorF(4294960591LL, (uint64_t)"Missing sender ID", v14, v15, v16, v17, v18, v19, (uint64_t)v34);
    id v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    (*((void (**)(id, void, void, void *))v9 + 2))(v9, 0LL, 0LL, v33);
  }
}

void sub_10006F07C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v16 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destinationDevice]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 name]);
LABEL_5:

LABEL_14:
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    goto LABEL_17;
  }

  if (!v16)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destinationDevice]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 name]);
    goto LABEL_5;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"response"]);
  id v12 = [v11 intValue];

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"listenerID"]);
  if (dword_1001322F0 <= 30 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL)))
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destinationDevice]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 name]);
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer sendWithRequestID:data:status:applicationService:listenerID:connectionID:responseHandle r:]_block_invoke",  30LL,  "RX RESP from '%@': requestID=%@ appSvc=%@ response=%s bytes listener=%@ error=%@\n",  v15,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  +[RPNWNearbyInvitationPeer responseCodeToString:]( &OBJC_CLASS___RPNWNearbyInvitationPeer,  "responseCodeToString:",  v12),  v13,  0LL);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();

LABEL_17:
}

uint64_t sub_10006F390(uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  uint64_t v15 = v14;
  if (v12 && v14)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[RPNWAgentClient findAgentClientFromConnectionID:]( &OBJC_CLASS___RPNWAgentClient,  "findAgentClientFromConnectionID:",  v14));
    if (v16)
    {
      if (v11)
      {
        else {
          uint64_t v17 = 0LL;
        }
        goto LABEL_24;
      }

      if (a3)
      {
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        uint64_t v17 = 2LL;
LABEL_24:

        goto LABEL_25;
      }

      if (dword_1001322F0 <= 90
        && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 90LL)))
      {
        LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer receiveDataForConnection:statusHandler:]_block_invoke",  90LL,  "Not a valid data request, returning\n");
      }
    }

    else if (dword_1001322F0 <= 90 {
           && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 90LL)))
    }
    {
      LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer receiveDataForConnection:statusHandler:]_block_invoke",  90LL,  "Failed to find agent client for connection\n");
    }

    uint64_t v17 = 0LL;
    goto LABEL_24;
  }

  if (dword_1001322F0 <= 90 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 90LL))) {
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer receiveDataForConnection:statusHandler:]_block_invoke",  90LL,  "Not a valid data request, returning\n");
  }
  uint64_t v17 = 0LL;
LABEL_25:

  return v17;
}

uint64_t sub_10006F6AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10006F7EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  if (dword_1001322F0 <= 30 && (dword_1001322F0 != -1 || _LogCategory_Initialize(&dword_1001322F0, 30LL))) {
    LogPrintF( &dword_1001322F0,  "-[RPNWNearbyInvitationPeer sendStatusUpdateForConnection:connectionID:status:responseHandler:]_block_invoke",  30LL,  "Status update got response %s",  +[RPNWNearbyInvitationPeer responseCodeToString:]( &OBJC_CLASS___RPNWNearbyInvitationPeer,  "responseCodeToString:",  a2));
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, a2);
  }
}

void sub_10006F970(id a1)
{
  uint64_t Int64 = CFPrefs_GetInt64(@"com.apple.rapport", @"metricsEnabled", &v5);
  if (v5) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = Int64 == 0;
  }
  if (!v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___RPMetrics);
    uint64_t v4 = (void *)qword_1001334F0;
    qword_1001334F0 = (uint64_t)v3;

    [(id)qword_1001334F0 activate];
  }

id sub_10006FB5C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _reportMetrics];
}

id sub_10006FBC4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

void sub_10006FC3C(id a1)
{
}

void sub_10006FD18(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:*(void *)(a1 + 40)]);

  id v3 = *(void **)(*(void *)(a1 + 32) + 32LL);
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:*(void *)(a1 + 40)]);
    int v5 = (char *)[v4 unsignedIntegerValue];

    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v5 + 1));
    [*(id *)(*(void *)(a1 + 32) + 32) setObject:v6 forKeyedSubscript:*(void *)(a1 + 40)];
  }

  else
  {
    [v3 setObject:&off_10011B048 forKeyedSubscript:*(void *)(a1 + 40)];
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = 1;
}

void sub_10006FE6C(uint64_t a1)
{
  id v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%d,%d,%@",  *(unsigned __int8 *)(a1 + 48),  *(unsigned __int8 *)(a1 + 49),  *(void *)(a1 + 32));
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 48), "objectForKeyedSubscript:"));

  id v3 = *(void **)(*(void *)(a1 + 40) + 48LL);
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v7]);
    int v5 = (char *)[v4 unsignedIntegerValue];

    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v5 + 1));
    [*(id *)(*(void *)(a1 + 40) + 48) setObject:v6 forKeyedSubscript:v7];
  }

  else
  {
    [v3 setObject:&off_10011B048 forKeyedSubscript:v7];
  }

  *(_BYTE *)(*(void *)(a1 + 40) + 24LL) = 1;
}

id sub_1000700B8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _logReceivedMessageType:*(unsigned int *)(a1 + 96) identifier:*(void *)(a1 + 40) options:*(void *)(a1 + 48) appID:*(void *)(a1 + 56) timeBegin:*(void *)(a1 + 80) timeEnd:*(void *)(a1 + 88) bytesAdded:*(double *)(a1 + 64) messagesAdded:*(double *)(a1 + 72)];
}

void sub_1000707C4(id a1)
{
  qword_100133508 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PowerLog.framework/PowerLog", 2);
}

uint64_t sub_1000707EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_100133500 != -1) {
    dispatch_once(&qword_100133500, &stru_100113998);
  }
  off_1001323D0 = (uint64_t (*)())dlsym((void *)qword_100133508, "PLLogRegisteredEvent");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))off_1001323D0)(a1, a2, a3, a4);
}

void sub_1000708B4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___RPWiFiP2PTransaction);
  BOOL v2 = (void *)qword_100133518;
  qword_100133518 = (uint64_t)v1;
}

void sub_100070A04(_Unwind_Exception *a1)
{
}

void sub_100070A30(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  id v3 = *(void **)(*(void *)(a1 + 32) + 8LL);
  if (!v3)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 8);
    *(void *)(v5 + _Block_object_dispose(va, 8) = v4;

    id v3 = *(void **)(*(void *)(a1 + 32) + 8LL);
  }

  [v3 addObject:*(void *)(a1 + 40)];
  objc_sync_exit(v2);

  if (dword_1001323D8 <= 30 && (dword_1001323D8 != -1 || _LogCategory_Initialize(&dword_1001323D8, 30LL))) {
    LogPrintF( &dword_1001323D8,  "-[RPWiFiP2PTransaction activateForClient:]_block_invoke",  30LL,  "WiFi P2P transaction enabled for client '%@', current clients %@ \n",  *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 8LL));
  }
}

void sub_100070B08(_Unwind_Exception *a1)
{
}

void *sub_100070B1C(void *result, uint64_t a2)
{
  if (a2)
  {
    id v2 = result;
    if (dword_1001323D8 <= 90
      && (dword_1001323D8 != -1 || _LogCategory_Initialize(&dword_1001323D8, 90LL)))
    {
      LogPrintF( &dword_1001323D8,  "-[RPWiFiP2PTransaction activateForClient:]_block_invoke_2",  90LL,  "### Error while enabling WiFi P2P transaction: %ld\n",  a2);
    }

    return [*(id *)(v2[4] + 8) removeObject:v2[5]];
  }

  return result;
}

void sub_100070DB0(_Unwind_Exception *a1)
{
}

Class sub_100070DD8()
{
  if (qword_100133528 != -1) {
    dispatch_once(&qword_100133528, &stru_100113A00);
  }
  Class result = objc_getClass("WiFiP2PSPITransactionRequestor");
  qword_100133520 = (uint64_t)result;
  off_100132448 = (uint64_t (*)())sub_100070E34;
  return result;
}

id sub_100070E34()
{
  return (id)qword_100133520;
}

void sub_100070E40(id a1)
{
  qword_100133530 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/WiFiPeerToPeer.framework/WiFiPeerToPeer", 2);
}

id sub_100071F14(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _deviceFound:a2];
}

id sub_100071F20(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _deviceLost:a2];
}

void sub_100071F2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (v3)
  {
    if (dword_1001324C0 <= 90)
    {
      if (dword_1001324C0 != -1 || (int v4 = _LogCategory_Initialize(&dword_1001324C0, 90LL), v3 = v5, v4)) {
        LogPrintF( &dword_1001324C0,  "-[RPNearbyInfoV2Discovery activateWithCompletion:]_block_invoke_3",  90LL,  " ### BLE NearbyInfoV2 discovery failed to start: %@\n",  v3);
      }
    }
  }

  else if (dword_1001324C0 <= 30 {
         && (dword_1001324C0 != -1 || _LogCategory_Initialize(&dword_1001324C0, 30LL)))
  }
  {
    LogPrintF( &dword_1001324C0,  "-[RPNearbyInfoV2Discovery activateWithCompletion:]_block_invoke_3",  30LL,  "BLE NearbyInfoV2 discovery started\n");
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

Class sub_10007253C()
{
  if (qword_100133548 != -1) {
    dispatch_once(&qword_100133548, &stru_100113A20);
  }
  Class result = objc_getClass("CBDiscovery");
  qword_100133540 = (uint64_t)result;
  off_100132530 = (uint64_t (*)())sub_100072598;
  return result;
}

id sub_100072598()
{
  return (id)qword_100133540;
}

void sub_1000725A4(id a1)
{
  qword_100133550 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreBluetooth.framework/CoreBluetooth", 2);
}

id sub_100072BD4(uint64_t a1)
{
  if (dword_100132538 <= 30 && (dword_100132538 != -1 || _LogCategory_Initialize(&dword_100132538, 30LL))) {
    LogPrintF( &dword_100132538,  "-[RPNFCTransactionController _startPollingCoolDownTimer]_block_invoke",  30LL,  "timer fired: polling cool down completed for %fs\n",  COERCE_DOUBLE(10LL));
  }
  [*(id *)(a1 + 32) _stopPollingCoolDownTimer];
  return [*(id *)(a1 + 32) _updatePolling];
}

void sub_100072E08(uint64_t a1)
{
  if (dword_100132538 <= 30 && (dword_100132538 != -1 || _LogCategory_Initialize(&dword_100132538, 30LL))) {
    LogPrintF( &dword_100132538,  "-[RPNFCTransactionController _startConnectToReceiverTimer]_block_invoke",  30LL,  "timer fired: connect to receiver timed out");
  }
  [*(id *)(a1 + 32) _stopConnectToReceiverTimer];
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentTransaction]);
  id v3 = [v2 role];

  if (v3 != (id)1) {
    [*(id *)(a1 + 32) _stopInitiator];
  }
}

id sub_100073000(uint64_t a1)
{
  if (dword_100132538 <= 30 && (dword_100132538 != -1 || _LogCategory_Initialize(&dword_100132538, 30LL))) {
    LogPrintF( &dword_100132538,  "-[RPNFCTransactionController _startInitiatorLimitTimer]_block_invoke",  30LL,  "timer fired: initiator reached out maximum time limit of:%f",  60.0);
  }
  return [*(id *)(a1 + 32) _stopInitiator];
}

void sub_10007317C(uint64_t a1)
{
  if (dword_100132538 <= 30 && (dword_100132538 != -1 || _LogCategory_Initialize(&dword_100132538, 30LL))) {
    LogPrintF( &dword_100132538,  "-[RPNFCTransactionController _startBecomeInitiatorTimer]_block_invoke",  30LL,  "timer fired: becoming initiator after:%.2fs",  0.7);
  }
  [*(id *)(a1 + 32) _stopBecomeInitiatorTimer];
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentTransaction]);

  if (!v2) {
    _[*(id *)(a1 + 32) _startInitiator];
  }
}

void sub_100073760(uint64_t a1)
{
  id v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472LL;
  uint64_t v15 = sub_100073844;
  id v16 = &unk_100111E90;
  id v17 = 0LL;
  id v18 = *(id *)(a1 + 40);
  id v8 = objc_retainBlock(&v13);
  id v9 = *(void **)(a1 + 32);
  if (v9[2] && v9[4])
  {
    uint64_t v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_createAndRunSession", v13, v14, v15, v16, v17));
  }

  else
  {
    id v11 = RPErrorF( 4294960591LL,  (uint64_t)"Configuration parameters are not specified",  v2,  v3,  v4,  v5,  v6,  v7,  (uint64_t)v13);
    uint64_t v10 = objc_claimAutoreleasedReturnValue(v11);
  }

  id v12 = (void *)v10;
  ((void (*)(void ***))v8[2])(v8);
}

void sub_100073828(_Unwind_Exception *a1)
{
}

uint64_t sub_100073844(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (dword_1001325A8 <= 90)
    {
      if (dword_1001325A8 != -1
        || (v3 = _LogCategory_Initialize(&dword_1001325A8, 90LL), uint64_t v2 = *(void *)(a1 + 32), v3))
      {
        LogPrintF( &dword_1001325A8,  "-[RPNIProximityEstimator activateWithCompletion:]_block_invoke_2",  90LL,  "### Activate RPNIProximityEstimator failed: %{error}\n",  v2);
      }
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10007392C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 56);
  if (v2)
  {
    *(void *)(v1 + 56) = 0LL;
    id v6 = v2;

    [v6 invalidate];
    [v6 setDelegate:0];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose(va, 8) = 0LL;
  }

void sub_100073A20(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bleDevice]);
  if (v2)
  {
    id v14 = v2;
    int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 advertisementFields]);
    unsigned __int8 Int64Ranged = CFDictionaryGetInt64Ranged(v3, @"ch", 0LL, 255LL, 0LL);

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) model]);
    if (!v5)
    {
      if ([*(id *)(a1 + 32) deviceModelCode] == 5)
      {
        unsigned int v6 = [*(id *)(a1 + 32) deviceModelCode];
        uint64_t v7 = "Unknown";
        switch(v6)
        {
          case 0u:
            break;
          case 1u:
            uint64_t v7 = "D22ish";
            break;
          case 2u:
            uint64_t v7 = "SEish";
            break;
          case 3u:
            uint64_t v7 = "J3XXish";
            break;
          case 4u:
            uint64_t v7 = "N112ish";
            break;
          case 5u:
            uint64_t v7 = "B520ish";
            break;
          case 6u:
            uint64_t v7 = "B620ish";
            break;
          case 7u:
            uint64_t v7 = "J255ish";
            break;
          default:
            uint64_t v7 = "?";
            break;
        }

        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7));
      }

      else
      {
        uint64_t v5 = 0LL;
      }
    }

    id v8 = objc_alloc(off_100132618());
    double v9 = (double)(uint64_t)[v14 rssi];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 UUIDString]);
    id v12 = [v8 initWithRSSI:v11 identifier:v5 model:Int64Ranged channel:v9 machContinuousTimeSeconds:(double)mach_continuous_time()];

    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 56) devicePresenceNotifier]);
    [v13 notifyBluetoothSample:v12];

    uint64_t v2 = v14;
  }
}

Class sub_1000742DC()
{
  if (qword_100133560 != -1) {
    dispatch_once(&qword_100133560, &stru_100113A68);
  }
  Class result = objc_getClass("NIBluetoothSample");
  qword_100133558 = (uint64_t)result;
  off_100132618 = (uint64_t (*)())sub_100074338;
  return result;
}

id sub_100074338()
{
  return (id)qword_100133558;
}

void sub_100074344(id a1)
{
  qword_100133568 = (uint64_t)dlopen("/System/Library/Frameworks/NearbyInteraction.framework/NearbyInteraction", 2);
}

Class sub_10007436C()
{
  if (qword_100133560 != -1) {
    dispatch_once(&qword_100133560, &stru_100113A68);
  }
  Class result = objc_getClass("NIRegionPredicate");
  qword_100133570 = (uint64_t)result;
  off_100132620 = (uint64_t (*)())sub_1000743C8;
  return result;
}

id sub_1000743C8()
{
  return (id)qword_100133570;
}

Class sub_1000743D4()
{
  if (qword_100133560 != -1) {
    dispatch_once(&qword_100133560, &stru_100113A68);
  }
  Class result = objc_getClass("NIDevicePresenceConfiguration");
  qword_100133578 = (uint64_t)result;
  off_100132628 = (uint64_t (*)())sub_100074430;
  return result;
}

id sub_100074430()
{
  return (id)qword_100133578;
}

Class sub_10007443C()
{
  if (qword_100133560 != -1) {
    dispatch_once(&qword_100133560, &stru_100113A68);
  }
  Class result = objc_getClass("NISession");
  qword_100133580 = (uint64_t)result;
  off_100132630 = (uint64_t (*)())sub_100074498;
  return result;
}

id sub_100074498()
{
  return (id)qword_100133580;
}

void sub_100074998(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (dword_1001326F8 <= 30 && (dword_1001326F8 != -1 || _LogCategory_Initialize(&dword_1001326F8, 30LL)))
  {
    int v3 = (void *)objc_claimAutoreleasedReturnValue(+[RPNWNetworkAgent getLogInfo](&OBJC_CLASS___RPNWNetworkAgent, "getLogInfo"));
    id v4 = *(id *)(a1 + 32);
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
    -[NSMutableString appendFormat:](v5, "appendFormat:", @"%p", v4);

    LogPrintF( &dword_1001326F8,  "-[RPNWDiscoverySession startDiscovery:controlFlags:deviceFilter:]_block_invoke",  30LL,  "%@ DISCOVER: Found device through RPNWDiscoverySession[%@] - %@",  v3,  v5,  v8);
  }

  unsigned int v6 = *(void **)(a1 + 32);
  uint64_t v7 = objc_opt_new(&OBJC_CLASS___NSUUID);
  [v6 addMappingForDevice:v8 endpointID:v7];
}

void sub_100074AA4(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (dword_1001326F8 <= 30 && (dword_1001326F8 != -1 || _LogCategory_Initialize(&dword_1001326F8, 30LL)))
  {
    int v3 = (void *)objc_claimAutoreleasedReturnValue(+[RPNWNetworkAgent getLogInfo](&OBJC_CLASS___RPNWNetworkAgent, "getLogInfo"));
    id v4 = *(id *)(a1 + 32);
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
    -[NSMutableString appendFormat:](v5, "appendFormat:", @"%p", v4);

    LogPrintF( &dword_1001326F8,  "-[RPNWDiscoverySession startDiscovery:controlFlags:deviceFilter:]_block_invoke_2",  30LL,  "%@ DISCOVER: Updated device through RPNWDiscoverySession[%@] - %@",  v3,  v5,  v6);
  }

  [*(id *)(a1 + 32) updateMappingForDevice:v6];
}

void sub_100074B94(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (dword_1001326F8 <= 30 && (dword_1001326F8 != -1 || _LogCategory_Initialize(&dword_1001326F8, 30LL)))
  {
    int v3 = (void *)objc_claimAutoreleasedReturnValue(+[RPNWNetworkAgent getLogInfo](&OBJC_CLASS___RPNWNetworkAgent, "getLogInfo"));
    id v4 = *(id *)(a1 + 32);
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
    -[NSMutableString appendFormat:](v5, "appendFormat:", @"%p", v4);

    LogPrintF( &dword_1001326F8,  "-[RPNWDiscoverySession startDiscovery:controlFlags:deviceFilter:]_block_invoke_3",  30LL,  "%@ DISCOVER: Lost device through RPNWDiscoverySession[%@] - %@",  v3,  v5,  v6);
  }

  [*(id *)(a1 + 32) removeDevice:v6];
}

id sub_100074C84(uint64_t a1)
{
  return _[*(id *)(a1 + 32) removeAllDevices];
}

void sub_100074E9C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___RPNWNetworkAgent);
  uint64_t v2 = (void *)qword_100133588;
  qword_100133588 = (uint64_t)v1;
}

#error "1000750D4: call analysis failed (funcsize=62)"
void __cdecl -[RPNWNetworkAgent dealloc](RPNWNetworkAgent *self, SEL a2)
{
  objc_super v2;
  v2.receiver = self;
  v2.super_class = (Class)&OBJC_CLASS___RPNWNetworkAgent;
  -[RPNWNetworkAgent dealloc](&v2, "dealloc");
}

id sub_100075278(uint64_t a1)
{
  return [*(id *)(a1 + 32) prefsChanged];
}

id sub_100075340(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidate];
}

uint64_t sub_100075FEC(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", a2, 1LL));
  [*(id *)(a1 + 32) addObject:v3];

  return 1LL;
}

int sub_10007611C( id a1, NSData *a2, NSNumber *a3, RPCompanionLinkDevice *a4, int a5, NSString *a6, NSData *a7, id *a8, id *a9, NSUUID *a10, BOOL a11, NSUUID *a12, id *a13)
{
  id v17 = a2;
  id v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  __int128 v22 = a10;
  __int128 v23 = a12;
  *a13 = 0LL;
  if (v19 && v20)
  {
    if (dword_100132768 <= 40
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 40LL)))
    {
      int v24 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice name](v19, "name"));
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createRapportServer]_block_invoke",  40LL,  "Received BROWSE request for appSvc='%@' from %@",  v20,  v24);
    }

    id v25 = (void *)objc_claimAutoreleasedReturnValue( +[RPNWAgentClient findListenerAgentClientFromApplicationServiceName:]( &OBJC_CLASS___RPNWAgentClient,  "findListenerAgentClientFromApplicationServiceName:",  v20));
    if (v25)
    {
      id v26 = (void *)objc_claimAutoreleasedReturnValue( +[RPNWListener findListenerForAgentClient:sender:browseRequest:]( &OBJC_CLASS___RPNWListener,  "findListenerForAgentClient:sender:browseRequest:",  v25,  v19,  1LL));
      id v27 = v26;
      if (v26) {
        *a13 = (id)objc_claimAutoreleasedReturnValue([v26 mappingID]);
      }

      int v28 = 2 * (*a13 != 0LL);
    }

    else
    {
      int v28 = 0;
    }
  }

  else
  {
    if (dword_100132768 <= 90
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createRapportServer]_block_invoke",  90LL,  "Not a valid BROWSE request\n");
    }

    int v28 = 0;
  }

  return v28;
}

uint64_t sub_100076304( uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, void *a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  id v17 = a2;
  id v18 = a3;
  id v19 = a4;
  id v20 = a6;
  id v21 = a7;
  id v22 = a10;
  id v23 = a12;
  if (v19 && v20 && v21)
  {
    id v42 = a8;
    if (dword_100132768 <= 40
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 40LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createRapportServer]_block_invoke_2",  40LL,  "Received RESOLVE request for appSvc='%@' from sender '%@'",  v20,  v19);
    }

    id v25 = (void *)objc_claimAutoreleasedReturnValue( +[RPNWAgentClient findListenerAgentClientFromApplicationServiceName:]( &OBJC_CLASS___RPNWAgentClient,  "findListenerAgentClientFromApplicationServiceName:",  v20));
    id v26 = v25;
    if (v25)
    {
      id v40 = v18;
      id v41 = v17;
      id v27 = objc_claimAutoreleasedReturnValue([v25 agentClientID]);
      *a9 = v27;
      id v28 = objc_claimAutoreleasedReturnValue([v27 UUIDString]);
      id v29 = (const char *)[v28 cStringUsingEncoding:4];

      nw_endpoint_t bonjour_service = nw_endpoint_create_bonjour_service(v29, "_asquic._udp", "local");
      id v44 = v21;
      id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v44, 1LL));
      nw_endpoint_set_public_keys(bonjour_service, v31);

      id v32 = (void *)objc_claimAutoreleasedReturnValue([v19 idsDeviceIdentifier]);
      if (v32)
      {
        if (dword_100132768 <= 40
          && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 40LL)))
        {
          id v33 = (void *)objc_claimAutoreleasedReturnValue([v19 idsDeviceIdentifier]);
          LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createRapportServer]_block_invoke_2",  40LL,  "RESOLVE: Setting device identifier=%@ for appSvc='%@' from sender '%@'",  v33,  v20,  v19);
        }

        id v34 = objc_claimAutoreleasedReturnValue([v19 idsDeviceIdentifier]);
        nw_endpoint_set_device_id(bonjour_service, [v34 UTF8String]);
      }

      uint64_t v35 = *(void **)(a1 + 32);
      id v36 = (void *)objc_claimAutoreleasedReturnValue([v26 browseClient]);
      *id v42 = (id)objc_claimAutoreleasedReturnValue([v35 _localPublicKeyForAgentClient:v36]);

      id v37 = (void *)nw_array_create();
      nw_array_append(v37, bonjour_service);
      int v38 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([v26 browseResponse]);
      ((void (**)(void, void *))v38)[2](v38, v37);

      if (*v42) {
        uint64_t v24 = 2 * (*a9 != 0LL);
      }
      else {
        uint64_t v24 = 0LL;
      }
      id v18 = v40;
      id v17 = v41;
    }

    else
    {
      uint64_t v24 = 0LL;
    }
  }

  else
  {
    if (dword_100132768 <= 90
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createRapportServer]_block_invoke_2",  90LL,  "Not a valid RESOLVE request\n");
    }

    uint64_t v24 = 0LL;
  }

  return v24;
}

id sub_1000766A0( uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, void *a10, char a11, void *a12)
{
  id v17 = a2;
  id v18 = a3;
  id v19 = a4;
  id v20 = a6;
  id v21 = a7;
  id v22 = a10;
  id v23 = a12;
  uint64_t v24 = v23;
  if (v19 && v20 && v22 && v23)
  {
    id v25 = (void *)objc_claimAutoreleasedReturnValue( +[RPNWListener findListenerForID:applicationService:fromPeer:]( &OBJC_CLASS___RPNWListener,  "findListenerForID:applicationService:fromPeer:",  v22,  v20,  v19));
    if (!v25 && a11)
    {
      id v25 = (void *)objc_claimAutoreleasedReturnValue( +[RPNWListener addDeviceToApplicationServiceMapping:device:completion:]( &OBJC_CLASS___RPNWListener,  "addDeviceToApplicationServiceMapping:device:completion:",  v20,  v19,  0LL));
      [v25 setAutomapped:1];
    }

    id v26 = [*(id *)(*(void *)(a1 + 32) + 72) findListenerAndCreateConnection:v19 version:v18 applicationService:v20 listenerID:v22 connectionID:v24];
  }

  else
  {
    if (dword_100132768 <= 90
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createRapportServer]_block_invoke_3",  90LL,  "Not a valid CONNECT request\n");
    }

    id v26 = 0LL;
  }

  return v26;
}

uint64_t sub_100076BA8(uint64_t a1, void *a2)
{
  int v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setListen_framer:", v3);
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listen_framer"));
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createListenerFramer:]_block_invoke",  30LL,  "Creating listener framer=%@\n",  v4);
  }

  cleanup_handler[0] = _NSConcreteStackBlock;
  cleanup_handler[1] = 3221225472LL;
  cleanup_handler[2] = sub_100076CA4;
  cleanup_handler[3] = &unk_100113B40;
  id v7 = *(id *)(a1 + 32);
  nw_framer_set_cleanup_handler(v3, cleanup_handler);

  return 1LL;
}

void sub_100076CA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createListenerFramer:]_block_invoke_2",  30LL,  "Cleaning up listening framer=%@\n",  v3);
  }
  objc_msgSend(*(id *)(a1 + 32), "setListen_framer:", 0);
}

void sub_1000775CC(uint64_t a1, int a2, void *a3)
{
  id v14 = a3;
  if ((a2 - 1) > 1)
  {
    if (dword_100132768 <= 90
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke",  90LL,  "Failed to connect to peer\n");
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) framer]);
    +[RPNWFramer writeErrorOnFramer:error:](&OBJC_CLASS___RPNWFramer, "writeErrorOnFramer:error:", v13, 61LL);
    goto LABEL_23;
  }

  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peer]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 destinationDevice]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke",  30LL,  "Successfully connected to peer='%@'\n",  v7,  v14);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peer]);
  [v8 handleConnectionData:0];

  id v9 = [*(id *)(a1 + 40) type];
  if (a2 == 2 && v9 == (id)4)
  {
    if (dword_100132768 <= 30
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke",  30LL,  "Outgoing connection ready, starting connection");
    }

    [*(id *)(a1 + 32) setIsConnected:1];
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) framer]);
    +[RPNWFramer startConnection:](&OBJC_CLASS___RPNWFramer, "startConnection:", v13);
LABEL_23:

    goto LABEL_24;
  }

  if ([*(id *)(a1 + 40) type] == (id)3)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) version]);
    [v10 doubleValue];
    double v12 = v11;

    if (v12 >= 2.0)
    {
      if (dword_100132768 <= 30
        && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
      {
        LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke",  30LL,  "Incoming connection ready signaling READY");
      }

      [*(id *)(a1 + 32) sendStatusUpdate:5];
    }
  }

void sub_100077868(uint64_t a1)
{
  if (dword_100132768 <= 90 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke_2",  90LL,  "Lost connection to peer\n");
  }
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) framer]);
  +[RPNWFramer writeErrorOnFramer:error:](&OBJC_CLASS___RPNWFramer, "writeErrorOnFramer:error:", v2, 50LL);
}

uint64_t sub_100077908(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setFramer:v3];
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke_3",  30LL,  "Receiving signal to create connection framer=%@\n",  v3);
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100077A4C;
  v7[3] = &unk_100113BB8;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100077E20;
  v5[3] = &unk_1001110A8;
  id v6 = *(id *)(a1 + 32);
  +[RPNWFramer setupDaemonFramer:receiveHandler:closeHandler:]( &OBJC_CLASS___RPNWFramer,  "setupDaemonFramer:receiveHandler:closeHandler:",  v3,  v7,  v5);

  return 2LL;
}

void sub_100077A4C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (dword_100132768 <= 10 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 10LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke_4",  10LL,  "DATA (%d bytes) from Agent Client, more: %d",  a3,  a4);
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outgoingBuffer]);

  if (!v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](&OBJC_CLASS___NSMutableData, "dataWithCapacity:", 0x4000LL));
    [*(id *)(a1 + 32) setOutgoingBuffer:v9];
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outgoingBuffer]);
  [v10 appendBytes:a2 length:a3];

  double v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outgoingBuffer]);
  unint64_t v12 = (unint64_t)[v11 length];

  if (v12 >> 9 > 0x1E || a4 == 0)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outgoingBuffer]);
    [*(id *)(a1 + 32) setOutgoingBuffer:0];
    if (dword_100132768 <= 10
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 10LL)))
    {
      id v15 = [v14 length];
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peer]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 destinationDevice]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 name]);
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke_4",  10LL,  "RX DATA (%d bytes) from Agent Client, sending to peer '%@'",  v15,  v18);
    }

    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peer]);
    uint64_t v20 = *(void *)(a1 + 40);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionUUID]);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_100077D24;
    v23[3] = &unk_1001115C8;
    id v24 = *(id *)(a1 + 32);
    [v19 sendDataForConnection:v14 applicationService:v20 connectionID:v21 responseHandler:v23];
  }

  else if (dword_100132768 <= 10 {
         && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 10LL)))
  }
  {
    id v22 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outgoingBuffer]);
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke_4",  10,  "RX DATA (%d bytes) from Agent Client, more: %d",  [v22 length],  1);
  }

void sub_100077D24(uint64_t a1, uint64_t a2)
{
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke_5",  30LL,  "Received peer response %s",  +[RPNWPeer responseCodeToString:](&OBJC_CLASS___RPNWPeer, "responseCodeToString:", a2));
  }
  if ((_DWORD)a2 == 3 || !(_DWORD)a2)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) framer]);
    +[RPNWFramer writeErrorOnFramer:error:](&OBJC_CLASS___RPNWFramer, "writeErrorOnFramer:error:");
  }

id sub_100077E20(uint64_t a1)
{
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke_6",  30LL,  "RX close connection status, sending CLOSED status update to peer\n");
  }
  [*(id *)(a1 + 32) sendStatusUpdate:4];
  return [*(id *)(a1 + 32) setIsConnected:0];
}

void sub_100078574(uint64_t a1, int a2, void *a3)
{
  id v10 = a3;
  if (a2 != 2)
  {
    if (dword_100132768 <= 90
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createNearbyInvitationConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke",  90LL,  "Failed to connect to peer\n");
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) framer]);
    +[RPNWFramer writeErrorOnFramer:error:](&OBJC_CLASS___RPNWFramer, "writeErrorOnFramer:error:", v9, 61LL);
    goto LABEL_21;
  }

  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peer]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 destinationDevice]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createNearbyInvitationConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke",  30LL,  "Successfully connected to peer='%@'\n",  v7,  v10);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peer]);
  [v8 handleConnectionData:0];

  if ([*(id *)(a1 + 40) type] == (id)4)
  {
    if (dword_100132768 <= 30
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createNearbyInvitationConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke",  30LL,  "Outgoing connection ready, starting connection");
    }

    [*(id *)(a1 + 32) setIsConnected:1];
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) framer]);
    +[RPNWFramer startConnection:](&OBJC_CLASS___RPNWFramer, "startConnection:", v9);
LABEL_21:

    goto LABEL_22;
  }

  if ([*(id *)(a1 + 40) type] == (id)3)
  {
    if (dword_100132768 <= 30
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createNearbyInvitationConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke",  30LL,  "Incoming connection ready signaling READY");
    }

    [*(id *)(a1 + 32) sendStatusUpdate:5];
  }

void sub_1000787D4(uint64_t a1)
{
  if (dword_100132768 <= 90 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createNearbyInvitationConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke_2",  90LL,  "Lost connection to peer\n");
  }
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) framer]);
  +[RPNWFramer writeErrorOnFramer:error:](&OBJC_CLASS___RPNWFramer, "writeErrorOnFramer:error:", v2, 50LL);
}

uint64_t sub_100078874(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setFramer:v3];
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createNearbyInvitationConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke_3",  30LL,  "Receiving signal to create NearbyInvitation connection framer=%@\n",  v3);
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000789B8;
  v7[3] = &unk_100113BB8;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100078C1C;
  v5[3] = &unk_1001110A8;
  id v6 = *(id *)(a1 + 32);
  +[RPNWFramer setupDaemonFramer:receiveHandler:closeHandler:]( &OBJC_CLASS___RPNWFramer,  "setupDaemonFramer:receiveHandler:closeHandler:",  v3,  v7,  v5);

  return 2LL;
}

void sub_1000789B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a2, a3));
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
  {
    id v5 = [v4 length];
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peer]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 destinationDevice]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 name]);
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createNearbyInvitationConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke_4",  30LL,  "RX DATA (%d bytes) from Agent Client, sending to peer '%@'",  v5,  v8);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peer]);
  uint64_t v10 = *(void *)(a1 + 40);
  double v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionUUID]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100078B20;
  v12[3] = &unk_1001115C8;
  id v13 = *(id *)(a1 + 32);
  [v9 sendDataForConnection:v4 applicationService:v10 connectionID:v11 responseHandler:v12];
}

void sub_100078B20(uint64_t a1, uint64_t a2)
{
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createNearbyInvitationConnectionFramer:assign:local:remote:incomingConnection:]_block_invoke_5",  30LL,  "Received peer response %s",  +[RPNWPeer responseCodeToString:](&OBJC_CLASS___RPNWPeer, "responseCodeToString:", a2));
  }
  if ((_DWORD)a2 == 3 || !(_DWORD)a2)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) framer]);
    +[RPNWFramer writeErrorOnFramer:error:](&OBJC_CLASS___RPNWFramer, "writeErrorOnFramer:error:");
  }

id sub_100078C1C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIsConnected:0];
}

void sub_1000792C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupBrowseHandlers]_block_invoke",  30LL,  "BROWSE: Start browse request from agent_client=%@\n",  v5);
  }
  uint64_t v7 = nw_agent_client_copy_browse_descriptor(v5);
  id v8 = (void *)v7;
  if (v7 && nw_browse_descriptor_get_type(v7) == 2)
  {
    id v9 = (void *)nw_agent_client_copy_parameters(v5);
    if (v9)
    {
      if (dword_100132768 <= 30
        && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
      {
        LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupBrowseHandlers]_block_invoke",  30LL,  "BROWSE: NWParameters=%@\n",  v9);
      }

      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[RPNWAgentClient addAgentClient](&OBJC_CLASS___RPNWAgentClient, "addAgentClient"));
      if (v10)
      {
        double v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _quicProtocolOptionsFromParameters:v9]);
        BOOL v22 = v11 != 0LL;

        uint64_t pid = nw_parameters_get_pid(v9);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getPersonaFromParameters:v9]);
        if (dword_100132768 <= 30
          && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
        {
          id v14 = @"NO";
          if (v11) {
            id v14 = @"YES";
          }
          LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupBrowseHandlers]_block_invoke",  30LL,  "BROWSE: Parameters from agent_client PID=%d, QUIC=%@",  pid,  v14);
        }

        uint64_t v15 = pid;
        if (nw_browse_descriptor_get_invitation_scope(v8))
        {
          int v16 = _os_feature_enabled_impl("Rapport", "NearbyInvitation");
          char v17 = v16;
          if (v16) {
            id v18 = 0LL;
          }
          else {
            id v18 = v13;
          }
          id v21 = v18;
        }

        else
        {
          char v17 = 0;
          id v21 = v13;
        }

        id v19 = *(void **)(a1 + 32);
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472LL;
        v23[2] = sub_1000796B0;
        v23[3] = &unk_100113C08;
        id v24 = v10;
        id v25 = v5;
        BOOL v31 = v22;
        int v30 = v15;
        id v26 = v8;
        id v27 = v13;
        uint64_t v28 = *(void *)(a1 + 32);
        id v29 = v6;
        char v32 = v17;
        id v20 = v13;
        [v19 executeAgentLogicInPersona:v21 pid:v15 handlerDescription:@"Browse Request" handler:v23];
      }

      else if (dword_100132768 <= 90 {
             && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
      }
      {
        LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupBrowseHandlers]_block_invoke",  90LL,  "BROWSE: Failed to create client\n");
      }
    }

    else if (dword_100132768 <= 90 {
           && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
    }
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupBrowseHandlers]_block_invoke",  90LL,  "BROWSE: Failed to copy parameters from agent_client=%@\n",  v5);
    }
  }

  else if (dword_100132768 <= 30 {
         && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
  }
  {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupBrowseHandlers]_block_invoke",  30LL,  "BROWSE: Not an application service browse request\n");
  }
}

id sub_1000796B0(uint64_t a1)
{
  HIDWORD(v3) = *(_DWORD *)(a1 + 80);
  BYTE2(v3) = 0;
  BYTE1(v3) = *(_BYTE *)(a1 + 84);
  LOBYTE(v3) = 0;
  objc_msgSend( *(id *)(a1 + 32),  "updateAgentClientInfo:browseResponse:listener:bundleID:advertiseDescriptor:browseDescriptor:isFlowHandler:isUsingQUI C:isTCP:agentClientPID:persona:",  *(void *)(a1 + 40),  0,  0,  0,  0,  *(void *)(a1 + 48),  v3,  *(void *)(a1 + 56));
  return _[*(id *)(a1 + 64) discoverDevices:*(void *)(a1 + 32) response:*(void *)(a1 + 72) nearbyInvitation:*(unsigned __int8 *)(a1 + 85)];
}

void sub_10007971C(id a1, OS_nw_agent_client *a2)
{
  id v2 = a2;
  id v4 = v2;
  if (dword_100132768 <= 30)
  {
    if (dword_100132768 != -1 || (v3 = _LogCategory_Initialize(&dword_100132768, 30LL), id v2 = v4, v3))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupBrowseHandlers]_block_invoke_3",  30LL,  "BROWSE: Stop browse request from agent_client=%@\n",  v2);
      id v2 = v4;
    }
  }

  +[RPNWAgentClient removeAgentClient:isFlowHandler:]( &OBJC_CLASS___RPNWAgentClient,  "removeAgentClient:isFlowHandler:",  v2,  0LL);
}

void sub_1000798E4(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  v15[0] = _NSConcreteStackBlock;
  v15[2] = sub_1000799C8;
  v15[3] = &unk_100113C98;
  id v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 80LL);
  v15[1] = 3221225472LL;
  int v21 = a2;
  id v16 = v8;
  id v17 = v7;
  id v11 = v9;
  uint64_t v12 = *(void *)(a1 + 32);
  id v18 = v11;
  uint64_t v19 = v12;
  id v20 = *(id *)(a1 + 48);
  id v13 = v7;
  id v14 = v8;
  dispatch_async(v10, v15);
}

void sub_1000799C8(uint64_t a1)
{
  id v2 = (void *)nw_array_create();
  if (*(_DWORD *)(a1 + 72) == 2)
  {
    id v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUIDString]);
    id v4 = (const char *)[v3 cStringUsingEncoding:4];

    nw_endpoint_t bonjour_service = nw_endpoint_create_bonjour_service(v4, "_asquic._udp", "local");
    uint64_t v19 = *(void *)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v19, 1LL));
    nw_endpoint_set_public_keys(bonjour_service, v6);

    if (dword_100132768 <= 40
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 40LL)))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[RPNWNetworkAgent getLogInfo](&OBJC_CLASS___RPNWNetworkAgent, "getLogInfo"));
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent resolveRequest:existingEndpoint:controlFlags:clientPublicKey:client:]_block_invoke_2",  40LL,  "%@ RESOLVE: Resolve request succeeded for agent_client=%@\n",  v7,  *(void *)(a1 + 48));
    }

    nw_array_append(v2, bonjour_service);
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 56) + 48) objectForKeyedSubscript:*(void *)(a1 + 64)]);
    id v10 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v15;
      do
      {
        for (CFIndex i = 0LL; i != v11; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v15 != v12) {
            objc_enumerationMutation(v9);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v14 + 1) + 8LL * (void)i) + 16LL))();
        }

        id v11 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v11);
    }
  }

  else
  {
    if (dword_100132768 <= 90
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[RPNWNetworkAgent getLogInfo](&OBJC_CLASS___RPNWNetworkAgent, "getLogInfo"));
    }

    nw_endpoint_t bonjour_service = (nw_endpoint_t)nw_error_create_error_with_inferred_domain(4294901743LL);
    nw_agent_send_error_response(*(void *)(*(void *)(a1 + 56) + 24LL), *(void *)(a1 + 48), bonjour_service);
  }

  [*(id *)(*(void *)(a1 + 56) + 48) setObject:0 forKeyedSubscript:*(void *)(a1 + 64)];
  [*(id *)(*(void *)(a1 + 56) + 56) removeObject:*(void *)(a1 + 64)];
}

void sub_100079D78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 80LL));
  if (dword_100132768 <= 40 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 40LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupResolveHandlers]_block_invoke",  40LL,  "RESOLVE: Start resolve request for agent_client=%@\n",  v5);
  }
  id v7 = (void *)nw_agent_client_copy_endpoint(v5);
  if (v7)
  {
    if (dword_100132768 <= 40
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 40LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupResolveHandlers]_block_invoke",  40LL,  "RESOLVE: Continue resolve request for agent_client=%@ endpoint=%@\n",  v5,  v7);
    }

    v36[0] = 0LL;
    v36[1] = 0LL;
    nw_endpoint_get_service_identifier(v7, v36);
    id v8 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v36);
    if ([*(id *)(*(void *)(a1 + 32) + 56) containsObject:v8])
    {
      if (dword_100132768 <= 30
        && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
      {
        LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupResolveHandlers]_block_invoke",  30LL,  "RESOLVE: Pending resolve request for endpoint ID=%@, agent_client=%@\n",  *(void *)(*(void *)(a1 + 32) + 56LL),  v5);
      }

      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) objectForKeyedSubscript:v8]);
      if (v9)
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) objectForKeyedSubscript:v8]);
        id v12 = objc_retainBlock(v6);
        [v10 addObject:v12];

LABEL_59:
        goto LABEL_60;
      }

      if (dword_100132768 <= 90
        && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
      {
        LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupResolveHandlers]_block_invoke",  90LL,  "RESOLVE: Missing pending response holder for existing endpoint ID=%@ agent_client=%@\n",  v8,  v5);
      }

      uint64_t v13 = 4294901747LL;
    }

    else
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[RPNWEndpoint findEndpoint:](&OBJC_CLASS___RPNWEndpoint, "findEndpoint:", v8));
      if (v9)
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _localPublicKeyForAgentClient:v5]);
        if (v10)
        {
          id v11 = (void *)nw_agent_client_copy_parameters(v5);
          if (v11)
          {
            if (dword_100132768 <= 40
              && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 40LL)))
            {
              LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupResolveHandlers]_block_invoke",  40LL,  "RESOLVE: NWParameters=%@\n",  v11);
            }

            id v29 = [*(id *)(a1 + 32) convertConnectionParametersToControlFlags:v11];
            __int128 v14 = *(void **)(*(void *)(a1 + 32) + 56LL);
            if (!v14)
            {
              __int128 v15 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
              uint64_t v16 = *(void *)(a1 + 32);
              __int128 v17 = *(void **)(v16 + 56);
              *(void *)(v16 + 56) = v15;

              __int128 v14 = *(void **)(*(void *)(a1 + 32) + 56LL);
            }

            [v14 addObject:v8];
            id v18 = *(void **)(*(void *)(a1 + 32) + 48LL);
            if (!v18)
            {
              uint64_t v19 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
              uint64_t v20 = *(void *)(a1 + 32);
              int v21 = *(void **)(v20 + 48);
              *(void *)(v20 + 4_Block_object_dispose(va, 8) = v19;

              id v18 = *(void **)(*(void *)(a1 + 32) + 48LL);
            }

            BOOL v22 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v8]);

            if (!v22)
            {
              id v23 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
              [*(id *)(*(void *)(a1 + 32) + 48) setObject:v23 forKeyedSubscript:v8];
            }

            id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) objectForKeyedSubscript:v8]);
            id v25 = objc_retainBlock(v6);
            [v24 addObject:v25];

            uint64_t pid = nw_parameters_get_pid(v11);
            error_with_inferred_domain = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getPersonaFromParameters:v11]);
            uint64_t v28 = *(void **)(a1 + 32);
            v30[0] = _NSConcreteStackBlock;
            v30[1] = 3221225472LL;
            v30[2] = sub_10007A428;
            v30[3] = &unk_100113CE8;
            v30[4] = v28;
            BOOL v31 = v8;
            char v32 = v9;
            id v35 = v29;
            id v33 = v10;
            id v34 = v5;
            [v28 executeAgentLogicInPersona:error_with_inferred_domain pid:pid handlerDescription:@"Resolve Request" handler:v30];
          }

          else
          {
            if (dword_100132768 <= 90
              && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
            {
              LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupResolveHandlers]_block_invoke",  90LL,  "RESOLVE: Failed to copy parameters from agent_client=%@\n",  v5);
            }

            error_with_inferred_domain = (void *)nw_error_create_error_with_inferred_domain(4294901756LL);
            nw_agent_send_error_response(*(void *)(*(void *)(a1 + 32) + 24LL), v5, error_with_inferred_domain);
          }
        }

        else
        {
          if (dword_100132768 <= 90
            && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
          {
            LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupResolveHandlers]_block_invoke",  90LL,  "RESOLVE: Failed to get local public key from agent_client=%@\n",  v5);
          }

          id v11 = (void *)nw_error_create_error_with_inferred_domain(4294901735LL);
          nw_agent_send_error_response(*(void *)(*(void *)(a1 + 32) + 24LL), v5, v11);
        }

        goto LABEL_59;
      }

      if (dword_100132768 <= 90
        && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
      {
        LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupResolveHandlers]_block_invoke",  90LL,  "RESOLVE: Failed to find existing endpoint with ID=%@, endpoint=%@, agent_client=%@\n",  v8,  v7,  v5);
      }

      uint64_t v13 = 4294901742LL;
    }

    id v10 = (void *)nw_error_create_error_with_inferred_domain(v13);
    nw_agent_send_error_response(*(void *)(*(void *)(a1 + 32) + 24LL), v5, v10);
    goto LABEL_59;
  }

  if (dword_100132768 <= 90 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupResolveHandlers]_block_invoke",  90LL,  "RESOLVE: Failed to copy endpoint from agent_client=%@\n",  v5);
  }
  id v8 = (NSUUID *)nw_error_create_error_with_inferred_domain(4294901747LL);
  nw_agent_send_error_response(*(void *)(*(void *)(a1 + 32) + 24LL), v5, v8);
LABEL_60:
}

id sub_10007A428(uint64_t a1)
{
  return _[*(id *)(a1 + 32) resolveRequest:*(void *)(a1 + 40) existingEndpoint:*(void *)(a1 + 48) controlFlags:*(void *)(a1 + 72) clientPublicKey:*(void *)(a1 + 56) client:*(void *)(a1 + 64)];
}

void sub_10007A43C(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 80LL));
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupResolveHandlers]_block_invoke_3",  30LL,  "RESOLVE: Stop resolve request for agent_client=%@\n",  v3);
  }
  id v4 = (void *)nw_agent_client_copy_endpoint(v3);
  if (v4)
  {
    if (dword_100132768 <= 30
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupResolveHandlers]_block_invoke_3",  30LL,  "RESOLVE: Continue stop resolve request for agent_client=%@ endpoint=%@\n",  v3,  v4);
    }

    v17[0] = 0LL;
    v17[1] = 0LL;
    nw_endpoint_get_service_identifier(v4, v17);
    error_with_inferred_domain = -[NSUUID initWithUUIDBytes:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDBytes:",  v17);
    id v6 = (void *)nw_array_create();
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 48) objectForKeyedSubscript:error_with_inferred_domain]);
    id v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v13;
      do
      {
        for (CFIndex i = 0LL; i != v9; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(v7);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v12 + 1) + 8LL * (void)i) + 16LL))();
        }

        id v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }

      while (v9);
    }

    [*(id *)(*(void *)(a1 + 32) + 48) setObject:0 forKeyedSubscript:error_with_inferred_domain];
    [*(id *)(*(void *)(a1 + 32) + 56) removeObject:error_with_inferred_domain];
  }

  else
  {
    if (dword_100132768 <= 90
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupResolveHandlers]_block_invoke_3",  90LL,  "RESOLVE: Failed to copy endpoint from agent_client=%@\n",  v3);
    }

    error_with_inferred_domain = (NSUUID *)nw_error_create_error_with_inferred_domain(4294901747LL);
    nw_agent_send_error_response(*(void *)(*(void *)(a1 + 32) + 24LL), v3, error_with_inferred_domain);
  }
}

void sub_10007A9F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3)
  {
    id v7 = 0LL;
    [*(id *)(a1 + 32) setNearbyInvitationServer:*(void *)(a1 + 40)];
    goto LABEL_6;
  }

  if (dword_100132768 <= 90)
  {
    id v7 = v3;
    if (dword_100132768 != -1 || (v6 = _LogCategory_Initialize(&dword_100132768, 90LL), id v4 = v7, v6))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[RPNWNetworkAgent getLogInfo](&OBJC_CLASS___RPNWNetworkAgent, "getLogInfo"));
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createListener:nearbyInvitation:]_block_invoke",  90LL,  "%@ LISTEN: Error activating NearbyInvitation server: %@\n",  v5,  v7);

LABEL_6:
      id v4 = v7;
    }
  }
}

void sub_10007AAB4(uint64_t a1)
{
  if (dword_100132768 <= 90 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[RPNWNetworkAgent getLogInfo](&OBJC_CLASS___RPNWNetworkAgent, "getLogInfo"));
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent createListener:nearbyInvitation:]_block_invoke_2",  90LL,  "%@ LISTEN: Lost connection to peer\n",  v2);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nearbyInvitationConnection]);
  if (v3)
  {
    id v5 = v3;
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 framer]);
    +[RPNWFramer writeErrorOnFramer:error:](&OBJC_CLASS___RPNWFramer, "writeErrorOnFramer:error:", v4, 57LL);

    [*(id *)(a1 + 40) setNearbyInvitationSession:0];
    id v3 = v5;
  }
}

void sub_10007AC6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupListenHandlers]_block_invoke",  30LL,  "LISTEN: Start listen request for agent_client=%@\n",  v5);
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _applicationServiceAdvertiseDescriptorForClient:v5]);
  if (v7)
  {
    id v8 = (void *)nw_agent_client_copy_parameters(v5);
    if (v8)
    {
      if (dword_100132768 <= 30
        && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
      {
        LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupListenHandlers]_block_invoke",  30LL,  "LISTEN: NWParameters=%@\n",  v8);
      }

      id v9 = [*(id *)(a1 + 32) _isTCPTransport:v8];
      uint64_t v10 = objc_claimAutoreleasedReturnValue( +[RPNWAgentClient findAgentClient:tryPort:isTCP:isFlowHandler:]( &OBJC_CLASS___RPNWAgentClient,  "findAgentClient:tryPort:isTCP:isFlowHandler:",  v5,  1LL,  v9,  0LL));
      if (v10
        || (uint64_t v10 = objc_claimAutoreleasedReturnValue(+[RPNWAgentClient addAgentClient](&OBJC_CLASS___RPNWAgentClient, "addAgentClient"))) != 0)
      {
        id v25 = (void *)v10;
        id v29 = v6;
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _quicProtocolOptionsFromParameters:v8]);
        BOOL v28 = v11 != 0LL;

        uint64_t pid = nw_parameters_get_pid(v8);
        __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[RPNWUtils getBundleIDForPID:](&OBJC_CLASS___RPNWUtils, "getBundleIDForPID:", pid));
        id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getPersonaFromParameters:v8]);
        if (dword_100132768 <= 30
          && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
        {
          __int128 v14 = @"NO";
          if (v11) {
            __int128 v15 = @"YES";
          }
          else {
            __int128 v15 = @"NO";
          }
          if ((_DWORD)v9) {
            __int128 v14 = @"YES";
          }
          LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupListenHandlers]_block_invoke",  30LL,  "LISTEN: Parameters from agent_client PID=%d, bundleID=%@, QUIC=%@ isTCP=%@",  pid,  v13,  v15,  v14);
        }

        uint64_t v27 = pid;
        int invitation_route = nw_advertise_descriptor_get_invitation_route(v7);
        int invitation_scope = nw_advertise_descriptor_get_invitation_scope(v7);
        int v18 = 0;
        if (invitation_route && invitation_scope) {
          int v18 = _os_feature_enabled_impl("Rapport", "NearbyInvitation");
        }
        if (dword_100132768 <= 30
          && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
        {
          LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupListenHandlers]_block_invoke",  30LL,  "LISTEN: Listen request succeeded for agent_client=%@\n",  v5);
        }

        id v24 = *(void **)(a1 + 32);
        if (v18) {
          uint64_t v19 = 0LL;
        }
        else {
          uint64_t v19 = v26;
        }
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472LL;
        v30[2] = sub_10007B0E4;
        v30[3] = &unk_100113D38;
        id v31 = v25;
        id v32 = v5;
        id v6 = v29;
        id v37 = v29;
        id v33 = v13;
        BOOL v39 = v28;
        char v40 = (char)v9;
        int v38 = v27;
        id v34 = v7;
        id v35 = v26;
        uint64_t v36 = *(void *)(a1 + 32);
        char v41 = v18;
        id v20 = v26;
        id v21 = v13;
        id v22 = v25;
        [v24 executeAgentLogicInPersona:v19 pid:v27 handlerDescription:@"Listen Request" handler:v30];
      }

      else if (dword_100132768 <= 90 {
             && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
      }
      {
        LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupListenHandlers]_block_invoke",  90LL,  "LISTEN: Failed to create agent client\n",  v23);
      }
    }

    else if (dword_100132768 <= 90 {
           && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
    }
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupListenHandlers]_block_invoke",  90LL,  "LISTEN: Failed to copy parameters from agent_client=%@\n",  v5);
    }
  }
}

id sub_10007B0E4(uint64_t a1)
{
  HIDWORD(v3) = *(_DWORD *)(a1 + 88);
  *(_WORD *)((char *)&v3 + 1) = *(_WORD *)(a1 + 92);
  LOBYTE(v3) = 0;
  objc_msgSend( *(id *)(a1 + 32),  "updateAgentClientInfo:browseResponse:listener:bundleID:advertiseDescriptor:browseDescriptor:isFlowHandler:isUsingQUI C:isTCP:agentClientPID:persona:",  *(void *)(a1 + 40),  *(void *)(a1 + 80),  0,  *(void *)(a1 + 48),  *(void *)(a1 + 56),  0,  v3,  *(void *)(a1 + 64));
  return _[*(id *)(a1 + 72) createListener:*(void *)(a1 + 32) nearbyInvitation:*(unsigned __int8 *)(a1 + 94)];
}

void sub_10007B148(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (dword_100132768 <= 30)
  {
    if (dword_100132768 != -1 || (int v4 = _LogCategory_Initialize(&dword_100132768, 30LL), v3 = v6, v4))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupListenHandlers]_block_invoke_3",  30LL,  "LISTEN: Stop listen request from agent_client=%@\n",  v3);
      id v3 = v6;
    }
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _applicationServiceAdvertiseDescriptorForClient:v3]);
  if (v5) {
    +[RPNWAgentClient removeAgentClient:isFlowHandler:]( &OBJC_CLASS___RPNWAgentClient,  "removeAgentClient:isFlowHandler:",  v6,  0LL);
  }
}

void sub_10007B9CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
  {
    id v7 = (void *)nw_agent_client_copy_endpoint(v5);
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupFlowHandlers]_block_invoke",  30LL,  "FLOW: Start flow request from agent_client=%@ to endpoint=%@\n",  v5,  v7);
  }

  id v8 = (void *)nw_agent_client_copy_parameters(v5);
  if (v8)
  {
    if (dword_100132768 <= 30
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupFlowHandlers]_block_invoke",  30LL,  "FLOW: NWParameters=%@\n",  v8);
    }

    unsigned int v35 = [*(id *)(a1 + 32) _isTCPTransport:v8];
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[RPNWAgentClient findAgentClient:tryPort:isTCP:isFlowHandler:]( &OBJC_CLASS___RPNWAgentClient,  "findAgentClient:tryPort:isTCP:isFlowHandler:",  v5,  1LL));
    id v10 = v9;
    if (v9)
    {
      if ([v9 type] != (id)1
        || (id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 flowClient]), v11, !v11))
      {
        id v34 = v6;
        __int128 v12 = v10;
        id v10 = 0LL;
        goto LABEL_31;
      }

      if (dword_100132768 <= 30
        && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
      {
        LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupFlowHandlers]_block_invoke",  30LL,  "FLOW: Existing agent client is a listener, creating new agent client\n");
      }
    }

    else if (dword_100132768 <= 30 {
           && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
    }
    {
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupFlowHandlers]_block_invoke",  30LL,  "FLOW: Failed to find agent client, creating new agent client\n");
    }

    uint64_t v13 = objc_claimAutoreleasedReturnValue(+[RPNWAgentClient addAgentClient](&OBJC_CLASS___RPNWAgentClient, "addAgentClient"));
    if (!v13)
    {
      if (dword_100132768 <= 90
        && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL)))
      {
        LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupFlowHandlers]_block_invoke",  90LL,  "FLOW: Failed to create client\n");
      }

      goto LABEL_58;
    }

    __int128 v12 = (void *)v13;
    id v34 = v6;
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v10 applicationService]);
    [v12 setApplicationService:v14];

LABEL_31:
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _quicProtocolOptionsFromParameters:v8]);
    BOOL v33 = v15 != 0LL;

    uint64_t pid = nw_parameters_get_pid(v8);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getPersonaFromParameters:v8]);
    if (dword_100132768 <= 30
      && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
    {
      if (v15) {
        __int128 v17 = @"YES";
      }
      else {
        __int128 v17 = @"NO";
      }
      if (v35) {
        int v18 = @"YES";
      }
      else {
        int v18 = @"NO";
      }
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v16 substringToIndex:8]);
      LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupFlowHandlers]_block_invoke",  30LL,  "FLOW: Parameters from agent_client PID=%d, QUIC=%@ isTCP=%@ persona=%@",  pid,  v17,  v18,  v19);
    }

    *(void *)uu = 0LL;
    uint64_t v49 = 0LL;
    id v20 = (nw_endpoint *)nw_agent_client_copy_endpoint(v5);
    id v21 = v20;
    id v32 = v21;
    if (uuid_is_null(uu)
      || (uint64_t v23 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", uu)) == 0LL)
    {
      BOOL v22 = 0;
    }

    else
    {
      id v24 = v23;
      id v25 = (void *)objc_claimAutoreleasedReturnValue( +[RPNWNearbyInvitationEndpoint findEndpoint:]( &OBJC_CLASS___RPNWNearbyInvitationEndpoint,  "findEndpoint:",  v23));

      BOOL v22 = v25 != 0LL;
    }

    id v26 = (void *)objc_claimAutoreleasedReturnValue([v10 nearbyInvitationConnection]);

    if (v26) {
      int v27 = 1;
    }
    else {
      int v27 = v22;
    }
    BOOL v28 = *(void **)(a1 + 32);
    if (v27) {
      id v29 = 0LL;
    }
    else {
      id v29 = v16;
    }
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472LL;
    v37[2] = sub_10007BF54;
    v37[3] = &unk_100113D60;
    id v38 = v12;
    id v39 = v5;
    id v10 = v10;
    BOOL v46 = v33;
    char v47 = v35;
    int v45 = pid;
    id v40 = v10;
    id v41 = v16;
    uint64_t v42 = *(void *)(a1 + 32);
    id v43 = v8;
    id v6 = v34;
    id v44 = v34;
    id v30 = v16;
    id v31 = v12;
    [v28 executeAgentLogicInPersona:v29 pid:pid handlerDescription:@"Flow Request" handler:v37];

LABEL_58:
    goto LABEL_59;
  }

  if (dword_100132768 <= 90 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 90LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupFlowHandlers]_block_invoke",  90LL,  "FLOW: Failed to copy parameters from agent_client=%@\n",  v5);
  }
LABEL_59:
}

id sub_10007BF54(uint64_t a1)
{
  HIDWORD(v3) = *(_DWORD *)(a1 + 88);
  *(_WORD *)((char *)&v3 + 1) = *(_WORD *)(a1 + 92);
  LOBYTE(v3) = 1;
  objc_msgSend( *(id *)(a1 + 32),  "updateAgentClientInfo:browseResponse:listener:bundleID:advertiseDescriptor:browseDescriptor:isFlowHandler:isUsingQUI C:isTCP:agentClientPID:persona:",  *(void *)(a1 + 40),  0,  *(void *)(a1 + 48),  0,  0,  0,  v3,  *(void *)(a1 + 56));
  objc_msgSend( *(id *)(a1 + 32),  "setControlFlags:",  objc_msgSend(*(id *)(a1 + 64), "convertConnectionParametersToControlFlags:", *(void *)(a1 + 72)));
  return _[*(id *)(a1 + 64) startFlow:*(void *)(a1 + 32) listener:*(void *)(a1 + 48) client:*(void *)(a1 + 40) assign:*(void *)(a1 + 80) parameters:*(void *)(a1 + 72)];
}

void sub_10007BFD8(id a1, OS_nw_agent_client *a2)
{
  uint64_t v3 = a2;
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL)))
  {
    id v2 = (void *)nw_agent_client_copy_endpoint(v3);
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupFlowHandlers]_block_invoke_3",  30LL,  "FLOW: Stop flow request from agent_client=%@ to endpoint=%@\n",  v3,  v2);
  }

  +[RPNWAgentClient removeAgentClient:isFlowHandler:]( &OBJC_CLASS___RPNWAgentClient,  "removeAgentClient:isFlowHandler:",  v3,  1LL);
}

void sub_10007C110(id a1, OS_nw_agent_client *a2, id a3)
{
  id v5 = a2;
  id v4 = a3;
  if (dword_100132768 <= 30 && (dword_100132768 != -1 || _LogCategory_Initialize(&dword_100132768, 30LL))) {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupAssertHandlers:]_block_invoke",  30LL,  "Start activate request from agent_client=%@\n",  v5);
  }
}

void sub_10007C1A4(id a1, OS_nw_agent_client *a2)
{
  id v2 = a2;
  uint64_t v3 = v2;
  if (dword_100132768 <= 30
    && ((v5 = v2, dword_100132768 != -1) || (int v4 = _LogCategory_Initialize(&dword_100132768, 30LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_100132768,  "-[RPNWNetworkAgent setupAssertHandlers:]_block_invoke_2",  30LL,  "Stop activate request from agent_client=%@\n",  v3);
  }

  else
  {
  }

void sub_10007CA00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10007CA18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10007CA28(uint64_t a1)
{
}

void sub_10007CA30(uint64_t a1, void *a2)
{
  int v4 = a2;
  id v5 = v4;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL))
  {
    id v7 = v4;
    BOOL is_quic = nw_protocol_options_is_quic(v4);
    id v5 = v7;
    if (is_quic)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
      id v5 = v7;
    }
  }
}

void sub_10007CC50(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v2 = (void *)qword_100133598;
  qword_100133598 = (uint64_t)v1;
}

id sub_10007D2BC(uint64_t a1)
{
  if (dword_1001327D8 <= 30 && (dword_1001327D8 != -1 || _LogCategory_Initialize(&dword_1001327D8, 30LL)))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destinationDevice]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 name]);
    LogPrintF( &dword_1001327D8,  "-[RPNWAgentClient stopAgentClient]_block_invoke",  30LL,  "Invalidating requestID=%@ to peer=%@",  @"com.apple.oneapi.data",  v3);
  }

  [*(id *)(a1 + 32) deregisterRequestID:@"com.apple.oneapi.data"];
  return [*(id *)(a1 + 32) invalidate];
}

void sub_10007DD1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (dword_1001327D8 <= 90)
  {
    id v6 = v3;
    if (dword_1001327D8 != -1 || (v5 = _LogCategory_Initialize(&dword_1001327D8, 90LL), int v4 = v6, v5))
    {
      LogPrintF( &dword_1001327D8,  "-[RPNWAgentClient updateAgentClientInfo:browseResponse:listener:bundleID:advertiseDescriptor:browseDescriptor:is FlowHandler:isUsingQUIC:isTCP:agentClientPID:persona:]_block_invoke",  90LL,  "Application service server %@ received error %@\n",  *(void *)(*(void *)(a1 + 32) + 48LL),  v4);
      int v4 = v6;
    }
  }
}

uint64_t sub_10007DDB0(uint64_t result)
{
  if (dword_1001327D8 <= 90)
  {
    uint64_t v1 = result;
    if (dword_1001327D8 != -1) {
      return LogPrintF( &dword_1001327D8,  "-[RPNWAgentClient updateAgentClientInfo:browseResponse:listener:bundleID:advertiseDescriptor:browseDescri ptor:isFlowHandler:isUsingQUIC:isTCP:agentClientPID:persona:]_block_invoke_2",  90LL,  "Application service server %@ received interruption\n",  *(void *)(*(void *)(v1 + 32) + 48LL));
    }
    Class result = _LogCategory_Initialize(&dword_1001327D8, 90LL);
    if ((_DWORD)result) {
      return LogPrintF( &dword_1001327D8,  "-[RPNWAgentClient updateAgentClientInfo:browseResponse:listener:bundleID:advertiseDescriptor:browseDescri ptor:isFlowHandler:isUsingQUIC:isTCP:agentClientPID:persona:]_block_invoke_2",  90LL,  "Application service server %@ received interruption\n",  *(void *)(*(void *)(v1 + 32) + 48LL));
    }
  }

  return result;
}

void sub_10007F184(uint64_t a1, void *a2)
{
  id v26 = a2;
  uint64_t v4 = *(void *)(a1 + 40) & 0x380000103C00LL;
  int v5 = v4 == 0;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v26 model]);
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v26 model]);
    unsigned int v8 = [v7 containsString:@"?"];

    if (v4) {
      int v5 = v8 ^ 1;
    }
    else {
      int v5 = 1;
    }
  }

  int v9 = *(_DWORD *)(a1 + 48);
  if (v9 == -1) {
    goto LABEL_42;
  }
  int v10 = *(_DWORD *)(a1 + 48);
  if ((v9 & 1) != 0)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v26 model]);
    if ([v11 containsString:@"iPhone"])
    {
      unsigned int v12 = 1;
LABEL_39:

      goto LABEL_40;
    }

    id v25 = v11;
    int v10 = *(_DWORD *)(a1 + 48);
  }

  LOBYTE(v13) = v10;
  __int128 v14 = v26;
  if ((v10 & 2) == 0)
  {
LABEL_14:
    LOBYTE(v16) = v13;
    if ((v13 & 4) != 0)
    {
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v14 model]);
      if ([v17 containsString:@"Mac"])
      {
        unsigned int v12 = 1;
LABEL_35:

LABEL_36:
        __int128 v15 = v24;
        if ((v10 & 2) == 0) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }

      uint64_t v23 = v17;
      int v16 = *(_DWORD *)(a1 + 48);
      __int128 v14 = v26;
    }

    LOBYTE(v1_Block_object_dispose(va, 8) = v16;
    if ((v16 & 8) != 0)
    {
      id v2 = (void *)objc_claimAutoreleasedReturnValue([v14 model]);
      if ([v2 containsString:@"Watch"])
      {
        unsigned int v12 = 1;
LABEL_33:

LABEL_34:
        __int128 v17 = v23;
        if ((v13 & 4) == 0) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }

      int v18 = *(_DWORD *)(a1 + 48);
      __int128 v14 = v26;
    }

    if ((v18 & 0x10) != 0)
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v14 model]);
      if ([v19 containsString:@"AppleTV"])
      {

        unsigned int v12 = 1;
        goto LABEL_32;
      }

      if ((*(_BYTE *)(a1 + 48) & 0x20) == 0)
      {
        unsigned int v12 = 0;
LABEL_31:

LABEL_32:
        if ((v16 & 8) == 0) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }

      BOOL v22 = v19;
      __int128 v14 = v26;
    }

    else if ((v18 & 0x20) == 0)
    {
      unsigned int v12 = 0;
      goto LABEL_32;
    }

    id v20 = v2;
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v14 model]);
    unsigned int v12 = [v21 containsString:@"AudioAccessory"];

    id v2 = v20;
    uint64_t v19 = v22;
    if ((v18 & 0x10) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }

  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v26 model]);
  if (([v15 containsString:@"iPad"] & 1) == 0)
  {
    id v24 = v15;
    int v13 = *(_DWORD *)(a1 + 48);
    __int128 v14 = v26;
    goto LABEL_14;
  }

  unsigned int v12 = 1;
LABEL_37:

LABEL_38:
  id v11 = v25;
  if ((v9 & 1) != 0) {
    goto LABEL_39;
  }
LABEL_40:
  if (!v5 || v12) {
LABEL_42:
  }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10007F3E4(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 2) != 0) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16LL))();
  }
  return result;
}

uint64_t sub_10007F3F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10007F404(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v6 = v3;
    if (dword_100132848 <= 90
      && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 90LL)))
    {
      LogPrintF( &dword_100132848,  "-[RPNWPeer startDiscovery:applicationService:controlFlags:deviceFilter:connectedHandler:updateHandler:lostHandle r:invalidationHandler:]_block_invoke_4",  90LL,  "Failed to search for Rapport devices...");
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    goto LABEL_10;
  }

  if (dword_100132848 <= 30)
  {
    id v6 = 0LL;
    if (dword_100132848 != -1 || (v5 = _LogCategory_Initialize(&dword_100132848, 30LL), uint64_t v4 = 0LL, v5))
    {
      LogPrintF( &dword_100132848,  "-[RPNWPeer startDiscovery:applicationService:controlFlags:deviceFilter:connectedHandler:updateHandler:lostHandle r:invalidationHandler:]_block_invoke_4",  30LL,  "Searching for Rapport devices...");
LABEL_10:
      uint64_t v4 = v6;
    }
  }
}

void sub_10007F77C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!v3)
  {
LABEL_10:
    int v5 = *(void **)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10007F914;
    v10[3] = &unk_100113F58;
    uint64_t v7 = *(void *)(a1 + 56);
    id v8 = *(id *)(a1 + 64);
    void v10[4] = *(void *)(a1 + 40);
    id v11 = v8;
    LOBYTE(v9) = 0;
    [v5 sendWithRequestID:@"com.apple.oneapi.resolve" data:0 status:0 applicationService:v6 clientPublicKey:v7 listenerID:0 automapListener:v9 connectionID:0 responseHandler:v10];

    goto LABEL_13;
  }

  if ([v3 code] == (id)-6721)
  {
    if (dword_100132848 <= 30
      && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
    {
      LogPrintF( &dword_100132848,  "-[RPNWPeer resolvePeer:controlFlags:applicationService:clientPublicKey:resolveHandler:]_block_invoke",  30LL,  "Ignored error '%@'",  v4);
    }

    goto LABEL_10;
  }

  if (dword_100132848 <= 90 && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 90LL))) {
    LogPrintF( &dword_100132848,  "-[RPNWPeer resolvePeer:controlFlags:applicationService:clientPublicKey:resolveHandler:]_block_invoke",  90LL,  "Failed to resolve peer device '%@'. Error - %@",  *(void *)(a1 + 32),  v4);
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  [*(id *)(a1 + 40) invalidate];
LABEL_13:
}

id sub_10007F914(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_10007FA80(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v13 = a3;
  id v9 = a4;
  id v10 = a5;
  if (dword_100132848 <= 30 && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL))) {
    LogPrintF( &dword_100132848,  "-[RPNWPeer connectToOneAPIPeer:inboundConnection:applicationService:listenerID:automapListener:connectionID:connec tHandler:]_block_invoke",  30LL,  "Got response %s from device='%@'",  +[RPNWPeer responseCodeToString:](&OBJC_CLASS___RPNWPeer, "responseCodeToString:", a2),  *(void *)(a1 + 32));
  }
  if ((a2 - 1) > 1)
  {
    uint64_t v11 = 0LL;
    id v12 = 0LL;
  }

  else
  {
    uint64_t v11 = a2;
    id v12 = v10;
  }

  (*(void (**)(void, uint64_t, id))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v11, v12);
}

void sub_10007FDB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!v3 || [v3 code] == (id)-6721)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10007FFE0;
    v8[3] = &unk_100113690;
    id v9 = *(id *)(a1 + 32);
    id v5 = *(id *)(a1 + 80);
    id v10 = *(id *)(a1 + 40);
    id v11 = v5;
    [v10 setInvalidationHandler:v8];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) invalidationHandler]);
    [*(id *)(a1 + 40) setInterruptionHandler:v6];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) invalidationHandler]);
    [*(id *)(a1 + 40) setDisconnectHandler:v7];

    if (v4)
    {
      if (dword_100132848 > 30)
      {
LABEL_15:
        [*(id *)(a1 + 40) connectToOneAPIPeer:*(void *)(a1 + 32) inboundConnection:*(unsigned __int8 *)(a1 + 88) applicationService:*(void *)(a1 + 48) listenerID:*(void *)(a1 + 56) automapListener:*(unsigned __int8 *)(a1 + 89) connectionID:*(void *)(a1 + 64) connectHandler:*(void *)(a1 + 72)];

        goto LABEL_18;
      }

      if (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)) {
        LogPrintF( &dword_100132848,  "-[RPNWPeer connectToPeer:inboundConnection:controlFlags:applicationService:listenerID:automapListener:connecti onID:connectHandler:lostHandler:]_block_invoke",  30LL,  "Ignored error '%@'",  v4);
      }
    }

    if (dword_100132848 <= 30
      && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
    {
      LogPrintF( &dword_100132848,  "-[RPNWPeer connectToPeer:inboundConnection:controlFlags:applicationService:listenerID:automapListener:connection ID:connectHandler:lostHandler:]_block_invoke",  30LL,  "CompanionLink connected to device '%@'",  *(void *)(a1 + 32));
    }

    goto LABEL_15;
  }

  if (dword_100132848 <= 90 && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 90LL))) {
    LogPrintF( &dword_100132848,  "-[RPNWPeer connectToPeer:inboundConnection:controlFlags:applicationService:listenerID:automapListener:connectionID :connectHandler:lostHandler:]_block_invoke",  90LL,  "Failed to connect to device '%@'. Error - %@",  *(void *)(a1 + 32),  v4);
  }
  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
LABEL_18:
}

id sub_10007FFE0(uint64_t a1)
{
  if (dword_100132848 <= 30 && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL))) {
    LogPrintF( &dword_100132848,  "-[RPNWPeer connectToPeer:inboundConnection:controlFlags:applicationService:listenerID:automapListener:connectionID :connectHandler:lostHandler:]_block_invoke_2",  30LL,  "Lost connectivity to '%@'",  *(void *)(a1 + 32));
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  [*(id *)(a1 + 40) setInvalidationHandler:0];
  [*(id *)(a1 + 40) setInterruptionHandler:0];
  return [*(id *)(a1 + 40) setDisconnectHandler:0];
}

void sub_1000806E8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if ((a2 - 1) <= 1 && dword_100132848 <= 30)
  {
    id v10 = v5;
    if (dword_100132848 != -1 || (v9 = _LogCategory_Initialize(&dword_100132848, 30LL), uint64_t v6 = v10, v9))
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peer]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 destinationDevice]);
      LogPrintF( &dword_100132848,  "-[RPNWPeer findListenerAndCreateConnection:version:applicationService:listenerID:connectionID:]_block_invoke",  30LL,  "Successfully connected to peer='%@'\n",  v8);

      uint64_t v6 = v10;
    }
  }
}

void sub_1000807A8(id a1)
{
  if (dword_100132848 <= 90 && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 90LL))) {
    LogPrintF( &dword_100132848,  "-[RPNWPeer findListenerAndCreateConnection:version:applicationService:listenerID:connectionID:]_block_invoke_2",  90LL,  "Lost connection to peer\n");
  }
}

BOOL sub_100080860(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (dword_100132848 <= 30 && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
  {
    if (*(_BYTE *)(a1 + 32)) {
      id v13 = "SERVER";
    }
    else {
      id v13 = "CLIENT";
    }
    LogPrintF( &dword_100132848,  "-[RPNWPeer handleConnectionData:]_block_invoke",  30LL,  "RPNW-DATA %s Received data from peer",  v13);
  }

  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v11 connection]);
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 framer]);

  if (v15)
  {
    int v16 = (void *)objc_claimAutoreleasedReturnValue([v11 connection]);
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 framer]);
  }

  else
  {
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "listen_framer"));
  }

  BOOL v18 = +[RPNWFramer writeDataOnFramer:data:](&OBJC_CLASS___RPNWFramer, "writeDataOnFramer:data:", v17, v9);

  return v18;
}

void sub_1000809B8(id a1, RPNWAgentClient *a2, NSUUID *a3, int a4)
{
  uint64_t v4 = *(void *)&a4;
  uint64_t v6 = a2;
  uint64_t v7 = a3;
  if (dword_100132848 <= 40 && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 40LL))) {
    LogPrintF( &dword_100132848,  "-[RPNWPeer handleConnectionData:]_block_invoke_2",  40LL,  "Received connection status %s for connection %@",  +[RPNWPeer statusCodeToString:](&OBJC_CLASS___RPNWPeer, "statusCodeToString:", v4),  v7);
  }
  uint64_t v8 = objc_claimAutoreleasedReturnValue(-[RPNWAgentClient connection](v6, "connection"));
  if (v8
    && (id v9 = (void *)v8,
        id v10 = (void *)objc_claimAutoreleasedReturnValue(-[RPNWAgentClient connection](v6, "connection")),
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 framer]),
        v11,
        v10,
        v9,
        v11))
  {
    int v12 = v4 - 1;
    uint64_t v13 = 53LL;
    switch(v12)
    {
      case 0:
        goto LABEL_18;
      case 2:
        __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(-[RPNWAgentClient connection](v6, "connection"));
        if (dword_100132848 <= 30
          && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
        {
          __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 peer]);
          int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 destinationDevice]);
          LogPrintF( &dword_100132848,  "-[RPNWPeer handleConnectionData:]_block_invoke_2",  30LL,  "Connection %@ to device '%@' is viable",  v14,  v16);
        }

        BOOL v22 = (void *)objc_claimAutoreleasedReturnValue([v14 peer]);
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v14 peer]);
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 destinationDevice]);
        id v25 = [v14 inbound];
        id v26 = (void *)objc_claimAutoreleasedReturnValue([v14 applicationService]);
        int v27 = (void *)objc_claimAutoreleasedReturnValue([v14 endpointUUID]);
        BOOL v28 = (void *)objc_claimAutoreleasedReturnValue([v14 connectionUUID]);
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472LL;
        v30[2] = sub_100080DBC;
        v30[3] = &unk_100113B90;
        id v31 = v14;
        id v32 = v6;
        id v19 = v14;
        [v22 connectToOneAPIPeer:v24 inboundConnection:v25 applicationService:v26 listenerID:v27 automapListener:0 connectionID:v28 connectHandler:v30];

        goto LABEL_26;
      case 3:
        uint64_t v13 = 57LL;
        goto LABEL_18;
      case 4:
        id v19 = (id)objc_claimAutoreleasedReturnValue(-[RPNWAgentClient connection](v6, "connection"));
        if (dword_100132848 <= 30
          && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
        {
          id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 peer]);
          id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 destinationDevice]);
          LogPrintF( &dword_100132848,  "-[RPNWPeer handleConnectionData:]_block_invoke_2",  30LL,  "Connection %@ to device '%@' is ready",  v19,  v21);
        }

        [v19 setIsConnected:1];
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v19 framer]);
        +[RPNWFramer startConnection:](&OBJC_CLASS___RPNWFramer, "startConnection:", v29);

LABEL_26:
        break;
      default:
        uint64_t v13 = 50LL;
LABEL_18:
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(-[RPNWAgentClient connection](v6, "connection"));
        BOOL v18 = (void *)objc_claimAutoreleasedReturnValue([v17 framer]);
        +[RPNWFramer writeErrorOnFramer:error:](&OBJC_CLASS___RPNWFramer, "writeErrorOnFramer:error:", v18, v13);

        break;
    }
  }

  else if (dword_100132848 <= 90 {
         && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 90LL)))
  }
  {
    LogPrintF( &dword_100132848,  "-[RPNWPeer handleConnectionData:]_block_invoke_2",  90LL,  "Agent client has no connection framer");
  }
}

void sub_100080DBC(uint64_t a1, int a2, void *a3)
{
  id v10 = a3;
  if ((a2 - 1) > 1)
  {
    if (dword_100132848 <= 90
      && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 90LL)))
    {
      LogPrintF( &dword_100132848,  "-[RPNWPeer handleConnectionData:]_block_invoke_3",  90LL,  "Failed to connect to peer\n");
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) framer]);
    +[RPNWFramer writeErrorOnFramer:error:](&OBJC_CLASS___RPNWFramer, "writeErrorOnFramer:error:", v9, 61LL);
    goto LABEL_18;
  }

  if (dword_100132848 <= 30 && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peer]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 destinationDevice]);
    LogPrintF( &dword_100132848,  "-[RPNWPeer handleConnectionData:]_block_invoke_3",  30LL,  "Successfully connected to peer='%@'\n",  v6,  v10);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peer]);
  [v7 handleConnectionData:0];

  id v8 = [*(id *)(a1 + 40) type];
  if (a2 == 2 && v8 == (id)4)
  {
    if (dword_100132848 <= 30
      && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
    {
      LogPrintF( &dword_100132848,  "-[RPNWPeer handleConnectionData:]_block_invoke_3",  30LL,  "Outgoing connection ready, starting connection");
    }

    [*(id *)(a1 + 32) setIsConnected:1];
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) framer]);
    +[RPNWFramer startConnection:](&OBJC_CLASS___RPNWFramer, "startConnection:", v9);
LABEL_18:
  }
}

void sub_1000816DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"request"]);
  if (dword_100132848 <= 30 && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[RPNWNetworkAgent getLogInfo](&OBJC_CLASS___RPNWNetworkAgent, "getLogInfo"));
    [v10 length];
    uint64_t v49 = (uint64_t)v11;
    LogPrintF( &dword_100132848,  "-[RPNWPeer receiveWithRequestID:receiveHandler:]_block_invoke",  30LL,  "%@ RX DATA (%d bytes) from peer, requestID=%@\n");
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"status"]);
  uint64_t v13 = v12;
  uint64_t v55 = a1;
  if (v12) {
    unsigned int v14 = [v12 intValue];
  }
  else {
    unsigned int v14 = 0;
  }
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"version"]);
  int v16 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"applicationService"]);
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"clientPublicKey"]);
  id v24 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"senderID"]);
  if (v24)
  {
    unsigned int v50 = v14;
    id v53 = v8;
    id v25 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"senderIDS"]);
    if (dword_100132848 <= 30
      && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
    {
      LogPrintF( &dword_100132848,  "-[RPNWPeer receiveWithRequestID:receiveHandler:]_block_invoke",  30LL,  "appSvc=%@, SenderID=%@, SenderIDS='%@'\n",  v16,  v24,  v25);
    }

    id v57 = v17;
    id v26 = (void *)objc_claimAutoreleasedReturnValue( +[RPCompanionLinkDaemon sharedCompanionLinkDaemon]( &OBJC_CLASS___RPCompanionLinkDaemon,  "sharedCompanionLinkDaemon"));
    uint64_t v27 = objc_claimAutoreleasedReturnValue([v26 findServerClientFromID:v24 senderIDS:v25]);

    __int128 v60 = (void *)v27;
    if (!v27
      && dword_100132848 <= 30
      && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
    {
      LogPrintF( &dword_100132848,  "-[RPNWPeer receiveWithRequestID:receiveHandler:]_block_invoke",  30LL,  "Could not find client from sender ID\n");
    }

    __int128 v59 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"connectionID"]);
    __int128 v58 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"listenerID"]);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"automapListener"]);
    [v30 BOOLValue];

    uint64_t v54 = v16;
    if (dword_100132848 <= 30
      && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
    {
      v51 = (void *)objc_claimAutoreleasedReturnValue([v60 name]);
      id v31 = v24;
      id v32 = v25;
      BOOL v33 = v13;
      id v34 = v9;
      unsigned int v35 = v15;
      uint64_t v36 = v10;
      id v37 = v60;
      id v38 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
      -[NSMutableString appendFormat:](v38, "appendFormat:", @"%p", v37);

      id v10 = v36;
      __int128 v15 = v35;
      id v9 = v34;
      uint64_t v13 = v33;
      id v25 = v32;
      id v24 = v31;
      LogPrintF( &dword_100132848,  "-[RPNWPeer receiveWithRequestID:receiveHandler:]_block_invoke",  30LL,  "Request from %@:%@, senderID=%@, connectionID=%@ listenerID=%@\n",  v51,  v38,  v31,  v59,  v58);
    }

    uint64_t v39 = *(void *)(v55 + 40);
    v56 = v10;
    uint64_t v52 = v15;
    uint64_t v40 = (*(uint64_t (**)(uint64_t, void *, void *, void *, void))(v39 + 16))(v39, v10, v15, v60, v50);
    id v41 = 0LL;
    id v42 = 0LL;
    id v43 = 0LL;
    id v44 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    int v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v40));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v44, "setObject:forKeyedSubscript:", v45, @"response");
    if (v43)
    {
      if (dword_100132848 <= 30
        && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
      {
        LogPrintF( &dword_100132848,  "-[RPNWPeer receiveWithRequestID:receiveHandler:]_block_invoke",  30LL,  "Receive handler response code=%@, listenerID=%@\n",  v45,  v43);
      }

      BOOL v46 = @"listenerID";
      char v47 = v44;
      id v48 = v43;
    }

    else
    {
      if (!v41 || !v42)
      {
        if (dword_100132848 <= 30
          && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
        {
          LogPrintF( &dword_100132848,  "-[RPNWPeer receiveWithRequestID:receiveHandler:]_block_invoke",  30LL,  "Receive handler response code=%@\n",  v45);
        }

        goto LABEL_44;
      }

      if (dword_100132848 <= 30
        && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
      {
        LogPrintF( &dword_100132848,  "-[RPNWPeer receiveWithRequestID:receiveHandler:]_block_invoke",  30,  "Receive handler response code=%@, serverPublicKey=%zu bytes, bonjourServiceID=%@",  v45,  [v41 length],  v42);
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:]( v44,  "setObject:forKeyedSubscript:",  v41,  @"serverPublicKey");
      BOOL v46 = @"bonjourServiceID";
      char v47 = v44;
      id v48 = v42;
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](v47, "setObject:forKeyedSubscript:", v48, v46);
LABEL_44:
    (*((void (**)(id, NSMutableDictionary *, void, void))v9 + 2))(v9, v44, 0LL, 0LL);

    __int128 v15 = v52;
    id v8 = v53;
    int v16 = v54;
    id v10 = v56;
    __int128 v17 = v57;
    goto LABEL_45;
  }

  if (dword_100132848 <= 90 && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 90LL))) {
    LogPrintF( &dword_100132848,  "-[RPNWPeer receiveWithRequestID:receiveHandler:]_block_invoke",  90LL,  "No sender ID, discarding\n");
  }
  id v28 = RPErrorF(4294960591LL, (uint64_t)"Missing sender ID", v18, v19, v20, v21, v22, v23, v49);
  id v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  (*((void (**)(id, void, void, void *))v9 + 2))(v9, 0LL, 0LL, v29);

LABEL_45:
}

void sub_1000821A4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v18 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destinationDevice]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 name]);
LABEL_5:

LABEL_14:
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    goto LABEL_17;
  }

  if (!v18)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destinationDevice]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 name]);
    goto LABEL_5;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"response"]);
  id v12 = [v11 intValue];

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"serverPublicKey"]);
  unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"bonjourServiceID"]);
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"listenerID"]);
  if (dword_100132848 <= 30 && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL)))
  {
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destinationDevice]);
    int v16 = (void *)objc_claimAutoreleasedReturnValue([v17 name]);
    LogPrintF( &dword_100132848,  "-[RPNWPeer sendWithRequestID:data:status:applicationService:clientPublicKey:listenerID:automapListener:connectionI D:responseHandler:]_block_invoke",  30,  "RX RESP from '%@': requestID=%@ appSvc=%@ response=%s serverPublicKey=%zu bytes bonjourServiceID=%@ listener=%@ error=%@\n",  v16,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  +[RPNWPeer responseCodeToString:](RPNWPeer, "responseCodeToString:", v12),  [v13 length],  v14,  v15,  0);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();

LABEL_17:
}

uint64_t sub_10008251C( uint64_t a1, void *a2, void *a3, void *a4, int a5, void *a6, void *a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  id v18 = a2;
  id v19 = a3;
  id v20 = a4;
  id v21 = a6;
  id v22 = a7;
  id v23 = a10;
  id v24 = a12;
  id v25 = v24;
  if (v21 && v24)
  {
    id v26 = (void *)objc_claimAutoreleasedReturnValue( +[RPNWAgentClient findAgentClientFromConnectionID:]( &OBJC_CLASS___RPNWAgentClient,  "findAgentClientFromConnectionID:",  v24));
    if (v26)
    {
      if (v18)
      {
        else {
          uint64_t v27 = 0LL;
        }
        goto LABEL_24;
      }

      if (a5)
      {
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        uint64_t v27 = 2LL;
LABEL_24:

        goto LABEL_25;
      }

      if (dword_100132848 <= 90
        && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 90LL)))
      {
        LogPrintF( &dword_100132848,  "-[RPNWPeer receiveDataForConnection:statusHandler:]_block_invoke",  90LL,  "Not a valid data request, returning\n");
      }
    }

    else if (dword_100132848 <= 90 {
           && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 90LL)))
    }
    {
      LogPrintF( &dword_100132848,  "-[RPNWPeer receiveDataForConnection:statusHandler:]_block_invoke",  90LL,  "Failed to find agent client for connection\n");
    }

    uint64_t v27 = 0LL;
    goto LABEL_24;
  }

  if (dword_100132848 <= 90 && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 90LL))) {
    LogPrintF( &dword_100132848,  "-[RPNWPeer receiveDataForConnection:statusHandler:]_block_invoke",  90LL,  "Not a valid data request, returning\n");
  }
  uint64_t v27 = 0LL;
LABEL_25:

  return v27;
}

uint64_t sub_1000827F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008293C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v12 = a3;
  id v9 = a4;
  id v10 = a5;
  if (dword_100132848 <= 30 && (dword_100132848 != -1 || _LogCategory_Initialize(&dword_100132848, 30LL))) {
    LogPrintF( &dword_100132848,  "-[RPNWPeer sendStatusUpdateForConnection:connectionID:status:responseHandler:]_block_invoke",  30LL,  "Status update got response %s",  +[RPNWPeer responseCodeToString:](&OBJC_CLASS___RPNWPeer, "responseCodeToString:", a2));
  }
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v11, a2);
  }
}

void sub_100082B30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (v3)
  {
    if (dword_1001328B8 <= 90)
    {
      if (dword_1001328B8 != -1 || (int v4 = _LogCategory_Initialize(&dword_1001328B8, 90LL), v3 = v5, v4)) {
        LogPrintF( &dword_1001328B8,  "-[RPNearbyActionV2Advertiser activateWithCompletion:]_block_invoke",  90LL,  " ### BLE NearbyActionV2 advertiser failed to start: %@\n",  v3);
      }
    }
  }

  else if (dword_1001328B8 <= 30 {
         && (dword_1001328B8 != -1 || _LogCategory_Initialize(&dword_1001328B8, 30LL)))
  }
  {
    LogPrintF( &dword_1001328B8,  "-[RPNearbyActionV2Advertiser activateWithCompletion:]_block_invoke",  30LL,  "BLE NearbyActionV2 advertiser started\n");
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

const char *sub_100082D70(unsigned int a1)
{
  if (a1 > 0x58) {
    return "?";
  }
  else {
    return (&off_100114110)[(char)a1];
  }
}

Class sub_100083018()
{
  if (qword_1001335B0 != -1) {
    dispatch_once(&qword_1001335B0, &stru_1001140F0);
  }
  Class result = objc_getClass("CBAdvertiser");
  qword_1001335A8 = (uint64_t)result;
  off_100132928 = (uint64_t (*)())sub_100083074;
  return result;
}

id sub_100083074()
{
  return (id)qword_1001335A8;
}

void sub_100083080(id a1)
{
  qword_1001335B8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreBluetooth.framework/CoreBluetooth", 2);
}

void sub_10008314C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___RPPeopleDaemon);
  id v2 = (void *)qword_1001335C0;
  qword_1001335C0 = (uint64_t)v1;
}

void sub_100083800( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,char a52)
{
}

uint64_t sub_100083868(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100083878(uint64_t a1)
{
}

void sub_100083880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v3 + 40);
  uint64_t v4 = CUDescriptionWithLevel(a3, *(unsigned int *)(a1 + 40));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  NSAppendPrintF(&obj, "    %@\n", v5);
  objc_storeStrong((id *)(v3 + 40), obj);
}

id sub_100083940(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

id sub_100083B60(uint64_t a1)
{
  id result = (id)*(unsigned int *)(*(void *)(a1 + 32) + 8LL);
  if ((_DWORD)result != -1)
  {
    uint64_t state64 = 0LL;
    notify_get_state((int)result, &state64);
    *(_DWORD *)(*(void *)(a1 + 32) + 12LL) = state64;
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      int v3 = *(_DWORD *)(*(void *)(a1 + 32) + 12LL);
      else {
        uint64_t v4 = (&off_100114738)[v3 - 1];
      }
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _activate]_block_invoke",  30LL,  "AirDrop mode changed: %s (%d)\n",  v4,  v3);
    }

    return [*(id *)(a1 + 32) _update];
  }

  return result;
}

id sub_100083C34(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_100083C3C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _primaryAppleID:1];
}

id sub_100083C60(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_100083C68(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_100083CC8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidate];
}

void sub_100084108(id a1, NSString *a2, RPIdentity *a3, BOOL *a4)
{
  uint64_t v4 = a3;
  -[RPIdentity setDateRequested:](v4, "setDateRequested:", 0LL);
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
  [v5 saveIdentity:v4 error:0];
}

LABEL_88:
      -[RPPeopleDaemon _sendCloudIdentityFrameType:destinationID:flags:msgCtx:]( self,  "_sendCloudIdentityFrameType:destinationID:flags:msgCtx:",  v18,  v11,  1LL,  v17);
      goto LABEL_89;
    }

    self->_prefFriendSuggestPollSeconds = v33;
  }

  unsigned int v35 = CFPrefs_GetInt64(@"com.apple.rapport", @"frSyncDelaySecs", &v69);
  if (v69)
  {
    if (DeviceClass <= 0xB && ((1 << DeviceClass) & 0x80E) != 0 || DeviceClass == 100)
    {
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
      id v37 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKey:@"rapport-friend-keys-initial-delay"]);

      if (v37)
      {
        unsigned int v35 = CFGetInt64(v37, &v69);
        id v38 = "server";
      }

      else
      {
        id v38 = "default";
      }
    }

    else
    {
      id v38 = "disabled";
      unsigned int v35 = -1LL;
    }
  }

  else
  {
    id v38 = "pref";
  }

  prefFriendSyncDelaySeconds = self->_prefFriendSyncDelaySeconds;
  if (v35 != prefFriendSyncDelaySeconds)
  {
    if (dword_100132930 <= 30)
    {
      if (dword_100132930 == -1)
      {
        prefFriendSyncDelaySeconds = self->_prefFriendSyncDelaySeconds;
      }

      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon prefsChanged]",  30LL,  "FriendSyncDelaySeconds: %lld -> %lld (%s)\n",  prefFriendSyncDelaySeconds,  v35,  v38);
    }

void sub_100084A88(id a1, NSString *a2, RPIdentity *a3, BOOL *a4)
{
  id v7 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[RPIdentity dateRemoved](v7, "dateRemoved"));

  if (!v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[RPIdentity dateRequested](v7, "dateRequested"));

    if (v5)
    {
      -[RPIdentity setDateRequested:](v7, "setDateRequested:", 0LL);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
      [v6 saveIdentity:v7 error:0];
    }
  }
}

void sub_100084B10(id a1, NSString *a2, RPIdentity *a3, BOOL *a4)
{
  id v7 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[RPIdentity dateRemoved](v7, "dateRemoved"));

  if (!v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[RPIdentity dateRequested](v7, "dateRequested"));

    if (v5)
    {
      -[RPIdentity setDateRequested:](v7, "setDateRequested:", 0LL);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
      [v6 saveIdentity:v7 error:0];
    }
  }
}

void sub_100084F44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void *sub_100084F98(void *result)
{
  uint64_t v1 = *(void *)(*(void *)(result[5] + 8LL) + 40LL);
  if (v1)
  {
    id v2 = result;
    if (dword_100132930 > 90) {
      goto LABEL_6;
    }
    if (dword_100132930 == -1)
    {
      id result = (void *)_LogCategory_Initialize(&dword_100132930, 90LL);
      if (!(_DWORD)result)
      {
LABEL_6:
        if (v2[6])
        {
          id result = *(id *)(*(void *)(v2[5] + 8LL) + 40LL);
          *(void *)v2[6] = result;
        }

        return result;
      }

      uint64_t v1 = *(void *)(*(void *)(v2[5] + 8LL) + 40LL);
    }

    id result = (void *)LogPrintF( &dword_100132930,  "-[RPPeopleDaemon addOrUpdateIdentity:error:]_block_invoke",  90LL,  "### AddOrUpdateIdentity failed: %@, %{error}\n",  v2[4],  v1);
    goto LABEL_6;
  }

  return result;
}

LABEL_33:
  if (v13 < 1)
  {
    prefFriendRefreshSeconds = 0LL;
  }

  else
  {
    prefFriendRefreshSeconds = 0LL;
    __int128 v17 = self->_prefFriendRefreshMaxSeconds;
    if (v17 >= 1 && v13 < v17) {
      prefFriendRefreshSeconds = arc4random()
    }
                               % (self->_prefFriendRefreshMaxSeconds - self->_prefFriendRefreshMinSeconds + 1)
                               + v13;
  }
}

LABEL_73:
    self->_prefFriendSuggestMax = v19;
  }

  id v30 = CFPrefs_GetInt64(@"com.apple.rapport", @"frSuggestPollSecs", &v69);
  if (v30 <= 0x7FFFFFFF && v30 >= -1 && v69 == 0) {
    BOOL v33 = v30;
  }
  else {
    BOOL v33 = 3600LL;
  }
  prefFriendSuggestPollSeconds = self->_prefFriendSuggestPollSeconds;
  if (v33 != prefFriendSuggestPollSeconds)
  {
    if (dword_100132930 <= 30)
    {
      if (dword_100132930 == -1)
      {
        LODWORD(prefFriendSuggestPollSeconds) = self->_prefFriendSuggestPollSeconds;
      }

      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon prefsChanged]",  30LL,  "FriendSuggestPollSeconds: %d -> %lld\n",  prefFriendSuggestPollSeconds,  v33);
    }

LABEL_147:
    self->_prefPrivacyCoalesceMinSecs = v51;
  }

  id v53 = CFPrefs_GetDouble(@"com.apple.rapport", @"pdPrivacyCoalesceMax", &v69);
  if (v69) {
    uint64_t v54 = 900.0;
  }
  else {
    uint64_t v54 = v53;
  }
  prefPrivacyCoalesceMaxSecs = self->_prefPrivacyCoalesceMaxSecs;
  if (v54 != prefPrivacyCoalesceMaxSecs)
  {
    if (dword_100132930 <= 30)
    {
      if (dword_100132930 == -1)
      {
        prefPrivacyCoalesceMaxSecs = self->_prefPrivacyCoalesceMaxSecs;
      }

      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon prefsChanged]",  30LL,  "PeoplePrivacyCoalesceMaxSeconds: %.0f -> %.0f\n",  prefPrivacyCoalesceMaxSecs,  v54);
    }

LABEL_156:
    self->_prefPrivacyCoalesceMaxSecs = v54;
  }

  v56 = CFPrefs_GetInt64(@"com.apple.rapport", @"pdStrangers", &v69);
  id v57 = v56 != 0;
  if (self->_prefPeopleStrangers != v57)
  {
    if (dword_100132930 <= 30)
    {
      __int128 v58 = v56;
      if (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL))
      {
        __int128 v59 = "yes";
        if (v58) {
          __int128 v60 = "no";
        }
        else {
          __int128 v60 = "yes";
        }
        if (!v58) {
          __int128 v59 = "no";
        }
        LogPrintF(&dword_100132930, "-[RPPeopleDaemon prefsChanged]", 30LL, "PeopleStrangers: %s -> %s\n", v60, v59);
      }
    }

    self->_prefPeopleStrangers = v57;
  }

  if (CFPrefs_GetInt64(@"com.apple.rapport", @"pdTrackWhileAsleep", &v69)) {
    __int128 v61 = 6;
  }
  else {
    __int128 v61 = 5;
  }
  if (v69) {
    v62 = 0;
  }
  else {
    v62 = v61;
  }
  prefTrackWhileAsleepState = self->_prefTrackWhileAsleepState;
  if (v62 != prefTrackWhileAsleepState)
  {
    if (dword_100132930 <= 30)
    {
      if (dword_100132930 != -1)
      {
LABEL_177:
        if (prefTrackWhileAsleepState >= 8)
        {
          if (prefTrackWhileAsleepState <= 9) {
            v64 = "?";
          }
          else {
            v64 = "User";
          }
        }

        else
        {
          v64 = (&off_100114750)[prefTrackWhileAsleepState];
        }

        LogPrintF( &dword_100132930,  "-[RPPeopleDaemon prefsChanged]",  30LL,  "People track while asleep enabled: %s -> %s\n",  v64,  (&off_100114790)[v62]);
        goto LABEL_185;
      }

      if (_LogCategory_Initialize(&dword_100132930, 30LL))
      {
        prefTrackWhileAsleepState = self->_prefTrackWhileAsleepState;
        goto LABEL_177;
      }
    }

LABEL_185:
    self->_prefTrackWhileAsleepState = v62;
  }

  v65 = CFPrefs_GetInt64(@"com.apple.rapport", @"oneTimeDateRequestedResetCompleted", &v69) != 0;
  v66 = v69;
  if (!v69) {
    goto LABEL_192;
  }
  if (dword_100132930 <= 30)
  {
    if (dword_100132930 == -1)
    {
      v66 = v69;
    }

    LogPrintF( &dword_100132930,  "-[RPPeopleDaemon prefsChanged]",  30LL,  "OneTimeDateRequestedResetCompleted: error returned %d\n",  v66);
  }

LABEL_191:
  v65 = 0;
LABEL_192:
  if (self->_prefOneTimeDateRequestedResetCompleted != v65)
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      v67 = "yes";
      if (v65) {
        v68 = "no";
      }
      else {
        v68 = "yes";
      }
      if (!v65) {
        v67 = "no";
      }
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon prefsChanged]",  30LL,  "OneTimeDateRequestedResetCompleted: %s -> %s\n",  v68,  v67);
    }

    self->_prefOneTimeDateRequestedResetCompleted = v65;
  }

  -[RPPeopleDaemon _update](self, "_update");
}

void sub_100085F04(id a1, NSString *a2, RPIdentity *a3, BOOL *a4)
{
  uint64_t v4 = a3;
  -[RPIdentity setDateRequested:](v4, "setDateRequested:", 0LL);
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
  [v5 saveIdentity:v4 error:0];
}

void sub_100085F5C(id a1, NSString *a2, RPIdentity *a3, BOOL *a4)
{
  uint64_t v4 = a3;
  -[RPIdentity setDateRequested:](v4, "setDateRequested:", 0LL);
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
  [v5 saveIdentity:v4 error:0];
}

_DWORD *sub_100086528(uint64_t a1, uint64_t a2)
{
  id result = *(_DWORD **)(a1 + 32);
  if (result[8] == *(_DWORD *)(a1 + 40)) {
    return [result _daemonDeviceFound:a2];
  }
  return result;
}

_DWORD *sub_10008654C(uint64_t a1, uint64_t a2)
{
  id result = *(_DWORD **)(a1 + 32);
  if (result[8] == *(_DWORD *)(a1 + 40)) {
    return _[result _daemonDeviceLost:a2];
  }
  return result;
}

_DWORD *sub_100086570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = *(_DWORD **)(a1 + 32);
  if (result[8] == *(_DWORD *)(a1 + 40)) {
    return _[result _daemonDeviceChanged:a2 changes:a3];
  }
  return result;
}

uint64_t sub_100086598(uint64_t result)
{
  int v1 = *(_DWORD *)(*(void *)(result + 32) + 32LL);
  if (v1 == *(_DWORD *)(result + 40) && dword_100132930 <= 60)
  {
    if (dword_100132930 != -1) {
      return LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _discoveryEnsureStarted]_block_invoke_4",  60LL,  "### Device discovery interrupted ID %u\n",  v1);
    }
    uint64_t v2 = result;
    id result = _LogCategory_Initialize(&dword_100132930, 60LL);
    if ((_DWORD)result)
    {
      int v1 = *(_DWORD *)(v2 + 40);
      return LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _discoveryEnsureStarted]_block_invoke_4",  60LL,  "### Device discovery interrupted ID %u\n",  v1);
    }
  }

  return result;
}

uint64_t sub_10008662C(uint64_t result)
{
  if (dword_100132930 <= 30)
  {
    uint64_t v1 = result;
    if (dword_100132930 != -1) {
      return LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _discoveryEnsureStarted]_block_invoke_5",  30LL,  "Device discovery invalidated ID %u\n",  *(_DWORD *)(v1 + 32));
    }
    id result = _LogCategory_Initialize(&dword_100132930, 30LL);
    if ((_DWORD)result) {
      return LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _discoveryEnsureStarted]_block_invoke_5",  30LL,  "Device discovery invalidated ID %u\n",  *(_DWORD *)(v1 + 32));
    }
  }

  return result;
}

void sub_1000866A8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  int v3 = v2;
  if (v2)
  {
    if (dword_100132930 <= 90)
    {
      uint64_t v6 = v2;
      if (dword_100132930 != -1 || (int v4 = _LogCategory_Initialize(&dword_100132930, 90LL), v3 = v6, v4))
      {
        LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _discoveryEnsureStarted]_block_invoke_6",  90LL,  "### Device discovery start failed: %{error}\n",  v3);
LABEL_8:

        return;
      }
    }
  }

  else if (dword_100132930 <= 30)
  {
    uint64_t v6 = 0LL;
    if (dword_100132930 != -1 || (v5 = _LogCategory_Initialize(&dword_100132930, 30LL), int v3 = 0LL, v5))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _discoveryEnsureStarted]_block_invoke_6",  30LL,  "Device discovery started\n");
      goto LABEL_8;
    }
  }
}

void sub_100086F60(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
  [v1 postDaemonInfoChanges:1024];
}

id sub_100086FA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_100086FA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_100086FB0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_100086FB8(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[RPDaemon sharedDaemon](&OBJC_CLASS___RPDaemon, "sharedDaemon"));
  [v1 postDaemonInfoChanges:1024];
}

void sub_100087774( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
}

void sub_1000877B8(id a1, NSString *a2, RPIdentity *a3, BOOL *a4)
{
}

void sub_1000877C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  if (([v7 present] & 1) == 0)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue([v7 dateRemoved]);

    if (!v4)
    {
      int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v7 setDateRemoved:v5];

      if (dword_100132930 <= 30
        && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
      {
        LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFamilyAccounts]_block_invoke_2",  30LL,  "Marking family account identity removed: %@\n",  v7);
      }

      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
      [v6 saveIdentity:v7 error:0];

      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    }
  }
}

void sub_1000881B8(void *a1, void *a2, void *a3)
{
  id v8 = a2;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([a3 accountID]);
  unsigned int v6 = [v5 isEqualToString:a1[4]];

  if (v6)
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _pruneFamilyDevices]_block_invoke",  30LL,  "Prune family device account identity: %@\n",  a1[5]);
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
    [v7 removeIdentity:a1[5] error:0];

    [*(id *)(a1[6] + 120) setObject:0 forKeyedSubscript:v8];
  }
}

void sub_100088570( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

void sub_1000885D8(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 dateRemoved]);

  if (!v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 dateRequested]);
    if (!v7) {
      goto LABEL_32;
    }
    id v8 = (RPCloudMessageContext *)objc_claimAutoreleasedReturnValue([v5 dateAcknowledged]);
    [v7 timeIntervalSinceNow];
    double v10 = -v9;
    uint32_t v11 = arc4random() % 0x3F481 + 1468800;
    if (v8)
    {
      if (v10 >= (double)v11)
      {
        if (dword_100132930 <= 30
          && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
        {
          LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFamilySyncing]_block_invoke",  30LL,  "Refreshing acknowledged family identity: requested %ll{dur} ago, %@\n",  (unint64_t)v10,  v5);
        }

        uint64_t v12 = *(void *)(a1 + 56);
LABEL_30:
        ++*(_DWORD *)(*(void *)(v12 + 8) + 24LL);
LABEL_31:

LABEL_32:
        id v8 = objc_alloc_init(&OBJC_CLASS___RPCloudMessageContext);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _primaryAppleID:0]);
        -[RPCloudMessageContext setSendersKnownAlias:](v8, "setSendersKnownAlias:", v13);

        *(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 30;
        if ([*(id *)(a1 + 40) _sendCloudIdentityFrameType:32 destinationID:v17 flags:0 msgCtx:v8])
        {
          unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          [v5 setDateRequested:v14];

          __int128 v15 = (void *)objc_claimAutoreleasedReturnValue( +[RPIdentityDaemon sharedIdentityDaemon]( &OBJC_CLASS___RPIdentityDaemon,  "sharedIdentityDaemon"));
          [v15 saveIdentity:v5 error:0];

          uint64_t v16 = *(void *)(a1 + 96);
        }

        else
        {
          uint64_t v16 = *(void *)(a1 + 88);
        }

LABEL_37:
        ++*(_DWORD *)(*(void *)(v16 + 8) + 24LL);
        goto LABEL_38;
      }
    }

    else if (v10 >= (double)v11)
    {
      if (dword_100132930 <= 30
        && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
      {
        LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFamilySyncing]_block_invoke",  30LL,  "Retrying unacknowledged family identity: requested %ll{dur} ago, %@\n",  (unint64_t)v10,  v5);
      }

      uint64_t v12 = *(void *)(a1 + 64);
      goto LABEL_30;
    }

    if (!*(_BYTE *)(a1 + 104))
    {
      if (dword_100132930 <= 10
        && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 10LL)))
      {
        LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFamilySyncing]_block_invoke",  10LL,  "Skipping requested family identity: requested %ll{dur} ago, %@\n",  (unint64_t)v10,  v5);
      }

      uint64_t v16 = *(void *)(a1 + 72);
      goto LABEL_37;
    }

    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFamilySyncing]_block_invoke",  30LL,  "Updating family identity on rename: %{mask}, requested %ll{dur} ago, %@\n",  *(void *)(a1 + 32),  (unint64_t)v10,  v5);
    }

    goto LABEL_31;
  }

  if (dword_100132930 <= 10 && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 10LL))) {
    LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFamilySyncing]_block_invoke",  10LL,  "Skipping removed family identity: %@\n",  v5);
  }
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
LABEL_38:
}

    uint32_t v11 = (OS_dispatch_source *)dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
    uint64_t v12 = self->_friendsSuggestedPollTimer;
    self->_friendsSuggestedPollTimer = v11;
    uint64_t v13 = v11;

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_100089C78;
    void v20[3] = &unk_100111968;
    v20[4] = v13;
    v20[5] = self;
    dispatch_source_set_event_handler(v13, v20);
    CUDispatchTimerSet( v13,  (double)self->_prefFriendSuggestPollSeconds,  (double)self->_prefFriendSuggestPollSeconds,  1.0);
    dispatch_activate(v13);
  }

void sub_1000893B0(_Unwind_Exception *a1)
{
}

void sub_1000893CC(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([a3 model]);
  if (v6)
  {
    id v8 = v6;
    BOOL v7 = GestaltProductTypeStringToDeviceClass() == 7;
    unsigned int v6 = v8;
    if (v7)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) |= 4uLL;
      *a4 = 1;
    }
  }
}

id sub_100089558(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateFriendPrivacy];
}

void *sub_100089560(void *result)
{
  if (*(_DWORD *)(result[4] + 368LL) != -1)
  {
    uint64_t v1 = result;
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _friendsEnsureStarted]_block_invoke_2",  30LL,  "Privacy changed notified\n");
    }

    return [*(id *)(v1[4] + 360) trigger];
  }

  return result;
}

void *sub_100089BE0(void *result)
{
  if (*(_DWORD *)(result[4] + 204LL) != -1)
  {
    uint64_t v1 = result;
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _friendsUpdateSuggestedIfNeeded]_block_invoke",  30LL,  "Friends update suggested notified\n");
    }

    *(_BYTE *)(v1[4] + 201LL) = 1;
    return [(id)v1[4] _friendsUpdateSuggestedIfNeeded];
  }

  return result;
}

void *sub_100089C78(void *result)
{
  if (result[4] == *(void *)(result[5] + 208LL))
  {
    uint64_t v1 = result;
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _friendsUpdateSuggestedIfNeeded]_block_invoke_2",  30LL,  "Friends update suggested poll\n");
    }

    [(id)v1[5] prefsChanged];
    *(_BYTE *)(v1[5] + 201LL) = 1;
    return [(id)v1[5] _friendsUpdateSuggestedIfNeeded];
  }

  return result;
}

void sub_100089D18(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  *(_BYTE *)(*(void *)(a1 + 32) + 200LL) = 0;
  [*(id *)(a1 + 40) invalidate];
  if (v6)
  {
    if (dword_100132930 <= 90
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 90LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _friendsUpdateSuggestedIfNeeded]_block_invoke_3",  90LL,  "### Friends update suggested failed: %{error}\n",  v6);
    }
  }

  else
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _friendsUpdateSuggestedIfNeeded]_block_invoke_3",  30,  "Friends update suggested got: %d results(s)\n",  [v7 count]);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 192LL), a2);
    *(_BYTE *)(*(void *)(a1 + 32) + 276LL) = 1;
    [*(id *)(a1 + 32) _updateFriendIdentities];
  }
}

void sub_10008B100( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

void sub_10008B170(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  unsigned __int8 v4 = [v9 userAdded];
  id v5 = v9;
  if ((v4 & 1) == 0)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v9 dateAdded]);
    double v7 = *(double *)(a1 + 32);
    [v6 timeIntervalSinceReferenceDate];
    if (vabdd_f64(v7, v8) >= 86400.0) {
      [v9 setPresent:0];
    }

    id v5 = v9;
  }
}

void sub_10008B1F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  if (([v7 present] & 1) == 0)
  {
    unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([v7 dateRemoved]);

    if (!v4)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v7 setDateRemoved:v5];

      if (dword_100132930 <= 30
        && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
      {
        LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFriendAccounts]_block_invoke_2",  30LL,  "Marking friend account identity removed: %@\n",  v7);
      }

      id v6 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
      [v6 saveIdentity:v7 error:0];

      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    }
  }
}

void sub_10008BE40(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([a3 contactID]);
  if (v4)
  {
    id v5 = v4;
    [*(id *)(a1 + 32) addObject:v4];
    unsigned __int8 v4 = v5;
  }
}

void sub_10008BE8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  *(_BYTE *)(*(void *)(a1 + 32) + 176LL) = 0;
  [*(id *)(a1 + 40) invalidate];
  id v7 = v5;
  if (!v7 || v6)
  {
    if (dword_100132930 <= 90
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 90LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFriendPrivacy]_block_invoke_2",  90LL,  "### Friends privacy get failed: %{error}\n",  v6);
    }
  }

  else
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFriendPrivacy]_block_invoke_2",  30,  "Friends privacy got: %d results(s)\n",  [v7 count]);
    }

    [*(id *)(a1 + 32) _updateFriendPrivacyResults:v7];
  }
}

void sub_10008C3B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_10008C3E0(void *a1, void *a2, void *a3, _BYTE *a4)
{
  id v11 = a2;
  id v8 = a3;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 contactID]);
  unsigned int v10 = [v9 isEqual:a1[4]];

  if (v10)
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8LL) + 40LL), a3);
    objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a2);
    *a4 = 1;
  }
}

void sub_10008CB78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_10008CC10(uint64_t a1, void *a2, void *a3)
{
  id v22 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 dateRemoved]);

  if (!v6)
  {
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
    {
      if (dword_100132930 <= 10
        && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 10LL)))
      {
        LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFriendSyncing]_block_invoke",  10LL,  "Friend sync: skipping friend identity (max requests reached)",  v5);
      }

      uint64_t v7 = *(void *)(a1 + 56);
      goto LABEL_17;
    }

    if (!*(_BYTE *)(*(void *)(a1 + 32) + 384LL))
    {
      if (dword_100132930 <= 30
        && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
      {
        LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFriendSyncing]_block_invoke",  30LL,  "Friend sync: making the one-time dateRequested refresh",  v5);
      }

      [v5 setDateRequested:0];
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 dateRequested]);
    id v9 = v8;
    if (!v8) {
      goto LABEL_48;
    }
    [v8 timeIntervalSinceNow];
    double v11 = -v10;
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 312LL);
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v5 dateAcknowledged]);
    unsigned int v14 = (RPCloudMessageContext *)v13;
    if (v12 <= 0)
    {
      if (dword_100132930 <= 10
        && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 10LL)))
      {
        LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFriendSyncing]_block_invoke",  10LL,  "Friend sync: friend identity refresh disabled: requested %ll{dur} ago, %@\n",  (unint64_t)v11,  v5);
      }
    }

    else
    {
      if (v13)
      {
        if (*(void *)(*(void *)(a1 + 32) + 312LL) <= (uint64_t)v11)
        {
          if (dword_100132930 <= 30
            && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
          {
            LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFriendSyncing]_block_invoke",  30LL,  "Friend sync: refreshing acknowledged friend identity: requested %ll{dur} ago, %@\n",  (unint64_t)v11,  v5);
          }

          uint64_t v16 = *(void *)(a1 + 80);
LABEL_47:
          ++*(_DWORD *)(*(void *)(v16 + 8) + 24LL);

LABEL_48:
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v5 sendersKnownAlias]);

          if (!v17)
          {
            [v5 setDateRequested:0];
            ++*(_DWORD *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL);
            goto LABEL_52;
          }

          unsigned int v14 = objc_alloc_init(&OBJC_CLASS___RPCloudMessageContext);
          id v18 = (void *)objc_claimAutoreleasedReturnValue([v5 sendersKnownAlias]);
          -[RPCloudMessageContext setSendersKnownAlias:](v14, "setSendersKnownAlias:", v18);

          -[RPCloudMessageContext setNonWakingRequest:](v14, "setNonWakingRequest:", 1LL);
          *(_DWORD *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL) = 30;
          if ([*(id *)(a1 + 32) _sendCloudIdentityFrameType:64 destinationID:v22 flags:1 msgCtx:v14])
          {
            id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
            [v5 setDateRequested:v19];

            ++*(_DWORD *)(*(void *)(a1 + 32) + 232LL);
            *(_BYTE *)(*(void *)(a1 + 32) + 385LL) = 1;
            id v20 = (void *)objc_claimAutoreleasedReturnValue( +[RPIdentityDaemon sharedIdentityDaemon]( &OBJC_CLASS___RPIdentityDaemon,  "sharedIdentityDaemon"));
            [v20 saveIdentity:v5 error:0];

            ++*(_DWORD *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL);
LABEL_52:
            if (*(_BYTE *)(a1 + 128))
            {
              uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8LL);
            }

            goto LABEL_58;
          }

          uint64_t v15 = *(void *)(a1 + 104);
LABEL_57:
          ++*(_DWORD *)(*(void *)(v15 + 8) + 24LL);

LABEL_58:
          goto LABEL_18;
        }
      }

      else if (v11 >= (double)(arc4random() % 0x3F481 + 1468800))
      {
        if (dword_100132930 <= 30
          && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
        {
          LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFriendSyncing]_block_invoke",  30LL,  "Friend sync: retrying unacknowledged friend identity: requested %ll{dur} ago, %@\n",  (unint64_t)v11,  v5);
        }

        uint64_t v16 = *(void *)(a1 + 88);
        goto LABEL_47;
      }

      if (dword_100132930 <= 10
        && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 10LL)))
      {
        LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFriendSyncing]_block_invoke",  10LL,  "Friend sync: skipping requested friend identity: requested %ll{dur} ago, %@\n",  (unint64_t)v11,  v5);
      }
    }

    uint64_t v15 = *(void *)(a1 + 72);
    goto LABEL_57;
  }

  if (dword_100132930 <= 10 && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 10LL))) {
    LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateFriendSyncing]_block_invoke",  10LL,  "Friend sync: skipping removed friend identity: %@\n",  v5);
  }
  uint64_t v7 = *(void *)(a1 + 40);
LABEL_17:
  ++*(_DWORD *)(*(void *)(v7 + 8) + 24LL);
LABEL_18:
}

void sub_10008D8B4(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) invalidate];
  if (v5)
  {
    ++*(_DWORD *)(*(void *)(a1 + 40) + 244LL);
    ++*(_DWORD *)(*(void *)(a1 + 40) + 256LL);
    *(_BYTE *)(*(void *)(a1 + 40) + 385LL) = 1;
    if (dword_100132930 <= 60
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 60LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon receivedFriendIdentityRequest:msgCtx:]_block_invoke",  60LL,  "### Ignoring friend identity request from unknown peer: '%{mask}', %{error}\n",  *(void *)(a1 + 48),  v5);
    }
  }

  else
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon receivedFriendIdentityRequest:msgCtx:]_block_invoke",  30LL,  "Received friend identity request: from '%{mask}', IDS '%.8@'\n",  *(void *)(a1 + 48),  *(void *)(a1 + 56));
    }

    ++*(_DWORD *)(*(void *)(a1 + 40) + 260LL);
    *(_BYTE *)(*(void *)(a1 + 40) + 385LL) = 1;
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    id v8 = *(void **)(a1 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v10 contactIdentifier]);
    [v8 _updateIdentityType:6 idsDeviceID:v6 appleID:v7 contactID:v9 msg:*(void *)(a1 + 64)];

    [*(id *)(a1 + 72) setNonWakingRequest:1];
    [*(id *)(a1 + 40) _sendCloudIdentityFrameType:65 destinationID:*(void *)(a1 + 80) flags:1 msgCtx:*(void *)(a1 + 72)];
  }
}

void sub_10008DD80(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) invalidate];
  if (v5)
  {
    if (dword_100132930 <= 60
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 60LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon receivedFriendIdentityResponse:msgCtx:]_block_invoke",  60LL,  "### Ignoring friend identity response from unknown peer: '%{mask}', %{error}\n",  *(void *)(a1 + 40),  v5);
    }
  }

  else
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon receivedFriendIdentityResponse:msgCtx:]_block_invoke",  30LL,  "Received friend identity response: from '%{mask}', IDS '%.8@'\n",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
    }

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:*(void *)(a1 + 40)]);
    if (v6)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v6 setDateAcknowledged:v7];

      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
      [v8 saveIdentity:v6 error:0];
    }

    else if (dword_100132930 <= 60 {
           && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 60LL)))
    }
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon receivedFriendIdentityResponse:msgCtx:]_block_invoke",  60LL,  "No friend account identity for response: '%{mask}'\n",  *(void *)(a1 + 40));
    }

    id v9 = *(void **)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v13 contactIdentifier]);
    [v9 _updateIdentityType:6 idsDeviceID:v10 appleID:v11 contactID:v12 msg:*(void *)(a1 + 72)];
  }
}

void sub_10008E29C(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) invalidate];
  if (v5)
  {
    if (dword_100132930 <= 60
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 60LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon receivedFriendIdentityUpdate:msgCtx:]_block_invoke",  60LL,  "### Ignoring friend identity update from unknown peer: '%{mask}', %{error}\n",  *(void *)(a1 + 40),  v5);
    }
  }

  else
  {
    if (dword_100132930 <= 30
      && (dword_100132930 != -1 || _LogCategory_Initialize(&dword_100132930, 30LL)))
    {
      LogPrintF( &dword_100132930,  "-[RPPeopleDaemon receivedFriendIdentityUpdate:msgCtx:]_block_invoke",  30LL,  "Received friend identity update: from '%{mask}', IDS '%.8@'\n",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
    }

    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v6 = *(void **)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v10 contactIdentifier]);
    [v6 _updateIdentityType:6 idsDeviceID:v7 appleID:v8 contactID:v9 msg:*(void *)(a1 + 64)];
  }
}

LABEL_19:
    if (![v89 length]) {
      goto LABEL_27;
    }
    id v25 = (id)objc_claimAutoreleasedReturnValue(-[RPIdentity contactID](v19, "contactID"));
    id v26 = v89;
    uint64_t v27 = v26;
    if (v25 == v26)
    {

      goto LABEL_27;
    }

    if ((v26 != 0LL) == (v25 == 0LL))
    {
    }

    else
    {
      id v28 = [v25 isEqual:v26];

      if ((v28 & 1) != 0)
      {
LABEL_27:
        v91 = 0;
        CFDataOfLength = CFDictionaryGetCFDataOfLength(v15, @"_dIRK", 16LL, &v91);
        id v30 = (void *)objc_claimAutoreleasedReturnValue(CFDataOfLength);
        v90 = v13;
        if (!v30)
        {
LABEL_36:

          uint64_t v35 = v91;
          if (v91 && dword_100132930 <= 60)
          {
            if (dword_100132930 != -1)
            {
LABEL_39:
              LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateIdentityType:idsDeviceID:appleID:contactID:msg:]",  60LL,  "### Device message missing DeviceIRK: %s, '%{mask}', %.8@, %#m\n",  v16,  v13,  v12,  v35,  location);
              goto LABEL_41;
            }

            if (_LogCategory_Initialize(&dword_100132930, 60LL))
            {
              uint64_t v35 = v91;
              goto LABEL_39;
            }
          }

LABEL_55:
            v91 = 0;
            NSNumber = NSDictionaryGetNSNumber(v15, @"_ff", &v91);
            id v44 = (void *)objc_claimAutoreleasedReturnValue(NSNumber);
            if (v44)
            {
              int v45 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  -[RPIdentity featureFlags](v19, "featureFlags")));
              BOOL v46 = v44;
              char v47 = v46;
              if (v45 == v46)
              {
              }

              else
              {
                if (v45)
                {
                  id v48 = [v45 isEqual:v46];

                  if ((v48 & 1) != 0) {
                    goto LABEL_63;
                  }
                }

                else
                {
                }

                -[RPIdentity setFeatureFlags:](v19, "setFeatureFlags:", [v47 unsignedIntegerValue]);
                v20 |= 0x400u;
              }
            }

LABEL_63:
            uint64_t v49 = v91;
            if (v91 && dword_100132930 <= 60)
            {
              if (dword_100132930 != -1)
              {
LABEL_66:
                LogPrintF( &dword_100132930,  "-[RPPeopleDaemon _updateIdentityType:idsDeviceID:appleID:contactID:msg:]",  60LL,  "### Device message missing FeatureFlags: %s, '%{mask}', %.8@, %#m\n",  v16,  v90,  v12,  v49);
                goto LABEL_68;
              }

              if (_LogCategory_Initialize(&dword_100132930, 60LL))
              {
                uint64_t v49 = v91;
                goto LABEL_66;
              }
            }

              id v31 = (char *)v31 + 1;
            }

            while (v29 != v31);
            v56 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v27,  "countByEnumeratingWithState:objects:count:",  &v65,  v73,  16LL);
            id v29 = v56;
          }

          while (v56);
        }

        uint64_t v11 = v58;
        id v5 = v59;
        id v13 = v57;
      }

      else if (dword_100132BB0 <= 90 {
             && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
      }
      {
        id v20 = CUDescriptionWithLevel(v4, 30LL);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _clientBonjourAWDLBrowserFoundDevice:]",  90LL,  "Ignoring found AWDL device with missing IDS device ID: %@\n",  v21);
      }
    }

    else if (dword_100132BB0 <= 30 {
           && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
    }
    {
      id v18 = CUDescriptionWithLevel(v4, 30LL);
      id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _clientBonjourAWDLBrowserFoundDevice:]",  30LL,  "Ignoring found unresolved AWDL device: %@\n",  v19);
    }

    goto LABEL_71;
  }

  if (dword_100132BB0 <= 30 && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
  {
    id v10 = CUDescriptionWithLevel(v4, 30LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v10);
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _clientBonjourAWDLBrowserFoundDevice:]",  30LL,  "Ignoring non-ConnectOnly AWDL device: %@\n",  v8);
    goto LABEL_9;
  }

LABEL_68:
            unsigned int v50 = (id)objc_claimAutoreleasedReturnValue(-[RPIdentity idsDeviceID](v19, "idsDeviceID"));
            v51 = v12;
            uint64_t v52 = v51;
            if (v50 == v51)
            {
            }

            else
            {
              if ((v51 != 0LL) != (v50 == 0LL))
              {
                uint64_t v53 = [v50 isEqual:v51];

                if ((v53 & 1) != 0) {
                  goto LABEL_75;
                }
              }

              else
              {
              }

              -[RPIdentity setIdsDeviceID:](v19, "setIdsDeviceID:", v52);
              v20 |= 0x40u;
            }

LABEL_75:
            CFTypeID TypeID = CFStringGetTypeID();
            uint64_t TypedValue = CFDictionaryGetTypedValue(v15, @"model", TypeID, 0LL);
            v56 = (void *)objc_claimAutoreleasedReturnValue(TypedValue);
            id v57 = v56;
            if (v56 && [v56 length])
            {
              __int128 v58 = (id)objc_claimAutoreleasedReturnValue(-[RPIdentity model](v19, "model"));
              __int128 v59 = v57;
              __int128 v60 = v59;
              if (v58 == v59)
              {
              }

              else
              {
                if (v58)
                {
                  __int128 v61 = [v58 isEqual:v59];

                  if ((v61 & 1) != 0) {
                    goto LABEL_84;
                  }
                }

                else
                {
                }

                -[RPIdentity setModel:](v19, "setModel:", v60);
                v20 |= 0x80u;
              }
            }

  ((void (*)(void *))v10[2])(v10);
}

LABEL_93:
            v91 = 0;
            v70 = CFDictionaryGetCFDataOfLength(v15, @"_bIRK", 16LL, &v91);
            v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
            if (!v71) {
              goto LABEL_101;
            }
            v72 = (id)objc_claimAutoreleasedReturnValue(-[RPIdentity btIRKData](v19, "btIRKData"));
            v73 = v71;
            v74 = v73;
            if (v72 == v73)
            {

              goto LABEL_101;
            }

            if (v72)
            {
              v75 = [v72 isEqual:v73];

              if ((v75 & 1) != 0)
              {
LABEL_101:

                v91 = 0;
                v76 = CFDictionaryGetCFDataOfLength(v15, @"_bAdd", 7LL, &v91);
                v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
                if (!v77) {
                  goto LABEL_109;
                }
                v78 = (id)objc_claimAutoreleasedReturnValue(-[RPIdentity btAddress](v19, "btAddress"));
                v79 = v77;
                v80 = v79;
                if (v78 == v79)
                {

                  goto LABEL_109;
                }

                if (v78)
                {
                  v81 = [v78 isEqual:v79];

                  if ((v81 & 1) != 0)
                  {
LABEL_109:

                    if ((v20 & 0x800) != 0)
                    {
                      v82 = v88;
                      unsigned int v14 = v89;
                      if (!v88)
                      {
                        v83 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                        objc_storeStrong(location, v83);
                        v82 = (objc_class *)v83;
                      }

                      v88 = v82;
                      -[objc_class setObject:forKeyedSubscript:](v82, "setObject:forKeyedSubscript:", v19, v52);
                    }

                    else
                    {
                      unsigned int v14 = v89;
                      if (!v20) {
                        goto LABEL_116;
                      }
                    }

                    v84 = (void *)objc_claimAutoreleasedReturnValue( +[RPIdentityDaemon sharedIdentityDaemon]( &OBJC_CLASS___RPIdentityDaemon,  "sharedIdentityDaemon"));
                    [v84 saveIdentity:v19 error:0];

LABEL_116:
                    id v13 = v90;
                    if ((_DWORD)v10 == 4) {
                      -[RPPeopleDaemon _updateFamilyNotification](v87, "_updateFamilyNotification");
                    }

                    goto LABEL_121;
                  }
                }

                else
                {
                }

                -[RPIdentity setBtAddress:](v19, "setBtAddress:", v80);
                v20 |= 0x800000u;
                goto LABEL_109;
              }
            }

            else
            {
            }

            -[RPIdentity setBtIRKData:](v19, "setBtIRKData:", v74);
            v20 |= 0x400000u;
            goto LABEL_101;
          }

          id v38 = (id)objc_claimAutoreleasedReturnValue(-[RPIdentity edPKData](v19, "edPKData"));
          uint64_t v39 = v37;
          uint64_t v40 = v39;
          if (v38 == v39)
          {
          }

          else
          {
            if (v38)
            {
              id v41 = [v38 isEqual:v39];

              if ((v41 & 1) != 0) {
                goto LABEL_49;
              }
            }

            else
            {
            }

            -[RPIdentity setEdPKData:](v19, "setEdPKData:", v40);
            v20 |= 8u;
          }

id sub_10008F850(uint64_t a1)
{
  return [*(id *)(a1 + 32) _xpcConnectionInvalidated:*(void *)(a1 + 40)];
}

id sub_100090D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) clientDeviceFound:a3 report:0];
}

Class sub_100090FCC()
{
  if (qword_1001335D8 != -1) {
    dispatch_once(&qword_1001335D8, &stru_100114718);
  }
  Class result = objc_getClass("SFDeviceDiscovery");
  qword_1001335D0 = (uint64_t)result;
  off_1001329A0 = (uint64_t (*)())sub_100091028;
  return result;
}

id sub_100091028()
{
  return (id)qword_1001335D0;
}

void sub_100091034(id a1)
{
  qword_1001335E0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
}

Class sub_10009105C()
{
  if (qword_1001335D8 != -1) {
    dispatch_once(&qword_1001335D8, &stru_100114718);
  }
  Class result = objc_getClass("SFClient");
  qword_1001335E8 = (uint64_t)result;
  off_1001329A8 = (uint64_t (*)())sub_1000910B8;
  return result;
}

id sub_1000910B8()
{
  return (id)qword_1001335E8;
}

Class sub_1000910C4()
{
  if (qword_1001335D8 != -1) {
    dispatch_once(&qword_1001335D8, &stru_100114718);
  }
  Class result = objc_getClass("SFPeopleSuggesterParams");
  qword_1001335F0 = (uint64_t)result;
  off_1001329B0 = (uint64_t (*)())sub_100091120;
  return result;
}

id sub_100091120()
{
  return (id)qword_1001335F0;
}

Class sub_10009112C()
{
  if (qword_1001335D8 != -1) {
    dispatch_once(&qword_1001335D8, &stru_100114718);
  }
  Class result = objc_getClass("SFContactInfo");
  qword_1001335F8 = (uint64_t)result;
  off_1001329B8 = (uint64_t (*)())sub_100091188;
  return result;
}

id sub_100091188()
{
  return (id)qword_1001335F8;
}

void sub_1000911D4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___RPPrivateDaemon);
  uint64_t v2 = (void *)qword_100133600;
  qword_100133600 = (uint64_t)v1;
}

id sub_100091550(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2[3])
  {
    int v3 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  @"com.apple.rapport.private-discovery");
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = v3;

    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "setDelegate:");
    [*(id *)(*(void *)(a1 + 32) + 24) _setQueue:*(void *)(*(void *)(a1 + 32) + 32)];
    [*(id *)(*(void *)(a1 + 32) + 24) resume];
    uint64_t v2 = *(void **)(a1 + 32);
  }

  return [v2 prefsChanged];
}

id sub_100091670(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidate];
}

void sub_100091FFC(void *a1)
{
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___RPPrivateXPCConnection);
  -[RPPrivateXPCConnection setDaemon:](v6, "setDaemon:", a1[4]);
  -[RPPrivateXPCConnection setDirect:](v6, "setDirect:", 1LL);
  -[RPPrivateXPCConnection setDispatchQueue:](v6, "setDispatchQueue:", *(void *)(a1[4] + 32LL));
  -[RPPrivateXPCConnection setEntitled:](v6, "setEntitled:", 1LL);
  uint64_t v2 = *(void **)(a1[4] + 16LL);
  if (!v2)
  {
    int v3 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    uint64_t v4 = a1[4];
    id v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;

    uint64_t v2 = *(void **)(a1[4] + 16LL);
  }

  [v2 addObject:v6];
  -[RPPrivateXPCConnection xpcPrivateAdvertiserActivate:completion:]( v6,  "xpcPrivateAdvertiserActivate:completion:",  a1[5],  a1[6]);
}

void sub_100092150(uint64_t a1)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v12;
    while (2)
    {
      for (CFIndex i = 0LL; i != v4; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "activatedAdvertiser", (void)v11));
        id v9 = *(void **)(a1 + 40);

        if (v8 == v9)
        {
          id v10 = v7;

          if (v10) {
            [*(id *)(a1 + 32) _xpcConnectionInvalidated:v10];
          }
          goto LABEL_12;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  id v10 = 0LL;
LABEL_12:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10009234C(void *a1)
{
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___RPPrivateXPCConnection);
  -[RPPrivateXPCConnection setDaemon:](v6, "setDaemon:", a1[4]);
  -[RPPrivateXPCConnection setDirect:](v6, "setDirect:", 1LL);
  -[RPPrivateXPCConnection setDispatchQueue:](v6, "setDispatchQueue:", *(void *)(a1[4] + 32LL));
  -[RPPrivateXPCConnection setEntitled:](v6, "setEntitled:", 1LL);
  id v2 = *(void **)(a1[4] + 16LL);
  if (!v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    uint64_t v4 = a1[4];
    uint64_t v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;

    id v2 = *(void **)(a1[4] + 16LL);
  }

  [v2 addObject:v6];
  -[RPPrivateXPCConnection xpcPrivateDiscoveryActivate:completion:]( v6,  "xpcPrivateDiscoveryActivate:completion:",  a1[5],  a1[6]);
}

void sub_1000924A0(uint64_t a1)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v12;
    while (2)
    {
      for (CFIndex i = 0LL; i != v4; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "activatedDiscovery", (void)v11));
        id v9 = *(void **)(a1 + 40);

        if (v8 == v9)
        {
          id v10 = v7;

          if (v10) {
            [*(id *)(a1 + 32) _xpcConnectionInvalidated:v10];
          }
          goto LABEL_12;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  id v10 = 0LL;
LABEL_12:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

id sub_1000927A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _xpcConnectionInvalidated:*(void *)(a1 + 40)];
}

void sub_10009403C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000940FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10009410C(uint64_t a1)
{
}

void sub_100094114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v3 + 40);
  uint64_t v4 = CUDescriptionWithLevel(a3, *(unsigned int *)(a1 + 40));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  NSAppendPrintF(&obj, "    %@\n", v5);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_10009417C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = *(unsigned int *)(a1 + 40);
  id v6 = a2;
  uint64_t v7 = CUDescriptionWithLevel(a3, v5);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  NSAppendPrintF(&obj, "    ID %@ %@\n", v6, v8);

  objc_storeStrong((id *)(v4 + 40), obj);
}

void sub_100094200(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v7 + 40);
  uint64_t v8 = *(unsigned int *)(a1 + 48);
  id v9 = a2;
  uint64_t v10 = CUDescriptionWithLevel(a3, v8);
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  NSAppendPrintF(&obj, "    ID %@ %@\n", v9, v11);

  objc_storeStrong((id *)(v7 + 40), obj);
  if ((int)++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) >= 11)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v13 = *(id *)(v12 + 40);
    NSAppendPrintF(&v13, "Skipping remaining devices ...\n");
    objc_storeStrong((id *)(v12 + 40), v13);
    *a4 = 1;
  }

void sub_1000942F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 event]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"type"]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"serviceType"]);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v10 + 40);
  unsigned int v11 = [v5 state];

  NSAppendPrintF(&obj, "    %@ : %@, state %d, token %@\n", v8, v9, v11, v6);
  objc_storeStrong((id *)(v10 + 40), obj);
}

void sub_1000943D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 event]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"type"]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"serviceType"]);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id obj = *(id *)(v10 + 40);
  unsigned int v11 = [v5 state];

  NSAppendPrintF(&obj, "    %@ : %@, state %d, token %@\n", v8, v9, v11, v6);
  objc_storeStrong((id *)(v10 + 40), obj);
}

id sub_100094510(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

id sub_10009476C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_100094774(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_10009477C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_100094784(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(dispatch_queue_s **)(v1 + 592);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000947DC;
  block[3] = &unk_1001110A8;
  void block[4] = v1;
  dispatch_async(v2, block);
}

unint64_t sub_1000947DC(uint64_t a1)
{
  unint64_t result = (unint64_t)[(Class)off_100132C20[0]() systemAttentionState];
  if ((result & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    if (dword_100132BB0 <= 30
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _activate]_block_invoke_5",  30LL,  "Discovery session state change due to system going to sleep\n");
    }

    [*(id *)(a1 + 32) _sendDiscoverySessionExitWithReason:@"SystemDisconnect"];
    return (unint64_t)[*(id *)(a1 + 32) _changeDiscoverySessionStateForDevice:0 startReason:0];
  }

  return result;
}

id sub_1000948E8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidate];
}

LABEL_167:
    self->_prefCameraCapabilitiesRetrySeconds = v62;
  }

  v64 = CFPrefs_GetInt64(@"com.apple.rapport", @"discoverySessionExp", &v74);
  if (v64 <= 0x7080 && v64 != 0 && v74 == 0) {
    v67 = v64;
  }
  else {
    v67 = 28800LL;
  }
  prefDiscoverySessionExpirationSeconds = self->_prefDiscoverySessionExpirationSeconds;
  if (v67 != prefDiscoverySessionExpirationSeconds)
  {
    if (dword_100132BB0 <= 30)
    {
      if (dword_100132BB0 == -1)
      {
        prefDiscoverySessionExpirationSeconds = self->_prefDiscoverySessionExpirationSeconds;
      }

      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon prefsChanged]",  30LL,  "Discovery session expiration seconds: %lu -> %lu\n",  prefDiscoverySessionExpirationSeconds,  v67);
    }

LABEL_182:
    self->_prefDiscoverySessionExpirationSeconds = v67;
  }

  v69 = CFPrefs_GetInt64(@"com.apple.rapport", @"inSessionDeviceLost", &v74);
  if (v69 <= 0x5A && v69 != 0 && v74 == 0) {
    v72 = v69;
  }
  else {
    v72 = 90LL;
  }
  prefInSessionDeviceLostSeconds = self->_prefInSessionDeviceLostSeconds;
  if (v72 != prefInSessionDeviceLostSeconds)
  {
    if (dword_100132BB0 <= 30)
    {
      if (dword_100132BB0 == -1)
      {
        prefInSessionDeviceLostSeconds = self->_prefInSessionDeviceLostSeconds;
      }

      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon prefsChanged]",  30LL,  "In session device lost seconds: %lu -> %lu\n",  prefInSessionDeviceLostSeconds,  v72);
    }

LABEL_197:
    self->_prefInSessionDeviceLostSeconds = v72;
  }

  -[RPRemoteDisplayDaemon _update](self, "_update");
}

void sub_1000961D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(unsigned __int8 *)(a1 + 40);
  if (v7 != [v6 state])
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v17 = 0LL;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 _acquireRBSAssertionForEntry:v6 error:&v17]);
    id v10 = v17;
    if (!v10)
    {
      [v6 setState:*(unsigned __int8 *)(a1 + 40)];
      id v11 = [v5 unsignedLongLongValue];
      if (dword_100132BB0 <= 30
        && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
      {
        LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _updateXPCMatchingDiscovery]_block_invoke",  30LL,  "Changed discovery XPC matching token %llu, state %d\n",  v11,  *(unsigned __int8 *)(a1 + 40));
      }

      uint64_t v12 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue([v6 handler]);
      if (v12)
      {
        if (*(_BYTE *)(a1 + 40)) {
          uint64_t v13 = 6LL;
        }
        else {
          uint64_t v13 = 5LL;
        }
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472LL;
        void v14[2] = sub_100096364;
        v14[3] = &unk_100114890;
        id v16 = v11;
        id v15 = v9;
        ((void (**)(void, uint64_t, void, void *))v12)[2](v12, v13, 0LL, v14);
      }
    }
  }
}

void sub_100096364(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (dword_100132BB0 <= 30 && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL))) {
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _updateXPCMatchingDiscovery]_block_invoke_2",  30LL,  "Received XPC reply for token %llu\n",  *(void *)(a1 + 40));
  }
  id v6 = *(void **)(a1 + 32);
  if (v6) {
    [v6 invalidate];
  }
}

void sub_1000966F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) showPasswordHandler]);
  id v6 = (void *)v5;
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, id))(v5 + 16))(v5, a2, v7);
  }
}

void sub_100096750(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) hidePasswordHandler]);
  if (v3)
  {
    id v4 = v3;
    v3[2](v3, a2);
    uint64_t v3 = (void (**)(void, void))v4;
  }
}

void sub_100096798(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) peerDeviceInfo]);
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 verifiedIdentity]);
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 320);
    *(void *)(v5 + 320) = v4;

    if (dword_100132BB0 <= 30
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _connectionConfigureCommon:]_block_invoke_3",  30LL,  "Discovery session state change after authenticating session paired device: %@\n",  *(void *)(*(void *)(a1 + 32) + 320LL));
    }
  }

_DWORD *sub_100096EDC(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(_DWORD **)(a1 + 32);
  if (result[14] == *(_DWORD *)(a1 + 40)) {
    return _[result _clientBLEDiscoveryDeviceFound:a2];
  }
  return result;
}

_DWORD *sub_100096F00(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(_DWORD **)(a1 + 32);
  if (result[14] == *(_DWORD *)(a1 + 40)) {
    return _[result _clientBLEDiscoveryDeviceLost:a2];
  }
  return result;
}

_DWORD *sub_100096F24(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(_DWORD **)(a1 + 32);
  if (result[14] == *(_DWORD *)(a1 + 40)) {
    return _[result _clientBLEDiscoveryDeviceFound:a2];
  }
  return result;
}

uint64_t sub_100096F48(uint64_t result)
{
  int v1 = *(_DWORD *)(*(void *)(result + 32) + 56LL);
  if (v1 == *(_DWORD *)(result + 40) && dword_100132BB0 <= 30)
  {
    if (dword_100132BB0 != -1) {
      return LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _bleDiscoveryEnsureStarted:]_block_invoke_4",  30LL,  "BLE discovery interrupted ID %u\n",  v1);
    }
    uint64_t v2 = result;
    unint64_t result = _LogCategory_Initialize(&dword_100132BB0, 30LL);
    if ((_DWORD)result)
    {
      int v1 = *(_DWORD *)(v2 + 40);
      return LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _bleDiscoveryEnsureStarted:]_block_invoke_4",  30LL,  "BLE discovery interrupted ID %u\n",  v1);
    }
  }

  return result;
}

void sub_100096FDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v8 = v3;
    if (dword_100132BB0 <= 90
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _bleDiscoveryEnsureStarted:]_block_invoke_5",  90LL,  "### BLE discovery start failed: %{error}\n",  v8);
    }

    [*(id *)(*(void *)(a1 + 32) + 48) invalidate];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 48);
    *(void *)(v5 + 4_Block_object_dispose(&STACK[0x380], 8) = 0LL;

    goto LABEL_10;
  }

  if (dword_100132BB0 <= 30)
  {
    id v8 = 0LL;
    if (dword_100132BB0 != -1 || (v7 = _LogCategory_Initialize(&dword_100132BB0, 30LL), uint64_t v4 = 0LL, v7))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _bleDiscoveryEnsureStarted:]_block_invoke_5",  30LL,  "BLE discovery started\n");
LABEL_10:
      uint64_t v4 = v8;
    }
  }
}

void sub_1000971D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (dword_100132BB0 <= 90)
    {
      id v8 = v3;
      if (dword_100132BB0 != -1 || (v7 = _LogCategory_Initialize(&dword_100132BB0, 90LL), uint64_t v4 = v8, v7))
      {
        int v5 = *(_DWORD *)(a1 + 32);
        if (v5 >= 0x20000)
        {
          if (v5 >= 327680)
          {
            if (v5 > 589824)
            {
              if (v5 <= 2147418111)
              {
                switch(v5)
                {
                  case 589825:
                    id v6 = "FindNearbyPencil";
                    break;
                  case 655360:
                    id v6 = "AccessDigitalHomeKey";
                    break;
                  case 786432:
                    id v6 = "ProxControlDeviceClose";
                    break;
                  default:
LABEL_119:
                    id v6 = "?";
                    break;
                }
              }

              else
              {
                switch(v5)
                {
                  case 2147418112:
                    id v6 = "InternalTestNoLockScan";
                    break;
                  case 2147418113:
                    id v6 = "InternalTestNoScreenOffScan";
                    break;
                  case 2147418114:
                    id v6 = "InternalTestScanWithNoDups";
                    break;
                  case 2147418115:
                    id v6 = "InternalTestScanWithDups";
                    break;
                  case 2147418116:
                    id v6 = "InternalTestScanFor20Seconds";
                    break;
                  case 2147418117:
                    id v6 = "InternalTestActiveScan";
                    break;
                  case 2147418118:
                    id v6 = "InternalTestUUIDScan";
                    break;
                  case 2147418119:
                    id v6 = "InternalTestScanFor10ClockSeconds";
                    break;
                  case 2147418120:
                    id v6 = "InternalTestScanBoost";
                    break;
                  default:
                    goto LABEL_119;
                }
              }
            }

            else if (v5 > 458752)
            {
              switch(v5)
              {
                case 524288:
                  id v6 = "ADPD";
                  break;
                case 524289:
                  id v6 = "ADPDBuffer";
                  break;
                case 524290:
                  id v6 = "MicroLocation";
                  break;
                case 524291:
                  id v6 = "MicroLocationLeech";
                  break;
                default:
                  if (v5 == 458753)
                  {
                    id v6 = "PrecisionFindingFindee";
                  }

                  else
                  {
                    if (v5 != 589824) {
                      goto LABEL_119;
                    }
                    id v6 = "FindNearbyRemote";
                  }

                  break;
              }
            }

            else
            {
              switch(v5)
              {
                case 393216:
                  id v6 = "CaptiveNetworkJoin";
                  break;
                case 393217:
                  id v6 = "UseCaseSIMTransfer";
                  break;
                case 393218:
                  id v6 = "MacSetup";
                  break;
                case 393219:
                  id v6 = "AppleIDSignIn";
                  break;
                case 393220:
                  id v6 = "AppleIDSignInSettings";
                  break;
                default:
                  if (v5 == 327680)
                  {
                    id v6 = "RapportThirdParty";
                  }

                  else
                  {
                    if (v5 != 458752) {
                      goto LABEL_119;
                    }
                    id v6 = "PrecisionFindingFinder";
                  }

                  break;
              }
            }
          }

          else
          {
            switch(v5)
            {
              case 131072:
                id v6 = "SharingDefault";
                break;
              case 131073:
                id v6 = "SharingPhoneAutoUnlock";
                break;
              case 131074:
                id v6 = "SharingSiriWatchAuth";
                break;
              case 131075:
                id v6 = "SharingMacAutoUnlock";
                break;
              case 131076:
                id v6 = "SharingEDTScreenOn";
                break;
              case 131077:
                id v6 = "SharingEDTWiFiDisabled";
                break;
              case 131078:
                id v6 = "SharingEDTWombatEligibleAsDefaultCamera";
                break;
              case 131079:
                id v6 = "SharingEDTWombatCameraPicker";
                break;
              case 131080:
                id v6 = "SharingWombatBackground";
                break;
              case 131081:
                id v6 = "SharingUniversalControl";
                break;
              case 131082:
                id v6 = "SharingPeopleProximity";
                break;
              case 131083:
                id v6 = "SharingEDTEnsembleOpenDisplayPrefs";
                break;
              case 131084:
                id v6 = "SharingEDTNearbydMotionStopped";
                break;
              case 131085:
                id v6 = "SharingDoubleBoostGenericScan";
                break;
              case 131086:
                id v6 = "SharingEDTIncomingAdvertisement ";
                break;
              case 131087:
                id v6 = "SharingEDTWombatStreamStart";
                break;
              case 131088:
                id v6 = "SharingOYAutoUnlock";
                break;
              case 131089:
                goto LABEL_119;
              case 131090:
                id v6 = "SharingAirDrop";
                break;
              case 131091:
                id v6 = "SharingNearbyInvitationHost";
                break;
              case 131092:
                id v6 = "SharingNearbyInvitationParticipant";
                break;
              case 131093:
                id v6 = "SharingAirDropAskToAirDrop";
                break;
              case 131094:
                id v6 = "SharingAirDropTempIdentity";
                break;
              case 131095:
                id v6 = "SharingAirDropNeedsCLink";
                break;
              case 131096:
                id v6 = "SharingRemoteWidgetUpdate";
                break;
              case 131097:
                id v6 = "SharingCountryCodeUpdate";
                break;
              case 131098:
                id v6 = "SharingMacPhoneAutoUnlock";
                break;
              case 131099:
                id v6 = "SharingVisionProDiscovery";
                break;
              case 131100:
                id v6 = "SharingVisionProStateChange";
                break;
              case 131101:
                id v6 = "SharingContinuityScreen";
                break;
              case 131102:
                id v6 = "SharingEDTRemoteDisplay";
                break;
              default:
                if (v5 == 196608)
                {
                  id v6 = "DigitalIDTSA";
                }

                else
                {
                  if (v5 != 0x40000) {
                    goto LABEL_119;
                  }
                  id v6 = "DigitalCarKeyThirdParty";
                }

                break;
            }
          }
        }

        else
        {
          id v6 = "Unspecified";
          switch(v5)
          {
            case 0:
              break;
            case 1:
              id v6 = "HealthKit";
              break;
            case 2:
              id v6 = "HomeKit";
              break;
            case 3:
              id v6 = "FindMyObjectConnection";
              break;
            case 4:
              id v6 = "FindMyObjectConnectionTransient";
              break;
            case 5:
              id v6 = "MIDI";
              break;
            case 6:
              id v6 = "Continuity";
              break;
            case 7:
              id v6 = "InstantHotSpot";
              break;
            case 8:
              id v6 = "NearBy";
              break;
            case 9:
              id v6 = "Sharing";
              break;
            case 10:
              id v6 = "HearingSupport";
              break;
            case 11:
              id v6 = "Magnet";
              break;
            case 12:
              id v6 = "HID";
              break;
            case 13:
              id v6 = "LEA";
              break;
            case 14:
              id v6 = "External";
              break;
            case 15:
              id v6 = "ExternalMedical";
              break;
            case 16:
              id v6 = "ExternalLock";
              break;
            case 17:
              id v6 = "ExternalWatch";
              break;
            case 18:
              id v6 = "SmartRouting";
              break;
            case 19:
              id v6 = "DigitalID";
              break;
            case 20:
              id v6 = "DigitalKey";
              break;
            case 21:
              id v6 = "DigitalCarKey";
              break;
            case 22:
              id v6 = "HeySiri";
              break;
            case 23:
              id v6 = "ThirdPartyApp";
              break;
            case 24:
              id v6 = "CNJ";
              break;
            default:
              switch(v5)
              {
                case 256:
                  id v6 = "DevicePresenceDetection";
                  break;
                case 257:
                  id v6 = "AudioBox";
                  break;
                case 258:
                  id v6 = "SIMTransfer";
                  break;
                case 259:
                  id v6 = "ProximityScreenOnLeechScan";
                  break;
                case 260:
                  id v6 = "MacMigrate";
                  break;
                case 263:
                  id v6 = "HIDUARTService";
                  break;
                case 264:
                  id v6 = "AccessibilitySwitchControlPairing";
                  break;
                case 265:
                  id v6 = "BaseBandFastConnect";
                  break;
                case 266:
                  id v6 = "SafetyAlerts";
                  break;
                case 267:
                  id v6 = "LECarPlay";
                  break;
                case 268:
                  id v6 = "TCCBluetooth";
                  break;
                case 269:
                  id v6 = "AOPBufferLeech";
                  break;
                default:
                  goto LABEL_119;
              }

              break;
          }
        }

        LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _bleDiscoveryTriggerEnhancedDiscovery:useCase:]_block_invoke",  90LL,  "### Failed to trigger enhanced discovery for %s with error: %@",  v6,  v4);
        uint64_t v4 = v8;
      }
    }
  }
}

LABEL_106:
}

id sub_100098440()
{
  if (qword_100133650 != -1) {
    dispatch_once(&qword_100133650, &stru_100114DA8);
  }
  return (id)qword_100133648;
}

void sub_100098B94(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (v7)
  {
    if (dword_100132BB0 <= 90
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _clientBLENeedsAWDLAdvertiserEnsureStarted]_block_invoke",  90LL,  "### BLE NeedsAWDL advertiser failed: %@\n",  v7);
    }

    [*(id *)(*(void *)(a1 + 32) + 96) invalidate];
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 96);
    *(void *)(v3 + 96) = 0LL;
    goto LABEL_13;
  }

  if (dword_100132BB0 <= 30 && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL))) {
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _clientBLENeedsAWDLAdvertiserEnsureStarted]_block_invoke",  30LL,  "BLE NeedsAWDL advertiser started\n");
  }
  int v5 = *(void **)(*(void *)(a1 + 32) + 104LL);
  if (v5)
  {
    id v6 = v5;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[RPMetrics sharedMetrics](&OBJC_CLASS___RPMetrics, "sharedMetrics"));
    [v4 logNeedsAWDLAdvertisementClient:v6 actionType:50 bluetoothType:15];

LABEL_13:
  }
}

void sub_10009913C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    id v11 = v3;
    [*(id *)(v4 + 64) invalidate];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 64);
    *(void *)(v5 + 64) = 0LL;
LABEL_5:

    id v3 = v11;
    goto LABEL_6;
  }

  id v7 = *(void **)(v4 + 72);
  if (v7)
  {
    id v11 = 0LL;
    id v8 = *(void **)(v4 + 80);
    id v9 = v7;
    id v10 = [v8 nearbyActionV2Type];
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[RPMetrics sharedMetrics](&OBJC_CLASS___RPMetrics, "sharedMetrics"));
    [v6 logNeedsAWDLAdvertisementClient:v9 actionType:v10 bluetoothType:21];

    goto LABEL_5;
  }

void *sub_100099BF8(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(void **)(a1 + 32);
  if (result[21]) {
    return [result _clientBonjourFoundDevice:a2 reevaluate:0];
  }
  return result;
}

void sub_100099C14(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[21])
  {
    id v4 = a2;
    [v2 _clientBonjourLostDevice:v4];
    [*(id *)(a1 + 32) _clientBonjourLostUnresolvedDevice:v4];
  }

void *sub_100099C78(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(void **)(a1 + 32);
  if (result[21]) {
    return [result _clientBonjourFoundDevice:a2 reevaluate:0];
  }
  return result;
}

id sub_10009A8E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 520);
  *(void *)(v2 + 520) = 0LL;

  id result = [*(id *)(*(void *)(a1 + 32) + 512) count];
  if (result) {
    return _[*(id *)(a1 + 32) _processPendingLostDevices];
  }
  return result;
}

void *sub_10009B3A4(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[22]) {
    return _[result _clientBonjourAWDLBrowserFoundDevice:a2];
  }
  return result;
}

void *sub_10009B3BC(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[22]) {
    return _[result _clientBonjourAWDLBrowserLostDevice:a2];
  }
  return result;
}

void *sub_10009B3D4(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[22]) {
    return _[result _clientBonjourAWDLBrowserFoundDevice:a2];
  }
  return result;
}

void sub_10009C888(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (dword_100132BB0 <= 30
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
    {
    }

    [*(id *)(a1 + 40) invalidate];
  }

  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10009C9E8;
    v7[3] = &unk_100112F50;
    id v4 = *(void **)(a1 + 40);
    void v7[4] = *(void *)(a1 + 32);
    v7[5] = v4;
    char v8 = *(_BYTE *)(a1 + 64);
    uint64_t v5 = *(void *)(a1 + 48);
    v7[6] = *(void *)(a1 + 56);
    [v4 sendEventID:@"_rdNeedsAWDL" event:v5 options:0 completion:v7];
    if (dword_100132BB0 <= 30
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
    {
      if (*(_BYTE *)(a1 + 65)) {
        id v6 = "enable";
      }
      else {
        id v6 = "disable";
      }
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _clientSendNeedsAWDLOverWiFi:]_block_invoke",  30LL,  "Sent NeedsAWDL %s event over WiFi\n",  v6);
    }
  }
}

void sub_10009C9E8(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (v7)
  {
    if (dword_100132BB0 <= 30
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
    {
    }
  }

  else if (*(_BYTE *)(a1 + 56))
  {
    id v3 = *(void **)(*(void *)(a1 + 48) + 392LL);
    if (!v3)
    {
      uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
      uint64_t v5 = *(void *)(a1 + 48);
      id v6 = *(void **)(v5 + 392);
      *(void *)(v5 + 392) = v4;

      id v3 = *(void **)(*(void *)(a1 + 48) + 392LL);
    }

    [v3 addObject:*(void *)(a1 + 32)];
  }

  [*(id *)(a1 + 40) invalidate];
}

_DWORD *sub_10009CFE8(uint64_t a1, uint64_t a2)
{
  id result = *(_DWORD **)(a1 + 32);
  if (result[30] == *(_DWORD *)(a1 + 40)) {
    return _[result _serverBLENeedsAWDLScannerDeviceFound:a2];
  }
  return result;
}

_DWORD *sub_10009D00C(uint64_t a1, uint64_t a2)
{
  id result = *(_DWORD **)(a1 + 32);
  if (result[30] == *(_DWORD *)(a1 + 40)) {
    return _[result _serverBLENeedsAWDLScannerDeviceLost:a2];
  }
  return result;
}

_DWORD *sub_10009D030(uint64_t a1, uint64_t a2)
{
  id result = *(_DWORD **)(a1 + 32);
  if (result[30] == *(_DWORD *)(a1 + 40)) {
    return _[result _serverBLENeedsAWDLScannerDeviceFound:a2];
  }
  return result;
}

void sub_10009D054(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v8 = v3;
    if (dword_100132BB0 <= 90
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _serverBLENeedsAWDLScannerEnsureStarted]_block_invoke_4",  90LL,  "### BLE NeedsAWDL scanner start failed: %{error}\n",  v8);
    }

    [*(id *)(*(void *)(a1 + 32) + 112) invalidate];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 112);
    *(void *)(v5 + 112) = 0LL;

    goto LABEL_10;
  }

  if (dword_100132BB0 <= 30)
  {
    id v8 = 0LL;
    if (dword_100132BB0 != -1 || (v7 = _LogCategory_Initialize(&dword_100132BB0, 30LL), uint64_t v4 = 0LL, v7))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _serverBLENeedsAWDLScannerEnsureStarted]_block_invoke_4",  30LL,  "BLE NeedsAWDL scanner started\n");
LABEL_10:
      uint64_t v4 = v8;
    }
  }
}

void sub_10009D7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 88LL);
  if (v5)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 dispatchQueue]);

    if (v9) {
      _[*(id *)(*(void *)(a1 + 32) + 88) updateUseCase:a2 bleScanRate:a3 bleScanRateScreenOff:a4];
    }
  }

id sub_10009D824(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_10009D850(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v6 = v3;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 592LL));
    [*(id *)(a1 + 32) _serverBLENearbyActionV2DiscoveryEnsureStopped];
LABEL_3:
    uint64_t v4 = v6;
    goto LABEL_8;
  }

  if (dword_100132BB0 <= 30)
  {
    id v6 = 0LL;
    if (dword_100132BB0 != -1 || (v5 = _LogCategory_Initialize(&dword_100132BB0, 30LL), uint64_t v4 = 0LL, v5))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _serverBLENearbyActionV2DiscoveryEnsureStarted]_block_invoke_3",  30LL,  "BLE NearbyActionV2 discovery started\n");
      goto LABEL_3;
    }
  }

void sub_10009E558( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10009E570(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result = [a3 linkType];
  if ((_DWORD)result == 4)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_10009E7D4(id a1, CUTCPConnection *a2)
{
}

void *sub_10009E7E0(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[56]) {
    return [result _serverTCPHandleConnectionStarted:a2];
  }
  return result;
}

void sub_10009E7F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v7 = *(id *)(*(void *)(a1 + 32) + 224LL);
  id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (!v8)
  {
    id v10 = v7;
LABEL_17:

    goto LABEL_18;
  }

  id v9 = v8;
  id v10 = 0LL;
  uint64_t v11 = *(void *)v17;
  do
  {
    for (CFIndex i = 0LL; i != v9; CFIndex i = (char *)i + 1)
    {
      if (*(void *)v17 != v11) {
        objc_enumerationMutation(v7);
      }
      uint64_t v13 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
      id v14 = (id)objc_claimAutoreleasedReturnValue([v13 tcpConnection]);

      if (v14 == v5)
      {
        id v15 = v13;

        id v10 = v15;
      }
    }

    id v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  }

  while (v9);

  if (v10)
  {
    if (dword_100132BB0 <= 30
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _serverTCPEnsureStarted]_block_invoke_3",  30LL,  "Remove buffered incoming connection on end: %@, %{error}\n",  v5,  v6,  (void)v16);
    }

    [*(id *)(*(void *)(a1 + 32) + 224) removeObject:v10];
    goto LABEL_17;
  }

void sub_10009EB2C(id a1, NSNumber *a2, RPConnection *a3, BOOL *a4)
{
}

void sub_10009EDC4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) client]);
  [v2 sessionEndedWithID:*(void *)(a1 + 40) netCnx:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) _update];
}

void sub_10009EE1C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v13 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  id v10 = v9;
  if (v9)
  {
    [v9 _receivedEventID:v13 event:v7 options:v8 sessionID:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t v11 = objc_alloc_init(&OBJC_CLASS___RPReceivedMessageEntry);
    -[RPReceivedMessageEntry setEventID:](v11, "setEventID:", v13);
    -[RPReceivedMessageEntry setEvent:](v11, "setEvent:", v7);
    -[RPReceivedMessageEntry setOptions:](v11, "setOptions:", v8);
    -[RPReceivedMessageEntry setSessionID:](v11, "setSessionID:", *(void *)(a1 + 40));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) receivedMessages]);
    [v12 addObject:v11];
  }
}

void sub_10009EF0C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v16 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  id v13 = v12;
  if (v12)
  {
    [v12 _receivedRequestID:v16 request:v9 options:v10 responseHandler:v11 sessionID:*(void *)(a1 + 40)];
  }

  else
  {
    id v14 = objc_alloc_init(&OBJC_CLASS___RPReceivedMessageEntry);
    -[RPReceivedMessageEntry setRequestID:](v14, "setRequestID:", v16);
    -[RPReceivedMessageEntry setRequest:](v14, "setRequest:", v9);
    -[RPReceivedMessageEntry setOptions:](v14, "setOptions:", v10);
    -[RPReceivedMessageEntry setResponseHandler:](v14, "setResponseHandler:", v11);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) receivedMessages]);
    [v15 addObject:v14];
  }
}

id sub_10009F010(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_10009F040(uint64_t a1, int a2)
{
  unsigned int v4 = [*(id *)(a1 + 32) passwordType];
  if (a2 == 1 && v4 == 10 && *(void *)(*(void *)(a1 + 40) + 320LL))
  {
    if (dword_100132BB0 <= 30
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _serverTCPHandleConnectionStarted:]_block_invoke_5",  30LL,  "Discovery session state change after server session setup of session paired device\n");
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _findMatchingDeviceWithIdentifier:*(void *)(*(void *)(a1 + 40) + 320)]);
    if (v5)
    {
      id v9 = v5;
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 cameraCapabilities]);

      id v5 = v9;
      if (v6)
      {
        [*(id *)(a1 + 40) _changeDiscoverySessionStateForDevice:*(void *)(*(void *)(a1 + 40) + 320) startReason:1];
        uint64_t v7 = *(void *)(a1 + 40);
        id v8 = *(void **)(v7 + 320);
        *(void *)(v7 + 320) = 0LL;

        id v5 = v9;
      }
    }
  }

void sub_10009F7D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

uint64_t (**sub_10009F82C(uint64_t a1))(id, void)
{
  id result = *(uint64_t (***)(id, void))(a1 + 48);
  if (result) {
    id result = (uint64_t (**)(id, void))result[2](result, *(void *)(a1 + 32));
  }
  if (*(void *)(a1 + 32)) {
    return (uint64_t (**)(id, void))[*(id *)(a1 + 40) invalidate];
  }
  return result;
}

void sub_10009F874(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (dword_100132BB0 <= 30 && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL))) {
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _serverHandleSessionStartWithID:netCnx:completion:]_block_invoke_2",  30,  "Received XPC reply for token %llu\n",  [*(id *)(a1 + 32) token]);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 40) + 592LL));
  id v6 = *(void **)(a1 + 48);
  if (v6) {
    [v6 invalidate];
  }
}

void sub_10009F928(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  id v6 = v3;
  if (v4)
  {
    [v4 invalidate];
    id v3 = v6;
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
    id v3 = v6;
  }
}

void sub_10009FA58(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v7 idsIdentifier]);

  if (v4)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 idsIdentifier]);
    [v5 addObject:v6];
  }
}

void sub_10009FAC0(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([a3 peerDeviceInfo]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 identifier]);

  uint64_t v5 = v6;
  if (v6)
  {
    [*(id *)(a1 + 32) addObject:v6];
    uint64_t v5 = v6;
  }
}

void sub_10009FD08(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (dword_100132BB0 <= 30
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _serverRegisterForIncomingMessages]_block_invoke",  30LL,  "### Failed to activate CLink client to receive incoming messages: %@\n",  v3);
    }

    [*(id *)(a1 + 32) invalidate];
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = *(void **)(v6 + 416);
    *(void *)(v6 + 416) = 0LL;
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void **)(v4 + 416);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10009FDF8;
    v8[3] = &unk_100112B38;
    void v8[4] = v4;
    [v5 registerEventID:@"_rdNeedsAWDL" options:0 handler:v8];
  }
}

void sub_10009FDF8(uint64_t a1, void *a2)
{
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 592LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  [*(id *)(a1 + 32) _serverReceivedNeedsAWDLEvent:v4];
}

void sub_1000A00A8(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 400LL);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 400);
    *(void *)(v4 + 400) = 0LL;
  }

  if (*(void *)(*(void *)(a1 + 32) + 384LL))
  {
    if (dword_100132BB0 <= 90
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _serverReceivedNeedsAWDLEvent:]_block_invoke",  90LL,  "### Removing expired NeedsAWDL requests\n");
    }

    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 384);
    *(void *)(v6 + 384) = 0LL;

    [*(id *)(a1 + 32) _update];
  }

id sub_1000A027C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _btAddressChanged];
}

id sub_1000A0284(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _btAddressChanged];
}

void sub_1000A1628( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_1000A1668(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
  if (dword_100132BB0 <= 90)
  {
    if (dword_100132BB0 != -1)
    {
LABEL_4:
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _startPairingServerWithPassword:completion:]_block_invoke",  90LL,  "### Pairing server can not be started: %@\n",  v2);
      goto LABEL_6;
    }

    if (_LogCategory_Initialize(&dword_100132BB0, 90LL))
    {
      uint64_t v2 = *(void *)(a1 + 32);
      goto LABEL_4;
    }
  }

id sub_1000A1B28(uint64_t a1)
{
  return [*(id *)(a1 + 40) _requestCameraCapabilitiesForDevice:*(void *)(a1 + 32)];
}

void sub_1000A2238(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4 == *(void **)(*(void *)(a1 + 40) + 248LL))
  {
    if (v3)
    {
      if (dword_100132BB0 <= 90
        && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
      {
        LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _registerForIncomingMessages]_block_invoke",  90LL,  "### Failed to activate a client to register for camera capabilities update events: %@\n",  v3);
      }

      uint64_t v6 = *(void *)(a1 + 40);
      id v7 = *(void **)(v6 + 248);
      *(void *)(v6 + 24_Block_object_dispose(va, 8) = 0LL;

      [*(id *)(a1 + 32) invalidate];
    }

    else
    {
      uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v4 dispatchQueue]);
      dispatch_assert_queue_V2(v5);

      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_1000A241C;
      v12[3] = &unk_100114AF0;
      __int128 v13 = *(_OWORD *)(a1 + 32);
      [(id)v13 registerEventID:@"_camCapUpdate" options:0 handler:v12];
      if (dword_100132BB0 <= 30
        && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
      {
        LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _registerForIncomingMessages]_block_invoke",  30LL,  "Registered for camera capabilities update event\n");
      }

      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      v10[2] = sub_1000A2544;
      v10[3] = &unk_100114B18;
      __int128 v11 = *(_OWORD *)(a1 + 32);
      [(id)v11 registerRequestID:@"_ccConfirmResp" options:0 handler:v10];
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_1000A26A0;
      v8[3] = &unk_100114AF0;
      __int128 v9 = *(_OWORD *)(a1 + 32);
      [(id)v9 registerEventID:@"_ccExit" options:0 handler:v8];
    }
  }
}

void sub_1000A241C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v6 + 248))
  {
    id v14 = v5;
    id v7 = *(dispatch_queue_s **)(v6 + 592);
    id v8 = a3;
    dispatch_assert_queue_V2(v7);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"senderIDS"]);

    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _findMatchingDeviceWithIdentifier:v9]);
    __int128 v11 = v10;
    if (v10)
    {
      uint64_t v12 = *(void **)(a1 + 40);
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v10 cameraCapabilities]);
      [v12 _receivedCameraCapabilitiesMessage:v14 fromDevice:v11 isFirstUpdate:v13 == 0];
    }

    else if (dword_100132BB0 <= 90 {
           && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
    }
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _registerForIncomingMessages]_block_invoke_2",  90LL,  "### Rejected camera capabilities update, device not found with ID: %@\n",  v9);
    }

    id v5 = v14;
  }
}

void sub_1000A2544(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  uint64_t v8 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v8 + 248))
  {
    id v15 = v7;
    __int128 v9 = *(dispatch_queue_s **)(v8 + 592);
    id v10 = a4;
    id v11 = a3;
    dispatch_assert_queue_V2(v9);
    (*((void (**)(id, void, void, void))v10 + 2))(v10, 0LL, 0LL, 0LL);

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"senderIDS"]);
    if (v12)
    {
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 528) objectForKeyedSubscript:v12]);
      id v14 = v13;
      if (v13)
      {
        [v13 invalidate];
        [*(id *)(*(void *)(a1 + 40) + 528) setObject:0 forKeyedSubscript:v12];
      }

      [*(id *)(a1 + 40) _handleConfirmationResult:v15 fromDevice:v12];
    }

    else if (dword_100132BB0 <= 90 {
           && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
    }
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _registerForIncomingMessages]_block_invoke_3",  90LL,  "### Received continuity camera confirmation but sender's IDS ID: %@\n",  0LL);
    }

    id v7 = v15;
  }
}

void sub_1000A26A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v6 + 248))
  {
    id v10 = v5;
    id v7 = *(dispatch_queue_s **)(v6 + 592);
    id v8 = a3;
    dispatch_assert_queue_V2(v7);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"senderIDS"]);

    if (v9)
    {
      [*(id *)(a1 + 40) _receivedCameraExitEvent:v10 from:v9];
    }

    else if (dword_100132BB0 <= 90 {
           && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
    }
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _registerForIncomingMessages]_block_invoke_4",  90LL,  "### Received continuity camera exit session but sender's IDS ID: %@\n",  0LL);
    }

    id v5 = v10;
  }
}

void sub_1000A2B14(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_1000A2E54;
    v18[3] = &unk_100114B40;
    id v8 = *(void **)(a1 + 40);
    __int128 v9 = *(void **)(a1 + 32);
    void v18[4] = *(void *)(a1 + 48);
    v18[5] = v9;
    id v10 = v8;
    uint64_t v11 = *(void *)(a1 + 56);
    id v19 = v10;
    uint64_t v20 = v11;
    [v9 sendRequestID:@"_camCap" request:v5 options:0 responseHandler:v18];

    goto LABEL_36;
  }

  [*(id *)(a1 + 32) invalidate];
  [*(id *)(a1 + 40) setCameraCapabilityRequestIsActive:0];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[RPIdentityDaemon sharedIdentityDaemon](&OBJC_CLASS___RPIdentityDaemon, "sharedIdentityDaemon"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identitiesOfType:13 error:0]);

  if ([v3 code] == (id)-6727)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _findMatchingDeviceWithIdentifier:*(void *)(a1 + 56)]);

    int v7 = dword_100132BB0;
    if (v6)
    {
      if (dword_100132BB0 > 30)
      {
        int v15 = 1;
        uint64_t v16 = 5LL;
        goto LABEL_28;
      }

      if (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)) {
        LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _requestCameraCapabilitiesForDevice:]_block_invoke",  30LL,  "Using faster interval(5s) to refetch camera capabilities, there is an existing device\n");
      }
      int v15 = 1;
      uint64_t v16 = 5LL;
      goto LABEL_27;
    }

    if (dword_100132BB0 <= 30)
    {
      if (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL))
      {
        uint64_t v12 = *(void *)(a1 + 56);
        __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _findMatchingDeviceWithIdentifier:v12]);
        id v14 = "yes";
        if (!v13) {
          id v14 = "no";
        }
        LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _requestCameraCapabilitiesForDevice:]_block_invoke",  30LL,  "Not scheduling camera capabilities, deviceIdentifier: %@ device known: %s\n",  v12,  v14);
      }

void sub_1000A2E54(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v11 = a2;
  id v6 = a4;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 592LL));
  [*(id *)(a1 + 40) invalidate];
  [*(id *)(a1 + 48) setCameraCapabilityRequestIsActive:0];
  if (v6)
  {
    if (dword_100132BB0 <= 90
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _requestCameraCapabilitiesForDevice:]_block_invoke_2",  90LL,  "### Failed to send request to get camera capabilities: %@\n",  v6);
    }

    [*(id *)(a1 + 32) _scheduleCameraCapabilitiesRequest:*(void *)(a1 + 48) interval:0];
  }

  else
  {
    int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _findMatchingDeviceWithIdentifier:*(void *)(a1 + 56)]);
    id v8 = v7;
    if (v7)
    {
      __int128 v9 = *(void **)(a1 + 32);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 cameraCapabilities]);
      [v9 _receivedCameraCapabilitiesMessage:v11 fromDevice:v8 isFirstUpdate:v10 == 0];
    }

    else if (dword_100132BB0 <= 30 {
           && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
    }
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _requestCameraCapabilitiesForDevice:]_block_invoke_2",  30LL,  "Received camera capabilities but device is not known: %@\n",  *(void *)(a1 + 56));
    }
  }
}

id sub_1000A3244(uint64_t a1)
{
  id result = (id)*(unsigned int *)(*(void *)(a1 + 32) + 464LL);
  if ((_DWORD)result != -1)
  {
    uint64_t state64 = 0LL;
    id result = (id)notify_get_state((int)result, &state64);
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(_DWORD *)(v3 + 468) != (_DWORD)state64)
    {
      *(_DWORD *)(v3 + 46_Block_object_dispose(va, 8) = state64;
      if (dword_100132BB0 <= 30
        && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
      {
        uint64_t v4 = *(int *)(*(void *)(a1 + 32) + 468LL);
        else {
          id v5 = (&off_100114E18)[v4];
        }
        LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _registerForWombatStateNotifications]_block_invoke",  30LL,  "Received wombat state change notification: %s (0x%x)\n",  v5,  v4);
      }

      id v6 = *(unsigned int **)(a1 + 32);
      uint64_t v7 = v6[117];
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_1000A3358;
      v8[3] = &unk_100114928;
      void v8[4] = v6;
      return [v6 _bluetoothUseCaseFromWombatState:v7 resultBlock:v8];
    }
  }

  return result;
}

void sub_1000A3358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = *(void **)(*(void *)(a1 + 32) + 88LL);
  if (v5)
  {
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 dispatchQueue]);

    if (v9) {
      _[*(id *)(*(void *)(a1 + 32) + 88) updateUseCase:a2 bleScanRate:a3 bleScanRateScreenOff:a4];
    }
  }

void sub_1000A33D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = *(void **)(*(void *)(a1 + 32) + 88LL);
  if (v5)
  {
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 dispatchQueue]);

    if (v9) {
      _[*(id *)(*(void *)(a1 + 32) + 88) updateUseCase:a2 bleScanRate:a3 bleScanRateScreenOff:a4];
    }
  }

id sub_1000A3688(uint64_t a1)
{
  if (dword_100132BB0 <= 20 && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 20LL))) {
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _startObservingOnenessEnabledState]_block_invoke",  20LL,  "Received authentication state change, re-evaluating CBUseCase\n");
  }
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  uint64_t v3 = v2[117];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000A373C;
  v5[3] = &unk_100114928;
  void v5[4] = v2;
  return [v2 _bluetoothUseCaseFromWombatState:v3 resultBlock:v5];
}

void sub_1000A373C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = *(void **)(*(void *)(a1 + 32) + 88LL);
  if (v5)
  {
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 dispatchQueue]);

    if (v9) {
      _[*(id *)(*(void *)(a1 + 32) + 88) updateUseCase:a2 bleScanRate:a3 bleScanRateScreenOff:a4];
    }
  }

void sub_1000A3880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = *(void **)(*(void *)(a1 + 32) + 88LL);
  if (v5)
  {
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 dispatchQueue]);

    if (v9) {
      _[*(id *)(*(void *)(a1 + 32) + 88) updateUseCase:a2 bleScanRate:a3 bleScanRateScreenOff:a4];
    }
  }

id sub_1000A3E50(uint64_t a1)
{
  return [*(id *)(a1 + 32) _xpcConnectionInvalidated:*(void *)(a1 + 40)];
}

void sub_1000A41A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void *sub_1000A41C0(void *result, void *a2, uint64_t a3, _BYTE *a4)
{
  if (result[4] == a3)
  {
    id v5 = result;
    id result = [a2 unsignedIntValue];
    *(_DWORD *)(*(void *)(v5[5] + 8LL) + 24LL) = (_DWORD)result;
    *a4 = 1;
  }

  return result;
}

uint64_t sub_1000A4440(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 accountAltDSID]);
  if (v5
    && (id v6 = (void *)v5,
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountAltDSID]),
        v7,
        v6,
        v7))
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 accountAltDSID]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountAltDSID]);
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 accountID]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountID]);
  }

  id v10 = (void *)v9;
  id v11 = v8;
  id v12 = v10;
  if (v11 == v12)
  {
  }

  else
  {
    __int128 v13 = v12;
    if ((v11 == 0LL) == (v12 != 0LL))
    {

LABEL_12:
      uint64_t v15 = 0LL;
      goto LABEL_13;
    }

    unsigned __int8 v14 = [v11 isEqual:v12];

    if ((v14 & 1) == 0) {
      goto LABEL_12;
    }
  }

  uint64_t v15 = 1LL;
LABEL_13:

  return v15;
}

id sub_1000A4618(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "isEqualToDevice:");
}

void sub_1000A4710(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 328LL);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000A478C;
  v5[3] = &unk_100114C30;
  id v4 = v2;
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  char v7 = *(_BYTE *)(a1 + 48);
  [v3 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_1000A478C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16LL))())
  {
    char v7 = *(void **)(*(void *)(a1 + 32) + 600LL);
    if (!v7
      || (id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]),
          unsigned __int8 v9 = [v7 isEqualToString:v8],
          v8,
          (v9 & 1) == 0))
    {
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472LL;
      v28[2] = sub_1000A49BC;
      v28[3] = &unk_100114C08;
      char v31 = *(_BYTE *)(a1 + 48);
      id v10 = v5;
      uint64_t v11 = *(void *)(a1 + 32);
      id v29 = v10;
      uint64_t v30 = v11;
      id v12 = objc_retainBlock(v28);
      __int128 v13 = *(void **)(*(void *)(a1 + 32) + 528LL);
      if (!v13)
      {
        unsigned __int8 v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = *(void **)(v15 + 528);
        *(void *)(v15 + 52_Block_object_dispose(va, 8) = v14;

        __int128 v13 = *(void **)(*(void *)(a1 + 32) + 528LL);
      }

      uint64_t v17 = objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v10]);
      if (v17)
      {
        __int128 v18 = (RPCompanionLinkClient *)v17;
        ((void (*)(void *, uint64_t))v12[2])(v12, v17);
      }

      else
      {
        id v19 = objc_alloc_init(&OBJC_CLASS___RPCompanionLinkClient);
        uint64_t v20 = objc_alloc_init(&OBJC_CLASS___RPCompanionLinkDevice);
        -[RPCompanionLinkDevice setIdentifier:](v20, "setIdentifier:", v10);
        -[RPCompanionLinkClient setDispatchQueue:](v19, "setDispatchQueue:", *(void *)(*(void *)(a1 + 32) + 592LL));
        -[RPCompanionLinkClient setDestinationDevice:](v19, "setDestinationDevice:", v20);
        -[RPCompanionLinkClient setControlFlags:](v19, "setControlFlags:", 6LL);
        -[RPCompanionLinkClient setServiceType:]( v19,  "setServiceType:",  @"com.apple.devicediscoveryui.rapportwake");
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472LL;
        v23[2] = sub_1000A4C7C;
        v23[3] = &unk_100112318;
        __int128 v18 = v19;
        uint64_t v21 = *(void *)(a1 + 32);
        id v24 = v18;
        uint64_t v25 = v21;
        id v22 = v10;
        id v26 = v22;
        uint64_t v27 = v12;
        -[RPCompanionLinkClient activateWithCompletion:](v18, "activateWithCompletion:", v23);
        [*(id *)(*(void *)(a1 + 32) + 528) setObject:v18 forKeyedSubscript:v22];
      }
    }
  }
}

void sub_1000A49BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(unsigned __int8 *)(a1 + 48);
  if (dword_100132BB0 <= 30 && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
  {
    id v5 = "confirm-dedicated";
    if (!v4) {
      id v5 = "confirm";
    }
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _requestConfirmationFromDevicesMatching:forDedicated:]_block_invoke_3",  30LL,  "Sending continuity camera '%s' message to device: %@\n",  v5,  *(void *)(a1 + 32));
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 536) UUIDString]);
  if (v4) {
    uint64_t v7 = 3LL;
  }
  else {
    uint64_t v7 = 1LL;
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v7));
  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v6,  @"sesID",  v8,  @"actionType",  0LL));

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1000A4B54;
  v11[3] = &unk_100114BE0;
  id v12 = *(id *)(a1 + 32);
  id v13 = v3;
  uint64_t v14 = *(void *)(a1 + 40);
  id v10 = v3;
  [v10 sendRequestID:@"_ccConfirmStart" request:v9 options:0 responseHandler:v11];
}

void sub_1000A4B54(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v9 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v8)
  {
    if (dword_100132BB0 > 90) {
      goto LABEL_10;
    }
    if (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)) {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _requestConfirmationFromDevicesMatching:forDedicated:]_block_invoke_4",  90LL,  "### Received error in response to confirmation message from device: %@: %@\n",  *(void *)(a1 + 32),  v8);
    }
  }

  if (dword_100132BB0 <= 40 && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 40LL))) {
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _requestConfirmationFromDevicesMatching:forDedicated:]_block_invoke_4",  40LL,  "Received response dict %@ from device %@\n",  v9,  *(void *)(a1 + 32));
  }
LABEL_10:
  [*(id *)(a1 + 40) invalidate];
  [*(id *)(*(void *)(a1 + 48) + 528) setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];
}

void sub_1000A4C7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    [*(id *)(a1 + 32) invalidate];
    [*(id *)(*(void *)(a1 + 40) + 528) setObject:0 forKeyedSubscript:*(void *)(a1 + 48)];
    if (dword_100132BB0 <= 90
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _requestConfirmationFromDevicesMatching:forDedicated:]_block_invoke_5",  90LL,  "### Failed to activate a client to remote display device %@: %@\n",  *(void *)(a1 + 48),  v3);
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_1000A532C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (dword_100132BB0 <= 30 && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL))) {
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _sendConfirmationCancelToAllDevices]_block_invoke",  30LL,  "Sending continuity camera '%s' message to device: %@\n",  "cancel",  v5);
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 536) UUIDString]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 2LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v7,  @"sesID",  v8,  @"actionType",  0LL));

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000A54AC;
  v12[3] = &unk_100114C80;
  id v13 = v6;
  id v14 = v5;
  id v10 = v5;
  id v11 = v6;
  [v11 sendRequestID:@"_ccConfirmStart" request:v9 options:0 responseHandler:v12];
}

void sub_1000A54AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v8 = a4;
  [*(id *)(a1 + 32) invalidate];
  id v5 = v8;
  if (v8)
  {
    if (dword_100132BB0 <= 90)
    {
      if (dword_100132BB0 != -1 || (int v6 = _LogCategory_Initialize(&dword_100132BB0, 90LL), v5 = v8, v6))
      {
        LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _sendConfirmationCancelToAllDevices]_block_invoke_2",  90LL,  "### Failed to send cancellation for continuity camera confirmation to device %@: %@\n",  *(void *)(a1 + 40),  v5);
LABEL_8:
        id v5 = v8;
      }
    }
  }

  else if (dword_100132BB0 <= 30)
  {
    if (dword_100132BB0 != -1 || (v7 = _LogCategory_Initialize(&dword_100132BB0, 30LL), id v5 = 0LL, v7))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _sendConfirmationCancelToAllDevices]_block_invoke_2",  30LL,  "Sent cancellation for continuity camera confirmation to device %@\n",  *(void *)(a1 + 40));
      goto LABEL_8;
    }
  }
}

void sub_1000A5884(void *a1, void *a2)
{
  id v3 = a2;
  int v4 = (void *)a1[4];
  if (v3)
  {
    [v4 invalidate];
    if (dword_100132BB0 <= 90
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 90LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _sendDiscoverySessionExitWithReason:]_block_invoke",  90LL,  "### Failed to activate a client to remote display device %@: %@\n",  a1[5],  v3);
    }
  }

  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1000A596C;
    v6[3] = &unk_100114CD0;
    uint64_t v5 = a1[6];
    v6[4] = a1[7];
    void v6[5] = v4;
    v6[6] = a1[5];
    [v4 sendEventID:@"_ccExit" event:v5 options:0 completion:v6];
  }
}

void sub_1000A596C(uint64_t a1, void *a2)
{
  id v6 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 592LL));
  [*(id *)(a1 + 40) invalidate];
  id v3 = v6;
  if (v6)
  {
    if (dword_100132BB0 <= 90)
    {
      if (dword_100132BB0 != -1 || (int v4 = _LogCategory_Initialize(&dword_100132BB0, 90LL), v3 = v6, v4))
      {
        LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _sendDiscoverySessionExitWithReason:]_block_invoke_2",  90LL,  "### Failed to send request to exit session: %@\n",  v3);
LABEL_8:
        id v3 = v6;
      }
    }
  }

  else if (dword_100132BB0 <= 30)
  {
    if (dword_100132BB0 != -1 || (v5 = _LogCategory_Initialize(&dword_100132BB0, 30LL), id v3 = 0LL, v5))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _sendDiscoverySessionExitWithReason:]_block_invoke_2",  30LL,  "Sent camera exit session to device %@\n",  *(void *)(a1 + 48));
      goto LABEL_8;
    }
  }
}

id sub_1000A5F98(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 336LL);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 336);
    *(void *)(v4 + 336) = 0LL;
  }

  if (dword_100132BB0 <= 30 && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL))) {
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _startDiscoverySessionExpirationTimer]_block_invoke",  30LL,  "Discovery session expiration timer, exiting the session");
  }
  return [*(id *)(a1 + 32) _changeDiscoverySessionStateForDevice:0 startReason:0];
}

void sub_1000A6164(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 344LL);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 344);
    *(void *)(v4 + 344) = 0LL;
  }

  id v6 = *(void **)(a1 + 32);
  if (v6[75])
  {
    int v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_findMatchingDeviceWithIdentifier:"));
    id v10 = v7;
    if (!v7 || (v8 = [v7 inDiscoverySession], id v9 = v10, (v8 & 1) == 0))
    {
      if (dword_100132BB0 <= 30
        && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
      {
        LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayDaemon _startInSessionDeviceLostTimer]_block_invoke",  30LL,  "Discovery session ended due to in-session device lost timer");
      }

      [*(id *)(a1 + 32) _changeDiscoverySessionStateForDevice:0 startReason:0];
      id v9 = v10;
    }
  }

void sub_1000A6814(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v5 client]);
  LODWORD(a1) = [v4 isEqual:*(void *)(a1 + 32)];

  if ((_DWORD)a1) {
    [v5 invalidate];
  }
}

id sub_1000A6E1C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _authCompletion:a2];
}

id sub_1000A6E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _promptForPasswordWithFlags:a2 throttleSeconds:a3];
}

id sub_1000A6E38(uint64_t a1)
{
  return [*(id *)(a1 + 32) sessionEndedWithID:*(void *)(a1 + 40) netCnx:*(void *)(a1 + 48)];
}

id sub_1000A6E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _receivedEventID:a2 event:a3 options:a4 sessionID:*(void *)(a1 + 40)];
}

id sub_1000A6E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return [*(id *)(a1 + 32) _receivedRequestID:a2 request:a3 options:a4 responseHandler:a5 sessionID:*(void *)(a1 + 40)];
}

id sub_1000A6E7C(uint64_t a1, int a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pairingInfo]);

  if (!v4)
  {
    if (a2 != 1) {
      return [*(id *)(*(void *)(a1 + 40) + 56) _update];
    }
LABEL_14:
    id v8 = [*(id *)(a1 + 48) linkType];
    uint64_t v9 = *(void *)(a1 + 40);
    if (*(void *)(v9 + 40))
    {
      id v10 = v8;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v9 + 80) remoteObjectProxy]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v10));
      [v11 remoteDisplayUpdateDataLinkType:v12];
    }

    id v13 = sub_100098440();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    id v15 = sub_100098440();
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    os_signpost_id_t v17 = os_signpost_id_make_with_pointer(v16, *(const void **)(a1 + 40));

    if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      *(_WORD *)id v19 = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_EVENT,  v17,  "RPConnectionStateReady",  "RPConnectionStateReady",  v19,  2u);
    }

    return [*(id *)(*(void *)(a1 + 40) + 56) _update];
  }

  if (a2)
  {
    if (a2 != 1) {
      return [*(id *)(*(void *)(a1 + 40) + 56) _update];
    }
    if (dword_100132BB0 <= 30
      && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL)))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayXPCConnection netConnectionStartWithDevice:session:error:]_block_invoke_6",  30LL,  "Discovery session state change after client session setup of session paired device\n");
    }

    id v5 = *(void **)(*(void *)(a1 + 40) + 56LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) peerDeviceInfo]);
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 verifiedIdentity]);
    [v5 _changeDiscoverySessionStateForDevice:v7 startReason:1];

    goto LABEL_14;
  }

  [*(id *)(a1 + 32) setNeedsAWDL:0];
  if (dword_100132BB0 <= 30 && (dword_100132BB0 != -1 || _LogCategory_Initialize(&dword_100132BB0, 30LL))) {
    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayXPCConnection netConnectionStartWithDevice:session:error:]_block_invoke_6",  30LL,  "Reset needsAWDL state at the end of pairing session\n");
  }
  return [*(id *)(*(void *)(a1 + 40) + 56) _update];
}

void sub_1000A7614(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (dword_100132BB0 <= 90)
  {
    if (dword_100132BB0 != -1 || (int v4 = _LogCategory_Initialize(&dword_100132BB0, 90LL), v3 = v6, v4))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayXPCConnection sessionStartWithID:netCnx:completion:]_block_invoke",  90LL,  "### Server session start XPC error: %@, %{error}\n",  *(void *)(a1 + 32),  v3);
      id v3 = v6;
    }
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
    id v3 = v6;
  }
}

void sub_1000A76BC(void *a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (v3)
  {
    if (dword_100132BB0 <= 90)
    {
      if (dword_100132BB0 != -1 || (int v4 = _LogCategory_Initialize(&dword_100132BB0, 90LL), v3 = v7, v4))
      {
        LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayXPCConnection sessionStartWithID:netCnx:completion:]_block_invoke_2",  90LL,  "### Server session start failed: %@, device %@, %{error}\n",  a1[4],  a1[5],  v3);
LABEL_8:
        id v3 = v7;
      }
    }
  }

  else if (dword_100132BB0 <= 30)
  {
    if (dword_100132BB0 != -1 || (v5 = _LogCategory_Initialize(&dword_100132BB0, 30LL), id v3 = 0LL, v5))
    {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayXPCConnection sessionStartWithID:netCnx:completion:]_block_invoke_2",  30LL,  "Server session started: %@, device %@\n",  a1[4],  a1[5]);
      goto LABEL_8;
    }
  }

  uint64_t v6 = a1[6];
  if (v6)
  {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
    id v3 = v7;
  }
}

void sub_1000A7BE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (dword_100132BB0 <= 90)
  {
    if (dword_100132BB0 != -1 || (int v4 = _LogCategory_Initialize(&dword_100132BB0, 90LL), v3 = v5, v4)) {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayXPCConnection _receivedRequestID:request:options:responseHandler:sessionID:]_block_invoke",  90LL,  "### Session start XPC error: %{error}\n",  v3);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000A7C84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (dword_100132BB0 <= 90)
  {
    if (dword_100132BB0 != -1 || (int v4 = _LogCategory_Initialize(&dword_100132BB0, 90LL), v3 = v5, v4)) {
      LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayXPCConnection _receivedRequestID:request:options:responseHandler:sessionID:]_block_invoke_2",  90LL,  "### Session start XPC error: %{error}\n",  v3);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000A8384(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (objc_msgSend(*(id *)(a1 + 32), "shouldReportDevice:"))
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 80) remoteObjectProxy]);
    [v4 remoteDisplayFoundDevice:v5];
  }
}

id sub_1000A85F4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "_deliverBufferedConnectionsToServer:");
}

void sub_1000A8E84(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A8EC0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v2 = result;
    if (dword_100132BB0 > 90) {
      goto LABEL_6;
    }
    if (dword_100132BB0 == -1)
    {
      if (!_LogCategory_Initialize(&dword_100132BB0, 90LL))
      {
LABEL_6:
        id result = *(void *)(v2 + 40);
        if (result) {
          return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(v2 + 32));
        }
        return result;
      }

      uint64_t v1 = *(void *)(v2 + 32);
    }

    LogPrintF( &dword_100132BB0,  "-[RPRemoteDisplayXPCConnection remoteDisplayActivateSession:completion:]_block_invoke",  90LL,  "### Activate session failed: %{error}\n",  v1);
    goto LABEL_6;
  }

  return result;
}

Class sub_1000A9F94()
{
  if (qword_100133620 != -1) {
    dispatch_once(&qword_100133620, &stru_100114D68);
  }
  Class result = objc_getClass("PBSSystemStatus");
  qword_100133618 = (uint64_t)result;
  off_100132C20[0] = (uint64_t (*)())sub_1000A9FF0;
  return result;
}

id sub_1000A9FF0()
{
  return (id)qword_100133618;
}

void sub_1000A9FFC(id a1)
{
  qword_100133628 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/PineBoardServices.framework/PineBoardServices",  2);
}

Class sub_1000AA024()
{
  if (qword_100133638 != -1) {
    dispatch_once(&qword_100133638, &stru_100114D88);
  }
  Class result = objc_getClass("SFDeviceDiscovery");
  qword_100133630 = (uint64_t)result;
  off_100132C28[0] = (uint64_t (*)())sub_1000AA080;
  return result;
}

id sub_1000AA080()
{
  return (id)qword_100133630;
}

void sub_1000AA08C(id a1)
{
  qword_100133640 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
}

void sub_1000AA0B4(id a1)
{
  uint64_t v1 = LogCategoryCopyOSLogHandle(&dword_100132BB0);
  uint64_t v2 = (void *)qword_100133648;
  qword_100133648 = v1;
}

Class sub_1000AA0DC()
{
  if (qword_100133638 != -1) {
    dispatch_once(&qword_100133638, &stru_100114D88);
  }
  Class result = objc_getClass("SFService");
  qword_100133658 = (uint64_t)result;
  off_100132C30[0] = (uint64_t (*)())sub_1000AA138;
  return result;
}

id sub_1000AA138()
{
  return (id)qword_100133658;
}

id sub_1000AA144()
{
  if (qword_100133638 != -1) {
    dispatch_once(&qword_100133638, &stru_100114D88);
  }
  int v0 = (id *)dlsym((void *)qword_100133640, "SFServiceIdentifierRemoteDisplay");
  if (v0) {
    objc_storeStrong((id *)&qword_100133610, *v0);
  }
  off_100132C38[0] = (uint64_t (*)())sub_1000AA1BC;
  return (id)qword_100133610;
}

id sub_1000AA1BC()
{
  return (id)qword_100133610;
}

Class sub_1000AA1C8()
{
  if (qword_100133620 != -1) {
    dispatch_once(&qword_100133620, &stru_100114D68);
  }
  Class result = objc_getClass("PBSUserProfileManager");
  qword_100133660 = (uint64_t)result;
  off_100132C40[0] = (uint64_t (*)())sub_1000AA224;
  return result;
}

id sub_1000AA224()
{
  return (id)qword_100133660;
}

Class sub_1000AA230()
{
  if (qword_100133670 != -1) {
    dispatch_once(&qword_100133670, &stru_100114DC8);
  }
  Class result = objc_getClass("AKAccountManager");
  qword_100133668 = (uint64_t)result;
  off_100132C48 = (uint64_t (*)())sub_1000AA28C;
  return result;
}

id sub_1000AA28C()
{
  return (id)qword_100133668;
}

void sub_1000AA298(id a1)
{
  qword_100133678 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppleAccount.framework/AppleAccount", 2);
}

Class sub_1000AA2C0()
{
  if (qword_100133638 != -1) {
    dispatch_once(&qword_100133638, &stru_100114D88);
  }
  Class result = objc_getClass("SFAuthenticationManager");
  qword_100133680 = (uint64_t)result;
  off_100132C58 = (uint64_t (*)())sub_1000AA31C;
  return result;
}

id sub_1000AA31C()
{
  return (id)qword_100133680;
}

void sub_1000AA368(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___RPStatusDaemon);
  uint64_t v2 = (void *)qword_100133688;
  qword_100133688 = (uint64_t)v1;
}

id sub_1000AA6F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

void sub_1000AA86C(id a1, NSDictionary *a2, NSDictionary *a3)
{
  id v5 = a2;
  int v4 = a3;
}

id sub_1000AA958(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidate];
}

id sub_1000AAF50(uint64_t a1)
{
  return [*(id *)(a1 + 32) _xpcConnectionInvalidated:*(void *)(a1 + 40)];
}

id sub_1000ABC34(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleSiriAudio:a2];
}

void sub_1000ABC40(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"senderID"]);
  if ([v9 length]) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 24LL), v9);
  }
  [*(id *)(a1 + 32) _handleSiriStart:v10 options:v7 responseHandler:v8];
}

id sub_1000ABCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _handleSiriStop:a2 options:a3 responseHandler:a4];
}

id sub_1000ABCF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _handleSiriStartWhileRecording:a2 options:a3 responseHandler:a4];
}

id sub_1000AC280(uint64_t a1)
{
  if (dword_100132E50 <= 30 && (dword_100132E50 != -1 || _LogCategory_Initialize(&dword_100132E50, 30LL)))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void *)(v2 + 32);
    if (*(_BYTE *)(v2 + 48)) {
      int v4 = @"YES";
    }
    else {
      int v4 = @"NO";
    }
    LogPrintF( &dword_100132E50,  "-[RPSiriDaemon _handleSiriStart:options:responseHandler:]_block_invoke",  30LL,  "#ptt SiriContext %@ SiriStarted: %@\n",  v3,  v4);
  }

  id v5 = *(void **)(a1 + 32);
  if (!v5[4]) {
    return _[v5 siriAudioSessionDidReceiveStopRecordingWithDeviceId:@"Unknown"];
  }
  if (dword_100132E50 <= 40 && (dword_100132E50 != -1 || _LogCategory_Initialize(&dword_100132E50, 40LL))) {
    LogPrintF( &dword_100132E50,  "-[RPSiriDaemon _handleSiriStart:options:responseHandler:]_block_invoke",  40LL,  "#ptt Sending startSiriWithContext.\n");
  }
  id result = [*(id *)(a1 + 40) startSiriWithContext:*(void *)(a1 + 48)];
  *(_BYTE *)(*(void *)(a1 + 32) + 48LL) = 1;
  return result;
}

void sub_1000AC3A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = v3;
  if (v3)
  {
    id v4 = v3;
    if (dword_100132E50 <= 90)
    {
      if (dword_100132E50 != -1 || (v6 = _LogCategory_Initialize(&dword_100132E50, 90LL), id v4 = v8, v6)) {
        LogPrintF( &dword_100132E50,  "-[RPSiriDaemon _handleSiriStart:options:responseHandler:]_block_invoke_2",  90LL,  "### SiriStart audio failed: %{error}\n",  v4);
      }
    }

    id v7 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    if (dword_100132E50 <= 30
      && (dword_100132E50 != -1 || _LogCategory_Initialize(&dword_100132E50, 30LL)))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceID]);
      LogPrintF( &dword_100132E50,  "-[RPSiriDaemon _handleSiriStart:options:responseHandler:]_block_invoke_2",  30LL,  "SiriStarted %@\n",  v5);
    }

    id v7 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v7();
}

void sub_1000ACA78(id a1, NSDictionary *a2, NSDictionary *a3, NSError *a4)
{
  id v8 = a2;
  int v6 = a3;
  id v7 = a4;
  if (dword_100132E50 <= 90 && (dword_100132E50 != -1 || _LogCategory_Initialize(&dword_100132E50, 90LL))) {
    LogPrintF( &dword_100132E50,  "-[RPSiriDaemon siriAudioSessionDidReceiveStopRecordingWithDeviceId:]_block_invoke",  90LL,  "#ptt Response Handler with error - %@",  v7,  v8);
  }
}

id sub_1000ACB18(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

Class sub_1000ACB94()
{
  if (qword_1001336A0 != -1) {
    dispatch_once(&qword_1001336A0, &stru_100114F30);
  }
  Class result = objc_getClass("PBSSystemServiceConnection");
  qword_100133698 = (uint64_t)result;
  off_100132EC0 = (uint64_t (*)())sub_1000ACBF0;
  return result;
}

id sub_1000ACBF0()
{
  return (id)qword_100133698;
}

void sub_1000ACBFC(id a1)
{
  qword_1001336A8 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/PineBoardServices.framework/PineBoardServices",  2);
}

Class sub_1000ACC24()
{
  if (qword_1001336A0 != -1) {
    dispatch_once(&qword_1001336A0, &stru_100114F30);
  }
  Class result = objc_getClass("PBSMediaRemoteSiriContext");
  qword_1001336B0 = (uint64_t)result;
  off_100132EC8 = (uint64_t (*)())sub_1000ACC80;
  return result;
}

id sub_1000ACC80()
{
  return (id)qword_1001336B0;
}

id sub_1000AD974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _handleSessionStart:a2 options:a3 responseHandler:a4];
}

id sub_1000AD988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _handleSessionStop:a2 options:a3 responseHandler:a4];
}

id sub_1000AD99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleTextInputChange:a2 options:a3];
}

void sub_1000AE2AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (dword_100132F30 <= 90)
    {
      id v6 = v3;
      if (dword_100132F30 != -1 || (v5 = _LogCategory_Initialize(&dword_100132F30, 90LL), id v4 = v6, v5))
      {
        LogPrintF( &dword_100132F30,  "-[RPTextInputDaemon _sendTextInputPayloadEvent:rtiPayload:]_block_invoke",  90LL,  "### RTI send text change failed: ID '%@', %{error}\n",  *(void *)(a1 + 32),  v4);
        id v4 = v6;
      }
    }
  }
}

uint64_t sub_1000AE398(uint64_t result)
{
  if (*(void *)(*(void *)(result + 32) + 16LL))
  {
    if (dword_100132F30 <= 30)
    {
      if (dword_100132F30 != -1) {
        return LogPrintF( &dword_100132F30,  "-[RPTextInputDaemon inputSystemService:didCreateInputSession:]_block_invoke",  30LL,  "RTI Create\n");
      }
      Class result = _LogCategory_Initialize(&dword_100132F30, 30LL);
      if ((_DWORD)result) {
        return LogPrintF( &dword_100132F30,  "-[RPTextInputDaemon inputSystemService:didCreateInputSession:]_block_invoke",  30LL,  "RTI Create\n");
      }
    }
  }

  return result;
}

void sub_1000AE480(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 16LL))
  {
    id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentDataPayload]);
    Class v2 = off_100132FB8();
    uint64_t v5 = objc_opt_class(v2, v3, v4);
    if ((objc_opt_isKindOfClass(v13, v5) & 1) != 0)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v13 documentTraits]);
      if (dword_100132F30 <= 30
        && (dword_100132F30 != -1 || _LogCategory_Initialize(&dword_100132F30, 30LL)))
      {
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 appId]);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 title]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 prompt]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 textInputTraits]);
        unsigned int v11 = [v10 secureTextEntry];
        id v12 = "no";
        if (v11) {
          id v12 = "yes";
        }
        LogPrintF( &dword_100132F30,  "-[RPTextInputDaemon inputSystemService:inputSessionDidBegin:]_block_invoke",  30LL,  "RTI Begin input: AppID '%@', Title '%@', Prompt '%@', Secure %s\n",  v7,  v8,  v9,  v12);
      }
    }

    else
    {
      if (dword_100132F30 > 30
        || dword_100132F30 == -1 && !_LogCategory_Initialize(&dword_100132F30, 30LL))
      {
        goto LABEL_14;
      }

      id v6 = (void *)objc_claimAutoreleasedReturnValue([v13 data]);
      LogPrintF( &dword_100132F30,  "-[RPTextInputDaemon inputSystemService:inputSessionDidBegin:]_block_invoke",  30,  "RTI Begin raw: %d bytes\n",  [v6 length]);
    }

LABEL_14:
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 24LL), *(id *)(a1 + 40));
    [*(id *)(a1 + 32) _sendTextInputPayloadEvent:@"_tiStarted" rtiPayload:v13];
  }

void *sub_1000AE6C8(void *result)
{
  if (*(void *)(result[4] + 16LL))
  {
    uint64_t v1 = result;
    if (dword_100132F30 <= 30
      && (dword_100132F30 != -1 || _LogCategory_Initialize(&dword_100132F30, 30LL)))
    {
      LogPrintF( &dword_100132F30,  "-[RPTextInputDaemon inputSystemService:inputSessionDidEnd:]_block_invoke",  30LL,  "RTI End\n");
    }

    uint64_t v2 = v1[4];
    uint64_t v3 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = 0LL;

    return [(id)v1[4] _sendTextInputPayloadEvent:@"_tiStopped" rtiPayload:0];
  }

  return result;
}

void *sub_1000AE7C4(void *result)
{
  if (*(void *)(result[4] + 16LL))
  {
    uint64_t v1 = result;
    if (dword_100132F30 <= 30
      && (dword_100132F30 != -1 || _LogCategory_Initialize(&dword_100132F30, 30LL)))
    {
      LogPrintF( &dword_100132F30,  "-[RPTextInputDaemon inputSystemService:inputSessionDidDie:]_block_invoke",  30LL,  "RTI Died\n");
    }

    uint64_t v2 = v1[4];
    uint64_t v3 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = 0LL;

    return [(id)v1[4] _sendTextInputPayloadEvent:@"_tiStopped" rtiPayload:0];
  }

  return result;
}

void sub_1000AE8E4(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 16LL))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentDataPayload]);
    id v5 = v2;
    if (dword_100132F30 <= 20)
    {
      if (dword_100132F30 != -1 || (v4 = _LogCategory_Initialize(&dword_100132F30, 20LL), uint64_t v2 = v5, v4))
      {
        uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 data]);
        LogPrintF( &dword_100132F30,  "-[RPTextInputDaemon inputSystemService:inputSessionDocumentDidChange:]_block_invoke",  20,  "RTI Change local: %d bytes\n",  [v3 length]);

        uint64_t v2 = v5;
      }
    }

    [*(id *)(a1 + 32) _sendTextInputPayloadEvent:@"_tiC" rtiPayload:v2];
  }

uint64_t sub_1000AEA3C(uint64_t result)
{
  if (*(void *)(*(void *)(result + 32) + 16LL))
  {
    if (dword_100132F30 <= 30)
    {
      uint64_t v1 = result;
      if (dword_100132F30 != -1) {
        return LogPrintF( &dword_100132F30,  "-[RPTextInputDaemon inputSystemService:inputSessionDidPause:withReason:]_block_invoke",  30LL,  "RTI Pause, reason '%@'\n",  *(void *)(v1 + 40));
      }
      Class result = _LogCategory_Initialize(&dword_100132F30, 30LL);
      if ((_DWORD)result) {
        return LogPrintF( &dword_100132F30,  "-[RPTextInputDaemon inputSystemService:inputSessionDidPause:withReason:]_block_invoke",  30LL,  "RTI Pause, reason '%@'\n",  *(void *)(v1 + 40));
      }
    }
  }

  return result;
}

uint64_t sub_1000AEB40(uint64_t result)
{
  if (*(void *)(*(void *)(result + 32) + 16LL))
  {
    if (dword_100132F30 <= 30)
    {
      uint64_t v1 = result;
      if (dword_100132F30 != -1) {
        return LogPrintF( &dword_100132F30,  "-[RPTextInputDaemon inputSystemService:inputSessionDidUnpause:withReason:]_block_invoke",  30LL,  "RTI Unpause, reason '%@'\n",  *(void *)(v1 + 40));
      }
      Class result = _LogCategory_Initialize(&dword_100132F30, 30LL);
      if ((_DWORD)result) {
        return LogPrintF( &dword_100132F30,  "-[RPTextInputDaemon inputSystemService:inputSessionDidUnpause:withReason:]_block_invoke",  30LL,  "RTI Unpause, reason '%@'\n",  *(void *)(v1 + 40));
      }
    }
  }

  return result;
}

Class sub_1000AEC30()
{
  if (qword_1001336C8 != -1) {
    dispatch_once(&qword_1001336C8, &stru_100114F50);
  }
  Class result = objc_getClass("RTIInputSystemService");
  qword_1001336C0 = (uint64_t)result;
  off_100132FA0 = (uint64_t (*)())sub_1000AEC8C;
  return result;
}

id sub_1000AEC8C()
{
  return (id)qword_1001336C0;
}

void sub_1000AEC98(id a1)
{
  qword_1001336D0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/RemoteTextInput.framework/RemoteTextInput", 2);
}

id sub_1000AECC0()
{
  if (qword_1001336C8 != -1) {
    dispatch_once(&qword_1001336C8, &stru_100114F50);
  }
  int v0 = (id *)dlsym((void *)qword_1001336D0, "RTIServiceRapportName");
  if (v0) {
    objc_storeStrong((id *)&qword_1001336B8, *v0);
  }
  off_100132FA8 = (uint64_t (*)())sub_1000AED38;
  return (id)qword_1001336B8;
}

id sub_1000AED38()
{
  return (id)qword_1001336B8;
}

Class sub_1000AED44()
{
  if (qword_1001336C8 != -1) {
    dispatch_once(&qword_1001336C8, &stru_100114F50);
  }
  Class result = objc_getClass("RTIDataPayload");
  qword_1001336D8 = (uint64_t)result;
  off_100132FB0 = (uint64_t (*)())sub_1000AEDA0;
  return result;
}

id sub_1000AEDA0()
{
  return (id)qword_1001336D8;
}

Class sub_1000AEDAC()
{
  if (qword_1001336C8 != -1) {
    dispatch_once(&qword_1001336C8, &stru_100114F50);
  }
  Class result = objc_getClass("RTIInputSystemDataPayload");
  qword_1001336E0 = (uint64_t)result;
  off_100132FB8 = (uint64_t (*)())sub_1000AEE08;
  return result;
}

id sub_1000AEE08()
{
  return (id)qword_1001336E0;
}

uint64_t sub_1000AEE14()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1000AFEDC(v0, qword_1001336F8);
  sub_1000AFC14(v0, (uint64_t)qword_1001336F8);
  return Logger.init(subsystem:category:)( 0xD000000000000011LL,  0x80000001000EEED0LL,  0xD000000000000011LL,  0x80000001000EEEF0LL);
}

uint64_t sub_1000AEE90()
{
  return swift_allocObject(v0, 16LL, 7LL);
}

void sub_1000AEEA0(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = qword_1001336F0;
    swift_bridgeObjectRetain(a2);
    if (v4 != -1) {
      swift_once(&qword_1001336F0, sub_1000AEE14);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_1000AFC14(v5, (uint64_t)qword_1001336F8);
    uint64_t v6 = swift_bridgeObjectRetain(a2);
    id v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v10 = swift_slowAlloc(32LL, -1LL);
      uint64_t v16 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_bridgeObjectRetain(a2);
      uint64_t v15 = sub_1000AF320(a1, a2, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Test log: RPSwiftMemoryTest_enum.associatedValue(%s)",  v9,  0xCu);
      swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
    }
  }

  else
  {
    if (qword_1001336F0 != -1) {
      swift_once(&qword_1001336F0, sub_1000AEE14);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_1000AFC14(v11, (uint64_t)qword_1001336F8);
    oslog = (os_log_s *)((uint64_t (*)(void))Logger.logObject.getter)();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Test log: RPSwiftMemoryTest_enum.empty", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }
  }

uint64_t sub_1000AF10C()
{
  uint64_t v1 = swift_allocObject(v0, 112LL, 15LL);
  swift_defaultActor_initialize();
  return v1;
}

id RPSwiftMemoryTest_objCClass.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

id RPSwiftMemoryTest_objCClass.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

id RPSwiftMemoryTest_objCClass.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000AF208()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

void sub_1000AF218()
{
}

void sub_1000AF224(const char *a1)
{
  if (qword_1001336F0 != -1) {
    swift_once(&qword_1001336F0, sub_1000AEE14);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_1000AFC14(v2, (uint64_t)qword_1001336F8);
  oslog = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, a1, v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }
}

uint64_t sub_1000AF2F8()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000AF314()
{
  return v0;
}

uint64_t sub_1000AF320(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000AF3F0(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000AFE5C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000AFE5C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_1000AFE3C(v12);
  return v7;
}

uint64_t sub_1000AF3F0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_1000AF5A8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000AF63C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000AF814(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000AF814(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000AF63C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_1000AF7B0(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_1000AF7B0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_1000AFE98(&qword_100133188);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000AF814(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000AFE98(&qword_100133188);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

void _s8rapportd27RPSwiftMemoryTest_objCClassC10performLogyyF_0()
{
  if (qword_1001336F0 != -1) {
    swift_once(&qword_1001336F0, sub_1000AEE14);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_1000AFC14(v0, (uint64_t)qword_1001336F8);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Test log: RPSwiftMemoryTest_objCClass", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  unint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    int64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Test log: RPSwiftMemoryTest_swiftClass", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    size_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)size_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Test log: RPSwiftMemoryTest_struct", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  int v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Test log: RPSwiftMemoryTest_enum.empty", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  sub_1000AEEA0(1953719636LL, 0xE400000000000000LL);
  uint64_t v19 = type metadata accessor for RPSwiftMemoryTest_actor(v17, v18);
  uint64_t v20 = swift_allocObject(v19, 112LL, 15LL);
  uint64_t v21 = swift_defaultActor_initialize();
  oslog = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v22))
  {
    id v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v22, "Test log: RPSwiftMemoryTest_actor", v23, 2u);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  swift_release(v20);
}

uint64_t sub_1000AFC14(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t type metadata accessor for RPSwiftMemoryTest_objCClass(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8rapportd27RPSwiftMemoryTest_objCClass, a2);
}

uint64_t type metadata accessor for RPSwiftMemoryTest_swiftClass(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8rapportd28RPSwiftMemoryTest_swiftClass, a2);
}

ValueMetadata *type metadata accessor for RPSwiftMemoryTest_struct()
{
  return &type metadata for RPSwiftMemoryTest_struct;
}

void *initializeBufferWithCopyOfBuffer for RPSwiftMemoryTest_enum(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for RPSwiftMemoryTest_enum(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for RPSwiftMemoryTest_enum(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v3);
  return a1;
}

__n128 initializeWithTake for RPSwiftMemoryTest_enum(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for RPSwiftMemoryTest_enum(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RPSwiftMemoryTest_enum(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for RPSwiftMemoryTest_enum( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose(va, 8) = a2;
    }
  }

  return result;
}

uint64_t sub_1000AFDD0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000AFDEC(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for RPSwiftMemoryTest_enum()
{
  return &type metadata for RPSwiftMemoryTest_enum;
}

uint64_t type metadata accessor for RPSwiftMemoryTest_actor(uint64_t a1, uint64_t a2)
{
  return objc_opt_self(&OBJC_CLASS____TtC8rapportd23RPSwiftMemoryTest_actor, a2);
}

uint64_t sub_1000AFE3C(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000AFE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000AFE98(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t *sub_1000AFEDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

void sub_1000AFF20()
{
}

void sub_1000AFF8C()
{
  v1[0] = 67109120;
  v1[1] = v0;
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Magic value does not match: 0x%x",  (uint8_t *)v1,  8u);
  sub_10003BE6C();
}

void sub_1000B0004()
{
  *(_WORD *)int v0 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEBUG,  "Connection not validated yet",  v0,  2u);
  sub_10003BE6C();
}

void sub_1000B0044( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10003BE4C( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  a3,  "Received error code=%u",  a5,  a6,  a7,  a8,  0);
  sub_10003BE6C();
}

void sub_1000B00BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10003BE5C( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  a3,  "Received data, length=%zu, passing through",  a5,  a6,  a7,  a8,  0);
  sub_10003BE44();
}

void sub_1000B0134(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 8LL);
  int v2 = *(unsigned __int8 *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  v4[0] = 67109376;
  v4[1] = v2;
  __int16 v5 = 2048;
  uint64_t v6 = v3;
  _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEBUG,  "Got a message header, type=%d, length=%zu",  (uint8_t *)v4,  0x12u);
  sub_10003BE44();
}

void sub_1000B01C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000B0234(uint64_t a1)
{
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Stop handler called for framer=%@, sending CLOSE to daemon",  (uint8_t *)&v1,  0xCu);
  sub_10003BE44();
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__AWDLBonjourTransportServiceMetadata(void *a1, const char *a2, ...)
{
  return _[a1 _AWDLBonjourTransportServiceMetadata];
}

id objc_msgSend__FZIDType(void *a1, const char *a2, ...)
{
  return _[a1 _FZIDType];
}

id objc_msgSend__acquireRBSAssertionForEntry_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_acquireRBSAssertionForEntry:error:");
}

id objc_msgSend__activateScreenSaverWithResponseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateScreenSaverWithResponseHandler:");
}

id objc_msgSend__activeDeviceAdded_cnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activeDeviceAdded:cnx:");
}

id objc_msgSend__activeDeviceChanged_changes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activeDeviceChanged:changes:");
}

id objc_msgSend__activeDeviceChangedForConnection_bonjourDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activeDeviceChangedForConnection:bonjourDevice:");
}

id objc_msgSend__activeDeviceRemoved_cnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activeDeviceRemoved:cnx:");
}

id objc_msgSend__addApplicationPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addApplicationPID:");
}

id objc_msgSend__addProxyIdentifier_toDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addProxyIdentifier:toDictionary:");
}

id objc_msgSend__airPlayLeaderStateUncached(void *a1, const char *a2, ...)
{
  return _[a1 _airPlayLeaderStateUncached];
}

id objc_msgSend__allowMessageForRegistrationOptions_cnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allowMessageForRegistrationOptions:cnx:");
}

id objc_msgSend__allowStreamRequest_xpcCnx_rpCnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allowStreamRequest:xpcCnx:rpCnx:");
}

id objc_msgSend__appearsToBeEmail(void *a1, const char *a2, ...)
{
  return _[a1 _appearsToBeEmail];
}

id objc_msgSend__appearsToBePhoneNumber(void *a1, const char *a2, ...)
{
  return _[a1 _appearsToBePhoneNumber];
}

id objc_msgSend__applicationServiceAdvertiseDescriptorForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applicationServiceAdvertiseDescriptorForClient:");
}

id objc_msgSend__authTagWithSelfIdentity_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authTagWithSelfIdentity:data:");
}

id objc_msgSend__bestGuessURI(void *a1, const char *a2, ...)
{
  return _[a1 _bestGuessURI];
}

id objc_msgSend__bleClientConnectionEnded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bleClientConnectionEnded:");
}

id objc_msgSend__bleClientConnectionStateChanged_cnx_sessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bleClientConnectionStateChanged:cnx:sessionID:");
}

id objc_msgSend__bleDiscoveryEnsureStarted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bleDiscoveryEnsureStarted:");
}

id objc_msgSend__bleDiscoveryTriggerEnhancedDiscovery_useCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bleDiscoveryTriggerEnhancedDiscovery:useCase:");
}

id objc_msgSend__bleServerEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _bleServerEnsureStarted];
}

id objc_msgSend__bleServerEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _bleServerEnsureStopped];
}

id objc_msgSend__bluetoothUseCaseFromWombatState_resultBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bluetoothUseCaseFromWombatState:resultBlock:");
}

id objc_msgSend__btAddressMonitorEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _btAddressMonitorEnsureStarted];
}

id objc_msgSend__btAddressMonitorEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _btAddressMonitorEnsureStopped];
}

id objc_msgSend__btPipeEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _btPipeEnsureStarted];
}

id objc_msgSend__btPipeEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _btPipeEnsureStopped];
}

id objc_msgSend__btPipeSetup_withPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_btPipeSetup:withPriority:");
}

id objc_msgSend__btPipeSyncKeysIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _btPipeSyncKeysIfNeeded];
}

id objc_msgSend__btPipeTearDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_btPipeTearDown:");
}

id objc_msgSend__bufferCloudMessage_frameType_msgCtx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bufferCloudMessage:frameType:msgCtx:");
}

id objc_msgSend__changeDiscoverySessionStateForDevice_startReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_changeDiscoverySessionStateForDevice:startReason:");
}

id objc_msgSend__checkForProxyOrLocalDestinations_eventID_event_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForProxyOrLocalDestinations:eventID:event:options:completion:");
}

id objc_msgSend__checkRSSIThresholdForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkRSSIThresholdForDevice:");
}

id objc_msgSend__clearConfirmationClientCache(void *a1, const char *a2, ...)
{
  return _[a1 _clearConfirmationClientCache];
}

id objc_msgSend__clearCurrentTransaction(void *a1, const char *a2, ...)
{
  return _[a1 _clearCurrentTransaction];
}

id objc_msgSend__clientAWDLPairingSessionWithDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientAWDLPairingSessionWithDevice:");
}

id objc_msgSend__clientBLEActionDiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLEActionDiscoveryEnsureStarted];
}

id objc_msgSend__clientBLEActionDiscoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLEActionDiscoveryEnsureStopped];
}

id objc_msgSend__clientBLEActionDiscoveryShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLEActionDiscoveryShouldRun];
}

id objc_msgSend__clientBLEDiscoveryDeviceLost_force_deviceFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientBLEDiscoveryDeviceLost:force:deviceFlags:");
}

id objc_msgSend__clientBLEDiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLEDiscoveryEnsureStarted];
}

id objc_msgSend__clientBLEDiscoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLEDiscoveryEnsureStopped];
}

id objc_msgSend__clientBLEDiscoveryShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLEDiscoveryShouldRun];
}

id objc_msgSend__clientBLEFamilyDeviceReportChanges(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLEFamilyDeviceReportChanges];
}

id objc_msgSend__clientBLENearbyActionAdvertiserEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionAdvertiserEnsureStopped];
}

id objc_msgSend__clientBLENearbyActionAdvertiserShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionAdvertiserShouldRun];
}

id objc_msgSend__clientBLENearbyActionAdvertiserStartTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionAdvertiserStartTimer];
}

id objc_msgSend__clientBLENearbyActionDisableDupeFilter(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionDisableDupeFilter];
}

id objc_msgSend__clientBLENearbyActionDiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionDiscoveryEnsureStarted];
}

id objc_msgSend__clientBLENearbyActionDiscoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionDiscoveryEnsureStopped];
}

id objc_msgSend__clientBLENearbyActionDiscoveryScanRateStartTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionDiscoveryScanRateStartTimer];
}

id objc_msgSend__clientBLENearbyActionDiscoveryShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionDiscoveryShouldRun];
}

id objc_msgSend__clientBLENearbyActionEnableDupeFilter(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionEnableDupeFilter];
}

id objc_msgSend__clientBLENearbyActionV2AdvertiserEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionV2AdvertiserEnsureStarted];
}

id objc_msgSend__clientBLENearbyActionV2AdvertiserEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionV2AdvertiserEnsureStopped];
}

id objc_msgSend__clientBLENearbyActionV2AdvertiserRestart(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionV2AdvertiserRestart];
}

id objc_msgSend__clientBLENearbyActionV2AdvertiserShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionV2AdvertiserShouldRun];
}

id objc_msgSend__clientBLENearbyActionV2AdvertiserUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENearbyActionV2AdvertiserUpdate];
}

id objc_msgSend__clientBLENeedsAWDLAdvertiserEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENeedsAWDLAdvertiserEnsureStarted];
}

id objc_msgSend__clientBLENeedsAWDLAdvertiserEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENeedsAWDLAdvertiserEnsureStopped];
}

id objc_msgSend__clientBLENeedsAWDLAdvertiserShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENeedsAWDLAdvertiserShouldRun];
}

id objc_msgSend__clientBLENeedsCLinkAdvertiserEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENeedsCLinkAdvertiserEnsureStarted];
}

id objc_msgSend__clientBLENeedsCLinkAdvertiserEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENeedsCLinkAdvertiserEnsureStopped];
}

id objc_msgSend__clientBLENeedsCLinkAdvertiserRestart(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENeedsCLinkAdvertiserRestart];
}

id objc_msgSend__clientBLENeedsCLinkAdvertiserShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENeedsCLinkAdvertiserShouldRun];
}

id objc_msgSend__clientBLENeedsCLinkAdvertiserUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENeedsCLinkAdvertiserUpdate];
}

id objc_msgSend__clientBLENeedsCLinkTargetDevice(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLENeedsCLinkTargetDevice];
}

id objc_msgSend__clientBLEServerEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLEServerEnsureStarted];
}

id objc_msgSend__clientBLEServerEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLEServerEnsureStopped];
}

id objc_msgSend__clientBLEServerHandleConnectionEnded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientBLEServerHandleConnectionEnded:");
}

id objc_msgSend__clientBLEServerShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _clientBLEServerShouldRun];
}

id objc_msgSend__clientBLETriggerEnhancedDiscovery_useCase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientBLETriggerEnhancedDiscovery:useCase:error:");
}

id objc_msgSend__clientBonjourAWDLBrowserEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _clientBonjourAWDLBrowserEnsureStarted];
}

id objc_msgSend__clientBonjourAWDLBrowserEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _clientBonjourAWDLBrowserEnsureStopped];
}

id objc_msgSend__clientBonjourAWDLBrowserShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _clientBonjourAWDLBrowserShouldRun];
}

id objc_msgSend__clientBonjourCheckFoundPairedDevice_publicID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientBonjourCheckFoundPairedDevice:publicID:");
}

id objc_msgSend__clientBonjourCheckLostPairedDevice_publicID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientBonjourCheckLostPairedDevice:publicID:");
}

id objc_msgSend__clientBonjourEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _clientBonjourEnsureStarted];
}

id objc_msgSend__clientBonjourEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _clientBonjourEnsureStopped];
}

id objc_msgSend__clientBonjourFoundDevice_reevaluate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientBonjourFoundDevice:reevaluate:");
}

id objc_msgSend__clientBonjourFoundUnauthDevice_isAWDLDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientBonjourFoundUnauthDevice:isAWDLDevice:");
}

id objc_msgSend__clientBonjourFoundUnresolvedDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientBonjourFoundUnresolvedDevice:");
}

id objc_msgSend__clientBonjourLostDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientBonjourLostDevice:");
}

id objc_msgSend__clientBonjourLostUnauthDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientBonjourLostUnauthDevice:");
}

id objc_msgSend__clientBonjourLostUnresolvedDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientBonjourLostUnresolvedDevice:");
}

id objc_msgSend__clientBonjourReconfirmDevice_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientBonjourReconfirmDevice:reason:");
}

id objc_msgSend__clientBonjourReevaluateAllDevices(void *a1, const char *a2, ...)
{
  return _[a1 _clientBonjourReevaluateAllDevices];
}

id objc_msgSend__clientBonjourReevaluateDevices(void *a1, const char *a2, ...)
{
  return _[a1 _clientBonjourReevaluateDevices];
}

id objc_msgSend__clientBonjourReevaluateUnauthDevices(void *a1, const char *a2, ...)
{
  return _[a1 _clientBonjourReevaluateUnauthDevices];
}

id objc_msgSend__clientConnectionEnded_uniqueID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientConnectionEnded:uniqueID:");
}

id objc_msgSend__clientConnectionEndedUnauth_publicID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientConnectionEndedUnauth:publicID:");
}

id objc_msgSend__clientConnectionStart_controlFlags_uniqueID_identity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientConnectionStart:controlFlags:uniqueID:identity:");
}

id objc_msgSend__clientConnectionStartOnDemand_xpcCnx_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientConnectionStartOnDemand:xpcCnx:error:");
}

id objc_msgSend__clientConnectionStartUnauth_client_publicID_xpcCnx_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientConnectionStartUnauth:client:publicID:xpcCnx:error:");
}

id objc_msgSend__clientCreateConnection_xpcCnx_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientCreateConnection:xpcCnx:error:");
}

id objc_msgSend__clientEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _clientEnsureStarted];
}

id objc_msgSend__clientEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _clientEnsureStopped];
}

id objc_msgSend__clientLostAllDevices(void *a1, const char *a2, ...)
{
  return _[a1 _clientLostAllDevices];
}

id objc_msgSend__clientOnDemandAWDLDiscoveryStartForXPC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientOnDemandAWDLDiscoveryStartForXPC:");
}

id objc_msgSend__clientOnDemandConnectionEnded_uniqueID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientOnDemandConnectionEnded:uniqueID:");
}

id objc_msgSend__clientOnDemandDiscoveryStart_xpcCnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientOnDemandDiscoveryStart:xpcCnx:");
}

id objc_msgSend__clientProximityEstimatorEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _clientProximityEstimatorEnsureStarted];
}

id objc_msgSend__clientProximityEstimatorEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _clientProximityEstimatorEnsureStopped];
}

id objc_msgSend__clientProximityEstimatorShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _clientProximityEstimatorShouldRun];
}

id objc_msgSend__clientPurgeUnauthAWDLDevices(void *a1, const char *a2, ...)
{
  return _[a1 _clientPurgeUnauthAWDLDevices];
}

id objc_msgSend__clientReportChangedDevice_changes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientReportChangedDevice:changes:");
}

id objc_msgSend__clientReportFoundDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientReportFoundDevice:");
}

id objc_msgSend__clientReportLostDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientReportLostDevice:");
}

id objc_msgSend__clientSendActivityLevelOverWiFiIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _clientSendActivityLevelOverWiFiIfNecessary];
}

id objc_msgSend__clientSendNeedsAWDLOverWiFi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientSendNeedsAWDLOverWiFi:");
}

id objc_msgSend__clientShouldConnectOverBonjour_device_identities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientShouldConnectOverBonjour:device:identities:");
}

id objc_msgSend__clientShouldFindNonSameAccountDevices(void *a1, const char *a2, ...)
{
  return _[a1 _clientShouldFindNonSameAccountDevices];
}

id objc_msgSend__configureConnectionForPairing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureConnectionForPairing:");
}

id objc_msgSend__connectionConfigureCommon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectionConfigureCommon:");
}

id objc_msgSend__connectionHasActiveSessions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectionHasActiveSessions:");
}

id objc_msgSend__connectionStateChanged_cnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectionStateChanged:cnx:");
}

id objc_msgSend__contextCollectorDevice(void *a1, const char *a2, ...)
{
  return _[a1 _contextCollectorDevice];
}

id objc_msgSend__controlFlagsToNearbyActionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_controlFlagsToNearbyActionType:");
}

id objc_msgSend__convertToLegacyApplicationLabelIfNeeded_forVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertToLegacyApplicationLabelIfNeeded:forVersion:");
}

id objc_msgSend__convertToUpdatedApplicationLabelIfNeeded_forVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertToUpdatedApplicationLabelIfNeeded:forVersion:");
}

id objc_msgSend__createAndRunSession(void *a1, const char *a2, ...)
{
  return _[a1 _createAndRunSession];
}

id objc_msgSend__createAuthenticationPayload(void *a1, const char *a2, ...)
{
  return _[a1 _createAuthenticationPayload];
}

id objc_msgSend__createDestinationIdentifierMaps(void *a1, const char *a2, ...)
{
  return _[a1 _createDestinationIdentifierMaps];
}

id objc_msgSend__createOneShotTimerWithInterval_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createOneShotTimerWithInterval:completionHandler:");
}

id objc_msgSend__createRequestEntryForXid_requestID_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createRequestEntryForXid:requestID:options:responseHandler:");
}

id objc_msgSend__createValidationPayload(void *a1, const char *a2, ...)
{
  return _[a1 _createValidationPayload];
}

id objc_msgSend__daemonDeviceFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_daemonDeviceFound:");
}

id objc_msgSend__deliverEventID_event_options_unauth_cnx_outError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deliverEventID:event:options:unauth:cnx:outError:");
}

id objc_msgSend__destinationID_matchesCnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_destinationID:matchesCnx:");
}

id objc_msgSend__destinationID_matchesProxyDeviceOnCnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_destinationID:matchesProxyDeviceOnCnx:");
}

id objc_msgSend__deviceForHHEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceForHHEndpoint:");
}

id objc_msgSend__deviceSupportsLaguna_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceSupportsLaguna:");
}

id objc_msgSend__devicesForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_devicesForClient:");
}

id objc_msgSend__disconnectRemovedSharedHomeDevices(void *a1, const char *a2, ...)
{
  return _[a1 _disconnectRemovedSharedHomeDevices];
}

id objc_msgSend__disconnectUnauthConnections(void *a1, const char *a2, ...)
{
  return _[a1 _disconnectUnauthConnections];
}

id objc_msgSend__disconnectUnpairedDevices(void *a1, const char *a2, ...)
{
  return _[a1 _disconnectUnpairedDevices];
}

id objc_msgSend__discoveriCloudDevicesOnly(void *a1, const char *a2, ...)
{
  return _[a1 _discoveriCloudDevicesOnly];
}

id objc_msgSend__discoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _discoveryEnsureStarted];
}

id objc_msgSend__discoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _discoveryEnsureStopped];
}

id objc_msgSend__discoveryNonceOrRotate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discoveryNonceOrRotate:");
}

id objc_msgSend__duetSyncEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _duetSyncEnsureStarted];
}

id objc_msgSend__duetSyncEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _duetSyncEnsureStopped];
}

id objc_msgSend__ensureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _ensureStopped];
}

id objc_msgSend__entitledAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_entitledAndReturnError:");
}

id objc_msgSend__entitledAndReturnError_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_entitledAndReturnError:error:");
}

id objc_msgSend__entitledForLabel_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_entitledForLabel:error:");
}

id objc_msgSend__enumerateIdentitiesWithFlag_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateIdentitiesWithFlag:usingBlock:");
}

id objc_msgSend__eventForHomeHubDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventForHomeHubDevice:");
}

id objc_msgSend__existingProxyDeviceUpdated_event_isLocal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_existingProxyDeviceUpdated:event:isLocal:");
}

id objc_msgSend__exportedInterface(void *a1, const char *a2, ...)
{
  return _[a1 _exportedInterface];
}

id objc_msgSend__familyEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _familyEnsureStarted];
}

id objc_msgSend__familyEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _familyEnsureStopped];
}

id objc_msgSend__fetchSameAccountIdentities(void *a1, const char *a2, ...)
{
  return _[a1 _fetchSameAccountIdentities];
}

id objc_msgSend__filterHomeKitUserIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filterHomeKitUserIdentifiers:");
}

id objc_msgSend__findExistingActiveDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findExistingActiveDevice:");
}

id objc_msgSend__findMatchingAWDLBonjourDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findMatchingAWDLBonjourDevice:");
}

id objc_msgSend__findMatchingDevice_inDeviceDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findMatchingDevice:inDeviceDictionary:");
}

id objc_msgSend__findMatchingDeviceWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findMatchingDeviceWithIdentifier:");
}

id objc_msgSend__findWiFiConnectionByID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findWiFiConnectionByID:");
}

id objc_msgSend__finishCurrentTransactionWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishCurrentTransactionWithError:");
}

id objc_msgSend__flagsForVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flagsForVersion:");
}

id objc_msgSend__forEachConnectionWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forEachConnectionWithHandler:");
}

id objc_msgSend__forEachMatchingDestinationID_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forEachMatchingDestinationID:handler:");
}

id objc_msgSend__forEachUniqueMatchingDestinationID_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forEachUniqueMatchingDestinationID:handler:");
}

id objc_msgSend__friendsEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _friendsEnsureStopped];
}

id objc_msgSend__friendsUpdateSuggestedIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _friendsUpdateSuggestedIfNeeded];
}

id objc_msgSend__getAliasesForAltDSIDs(void *a1, const char *a2, ...)
{
  return _[a1 _getAliasesForAltDSIDs];
}

id objc_msgSend__getAltDSID(void *a1, const char *a2, ...)
{
  return _[a1 _getAltDSID];
}

id objc_msgSend__getAltDSIDForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getAltDSIDForDevice:");
}

id objc_msgSend__getAppleID(void *a1, const char *a2, ...)
{
  return _[a1 _getAppleID];
}

id objc_msgSend__handleConfirmationResult_fromDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConfirmationResult:fromDevice:");
}

id objc_msgSend__handleGameControllerAuxEvent_pressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleGameControllerAuxEvent:pressed:");
}

id objc_msgSend__handleGetVolume_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleGetVolume:responseHandler:");
}

id objc_msgSend__handleMediaCaptionGet_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMediaCaptionGet:responseHandler:");
}

id objc_msgSend__handleMediaCaptionSet_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMediaCaptionSet:responseHandler:");
}

id objc_msgSend__handleMovementCommand_endCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMovementCommand:endCommand:");
}

id objc_msgSend__handleSelectWithButtonState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSelectWithButtonState:");
}

id objc_msgSend__handleServerActivation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleServerActivation:");
}

id objc_msgSend__handleSetVolume_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSetVolume:responseHandler:");
}

id objc_msgSend__handleSiriStart_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSiriStart:options:responseHandler:");
}

id objc_msgSend__handleSkipByRequest_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSkipByRequest:responseHandler:");
}

id objc_msgSend__haveActiveClientConnectionsOnAWDL(void *a1, const char *a2, ...)
{
  return _[a1 _haveActiveClientConnectionsOnAWDL];
}

id objc_msgSend__haveActiveServerConnectionsOnAWDL(void *a1, const char *a2, ...)
{
  return _[a1 _haveActiveServerConnectionsOnAWDL];
}

id objc_msgSend__hidEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _hidEnsureStarted];
}

id objc_msgSend__hidEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _hidEnsureStopped];
}

id objc_msgSend__homeHubDeviceAdded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeHubDeviceAdded:");
}

id objc_msgSend__homeHubDeviceRemoved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeHubDeviceRemoved:");
}

id objc_msgSend__homeKitAuthMatchForBonjourDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeKitAuthMatchForBonjourDevice:");
}

id objc_msgSend__homeKitDecryptRotatingIDForBonjourDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeKitDecryptRotatingIDForBonjourDevice:");
}

id objc_msgSend__homeKitEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _homeKitEnsureStarted];
}

id objc_msgSend__homeKitEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _homeKitEnsureStopped];
}

id objc_msgSend__homeKitGetPairingIdentities(void *a1, const char *a2, ...)
{
  return _[a1 _homeKitGetPairingIdentities];
}

id objc_msgSend__homeKitGetUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeKitGetUserInfo:");
}

id objc_msgSend__homeKitSelfAccessoryMediaSystemUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeKitSelfAccessoryMediaSystemUpdated:");
}

id objc_msgSend__homeKitUpdateInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeKitUpdateInfo:");
}

id objc_msgSend__homeKitUpdateUserIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 _homeKitUpdateUserIdentifiers];
}

id objc_msgSend__identitiesOfType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_identitiesOfType:error:");
}

id objc_msgSend__identityForNFCDeviceDiscovery(void *a1, const char *a2, ...)
{
  return _[a1 _identityForNFCDeviceDiscovery];
}

id objc_msgSend__idleSessionConnection(void *a1, const char *a2, ...)
{
  return _[a1 _idleSessionConnection];
}

id objc_msgSend__idsAccountWithURI_senderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_idsAccountWithURI:senderID:");
}

id objc_msgSend__idsEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _idsEnsureStopped];
}

id objc_msgSend__idsURIWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_idsURIWithID:");
}

id objc_msgSend__initWithNWActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithNWActivity:");
}

id objc_msgSend__injectKeyboardEventUsagePage_usageCode_buttonState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_injectKeyboardEventUsagePage:usageCode:buttonState:");
}

id objc_msgSend__interestReceived_cnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interestReceived:cnx:");
}

id objc_msgSend__interestRemoveForCnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interestRemoveForCnx:");
}

id objc_msgSend__invalidateConnectionInList_listDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invalidateConnectionInList:listDescription:");
}

id objc_msgSend__invalidated(void *a1, const char *a2, ...)
{
  return _[a1 _invalidated];
}

id objc_msgSend__invokeDeviceChangedHandlerForEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invokeDeviceChangedHandlerForEndpoint:");
}

id objc_msgSend__invokeUpdateHandler(void *a1, const char *a2, ...)
{
  return _[a1 _invokeUpdateHandler];
}

id objc_msgSend__irkMetricsSetup(void *a1, const char *a2, ...)
{
  return _[a1 _irkMetricsSetup];
}

id objc_msgSend__isTCPTransport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isTCPTransport:");
}

id objc_msgSend__legacyApplicationLabels(void *a1, const char *a2, ...)
{
  return _[a1 _legacyApplicationLabels];
}

id objc_msgSend__loadSelfIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadSelfIdentity:");
}

id objc_msgSend__loadSharedTVUserDeviceIdentities(void *a1, const char *a2, ...)
{
  return _[a1 _loadSharedTVUserDeviceIdentities];
}

id objc_msgSend__loadTemporarySelfIdentity(void *a1, const char *a2, ...)
{
  return _[a1 _loadTemporarySelfIdentity];
}

id objc_msgSend__localDeviceCleanup(void *a1, const char *a2, ...)
{
  return _[a1 _localDeviceCleanup];
}

id objc_msgSend__localDeviceUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _localDeviceUpdate];
}

id objc_msgSend__localMediaAccessControlSetting(void *a1, const char *a2, ...)
{
  return _[a1 _localMediaAccessControlSetting];
}

id objc_msgSend__localPublicKeyForAgentClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localPublicKeyForAgentClient:");
}

id objc_msgSend__mediaControlEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _mediaControlEnsureStarted];
}

id objc_msgSend__mediaControlEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _mediaControlEnsureStopped];
}

id objc_msgSend__mediaRemoteIDGet(void *a1, const char *a2, ...)
{
  return _[a1 _mediaRemoteIDGet];
}

id objc_msgSend__mediaRemoteSupportedCommandsGet(void *a1, const char *a2, ...)
{
  return _[a1 _mediaRemoteSupportedCommandsGet];
}

id objc_msgSend__mediaRemoteVolumeControlUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _mediaRemoteVolumeControlUpdate];
}

id objc_msgSend__mediaRouteIDGet(void *a1, const char *a2, ...)
{
  return _[a1 _mediaRouteIDGet];
}

id objc_msgSend__metricsDictionary(void *a1, const char *a2, ...)
{
  return _[a1 _metricsDictionary];
}

id objc_msgSend__metricsSubmissionSetup(void *a1, const char *a2, ...)
{
  return _[a1 _metricsSubmissionSetup];
}

id objc_msgSend__miscEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _miscEnsureStarted];
}

id objc_msgSend__miscEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _miscEnsureStopped];
}

id objc_msgSend__nearbyActionDeviceActionTypes(void *a1, const char *a2, ...)
{
  return _[a1 _nearbyActionDeviceActionTypes];
}

id objc_msgSend__needToHoldPowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _needToHoldPowerAssertion];
}

id objc_msgSend__onenessEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _onenessEnabled];
}

id objc_msgSend__payloadForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_payloadForType:");
}

id objc_msgSend__personalDeviceUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _personalDeviceUpdate];
}

id objc_msgSend__postIdentitiesChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 _postIdentitiesChangedNotification];
}

id objc_msgSend__postNotificationForWombatActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postNotificationForWombatActivity:");
}

id objc_msgSend__powerAssertionEnsureHeld(void *a1, const char *a2, ...)
{
  return _[a1 _powerAssertionEnsureHeld];
}

id objc_msgSend__powerAssertionEnsureReleased(void *a1, const char *a2, ...)
{
  return _[a1 _powerAssertionEnsureReleased];
}

id objc_msgSend__prefsChanged(void *a1, const char *a2, ...)
{
  return _[a1 _prefsChanged];
}

id objc_msgSend__primaryAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_primaryAppleID:");
}

id objc_msgSend__processBufferedCloudMessages(void *a1, const char *a2, ...)
{
  return _[a1 _processBufferedCloudMessages];
}

id objc_msgSend__processDiscoverySessionStateChangeForDevice_startReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processDiscoverySessionStateChangeForDevice:startReason:");
}

id objc_msgSend__proxyDevice_isEqualTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_proxyDevice:isEqualTo:");
}

id objc_msgSend__proxyDevice_loopbackRequestID_request_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_proxyDevice:loopbackRequestID:request:options:responseHandler:");
}

id objc_msgSend__proxyDevice_receivedRequestID_request_options_responseHandler_cnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_proxyDevice:receivedRequestID:request:options:responseHandler:cnx:");
}

id objc_msgSend__proxyDeviceAdd_options_eventID_deviceInfo_cnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_proxyDeviceAdd:options:eventID:deviceInfo:cnx:");
}

id objc_msgSend__proxyDeviceListUpdated_content_options_cnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_proxyDeviceListUpdated:content:options:cnx:");
}

id objc_msgSend__proxyDeviceRemove_options_cnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_proxyDeviceRemove:options:cnx:");
}

id objc_msgSend__proxyLocalDeviceUpdateOnConnection_launchInstanceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_proxyLocalDeviceUpdateOnConnection:launchInstanceID:");
}

id objc_msgSend__pruneFamilyDevices(void *a1, const char *a2, ...)
{
  return _[a1 _pruneFamilyDevices];
}

id objc_msgSend__pruneFriendAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pruneFriendAccounts:");
}

id objc_msgSend__pruneFriendDevices(void *a1, const char *a2, ...)
{
  return _[a1 _pruneFriendDevices];
}

id objc_msgSend__pruneFriends_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pruneFriends:");
}

id objc_msgSend__quicProtocolOptionsFromParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_quicProtocolOptionsFromParameters:");
}

id objc_msgSend__reachabilityEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _reachabilityEnsureStarted];
}

id objc_msgSend__reachabilityEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _reachabilityEnsureStopped];
}

id objc_msgSend__receivedCameraCapabilitiesMessage_fromDevice_isFirstUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedCameraCapabilitiesMessage:fromDevice:isFirstUpdate:");
}

id objc_msgSend__receivedCameraExitEvent_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedCameraExitEvent:from:");
}

id objc_msgSend__receivedEventID_event_options_sessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedEventID:event:options:sessionID:");
}

id objc_msgSend__receivedEventID_event_options_unauth_cnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedEventID:event:options:unauth:cnx:");
}

id objc_msgSend__receivedEventID_event_options_xpcCnx_sessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedEventID:event:options:xpcCnx:sessionID:");
}

id objc_msgSend__receivedEventID_onXPCCnx_event_options_unauth_rpCnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedEventID:onXPCCnx:event:options:unauth:rpCnx:");
}

id objc_msgSend__receivedFamilyIdentityFrameType_ptr_length_msgCtx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedFamilyIdentityFrameType:ptr:length:msgCtx:");
}

id objc_msgSend__receivedFriendIdentityFrameType_ptr_length_msgCtx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedFriendIdentityFrameType:ptr:length:msgCtx:");
}

id objc_msgSend__receivedRequestID_onXPCCnx_request_options_responseHandler_unauth_rpCnx_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedRequestID:onXPCCnx:request:options:responseHandler:unauth:rpCnx:");
}

id objc_msgSend__receivedRequestID_request_options_responseHandler_sessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedRequestID:request:options:responseHandler:sessionID:");
}

id objc_msgSend__receivedRequestID_request_options_responseHandler_unauth_cnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedRequestID:request:options:responseHandler:unauth:cnx:");
}

id objc_msgSend__receivedRequestID_request_options_responseHandler_xpcCnx_sessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedRequestID:request:options:responseHandler:xpcCnx:sessionID:");
}

id objc_msgSend__receivedWatchIdentityFrameType_ptr_length_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedWatchIdentityFrameType:ptr:length:fromID:");
}

id objc_msgSend__receivedWatchIdentityRequest_fromIDSDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedWatchIdentityRequest:fromIDSDevice:");
}

id objc_msgSend__receivedWatchIdentityResponse_fromIDSDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedWatchIdentityResponse:fromIDSDevice:");
}

id objc_msgSend__regenerateSelfIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_regenerateSelfIdentity:");
}

id objc_msgSend__registerConnectionRequestID_options_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerConnectionRequestID:options:handler:");
}

id objc_msgSend__registerForWombatStateNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _registerForWombatStateNotifications];
}

id objc_msgSend__remoteObjectInterface(void *a1, const char *a2, ...)
{
  return _[a1 _remoteObjectInterface];
}

id objc_msgSend__remoteObjectProxy(void *a1, const char *a2, ...)
{
  return _[a1 _remoteObjectProxy];
}

id objc_msgSend__removeApplicationPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeApplicationPID:");
}

id objc_msgSend__removeSameAccountIdentityWithIDSIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeSameAccountIdentityWithIDSIdentifier:error:");
}

id objc_msgSend__removeSelfIdentityPublicWithPrivateIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeSelfIdentityPublicWithPrivateIdentity:");
}

id objc_msgSend__reportXPCMatchingDiscoveryCLink(void *a1, const char *a2, ...)
{
  return _[a1 _reportXPCMatchingDiscoveryCLink];
}

id objc_msgSend__reportXPCMatchingDiscoveryCompanionAuthenticationDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportXPCMatchingDiscoveryCompanionAuthenticationDevice:");
}

id objc_msgSend__requestCameraCapabilitiesForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestCameraCapabilitiesForDevice:");
}

id objc_msgSend__requestConfirmationFromDevice_forDedicated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestConfirmationFromDevice:forDedicated:");
}

id objc_msgSend__requestConfirmationFromDevicesMatching_forDedicated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestConfirmationFromDevicesMatching:forDedicated:");
}

id objc_msgSend__requestConfirmationFromPerson_forDedicated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestConfirmationFromPerson:forDedicated:");
}

id objc_msgSend__requestMessageMetadata(void *a1, const char *a2, ...)
{
  return _[a1 _requestMessageMetadata];
}

id objc_msgSend__resetFriends(void *a1, const char *a2, ...)
{
  return _[a1 _resetFriends];
}

id objc_msgSend__rssiThresholdForApplicationService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rssiThresholdForApplicationService:");
}

id objc_msgSend__saveSelfIdentityPrivate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveSelfIdentityPrivate:");
}

id objc_msgSend__saveSelfIdentityPublicWithPrivateIdentity_force_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveSelfIdentityPublicWithPrivateIdentity:force:");
}

id objc_msgSend__scheduleCameraCapabilitiesRequest_interval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleCameraCapabilitiesRequest:interval:");
}

id objc_msgSend__schedulePendingLostBLEDeviceTimer(void *a1, const char *a2, ...)
{
  return _[a1 _schedulePendingLostBLEDeviceTimer];
}

id objc_msgSend__schedulePendingLostDeviceTimer(void *a1, const char *a2, ...)
{
  return _[a1 _schedulePendingLostDeviceTimer];
}

id objc_msgSend__schedulePendingLostNeedsCLinkDeviceTimer(void *a1, const char *a2, ...)
{
  return _[a1 _schedulePendingLostNeedsCLinkDeviceTimer];
}

id objc_msgSend__selfIdentity(void *a1, const char *a2, ...)
{
  return _[a1 _selfIdentity];
}

id objc_msgSend__sendCloudIdentityFrameType_destinationID_flags_msgCtx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendCloudIdentityFrameType:destinationID:flags:msgCtx:");
}

id objc_msgSend__sendConfirmationCancelToAllDevices(void *a1, const char *a2, ...)
{
  return _[a1 _sendConfirmationCancelToAllDevices];
}

id objc_msgSend__sendDiscoverySessionExitWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendDiscoverySessionExitWithReason:");
}

id objc_msgSend__sendProxyDeviceUpdateToPeer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendProxyDeviceUpdateToPeer:");
}

id objc_msgSend__sendTextInputPayloadEvent_rtiPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendTextInputPayloadEvent:rtiPayload:");
}

id objc_msgSend__serverBLEClientConnectionShouldStart(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLEClientConnectionShouldStart];
}

id objc_msgSend__serverBLEDiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLEDiscoveryEnsureStarted];
}

id objc_msgSend__serverBLEDiscoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLEDiscoveryEnsureStopped];
}

id objc_msgSend__serverBLEDiscoveryShouldStart(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLEDiscoveryShouldStart];
}

id objc_msgSend__serverBLENearbyActionAdvertiserEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENearbyActionAdvertiserEnsureStarted];
}

id objc_msgSend__serverBLENearbyActionAdvertiserEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENearbyActionAdvertiserEnsureStopped];
}

id objc_msgSend__serverBLENearbyActionAdvertiserRestartTimer(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENearbyActionAdvertiserRestartTimer];
}

id objc_msgSend__serverBLENearbyActionAdvertiserShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENearbyActionAdvertiserShouldRun];
}

id objc_msgSend__serverBLENearbyActionDiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENearbyActionDiscoveryEnsureStarted];
}

id objc_msgSend__serverBLENearbyActionDiscoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENearbyActionDiscoveryEnsureStopped];
}

id objc_msgSend__serverBLENearbyActionDiscoveryShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENearbyActionDiscoveryShouldRun];
}

id objc_msgSend__serverBLENearbyActionV2DiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENearbyActionV2DiscoveryEnsureStarted];
}

id objc_msgSend__serverBLENearbyActionV2DiscoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENearbyActionV2DiscoveryEnsureStopped];
}

id objc_msgSend__serverBLENearbyActionV2DiscoveryShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENearbyActionV2DiscoveryShouldRun];
}

id objc_msgSend__serverBLENearbyInfoDiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENearbyInfoDiscoveryEnsureStarted];
}

id objc_msgSend__serverBLENearbyInfoDiscoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENearbyInfoDiscoveryEnsureStopped];
}

id objc_msgSend__serverBLENearbyInfoDiscoveryShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENearbyInfoDiscoveryShouldRun];
}

id objc_msgSend__serverBLENeedsAWDLScannerEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENeedsAWDLScannerEnsureStarted];
}

id objc_msgSend__serverBLENeedsAWDLScannerEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENeedsAWDLScannerEnsureStopped];
}

id objc_msgSend__serverBLENeedsAWDLScannerScreenOff(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENeedsAWDLScannerScreenOff];
}

id objc_msgSend__serverBLENeedsCLinkScannerEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENeedsCLinkScannerEnsureStarted];
}

id objc_msgSend__serverBLENeedsCLinkScannerEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENeedsCLinkScannerEnsureStopped];
}

id objc_msgSend__serverBLENeedsCLinkScannerScreenOff(void *a1, const char *a2, ...)
{
  return _[a1 _serverBLENeedsCLinkScannerScreenOff];
}

id objc_msgSend__serverBTAddressMonitorEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverBTAddressMonitorEnsureStarted];
}

id objc_msgSend__serverBTAddressMonitorEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverBTAddressMonitorEnsureStopped];
}

id objc_msgSend__serverBonjourAWDLAdvertiserEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverBonjourAWDLAdvertiserEnsureStarted];
}

id objc_msgSend__serverBonjourAWDLAdvertiserEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverBonjourAWDLAdvertiserEnsureStopped];
}

id objc_msgSend__serverBonjourAWDLAdvertiserShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _serverBonjourAWDLAdvertiserShouldRun];
}

id objc_msgSend__serverBonjourAWDLAdvertiserUpdateTXT(void *a1, const char *a2, ...)
{
  return _[a1 _serverBonjourAWDLAdvertiserUpdateTXT];
}

id objc_msgSend__serverBonjourAWDLNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _serverBonjourAWDLNeeded];
}

id objc_msgSend__serverBonjourAWDLShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _serverBonjourAWDLShouldRun];
}

id objc_msgSend__serverBonjourAuthTagString(void *a1, const char *a2, ...)
{
  return _[a1 _serverBonjourAuthTagString];
}

id objc_msgSend__serverBonjourAuthTagStringWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverBonjourAuthTagStringWithData:");
}

id objc_msgSend__serverBonjourEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverBonjourEnsureStarted];
}

id objc_msgSend__serverBonjourEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverBonjourEnsureStopped];
}

id objc_msgSend__serverBonjourShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _serverBonjourShouldRun];
}

id objc_msgSend__serverBonjourTempAuthTagStringWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverBonjourTempAuthTagStringWithData:");
}

id objc_msgSend__serverBonjourUpdateTXT(void *a1, const char *a2, ...)
{
  return _[a1 _serverBonjourUpdateTXT];
}

id objc_msgSend__serverDirectLinkInterfaceIndex(void *a1, const char *a2, ...)
{
  return _[a1 _serverDirectLinkInterfaceIndex];
}

id objc_msgSend__serverEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverEnsureStarted];
}

id objc_msgSend__serverEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverEnsureStopped];
}

id objc_msgSend__serverHandleSessionStartWithID_netCnx_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverHandleSessionStartWithID:netCnx:completion:");
}

id objc_msgSend__serverNearbyActionV2DiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverNearbyActionV2DiscoveryEnsureStarted];
}

id objc_msgSend__serverNearbyActionV2DiscoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverNearbyActionV2DiscoveryEnsureStopped];
}

id objc_msgSend__serverNearbyActionV2DiscoveryShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _serverNearbyActionV2DiscoveryShouldRun];
}

id objc_msgSend__serverNearbyInfoV2DeviceFound_deviceFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverNearbyInfoV2DeviceFound:deviceFlags:");
}

id objc_msgSend__serverNearbyInfoV2DeviceLost_idsIdentifier_force_deviceFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverNearbyInfoV2DeviceLost:idsIdentifier:force:deviceFlags:");
}

id objc_msgSend__serverNearbyInfoV2DiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverNearbyInfoV2DiscoveryEnsureStarted];
}

id objc_msgSend__serverNearbyInfoV2DiscoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverNearbyInfoV2DiscoveryEnsureStopped];
}

id objc_msgSend__serverNearbyInfoV2DiscoveryShouldRun(void *a1, const char *a2, ...)
{
  return _[a1 _serverNearbyInfoV2DiscoveryShouldRun];
}

id objc_msgSend__serverReceivedNeedsAWDLEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverReceivedNeedsAWDLEvent:");
}

id objc_msgSend__serverReceivedNeedsAWDLEvent_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverReceivedNeedsAWDLEvent:event:");
}

id objc_msgSend__serverShouldAdvertiseIdentifiableInfoWhenUnpairedForAirPlayWithLinkType_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverShouldAdvertiseIdentifiableInfoWhenUnpairedForAirPlayWithLinkType:");
}

id objc_msgSend__serverTCPEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _serverTCPEnsureStarted];
}

id objc_msgSend__serverTCPEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _serverTCPEnsureStopped];
}

id objc_msgSend__serverTCPHandleConnectionEnded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverTCPHandleConnectionEnded:");
}

id objc_msgSend__serverTCPHandleConnectionStarted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverTCPHandleConnectionStarted:");
}

id objc_msgSend__serverTCPHasActiveConnections(void *a1, const char *a2, ...)
{
  return _[a1 _serverTCPHasActiveConnections];
}

id objc_msgSend__serverTCPRemoveConnectionsWithIdentifier_exceptConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverTCPRemoveConnectionsWithIdentifier:exceptConnection:");
}

id objc_msgSend__sessionHandlePeerDisconnect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sessionHandlePeerDisconnect:");
}

id objc_msgSend__sessionsActiveOnConnection_xpcConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sessionsActiveOnConnection:xpcConnection:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__setupHIDGCDeviceWithOptions_andReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupHIDGCDeviceWithOptions:andReturnError:");
}

id objc_msgSend__setupHIDGCSenderIDIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _setupHIDGCSenderIDIfNeeded];
}

id objc_msgSend__setupHIDSenderIDIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _setupHIDSenderIDIfNeeded];
}

id objc_msgSend__setupHIDTouchDeviceAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupHIDTouchDeviceAndReturnError:");
}

id objc_msgSend__setupHome(void *a1, const char *a2, ...)
{
  return _[a1 _setupHome];
}

id objc_msgSend__shouldLoadSharedTVUserDeviceIdentities(void *a1, const char *a2, ...)
{
  return _[a1 _shouldLoadSharedTVUserDeviceIdentities];
}

id objc_msgSend__shouldReceiveActivityLevelOverWiFi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldReceiveActivityLevelOverWiFi:");
}

id objc_msgSend__shouldSendActivityLevelOverWiFi(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSendActivityLevelOverWiFi];
}

id objc_msgSend__shouldThrottleFriendSyncing(void *a1, const char *a2, ...)
{
  return _[a1 _shouldThrottleFriendSyncing];
}

id objc_msgSend__signatureWithSelfIdentity_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_signatureWithSelfIdentity:data:");
}

id objc_msgSend__siriEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _siriEnsureStarted];
}

id objc_msgSend__siriEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _siriEnsureStopped];
}

id objc_msgSend__sleepSystemWithResponseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sleepSystemWithResponseHandler:");
}

id objc_msgSend__startDiscoverySessionExpirationTimer(void *a1, const char *a2, ...)
{
  return _[a1 _startDiscoverySessionExpirationTimer];
}

id objc_msgSend__startInSessionDeviceLostTimer(void *a1, const char *a2, ...)
{
  return _[a1 _startInSessionDeviceLostTimer];
}

id objc_msgSend__startObservingOnenessEnabledState(void *a1, const char *a2, ...)
{
  return _[a1 _startObservingOnenessEnabledState];
}

id objc_msgSend__startPairingServerWithPassword_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startPairingServerWithPassword:completion:");
}

id objc_msgSend__startReceiver(void *a1, const char *a2, ...)
{
  return _[a1 _startReceiver];
}

id objc_msgSend__startTransactionControllerIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _startTransactionControllerIfNeeded];
}

id objc_msgSend__stationaryDevice(void *a1, const char *a2, ...)
{
  return _[a1 _stationaryDevice];
}

id objc_msgSend__stereoDeviceUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stereoDeviceUpdate:");
}

id objc_msgSend__stopBecomeInitiatorTimer(void *a1, const char *a2, ...)
{
  return _[a1 _stopBecomeInitiatorTimer];
}

id objc_msgSend__stopConnectToReceiverTimer(void *a1, const char *a2, ...)
{
  return _[a1 _stopConnectToReceiverTimer];
}

id objc_msgSend__stopInitiator(void *a1, const char *a2, ...)
{
  return _[a1 _stopInitiator];
}

id objc_msgSend__stopInitiatorLimitTimer(void *a1, const char *a2, ...)
{
  return _[a1 _stopInitiatorLimitTimer];
}

id objc_msgSend__stopObservingOnenessEnabledState(void *a1, const char *a2, ...)
{
  return _[a1 _stopObservingOnenessEnabledState];
}

id objc_msgSend__stopPollingCoolDownTimer(void *a1, const char *a2, ...)
{
  return _[a1 _stopPollingCoolDownTimer];
}

id objc_msgSend__stopTransactionControllerIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _stopTransactionControllerIfNeeded];
}

id objc_msgSend__stripFZIDPrefix(void *a1, const char *a2, ...)
{
  return _[a1 _stripFZIDPrefix];
}

id objc_msgSend__supportsApplicationLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_supportsApplicationLabel:");
}

id objc_msgSend__textInputEnsureStarted(void *a1, const char *a2, ...)
{
  return _[a1 _textInputEnsureStarted];
}

id objc_msgSend__textInputEnsureStopped(void *a1, const char *a2, ...)
{
  return _[a1 _textInputEnsureStopped];
}

id objc_msgSend__transportServiceMetadataWithServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transportServiceMetadataWithServiceType:");
}

id objc_msgSend__triggerKeychainRefetch(void *a1, const char *a2, ...)
{
  return _[a1 _triggerKeychainRefetch];
}

id objc_msgSend__unregisterWombatStateNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _unregisterWombatStateNotifications];
}

id objc_msgSend__update(void *a1, const char *a2, ...)
{
  return _[a1 _update];
}

id objc_msgSend__updateAssertions(void *a1, const char *a2, ...)
{
  return _[a1 _updateAssertions];
}

id objc_msgSend__updateErrorFlags(void *a1, const char *a2, ...)
{
  return _[a1 _updateErrorFlags];
}

id objc_msgSend__updateFamilyAccounts(void *a1, const char *a2, ...)
{
  return _[a1 _updateFamilyAccounts];
}

id objc_msgSend__updateFamilyDevices(void *a1, const char *a2, ...)
{
  return _[a1 _updateFamilyDevices];
}

id objc_msgSend__updateFamilyIdentities(void *a1, const char *a2, ...)
{
  return _[a1 _updateFamilyIdentities];
}

id objc_msgSend__updateFamilyIdentityWithFamilyMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFamilyIdentityWithFamilyMember:");
}

id objc_msgSend__updateFamilyNotification(void *a1, const char *a2, ...)
{
  return _[a1 _updateFamilyNotification];
}

id objc_msgSend__updateFamilySyncing(void *a1, const char *a2, ...)
{
  return _[a1 _updateFamilySyncing];
}

id objc_msgSend__updateForXPCClientChange(void *a1, const char *a2, ...)
{
  return _[a1 _updateForXPCClientChange];
}

id objc_msgSend__updateForXPCServerChange(void *a1, const char *a2, ...)
{
  return _[a1 _updateForXPCServerChange];
}

id objc_msgSend__updateFriendAccounts(void *a1, const char *a2, ...)
{
  return _[a1 _updateFriendAccounts];
}

id objc_msgSend__updateFriendDevices(void *a1, const char *a2, ...)
{
  return _[a1 _updateFriendDevices];
}

id objc_msgSend__updateFriendIdentities(void *a1, const char *a2, ...)
{
  return _[a1 _updateFriendIdentities];
}

id objc_msgSend__updateFriendIdentityWithAppleID_contactID_sendersKnownAlias_userAdded_updateDateRequested_suggestedContactIDs_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_updateFriendIdentityWithAppleID:contactID:sendersKnownAlias:userAdded:updateDateRequested:suggestedContactIDs:");
}

id objc_msgSend__updateFriendPrivacy(void *a1, const char *a2, ...)
{
  return _[a1 _updateFriendPrivacy];
}

id objc_msgSend__updateFriendPrivacyResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFriendPrivacyResults:");
}

id objc_msgSend__updateFriendSyncing(void *a1, const char *a2, ...)
{
  return _[a1 _updateFriendSyncing];
}

id objc_msgSend__updateHomeHubDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateHomeHubDevices:");
}

id objc_msgSend__updateIdentityType_idsDeviceID_appleID_contactID_msg_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateIdentityType:idsDeviceID:appleID:contactID:msg:");
}

id objc_msgSend__updateNearFieldDiscoveryPref(void *a1, const char *a2, ...)
{
  return _[a1 _updateNearFieldDiscoveryPref];
}

id objc_msgSend__updateOptionsWithProcessInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOptionsWithProcessInfo:");
}

id objc_msgSend__updatePairedDeviceIdentities(void *a1, const char *a2, ...)
{
  return _[a1 _updatePairedDeviceIdentities];
}

id objc_msgSend__updatePersonalRequestsStateForHomeHubDevices(void *a1, const char *a2, ...)
{
  return _[a1 _updatePersonalRequestsStateForHomeHubDevices];
}

id objc_msgSend__updatePolling(void *a1, const char *a2, ...)
{
  return _[a1 _updatePolling];
}

id objc_msgSend__updateRBSProcessMonitor(void *a1, const char *a2, ...)
{
  return _[a1 _updateRBSProcessMonitor];
}

id objc_msgSend__updateSameAccountIdentities(void *a1, const char *a2, ...)
{
  return _[a1 _updateSameAccountIdentities];
}

id objc_msgSend__updateSelfIdentityPrivate_create_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSelfIdentityPrivate:create:");
}

id objc_msgSend__updateSelfIdentityPublic_privateIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSelfIdentityPublic:privateIdentity:");
}

id objc_msgSend__updateXPCMatchingDiscovery(void *a1, const char *a2, ...)
{
  return _[a1 _updateXPCMatchingDiscovery];
}

id objc_msgSend__wakeSystemWithResponseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wakeSystemWithResponseHandler:");
}

id objc_msgSend__xpcConnection(void *a1, const char *a2, ...)
{
  return _[a1 _xpcConnection];
}

id objc_msgSend__xpcConnectionInvalidated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xpcConnectionInvalidated:");
}

id objc_msgSend__xpcConnections_withControlFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xpcConnections:withControlFlags:");
}

id objc_msgSend__xpcPublisherAddToken_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xpcPublisherAddToken:event:");
}

id objc_msgSend__xpcPublisherRemoveToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xpcPublisherRemoveToken:");
}

id objc_msgSend__xpcPublisherStateChangedForToken_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xpcPublisherStateChangedForToken:state:");
}

id objc_msgSend__xpcPublisherTriggeredToken_payload_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xpcPublisherTriggeredToken:payload:responseHandler:");
}

id objc_msgSend_accessories(void *a1, const char *a2, ...)
{
  return _[a1 accessories];
}

id objc_msgSend_accessory(void *a1, const char *a2, ...)
{
  return _[a1 accessory];
}

id objc_msgSend_accessoryId(void *a1, const char *a2, ...)
{
  return _[a1 accessoryId];
}

id objc_msgSend_accessoryWithSiriEndpointIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryWithSiriEndpointIdentifier:");
}

id objc_msgSend_accountAltDSID(void *a1, const char *a2, ...)
{
  return _[a1 accountAltDSID];
}

id objc_msgSend_accountID(void *a1, const char *a2, ...)
{
  return _[a1 accountID];
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _[a1 accounts];
}

id objc_msgSend_acquireWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireWithError:");
}

id objc_msgSend_actionV2Devices(void *a1, const char *a2, ...)
{
  return _[a1 actionV2Devices];
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _[a1 activate];
}

id objc_msgSend_activateAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateAndReturnError:");
}

id objc_msgSend_activateDirectAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateDirectAndReturnError:");
}

id objc_msgSend_activateForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateForClient:");
}

id objc_msgSend_activateScreenSaverWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateScreenSaverWithReply:");
}

id objc_msgSend_activateWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithCompletion:");
}

id objc_msgSend_activateWithUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithUpdateHandler:");
}

id objc_msgSend_activatedAdvertiser(void *a1, const char *a2, ...)
{
  return _[a1 activatedAdvertiser];
}

id objc_msgSend_activatedDiscovery(void *a1, const char *a2, ...)
{
  return _[a1 activatedDiscovery];
}

id objc_msgSend_activatedServer(void *a1, const char *a2, ...)
{
  return _[a1 activatedServer];
}

id objc_msgSend_activatedSession(void *a1, const char *a2, ...)
{
  return _[a1 activatedSession];
}

id objc_msgSend_activeNetCnx(void *a1, const char *a2, ...)
{
  return _[a1 activeNetCnx];
}

id objc_msgSend_activeServers(void *a1, const char *a2, ...)
{
  return _[a1 activeServers];
}

id objc_msgSend_activeUserAltDSID(void *a1, const char *a2, ...)
{
  return _[a1 activeUserAltDSID];
}

id objc_msgSend_activityFromToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityFromToken:");
}

id objc_msgSend_activityLevel(void *a1, const char *a2, ...)
{
  return _[a1 activityLevel];
}

id objc_msgSend_adHocPairingIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 adHocPairingIdentifier];
}

id objc_msgSend_addAgentClient(void *a1, const char *a2, ...)
{
  return _[a1 addAgentClient];
}

id objc_msgSend_addConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConnection:");
}

id objc_msgSend_addDeviceToApplicationServiceMapping_device_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDeviceToApplicationServiceMapping:device:completion:");
}

id objc_msgSend_addDiscoveryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDiscoveryType:");
}

id objc_msgSend_addEndpointMapping_endpointID_applicationService_discoverySessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEndpointMapping:endpointID:applicationService:discoverySessionID:");
}

id objc_msgSend_addEndpointMapping_endpointID_applicationService_discoverySessionID_shouldAutomapListener_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEndpointMapping:endpointID:applicationService:discoverySessionID:shouldAutomapListener:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addInUseProcess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInUseProcess:");
}

id objc_msgSend_addIncomingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIncomingConnection:");
}

id objc_msgSend_addListenerAgentClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addListenerAgentClient:");
}

id objc_msgSend_addMappingForDevice_endpointID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMappingForDevice:endpointID:");
}

id objc_msgSend_addNeedsAWDLPeer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNeedsAWDLPeer:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addOrUpdateAdHocPairedIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOrUpdateAdHocPairedIdentity:");
}

id objc_msgSend_addOrUpdateAdHocPairedIdentity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOrUpdateAdHocPairedIdentity:error:");
}

id objc_msgSend_addOrUpdateIdentity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOrUpdateIdentity:error:");
}

id objc_msgSend_addOrUpdateOrReAddItem_logCategory_logLabel_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOrUpdateOrReAddItem:logCategory:logLabel:error:");
}

id objc_msgSend_addPermanentObserverForProperty_notifyInitial_invokeOnMainThread_handler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPermanentObserverForProperty:notifyInitial:invokeOnMainThread:handler:");
}

id objc_msgSend_addPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPolicy:");
}

id objc_msgSend_addSelfIdentityInfoToMessage_flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSelfIdentityInfoToMessage:flags:");
}

id objc_msgSend_addSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSession:");
}

id objc_msgSend_addXPCMatchingToken_event_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addXPCMatchingToken:event:handler:");
}

id objc_msgSend_advertiseDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 advertiseDescriptor];
}

id objc_msgSend_advertiseDeviceName(void *a1, const char *a2, ...)
{
  return _[a1 advertiseDeviceName];
}

id objc_msgSend_advertisementData(void *a1, const char *a2, ...)
{
  return _[a1 advertisementData];
}

id objc_msgSend_advertisementFields(void *a1, const char *a2, ...)
{
  return _[a1 advertisementFields];
}

id objc_msgSend_advertisingAddressDataNonConnectable(void *a1, const char *a2, ...)
{
  return _[a1 advertisingAddressDataNonConnectable];
}

id objc_msgSend_ageOutEndpointMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ageOutEndpointMapping:");
}

id objc_msgSend_ageOutListenerTimer(void *a1, const char *a2, ...)
{
  return _[a1 ageOutListenerTimer];
}

id objc_msgSend_ageOutTimeout(void *a1, const char *a2, ...)
{
  return _[a1 ageOutTimeout];
}

id objc_msgSend_agentClient(void *a1, const char *a2, ...)
{
  return _[a1 agentClient];
}

id objc_msgSend_agentClientID(void *a1, const char *a2, ...)
{
  return _[a1 agentClientID];
}

id objc_msgSend_aliasStrings(void *a1, const char *a2, ...)
{
  return _[a1 aliasStrings];
}

id objc_msgSend_aliasesForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aliasesForAccount:");
}

id objc_msgSend_allInterfaces(void *a1, const char *a2, ...)
{
  return _[a1 allInterfaces];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allUsedSendersKnownAliases(void *a1, const char *a2, ...)
{
  return _[a1 allUsedSendersKnownAliases];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allowedMACAddresses(void *a1, const char *a2, ...)
{
  return _[a1 allowedMACAddresses];
}

id objc_msgSend_altIRK(void *a1, const char *a2, ...)
{
  return _[a1 altIRK];
}

id objc_msgSend_angelAssertionName(void *a1, const char *a2, ...)
{
  return _[a1 angelAssertionName];
}

id objc_msgSend_angelJobLabel(void *a1, const char *a2, ...)
{
  return _[a1 angelJobLabel];
}

id objc_msgSend_appID(void *a1, const char *a2, ...)
{
  return _[a1 appID];
}

id objc_msgSend_appId(void *a1, const char *a2, ...)
{
  return _[a1 appId];
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appleID(void *a1, const char *a2, ...)
{
  return _[a1 appleID];
}

id objc_msgSend_applicationLabel(void *a1, const char *a2, ...)
{
  return _[a1 applicationLabel];
}

id objc_msgSend_applicationService(void *a1, const char *a2, ...)
{
  return _[a1 applicationService];
}

id objc_msgSend_apply(void *a1, const char *a2, ...)
{
  return _[a1 apply];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assertions(void *a1, const char *a2, ...)
{
  return _[a1 assertions];
}

id objc_msgSend_assistantAccessControlForHome_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assistantAccessControlForHome:");
}

id objc_msgSend_attributeWithDomain_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeWithDomain:name:");
}

id objc_msgSend_authKitAccountWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authKitAccountWithAltDSID:");
}

id objc_msgSend_authTagForData_type_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authTagForData:type:error:");
}

id objc_msgSend_automapped(void *a1, const char *a2, ...)
{
  return _[a1 automapped];
}

id objc_msgSend_awdlGuestDiscoveryTimeout(void *a1, const char *a2, ...)
{
  return _[a1 awdlGuestDiscoveryTimeout];
}

id objc_msgSend_becomeInitiatorTimer(void *a1, const char *a2, ...)
{
  return _[a1 becomeInitiatorTimer];
}

id objc_msgSend_beginTransaction_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginTransaction:completionHandler:");
}

id objc_msgSend_bleAdvertisementData(void *a1, const char *a2, ...)
{
  return _[a1 bleAdvertisementData];
}

id objc_msgSend_bleClientUseCase(void *a1, const char *a2, ...)
{
  return _[a1 bleClientUseCase];
}

id objc_msgSend_bleDevice(void *a1, const char *a2, ...)
{
  return _[a1 bleDevice];
}

id objc_msgSend_bleDeviceAcceptedInvitations(void *a1, const char *a2, ...)
{
  return _[a1 bleDeviceAcceptedInvitations];
}

id objc_msgSend_bleDeviceWantingInvitations(void *a1, const char *a2, ...)
{
  return _[a1 bleDeviceWantingInvitations];
}

id objc_msgSend_blePeerIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 blePeerIdentifier];
}

id objc_msgSend_bleScanRate(void *a1, const char *a2, ...)
{
  return _[a1 bleScanRate];
}

id objc_msgSend_bleScanRateScreenOff(void *a1, const char *a2, ...)
{
  return _[a1 bleScanRateScreenOff];
}

id objc_msgSend_bleScreenOffRescanInterval(void *a1, const char *a2, ...)
{
  return _[a1 bleScreenOffRescanInterval];
}

id objc_msgSend_bleScreenOffScanRate(void *a1, const char *a2, ...)
{
  return _[a1 bleScreenOffScanRate];
}

id objc_msgSend_bleTargetData(void *a1, const char *a2, ...)
{
  return _[a1 bleTargetData];
}

id objc_msgSend_bluetoothAddressData(void *a1, const char *a2, ...)
{
  return _[a1 bluetoothAddressData];
}

id objc_msgSend_bonjourDevice(void *a1, const char *a2, ...)
{
  return _[a1 bonjourDevice];
}

id objc_msgSend_bonjourListenerUUID(void *a1, const char *a2, ...)
{
  return _[a1 bonjourListenerUUID];
}

id objc_msgSend_bonjourPeerDevice(void *a1, const char *a2, ...)
{
  return _[a1 bonjourPeerDevice];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_browseClient(void *a1, const char *a2, ...)
{
  return _[a1 browseClient];
}

id objc_msgSend_browseDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 browseDescriptor];
}

id objc_msgSend_browseInvitationScope(void *a1, const char *a2, ...)
{
  return _[a1 browseInvitationScope];
}

id objc_msgSend_browseResponse(void *a1, const char *a2, ...)
{
  return _[a1 browseResponse];
}

id objc_msgSend_browseSession(void *a1, const char *a2, ...)
{
  return _[a1 browseSession];
}

id objc_msgSend_btAddress(void *a1, const char *a2, ...)
{
  return _[a1 btAddress];
}

id objc_msgSend_btAddressData(void *a1, const char *a2, ...)
{
  return _[a1 btAddressData];
}

id objc_msgSend_btIRKData(void *a1, const char *a2, ...)
{
  return _[a1 btIRKData];
}

id objc_msgSend_btPipe(void *a1, const char *a2, ...)
{
  return _[a1 btPipe];
}

id objc_msgSend_btPipeHighPriority(void *a1, const char *a2, ...)
{
  return _[a1 btPipeHighPriority];
}

id objc_msgSend_bundleIdentifiersForMachOUUIDs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifiersForMachOUUIDs:error:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_cachedValue(void *a1, const char *a2, ...)
{
  return _[a1 cachedValue];
}

id objc_msgSend_cameraCapabilities(void *a1, const char *a2, ...)
{
  return _[a1 cameraCapabilities];
}

id objc_msgSend_cameraCapabilitiesRefetchTimer(void *a1, const char *a2, ...)
{
  return _[a1 cameraCapabilitiesRefetchTimer];
}

id objc_msgSend_cameraCapabilityRequestIsActive(void *a1, const char *a2, ...)
{
  return _[a1 cameraCapabilityRequestIsActive];
}

id objc_msgSend_canDecode128bit(void *a1, const char *a2, ...)
{
  return _[a1 canDecode128bit];
}

id objc_msgSend_canSend(void *a1, const char *a2, ...)
{
  return _[a1 canSend];
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_cbDevice(void *a1, const char *a2, ...)
{
  return _[a1 cbDevice];
}

id objc_msgSend_changeFlags(void *a1, const char *a2, ...)
{
  return _[a1 changeFlags];
}

id objc_msgSend_changed(void *a1, const char *a2, ...)
{
  return _[a1 changed];
}

id objc_msgSend_clearCameraCapabilitiesRefetchTimer(void *a1, const char *a2, ...)
{
  return _[a1 clearCameraCapabilitiesRefetchTimer];
}

id objc_msgSend_client(void *a1, const char *a2, ...)
{
  return _[a1 client];
}

id objc_msgSend_clientDeviceChanged_changes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientDeviceChanged:changes:");
}

id objc_msgSend_clientDeviceFound_report_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientDeviceFound:report:");
}

id objc_msgSend_clientDeviceLost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientDeviceLost:");
}

id objc_msgSend_clientID(void *a1, const char *a2, ...)
{
  return _[a1 clientID];
}

id objc_msgSend_clientMode(void *a1, const char *a2, ...)
{
  return _[a1 clientMode];
}

id objc_msgSend_clientNetCnx(void *a1, const char *a2, ...)
{
  return _[a1 clientNetCnx];
}

id objc_msgSend_cloudServiceID(void *a1, const char *a2, ...)
{
  return _[a1 cloudServiceID];
}

id objc_msgSend_cnx(void *a1, const char *a2, ...)
{
  return _[a1 cnx];
}

id objc_msgSend_cnxHandler(void *a1, const char *a2, ...)
{
  return _[a1 cnxHandler];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_companionLinkAuthCompleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionLinkAuthCompleted:");
}

id objc_msgSend_companionLinkChangedDevice_changes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionLinkChangedDevice:changes:");
}

id objc_msgSend_companionLinkFoundDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionLinkFoundDevice:");
}

id objc_msgSend_companionLinkHandleDisconnect(void *a1, const char *a2, ...)
{
  return _[a1 companionLinkHandleDisconnect];
}

id objc_msgSend_companionLinkLocalDeviceUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionLinkLocalDeviceUpdated:");
}

id objc_msgSend_companionLinkLostDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionLinkLostDevice:");
}

id objc_msgSend_companionLinkPromptForPasswordType_flags_throttleSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionLinkPromptForPasswordType:flags:throttleSeconds:");
}

id objc_msgSend_companionLinkReceivedEventID_event_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionLinkReceivedEventID:event:options:");
}

id objc_msgSend_companionLinkReceivedRequestID_request_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionLinkReceivedRequestID:request:options:responseHandler:");
}

id objc_msgSend_companionLinkRemoveLocalDeviceAsContextCollector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionLinkRemoveLocalDeviceAsContextCollector:");
}

id objc_msgSend_companionLinkUpdateClientState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionLinkUpdateClientState:");
}

id objc_msgSend_companionLinkUpdateErrorFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionLinkUpdateErrorFlags:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compareWithDeviceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compareWithDeviceIdentifier:");
}

id objc_msgSend_compareWithRPIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compareWithRPIdentity:");
}

id objc_msgSend_components(void *a1, const char *a2, ...)
{
  return _[a1 components];
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_connectToOneAPIPeer_inboundConnection_applicationService_listenerID_automapListener_connectionID_connectHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "connectToOneAPIPeer:inboundConnection:applicationService:listenerID:automapListener:connectionID:connectHandler:");
}

id objc_msgSend_connectToPeer_inboundConnection_applicationService_listenerID_connectionID_connectHandler_disconnectHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "connectToPeer:inboundConnection:applicationService:listenerID:connectionID:connectHandler:disconnectHandler:");
}

id objc_msgSend_connectToPeer_inboundConnection_controlFlags_applicationService_listenerID_automapListener_connectionID_connectHandler_lostHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "connectToPeer:inboundConnection:controlFlags:applicationService:listenerID:automapListener:connectionID:conne ctHandler:lostHandler:");
}

id objc_msgSend_connectToReceiverTimer(void *a1, const char *a2, ...)
{
  return _[a1 connectToReceiverTimer];
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _[a1 connection];
}

id objc_msgSend_connectionInvalidated(void *a1, const char *a2, ...)
{
  return _[a1 connectionInvalidated];
}

id objc_msgSend_connectionInvalidatedCore(void *a1, const char *a2, ...)
{
  return _[a1 connectionInvalidatedCore];
}

id objc_msgSend_connectionUUID(void *a1, const char *a2, ...)
{
  return _[a1 connectionUUID];
}

id objc_msgSend_contactID(void *a1, const char *a2, ...)
{
  return _[a1 contactID];
}

id objc_msgSend_contactIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 contactIdentifier];
}

id objc_msgSend_containsInUseProcess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsInUseProcess:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_containsValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsValueForKey:");
}

id objc_msgSend_controlCodeToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlCodeToString:");
}

id objc_msgSend_controlFlags(void *a1, const char *a2, ...)
{
  return _[a1 controlFlags];
}

id objc_msgSend_controlObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlObject:");
}

id objc_msgSend_convertBrowseParamsToControlFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertBrowseParamsToControlFlags:");
}

id objc_msgSend_convertBrowseScopeToControlFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertBrowseScopeToControlFlags:");
}

id objc_msgSend_convertConnectionParametersToControlFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertConnectionParametersToControlFlags:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyCurrentPersonaContextWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyCurrentPersonaContextWithError:");
}

id objc_msgSend_copyItemMatchingItem_flags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemMatchingItem:flags:error:");
}

id objc_msgSend_copyItemsMatchingItem_flags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemsMatchingItem:flags:error:");
}

id objc_msgSend_copyMyAppleIDAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMyAppleIDAndReturnError:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_createAuthenticationPayloadWithPkData_bonjourListenerUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAuthenticationPayloadWithPkData:bonjourListenerUUID:");
}

id objc_msgSend_createBrowseAgent(void *a1, const char *a2, ...)
{
  return _[a1 createBrowseAgent];
}

id objc_msgSend_createConnectionFramer_assign_local_remote_incomingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createConnectionFramer:assign:local:remote:incomingConnection:");
}

id objc_msgSend_createDeviceToEndpointMappingForDeviceID_endpointUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDeviceToEndpointMappingForDeviceID:endpointUUID:error:");
}

id objc_msgSend_createListenerFramer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createListenerFramer:");
}

id objc_msgSend_createNWEndpointForEndpoint_agentID_applicationService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNWEndpointForEndpoint:agentID:applicationService:");
}

id objc_msgSend_createNWEndpointWithID_agentID_applicationService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNWEndpointWithID:agentID:applicationService:");
}

id objc_msgSend_createNearbyInvitationConnectionFramer_assign_local_remote_incomingConnection_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNearbyInvitationConnectionFramer:assign:local:remote:incomingConnection:");
}

id objc_msgSend_createNetworkAgent(void *a1, const char *a2, ...)
{
  return _[a1 createNetworkAgent];
}

id objc_msgSend_createRapportServer(void *a1, const char *a2, ...)
{
  return _[a1 createRapportServer];
}

id objc_msgSend_createRequestMessageWithApplicationLabel_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRequestMessageWithApplicationLabel:payload:");
}

id objc_msgSend_createResponseWithApplicationLabel_payload_forRequestMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createResponseWithApplicationLabel:payload:forRequestMessage:");
}

id objc_msgSend_createTapEventWithApplicationLabel_singleBandAWDLModeRequested_pkData_bonjourListenerUUID_identity_isUnsupportedApplicationLabel_flags_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "createTapEventWithApplicationLabel:singleBandAWDLModeRequested:pkData:bonjourListenerUUID:identity:isUnsuppor tedApplicationLabel:flags:");
}

id objc_msgSend_createValidationPayloadWithKnownIdentity_supportsApplicationLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createValidationPayloadWithKnownIdentity:supportsApplicationLabel:");
}

id objc_msgSend_cuValueForEntitlementNoCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cuValueForEntitlementNoCache:");
}

id objc_msgSend_currentContext(void *a1, const char *a2, ...)
{
  return _[a1 currentContext];
}

id objc_msgSend_currentDataPayload(void *a1, const char *a2, ...)
{
  return _[a1 currentDataPayload];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentHome(void *a1, const char *a2, ...)
{
  return _[a1 currentHome];
}

id objc_msgSend_currentPersona(void *a1, const char *a2, ...)
{
  return _[a1 currentPersona];
}

id objc_msgSend_currentPreferredPollingType(void *a1, const char *a2, ...)
{
  return _[a1 currentPreferredPollingType];
}

id objc_msgSend_currentRemoteDevicesForDestinations_service_listenerID_queue_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentRemoteDevicesForDestinations:service:listenerID:queue:completionBlock:");
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 currentRunLoop];
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return _[a1 currentState];
}

id objc_msgSend_currentTransaction(void *a1, const char *a2, ...)
{
  return _[a1 currentTransaction];
}

id objc_msgSend_currentUser(void *a1, const char *a2, ...)
{
  return _[a1 currentUser];
}

id objc_msgSend_currentUserPairingIdentityForHomeContainingAccessoryWithUniqueIdentifier_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "currentUserPairingIdentityForHomeContainingAccessoryWithUniqueIdentifier:completionHandler:");
}

id objc_msgSend_customEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customEntitlement:");
}

id objc_msgSend_daemonDevice(void *a1, const char *a2, ...)
{
  return _[a1 daemonDevice];
}

id objc_msgSend_daemonInfoChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonInfoChanged:");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataSource(void *a1, const char *a2, ...)
{
  return _[a1 dataSource];
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithCapacity:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateAcknowledged(void *a1, const char *a2, ...)
{
  return _[a1 dateAcknowledged];
}

id objc_msgSend_dateAdded(void *a1, const char *a2, ...)
{
  return _[a1 dateAdded];
}

id objc_msgSend_dateRemoved(void *a1, const char *a2, ...)
{
  return _[a1 dateRemoved];
}

id objc_msgSend_dateRequested(void *a1, const char *a2, ...)
{
  return _[a1 dateRequested];
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decryptedActivityLevel(void *a1, const char *a2, ...)
{
  return _[a1 decryptedActivityLevel];
}

id objc_msgSend_dedicatedDevice(void *a1, const char *a2, ...)
{
  return _[a1 dedicatedDevice];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deregisterEventID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deregisterEventID:");
}

id objc_msgSend_deregisterRequestID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deregisterRequestID:");
}

id objc_msgSend_deregisteredEventID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deregisteredEventID:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptionWithLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionWithLevel:");
}

id objc_msgSend_destination(void *a1, const char *a2, ...)
{
  return _[a1 destination];
}

id objc_msgSend_destinationDevice(void *a1, const char *a2, ...)
{
  return _[a1 destinationDevice];
}

id objc_msgSend_detailedDescription(void *a1, const char *a2, ...)
{
  return _[a1 detailedDescription];
}

id objc_msgSend_device(void *a1, const char *a2, ...)
{
  return _[a1 device];
}

id objc_msgSend_deviceActionType(void *a1, const char *a2, ...)
{
  return _[a1 deviceActionType];
}

id objc_msgSend_deviceCapabilityFlags(void *a1, const char *a2, ...)
{
  return _[a1 deviceCapabilityFlags];
}

id objc_msgSend_deviceClassCode(void *a1, const char *a2, ...)
{
  return _[a1 deviceClassCode];
}

id objc_msgSend_deviceColor(void *a1, const char *a2, ...)
{
  return _[a1 deviceColor];
}

id objc_msgSend_deviceConfirmedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 deviceConfirmedIdentifier];
}

id objc_msgSend_deviceFilter(void *a1, const char *a2, ...)
{
  return _[a1 deviceFilter];
}

id objc_msgSend_deviceFlags(void *a1, const char *a2, ...)
{
  return _[a1 deviceFlags];
}

id objc_msgSend_deviceID(void *a1, const char *a2, ...)
{
  return _[a1 deviceID];
}

id objc_msgSend_deviceIRKData(void *a1, const char *a2, ...)
{
  return _[a1 deviceIRKData];
}

id objc_msgSend_deviceIdentifer(void *a1, const char *a2, ...)
{
  return _[a1 deviceIdentifer];
}

id objc_msgSend_deviceInfo(void *a1, const char *a2, ...)
{
  return _[a1 deviceInfo];
}

id objc_msgSend_deviceModelCode(void *a1, const char *a2, ...)
{
  return _[a1 deviceModelCode];
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return _[a1 deviceName];
}

id objc_msgSend_devicePresenceNotifier(void *a1, const char *a2, ...)
{
  return _[a1 devicePresenceNotifier];
}

id objc_msgSend_devicePresencePreset(void *a1, const char *a2, ...)
{
  return _[a1 devicePresencePreset];
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return _[a1 deviceType];
}

id objc_msgSend_deviceUniqueID(void *a1, const char *a2, ...)
{
  return _[a1 deviceUniqueID];
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _[a1 devices];
}

id objc_msgSend_diagnosticCommand_params_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticCommand:params:");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didBeginTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didBeginTransaction:");
}

id objc_msgSend_didChangeStateForTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeStateForTransaction:");
}

id objc_msgSend_didDetectDeviceNearbyWithInitiatorRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didDetectDeviceNearbyWithInitiatorRole:");
}

id objc_msgSend_didUpdateTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateTransaction:");
}

id objc_msgSend_direct(void *a1, const char *a2, ...)
{
  return _[a1 direct];
}

id objc_msgSend_disabled(void *a1, const char *a2, ...)
{
  return _[a1 disabled];
}

id objc_msgSend_disabledUntilTicks(void *a1, const char *a2, ...)
{
  return _[a1 disabledUntilTicks];
}

id objc_msgSend_discoveryFlags(void *a1, const char *a2, ...)
{
  return _[a1 discoveryFlags];
}

id objc_msgSend_discoveryMode(void *a1, const char *a2, ...)
{
  return _[a1 discoveryMode];
}

id objc_msgSend_discoveryTimer(void *a1, const char *a2, ...)
{
  return _[a1 discoveryTimer];
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return _[a1 dispatchQueue];
}

id objc_msgSend_distance(void *a1, const char *a2, ...)
{
  return _[a1 distance];
}

id objc_msgSend_documentTraits(void *a1, const char *a2, ...)
{
  return _[a1 documentTraits];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_duetSync(void *a1, const char *a2, ...)
{
  return _[a1 duetSync];
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earlierDate:");
}

id objc_msgSend_edPKData(void *a1, const char *a2, ...)
{
  return _[a1 edPKData];
}

id objc_msgSend_edSKData(void *a1, const char *a2, ...)
{
  return _[a1 edSKData];
}

id objc_msgSend_effectiveIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 effectiveIdentifier];
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return _[a1 enabled];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodeSensitiveProperties(void *a1, const char *a2, ...)
{
  return _[a1 encodeSensitiveProperties];
}

id objc_msgSend_endTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endTransaction:");
}

id objc_msgSend_endpointUUID(void *a1, const char *a2, ...)
{
  return _[a1 endpointUUID];
}

id objc_msgSend_endpoints(void *a1, const char *a2, ...)
{
  return _[a1 endpoints];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_errorFlags(void *a1, const char *a2, ...)
{
  return _[a1 errorFlags];
}

id objc_msgSend_event(void *a1, const char *a2, ...)
{
  return _[a1 event];
}

id objc_msgSend_eventID(void *a1, const char *a2, ...)
{
  return _[a1 eventID];
}

id objc_msgSend_eventSize(void *a1, const char *a2, ...)
{
  return _[a1 eventSize];
}

id objc_msgSend_executeAgentLogicInPersona_pid_handlerDescription_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeAgentLogicInPersona:pid:handlerDescription:handler:");
}

id objc_msgSend_failWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithError:");
}

id objc_msgSend_failedToConnect(void *a1, const char *a2, ...)
{
  return _[a1 failedToConnect];
}

id objc_msgSend_familyEndpointData(void *a1, const char *a2, ...)
{
  return _[a1 familyEndpointData];
}

id objc_msgSend_familyMembers(void *a1, const char *a2, ...)
{
  return _[a1 familyMembers];
}

id objc_msgSend_featureFlags(void *a1, const char *a2, ...)
{
  return _[a1 featureFlags];
}

id objc_msgSend_featureFlagsForIdentityMatchingIDSDeviceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureFlagsForIdentityMatchingIDSDeviceIdentifier:");
}

id objc_msgSend_fetchAllPersonasWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllPersonasWithCompletionHandler:");
}

id objc_msgSend_fetchProfileForRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchProfileForRequest:completion:");
}

id objc_msgSend_fetchProfilesRequestForPersonaUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchProfilesRequestForPersonaUniqueIdentifier:");
}

id objc_msgSend_findAgentClient_tryPort_isTCP_isFlowHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findAgentClient:tryPort:isTCP:isFlowHandler:");
}

id objc_msgSend_findAgentClientFromConnectionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findAgentClientFromConnectionID:");
}

id objc_msgSend_findAgentClientPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findAgentClientPort:");
}

id objc_msgSend_findAuthAWDLPairingModeDeviceForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findAuthAWDLPairingModeDeviceForIdentifier:");
}

id objc_msgSend_findConnectedDeviceForIdentifier_controlFlags_cnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findConnectedDeviceForIdentifier:controlFlags:cnx:");
}

id objc_msgSend_findContact_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findContact:completion:");
}

id objc_msgSend_findDeviceFromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findDeviceFromID:");
}

id objc_msgSend_findEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findEndpoint:");
}

id objc_msgSend_findListenerAgentClientFromApplicationServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findListenerAgentClientFromApplicationServiceName:");
}

id objc_msgSend_findListenerAndCreateConnection_version_applicationService_listenerID_connectionID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findListenerAndCreateConnection:version:applicationService:listenerID:connectionID:");
}

id objc_msgSend_findListenerForAgentClient_sender_browseRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findListenerForAgentClient:sender:browseRequest:");
}

id objc_msgSend_findListenerForID_applicationService_fromPeer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findListenerForID:applicationService:fromPeer:");
}

id objc_msgSend_findNearbyInvitationListenerAndCreateConnection_applicationService_listenerID_connectionID_agentClient_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "findNearbyInvitationListenerAndCreateConnection:applicationService:listenerID:connectionID:agentClient:");
}

id objc_msgSend_findServerClientFromID_senderIDS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findServerClientFromID:senderIDS:");
}

id objc_msgSend_findUnauthDeviceForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findUnauthDeviceForIdentifier:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_firstUnlocked(void *a1, const char *a2, ...)
{
  return _[a1 firstUnlocked];
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _[a1 flags];
}

id objc_msgSend_flowAssignHandler(void *a1, const char *a2, ...)
{
  return _[a1 flowAssignHandler];
}

id objc_msgSend_flowClient(void *a1, const char *a2, ...)
{
  return _[a1 flowClient];
}

id objc_msgSend_frameType(void *a1, const char *a2, ...)
{
  return _[a1 frameType];
}

id objc_msgSend_framer(void *a1, const char *a2, ...)
{
  return _[a1 framer];
}

id objc_msgSend_fromID(void *a1, const char *a2, ...)
{
  return _[a1 fromID];
}

id objc_msgSend_generateAndRestorePersonaContextWithPersonaUniqueString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateAndRestorePersonaContextWithPersonaUniqueString:");
}

id objc_msgSend_getBundleIDForPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBundleIDForPID:");
}

id objc_msgSend_getConnectionWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getConnectionWithID:");
}

id objc_msgSend_getDeviceClass(void *a1, const char *a2, ...)
{
  return _[a1 getDeviceClass];
}

id objc_msgSend_getDiscoveryDeviceTypesDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDiscoveryDeviceTypesDescription:");
}

id objc_msgSend_getFamilyDeviceIdentities(void *a1, const char *a2, ...)
{
  return _[a1 getFamilyDeviceIdentities];
}

id objc_msgSend_getFamilyURIs(void *a1, const char *a2, ...)
{
  return _[a1 getFamilyURIs];
}

id objc_msgSend_getFriendDeviceIdentities(void *a1, const char *a2, ...)
{
  return _[a1 getFriendDeviceIdentities];
}

id objc_msgSend_getLogInfo(void *a1, const char *a2, ...)
{
  return _[a1 getLogInfo];
}

id objc_msgSend_getNonConnectableIdentity(void *a1, const char *a2, ...)
{
  return _[a1 getNonConnectableIdentity];
}

id objc_msgSend_getPairedPeersWithOptions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPairedPeersWithOptions:completion:");
}

id objc_msgSend_getPairingIdentityFromHomeWithAccessory_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPairingIdentityFromHomeWithAccessory:completionHandler:");
}

id objc_msgSend_getPairingIdentityWithOptions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPairingIdentityWithOptions:completion:");
}

id objc_msgSend_getPeopleSuggestions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPeopleSuggestions:completion:");
}

id objc_msgSend_getPersonaFromParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPersonaFromParameters:");
}

id objc_msgSend_getTypeDescription(void *a1, const char *a2, ...)
{
  return _[a1 getTypeDescription];
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_getValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getValue:");
}

id objc_msgSend_getVolume_forCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getVolume:forCategory:");
}

id objc_msgSend_handleConnectionData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnectionData:");
}

id objc_msgSend_handleConnectionRequest_agentClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnectionRequest:agentClient:");
}

id objc_msgSend_handleDisconnect(void *a1, const char *a2, ...)
{
  return _[a1 handleDisconnect];
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleForIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleForIdentifier:error:");
}

id objc_msgSend_handleTextActionPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTextActionPayload:");
}

id objc_msgSend_handler(void *a1, const char *a2, ...)
{
  return _[a1 handler];
}

id objc_msgSend_handles(void *a1, const char *a2, ...)
{
  return _[a1 handles];
}

id objc_msgSend_hasCurrentTransaction(void *a1, const char *a2, ...)
{
  return _[a1 hasCurrentTransaction];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasTriggeredConnection(void *a1, const char *a2, ...)
{
  return _[a1 hasTriggeredConnection];
}

id objc_msgSend_hidePasswordHandler(void *a1, const char *a2, ...)
{
  return _[a1 hidePasswordHandler];
}

id objc_msgSend_home(void *a1, const char *a2, ...)
{
  return _[a1 home];
}

id objc_msgSend_homeAccessControlForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeAccessControlForUser:");
}

id objc_msgSend_homeHubDeviceForLaunchInstanceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeHubDeviceForLaunchInstanceID:");
}

id objc_msgSend_homeHubDeviceList(void *a1, const char *a2, ...)
{
  return _[a1 homeHubDeviceList];
}

id objc_msgSend_homeHubDeviceWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeHubDeviceWithIdentifier:");
}

id objc_msgSend_homeKitIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 homeKitIdentifier];
}

id objc_msgSend_homeKitIdentity(void *a1, const char *a2, ...)
{
  return _[a1 homeKitIdentity];
}

id objc_msgSend_homeKitIdentityUpdated(void *a1, const char *a2, ...)
{
  return _[a1 homeKitIdentityUpdated];
}

id objc_msgSend_homeKitUserIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 homeKitUserIdentifiers];
}

id objc_msgSend_homePodVariant(void *a1, const char *a2, ...)
{
  return _[a1 homePodVariant];
}

id objc_msgSend_homes(void *a1, const char *a2, ...)
{
  return _[a1 homes];
}

id objc_msgSend_hotspotInfo(void *a1, const char *a2, ...)
{
  return _[a1 hotspotInfo];
}

id objc_msgSend_iCloudAltDSID(void *a1, const char *a2, ...)
{
  return _[a1 iCloudAltDSID];
}

id objc_msgSend_idInfoForDestinations_service_infoTypes_options_listenerID_queue_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idInfoForDestinations:service:infoTypes:options:listenerID:queue:completionBlock:");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identifierWithPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifierWithPid:");
}

id objc_msgSend_identitiesOfType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identitiesOfType:error:");
}

id objc_msgSend_identityForAngelJobLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identityForAngelJobLabel:");
}

id objc_msgSend_identityOfSelfAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identityOfSelfAndReturnError:");
}

id objc_msgSend_identityOfTemporarySelfAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identityOfTemporarySelfAndReturnError:");
}

id objc_msgSend_identityResolved(void *a1, const char *a2, ...)
{
  return _[a1 identityResolved];
}

id objc_msgSend_identityVerified(void *a1, const char *a2, ...)
{
  return _[a1 identityVerified];
}

id objc_msgSend_idsCorrelationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 idsCorrelationIdentifier];
}

id objc_msgSend_idsDeviceArray(void *a1, const char *a2, ...)
{
  return _[a1 idsDeviceArray];
}

id objc_msgSend_idsDeviceForBluetoothUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsDeviceForBluetoothUUID:");
}

id objc_msgSend_idsDeviceID(void *a1, const char *a2, ...)
{
  return _[a1 idsDeviceID];
}

id objc_msgSend_idsDeviceIDSelf(void *a1, const char *a2, ...)
{
  return _[a1 idsDeviceIDSelf];
}

id objc_msgSend_idsDeviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 idsDeviceIdentifier];
}

id objc_msgSend_idsDeviceMap(void *a1, const char *a2, ...)
{
  return _[a1 idsDeviceMap];
}

id objc_msgSend_idsFamilyEndpointMap(void *a1, const char *a2, ...)
{
  return _[a1 idsFamilyEndpointMap];
}

id objc_msgSend_idsFamilyEndpointQueryWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsFamilyEndpointQueryWithCompletion:");
}

id objc_msgSend_idsHandheldCount(void *a1, const char *a2, ...)
{
  return _[a1 idsHandheldCount];
}

id objc_msgSend_idsHasAppleTV(void *a1, const char *a2, ...)
{
  return _[a1 idsHasAppleTV];
}

id objc_msgSend_idsHasHomePod(void *a1, const char *a2, ...)
{
  return _[a1 idsHasHomePod];
}

id objc_msgSend_idsHasMac(void *a1, const char *a2, ...)
{
  return _[a1 idsHasMac];
}

id objc_msgSend_idsHasRealityDevice(void *a1, const char *a2, ...)
{
  return _[a1 idsHasRealityDevice];
}

id objc_msgSend_idsHasWatch(void *a1, const char *a2, ...)
{
  return _[a1 idsHasWatch];
}

id objc_msgSend_idsHasiPad(void *a1, const char *a2, ...)
{
  return _[a1 idsHasiPad];
}

id objc_msgSend_idsIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 idsIdentifier];
}

id objc_msgSend_idsIsSignedIn(void *a1, const char *a2, ...)
{
  return _[a1 idsIsSignedIn];
}

id objc_msgSend_idsPersonalDeviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 idsPersonalDeviceIdentifier];
}

id objc_msgSend_inBubble(void *a1, const char *a2, ...)
{
  return _[a1 inBubble];
}

id objc_msgSend_inDiscoverySession(void *a1, const char *a2, ...)
{
  return _[a1 inDiscoverySession];
}

id objc_msgSend_inUseProcessesToString(void *a1, const char *a2, ...)
{
  return _[a1 inUseProcessesToString];
}

id objc_msgSend_inbound(void *a1, const char *a2, ...)
{
  return _[a1 inbound];
}

id objc_msgSend_incomingConnections(void *a1, const char *a2, ...)
{
  return _[a1 incomingConnections];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytes_objCType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:objCType:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithConnection_dispatchQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnection:dispatchQueue:");
}

id objc_msgSend_initWithDaemon_xpcCnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDaemon:xpcCnx:");
}

id objc_msgSend_initWithDaemon_xpcConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDaemon:xpcConnection:");
}

id objc_msgSend_initWithDelegate_queue_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:queue:options:");
}

id objc_msgSend_initWithDevice_applicationService_endpointID_discoverySessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevice:applicationService:endpointID:discoverySessionID:");
}

id objc_msgSend_initWithDevice_applicationService_endpointID_discoverySessionID_shouldAutomapListener_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevice:applicationService:endpointID:discoverySessionID:shouldAutomapListener:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDispatchQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDispatchQueue:");
}

id objc_msgSend_initWithExplanation_target_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExplanation:target:attributes:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithHomeMangerConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHomeMangerConfiguration:");
}

id objc_msgSend_initWithIdentifier_applicationLabel_pkData_bonjourListenerUUID_isSameAccount_contactID_accountID_forceSingleBandAWDLMode_knownIdentity_isUnsupportedApplicationLabel_flags_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithIdentifier:applicationLabel:pkData:bonjourListenerUUID:isSameAccount:contactID:accountID:forceSingleB andAWDLMode:knownIdentity:isUnsupportedApplicationLabel:flags:");
}

id objc_msgSend_initWithInnerBoundary_outerBoundary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInnerBoundary:outerBoundary:error:");
}

id objc_msgSend_initWithKeyOptions_valueOptions_capacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyOptions:valueOptions:capacity:");
}

id objc_msgSend_initWithKeychainDictionaryRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeychainDictionaryRepresentation:");
}

id objc_msgSend_initWithKnownIdentity_supportsApplicationLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKnownIdentity:supportsApplicationLabel:");
}

id objc_msgSend_initWithMachName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachName:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMetadata_applicationLabel_payload_version_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMetadata:applicationLabel:payload:version:");
}

id objc_msgSend_initWithName_devicePresencePreset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:devicePresencePreset:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithOptions_cachePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:cachePolicy:");
}

id objc_msgSend_initWithOrder_result_conditions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOrder:result:conditions:");
}

id objc_msgSend_initWithPairedPeer_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPairedPeer:type:");
}

id objc_msgSend_initWithPeer_session_inbound_internal_applicationService_connectionID_endpointID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPeer:session:inbound:internal:applicationService:connectionID:endpointID:");
}

id objc_msgSend_initWithPeer_version_inbound_internal_applicationService_connectionID_endpointID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPeer:version:inbound:internal:applicationService:connectionID:endpointID:");
}

id objc_msgSend_initWithPreferredPollingType_dispatchQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPreferredPollingType:dispatchQueue:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithRSSI_identifier_model_channel_machContinuousTimeSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRSSI:identifier:model:channel:machContinuousTimeSeconds:");
}

id objc_msgSend_initWithRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRole:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSet:");
}

id objc_msgSend_initWithSingleBandModeRequired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSingleBandModeRequired:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_initWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_initWithTimeStamp_pkData_bonjourListenerUUID_selfIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeStamp:pkData:bonjourListenerUUID:selfIdentity:");
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initiatorLimitTimer(void *a1, const char *a2, ...)
{
  return _[a1 initiatorLimitTimer];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interestDeregisterEventID_peerIdentifier_owner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestDeregisterEventID:peerIdentifier:owner:");
}

id objc_msgSend_interestRegisterEventID_peerIdentifier_owner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestRegisterEventID:peerIdentifier:owner:");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_internal(void *a1, const char *a2, ...)
{
  return _[a1 internal];
}

id objc_msgSend_internalAuthFlags(void *a1, const char *a2, ...)
{
  return _[a1 internalAuthFlags];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateForClient:");
}

id objc_msgSend_invalidateTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateTransaction:");
}

id objc_msgSend_invalidateTransactionWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateTransactionWithIdentifier:");
}

id objc_msgSend_invalidateTransactionWithIdentifier_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateTransactionWithIdentifier:context:");
}

id objc_msgSend_invalidateWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateWithError:");
}

id objc_msgSend_invalidationHandled(void *a1, const char *a2, ...)
{
  return _[a1 invalidationHandled];
}

id objc_msgSend_invalidationHandler(void *a1, const char *a2, ...)
{
  return _[a1 invalidationHandler];
}

id objc_msgSend_ipAddress(void *a1, const char *a2, ...)
{
  return _[a1 ipAddress];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isApplication(void *a1, const char *a2, ...)
{
  return _[a1 isApplication];
}

id objc_msgSend_isBLEDeviceReplaced(void *a1, const char *a2, ...)
{
  return _[a1 isBLEDeviceReplaced];
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _[a1 isConnected];
}

id objc_msgSend_isContactValidForIdentity_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isContactValidForIdentity:completionBlock:");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isEnabled];
}

id objc_msgSend_isEnabledForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabledForType:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDevice:");
}

id objc_msgSend_isEqualToDeviceBasic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDeviceBasic:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isKnownIdentity(void *a1, const char *a2, ...)
{
  return _[a1 isKnownIdentity];
}

id objc_msgSend_isMe(void *a1, const char *a2, ...)
{
  return _[a1 isMe];
}

id objc_msgSend_isNearbyActionV2AdvertiserActive(void *a1, const char *a2, ...)
{
  return _[a1 isNearbyActionV2AdvertiserActive];
}

id objc_msgSend_isOwner(void *a1, const char *a2, ...)
{
  return _[a1 isOwner];
}

id objc_msgSend_isPersonal(void *a1, const char *a2, ...)
{
  return _[a1 isPersonal];
}

id objc_msgSend_isRunning(void *a1, const char *a2, ...)
{
  return _[a1 isRunning];
}

id objc_msgSend_isTCP(void *a1, const char *a2, ...)
{
  return _[a1 isTCP];
}

id objc_msgSend_isUsingQUIC(void *a1, const char *a2, ...)
{
  return _[a1 isUsingQUIC];
}

id objc_msgSend_isValidTimeStamp(void *a1, const char *a2, ...)
{
  return _[a1 isValidTimeStamp];
}

id objc_msgSend_isValidTimeStampSince_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidTimeStampSince:");
}

id objc_msgSend_keychainDictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 keychainDictionaryRepresentation];
}

id objc_msgSend_keychainStateString(void *a1, const char *a2, ...)
{
  return _[a1 keychainStateString];
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _[a1 label];
}

id objc_msgSend_languageChangePending(void *a1, const char *a2, ...)
{
  return _[a1 languageChangePending];
}

id objc_msgSend_launchInstanceID(void *a1, const char *a2, ...)
{
  return _[a1 launchInstanceID];
}

id objc_msgSend_launchInstanceId(void *a1, const char *a2, ...)
{
  return _[a1 launchInstanceId];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_linkType(void *a1, const char *a2, ...)
{
  return _[a1 linkType];
}

id objc_msgSend_listAgentClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listAgentClients:");
}

id objc_msgSend_listAllowedApplicationServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listAllowedApplicationServices:");
}

id objc_msgSend_listConnections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listConnections:");
}

id objc_msgSend_listEndpoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listEndpoints:");
}

id objc_msgSend_listEndpointsForDiscoverySession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listEndpointsForDiscoverySession:");
}

id objc_msgSend_listen_framer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listen_framer");
}

id objc_msgSend_listenerNotifications(void *a1, const char *a2, ...)
{
  return _[a1 listenerNotifications];
}

id objc_msgSend_listeningPSM(void *a1, const char *a2, ...)
{
  return _[a1 listeningPSM];
}

id objc_msgSend_listeningPort(void *a1, const char *a2, ...)
{
  return _[a1 listeningPort];
}

id objc_msgSend_loadFamilyDeviceIdentitiesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadFamilyDeviceIdentitiesWithError:");
}

id objc_msgSend_loadFriendDeviceIdentitiesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadFriendDeviceIdentitiesWithError:");
}

id objc_msgSend_localDeviceInfo(void *a1, const char *a2, ...)
{
  return _[a1 localDeviceInfo];
}

id objc_msgSend_localDeviceUpdated(void *a1, const char *a2, ...)
{
  return _[a1 localDeviceUpdated];
}

id objc_msgSend_localEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 localEndpoint];
}

id objc_msgSend_localValidationMessage(void *a1, const char *a2, ...)
{
  return _[a1 localValidationMessage];
}

id objc_msgSend_localeWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeWithLocaleIdentifier:");
}

id objc_msgSend_lockSessionToCurrentProcess(void *a1, const char *a2, ...)
{
  return _[a1 lockSessionToCurrentProcess];
}

id objc_msgSend_logAWDLBrowseClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logAWDLBrowseClient:");
}

id objc_msgSend_logNeedsAWDLAdvertisementClient_actionType_bluetoothType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logNeedsAWDLAdvertisementClient:actionType:bluetoothType:");
}

id objc_msgSend_logReceivedMessageType_identifier_options_appID_ctx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logReceivedMessageType:identifier:options:appID:ctx:");
}

id objc_msgSend_loginID(void *a1, const char *a2, ...)
{
  return _[a1 loginID];
}

id objc_msgSend_longDescription(void *a1, const char *a2, ...)
{
  return _[a1 longDescription];
}

id objc_msgSend_manateeAvailable(void *a1, const char *a2, ...)
{
  return _[a1 manateeAvailable];
}

id objc_msgSend_mappingID(void *a1, const char *a2, ...)
{
  return _[a1 mappingID];
}

id objc_msgSend_markConnectionAsTriggered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markConnectionAsTriggered:");
}

id objc_msgSend_meDeviceFMFDeviceID(void *a1, const char *a2, ...)
{
  return _[a1 meDeviceFMFDeviceID];
}

id objc_msgSend_meDeviceIDSDeviceID(void *a1, const char *a2, ...)
{
  return _[a1 meDeviceIDSDeviceID];
}

id objc_msgSend_meDeviceIsMe(void *a1, const char *a2, ...)
{
  return _[a1 meDeviceIsMe];
}

id objc_msgSend_meDeviceName(void *a1, const char *a2, ...)
{
  return _[a1 meDeviceName];
}

id objc_msgSend_meDeviceValid(void *a1, const char *a2, ...)
{
  return _[a1 meDeviceValid];
}

id objc_msgSend_mediaProfile(void *a1, const char *a2, ...)
{
  return _[a1 mediaProfile];
}

id objc_msgSend_mediaRemoteID(void *a1, const char *a2, ...)
{
  return _[a1 mediaRemoteID];
}

id objc_msgSend_mediaRemoteIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 mediaRemoteIdentifier];
}

id objc_msgSend_mediaRemoteServiceProxy(void *a1, const char *a2, ...)
{
  return _[a1 mediaRemoteServiceProxy];
}

id objc_msgSend_mediaRouteID(void *a1, const char *a2, ...)
{
  return _[a1 mediaRouteID];
}

id objc_msgSend_mediaRouteId(void *a1, const char *a2, ...)
{
  return _[a1 mediaRouteId];
}

id objc_msgSend_mediaRouteIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 mediaRouteIdentifier];
}

id objc_msgSend_mediaSystemIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 mediaSystemIdentifier];
}

id objc_msgSend_mediaSystemIdentifierEffective(void *a1, const char *a2, ...)
{
  return _[a1 mediaSystemIdentifierEffective];
}

id objc_msgSend_mediaSystemName(void *a1, const char *a2, ...)
{
  return _[a1 mediaSystemName];
}

id objc_msgSend_mediaSystemRole(void *a1, const char *a2, ...)
{
  return _[a1 mediaSystemRole];
}

id objc_msgSend_mediaSystemRoleEffective(void *a1, const char *a2, ...)
{
  return _[a1 mediaSystemRoleEffective];
}

id objc_msgSend_mediaSystemState(void *a1, const char *a2, ...)
{
  return _[a1 mediaSystemState];
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return _[a1 message];
}

id objc_msgSend_messageSize(void *a1, const char *a2, ...)
{
  return _[a1 messageSize];
}

id objc_msgSend_messageType(void *a1, const char *a2, ...)
{
  return _[a1 messageType];
}

id objc_msgSend_messageWithMetadata_applicationLabel_payload_version_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageWithMetadata:applicationLabel:payload:version:");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_metricsUsingToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricsUsingToken:");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _[a1 model];
}

id objc_msgSend_modelIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 modelIdentifier];
}

id objc_msgSend_monitorWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitorWithConfiguration:");
}

id objc_msgSend_msgCtx(void *a1, const char *a2, ...)
{
  return _[a1 msgCtx];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nearFieldController(void *a1, const char *a2, ...)
{
  return _[a1 nearFieldController];
}

id objc_msgSend_nearbyActionV2Type(void *a1, const char *a2, ...)
{
  return _[a1 nearbyActionV2Type];
}

id objc_msgSend_nearbyInfoV2TempAuthTagData(void *a1, const char *a2, ...)
{
  return _[a1 nearbyInfoV2TempAuthTagData];
}

id objc_msgSend_nearbyInvitationChangedDevice_changes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInvitationChangedDevice:changes:");
}

id objc_msgSend_nearbyInvitationConnection(void *a1, const char *a2, ...)
{
  return _[a1 nearbyInvitationConnection];
}

id objc_msgSend_nearbyInvitationFoundDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInvitationFoundDevice:");
}

id objc_msgSend_nearbyInvitationLostDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInvitationLostDevice:");
}

id objc_msgSend_nearbyInvitationReceivedEventID_event_options_sessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInvitationReceivedEventID:event:options:sessionID:");
}

id objc_msgSend_nearbyInvitationReceivedRequestID_request_options_responseHandler_sessionID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInvitationReceivedRequestID:request:options:responseHandler:sessionID:");
}

id objc_msgSend_nearbyInvitationSession(void *a1, const char *a2, ...)
{
  return _[a1 nearbyInvitationSession];
}

id objc_msgSend_nearbyInvitationSessionEndedWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInvitationSessionEndedWithID:");
}

id objc_msgSend_nearbyInvitationSessionError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInvitationSessionError:");
}

id objc_msgSend_nearbyInvitationSessionError_withID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInvitationSessionError:withID:");
}

id objc_msgSend_nearbyInvitationStartServerSessionID_device_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInvitationStartServerSessionID:device:completion:");
}

id objc_msgSend_needsAWDL(void *a1, const char *a2, ...)
{
  return _[a1 needsAWDL];
}

id objc_msgSend_needsCLink(void *a1, const char *a2, ...)
{
  return _[a1 needsCLink];
}

id objc_msgSend_needsNearbyActionV2(void *a1, const char *a2, ...)
{
  return _[a1 needsNearbyActionV2];
}

id objc_msgSend_netAgentUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "netAgentUUID:");
}

id objc_msgSend_netCnx(void *a1, const char *a2, ...)
{
  return _[a1 netCnx];
}

id objc_msgSend_netConnectionStartWithDevice_session_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "netConnectionStartWithDevice:session:error:");
}

id objc_msgSend_netFlags(void *a1, const char *a2, ...)
{
  return _[a1 netFlags];
}

id objc_msgSend_networkAgentID(void *a1, const char *a2, ...)
{
  return _[a1 networkAgentID];
}

id objc_msgSend_nonWakingRequest(void *a1, const char *a2, ...)
{
  return _[a1 nonWakingRequest];
}

id objc_msgSend_notifyBluetoothSample_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyBluetoothSample:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_nsuuid(void *a1, const char *a2, ...)
{
  return _[a1 nsuuid];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_nwActivity(void *a1, const char *a2, ...)
{
  return _[a1 nwActivity];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_openApplication_withOptions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplication:withOptions:completion:");
}

id objc_msgSend_openURL_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:withOptions:error:");
}

id objc_msgSend_operatingSystemVersion(void *a1, const char *a2, ...)
{
  return _[a1 operatingSystemVersion];
}

id objc_msgSend_operatingSystemVersionForSelf(void *a1, const char *a2, ...)
{
  return _[a1 operatingSystemVersionForSelf];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_optionsWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optionsWithDictionary:");
}

id objc_msgSend_outgoingBuffer(void *a1, const char *a2, ...)
{
  return _[a1 outgoingBuffer];
}

id objc_msgSend_overrideScreenOff(void *a1, const char *a2, ...)
{
  return _[a1 overrideScreenOff];
}

id objc_msgSend_overrideScreenOffRescanInterval(void *a1, const char *a2, ...)
{
  return _[a1 overrideScreenOffRescanInterval];
}

id objc_msgSend_pairSetupACL(void *a1, const char *a2, ...)
{
  return _[a1 pairSetupACL];
}

id objc_msgSend_pairVerifyAuthType(void *a1, const char *a2, ...)
{
  return _[a1 pairVerifyAuthType];
}

id objc_msgSend_pairedDevices(void *a1, const char *a2, ...)
{
  return _[a1 pairedDevices];
}

id objc_msgSend_pairedRemote(void *a1, const char *a2, ...)
{
  return _[a1 pairedRemote];
}

id objc_msgSend_pairingInfo(void *a1, const char *a2, ...)
{
  return _[a1 pairingInfo];
}

id objc_msgSend_password(void *a1, const char *a2, ...)
{
  return _[a1 password];
}

id objc_msgSend_passwordType(void *a1, const char *a2, ...)
{
  return _[a1 passwordType];
}

id objc_msgSend_passwordTypeActual(void *a1, const char *a2, ...)
{
  return _[a1 passwordTypeActual];
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return _[a1 payload];
}

id objc_msgSend_payloadWithData_version_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadWithData:version:");
}

id objc_msgSend_peer(void *a1, const char *a2, ...)
{
  return _[a1 peer];
}

id objc_msgSend_peerDeviceInfo(void *a1, const char *a2, ...)
{
  return _[a1 peerDeviceInfo];
}

id objc_msgSend_peerDeviceModel(void *a1, const char *a2, ...)
{
  return _[a1 peerDeviceModel];
}

id objc_msgSend_peerDevices(void *a1, const char *a2, ...)
{
  return _[a1 peerDevices];
}

id objc_msgSend_peerHostState(void *a1, const char *a2, ...)
{
  return _[a1 peerHostState];
}

id objc_msgSend_peerID(void *a1, const char *a2, ...)
{
  return _[a1 peerID];
}

id objc_msgSend_peerIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 peerIdentifier];
}

id objc_msgSend_peerOSVersion(void *a1, const char *a2, ...)
{
  return _[a1 peerOSVersion];
}

id objc_msgSend_performLog(void *a1, const char *a2, ...)
{
  return _[a1 performLog];
}

id objc_msgSend_personalDeviceState(void *a1, const char *a2, ...)
{
  return _[a1 personalDeviceState];
}

id objc_msgSend_personalRequestsState(void *a1, const char *a2, ...)
{
  return _[a1 personalRequestsState];
}

id objc_msgSend_personalRequestsStateForAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalRequestsStateForAccessory:");
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _[a1 pid];
}

id objc_msgSend_pkData(void *a1, const char *a2, ...)
{
  return _[a1 pkData];
}

id objc_msgSend_pollingCoolDownTimer(void *a1, const char *a2, ...)
{
  return _[a1 pollingCoolDownTimer];
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return _[a1 port];
}

id objc_msgSend_postDaemonInfoChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postDaemonInfoChanges:");
}

id objc_msgSend_powerUnlimited(void *a1, const char *a2, ...)
{
  return _[a1 powerUnlimited];
}

id objc_msgSend_predicateMatchingIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateMatchingIdentifiers:");
}

id objc_msgSend_preferredPollingType(void *a1, const char *a2, ...)
{
  return _[a1 preferredPollingType];
}

id objc_msgSend_prefsChanged(void *a1, const char *a2, ...)
{
  return _[a1 prefsChanged];
}

id objc_msgSend_present(void *a1, const char *a2, ...)
{
  return _[a1 present];
}

id objc_msgSend_previousState(void *a1, const char *a2, ...)
{
  return _[a1 previousState];
}

id objc_msgSend_primaryAppleID(void *a1, const char *a2, ...)
{
  return _[a1 primaryAppleID];
}

id objc_msgSend_primaryAppleIDIsHSA2(void *a1, const char *a2, ...)
{
  return _[a1 primaryAppleIDIsHSA2];
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _[a1 priority];
}

id objc_msgSend_privateKey(void *a1, const char *a2, ...)
{
  return _[a1 privateKey];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_processSendsUsingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processSendsUsingConnection:");
}

id objc_msgSend_productVersion(void *a1, const char *a2, ...)
{
  return _[a1 productVersion];
}

id objc_msgSend_prompt(void *a1, const char *a2, ...)
{
  return _[a1 prompt];
}

id objc_msgSend_provider(void *a1, const char *a2, ...)
{
  return _[a1 provider];
}

id objc_msgSend_proxyDevices(void *a1, const char *a2, ...)
{
  return _[a1 proxyDevices];
}

id objc_msgSend_publicIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 publicIdentifier];
}

id objc_msgSend_publicKey(void *a1, const char *a2, ...)
{
  return _[a1 publicKey];
}

id objc_msgSend_queryDeviceToApplicationServiceMapping_device_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryDeviceToApplicationServiceMapping:device:completion:");
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:");
}

id objc_msgSend_rapportIRK(void *a1, const char *a2, ...)
{
  return _[a1 rapportIRK];
}

id objc_msgSend_rapportIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 rapportIdentifier];
}

id objc_msgSend_rbsPID(void *a1, const char *a2, ...)
{
  return _[a1 rbsPID];
}

id objc_msgSend_reactivateCalled(void *a1, const char *a2, ...)
{
  return _[a1 reactivateCalled];
}

id objc_msgSend_receiveDataForConnection_statusHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveDataForConnection:statusHandler:");
}

id objc_msgSend_receiveWithRequestID_receiveHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveWithRequestID:receiveHandler:");
}

id objc_msgSend_receivedEventID_event_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedEventID:event:options:");
}

id objc_msgSend_receivedFamilyIdentityRequest_msgCtx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedFamilyIdentityRequest:msgCtx:");
}

id objc_msgSend_receivedFamilyIdentityResponse_msgCtx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedFamilyIdentityResponse:msgCtx:");
}

id objc_msgSend_receivedFamilyIdentityUpdate_msgCtx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedFamilyIdentityUpdate:msgCtx:");
}

id objc_msgSend_receivedFriendIdentityRequest_msgCtx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedFriendIdentityRequest:msgCtx:");
}

id objc_msgSend_receivedFriendIdentityResponse_msgCtx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedFriendIdentityResponse:msgCtx:");
}

id objc_msgSend_receivedFriendIdentityUpdate_msgCtx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedFriendIdentityUpdate:msgCtx:");
}

id objc_msgSend_receivedMessages(void *a1, const char *a2, ...)
{
  return _[a1 receivedMessages];
}

id objc_msgSend_receivedRequestID_request_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedRequestID:request:options:responseHandler:");
}

id objc_msgSend_receivedSiriAudioEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedSiriAudioEvent:");
}

id objc_msgSend_reconfirm(void *a1, const char *a2, ...)
{
  return _[a1 reconfirm];
}

id objc_msgSend_refreshIDInfo(void *a1, const char *a2, ...)
{
  return _[a1 refreshIDInfo];
}

id objc_msgSend_regenerateSelfIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regenerateSelfIdentity:");
}

id objc_msgSend_regenerateTemporarySelfIdentity(void *a1, const char *a2, ...)
{
  return _[a1 regenerateTemporarySelfIdentity];
}

id objc_msgSend_registerEventID_options_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerEventID:options:handler:");
}

id objc_msgSend_registerRequestID_options_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerRequestID:options:handler:");
}

id objc_msgSend_registeredEventID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registeredEventID:");
}

id objc_msgSend_registeredEvents(void *a1, const char *a2, ...)
{
  return _[a1 registeredEvents];
}

id objc_msgSend_registeredRequests(void *a1, const char *a2, ...)
{
  return _[a1 registeredRequests];
}

id objc_msgSend_remoteAuthenticationMessage(void *a1, const char *a2, ...)
{
  return _[a1 remoteAuthenticationMessage];
}

id objc_msgSend_remoteDisplayAuthCompleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayAuthCompleted:");
}

id objc_msgSend_remoteDisplayChangedDevice_changes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayChangedDevice:changes:");
}

id objc_msgSend_remoteDisplayDedicatedDeviceChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayDedicatedDeviceChanged:");
}

id objc_msgSend_remoteDisplayDeviceSelected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayDeviceSelected:");
}

id objc_msgSend_remoteDisplayFoundDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayFoundDevice:");
}

id objc_msgSend_remoteDisplayHidePasswordWithFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayHidePasswordWithFlags:");
}

id objc_msgSend_remoteDisplayLostDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayLostDevice:");
}

id objc_msgSend_remoteDisplayNotifyDiscoverySessionState_forDevice_startReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayNotifyDiscoverySessionState:forDevice:startReason:");
}

id objc_msgSend_remoteDisplayPersonDeclined(void *a1, const char *a2, ...)
{
  return _[a1 remoteDisplayPersonDeclined];
}

id objc_msgSend_remoteDisplayPromptForPasswordWithFlags_throttleSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayPromptForPasswordWithFlags:throttleSeconds:");
}

id objc_msgSend_remoteDisplayReceivedEventID_event_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayReceivedEventID:event:options:");
}

id objc_msgSend_remoteDisplayReceivedEventID_event_options_sessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayReceivedEventID:event:options:sessionID:");
}

id objc_msgSend_remoteDisplayReceivedRequestID_request_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayReceivedRequestID:request:options:responseHandler:");
}

id objc_msgSend_remoteDisplayReceivedRequestID_request_options_responseHandler_sessionID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayReceivedRequestID:request:options:responseHandler:sessionID:");
}

id objc_msgSend_remoteDisplaySessionEndedWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplaySessionEndedWithID:");
}

id objc_msgSend_remoteDisplaySessionError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplaySessionError:");
}

id objc_msgSend_remoteDisplayShowPassword_flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayShowPassword:flags:");
}

id objc_msgSend_remoteDisplayStartServerSessionID_device_linkType_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayStartServerSessionID:device:linkType:completion:");
}

id objc_msgSend_remoteDisplayUpdateDataLinkType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayUpdateDataLinkType:");
}

id objc_msgSend_remoteDisplayUpdateErrorFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDisplayUpdateErrorFlags:");
}

id objc_msgSend_remoteIdentity(void *a1, const char *a2, ...)
{
  return _[a1 remoteIdentity];
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return _[a1 remoteObjectProxy];
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_remoteValidationMessage(void *a1, const char *a2, ...)
{
  return _[a1 remoteValidationMessage];
}

id objc_msgSend_removeAgentClient_isFlowHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAgentClient:isFlowHandler:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeBonjourDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeBonjourDevice:");
}

id objc_msgSend_removeCBDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCBDevice:");
}

id objc_msgSend_removeConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeConnection:");
}

id objc_msgSend_removeDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDelegate:");
}

id objc_msgSend_removeDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDevice:");
}

id objc_msgSend_removeDiscoverySession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDiscoverySession:");
}

id objc_msgSend_removeDiscoverySession_lastEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDiscoverySession:lastEntry:");
}

id objc_msgSend_removeDiscoverySessionFromAllEndpoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDiscoverySessionFromAllEndpoints:");
}

id objc_msgSend_removeEndpointMapping_discoverySessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeEndpointMapping:discoverySessionID:");
}

id objc_msgSend_removeEndpointMapping_discoverySessionID_immediate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeEndpointMapping:discoverySessionID:immediate:");
}

id objc_msgSend_removeIdentity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeIdentity:error:");
}

id objc_msgSend_removeItemMatchingItem_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemMatchingItem:error:");
}

id objc_msgSend_removeListenerForApplicationService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeListenerForApplicationService:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_forKeyPath_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forKeyPath:context:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeRPDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRPDevice:");
}

id objc_msgSend_removeSFDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSFDevice:");
}

id objc_msgSend_removeSessionPairedIdentityWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSessionPairedIdentityWithIdentifier:");
}

id objc_msgSend_removeTriggeredConnection(void *a1, const char *a2, ...)
{
  return _[a1 removeTriggeredConnection];
}

id objc_msgSend_removeXPCMatchingToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeXPCMatchingToken:");
}

id objc_msgSend_replyTime(void *a1, const char *a2, ...)
{
  return _[a1 replyTime];
}

id objc_msgSend_reportChangedDevice_changes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportChangedDevice:changes:");
}

id objc_msgSend_reportFoundDevice_outReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportFoundDevice:outReason:");
}

id objc_msgSend_reportLostDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportLostDevice:");
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _[a1 request];
}

id objc_msgSend_requestID(void *a1, const char *a2, ...)
{
  return _[a1 requestID];
}

id objc_msgSend_requestSize(void *a1, const char *a2, ...)
{
  return _[a1 requestSize];
}

id objc_msgSend_requiredAgentDomain_agentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiredAgentDomain:agentType:");
}

id objc_msgSend_resetHomeKitUserIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 resetHomeKitUserIdentifiers];
}

id objc_msgSend_resolvableAccessories(void *a1, const char *a2, ...)
{
  return _[a1 resolvableAccessories];
}

id objc_msgSend_resolvableAccessoriesUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolvableAccessoriesUpdated:");
}

id objc_msgSend_resolveIdentitiesForBonjourDevice_typeFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveIdentitiesForBonjourDevice:typeFlags:");
}

id objc_msgSend_resolveIdentityForBonjourDevice_typeFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveIdentityForBonjourDevice:typeFlags:");
}

id objc_msgSend_resolveIdentityForTempAuthTagData_bluetoothAddressData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveIdentityForTempAuthTagData:bluetoothAddressData:");
}

id objc_msgSend_resolvePeer_controlFlags_applicationService_clientPublicKey_resolveHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolvePeer:controlFlags:applicationService:clientPublicKey:resolveHandler:");
}

id objc_msgSend_responseCodeToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseCodeToString:");
}

id objc_msgSend_responseHandler(void *a1, const char *a2, ...)
{
  return _[a1 responseHandler];
}

id objc_msgSend_responseSize(void *a1, const char *a2, ...)
{
  return _[a1 responseSize];
}

id objc_msgSend_restorePersonaWithSavedPersonaContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restorePersonaWithSavedPersonaContext:");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_role(void *a1, const char *a2, ...)
{
  return _[a1 role];
}

id objc_msgSend_room(void *a1, const char *a2, ...)
{
  return _[a1 room];
}

id objc_msgSend_roomName(void *a1, const char *a2, ...)
{
  return _[a1 roomName];
}

id objc_msgSend_rotatingIdentifierData(void *a1, const char *a2, ...)
{
  return _[a1 rotatingIdentifierData];
}

id objc_msgSend_rpHomeKitManager(void *a1, const char *a2, ...)
{
  return _[a1 rpHomeKitManager];
}

id objc_msgSend_rpcFetchAndProcessChanges_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rpcFetchAndProcessChanges:reply:");
}

id objc_msgSend_rssi(void *a1, const char *a2, ...)
{
  return _[a1 rssi];
}

id objc_msgSend_rssiThreshold(void *a1, const char *a2, ...)
{
  return _[a1 rssiThreshold];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_runWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runWithConfiguration:");
}

id objc_msgSend_saveDedicatedDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveDedicatedDevice:");
}

id objc_msgSend_saveIdentity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveIdentity:error:");
}

id objc_msgSend_saveIdentityWithIDSDeviceID_message_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveIdentityWithIDSDeviceID:message:error:");
}

id objc_msgSend_screenLocked(void *a1, const char *a2, ...)
{
  return _[a1 screenLocked];
}

id objc_msgSend_screenOn(void *a1, const char *a2, ...)
{
  return _[a1 screenOn];
}

id objc_msgSend_secretKey(void *a1, const char *a2, ...)
{
  return _[a1 secretKey];
}

id objc_msgSend_secureTextEntry(void *a1, const char *a2, ...)
{
  return _[a1 secureTextEntry];
}

id objc_msgSend_seenBySession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seenBySession:");
}

id objc_msgSend_selectedUserProfile(void *a1, const char *a2, ...)
{
  return _[a1 selectedUserProfile];
}

id objc_msgSend_selfAccessory(void *a1, const char *a2, ...)
{
  return _[a1 selfAccessory];
}

id objc_msgSend_selfAccessoryMediaAccessFlags(void *a1, const char *a2, ...)
{
  return _[a1 selfAccessoryMediaAccessFlags];
}

id objc_msgSend_selfAccessoryMediaAccessPassword(void *a1, const char *a2, ...)
{
  return _[a1 selfAccessoryMediaAccessPassword];
}

id objc_msgSend_selfAccessoryMediaSystem(void *a1, const char *a2, ...)
{
  return _[a1 selfAccessoryMediaSystem];
}

id objc_msgSend_selfAccessoryMediaSystemRole(void *a1, const char *a2, ...)
{
  return _[a1 selfAccessoryMediaSystemRole];
}

id objc_msgSend_selfAccessorySiriEnabled(void *a1, const char *a2, ...)
{
  return _[a1 selfAccessorySiriEnabled];
}

id objc_msgSend_sendData_fromAccount_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendData:fromAccount:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendData_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendData:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendDataForConnection_applicationService_connectionID_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendDataForConnection:applicationService:connectionID:responseHandler:");
}

id objc_msgSend_sendEncryptedEventID_data_xid_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEncryptedEventID:data:xid:options:completion:");
}

id objc_msgSend_sendEncryptedEventID_event_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEncryptedEventID:event:options:completion:");
}

id objc_msgSend_sendEncryptedRequestID_request_xpcID_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEncryptedRequestID:request:xpcID:options:responseHandler:");
}

id objc_msgSend_sendEventID_event_destinationID_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEventID:event:destinationID:options:completion:");
}

id objc_msgSend_sendEventID_event_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEventID:event:options:completion:");
}

id objc_msgSend_sendIDSMessage_cloudServiceID_frameType_destinationDevice_sendFlags_msgCtx_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendIDSMessage:cloudServiceID:frameType:destinationDevice:sendFlags:msgCtx:error:");
}

id objc_msgSend_sendIDSMessage_cloudServiceID_frameType_destinationID_sendFlags_msgCtx_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendIDSMessage:cloudServiceID:frameType:destinationID:sendFlags:msgCtx:error:");
}

id objc_msgSend_sendReachabilityProbe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendReachabilityProbe:");
}

id objc_msgSend_sendRequestID_request_destinationID_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestID:request:destinationID:options:responseHandler:");
}

id objc_msgSend_sendRequestID_request_destinationID_xpcID_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestID:request:destinationID:xpcID:options:responseHandler:");
}

id objc_msgSend_sendRequestID_request_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestID:request:options:responseHandler:");
}

id objc_msgSend_sendSampleForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSampleForDevice:");
}

id objc_msgSend_sendStatusUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendStatusUpdate:");
}

id objc_msgSend_sendStatusUpdateForConnection_connectionID_status_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendStatusUpdateForConnection:connectionID:status:responseHandler:");
}

id objc_msgSend_sendTicks(void *a1, const char *a2, ...)
{
  return _[a1 sendTicks];
}

id objc_msgSend_sendWithRequestID_data_status_applicationService_clientPublicKey_listenerID_automapListener_connectionID_responseHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendWithRequestID:data:status:applicationService:clientPublicKey:listenerID:automapListener:connectionID:responseHandler:");
}

id objc_msgSend_sendWithRequestID_data_status_applicationService_listenerID_connectionID_responseHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendWithRequestID:data:status:applicationService:listenerID:connectionID:responseHandler:");
}

id objc_msgSend_senderCorrelationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 senderCorrelationIdentifier];
}

id objc_msgSend_sendersKnownAlias(void *a1, const char *a2, ...)
{
  return _[a1 sendersKnownAlias];
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return _[a1 server];
}

id objc_msgSend_serverNetCnxs(void *a1, const char *a2, ...)
{
  return _[a1 serverNetCnxs];
}

id objc_msgSend_serversChangedState(void *a1, const char *a2, ...)
{
  return _[a1 serversChangedState];
}

id objc_msgSend_serviceType(void *a1, const char *a2, ...)
{
  return _[a1 serviceType];
}

id objc_msgSend_serviceTypes(void *a1, const char *a2, ...)
{
  return _[a1 serviceTypes];
}

id objc_msgSend_serviceWithDefaultShellEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 serviceWithDefaultShellEndpoint];
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _[a1 session];
}

id objc_msgSend_sessionActivatedWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionActivatedWithError:");
}

id objc_msgSend_sessionEndedWithID_netCnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionEndedWithID:netCnx:");
}

id objc_msgSend_sessionID(void *a1, const char *a2, ...)
{
  return _[a1 sessionID];
}

id objc_msgSend_sessionPairingIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sessionPairingIdentifier];
}

id objc_msgSend_sessionStartSend_session_xpcID_destinationID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionStartSend:session:xpcID:destinationID:completion:");
}

id objc_msgSend_sessionStartWithID_netCnx_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionStartWithID:netCnx:completion:");
}

id objc_msgSend_sessionStopSend_session_xpcID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionStopSend:session:xpcID:completion:");
}

id objc_msgSend_sessionStopped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionStopped:");
}

id objc_msgSend_sessions(void *a1, const char *a2, ...)
{
  return _[a1 sessions];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAccessGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessGroup:");
}

id objc_msgSend_setAccessibleType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibleType:");
}

id objc_msgSend_setAccountAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountAltDSID:");
}

id objc_msgSend_setAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountID:");
}

id objc_msgSend_setActionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionHandler:");
}

id objc_msgSend_setActiveServers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveServers:");
}

id objc_msgSend_setActiveUserAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveUserAltDSID:");
}

id objc_msgSend_setActivityLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityLevel:");
}

id objc_msgSend_setAdvertiseFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdvertiseFlags:");
}

id objc_msgSend_setAdvertiseRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdvertiseRate:");
}

id objc_msgSend_setAgeOutListenerTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAgeOutListenerTimer:");
}

id objc_msgSend_setAgeOutTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAgeOutTimeout:");
}

id objc_msgSend_setAgentClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAgentClient:");
}

id objc_msgSend_setAgentClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAgentClientID:");
}

id objc_msgSend_setAgentUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAgentUUID:");
}

id objc_msgSend_setAllUsedSendersKnownAliases_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllUsedSendersKnownAliases:");
}

id objc_msgSend_setAllowedDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowedDevices:");
}

id objc_msgSend_setAllowedMACAddresses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowedMACAddresses:");
}

id objc_msgSend_setAltIRK_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltIRK:");
}

id objc_msgSend_setAngelAssertionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAngelAssertionName:");
}

id objc_msgSend_setAngelJobLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAngelJobLabel:");
}

id objc_msgSend_setAppID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppID:");
}

id objc_msgSend_setAppSignIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppSignIn:");
}

id objc_msgSend_setAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppleID:");
}

id objc_msgSend_setApplicationService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationService:");
}

id objc_msgSend_setAuthCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthCompletionHandler:");
}

id objc_msgSend_setAutoMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoMapping:");
}

id objc_msgSend_setAutomapped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutomapped:");
}

id objc_msgSend_setBecomeInitiatorTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBecomeInitiatorTimer:");
}

id objc_msgSend_setBleClientUseCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleClientUseCase:");
}

id objc_msgSend_setBleConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleConnection:");
}

id objc_msgSend_setBleConnectionPSM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleConnectionPSM:");
}

id objc_msgSend_setBleDeviceAcceptedInvitations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleDeviceAcceptedInvitations:");
}

id objc_msgSend_setBleDeviceWantingInvitations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleDeviceWantingInvitations:");
}

id objc_msgSend_setBlePeerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlePeerIdentifier:");
}

id objc_msgSend_setBleRSSIThresholdHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleRSSIThresholdHint:");
}

id objc_msgSend_setBleScanRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleScanRate:");
}

id objc_msgSend_setBleScanRateScreenOff_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleScanRateScreenOff:");
}

id objc_msgSend_setBleScreenOffRescanInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleScreenOffRescanInterval:");
}

id objc_msgSend_setBleScreenOffScanRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleScreenOffScanRate:");
}

id objc_msgSend_setBluetoothAddressChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBluetoothAddressChangedHandler:");
}

id objc_msgSend_setBonjourDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBonjourDevice:");
}

id objc_msgSend_setBonjourPeerDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBonjourPeerDevice:");
}

id objc_msgSend_setBrowseClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrowseClient:");
}

id objc_msgSend_setBrowseFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrowseFlags:");
}

id objc_msgSend_setBrowseResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrowseResponse:");
}

id objc_msgSend_setBrowseSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrowseSession:");
}

id objc_msgSend_setBtAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBtAddress:");
}

id objc_msgSend_setBtIRKData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBtIRKData:");
}

id objc_msgSend_setBtPipe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBtPipe:");
}

id objc_msgSend_setBtPipeHighPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBtPipeHighPriority:");
}

id objc_msgSend_setCameraCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCameraCapabilities:");
}

id objc_msgSend_setCameraCapabilitiesRefetchTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCameraCapabilitiesRefetchTimer:");
}

id objc_msgSend_setCameraCapabilityRequestIsActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCameraCapabilityRequestIsActive:");
}

id objc_msgSend_setChangeFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangeFlags:");
}

id objc_msgSend_setChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChanged:");
}

id objc_msgSend_setClass_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClass:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClient:");
}

id objc_msgSend_setClientBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientBundleID:");
}

id objc_msgSend_setCloudDaemon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudDaemon:");
}

id objc_msgSend_setCloudServiceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudServiceID:");
}

id objc_msgSend_setCnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCnx:");
}

id objc_msgSend_setCnxHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCnxHandler:");
}

id objc_msgSend_setConfigurePairingHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigurePairingHandler:");
}

id objc_msgSend_setConnectToReceiverTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectToReceiverTimer:");
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnection:");
}

id objc_msgSend_setConnectionEndedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionEndedHandler:");
}

id objc_msgSend_setConnectionPrepareHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionPrepareHandler:");
}

id objc_msgSend_setConnectionStartedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionStartedHandler:");
}

id objc_msgSend_setConnectionUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionUUID:");
}

id objc_msgSend_setContactID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContactID:");
}

id objc_msgSend_setContactIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContactIDs:");
}

id objc_msgSend_setContactIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContactIdentifier:");
}

id objc_msgSend_setControlFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControlFlags:");
}

id objc_msgSend_setCopyIdentityHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCopyIdentityHandler:");
}

id objc_msgSend_setCurrentContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentContext:");
}

id objc_msgSend_setCurrentHome_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentHome:");
}

id objc_msgSend_setCurrentPreferredPollingType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentPreferredPollingType:");
}

id objc_msgSend_setCurrentTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentTransaction:");
}

id objc_msgSend_setCurrentUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentUser:");
}

id objc_msgSend_setDaemon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDaemon:");
}

id objc_msgSend_setDaemonDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDaemonDevice:");
}

id objc_msgSend_setDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataSource:");
}

id objc_msgSend_setDateAcknowledged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateAcknowledged:");
}

id objc_msgSend_setDateAdded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateAdded:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDateRemoved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateRemoved:");
}

id objc_msgSend_setDateRequested_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateRequested:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegateQueue:");
}

id objc_msgSend_setDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestination:");
}

id objc_msgSend_setDestinationDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationDevice:");
}

id objc_msgSend_setDestinationString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationString:");
}

id objc_msgSend_setDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDevice:");
}

id objc_msgSend_setDeviceActionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceActionType:");
}

id objc_msgSend_setDeviceCapabilityFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceCapabilityFlags:");
}

id objc_msgSend_setDeviceChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceChangedHandler:");
}

id objc_msgSend_setDeviceColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceColor:");
}

id objc_msgSend_setDeviceConfirmedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceConfirmedIdentifier:");
}

id objc_msgSend_setDeviceFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceFilter:");
}

id objc_msgSend_setDeviceFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceFlags:");
}

id objc_msgSend_setDeviceFoundHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceFoundHandler:");
}

id objc_msgSend_setDeviceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceID:");
}

id objc_msgSend_setDeviceIRKData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceIRKData:");
}

id objc_msgSend_setDeviceInfoChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceInfoChangedHandler:");
}

id objc_msgSend_setDeviceLostHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceLostHandler:");
}

id objc_msgSend_setDeviceModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceModel:");
}

id objc_msgSend_setDeviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceName:");
}

id objc_msgSend_setDeviceRegionChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceRegionChangedHandler:");
}

id objc_msgSend_setDirect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirect:");
}

id objc_msgSend_setDisconnectHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisconnectHandler:");
}

id objc_msgSend_setDiscoveryFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscoveryFlags:");
}

id objc_msgSend_setDiscoveryTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscoveryTimer:");
}

id objc_msgSend_setDiscoveryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscoveryType:");
}

id objc_msgSend_setDispatchQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDispatchQueue:");
}

id objc_msgSend_setDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomain:");
}

id objc_msgSend_setEdPKData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEdPKData:");
}

id objc_msgSend_setEdSKData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEdSKData:");
}

id objc_msgSend_setEmailAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEmailAddress:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEncodeSensitiveProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncodeSensitiveProperties:");
}

id objc_msgSend_setEndpointUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndpointUUID:");
}

id objc_msgSend_setEntitled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntitled:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setError:");
}

id objc_msgSend_setErrorFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorFlags:");
}

id objc_msgSend_setErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorHandler:");
}

id objc_msgSend_setEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEvent:");
}

id objc_msgSend_setEventID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventID:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setFailedToConnect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailedToConnect:");
}

id objc_msgSend_setFamilyUpdatedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFamilyUpdatedHandler:");
}

id objc_msgSend_setFeatureFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeatureFlags:");
}

id objc_msgSend_setFirstUnlockHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstUnlockHandler:");
}

id objc_msgSend_setFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlags:");
}

id objc_msgSend_setFlowAssignHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlowAssignHandler:");
}

id objc_msgSend_setFlowClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlowClient:");
}

id objc_msgSend_setFrameType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrameType:");
}

id objc_msgSend_setFramer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFramer:");
}

id objc_msgSend_setFromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFromID:");
}

id objc_msgSend_setHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandler:");
}

id objc_msgSend_setHidePasswordHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidePasswordHandler:");
}

id objc_msgSend_setHomeKitIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeKitIdentifier:");
}

id objc_msgSend_setHomeKitIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeKitIdentity:");
}

id objc_msgSend_setHomeKitManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeKitManager:");
}

id objc_msgSend_setHomeKitUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeKitUserIdentifier:");
}

id objc_msgSend_setHomeKitUserIdentifierHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeKitUserIdentifierHandler:");
}

id objc_msgSend_setHomeKitUserIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeKitUserIdentifiers:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIdentifierOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifierOverride:");
}

id objc_msgSend_setIdentityDaemon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentityDaemon:");
}

id objc_msgSend_setIdentityResolved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentityResolved:");
}

id objc_msgSend_setIdsCorrelationIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdsCorrelationIdentifier:");
}

id objc_msgSend_setIdsDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdsDevice:");
}

id objc_msgSend_setIdsDeviceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdsDeviceID:");
}

id objc_msgSend_setIdsDeviceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdsDeviceIdentifier:");
}

id objc_msgSend_setIdsPersonalDeviceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdsPersonalDeviceIdentifier:");
}

id objc_msgSend_setInBubble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInBubble:");
}

id objc_msgSend_setInbound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInbound:");
}

id objc_msgSend_setInitiatorLimitTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitiatorLimitTimer:");
}

id objc_msgSend_setInnerPresencePreset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInnerPresencePreset:");
}

id objc_msgSend_setInnerRegionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInnerRegionName:");
}

id objc_msgSend_setInterfaceAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterfaceAddress:");
}

id objc_msgSend_setInterfaceIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterfaceIndex:");
}

id objc_msgSend_setInterfaceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterfaceName:");
}

id objc_msgSend_setInternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInternal:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandled:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setInvisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvisible:");
}

id objc_msgSend_setIsActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsActive:");
}

id objc_msgSend_setIsBLEDeviceReplaced_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsBLEDeviceReplaced:");
}

id objc_msgSend_setIsConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConnected:");
}

id objc_msgSend_setIsListening_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsListening:");
}

id objc_msgSend_setIsSourcePTTEligible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSourcePTTEligible:");
}

id objc_msgSend_setKeepAliveSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeepAliveSeconds:");
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabel:");
}

id objc_msgSend_setLaunchInstanceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLaunchInstanceID:");
}

id objc_msgSend_setLinkType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLinkType:");
}

id objc_msgSend_setListenPSM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListenPSM:");
}

id objc_msgSend_setListen_framer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListen_framer:");
}

id objc_msgSend_setListeningPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListeningPort:");
}

id objc_msgSend_setLocalDeviceInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalDeviceInfo:");
}

id objc_msgSend_setLocalDeviceUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalDeviceUpdated:");
}

id objc_msgSend_setLocalEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalEndpoint:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setManateeChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManateeChangedHandler:");
}

id objc_msgSend_setMappingID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMappingID:");
}

id objc_msgSend_setMaxConnectionCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConnectionCount:");
}

id objc_msgSend_setMaxDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxDelay:");
}

id objc_msgSend_setMaxPeople_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxPeople:");
}

id objc_msgSend_setMeDeviceChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeDeviceChangedHandler:");
}

id objc_msgSend_setMediaRemoteID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaRemoteID:");
}

id objc_msgSend_setMediaRemoteIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaRemoteIdentifier:");
}

id objc_msgSend_setMediaRouteID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaRouteID:");
}

id objc_msgSend_setMediaRouteIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaRouteIdentifier:");
}

id objc_msgSend_setMediaSystemIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaSystemIdentifier:");
}

id objc_msgSend_setMediaSystemIdentifierEffective_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaSystemIdentifierEffective:");
}

id objc_msgSend_setMediaSystemName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaSystemName:");
}

id objc_msgSend_setMediaSystemRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaSystemRole:");
}

id objc_msgSend_setMediaSystemRoleEffective_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaSystemRoleEffective:");
}

id objc_msgSend_setMediaSystemState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaSystemState:");
}

id objc_msgSend_setMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessage:");
}

id objc_msgSend_setMessageType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageType:");
}

id objc_msgSend_setMessenger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessenger:");
}

id objc_msgSend_setMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetadata:");
}

id objc_msgSend_setMinDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinDelay:");
}

id objc_msgSend_setModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModel:");
}

id objc_msgSend_setMsgCtx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMsgCtx:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNearFieldController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearFieldController:");
}

id objc_msgSend_setNearbyActionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyActionType:");
}

id objc_msgSend_setNearbyActionV2Flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyActionV2Flags:");
}

id objc_msgSend_setNearbyActionV2TargetData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyActionV2TargetData:");
}

id objc_msgSend_setNearbyActionV2Type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyActionV2Type:");
}

id objc_msgSend_setNearbyInvitationConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyInvitationConnection:");
}

id objc_msgSend_setNearbyInvitationServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyInvitationServer:");
}

id objc_msgSend_setNearbyInvitationSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyInvitationSession:");
}

id objc_msgSend_setNeedsAWDL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsAWDL:");
}

id objc_msgSend_setNeedsCLink_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsCLink:");
}

id objc_msgSend_setNeedsKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsKeyboard:");
}

id objc_msgSend_setNeedsNearbyActionV2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsNearbyActionV2:");
}

id objc_msgSend_setNetCnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetCnx:");
}

id objc_msgSend_setNetFlagsChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetFlagsChangedHandler:");
}

id objc_msgSend_setNetLinkManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetLinkManager:");
}

id objc_msgSend_setNonWakingRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNonWakingRequest:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOperatingSystemVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperatingSystemVersion:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOuterRegionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOuterRegionName:");
}

id objc_msgSend_setOutgoingBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutgoingBuffer:");
}

id objc_msgSend_setOverrideScreenOff_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideScreenOff:");
}

id objc_msgSend_setOverrideScreenOffRescanInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideScreenOffRescanInterval:");
}

id objc_msgSend_setPairSetupACL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairSetupACL:");
}

id objc_msgSend_setPairSetupDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairSetupDisabled:");
}

id objc_msgSend_setPairVerifyCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairVerifyCompletion:");
}

id objc_msgSend_setPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassword:");
}

id objc_msgSend_setPasswordType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasswordType:");
}

id objc_msgSend_setPeer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeer:");
}

id objc_msgSend_setPeerHostStateChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerHostStateChangedHandler:");
}

id objc_msgSend_setPeerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerID:");
}

id objc_msgSend_setPeerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerIdentifier:");
}

id objc_msgSend_setPeerUpdatedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerUpdatedHandler:");
}

id objc_msgSend_setPersistentIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentIdentifier:");
}

id objc_msgSend_setPersonal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonal:");
}

id objc_msgSend_setPersonalDeviceState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonalDeviceState:");
}

id objc_msgSend_setPersonalRequestsState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonalRequestsState:");
}

id objc_msgSend_setPersonalRequestsStateChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonalRequestsStateChangedHandler:");
}

id objc_msgSend_setPhoneNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhoneNumber:");
}

id objc_msgSend_setPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPid:");
}

id objc_msgSend_setPollingCoolDownTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPollingCoolDownTimer:");
}

id objc_msgSend_setPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPort:");
}

id objc_msgSend_setPowerUnlimitedChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPowerUnlimitedChangedHandler:");
}

id objc_msgSend_setPredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicates:");
}

id objc_msgSend_setPreferredIdentityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredIdentityType:");
}

id objc_msgSend_setPreferredPollingType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredPollingType:");
}

id objc_msgSend_setPresent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresent:");
}

id objc_msgSend_setPrimaryAppleIDChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryAppleIDChangedHandler:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setPromptForPasswordHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPromptForPasswordHandler:");
}

id objc_msgSend_setProxyDeviceUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProxyDeviceUpdateHandler:");
}

id objc_msgSend_setProxyDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProxyDevices:");
}

id objc_msgSend_setPublicIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicIdentifier:");
}

id objc_msgSend_setPublicKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicKey:");
}

id objc_msgSend_setPurpose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurpose:");
}

id objc_msgSend_setReadErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadErrorHandler:");
}

id objc_msgSend_setReceivedEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceivedEventHandler:");
}

id objc_msgSend_setReceivedRequestHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceivedRequestHandler:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequest:");
}

id objc_msgSend_setRequestID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestID:");
}

id objc_msgSend_setResolvableAccessoriesChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResolvableAccessoriesChangedHandler:");
}

id objc_msgSend_setResponseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseHandler:");
}

id objc_msgSend_setRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRole:");
}

id objc_msgSend_setRoomName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoomName:");
}

id objc_msgSend_setRoomUpdatedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoomUpdatedHandler:");
}

id objc_msgSend_setRotatingIdentifierChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotatingIdentifierChangedHandler:");
}

id objc_msgSend_setRssiChangeDetection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRssiChangeDetection:");
}

id objc_msgSend_setRssiThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRssiThreshold:");
}

id objc_msgSend_setScanRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanRate:");
}

id objc_msgSend_setScreenLockedChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenLockedChangedHandler:");
}

id objc_msgSend_setScreenOnChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenOnChangedHandler:");
}

id objc_msgSend_setSecretKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecretKey:");
}

id objc_msgSend_setSelfAccessoryMediaAccessUpdatedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelfAccessoryMediaAccessUpdatedHandler:");
}

id objc_msgSend_setSelfAccessoryMediaSystemUpdatedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelfAccessoryMediaSystemUpdatedHandler:");
}

id objc_msgSend_setSelfAccessorySiriAccessUpdatedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelfAccessorySiriAccessUpdatedHandler:");
}

id objc_msgSend_setSelfAccessoryUpdatedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelfAccessoryUpdatedHandler:");
}

id objc_msgSend_setSendInterestEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendInterestEventHandler:");
}

id objc_msgSend_setSendTicks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendTicks:");
}

id objc_msgSend_setSendersKnownAlias_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendersKnownAlias:");
}

id objc_msgSend_setServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServer:");
}

id objc_msgSend_setServerNetCnxs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerNetCnxs:");
}

id objc_msgSend_setServersChangedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServersChangedState:");
}

id objc_msgSend_setServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceType:");
}

id objc_msgSend_setServiceTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceTypes:");
}

id objc_msgSend_setSessionEndedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionEndedHandler:");
}

id objc_msgSend_setSessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionID:");
}

id objc_msgSend_setSessionStartHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionStartHandler:");
}

id objc_msgSend_setSessions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessions:");
}

id objc_msgSend_setShouldAutomapListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldAutomapListener:");
}

id objc_msgSend_setShowPasswordHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowPasswordHandler:");
}

id objc_msgSend_setSiriInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSiriInfo:");
}

id objc_msgSend_setSourceVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceVersion:");
}

id objc_msgSend_setStartTicks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartTicks:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStateChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStateChangedHandler:");
}

id objc_msgSend_setStateDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStateDescriptor:");
}

id objc_msgSend_setStatusFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusFlags:");
}

id objc_msgSend_setSyncType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncType:");
}

id objc_msgSend_setSystemNameChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemNameChangedHandler:");
}

id objc_msgSend_setTargetAuthTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetAuthTag:");
}

id objc_msgSend_setTargetData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetData:");
}

id objc_msgSend_setTcpConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTcpConnection:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimer:");
}

id objc_msgSend_setToID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToID:");
}

id objc_msgSend_setToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:");
}

id objc_msgSend_setTrackPeers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackPeers:");
}

id objc_msgSend_setTransactionChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransactionChangedHandler:");
}

id objc_msgSend_setTriggerEnhancedDiscovery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriggerEnhancedDiscovery:");
}

id objc_msgSend_setTxtDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTxtDictionary:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateHandler:");
}

id objc_msgSend_setUseCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseCase:");
}

id objc_msgSend_setUserAdded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserAdded:");
}

id objc_msgSend_setUsingNearbyActionV2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsingNearbyActionV2:");
}

id objc_msgSend_setUsingOnDemandConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsingOnDemandConnection:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValues:");
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersion:");
}

id objc_msgSend_setViewHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewHint:");
}

id objc_msgSend_setVolumeTo_forCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolumeTo:forCategory:");
}

id objc_msgSend_setWaitingToConnect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaitingToConnect:");
}

id objc_msgSend_setWasTriggered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWasTriggered:");
}

id objc_msgSend_setWifiStateChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiStateChangedHandler:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setXpcCnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXpcCnx:");
}

id objc_msgSend_setXpcID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXpcID:");
}

id objc_msgSend_setupAssertHandlers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupAssertHandlers:");
}

id objc_msgSend_setupBrowseHandlers(void *a1, const char *a2, ...)
{
  return _[a1 setupBrowseHandlers];
}

id objc_msgSend_setupDaemonFramer_receiveHandler_closeHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupDaemonFramer:receiveHandler:closeHandler:");
}

id objc_msgSend_setupFlowHandlers(void *a1, const char *a2, ...)
{
  return _[a1 setupFlowHandlers];
}

id objc_msgSend_setupListenHandlers(void *a1, const char *a2, ...)
{
  return _[a1 setupListenHandlers];
}

id objc_msgSend_setupPolicyWithQueue_browseAgent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupPolicyWithQueue:browseAgent:");
}

id objc_msgSend_setupResolveHandlers(void *a1, const char *a2, ...)
{
  return _[a1 setupResolveHandlers];
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _[a1 shared];
}

id objc_msgSend_sharedAVSystemController(void *a1, const char *a2, ...)
{
  return _[a1 sharedAVSystemController];
}

id objc_msgSend_sharedCloudDaemon(void *a1, const char *a2, ...)
{
  return _[a1 sharedCloudDaemon];
}

id objc_msgSend_sharedCompanionLinkDaemon(void *a1, const char *a2, ...)
{
  return _[a1 sharedCompanionLinkDaemon];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedConnection];
}

id objc_msgSend_sharedDaemon(void *a1, const char *a2, ...)
{
  return _[a1 sharedDaemon];
}

id objc_msgSend_sharedIdentityDaemon(void *a1, const char *a2, ...)
{
  return _[a1 sharedIdentityDaemon];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedInvitationDaemon(void *a1, const char *a2, ...)
{
  return _[a1 sharedInvitationDaemon];
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedManager];
}

id objc_msgSend_sharedMetrics(void *a1, const char *a2, ...)
{
  return _[a1 sharedMetrics];
}

id objc_msgSend_sharedMetricsNoCreate(void *a1, const char *a2, ...)
{
  return _[a1 sharedMetricsNoCreate];
}

id objc_msgSend_sharedNearFieldDaemon(void *a1, const char *a2, ...)
{
  return _[a1 sharedNearFieldDaemon];
}

id objc_msgSend_sharedNetworkAgent(void *a1, const char *a2, ...)
{
  return _[a1 sharedNetworkAgent];
}

id objc_msgSend_sharedPeopleDaemon(void *a1, const char *a2, ...)
{
  return _[a1 sharedPeopleDaemon];
}

id objc_msgSend_sharedPrivateDaemon(void *a1, const char *a2, ...)
{
  return _[a1 sharedPrivateDaemon];
}

id objc_msgSend_sharedStatusDaemon(void *a1, const char *a2, ...)
{
  return _[a1 sharedStatusDaemon];
}

id objc_msgSend_shortDescription(void *a1, const char *a2, ...)
{
  return _[a1 shortDescription];
}

id objc_msgSend_shouldAutomapListener(void *a1, const char *a2, ...)
{
  return _[a1 shouldAutomapListener];
}

id objc_msgSend_shouldReportDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldReportDevice:");
}

id objc_msgSend_shouldReportDevice_toXPCConnectionWithLaunchInstanceID_outReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldReportDevice:toXPCConnectionWithLaunchInstanceID:outReason:");
}

id objc_msgSend_showPasswordHandler(void *a1, const char *a2, ...)
{
  return _[a1 showPasswordHandler];
}

id objc_msgSend_sigTermPending(void *a1, const char *a2, ...)
{
  return _[a1 sigTermPending];
}

id objc_msgSend_signData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signData:error:");
}

id objc_msgSend_siriEndpointIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 siriEndpointIdentifier];
}

id objc_msgSend_siriEndpointProfile(void *a1, const char *a2, ...)
{
  return _[a1 siriEndpointProfile];
}

id objc_msgSend_siriInfo(void *a1, const char *a2, ...)
{
  return _[a1 siriInfo];
}

id objc_msgSend_sleepSystemForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sleepSystemForReason:");
}

id objc_msgSend_sourceVersion(void *a1, const char *a2, ...)
{
  return _[a1 sourceVersion];
}

id objc_msgSend_speakText_flags_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakText:flags:completion:");
}

id objc_msgSend_stableIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 stableIdentifier];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startAgeOutTimer(void *a1, const char *a2, ...)
{
  return _[a1 startAgeOutTimer];
}

id objc_msgSend_startConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startConnection:");
}

id objc_msgSend_startDiscovery_applicationService_controlFlags_deviceFilter_connectedHandler_updateHandler_lostHandler_invalidationHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "startDiscovery:applicationService:controlFlags:deviceFilter:connectedHandler:updateHandler:lostHandler:invalidationHandler:");
}

id objc_msgSend_startDiscovery_controlFlags_deviceFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDiscovery:controlFlags:deviceFilter:");
}

id objc_msgSend_startDiscovery_deviceTypes_controlFlags_deviceFilter_agentUUID_applicationService_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDiscovery:deviceTypes:controlFlags:deviceFilter:agentUUID:applicationService:");
}

id objc_msgSend_startDiscovery_foundHandler_updateHandler_lostHandler_invalidationHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDiscovery:foundHandler:updateHandler:lostHandler:invalidationHandler:");
}

id objc_msgSend_startListenerMappingTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startListenerMappingTimeout:");
}

id objc_msgSend_startNearbyInvitationDiscovery_agentUUID_applicationService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startNearbyInvitationDiscovery:agentUUID:applicationService:");
}

id objc_msgSend_startObservingForAuthenticationStateChanges_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startObservingForAuthenticationStateChanges:queue:");
}

id objc_msgSend_startServer_withCompletion_disconnectHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startServer:withCompletion:disconnectHandler:");
}

id objc_msgSend_startSiriWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSiriWithContext:");
}

id objc_msgSend_startTicks(void *a1, const char *a2, ...)
{
  return _[a1 startTicks];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_statusCodeToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusCodeToString:");
}

id objc_msgSend_statusFlags(void *a1, const char *a2, ...)
{
  return _[a1 statusFlags];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _[a1 stop];
}

id objc_msgSend_stopAgentClient(void *a1, const char *a2, ...)
{
  return _[a1 stopAgentClient];
}

id objc_msgSend_stopAllOutgoingConnectionsNotForPeer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAllOutgoingConnectionsNotForPeer:");
}

id objc_msgSend_stopDiscovery(void *a1, const char *a2, ...)
{
  return _[a1 stopDiscovery];
}

id objc_msgSend_stopObservingForAuthenticationStateChanges(void *a1, const char *a2, ...)
{
  return _[a1 stopObservingForAuthenticationStateChanges];
}

id objc_msgSend_stopServer(void *a1, const char *a2, ...)
{
  return _[a1 stopServer];
}

id objc_msgSend_stopSiriWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSiriWithContext:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCString:encoding:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_subscriber(void *a1, const char *a2, ...)
{
  return _[a1 subscriber];
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_supportedApplicationLabels(void *a1, const char *a2, ...)
{
  return _[a1 supportedApplicationLabels];
}

id objc_msgSend_supportsApplePay(void *a1, const char *a2, ...)
{
  return _[a1 supportsApplePay];
}

id objc_msgSend_supportsApplicationLabel(void *a1, const char *a2, ...)
{
  return _[a1 supportsApplicationLabel];
}

id objc_msgSend_supportsDataTransfer(void *a1, const char *a2, ...)
{
  return _[a1 supportsDataTransfer];
}

id objc_msgSend_supportsFindMy(void *a1, const char *a2, ...)
{
  return _[a1 supportsFindMy];
}

id objc_msgSend_supportsFindMyRemote(void *a1, const char *a2, ...)
{
  return _[a1 supportsFindMyRemote];
}

id objc_msgSend_synchronizedEndpointListWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizedEndpointListWithQueue:");
}

id objc_msgSend_systemAttentionState(void *a1, const char *a2, ...)
{
  return _[a1 systemAttentionState];
}

id objc_msgSend_systemName(void *a1, const char *a2, ...)
{
  return _[a1 systemName];
}

id objc_msgSend_systemServiceProxy(void *a1, const char *a2, ...)
{
  return _[a1 systemServiceProxy];
}

id objc_msgSend_tapEvent(void *a1, const char *a2, ...)
{
  return _[a1 tapEvent];
}

id objc_msgSend_targetAuthTag(void *a1, const char *a2, ...)
{
  return _[a1 targetAuthTag];
}

id objc_msgSend_targetData(void *a1, const char *a2, ...)
{
  return _[a1 targetData];
}

id objc_msgSend_targetWithProcessIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetWithProcessIdentity:");
}

id objc_msgSend_taskState(void *a1, const char *a2, ...)
{
  return _[a1 taskState];
}

id objc_msgSend_tcpConnection(void *a1, const char *a2, ...)
{
  return _[a1 tcpConnection];
}

id objc_msgSend_tcpListeningPort(void *a1, const char *a2, ...)
{
  return _[a1 tcpListeningPort];
}

id objc_msgSend_textInputTraits(void *a1, const char *a2, ...)
{
  return _[a1 textInputTraits];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeZoneForSecondsFromGMT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneForSecondsFromGMT:");
}

id objc_msgSend_timer(void *a1, const char *a2, ...)
{
  return _[a1 timer];
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _[a1 title];
}

id objc_msgSend_toID(void *a1, const char *a2, ...)
{
  return _[a1 toID];
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _[a1 token];
}

id objc_msgSend_trackPeers(void *a1, const char *a2, ...)
{
  return _[a1 trackPeers];
}

id objc_msgSend_transactionChangedHandler(void *a1, const char *a2, ...)
{
  return _[a1 transactionChangedHandler];
}

id objc_msgSend_transactionController(void *a1, const char *a2, ...)
{
  return _[a1 transactionController];
}

id objc_msgSend_transactionController_didBeginTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionController:didBeginTransaction:");
}

id objc_msgSend_transactionController_didFinishTransaction_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionController:didFinishTransaction:error:");
}

id objc_msgSend_transportServicesMetadata(void *a1, const char *a2, ...)
{
  return _[a1 transportServicesMetadata];
}

id objc_msgSend_trigger(void *a1, const char *a2, ...)
{
  return _[a1 trigger];
}

id objc_msgSend_triggerEnhancedDiscovery(void *a1, const char *a2, ...)
{
  return _[a1 triggerEnhancedDiscovery];
}

id objc_msgSend_triggerEnhancedDiscovery_useCase_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerEnhancedDiscovery:useCase:completion:");
}

id objc_msgSend_triggerEnhancedDiscoveryForReason_useCase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerEnhancedDiscoveryForReason:useCase:error:");
}

id objc_msgSend_tryPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryPassword:");
}

id objc_msgSend_txtDictionary(void *a1, const char *a2, ...)
{
  return _[a1 txtDictionary];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_uid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uid:");
}

id objc_msgSend_uniqueID(void *a1, const char *a2, ...)
{
  return _[a1 uniqueID];
}

id objc_msgSend_uniqueIDOverride(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIDOverride];
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIdentifier];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_updateAgentClientInfo_browseResponse_listener_bundleID_advertiseDescriptor_browseDescriptor_isFlowHandler_isUsingQUIC_isTCP_agentClientPID_persona_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "updateAgentClientInfo:browseResponse:listener:bundleID:advertiseDescriptor:browseDescriptor:isFlowHandler:isU singQUIC:isTCP:agentClientPID:persona:");
}

id objc_msgSend_updateConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateConfiguration:");
}

id objc_msgSend_updateEndpointMapping_discoverySessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEndpointMapping:discoverySessionID:");
}

id objc_msgSend_updateErrorFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateErrorFlags:");
}

id objc_msgSend_updateFriendIdentityWithAppleID_contactID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFriendIdentityWithAppleID:contactID:");
}

id objc_msgSend_updateMappingForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMappingForDevice:");
}

id objc_msgSend_updateOptions_withNWActivityMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateOptions:withNWActivityMetrics:");
}

id objc_msgSend_updateSessionPairedIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSessionPairedIdentity:");
}

id objc_msgSend_updateSharedTVIdentities(void *a1, const char *a2, ...)
{
  return _[a1 updateSharedTVIdentities];
}

id objc_msgSend_updateTrustStatusFlagsWithIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTrustStatusFlagsWithIdentity:");
}

id objc_msgSend_updateWithBonjourDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithBonjourDevice:");
}

id objc_msgSend_updateWithCBDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithCBDevice:");
}

id objc_msgSend_updateWithEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithEndpoint:");
}

id objc_msgSend_updateWithFamilyEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithFamilyEndpoint:");
}

id objc_msgSend_updateWithIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithIdentity:");
}

id objc_msgSend_updateWithKeychainItem_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithKeychainItem:error:");
}

id objc_msgSend_updateWithRPDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithRPDevice:");
}

id objc_msgSend_updateWithRPIdentity_revisionUpdate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithRPIdentity:revisionUpdate:error:");
}

id objc_msgSend_updateWithRPMessage_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithRPMessage:error:");
}

id objc_msgSend_updateWithSFDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithSFDevice:");
}

id objc_msgSend_updateWithSFDevice_changes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithSFDevice:changes:");
}

id objc_msgSend_useCase(void *a1, const char *a2, ...)
{
  return _[a1 useCase];
}

id objc_msgSend_userAdded(void *a1, const char *a2, ...)
{
  return _[a1 userAdded];
}

id objc_msgSend_userID(void *a1, const char *a2, ...)
{
  return _[a1 userID];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userProfileManager(void *a1, const char *a2, ...)
{
  return _[a1 userProfileManager];
}

id objc_msgSend_userProfiles(void *a1, const char *a2, ...)
{
  return _[a1 userProfiles];
}

id objc_msgSend_userProfilesSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 userProfilesSnapshot];
}

id objc_msgSend_username(void *a1, const char *a2, ...)
{
  return _[a1 username];
}

id objc_msgSend_users(void *a1, const char *a2, ...)
{
  return _[a1 users];
}

id objc_msgSend_usingNearbyActionV2(void *a1, const char *a2, ...)
{
  return _[a1 usingNearbyActionV2];
}

id objc_msgSend_usingOnDemandConnection(void *a1, const char *a2, ...)
{
  return _[a1 usingOnDemandConnection];
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_verifiedIdentity(void *a1, const char *a2, ...)
{
  return _[a1 verifiedIdentity];
}

id objc_msgSend_verifyAuthTag_data_type_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyAuthTag:data:type:error:");
}

id objc_msgSend_verifyAuthTagPtr_authTagLen_dataPtr_dataLen_type_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyAuthTagPtr:authTagLen:dataPtr:dataLen:type:error:");
}

id objc_msgSend_verifySignature_data_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifySignature:data:error:");
}

id objc_msgSend_verifyWithIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyWithIdentity:");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _[a1 version];
}

id objc_msgSend_viewHint(void *a1, const char *a2, ...)
{
  return _[a1 viewHint];
}

id objc_msgSend_volumeControlAvailable(void *a1, const char *a2, ...)
{
  return _[a1 volumeControlAvailable];
}

id objc_msgSend_waitingToConnect(void *a1, const char *a2, ...)
{
  return _[a1 waitingToConnect];
}

id objc_msgSend_wakeOnWirelessEnabled(void *a1, const char *a2, ...)
{
  return _[a1 wakeOnWirelessEnabled];
}

id objc_msgSend_wakeSystemForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wakeSystemForReason:");
}

id objc_msgSend_wifiFlags(void *a1, const char *a2, ...)
{
  return _[a1 wifiFlags];
}

id objc_msgSend_wifiState(void *a1, const char *a2, ...)
{
  return _[a1 wifiState];
}

id objc_msgSend_writeControlOnFramer_type_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeControlOnFramer:type:error:");
}

id objc_msgSend_writeDataOnFramer_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeDataOnFramer:data:");
}

id objc_msgSend_writeErrorOnFramer_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeErrorOnFramer:error:");
}

id objc_msgSend_xpcCnx(void *a1, const char *a2, ...)
{
  return _[a1 xpcCnx];
}

id objc_msgSend_xpcConnectionInvalidated(void *a1, const char *a2, ...)
{
  return _[a1 xpcConnectionInvalidated];
}

id objc_msgSend_xpcPeopleStatusChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcPeopleStatusChanged:");
}

id objc_msgSend_xpcPersonChanged_changes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcPersonChanged:changes:");
}

id objc_msgSend_xpcPersonFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcPersonFound:");
}

id objc_msgSend_xpcPersonLost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcPersonLost:");
}

id objc_msgSend_xpcPrivateAdvertiserActivate_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcPrivateAdvertiserActivate:completion:");
}

id objc_msgSend_xpcPrivateDiscoveryActivate_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcPrivateDiscoveryActivate:completion:");
}

id objc_msgSend_xpcServerHidePassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcServerHidePassword:");
}

id objc_msgSend_xpcServerShowPassword_flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcServerShowPassword:flags:");
}