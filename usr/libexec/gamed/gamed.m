uint64_t start()
{
  void *v0;
  void *v1;
  unsigned int v2;
  uint64_t v3;
  id v4;
  os_log_s *v5;
  id v7;
  os_log_s *v8;
  BOOL v9;
  id v10;
  os_log_s *v11;
  BOOL v12;
  id v13;
  os_log_s *v14;
  BOOL v15;
  id v16;
  void *v17;
  os_log_s *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  int v23;
  void *v24;
  v0 = objc_autoreleasePoolPush();
  +[GKDaemonRuntimeStrategy setup](&OBJC_CLASS___GKDaemonRuntimeStrategy, "setup");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
  v2 = [v1 lockedDown];

  if (v2)
  {
    if (!os_log_GKGeneral) {
      v4 = (id)GKOSLoggers(v3);
    }
    v5 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      LOWORD(v23) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Lockdown Mode is enabled. Exiting.",  (uint8_t *)&v23,  2u);
    }

    objc_autoreleasePoolPop(v0);
    return 0LL;
  }

  else
  {
    if (!os_log_GKGeneral) {
      v7 = (id)GKOSLoggers(v3);
    }
    v8 = (os_log_s *)os_log_GKDaemon;
    v9 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
    if (v9)
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "^^^^^^^^^^^^^^^^^^", (uint8_t *)&v23, 2u);
    }

    if (!os_log_GKGeneral) {
      v10 = (id)GKOSLoggers(v9);
    }
    v11 = (os_log_s *)os_log_GKDaemon;
    v12 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
    if (v12)
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "| GAMED STARTING |", (uint8_t *)&v23, 2u);
    }

    if (!os_log_GKGeneral) {
      v13 = (id)GKOSLoggers(v12);
    }
    v14 = (os_log_s *)os_log_GKDaemon;
    v15 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
    if (v15)
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "vvvvvvvvvvvvvvvvvv", (uint8_t *)&v23, 2u);
    }

    if (!os_log_GKGeneral) {
      v16 = (id)GKOSLoggers(v15);
    }
    v17 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v18 = v17;
      v19 = GKFrameworkVersionDescription();
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v23 = 138412290;
      v24 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Frameworks Versions:\n%@",  (uint8_t *)&v23,  0xCu);
    }

    GKDaemonRun();
    v21 =  +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager");
    objc_autoreleasePoolPop(v0);
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](&OBJC_CLASS___NSRunLoop, "mainRunLoop"));
    [v22 run];

    return 0xFFFFFFFFLL;
  }
}

void sub_10000754C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000076B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transport]);
  v5 = (void *)objc_claimAutoreleasedReturnValue([v4 storeBag]);
  uint64_t v6 = *(void *)(a1 + 40);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  v8 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100007794;
  v10[3] = &unk_10026B058;
  id v11 = *(id *)(a1 + 48);
  id v12 = v3;
  id v9 = v3;
  [v5 getValuesForKeys:v6 queue:v8 completion:v10];
}

uint64_t sub_100007794(uint64_t a1, uint64_t a2, void *a3)
{
  v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000079F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
  v5 = (void *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
  +[NSData _gkLoadRemoteImageDataForURL:subdirectory:filename:queue:handler:]( &OBJC_CLASS___NSData,  "_gkLoadRemoteImageDataForURL:subdirectory:filename:queue:handler:",  v2,  v3,  v4,  v5,  *(void *)(a1 + 64));
}

void sub_100007A78(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v3 = (id)GKOSLoggers(a1);
    }
    uint64_t v4 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_FAULT)) {
      sub_10000C790(a1, v4);
    }
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](&OBJC_CLASS___NSData, "data"));
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

void sub_100007CD4(id *a1, void *a2)
{
  id v3 = a2;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100007DA8;
  v7[3] = &unk_10026B0F8;
  id v8 = a1[4];
  id v9 = a1[5];
  id v10 = a1[6];
  id v11 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100007DA8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 32);
  uint64_t v3 = GKImageCachePathForSubdirectoryAndFilename(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = (void *)v4;
  if (v4)
  {
    [*(id *)(a1 + 48) _gkWriteToImageCacheWithURLString:v4];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers(0LL);
    }
    v7 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10000C804(v2, v2 + 1, v7);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

uint64_t sub_100007E60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100008010(id *a1, void *a2)
{
  id v3 = a2;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000080E4;
  v7[3] = &unk_10026B0F8;
  id v8 = a1[4];
  id v9 = a1[5];
  id v10 = a1[6];
  id v11 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1000080E4(uint64_t a1)
{
  uint64_t v2 = GKImageCachePathForSubdirectoryAndFilename(*(void *)(a1 + 32), *(void *)(a1 + 40));
  id v4 = (id)objc_claimAutoreleasedReturnValue(v2);
  id v3 = -[NSData initWithContentsOfFile:](objc_alloc(&OBJC_CLASS___NSData), "initWithContentsOfFile:", v4);
  if (-[NSData length](v3, "length")) {
    [*(id *)(a1 + 48) setResult:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10000815C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10000832C(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000083EC;
  block[3] = &unk_10026B148;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_1000083EC(void *a1)
{
  uint64_t v2 = GKImageCachePathForSubdirectoryAndFilename(a1[4], a1[5]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  unsigned int v5 = [v4 fileExistsAtPath:v3];

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    id v10 = 0LL;
    [v6 removeItemAtPath:v3 error:&v10];
    id v7 = v10;

    if (v7)
    {
      if (!os_log_GKGeneral) {
        id v9 = (id)GKOSLoggers(v8);
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_10000C87C();
      }
    }
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

uint64_t sub_1000084F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000086E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ampController]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10000878C;
  v6[3] = &unk_10026B198;
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 getBagWithCompletion:v6];
}

uint64_t sub_10000878C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000087BC(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] result]);
  id v3 = v2;
  if (v2)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 doubleForKey:@"metrics/impressions/viewableThreshold"]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1000088D4;
    v14[3] = &unk_10026B1C0;
    id v15 = a1[5];
    id v16 = a1[6];
    [v4 valueWithCompletion:v14];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(0LL);
    }
    id v6 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10000C8DC(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    (*((void (**)(void))a1[6] + 2))();
  }
}

void sub_1000088D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100008968;
  v7[3] = &unk_10026B030;
  id v4 = *(dispatch_queue_s **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

void sub_100008968(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  [*(id *)(a1 + 32) doubleValue];
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v2 / 1000.0));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v3);
}

void sub_100008F44(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    id v6 = (id)objc_claimAutoreleasedReturnValue(+[GKAMPController controller](&OBJC_CLASS___GKAMPController, "controller"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 originalBundleIdentifier]);
    [v6 reportClickStreamEventWithHostAppBundleId:v5 metricsFields:v3];
  }

void sub_10000907C(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    id v6 = (id)objc_claimAutoreleasedReturnValue(+[GKAMPController controller](&OBJC_CLASS___GKAMPController, "controller"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 originalBundleIdentifier]);
    [v6 reportClickStreamEventWithHostAppBundleId:v5 metricsFields:v3];
  }

void sub_100009364(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___GKFriendSuggestionDenier);
  double v2 = (void *)qword_1002BB490;
  qword_1002BB490 = (uint64_t)v1;
}

uint64_t sub_100009764(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(const __CFString **)(a1 + 32);
    if (v3) {
      id v4 = v3;
    }
    else {
      id v4 = @"NewsApp";
    }
    return (*(uint64_t (**)(uint64_t, void, _UNKNOWN **, const __CFString *))(result + 16))( result,  0LL,  &off_100287838,  v4);
  }

  return result;
}

void sub_10000979C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_opt_new(&OBJC_CLASS___ASCAppLaunchTrampoline);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 handleURL:*(void *)(a1 + 32)]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1000098CC;
  v11[3] = &unk_10026B278;
  id v12 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 48);
  id v6 = v3;
  id v14 = v6;
  [v5 addSuccessBlock:v11];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100009B04;
  v8[3] = &unk_10026B2A0;
  id v9 = *(id *)(a1 + 48);
  id v10 = v6;
  id v7 = v6;
  [v5 addErrorBlock:v8];
}

void sub_1000098CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 intValue];
  if ((_DWORD)v4 == 1)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers(v4);
    }
    id v10 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "ASCAppLaunchTrampoline: Successfully opened app product page",  buf,  2u);
    }

    if (!*(void *)(a1 + 32))
    {
      uint64_t v11 = @"com.apple.AppStore";
      goto LABEL_23;
    }

    id v8 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"https://apps.apple.com/app/id%@",  *(void *)(a1 + 32)));
    goto LABEL_16;
  }

  if (!(_DWORD)v4)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v4);
    }
    id v6 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "ASCAppLaunchTrampoline: Successfully launched app",  buf,  2u);
    }

    id v7 = *(__CFString **)(a1 + 32);
    if (!v7) {
      id v7 = @"thirdPartyApp";
    }
    id v8 = v7;
LABEL_16:
    uint64_t v11 = v8;
    goto LABEL_23;
  }

  if (!os_log_GKGeneral) {
    id v12 = (id)GKOSLoggers(v4);
  }
  id v13 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "ASCAppLaunchTrampoline: Successfully trampolined with unknown result",  buf,  2u);
  }

  uint64_t v11 = @"unknown";
LABEL_23:
  v16[0] = @"code";
  v16[1] = @"targetId";
  v17[0] = v3;
  v17[1] = v11;
  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  2LL));
  [*(id *)(a1 + 40) setResult:v14];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100009B04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  id v6 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    id v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "ASCAppLaunchTrampoline: Trampoline failed because of: %@",  (uint8_t *)&v7,  0xCu);
  }

  [*(id *)(a1 + 32) setError:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100009BEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"code"]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"targetId"]);
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v7, v4, v6);
}

void sub_100009DC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100009DD8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100009DE8(uint64_t a1)
{
}

void sub_100009DF0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v8 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 bundleIdentifier]);
  id v7 = *(void **)(a1 + 32);

  if (v6 == v7)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    *a3 = 1;
  }
}

LABEL_8:
}

  return v13;
}
}

        if (i != 101)
        {
          v27 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          v29 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  NSInternalInconsistencyException,  v28,  0LL));

          objc_exception_throw(v29);
          goto LABEL_20;
        }

        id v12 = *(void **)(a1 + 40);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 requestsInsertSQL]);
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3221225472LL;
        v33[2] = sub_1000AE580;
        v33[3] = &unk_100270728;
        v33[4] = *(void *)(a1 + 40);
        id v14 = v8;
        v34 = v14;
        [v12 writeToDatabase:a2 statementStore:v5 withInsertSQL:v13 updateSQL:0 bindOperation:v33];

        id v15 = *(void **)(a1 + 40);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 photosInsertSQL]);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472LL;
        v32[2] = sub_1000AE590;
        v32[3] = &unk_100270750;
        v32[4] = *(void *)(a1 + 40);
        v32[5] = a2;
        [v15 writeToDatabase:a2 statementStore:v5 withInsertSQL:v16 updateSQL:0 bindOperation:v32];

        id v7 = (char *)v7 + 1;
      }

      while (v7 != v6);
      v18 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
      id v6 = v18;
    }

    while (v18);
  }
}

        if (i != 101)
        {
          v27 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          v29 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  NSInternalInconsistencyException,  v28,  0LL));

          objc_exception_throw(v29);
          goto LABEL_20;
        }

        id v12 = *(void **)(a1 + 40);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 requestsInsertSQL]);
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472LL;
        v40[2] = sub_1000AFDB0;
        v40[3] = &unk_100270728;
        v40[4] = *(void *)(a1 + 40);
        id v14 = v7;
        v41 = v14;
        [v12 writeToDatabase:a2 statementStore:v37 withInsertSQL:v13 updateSQL:0 bindOperation:v40];

        id v15 = *(void **)(a1 + 40);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 photosInsertSQL]);
        v38 = v34;
        v39 = v35;
        objc_msgSend(v15, "writeToDatabase:statementStore:withInsertSQL:updateSQL:bindOperation:");

        id v5 = (char *)v5 + 1;
      }

      while (v5 != v4);
      v18 = [obj countByEnumeratingWithState:&v44 objects:v52 count:16];
      id v4 = v18;
    }

    while (v18);
  }
}

        if (j != 101)
        {
          v28 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
          v30 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  NSInternalInconsistencyException,  v29,  0LL));

          objc_exception_throw(v30);
          goto LABEL_20;
        }

        id v13 = *(void **)(a1 + 40);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 requestsInsertSQL]);
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472LL;
        v38[2] = sub_1000B2B64;
        v38[3] = &unk_100270728;
        v38[4] = *(void *)(a1 + 40);
        id v15 = v8;
        v39 = v15;
        [v13 writeToDatabase:a2 statementStore:v34 withInsertSQL:v14 updateSQL:0 bindOperation:v38];

        id v16 = *(void **)(a1 + 40);
        v17 = (void *)objc_claimAutoreleasedReturnValue([v16 statusInsertSQL]);
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472LL;
        v35[2] = sub_1000B2B74;
        v35[3] = &unk_100270600;
        v35[4] = *(void *)(a1 + 40);
        v18 = v9;
        v36 = v18;
        v37 = a2;
        [v16 writeToDatabase:a2 statementStore:v34 withInsertSQL:v17 updateSQL:0 bindOperation:v35];
      }

      id v5 = [obj countByEnumeratingWithState:&v42 objects:v50 count:16];
    }

    while (v5);
  }
}
}
}

void sub_10000A0B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"playerID"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"authToken"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"accountName"]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"pushToken"]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *, void *, void *, void *, void *))(v2 + 16))(v2, v8, v3, v4, v5, v6, v7);
}

void sub_10000A2B0(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  [v1 terminate];
}

void sub_10000A4B0(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_10000A528;
  v2[3] = &unk_10026B310;
  id v1 = *(void **)(a1 + 40);
  v2[4] = *(void *)(a1 + 32);
  id v3 = v1;
  +[GKClientProxy removeAllCachesWithHandler:](&OBJC_CLASS___GKClientProxy, "removeAllCachesWithHandler:", v2);
}

void sub_10000A528(uint64_t a1)
{
  uint64_t v2 = GKInsecureCacheRoot();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  +[GKUtilityServicePrivate removeCacheDirectory:](&OBJC_CLASS___GKUtilityServicePrivate, "removeCacheDirectory:", v3);

  uint64_t v4 = GKSupportDataRoot();
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  +[GKUtilityServicePrivate removeCacheDirectory:](&OBJC_CLASS___GKUtilityServicePrivate, "removeCacheDirectory:", v5);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000A608;
  block[3] = &unk_10026B120;
  id v9 = *(id *)(a1 + 40);
  dispatch_async(v7, block);
}

uint64_t sub_10000A608(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10000A6B0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v2 replyQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000A74C;
  block[3] = &unk_10026B120;
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

uint64_t sub_10000A74C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10000A8A8(uint64_t a1, void *a2)
{
  return [a2 refreshContentsForDataType:*(unsigned int *)(a1 + 32) userInfo:0];
}

uint64_t sub_10000A9CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10000AB70(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ampController]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10000AC18;
  v6[3] = &unk_10026B198;
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 getBagWithCompletion:v6];
}

uint64_t sub_10000AC18(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10000AC48(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 stringForKey:GKArcadeProductFamilyId]);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_10000AD6C;
    v17[3] = &unk_10026B430;
    id v5 = *(void **)(a1 + 48);
    v17[4] = *(void *)(a1 + 40);
    id v18 = v5;
    [v4 valueWithCompletion:v17];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers(0LL);
    }
    id v7 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10000C970(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    uint64_t v15 = *(void *)(a1 + 48);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);
  }
}

void sub_10000AD6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v4 replyQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000AE28;
  block[3] = &unk_10026B148;
  id v6 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  dispatch_async(v5, block);
}

void sub_10000AE28(id *a1)
{
  id v2 = a1[4];
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKUtilityService.m",  850LL,  "-[GKUtilityServicePrivate checkAndUpdateArcadeSubscriberStatusWithHandler:]_block_invoke_2"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 transactionGroupWithName:v3]);

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10000AF8C;
  v15[3] = &unk_10026B408;
  id v5 = a1[5];
  id v6 = a1[4];
  id v16 = v5;
  id v17 = v6;
  id v7 = v4;
  id v18 = v7;
  [v7 performOnManagedObjectContext:v15];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 replyQueue]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10000B434;
  v12[3] = &unk_10026B030;
  id v10 = a1[6];
  id v13 = v7;
  id v14 = v10;
  id v11 = v7;
  [v11 notifyOnQueue:v9 block:v12];
}

void sub_10000AF8C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  unsigned __int8 v7 = [v6 isArcadeSubscriber];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[ASDSubscriptionEntitlements sharedInstance]( &OBJC_CLASS___ASDSubscriptionEntitlements,  "sharedInstance"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10000B08C;
  v13[3] = &unk_10026B3E0;
  id v9 = *(id *)(a1 + 32);
  unsigned __int8 v18 = v7;
  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = *(void **)(a1 + 48);
  id v14 = v9;
  uint64_t v15 = v10;
  id v17 = v5;
  id v16 = v11;
  id v12 = v5;
  [v8 getSubscriptionEntitlementsForSegment:1 ignoreCaches:0 withResultHandler:v13];
}

void sub_10000B08C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t v8 = v7;
  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers(v7);
    }
    uint64_t v10 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_ERROR)) {
      sub_10000C9A4((uint64_t)v8, v10);
    }
    [*(id *)(a1 + 48) setError:v8];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    goto LABEL_36;
  }

  id v11 = [v6 count];
  if (v11)
  {
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    id v12 = v6;
    id v13 = [v12 countByEnumeratingWithState:&v32 objects:v38 count:16];
    if (v13)
    {
      id v29 = v6;
      uint64_t v14 = *(void *)v33;
      while (2)
      {
        for (i = 0LL; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v33 != v14) {
            objc_enumerationMutation(v12);
          }
          id v16 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
          id v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "familyID", v29));
          unsigned __int8 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 stringValue]);
          unsigned int v19 = [v18 isEqualToString:*(void *)(a1 + 32)];

          if (v19)
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue([v16 expiryDate]);
            [v21 timeIntervalSinceNow];
            double v23 = v22;

            if (v23 <= 0.0) {
              id v13 = 0LL;
            }
            else {
              id v13 = (id)objc_claimAutoreleasedReturnValue([v16 expiryDate]);
            }
            id v6 = v29;
            id v20 = v16;
            goto LABEL_23;
          }
        }

        id v13 = [v12 countByEnumeratingWithState:&v32 objects:v38 count:16];
        if (v13) {
          continue;
        }
        break;
      }

      id v20 = 0LL;
      id v6 = v29;
    }

    else
    {
      id v20 = 0LL;
    }

LABEL_23:
  }

  else
  {
    id v20 = 0LL;
    id v13 = 0LL;
  }

  if (!*(_BYTE *)(a1 + 64) || v13)
  {
    if (*(_BYTE *)(a1 + 64) || !v13) {
      goto LABEL_31;
    }
    v24 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKProfileServicePrivate,  "serviceFromService:",  *(void *)(a1 + 40)));
    [v24 setArcadeSubscriptionExpiration:v13 handler:&stru_10026B3B8];
  }

  else
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKProfileServicePrivate,  "serviceFromService:",  *(void *)(a1 + 40)));
    v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSince1970:",  0.0));
    [v24 setArcadeSubscriptionExpiration:v25 handler:&stru_10026B398];
  }

LABEL_31:
  if (!os_log_GKGeneral) {
    id v26 = (id)GKOSLoggers(v11);
  }
  v27 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v37 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "checkAndUpdateArcadeSubscriberStatusWithHandler: updating arcade subscription state with entitlement %@",  buf,  0xCu);
  }

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_10000B428;
  v30[3] = &unk_10026B120;
  id v31 = *(id *)(a1 + 56);
  [v28 updateArcadeSubscriptionState:v20 completionHandler:v30];

LABEL_36:
}

      id v9 = (v17 - 1) & v17;
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

      id v9 = (v16 - 1) & v16;
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

    id v13 = (v19 - 1) & v19;
  }

  id v20 = v18 + 3;
  if (v20 >= v15) {
    goto LABEL_26;
  }
  unsigned int v19 = *(void *)(v2 + 8 * v20);
  if (v19)
  {
    uint64_t v10 = v20;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v10 >= v15) {
      goto LABEL_26;
    }
    unsigned int v19 = *(void *)(v2 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }

    id v13 = (v19 - 1) & v19;
  }

  id v20 = v18 + 3;
  if (v20 >= v15) {
    goto LABEL_26;
  }
  unsigned int v19 = *(void *)(v2 + 8 * v20);
  if (v19)
  {
    uint64_t v10 = v20;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v10 >= v15) {
      goto LABEL_26;
    }
    unsigned int v19 = *(void *)(v2 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }

    uint64_t v10 = (v17 - 1) & v17;
  }

  unsigned __int8 v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    uint64_t result = swift_release_n(v3, 2LL);
    id v2 = v31;
    goto LABEL_37;
  }

  id v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    id v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    id v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_35;
    }
    id v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    id v9 = (v16 - 1) & v16;
  }

  id v17 = v15 + 3;
  if (v17 >= v38)
  {
LABEL_35:
    uint64_t result = swift_release_n(v3, 2LL);
    id v2 = v36;
    goto LABEL_37;
  }

  id v16 = *(void *)(v37 + 8 * v17);
  if (v16)
  {
    id v12 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    id v12 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v12 >= v38) {
      goto LABEL_35;
    }
    id v16 = *(void *)(v37 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

    id v9 = (v15 - 1) & v15;
    v40 = v16;
    id v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    unsigned __int8 v18 = (uint64_t *)(*(void *)(v4 + 48) + 40 * v13);
    unsigned int v19 = *v18;
    id v20 = v18[1];
    v21 = v18[2];
    double v22 = v18[3];
    double v23 = (void *)v18[4];
    Hasher.init(_seed:)(v41, v8[5]);
    v24 = v23;
    swift_bridgeObjectRetain_n(v20, 2LL);
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v41, v19, v20);
    swift_bridgeObjectRelease(v20, v25);
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v41, v21, v22);
    swift_bridgeObjectRelease(v22, v26);
    uint64_t result = Hasher._finalize()();
    v27 = -1LL << *((_BYTE *)v8 + 32);
    v28 = result & ~v27;
    id v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) == 0)
    {
      id v31 = 0;
      __int128 v32 = (unint64_t)(63 - v27) >> 6;
      while (++v29 != v32 || (v31 & 1) == 0)
      {
        __int128 v33 = v29 == v32;
        if (v29 == v32) {
          id v29 = 0LL;
        }
        v31 |= v33;
        __int128 v34 = *(void *)(v11 + 8 * v29);
        if (v34 != -1)
        {
          v30 = __clz(__rbit64(~v34)) + (v29 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    v30 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v30;
    __int128 v35 = (void *)(v8[6] + 40 * v30);
    *__int128 v35 = v19;
    v35[1] = v20;
    v35[2] = v21;
    v35[3] = v22;
    v35[4] = v23;
    ++v8[2];
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_38;
    }
    uint64_t v4 = v39;
    uint64_t v10 = v40;
    if (!v5) {
      goto LABEL_35;
    }
  }

  id v17 = v10 + 4;
  if (v10 + 4 >= v37) {
    goto LABEL_35;
  }
  uint64_t v15 = a1[v17];
  if (v15)
  {
    id v16 = v10 + 4;
    goto LABEL_23;
  }

  while (1)
  {
    id v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v37) {
      goto LABEL_35;
    }
    uint64_t v15 = a1[v16];
    ++v17;
    if (v15) {
      goto LABEL_23;
    }
  }

  __break(1u);
  return result;
}

              swift_bridgeObjectRelease(a3, v10);
              swift_release(v6);
              return 0LL;
            }
          }
        }
      }
    }

    mach_msg_destroy(&msg);
    return v12;
  }

  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

uint64_t sub_10000B428(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10000B434(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_10000B59C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v4 replyQueue]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10000B654;
  v8[3] = &unk_10026B030;
  id v6 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  dispatch_async(v5, v8);
}

void sub_10000B654(uint64_t a1)
{
  v6[0] = @"contactIDs";
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contactIDs]);
  v6[1] = @"playerIDs";
  v7[0] = v3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerIDs]);
  v7[1] = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  2LL));
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
}

uint64_t sub_10000B8EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10000B8FC(void *a1, void *a2)
{
  uint64_t v4 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v7 = GKDeniedPlayerIdKey;
  uint64_t v8 = v3;
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
  [v4 handleFriendSuggestionDenialWithNotificationPayload:v6 error:v5 handler:a1[6]];
}

uint64_t sub_10000BB78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10000BB88(void *a1, void *a2)
{
  uint64_t v4 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v7 = GKBlacklistedContactIdKey;
  uint64_t v8 = v3;
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
  [v4 handleFriendSuggestionDenialWithNotificationPayload:v6 error:v5 handler:a1[6]];
}

uint64_t sub_10000BD30(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10000BDC4;
    v3[3] = &unk_10026B4A8;
    id v4 = *(id *)(a1 + 40);
    +[GKClientProxy enumerateClientsUsingBlock:](&OBJC_CLASS___GKClientProxy, "enumerateClientsUsingBlock:", v3);
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

id sub_10000BDC4(uint64_t a1, void *a2)
{
  return [a2 refreshContentsForDataType:4 userInfo:*(void *)(a1 + 32)];
}

uint64_t sub_10000BEB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10000C024(uint64_t a1, void *a2)
{
  id v3 = a2;
  v13[0] = GKBagKeyWidgetDrawerActivityLivePreview;
  v13[1] = GKBagKeyWidgetDrawerActivityTTL;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v13, 2LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transport]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 storeBag]);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10000C16C;
  v10[3] = &unk_10026B058;
  id v11 = *(id *)(a1 + 40);
  id v12 = v3;
  id v9 = v3;
  [v6 getValuesForKeys:v4 queue:v8 completion:v10];
}

uint64_t sub_10000C16C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10000C1C4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  uint64_t v3 = GKBagKeyWidgetDrawerActivityTTL;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:GKBagKeyWidgetDrawerActivityTTL]);
  id v5 = (void *)v4;
  if (v4) {
    id v6 = (_UNKNOWN **)v4;
  }
  else {
    id v6 = &off_100287850;
  }
  uint64_t v14 = v6;

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v3]);
  id v9 = (void *)v8;
  if (v8) {
    id v10 = (_UNKNOWN **)v8;
  }
  else {
    id v10 = &off_100287850;
  }
  id v11 = v10;

  uint64_t v12 = *(void *)(a1 + 40);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, _UNKNOWN **, _UNKNOWN **))(v12 + 16))(v12, v13, v14, v11);
}

void sub_10000C74C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_10000C768( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_10000C790(uint64_t a1, os_log_s *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "Not loading image with untrusted domain URL: %@",  (uint8_t *)&v3,  0xCu);
  sub_10000C760();
}

void sub_10000C804(void *a1, void *a2, os_log_s *a3)
{
  *(_DWORD *)int v3 = 138412546;
  *(void *)&void v3[4] = *a1;
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = *a2;
  sub_10000C74C( (void *)&_mh_execute_header,  (uint64_t)a2,  a3,  "Image failed to cache. nil url for: subdirectory: %@, filename: %@",  *(void *)v3,  *(void *)&v3[8],  *(void *)&v3[16]);
  sub_10000C760();
}

void sub_10000C87C()
{
}

void sub_10000C8DC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10000C910()
{
}

void sub_10000C970( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10000C9A4(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "checkAndUpdateArcadeSubscriberStatusWithHandler: Error updating arcade subscription status: %@ ",  (uint8_t *)&v2,  0xCu);
  sub_10000C760();
}

id sub_10000CA88(uint64_t a1, void *a2)
{
  return [a2 refreshContentsForDataType:*(unsigned int *)(a1 + 32) userInfo:0];
}

void sub_10000CB94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2 == 1)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"wasViewed == NO"));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject objectsMatchingPredicate:context:]( &OBJC_CLASS___GKFriendRequestListEntryCacheObject,  "objectsMatchingPredicate:context:",  v11,  v12));

    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    id v6 = v13;
    id v14 = [v6 countByEnumeratingWithState:&v21 objects:v29 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v22;
      do
      {
        for (i = 0LL; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v22 != v16) {
            objc_enumerationMutation(v6);
          }
          objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * (void)i), "setWasViewed:", 1, (void)v21);
        }

        id v15 = [v6 countByEnumeratingWithState:&v21 objects:v29 count:16];
      }

      while (v15);
    }

    goto LABEL_18;
  }

  if (!v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"wasViewed == NO"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject objectsMatchingPredicate:context:]( &OBJC_CLASS___GKChallengeCacheObject,  "objectsMatchingPredicate:context:",  v3,  v4));

    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v25 objects:v30 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v26;
      do
      {
        for (j = 0LL; j != v8; j = (char *)j + 1)
        {
          if (*(void *)v26 != v9) {
            objc_enumerationMutation(v6);
          }
          [*(id *)(*((void *)&v25 + 1) + 8 * (void)j) setWasViewed:1];
        }

        id v8 = [v6 countByEnumeratingWithState:&v25 objects:v30 count:16];
      }

      while (v8);
    }

LABEL_18:
  }

  unsigned __int8 v18 = (void *)objc_claimAutoreleasedReturnValue( +[GKBadgeController sharedController]( &OBJC_CLASS___GKBadgeController,  "sharedController",  (void)v21));
  [v18 setBadgeCount:0 forBundleID:GKGameCenterIdentifier badgeType:*(void *)(a1 + 48)];
  unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 bundleIdentifier]);
  [v18 setBadgeCount:0 forBundleID:v20 badgeType:*(void *)(a1 + 48)];
}
  }

  else
  {
    *(void *)(*(void *)(*(void *)(v1 + 48) + 8LL) + 24LL) = 0LL;
  }

    id v5 = (v8 - 1) & v8;
    uint64_t v4 = v9;
  }

  __break(1u);
  return result;
}

  __break(1u);
}

    id v8 = (v14 - 1) & v14;
    uint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    id v7 = v15;
  }

  __break(1u);
  return result;
}

void sub_10000D7C8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 appInitState]);
  unsigned __int8 v4 = [v3 isEqualToString:@"GKAppInitialized"];

  if ((v4 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers(v5);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10002099C();
    }
  }

  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  (*(void (**)(uint64_t, id))(v7 + 16))(v7, [v8 isAppUnlistedAndDisallowed]);
}

uint64_t sub_10000D9DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10000DAB4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10000DED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10000DFBC;
  v10[3] = &unk_10026B520;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 40);
  id v11 = v7;
  uint64_t v12 = v8;
  char v14 = *(_BYTE *)(a1 + 56);
  id v13 = v3;
  id v9 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-logout-user" clientProxy:v6 handler:v10];
}

void sub_10000DFBC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [*(id *)(a1 + 32) setError:v4];
  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers(v5);
  }
  id v7 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v42 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "gk-logout-user result:%@", buf, 0xCu);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) credential]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 altDSID]);
  id v10 = [v9 copy];

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) credential]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 DSID]);
  if (v12)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) credential]);
    char v14 = (void *)objc_claimAutoreleasedReturnValue([v13 DSID]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v14 longLongValue]));
  }

  else
  {
    id v15 = 0LL;
  }

  v36 = _NSConcreteStackBlock;
  uint64_t v37 = 3221225472LL;
  v38 = sub_10000E470;
  v39 = &unk_10026B170;
  int8x16_t v35 = *(int8x16_t *)(a1 + 32);
  id v16 = (id)v35.i64[0];
  int8x16_t v40 = vextq_s8(v35, v35, 8uLL);
  +[GKDispatchGroup waitUntilDone:](&OBJC_CLASS___GKDispatchGroup, "waitUntilDone:", &v36);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (!v17)
  {
    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers(v18);
    }
    id v20 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v42 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "telling authkit DSID %@ is no longer in use",  buf,  0xCu);
    }

    id v21 = objc_alloc_init(&OBJC_CLASS___AKAppleIDAuthenticationController);
    __int128 v22 = v21;
    if (v10)
    {
      if (!os_log_GKGeneral) {
        id v23 = (id)GKOSLoggers(v21);
      }
      __int128 v24 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v42 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "GKAuth:telling authkit account is not in use using altDSID:%@",  buf,  0xCu);
      }

      objc_msgSend(v22, "setAppleIDWithAltDSID:inUse:forService:", v10, 0, 6, *(_OWORD *)&v35, v36, v37, v38, v39);
    }

    else if (v15)
    {
      if (!os_log_GKGeneral) {
        id v25 = (id)GKOSLoggers(v21);
      }
      __int128 v26 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v42 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "GKAuth:telling authkit account is not in use using DSID:%@",  buf,  0xCu);
      }

      objc_msgSend(v22, "setAppleIDWithDSID:inUse:forService:", v15, 0, 6, *(_OWORD *)&v35, v36, v37, v38, v39);
    }

    objc_msgSend(*(id *)(a1 + 40), "notifyWidgetPlayerAuthenticationUpdated", *(_OWORD *)&v35);
  }

  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "localPlayer", *(_OWORD *)&v35));
  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v27 playerID]);
  +[GKClientProxy removeCacheForPlayerID:](&OBJC_CLASS___GKClientProxy, "removeCacheForPlayerID:", v28);

  id v30 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 40), v29), "standardUserDefaults");
  id v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  [v31 removeObjectForKey:@"GKLastPushTokenPlayerID"];
  [v31 removeObjectForKey:@"GKLastPushTokenEnvironment"];
  [v31 removeObjectForKey:@"GKLastPushTokenKey"];
  [v31 removeObjectForKey:@"GKLastPushTokenDateKey"];
  if (*(_BYTE *)(a1 + 56)) {
    [v31 setBool:1 forKey:GKOptedOutOfGameCenter];
  }
  else {
    [v31 removeObjectForKey:GKOptedOutOfGameCenter];
  }
  [v31 synchronize];
  __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](&OBJC_CLASS___GKBadgeController, "sharedController"));
  [v32 unbadgeAllApplications];

  __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  [v33 reportEvent:GKReporterDomainLogin type:GKLoginSignOut];

  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ampController]);
  [v34 updateMetadataWithLocalPlayer:0];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10000E470(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credential]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10000E53C;
  v9[3] = &unk_10026B480;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v6;
  uint64_t v11 = v7;
  id v12 = v3;
  id v8 = v3;
  [v4 removeCredential:v5 completionHandler:v9];
}

void sub_10000E53C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) setError:v3];
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v4);
  }
  id v6 = (void *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = v6;
    v11[0] = 67109120;
    v11[1] = [v3 code];
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "GKAccountService signOutPlayerWithOptOut: removeCred (error:%d)",  (uint8_t *)v11,  8u);
  }

  id v8 = [*(id *)(a1 + 40) setCredential:0];
  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v8);
  }
  id v10 = (void *)os_log_GKAccount;
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG)) {
    sub_1000209C8(v10);
  }
  +[GKClientProxy authenticationDidChange](&OBJC_CLASS___GKClientProxy, "authenticationDidChange");
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10000E690(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "GKAccountService signOutPlayerWithOptOut: notify",  v6,  2u);
  }

  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
}

void sub_10000EAA4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 credential]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerInternal]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 playerID]);
  unint64_t v8 = +[GKAccountServicePrivate lastWelcomeWhatsNewCopyVersionDisplayedForPlayerID:]( &OBJC_CLASS___GKAccountServicePrivate,  "lastWelcomeWhatsNewCopyVersionDisplayedForPlayerID:",  v7);

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers(v9);
  }
  uint64_t v11 = (void *)os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    id v12 = v11;
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v8));
    int v15 = 138412290;
    id v16 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "getLastWelcomeWhatsNewCopyVersionDisplayedForSignedInPlayerWithHandler: WhatsNew copy version displayed: %@",  (uint8_t *)&v15,  0xCu);
  }

  char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v8));
  [*(id *)(a1 + 40) setResult:v14];

  [*(id *)(a1 + 40) setError:0];
  v4[2](v4);
}

void sub_10000EC34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = [v5 unsignedIntegerValue];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v3, v4);
}

void sub_10000F180(id a1)
{
  if (!os_log_GKGeneral) {
    id v1 = (id)GKOSLoggers(a1);
  }
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG)) {
    sub_100020A58();
  }
}

void sub_10000F340(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 credential]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerInternal]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 playerID]);
  unint64_t v8 = +[GKAccountServicePrivate lastPrivacyNoticeVersionDisplayedForPlayerID:]( &OBJC_CLASS___GKAccountServicePrivate,  "lastPrivacyNoticeVersionDisplayedForPlayerID:",  v7);

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers(v9);
  }
  uint64_t v11 = (void *)os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    id v12 = v11;
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v8));
    int v15 = 138412290;
    id v16 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "getLastPrivacyNoticeVersionDisplayedForSignedInPlayerWithHandler: Privacy notice version displayed: %@",  (uint8_t *)&v15,  0xCu);
  }

  char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v8));
  [*(id *)(a1 + 40) setResult:v14];

  [*(id *)(a1 + 40) setError:0];
  v4[2](v4);
}

void sub_10000F4D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = [v5 unsignedIntegerValue];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v3, v4);
}

void sub_10000F888(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 credential]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerInternal]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 playerID]);
  unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKAccountServicePrivate lastPersonalizationVersionDisplayedForPlayerID:]( &OBJC_CLASS___GKAccountServicePrivate,  "lastPersonalizationVersionDisplayedForPlayerID:",  v7));

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers(v9);
  }
  uint64_t v11 = (os_log_s *)os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412290;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "getLastPersonalizationVersionDisplayedForSignedInPlayerWithHandler: personalization version displayed: %@",  (uint8_t *)&v12,  0xCu);
  }

  [*(id *)(a1 + 40) setResult:v8];
  [*(id *)(a1 + 40) setError:0];
  v4[2](v4);
}

void sub_10000F9DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10000FBA0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 credential]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerInternal]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 playerID]);
  unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKAccountServicePrivate lastProfilePrivacyVersionDisplayedForPlayerID:]( &OBJC_CLASS___GKAccountServicePrivate,  "lastProfilePrivacyVersionDisplayedForPlayerID:",  v7));

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers(v9);
  }
  uint64_t v11 = (os_log_s *)os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412290;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "getLastProfilePrivacyVersionDisplayedForSignedInPlayerWithHandler: profile privacy version displayed: %@",  (uint8_t *)&v12,  0xCu);
  }

  [*(id *)(a1 + 40) setResult:v8];
  [*(id *)(a1 + 40) setError:0];
  v4[2](v4);
}

void sub_10000FCF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10001009C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 credential]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerInternal]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 playerID]);
  unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKAccountServicePrivate lastFriendSuggestionsVersionDisplayedForPlayerID:]( &OBJC_CLASS___GKAccountServicePrivate,  "lastFriendSuggestionsVersionDisplayedForPlayerID:",  v7));

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers(v9);
  }
  uint64_t v11 = (os_log_s *)os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412290;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "getLastFriendSuggestionsVersionDisplayedForSignedInPlayerWithHandler: profile privacy version displayed: %@",  (uint8_t *)&v12,  0xCu);
  }

  [*(id *)(a1 + 40) setResult:v8];
  [*(id *)(a1 + 40) setError:0];
  v4[2](v4);
}

void sub_1000101F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100010598(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 credential]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerInternal]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 playerID]);
  unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKAccountServicePrivate lastContactsIntegrationConsentVersionDisplayedForPlayerID:]( &OBJC_CLASS___GKAccountServicePrivate,  "lastContactsIntegrationConsentVersionDisplayedForPlayerID:",  v7));

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers(v9);
  }
  uint64_t v11 = (os_log_s *)os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412290;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "getLastContactsIntegrationConsentVersionDisplayedForSignedInPlayerWithHandler: Contacts Integration Consent version displayed: %@",  (uint8_t *)&v12,  0xCu);
  }

  [*(id *)(a1 + 40) setResult:v8];
  [*(id *)(a1 + 40) setError:0];
  v4[2](v4);
}

void sub_1000106EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

LABEL_13:
  return v19;
}

    uint64_t v18 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(-[GKClientProxy replyQueue](self, "replyQueue"));
    dispatch_async(v18, v6);
    id v16 = 0LL;
    goto LABEL_14;
  }

    unint64_t v8 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v12 << 6);
    uint64_t v7 = v12;
  }

  __break(1u);
  return result;
}

LABEL_32:
  return v12;
}

  uint64_t v2 = *(void *)(v3 + 272);
  v39 = *(void *)(v3 + 256);
  sub_100132040(v82, a2);
  sub_100132050(v87);
  int8x16_t v40 = swift_release(v88);
  a1 = sub_10013262C(v40, v41);
  if (v2 >= v39) {
    goto LABEL_44;
  }
  id v5 = *(void *)(v3 + 272);
  *(void *)(v3 + 264) = v7;
  uint64_t v9 = 1;
  unint64_t v8 = *(void *)(v3 + 256);
LABEL_34:
  id v42 = *(void *)(v3 + 216);
  v43 = v8 - v5;
  v44 = __OFSUB__(v8, v5);
  int v12 = v5 + v42;
  if (__OFADD__(v5, v42))
  {
    if (!v44)
    {
      if ((v43 & 0x8000000000000000LL) == 0 && v43 < v42)
      {
        int v12 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_49;
      }

      __break(1u);
LABEL_89:
      sub_10013249C();
      v80 = "UnsafeMutablePointer.initialize overlapping range";
      v81 = 49LL;
LABEL_90:
      sub_100132790((uint64_t)"Fatal error", 11LL, 2LL, (uint64_t)v80, v81, v79, (uint64_t)"Swift/UnsafePointer.swift");
      sub_10013240C();
      return;
    }

    __break(1u);
    goto LABEL_79;
  }

  if (v44)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }

  v48 = v5 + v42;
  if ((v43 & 0x8000000000000000LL) == 0 && v43 < v42)
  {
LABEL_49:
    v48 = v12;
    int v12 = v8;
  }

  *(void *)(v3 + 272) = v48;
  uint64_t v2 = v12 - v5;
  if (v12 < v5) {
    goto LABEL_71;
  }
  if (!v9)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }

  if (v5 < 0)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  if (v8 < v12)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }

  v49 = *(void *)(v3 + 208);
  v50 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  v51 = swift_bridgeObjectRetain(v49);
  v52 = swift_unknownObjectRetain_n(v51, 2LL);
  v53 = (void *)swift_dynamicCastClass(v52, v50);
  if (!v53)
  {
    sub_1001322A0(0LL, v54);
    v53 = _swiftEmptyArrayStorage;
  }

  uint64_t v7 = (void *)v53[2];
  a1 = swift_release(v53);
  id v4 = *(void *)(v3 + 208);
  if (v7 != (void *)v2)
  {
LABEL_75:
    v55 = sub_100132454(a1, a2);
    if (v12 == v5)
    {
LABEL_59:
      uint64_t v7 = _swiftEmptyArrayStorage;
      goto LABEL_60;
    }

    if (v2 >= 1)
    {
      v72 = sub_100129274(&qword_1002B8380);
      v73 = (void *)sub_10012AAEC(v72, 16 * v2 + 32);
      sub_100132634(v73);
LABEL_82:
      v74 = *(void *)(v3 + 208) + 32LL;
      v75 = v7 + 4;
      v76 = v74 + 16 * v5;
      v77 = v74 + 16 * v12;
      if (v76 >= (unint64_t)&v7[2 * v2 + 4] || (unint64_t)v75 >= v77)
      {
        v55 = swift_arrayInitWithCopy(v75);
        goto LABEL_60;
      }

      goto LABEL_89;
    }

  __break(1u);
}

uint64_t sub_1000113C4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_100011D44(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100011DE8;
  v7[3] = &unk_10026B590;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = v3;
  id v6 = v3;
  +[GKCloudKitMultiplayer primaryPlayerWithHandler:]( &OBJC_CLASS___GKCloudKitMultiplayer,  "primaryPlayerWithHandler:",  v7);
}

void sub_100011DE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG))
  {
    sub_100020B44();
    if (!v5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  if (v5)
  {
LABEL_5:
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 bundleIdentifier]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  +[GKCloudKitMultiplayerUtils isCloudDriveEnabledForBundleID:]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "isCloudDriveEnabledForBundleID:",  v10)));
    [*(id *)(a1 + 32) setResult:v11];
  }

LABEL_6:
  [*(id *)(a1 + 32) setError:v7];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

  +[GKClientProxy authenticationDidChange](&OBJC_CLASS___GKClientProxy, "authenticationDidChange");
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v4);
  }
}

LABEL_7:
    if (!os_log_GKGeneral) {
      int v12 = (id)GKOSLoggers(v11);
    }
    id v13 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      char v14 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v46 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Going to server for games played descriptors for : %@",  buf,  0xCu);
    }

    int v15 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v16 = *(void **)(a1 + 32);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) localPlayer]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 playerID]);
    LOBYTE(v16) = [v16 isEqualToString:v18];

    if ((v16 & 1) == 0) {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v15,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 32),  @"requested-player-id");
    }
    if (*(void *)(a1 + 48) && v7) {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v15, "setObject:forKeyedSubscript:");
    }
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v6 objectID]);
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_10003EFFC;
    v36[3] = &unk_10026CD90;
    uint64_t v37 = *(id *)(a1 + 40);
    v38 = v19;
    v39 = *(id *)(a1 + 32);
    int8x16_t v40 = *(id *)(a1 + 48);
    __int128 v22 = v6;
    id v23 = *(void *)(a1 + 56);
    __int128 v24 = *(void **)(a1 + 64);
    v41 = v22;
    id v42 = v23;
    v43 = v24;
    v44 = v5;
    id v25 = v19;
    [v20 issueRequest:v15 bagKey:@"gk-get-games-played-summaries" clientProxy:v21 handler:v36];

LABEL_28:
    goto LABEL_29;
  }

  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  8LL));
  [*(id *)(a1 + 40) setError:v26];

  v5[2](v5);
LABEL_29:
}

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectWithID:v7]);
    int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 entries]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 _gkValuesForKeyPath:@"challengeID"]);

    id v10 = *(void *)(a1 + 40);
    char v14 = 1LL;
LABEL_7:
    (*(void (**)(uint64_t, void *, BOOL, uint64_t))(v10 + 16))(v10, v13, v6 != 0, v14);
  }

  return v12;
}

  return v5;
}

  __int128 v24 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v9 replyQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000DA72C;
  block[3] = &unk_100271868;
  __int128 v27 = v7;
  __int128 v28 = v35;
  id v25 = v7;
  dispatch_group_notify(v8, v24, block);

  _Block_object_dispose(v35, 8);
}
}

  id v6 = self;
  return v6;
}

void sub_100011F08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = [v5 BOOLValue];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v3, v4);
}

void sub_10001216C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKChallengeServicePrivate,  "serviceFromService:",  *(void *)(a1 + 32)));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100012204;
  v6[3] = &unk_10026B5B8;
  id v7 = v3;
  id v5 = v3;
  [v4 getCountOfChallengesWithHandler:v6];
}

uint64_t sub_100012204(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100012210(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v6,  v7));

  if ([v8 supportsTurnBasedMultiplayer])
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    _DWORD v11[2] = sub_10001234C;
    v11[3] = &unk_10026B4F8;
    int v12 = v4;
    [v9 issueRequest:0 bagKey:@"gk-tb-get-turn-counts" clientProxy:v10 handler:v11];
  }

  else
  {
    v4[2](v4);
  }
}

uint64_t sub_10001234C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2 && !a3)
  {
    uint64_t v13 = a1;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([a2 objectForKey:@"turn-counts"]);
    id v3 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v16;
      do
      {
        for (i = 0LL; i != v4; i = (char *)i + 1)
        {
          if (*(void *)v16 != v5) {
            objc_enumerationMutation(obj);
          }
          id v7 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
          id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"turn-count"]);
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"game-descriptor"]);
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"bundle-id"]);
          if (v10)
          {
            uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](&OBJC_CLASS___GKBadgeController, "sharedController"));
            objc_msgSend( v11,  "setBadgeCount:forBundleID:badgeType:",  objc_msgSend(v8, "unsignedIntegerValue"),  v10,  2);
          }
        }

        id v4 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v4);
    }

    a1 = v13;
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100012500(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](&OBJC_CLASS___GKBadgeController, "sharedController"));
  [v3 badgeAllApplications];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
  [v3 registerBadgePermissionForBundleID:v2 completionHandler:&stru_10026B648];
}

void sub_1000126EC(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKTrace;
  BOOL v4 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
  if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKAccountService _authenticateUsername", buf, 2u);
  }

  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v4);
  }
  id v6 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v38 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "_authenticateUsername:%@", buf, 0xCu);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKAccountService.m",  864LL,  "-[GKAccountServicePrivate _authenticateUsername:password:altDSID:validateOnly:handler:]_block_invoke"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v8));

  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForServerCode:reason:]( &OBJC_CLASS___NSError,  "userErrorForServerCode:reason:",  5000LL,  0LL));
  [v9 setError:v10];

  uint64_t v12 = *(void *)(a1 + 32);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13)
    {
      if (*(void *)(a1 + 48)) {
        uint64_t v12 = *(void *)(a1 + 48);
      }
      v35[0] = @"username";
      v35[1] = @"password";
      v36[0] = v12;
      v36[1] = v13;
      v35[2] = @"validatePasswordOnly";
      char v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 72)));
      v36[2] = v14;
      v35[3] = @"udid";
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[GKDevice currentDevice](&OBJC_CLASS___GKDevice, "currentDevice"));
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 udid]);
      v36[3] = v16;
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v36,  v35,  4LL));

      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472LL;
      v29[2] = sub_100012B28;
      v29[3] = &unk_10026B6E8;
      v29[4] = *(void *)(a1 + 56);
      id v30 = v17;
      id v31 = v9;
      id v32 = *(id *)(a1 + 32);
      id v33 = *(id *)(a1 + 48);
      char v34 = *(_BYTE *)(a1 + 72);
      id v18 = v17;
      [v31 perform:v29];
    }
  }

  if (*(void *)(a1 + 64))
  {
    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers(v11);
    }
    id v20 = (os_log_s *)os_log_GKTrace;
    BOOL v21 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
    if (v21)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "_authenticateUsername: notify", buf, 2u);
    }

    if (!os_log_GKGeneral) {
      id v22 = (id)GKOSLoggers(v21);
    }
    id v23 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "_authenticateUsername: notify", buf, 2u);
    }

    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
    id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 replyQueue]);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_1000134B0;
    v26[3] = &unk_10026B030;
    id v28 = *(id *)(a1 + 64);
    id v27 = v9;
    [v27 notifyOnQueue:v25 block:v26];
  }
}

void sub_100012B28(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transport]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100012C14;
  v9[3] = &unk_10026B6C0;
  uint64_t v5 = *(void *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v7;
  char v15 = *(_BYTE *)(a1 + 72);
  id v14 = v3;
  id v8 = v3;
  [v4 postRequest:v5 forBagKey:@"gk-authenticate-user" response:v9];
}

void sub_100012C14(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100020BAC();
    }
  }

  [*(id *)(a1 + 32) setError:v7];
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v5 representedItem]);
  id v10 = (void *)v9;
  if (v9)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(v9);
    }
    id v12 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "_authenticateUsername:Result present for post request call for gk-authenticate-user",  buf,  2u);
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:GKRequestStatusKey]);
    id v14 = [v13 integerValue];

    char v15 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:GKPlayerIDKey]);
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"alias"]);
    uint64_t v17 = objc_claimAutoreleasedReturnValue([v10 objectForKey:@"auth-token"]);
    id v18 = (void *)v17;
    id v38 = v14;
    if (v15 && v17)
    {
      id v36 = v5;
      int8x16_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredential internalRepresentation]( &OBJC_CLASS___GKPlayerCredential,  "internalRepresentation"));
      id v20 = v16;
      BOOL v21 = (void *)objc_claimAutoreleasedReturnValue( +[GKLocalPlayerInternal internalRepresentation]( &OBJC_CLASS___GKLocalPlayerInternal,  "internalRepresentation"));
      [v21 setPlayerID:v15];
      [v21 setAccountName:*(void *)(a1 + 40)];
      uint64_t v37 = v20;
      [v21 setAlias:v20];
      if (*(void *)(a1 + 48)) {
        objc_msgSend(v19, "setAltDSID:");
      }
      +[GKContactsIntegrationUserSettings applySettingsToObject:fromResults:]( &OBJC_CLASS___GKContactsIntegrationUserSettings,  "applySettingsToObject:fromResults:",  v21,  v10);
      [v19 setPlayerInternal:v21];
      [v19 setAuthenticationToken:v18];
      [v19 setAccountName:*(void *)(a1 + 40)];
      id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
      objc_msgSend(v19, "setEnvironment:", objc_msgSend(v22, "environment"));

      if (v14 == (id)5029) {
        uint64_t v23 = 12LL;
      }
      else {
        uint64_t v23 = 14LL;
      }
      [v19 setScope:v23];
      __int128 v24 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKUtilityServicePrivate,  "serviceFromService:",  *(void *)(a1 + 56)));
      id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 credential]);
      [v25 setAuthenticationToken:v18];

      __int128 v26 = *(void **)(a1 + 32);
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472LL;
      v39[2] = sub_1000130B4;
      v39[3] = &unk_10026B080;
      id v40 = v19;
      id v41 = v35;
      id v42 = v26;
      id v27 = v35;
      id v28 = v19;
      [v26 perform:v39];
      [*(id *)(a1 + 56) notifyWidgetPlayerAuthenticationUpdated];
      [*(id *)(a1 + 32) setObject:v28 forKeyedSubscript:@"credential"];

      id v5 = v36;
    }

    else
    {
      id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

      if (v31) {
        goto LABEL_30;
      }
      if (!os_log_GKGeneral) {
        id v33 = (id)GKOSLoggers(v32);
      }
      uint64_t v37 = v16;
      char v34 = (os_log_s *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "_authenticateUsername:Server Error when posting request for gk-authenticat-user",  buf,  2u);
      }

      BOOL v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForServerCode:reason:]( &OBJC_CLASS___NSError,  "userErrorForServerCode:reason:",  3LL,  @"no error, but missing playerID or token"));
      [*(id *)(a1 + 32) setError:v21];
    }

    __int128 v16 = v37;
LABEL_30:
    if (*(_BYTE *)(a1 + 72) && v38 == (id)5029) {
      [*(id *)(a1 + 32) setError:0];
    }

    goto LABEL_34;
  }

  if (!os_log_GKGeneral) {
    id v29 = (id)GKOSLoggers(0LL);
  }
  id v30 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "_authenticateUsername:No result for Post request call",  buf,  2u);
  }

LABEL_34:
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

  v76[0] = @"bucket-id";
  id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v7 playerGroup]));
  v77[0] = v36;
  v76[1] = @"min-players";
  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( NSNumber,  "numberWithUnsignedChar:",  [v7 maxPlayers]));
  v77[1] = v37;
  v76[2] = @"max-players";
  id v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( NSNumber,  "numberWithUnsignedChar:",  [v7 maxPlayers]));
  v77[2] = v38;
  v76[3] = @"player-attributes";
  v39 = [v7 playerAttributes];
  if (v39) {
    id v40 = v39;
  }
  else {
    id v40 = 0xFFFFFFFFLL;
  }
  id v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%#.8x", v40));
  v76[4] = @"invites";
  v77[3] = v41;
  v77[4] = v59;
  id v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v77,  v76,  5LL));
  v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v42));

  v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKTurnBasedService.m",  151LL,  "-[GKTurnBasedService createTurnBasedGameForMatchRequest:individualMessages:handler:]"));
  v45 = (void *)objc_claimAutoreleasedReturnValue(-[GKService transactionGroupWithName:](self, "transactionGroupWithName:", v44));

  v46 = (void *)objc_claimAutoreleasedReturnValue(-[GKService clientProxy](self, "clientProxy"));
  v47 = (void *)objc_claimAutoreleasedReturnValue([v46 replyQueue]);
  v64[0] = _NSConcreteStackBlock;
  v64[1] = 3221225472LL;
  v64[2] = sub_100080178;
  v64[3] = &unk_10026B080;
  v48 = v45;
  v65 = v48;
  v66 = self;
  v67 = v43;
  v49 = v43;
  [v48 performOnQueue:v47 block:v64];

  v50 = (void *)objc_claimAutoreleasedReturnValue(-[GKService clientProxy](self, "clientProxy"));
  v51 = (void *)objc_claimAutoreleasedReturnValue([v50 replyQueue]);
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472LL;
  v60[2] = sub_100080484;
  v60[3] = &unk_10026B148;
  v61 = v48;
  v62 = self;
  v63 = v54;
  v52 = v54;
  v53 = v48;
  [v53 notifyOnQueue:v51 block:v60];
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    swift_release(v71);
LABEL_35:
    sub_1001449E4();
    sub_1001324F4();
    sub_1001446D0();
    sub_1001447A4();
    sub_100144838();
    sub_100144AFC();
    sub_100145104();
    return sub_100144944(*(uint64_t (**)(void))(v28 + 8));
  }

  v72 = 1LL;
LABEL_21:
  v74 = (v101 - 1) & v101;
  v73 = __clz(__rbit64(v101)) + (v72 << 6);
LABEL_12:
  *(void *)(v28 + 20_Block_object_dispose(va, 8) = v72;
  *(void *)(v28 + 216) = v74;
  v75 = *(void *)(v28 + 136);
  v76 = *(void *)(v28 + 144);
  v77 = *(void *)(v28 + 120);
  sub_100144C98( v76,  v71[6] + *(void *)(v63 + 72) * v73,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 16));
  sub_100144C98(v75, v76, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 32));
  v78 = sub_100144C20();
  v80 = v79(v78);
  if (v80 == v69)
  {
    v153 = (void *)(v28 + 40);
    v81 = *(void *)(v28 + 136);
    v82 = *(void *)(v28 + 112);
    v83 = *(void *)(v28 + 96);
    sub_100144888(*(void *)(v28 + 128));
    v84 = sub_100144C98(v82, v81, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 32));
  }

  else
  {
    if (v80 == *(_DWORD *)(v28 + 252))
    {
      sub_10014481C();
      sub_10014470C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 32));
      v97 = (void *)swift_task_alloc(dword_1002B863C);
      *(void *)(v28 + 240) = v97;
      *v97 = v28;
      v97[1] = sub_10013F4D4;
      sub_100144960(*(void *)(v28 + 104));
      sub_100144B7C();
      return sub_10013DB7C(v98);
    }

    v105 = *(void *)(v28 + 128);
    v104 = *(void *)(v28 + 136);
    if (v80 != *(_DWORD *)(v28 + 256))
    {
      sub_100144FE4();
      sub_1001447E8(*(uint64_t (**)(uint64_t, uint64_t))(v105 + 8));
      goto LABEL_35;
    }

    v153 = (void *)(v28 + 40);
    v106 = *(void *)(v28 + 112);
    v107 = *(void *)(v28 + 88);
    v108 = *(void *)(v28 + 96);
    sub_1001447E8(*(uint64_t (**)(uint64_t, uint64_t))(v105 + 96));
    v109 = sub_100129274(&qword_1002B8640);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 32))(v106, v104 + *(int *)(v109 + 48), v107);
    v110 = sub_100145058();
    sub_10014471C(v110);
    v84 = sub_100145080(v104, *(uint64_t (**)(uint64_t, uint64_t))(v108 + 8));
  }

  v111 = *(void *)(v28 + 64);
  if (!*(void *)(v111 + 16)
    || (v84 = sub_100144A04(),
        v112 = v84 & ~(-1LL << *(_BYTE *)(v111 + 32)),
        ((*(void *)(v111 + ((v112 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v112) & 1) == 0))
  {
LABEL_31:
    v120 = *(void *)(v28 + 112);
    v122 = *(void *)(v28 + 88);
    v121 = *(void *)(v28 + 96);
    v123 = static os_log_type_t.info.getter(v84);
    a15 = 0LL;
    a16 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(112LL);
    v124 = a16;
    *(void *)(v28 + 16) = a15;
    *(void *)(v28 + 24) = v124;
    v155._countAndFlagsBits = 0xD000000000000035LL;
    v155._object = (void *)0x800000010024C150LL;
    sub_100144C18(v155);
    _print_unlocked<A, B>(_:_:)(v120, v28 + 16, v122);
    sub_100144D78(v120, *(uint64_t (**)(uint64_t, uint64_t))(v121 + 8));
    sub_1001449F8(0xD000000000000039LL, (uint64_t)", but result is not present in full results set. Ignoring");
    v126 = *(void *)(v28 + 16);
    v125 = *(void *)(v28 + 24);
    sub_100144998();
    sub_100135A20(v125);
    v127 = (os_log_s *)sub_100135A10();
    v128 = sub_100144F3C(v127);
    v129 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 200);
    v130 = *(void *)(v28 + 176);
    v131 = *(void *)(v28 + 152);
    v132 = *(void **)(v28 + 72);
    if (v128)
    {
      v151 = *(void **)(v28 + 72);
      v133 = (uint8_t *)sub_10012CE30(12LL);
      v149 = v130;
      v134 = sub_10012CE30(32LL);
      a15 = v134;
      *(_DWORD *)v133 = 136315138;
      sub_1001325D8();
      v136 = sub_100144D24(v126, v135, &a15);
      v137 = sub_100144D58(v136, v153);
      sub_100144AD8((uint64_t)v137, v138);
      sub_100135A44(v125);
      sub_10012CE90((void *)&_mh_execute_header, v127, v123, "Nearby - %s", v133);
      sub_10012CE88(v134, v139, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v134);
      sub_10012CE24((uint64_t)v133);

      v140 = sub_100144D78(v149, v129);
      sub_100132454(v140, v141);
      v71 = v151;
    }

    else
    {
      sub_100135A28(v125);

      v142 = v129(v130, v131);
      sub_100132454(v142, v143);
      v71 = v132;
    }

    goto LABEL_34;
  }

  sub_100144A38();
  while (1)
  {
    v115 = *(void *)(v28 + 104);
    v114 = *(void *)(v28 + 112);
    v117 = *(void *)(v28 + 88);
    v116 = *(void *)(v28 + 96);
    ((void (*)(uint64_t, unint64_t, uint64_t))v111)( v115,  *(void *)(v113 + 48) + v112 * (void)v59,  v117);
    sub_10014441C( &qword_1002B8648,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NWBrowser.Result,  (uint64_t)&protocol conformance descriptor for NWBrowser.Result);
    LOBYTE(v114) = dispatch thunk of static Equatable.== infix(_:_:)(v115, v114, v117, v118);
    v119 = *(uint64_t (**)(uint64_t, uint64_t))(v116 + 8);
    *(void *)(v28 + 224) = v119;
    v84 = sub_100144D78(v115, v119);
    if ((v114 & 1) != 0) {
      break;
    }
    v113 = *(void *)(v28 + 64);
    v112 = (v112 + 1) & v32;
    if (((*(void *)(v113 + ((v112 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v112) & 1) == 0) {
      goto LABEL_31;
    }
  }

  v144 = (void *)swift_task_alloc(dword_1002B8654);
  *(void *)(v28 + 232) = v144;
  *v144 = v28;
  v144[1] = sub_10013F0EC;
  sub_100144960(*(void *)(v28 + 112));
  sub_100144B7C();
  return sub_10013D4C8(v145);
}

void sub_1000130B4(id *a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] altDSID]);

  if (v4)
  {
    id v7 = a1[4];
    id v6 = a1[5];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10001347C;
    v18[3] = &unk_10026B2A0;
    id v8 = &v19;
    uint64_t v9 = &v20;
    id v19 = a1[6];
    id v20 = v3;
    id v10 = v3;
    [v6 setPrimaryCredential:v7 completionHandler:v18];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(v5);
    }
    id v12 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v13 = a1[4];
      *(_DWORD *)buf = 138412290;
      id v27 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "missing altDSID for credential:%@ will try to get it from IDMS",  buf,  0xCu);
    }

    id v14 = a1[4];
    id v15 = a1[5];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_10001329C;
    v21[3] = &unk_10026B698;
    id v8 = &v22;
    id v16 = v14;
    id v22 = v16;
    uint64_t v9 = &v23;
    id v23 = a1[5];
    id v24 = a1[6];
    id v25 = v3;
    id v17 = v3;
    [v15 getAltDSIDFromIDMSForCredential:v16 completionHandler:v21];
  }
}

void sub_10001329C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v6) {
    goto LABEL_5;
  }
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  id v6 = (id)os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
  if ((_DWORD)v6)
  {
    sub_100020C0C();
    if (!v5) {
      goto LABEL_11;
    }
  }

  else
  {
LABEL_5:
    if (!v5) {
      goto LABEL_11;
    }
  }

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v6);
  }
  id v10 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v18 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "fixed the credential (%@) with a missing altDSID",  buf,  0xCu);
  }

  [*(id *)(a1 + 32) setAltDSID:v5];
LABEL_11:
  uint64_t v13 = *(void *)(a1 + 32);
  id v12 = *(void **)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100013448;
  v14[3] = &unk_10026B2A0;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  [v12 setPrimaryCredential:v13 completionHandler:v14];
}

uint64_t sub_100013448(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) setError:a2];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10001347C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) setError:a2];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000134B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"credential"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000136A8(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKTrace;
  BOOL v4 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
  if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKAccountService _authenticateUsername", buf, 2u);
  }

  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v4);
  }
  id v6 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v39 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "_authenticateUsername:%@", buf, 0xCu);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKAccountService.m",  1014LL,  "-[GKAccountServicePrivate _authenticateUsername:password:altDSID:validateOnly:active:handler:]_block_invoke"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v8));

  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForServerCode:reason:]( &OBJC_CLASS___NSError,  "userErrorForServerCode:reason:",  5000LL,  0LL));
  [v9 setError:v10];

  uint64_t v12 = *(void *)(a1 + 32);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13)
    {
      if (*(void *)(a1 + 48)) {
        uint64_t v12 = *(void *)(a1 + 48);
      }
      v36[0] = @"username";
      v36[1] = @"password";
      v37[0] = v12;
      v37[1] = v13;
      v36[2] = @"validatePasswordOnly";
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 72)));
      v37[2] = v14;
      v36[3] = @"udid";
      id v15 = (void *)objc_claimAutoreleasedReturnValue(+[GKDevice currentDevice](&OBJC_CLASS___GKDevice, "currentDevice"));
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 udid]);
      v37[3] = v16;
      id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v37,  v36,  4LL));

      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472LL;
      v29[2] = sub_100013AEC;
      v29[3] = &unk_10026B788;
      v29[4] = *(void *)(a1 + 56);
      id v30 = v17;
      id v31 = v9;
      id v32 = *(id *)(a1 + 32);
      id v33 = *(id *)(a1 + 48);
      char v34 = *(_BYTE *)(a1 + 73);
      char v35 = *(_BYTE *)(a1 + 72);
      id v18 = v17;
      [v31 perform:v29];
    }
  }

  if (*(void *)(a1 + 64))
  {
    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers(v11);
    }
    id v20 = (os_log_s *)os_log_GKTrace;
    BOOL v21 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
    if (v21)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "_authenticateUsername: notify", buf, 2u);
    }

    if (!os_log_GKGeneral) {
      id v22 = (id)GKOSLoggers(v21);
    }
    id v23 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "_authenticateUsername: notify", buf, 2u);
    }

    id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
    id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 replyQueue]);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_1000145D8;
    v26[3] = &unk_10026B030;
    id v28 = *(id *)(a1 + 64);
    id v27 = v9;
    [v27 notifyOnQueue:v25 block:v26];
  }
}

void sub_100013AEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transport]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100013BD8;
  v9[3] = &unk_10026B760;
  uint64_t v5 = *(void *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v7;
  __int16 v15 = *(_WORD *)(a1 + 72);
  id v14 = v3;
  id v8 = v3;
  [v4 postRequest:v5 forBagKey:@"gk-authenticate-user" response:v9];
}

void sub_100013BD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100020BAC();
    }
  }

  [*(id *)(a1 + 32) setError:v7];
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v5 representedItem]);
  id v10 = (void *)v9;
  if (v9)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(v9);
    }
    id v12 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "_authenticateUsername:Result present for post request call for gk-authenticate-user",  buf,  2u);
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:GKRequestStatusKey]);
    id v14 = [v13 integerValue];

    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:GKPlayerIDKey]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"alias"]);
    uint64_t v17 = objc_claimAutoreleasedReturnValue([v10 objectForKey:@"auth-token"]);
    id v18 = (void *)v17;
    id v39 = v14;
    if (v15 && v17)
    {
      id v37 = v5;
      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
      id v20 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredential internalRepresentation]( &OBJC_CLASS___GKPlayerCredential,  "internalRepresentation"));
      BOOL v21 = v16;
      id v22 = (void *)objc_claimAutoreleasedReturnValue( +[GKLocalPlayerInternal internalRepresentation]( &OBJC_CLASS___GKLocalPlayerInternal,  "internalRepresentation"));
      [v22 setPlayerID:v15];
      [v22 setAccountName:*(void *)(a1 + 40)];
      id v38 = v21;
      [v22 setAlias:v21];
      if (*(void *)(a1 + 48)) {
        objc_msgSend(v20, "setAltDSID:");
      }
      [v20 setPlayerInternal:v22];
      [v20 setAuthenticationToken:v18];
      [v20 setAccountName:*(void *)(a1 + 40)];
      id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
      objc_msgSend(v20, "setEnvironment:", objc_msgSend(v23, "environment"));

      if (*(_BYTE *)(a1 + 72)) {
        unsigned int v24 = 12;
      }
      else {
        unsigned int v24 = 0;
      }
      if (v14 == (id)5029) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = v24 | 2;
      }
      [v20 setScope:v25];
      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKUtilityServicePrivate,  "serviceFromService:",  *(void *)(a1 + 56)));
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 credential]);
      [v27 setAuthenticationToken:v18];

      id v28 = *(void **)(a1 + 32);
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3221225472LL;
      v40[2] = sub_100014074;
      v40[3] = &unk_10026B548;
      id v41 = v20;
      id v42 = v19;
      char v44 = *(_BYTE *)(a1 + 72);
      id v43 = v28;
      id v29 = v19;
      id v30 = v20;
      [v28 perform:v40];
      [*(id *)(a1 + 56) notifyWidgetPlayerAuthenticationUpdated];
      [*(id *)(a1 + 32) setObject:v30 forKeyedSubscript:@"credential"];

      id v5 = v37;
    }

    else
    {
      id v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

      if (v33) {
        goto LABEL_33;
      }
      if (!os_log_GKGeneral) {
        id v35 = (id)GKOSLoggers(v34);
      }
      id v38 = v16;
      id v36 = (os_log_s *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "_authenticateUsername:Server Error when posting request for gk-authenticat-user",  buf,  2u);
      }

      id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForServerCode:reason:]( &OBJC_CLASS___NSError,  "userErrorForServerCode:reason:",  3LL,  @"no error, but missing playerID or token"));
      [*(id *)(a1 + 32) setError:v22];
    }

    id v16 = v38;
LABEL_33:
    if (*(_BYTE *)(a1 + 73) && v39 == (id)5029) {
      [*(id *)(a1 + 32) setError:0];
    }

    goto LABEL_37;
  }

  if (!os_log_GKGeneral) {
    id v31 = (id)GKOSLoggers(0LL);
  }
  id v32 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "_authenticateUsername:No result for Post request call",  buf,  2u);
  }

LABEL_37:
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

  if (v7 < 0) {
    id v23 = v7;
  }
  else {
    id v23 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_1001325D8();
  id v10 = _CocoaArrayWrapper.endIndex.getter(v23);
  sub_100132454(v10, v24);
LABEL_9:
  id v11 = v10 + v8;
  if (__OFADD__(v10, v8))
  {
    __break(1u);
LABEL_42:
    if (v7 < 0) {
      uint64_t v25 = v7;
    }
    else {
      uint64_t v25 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001325D8();
    id v14 = _CocoaArrayWrapper.endIndex.getter(v25);
    sub_100132454(v14, v26);
    goto LABEL_17;
  }

  uint64_t v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *BOOL v4 = v7;
  id v10 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000LL) == 0 && (v7 & 0x4000000000000000LL) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_20;
    }
    id v10 = 1LL;
  }

  id v14 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_17:
  if (v14 <= v11) {
    id v14 = v11;
  }
  sub_1001325D8();
  uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1LL, v7);
  swift_bridgeObjectRelease(*v4, v15);
  *BOOL v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
LABEL_20:
  id v16 = (void *)(v13 + 32 + 8 * v6);
  uint64_t v17 = type metadata accessor for NWProtocolOptions(0LL);
  uint64_t result = swift_arrayDestroy(v16, v9, v17);
  if (!v8)
  {
LABEL_28:
    *id v16 = v3;
    return specialized Array._endMutation()(result);
  }

  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0) {
      id v27 = v7;
    }
    else {
      id v27 = v13;
    }
    sub_1001325D8();
    id v19 = _CocoaArrayWrapper.endIndex.getter(v27);
    sub_100132454(v19, v28);
  }

  else
  {
    id v19 = *(void *)(v13 + 16);
  }

  if (__OFSUB__(v19, v5))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = sub_10016A21C(v13 + 32 + 8 * v5, v19 - v5, v16 + 1);
    if (!((unint64_t)v7 >> 62))
    {
      id v20 = *(void *)(v13 + 16);
      goto LABEL_26;
    }
  }

  if (v7 < 0) {
    id v29 = v7;
  }
  else {
    id v29 = v13;
  }
  sub_1001325D8();
  id v20 = _CocoaArrayWrapper.endIndex.getter(v29);
  uint64_t result = sub_100132454(v20, v30);
LABEL_26:
  if (!__OFADD__(v20, v8))
  {
    *(void *)(v13 + 16) = v20 + v8;
    goto LABEL_28;
  }

  __break(1u);
  return result;
}

void sub_100014074(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) altDSID]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    if (*(_BYTE *)(a1 + 56))
    {
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      v19[2] = sub_100014570;
      v19[3] = &unk_10026B2A0;
      id v8 = &v20;
      id v20 = *(id *)(a1 + 48);
      uint64_t v9 = &v21;
      id v21 = v3;
      [v6 setPrimaryCredential:v7 completionHandler:v19];
    }

    else
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      void v16[2] = sub_1000145A4;
      v16[3] = &unk_10026B2A0;
      id v8 = &v17;
      id v17 = *(id *)(a1 + 48);
      uint64_t v9 = &v18;
      id v18 = v3;
      [v6 setCredential:v7 completionHandler:v16];
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers(v5);
    }
    id v11 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v29 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "missing altDSID for credential:%@ will try to get it from IDMS",  buf,  0xCu);
    }

    uint64_t v13 = *(void **)(a1 + 32);
    id v14 = *(void **)(a1 + 40);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_1000142DC;
    v22[3] = &unk_10026B738;
    id v8 = &v23;
    id v15 = v13;
    id v23 = v15;
    char v27 = *(_BYTE *)(a1 + 56);
    uint64_t v9 = &v24;
    id v24 = *(id *)(a1 + 40);
    id v25 = *(id *)(a1 + 48);
    id v26 = v3;
    [v14 getAltDSIDFromIDMSForCredential:v15 completionHandler:v22];
  }
}

void sub_1000142DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v6) {
    goto LABEL_5;
  }
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  id v6 = (id)os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
  if ((_DWORD)v6)
  {
    sub_100020C0C();
    if (!v5) {
      goto LABEL_11;
    }
  }

  else
  {
LABEL_5:
    if (!v5) {
      goto LABEL_11;
    }
  }

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v6);
  }
  id v10 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v23 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "fixed the credential (%@) with a missing altDSID",  buf,  0xCu);
  }

  [*(id *)(a1 + 32) setAltDSID:v5];
LABEL_11:
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v12 = *(void **)(a1 + 40);
  if (*(_BYTE *)(a1 + 64))
  {
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_100014508;
    v19[3] = &unk_10026B2A0;
    id v14 = &v20;
    id v20 = *(id *)(a1 + 48);
    id v15 = &v21;
    id v21 = *(id *)(a1 + 56);
    [v12 setPrimaryCredential:v13 completionHandler:v19];
  }

  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_10001453C;
    v16[3] = &unk_10026B2A0;
    id v14 = &v17;
    id v17 = *(id *)(a1 + 48);
    id v15 = &v18;
    id v18 = *(id *)(a1 + 56);
    [v12 setCredential:v13 completionHandler:v16];
  }
}

uint64_t sub_100014508(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) setError:a2];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10001453C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) setError:a2];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100014570(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) setError:a2];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1000145A4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) setError:a2];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000145D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"credential"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000146E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) authenticationToken]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_100014898(uint64_t a1)
{
  uint64_t v27 = 0LL;
  id v28 = &v27;
  uint64_t v29 = 0x3032000000LL;
  id v30 = sub_100014BE4;
  id v31 = sub_100014BF4;
  id v32 = (id)objc_claimAutoreleasedReturnValue( +[GKAuthenticateResponse internalRepresentation]( &OBJC_CLASS___GKAuthenticateResponse,  "internalRepresentation"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credential]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 playerInternal]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 playerID]);
  [(id)v28[5] setPlayerID:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKAccountService.m",  1190LL,  "-[GKAccountServicePrivate _constructAuthenticationResponseWithError:handler:]_block_invoke"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v5));

  [v6 setError:*(void *)(a1 + 40)];
  uint64_t v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 userInfo]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:GKServerStatusCode]);

    if (v9 && [v9 integerValue] == (id)5047)
    {
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472LL;
      v24[2] = sub_100014BFC;
      v24[3] = &unk_10026B800;
      v24[4] = *(void *)(a1 + 32);
      id v25 = v6;
      id v26 = &v27;
      [v25 perform:v24];
    }
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credential]);

  if (!v10)
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers(v11);
    }
    uint64_t v13 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "_constructAuthenticationResponseWithError: no credential -- clearing appInit state",  buf,  2u);
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    [v14 setAppInitState:@"GKAppInitUnknown"];
  }

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_100014D80;
  v22[3] = &unk_10026B850;
  void v22[4] = *(void *)(a1 + 32);
  v22[5] = &v27;
  [v6 perform:v22];
  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 replyQueue]);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_100014E6C;
  v18[3] = &unk_10026B878;
  id v20 = *(id *)(a1 + 48);
  id v21 = &v27;
  id v17 = v6;
  id v19 = v17;
  [v17 notifyOnQueue:v16 block:v18];

  _Block_object_dispose(&v27, 8);
}

void sub_100014BC0(_Unwind_Exception *a1)
{
}

uint64_t sub_100014BE4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100014BF4(uint64_t a1)
{
}

void sub_100014BFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transport]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 storeBag]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_100014CF4;
  v11[3] = &unk_10026B7D8;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  id v13 = v3;
  uint64_t v14 = v9;
  id v12 = v8;
  id v10 = v3;
  [v5 getURLForKey:@"ds-password-change-url" queue:v7 handler:v11];
}

void sub_100014CF4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v5) {
    [*(id *)(a1 + 32) setError:v5];
  }
  if (v6)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setPasswordChangeURL:v6];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setPasswordChangeRequired:1];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100014D80(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100014DFC;
  v7[3] = &unk_10026B828;
  id v5 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  [v5 _fetchLoginDisabledWithHandler:v7];
}

uint64_t sub_100014DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100014E6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

id sub_100014FF4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 bundleID]);
  id v4 = [v2 isEqualToString:v3];

  return v4;
}

id sub_10001517C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 gameRecord]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 game]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleID]);
  id v6 = [v2 isEqualToString:v5];

  return v6;
}

LABEL_20:
    goto LABEL_21;
  }

  if (!os_log_GKGeneral) {
    id v25 = (id)GKOSLoggers(v13);
  }
  id v26 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v20 = v26;
    id v24 = (void *)objc_claimAutoreleasedReturnValue(-[GKService clientProxy](self, "clientProxy"));
    id v30 = 138412290;
    *(void *)id v31 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v20,  OS_LOG_TYPE_INFO,  "No launch event for client %@",  (uint8_t *)&v30,  0xCu);
    goto LABEL_20;
  }
}

    goto LABEL_21;
  }

  if (v4) {
    goto LABEL_5;
  }
LABEL_21:
}

        id v10 = (v15 - 1) & v15;
        uint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
        id v8 = v12;
LABEL_21:
        id v17 = (uint64_t *)(*(void *)(*a5 + 48LL) + 40 * v11);
        id v18 = *v17;
        id v19 = v17[1];
        id v20 = v17[2];
        id v21 = v17[3];
        id v22 = (void *)v17[4];
        a5[3] = v8;
        a5[4] = v10;
        Hasher.init(_seed:)(v47, *(void *)(v5 + 40));
        v46 = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v21);
        String.hash(into:)(v47, v18, v19);
        swift_bridgeObjectRetain(v21);
        String.hash(into:)(v47, v20, v21);
        swift_bridgeObjectRelease(v21, v23);
        id v24 = Hasher._finalize()();
        id v26 = -1LL << *(_BYTE *)(v5 + 32);
        uint64_t v27 = v24 & ~v26;
        if (((*(void *)(v48 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v27) & 1) != 0) {
          break;
        }
LABEL_34:
        swift_bridgeObjectRelease(v21, v25);
        swift_bridgeObjectRelease(v19, v36);

        a5 = v44;
        id v5 = a3;
      }

      id v28 = ~v26;
      uint64_t v29 = *(void *)(v5 + 48);
      while (1)
      {
        id v30 = (void *)(v29 + 40 * v27);
        id v31 = v30[1];
        id v32 = v30[2];
        id v33 = v30[3];
        uint64_t v34 = *v30 == v18 && v31 == v19;
        if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v30, v31, v18, v19, 0LL) & 1) != 0)
        {
          id v35 = v32 == v20 && v33 == v21;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v20, v21, 0LL) & 1) != 0) {
            break;
          }
        }

        uint64_t v27 = (v27 + 1) & v28;
        if (((*(void *)(v48 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v27) & 1) == 0) {
          goto LABEL_34;
        }
      }

      swift_bridgeObjectRelease(v21, v37);
      swift_bridgeObjectRelease(v19, v38);
      id v39 = (v27 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
      a5 = v44;
      id v40 = *(unint64_t *)((char *)a1 + v39);
      *(unint64_t *)((char *)a1 + v39) = v40 & ~(1LL << v27);
      id v5 = a3;
    }

    while ((v40 & (1LL << v27)) == 0);
    uint64_t v7 = v42 - 1;
    if (__OFSUB__(v42, 1LL))
    {
LABEL_45:
      __break(1u);
      return;
    }

    if (v42 != 1) {
      continue;
    }
    break;
  }

    v66 = (v23 - 1) & v23;
    v64 = v24;
  }

  id v25 = v20 + 5;
  if (v20 + 5 >= v55)
  {
LABEL_32:
    swift_release(v62);
    return swift_release(v63);
  }

  uint64_t v23 = *(void *)(v54 + 8 * v25);
  if (v23)
  {
    id v24 = v20 + 5;
    goto LABEL_20;
  }

  while (1)
  {
    id v24 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v24 >= v55) {
      goto LABEL_32;
    }
    uint64_t v23 = *(void *)(v54 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_20;
    }
  }

LABEL_22:
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[GKService clientProxy](self, "clientProxy"));
  [v29 setLaunchEvent:0];
}

LABEL_23:
              [*(id *)(a1 + 40) setObject:v16 forKeyedSubscript:@"bundleID"];
              [*(id *)(a1 + 40) setObject:v18 forKeyedSubscript:@"bundleVersion"];
              [*(id *)(a1 + 40) setObject:v19 forKeyedSubscript:@"shortBundleVersion"];
              uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v15 platform]));
              [*(id *)(a1 + 40) setObject:v23 forKeyedSubscript:@"platform"];

              if ((v34 & 1) != 0)
              {

                goto LABEL_35;
              }

              goto LABEL_24;
            }

            id v20 = 0;
          }

          else
          {
            id v20 = 0;
            id v18 = 0LL;
            uint64_t v34 = 0;
            id v19 = 0LL;
          }
}

      if (!os_log_GKGeneral) {
        id v32 = (id)GKOSLoggers(v31);
      }
      id v33 = (void *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        uint64_t v34 = *(void **)(a1 + 32);
        id v35 = v33;
        id v36 = (void *)objc_claimAutoreleasedReturnValue([v34 shareInvitees]);
        *(_DWORD *)buf = 138412290;
        v45 = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "Remaining share invitees after response %@",  buf,  0xCu);
      }

      id v3 = v38;
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

  id v12 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v6, a2);
  return v12;
}

  id v24 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  id v25 = (void *)(*(void *)(v24 + 48) + 16 * a3);
  void *v25 = a1;
  v25[1] = a2;
  id v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  id v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v28;
  }
}

      v56 = (v12 - 1) & v12;
      v57 = v13;
    }

    uint64_t v27 = ~v25;
    id v28 = *(void *)(v58 + 48);
    while (1)
    {
      uint64_t v29 = (void *)(v28 + 40 * v26);
      id v30 = v29[1];
      id v32 = v29[2];
      id v31 = v29[3];
      id v33 = *v29 == v16 && v30 == v17;
      if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v29, v30, v16, v17, 0LL) & 1) != 0)
      {
        uint64_t v34 = v32 == v18 && v31 == v19;
        if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v31, v18, v19, 0LL) & 1) != 0) {
          break;
        }
      }

      id v26 = (v26 + 1) & v27;
      if (((*(void *)&v7[(v26 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v26) & 1) == 0) {
        goto LABEL_36;
      }
    }

    v60[0] = v53;
    v60[1] = v54;
    v60[2] = v51;
    v60[3] = v57;
    v60[4] = v56;

    swift_bridgeObjectRelease(v19, v36);
    isStackAllocationSafe = swift_bridgeObjectRelease(v17, v37);
    id v39 = v58;
    id v40 = *(_BYTE *)(v58 + 32);
    id v41 = v40 & 0x3F;
    id v42 = (1LL << v40) + 63;
    id v43 = v42 >> 6;
    char v44 = 8 * (v42 >> 6);
    if (v41 <= 0xD
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v42 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v50 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0LL), v7, v44);
      sub_100139740((unint64_t *)((char *)&v50 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v43, v39, v26, v60);
      v46 = v45;
      swift_release(v39);
      sub_100132050(v60[0]);
      return (void *)v46;
    }

    else
    {
      v47 = (void *)swift_slowAlloc(v44, -1LL);
      memcpy(v47, v7, v44);
      sub_100139740((unint64_t *)v47, v43, v58, v26, v60);
      uint64_t v2 = v48;
      swift_release(v58);
      sub_100132050(v60[0]);
      swift_slowDealloc(v47, -1LL, -1LL);
    }
  }

  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }

  return (void *)v2;
}

  id v25 = *(void *)(v1 + 72);
  swift_release(v19);
  sub_100144704((uint64_t)v16, v2, 33LL);
  sub_100129274(&qword_1002B8518);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  swift_endAccess(v2);
  if (*(void *)(v25 + 120))
  {
    sub_10012CF38();
    sub_10012C9BC();
    sub_10012CF14();
    id v26 = *(void *)(v25 + 120);
  }

  else
  {
    id v26 = 0LL;
  }

  *(void *)(v25 + 120) = 0LL;
  swift_release(v26);
  sub_1001324F4();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100015614(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = objc_claimAutoreleasedReturnValue([a2 objectForKey:@"auth-token"]);
  uint64_t v7 = (void *)v6;
  id v8 = (os_log_s *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v9 = (id)GKOSLoggers(v6);
    id v8 = (os_log_s *)os_log_GKGeneral;
  }

  BOOL v10 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (v10)
  {
    sub_100020CCC();
    if (v7) {
      goto LABEL_5;
    }
  }

  else if (v7)
  {
LABEL_5:
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credential]);
    [v12 setAuthenticationToken:v7];
    objc_msgSend(v12, "setScope:", objc_msgSend(v12, "scope") | 2);
    [v11 setCredential:v12 completionHandler:&stru_10026B8E8];

    goto LABEL_11;
  }

  if (!os_log_GKGeneral) {
    id v13 = (id)GKOSLoggers(v10);
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_100020C6C();
  }
LABEL_11:
}

void sub_100015758(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers(v2);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100020D30();
    }
  }
}

void sub_100015A30(_Unwind_Exception *a1)
{
}

void sub_100015A50(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) credential]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_100015B30;
  v11[3] = &unk_10026B960;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 64);
  id v12 = v6;
  uint64_t v17 = v7;
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v13 = v8;
  uint64_t v14 = v9;
  id v15 = *(id *)(a1 + 56);
  id v16 = v3;
  id v10 = v3;
  [v4 initializeWithCredential:v5 completionHandler:v11];
}

void sub_100015B30(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v18 representedItem]);
  [*(id *)(a1 + 32) setError:v5];
  id v7 = [v5 code];

  if (v7 != (id)15)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"status"]);
    *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v8 integerValue];

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_100015CF0;
    v19[3] = &unk_10026B938;
    id v20 = *(id *)(a1 + 40);
    id v21 = *(id *)(a1 + 32);
    id v10 = v6;
    id v22 = v10;
    id v11 = v18;
    uint64_t v12 = *(void *)(a1 + 48);
    id v23 = v11;
    uint64_t v24 = v12;
    [v9 performBlockAndWait:v19];

    id v13 = *(void **)(a1 + 56);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 replyQueue]);
    [v13 sendPushTokenWithReplyQueue:v15];

    if (v10)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"renew-auth-token"]);
      unsigned int v17 = [v16 BOOLValue];

      if (v17) {
        [*(id *)(a1 + 48) renewAuthToken];
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100015CF0(id *a1)
{
  unsigned __int8 v2 = [a1[4] isGameCenter];
  id v36 = (id)objc_claimAutoreleasedReturnValue([a1[4] bundleIdentifier]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] context]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v36,  v3));

  id v5 = v4;
  if (a1[6])
  {
    [a1[7] TTL];
    if (v6 == 0.0)
    {
      id v7 = 0LL;
    }

    else
    {
      [a1[7] TTL];
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:"));
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue([a1[6] objectForKey:@"game-metadata"]);
    [v5 updateWithServerRepresentation:v8 expirationDate:v7];
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 name]);

  if (!v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([a1[8] clientProxy]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle _gkBundleWithPID:](NSBundle, "_gkBundleWithPID:", [v10 pid]));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 _gkLocalizedName]);
    [v5 setName:v12];
  }

  id v13 = a1[8];
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([a1[5] context]);
  [v13 _syncPlayerOnboardingParametersInManagedObjectContext:v14 withServerResult:a1[7]];

  id v15 = (void *)objc_claimAutoreleasedReturnValue([a1[5] context]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v15));

  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([a1[7] representedItem]);
  +[GKContactsIntegrationUserSettings applySettingsToObject:fromResults:]( &OBJC_CLASS___GKContactsIntegrationUserSettings,  "applySettingsToObject:fromResults:",  v16,  v17);

  if ((v2 & 1) != 0)
  {
    id v18 = a1[8];
    id v19 = (void *)objc_claimAutoreleasedReturnValue([a1[5] context]);
    [v18 _postLaunchEventsForGame:v5 moc:v19];
    id v20 = v5;
  }

  else
  {
    id v19 = (void *)objc_claimAutoreleasedReturnValue([a1[6] objectForKey:@"game-metadata"]);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"bundle-id"]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([a1[5] context]);
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v16 playerID]);
    +[GKCachingUtils ensureGameInGamesPlayed:playerID:bundleID:gameDescriptor:updateWidget:]( &OBJC_CLASS___GKCachingUtils,  "ensureGameInGamesPlayed:playerID:bundleID:gameDescriptor:updateWidget:",  v22,  v23,  v21,  v19,  0LL);

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleID]);
    [v16 setLastPlayedGame:v24];

    id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v16 setLastPlayedDate:v25];

    id v26 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameRecordCacheObject recordForGame:playerProfile:]( &OBJC_CLASS___GKGameRecordCacheObject,  "recordForGame:playerProfile:",  v5,  v16));
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v16 lastPlayedDate]);
    [v26 setLastPlayedDate:v27];

    if (a1[6]) {
      objc_msgSend(v26, "updateWithServerRepresentation:");
    }
    id v20 = v26;

    id v28 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](&OBJC_CLASS___GKProfileService, "serviceFromService:", a1[8]));
    [v28 setOcelotStateForCurrentApp];
    id v29 = a1[8];
    id v30 = (void *)objc_claimAutoreleasedReturnValue([a1[5] context]);
    [v29 _addGameListEntryForGame:v5 profile:v16 moc:v30];

    id v31 = a1[8];
    id v32 = (void *)objc_claimAutoreleasedReturnValue([a1[5] context]);
    [v31 _addAchievementPointsEntryForGame:v5 record:v20 profile:v16 moc:v32];

    id v33 = a1[8];
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([a1[5] context]);
    [v33 _postLaunchEventsForGame:v5 moc:v34];
  }

  id v35 = (void *)objc_claimAutoreleasedReturnValue([v20 internalRepresentation]);
  [a1[5] setResult:v35];
}

void sub_100016110(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *, void))(v2 + 16))( v2,  v4,  v3,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL));
}

void sub_100016720(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKProfileServicePrivate,  "serviceFromService:",  *(void *)(a1 + 32)));
    [v3 setPrivacyNoticeVersion:a2 withCompletionHandler:&stru_10026B9D0];
  }

void sub_1000169B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1000169C8(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  *(void *)(a1 + 40)));
  unsigned int v4 = [v3 isValid];
  **(_BYTE **)(a1 + 64) = v4;
  if (v4)
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 internalRepresentation]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }

  else
  {
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[GKLocalPlayerInternal archivedProfile](&OBJC_CLASS___GKLocalPlayerInternal, "archivedProfile"));
    uint64_t v9 = a1 + 56;
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v8;

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) accountName]);
    unsigned int v13 = [v12 isEqual:*(void *)(a1 + 32)];

    if (v13)
    {
      if (!os_log_GKGeneral) {
        id v15 = (id)GKOSLoggers(v14);
      }
      id v16 = (void *)os_log_GKCache;
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
        sub_100020D90(v9, v16);
      }
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v17 = (id)GKOSLoggers(v14);
      }
      id v18 = (void *)os_log_GKCache;
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
        sub_100020EB0(a1 + 56, v18);
      }
      id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) credential]);
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 playerInternal]);

      uint64_t v21 = objc_claimAutoreleasedReturnValue( +[GKLocalPlayerInternal internalRepresentation]( &OBJC_CLASS___GKLocalPlayerInternal,  "internalRepresentation"));
      uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v23 = *(void **)(v22 + 40);
      *(void *)(v22 + 40) = v21;

      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setAccountName:v2];
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v20 alias]);
      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setAlias:v24];

      id v25 = (void *)objc_claimAutoreleasedReturnValue([v20 playerID]);
      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setPlayerID:v25];

      if (!os_log_GKGeneral) {
        id v27 = (id)GKOSLoggers(v26);
      }
      id v28 = (void *)os_log_GKCache;
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
        sub_100020E24(v9, v28);
      }
    }
  }
}

void sub_100016D44(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100016DD0;
  v6[3] = &unk_10026BA48;
  uint64_t v8 = *(void *)(a1 + 40);
  id v7 = v3;
  id v5 = v3;
  [v4 getFriendIDsForPlayer:0 commonFriends:0 handler:v6];
}

void sub_100016DD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  uint64_t v9 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_100020F3C(v9);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100016FA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (uint64_t v3 = *(void *)(a1 + 40)) != 0)
  {
    unsigned int v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_10001714C;
    v16[3] = &unk_10026BA98;
    id v17 = *(id *)(a1 + 64);
    [v4 _authenticateUsername:v2 password:v3 altDSID:v5 validateOnly:0 handler:v16];
    id v6 = v17;
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(a1);
    }
    id v8 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "_fetchCredentialsForUsername: no username or password; attempt to grab credentials",
        v15,
        2u);
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    id v11 = [v10 environment];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 currentGame]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 bundleIdentifier]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v9 primaryCredentialForEnvironment:v11 gameID:v14]);

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

void sub_10001714C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers(0LL);
    }
    uint64_t v10 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v11 = v10;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 altDSID]);
      int v26 = 138412290;
      id v27 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "telling authkit altDSID %@ is in use",  (uint8_t *)&v26,  0xCu);
    }

    id v13 = objc_alloc_init(&OBJC_CLASS___AKAppleIDAuthenticationController);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 altDSID]);

    if (v14)
    {
      if (!os_log_GKGeneral) {
        id v16 = (id)GKOSLoggers(v15);
      }
      id v17 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        id v18 = v17;
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v5 altDSID]);
        int v26 = 138412290;
        id v27 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "GKAuth:telling authkit account is in use using altDSID:%@",  (uint8_t *)&v26,  0xCu);
      }

      id v20 = (void *)objc_claimAutoreleasedReturnValue([v5 altDSID]);
      [v13 setAppleIDWithAltDSID:v20 inUse:1 forService:6];
    }

    else
    {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v5 DSID]);

      if (!v21)
      {
LABEL_23:

        goto LABEL_24;
      }

      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v5 DSID]);
      id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v22 longLongValue]));

      if (!os_log_GKGeneral) {
        id v24 = (id)GKOSLoggers(v23);
      }
      id v25 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        int v26 = 138412290;
        id v27 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "GKAuth:telling authkit account is in use using DSID:%@",  (uint8_t *)&v26,  0xCu);
      }

      [v13 setAppleIDWithDSID:v20 inUse:1 forService:6];
    }

    goto LABEL_23;
  }

  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_100020FC8();
  }
LABEL_24:
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100017538(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  uint64_t v3 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v9 = 138412290;
    uint64_t v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "_fetchCredentialsForAltDSID:%@",  (uint8_t *)&v9,  0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "credentialForAltDSID:environment:", v6, objc_msgSend(v7, "environment")));

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000177A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (uint64_t v3 = *(void *)(a1 + 40)) != 0)
  {
    uint64_t v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10001790C;
    v13[3] = &unk_10026BA98;
    id v14 = *(id *)(a1 + 64);
    [v4 _authenticateUsername:v2 password:v3 altDSID:v5 validateOnly:0 active:0 handler:v13];
    uint64_t v6 = v14;
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(a1);
    }
    id v8 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "_fetchCredentialsForNonActivePlayerForUsername: no username or password; attempt to grab credentials",
        v12,
        2u);
    }

    int v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
    uint64_t v10 = *(void *)(a1 + 56);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "credentialForAltDSID:environment:", v10, objc_msgSend(v11, "environment")));

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

void sub_10001790C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers(0LL);
    }
    uint64_t v10 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v11 = v10;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 altDSID]);
      int v26 = 138412290;
      id v27 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "telling authkit altDSID %@ is in use",  (uint8_t *)&v26,  0xCu);
    }

    id v13 = objc_alloc_init(&OBJC_CLASS___AKAppleIDAuthenticationController);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 altDSID]);

    if (v14)
    {
      if (!os_log_GKGeneral) {
        id v16 = (id)GKOSLoggers(v15);
      }
      id v17 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        id v18 = v17;
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v5 altDSID]);
        int v26 = 138412290;
        id v27 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "GKAuth:telling authkit account is in use using altDSID:%@",  (uint8_t *)&v26,  0xCu);
      }

      id v20 = (void *)objc_claimAutoreleasedReturnValue([v5 altDSID]);
      [v13 setAppleIDWithAltDSID:v20 inUse:1 forService:6];
    }

    else
    {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v5 DSID]);

      if (!v21)
      {
LABEL_23:

        goto LABEL_24;
      }

      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v5 DSID]);
      id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v22 longLongValue]));

      if (!os_log_GKGeneral) {
        id v24 = (id)GKOSLoggers(v23);
      }
      id v25 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        int v26 = 138412290;
        id v27 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "GKAuth:telling authkit account is in use using DSID:%@",  (uint8_t *)&v26,  0xCu);
      }

      [v13 setAppleIDWithDSID:v20 inUse:1 forService:6];
    }

    goto LABEL_23;
  }

  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_100021028();
  }
LABEL_24:
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100017CA4(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKGameServicePrivate,  "serviceFromService:",  *(void *)(a1 + 32)));
  [v1 getGamesForPlayer:0 includeInstalled:1 handler:&stru_10026BAD8];
}

void sub_100017CF0(id a1, NSArray *a2, NSString *a3, NSError *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = v8;
  if (v8)
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers(v8);
    }
    id v11 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v16 = 138412290;
      id v17 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Could not preload stats for the current player due to:%@",  (uint8_t *)&v16,  0xCu);
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers(0LL);
    }
    id v13 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v14 = v13;
      uint64_t v15 = (NSError *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[NSArray count](v6, "count")));
      int v16 = 138412290;
      id v17 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "preloaded stats for %@ games for the current player",  (uint8_t *)&v16,  0xCu);
    }
  }
}

void sub_100018074(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  [v4 setIsGameCenterEnabledClient:v3];

  if (*(void *)(a1 + 40) && *(void *)(a1 + 48))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 signInVisibilityManager]);
    [v6 reset];
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKAccountService.m",  1727LL,  0x100237000LL));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v7));

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKDevice currentDevice](&OBJC_CLASS___GKDevice, "currentDevice"));
  unsigned __int8 v10 = [v9 isGameKitAvailable];

  if ((v10 & 1) != 0)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
    unsigned int v12 = [v11 isGameCenterDisabled];

    if (!v12)
    {
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_100018320;
      v26[3] = &unk_10026BB28;
      id v15 = *(id *)(a1 + 40);
      uint64_t v16 = *(void *)(a1 + 32);
      id v27 = v15;
      uint64_t v28 = v16;
      id v29 = *(id *)(a1 + 48);
      id v30 = *(id *)(a1 + 56);
      id v31 = v8;
      [v31 perform:v26];

      goto LABEL_10;
    }

    uint64_t v13 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  GKInternalErrorDomain,  103LL,  0LL));
  }

  else
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  10LL,  0LL));
  }

  id v14 = (void *)v13;
  [v8 setError:v13];

LABEL_10:
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v2 replyQueue]);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_10001869C;
  v21[3] = &unk_10026B0F8;
  uint64_t v18 = *(void *)(a1 + 32);
  id v22 = v8;
  uint64_t v23 = v18;
  id v24 = v2;
  id v25 = *(id *)(a1 + 64);
  id v19 = v2;
  id v20 = v8;
  [v20 notifyOnQueue:v17 block:v21];
}

void sub_100018320(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  id v6 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "fetch credentials with username:%@ ", buf, 0xCu);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10001846C;
  v13[3] = &unk_10026BB00;
  id v14 = *(id *)(a1 + 64);
  id v15 = v4;
  id v12 = v4;
  [v8 _fetchCredentialsForUsername:v9 password:v10 altDSID:v11 handler:v13];
}

void sub_10001846C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  uint64_t v9 = (os_log_s *)os_log_GKDaemon;
  BOOL v10 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
  if (v10)
  {
    int v17 = 138412290;
    v18[0] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "authenticateWithCompletionHandler:fetched credentials for username. Credential:%@",  (uint8_t *)&v17,  0xCu);
  }

  if (!os_log_GKGeneral) {
    id v11 = (id)GKOSLoggers(v10);
  }
  id v12 = (os_log_s *)os_log_GKDaemon;
  BOOL v13 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
  if (v13)
  {
    int v17 = 138412290;
    v18[0] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "error fetching credentials: %@",  (uint8_t *)&v17,  0xCu);
  }

  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers(v13);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100021088();
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers(v13);
    }
    uint64_t v16 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      int v17 = 67109376;
      LODWORD(v18[0]) = v5 != 0LL;
      WORD2(v18[0]) = 1024;
      *(_DWORD *)((char *)v18 + 6) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "authenticatePlayerWithUsername: creds(%d) error(%d)",  (uint8_t *)&v17,  0xEu);
    }
  }

  [*(id *)(a1 + 32) setError:v7];
  if (v5) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"credential"];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10001869C(uint64_t a1)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"credential"]);
  if (v3)
  {
    uint64_t v4 = (void *)objc_opt_class(*(void *)(a1 + 40), v2);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 serviceWithTransport:0 forClient:v5 credential:v3]);

    [*(id *)(a1 + 40) setCredential:v3];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKStoreBag storeBagForEnvironment:]( GKStoreBag,  "storeBagForEnvironment:",  [*(id *)(a1 + 48) environment]));
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKDataTransport transportWithBag:clientProxy:credential:]( &OBJC_CLASS___GKDataTransport,  "transportWithBag:clientProxy:credential:",  v7,  *(void *)(a1 + 48),  v3));
    [*(id *)(a1 + 40) setTransport:v8];

    [v6 _continueAuthenticationWithHandler:*(void *)(a1 + 56)];
  }

  else
  {
    CFAbsoluteTimeGetCurrent();
    BOOL v10 = *(void **)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    [v10 notifyClient:v9 authenticationDidChangeWithError:v11 handler:*(void *)(a1 + 56)];

    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers(v12);
    }
    id v14 = (void *)os_log_GKPerf;
    if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
      sub_1000210E8(v14);
    }
  }
}

void sub_1000189C0(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKAccountService.m",  1813LL,  "-[GKAccountServicePrivate switchLocalPlayerWithAltDSID:handler:]_block_invoke"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v3));

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDevice currentDevice](&OBJC_CLASS___GKDevice, "currentDevice"));
  unsigned __int8 v6 = [v5 isGameKitAvailable];

  if ((v6 & 1) != 0)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForServerCode:reason:]( &OBJC_CLASS___NSError,  "userErrorForServerCode:reason:",  5000LL,  0LL));
    [v4 setError:v7];

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_100018BBC;
    v21[3] = &unk_10026B080;
    id v8 = a1[5];
    id v9 = a1[4];
    id v22 = v8;
    id v23 = v9;
    id v24 = v4;
    [v24 perform:v21];
  }

  else
  {
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  10LL,  0LL));
    [v4 setError:v10];
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v2 replyQueue]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_100018E58;
  v16[3] = &unk_10026BB70;
  id v12 = a1[4];
  id v17 = v4;
  id v18 = v12;
  id v13 = a1[6];
  id v19 = v2;
  id v20 = v13;
  id v14 = v2;
  id v15 = v4;
  [v15 notifyOnQueue:v11 block:v16];
}

void sub_100018BBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  unsigned __int8 v6 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "fetch credentials with altDSID:%@ ", buf, 0xCu);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_100018CF4;
  v11[3] = &unk_10026BB00;
  id v12 = *(id *)(a1 + 48);
  id v13 = v4;
  id v10 = v4;
  [v8 _fetchCredentialsForAltDSID:v9 handler:v11];
}

void sub_100018CF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10002117C();
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers(0LL);
    }
    id v10 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      v11[0] = 67109378;
      v11[1] = v5 != 0LL;
      __int16 v12 = 2112;
      id v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "switchLocalPlayerWithAltDSIDPlayerWithUsername: creds(%d) credential(%@)",  (uint8_t *)v11,  0x12u);
    }
  }

  [*(id *)(a1 + 32) setError:v7];
  if (v5) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"credential"];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100018E58(uint64_t a1)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"credential"]);
  if (v3)
  {
    uint64_t v4 = (void *)objc_opt_class(*(void *)(a1 + 40), v2);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 serviceWithTransport:0 forClient:v5 credential:v3]);

    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v7);
    }
    id v9 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v10 = *(void **)(a1 + 40);
      id v11 = v9;
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v10 credential]);
      int v21 = 138412290;
      id v22 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "current credentials (%@) used by the current service(will switch to new service for newer credentials",  (uint8_t *)&v21,  0xCu);
    }

    [v6 _continueAuthenticationWithHandler:*(void *)(a1 + 56)];
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) credential]);

    if (v13 != v3)
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
      [v14 setPrimaryCredential:v3 completionHandler:&stru_10026BB48];
    }
  }

  else
  {
    CFAbsoluteTimeGetCurrent();
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 48);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    [v16 notifyClient:v15 authenticationDidChangeWithError:v17 handler:*(void *)(a1 + 56)];

    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers(v18);
    }
    id v20 = (void *)os_log_GKPerf;
    if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
      sub_1000210E8(v20);
    }
  }
}

void sub_100019080(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers(v2);
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_1000211DC();
  }
}

void sub_1000192C8(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
  if (a1[5] && a1[6])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 signInVisibilityManager]);
    [v4 reset];
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKAccountService.m",  1894LL,  "-[GKAccountServicePrivate authenticateNonActivePlayerWithUsername:password:altDSID:usingFastPath:hand ler:]_block_invoke"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v5));

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKDevice currentDevice](&OBJC_CLASS___GKDevice, "currentDevice"));
  unsigned __int8 v8 = [v7 isGameKitAvailable];

  if ((v8 & 1) != 0)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForServerCode:reason:]( &OBJC_CLASS___NSError,  "userErrorForServerCode:reason:",  5000LL,  0LL));
    [v6 setError:v9];

    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_100019528;
    v23[3] = &unk_10026BB28;
    id v24 = a1[5];
    id v10 = a1[6];
    id v11 = a1[4];
    id v25 = v10;
    id v26 = v11;
    id v27 = a1[7];
    id v28 = v6;
    [v28 perform:v23];
  }

  else
  {
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  10LL,  0LL));
    [v6 setError:v12];
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v2 replyQueue]);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_100019850;
  v18[3] = &unk_10026BB70;
  id v14 = a1[4];
  id v19 = v6;
  id v20 = v14;
  id v15 = a1[8];
  id v21 = v2;
  id v22 = v15;
  id v16 = v2;
  id v17 = v6;
  [v17 notifyOnQueue:v13 block:v18];
}

void sub_100019528(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  id v6 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    uint64_t v18 = v7;
    __int16 v19 = 2112;
    uint64_t v20 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "fetch credentials (non active) with username:%@ password:%@",  buf,  0x16u);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = *(void **)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100019680;
  v14[3] = &unk_10026BB00;
  id v15 = *(id *)(a1 + 64);
  id v16 = v4;
  id v13 = v4;
  [v11 _fetchCredentialsForNonActivePlayerForUsername:v9 password:v10 altDSID:v12 handler:v14];
}

void sub_100019680(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  uint64_t v9 = (os_log_s *)os_log_GKDaemon;
  BOOL v10 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
  if (v10)
  {
    int v14 = 138412290;
    v15[0] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "error fetching credentials: %@",  (uint8_t *)&v14,  0xCu);
  }

  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(v10);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10002123C();
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers(v10);
    }
    id v13 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      int v14 = 67109376;
      LODWORD(v15[0]) = v5 != 0LL;
      WORD2(v15[0]) = 1024;
      *(_DWORD *)((char *)v15 + 6) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "authenticatePlayerWithUsername: creds(%d) error(%d)",  (uint8_t *)&v14,  0xEu);
    }
  }

  [*(id *)(a1 + 32) setError:v7];
  if (v5) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"credential"];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100019850(uint64_t a1)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"credential"]);
  if (v3)
  {
    id v4 = (void *)objc_opt_class(*(void *)(a1 + 40), v2);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 serviceWithTransport:0 forClient:v5 credential:v3]);

    [v6 _continueAuthenticationWithHandler:*(void *)(a1 + 56)];
  }

  else
  {
    CFAbsoluteTimeGetCurrent();
    id v8 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    [v8 notifyClient:v7 authenticationDidChangeWithError:v9 handler:*(void *)(a1 + 56)];

    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(v10);
    }
    id v12 = (void *)os_log_GKPerf;
    if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
      sub_1000210E8(v12);
    }
  }
}

void sub_100019A1C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100019A90;
  v3[3] = &unk_10026BB98;
  id v4 = *(id *)(a1 + 48);
  [v1 _constructAuthenticationResponseWithError:v2 handler:v3];
}

void sub_100019A90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10002129C();
    }
  }

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, id, void *))(v9 + 16))(v9, v5, v7);
  }
}

void sub_100019C5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credential]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerInternal]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 playerID]);

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKProfileServicePrivate,  "serviceFromService:",  *(void *)(a1 + 32)));
  uint64_t v9 = +[GKPlayerProfileCacheObject piecesToLoadForFamiliarity:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "piecesToLoadForFamiliarity:",  1LL);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100019D80;
  v12[3] = &unk_10026BBC0;
  CFAbsoluteTime v14 = Current;
  id v13 = v3;
  id v11 = v3;
  [v8 loadProfileForPlayer:v7 pieces:v9 context:v10 handler:v12];
}

void sub_100019D80(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    id v3 = (id)os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v3) {
      sub_100021454();
    }
  }

  id v6 = (os_log_s *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v7 = (id)GKOSLoggers(v3);
    id v6 = (os_log_s *)os_log_GKGeneral;
  }

  BOOL v8 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
  if (v8) {
    sub_100021428();
  }
  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v8);
  }
  uint64_t v10 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_10002139C(v10);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100019F6C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = (void *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v6 = (id)GKOSLoggers(v3);
    id v5 = (void *)os_log_GKGeneral;
  }

  if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEBUG)) {
    sub_1000214B4((uint64_t)a1, v5);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10001A050;
  v10[3] = &unk_10026BC38;
  id v7 = (void *)a1[5];
  id v11 = (id)a1[4];
  id v8 = v7;
  uint64_t v14 = a1[7];
  id v12 = v8;
  id v13 = v4;
  id v9 = v4;
  [v11 _initGameForLaunchedApp:1 withHandler:v10];
}

void sub_10001A050(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credential]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 adamID]);
  id v12 = [v11 integerValue];

  if (!v12)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 adamID]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    [v15 setAdamID:v14];
  }

  if (v9)
  {
    id v16 = [v9 scope];
    unsigned int v17 = v16;
    if (a4 <= 5028)
    {
      if (!a4)
      {
LABEL_24:
        v17 |= 2u;
LABEL_29:
        id v24 = [v9 scope];
        if (v17 != (_DWORD)v24)
        {
          id v29 = (void *)os_log_GKGeneral;
          if (!os_log_GKGeneral)
          {
            id v30 = (id)GKOSLoggers(v24);
            id v29 = (void *)os_log_GKGeneral;
          }

          if (os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_DEBUG)) {
            sub_100021614(v17, v29);
          }
          id v31 = *(void **)(a1 + 40);
          v43[0] = _NSConcreteStackBlock;
          v43[1] = 3221225472LL;
          v43[2] = sub_10001A4B8;
          v43[3] = &unk_10026BC10;
          id v44 = v9;
          unsigned int v45 = v17;
          [v31 perform:v43];
        }

        goto LABEL_35;
      }

      if (a4 != 5000)
      {
LABEL_25:
        if (!os_log_GKGeneral) {
          id v27 = (id)GKOSLoggers(v16);
        }
        id v28 = (void *)os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_1000216B0(v28, a4);
        }
        goto LABEL_29;
      }

      if (!os_log_GKGeneral) {
        id v25 = (id)GKOSLoggers(v16);
      }
      id v26 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "server error coming back from appInit. Player is unauthenticated. Removing the authorization flag",  buf,  2u);
      }
    }

    else if (a4 != 5029 && a4 != 5170)
    {
      if (a4 == 5172)
      {
        if (!os_log_GKGeneral) {
          id v18 = (id)GKOSLoggers(v16);
        }
        __int16 v19 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = v19;
          id v21 = (void *)objc_claimAutoreleasedReturnValue( +[GCFLocalizedStrings ERROR_APP_UNLISTED]( &OBJC_CLASS____TtC20GameCenterFoundation19GCFLocalizedStrings,  "ERROR_APP_UNLISTED"));
          *(_DWORD *)buf = 138412290;
          v47 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Disabling GameCenter for this game. %@",  buf,  0xCu);
        }

        id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
        [v22 setIsAppUnlistedAndDisallowed:1];

        goto LABEL_24;
      }

      goto LABEL_25;
    }

    v17 &= ~2u;
    goto LABEL_29;
  }

  if (!os_log_GKGeneral) {
    id v23 = (id)GKOSLoggers(v13);
  }
  id v24 = (id)os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
  if ((_DWORD)v24) {
    sub_1000215E8();
  }
LABEL_35:
  if (!os_log_GKGeneral) {
    id v32 = (id)GKOSLoggers(v24);
  }
  id v33 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_10002155C(v33);
  }
  id v37 = _NSConcreteStackBlock;
  uint64_t v38 = 3221225472LL;
  id v39 = sub_10001A574;
  id v40 = &unk_10026B170;
  uint64_t v34 = *(void **)(a1 + 40);
  uint64_t v41 = *(void *)(a1 + 32);
  id v35 = v7;
  id v42 = v35;
  [v34 perform:&v37];
  if (a4 == 5172 || !a4)
  {
    id v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy", v37, v38, v39, v40, v41));
    [v36 setAppInitState:@"GKAppInitialized"];
  }

  objc_msgSend(*(id *)(a1 + 40), "setError:", v8, v37, v38, v39, v40, v41);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10001A4B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setScope:*(unsigned int *)(a1 + 40)];
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  uint64_t v5 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10001A568;
  v7[3] = &unk_10026BBE8;
  id v8 = v3;
  id v6 = v3;
  [v4 setCredential:v5 completionHandler:v7];
}

uint64_t sub_10001A568(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001A574(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [v4 environment];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10001A620;
  v8[3] = &unk_10026B120;
  id v9 = v3;
  id v7 = v3;
  [v4 setCurrentGame:v5 serverEnvironment:v6 reply:v8];
}

uint64_t sub_10001A620(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001A768(uint64_t a1, void *a2, _BYTE *a3)
{
  id v7 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleIdentifier]);
  unsigned int v6 = [v5 isEqualToString:*(void *)(a1 + 32)];

  if (v6)
  {
    [*(id *)(a1 + 40) notifyClient:v7 playerAuthenticatedWithCredential:*(void *)(a1 + 48) authenticatingBundleID:*(void *)(a1 + 56)];
    *a3 = 1;
  }
}

void sub_10001A90C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100021754();
    }
  }

  else
  {
    objc_msgSend( *(id *)(a1 + 32),  "setCurrentGame:serverEnvironment:reply:",  v5,  objc_msgSend(*(id *)(a1 + 32), "environment"),  &stru_10026BCA8);
    [*(id *)(a1 + 32) setAppInitState:@"GKAppInitialized"];
    [*(id *)(a1 + 32) sendAuthenticationDidChangeNotificationWithAuthenticatingBundleID:*(void *)(a1 + 40) completionHandler:&stru_10026BCC8];
  }
}

void sub_10001AAC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(id *)(a1 + 32) == v3)
  {
    id v8 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    _DWORD v11[2] = sub_10001ABB8;
    v11[3] = &unk_10026B5E0;
    id v12 = v3;
    [v8 perform:v11];
  }

  else
  {
    id v5 = (__CFString *)objc_claimAutoreleasedReturnValue([v3 appInitState]);
    id v7 = v5;
    if (v5 != @"GKAppInitUnknown")
    {

LABEL_6:
      [*(id *)(a1 + 48) notifyClient:v4 playerAuthenticatedWithCredential:*(void *)(a1 + 56) authenticatingBundleID:0];
      goto LABEL_7;
    }

    uint64_t v9 = objc_opt_class(&OBJC_CLASS___GKSpoofingClientProxy, v6);
    char isKindOfClass = objc_opt_isKindOfClass(v4, v9);

    if ((isKindOfClass & 1) != 0) {
      goto LABEL_6;
    }
  }

LABEL_7:
}
}

    id v16 = [v6 writeToFile:v11 atomically:1];
    if ((v16 & 1) != 0)
    {
      if (!os_log_GKGeneral) {
        unsigned int v17 = (id)GKOSLoggers(v16);
      }
      id v18 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        id v25 = 138412290;
        id v26 = v7;
        __int16 v19 = "writeDictionaryToFile succeeded for: %@";
LABEL_20:
        id v22 = v18;
        id v23 = 12;
        goto LABEL_21;
      }
    }

    else
    {
      if (!os_log_GKGeneral) {
        uint64_t v20 = (id)GKOSLoggers(v16);
      }
      id v21 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        LOWORD(v25) = 0;
        __int16 v19 = "Failed to write pending data";
        id v22 = v21;
        id v23 = 2;
LABEL_21:
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, v19, (uint8_t *)&v25, v23);
        goto LABEL_22;
      }
    }

    goto LABEL_22;
  }

  if (!os_log_GKGeneral) {
    id v24 = (id)GKOSLoggers(v13);
  }
  id v18 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v25 = 138412290;
    id v26 = v11;
    __int16 v19 = "Could not remove file: %@";
    goto LABEL_20;
  }

  __break(1u);
  return result;
}

void sub_10001ABB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10001AC38;
  v6[3] = &unk_10026B120;
  id v7 = v3;
  id v5 = v3;
  [v4 sendAuthenticationDidChangeNotificationWithAuthenticatingBundleID:0 completionHandler:v6];
}

uint64_t sub_10001AC38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10001B010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, void, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  *(unsigned __int8 *)(a1 + 40),  a3);
}

void sub_10001B028(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSDictionary);
  }
  id v4 = -[NSDictionary integerValueFromKey:defaultValue:]( v3,  "integerValueFromKey:defaultValue:",  GKFullscreenSignInSheetLimit,  1LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sheetConfig]);
  [v5 setLimit:v4];

  id v6 = -[NSDictionary integerValueFromKey:defaultValue:]( v3,  "integerValueFromKey:defaultValue:",  GKFullscreenSignInSheetInitialLimit,  -1LL);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sheetConfig]);
  [v7 setInitialLimit:v6];

  -[NSDictionary doubleValueFromKey:defaultValue:]( v3,  "doubleValueFromKey:defaultValue:",  GKFullscreenSignInSheetCooldown,  604800.0);
  double v9 = v8;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sheetConfig]);
  [v10 setResetPeriod:v9];

  -[NSDictionary doubleValueFromKey:defaultValue:]( v3,  "doubleValueFromKey:defaultValue:",  GKFullscreenSignInSheetMinTimeBetween,  0.0);
  double v12 = v11;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sheetConfig]);
  [v13 setMinTimeBetweenAppearances:v12];

  BOOL v14 = -[NSDictionary integerValueFromKey:defaultValue:]( v3,  "integerValueFromKey:defaultValue:",  GKFullscreenSignInSheetEnabled,  0LL) != 0LL;
  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sheetConfig]);
  [v15 setEnabled:v14];

  id v16 = -[NSDictionary integerValueFromKey:defaultValue:]( v3,  "integerValueFromKey:defaultValue:",  GKSignInBannerLimit,  -1LL);
  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bannerConfig]);
  [v17 setLimit:v16];

  id v18 = -[NSDictionary integerValueFromKey:defaultValue:]( v3,  "integerValueFromKey:defaultValue:",  GKSignInBannerInitialLimit,  -1LL);
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bannerConfig]);
  [v19 setInitialLimit:v18];

  -[NSDictionary doubleValueFromKey:defaultValue:](v3, "doubleValueFromKey:defaultValue:", GKSignInBannerCooldown, -1.0);
  double v21 = v20;
  id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bannerConfig]);
  [v22 setResetPeriod:v21];

  -[NSDictionary doubleValueFromKey:defaultValue:]( v3,  "doubleValueFromKey:defaultValue:",  GKSignInBannerMinTimeBetween,  0.0);
  double v24 = v23;
  id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bannerConfig]);
  [v25 setMinTimeBetweenAppearances:v24];

  BOOL v26 = -[NSDictionary integerValueFromKey:defaultValue:]( v3,  "integerValueFromKey:defaultValue:",  GKSignInBannerEnabled,  0LL) != 0LL;
  id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bannerConfig]);
  [v27 setEnabled:v26];

  id v28 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 signInVisibilityManager]);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  v31[2] = sub_10001B344;
  v31[3] = &unk_10026BD38;
  uint64_t v30 = *(void *)(a1 + 32);
  id v32 = *(id *)(a1 + 40);
  char v33 = *(_BYTE *)(a1 + 48);
  [v29 promptsDisabledWithConfig:v30 scope:1 handler:v31];
}

uint64_t sub_10001B344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, void, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  *(unsigned __int8 *)(a1 + 40),  a3);
}

id sub_10001B430(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _continueAuthenticationWithLoginDisabled:a2 handler:*(void *)(a1 + 40)];
}

void sub_10001B9FC(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  [v1 refreshContentsForDataType:12 userInfo:0];
}

void sub_10001BA34(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerInternal]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 playerID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v3,  v4));

  id v5 = v6;
  if (v6)
  {
    +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "buildFamiliarilyLookupForProfile:",  v6);
    id v5 = v6;
  }
}

void sub_10001BAD8(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_1000217E0(v3);
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  uint64_t v41 = 0LL;
  id v42 = &v41;
  uint64_t v43 = 0x2020000000LL;
  char v44 = 0;
  v36[2] = sub_10001BEFC;
  v36[3] = &unk_10026BDD8;
  id v6 = *(void **)(a1 + 56);
  void v36[4] = *(void *)(a1 + 48);
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472LL;
  id v37 = v6;
  id v38 = *(id *)(a1 + 40);
  id v40 = &v41;
  id v39 = *(id *)(a1 + 32);
  id v7 = [v5 performBlockAndWait:v36];
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v7);
  }
  double v9 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = NSStringFromSelector(*(SEL *)(a1 + 80));
    id v11 = (id)objc_claimAutoreleasedReturnValue(v10);
    int v12 = *((unsigned __int8 *)v42 + 24);
    unsigned __int8 v13 = [*(id *)(a1 + 56) scope];
    BOOL v14 = @"YES";
    if (v12) {
      id v15 = @"YES";
    }
    else {
      id v15 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    id v46 = v11;
    __int16 v47 = 2112;
    v48 = v15;
    if ((v13 & 2) == 0) {
      BOOL v14 = @"NO";
    }
    __int16 v49 = 2112;
    v50 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%@ profileIsValid:%@ PlayerIsAuthorized:%@",  buf,  0x20u);
  }

  uint64_t v16 = *(void *)(a1 + 56);
  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v16 != 0));
  [*(id *)(a1 + 32) setObject:v17 forKeyedSubscript:@"authenticated"];

  if (*(void *)(a1 + 56))
  {
    double v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](&OBJC_CLASS___GKBadgeController, "sharedController"));
    [v20 badgeAllApplications];

    double v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    +[GKClientProxy performDelayedRequestsForEnvironment:]( GKClientProxy,  "performDelayedRequestsForEnvironment:",  [v21 environment]);
  }

  if (v16)
  {
    id v22 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 48), v19), "standardUserDefaults");
    double v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    [v23 removeObjectForKey:GKOptedOutOfGameCenter];

    double v24 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKProfileServicePrivate,  "serviceFromService:",  *(void *)(a1 + 48)));
    id v25 = *(void **)(a1 + 32);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_10001C084;
    v30[3] = &unk_10026BB28;
    id v31 = *(id *)(a1 + 56);
    id v26 = v24;
    uint64_t v27 = *(void *)(a1 + 48);
    id v32 = v26;
    uint64_t v33 = v27;
    id v34 = *(id *)(a1 + 64);
    id v35 = *(id *)(a1 + 32);
    [v25 perform:v30];
  }

  else
  {
    id v28 = (os_log_s *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v29 = (id)GKOSLoggers(v18);
      id v28 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
      sub_1000217B4();
    }
    [*(id *)(a1 + 64) setAppInitState:@"GKAppInitUnknown"];
  }

  _Block_object_dispose(&v41, 8);
}

void sub_10001BED0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_10001BEFC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountName]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 _authenticatedLocalPlayerWithUsername:v3 inContext:v4 isValid:*(void *)(*(void *)(a1 + 64) + 8) + 24]);

  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers(v6);
  }
  id v8 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    int v13 = 138412290;
    BOOL v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "authenticated LocalPlayerInternal:%@",  (uint8_t *)&v13,  0xCu);
  }

  uint64_t v9 = objc_claimAutoreleasedReturnValue([v5 playerID]);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 alias]);

    if (v11) {
      +[GKLocalPlayerInternal archiveProfile:](&OBJC_CLASS___GKLocalPlayerInternal, "archiveProfile:", v5);
    }
  }

  if (v5)
  {
    [*(id *)(a1 + 56) setObject:v5 forKeyedSubscript:@"localPlayer"];
    int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ampController]);
    [v12 updateMetadataWithLocalPlayer:v5];
  }
}

void sub_10001C084(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerInternal]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 playerID]);

  uint64_t v6 = *(void **)(a1 + 40);
  if (v5)
  {
    id v15 = v5;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 1LL));
  }

  else
  {
    id v7 = &__NSArray0__struct;
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10001C1DC;
  v10[3] = &unk_10026B0A8;
  id v8 = *(void **)(a1 + 56);
  void v10[4] = *(void *)(a1 + 48);
  id v11 = v8;
  id v12 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 64);
  id v14 = v3;
  id v9 = v3;
  [v6 preloadInstalledGamesScopedPlayerIDs:v7 completion:v10];
  if (v5) {
}
  }

uint64_t sub_10001C1DC(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), a2), "standardUserDefaults");
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  [v4 removeObjectForKey:GKOptedOutOfGameCenter];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v5 postNotificationName:GKPrimaryCredentialDidChangeNotification object:0];

  [*(id *)(a1 + 32) _notifyAllClientsPlayerAuthenticatedFromClient:*(void *)(a1 + 40) withCredential:*(void *)(a1 + 48) replyGroup:*(void *)(a1 + 56)];
  [*(id *)(a1 + 32) notifyWidgetPlayerAuthenticationUpdated];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10001C268(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10001C314;
  v7[3] = &unk_10026BE28;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v6 = v3;
  [v4 _constructAuthenticationResponseWithError:v5 handler:v7];
}

uint64_t sub_10001C314(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  [v5 setError:a3];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"response"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10001C374(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"response"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"authenticated"]);
  LODWORD(v3) = [v5 BOOLValue];

  if ((_DWORD)v3)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 authenticatingWithSettingsBundleID]);

    if (v7)
    {
      GKLaunchApplicationWithIdentifier(v7, 0LL);
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
      [v8 setAuthenticatingWithSettingsBundleID:0];
    }
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  if (v9 || !*(void *)(a1 + 40))
  {
  }

  else if ([*(id *)(a1 + 48) isGameCenter])
  {
    _[*(id *)(a1 + 56) _preloadDataForGameCenterTabs];
  }

void sub_10001C884(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  uint64_t v5 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10001C928;
  v7[3] = &unk_10026BBE8;
  id v8 = v3;
  id v6 = v3;
  [v4 setPrimaryCredential:v5 completionHandler:v7];
}

void sub_10001C928(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_1000211DC();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001C9AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10001CA28;
  v6[3] = &unk_10026B120;
  id v7 = v3;
  id v5 = v3;
  [v4 updateClientSettings:v6];
}

uint64_t sub_10001CA28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001CA34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v12 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v2,  v3));

  +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "buildFamiliarilyLookupForProfile:",  v12);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 gameDescriptor]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v5,  v6));

  if (*(void *)(a1 + 56)) {
    objc_msgSend(v12, "setAlias:");
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) playerInternal]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 playerID]);
  [*(id *)(a1 + 64) setPlayerID:v9];

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v12 internalRepresentation]);
  [*(id *)(a1 + 40) setResult:*(void *)(a1 + 64)];
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 internalRepresentation]);
  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:@"game"];

  [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:@"player"];
}

void sub_10001CBA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10001CC40;
  v6[3] = &unk_10026BE28;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 authenticatePlayerWithUsername:0 password:0 handler:v6];
}

uint64_t sub_10001CC40(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10001CC98(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10001CD78;
  v7[3] = &unk_10026B080;
  int8x16_t v4 = *(int8x16_t *)(a1 + 32);
  id v2 = (id)v4.i64[0];
  int8x16_t v8 = vextq_s8(v4, v4, 8uLL);
  id v9 = *(id *)(a1 + 48);
  [v2 perform:v7];
  id v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10001CE4C;
  v5[3] = &unk_10026B5E0;
  id v6 = v3;
  [v6 perform:v5];
}

void sub_10001CD78(id *a1, void *a2)
{
  id v3 = a2;
  int8x16_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] objectForKeyedSubscript:@"game"]);
  id v6 = [a1[6] currentEnvironment];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10001CE40;
  v8[3] = &unk_10026B120;
  id v9 = v3;
  id v7 = v3;
  [v4 setCurrentGame:v5 serverEnvironment:v6 reply:v8];
}

uint64_t sub_10001CE40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001CE4C(uint64_t a1, void *a2)
{
  int8x16_t v4 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"player"]);
  if (v3) {
    +[GKClientProxy authenticationDidChange](&OBJC_CLASS___GKClientProxy, "authenticationDidChange");
  }
  v4[2]();
}

void sub_10001CEB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10001D310(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  uint64_t v5 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10001D3B4;
  v7[3] = &unk_10026BBE8;
  id v8 = v3;
  id v6 = v3;
  [v4 setPrimaryCredential:v5 completionHandler:v7];
}

void sub_10001D3B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_1000211DC();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001D438(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10001D4B4;
  v6[3] = &unk_10026B120;
  id v7 = v3;
  id v5 = v3;
  [v4 updateClientSettings:v6];
}

uint64_t sub_10001D4B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001D4C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v12 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v2,  v3));

  +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "buildFamiliarilyLookupForProfile:",  v12);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 gameDescriptor]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v5,  v6));

  if (*(void *)(a1 + 56)) {
    objc_msgSend(v12, "setAlias:");
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) playerInternal]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 playerID]);
  [*(id *)(a1 + 64) setPlayerID:v9];

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v12 internalRepresentation]);
  [*(id *)(a1 + 40) setResult:*(void *)(a1 + 64)];
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 internalRepresentation]);
  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:@"game"];

  [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:@"player"];
}

void sub_10001D630(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10001D6CC;
  v6[3] = &unk_10026BE28;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 authenticatePlayerWithUsername:0 password:0 handler:v6];
}

uint64_t sub_10001D6CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10001D724(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10001D804;
  v7[3] = &unk_10026B080;
  int8x16_t v4 = *(int8x16_t *)(a1 + 32);
  id v2 = (id)v4.i64[0];
  int8x16_t v8 = vextq_s8(v4, v4, 8uLL);
  id v9 = *(id *)(a1 + 48);
  [v2 perform:v7];
  id v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10001D8D8;
  v5[3] = &unk_10026B5E0;
  id v6 = v3;
  [v6 perform:v5];
}

void sub_10001D804(id *a1, void *a2)
{
  id v3 = a2;
  int8x16_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] objectForKeyedSubscript:@"game"]);
  id v6 = [a1[6] currentEnvironment];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10001D8CC;
  v8[3] = &unk_10026B120;
  id v9 = v3;
  id v7 = v3;
  [v4 setCurrentGame:v5 serverEnvironment:v6 reply:v8];
}

uint64_t sub_10001D8CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001D8D8(uint64_t a1, void *a2)
{
  int8x16_t v4 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"player"]);
  if (v3) {
    +[GKClientProxy authenticationDidChange](&OBJC_CLASS___GKClientProxy, "authenticationDidChange");
  }
  v4[2]();
}

void sub_10001D940(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10001DB84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10001DC34;
  v8[3] = &unk_10026BB00;
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v7 = v3;
  [v4 _authenticateUsername:v5 password:v6 altDSID:0 validateOnly:1 handler:v8];
}

uint64_t sub_10001DC34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10001DC60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
    (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
  }

void sub_10001DE50(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  double v5 = *(double *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10001DF10;
  v8[3] = &unk_10026B2A0;
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 renewCredentialForUsername:v6 ttl:v8 completionHandler:v5];
}

uint64_t sub_10001DF10(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10001DF40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10001ECB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v2,  v3));

  +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "buildFamiliarilyLookupForProfile:",  v5);
  if (*(void *)(a1 + 48)) {
    objc_msgSend(v5, "setAlias:");
  }
  if (*(void *)(a1 + 56)) {
    objc_msgSend(v5, "setFirstName:");
  }
  id v4 = v5;
  if (*(void *)(a1 + 64))
  {
    objc_msgSend(v5, "setLastName:");
    id v4 = v5;
  }
}

void sub_10001ED5C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v2));

  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v4);
  }
  uint64_t v6 = (os_log_s *)os_log_GKDaemon;
  id v7 = (id)os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
  if ((_DWORD)v7)
  {
    int v10 = 138412290;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Account setup (Player did not change): current profile:%@",  (uint8_t *)&v10,  0xCu);
  }

  if (*(void *)(a1 + 40)) {
    id v7 = objc_msgSend(v3, "setAlias:");
  }
  if (*(void *)(a1 + 48)) {
    id v7 = objc_msgSend(v3, "setFirstName:");
  }
  if (*(void *)(a1 + 56)) {
    id v7 = objc_msgSend(v3, "setLastName:");
  }
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v7);
  }
  id v9 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    int v10 = 138412290;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Account setup (Player did not change): updated profile:%@",  (uint8_t *)&v10,  0xCu);
  }
}

void sub_10001F07C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v10 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v2));

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) credential]);
  id v5 = [v4 copy];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerInternal]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  objc_msgSend(v5, "setEnvironment:", objc_msgSend(v7, "environment"));

  if (*(void *)(a1 + 48)) {
    objc_msgSend(v5, "setAccountName:");
  }
  if (*(void *)(a1 + 56))
  {
    objc_msgSend(v10, "setAlias:");
    [v6 setAlias:*(void *)(a1 + 56)];
  }

  if (*(void *)(a1 + 64))
  {
    objc_msgSend(v10, "setFirstName:");
    [v6 setFirstName:*(void *)(a1 + 64)];
  }

  if (*(void *)(a1 + 72))
  {
    objc_msgSend(v10, "setLastName:");
    [v6 setLastName:*(void *)(a1 + 72)];
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) credential]);
  [v3 replaceCredential:v8 withCredential:v5 completionHandler:0];

  uint64_t v9 = *(void *)(a1 + 80);
  if (v9) {
    (*(void (**)(void))(v9 + 16))();
  }
}

void sub_10001F3D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  if (!os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
  {
    if (v4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  sub_100021870();
  if (!v4)
  {
LABEL_5:
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    [v6 setAppInitState:@"GKAppInitialized"];
  }

void sub_10001F784(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v12[0] = GKMaxPlayersP2P;
  v12[1] = GKMaxPlayersHosted;
  v12[2] = GKMaxPlayersTurnBased;
  v12[3] = GKMaxGameStateSizeTurnBased;
  void v12[4] = GKExchangeDataMaximumSize;
  v12[5] = GKExchangeMaxPerPlayer;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v12, 6LL));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10001F8F0;
  v9[3] = &unk_10026B058;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v4 getValuesForKeys:v5 queue:v7 completion:v9];
}

uint64_t sub_10001F8F0(uint64_t a1, void *a2)
{
  uint64_t v3 = GKMaxPlayersP2P;
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v3]);
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"GKMaxPlayersP2P"];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:GKMaxPlayersHosted]);
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"GKMaxPlayersHosted"];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:GKMaxPlayersTurnBased]);
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"GKMaxPlayersTurnBased"];

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:GKMaxGameStateSizeTurnBased]);
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"GKMaxGameStateSizeTurnBased"];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:GKExchangeDataMaximumSize]);
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"GKExchangeDataMaximumSize"];

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:GKExchangeMaxPerPlayer]);
  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"GKExchangeMaxPerPlayer"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10001FA60(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allValues]);
  [v2 updatePreferencesFromBag:v3];

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10001FC98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 localPlayer]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerID]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10001FD68;
  v10[3] = &unk_10026BFB8;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = v7;
  uint64_t v12 = v8;
  id v13 = v3;
  id v9 = v3;
  [v4 getAccountAgeCategoryForPlayerID:v6 withCompletion:v10];
}

void sub_10001FD68(id *a1, int a2)
{
  if (a2 == 1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] transport]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] localPlayer]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKProfileServicePrivate,  "serviceWithTransport:forClient:localPlayer:",  v3,  v4,  v5));

    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10001FEEC;
    v10[3] = &unk_10026BFB8;
    id v11 = a1[4];
    id v7 = a1[6];
    id v12 = a1[5];
    id v13 = v7;
    [v6 getProfilePrivacyWithHandler:v10];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(a1);
    }
    id v9 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "checkActivitySharingRepromptWithCompletion: No, the user is not adult.",  buf,  2u);
    }

    [a1[4] setResult:&__kCFBooleanFalse];
    (*((void (**)(void))a1[6] + 2))();
  }

void sub_10001FEEC(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transport]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localPlayer]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKUtilityService,  "serviceWithTransport:forClient:localPlayer:",  v3,  v4,  v5));

    v18[0] = GKActivitySharingRepromptLimit;
    v18[1] = GKActivitySharingRepromptMinDaysBetween;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v18, 2LL));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1000200D8;
    v13[3] = &unk_10026BF90;
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = *(void **)(a1 + 48);
    id v14 = v8;
    uint64_t v15 = v9;
    id v16 = v10;
    [v6 getStoreBagValuesForKeys:v7 handler:v13];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(a1);
    }
    id v12 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "checkActivitySharingRepromptWithCompletion: No, the user's profile privacy is not Only You.",  buf,  2u);
    }

    [*(id *)(a1 + 32) setResult:&__kCFBooleanFalse];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

void sub_1000200D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    id v3 = &__NSDictionary0__struct;
  }
  id v6 = v3;
  id v4 = [v3 integerValueFromKey:GKActivitySharingRepromptLimit defaultValue:3];
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  objc_msgSend( *(id *)(a1 + 40),  "shouldCadencedActivitySharingRepromptWithLimit:minDaysBetween:",  v4,  objc_msgSend( v6,  "integerValueFromKey:defaultValue:",  GKActivitySharingRepromptMinDaysBetween,  30))));
  [*(id *)(a1 + 32) setResult:v5];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100020198(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, [v2 BOOLValue]);
}

void sub_1000207C4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000207D4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

id sub_100020824(id a1)
{
  return a1;
}

  ;
}

void sub_100020844( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

id sub_10002085C(uint64_t a1, void *a2)
{
  return a2;
}

  ;
}

double sub_10002087C()
{
  return CFAbsoluteTimeGetCurrent();
}

  ;
}

double sub_10002089C()
{
  return CFAbsoluteTimeGetCurrent();
}

void sub_1000208A4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1000208B0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_1000208BC()
{
  return v0;
}

uint64_t sub_1000208C8()
{
  return v0;
}

void sub_1000208D4()
{
}

void sub_10002093C()
{
}

void sub_10002099C()
{
}

void sub_1000209C8(void *a1)
{
  id v2 = a1;
  v3[0] = 67109120;
  v3[1] = [(id)sub_1000208C8() code];
  _os_log_debug_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEBUG,  "GKAccountService signOutPlayerWithOptOut: removeCred (error:%d)",  (uint8_t *)v3,  8u);

  sub_10000C760();
}

void sub_100020A58()
{
}

void sub_100020A84()
{
}

void sub_100020AE4()
{
}

void sub_100020B44()
{
}

void sub_100020BAC()
{
}

void sub_100020C0C()
{
}

void sub_100020C6C()
{
}

void sub_100020CCC()
{
}

void sub_100020D30()
{
}

void sub_100020D90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [(id)sub_1000208C8() conciseDescription];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000207E0();
  sub_1000208B0( (void *)&_mh_execute_header,  v2,  v6,  "Cached local player incomplete, using archived local player (%@)",  v7);

  sub_100020818();
}

void sub_100020E24(uint64_t a1, void *a2)
{
  id v3 = [(id)sub_1000208BC() conciseDescription];
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10002082C();
  sub_1000207D4((void *)&_mh_execute_header, v2, v5, "local player djinned up:%@ for %@", v6);

  sub_100020800();
}

void sub_100020EB0(uint64_t a1, void *a2)
{
  id v3 = [(id)sub_1000208BC() conciseDescription];
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10002082C();
  sub_1000207D4( (void *)&_mh_execute_header,  v2,  v5,  "Cached local player incomplete, archived local player (%@) doesn't match %@",  v6);

  sub_100020800();
}

void sub_100020F3C(void *a1)
{
  v3[0] = 136315394;
  sub_1000207EC();
  sub_1000207D4((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_100020818();
}

void sub_100020FC8()
{
}

void sub_100021028()
{
}

void sub_100021088()
{
}

void sub_1000210E8(void *a1)
{
  v3[0] = 136315394;
  sub_1000207EC();
  sub_1000207D4((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_100020810();
}

void sub_10002117C()
{
}

void sub_1000211DC()
{
}

void sub_10002123C()
{
}

void sub_10002129C()
{
}

void sub_1000212FC(void *a1, void *a2)
{
  uint64_t v4 = (const char *)sub_1000208BC();
  uint64_t v5 = NSStringFromSelector(v4);
  objc_claimAutoreleasedReturnValue(v5);
  id v6 = [(id)sub_1000208C8() credential];
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  sub_100020884();
  sub_1000207D4((void *)&_mh_execute_header, v2, v8, "%@ cred:%@", v9);

  sub_100020800();
}

void sub_10002139C(void *a1)
{
  v3[0] = 136315394;
  sub_1000207EC();
  sub_1000207D4((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_100020818();
}

void sub_100021428()
{
}

void sub_100021454()
{
}

void sub_1000214B4(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = (const char *)sub_1000208BC();
  uint8_t v6 = NSStringFromSelector(v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credential]);
  sub_100020884();
  sub_1000207D4((void *)&_mh_execute_header, v2, v9, "%@ cred:%@", v10);

  sub_100020800();
}

void sub_10002155C(void *a1)
{
  v3[0] = 136315394;
  sub_1000207EC();
  sub_1000207D4((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_100020818();
}

void sub_1000215E8()
{
}

void sub_100021614(unsigned int a1, void *a2)
{
  uint64_t v3 = a1;
  id v4 = a2;
  int v6 = 134218240;
  uint64_t v7 = v3;
  __int16 v8 = 2048;
  uint64_t v9 = [(id)sub_1000208C8() scope];
  sub_1000207D4((void *)&_mh_execute_header, v2, v5, "_initGame login scope change new:%lX old:%lX", (uint8_t *)&v6);

  sub_100020800();
}

void sub_1000216B0(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  sub_10002082C();
  sub_1000208A4( (void *)&_mh_execute_header,  v3,  v5,  "EVIL: don't know how to handle server error code (%@) for server error %@",  v6);

  sub_100020800();
}

void sub_100021754()
{
}

void sub_1000217B4()
{
}

void sub_1000217E0(void *a1)
{
  v3[0] = 136315394;
  sub_1000207EC();
  sub_1000207D4((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_100020818();
}

void sub_100021870()
{
}

void sub_100021BCC(id *a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectAtIndexedSubscript:a3]);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1[5] objectForKeyedSubscript:v5]);
  if (!v6)
  {
    uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [a1[6] count]));
    [a1[5] setObject:v6 forKeyedSubscript:v5];
  }

  [v6 addObject:v7];
}

void sub_100021C7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKGameServicePrivate,  "serviceFromService:",  *(void *)(a1 + 32)));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100021D44;
  v7[3] = &unk_10026C060;
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v6 = v3;
  [v4 getGameMetadataForBundleIDs:v5 handler:v7];
}

void sub_100021D44(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100021DD4;
  v7[3] = &unk_10026C038;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  [a2 enumerateObjectsUsingBlock:v7];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  v4,  v5,  v6);
}

void sub_100021DD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100021E94;
  v9[3] = &unk_10026C010;
  id v7 = *(id *)(a1 + 40);
  id v10 = v3;
  id v11 = v7;
  id v8 = v3;
  [v6 enumerateObjectsUsingBlock:v9];
}

uint64_t sub_100021E94(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  a2,  *(void *)(a1 + 32));
}

void sub_100021F80(id a1, GKPlayerInternal *a2, GKGameInternal *a3)
{
}

void sub_100022064(id a1, GKPlayerInternal *a2, GKGameInternal *a3)
{
}

void sub_10002243C(_Unwind_Exception *a1)
{
}

void sub_10002246C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = [*(id *)(a1 + 32) count];
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL)) {
    goto LABEL_42;
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject fetchRequestForContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "fetchRequestForContext:",  v5));
  [v9 setFetchLimit:v7];
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"expirationDate > %@ && ((availablePieces & %d) = %d) && playerID in %@",  v8,  *(unsigned __int8 *)(a1 + 100),  *(unsigned __int8 *)(a1 + 100),  *(void *)(a1 + 32)));
  [v9 setPredicate:v10];

  id v55 = 0LL;
  id v11 = [v5 countForFetchRequest:v9 error:&v55];
  id v12 = v55;
  id v13 = v12;
  if (v12)
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers(v12);
    }
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_10002D344();
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = v11 == v7;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = v11 == v7;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL))
  {
    id v15 = v13;
  }

  else
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"expirationDate != nil && ((availablePieces & %d) = %d) && playerID in %@",  *(unsigned __int8 *)(a1 + 100),  *(unsigned __int8 *)(a1 + 100),  *(void *)(a1 + 32)));
    [v9 setPredicate:v16];

    id v54 = v13;
    id v17 = [v5 countForFetchRequest:v9 error:&v54];
    id v15 = v54;

    if (v15)
    {
      if (!os_log_GKGeneral) {
        id v19 = (id)GKOSLoggers(v18);
      }
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
        sub_10002D2E4();
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = v17 == v7;
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL))
  {
LABEL_42:
    if (*(_DWORD *)(a1 + 96))
    {
      double v20 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfilesWithPlayerIDs:inManagedObjectContext:",  *(void *)(a1 + 32),  v5));
      id v21 = [v20 count];
      if (v21 != v7)
      {
        if (!os_log_GKGeneral) {
          id v22 = (id)GKOSLoggers(v21);
        }
        double v23 = (os_log_s *)os_log_GKCache;
        if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
          sub_10002D27C(a1, v23, v24, v25, v26, v27, v28, v29);
        }
      }

      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v20 _gkMapDictionaryWithKeyPath:@"playerID"]);
      if (*(_BYTE *)(a1 + 101)) {
        id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v7));
      }
      else {
        id v31 = 0LL;
      }
      if (*(_BYTE *)(a1 + 101)) {
        id v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v7));
      }
      else {
        id v32 = 0LL;
      }
      if (*(_BYTE *)(a1 + 102)) {
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v7));
      }
      else {
        uint64_t v33 = 0LL;
      }
      char v44 = v20;
      id v34 = v5;
      if (*(_BYTE *)(a1 + 102)) {
        id v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v7));
      }
      else {
        id v35 = 0LL;
      }
      id v36 = *(void **)(a1 + 56);
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472LL;
      v45[2] = sub_100022944;
      v45[3] = &unk_10026C110;
      id v37 = v30;
      uint64_t v38 = *(void *)(a1 + 88);
      id v46 = v37;
      uint64_t v51 = v38;
      char v52 = *(_BYTE *)(a1 + 101);
      id v39 = v31;
      id v47 = v39;
      id v40 = v32;
      id v48 = v40;
      char v53 = *(_BYTE *)(a1 + 102);
      id v41 = v33;
      id v49 = v41;
      id v42 = v35;
      id v50 = v42;
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v36 _gkFilterWithBlock:v45]);
      [*(id *)(a1 + 48) setResult:v43];

      if ([v39 count]) {
        [*(id *)(a1 + 64) updateLastPlayedGames:v39 forPlayers:v40 group:*(void *)(a1 + 48)];
      }
      id v5 = v34;
      if ([v41 count]) {
        [*(id *)(a1 + 64) updateChallengedGames:v41 forPlayers:v42 group:*(void *)(a1 + 48)];
      }
    }
  }

  v6[2](v6);
}

id sub_100022944(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
  if (v4)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) internalRepresentationForCacheObject:v4]);
LABEL_8:
    id v7 = v5;
    goto LABEL_9;
  }

  if ([v3 isEqualToString:GKAnonymousPlayerID])
  {
    uint64_t v6 = (objc_class *)&OBJC_CLASS___GKAnonymousPlayerInternal;
LABEL_7:
    id v5 = objc_alloc_init(v6);
    goto LABEL_8;
  }

  if ([v3 isEqualToString:GKUnknownPlayerID])
  {
    uint64_t v6 = (objc_class *)&OBJC_CLASS___GKUnknownPlayerInternal;
    goto LABEL_7;
  }

  id v7 = 0LL;
LABEL_9:
  if (*(_BYTE *)(a1 + 80))
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 lastPlayedGame]);
    if (v8)
    {
      [*(id *)(a1 + 40) addObject:v8];
      [*(id *)(a1 + 48) addObject:v7];
    }
  }

  if (*(_BYTE *)(a1 + 81))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 lastChallengedGame]);
    if (v9)
    {
      [*(id *)(a1 + 56) addObject:v9];
      [*(id *)(a1 + 64) addObject:v7];
    }
  }

  return v7;
}

void sub_100022A74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  (*(void (**)(uint64_t, id, void, void, void))(v2 + 16))( v2,  v3,  0LL,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
}

void sub_100022D84(_Unwind_Exception *a1)
{
}

id sub_100022DA0(id a1, id a2)
{
  v6[0] = @"GKPlayerInternal";
  v6[1] = a2;
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v6, 2LL));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKResourceIdentifier resourceIdentifierForKeys:]( &OBJC_CLASS___GKResourceIdentifier,  "resourceIdentifierForKeys:",  v3));

  return v4;
}

void sub_100022E50(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _gkMapWithBlock:&stru_10026C1E0]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v4));

  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_100023138;
  v26[3] = &unk_10026C230;
  uint64_t v6 = *(void **)(a1 + 40);
  id v27 = *(id *)(a1 + 48);
  id v28 = *(id *)(a1 + 40);
  char v30 = *(_BYTE *)(a1 + 88);
  id v7 = v5;
  id v29 = v7;
  id v8 = [v6 performBlockAndWait:v26];
  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v8);
  }
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_10002D3A4();
  }
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 allObjects]);
  id v11 = [v10 mutableCopy];
  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%hhu",  *(unsigned __int8 *)(a1 + 88)));
  [v11 addObject:v12];
  [*(id *)(a1 + 56) setObject:v11 forKeyedSubscript:@"callParams"];
  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v14 = objc_retainBlock(*(id *)(a1 + 72));
  unsigned int v15 = [v13 doesCallbackListExistFor:@"gk-get-profile-info" parameters:v11 callback:v14];

  if (v15)
  {
    [*(id *)(a1 + 56) setObject:&__kCFBooleanTrue forKeyedSubscript:@"skipCallbacks"];
  }

  else if ([v7 count])
  {
    id v16 = *(void **)(a1 + 56);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_100023260;
    v21[3] = &unk_10026C2D0;
    id v17 = v10;
    char v25 = *(_BYTE *)(a1 + 88);
    uint64_t v18 = *(void *)(a1 + 80);
    id v22 = v17;
    uint64_t v24 = v18;
    int8x16_t v20 = *(int8x16_t *)(a1 + 56);
    id v19 = (id)v20.i64[0];
    int8x16_t v23 = vextq_s8(v20, v20, 8uLL);
    [v16 perform:v21];
  }

  v3[2](v3);
}

id sub_1000230F8(id a1, GKResourceIdentifier *a2, unint64_t a3)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[GKResourceIdentifier keys](a2, "keys", a3));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectAtIndexedSubscript:1]);

  return v4;
}

void sub_100023138(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allObjects]);
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfilesWithPlayerIDs:inManagedObjectContext:",  v2,  *(void *)(a1 + 40)));

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000231F0;
  v4[3] = &unk_10026C208;
  char v6 = *(_BYTE *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  [v3 enumerateObjectsUsingBlock:v4];
}

void sub_1000231F0(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 availablePieces] == *(unsigned __int8 *)(a1 + 40)
    && ([v5 expired] & 1) == 0)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v5 playerID]);
    [v3 removeObject:v4];
  }
}

void sub_100023260(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKProfileService profileRequestForPlayerIDs:pieces:]( &OBJC_CLASS___GKProfileService,  "profileRequestForPlayerIDs:pieces:",  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 64)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  char v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100023378;
  v10[3] = &unk_10026C2A8;
  id v7 = *(void **)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  id v11 = v7;
  id v8 = *(id *)(a1 + 32);
  char v15 = *(_BYTE *)(a1 + 64);
  id v12 = v8;
  id v13 = v3;
  id v9 = v3;
  [v5 issueRequest:v4 bagKey:@"gk-get-profile-info" clientProxy:v6 handler:v10];
}

void sub_100023378(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a4;
  [*(id *)(a1 + 32) setError:a3];
  if (v7)
  {
    id v8 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100023468;
    v9[3] = &unk_10026C280;
    double v13 = a4;
    id v10 = v7;
    id v11 = *(id *)(a1 + 40);
    char v14 = *(_BYTE *)(a1 + 64);
    id v12 = *(id *)(a1 + 32);
    [v8 performOnManagedObjectContext:v9];
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100023468(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  double v6 = *(double *)(a1 + 56);
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", v6));
  id v9 = (id *)(a1 + 32);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"profile-infos"]);
  if (v10)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfilesWithPlayerIDs:inManagedObjectContext:",  *(void *)(a1 + 40),  v5));
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 _gkMapDictionaryWithKeyPath:@"input-id"]);
    if (![v12 count])
    {
      uint64_t v13 = objc_claimAutoreleasedReturnValue([v10 _gkMapDictionaryWithKeyPath:@"player-id"]);

      id v12 = (void *)v13;
    }

    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_1000236C4;
    v28[3] = &unk_10026C258;
    id v29 = v12;
    id v30 = v8;
    char v32 = *(_BYTE *)(a1 + 64);
    id v31 = v5;
    id v14 = v12;
    [v11 enumerateObjectsUsingBlock:v28];
  }

  else
  {
    char v15 = (void *)objc_claimAutoreleasedReturnValue([*v9 objectForKeyedSubscript:@"status"]);

    if (v15)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*v9 objectForKeyedSubscript:@"status"]);
      uint64_t v17 = (uint64_t)[v16 integerValue];
    }

    else
    {
      uint64_t v17 = 1LL;
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  GKServerErrorDomain,  v17,  0LL));
    [*(id *)(a1 + 48) setError:v18];

    if (!os_log_GKGeneral) {
      id v20 = (id)GKOSLoggers(v19);
    }
    id v21 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10002D3D0((uint64_t)v9, v21, v22, v23, v24, v25, v26, v27);
    }
  }

  v7[2](v7);
}

void sub_1000236C4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 playerID]);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v5]);

  if (v7) {
    double v6 = v7;
  }
  else {
    double v6 = &__NSDictionary0__struct;
  }
  [v4 updateWithServerRepresentation:v6 expirationDate:*(void *)(a1 + 40) pieces:*(unsigned __int8 *)(a1 + 56)];
  [*(id *)(a1 + 48) refreshObject:v4 mergeChanges:1];
}

void sub_10002375C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"callParams"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"skipCallbacks"]);

  if (v3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v2 == 0LL;
  }
  if (!v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    double v6 = (void *)objc_claimAutoreleasedReturnValue([v5 retrieveAndClearCallbacks:@"gk-get-profile-info" parameters:v2]);

    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v7 = v6;
    id v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v16;
      do
      {
        id v11 = 0LL;
        do
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v15 + 1) + 8LL * (void)v11);
          double v13 = *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
          id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error", (void)v15));
          (*(void (**)(uint64_t, void *, double))(v12 + 16))(v12, v14, v13);

          id v11 = (char *)v11 + 1;
        }

        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v9);
    }
  }
}

void sub_100023E2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_100023F7C;
  v20[3] = &unk_10026C370;
  id v21 = *(id *)(a1 + 32);
  id v22 = *(id *)(a1 + 40);
  BOOL v4 = objc_retainBlock(v20);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000240D0;
  v12[3] = &unk_10026C500;
  id v13 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 64);
  id v8 = *(void **)(a1 + 72);
  id v14 = v6;
  uint64_t v15 = v7;
  id v9 = v8;
  char v19 = *(_BYTE *)(a1 + 80);
  id v16 = v9;
  id v17 = v4;
  id v18 = v3;
  id v10 = v3;
  id v11 = v4;
  [v5 performBlock:v12];
}

void sub_100023F7C(uint64_t a1, void *a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100024014;
  block[3] = &unk_10026BDB0;
  id v6 = a2;
  id v3 = *(dispatch_queue_s **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = v6;
  dispatch_sync(v3, block);
}

void sub_100024014(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_10002407C;
  v2[3] = &unk_10026C348;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 enumerateObjectsUsingBlock:v2];
}

void sub_10002407C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 playerID]);
  if (v3) {
    [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:v3];
  }
}

void sub_1000240D0(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playersByFamiliarity:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playersByFamiliarity:",  *(void *)(a1 + 32)));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100024198;
  v6[3] = &unk_10026C4D8;
  id v2 = *(id *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = *(void **)(a1 + 56);
  id v7 = v2;
  uint64_t v8 = v3;
  id v9 = v4;
  char v11 = *(_BYTE *)(a1 + 80);
  id v10 = *(id *)(a1 + 64);
  [v5 enumerateKeysAndObjectsUsingBlock:v6];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_100024198(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v6 count])
  {
    unsigned __int8 v7 = +[GKPlayerProfileCacheObject piecesToLoadForFamiliarity:]( GKPlayerProfileCacheObject,  "piecesToLoadForFamiliarity:",  [v5 integerValue]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000242B8;
    v9[3] = &unk_10026C4B0;
    uint64_t v8 = *(void **)(a1 + 32);
    void v9[4] = *(void *)(a1 + 40);
    id v10 = v6;
    id v11 = v5;
    id v13 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 32);
    char v15 = *(_BYTE *)(a1 + 64);
    unsigned __int8 v16 = v7;
    id v14 = *(id *)(a1 + 56);
    [v8 perform:v9];
  }
}

void sub_1000242B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 48) integerValue];
  BOOL v7 = *(void *)(a1 + 64) != 0LL;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) context]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000243F8;
  v12[3] = &unk_10026C488;
  id v13 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 56);
  __int16 v20 = *(_WORD *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 32);
  id v14 = v9;
  uint64_t v15 = v10;
  id v17 = *(id *)(a1 + 64);
  id v18 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 48);
  id v19 = v3;
  id v11 = v3;
  [v4 fetchProfilesForPlayerIDs:v5 familiarity:v6 responseKind:v7 context:v8 handler:v12];
}

void sub_1000243F8(uint64_t a1, void *a2, void *a3, char a4, char a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = v10;
  if ((a4 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers(v10);
    }
    id v13 = (os_log_s *)os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_10002D464(a1, v13, v14);
    }
    uint64_t v15 = *(void **)(a1 + 40);
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKProfileService.m",  456LL,  "-[GKProfileService getProfilesForPlayerIDs:discardingStaleData:handler:]_block_invoke"));
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 transactionGroupWithName:v16]);

    int v18 = *(unsigned __int8 *)(a1 + 88);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_100024688;
    v30[3] = &unk_10026C410;
    void v30[4] = *(void *)(a1 + 48);
    id v31 = *(id *)(a1 + 32);
    char v36 = *(_BYTE *)(a1 + 89);
    id v32 = *(id *)(a1 + 40);
    id v19 = v17;
    id v33 = v19;
    id v34 = *(id *)(a1 + 64);
    id v35 = *(id *)(a1 + 72);
    [v19 perform:v30];
    if (v18 || (a5 & 1) == 0)
    {
      __int16 v20 = *(void **)(a1 + 40);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      v23[2] = sub_100024990;
      v23[3] = &unk_10026C460;
      id v24 = v19;
      int8x16_t v22 = *(int8x16_t *)(a1 + 40);
      id v21 = (id)v22.i64[0];
      int8x16_t v25 = vextq_s8(v22, v22, 8uLL);
      id v26 = *(id *)(a1 + 32);
      id v27 = *(id *)(a1 + 56);
      id v28 = *(id *)(a1 + 64);
      id v29 = *(id *)(a1 + 72);
      [v20 perform:v23];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

void sub_100024688(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 80);
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10002479C;
  v12[3] = &unk_10026C3E8;
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(a1 + 40);
  id v13 = v8;
  uint64_t v14 = v9;
  id v15 = v10;
  id v17 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 72);
  id v19 = v3;
  id v11 = v3;
  [v4 loadProfilesForPlayerIDs:v5 pieces:v6 context:v7 handler:v12];
}

uint64_t sub_10002479C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setError:v4];
  LODWORD(v3) = [v4 gkIsNotConnectedToInternetError];

  if ((_DWORD)v3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_100024890;
    v7[3] = &unk_10026C3C0;
    uint64_t v5 = *(void **)(a1 + 32);
    void v7[4] = *(void *)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 64);
    id v9 = *(id *)(a1 + 56);
    id v11 = *(id *)(a1 + 72);
    [v5 perform:v7];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

void sub_100024890(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = 2 * (*(void *)(a1 + 56) != 0LL);
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100024960;
  v9[3] = &unk_10026C398;
  id v10 = *(id *)(a1 + 64);
  id v11 = v3;
  id v8 = v3;
  [v4 fetchProfilesForPlayerIDs:v5 familiarity:0 responseKind:v6 context:v7 handler:v9];
}

uint64_t sub_100024960(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100024990(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100024ABC;
  v10[3] = &unk_10026C438;
  id v11 = a1[6];
  id v7 = a1[4];
  id v8 = a1[5];
  id v12 = v7;
  id v13 = v8;
  id v14 = a1[7];
  id v15 = a1[8];
  id v16 = a1[9];
  id v17 = a1[10];
  id v18 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v6 block:v10];
}

void sub_100024ABC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
  }

  else
  {
    id v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    id v6 = [*(id *)(a1 + 64) integerValue];
    uint64_t v7 = 2 * (*(void *)(a1 + 72) != 0LL);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100024BEC;
    v9[3] = &unk_10026C398;
    id v10 = *(id *)(a1 + 80);
    id v11 = *(id *)(a1 + 88);
    [v4 fetchProfilesForPlayerIDs:v5 familiarity:v6 responseKind:v7 context:v8 handler:v9];
  }

uint64_t sub_100024BEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100024C1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v11, 1LL));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100024D18;
  v8[3] = &unk_10026C550;
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v7 = v3;
  [v4 loadScopedPlayerIDs:v5 gameBundleIDs:v6 handler:v8];
}

void sub_100024D18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10002D4E4();
    }
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKScopedIDs makePlayerIDtoScopedIDsDictFromScopedIDs:]( &OBJC_CLASS___GKScopedIDs,  "makePlayerIDtoScopedIDsDictFromScopedIDs:",  v5));
    [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"playerIDtoScopedIDs"];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100024DE0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"playerIDtoScopedIDs"]);
  id v3 = (void *)v2;
  id v4 = &__NSDictionary0__struct;
  if (v2) {
    id v4 = (void *)v2;
  }
  id v5 = v4;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100024F08;
  block[3] = &unk_10026BF40;
  id v6 = *(dispatch_queue_s **)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 56);
  id v15 = v5;
  id v10 = v5;
  dispatch_sync(v6, block);
  uint64_t v7 = *(void *)(a1 + 64);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v7 + 16))(v7, v8, v9);
}

void sub_100024F08(uint64_t a1)
{
  id v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  id v6 = sub_100024FA4;
  uint64_t v7 = &unk_10026C578;
  uint64_t v2 = *(void **)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _gkFilterWithBlock:&v4]);
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v3, v4, v5, v6, v7);
}

id sub_100024FA4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v4]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v4]);

  [v5 setScopedIDs:v6];
  return v5;
}

void sub_1000251AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v12 = GKFriendSupportPageURL;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000252D4;
  v9[3] = &unk_10026B058;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v4 getValuesForKeys:v5 queue:v7 completion:v9];
}

void sub_1000252D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6 || (id v6 = [v5 count]) == 0)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10002D544();
    }
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:GKFriendSupportPageURL]);
  [*(id *)(a1 + 32) setResult:v9];

  [*(id *)(a1 + 32) setError:v7];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000253B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

uint64_t sub_1000254E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100025704(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000257C4;
  v8[3] = &unk_10026C5C8;
  id v4 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 32);
  uint64_t v7 = a2;
  [v4 performOnManagedObjectContext:v8];
  v7[2](v7);
}

void sub_1000257C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](&OBJC_CLASS___GKPlayerProfileCacheObject, "selfPlayerID"));
  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v5));
    [v8 setStatus:*(void *)(a1 + 32)];
    [v8 expire];
    if (*(void *)(a1 + 32)) {
      id v9 = *(const __CFString **)(a1 + 32);
    }
    else {
      id v9 = &stru_10027B720;
    }
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[GKResource resourceWithID:representedItem:]( &OBJC_CLASS___GKResource,  "resourceWithID:representedItem:",  v7,  v9));
    uint64_t v11 = *(void **)(a1 + 40);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) credential]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 setPlayerStatusWriterWithCredential:v12]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v10));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_100025940;
    v15[3] = &unk_10026B2A0;
    id v16 = *(id *)(a1 + 56);
    id v17 = v6;
    [v13 writeResources:v14 handler:v15];
  }
}

uint64_t sub_100025940(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100025970(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100025BA4(uint64_t a1, void *a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100025C60;
  v9[3] = &unk_10026C5C8;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void **)(a1 + 56);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = v7;
  id v13 = *(id *)(a1 + 64);
  id v8 = a2;
  [v4 performOnManagedObjectContext:v9];
  v8[2](v8);
}

void sub_100025C60(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  [v6 setAvatarType:*(void *)(a1 + 32)];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localPlayer]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 playerID]);
  uint64_t v9 = GKAvatarSubdirectoryNameForPlayerID();
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 imageCacheKeyPathsByKey]);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100025DA4;
  v14[3] = &unk_10026C5F0;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v17 = v10;
  id v18 = v6;
  id v12 = v6;
  id v13 = v10;
  [v11 enumerateKeysAndObjectsUsingBlock:v14];

  v5[2](v5);
}

void sub_100025DA4(uint64_t a1, void *a2, void *a3)
{
  id v12 = a3;
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v6]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v6]);

  if (v7) {
    BOOL v9 = v8 == 0LL;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = GKImageCachePathForSubdirectoryAndFilename(*(void *)(a1 + 48), v8);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    [*(id *)(a1 + 56) setValue:v11 forKeyPath:v12];
    [v7 _gkWriteToImageCacheWithURLString:v11];
  }
}

uint64_t sub_100025E60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100026038(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000260FC;
  v6[3] = &unk_10026C5C8;
  id v4 = *(void **)(a1 + 32);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 32);
  id v5 = a2;
  [v4 performOnManagedObjectContext:v6];
  v5[2](v5);
}

void sub_1000260FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localPlayer]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerID]);

  v21[0] = @"photo-data";
  v21[1] = GKAvatarTypeKey;
  uint64_t v7 = *(void *)(a1 + 48);
  v22[0] = *(void *)(a1 + 40);
  v22[1] = v7;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v22,  v21,  2LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKResource resourceWithID:representedItem:]( &OBJC_CLASS___GKMutableResource,  "resourceWithID:representedItem:",  v6,  v8));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credential]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 setPlayerPhotoWriterWithCredential:v11]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v9));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_1000262C4;
  v17[3] = &unk_10026B480;
  id v14 = *(id *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 32);
  id v18 = v14;
  uint64_t v19 = v15;
  id v20 = v4;
  id v16 = v4;
  [v12 writeResources:v13 handler:v17];
}

uint64_t sub_1000262C4(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10002634C;
    v5[3] = &unk_10026B4A8;
    void v5[4] = *(void *)(a1 + 40);
    +[GKClientProxy enumerateClientsUsingBlock:](&OBJC_CLASS___GKClientProxy, "enumerateClientsUsingBlock:", v5);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10002634C(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  unsigned __int8 v4 = [v5 isEqual:v3];

  if ((v4 & 1) == 0) {
    [v5 refreshContentsForDataType:16 userInfo:0];
  }
}

uint64_t sub_1000263B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10002659C(int8x16_t *a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100026638;
  v6[3] = &unk_10026B608;
  int8x16_t v5 = a1[2];
  id v3 = (id)v5.i64[0];
  int8x16_t v7 = vextq_s8(v5, v5, 8uLL);
  unsigned __int8 v4 = a2;
  [v3 performOnManagedObjectContext:v6];
  v4[2](v4);
}

void sub_100026638(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  [v6 clearImages];
  int8x16_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localPlayer]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 playerID]);

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKResource resourceWithID:](&OBJC_CLASS___GKResource, "resourceWithID:", v8));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credential]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 deletePlayerPhotoWriterWithCredential:v11]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v9));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1000267A8;
  v15[3] = &unk_10026B2A0;
  id v16 = *(id *)(a1 + 40);
  id v17 = v5;
  id v14 = v5;
  [v12 writeResources:v13 handler:v15];
}

uint64_t sub_1000267A8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1000267D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000268F8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v2));

  unsigned __int8 v4 = [v3 isFindable];
  [v3 setFindable:*(unsigned __int8 *)(a1 + 56)];
  uint64_t v15 = @"findable";
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 56)));
  id v16 = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));

  int8x16_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_100026AA4;
  v11[3] = &unk_10026B520;
  int8x16_t v10 = *(int8x16_t *)(a1 + 32);
  id v9 = (id)v10.i64[0];
  int8x16_t v12 = vextq_s8(v10, v10, 8uLL);
  unsigned __int8 v14 = v4;
  id v13 = *(id *)(a1 + 48);
  [v7 issueRequest:v6 bagKey:@"gk-set-findable" clientProxy:v8 handler:v11];
}

void sub_100026AA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int8x16_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100026B90;
    v10[3] = &unk_10026C618;
    id v11 = *(id *)(a1 + 40);
    char v12 = *(_BYTE *)(a1 + 56);
    [v7 performBlock:v10];
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    [v8 refreshContentsForDataType:6 userInfo:0];
  }

  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v6);
  }
}

void sub_100026B90(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v2));

  [v3 setFindable:*(unsigned __int8 *)(a1 + 40)];
}

void sub_100026E00(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  int8x16_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 alias]);
  [v6 setAlias:*(void *)(a1 + 32)];
  uint64_t v8 = *(void *)(a1 + 32);
  v22[1] = @"suggestions-count";
  v23[0] = v8;
  v22[0] = @"player-nickname";
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
  v23[1] = v9;
  int8x16_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v23,  v22,  2LL));

  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  char v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_100026FC0;
  v17[3] = &unk_10026C668;
  id v13 = *(id *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 40);
  id v18 = v13;
  uint64_t v19 = v14;
  id v20 = v7;
  id v21 = v5;
  id v15 = v7;
  id v16 = v5;
  [v11 issueRequest:v10 bagKey:@"gk-set-player-nickname" clientProxy:v12 handler:v17];
}

void sub_100026FC0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  int8x16_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"suggestions"]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"player-nickname-update-status"]);

  id v9 = [v8 unsignedIntegerValue];
  if (v7) {
    int8x16_t v10 = v7;
  }
  else {
    int8x16_t v10 = &__NSArray0__struct;
  }
  [*(id *)(a1 + 32) setResult:v10];
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
  [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"updateStatus"];

  [*(id *)(a1 + 32) setError:v5];
  if (v5 || v9)
  {
    if ([v7 count]) {
      goto LABEL_11;
    }
    uint64_t v14 = (os_log_s *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v15 = (id)GKOSLoggers(0LL);
      uint64_t v14 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      sub_10002D63C();
      if (v5) {
        goto LABEL_12;
      }
    }

    else
    {
LABEL_11:
      if (v5)
      {
LABEL_12:
        id v16 = [*(id *)(a1 + 32) setObject:&off_1002878B0 forKeyedSubscript:@"updateStatus"];
        if (!os_log_GKGeneral) {
          id v17 = (id)GKOSLoggers(v16);
        }
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_10002D5DC();
        }
      }
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10002723C;
    v19[3] = &unk_10026BDB0;
    id v13 = &v20;
    id v20 = *(id *)(a1 + 32);
    id v21 = *(id *)(a1 + 48);
    [v18 performBlock:v19];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    goto LABEL_17;
  }

  char v12 = *(void **)(a1 + 40);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  void v22[2] = sub_100027230;
  v22[3] = &unk_10026B120;
  id v13 = &v23;
  id v23 = *(id *)(a1 + 56);
  [v12 invalidateCachedProfileForLocalPlayerWithHandler:v22];
LABEL_17:
}

uint64_t sub_100027230(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10002723C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v2));

  [v3 setAlias:*(void *)(a1 + 40)];
}

void sub_1000272A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"updateStatus"]);
  id v4 = [v3 unsignedIntegerValue];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, id, void *))(v2 + 16))(v2, v6, v4, v5);
}

void sub_100027530(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100027608;
  v8[3] = &unk_10026C6B8;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-get-suggested-player-nickname" clientProxy:v6 handler:v8];
}

void sub_100027608(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"suggestions"]);
  id v7 = [v6 count];
  if (v7) {
    goto LABEL_5;
  }
  uint64_t v8 = (os_log_s *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v9 = (id)GKOSLoggers(0LL);
    uint64_t v8 = (os_log_s *)os_log_GKGeneral;
  }

  id v7 = (id)os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)v7)
  {
    sub_10002D6C8();
    if (!v5) {
      goto LABEL_10;
    }
  }

  else
  {
LABEL_5:
    if (!v5) {
      goto LABEL_10;
    }
  }

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers(v7);
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_10002D668();
  }
LABEL_10:
  if (v6) {
    id v11 = v6;
  }
  else {
    id v11 = &__NSArray0__struct;
  }
  [*(id *)(a1 + 32) setResult:v11];
  [*(id *)(a1 + 32) setError:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10002771C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100027958(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100027A30;
  v8[3] = &unk_10026C6B8;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-get-localized-key" clientProxy:v6 handler:v8];
}

void sub_100027A30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"value"]);
  id v7 = (void *)v6;
  if (v6)
  {
    uint64_t v6 = (uint64_t)[(id)v6 length];
    if (v6) {
      goto LABEL_6;
    }
  }

  uint64_t v8 = (os_log_s *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v9 = (id)GKOSLoggers(v6);
    uint64_t v8 = (os_log_s *)os_log_GKGeneral;
  }

  uint64_t v6 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (!(_DWORD)v6)
  {
LABEL_6:
    if (!v5) {
      goto LABEL_11;
    }
  }

  else
  {
    sub_10002D754();
    if (!v5) {
      goto LABEL_11;
    }
  }

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers(v6);
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_10002D6F4();
  }
LABEL_11:
  [*(id *)(a1 + 32) setResult:v7];
  [*(id *)(a1 + 32) setError:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100027B40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100027D04(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  unsigned int v7 = [v6 globalFriendListAccess];
  uint64_t v8 = (id *)&GKGlobalFriendListAccessAllowed;
  id v9 = (id *)&GKGlobalFriendListAccessDenied;
  int v10 = *(_DWORD *)(a1 + 48);
  if (v10 != 1) {
    id v9 = (id *)&GKGlobalFriendListAccessUndetermined;
  }
  if (v10) {
    uint64_t v8 = v9;
  }
  id v11 = *v8;
  uint64_t v20 = GKGlobalFriendListAccessKey;
  id v21 = v11;
  char v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
  [v6 setGlobalFriendListAccess:*(unsigned int *)(a1 + 48)];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_100027E80;
  v16[3] = &unk_10026C708;
  id v13 = *(void **)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  unsigned int v19 = v7;
  id v17 = v14;
  id v18 = v5;
  id v15 = v5;
  [v13 setProfileSettings:v12 handler:v16];
}

uint64_t sub_100027E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100027F28;
    v10[3] = &unk_10026C6E0;
    id v11 = *(id *)(a1 + 32);
    int v12 = *(_DWORD *)(a1 + 48);
    [v8 performBlock:v10];
  }

  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  v5,  v6,  v7);
}

void sub_100027F28(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v2));

  [v3 setGlobalFriendListAccess:*(unsigned int *)(a1 + 40)];
}

void sub_100027F94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100028160(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v12 = @"arcade-subscription-expiration";
  [*(id *)(a1 + 32) timeIntervalSince1970];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4 * 1000.0));
  id v13 = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100028288;
  v9[3] = &unk_10026B058;
  uint64_t v7 = *(void **)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v7 setProfileSettings:v6 handler:v9];
}

uint64_t sub_100028288(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000282B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100028518(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  id v9 = (os_log_s *)os_log_GKDaemon;
  BOOL v10 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
  if (v10)
  {
    *(_WORD *)int v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Done syncing friend invites allowed flag.",  v12,  2u);
  }

  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(v10);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10002D780();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100028828(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  id v9 = (os_log_s *)os_log_GKOnboarding;
  BOOL v10 = os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO);
  if (v10)
  {
    *(_WORD *)int v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Done syncing privacy notice version.", v12, 2u);
  }

  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(v10);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10002D7E0();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100028B84(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  unsigned int v7 = [v6 achievementsVisibility];
  uint64_t v20 = @"privacy-settings";
  uint64_t v8 = *(void *)(a1 + 32);
  v18[0] = @"achievements";
  v18[1] = @"friends";
  v19[0] = v8;
  v19[1] = v8;
  void v18[2] = @"games-played";
  v19[2] = v8;
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v19,  v18,  3LL));
  id v21 = v9;
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));

  [v6 setAchievementsVisibility:*(unsigned int *)(a1 + 56)];
  [v6 setGamesPlayedVisibility:*(unsigned int *)(a1 + 56)];
  [v6 setFriendsVisibility:*(unsigned int *)(a1 + 56)];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100028D20;
  v14[3] = &unk_10026C708;
  id v11 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 48);
  unsigned int v17 = v7;
  id v15 = v12;
  id v16 = v5;
  id v13 = v5;
  [v11 setProfileSettings:v10 handler:v14];
}

uint64_t sub_100028D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100028DC8;
    v10[3] = &unk_10026C6E0;
    id v11 = *(id *)(a1 + 32);
    int v12 = *(_DWORD *)(a1 + 48);
    [v8 performBlock:v10];
  }

  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  v5,  v6,  v7);
}

void sub_100028DC8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v2));

  [v3 setGamesPlayedVisibility:*(unsigned int *)(a1 + 40)];
  [v3 setFriendsVisibility:*(unsigned int *)(a1 + 40)];
  [v3 setAchievementsVisibility:*(unsigned int *)(a1 + 40)];
}

void sub_100028E4C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (!v2) {
    [*(id *)(a1 + 40) refreshContentsForDataType:17 userInfo:0];
  }
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

void sub_100029040(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_100029120;
  v11[3] = &unk_10026C7A8;
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 40);
  id v12 = v8;
  uint64_t v13 = v9;
  id v14 = v4;
  id v10 = v4;
  [v5 issueRequest:v6 bagKey:@"gk-set-profile-settings" clientProxy:v7 handler:v11];
}

void sub_100029120(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000291E4;
    v8[3] = &unk_10026B120;
    uint64_t v7 = *(void **)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    [v7 invalidateCachedProfileForLocalPlayerWithHandler:v8];
  }

uint64_t sub_1000291E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000291F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100029360(id a1, NSManagedObjectContext *a2, id a3)
{
  id v4 = (void (**)(void))a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  [v5 expire];
  v4[2](v4);
}

uint64_t sub_1000293C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100029588(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v7 achievementsVisibility]));
  [*(id *)(a1 + 32) setResult:v6];

  v5[2](v5);
}

void sub_100029620(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  (*(void (**)(void, id))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), [v2 intValue]);
}

void sub_1000297EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100029888;
  v7[3] = &unk_10026C550;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getProfilesForPlayerIDs:v5 handler:v7];
}

uint64_t sub_100029888(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"profiles"];
  [*(id *)(a1 + 32) setError:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000298E8(uint64_t a1)
{
  id v2 = (void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v4);
    }
    id v6 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10002D840(v2, v6);
    }
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
  }

  else
  {
    id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"profiles"]);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_100029C54(_Unwind_Exception *a1)
{
}

void sub_100029C7C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  *(void *)(a1 + 32),  a2));
  id v7 = [v6 isValid];
  if ((_DWORD)v7)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v7);
    }
    id v9 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Profile is still valid for: %@", buf, 0xCu);
    }

    v5[2](v5);
  }

  else
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[GKProfileService profileRequestForPlayerIDs:pieces:]( &OBJC_CLASS___GKProfileService,  "profileRequestForPlayerIDs:pieces:",  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 72)));
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_100029E70;
    v16[3] = &unk_10026C860;
    id v17 = *(id *)(a1 + 56);
    id v14 = *(id *)(a1 + 40);
    char v21 = *(_BYTE *)(a1 + 72);
    uint64_t v15 = *(void *)(a1 + 64);
    id v18 = v14;
    uint64_t v20 = v15;
    unsigned int v19 = v5;
    [v12 issueRequest:v11 bagKey:@"gk-get-profile-info" clientProxy:v13 handler:v16];
  }
}

void sub_100029E70(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  if (v7)
  {
    id v9 = *(void **)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100029F9C;
    v12[3] = &unk_10026C838;
    double v19 = a4;
    id v13 = v7;
    id v10 = *(id *)(a1 + 40);
    char v20 = *(_BYTE *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 56);
    id v14 = v10;
    uint64_t v18 = v11;
    id v15 = *(id *)(a1 + 32);
    id v16 = v8;
    id v17 = *(id *)(a1 + 48);
    [v9 performOnManagedObjectContext:v12];
  }

  else
  {
    *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a4;
    [*(id *)(a1 + 32) setError:v8];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_100029F9C(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 80)));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"profile-infos"]);
  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfilesWithPlayerIDs:inManagedObjectContext:",  *(void *)(a1 + 40),  v12));
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 _gkMapDictionaryWithKeyPath:@"input-id"]);
    if (![v9 count])
    {
      uint64_t v10 = objc_claimAutoreleasedReturnValue([v7 _gkMapDictionaryWithKeyPath:@"player-id"]);

      id v9 = (void *)v10;
    }

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10002A13C;
    v13[3] = &unk_10026C258;
    id v14 = v9;
    id v15 = v6;
    char v17 = *(_BYTE *)(a1 + 88);
    id v16 = v12;
    id v11 = v9;
    [v8 enumerateObjectsUsingBlock:v13];
  }

  v5[2](v5);
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = *(void *)(a1 + 80);
  [*(id *)(a1 + 48) setError:*(void *)(a1 + 56)];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10002A13C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 playerID]);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v5]);

  if (v7) {
    id v6 = v7;
  }
  else {
    id v6 = &__NSDictionary0__struct;
  }
  [v4 updateWithServerRepresentation:v6 expirationDate:*(void *)(a1 + 40) pieces:*(unsigned __int8 *)(a1 + 56)];
  [*(id *)(a1 + 48) refreshObject:v4 mergeChanges:1];
}

void sub_10002A1D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

uint64_t sub_10002A358(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10002A36C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10002D8E0();
    }
  }

  else if ([v5 count])
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 allObjects]);
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKProfileService.m",  1570LL,  "-[GKProfileServicePrivate preloadInstalledGamesScopedPlayerIDs:completion:]_block_invoke"));
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 transactionGroupWithName:v11]);

    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_10002A5B8;
    v29[3] = &unk_10026C5C8;
    id v13 = *(void **)(a1 + 40);
    v29[4] = *(void *)(a1 + 32);
    id v30 = v13;
    id v14 = v9;
    id v31 = v14;
    id v15 = v12;
    id v32 = v15;
    [v15 performOnManagedObjectContext:v29];
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    char v17 = (void *)objc_claimAutoreleasedReturnValue([v16 replyQueue]);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    void v23[2] = sub_10002A6A8;
    v23[3] = &unk_10026C8D8;
    id v24 = v15;
    id v18 = *(id *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 32);
    char v20 = *(void **)(a1 + 40);
    id v28 = v18;
    uint64_t v25 = v19;
    id v26 = v20;
    id v27 = v14;
    id v21 = v14;
    id v22 = v15;
    [v22 notifyOnQueue:v17 block:v23];

    goto LABEL_9;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_9:
}

void sub_10002A5B8(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) filterPlayerIDsThatNeedPreloading:*(void *)(a1 + 40) gameBundleIDs:*(void *)(a1 + 48) moc:v9]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v6 count]));
  [*(id *)(a1 + 56) setObject:v7 forKeyedSubscript:@"incompletePlayerIDsCount"];

  if ([v6 count])
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) fetchScopedIDsCacheKeysWithPlayerIDs:v6 gameBundleIDs:*(void *)(a1 + 48) moc:v9]);
    [*(id *)(a1 + 56) setResult:v8];
    v5[2](v5);
  }

  else
  {
    v5[2](v5);
  }
}

void sub_10002A6A8(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"incompletePlayerIDsCount"]);
  unsigned int v3 = [v2 unsignedIntValue];

  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
    id v6 = *(void **)(a1 + 40);
    id v5 = *(void **)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10002A7C4;
    v8[3] = &unk_10026C8B0;
    id v9 = v5;
    id v10 = *(id *)(a1 + 56);
    id v11 = *(id *)(a1 + 64);
    [v6 fetchAndCacheScopedPlayerIDs:v9 gameBundleIDs:v7 scopedIDsCacheKeys:v4 cacheOnly:1 handler:v8];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

void sub_10002A7C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  id v8 = (void *)os_log_GKGeneral;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10002D9F4();
    }
  }

  else
  {
    if (!os_log_GKGeneral)
    {
      id v10 = (id)GKOSLoggers(0LL);
      id v8 = (void *)os_log_GKGeneral;
    }

    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEBUG)) {
      sub_10002D940(a1, v8);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

id sub_10002AD60(id a1, NSDictionary *a2, unint64_t a3)
{
  return -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", @"playerId");
}

uint64_t sub_10002AD70(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

id sub_10002AF78(id a1, NSDictionary *a2, unint64_t a3)
{
  unsigned int v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"gameBundleId"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"playerId"));

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKProfileServicePrivate cacheKeyForScopedIDsWithGameBundleID:playerID:]( &OBJC_CLASS___GKProfileServicePrivate,  "cacheKeyForScopedIDsWithGameBundleID:playerID:",  v4,  v5));
  return v6;
}

BOOL sub_10002B23C(id a1, NSString *a2, NSDictionary *a3)
{
  return +[GKScopedIDs availableForPlayerID:](&OBJC_CLASS___GKScopedIDs, "availableForPlayerID:", a2);
}

void sub_10002B24C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v11 = 0LL;
  id v8 = a3;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 loadCachedScopedPlayerIDs:v6 gameBundleIDs:v7 error:&v11 moc:a2]);
  id v10 = v11;
  [*(id *)(a1 + 56) setError:v10];
  [*(id *)(a1 + 56) setResult:v9];

  v8[2](v8);
}

void sub_10002B2F4(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  unsigned int v3 = (void *)v2;
  id v4 = &__NSArray0__struct;
  if (v2) {
    id v4 = (void *)v2;
  }
  id v5 = v4;

  uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  uint64_t v7 = (void *)v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_10002DB74();
    }
  }

  id v9 = [*(id *)(a1 + 40) count];
  id v10 = (id)((void)[*(id *)(a1 + 48) count] * (void)v9);
  id v11 = [v5 count];
  if (v11 == v10)
  {
    id v12 = (os_log_s *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v13 = (id)GKOSLoggers(v11);
      id v12 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      sub_10002DAB4();
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[GKScopedIDsUtils incompletePlayerIDs:gameBundleIDs:scopedIDs:]( &OBJC_CLASS___GKScopedIDsUtils,  "incompletePlayerIDs:gameBundleIDs:scopedIDs:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v5));
    id v15 = [v14 count];
    id v16 = (void *)os_log_GKGeneral;
    if (v15)
    {
      if (!os_log_GKGeneral)
      {
        id v17 = (id)GKOSLoggers(v15);
        id v16 = (void *)os_log_GKGeneral;
      }

      if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_DEBUG))
      {
        id v21 = v16;
        *(_DWORD *)buf = 134218496;
        id v26 = [v5 count];
        __int16 v27 = 2048;
        id v28 = v10;
        __int16 v29 = 2048;
        id v30 = [v14 count];
        _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "Loading scoped ids from server after cache hits: %lu, expected: %lu, incompletes: %lu",  buf,  0x20u);
      }

      uint64_t v19 = *(void *)(a1 + 48);
      id v18 = *(void **)(a1 + 56);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      void v22[2] = sub_10002B5DC;
      v22[3] = &unk_10026C550;
      id v23 = v5;
      id v24 = *(id *)(a1 + 64);
      [v18 fetchAndCacheScopedPlayerIDs:v14 gameBundleIDs:v19 cachedScopedIDs:v23 handler:v22];
    }

    else
    {
      if (!os_log_GKGeneral)
      {
        id v20 = (id)GKOSLoggers(0LL);
        id v16 = (void *)os_log_GKGeneral;
      }

      if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_DEBUG)) {
        sub_10002DB14();
      }
      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }
  }
}

void sub_10002B5DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_claimAutoreleasedReturnValue( +[GKScopedIDsUtils mergeWithScopedIDs:with:]( &OBJC_CLASS___GKScopedIDsUtils,  "mergeWithScopedIDs:with:",  *(void *)(a1 + 32),  v5));
  id v8 = (void *)v7;
  id v9 = (os_log_s *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v10 = (id)GKOSLoggers(v7);
    id v9 = (os_log_s *)os_log_GKGeneral;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    int v11 = 138412802;
    id v12 = v5;
    __int16 v13 = 2112;
    id v14 = v8;
    __int16 v15 = 2112;
    id v16 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Loaded scoped ids from server: %@, merged: %@, error: %@",  (uint8_t *)&v11,  0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_10002BB68(uint64_t a1, void *a2)
{
  unsigned int v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 playerId]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) gameBundleId]);
  id v7 = [v4 isForPlayerID:v5 gameBundleID:v6];

  return v7;
}

id sub_10002BD3C(id a1, GKScopedIDs *a2, unint64_t a3)
{
  return +[GKProfileServicePrivate cacheKeyForScopedIDs:]( &OBJC_CLASS___GKProfileServicePrivate,  "cacheKeyForScopedIDs:",  a2);
}

uint64_t sub_10002C0BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10002C0D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v14[0] = @"related-player-ids";
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerIDs]);
  v14[1] = @"games";
  v15[0] = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) gameBundleIDs]);
  v15[1] = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  2LL));
  uint64_t v8 = *(unsigned __int8 *)(a1 + 64);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_10002C21C;
  v11[3] = &unk_10026C550;
  uint64_t v9 = *(void *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = v3;
  id v10 = v3;
  [v4 fetchAndCacheScopedPlayerIDsForRequest:v7 scopedIDsCacheKeys:v9 cacheOnly:v8 handler:v11];
}

void sub_10002C21C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5) {
    [*(id *)(a1 + 32) setError:v5];
  }
  if ([v8 count])
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    [v6 setObject:v8 forKeyedSubscript:v7];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10002C2B8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, &__NSArray0__struct);
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray array](&OBJC_CLASS___NSArray, "array"));
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allValues]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allValues]);

    id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v15;
      do
      {
        uint64_t v9 = 0LL;
        id v10 = v3;
        do
        {
          if (*(void *)v15 != v8) {
            objc_enumerationMutation(v5);
          }
          id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKScopedIDsUtils mergeWithScopedIDs:with:]( &OBJC_CLASS___GKScopedIDsUtils,  "mergeWithScopedIDs:with:",  v10,  *(void *)(*((void *)&v14 + 1) + 8LL * (void)v9)));

          uint64_t v9 = (char *)v9 + 1;
          id v10 = v3;
        }

        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v7);
    }

    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void *, void *))(v11 + 16))(v11, v3, v12);
  }

void sub_10002C5A8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"status"]);
    if ([v7 isEqualToNumber:&off_1002878C8])
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"results"]);
      uint64_t v9 = *(void **)(a1 + 32);
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKProfileService.m",  1888LL,  "-[GKProfileServicePrivate fetchAndCacheScopedPlayerIDsForRequest:scopedIDsCacheKeys:cacheOnly:ha ndler:]_block_invoke"));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 transactionGroupWithName:v10]);

      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      void v22[2] = sub_10002C800;
      v22[3] = &unk_10026CAD0;
      id v23 = v8;
      id v24 = *(id *)(a1 + 40);
      char v26 = *(_BYTE *)(a1 + 56);
      id v12 = v11;
      id v25 = v12;
      id v13 = v8;
      [v12 performOnManagedObjectContext:v22];
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 replyQueue]);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      v19[2] = sub_10002CB64;
      void v19[3] = &unk_10026B030;
      id v16 = *(id *)(a1 + 48);
      id v20 = v12;
      id v21 = v16;
      id v17 = v12;
      [v17 notifyOnQueue:v15 block:v19];
    }

    else
    {
      uint64_t v18 = *(void *)(a1 + 48);
      id v13 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  GKServerErrorDomain,  [v7 integerValue],  0));
      (*(void (**)(uint64_t, void *, id))(v18 + 16))(v18, &__NSArray0__struct, v13);
    }
  }
}

void sub_10002C800(uint64_t a1, void *a2, void *a3)
{
  id v29 = a2;
  char v26 = a3;
  __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  id obj = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v36;
    uint64_t v32 = GKGamePlayerIDKey;
    uint64_t v8 = &off_1002878C8;
    uint64_t v30 = a1;
    uint64_t v31 = GKTeamPlayerIDKey;
    do
    {
      uint64_t v9 = 0LL;
      id v33 = v6;
      do
      {
        if (*(void *)v36 != v7) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)v9);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"status"]);
        unsigned int v12 = [v11 isEqualToNumber:v8];

        if (v12)
        {
          id v13 = v8;
          __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"bundle-id"]);
          __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"player-id"]);
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v32]);
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v31]);
          if (v14) {
            BOOL v18 = v15 == 0LL;
          }
          else {
            BOOL v18 = 1;
          }
          if (!v18)
          {
            if ([v16 length])
            {
              if ([v17 length])
              {
                uint64_t v19 = *(void **)(a1 + 40);
                id v20 = (void *)objc_claimAutoreleasedReturnValue( +[GKProfileServicePrivate cacheKeyForScopedIDsWithGameBundleID:playerID:]( &OBJC_CLASS___GKProfileServicePrivate,  "cacheKeyForScopedIDsWithGameBundleID:playerID:",  v14,  v15));
                LOBYTE(v19) = [v19 containsObject:v20];

                a1 = v30;
                if ((v19 & 1) == 0)
                {
                  id v21 = -[GKCDScopedIds initWithContext:]( objc_alloc(&OBJC_CLASS___GKCDScopedIds),  "initWithContext:",  v29);
                  id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
                  -[GKCDScopedIds setFetchedOn:](v21, "setFetchedOn:", v22);

                  a1 = v30;
                  -[GKCDScopedIds setPlayerId:](v21, "setPlayerId:", v15);
                  -[GKCDScopedIds setGameBundleId:](v21, "setGameBundleId:", v14);
                  -[GKCDScopedIds setGamePlayerId:](v21, "setGamePlayerId:", v16);
                  -[GKCDScopedIds setTeamPlayerId:](v21, "setTeamPlayerId:", v17);
                  if (!*(_BYTE *)(v30 + 56))
                  {
                    id v23 = (void *)objc_claimAutoreleasedReturnValue( +[GKProfileServicePrivate makeGKScopedIDsFromInternal:]( &OBJC_CLASS___GKProfileServicePrivate,  "makeGKScopedIDsFromInternal:",  v21));
                    if (v23)
                    {
                      id v28 = v23;
                      [v27 addObject:v23];
                      id v23 = v28;
                    }
                  }
                }
              }
            }
          }

          uint64_t v8 = v13;
          id v6 = v33;
        }

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v6 != v9);
      id v6 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
    }

    while (v6);
  }

  if (*(_BYTE *)(a1 + 56))
  {
    [*(id *)(a1 + 48) setResult:&__NSArray0__struct];
    id v24 = v27;
  }

  else
  {
    id v24 = v27;
    id v25 = [v27 copy];
    [*(id *)(a1 + 48) setResult:v25];
  }

  v26[2](v26);
}

void sub_10002CB64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_10002CD04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDScopedIds _gkFetchRequest](&OBJC_CLASS___GKCDScopedIds, "_gkFetchRequest"));
  uint64_t v8 = -[NSBatchDeleteRequest initWithFetchRequest:]( objc_alloc(&OBJC_CLASS___NSBatchDeleteRequest),  "initWithFetchRequest:",  v7);
  id v11 = 0LL;
  id v9 = [v5 executeRequest:v8 error:&v11];
  id v10 = v11;
  [*(id *)(a1 + 32) setError:v10];
  v6[2](v6);
}

void sub_10002CDD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_10002CFE8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v13 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v13 playerID]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "credentialForPlayerID:environment:", v7, objc_msgSend(v8, "environment")));

  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  +[GKAccountServicePrivate getAccountAgeCategoryForCredential:]( &OBJC_CLASS___GKAccountServicePrivate,  "getAccountAgeCategoryForCredential:",  v9)));
  [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:@"ageCategory"];

  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v13 achievementsVisibility]));
  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:@"profilePrivacy"];

  unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v13 contactsIntegrationConsent]));
  [*(id *)(a1 + 40) setObject:v12 forKeyedSubscript:@"contactsIntegration"];

  v5[2](v5);
}

void sub_10002D16C(uint64_t a1)
{
  v7[0] = @"ageCategory";
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));
  v8[0] = v3;
  v7[1] = @"profilePrivacy";
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));
  v8[1] = v4;
  void v7[2] = @"contactsIntegration";
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));
  v8[2] = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v8,  v7,  3LL));
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v6);
}

void sub_10002D26C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10002D27C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10002D2E4()
{
}

void sub_10002D344()
{
}

void sub_10002D3A4()
{
}

void sub_10002D3D0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10002D438()
{
}

void sub_10002D464(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 136315394;
  uint64_t v5 = "-[GKProfileService getProfilesForPlayerIDs:discardingStaleData:handler:]_block_invoke_8";
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  sub_1000207D4((void *)&_mh_execute_header, a2, a3, "Cache miss - %s %@", (uint8_t *)&v4);
  sub_10000C760();
}

void sub_10002D4E4()
{
}

void sub_10002D544()
{
  sub_1000207C4( (void *)&_mh_execute_header,  v0,  v1,  "getFriendSupportPageURLWithHandler - no friend support page url in bag, error = %@",  v2,  v3,  v4,  v5,  v6);
  sub_10000C760();
}

void sub_10002D5A4()
{
}

void sub_10002D5DC()
{
}

void sub_10002D63C()
{
  sub_100020844( (void *)&_mh_execute_header,  v0,  v1,  "setPlayerNickname - server returned zero nickname suggestions",  v2,  v3,  v4,  v5,  v6);
  sub_100020854();
}

void sub_10002D668()
{
}

void sub_10002D6C8()
{
  sub_100020844( (void *)&_mh_execute_header,  v0,  v1,  "getNicknameSuggestions - server returned zero nickname suggestions",  v2,  v3,  v4,  v5,  v6);
  sub_100020854();
}

void sub_10002D6F4()
{
}

void sub_10002D754()
{
  sub_100020844( (void *)&_mh_execute_header,  v0,  v1,  "getTermsAndConditionsWithHandler - server returned invalid url",  v2,  v3,  v4,  v5,  v6);
  sub_100020854();
}

void sub_10002D780()
{
}

void sub_10002D7E0()
{
  sub_1000207C4( (void *)&_mh_execute_header,  v0,  v1,  "GKProfileService: setPrivacyNoticeVersion error=%@",  v2,  v3,  v4,  v5,  v6);
  sub_10000C760();
}

void sub_10002D840(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 error]);
  sub_1000207E0();
  _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Failed to fetch friends with error: %@",  v5,  0xCu);
}

void sub_10002D8E0()
{
}

void sub_10002D940(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = a2;
  id v5 = [v3 count];
  id v6 = [*(id *)(a1 + 40) count];
  int v8 = 134218240;
  id v9 = v5;
  __int16 v10 = 2048;
  id v11 = v6;
  sub_1000207D4( (void *)&_mh_execute_header,  v4,  v7,  "Preloaded scoped ids records for %lu players and %lu installed games",  (uint8_t *)&v8);
}

void sub_10002D9F4()
{
}

void sub_10002DA54()
{
}

void sub_10002DAB4()
{
}

void sub_10002DB14()
{
}

void sub_10002DB74()
{
}

void sub_10002DBD4()
{
}

uint64_t sub_10002DCA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_10002DD4C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v3 transport]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localPlayer]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKProfileService,  "serviceWithTransport:forClient:localPlayer:",  v8,  v5,  v6));
  [v7 getProfilesForPlayerIDs:v4 handler:*(void *)(a1 + 40)];
}

NSPredicate *__cdecl sub_10002DE14(id a1, NSString *a2, BOOL a3, NSDate *a4)
{
  return +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"player.playerID = %@",  a4,  a2);
}

NSPredicate *__cdecl sub_10002DE58(id a1, NSString *a2, BOOL a3, NSDate *a4)
{
  return +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"player.playerID = %@",  a4,  a2);
}

id sub_10002DFA4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) getProfilesForPlayerIDs:a2 handler:*(void *)(a1 + 40)];
}

LABEL_10:
    v40[0] = 0LL;
    v40[1] = v40;
    v40[2] = 0x2020000000LL;
    id v41 = 0;
    id v22 = (void *)objc_claimAutoreleasedReturnValue(-[GKService transactionGroupBypassingMultiUser](self, "transactionGroupBypassingMultiUser"));
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_10002E244;
    v34[3] = &unk_10026CBD0;
    id v11 = v11;
    __int128 v35 = v11;
    id v23 = v22;
    __int128 v36 = v23;
    id v24 = v13;
    __int128 v37 = self;
    __int128 v38 = v24;
    id v39 = v40;
    [v23 performOnManagedObjectContext:v34];
    id v25 = (void *)objc_claimAutoreleasedReturnValue(-[GKService clientProxy](self, "clientProxy"));
    char v26 = (void *)objc_claimAutoreleasedReturnValue([v25 replyQueue]);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_10002EA4C;
    v28[3] = &unk_10026CBF8;
    __int16 v27 = v23;
    id v29 = v27;
    id v33 = a5;
    uint64_t v31 = v24;
    uint64_t v32 = v40;
    uint64_t v30 = self;
    [v27 notifyOnQueue:v26 block:v28];

    _Block_object_dispose(v40, 8);
  }
}

  [v3 setPlayer:v7];
}

  [v3 setPlayer:v7];
}

  return v14;
}
}

  if ([*v3 applicationState] != 2
    && [*v3 applicationState] != 4)
  {
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*v3 viewService]);
    id v16 = v15;
    if (v15) {
      [v15 authenticatedPlayersDidChange:a1[5] authenticatingBundleID:a1[6] reply:&stru_100271E98];
    }
    id v17 = (void *)objc_claimAutoreleasedReturnValue([a1[4] extensionProxies]);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_1000E6054;
    v21[3] = &unk_100271EE0;
    id v22 = a1[5];
    id v23 = a1[6];
    [v17 _gkEnumerateKeysAndObjectsUsingBlock:v21];
  }

  if (a1[7])
  {
    BOOL v18 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] replyQueue]);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_1000E6070;
    void v19[3] = &unk_10026B120;
    id v20 = a1[7];
    dispatch_group_notify(v5, v18, v19);
  }
}

LABEL_11:
  uint64_t v19 = 1;
LABEL_14:

  return v19;
}

    v79 = v7;
    uint64_t v31 = NWTXTRecord.subscript.getter(101LL, 0xE100000000000000LL);
    if (v32)
    {
      id v33 = v31;
      id v34 = v32;
      v81 = v12;
      __int128 v35 = v10;
      __int128 v36 = NWTXTRecord.subscript.getter(104LL, 0xE100000000000000LL);
      if (v37)
      {
        __int128 v38 = v36;
        id v39 = v37;
        v78 = v11;
        v80 = v35;
        id v40 = NWTXTRecord.subscript.getter(28776LL, 0xE200000000000000LL);
        if (v41)
        {
          id v42 = v40;
          uint64_t v43 = v41;
          char v44 = NWTXTRecord.subscript.getter(0x4449726579616C70LL, 0xE800000000000000LL);
          v84 = v18;
          id v46 = v45;
          (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v79);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v84, v78);
          if (v46)
          {
            id v49 = v85;
          }

          else
          {
            swift_bridgeObjectRelease(v39, v48);
            swift_bridgeObjectRelease(v34, v74);
            swift_bridgeObjectRelease(v21, v75);
            uint64_t result = swift_bridgeObjectRelease(v43, v76);
            id v49 = 0LL;
            id v21 = 0LL;
            id v33 = 0LL;
            id v34 = 0LL;
            __int128 v38 = 0LL;
            id v39 = 0LL;
            id v42 = 0LL;
            uint64_t v43 = 0LL;
            char v44 = 0LL;
          }

          goto LABEL_30;
        }

        __int128 v35 = v80;
        swift_bridgeObjectRelease(v21, 0LL);
        id v21 = v39;
        id v11 = v78;
      }

      unsigned int v12 = v81;
      swift_bridgeObjectRelease(v21, v37);
      __int16 v10 = v35;
    }

    else
    {
      id v34 = v21;
    }

    swift_bridgeObjectRelease(v34, v32);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v10, v79);
    goto LABEL_28;
  }

  uint64_t result = swift_bridgeObjectRelease(v21, v23);
  __break(1u);
  return result;
}

    uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

    uint64_t v7 = *((void *)*(&off_10027AEF0 + (int)(v3 ^ 0x45E0922B))
         + (int)((626
                * (((v3 + 40) ^ (((uint64_t (*)(void))*(&off_10027AEF0
                                                                                   + (int)(v3 - 1172345209)))((*((_DWORD *)*(&off_10027AEF0 + (int)(v3 - 1172345236)) + 6 * v6 + 2) - 510884208)) == 0)) & 1)) ^ (v3 - 1172345207))
         - 1)
       - 4LL;
    __asm { BR              X9 }
  }

  if (v4 == 1778828264)
  {
    uint8_t v6 = 0;
    goto LABEL_10;
  }

  if (v4 == 1778828267)
  {
    uint8_t v6 = 2;
    goto LABEL_10;
  }

void sub_10002E22C(_Unwind_Exception *a1)
{
}

void sub_10002E244(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint8_t v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](&OBJC_CLASS___GKPlayerProfileCacheObject, "selfPlayerID"));
  uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerID]);
  id v9 = (void *)v8;
  if (v8) {
    __int16 v10 = (void *)v8;
  }
  else {
    __int16 v10 = v7;
  }
  id v11 = v10;

  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:@"playerID"];
  if (!v11)
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  8LL,  0LL));
    [*(id *)(a1 + 40) setError:v19];

LABEL_12:
    v6[2](v6);
    goto LABEL_27;
  }

  unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v53 = v11;
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v53, 1LL));
  id v14 = objc_retainBlock(*(id *)(a1 + 56));
  unsigned int v15 = [v12 doesCallbackListExistFor:@"gk-get-friend-player-ids" parameters:v13 callback:v14];

  if (v15)
  {
    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers(v16);
    }
    BOOL v18 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "getFriendIDsForPlayer: callback already exists, will use its value when ready",  buf,  2u);
    }

    [*(id *)(a1 + 40) setObject:&__kCFBooleanTrue forKeyedSubscript:@"skipCallbacks"];
    goto LABEL_12;
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject fetchRequestForContext:]( &OBJC_CLASS___GKFriendListCacheObject,  "fetchRequestForContext:",  v5));
  [v20 setReturnsDistinctResults:1];
  id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSManagedObject _gkRetrieveCleanEntry:request:]( &OBJC_CLASS___NSManagedObject,  "_gkRetrieveCleanEntry:request:",  v5,  v20));
  id v22 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v23 = [v22 relatedTasksExistForBagKey:@"gk-get-friend-player-ids"];

  if (v21 && ((id v24 = [v21 expired], !(_DWORD)v24) || (unint64_t)v23 <= 1))
  {
    if (!os_log_GKGeneral) {
      id v34 = (id)GKOSLoggers(v24);
    }
    __int128 v35 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      __int128 v36 = v35;
      __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v21 entries]);
      __int128 v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v37 count]));
      *(_DWORD *)buf = 138412290;
      id v50 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "getFriendIDsForPlayer: cache is valid, using it: %@",  buf,  0xCu);
    }

    id v39 = (void *)objc_claimAutoreleasedReturnValue([v21 filterableFriends]);
    [*(id *)(a1 + 40) setObject:v39 forKeyedSubscript:@"filterablePlayers"];

    v6[2](v6);
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v25 = (id)GKOSLoggers(v24);
    }
    char v26 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      __int16 v27 = v26;
      id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v23));
      *(_DWORD *)buf = 138412546;
      id v50 = v21;
      __int16 v51 = 2112;
      char v52 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "getFriendIDsForPlayer: cache is not valid for: %@, going to the server, related: %@",  buf,  0x16u);
    }

    id v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectID", v20));
    v47[0] = @"requested-player-id";
    v47[1] = @"friend-type";
    v48[0] = v11;
    v48[1] = GKFriendTypeAll;
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v48,  v47,  2LL));
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_10002E780;
    v41[3] = &unk_10026CBA8;
    id v42 = *(id *)(a1 + 40);
    id v43 = v11;
    id v44 = v29;
    uint64_t v46 = *(void *)(a1 + 64);
    unsigned int v45 = v6;
    id v33 = v29;
    [v31 issueRequest:v30 bagKey:@"gk-get-friend-player-ids" clientProxy:v32 handler:v41];

    id v20 = v40;
  }

LABEL_27:
}

void sub_10002E780(uint64_t a1, void *a2, void *a3, double a4)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10002E890;
  v12[3] = &unk_10026CB80;
  id v13 = a2;
  id v14 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 48);
  double v19 = a4;
  id v17 = *(id *)(a1 + 32);
  __int128 v11 = *(_OWORD *)(a1 + 56);
  id v8 = (id)v11;
  __int128 v18 = v11;
  id v9 = v14;
  id v10 = v13;
  [v7 performOnManagedObjectContext:v12];
}

void sub_10002E890(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint8_t v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7 && !*(void *)(a1 + 40))
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"results"]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  *(void *)(a1 + 48),  v5));
    uint64_t v10 = *(void *)(a1 + 56);
    if (v10)
    {
      id v17 = 0LL;
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v5 existingObjectWithID:v10 error:&v17]);
      id v12 = v17;
      id v13 = v12;
      if (v12)
      {
        if (!os_log_GKGeneral) {
          id v14 = (id)GKOSLoggers(v12);
        }
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_100038D08();
        }
      }

      if (v11)
      {
        [v5 deleteObject:v11];
      }
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[GKFriendListCacheObject cacheFriendList:withTimeToLive:forProfile:managedObjectContext:commonFriends:]( &OBJC_CLASS___GKFriendListCacheObject,  "cacheFriendList:withTimeToLive:forProfile:managedObjectContext:commonFriends:",  v8,  v9,  v5,  0LL,  *(double *)(a1 + 88)));
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 filterableFriends]);
    [*(id *)(a1 + 64) setObject:v16 forKeyedSubscript:@"filterablePlayers"];

    *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = *(double *)(a1 + 88) > 0.0;
  }

  [*(id *)(a1 + 64) setError:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  v6[2](v6);
}

void sub_10002EA4C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"playerID"]);
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"skipCallbacks"]);

    if (v3)
    {
      if (!os_log_GKGeneral) {
        id v5 = (id)GKOSLoggers(v4);
      }
      uint8_t v6 = (os_log_s *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "getFriendIDsForPlayer: not calling handler because callbacks are skipped",  buf,  2u);
      }
    }

    else
    {
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"filterablePlayers"]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[GKFriendService filterFriends:filter:]( &OBJC_CLASS___GKFriendService,  "filterFriends:filter:",  v11,  *(unsigned int *)(a1 + 64)));
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 _gkValuesForKeyPath:@"playerID"]);

      if (!os_log_GKGeneral) {
        id v15 = (id)GKOSLoggers(v14);
      }
      id v16 = (void *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        int v17 = *(_DWORD *)(a1 + 64);
        __int128 v18 = v16;
        *(_DWORD *)buf = 67109632;
        int v37 = v17;
        __int16 v38 = 2048;
        id v39 = [v13 count];
        __int16 v40 = 2048;
        id v41 = [v11 count];
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "getFriendIDsForPlayer: filter %d kept %lu player IDs from %lu filterable players",  buf,  0x1Cu);
      }

      double v19 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
      __int128 v35 = v2;
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v35, 1LL));
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 retrieveAndClearCallbacks:@"gk-get-friend-player-ids" parameters:v20]);

      __int128 v32 = 0u;
      __int128 v33 = 0u;
      __int128 v30 = 0u;
      __int128 v31 = 0u;
      id v22 = v21;
      id v23 = [v22 countByEnumeratingWithState:&v30 objects:v34 count:16];
      if (v23)
      {
        id v24 = v23;
        uint64_t v25 = *(void *)v31;
        do
        {
          for (i = 0LL; i != v24; i = (char *)i + 1)
          {
            if (*(void *)v31 != v25) {
              objc_enumerationMutation(v22);
            }
            uint64_t v27 = *(void *)(*((void *)&v30 + 1) + 8LL * (void)i);
            id v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error", (void)v30));
            (*(void (**)(uint64_t, void *, void *))(v27 + 16))(v27, v13, v28);
          }

          id v24 = [v22 countByEnumeratingWithState:&v30 objects:v34 count:16];
        }

        while (v24);
      }

      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
      {
        id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
        [v29 refreshContentsForDataType:2 userInfo:0];
      }
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(0LL);
    }
    id v8 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "getFriendIDsForPlayer: not calling handler because callbacks are skipped",  buf,  2u);
    }

    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v10);
  }
}

void sub_10002EF88(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10002F05C;
  void v8[3] = &unk_10026C7A8;
  uint8_t v6 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v6;
  id v10 = v3;
  id v7 = v3;
  [v4 issueRequest:0 bagKey:@"gk-get-nearby-friend-token" clientProxy:v5 handler:v8];
}

void sub_10002F05C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint8_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue([a2 objectForKey:@"friend-token"]);
  id v7 = -[__CFString length](v6, "length");
  if (!v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localPlayer]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 playerID]);
    uint64_t v10 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"NEARBY_TOKEN_%@", v9));

    uint8_t v6 = (__CFString *)v10;
  }

  __int128 v11 = (os_log_s *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v12 = (id)GKOSLoggers(v7);
    __int128 v11 = (os_log_s *)os_log_GKGeneral;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
    sub_100038DC8();
  }
  if (v6) {
    id v13 = v6;
  }
  else {
    id v13 = &stru_10027B720;
  }
  [*(id *)(a1 + 40) setResult:v13];
  id v14 = [*(id *)(a1 + 40) setError:v5];
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers(v14);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100038D68();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10002F1C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10002F4DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v12 = @"friend-tokens";
  uint64_t v13 = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10002F614;
  v9[3] = &unk_10026C6B8;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-establish-nearby-relationship" clientProxy:v7 handler:v9];
}

void sub_10002F614(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [*(id *)(a1 + 32) setError:v4];
  if (v4)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers(v5);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100038E90();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10002F6A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10002F86C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v12 = @"request-id";
  uint64_t v13 = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10002F9A4;
  v9[3] = &unk_10026C6B8;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-get-friend-code" clientProxy:v7 handler:v9];
}

void sub_10002F9A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  id v8 = v5;
  if (a2 && !v5)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:@"friend-code"]);
    [*(id *)(a1 + 32) setResult:v7];

    id v6 = v8;
  }

  [*(id *)(a1 + 32) setError:v6];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10002FA28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

id sub_10002FBC0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) getProfilesForPlayerIDs:a2 fetchOptions:*(void *)(a1 + 48) handler:*(void *)(a1 + 40)];
}

void sub_10002FC68(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 transport]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localPlayer]);
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKProfileServicePrivate,  "serviceWithTransport:forClient:localPlayer:",  v5,  v6,  v7));

  [v8 getProfilesForPlayerIDs:v4 fetchOptions:*(void *)(a1 + 48) handler:*(void *)(a1 + 40)];
}

void sub_10002FDBC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 transport]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localPlayer]);
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKProfileServicePrivate,  "serviceWithTransport:forClient:localPlayer:",  v5,  v6,  v7));

  [v8 getProfilesForPlayerIDs:v4 fetchOptions:*(void *)(a1 + 48) handler:*(void *)(a1 + 40)];
}

void sub_100030120(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](&OBJC_CLASS___GKPlayerProfileCacheObject, "selfPlayerID"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v5, v8, 0LL));

  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameStatServicePrivate currentFriendsPlayedList:]( &OBJC_CLASS___GKGameStatServicePrivate,  "currentFriendsPlayedList:",  v7));
  [v10 setExpirationDate:0];
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"playerID == %@",  *(void *)(a1 + 32)));
  +[GKCacheObject deleteObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKFriendListEntryCacheObject,  "deleteObjectsMatchingPredicate:context:",  v11,  v7);

  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"playerID == %@",  *(void *)(a1 + 32)));
  +[GKCacheObject deleteObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKRecentPlayerListEntryCacheObject,  "deleteObjectsMatchingPredicate:context:",  v12,  v7);

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"player.playerID IN %@",  v9));
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKFriendListCacheObject,  "expireObjectsMatchingPredicate:context:",  v13,  v7);

  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"player.playerID IN %@",  v9));
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKRecentPlayerListCacheObject,  "expireObjectsMatchingPredicate:context:",  v14,  v7);

  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKFriendRecommendationListCacheObject,  "expireObjectsMatchingPredicate:context:",  0LL,  v7);
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKFriendRequestListCacheObject,  "expireObjectsMatchingPredicate:context:",  0LL,  v7);

  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerID]);
  int v17 = v15;
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v17, 1LL));
  +[GKPlayerProfileCacheObject removeFamiliarPlayerIDs:familiarity:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "removeFamiliarPlayerIDs:familiarity:",  v16,  2LL);

  v6[2](v6);
}

void sub_100030380(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  [v2 refreshContentsForDataType:2 userInfo:0];
}

void sub_100030550(id *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [a1[5] setError:v3];
    uint64_t v5 = (os_log_s *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v6 = (id)GKOSLoggers(v4);
      uint64_t v5 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_100038F80();
    }
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localPlayer]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKGameStatServicePrivate,  "serviceWithTransport:forClient:localPlayer:",  0LL,  v7,  v8));

    [v9 expireGamesFriendsPlayed];
    [a1[5] performOnManagedObjectContext:&stru_10026CC40];
  }

  if (a1[6])
  {
    id v10 = a1[5];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 replyQueue]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_100030804;
    v15[3] = &unk_10026BEF0;
    id v18 = a1[6];
    id v13 = v3;
    id v14 = a1[4];
    id v16 = v13;
    id v17 = v14;
    [v10 notifyOnQueue:v12 block:v15];
  }
}

void sub_1000306D8(id a1, NSManagedObjectContext *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = (void (**)(void))a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameStatServicePrivate currentFriendsPlayedList:]( &OBJC_CLASS___GKGameStatServicePrivate,  "currentFriendsPlayedList:",  v4));
  if (v6) {
    -[NSManagedObjectContext deleteObject:](v4, "deleteObject:", v6);
  }
  +[GKCacheObject deleteObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKFriendListEntryCacheObject,  "deleteObjectsMatchingPredicate:context:",  0LL,  v4);
  +[GKCacheObject deleteObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKRecentPlayerListEntryCacheObject,  "deleteObjectsMatchingPredicate:context:",  0LL,  v4);
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKFriendListCacheObject,  "expireObjectsMatchingPredicate:context:",  0LL,  v4);
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKFriendRecommendationListCacheObject,  "expireObjectsMatchingPredicate:context:",  0LL,  v4);
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKFriendRequestListCacheObject,  "expireObjectsMatchingPredicate:context:",  0LL,  v4);
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKRecentPlayerListCacheObject,  "expireObjectsMatchingPredicate:context:",  0LL,  v4);
  v5[2](v5);

  id v8 = (os_log_s *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v9 = (id)GKOSLoggers(v7);
    id v8 = (os_log_s *)os_log_GKGeneral;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    sub_100038FE4();
  }
}

void sub_100030804(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  [v2 refreshContentsForDataType:2 userInfo:0];
}

void sub_1000309D8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] playerID]);
  if (v4)
  {
    id v14 = @"reported-player-id";
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[4] playerID]);
    id v15 = v5;
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
  }

  else
  {
    id v6 = 0LL;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100030B58;
  v10[3] = &unk_10026C7A8;
  id v11 = a1[4];
  id v12 = a1[6];
  id v13 = v3;
  id v9 = v3;
  [v7 issueRequest:v6 bagKey:@"gk-report-a-concern-metadata" clientProxy:v8 handler:v10];
}

void sub_100030B58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"reported-player"]);
  if ([v7 count])
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"nickname"]);
    [*(id *)(a1 + 32) setAlias:v8];

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"first-name"]);
    [*(id *)(a1 + 32) setFirstName:v9];

    id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"last-name"]);
    [*(id *)(a1 + 32) setLastName:v10];
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"concerns"]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100030CDC;
  v13[3] = &unk_10026CC68;
  id v14 = *(id *)(a1 + 32);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 _gkMapWithBlock:v13]);
  [*(id *)(a1 + 40) setResult:v12];

  [*(id *)(a1 + 40) setError:v6];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

id sub_100030CDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKConcernInternal internalRepresentation](&OBJC_CLASS___GKConcernInternal, "internalRepresentation"));
  [v4 setPlayer:*(void *)(a1 + 32)];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"id"]);
  objc_msgSend(v4, "setConcernID:", objc_msgSend(v5, "unsignedLongValue"));

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"value"]);
  [v4 setMessage:v6];

  return v4;
}

void sub_100030D84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100030FFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v13[0] = @"reported-player-id";
  v13[1] = @"comments";
  uint64_t v4 = *(void *)(a1 + 40);
  v14[0] = *(void *)(a1 + 32);
  v14[1] = v4;
  void v13[2] = @"concern-id";
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [*(id *)(a1 + 48) concernID]));
  void v14[2] = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v14,  v13,  3LL));

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100031178;
  v10[3] = &unk_10026C6B8;
  id v11 = *(id *)(a1 + 64);
  id v12 = v3;
  id v9 = v3;
  [v7 issueRequest:v6 bagKey:@"gk-report-a-concern" clientProxy:v8 handler:v10];
}

uint64_t sub_100031178(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000311A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100031294(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v3 transport]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localPlayer]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKProfileService,  "serviceWithTransport:forClient:localPlayer:",  v8,  v5,  v6));
  [v7 getProfilesForPlayerIDs:v4 handler:*(void *)(a1 + 40)];
}

NSPredicate *__cdecl sub_100031360(id a1, NSString *a2, BOOL a3, NSDate *a4)
{
  if (a4) {
    id v4 = +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"expirationDate > %@  && common = %d && player.playerID = %@",  a4,  a3,  a2);
  }
  else {
    id v4 = +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"expirationDate != nil && common = %d && player.playerID = %@",  a3,  a2,  v6);
  }
  return (NSPredicate *)(id)objc_claimAutoreleasedReturnValue(v4);
}

void sub_10003152C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v12 = @"friend-code";
  uint64_t v13 = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100031664;
  v9[3] = &unk_10026C6B8;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-cancel-friend-code" clientProxy:v7 handler:v9];
}

uint64_t sub_100031664(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100031690(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100031870(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v7);
    }
  }

  else
  {
    [*(id *)(a1 + 32) expireFriendList];
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    _DWORD v11[2] = sub_10003193C;
    v11[3] = &unk_10026BBE8;
    id v12 = *(id *)(a1 + 48);
    [v8 _invalidateCacheForFriendCode:v9 handler:v11];
  }
}

void sub_10003193C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (!v3)
  {
    +[GKClientProxy enumerateClientsUsingBlock:]( &OBJC_CLASS___GKClientProxy,  "enumerateClientsUsingBlock:",  &stru_10026CCC8);
    id v3 = 0LL;
  }

  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
    id v3 = v5;
  }
}

void sub_1000319A0(id a1, GKClientProxy *a2, BOOL *a3)
{
}

void sub_100031B70(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v12 = @"friend-code";
  uint64_t v13 = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100031CA8;
  v9[3] = &unk_10026C6B8;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v8 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-reject-friend-code" clientProxy:v7 handler:v9];
}

uint64_t sub_100031CA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100031CD4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (!v2) {
    [*(id *)(a1 + 40) _invalidateCacheForFriendCode:*(void *)(a1 + 48) handler:0];
  }
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  [v3 refreshContentsForDataType:3 userInfo:0];

  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }

void sub_100031EF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDFriendCodeDetail _gkFetchRequest](&OBJC_CLASS___GKCDFriendCodeDetail, "_gkFetchRequest"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"friendCode == %@",  *(void *)(a1 + 32)));
  [v7 setPredicate:v8];

  id v20 = 0LL;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v7 error:&v20]);
  id v10 = v20;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v11 = v9;
  id v12 = [v11 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v17;
    do
    {
      id v15 = 0LL;
      do
      {
        if (*(void *)v17 != v14) {
          objc_enumerationMutation(v11);
        }
        [v5 deleteObject:*(void *)(*((void *)&v16 + 1) + 8 * (void)v15)];
        id v15 = (char *)v15 + 1;
      }

      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }

    while (v13);
  }

  [*(id *)(a1 + 40) setError:v10];
  v6[2](v6);
}

void sub_1000320A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_100032290(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v56 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v7 = [*(id *)(a1 + 32) mutableCopy];
  uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSMutableOrderedSet orderedSet](&OBJC_CLASS___NSMutableOrderedSet, "orderedSet"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDFriendCodeDetail _gkFetchRequest](&OBJC_CLASS___GKCDFriendCodeDetail, "_gkFetchRequest"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"friendCode IN %@",  *(void *)(a1 + 32)));
  [v9 setPredicate:v10];

  id v89 = 0LL;
  v64 = v9;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v9 error:&v89]);
  id v12 = v89;
  v61 = v7;
  uint64_t v57 = a1;
  v59 = (void *)v8;
  if (v12)
  {
    id v55 = v11;
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v85 = 0u;
    __int128 v86 = 0u;
    __int128 v87 = 0u;
    __int128 v88 = 0u;
    id obj = *(id *)(a1 + 32);
    id v13 = [obj countByEnumeratingWithState:&v85 objects:v94 count:16];
    if (v13)
    {
      id v14 = v13;
      id v62 = *(id *)v86;
      do
      {
        for (i = 0LL; i != v14; i = (char *)i + 1)
        {
          __int128 v16 = v12;
          if (*(id *)v86 != v62) {
            objc_enumerationMutation(obj);
          }
          __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"friendCode == %@",  *(void *)(*((void *)&v85 + 1) + 8LL * (void)i)));
          [v64 setPredicate:v17];

          id v84 = v12;
          __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v64 error:&v84]);
          id v12 = v84;

          if (v12)
          {
            __int128 v19 = v6;
            __int128 v82 = 0u;
            __int128 v83 = 0u;
            __int128 v80 = 0u;
            __int128 v81 = 0u;
            id v20 = v18;
            id v21 = [v20 countByEnumeratingWithState:&v80 objects:v93 count:16];
            if (v21)
            {
              id v22 = v21;
              uint64_t v23 = *(void *)v81;
              do
              {
                for (j = 0LL; j != v22; j = (char *)j + 1)
                {
                  if (*(void *)v81 != v23) {
                    objc_enumerationMutation(v20);
                  }
                  [v5 deleteObject:*(void *)(*((void *)&v80 + 1) + 8 * (void)j)];
                }

                id v22 = [v20 countByEnumeratingWithState:&v80 objects:v93 count:16];
              }

              while (v22);
            }

            if (!os_log_GKGeneral) {
              id v26 = (id)GKOSLoggers(v25);
            }
            uint64_t v27 = (void *)os_log_GKError;
            id v6 = v19;
            if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
              sub_100039010(v91, v27, v12, &v92);
            }
          }

          else
          {
            id v28 = (void *)objc_claimAutoreleasedReturnValue([v18 firstObject]);
            [v58 addObject:v28];
          }
        }

        id v14 = [obj countByEnumeratingWithState:&v85 objects:v94 count:16];
      }

      while (v14);
    }

    id v11 = v58;
  }

  __int128 v78 = 0u;
  __int128 v79 = 0u;
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  id v63 = v11;
  id v29 = [v63 countByEnumeratingWithState:&v76 objects:v90 count:16];
  if (v29)
  {
    id v30 = v29;
    uint64_t v31 = *(void *)v77;
    do
    {
      for (k = 0LL; k != v30; k = (char *)k + 1)
      {
        if (*(void *)v77 != v31) {
          objc_enumerationMutation(v63);
        }
        __int128 v33 = *(void **)(*((void *)&v76 + 1) + 8LL * (void)k);
        id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 expirationDate]);
        unsigned __int8 v35 = [v33 _gkIsExpired:v34];

        if ((v35 & 1) == 0)
        {
          __int128 v36 = -[GKFriendCodeDetailInternal initWithFriendCodeDetail:]( objc_alloc(&OBJC_CLASS___GKFriendCodeDetailInternal),  "initWithFriendCodeDetail:",  v33);
          [v6 addObject:v36];
          int v37 = (void *)objc_claimAutoreleasedReturnValue([v33 friendCode]);
          [v61 removeObject:v37];

          __int16 v38 = (void *)objc_claimAutoreleasedReturnValue([v33 creatorPlayerId]);
          if (v38)
          {
            id v39 = (void *)objc_claimAutoreleasedReturnValue([v33 creatorPlayerId]);
            [v59 addObject:v39];
          }
        }
      }

      id v30 = [v63 countByEnumeratingWithState:&v76 objects:v90 count:16];
    }

    while (v30);
  }

  __int16 v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKFriendService.m",  757LL,  "-[GKFriendServicePrivate getFriendCodeDetailWithIdentifiers:handler:]_block_invoke"));
  id v41 = (void *)objc_claimAutoreleasedReturnValue( +[GKDispatchGroup dispatchGroupWithName:]( &OBJC_CLASS___GKDispatchGroup,  "dispatchGroupWithName:",  v40));

  if ([v61 count])
  {
    v70[0] = _NSConcreteStackBlock;
    v70[1] = 3221225472LL;
    v70[2] = sub_100032918;
    v70[3] = &unk_10026BB28;
    id v42 = v61;
    uint64_t v43 = v57;
    uint64_t v44 = *(void *)(v57 + 40);
    id v71 = v42;
    uint64_t v72 = v44;
    id v73 = v6;
    unsigned int v45 = v59;
    id v74 = v59;
    id v75 = *(id *)(v57 + 48);
    [v41 perform:v70];

    id v46 = v71;
  }

  else
  {
    id v46 = [v6 copy];
    uint64_t v43 = v57;
    [*(id *)(v57 + 48) setObject:v46 forKeyedSubscript:@"GKCDFriendCodeDetails"];
    unsigned int v45 = v59;
  }

  id v47 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v43 + 40) clientProxy]);
  uint64_t v48 = objc_claimAutoreleasedReturnValue([v47 replyQueue]);
  uint64_t v49 = v43;
  id v50 = (void *)v48;
  v65[0] = _NSConcreteStackBlock;
  v65[1] = 3221225472LL;
  v65[2] = sub_10003306C;
  v65[3] = &unk_10026B0F8;
  uint64_t v51 = *(void *)(v49 + 40);
  char v52 = *(void **)(v49 + 48);
  id v66 = v45;
  uint64_t v67 = v51;
  id v68 = v52;
  id v69 = v56;
  id v53 = v56;
  id v54 = v45;
  [v41 notifyOnQueue:v50 block:v65];
}

void sub_100032918(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  __int128 v17 = @"friend-codes";
  uint64_t v18 = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_100032A9C;
  v11[3] = &unk_10026CD18;
  int8x16_t v10 = *(int8x16_t *)(a1 + 32);
  id v8 = (id)v10.i64[0];
  int8x16_t v12 = vextq_s8(v10, v10, 8uLL);
  id v13 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  id v16 = v3;
  id v9 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-view-friend-code-details" clientProxy:v7 handler:v11];
}

void sub_100032A9C(id *a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a1[4];
  int8x16_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKFriendService.m",  767LL,  "-[GKFriendServicePrivate getFriendCodeDetailWithIdentifiers:handler:]_block_invoke_3"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 transactionGroupWithName:v10]);

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_100032C6C;
  void v18[3] = &unk_10026CCF0;
  id v19 = v7;
  id v20 = v8;
  id v21 = a1[5];
  double v25 = a4;
  id v22 = a1[6];
  id v23 = a1[7];
  id v24 = a1[8];
  id v12 = v8;
  id v13 = v7;
  [v11 performOnManagedObjectContext:v18];
  id v14 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 replyQueue]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_100033060;
  v16[3] = &unk_10026B120;
  id v17 = a1[9];
  [v11 notifyOnQueue:v15 block:v16];
}

void sub_100032C6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  if (v7 && !*(void *)(a1 + 40))
  {
    __int128 v33 = v6;
    int v37 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"results"]);
    if ([v37 count])
    {
      unint64_t v8 = 0LL;
      do
      {
        uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectAtIndexedSubscript:v8]);
        int8x16_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDFriendCodeDetail _gkFetchRequest](&OBJC_CLASS___GKCDFriendCodeDetail, "_gkFetchRequest"));
        id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"friendCode == %@",  v9));
        [v10 setPredicate:v11];

        unsigned __int8 v35 = v10;
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v10 error:0]);
        __int128 v39 = 0u;
        __int128 v40 = 0u;
        __int128 v41 = 0u;
        __int128 v42 = 0u;
        id v13 = [v12 countByEnumeratingWithState:&v39 objects:v43 count:16];
        if (v13)
        {
          id v14 = v13;
          uint64_t v15 = *(void *)v40;
          do
          {
            id v16 = 0LL;
            do
            {
              if (*(void *)v40 != v15) {
                objc_enumerationMutation(v12);
              }
              [v5 deleteObject:*(void *)(*((void *)&v39 + 1) + 8 * (void)v16)];
              id v16 = (char *)v16 + 1;
            }

            while (v14 != v16);
            id v14 = [v12 countByEnumeratingWithState:&v39 objects:v43 count:16];
          }

          while (v14);
        }

        id v17 = (void *)objc_claimAutoreleasedReturnValue([v37 objectAtIndexedSubscript:v8]);
        __int16 v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 80)));
        uint64_t v18 = objc_alloc(&OBJC_CLASS___GKCDFriendCodeDetail);
        id v19 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDFriendCodeDetail entity](&OBJC_CLASS___GKCDFriendCodeDetail, "entity"));
        id v20 = -[GKCDFriendCodeDetail initWithEntity:insertIntoManagedObjectContext:]( v18,  "initWithEntity:insertIntoManagedObjectContext:",  v19,  v5);

        __int128 v36 = (void *)v9;
        -[GKCDFriendCodeDetail setFriendCode:](v20, "setFriendCode:", v9);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"creator-player-id"]);
        -[GKCDFriendCodeDetail setCreatorPlayerId:](v20, "setCreatorPlayerId:", v21);

        id v22 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"friend-code-state"]);
        -[GKCDFriendCodeDetail setFriendCodeState:](v20, "setFriendCodeState:", v22);

        id v23 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"num-uses"]);
        -[GKCDFriendCodeDetail setNumUses:](v20, "setNumUses:", v23);

        id v34 = v17;
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"already-used-player-ids"]);
        double v25 = v24;
        if (v24 && [v24 count])
        {
          id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 componentsJoinedByString:@","]);
          -[GKCDFriendCodeDetail setAlreadyUsedPlayerIds:](v20, "setAlreadyUsedPlayerIds:", v26);
        }

        -[GKCDFriendCodeDetail setExpirationDate:](v20, "setExpirationDate:", v38);
        uint64_t v27 = -[GKFriendCodeDetailInternal initWithFriendCodeDetail:]( objc_alloc(&OBJC_CLASS___GKFriendCodeDetailInternal),  "initWithFriendCodeDetail:",  v20);
        [*(id *)(a1 + 56) addObject:v27];
        id v28 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDFriendCodeDetail creatorPlayerId](v20, "creatorPlayerId"));

        if (v28)
        {
          id v29 = *(void **)(a1 + 64);
          uint64_t v30 = a1;
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDFriendCodeDetail creatorPlayerId](v20, "creatorPlayerId"));
          [v29 addObject:v31];

          a1 = v30;
        }

        ++v8;
      }

      while (v8 < (unint64_t)[v37 count]);
    }

    id v32 = [*(id *)(a1 + 56) copy];
    [*(id *)(a1 + 72) setObject:v32 forKeyedSubscript:@"GKCDFriendCodeDetails"];

    id v6 = v33;
  }

  [*(id *)(a1 + 72) setError:*(void *)(a1 + 40)];
  v6[2](v6);
}

uint64_t sub_100033060(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003306C(id *a1)
{
  if ([a1[4] count])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[5] transport]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[5] localPlayer]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKProfileService,  "serviceWithTransport:forClient:localPlayer:",  v2,  v3,  v4));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] array]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_1000331A8;
    void v7[3] = &unk_10026C550;
    id v8 = a1[6];
    id v9 = a1[7];
    [v5 getProfilesForPlayerIDs:v6 handler:v7];
  }

  else
  {
    (*((void (**)(void))a1[7] + 2))();
  }

uint64_t sub_1000331A8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  [v5 setError:a3];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"GKPlayers"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100033208(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    [v3 setResult:0];
  }

  else
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"GKCDFriendCodeDetails"]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 _gkMapDictionaryWithKeyPath:@"friendCode"]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"GKPlayers"]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 _gkMapDictionaryWithKeyPath:@"playerID"]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    if ([*(id *)(a1 + 40) count])
    {
      unint64_t v9 = 0LL;
      do
      {
        int8x16_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectAtIndexedSubscript:v9]);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v10]);

        id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 creatorPlayerID]);
        if (v12)
        {
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 creatorPlayerID]);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v13]);

          if (v14) {
            [v11 setCreatorPlayer:v14];
          }
          [v8 addObject:v11];
        }

        ++v9;
      }

      while (v9 < (unint64_t)[*(id *)(a1 + 40) count]);
    }

    id v15 = [v8 copy];
    [*(id *)(a1 + 32) setResult:v15];
  }

  uint64_t v16 = *(void *)(a1 + 48);
  id v18 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v16 + 16))(v16, v18, v17);
}

void sub_100033890(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSManagedObject _gkRetrieveCleanEntry:request:]( &OBJC_CLASS___NSManagedObject,  "_gkRetrieveCleanEntry:request:",  a2,  v5));
  id v8 = v7;
  if (v7)
  {
    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 timeToLive]);
    if (([v8 _gkIsExpired:v9] & 1) == 0)
    {
      int8x16_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 activityData]);
      id v25 = 0LL;
      id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary _gkDictionaryWithServerDataJson:error:]( &OBJC_CLASS___NSDictionary,  "_gkDictionaryWithServerDataJson:error:",  v10,  &v25));
      id v12 = v25;

      if (v12)
      {
        if (!os_log_GKGeneral) {
          id v14 = (id)GKOSLoggers(v13);
        }
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_100039090();
        }
        [*(id *)(a1 + 72) setError:v12];
      }

      else
      {
        id v21 = [[GKPlayerActivityInternal alloc] initWithServerResponse:v11];
        id v22 = [*(id *)(a1 + 72) setResult:v21];
        if (!os_log_GKGeneral) {
          id v23 = (id)GKOSLoggers(v22);
        }
        id v24 = (os_log_s *)os_log_GKTrace;
        if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "PlayerActivity: loaded from cache", buf, 2u);
        }
      }
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers(0LL);
    }
    uint64_t v16 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = *(void *)(a1 + 48);
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138413058;
      uint64_t v27 = v17;
      __int16 v28 = 2112;
      uint64_t v29 = v18;
      __int16 v30 = 2112;
      uint64_t v31 = v19;
      __int16 v32 = 2112;
      uint64_t v33 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "PlayerActivity: No cache results found for continuation: %@, bundleID: %@, and playerID: %@, and GameCategoryFilter: %@",  buf,  0x2Au);
    }
  }

  v6[2](v6);
}

void sub_100033B28(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] result]);
  id v3 = v2;
  if (v2 && a1[14])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] error]);

    if (!v4)
    {
      uint64_t v5 = (void (**)(id, id, void))a1[14];
      id v13 = (id)objc_claimAutoreleasedReturnValue([a1[4] result]);
      v5[2](v5, v13, 0LL);

      return;
    }
  }

  else
  {
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKFriendService.m",  934LL,  "-[GKFriendServicePrivate getPlayerActivityFeed:bundleID:continuation:gameCategoryFilter:handler:]_block_invoke"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v6));

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_100033DB4;
  v17[3] = &unk_10026CDB8;
  id v18 = a1[5];
  id v19 = a1[6];
  id v20 = a1[7];
  id v8 = a1[8];
  id v9 = a1[9];
  id v21 = v8;
  id v22 = v9;
  id v10 = v7;
  id v23 = v10;
  id v24 = a1[10];
  id v25 = a1[11];
  id v26 = a1[12];
  id v27 = a1[13];
  [v10 perform:v17];
  if (a1[14])
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([a1[9] clientProxy]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 replyQueue]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_100034618;
    void v14[3] = &unk_10026B310;
    id v15 = v10;
    id v16 = a1[14];
    [v15 notifyOnQueue:v12 block:v14];
  }
}

void sub_100033DB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    [v4 setObject:v5 forKeyedSubscript:@"player-id"];
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    [v4 setObject:v6 forKeyedSubscript:@"continuation-key"];
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
  unsigned int v8 = [v7 activityFeedTestFeedOnly];

  if (v8) {
    [v4 setObject:&__kCFBooleanTrue forKeyedSubscript:@"include-test-feed"];
  }
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9) {
    [v4 setObject:v9 forKeyedSubscript:@"type"];
  }
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) clientProxy]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_100033FB8;
  v15[3] = &unk_10026CD90;
  id v12 = *(id *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 64);
  id v16 = v12;
  uint64_t v17 = v13;
  id v18 = *(id *)(a1 + 80);
  id v19 = *(id *)(a1 + 88);
  id v20 = *(id *)(a1 + 32);
  id v21 = *(id *)(a1 + 96);
  id v22 = *(id *)(a1 + 104);
  id v23 = v3;
  id v14 = v3;
  [v10 issueRequest:v4 bagKey:@"gk-get-activity-feed" clientProxy:v11 handler:v15];
}

void sub_100033FB8(id *a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = v8;
  if (!v7 || v8)
  {
    [a1[4] setError:v8];
  }

  else
  {
    id v10 = [[GKPlayerActivityInternal alloc] initWithServerResponse:v7];
    [a1[4] setResult:v10];
  }

  id v11 = a1[5];
  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKFriendService.m",  961LL,  "-[GKFriendServicePrivate getPlayerActivityFeed:bundleID:continuation:gameCategoryFilter:handler:]_block_invoke_3"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 transactionGroupWithName:v12]);

  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_100034210;
  v24[3] = &unk_10026CD68;
  id v25 = a1[6];
  id v26 = v9;
  id v14 = v13;
  id v27 = v14;
  id v28 = v7;
  id v29 = a1[7];
  id v30 = a1[8];
  id v31 = a1[9];
  double v33 = a4;
  id v32 = a1[10];
  id v15 = v7;
  id v16 = v9;
  [v14 performOnManagedObjectContext:v24];
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 replyQueue]);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_100034570;
  v20[3] = &unk_10026B148;
  id v21 = v14;
  id v22 = a1[4];
  id v23 = a1[11];
  id v19 = v14;
  [v19 notifyOnQueue:v18 block:v20];
}

void sub_100034210(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = (GKCDPlayerActivity *)objc_claimAutoreleasedReturnValue( +[NSManagedObject _gkRetrieveCleanEntry:request:]( &OBJC_CLASS___NSManagedObject,  "_gkRetrieveCleanEntry:request:",  v5,  *(void *)(a1 + 32)));
  uint64_t v8 = *(void *)(a1 + 40);
  if (v7)
  {
    uint64_t v9 = v7;
    if (v8)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDPlayerActivity activityData](v7, "activityData"));
      id v30 = 0LL;
      id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary _gkDictionaryWithServerDataJson:error:]( &OBJC_CLASS___NSDictionary,  "_gkDictionaryWithServerDataJson:error:",  v10,  &v30));
      id v12 = v30;

      if (v12)
      {
        if (!os_log_GKGeneral) {
          id v14 = (id)GKOSLoggers(v13);
        }
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_100039150();
        }
        [*(id *)(a1 + 48) setError:v12];
      }

      else
      {
        id v15 = [[GKPlayerActivityInternal alloc] initWithServerResponse:v11];
        id v16 = [*(id *)(a1 + 48) setResult:v15];
        if (!os_log_GKGeneral) {
          id v17 = (id)GKOSLoggers(v16);
        }
        id v18 = (os_log_s *)os_log_GKTrace;
        if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Player Activity: loaded from stale cache",  buf,  2u);
        }
      }

LABEL_26:
      v6[2](v6);
      goto LABEL_27;
    }

  __int16 v38 = (void *)objc_claimAutoreleasedReturnValue(-[GKListCacheObject entries](v48, "entries"));
  __int128 v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableOrderedSet orderedSetWithOrderedSet:]( &OBJC_CLASS___NSMutableOrderedSet,  "orderedSetWithOrderedSet:",  v38));

  [v39 minusOrderedSet:v51];
  -[GKListCacheObject setEntries:](v48, "setEntries:", v51);
  id v54 = 0u;
  id v55 = 0u;
  char v52 = 0u;
  id v53 = 0u;
  __int128 v40 = v51;
  __int128 v41 = [v40 countByEnumeratingWithState:&v52 objects:v64 count:16];
  if (v41)
  {
    __int128 v42 = v41;
    uint64_t v43 = *(void *)v53;
    do
    {
      for (k = 0LL; k != v42; k = (char *)k + 1)
      {
        if (*(void *)v53 != v43) {
          objc_enumerationMutation(v40);
        }
        unsigned int v45 = *(void **)(*((void *)&v52 + 1) + 8LL * (void)k);
        id v46 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKey:v45]);
        [v45 updateWithServerRepresentation:v46];
      }

      __int128 v42 = [v40 countByEnumeratingWithState:&v52 objects:v64 count:16];
    }

    while (v42);
  }

  if ([v39 count]) {
    [v17 _gkDeleteObjects:v39];
  }
  -[GKListCacheObject updateSeed](v48, "updateSeed");
}

  return v8;
}
}

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48));
}

    if ([v30 count])
    {
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v30 array]);
      id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 componentsJoinedByString:@"\n"]);
      [*(id *)(a1 + 32) setMessage:v28];
    }

    else
    {
      [*(id *)(a1 + 32) setMessage:0];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

    v58 = *(void *)(v26 + 128);
    v59 = sub_100144FA8();
    sub_1001291F8(v58, 1LL, 1LL, v59);
    uint64_t v44 = 0LL;
  }

  id v63 = *(void *)(v26 + 120);
  sub_1001450FC();
  sub_100144704(v71, v26 + 40, 33LL);
  sub_100129274(&qword_1002B8540);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  sub_100144D34();
  v64 = v63 + 176;
  sub_100144704(v63 + 176, v26 + 64, 0LL);
  v65 = *(void *)(v63 + 176) + 64LL;
  sub_1001449B0();
  uint64_t result = sub_10013A624();
  id v66 = 0LL;
  if (!&unk_1002B8538) {
    goto LABEL_32;
  }
LABEL_31:
  sub_100144E20();
  while (1)
  {
    sub_10012CF38();
    sub_10015EE50();
    uint64_t result = sub_10012CF14();
    if (&unk_1002B8538) {
      goto LABEL_31;
    }
LABEL_32:
    uint64_t v67 = v66 + 1;
    if (__OFADD__(v66, 1LL))
    {
      __break(1u);
      goto LABEL_53;
    }

    if (v67 >= v44)
    {
LABEL_48:
      id v69 = *(void *)(v26 + 120);
      sub_10014510C();
      sub_100144704(v64, v26 + 88, 33LL);
      sub_100129274(&qword_1002B8518);
      Dictionary._Variant.removeAll(keepingCapacity:)(0);
      sub_1001450E8();
      if (*(void *)(v69 + 128))
      {
        sub_10012CF38();
        sub_10016CC90();
        sub_10012CF14();
        v70 = *(void *)(v69 + 128);
      }

      else
      {
        v70 = 0LL;
      }

      *(void *)(v69 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
      swift_release(v70);
      sub_1001324F4();
      sub_1001446D0();
      sub_1001447A4();
      return sub_1001446A0(*(uint64_t (**)(void))(v26 + 8));
    }

    ++v66;
    if (!*(void *)(v65 + 8 * v67))
    {
      id v66 = v67 + 1;
      if (v67 + 1 >= v44) {
        goto LABEL_48;
      }
      if (!*(void *)(v65 + 8 * v66))
      {
        id v66 = v67 + 2;
        if (v67 + 2 >= v44) {
          goto LABEL_48;
        }
        if (!*(void *)(v65 + 8 * v66)) {
          break;
        }
      }
    }

        swift_release(v6);
        return 0LL;
      }
    }

  id v46 = static GKLog.cache.getter(v40);
  Logger.logObject.getter(v46);
  id v47 = sub_100158D38();
  if (os_log_type_enabled(v8, v47))
  {
    uint64_t v48 = (uint8_t *)sub_10012CE30(2LL);
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v47, "Will not delete previously loaded app metadata cache", v48, 2u);
    sub_10012CE24((uint64_t)v48);
  }

  sub_100144EBC((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
LABEL_29:
  sub_10012CE58();
}

LABEL_17:
    uint64_t v21 = *(void *)(a1 + 56);
    id v28 = 0LL;
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v21,  1LL,  &v28));
    id v22 = v28;
    id v12 = v22;
    if (v22)
    {
      if (!os_log_GKGeneral) {
        id v23 = (id)GKOSLoggers(v22);
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_1000390F0();
      }
    }

    else
    {
      -[GKCDPlayerActivity setActivityData:](v9, "setActivityData:", v11);
      -[GKCDPlayerActivity setContinuation:](v9, "setContinuation:", *(void *)(a1 + 64));
      -[GKCDPlayerActivity setGameID:](v9, "setGameID:", *(void *)(a1 + 72));
      -[GKCDPlayerActivity setTargetPlayerID:](v9, "setTargetPlayerID:", *(void *)(a1 + 80));
      id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 96)));
      -[GKCDPlayerActivity setTimeToLive:](v9, "setTimeToLive:", v24);

      -[GKCDPlayerActivity setGameCategoryFilter:](v9, "setGameCategoryFilter:", *(void *)(a1 + 88));
      id v25 = -[GKCDPlayerActivity setVersion:](v9, "setVersion:", @"v1.0");
      if (!os_log_GKGeneral) {
        id v26 = (id)GKOSLoggers(v25);
      }
      id v27 = (os_log_s *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "Player Activity: updated cache from network",  buf,  2u);
      }
    }

    goto LABEL_26;
  }

  if (!v8)
  {
    id v19 = objc_alloc(&OBJC_CLASS___GKCDPlayerActivity);
    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDPlayerActivity entity](&OBJC_CLASS___GKCDPlayerActivity, "entity"));
    uint64_t v9 = -[GKCDPlayerActivity initWithEntity:insertIntoManagedObjectContext:]( v19,  "initWithEntity:insertIntoManagedObjectContext:",  v20,  v5);

    goto LABEL_17;
  }

  v6[2](v6);
LABEL_27:
}

          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v15 shortVersions]);
          if ([v21 containsObject:@"-1"])
          {

            id v11 = v31;
            if (v20) {
              goto LABEL_22;
            }
            goto LABEL_23;
          }

          id v22 = (void *)objc_claimAutoreleasedReturnValue([v15 versions]);
          if ([v22 containsObject:v18])
          {

            id v11 = v31;
            if ((v20 & 1) != 0) {
              goto LABEL_22;
            }
            goto LABEL_23;
          }

          id v24 = (void *)objc_claimAutoreleasedReturnValue([v15 versions]);
          id v29 = [v24 containsObject:@"-1"];

          if ((v20 & 1) != 0)
          {

            uint64_t v9 = v28;
            id v11 = v31;
            if ((v29 & 1) != 0) {
              goto LABEL_23;
            }
          }

          else
          {
            uint64_t v9 = v28;
            id v11 = v31;
            if (v29) {
              goto LABEL_23;
            }
          }

    uint64_t v13 = 0LL;
    goto LABEL_24;
  }

  if (a5)
  {
    __int128 v41 = NSLocalizedFailureReasonErrorKey;
    __int128 v42 = @"Received unexpected data format in server response.";
    id v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v42,  &v41,  1LL));
    *a5 = (id)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:userInfo:]( &OBJC_CLASS___NSError,  "userErrorForCode:userInfo:",  3LL,  v34));
  }
}

  uint64_t v6 = *a1;
  id v7 = v6 >= 2;
  id v5 = v6 - 2;
  if (!v7) {
    id v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = *a1;
  id v7 = v6 >= 4;
  id v5 = v6 - 4;
  if (!v7) {
    id v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = v7;
LABEL_39:
  sub_10016A3BC(v4, (v12 - v4) / 8, v6);
  return 1LL;
}

  uint64_t v6 = *a1;
  id v7 = v6 >= 5;
  id v5 = v6 - 5;
  if (!v7) {
    id v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = *a1;
  id v7 = v6 >= 3;
  id v5 = v6 - 3;
  if (!v7) {
    id v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = *a1;
  id v7 = v6 >= 0xA;
  id v5 = v6 - 10;
  if (!v7) {
    id v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = *a1;
  id v7 = v6 >= 8;
  id v5 = v6 - 8;
  if (!v7) {
    id v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_100034570(uint64_t a1)
{
  id v2 = (void *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v3 = (id)GKOSLoggers(a1);
    id v2 = (void *)os_log_GKGeneral;
  }

  if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEBUG)) {
    sub_1000391B0(a1, v2);
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) result]);

  if (!v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
    [*(id *)(a1 + 40) setResult:v5];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100034618(uint64_t a1)
{
  id v2 = (void *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v3 = (id)GKOSLoggers(a1);
    id v2 = (void *)os_log_GKGeneral;
  }

  if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEBUG)) {
    sub_1000391B0(a1, v2);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v4 + 16))(v4, v5, v6);
}

void sub_100034810(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDPlayerActivity _gkFetchRequest](&OBJC_CLASS___GKCDPlayerActivity, "_gkFetchRequest"));
  uint64_t v8 = -[NSBatchDeleteRequest initWithFetchRequest:]( objc_alloc(&OBJC_CLASS___NSBatchDeleteRequest),  "initWithFetchRequest:",  v7);
  id v11 = 0LL;
  id v9 = [v5 executeRequest:v8 error:&v11];
  id v10 = v11;
  [*(id *)(a1 + 32) setError:v10];
  v6[2](v6);
}

void sub_1000348DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_100034A8C(id a1, NSManagedObjectContext *a2, id a3)
{
  uint64_t v4 = (void (**)(void))a3;
  id v5 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[GKCacheObject fetchRequestForContext:]( &OBJC_CLASS___GKFriendListCacheObject,  "fetchRequestForContext:",  v5));
  [v7 setReturnsDistinctResults:1];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSManagedObject _gkRetrieveCleanEntry:request:]( &OBJC_CLASS___NSManagedObject,  "_gkRetrieveCleanEntry:request:",  v5,  v7));

  [v6 expire];
  v4[2](v4);
}

void sub_100034B2C(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  [v1 refreshContentsForDataType:2 userInfo:0];
}

void sub_100034BA4(id a1)
{
  uint64_t v1 = GKInsecureCacheRoot(a1);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = (id)gkEnsureDirectory(v2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v2 stringByAppendingPathComponent:@"messageInboxCache.plist"]);

  id v5 = (void *)qword_1002BB4A0;
  qword_1002BB4A0 = v4;
}

void sub_100034C3C(id a1)
{
  dword_1002BB4B0 = 0;
}

void sub_100035200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
    id v5 = [v4 fakeFriendRequestCount];

    uint64_t v6 = *(void **)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 localPlayer]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000352E4;
    v10[3] = &unk_10026CC20;
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    id v12 = v5;
    void v10[4] = v8;
    id v11 = v9;
    [v6 getFriendsForPlayer:v7 handler:v10];
  }

void sub_1000352E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 count];
  else {
    id v5 = v4;
  }
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transport]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localPlayer]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKProfileServicePrivate,  "serviceWithTransport:forClient:localPlayer:",  v6,  v7,  v8));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100035408;
  v12[3] = &unk_10026CE90;
  id v10 = *(void **)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 48);
  id v16 = v5;
  id v13 = v3;
  id v14 = v10;
  id v11 = v3;
  [v9 getNicknameSuggestions:20 handler:v12];
}

void sub_100035408(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v66 objects:v70 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v67;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v67 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v66 + 1) + 8LL * (void)i);
        id v10 = [v9 length];
        v64[0] = _NSConcreteStackBlock;
        v64[1] = 3221225472LL;
        v64[2] = sub_100035C38;
        v64[3] = &unk_10026CE68;
        id v65 = v3;
        objc_msgSend(v9, "enumerateSubstringsInRange:options:usingBlock:", 0, v10, 3, v64);
      }

      id v6 = [v4 countByEnumeratingWithState:&v66 objects:v70 count:16];
    }

    while (v6);
  }

  id v11 = [v4 count];
  else {
    uint64_t v12 = (uint64_t)v11;
  }
  uint64_t v45 = v12;
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v13 = a1;
  if (*(uint64_t *)(a1 + 48) >= 1)
  {
    unint64_t v62 = 0LL;
    unint64_t v63 = 0LL;
    uint64_t v14 = 0LL;
    unint64_t v60 = 0LL;
    unint64_t v61 = 0LL;
    unint64_t v59 = 0LL;
    unint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    do
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v13 + 32) objectAtIndexedSubscript:v16 % *(void *)(v13 + 56)]);
      id v18 = [v17 copy];

      id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 alias]);
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v16));
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v19,  v20));
      [v18 setAlias:v21];

      id v22 = (void *)objc_claimAutoreleasedReturnValue([v18 playerID]);
      id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v16));
      id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v22,  v23));
      [v18 setPlayerID:v24];

      id v25 = objc_alloc_init(&OBJC_CLASS___GKMessageInboxEntryInternal);
      [v18 setInboxEntry:v25];
      id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v16));
      id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v26));
      [v25 setFriendCode:v27];

      [v18 setIsInContacts:0];
      switch(v16)
      {
        case 1LL:
          id v28 = v25;
          id v29 = @"user@email.com";
          break;
        case 2LL:
          id v28 = v25;
          id v29 = @"555-987-6543";
          break;
        case 4LL:
          [v25 setSenderHandle:@"555-987-6543"];
          [v25 setSenderAlias:@"gracec@email.com"];
          [v25 setContactName:@"Grace Copeland"];
          goto LABEL_23;
        default:
          unint64_t v30 = v62 % 0xA;
          unint64_t v31 = v63 % 0xA;
          if (v16 % 5uLL == 1)
          {
            uint64_t v50 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v31));
            uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v14 % 0xAuLL));
            id v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v30));
            char v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v61 % 0xA));
            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v60 % 0xA));
            id v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v59 % 0xA));
            unsigned __int8 v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v15 % 0xA));
            __int128 v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"555-%@%@%@-%@%@%@%@",  v50,  v48,  v46,  v52,  v44,  v34,  v35));
            [v25 setSenderHandle:v36];

            int v37 = (void *)v50;
          }

          else
          {
            if (v16 % 5uLL == 4)
            {
              id v54 = (void *)objc_claimAutoreleasedReturnValue( [v3 objectAtIndexedSubscript:(uint64_t)((unint64_t)(v16 + 1) >> 2) % v45]);
              id v32 = (void *)objc_claimAutoreleasedReturnValue( [v3 objectAtIndexedSubscript:(uint64_t)(7 * ((unint64_t)(v16 + 1) >> 2)) % v45]);
              double v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ %@",  v54,  v32));
              [v25 setContactName:v33];

LABEL_23:
              [v18 setIsInContacts:1];
LABEL_27:
              uint64_t v13 = a1;
              goto LABEL_28;
            }

            uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v31));
            uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v14 % 0xAuLL));
            id v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v30));
            id v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v61 % 0xA));
            __int16 v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v60 % 0xA));
            __int128 v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v59 % 0xA));
            id v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v15 % 0xA));
            __int128 v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"555-%@%@%@-%@%@%@%@",  v51,  v49,  v47,  v53,  v38,  v39,  v56));
            [v25 setSenderHandle:v40];

            uint64_t v55 = objc_claimAutoreleasedReturnValue([v3 objectAtIndexedSubscript:v16 % v45]);
            __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v16));
            __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v3 objectAtIndexedSubscript:v14 % v45]);
            uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@@%@.com",  v55,  v41,  v42));
            [v25 setSenderAlias:v43];

            int v37 = (void *)v55;
          }

          goto LABEL_27;
      }

      [v28 setSenderHandle:v29];
      uint64_t v13 = a1;
LABEL_28:
      [v58 addObject:v18];

      ++v16;
      v15 += 29LL;
      v59 += 23LL;
      v60 += 17LL;
      v61 += 11LL;
      v62 += 7LL;
      v14 += 3LL;
      v63 += 13LL;
    }

    while (v16 < *(void *)(v13 + 48));
  }

  (*(void (**)(void))(*(void *)(v13 + 40) + 16LL))();
}

id sub_100035C38(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

void sub_100035CFC(uint64_t a1, void *a2, void *a3)
{
  id v30 = a2;
  id v5 = a3;
  if (v5)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKFriendService.m",  1220LL,  "-[GKFriendServicePrivate getActiveFriendRequests:]_block_invoke"));
    id v29 = (void *)objc_claimAutoreleasedReturnValue( +[GKDispatchGroup dispatchGroupWithName:]( &OBJC_CLASS___GKDispatchGroup,  "dispatchGroupWithName:",  v6));

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    v47[0] = 0LL;
    v47[1] = v47;
    void v47[2] = 0x2020000000LL;
    char v48 = 0;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    id v9 = v30;
    id v10 = [v9 countByEnumeratingWithState:&v43 objects:v49 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v44;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v44 != v11) {
            objc_enumerationMutation(v9);
          }
          uint64_t v13 = *(void **)(*((void *)&v43 + 1) + 8LL * (void)i);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 friendCode]);
          [v7 setObject:v13 forKeyedSubscript:v14];

          unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 contactID]);
          BOOL v16 = [v15 length] == 0;

          if (!v16)
          {
            id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 contactID]);
            [v8 addObject:v17];
          }
        }

        id v10 = [v9 countByEnumeratingWithState:&v43 objects:v49 count:16];
      }

      while (v10);
    }

    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472LL;
    v37[2] = sub_1000360EC;
    v37[3] = &unk_10026CF30;
    void v37[4] = *(void *)(a1 + 32);
    id v18 = v7;
    id v38 = v18;
    id v19 = v29;
    id v39 = v19;
    id v20 = v27;
    id v40 = v20;
    id v21 = v28;
    id v41 = v21;
    __int128 v42 = v47;
    [v19 perform:v37];
    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 replyQueue]);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_1000367E8;
    v31[3] = &unk_10026CF58;
    id v24 = v20;
    id v32 = v24;
    id v35 = *(id *)(a1 + 40);
    id v25 = v19;
    __int128 v36 = v47;
    uint64_t v26 = *(void *)(a1 + 32);
    id v33 = v25;
    uint64_t v34 = v26;
    [v25 notifyOnQueue:v23 block:v31];

    _Block_object_dispose(v47, 8);
    id v5 = 0LL;
  }
}

void sub_1000360C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46)
{
}

void sub_1000360EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 localPlayer]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000361E8;
  v10[3] = &unk_10026CF08;
  id v6 = *(void **)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  id v15 = v3;
  uint64_t v16 = v8;
  id v14 = v7;
  id v9 = v3;
  [v4 getFriendsForPlayer:v5 withFilter:1 handler:v10];
}

void sub_1000361E8(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 _gkValuesForKeyPath:@"playerID"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v3));

  id v5 = *(void **)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allKeys]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100036324;
  v12[3] = &unk_10026CEE0;
  id v13 = *(id *)(a1 + 48);
  id v14 = v4;
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 32);
  id v17 = v7;
  uint64_t v18 = v8;
  __int128 v11 = *(_OWORD *)(a1 + 72);
  id v9 = (id)v11;
  __int128 v19 = v11;
  id v10 = v4;
  [v5 getFriendCodeDetailWithIdentifiers:v6 handler:v12];
}

void sub_100036324(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6 || ![v5 count])
  {
    [*(id *)(a1 + 32) setError:v6];
  }

  else
  {
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    id v28 = v5;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v33;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v33 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
          if ([v12 friendCodeState] == (id)3
            && (id v13 = *(void **)(a1 + 40),
                id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 creatorPlayerID]),
                LOBYTE(v13) = [v13 containsObject:v14],
                v14,
                (v13 & 1) == 0))
          {
            id v17 = (void *)objc_claimAutoreleasedReturnValue([v12 creatorPlayer]);
            __int128 v19 = *(void **)(a1 + 48);
            id v20 = (void *)objc_claimAutoreleasedReturnValue([v12 friendCode]);
            id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v20]);
            [v17 setInboxEntry:v21];

            id v22 = (void *)objc_claimAutoreleasedReturnValue([v17 inboxEntry]);
            id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 contactID]);
            objc_msgSend(v17, "setIsInContacts:", objc_msgSend(v23, "length") != 0);

            id v24 = *(void **)(a1 + 56);
            uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 playerID]);
            [v24 setObject:v17 forKeyedSubscript:v18];
          }

          else
          {
            id v15 = *(void **)(a1 + 64);
            id v16 = *(void **)(a1 + 48);
            id v17 = (void *)objc_claimAutoreleasedReturnValue([v12 friendCode]);
            uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:v17]);
            [v15 addObject:v18];
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v32 objects:v36 count:16];
      }

      while (v9);
    }

    id v5 = v28;
    if ([*(id *)(a1 + 64) count])
    {
      id v25 = *(void **)(a1 + 32);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472LL;
      v29[2] = sub_100036604;
      v29[3] = &unk_10026B800;
      int8x16_t v27 = *(int8x16_t *)(a1 + 64);
      id v26 = (id)v27.i64[0];
      int8x16_t v30 = vextq_s8(v27, v27, 8uLL);
      uint64_t v31 = *(void *)(a1 + 88);
      [v25 perform:v29];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

void sub_100036604(void *a1, void *a2)
{
  id v3 = a2;
  id v5 = (void *)a1[4];
  id v4 = (void *)a1[5];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000366A8;
  v9[3] = &unk_10026CEB8;
  id v6 = v4;
  uint64_t v7 = a1[6];
  id v11 = v3;
  uint64_t v12 = v7;
  id v10 = v6;
  id v8 = v3;
  [v5 removeMessageInboxEntries:v6 handler:v9];
}

void sub_1000366A8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    id v6 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100039254((uint64_t)a1, (uint64_t)v4, v6);
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(0LL);
    }
    id v8 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = a1[4];
      int v10 = 138412290;
      uint64_t v11 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "removed inbox entries: %@",  (uint8_t *)&v10,  0xCu);
    }
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_1000367E8(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allValues]);
  uint64_t v2 = *(void *)(a1 + 56);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v5, v3);

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    [v4 refreshContentsForDataType:3 userInfo:0];
  }
}

void sub_100036A3C(_Unwind_Exception *a1)
{
}

void sub_100036A54(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) inboxEntry]);

  if (v4)
  {
    id v5 = *(void **)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) inboxEntry]);
    id v25 = v6;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v25, 1LL));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_100036E34;
    void v14[3] = &unk_10026CFA8;
    char v18 = *(_BYTE *)(a1 + 56);
    int8x16_t v13 = *(int8x16_t *)(a1 + 32);
    id v8 = (id)v13.i64[0];
    int8x16_t v15 = vextq_s8(v13, v13, 8uLL);
    uint64_t v17 = *(void *)(a1 + 48);
    id v16 = v3;
    [v5 removeMessageInboxEntries:v7 handler:v14];

    uint64_t v9 = (void *)v15.i64[1];
  }

  else
  {
    int v10 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v11 = *(void **)(a1 + 40);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerID]);
    if (v10)
    {
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      void v22[2] = sub_100036C50;
      v22[3] = &unk_10026CF80;
      uint64_t v24 = *(void *)(a1 + 48);
      id v23 = v3;
      [v11 acceptFriendInvitationWithPlayerID:v12 completion:v22];

      uint64_t v9 = v23;
    }

    else
    {
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      v19[2] = sub_100036D70;
      void v19[3] = &unk_10026CF80;
      uint64_t v21 = *(void *)(a1 + 48);
      id v20 = v3;
      [v11 ignoreFriendInvitationWithPlayerID:v12 completion:v19];

      uint64_t v9 = v20;
    }
  }
}

void sub_100036C50(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = (os_log_s *)os_log_GKGeneral;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers(v3);
    }
    id v7 = (os_log_s *)os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      int v9 = 138412290;
      int v10 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "GKFriendService didAccept: accept native friend request failed: %@",  (uint8_t *)&v9,  0xCu);
    }
  }

  else
  {
    if (!os_log_GKGeneral)
    {
      id v8 = (id)GKOSLoggers(0LL);
      id v5 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_1000392D0();
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100036D70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = (os_log_s *)os_log_GKGeneral;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100039328();
    }
  }

  else
  {
    if (!os_log_GKGeneral)
    {
      id v7 = (id)GKOSLoggers(0LL);
      id v5 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_1000392FC();
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100036E34(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) inboxEntry]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 friendCode]);
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_100036F7C;
    v15[3] = &unk_10026CEB8;
    id v6 = &v16;
    id v16 = *(id *)(a1 + 40);
    id v7 = (id *)&v17;
    __int128 v10 = *(_OWORD *)(a1 + 48);
    id v8 = (id)v10;
    __int128 v17 = v10;
    [v3 acceptFriendRequestWithIdentifier:v5 sendPush:1 handler:v15];
  }

  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000370A4;
    v12[3] = &unk_10026CEB8;
    id v6 = &v13;
    id v13 = *(id *)(a1 + 40);
    id v7 = (id *)&v14;
    __int128 v11 = *(_OWORD *)(a1 + 48);
    id v9 = (id)v11;
    __int128 v14 = v11;
    [v3 rejectFriendRequestWithIdentifier:v5 handler:v12];
  }
}

void sub_100036F7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = (void *)os_log_GKGeneral;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers(v3);
    }
    id v7 = (os_log_s *)os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      int v9 = 138412290;
      __int128 v10 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "acccept friend code failed: %@",  (uint8_t *)&v9,  0xCu);
    }
  }

  else
  {
    if (!os_log_GKGeneral)
    {
      id v8 = (id)GKOSLoggers(0LL);
      id v5 = (void *)os_log_GKGeneral;
    }

    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEBUG)) {
      sub_100039388(a1, v5);
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000370A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = (void *)os_log_GKGeneral;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000394C0();
    }
  }

  else
  {
    if (!os_log_GKGeneral)
    {
      id v7 = (id)GKOSLoggers(0LL);
      id v5 = (void *)os_log_GKGeneral;
    }

    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEBUG)) {
      sub_100039424(a1, v5);
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100037170(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    [v2 refreshContentsForDataType:3 userInfo:0];
  }

  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

id sub_10003737C(uint64_t a1, void *a2)
{
  return [a2 refreshContentsForDataType:21 userInfo:*(void *)(a1 + 32)];
}

NSSecureCoding *__cdecl sub_10003741C(id a1, NSDictionary *a2)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( a2,  "objectForKeyedSubscript:",  @"friends-last-activities"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _gkMapWithBlock:&stru_10026D058]);

  return (NSSecureCoding *)v3;
}

id sub_100037468(id a1, NSDictionary *a2, unint64_t a3)
{
  uint64_t v3 = a2;
  id v4 = [[GKFriendActivityInternal alloc] initWithServerRepresentation:v3];

  return v4;
}

NSSecureCoding *__cdecl sub_1000375B8(id a1, NSDictionary *a2)
{
  return (NSSecureCoding *)-[NSDictionary _gkSubDictionaryWithKeys:](a2, "_gkSubDictionaryWithKeys:", &off_100288640);
}

void sub_1000377A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10003783C;
  v6[3] = &unk_10026C550;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 getActiveFriendRequests:v6];
}

void sub_10003783C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    int v9 = (os_log_s *)os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      int v11 = 138412290;
      uint64_t v12 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Unable to fetch iMessage friend requests --- %@",  (uint8_t *)&v11,  0xCu);
    }

    [*(id *)(a1 + 32) setError:v7];
  }

  else
  {
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
    [v10 setObject:v5 forKeyedSubscript:@"messagesFriendRequests"];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100037960(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100037A04;
  void v8[3] = &unk_10026D0A0;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  [v4 getFriendInvitationMailboxWithType:@"inbox" completion:v8];
}

void sub_100037A04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    id v9 = (os_log_s *)os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v35 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Unable to fetch native friend requests --- %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) setError:v7];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v24 = (id *)a1;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id v25 = v5;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"inbox"]);
    id v13 = [v12 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v30;
      do
      {
        for (i = 0LL; i != v14; i = (char *)i + 1)
        {
          if (*(void *)v30 != v15) {
            objc_enumerationMutation(v12);
          }
          __int128 v17 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
          char v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"issuing-player-id"]);
          __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"issuing-player-caid"]);
          if (v18)
          {
            [v10 addObject:v18];
            if (v19) {
              [v11 setObject:v19 forKeyedSubscript:v18];
            }
          }
        }

        id v14 = [v12 countByEnumeratingWithState:&v29 objects:v33 count:16];
      }

      while (v14);
    }

    if ([v10 count])
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v24[5] transport]);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v24[5] clientProxy]);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v24[5] localPlayer]);
      id v23 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKProfileServicePrivate,  "serviceWithTransport:forClient:localPlayer:",  v20,  v21,  v22));

      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_100037D40;
      v26[3] = &unk_10026C550;
      id v27 = v24[4];
      id v28 = v24[6];
      [v23 getProfilesForPlayerIDs:v10 fetchOptions:1 handler:v26];
    }

    else
    {
      (*((void (**)(void))v24[6] + 2))();
    }

    id v7 = 0LL;
    id v5 = v25;
  }
}

uint64_t sub_100037D40(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 result]);
  [v5 setObject:v4 forKeyedSubscript:@"nativeFriendRequests"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100037DA0(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"messagesFriendRequests"]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"nativeFriendRequests"]);

  id v6 = objc_alloc(&OBJC_CLASS___NSMutableArray);
  if (v3) {
    id v7 = v3;
  }
  else {
    id v7 = &__NSArray0__struct;
  }
  id v8 = -[NSMutableArray initWithArray:](v6, "initWithArray:", v7);
  id v9 = v8;
  if (v5) {
    uint64_t v10 = v5;
  }
  else {
    uint64_t v10 = &__NSArray0__struct;
  }
  -[NSMutableArray addObjectsFromArray:](v8, "addObjectsFromArray:", v10);
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:selector:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:selector:",  @"alias",  1LL,  "caseInsensitiveCompare:"));
  id v14 = v11;
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v14, 1LL));
  id v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray sortedArrayUsingDescriptors:](v9, "sortedArrayUsingDescriptors:", v12));

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100038070(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    id v6 = (os_log_s *)os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Failed while sending friend invitation via push: %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKAMPController controller](&OBJC_CLASS___GKAMPController, "controller"));
    [v7 reportFriendInviteActivityEventAtStage:0 hostApp:*(void *)(a1 + 32)];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100038280(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    id v6 = (os_log_s *)os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Failed to accept a friend invitation: %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKAMPController controller](&OBJC_CLASS___GKAMPController, "controller"));
    [v7 reportFriendInviteActivityEventAtStage:4 hostApp:0];
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100038554(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    id v6 = (os_log_s *)os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Failed to ignore a friend invitation: %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKAMPController controller](&OBJC_CLASS___GKAMPController, "controller"));
    [v7 reportFriendInviteActivityEventAtStage:6 hostApp:0];
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000389E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v6 = GKBagKeyGetFriendInvitationMailbox;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  v10[0] = _NSConcreteStackBlock;
  v10[2] = sub_100038AC8;
  v10[3] = &unk_10026D0F0;
  int v8 = *(void **)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  v10[1] = 3221225472LL;
  char v13 = *(_BYTE *)(a1 + 48);
  id v11 = v4;
  id v12 = v8;
  id v9 = v4;
  [v5 deleteEntitiesWithBagKey:v6 clientProxy:v7 completionHandler:v10];
}

void sub_100038AC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_ERROR)) {
      sub_100039520();
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100038BE0;
  void v8[3] = &unk_10026D0C8;
  char v11 = *(_BYTE *)(a1 + 56);
  void v8[4] = *(void *)(a1 + 32);
  id v10 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  dispatch_async(v7, v8);
}

uint64_t sub_100038BE0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    [v2 refreshContentsForDataType:3 userInfo:0];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100038C2C( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

id sub_100038C50(uint64_t a1, void *a2)
{
  return a2;
}

id sub_100038C5C(uint64_t a1, void *a2)
{
  return a2;
}

void sub_100038C68(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = GKStackTraceWithFrameLimit(10LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  int v7 = 138412546;
  uint64_t v8 = a1;
  sub_100038C40();
  sub_1000208A4( (void *)&_mh_execute_header,  v3,  v6,  "getFriendIDsForPlayer: internal without playerID:%@: %@",  (uint8_t *)&v7);

  sub_100020800();
}

void sub_100038D08()
{
}

void sub_100038D68()
{
}

void sub_100038DC8()
{
}

void sub_100038E2C()
{
}

void sub_100038E90()
{
}

void sub_100038EF0()
{
}

void sub_100038F54()
{
}

void sub_100038F80()
{
}

void sub_100038FE4()
{
}

void sub_100039010(uint8_t *a1, void *a2, void *a3, void *a4)
{
  int v7 = a2;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a3 localizedDescription]);
  *(_DWORD *)a1 = 138412290;
  *a4 = v8;
  _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Error loading friend code from cache: %@",  a1,  0xCu);
}

void sub_100039090()
{
}

void sub_1000390F0()
{
}

void sub_100039150()
{
}

void sub_1000391B0(uint64_t a1, void *a2)
{
  id v4 = sub_100038C5C(a1, a2);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 result]);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  sub_100038C40();
  sub_100038C2C( (void *)&_mh_execute_header,  v7,  v8,  "Player Activity: finished network group result: %@, error: %@",  v9,  v10,  v11,  v12,  2u);

  sub_100020800();
}

void sub_100039254(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  sub_1000208A4((void *)&_mh_execute_header, a3, (uint64_t)a3, "removal of %@ failed due to %@", (uint8_t *)&v4);
  sub_10000C760();
}

void sub_1000392D0()
{
}

void sub_1000392FC()
{
}

void sub_100039328()
{
}

void sub_100039388(uint64_t a1, void *a2)
{
  uint64_t v3 = (os_log_s *)sub_100038C50(a1, a2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 inboxEntry]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 friendCode]);
  sub_1000207E0();
  sub_1000208B0((void *)&_mh_execute_header, v3, v6, "accepted friendCode: %@", v7);

  sub_100020800();
}

void sub_100039424(uint64_t a1, void *a2)
{
  uint64_t v3 = (os_log_s *)sub_100038C50(a1, a2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 inboxEntry]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 friendCode]);
  sub_1000207E0();
  sub_1000208B0((void *)&_mh_execute_header, v3, v6, "rejected friendCode: %@", v7);

  sub_100020800();
}

void sub_1000394C0()
{
}

void sub_100039520()
{
}

LABEL_11:
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 lastObject]);
  return v14;
}

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

  return (char)v8;
}

  return (char)v8;
}

  a1[13] = -2084203453;
  return result;
}

void sub_100039914(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([a3 entityName]);
  int v7 = 138412546;
  uint64_t v8 = a1;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Cache Error: %@ failed to retrieve cache for fetched entity: %@",  (uint8_t *)&v7,  0x16u);
}

void sub_1000399D0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Fetch error occurred.", v1, 2u);
}

void sub_100039A64(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___GKGameActivityStore);
  uint64_t v2 = (void *)qword_1002BB4C0;
  qword_1002BB4C0 = (uint64_t)v1;
}

void sub_100039BB0(id a1)
{
  id v1 = [[ASCLockupViewGroup alloc] initWithName:@"ASCLockupView.Group.gameCenter"];
  uint64_t v2 = (void *)qword_1002BB4D8;
  qword_1002BB4D8 = (uint64_t)v1;
}

void sub_100039BE4(uint64_t a1)
{
  uint64_t v2 = (void *)qword_1002BB4D8;
  uint64_t v3 = *(void *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100039C84;
  v6[3] = &unk_10026D1D0;
  id v9 = *(id *)(a1 + 56);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = v4;
  uint64_t v8 = v5;
  [v2 _cacheLockupsWithCollectionRequest:v3 withCompletionBlock:v6];
}

void sub_100039C84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004CC74();
    }
    id v9 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    goto LABEL_7;
  }

  if (![v5 count])
  {
    id v9 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_7:
    v9();
    goto LABEL_17;
  }

  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  v35[2] = sub_100039FD0;
  v35[3] = &unk_10026D180;
  uint64_t v24 = a1;
  id v36 = *(id *)(a1 + 32);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 _gkFilterWithBlock:v35]);

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameService.m",  106LL,  "-[GKGameService getArcadeHighlightForAdamID:count:handler:]_block_invoke_2"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[GKDispatchGroup dispatchGroupWithName:]( &OBJC_CLASS___GKDispatchGroup,  "dispatchGroupWithName:",  v11));

  char v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  [v12 setResult:v13];
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  id v5 = v10;
  id v14 = [v5 countByEnumeratingWithState:&v31 objects:v37 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v32;
    do
    {
      for (i = 0LL; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v32 != v16) {
          objc_enumerationMutation(v5);
        }
        uint64_t v18 = *(void *)(*((void *)&v31 + 1) + 8LL * (void)i);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472LL;
        v28[2] = sub_10003A040;
        v28[3] = &unk_10026B080;
        void v28[4] = v18;
        id v19 = v12;
        id v29 = v19;
        id v30 = v13;
        [v19 perform:v28];
      }

      id v15 = [v5 countByEnumeratingWithState:&v31 objects:v37 count:16];
    }

    while (v15);
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v24 + 40) clientProxy]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 replyQueue]);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_10003A324;
  v25[3] = &unk_10026B030;
  id v22 = *(id *)(v24 + 48);
  id v26 = v12;
  id v27 = v22;
  id v23 = v12;
  [v23 notifyOnQueue:v21 block:v25];

  id v7 = 0LL;
LABEL_17:
}

id sub_100039FD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 id]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 numberValue]);

  else {
    id v6 = v3;
  }
  id v7 = v6;

  return v7;
}

void sub_10003A040(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)qword_1002BB4D8;
  uint64_t v5 = *(void *)(a1 + 32);
  v16[0] = _ASCLockupKeyIcon;
  v16[1] = _ASCLockupKeyTitle;
  void v16[2] = _ASCLockupKeySubtitle;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v16, 3LL));
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_10003A1A0;
  v11[3] = &unk_10026D1A8;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v12 = v8;
  uint64_t v13 = v9;
  id v14 = *(id *)(a1 + 48);
  id v15 = v3;
  id v10 = v3;
  [v4 _lockupDictionaryForRequest:v5 includingKeys:v7 withCompletionBlock:v11];
}

void sub_10003A1A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004CCD4();
    }
    [*(id *)(a1 + 32) setError:v7];
  }

  else
  {
    id v9 = objc_alloc_init(&OBJC_CLASS___GKGameHighlightInternal);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) id]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 numberValue]);
    [v9 setAdamID:v11];

    id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:_ASCLockupKeyIcon]);
    [v9 setArtwork:v12];

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:_ASCLockupKeyTitle]);
    [v9 setTitle:v13];

    id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:_ASCLockupKeySubtitle]);
    [v9 setSubtitle:v14];

    [*(id *)(a1 + 48) addObject:v9];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10003A324(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10003A4FC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameSettings _gkFetchRequest](&OBJC_CLASS___GKCDGameSettings, "_gkFetchRequest"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"bundleID == %@",  a1[4]));
  [v7 setPredicate:v8];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v7 error:0]);
  if (![v9 count])
  {
    uint64_t v11 = 0LL;
LABEL_6:
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    uint64_t v16 = GKBagKeyGetPerGameSettings;
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_10003A710;
    void v18[3] = &unk_10026D220;
    id v19 = a1[6];
    id v20 = a1[4];
    id v21 = v5;
    id v22 = v6;
    [v15 issueRequest:&__NSDictionary0__struct bagKey:v16 clientProxy:v17 handler:v18];

    goto LABEL_7;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 firstObject]);
  uint64_t v11 = v10;
  if (!v10) {
    goto LABEL_6;
  }
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 expirationDate]);
  unsigned int v13 = [v11 _gkIsExpired:v12];

  if (v13) {
    goto LABEL_6;
  }
  id v14 = -[GKGameSettingsInternal initWithGameSettings:]( objc_alloc(&OBJC_CLASS___GKGameSettingsInternal),  "initWithGameSettings:",  v11);
  [a1[6] setResult:v14];

  v6[2](v6);
LABEL_7:
}

void sub_10003A710(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", a4));
  if (v7 && !a3)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10003A830;
    void v13[3] = &unk_10026CD40;
    id v12 = *(void **)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    id v16 = 0LL;
    id v17 = v7;
    id v18 = v11;
    id v19 = *(id *)(a1 + 32);
    [v12 performOnManagedObjectContext:v13];
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v8,  v9,  v10);
}

void sub_10003A830(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameSettings _gkFetchRequest](&OBJC_CLASS___GKCDGameSettings, "_gkFetchRequest"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"bundleID == %@",  *(void *)(a1 + 32)));
  [v7 setPredicate:v8];

  uint64_t v9 = *(void **)(a1 + 40);
  id v29 = 0LL;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 executeFetchRequest:v7 error:&v29]);
  id v11 = v29;
  id v12 = v11;
  if (v11)
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers(v11);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004CD34();
    }
  }

  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v14 = v10;
  id v15 = [v14 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v26;
    do
    {
      id v18 = 0LL;
      do
      {
        if (*(void *)v26 != v17) {
          objc_enumerationMutation(v14);
        }
        [v5 deleteObject:*(void *)(*((void *)&v25 + 1) + 8 * (void)v18)];
        id v18 = (char *)v18 + 1;
      }

      while (v16 != v18);
      id v16 = [v14 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }

    while (v16);
  }

  id v19 = *(id *)(a1 + 56);
  id v20 = objc_alloc(&OBJC_CLASS___GKCDGameSettings);
  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameSettings entity](&OBJC_CLASS___GKCDGameSettings, "entity"));
  id v22 = -[GKCDGameSettings initWithEntity:insertIntoManagedObjectContext:]( v20,  "initWithEntity:insertIntoManagedObjectContext:",  v21,  v5);

  -[GKCDGameSettings setBundleID:](v22, "setBundleID:", *(void *)(a1 + 32));
  -[GKCDGameSettings setExpirationDate:](v22, "setExpirationDate:", *(void *)(a1 + 64));
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"allow-friend-list-access"]);
  -[GKCDGameSettings setAllowFriendListAccess:](v22, "setAllowFriendListAccess:", v23);

  uint64_t v24 = -[GKGameSettingsInternal initWithGameSettings:]( objc_alloc(&OBJC_CLASS___GKGameSettingsInternal),  "initWithGameSettings:",  v22);
  [*(id *)(a1 + 72) setResult:v24];

  v6[2](v6);
}

void sub_10003AAD0(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10003ACB0(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  __int128 v31 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameSettings _gkFetchRequest](&OBJC_CLASS___GKCDGameSettings, "_gkFetchRequest"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[4] bundleID]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"bundleID == %@",  v7));
  [v6 setPredicate:v8];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v6 error:0]);
  if ([v9 count])
  {
    uint64_t v10 = (GKCDGameSettings *)objc_claimAutoreleasedReturnValue([v9 firstObject]);
    if ((unint64_t)[v9 count] >= 2)
    {
      unint64_t v11 = 1LL;
      do
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:v11]);
        [v5 deleteObject:v12];

        ++v11;
      }

      while (v11 < (unint64_t)[v9 count]);
    }
  }

  else
  {
    id v13 = objc_alloc(&OBJC_CLASS___GKCDGameSettings);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameSettings entity](&OBJC_CLASS___GKCDGameSettings, "entity"));
    uint64_t v10 = -[GKCDGameSettings initWithEntity:insertIntoManagedObjectContext:]( v13,  "initWithEntity:insertIntoManagedObjectContext:",  v14,  v5);

    id v15 = (void *)objc_claimAutoreleasedReturnValue([a1[4] bundleID]);
    -[GKCDGameSettings setBundleID:](v10, "setBundleID:", v15);

    id v16 = (void *)objc_claimAutoreleasedReturnValue([a1[4] serverAllowFriendListAccessValue]);
    -[GKCDGameSettings setAllowFriendListAccess:](v10, "setAllowFriendListAccess:", v16);
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameSettings allowFriendListAccess](v10, "allowFriendListAccess"));
  id v18 = (void *)objc_claimAutoreleasedReturnValue([a1[4] serverAllowFriendListAccessValue]);
  -[GKCDGameSettings setAllowFriendListAccess:](v10, "setAllowFriendListAccess:", v18);
  if ([v18 length])
  {
    v38[0] = v18;
    v37[0] = @"allow-friend-list-access";
    v37[1] = @"for-bundle-id";
    id v19 = (void *)objc_claimAutoreleasedReturnValue([a1[4] bundleID]);
    v38[1] = v19;
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v38,  v37,  2LL));

    id v30 = v17;
    id v21 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameSettings objectID](v10, "objectID"));
    id v22 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    id v29 = v6;
    uint64_t v23 = GKBagKeySetPerGameSettings;
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([a1[6] clientProxy]);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_10003B064;
    v32[3] = &unk_10026D220;
    id v33 = a1[5];
    id v34 = v21;
    id v35 = v30;
    __int128 v25 = v31;
    id v36 = v31;
    id v26 = v21;
    uint64_t v27 = v23;
    id v6 = v29;
    [v22 issueRequest:v20 bagKey:v27 clientProxy:v24 handler:v32];

    uint64_t v17 = v30;
  }

  else
  {
    -[GKCDGameSettings setAllowFriendListAccess:](v10, "setAllowFriendListAccess:", v17);
    __int128 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  3LL,  0LL));
    [a1[5] setError:v28];

    __int128 v25 = v31;
    v31[2](v31);
  }
}

void sub_10003B064(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [*(id *)(a1 + 32) setError:v4];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10003B124;
  void v7[3] = &unk_10026B408;
  id v5 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v6 = v4;
  [v5 performOnManagedObjectContext:v7];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10003B124(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  id v37 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 existingObjectWithID:v7 error:&v37]);
  id v9 = v37;
  id v10 = v9;
  if (v9)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(v9);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004CD98();
    }
  }

  if (a1[5]) {
    [v8 setAllowFriendListAccess:a1[6]];
  }
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameAccessList _gkFetchRequest](&OBJC_CLASS___GKCDGameAccessList, "_gkFetchRequest"));
  id v36 = 0LL;
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v12 error:&v36]);
  id v14 = v36;
  id v15 = v14;
  if (v13 || a1[5])
  {
    id v30 = v14;
    __int128 v31 = v12;
    id v16 = v6;
    uint64_t v17 = v10;
    id v18 = v8;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    id v19 = v13;
    id v20 = [v19 countByEnumeratingWithState:&v32 objects:v40 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v33;
      do
      {
        uint64_t v23 = 0LL;
        do
        {
          if (*(void *)v33 != v22) {
            objc_enumerationMutation(v19);
          }
          objc_msgSend( v5,  "deleteObject:",  *(void *)(*((void *)&v32 + 1) + 8 * (void)v23),  v30,  v31,  (void)v32);
          uint64_t v23 = (char *)v23 + 1;
        }

        while (v21 != v23);
        id v21 = [v19 countByEnumeratingWithState:&v32 objects:v40 count:16];
      }

      while (v21);
    }

    if (!os_log_GKGeneral) {
      id v25 = (id)GKOSLoggers(v24);
    }
    id v26 = (os_log_s *)os_log_GKDaemon;
    id v8 = v18;
    id v10 = v17;
    id v6 = v16;
    id v15 = v30;
    id v12 = v31;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v27 = a1[5];
      *(_DWORD *)buf = 138412290;
      uint64_t v39 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Could not fetch data from cache: %@", buf, 0xCu);
    }
  }

  if (objc_msgSend(v13, "count", v30, v31))
  {
    unint64_t v28 = 0LL;
    do
    {
      id v29 = (void *)objc_claimAutoreleasedReturnValue([v13 objectAtIndexedSubscript:v28]);
      [v5 deleteObject:v29];

      ++v28;
    }

    while (v28 < (unint64_t)[v13 count]);
  }

  v6[2](v6);
}

void sub_10003B404(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_10003B5E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10003B694;
  v10[3] = &unk_10026D270;
  id v6 = *(id *)(a1 + 48);
  id v14 = v3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v11 = v6;
  uint64_t v12 = v7;
  id v13 = v8;
  id v9 = v3;
  [v4 getPerGameSettingsForBundleID:v5 handler:v10];
}

void sub_10003B694(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setError:");
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else if ([a2 allowFriendListAccess] == (id)2)
  {
    uint64_t v5 = *(void **)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10003B7B0;
    void v8[3] = &unk_10026D248;
    id v9 = *(id *)(a1 + 32);
    id v6 = *(id *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = v6;
    [v5 _getPerGameFriendsPlayerIDForBundleID:v4 handler:v8];
  }

  else
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  102LL,  0LL));
    [*(id *)(a1 + 32) setError:v7];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

void sub_10003B7B0(id *a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    objc_msgSend(a1[4], "setError:");
    (*((void (**)(void))a1[6] + 2))();
  }

  else
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a2 _gkValuesForKeyPath:@"playerID"]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] transport]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[5] localPlayer]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKProfileService,  "serviceWithTransport:forClient:localPlayer:",  v5,  v6,  v7));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10003B8F4;
    v9[3] = &unk_10026C550;
    id v10 = a1[4];
    id v11 = a1[6];
    [v8 getProfilesForPlayerIDs:v4 handler:v9];
  }

void sub_10003B8F4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (!a3) {
    [*(id *)(a1 + 32) setResult:v5];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10003B950(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10003BB14(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 clientProxy]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 connection]);

  if (v6)
  {
    [v6 auditToken];
  }

  else
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
  }

  v13[0] = kTCCAccessCheckOptionPurposeRequired;
  v13[1] = kTCCAccessCheckOptionPrompt;
  v14[0] = &__kCFBooleanTrue;
  v14[1] = &__kCFBooleanTrue;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v14,  v13,  2LL));
  v10[0] = v11;
  v10[1] = v12;
  id v8 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  TCCAccessCheckAuditToken(kTCCServiceGameCenterFriends, v10, v7) != 0);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  [*(id *)(a1 + 40) setResult:v9];

  v4[2](v4);
}

void sub_10003BC68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, [v2 BOOLValue]);
  }

void sub_10003BE40(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 clientProxy]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 connection]);

  if (v6)
  {
    [v6 auditToken];
  }

  else
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
  }

  uint64_t v7 = *(void *)(a1 + 40);
  v8[0] = v9;
  v8[1] = v10;
  TCCAccessResetForBundleIdWithAuditToken(kTCCServiceGameCenterFriends, v7, v8);
  v4[2](v4);
}

uint64_t sub_10003BEE8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

NSArray *__cdecl sub_10003C084(id a1, NSOrderedSet *a2)
{
  id v2 = a2;
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(current_queue);
  if (dispatch_queue_get_specific(v4, @"com.apple.gamed.cachequeue") != @"com.apple.gamed.cachequeue")
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s not invoked on managed object context queue at %@",  "-[GKGameService _getPerGameFriendsPlayerIDForBundleID:handler:]_block_invoke",  v5));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m"));
    id v8 = objc_claimAutoreleasedReturnValue([v7 lastPathComponent]);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@ (_queueContext == (__bridge const void * _Nonnull)GKCacheQueueID)\n[%s (%s:%d)]",  v6,  "-[GKGameService _getPerGameFriendsPlayerIDForBundleID:handler:]_block_invoke",  [v8 UTF8String],  422));

    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  @"GameKit Exception",  @"%@",  v9);
  }

  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  -[NSOrderedSet count](v2, "count")));
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v11 = v2;
  id v12 = -[NSOrderedSet countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v22;
    do
    {
      id v15 = 0LL;
      do
      {
        if (*(void *)v22 != v14) {
          objc_enumerationMutation(v11);
        }
        id v16 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)v15);
        uint64_t v17 = objc_opt_new(&OBJC_CLASS___GKPlayerInternal);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 playerID]);
        -[GKPlayerInternal setPlayerID:](v17, "setPlayerID:", v18);

        [v10 addObject:v17];
        id v15 = (char *)v15 + 1;
      }

      while (v13 != v15);
      id v13 = -[NSOrderedSet countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
    }

    while (v13);
  }

  id v19 = [v10 copy];
  return (NSArray *)v19;
}

void sub_10003C2E4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameFriendList _gkFetchRequest](&OBJC_CLASS___GKCDGameFriendList, "_gkFetchRequest"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"bundleID == %@",  a1[4]));
  [v7 setPredicate:v8];

  id v44 = 0LL;
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v7 error:&v44]);
  id v10 = v44;
  if (v10)
  {
    __int128 v11 = v6;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    id v12 = v9;
    id v13 = [v12 countByEnumeratingWithState:&v40 objects:v47 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v41;
      do
      {
        for (i = 0LL; i != v14; i = (char *)i + 1)
        {
          if (*(void *)v41 != v15) {
            objc_enumerationMutation(v12);
          }
          [v5 deleteObject:*(void *)(*((void *)&v40 + 1) + 8 * (void)i)];
        }

        id v14 = [v12 countByEnumeratingWithState:&v40 objects:v47 count:16];
      }

      while (v14);
    }

    if (!os_log_GKGeneral) {
      id v18 = (id)GKOSLoggers(v17);
    }
    id v19 = (os_log_s *)os_log_GKDaemon;
    id v6 = v11;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v46 = v10;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Could not fetch data from cache: %@", buf, 0xCu);
    }
  }

  else if ([v9 count])
  {
    id v20 = (GKCDGameFriendList *)objc_claimAutoreleasedReturnValue([v9 firstObject]);
    goto LABEL_16;
  }

  __int128 v21 = objc_alloc(&OBJC_CLASS___GKCDGameFriendList);
  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameFriendList entity](&OBJC_CLASS___GKCDGameFriendList, "entity"));
  id v20 = -[GKCDGameFriendList initWithEntity:insertIntoManagedObjectContext:]( v21,  "initWithEntity:insertIntoManagedObjectContext:",  v22,  v5);

  -[GKCDGameFriendList setBundleID:](v20, "setBundleID:", a1[4]);
LABEL_16:
  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameFriendList expirationDate](v20, "expirationDate"));
  unsigned int v24 = -[GKCDGameFriendList _gkIsExpired:](v20, "_gkIsExpired:", v23);

  if (v24)
  {
    id v25 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    uint64_t v26 = GKBagKeyGetPerGameFriendPlayerIDs;
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_10003C6D0;
    v34[3] = &unk_10026D300;
    id v35 = a1[6];
    id v36 = a1[4];
    id v37 = v5;
    id v38 = a1[7];
    uint64_t v39 = v6;
    [v25 issueRequest:&__NSDictionary0__struct bagKey:v26 clientProxy:v27 handler:v34];
  }

  else
  {
    unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameFriendList entries](v20, "entries"));
    id v29 = [v28 count];

    if (v29)
    {
      id v30 = (uint64_t (**)(id, void *))a1[7];
      __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameFriendList entries](v20, "entries"));
      uint64_t v32 = v30[2](v30, v31);
      __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      [a1[6] setResult:v33];
    }

    v6[2](v6);
  }
}

void sub_10003C6D0(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"results"]);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableOrderedSet orderedSetWithCapacity:]( NSMutableOrderedSet,  "orderedSetWithCapacity:",  [v8 count]));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10003C830;
    void v13[3] = &unk_10026D2D8;
    id v10 = *(void **)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    id v16 = v8;
    id v17 = v9;
    double v20 = a4;
    id v18 = *(id *)(a1 + 32);
    id v19 = *(id *)(a1 + 56);
    id v11 = v9;
    id v12 = v8;
    [v10 performOnManagedObjectContext:v13];
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10003C830(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v37 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameFriendList _gkFetchRequest](&OBJC_CLASS___GKCDGameFriendList, "_gkFetchRequest"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"bundleID == %@",  *(void *)(a1 + 32)));
  [v6 setPredicate:v7];

  id v8 = *(void **)(a1 + 40);
  id v47 = 0LL;
  id v36 = v6;
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 executeFetchRequest:v6 error:&v47]);
  id v35 = v47;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  id v10 = v9;
  id v11 = [v10 countByEnumeratingWithState:&v43 objects:v49 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v44;
    do
    {
      id v14 = 0LL;
      do
      {
        if (*(void *)v44 != v13) {
          objc_enumerationMutation(v10);
        }
        [v5 deleteObject:*(void *)(*((void *)&v43 + 1) + 8 * (void)v14)];
        id v14 = (char *)v14 + 1;
      }

      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v43 objects:v49 count:16];
    }

    while (v12);
  }

  __int128 v34 = v10;

  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  id obj = *(id *)(a1 + 48);
  id v15 = [obj countByEnumeratingWithState:&v39 objects:v48 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v40;
    do
    {
      id v18 = 0LL;
      do
      {
        uint64_t v19 = a1;
        if (*(void *)v40 != v17) {
          objc_enumerationMutation(obj);
        }
        double v20 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)v18);
        __int128 v21 = objc_alloc(&OBJC_CLASS___GKCDGameFriend);
        __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameFriend entity](&OBJC_CLASS___GKCDGameFriend, "entity"));
        __int128 v23 = -[GKCDGameFriend initWithEntity:insertIntoManagedObjectContext:]( v21,  "initWithEntity:insertIntoManagedObjectContext:",  v22,  v5);

        unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:@"player-id"]);
        -[GKCDGameFriend setPlayerID:](v23, "setPlayerID:", v24);

        a1 = v19;
        [*(id *)(v19 + 56) addObject:v23];

        id v18 = (char *)v18 + 1;
      }

      while (v16 != v18);
      id v16 = [obj countByEnumeratingWithState:&v39 objects:v48 count:16];
    }

    while (v16);
  }

  id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 80)));
  uint64_t v26 = objc_alloc(&OBJC_CLASS___GKCDGameFriendList);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameFriendList entity](&OBJC_CLASS___GKCDGameFriendList, "entity"));
  unint64_t v28 = -[GKCDGameFriendList initWithEntity:insertIntoManagedObjectContext:]( v26,  "initWithEntity:insertIntoManagedObjectContext:",  v27,  *(void *)(a1 + 40));

  -[GKCDGameFriendList setExpirationDate:](v28, "setExpirationDate:", v25);
  -[GKCDGameFriendList setBundleID:](v28, "setBundleID:", *(void *)(a1 + 32));
  if ([*(id *)(a1 + 56) count])
  {
    id v29 = [*(id *)(a1 + 56) copy];
    -[GKCDGameFriendList setEntries:](v28, "setEntries:", v29);

    uint64_t v30 = *(void *)(a1 + 72);
    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameFriendList entries](v28, "entries"));
    uint64_t v32 = (*(uint64_t (**)(uint64_t, void *))(v30 + 16))(v30, v31);
    __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    [*(id *)(a1 + 64) setResult:v33];
  }

  v37[2](v37);
}

void sub_10003CBC8(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10003CEF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v26 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDLoadedGame _gkFetchRequest](&OBJC_CLASS___GKCDLoadedGame, "_gkFetchRequest"));
  unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"bundleId IN %@",  *(void *)(a1 + 32)));
  objc_msgSend(v6, "setPredicate:");
  id v25 = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSManagedObject _gkObjectsFromFetchRequest:withContext:]( &OBJC_CLASS___NSManagedObject,  "_gkObjectsFromFetchRequest:withContext:",  v6,  v5));
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  id v8 = [v7 countByEnumeratingWithState:&v31 objects:v36 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v32;
    do
    {
      id v11 = 0LL;
      do
      {
        if (*(void *)v32 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(a1 + 40);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v31 + 1) + 8 * (void)v11) bundleId]);
        [v12 removeObject:v13];

        id v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v31 objects:v36 count:16];
    }

    while (v9);
  }

  __int128 v23 = v7;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v14 = *(id *)(a1 + 40);
  id v15 = [v14 countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v28;
    do
    {
      id v18 = 0LL;
      do
      {
        if (*(void *)v28 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void *)(*((void *)&v27 + 1) + 8LL * (void)v18);
        double v20 = objc_alloc(&OBJC_CLASS___GKCDLoadedGame);
        __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDLoadedGame entity](&OBJC_CLASS___GKCDLoadedGame, "entity"));
        __int128 v22 = -[GKCDLoadedGame initWithEntity:insertIntoManagedObjectContext:]( v20,  "initWithEntity:insertIntoManagedObjectContext:",  v21,  v5);

        -[GKCDLoadedGame setBundleId:](v22, "setBundleId:", v19);
        id v18 = (char *)v18 + 1;
      }

      while (v16 != v18);
      id v16 = [v14 countByEnumeratingWithState:&v27 objects:v35 count:16];
    }

    while (v16);
  }

  [*(id *)(a1 + 48) setResult:*(void *)(a1 + 40)];
  v26[2](v26);
}

void sub_10003D17C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  if ([v2 count] && *(void *)(a1 + 40))
  {
    id v3 = *(void **)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 40);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v9, 1LL));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 allObjects]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_10003D2A8;
    void v7[3] = &unk_10026C550;
    id v6 = *(void **)(a1 + 64);
    void v7[4] = *(void *)(a1 + 56);
    id v8 = v6;
    [v3 loadScopedPlayerIDs:v4 gameBundleIDs:v5 handler:v7];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

void sub_10003D2A8(uint64_t a1, void *a2, void *a3)
{
  id v11 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a2 firstObject]);
  id v8 = v7;
  if (!v7)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credential]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 playerInternal]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 scopedIDs]);
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credential]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 playerInternal]);
  [v10 setScopedIDs:v8];

  if (!v7)
  {
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10003D434(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003D674(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionGroupBypassingMultiUser]);
    [v3 performOnManagedObjectContext:&stru_10026D398];
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 replyQueue]);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_10003D8BC;
    v6[3] = &unk_10026B120;
    id v7 = *(id *)(a1 + 40);
    [v3 notifyOnQueue:v5 block:v6];
  }

void sub_10003D754(id a1, NSManagedObjectContext *a2, id a3)
{
  id v4 = a2;
  id v5 = (void (**)(void))a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameAccessList _gkFetchRequest](&OBJC_CLASS___GKCDGameAccessList, "_gkFetchRequest"));
  id v18 = 0LL;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSManagedObjectContext executeFetchRequest:error:](v4, "executeFetchRequest:error:", v6, &v18));
  id v8 = v18;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v9 = v7;
  id v10 = [v9 countByEnumeratingWithState:&v14 objects:v19 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v15;
    do
    {
      uint64_t v13 = 0LL;
      do
      {
        if (*(void *)v15 != v12) {
          objc_enumerationMutation(v9);
        }
        -[NSManagedObjectContext deleteObject:]( v4,  "deleteObject:",  *(void *)(*((void *)&v14 + 1) + 8LL * (void)v13),  (void)v14);
        uint64_t v13 = (char *)v13 + 1;
      }

      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v14 objects:v19 count:16];
    }

    while (v11);
  }

  v5[2](v5);
}

uint64_t sub_10003D8BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003DA60(uint64_t a1, void *a2, void *a3)
{
  id v34 = a2;
  __int128 v33 = a3;
  if (*(void *)(a1 + 32) && *(void *)(a1 + 56))
  {
    __int128 v31 = (id *)a1;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cachedGamesPlayed:context:"));
    __int128 v32 = v5;
    if (v5
      && (id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 expirationDate]),
          id v7 = v32,
          unsigned int v8 = [v32 _gkIsExpired:v6],
          v6,
          !v8))
    {
      uint64_t v19 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v36 = v19;
      if (!os_log_GKGeneral)
      {
        id v20 = (id)GKOSLoggers(v19);
        id v7 = v32;
      }

      __int128 v21 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "getGamesPlayedMetaData using cache", buf, 2u);
      }

      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      id obj = (id)objc_claimAutoreleasedReturnValue([v7 entries]);
      id v22 = [obj countByEnumeratingWithState:&v37 objects:v51 count:16];
      if (v22)
      {
        __int128 v23 = 0LL;
        unsigned int v24 = 0LL;
        uint64_t v25 = *(void *)v38;
        do
        {
          uint64_t v26 = 0LL;
          __int128 v27 = v23;
          __int128 v28 = v24;
          do
          {
            if (*(void *)v38 != v25) {
              objc_enumerationMutation(obj);
            }
            __int128 v29 = *(void **)(*((void *)&v37 + 1) + 8LL * (void)v26);
            unsigned int v24 = -[GKGameInternal initWithCacheObject:]( objc_alloc(&OBJC_CLASS___GKGameInternal),  "initWithCacheObject:",  v29);

            __int128 v23 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameRecordInternal gameRecordForGame:]( &OBJC_CLASS___GKGameRecordInternal,  "gameRecordForGame:",  v24));
            __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v29 timeStamp]);
            [v23 setLastPlayedDate:v30];

            -[NSMutableArray addObject:](v36, "addObject:", v23);
            uint64_t v26 = (char *)v26 + 1;
            __int128 v27 = v23;
            __int128 v28 = v24;
          }

          while (v22 != v26);
          id v22 = [obj countByEnumeratingWithState:&v37 objects:v51 count:16];
        }

        while (v22);
      }

      [v31[5] setResult:v36];
      v33[2]();
    }

    else
    {
      id v9 = v31[4];
      char v52 = @"requested-player-id";
      id v53 = v9;
      id v36 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v53,  &v52,  1LL));
      *(void *)buf = 0LL;
      char v48 = buf;
      uint64_t v49 = 0x2020000000LL;
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v10 timeIntervalSince1970];
      uint64_t v12 = v11;

      uint64_t v50 = v12;
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v31[6] clientProxy]);
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472LL;
      v41[2] = sub_10003DEAC;
      v41[3] = &unk_10026D410;
      __int128 v46 = buf;
      id v15 = v31[5];
      id v16 = v31[6];
      id v42 = v15;
      id v43 = v16;
      id v44 = v31[4];
      __int128 v45 = v33;
      [v13 issueRequest:v36 bagKey:@"gk-get-games-played-metadata" clientProxy:v14 handler:v41];

      _Block_object_dispose(buf, 8);
    }

    id v18 = v33;
  }

  else
  {
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  8LL,  0LL));
    [*(id *)(a1 + 40) setError:v17];

    id v18 = v33;
    ((void (*)(void (**)(void)))v33[2])(v33);
  }
}

void sub_10003DE8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

void sub_10003DEAC(void *a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v33 = 0LL;
  id v34 = (double *)&v33;
  uint64_t v35 = 0x2020000000LL;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v9 timeIntervalSince1970];
  uint64_t v11 = v10;

  uint64_t v36 = v11;
  uint64_t v12 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", a4));
  uint64_t v13 = (void *)v12;
  if (!os_log_GKGeneral) {
    id v14 = (id)GKOSLoggers(v12);
  }
  id v15 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  v34[3] - *(double *)(*(void *)(a1[8] + 8LL) + 24LL)));
    *(_DWORD *)buf = 138412290;
    __int128 v38 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "getGamesPlayedMetaData perf server:%@", buf, 0xCu);
  }

  __int128 v17 = (void *)a1[4];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  void v23[2] = sub_10003E124;
  v23[3] = &unk_10026D3E8;
  id v24 = v17;
  id v18 = v8;
  id v25 = v18;
  id v19 = v7;
  uint64_t v30 = a1[8];
  uint64_t v20 = a1[5];
  __int128 v21 = (void *)a1[6];
  id v26 = v19;
  uint64_t v27 = v20;
  id v28 = v21;
  id v22 = v13;
  double v32 = a4;
  id v29 = v22;
  __int128 v31 = &v33;
  [v24 performOnManagedObjectContext:v23];
  (*(void (**)(void))(a1[7] + 16LL))();

  _Block_object_dispose(&v33, 8);
}

void sub_10003E100( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_10003E124(uint64_t a1, void *a2, void *a3)
{
  id v60 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) setError:*(void *)(a1 + 40)];
  if (*(void *)(a1 + 48) && !*(void *)(a1 + 40))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v10 timeIntervalSince1970];
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = v11;

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:@"results"]);
    __int128 v66 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v13 = (GamesPlayed *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) cachedGamesPlayed:*(void *)(a1 + 64) context:v60]);
    if (!v13)
    {
      id v14 = objc_alloc(&OBJC_CLASS___GamesPlayed);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(+[GamesPlayed entity](&OBJC_CLASS___GamesPlayed, "entity"));
      uint64_t v13 = -[GamesPlayed initWithEntity:insertIntoManagedObjectContext:]( v14,  "initWithEntity:insertIntoManagedObjectContext:",  v15,  v60);

      -[GamesPlayed setPlayerID:](v13, "setPlayerID:", *(void *)(a1 + 64));
    }

    unint64_t v59 = v13;
    -[GamesPlayed setExpirationDate:](v13, "setExpirationDate:", *(void *)(a1 + 72));
    __int128 v68 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    id v65 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v67 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    v70 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v79 = 0u;
    __int128 v80 = 0u;
    __int128 v81 = 0u;
    __int128 v82 = 0u;
    id v16 = v12;
    id v17 = [v16 countByEnumeratingWithState:&v79 objects:v89 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v80;
      do
      {
        for (i = 0LL; i != v18; i = (char *)i + 1)
        {
          if (*(void *)v80 != v19) {
            objc_enumerationMutation(v16);
          }
          __int128 v21 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v79 + 1) + 8 * (void)i) objectForKeyedSubscript:@"game-metadata"]);
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"bundle-id"]);
          -[NSMutableSet addObject:](v67, "addObject:", v22);
        }

        id v18 = [v16 countByEnumeratingWithState:&v79 objects:v89 count:16];
      }

      while (v18);
    }

    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"bundleID IN %@",  v67));
    id v24 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject fetchRequestForContext:]( &OBJC_CLASS___GKGameCacheObject,  "fetchRequestForContext:",  v60));
    [v24 setPredicate:v23];
    v58 = v24;
    __int128 v75 = 0u;
    __int128 v76 = 0u;
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([v60 executeFetchRequest:v24 error:0]);
    id v25 = [obj countByEnumeratingWithState:&v75 objects:v88 count:16];
    if (v25)
    {
      id v26 = v25;
      uint64_t v27 = *(void *)v76;
      do
      {
        for (j = 0LL; j != v26; j = (char *)j + 1)
        {
          if (*(void *)v76 != v27) {
            objc_enumerationMutation(obj);
          }
          id v29 = *(void **)(*((void *)&v75 + 1) + 8LL * (void)j);
          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 bundleID]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v70, "setObject:forKeyedSubscript:", v29, v30);
        }

        id v26 = [obj countByEnumeratingWithState:&v75 objects:v88 count:16];
      }

      while (v26);
    }

    __int128 v73 = 0u;
    __int128 v74 = 0u;
    __int128 v71 = 0u;
    __int128 v72 = 0u;
    id v62 = v16;
    id v69 = [v62 countByEnumeratingWithState:&v71 objects:v87 count:16];
    if (v69)
    {
      id v56 = v23;
      uint64_t v57 = v5;
      __int128 v31 = 0LL;
      double v32 = 0LL;
      uint64_t v33 = 0LL;
      uint64_t v63 = *(void *)v72;
      uint64_t v64 = a1;
      do
      {
        id v34 = 0LL;
        uint64_t v35 = v32;
        uint64_t v36 = v33;
        do
        {
          if (*(void *)v72 != v63) {
            objc_enumerationMutation(v62);
          }
          __int128 v37 = *(void **)(*((void *)&v71 + 1) + 8LL * (void)v34);
          __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v37 objectForKeyedSubscript:@"game-metadata"]);
          __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v38 objectForKeyedSubscript:@"bundle-id"]);

          uint64_t v40 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v70, "objectForKeyedSubscript:", v39));
          __int128 v31 = (GKGameCacheObject *)v40;
          if (!v40) {
            __int128 v31 = -[GKGameCacheObject initWithContext:]( objc_alloc(&OBJC_CLASS___GKGameCacheObject),  "initWithContext:",  v60);
          }
          __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v37 objectForKeyedSubscript:@"game-metadata"]);
          id v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(v64 + 96)));
          -[GKGameCacheObject updateWithServerRepresentation:expirationDate:]( v31,  "updateWithServerRepresentation:expirationDate:",  v41,  v42);

          -[GKGameCacheObject setBundleID:](v31, "setBundleID:", v39);
          id v43 = (void *)objc_claimAutoreleasedReturnValue([v37 objectForKeyedSubscript:@"timestamp"]);
          id v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate _gkDateFromServerTimestamp:]( &OBJC_CLASS___NSDate,  "_gkDateFromServerTimestamp:",  v43));
          -[GKGameCacheObject setTimeStamp:](v31, "setTimeStamp:", v44);

          -[NSMutableSet addObject:](v68, "addObject:", v31);
          __int128 v45 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameCacheObject adamID](v31, "adamID"));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v65, "setObject:forKeyedSubscript:", v31, v45);

          double v32 = -[GKGameInternal initWithCacheObject:]( objc_alloc(&OBJC_CLASS___GKGameInternal),  "initWithCacheObject:",  v31);
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameRecordInternal gameRecordForGame:]( &OBJC_CLASS___GKGameRecordInternal,  "gameRecordForGame:",  v32));

          __int128 v46 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameCacheObject timeStamp](v31, "timeStamp"));
          [v33 setLastPlayedDate:v46];

          -[NSMutableArray addObject:](v66, "addObject:", v33);
          id v34 = (char *)v34 + 1;
          uint64_t v35 = v32;
          uint64_t v36 = v33;
        }

        while (v69 != v34);
        id v69 = [v62 countByEnumeratingWithState:&v71 objects:v87 count:16];
      }

      while (v69);

      __int128 v23 = v56;
      id v5 = v57;
      a1 = v64;
    }

    id v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v47 timeIntervalSince1970];
    *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = v48;

    id v49 = -[GamesPlayed setEntries:](v59, "setEntries:", v68);
    if (!os_log_GKGeneral) {
      id v50 = (id)GKOSLoggers(v49);
    }
    uint64_t v51 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v53 = v51;
      id v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v52));
      uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v62 count]));
      *(_DWORD *)buf = 138412546;
      id v84 = v54;
      __int16 v85 = 2112;
      __int128 v86 = v55;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_INFO,  "getGamesPlayedMetaData perf cache time:%@ results %@",  buf,  0x16u);
    }

    [*(id *)(a1 + 32) setResult:v66];
    v5[2](v5);
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(v6);
    }
    id v8 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v9 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      id v84 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Error: %@", buf, 0xCu);
    }

    [*(id *)(a1 + 32) setError:*(void *)(a1 + 40)];
    v5[2](v5);
  }
}

void sub_10003E8FC(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10003EBA8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(a1 + 32))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKCachingUtils ensureGamesPlayedList:playerID:]( &OBJC_CLASS___GKCachingUtils,  "ensureGamesPlayedList:playerID:",  a2));
    id v7 = [*(id *)(a1 + 48) longValue];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 expirationDate]);
    if (([v6 _gkIsExpired:v8] & 1) == 0)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 withinSecs]);
      if ([v9 longValue])
      {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 withinSecs]);
        if ((uint64_t)v7 > (uint64_t)[v10 longValue])
        {

          goto LABEL_6;
        }

        uint64_t v27 = *(void *)(a1 + 48);

        if (!v27 || !v7) {
          goto LABEL_7;
        }
      }

      else
      {
      }

      if (!os_log_GKGeneral) {
        id v28 = (id)GKOSLoggers(v11);
      }
      id v29 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v30 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v46 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "Using cached games played descriptors for : %@",  buf,  0xCu);
      }

      __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v6 entries]);
      id v32 = [v31 count];

      if (v32)
      {
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v6 entries]);
        id v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSOrderedSet orderedSetWithOrderedSet:]( &OBJC_CLASS___NSOrderedSet,  "orderedSetWithOrderedSet:",  v33));

        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) internalGameSummariesFromResults:v34 limit:*(void *)(a1 + 64)]);
        [*(id *)(a1 + 40) setResult:v35];
      }

      v5[2](v5);
      goto LABEL_28;
    }

void sub_10003EFFC(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  [*(id *)(a1 + 32) setError:v8];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_10003F16C;
  v17[3] = &unk_10026D460;
  uint64_t v10 = *(void **)(a1 + 32);
  id v18 = *(id *)(a1 + 40);
  id v19 = *(id *)(a1 + 48);
  id v20 = v7;
  double v28 = a4;
  id v21 = v8;
  id v22 = v9;
  id v23 = *(id *)(a1 + 56);
  id v24 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = *(void **)(a1 + 80);
  id v25 = v11;
  uint64_t v26 = v12;
  id v27 = v13;
  uint64_t v14 = v9;
  id v15 = v8;
  id v16 = v7;
  [v10 performOnManagedObjectContext:v17];
  (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
}

void sub_10003F16C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v52 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 existingObjectWithID:v7 error:&v52]);
  id v9 = v52;
  uint64_t v10 = v9;
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v8 == 0LL;
  }
  if (v11)
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers(v9);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004CDFC();
    }
    uint64_t v13 = objc_claimAutoreleasedReturnValue( +[GKCachingUtils ensureGamesPlayedList:playerID:]( &OBJC_CLASS___GKCachingUtils,  "ensureGamesPlayedList:playerID:",  v5,  *(void *)(a1 + 40)));

    id v8 = (void *)v13;
  }

  if (*(void *)(a1 + 48) && !*(void *)(a1 + 56))
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[GKCachingUtils existingGamePlatforms:](&OBJC_CLASS___GKCachingUtils, "existingGamePlatforms:", v5));
    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 112)));
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:@"results"]);
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    id obj = v19;
    id v20 = [v19 countByEnumeratingWithState:&v48 objects:v53 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v42 = v18;
      id v43 = v10;
      uint64_t v46 = v16;
      id v44 = v8;
      __int128 v45 = v6;
      id v22 = 0LL;
      uint64_t v23 = *(void *)v49;
      do
      {
        for (i = 0LL; i != v21; i = (char *)i + 1)
        {
          id v25 = v22;
          if (*(void *)v49 != v23) {
            objc_enumerationMutation(obj);
          }
          uint64_t v26 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);
          id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:@"game"]);
          double v28 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:@"timestamp"]);
          id v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate _gkDateFromServerTimestamp:]( &OBJC_CLASS___NSDate,  "_gkDateFromServerTimestamp:",  v28));

          uint64_t v30 = objc_alloc(&OBJC_CLASS___GameSummary);
          __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(+[GameSummary entity](&OBJC_CLASS___GameSummary, "entity"));
          id v22 = -[GameSummary initWithEntity:insertIntoManagedObjectContext:]( v30,  "initWithEntity:insertIntoManagedObjectContext:",  v31,  v5);

          id v32 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:@"adam-id"]);
          -[GameSummary setAdamID:](v22, "setAdamID:", v32);

          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:@"bundle-id"]);
          -[GameSummary setBundleID:](v22, "setBundleID:", v33);

          uint64_t v34 = objc_claimAutoreleasedReturnValue(-[GameSummary bundleID](v22, "bundleID"));
          if (v34)
          {
            uint64_t v35 = (void *)v34;
            uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(-[GameSummary adamID](v22, "adamID"));

            if (v36)
            {
              -[GameSummary setPlayedAt:](v22, "setPlayedAt:", v29);
              id v37 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:@"is-arcade-game"]);
              -[GameSummary setIsArcade:](v22, "setIsArcade:", v37);

              id v38 = (void *)objc_claimAutoreleasedReturnValue( +[GKCachingUtils compatiblePlatforms:platformLookup:moc:]( &OBJC_CLASS___GKCachingUtils,  "compatiblePlatforms:platformLookup:moc:",  v27,  v46,  v5));
              -[GameSummary setCompatiblePlatforms:](v22, "setCompatiblePlatforms:", v38);

              [*(id *)(a1 + 64) addObject:v22];
            }
          }
        }

        id v21 = [obj countByEnumeratingWithState:&v48 objects:v53 count:16];
      }

      while (v21);

      id v8 = v44;
      id v6 = v45;
      id v16 = v46;
      id v18 = v42;
      uint64_t v10 = v43;
    }

    [v8 setExpirationDate:v18];
    if (*(void *)(a1 + 72)) {
      id v39 = *(_UNKNOWN ***)(a1 + 72);
    }
    else {
      id v39 = &off_1002878E0;
    }
    [v8 setWithinSecs:v39];
    if ([*(id *)(a1 + 64) count])
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSOrderedSet orderedSetWithArray:]( &OBJC_CLASS___NSOrderedSet,  "orderedSetWithArray:",  *(void *)(a1 + 64)));
      id v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) entries]);
      [v8 removeEntries:v40];

      [v8 addEntries:v17];
      [*(id *)(a1 + 88) setObject:v17 forKeyedSubscript:@"response"];
    }

    else
    {
      id v17 = 0LL;
    }

    goto LABEL_34;
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 entries]);
  id v15 = [v14 count];

  if (v15)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v8 entries]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSOrderedSet orderedSetWithOrderedSet:]( &OBJC_CLASS___NSOrderedSet,  "orderedSetWithOrderedSet:",  v16));
LABEL_34:

    goto LABEL_35;
  }

  id v17 = 0LL;
LABEL_35:
  id v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) internalGameSummariesFromResults:v17 limit:*(void *)(a1 + 104)]);
  [*(id *)(a1 + 88) setResult:v41];
  v6[2](v6);
}

void sub_10003F64C(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

uint64_t sub_10003F7FC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

void sub_10003F810(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v7 replyQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10003F8F4;
  block[3] = &unk_10026BEF0;
  id v9 = *(id *)(a1 + 40);
  id v14 = v6;
  id v15 = v9;
  id v13 = v5;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_10003F8F4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_10003FAC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ampController]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10003FBA0;
  void v7[3] = &unk_10026D4F0;
  id v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v5;
  id v11 = v3;
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v6 = v3;
  [v4 getBagWithCompletion:v7];
}

void sub_10003FBA0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 localPlayer]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 language]);
  id v16 = 0LL;
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKAppMetadataFetcher createFor:language:bag:error:]( &OBJC_CLASS___GKAppMetadataFetcher,  "createFor:language:bag:error:",  v6,  v8,  v4,  &v16));

  id v10 = v16;
  if (v10)
  {
    [*(id *)(a1 + 40) setError:v10];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10003FD84;
    void v13[3] = &unk_10026B058;
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 64);
    [v9 fetchWithBundleIDs:v12 adamIDs:v11 batchSize:100 ttl:&stru_10026D4C8 refreshExpiredCompletion:v13 completionHandler:900.0];
  }
}

void sub_10003FD18(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers(v2);
  }
  id v5 = (void *)os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_10004CE5C(v5, v3);
  }
}

uint64_t sub_10003FD84(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10003FDDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10003FFA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___GKAppMetadataCache);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localPlayer]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 language]);
  id v14 = 0LL;
  id v9 = -[GKAppMetadataCache initWithPlayerID:language:error:](v4, "initWithPlayerID:language:error:", v6, v8, &v14);
  id v10 = v14;

  if (v10)
  {
    [*(id *)(a1 + 40) setError:v10];
    v3[2](v3);
  }

  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    _DWORD v11[2] = sub_1000400F0;
    v11[3] = &unk_10026B2A0;
    id v12 = *(id *)(a1 + 40);
    id v13 = v3;
    -[GKAppMetadataCache deleteAllWithCompletionHandler:](v9, "deleteAllWithCompletionHandler:", v11);
  }
}

uint64_t sub_1000400F0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100040120(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100040690( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_1000406B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKTopGamesListCacheObject,  "firstObjectMatchingPredicate:context:",  0LL,  a2));
  if ([v5 isValid])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 internalRepresentation]);
    [*(id *)(a1 + 32) setResult:v6];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 seed]);
    [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"seed"];

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 expired] ^ 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) &= *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL)
                                                                           + 24LL);
  }

  v8[2]();
}

void sub_1000407B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"]);
  (*(void (**)(uint64_t, id, void *, void, void))(v2 + 16))( v2,  v4,  v3,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
}

void sub_1000409F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100040AC4;
  void v7[3] = &unk_10026C6B8;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v6 = v3;
  [v4 issueRequest:&off_100288458 bagKey:@"gk-get-top-game-list" clientProxy:v5 handler:v7];
}

void sub_100040AC4(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4));
    [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"ttl"];

    id v12 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_100040BA8;
    void v13[3] = &unk_10026D540;
    double v15 = a4;
    id v14 = v7;
    [v12 performOnManagedObjectContext:v13];
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  v8,  v9,  v10);
}

void sub_100040BA8(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = (GKTopGamesListCacheObject *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKTopGamesListCacheObject,  "firstObjectMatchingPredicate:context:",  0LL,  v8));
  if (!v6) {
    id v6 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKTopGamesListCacheObject),  "initWithManagedObjectContext:",  v8);
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 40)));
  -[GKTopGamesListCacheObject updateWithServerRepresentation:expirationDate:]( v6,  "updateWithServerRepresentation:expirationDate:",  *(void *)(a1 + 32),  v7);
  v5[2](v5);
}

void sub_100040C64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"ttl"]);
  [v6 doubleValue];
  double v4 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v5, v4);
}

void sub_100040E3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100040EF0;
  v9[3] = &unk_10026D5B8;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v6;
  uint64_t v11 = v7;
  id v12 = v3;
  id v8 = v3;
  [v4 fetchTopGamesInContext:v5 handler:v9];
}

uint64_t sub_100040EF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  if ((a4 & 1) == 0)
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameService.m",  1071LL,  "-[GKGameServicePrivate getTopGamesWithHandler:]_block_invoke_2"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 transactionGroupWithName:v9]);

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_100041054;
    void v19[3] = &unk_10026B170;
    void v19[4] = *(void *)(a1 + 40);
    id v11 = v10;
    id v20 = v11;
    [v11 perform:v19];
    if ((a5 & 1) == 0)
    {
      id v12 = *(void **)(a1 + 32);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      void v16[2] = sub_100041130;
      void v16[3] = &unk_10026B080;
      id v17 = v11;
      int8x16_t v15 = *(int8x16_t *)(a1 + 32);
      id v13 = (id)v15.i64[0];
      int8x16_t v18 = vextq_s8(v15, v15, 8uLL);
      [v12 perform:v16];
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100041054(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100041100;
  void v7[3] = &unk_10026D568;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v6 = v3;
  [v4 loadTopGamesWithContext:v5 handler:v7];
}

uint64_t sub_100041100(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100041130(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_100041210;
  v10[3] = &unk_10026B0F8;
  id v11 = a1[6];
  id v7 = a1[4];
  id v8 = a1[5];
  id v12 = v7;
  id v13 = v8;
  id v14 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v6 block:v10];
}

void sub_100041210(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v4 = *(void **)(a1 + 48);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_10004130C;
    v6[3] = &unk_10026D590;
    id v7 = *(id *)(a1 + 32);
    id v8 = *(id *)(a1 + 56);
    [v4 fetchTopGamesInContext:v5 handler:v6];
  }

uint64_t sub_10004130C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004133C(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] result]);
  [a1[4] setResult:0];
  if ([v2 count])
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    _OWORD v10[2] = sub_100041484;
    v10[3] = &unk_10026B080;
    id v3 = a1[4];
    void v10[4] = a1[5];
    id v11 = v2;
    id v12 = a1[4];
    [v3 perform:v10];
  }

  id v4 = a1[4];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100041578;
  void v7[3] = &unk_10026B030;
  id v9 = a1[6];
  id v8 = a1[4];
  [v4 notifyOnQueue:v6 block:v7];
}

void sub_100041484(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100041520;
  void v7[3] = &unk_10026C550;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getGameMetadataForBundleIDs:v5 handler:v7];
}

uint64_t sub_100041520(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100041578(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000417EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_100041810(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKOnDeviceMultiplayerGameListCacheObject,  "firstObjectMatchingPredicate:context:",  0LL,  a2));
  id v7 = v6;
  if (v6)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIDs]);
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    id v9 = *(id *)(a1 + 32);
    id v10 = [v9 countByEnumeratingWithState:&v22 objects:v28 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v23;
      while (2)
      {
        for (i = 0LL; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v23 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void *)(*((void *)&v22 + 1) + 8LL * (void)i);
          id v15 = objc_msgSend(v8, "containsObject:", v14, (void)v22);
          if ((v15 & 1) == 0)
          {
            if (!os_log_GKGeneral) {
              id v17 = (id)GKOSLoggers(v15);
            }
            int8x16_t v18 = (os_log_s *)os_log_GKMatch;
            char v16 = 1;
            if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v27 = v14;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "needForceUpdate = YES, since one/more bundleID is not existing in the cached list: %@",  buf,  0xCu);
            }

            goto LABEL_15;
          }
        }

        id v11 = [v9 countByEnumeratingWithState:&v22 objects:v28 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }

    char v16 = 0;
LABEL_15:

    unsigned int v19 = [v7 isValid];
    if ((v16 & 1) == 0 && v19)
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v7 multiplayerGames]);
      [*(id *)(a1 + 40) setResult:v20];

      id v21 = (void *)objc_claimAutoreleasedReturnValue([v7 seed]);
      [*(id *)(a1 + 40) setObject:v21 forKeyedSubscript:@"seed"];

      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v7 expired] ^ 1;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) &= *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL)
                                                                             + 24LL);
    }
  }

  v5[2](v5);
}

void sub_100041A80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"]);
  (*(void (**)(uint64_t, id, void *, void, void))(v2 + 16))( v2,  v4,  v3,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
}

void sub_100041CEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKApplicationWorkspace defaultWorkspace](&OBJC_CLASS___GKApplicationWorkspace, "defaultWorkspace"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 gameDescriptorsWithInstalledBundleVersionsForBundleIDs:*(void *)(a1 + 32)]);

  id v13 = @"games";
  uint64_t v14 = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL));
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_100041E4C;
  v10[3] = &unk_10026C6B8;
  id v11 = *(id *)(a1 + 48);
  id v12 = v3;
  id v9 = v3;
  [v7 issueRequest:v6 bagKey:@"gk-get-game-features" clientProxy:v8 handler:v10];
}

void sub_100041E4C(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4));
    [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"ttl"];

    id v12 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_100041F30;
    void v13[3] = &unk_10026D540;
    double v15 = a4;
    id v14 = v7;
    [v12 performOnManagedObjectContext:v13];
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  v8,  v9,  v10);
}

void sub_100041F30(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  uint64_t v5 = a3;
  id v6 = (GKOnDeviceMultiplayerGameListCacheObject *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKOnDeviceMultiplayerGameListCacheObject,  "firstObjectMatchingPredicate:context:",  0LL,  v8));
  if (!v6) {
    id v6 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKOnDeviceMultiplayerGameListCacheObject),  "initWithManagedObjectContext:",  v8);
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 40)));
  -[GKOnDeviceMultiplayerGameListCacheObject updateWithServerRepresentation:expirationDate:]( v6,  "updateWithServerRepresentation:expirationDate:",  *(void *)(a1 + 32),  v7);
  v5[2](v5);
}

void sub_100041FEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"ttl"]);
  [v6 doubleValue];
  double v4 = v3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v5, v4);
}

void sub_1000421E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_1000422B4;
  v10[3] = &unk_10026D608;
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = v7;
  uint64_t v12 = v8;
  id v13 = *(id *)(a1 + 48);
  id v14 = v3;
  id v9 = v3;
  [v4 fetchOnDeviceMultiplayerGamesInContext:v5 forBundleIDs:v6 handler:v10];
}

uint64_t sub_1000422B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  if ((a4 & 1) == 0)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameService.m",  1199LL,  "-[GKGameServicePrivate getOnDeviceMultiplayerGamesForBundleIDs:handler:]_block_invoke_2"));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 transactionGroupWithName:v9]);

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_100042444;
    v20[3] = &unk_10026B080;
    void v20[4] = *(void *)(a1 + 40);
    id v11 = v10;
    id v21 = v11;
    id v22 = *(id *)(a1 + 48);
    [v11 perform:v20];
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = *(void **)(a1 + 32);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      void v16[2] = sub_10004252C;
      void v16[3] = &unk_10026BEC8;
      id v17 = v11;
      int8x16_t v15 = *(int8x16_t *)(a1 + 32);
      id v13 = (id)v15.i64[0];
      int8x16_t v18 = vextq_s8(v15, v15, 8uLL);
      id v19 = *(id *)(a1 + 48);
      [v12 perform:v16];
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100042444(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000424FC;
  void v8[3] = &unk_10026D568;
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 loadOnDeviceMultiplayerGamesWithContext:v5 forBundleIDs:v6 handler:v8];
}

uint64_t sub_1000424FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004252C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_10004261C;
  v10[3] = &unk_10026B0A8;
  id v11 = a1[6];
  id v7 = a1[4];
  id v8 = a1[5];
  id v12 = v7;
  id v13 = v8;
  id v14 = a1[7];
  id v15 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v6 block:v10];
}

void sub_10004261C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    id v4 = *(void **)(a1 + 48);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v6 = *(void *)(a1 + 56);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_100042720;
    void v7[3] = &unk_10026D590;
    id v8 = *(id *)(a1 + 32);
    id v9 = *(id *)(a1 + 64);
    [v4 fetchOnDeviceMultiplayerGamesInContext:v5 forBundleIDs:v6 handler:v7];
  }

uint64_t sub_100042720(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100042750(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);
  }

void sub_1000428A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(-32768LL, 0LL);
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100042964;
  void v8[3] = &unk_10026B0F8;
  uint64_t v6 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v6;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v7 = v3;
  dispatch_async(v5, v8);
}

void sub_100042964(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  id v3 = v2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers(v2);
  }
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_10004CEE0();
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKApplicationWorkspace defaultWorkspace](&OBJC_CLASS___GKApplicationWorkspace, "defaultWorkspace"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 availableGameIdentifiers]);
  id v7 = [v6 count];
  if (v7)
  {
    id v11 = v7;
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](&OBJC_CLASS___NSMutableSet, "setWithCapacity:", v7));
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  v11));
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_100042B60;
    v27[3] = &unk_10026D630;
    id v28 = v5;
    id v14 = v12;
    id v29 = v14;
    id v15 = v13;
    id v30 = v15;
    [v6 enumerateObjectsUsingBlock:v27];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_100042BF4;
    v21[3] = &unk_10026D488;
    id v22 = v14;
    char v16 = *(void **)(a1 + 40);
    id v23 = *(id *)(a1 + 48);
    id v24 = v15;
    id v17 = *(id *)(a1 + 40);
    uint64_t v18 = *(void *)(a1 + 32);
    id v25 = v17;
    uint64_t v26 = v18;
    id v19 = v15;
    id v20 = v14;
    [v16 performOnManagedObjectContext:v21];
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v8,  v9,  v10);

  objc_autoreleasePoolPop(v3);
}

void sub_100042B60(id *a1, void *a2)
{
  id v6 = a2;
  id v3 = objc_autoreleasePoolPush();
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] applicationProxyForBundleID:v6]);
  [a1[5] addObject:v6];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 purchaseDate]);
  if (v5) {
    [a1[6] setObject:v5 forKeyedSubscript:v6];
  }

  objc_autoreleasePoolPop(v3);
}

void sub_100042BF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_autoreleasePoolPush();
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allObjects]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gamesForBundleIDs:context:]( &OBJC_CLASS___GKGameCacheObject,  "gamesForBundleIDs:context:",  v8,  v5));

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject profileForPlayer:context:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "profileForPlayer:context:",  *(void *)(a1 + 40),  v5));
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameRecordCacheObject recordsForGames:playerProfile:]( &OBJC_CLASS___GKGameRecordCacheObject,  "recordsForGames:playerProfile:",  v9,  v10));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_100042DF4;
  v20[3] = &unk_10026D658;
  id v21 = *(id *)(a1 + 48);
  id v12 = v5;
  id v22 = v12;
  [v11 enumerateObjectsUsingBlock:v20];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_100042E80;
  v17[3] = &unk_10026B080;
  id v13 = *(void **)(a1 + 56);
  void v17[4] = *(void *)(a1 + 64);
  id v18 = *(id *)(a1 + 32);
  id v14 = v12;
  id v19 = v14;
  [v13 perform:v17];
  uint64_t v15 = objc_claimAutoreleasedReturnValue([v10 gameList]);
  char v16 = (GKGameListCacheObject *)v15;
  if (v10 && !v15)
  {
    char v16 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKGameListCacheObject),  "initWithManagedObjectContext:",  v14);
    -[GKGameListCacheObject setPlayer:](v16, "setPlayer:", v10);
  }

  -[GKListCacheObject updateSeed](v16, "updateSeed");
  [v14 refreshObject:v16 mergeChanges:1];
  v6[2](v6);

  objc_autoreleasePoolPop(v7);
}

void sub_100042DF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 game]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 bundleID]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v6]);
  [v3 setPurchaseDate:v5];

  [*(id *)(a1 + 40) refreshObject:v3 mergeChanges:1];
}

void sub_100042E80(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allObjects]);
  uint64_t v6 = *(void *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100042F24;
  void v8[3] = &unk_10026D680;
  id v9 = v3;
  id v7 = v3;
  [v4 loadGameMetadataForBundleIDs:v5 context:v6 handler:v8];
}

uint64_t sub_100042F24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100043168(_Unwind_Exception *a1)
{
}

void sub_10004318C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerID]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject fetchRequestForContext:]( &OBJC_CLASS___GKGameListCacheObject,  "fetchRequestForContext:",  v5));
  [v8 setFetchLimit:1];
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"expirationDate != nil && player.playerID = %@",  v7));
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"expirationDate > %@ && player.playerID = %@",  v10,  v7));
  }

  [v8 setPredicate:v9];
  id v30 = 0LL;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v8 error:&v30]);
  id v12 = v30;
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);

  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v13 != 0LL;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v13 != 0LL;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) && *(_DWORD *)(a1 + 72))
  {
    id v24 = v7;
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 seed]);
    [*(id *)(a1 + 40) setObject:v14 forKeyedSubscript:@"seed"];

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 entries]);
    char v16 = (void *)objc_claimAutoreleasedReturnValue([v15 _gkValuesForKeyPath:@"bundleID"]);

    if (*(_BYTE *)(a1 + 76))
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v16));
      id v23 = v12;
      id v18 = (void *)objc_claimAutoreleasedReturnValue( +[GKApplicationWorkspace defaultWorkspace]( &OBJC_CLASS___GKApplicationWorkspace,  "defaultWorkspace"));
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 availableGameIdentifiers]);
      [v17 addObjectsFromArray:v19];

      id v12 = v23;
      uint64_t v20 = objc_claimAutoreleasedReturnValue([v17 allObjects]);

      char v16 = (void *)v20;
    }

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_100043484;
    v25[3] = &unk_10026BB28;
    id v21 = *(void **)(a1 + 40);
    void v25[4] = *(void *)(a1 + 48);
    id v26 = *(id *)(a1 + 32);
    id v27 = v16;
    id v28 = v5;
    id v29 = *(id *)(a1 + 40);
    id v22 = v16;
    [v21 perform:v25];

    id v7 = v24;
  }

  v6[2](v6);
}

void sub_100043484(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100043538;
  v9[3] = &unk_10026D590;
  id v10 = *(id *)(a1 + 64);
  id v11 = v3;
  id v8 = v3;
  [v4 fetchGameStatsForPlayer:v5 bundleIdentifiers:v6 responseKind:2 context:v7 handler:v9];
}

void sub_100043538(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:comparator:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:comparator:",  @"self",  0LL,  &stru_10026D6C0));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v6));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 sortedArrayUsingDescriptors:v4]);

  [*(id *)(a1 + 32) setResult:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

int64_t sub_1000435EC(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = v4;
  id v7 = v5;
  id v8 = [v6 platform];
  if ((v8 == (id)1) == ([v7 platform] != (id)1))
  {
    if (v8 == (id)1) {
      int64_t v11 = -1LL;
    }
    else {
      int64_t v11 = 1LL;
    }
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 lastPlayedDate]);
    if (v9) {
      uint64_t v10 = objc_claimAutoreleasedReturnValue([v6 lastPlayedDate]);
    }
    else {
      uint64_t v10 = objc_claimAutoreleasedReturnValue([v6 purchaseDate]);
    }
    id v12 = (void *)v10;

    id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 lastPlayedDate]);
    if (v13) {
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v7 lastPlayedDate]);
    }
    else {
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v7 purchaseDate]);
    }
    uint64_t v15 = (void *)v14;

    int64_t v11 = (int64_t)[v12 compare:v15];
  }

  return v11;
}

void sub_100043710(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"]);
  (*(void (**)(uint64_t, id, void *, void, void))(v2 + 16))( v2,  v4,  v3,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
}

void sub_100043974(_Unwind_Exception *a1)
{
}

void sub_10004398C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  unsigned __int8 v8 = [v6 isLocalPlayer];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerID]);
  if (v9)
  {
    uint64_t v10 = *(void **)(a1 + 40);
    int64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 replyQueue]);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_100043BC4;
    v21[3] = &unk_10026D818;
    unsigned __int8 v27 = v8;
    id v22 = v9;
    int8x16_t v20 = *(int8x16_t *)(a1 + 40);
    id v13 = (id)v20.i64[0];
    int8x16_t v23 = vextq_s8(v20, v20, 8uLL);
    uint64_t v26 = *(void *)(a1 + 56);
    id v24 = v5;
    id v25 = *(id *)(a1 + 32);
    [v10 performOnQueue:v12 block:v21];

    uint64_t v14 = v22;
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers(0LL);
    }
    char v16 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v17 = *(void **)(a1 + 48);
      id v18 = v16;
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 clientProxy]);
      *(_DWORD *)buf = 138412290;
      id v29 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Cannot load games with no playerID and no localPlayer for %@",  buf,  0xCu);
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  17LL,  0LL));
    [*(id *)(a1 + 40) setError:v14];
  }

  v7[2](v7);
}

void sub_100043BC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(_BYTE *)(a1 + 80))
  {
    id v4 = 0LL;
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v22 = @"requested-player-id";
    uint64_t v23 = v5;
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v23,  &v22,  1LL));
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100043D5C;
  void v13[3] = &unk_10026D7F0;
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 72);
  id v14 = v8;
  uint64_t v20 = v9;
  id v15 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  id v16 = v10;
  uint64_t v17 = v11;
  char v21 = *(_BYTE *)(a1 + 80);
  id v18 = *(id *)(a1 + 64);
  id v19 = v3;
  id v12 = v3;
  [v6 issueRequest:v4 bagKey:@"gk-get-games-played-descriptor" clientProxy:v7 handler:v13];
}

void sub_100043D5C(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v11 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v11 && !a3)
  {
    *(double *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = a4;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100043E74;
    v12[3] = &unk_10026D7C8;
    double v19 = a4;
    id v7 = *(void **)(a1 + 40);
    id v13 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 40);
    id v15 = v11;
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 56);
    id v10 = *(void **)(a1 + 64);
    id v16 = v8;
    uint64_t v17 = v9;
    char v20 = *(_BYTE *)(a1 + 88);
    id v18 = v10;
    [v7 performBlockAndWait:v12];
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_100043E74(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 80)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 gameList]);
  uint64_t v5 = (GKGameListCacheObject *)v4;
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v5 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKGameListCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 40));
    -[GKGameListCacheObject setPlayer:](v5, "setPlayer:", v3);
  }

  -[GKGameListCacheObject updateWithServerRepresentation:expirationDate:]( v5,  "updateWithServerRepresentation:expirationDate:",  *(void *)(a1 + 48),  v2);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameListCacheObject seed](v5, "seed"));
  [*(id *)(a1 + 56) setObject:v7 forKeyedSubscript:@"seed"];

  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameListCacheObject entries](v5, "entries"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 array]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 _gkMapWithBlock:&stru_10026D728]);

  if ([v10 count])
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100044050;
    v12[3] = &unk_10026D7A0;
    id v11 = *(void **)(a1 + 56);
    void v12[4] = *(void *)(a1 + 64);
    id v13 = v10;
    id v14 = *(id *)(a1 + 40);
    id v15 = v5;
    id v16 = *(id *)(a1 + 56);
    char v18 = *(_BYTE *)(a1 + 88);
    id v17 = *(id *)(a1 + 72);
    [v11 perform:v12];
  }
}

id sub_100044048(id a1, GKGameListEntryCacheObject *a2, unint64_t a3)
{
  return -[GKGameListEntryCacheObject bundleID](a2, "bundleID", a3);
}

void sub_100044050(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000441A4;
  void v8[3] = &unk_10026D778;
  objc_copyWeak(&v15, &location);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  char v16 = *(_BYTE *)(a1 + 80);
  id v12 = *(id *)(a1 + 72);
  id v13 = *(id *)(a1 + 40);
  id v7 = v3;
  id v14 = v7;
  [v4 loadGameMetadataForBundleIDs:v5 context:v6 handler:v8];

  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);
}

void sub_100044188(_Unwind_Exception *a1)
{
}

void sub_1000441A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_1000442A4;
  v10[3] = &unk_10026B670;
  id v3 = *(void **)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  [v3 performBlockAndWait:v10];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000442B0;
  v5[3] = &unk_10026D750;
  char v9 = *(_BYTE *)(a1 + 88);
  void v5[4] = WeakRetained;
  uint64_t v4 = *(void **)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  [v4 perform:v5];
}

id sub_1000442A4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setDetailsLoaded:1];
}

void sub_1000442B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(_BYTE *)(a1 + 64))
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    _DWORD v11[2] = sub_100044380;
    v11[3] = &unk_10026C550;
    id v12 = v5;
    id v13 = v4;
    [v6 getGameStatsForPlayer:v12 bundleIDs:v7 handler:v11];
  }

  else
  {
    (*((void (**)(id))v3 + 2))(v3);
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v8,  v9,  v10);
}

void sub_100044380(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers(v6, v7);
    }
    uint64_t v10 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412546;
      uint64_t v13 = v11;
      __int16 v14 = 2112;
      id v15 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Error getting the stats for player:%@ error:%@",  (uint8_t *)&v12,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100044480(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  double v3 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *, double))(v2 + 16))(v2, v5, v4, v3);
}

void sub_100044754(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](&OBJC_CLASS___GKPlayerProfileCacheObject, "selfPlayerID"));
  [*(id *)(a1 + 32) setPlayerID:v2];
}

void sub_10004479C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100044908;
  v12[3] = &unk_10026D908;
  objc_copyWeak(&v18, &location);
  id v13 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  char v19 = *(_BYTE *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  id v14 = v9;
  uint64_t v15 = v10;
  id v16 = *(id *)(a1 + 56);
  id v11 = v3;
  id v17 = v11;
  [v4 fetchGamesForPlayer:v5 includeInstalled:v6 != 0 responseKind:v7 != 0 context:v8 handler:v12];

  objc_destroyWeak(&v18);
  objc_destroyWeak(&location);
}

void sub_1000448E4(_Unwind_Exception *a1)
{
}

void sub_100044908(uint64_t a1, void *a2, void *a3, char a4, char a5)
{
  id v9 = a2;
  id v10 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  int v12 = WeakRetained;
  if ((a4 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers(WeakRetained);
    }
    id v14 = (void *)os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_10004CF48(a1, v14);
    }
    uint64_t v15 = *(void **)(a1 + 40);
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameService.m",  1495LL,  "-[GKGameServicePrivate getGamesForPlayer:includeInstalled:handler:]_block_invoke"));
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 transactionGroupWithName:v16]);

    v38[0] = 0LL;
    v38[1] = v38;
    void v38[2] = 0x2020000000LL;
    char v39 = 0;
    if (*(_BYTE *)(a1 + 80)) {
      [v12 scanInstalledGamesForPlayer:*(void *)(a1 + 32) transaction:v17];
    }
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_100044C18;
    v34[3] = &unk_10026D890;
    void v34[4] = v12;
    id v35 = *(id *)(a1 + 32);
    id v18 = v17;
    id v36 = v18;
    id v37 = v38;
    [v18 perform:v34];
    if ((a5 & 1) != 0)
    {
      char v19 = (void *)objc_claimAutoreleasedReturnValue([v12 clientProxy]);
      char v20 = (void *)objc_claimAutoreleasedReturnValue([v19 replyQueue]);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      v25[2] = sub_100045008;
      v25[3] = &unk_10026D8E0;
      v26[2] = v38;
      v26[0] = v18;
      v26[1] = v12;
      [v26[0] notifyOnQueue:v20 block:v25];
      char v21 = v26;
    }

    else
    {
      id v22 = *(void **)(a1 + 40);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_100044D70;
      v27[3] = &unk_10026C528;
      id v28 = v18;
      int8x16_t v24 = *(int8x16_t *)(a1 + 40);
      id v23 = (id)v24.i64[0];
      int8x16_t v29 = vextq_s8(v24, v24, 8uLL);
      id v30 = v12;
      id v31 = *(id *)(a1 + 32);
      char v33 = *(_BYTE *)(a1 + 80);
      id v32 = *(id *)(a1 + 56);
      [v22 perform:v27];
      char v21 = &v28;

      char v19 = (void *)v29.i64[1];
    }

    _Block_object_dispose(v38, 8);
  }

  [*(id *)(a1 + 40) setObject:v9 forKeyedSubscript:@"games"];
  [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:@"seed"];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100044C00(_Unwind_Exception *a1)
{
}

void sub_100044C18(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_100044CDC;
  v10[3] = &unk_10026D868;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v12 = v3;
  uint64_t v13 = v8;
  id v11 = v7;
  id v9 = v3;
  [v4 loadGamesForPlayer:v5 context:v6 handler:v10];
}

void sub_100044CDC(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  id v7 = *(void **)(a1 + 32);
  id v10 = a3;
  [v7 setObject:a2 forKeyedSubscript:@"seed"];
  [*(id *)(a1 + 32) setError:v10];
  BOOL v9 = a4 > 0.0 && v10 == 0LL;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v9;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100044D70(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_100044E78;
  v11[3] = &unk_10026D8B8;
  id v12 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 56);
  BOOL v9 = *(void **)(a1 + 64);
  id v13 = v7;
  uint64_t v14 = v8;
  id v15 = v9;
  char v18 = *(_BYTE *)(a1 + 80);
  id v16 = *(id *)(a1 + 72);
  id v17 = v3;
  id v10 = v3;
  [v4 notifyOnQueue:v6 block:v11];
}

void sub_100044E78(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    uint64_t v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 80);
    uint64_t v7 = 2 * (*(void *)(a1 + 64) != 0LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100044FA0;
    v9[3] = &unk_10026D590;
    id v10 = *(id *)(a1 + 32);
    id v11 = *(id *)(a1 + 72);
    [v4 fetchGamesForPlayer:v5 includeInstalled:v6 responseKind:v7 context:v8 handler:v9];
  }

uint64_t sub_100044FA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"games"];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"seed"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100045008(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"]);
    id v3 = (void *)v2;
    if (v2)
    {
      uint64_t v6 = GKRefreshSeedKey;
      uint64_t v7 = v2;
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
    }

    else
    {
      uint64_t v4 = 0LL;
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    [v5 refreshContentsForDataType:5 userInfo:v4];
  }

void sub_1000450EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"games"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v5, v3, v4);
}

void sub_1000453D4(_Unwind_Exception *a1)
{
}

void sub_1000453F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject fetchRequestForContext:]( &OBJC_CLASS___GKGameRecordCacheObject,  "fetchRequestForContext:",  v5));
  [v8 setFetchLimit:*(void *)(a1 + 72)];
  int v9 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerID]);
  id v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 40);
  if (v9)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"player.playerID = %@ && game.bundleID in %@",  v10,  v12));
    [v8 setPredicate:v13];
  }

  else
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"expirationDate > %@ && player.playerID = %@ && game.bundleID in %@",  v7,  v10,  v12));
    [v8 setPredicate:v14];

    BOOL v15 = [v5 countForFetchRequest:v8 error:0] == *(id *)(a1 + 72);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v15;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v15;
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerID]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"expirationDate != nil && player.playerID = %@ && game.bundleID in %@",  v16,  *(void *)(a1 + 40)));
      [v8 setPredicate:v17];

      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v5 countForFetchRequest:v8 error:0] == *(id *)(a1 + 72);
    }
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) && *(_DWORD *)(a1 + 80))
  {
    char v18 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v8 error:0]);
    char v19 = (void *)objc_claimAutoreleasedReturnValue([v18 _gkMapDictionaryWithKeyPath:@"game.bundleID"]);
    char v20 = *(void **)(a1 + 40);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    void v23[2] = sub_100045694;
    v23[3] = &unk_10026D958;
    id v24 = v19;
    id v21 = v19;
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v20 _gkFilterWithBlock:v23]);
    [*(id *)(a1 + 48) setResult:v22];
  }

  v6[2](v6);
}

id sub_100045694(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:a2]);
  if (v2) {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameRecordInternal internalRepresentationForCacheObject:]( &OBJC_CLASS___GKGameRecordInternal,  "internalRepresentationForCacheObject:",  v2));
  }
  else {
    id v3 = 0LL;
  }

  return v3;
}

void sub_1000456EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  (*(void (**)(uint64_t, id, void, void, void))(v2 + 16))( v2,  v3,  0LL,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
}

void sub_10004592C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = -[NSMutableSet initWithArray:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithArray:", *(void *)(a1 + 32));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject profileForPlayer:context:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "profileForPlayer:context:",  *(void *)(a1 + 40),  v6));
  int v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gamesForBundleIDs:context:]( &OBJC_CLASS___GKGameCacheObject,  "gamesForBundleIDs:context:",  *(void *)(a1 + 32),  v6));

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameRecordCacheObject recordsForGames:playerProfile:]( &OBJC_CLASS___GKGameRecordCacheObject,  "recordsForGames:playerProfile:",  v9,  v8));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerID]);
  unsigned int v12 = +[GKPlayerProfileCacheObject familiarityForPlayerID:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "familiarityForPlayerID:",  v11);

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  void v23[2] = sub_100045B28;
  v23[3] = &unk_10026D9A8;
  id v13 = v7;
  id v24 = v13;
  [v10 enumerateObjectsUsingBlock:v23];
  if (-[NSMutableSet count](v13, "count"))
  {
    uint64_t v14 = *(void **)(a1 + 48);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_100045BA8;
    v17[3] = &unk_10026DA38;
    char v18 = v13;
    unsigned int v22 = v12;
    id v19 = *(id *)(a1 + 40);
    int8x16_t v16 = *(int8x16_t *)(a1 + 48);
    id v15 = (id)v16.i64[0];
    int8x16_t v20 = vextq_s8(v16, v16, 8uLL);
    id v21 = v8;
    [v14 perform:v17];
  }

  v5[2](v5);
}

void sub_100045B28(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ([v6 valid] && (objc_msgSend(v6, "expired") & 1) == 0)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 game]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleID]);
    [v3 removeObject:v5];
  }
}

void sub_100045BA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allObjects]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 _gkMapWithBlock:&stru_10026D9E8]);
  if (*(_DWORD *)(a1 + 72) == 1
    || (id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerID]), v6, !v6))
  {
    int8x16_t v20 = @"games-played";
    id v21 = v5;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
  }

  else
  {
    v18[0] = @"games-played";
    v18[1] = @"requested-player-id";
    v19[0] = v5;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerID]);
    v19[1] = v7;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v19,  v18,  2LL));
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100045E3C;
  void v13[3] = &unk_10026D220;
  id v14 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  id v16 = v4;
  id v17 = v3;
  id v11 = v3;
  id v12 = v4;
  [v9 issueRequest:v8 bagKey:@"gk-get-games-played" clientProxy:v10 handler:v13];
}

id sub_100045DB0(id a1, NSString *a2, unint64_t a3)
{
  id v6 = @"bundle-id";
  uint64_t v7 = a2;
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));

  return v4;
}

void sub_100045E3C(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4));
    [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"ttl"];

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_100045F48;
    void v13[3] = &unk_10026C690;
    id v12 = *(void **)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    double v17 = a4;
    id v15 = *(id *)(a1 + 48);
    id v16 = v7;
    [v12 performOnManagedObjectContext:v13];
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v8,  v9,  v10);
}

void sub_100045F48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = a3;
  [v5 refreshObject:v6 mergeChanges:1];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 56)));
  id v14 = (id)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gamesForBundleIDs:context:]( &OBJC_CLASS___GKGameCacheObject,  "gamesForBundleIDs:context:",  *(void *)(a1 + 40),  v5));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameRecordCacheObject recordsForGames:playerProfile:]( &OBJC_CLASS___GKGameRecordCacheObject,  "recordsForGames:playerProfile:",  v14,  *(void *)(a1 + 32)));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:@"results"]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1000460D8;
  v15[3] = &unk_10026DA10;
  id v16 = (id)objc_claimAutoreleasedReturnValue([v9 _gkMapDictionaryWithKeyPath:@"game.bundleID"]);
  id v17 = v8;
  id v18 = v5;
  id v19 = *(id *)(a1 + 40);
  id v11 = v5;
  id v12 = v8;
  id v13 = v16;
  [v10 enumerateObjectsUsingBlock:v15];
  v7[2](v7);
}

void sub_1000460D8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"status"]);
  id v7 = [v6 integerValue];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"game-metadata"]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"bundle-id"]);
  if (v9)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v9]);
    id v11 = v10;
    if (v10)
    {
      if (v7)
      {
        if (!os_log_GKGeneral) {
          id v12 = (id)GKOSLoggers(v10);
        }
        id v13 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          id v14 = *(void **)(a1 + 56);
          id v15 = v13;
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 objectAtIndexedSubscript:a3]);
          v17[0] = 67109378;
          v17[1] = (_DWORD)v7;
          __int16 v18 = 2112;
          id v19 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Unrecognized game(%d) %@",  (uint8_t *)v17,  0x12u);
        }

        [v11 setExpirationDate:*(void *)(a1 + 40)];
      }

      else
      {
        [v10 updateWithServerRepresentation:v5 expirationDate:*(void *)(a1 + 40)];
        [v11 setValid:1];
        [*(id *)(a1 + 48) refreshObject:v11 mergeChanges:1];
      }
    }
  }
}

void sub_1000462AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"ttl"]);
  [v6 doubleValue];
  double v4 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v5, v4);
}

void sub_100046510(uint64_t a1, void *a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000465E0;
  v9[3] = &unk_10026DAD8;
  double v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = v7;
  id v14 = *(id *)(a1 + 64);
  id v13 = *(id *)(a1 + 32);
  uint64_t v8 = a2;
  [v4 performOnManagedObjectContext:v9];
  v8[2](v8);
}

void sub_1000465E0(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKLocalPlayerInternal internalRepresentation]( &OBJC_CLASS___GKLocalPlayerInternal,  "internalRepresentation"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](&OBJC_CLASS___GKPlayerProfileCacheObject, "selfPlayerID"));
  [v7 setPlayerID:v8];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1[4] playerID]);
  id v10 = v7;
  if (v9) {
    id v10 = a1[4];
  }
  id v11 = v10;

  objc_initWeak(&location, a1[5]);
  id v12 = a1[5];
  id v13 = a1[6];
  BOOL v14 = a1[8] != 0LL;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  void v19[2] = sub_1000467B4;
  void v19[3] = &unk_10026DAB0;
  objc_copyWeak(&v26, &location);
  id v20 = a1[7];
  id v15 = v11;
  id v21 = v15;
  id v16 = a1[6];
  id v17 = a1[5];
  id v22 = v16;
  id v23 = v17;
  id v24 = a1[8];
  id v18 = v6;
  id v25 = v18;
  [v12 fetchGameStatsForPlayer:v15 bundleIdentifiers:v13 responseKind:v14 context:v5 handler:v19];

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
}

void sub_100046798( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_1000467B4(uint64_t a1, void *a2, uint64_t a3, char a4, char a5)
{
  uint64_t v8 = (id *)(a1 + 80);
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v8);
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"records"];

  if ((a4 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers(v11);
    }
    id v13 = (void *)os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_10004CFF4(a1, v13);
    }
    BOOL v14 = *(void **)(a1 + 32);
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameService.m",  1728LL,  "-[GKGameServicePrivate getGameStatsForPlayer:bundleIDs:handler:]_block_invoke"));
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 transactionGroupWithName:v15]);

    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_100046A34;
    v34[3] = &unk_10026B080;
    void v34[4] = WeakRetained;
    id v35 = *(id *)(a1 + 48);
    id v17 = v16;
    id v36 = v17;
    [v17 perform:v34];
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_100046AE4;
    v30[3] = &unk_10026BEC8;
    void v30[4] = WeakRetained;
    id v31 = *(id *)(a1 + 40);
    id v32 = *(id *)(a1 + 48);
    id v18 = v17;
    id v33 = v18;
    [v18 perform:v30];
    if ((a5 & 1) == 0)
    {
      id v19 = *(void **)(a1 + 32);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      void v22[2] = sub_100046BD4;
      v22[3] = &unk_10026DA88;
      id v20 = v18;
      uint64_t v21 = *(void *)(a1 + 56);
      id v23 = v20;
      uint64_t v24 = v21;
      id v25 = *(id *)(a1 + 32);
      id v26 = WeakRetained;
      id v27 = *(id *)(a1 + 40);
      id v28 = *(id *)(a1 + 48);
      id v29 = *(id *)(a1 + 64);
      [v19 perform:v22];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_100046A34(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100046AD8;
  void v8[3] = &unk_10026D680;
  id v9 = v3;
  id v7 = v3;
  [v4 loadGameMetadataForBundleIDs:v5 context:v6 handler:v8];
}

uint64_t sub_100046AD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100046AE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) context]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100046BA4;
  v9[3] = &unk_10026D568;
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v8 = v3;
  [v4 loadGameStatsForPlayer:v5 bundleIdentifiers:v6 context:v7 handler:v9];
}

uint64_t sub_100046BA4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100046BD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_100046CE8;
  v11[3] = &unk_10026DA60;
  id v12 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 56);
  id v9 = *(void **)(a1 + 64);
  id v13 = v7;
  uint64_t v14 = v8;
  id v15 = v9;
  id v16 = *(id *)(a1 + 72);
  id v17 = *(id *)(a1 + 80);
  id v18 = v3;
  id v10 = v3;
  [v4 notifyOnQueue:v6 block:v11];
}

void sub_100046CE8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    double v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = 2 * (*(void *)(a1 + 72) != 0LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100046E0C;
    v9[3] = &unk_10026D590;
    id v10 = *(id *)(a1 + 32);
    id v11 = *(id *)(a1 + 80);
    [v4 fetchGameStatsForPlayer:v5 bundleIdentifiers:v6 responseKind:v7 context:v8 handler:v9];
  }

uint64_t sub_100046E0C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100046E44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"records"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100047130( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_100047154(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = [*(id *)(a1 + 32) count];
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    goto LABEL_19;
  }
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject fetchRequestForContext:]( &OBJC_CLASS___GKGameCacheObject,  "fetchRequestForContext:",  v5));
  [v9 setFetchLimit:v7];
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"expirationDate > %@ && bundleID in %@",  v8,  *(void *)(a1 + 32)));
  [v9 setPredicate:v10];

  BOOL v11 = [v5 countForFetchRequest:v9 error:0] == v7;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v11;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v11;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"expirationDate != nil && bundleID in %@",  *(void *)(a1 + 32)));
    [v9 setPredicate:v12];

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 countForFetchRequest:v9 error:0] == v7;
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
LABEL_19:
    if (*(_DWORD *)(a1 + 64))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gamesForBundleIDs:context:]( &OBJC_CLASS___GKGameCacheObject,  "gamesForBundleIDs:context:",  *(void *)(a1 + 32),  v5));
      id v14 = [v13 count];
      if (v14 != v7)
      {
        if (!os_log_GKGeneral) {
          id v15 = (id)GKOSLoggers(v14);
        }
        BOOL v16 = os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG);
        if (v16) {
          sub_10004D0F8();
        }
        id v17 = (os_log_s *)os_log_GKGeneral;
        if (!os_log_GKGeneral)
        {
          id v18 = (id)GKOSLoggers(v16);
          id v17 = (os_log_s *)os_log_GKGeneral;
        }

        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
          sub_10004D0C4(v17, v19, v20, v21, v22, v23, v24, v25);
        }
      }

      id v26 = (void *)objc_claimAutoreleasedReturnValue([v13 _gkMapDictionaryWithKeyPath:@"bundleID"]);
      id v27 = *(void **)(a1 + 32);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = sub_100047424;
      v30[3] = &unk_10026D958;
      id v31 = v26;
      id v28 = v26;
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v27 _gkFilterWithBlock:v30]);
      [*(id *)(a1 + 40) setResult:v29];
    }
  }

  v6[2](v6);
}

id sub_100047424(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:a2]);
  if (v2) {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameInternal internalRepresentationForCacheObject:]( &OBJC_CLASS___GKGameInternal,  "internalRepresentationForCacheObject:",  v2));
  }
  else {
    id v3 = 0LL;
  }

  return v3;
}

void sub_10004747C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  (*(void (**)(uint64_t, id, void, void))(v2 + 16))( v2,  v3,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
}

void sub_100047718(_Unwind_Exception *a1)
{
}

void sub_100047730(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject fetchRequestForContext:]( &OBJC_CLASS___GKGameCacheObject,  "fetchRequestForContext:",  v5));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"bundleID in %@",  *(void *)(a1 + 32)));
  [v7 setPredicate:v8];

  uint64_t v29 = v5;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v7 error:0]);
  id v10 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v11 = v9;
  id v12 = [v11 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v35;
    do
    {
      for (i = 0LL; i != v13; i = (char *)i + 1)
      {
        if (*(void *)v35 != v14) {
          objc_enumerationMutation(v11);
        }
        BOOL v16 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
        if (([v16 expired] & 1) == 0)
        {
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 bundleID]);

          if (v17)
          {
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 bundleID]);
            -[NSMutableSet addObject:](v10, "addObject:", v18);
          }
        }
      }

      id v13 = [v11 countByEnumeratingWithState:&v34 objects:v38 count:16];
    }

    while (v13);
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", *(void *)(a1 + 32)));
  [v19 minusSet:v10];
  if ([v19 count])
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKApplicationWorkspace defaultWorkspace](&OBJC_CLASS___GKApplicationWorkspace, "defaultWorkspace"));
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v19 allObjects]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v20 gameDescriptorsWithInstalledBundleVersionsForBundleIDs:v21]);

    uint64_t v23 = *(void **)(a1 + 40);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 replyQueue]);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_100047A2C;
    v30[3] = &unk_10026D890;
    id v31 = v22;
    int8x16_t v28 = *(int8x16_t *)(a1 + 40);
    id v26 = (id)v28.i64[0];
    int8x16_t v32 = vextq_s8(v28, v28, 8uLL);
    uint64_t v33 = *(void *)(a1 + 56);
    id v27 = v22;
    [v23 performOnQueue:v25 block:v30];
  }

  v6[2](v6);
}

void sub_100047A2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v15 = @"game";
  uint64_t v16 = *(void *)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_100047B84;
  v10[3] = &unk_10026DBA0;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v11 = v7;
  uint64_t v14 = v8;
  id v12 = *(id *)(a1 + 32);
  id v13 = v3;
  id v9 = v3;
  [v5 issueRequest:v4 bagKey:@"gk-get-game-metadata" clientProxy:v6 handler:v10];
}

void sub_100047B84(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a4;
    uint64_t v8 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100047C5C;
    v9[3] = &unk_10026DB78;
    double v12 = a4;
    id v10 = v7;
    id v11 = *(id *)(a1 + 40);
    [v8 performOnManagedObjectContext:v9];
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100047C5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  double v6 = *(double *)(a1 + 48);
  id v7 = a3;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", v6));
  id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"game-metadata"]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gamesForGameDescriptors:context:]( &OBJC_CLASS___GKGameCacheObject,  "gamesForGameDescriptors:context:",  *(void *)(a1 + 40),  v5));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_100047D88;
  void v14[3] = &unk_10026DB50;
  id v15 = v9;
  id v16 = v8;
  id v17 = v5;
  id v10 = v5;
  id v11 = v8;
  id v12 = v9;
  [v13 enumerateObjectsUsingBlock:v14];
  v7[2](v7);
}

void sub_100047D88(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v5 objectAtIndexedSubscript:a3]);
  [v7 updateWithServerRepresentation:v6 expirationDate:*(void *)(a1 + 40)];

  [*(id *)(a1 + 48) refreshObject:v7 mergeChanges:1];
}

void sub_100047DFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

void sub_100048020(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  BOOL v6 = *(void *)(a1 + 64) != 0LL;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_10004812C;
  v11[3] = &unk_10026DC40;
  id v12 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v13 = v8;
  uint64_t v14 = v9;
  id v15 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  id v17 = v3;
  id v10 = v3;
  [v4 fetchGameMetadataForBundleIDs:v5 responseKind:v6 context:v7 handler:v11];
}

uint64_t sub_10004812C(uint64_t a1, uint64_t a2, char a3, char a4)
{
  id v7 = [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:@"games"];
  if ((a3 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v7);
    }
    uint64_t v9 = (os_log_s *)os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_10004D160(a1, v9, v10);
    }
    id v11 = *(void **)(a1 + 32);
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameService.m",  1910LL,  "-[GKGameServicePrivate getGameMetadataForBundleIDs:handler:]_block_invoke"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 transactionGroupWithName:v12]);

    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_100048340;
    v27[3] = &unk_10026B080;
    int8x16_t v19 = *(int8x16_t *)(a1 + 40);
    id v14 = (id)v19.i64[0];
    int8x16_t v28 = vextq_s8(v19, v19, 8uLL);
    id v15 = v13;
    id v29 = v15;
    [v15 perform:v27];
    if ((a4 & 1) == 0)
    {
      id v16 = *(void **)(a1 + 32);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      void v21[2] = sub_10004842C;
      v21[3] = &unk_10026DC18;
      id v22 = v15;
      id v23 = *(id *)(a1 + 56);
      id v24 = *(id *)(a1 + 32);
      int8x16_t v20 = *(int8x16_t *)(a1 + 40);
      id v17 = (id)v20.i64[0];
      int8x16_t v25 = vextq_s8(v20, v20, 8uLL);
      id v26 = *(id *)(a1 + 64);
      [v16 perform:v21];
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_100048340(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000483FC;
  void v8[3] = &unk_10026D568;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 loadGameMetadataForBundleIDs:v5 context:v6 handler:v8];
}

uint64_t sub_1000483FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004842C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_100048504;
  v10[3] = &unk_10026DBF0;
  id v11 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = *(void **)(a1 + 64);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v8;
  id v15 = *(id *)(a1 + 72);
  id v16 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v5 block:v10];
}

void sub_100048504(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    id v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = 2 * (*(void *)(a1 + 64) != 0LL);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _OWORD v8[2] = sub_100048624;
    void v8[3] = &unk_10026DBC8;
    id v9 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 72);
    [v4 fetchGameMetadataForBundleIDs:v5 responseKind:v6 context:v7 handler:v8];
  }

uint64_t sub_100048624(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004865C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"games"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100048788(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:@"bundle-id"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:@"bundle-version"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject fetchRequestForContext:]( &OBJC_CLASS___GKGameRatingCacheObject,  "fetchRequestForContext:",  a1[5]));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"bundleID = %@ && bundleVersion = %@",  v2,  v3));
  [v4 setPredicate:v5];

  [v4 setFetchLimit:1];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1[5] executeFetchRequest:v4 error:0]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 rating]);
  BOOL v9 = v8 != 0LL;

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 expirationDate]);
  [v10 timeIntervalSinceNow];
  BOOL v12 = v11 > 0.0;

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1[6] clientProxy]);
  id v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v13 replyQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100048948;
  block[3] = &unk_10026DC90;
  id v15 = a1[7];
  id v18 = v7;
  id v19 = v15;
  BOOL v20 = v12;
  BOOL v21 = v9;
  id v16 = v7;
  dispatch_async(v14, block);
}

void sub_100048948(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rating]);
  [v3 floatValue];
  (*(void (**)(uint64_t, void, void))(v2 + 16))( v2,  *(unsigned __int8 *)(a1 + 48),  *(unsigned __int8 *)(a1 + 49));
}

void sub_100048B98(_Unwind_Exception *a1)
{
}

void sub_100048BB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v18 = *(void *)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL));
  id v16 = @"games";
  id v17 = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_100048D28;
  v11[3] = &unk_10026DCE0;
  id v12 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  id v14 = v3;
  uint64_t v15 = v9;
  id v13 = v8;
  id v10 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-get-game-ratings" clientProxy:v7 handler:v11];
}

void sub_100048D28(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", a4));
  if (v7 && !v8)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    _DWORD v11[2] = sub_100048E38;
    v11[3] = &unk_10026B080;
    id v10 = *(void **)(a1 + 32);
    id v12 = *(id *)(a1 + 40);
    id v13 = v7;
    id v14 = v9;
    [v10 perform:v11];
  }

  [*(id *)(a1 + 32) setError:v8];
  *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a4;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100048E38(id *a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100048EF4;
  v6[3] = &unk_10026B0F8;
  id v4 = a1[4];
  id v7 = a1[5];
  id v8 = a1[4];
  id v9 = a1[6];
  id v10 = v3;
  id v5 = v3;
  [v4 performBlock:v6];
}

void sub_100048EF4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"ratings"]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100048FA0;
  v3[3] = &unk_10026DCB8;
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 enumerateObjectsUsingBlock:v3];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100048FA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"game"]);
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[GKGameRatingCacheObject ratingForGameDescriptor:context:]( &OBJC_CLASS___GKGameRatingCacheObject,  "ratingForGameDescriptor:context:",  v4,  *(void *)(a1 + 32)));

  [v5 updateWithServerRepresentation:v3 expirationDate:*(void *)(a1 + 40)];
}

void sub_100049024(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

void sub_100049128(id *a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] achievementPointsList]);
  if ([v2 isValid])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 internalRepresentation]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 seed]);
    unsigned __int8 v5 = [v2 detailsLoaded];
    char v6 = v5 & ([v2 expired] ^ 1);
  }

  else
  {
    id v3 = 0LL;
    id v4 = 0LL;
    unsigned __int8 v5 = 0;
    char v6 = 0;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameService.m",  2033LL,  "-[GKGameServicePrivate fetchGamesWithAchievementStatsForPlayer:context:handler:]_block_invoke"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v7));

  id v9 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 replyQueue]);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_1000492DC;
  void v14[3] = &unk_10026DD30;
  id v11 = a1[6];
  id v16 = v4;
  id v17 = v11;
  id v15 = v3;
  char v18 = v6;
  unsigned __int8 v19 = v5;
  id v12 = v4;
  id v13 = v3;
  [v8 notifyOnQueue:v10 block:v14];
}

uint64_t sub_1000492DC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 57));
}

void sub_1000494DC(_Unwind_Exception *a1)
{
}

void sub_1000494F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  char v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 playerID]);
  id v9 = *(void **)(a1 + 40);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 replyQueue]);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  _DWORD v17[2] = sub_100049628;
  v17[3] = &unk_10026CF30;
  uint64_t v12 = *(void *)(a1 + 48);
  id v18 = v8;
  uint64_t v19 = v12;
  id v20 = v5;
  id v21 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 56);
  id v22 = v13;
  uint64_t v23 = v14;
  id v15 = v5;
  id v16 = v8;
  [v9 performOnQueue:v11 block:v17];

  v7[2](v7);
}

void sub_100049628(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v19 = @"requested-player-id";
    uint64_t v20 = v4;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
  }

  else
  {
    id v5 = 0LL;
  }

  char v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000497A0;
  v12[3] = &unk_10026DDA8;
  id v13 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 40);
  id v15 = v8;
  uint64_t v16 = v9;
  uint64_t v10 = *(void *)(a1 + 72);
  id v17 = v3;
  uint64_t v18 = v10;
  id v11 = v3;
  [v6 issueRequest:v5 bagKey:@"gk-get-games-played-descriptors-with-achievements" clientProxy:v7 handler:v12];
}

void sub_1000497A0(uint64_t a1, void *a2, void *a3, double a4)
{
  id v11 = a2;
  id v7 = a3;
  if (v11 && !v7)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000498B4;
    v12[3] = &unk_10026DD80;
    id v8 = *(void **)(a1 + 32);
    id v13 = *(id *)(a1 + 40);
    id v14 = *(id *)(a1 + 32);
    double v18 = a4;
    id v15 = v11;
    id v9 = *(id *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    id v16 = v9;
    uint64_t v17 = v10;
    [v8 performBlockAndWait:v12];
  }

  *(double *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = a4;
  [*(id *)(a1 + 48) setError:v7];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_1000498B4(uint64_t a1)
{
  double v2 = (GKAchievementPointsListCacheObject *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) achievementPointsList]);
  if (!v2)
  {
    double v2 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKAchievementPointsListCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 40));
    [*(id *)(a1 + 32) setAchievementPointsList:v2];
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 72)));
  -[GKAchievementPointsListCacheObject updateWithServerRepresentation:expirationDate:]( v2,  "updateWithServerRepresentation:expirationDate:",  *(void *)(a1 + 48),  v3);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[GKAchievementPointsListCacheObject entries](v2, "entries"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 _gkValuesForKeyPath:@"gameRecord.game.bundleID"]);

  uint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472LL;
  uint64_t v12 = sub_100049A18;
  id v13 = &unk_10026BEC8;
  char v6 = *(void **)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  id v15 = v5;
  id v16 = *(id *)(a1 + 40);
  uint64_t v17 = v2;
  id v7 = v2;
  id v8 = v5;
  [v6 perform:&v10];
  id v9 = (void *)objc_claimAutoreleasedReturnValue(-[GKAchievementPointsListCacheObject seed](v7, "seed", v10, v11, v12, v13, v14));
  [*(id *)(a1 + 56) setObject:v9 forKeyedSubscript:@"seed"];
}

void sub_100049A18(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  char v6 = *(void **)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100049AD8;
  void v8[3] = &unk_10026DD58;
  id v9 = v6;
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v7 = v3;
  [v4 loadGameMetadataForBundleIDs:v5 context:v9 handler:v8];
}

void sub_100049AD8(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100049B50;
  v3[3] = &unk_10026B670;
  double v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  [v2 performBlockAndWait:v3];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

id sub_100049B50(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setDetailsLoaded:1];
}

void sub_100049B5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  double v3 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *, double))(v2 + 16))(v2, v5, v4, v3);
}

void sub_100049D88(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100049E34;
  void v8[3] = &unk_10026B408;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = *(id *)(a1 + 32);
  id v7 = a2;
  [v4 performOnManagedObjectContext:v8];
  v7[2](v7);
}

void sub_100049E34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = a2;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 playerID]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v8,  v7));

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_100049F3C;
  v15[3] = &unk_10026D608;
  uint64_t v10 = *(void **)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 40);
  id v16 = v11;
  uint64_t v17 = v12;
  id v18 = v9;
  id v19 = v5;
  id v13 = v5;
  id v14 = v9;
  [v10 fetchGamesWithAchievementStatsForPlayer:v14 context:v7 handler:v15];
}

void sub_100049F3C(uint64_t a1, void *a2, void *a3, char a4, char a5)
{
  id v9 = a2;
  id v10 = a3;
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"games"];
  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"seed"];
  if ((a4 & 1) == 0)
  {
    id v11 = *(void **)(a1 + 32);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameService.m",  2103LL,  "-[GKGameServicePrivate getGamesWithAchievementStatsForPlayer:handler:]_block_invoke_3"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 transactionGroupWithName:v12]);

    v34[0] = 0LL;
    v34[1] = v34;
    v34[2] = 0x2020000000LL;
    char v35 = 0;
    v30[2] = sub_10004A1B8;
    v30[3] = &unk_10026D890;
    id v14 = *(void **)(a1 + 48);
    void v30[4] = *(void *)(a1 + 40);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    id v31 = v14;
    id v15 = v13;
    id v32 = v15;
    uint64_t v33 = v34;
    [v15 perform:v30];
    if ((a5 & 1) != 0)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 replyQueue]);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472LL;
      v24[2] = sub_10004A574;
      v24[3] = &unk_10026D8E0;
      v25[2] = v34;
      id v18 = v15;
      uint64_t v19 = *(void *)(a1 + 40);
      v25[0] = v18;
      v25[1] = v19;
      [v18 notifyOnQueue:v17 block:v24];
      uint64_t v20 = (id *)v25;
    }

    else
    {
      id v21 = *(void **)(a1 + 32);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_10004A31C;
      id v26[3] = &unk_10026BEC8;
      id v27 = v15;
      int8x16_t v23 = *(int8x16_t *)(a1 + 32);
      id v22 = (id)v23.i64[0];
      int8x16_t v28 = vextq_s8(v23, v23, 8uLL);
      id v29 = *(id *)(a1 + 48);
      [v21 perform:v26];
      uint64_t v20 = &v27;

      id v16 = (void *)v28.i64[1];
    }

    _Block_object_dispose(v34, 8);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10004A1A0(_Unwind_Exception *a1)
{
}

void sub_10004A1B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_10004A27C;
  v10[3] = &unk_10026D868;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v12 = v3;
  uint64_t v13 = v8;
  id v11 = v7;
  id v9 = v3;
  [v4 loadGamesWithAchievementStatsForPlayer:v5 context:v6 handler:v10];
}

void sub_10004A27C(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = *(void **)(a1 + 32);
  id v11 = a3;
  id v8 = a2;
  [v7 setError:v11];
  BOOL v10 = a4 > 0.0 && v11 == 0LL;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v10;
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"seed"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004A31C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_10004A40C;
  v10[3] = &unk_10026B0A8;
  id v11 = a1[6];
  id v7 = a1[4];
  id v8 = a1[5];
  id v12 = v7;
  id v13 = v8;
  id v14 = a1[7];
  id v15 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v6 block:v10];
}

void sub_10004A40C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    id v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_10004A50C;
    void v7[3] = &unk_10026D590;
    id v8 = *(id *)(a1 + 32);
    id v9 = *(id *)(a1 + 64);
    [v4 fetchGamesWithAchievementStatsForPlayer:v5 context:v6 handler:v7];
  }

uint64_t sub_10004A50C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"games"];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"seed"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004A574(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"]);
    id v3 = (void *)v2;
    if (v2)
    {
      uint64_t v6 = GKRefreshSeedKey;
      uint64_t v7 = v2;
      id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
    }

    else
    {
      id v4 = 0LL;
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    [v5 refreshContentsForDataType:5 userInfo:v4];
  }

void sub_10004A658(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"games"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v5, v3, v4);
}

void sub_10004A88C(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10004A93C;
  v6[3] = &unk_10026B408;
  id v4 = *(void **)(a1 + 32);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 32);
  id v5 = a2;
  [v4 performOnManagedObjectContext:v6];
  v5[2](v5);
}

void sub_10004A93C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = a2;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 localPlayer]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 playerID]);
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKResource resourceWithID:](&OBJC_CLASS___GKMutableResource, "resourceWithID:", v9));

  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[GKResource resourceForRemoveGames:]( &OBJC_CLASS___GKResource,  "resourceForRemoveGames:",  *(void *)(a1 + 40)));
  [v11 addObject:v12];
  [v10 setRepresentedItem:v11];
  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v7));
  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"player = %@ && game.bundleID = %@",  v13,  *(void *)(a1 + 40)));
  +[GKCacheObject deleteObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKGameRecordCacheObject,  "deleteObjectsMatchingPredicate:context:",  v14,  v7);

  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credential]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 removeGameWriterWithCredential:v16]);
  id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v10));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_10004AB48;
  v20[3] = &unk_10026B2A0;
  id v21 = *(id *)(a1 + 48);
  id v22 = v5;
  id v19 = v5;
  [v17 writeResources:v18 handler:v20];
}

uint64_t sub_10004AB48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10004AB78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004ACE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDLoadedGame _gkFetchRequest](&OBJC_CLASS___GKCDLoadedGame, "_gkFetchRequest"));
  id v23 = 0LL;
  id v18 = v5;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v7 error:&v23]);
  id v9 = v23;
  BOOL v10 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v11 = v8;
  id v12 = [v11 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v20;
    do
    {
      id v15 = 0LL;
      do
      {
        if (*(void *)v20 != v14) {
          objc_enumerationMutation(v11);
        }
        id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v19 + 1) + 8 * (void)v15) bundleId]);
        -[NSMutableSet addObject:](v10, "addObject:", v16);

        id v15 = (char *)v15 + 1;
      }

      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v19 objects:v24 count:16];
    }

    while (v13);
  }

  id v17 = -[NSMutableSet copy](v10, "copy");
  [*(id *)(a1 + 32) setResult:v17];

  [*(id *)(a1 + 32) setError:v9];
  v6[2](v6);
}

void sub_10004AEA4(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  if ([v4 count])
  {
    uint64_t v2 = *(void *)(a1 + 48);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
  }

  else
  {
    [*(id *)(a1 + 40) restoreGameIdCacheWithHandler:*(void *)(a1 + 48)];
  }
}

uint64_t sub_10004B078(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  a2);
}

void sub_10004B370(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = -[NSBatchDeleteRequest initWithFetchRequest:]( objc_alloc(&OBJC_CLASS___NSBatchDeleteRequest),  "initWithFetchRequest:",  *(void *)(a1 + 32));
  -[NSBatchDeleteRequest setResultType:](v7, "setResultType:", 2LL);
  id v16 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 executeRequest:v7 error:&v16]);

  id v9 = v16;
  BOOL v10 = v9;
  if (v9) {
    id v9 = [*(id *)(a1 + 40) setError:v9];
  }
  if (!os_log_GKGeneral) {
    id v11 = (id)GKOSLoggers(v9);
  }
  id v12 = (void *)os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
  {
    id v13 = v12;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 result]);
    uint64_t v15 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138412802;
    id v18 = v14;
    __int16 v19 = 2112;
    uint64_t v20 = v15;
    __int16 v21 = 2112;
    __int128 v22 = v10;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "Cleared %@ cached %@ entities (error: %@)",  buf,  0x20u);
  }

  v5[2](v5);
}

void sub_10004B510(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

NSArray *__cdecl sub_10004B67C(id a1, NSSet *a2)
{
  id v2 = a2;
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(current_queue);
  if (dispatch_queue_get_specific(v4, @"com.apple.gamed.cachequeue") != @"com.apple.gamed.cachequeue")
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s not invoked on managed object context queue at %@",  "-[GKGameServicePrivate getFriendListAccessForAllGames:]_block_invoke",  v5));
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m"));
    id v8 = objc_claimAutoreleasedReturnValue([v7 lastPathComponent]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@ (_queueContext == (__bridge const void * _Nonnull)GKCacheQueueID)\n[%s (%s:%d)]",  v6,  "-[GKGameServicePrivate getFriendListAccessForAllGames:]_block_invoke",  [v8 UTF8String],  2262));

    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  @"GameKit Exception",  @"%@",  v9);
  }

  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSSet _gkMapWithBlock:](v2, "_gkMapWithBlock:", &stru_10026DE50));
  return (NSArray *)v10;
}

id sub_10004B7C8(id a1, GKCDGameSettings *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameSettings bundleID](v2, "bundleID"));
  else {
    id v4 = -[GKGameSettingsInternal initWithGameSettings:]( objc_alloc(&OBJC_CLASS___GKGameSettingsInternal),  "initWithGameSettings:",  v2);
  }

  return v4;
}

void sub_10004B83C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameAccessList _gkFetchRequest](&OBJC_CLASS___GKCDGameAccessList, "_gkFetchRequest"));
  id v44 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v7 error:&v44]);
  id v9 = v44;
  if (v9)
  {
    BOOL v10 = v6;
    id v11 = v7;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    id v12 = v8;
    id v13 = v8;
    id v14 = [v13 countByEnumeratingWithState:&v40 objects:v47 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v41;
      do
      {
        for (i = 0LL; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v41 != v16) {
            objc_enumerationMutation(v13);
          }
          [v5 deleteObject:*(void *)(*((void *)&v40 + 1) + 8 * (void)i)];
        }

        id v15 = [v13 countByEnumeratingWithState:&v40 objects:v47 count:16];
      }

      while (v15);
    }

    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers(v18);
    }
    uint64_t v20 = (os_log_s *)os_log_GKDaemon;
    id v7 = v11;
    id v6 = v10;
    id v8 = v12;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v46 = v9;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Could not fetch data from cache: %@", buf, 0xCu);
    }
  }

  else if ([v8 count])
  {
    __int16 v21 = (GKCDGameAccessList *)objc_claimAutoreleasedReturnValue([v8 firstObject]);
    goto LABEL_16;
  }

  __int128 v22 = objc_alloc(&OBJC_CLASS___GKCDGameAccessList);
  id v23 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameAccessList entity](&OBJC_CLASS___GKCDGameAccessList, "entity"));
  __int16 v21 = -[GKCDGameAccessList initWithEntity:insertIntoManagedObjectContext:]( v22,  "initWithEntity:insertIntoManagedObjectContext:",  v23,  v5);

LABEL_16:
  id v24 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameAccessList expirationDate](v21, "expirationDate"));
  unsigned int v25 = -[GKCDGameAccessList _gkIsExpired:](v21, "_gkIsExpired:", v24);

  if (v25)
  {
    id v26 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    uint64_t v27 = GKBagKeyGetAllowFriendListAccessForAllGames;
    int8x16_t v28 = v8;
    id v29 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_10004BBDC;
    v36[3] = &unk_10026DEA0;
    id v37 = a1[5];
    id v38 = a1[6];
    char v39 = v6;
    [v26 issueRequest:&__NSDictionary0__struct bagKey:v27 clientProxy:v29 handler:v36];

    id v8 = v28;
  }

  else
  {
    id v30 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameAccessList entries](v21, "entries"));
    id v31 = [v30 count];

    if (v31)
    {
      id v32 = (uint64_t (**)(id, void *))a1[6];
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameAccessList entries](v21, "entries"));
      uint64_t v34 = v32[2](v32, v33);
      char v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      [a1[5] setResult:v35];
    }

    v6[2](v6);
  }
}

void sub_10004BBDC(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    _DWORD v11[2] = sub_10004BD14;
    v11[3] = &unk_10026DE78;
    id v12 = (id)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"results"]);
    id v13 = (id)objc_claimAutoreleasedReturnValue( +[NSMutableSet setWithCapacity:]( NSMutableSet,  "setWithCapacity:",  [v12 count]));
    double v16 = a4;
    id v8 = *(void **)(a1 + 32);
    id v14 = v8;
    id v15 = *(id *)(a1 + 40);
    id v9 = v13;
    id v10 = v12;
    [v8 performOnManagedObjectContext:v11];
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10004BD14(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v38 = a3;
  uint64_t v48 = 0LL;
  id v37 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameAccessList _gkFetchRequest](&OBJC_CLASS___GKCDGameAccessList, "_gkFetchRequest"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:"));
  id v7 = 0LL;
  id v8 = v7;
  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers(v7);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004D214();
    }
  }

  __int128 v36 = v8;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  id v10 = v6;
  id v11 = [v10 countByEnumeratingWithState:&v44 objects:v50 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v45;
    do
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v45 != v13) {
          objc_enumerationMutation(v10);
        }
        [v5 deleteObject:*(void *)(*((void *)&v44 + 1) + 8 * (void)i)];
      }

      id v12 = [v10 countByEnumeratingWithState:&v44 objects:v50 count:16];
    }

    while (v12);
  }

  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  uint64_t v15 = a1;
  id obj = *(id *)(a1 + 32);
  id v16 = [obj countByEnumeratingWithState:&v40 objects:v49 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v41;
    do
    {
      for (j = 0LL; j != v17; j = (char *)j + 1)
      {
        if (*(void *)v41 != v18) {
          objc_enumerationMutation(obj);
        }
        uint64_t v20 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)j);
        __int16 v21 = objc_alloc(&OBJC_CLASS___GKCDGameSettings);
        __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameSettings entity](&OBJC_CLASS___GKCDGameSettings, "entity"));
        id v23 = -[GKCDGameSettings initWithEntity:insertIntoManagedObjectContext:]( v21,  "initWithEntity:insertIntoManagedObjectContext:",  v22,  v5);

        id v24 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:@"allow-friend-list-access"]);
        -[GKCDGameSettings setAllowFriendListAccess:](v23, "setAllowFriendListAccess:", v24);

        unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:@"bundle-id"]);
        -[GKCDGameSettings setBundleID:](v23, "setBundleID:", v25);

        [*(id *)(v15 + 40) addObject:v23];
      }

      id v17 = [obj countByEnumeratingWithState:&v40 objects:v49 count:16];
    }

    while (v17);
  }

  uint64_t v26 = v15;
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(v15 + 64)));
  int8x16_t v28 = objc_alloc(&OBJC_CLASS___GKCDGameAccessList);
  id v29 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameAccessList entity](&OBJC_CLASS___GKCDGameAccessList, "entity"));
  id v30 = -[GKCDGameAccessList initWithEntity:insertIntoManagedObjectContext:]( v28,  "initWithEntity:insertIntoManagedObjectContext:",  v29,  v5);

  -[GKCDGameAccessList setExpirationDate:](v30, "setExpirationDate:", v27);
  if ([*(id *)(v26 + 40) count])
  {
    id v31 = [*(id *)(v26 + 40) copy];
    -[GKCDGameAccessList setEntries:](v30, "setEntries:", v31);

    uint64_t v32 = *(void *)(v26 + 56);
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameAccessList entries](v30, "entries"));
    uint64_t v34 = (*(uint64_t (**)(uint64_t, void *))(v32 + 16))(v32, v33);
    char v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    [*(id *)(v26 + 48) setResult:v35];
  }

  v38[2](v38);
}

void sub_10004C0E0(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10004C274(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v13, 1LL));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10004C37C;
  void v8[3] = &unk_10026DF18;
  id v9 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v11 = v3;
  id v12 = v6;
  uint64_t v10 = *(void *)(a1 + 32);
  id v7 = v3;
  [v4 getGameMetadataForBundleIDs:v5 handler:v8];
}

void sub_10004C37C(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 firstObject]);
  id v5 = (void *)v4;
  if (v4)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers(v4);
    }
    id v7 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v8 = v7;
      id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v3 count]));
      *(_DWORD *)buf = 138412546;
      __int128 v22 = v9;
      __int16 v23 = 2112;
      id v24 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Loaded %@ games for bundleID, pick the first one out of: %@",  buf,  0x16u);
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([a1[5] transport]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([a1[5] localPlayer]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKGameStatService,  "serviceWithTransport:forClient:localPlayer:",  v10,  v11,  v12));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 gameDescriptor]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([a1[5] localPlayer]);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    _DWORD v17[2] = sub_10004C610;
    v17[3] = &unk_10026C8B0;
    id v18 = a1[6];
    id v19 = a1[4];
    id v20 = a1[7];
    [v13 getLeaderboardsForGameDescriptor:v14 player:v15 setIdentifier:0 handler:v17];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v16 = (id)GKOSLoggers(0LL);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004D274();
    }
    (*((void (**)(void))a1[7] + 2))();
  }
}

void sub_10004C610(uint64_t a1, void *a2)
{
  id v3 = a2;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  void v22[2] = sub_10004C8C4;
  v22[3] = &unk_10026DEF0;
  id v23 = *(id *)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 _gkFilterWithBlock:v22]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 firstObject]);

  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(v6);
    }
    id v8 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v9 = v8;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v3 count]));
      uint64_t v11 = *(void *)(a1 + 40);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) leaderboardID]);
      *(_DWORD *)buf = 138413058;
      unsigned int v25 = v10;
      __int16 v26 = 2112;
      uint64_t v27 = v11;
      __int16 v28 = 2112;
      id v29 = v12;
      __int16 v30 = 2112;
      id v31 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Loaded %@ leaderboards for bundleID: %@.\n Pick the first one matching leaderboardID: (%@) out of: %@",  buf,  0x2Au);
    }

    uint64_t v13 = objc_alloc(&OBJC_CLASS___GKGameActivityInternal);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 activityType]);
    uint64_t v15 = *(void *)(a1 + 40);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v5 userInfo]);
    id v17 = -[GKGameActivityInternal initWithActivityType:bundleID:andUserInfo:]( v13,  "initWithActivityType:bundleID:andUserInfo:",  v14,  v15,  v16);

    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameService sharedGameActivityStore](&OBJC_CLASS___GKGameService, "sharedGameActivityStore"));
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_10004C938;
    v20[3] = &unk_10026B120;
    id v21 = *(id *)(a1 + 48);
    [v18 add:v17 completionHandler:v20];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10004D2D8();
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

id sub_10004C8C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) leaderboardID]);
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = v6;

  return v7;
}

uint64_t sub_10004C938(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10004CA40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10004CB04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10004CBA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10004CC5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

  ;
}

void sub_10004CC74()
{
  sub_1000207C4( (void *)&_mh_execute_header,  v0,  v1,  "_cacheLockupsWithCollectionRequest returned error: %@",  v2,  v3,  v4,  v5,  v6);
  sub_10000C760();
}

void sub_10004CCD4()
{
  sub_1000207C4( (void *)&_mh_execute_header,  v0,  v1,  "_lockupDictionaryForRequest returned error: %@",  v2,  v3,  v4,  v5,  v6);
  sub_10000C760();
}

void sub_10004CD34()
{
}

void sub_10004CD98()
{
}

void sub_10004CDFC()
{
}

void sub_10004CE5C(void *a1, void *a2)
{
  uint64_t v3 = a1;
  [a2 count];
  sub_1000207E0();
  sub_1000208B0((void *)&_mh_execute_header, v3, v4, "Finished refreshing %lu expired metadatas", v5);

  sub_100020818();
}

void sub_10004CEE0()
{
}

void sub_10004CF48(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 conciseDescription]);
  int v6 = 136315394;
  id v7 = "-[GKGameServicePrivate getGamesForPlayer:includeInstalled:handler:]_block_invoke_3";
  __int16 v8 = 2112;
  id v9 = v4;
  sub_1000207D4((void *)&_mh_execute_header, v3, v5, "Cache miss - %s %@", (uint8_t *)&v6);

  sub_100020818();
}

void sub_10004CFF4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 conciseDescription]);
  uint64_t v6 = *(void *)(a1 + 48);
  int v7 = 136315650;
  __int16 v8 = "-[GKGameServicePrivate getGameStatsForPlayer:bundleIDs:handler:]_block_invoke_3";
  __int16 v9 = 2112;
  uint64_t v10 = v5;
  __int16 v11 = 2112;
  uint64_t v12 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Cache miss - %s %@ %@", (uint8_t *)&v7, 0x20u);
}

void sub_10004D0C4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10004D0F8()
{
}

void sub_10004D160(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = 136315394;
  uint64_t v5 = "-[GKGameServicePrivate getGameMetadataForBundleIDs:handler:]_block_invoke_2";
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  sub_1000207D4((void *)&_mh_execute_header, a2, a3, "Cache miss - %s %@", (uint8_t *)&v4);
  sub_10000C760();
}

void sub_10004D1E0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10004D214()
{
}

void sub_10004D274()
{
}

void sub_10004D2D8()
{
}

void sub_10004D434(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___LSApplicationProxy, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {
    uint64_t v10 = 0LL;
    __int16 v11 = &v10;
    uint64_t v12 = 0x2020000000LL;
    char v13 = 0;
    uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 requiredDeviceCapabilities]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10004D554;
    v9[3] = &unk_10026DF90;
    void v9[4] = &v10;
    [v6 enumerateObjectsUsingBlock:v9];

    if (([v3 isGameCenterEnabled] & 1) != 0 || *((_BYTE *)v11 + 24))
    {
      uint64_t v7 = *(void **)(a1 + 32);
      __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
      [v7 addObject:v8];
    }

    _Block_object_dispose(&v10, 8);
  }
}

void sub_10004D53C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10004D554(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result = [a2 isEqualToString:@"gamekit"];
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_10004D63C(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___LSApplicationProxy, v3);
  if ((objc_opt_isKindOfClass(v10, v4) & 1) != 0)
  {
    id v5 = [[GKApplicationProxy alloc] initWithProxy:v10];
    if ([v5 isGameCenterEnabled])
    {
      uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleID]);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v10 itemName]);

      if (v7)
      {
        __int16 v8 = *(void **)(a1 + 32);
        __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v10 itemName]);
        [v8 setObject:v6 forKey:v9];
      }
    }
  }
}

void sub_10004D8A8(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "cannot openURL: %@, because of error: %@",  (uint8_t *)&v3,  0x16u);
}

void sub_10004DD80(uint64_t a1, void *a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10004DE6C;
  v9[3] = &unk_10026E080;
  uint64_t v4 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 32);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void **)(a1 + 64);
  id v12 = v5;
  uint64_t v13 = v6;
  int v16 = *(_DWORD *)(a1 + 80);
  id v14 = v7;
  id v15 = *(id *)(a1 + 72);
  __int16 v8 = a2;
  [v4 performOnManagedObjectContext:v9];
  v8[2](v8);
}

void sub_10004DE6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKCompatiblePlayerListCacheObject,  "firstObjectMatchingPredicate:context:",  *(void *)(a1 + 32),  v5));
  unsigned int v8 = [v7 isValid];
  char v9 = v8;
  if (!v8
    || (id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 internalRepresentation]),
        [*(id *)(a1 + 40) setResult:v10],
        v10,
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 expirationDate]),
        [v11 timeIntervalSinceNow],
        double v13 = v12,
        v11,
        v13 <= 0.0))
  {
    id v14 = *(void **)(a1 + 40);
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameStatService.m",  136LL,  "-[GKGameStatService _getRecentMatchesForGameDescriptor:type:reference:handler:]_block_invoke_2"));
    int v16 = (void *)objc_claimAutoreleasedReturnValue([v14 transactionGroupWithName:v15]);

    v39[0] = 0LL;
    v39[1] = v39;
    v39[2] = 0x2020000000LL;
    char v40 = 0;
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_10004E140;
    v30[3] = &unk_10026E030;
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 56);
    id v31 = v17;
    uint64_t v32 = v18;
    id v19 = v16;
    id v33 = v19;
    id v34 = v7;
    int v38 = *(_DWORD *)(a1 + 80);
    id v35 = *(id *)(a1 + 64);
    id v36 = *(id *)(a1 + 72);
    id v37 = v39;
    [v19 perform:v30];
    if ((v9 & 1) != 0)
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 replyQueue]);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      v25[2] = sub_10004E614;
      void v25[3] = &unk_10026E058;
      void v25[4] = *(void *)(a1 + 56);
      void v25[5] = v39;
      [v19 notifyOnQueue:v21 block:v25];
    }

    else
    {
      __int128 v22 = *(void **)(a1 + 40);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_10004E4D8;
      id v26[3] = &unk_10026B080;
      id v23 = v19;
      uint64_t v24 = *(void *)(a1 + 56);
      id v27 = v23;
      uint64_t v28 = v24;
      id v29 = *(id *)(a1 + 40);
      [v22 perform:v26];
    }

    _Block_object_dispose(v39, 8);
  }

  v6[2](v6);
}

void sub_10004E128(_Unwind_Exception *a1)
{
}

void sub_10004E140(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_10004E264;
  v10[3] = &unk_10026E008;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  int v17 = *(_DWORD *)(a1 + 88);
  id v13 = *(id *)(a1 + 64);
  id v7 = *(id *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  id v15 = v3;
  uint64_t v16 = v8;
  id v14 = v7;
  id v9 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-get-friends-who-played-game" clientProxy:v6 handler:v10];
}

void sub_10004E264(uint64_t a1, void *a2, void *a3, double a4)
{
  id v9 = a2;
  id v7 = a3;
  if (v9 && !v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    id v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472LL;
    id v13 = sub_10004E3AC;
    id v14 = &unk_10026DFE0;
    id v15 = *(id *)(a1 + 40);
    double v20 = a4;
    id v16 = *(id *)(a1 + 32);
    int v21 = *(_DWORD *)(a1 + 80);
    id v17 = *(id *)(a1 + 48);
    id v18 = *(id *)(a1 + 56);
    id v19 = v9;
    [v8 performBlockAndWait:&v11];

    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = a4 > 0.0;
  }

  objc_msgSend(*(id *)(a1 + 32), "setError:", v7, v9, v11, v12, v13, v14);
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10004E3AC(uint64_t a1)
{
  id v9 = (GKCompatiblePlayerListCacheObject *)*(id *)(a1 + 32);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 72)));
  if (!v9)
  {
    id v3 = objc_alloc(&OBJC_CLASS___GKCompatiblePlayerListCacheObject);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
    id v9 = -[GKCacheObject initWithManagedObjectContext:](v3, "initWithManagedObjectContext:", v4);

    -[GKCompatiblePlayerListCacheObject setType:](v9, "setType:", *(unsigned int *)(a1 + 80));
    -[GKCompatiblePlayerListCacheObject setReference:](v9, "setReference:", *(void *)(a1 + 48));
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v5,  v6));
    -[GKCompatiblePlayerListCacheObject setGame:](v9, "setGame:", v7);
  }

  -[GKCompatiblePlayerListCacheObject updateWithServerRepresentation:expirationDate:]( v9,  "updateWithServerRepresentation:expirationDate:",  *(void *)(a1 + 64),  v2);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[GKPlayerListCacheObject internalRepresentation](v9, "internalRepresentation"));
  [*(id *)(a1 + 40) setResult:v8];
}

void sub_10004E4D8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10004E5B0;
  void v8[3] = &unk_10026B148;
  id v9 = a1[6];
  id v10 = a1[4];
  id v11 = v3;
  id v7 = v3;
  [v4 notifyOnQueue:v6 block:v8];
}

uint64_t sub_10004E5B0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) result]);
  [*(id *)(a1 + 32) setResult:v3];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10004E614(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    [v1 refreshContentsForDataType:7 userInfo:0];
  }

void sub_10004E668(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _gkValuesForKeyPath:@"player.playerID"]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKProfileService,  "serviceFromService:",  *(void *)(a1 + 40)));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10004E740;
  v5[3] = &unk_10026C550;
  id v6 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 48);
  [v4 getProfilesForPlayerIDs:v3 handler:v5];
}

void sub_10004E740(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 _gkMapDictionaryWithKeyPath:@"playerID"]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_10004E838;
  void v14[3] = &unk_10026E0D0;
  id v15 = v6;
  id v8 = v6;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 _gkMapWithBlock:v14]);

  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  uint64_t v12 = (void *)v11;
  if (v11) {
    id v13 = (id)v11;
  }
  else {
    id v13 = v5;
  }
  (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v9, v13);
}

id sub_10004E838(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 player]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 playerID]);

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v5]);
    [v3 setPlayer:v6];
  }

  return v3;
}

void sub_10004E9CC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"player == %@ && game == %@",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKRecentPlayerListCacheObject,  "firstObjectMatchingPredicate:context:",  v2,  *(void *)(a1 + 48)));

  unsigned int v4 = [v3 isValid];
  char v5 = v4;
  if (v4)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 internalRepresentation]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 seed]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 expirationDate]);
    [v8 timeIntervalSinceNow];
    BOOL v10 = v9 > 0.0;
  }

  else
  {
    BOOL v10 = 0;
    id v6 = 0LL;
    id v7 = 0LL;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
  uint64_t v12 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v11 replyQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10004EB58;
  block[3] = &unk_10026DD30;
  id v13 = *(id *)(a1 + 64);
  id v18 = v7;
  id v19 = v13;
  id v17 = v6;
  BOOL v20 = v10;
  char v21 = v5;
  id v14 = v7;
  id v15 = v6;
  dispatch_async(v12, block);
}

uint64_t sub_10004EB58(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 57));
}

void sub_10004EC64(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"player == %@ && otherPlayer == %@",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKRecentGameListCacheObject,  "firstObjectMatchingPredicate:context:",  v2,  *(void *)(a1 + 48)));

  unsigned int v4 = [v3 isValid];
  char v5 = v4;
  if (v4)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 internalRepresentation]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 seed]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 expirationDate]);
    [v8 timeIntervalSinceNow];
    BOOL v10 = v9 > 0.0;
  }

  else
  {
    BOOL v10 = 0;
    id v6 = 0LL;
    id v7 = 0LL;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
  uint64_t v12 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v11 replyQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10004EDF0;
  block[3] = &unk_10026DD30;
  id v13 = *(id *)(a1 + 64);
  id v18 = v7;
  id v19 = v13;
  id v17 = v6;
  BOOL v20 = v10;
  char v21 = v5;
  id v14 = v7;
  id v15 = v6;
  dispatch_async(v12, block);
}

uint64_t sub_10004EDF0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 57));
}

void sub_10004F08C(_Unwind_Exception *a1)
{
}

void sub_10004F0AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v28[0] = @"count";
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 80)));
  v29[0] = v7;
  v28[1] = @"since-time";
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _gkServerTimestamp]);
  v29[1] = v8;
  double v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v29,  v28,  2LL));
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v9));

  uint64_t v11 = *(void **)(a1 + 40);
  if (v11)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 gameDescriptor]);
    [v10 setObject:v12 forKeyedSubscript:@"game"];
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  void v19[2] = sub_10004F2E4;
  void v19[3] = &unk_10026E148;
  uint64_t v27 = *(void *)(a1 + 72);
  id v20 = *(id *)(a1 + 56);
  id v21 = v5;
  id v22 = *(id *)(a1 + 64);
  id v23 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 48);
  id v24 = v15;
  uint64_t v25 = v16;
  id v26 = v6;
  id v17 = v6;
  id v18 = v5;
  [v13 issueRequest:v10 bagKey:@"gk-get-recently-matched" clientProxy:v14 handler:v19];
}

void sub_10004F2E4(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  *(double *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = a4;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_10004F40C;
    void v14[3] = &unk_10026E120;
    uint64_t v11 = *(void **)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    double v22 = a4;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 56);
    id v18 = *(id *)(a1 + 64);
    id v19 = v7;
    id v12 = *(id *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 72);
    id v20 = v12;
    uint64_t v21 = v13;
    [v11 perform:v14];
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 80) + 16LL))( *(void *)(a1 + 80),  v8,  v9,  v10);
}

void sub_10004F40C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10004F514;
  void v8[3] = &unk_10026E0F8;
  uint64_t v17 = *(void *)(a1 + 88);
  unsigned int v4 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v5 = *(id *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  id v14 = v5;
  uint64_t v15 = v6;
  id v16 = v3;
  id v7 = v3;
  [v4 performBlock:v8];
}

void sub_10004F514(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 96)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"player == %@ && game == %@",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  unsigned int v4 = (GKRecentPlayerListCacheObject *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKRecentPlayerListCacheObject,  "firstObjectMatchingPredicate:context:",  v3,  *(void *)(a1 + 48)));

  if (!v4)
  {
    unsigned int v4 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKRecentPlayerListCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 48));
    -[GKRecentPlayerListCacheObject setGame:](v4, "setGame:", *(void *)(a1 + 40));
    -[GKRecentPlayerListCacheObject setPlayer:](v4, "setPlayer:", *(void *)(a1 + 32));
  }

  -[GKRecentPlayerListCacheObject setSinceDate:](v4, "setSinceDate:", *(void *)(a1 + 56));
  -[GKRecentPlayerListCacheObject updateWithServerRepresentation:expirationDate:]( v4,  "updateWithServerRepresentation:expirationDate:",  *(void *)(a1 + 64),  v2);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[GKRecentPlayerListCacheObject entries](v4, "entries"));
  id v6 = [v5 count];

  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[GKRecentPlayerListCacheObject entries](v4, "entries"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _gkValuesForKeyPath:@"playerID"]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerID]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 arrayByAddingObject:v9]);

    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472LL;
    v42[2] = sub_10004F8EC;
    v42[3] = &unk_10026B170;
    id v11 = *(void **)(a1 + 72);
    v42[4] = *(void *)(a1 + 80);
    id v12 = v10;
    id v43 = v12;
    [v11 perform:v42];
    if (*(void *)(a1 + 40))
    {
      uint64_t v27 = v2;
      id v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKGameServicePrivate,  "serviceFromService:",  *(void *)(a1 + 80)));
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleID]);
      __int128 v45 = v14;
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v45, 1LL));

      id v16 = *(void **)(a1 + 72);
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472LL;
      void v38[2] = sub_10004FA80;
      void v38[3] = &unk_10026B080;
      id v17 = v13;
      id v39 = v17;
      id v18 = v15;
      id v40 = v18;
      id v41 = *(id *)(a1 + 48);
      [v16 perform:v38];
      id v26 = v12;
      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfilesWithPlayerIDs:inManagedObjectContext:",  v12,  *(void *)(a1 + 48)));
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v37 = 0u;
      id obj = v19;
      id v20 = [v19 countByEnumeratingWithState:&v34 objects:v44 count:16];
      if (v20)
      {
        id v21 = v20;
        uint64_t v22 = *(void *)v35;
        do
        {
          for (i = 0LL; i != v21; i = (char *)i + 1)
          {
            if (*(void *)v35 != v22) {
              objc_enumerationMutation(obj);
            }
            uint64_t v24 = *(void *)(*((void *)&v34 + 1) + 8LL * (void)i);
            uint64_t v25 = *(void **)(a1 + 72);
            v29[0] = _NSConcreteStackBlock;
            v29[1] = 3221225472LL;
            void v29[2] = sub_10004FB1C;
            v29[3] = &unk_10026BEC8;
            id v30 = v17;
            uint64_t v31 = v24;
            id v32 = v18;
            id v33 = *(id *)(a1 + 48);
            [v25 perform:v29];
          }

          id v21 = [obj countByEnumeratingWithState:&v34 objects:v44 count:16];
        }

        while (v21);
      }

      uint64_t v2 = v27;
      id v12 = v26;
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
}

void sub_10004F8EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKProfileService,  "serviceFromService:",  *(void *)(a1 + 32)));
  uint64_t v5 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10004F994;
  void v7[3] = &unk_10026C5A0;
  id v8 = v3;
  id v6 = v3;
  [v4 getProfilesForPlayerIDs:v5 handler:v7];
}

void sub_10004F994(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v8 = v6;
  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v6, v7);
  }
  id v10 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412290;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "recent Player profiles:%@", (uint8_t *)&v11, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004FA80(void *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10004FB10;
  void v8[3] = &unk_10026D680;
  id v9 = v3;
  id v7 = v3;
  [v4 loadGameMetadataForBundleIDs:v5 context:v6 handler:v8];
}

uint64_t sub_10004FB10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004FB1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) internalRepresentation]);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10004FBCC;
  v9[3] = &unk_10026D680;
  id v10 = v3;
  id v8 = v3;
  [v4 loadGameStatsForPlayer:v5 bundleIdentifiers:v7 context:v6 handler:v9];
}

uint64_t sub_10004FBCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004FBD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

void sub_10004FF2C(_Unwind_Exception *a1)
{
}

void sub_10004FF4C(uint64_t a1)
{
  v6[0] = @"count";
  double v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
  v7[0] = v2;
  v6[1] = @"since-time";
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _gkServerTimestamp]);
  v7[1] = v3;
  void v6[2] = @"other-player-id";
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerID]);
  void v7[2] = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  3LL));
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"request"];
}

void sub_100050058(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"request"]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_1000501AC;
  v10[3] = &unk_10026E148;
  uint64_t v18 = *(void *)(a1 + 80);
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  id v7 = *(id *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 40);
  id v15 = v7;
  uint64_t v16 = v8;
  id v17 = v3;
  id v9 = v3;
  [v5 issueRequest:v4 bagKey:@"gk-get-recently-matched" clientProxy:v6 handler:v10];
}

void sub_1000501AC(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  *(double *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = a4;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_1000502D4;
    void v14[3] = &unk_10026E120;
    id v11 = *(void **)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    double v22 = a4;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 56);
    id v18 = *(id *)(a1 + 64);
    id v19 = v7;
    id v12 = *(id *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 72);
    id v20 = v12;
    uint64_t v21 = v13;
    [v11 perform:v14];
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 80) + 16LL))( *(void *)(a1 + 80),  v8,  v9,  v10);
}

void sub_1000502D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000503DC;
  void v8[3] = &unk_10026E0F8;
  uint64_t v17 = *(void *)(a1 + 88);
  unsigned int v4 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v5 = *(id *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  id v14 = v5;
  uint64_t v15 = v6;
  id v16 = v3;
  id v7 = v3;
  [v4 performBlock:v8];
}

void sub_1000503DC(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 96)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"player == %@ && otherPlayer == %@",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  unsigned int v4 = (GKRecentGameListCacheObject *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKRecentGameListCacheObject,  "firstObjectMatchingPredicate:context:",  v3,  *(void *)(a1 + 48)));

  if (!v4)
  {
    unsigned int v4 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKRecentGameListCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 48));
    -[GKRecentGameListCacheObject setPlayer:](v4, "setPlayer:", *(void *)(a1 + 32));
    -[GKRecentGameListCacheObject setOtherPlayer:](v4, "setOtherPlayer:", *(void *)(a1 + 40));
  }

  -[GKRecentGameListCacheObject setSinceDate:](v4, "setSinceDate:", *(void *)(a1 + 56));
  -[GKRecentGameListCacheObject updateWithServerRepresentation:expirationDate:]( v4,  "updateWithServerRepresentation:expirationDate:",  *(void *)(a1 + 64),  v2);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[GKRecentGameListCacheObject entries](v4, "entries"));
  id v6 = [v5 count];

  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[GKRecentGameListCacheObject entries](v4, "entries"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _gkValuesForKeyPath:@"bundleID"]);

    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_1000506FC;
    void v34[3] = &unk_10026B080;
    id v9 = *(void **)(a1 + 72);
    void v34[4] = *(void *)(a1 + 80);
    id v35 = *(id *)(a1 + 32);
    id v36 = *(id *)(a1 + 40);
    [v9 perform:v34];
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKGameServicePrivate,  "serviceFromService:",  *(void *)(a1 + 80)));
    id v11 = *(void **)(a1 + 72);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_100050830;
    v30[3] = &unk_10026B080;
    id v12 = v10;
    id v31 = v12;
    id v13 = v8;
    id v32 = v13;
    id v33 = *(id *)(a1 + 48);
    [v11 perform:v30];
    id v14 = *(void **)(a1 + 72);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_1000508CC;
    void v25[3] = &unk_10026BEC8;
    id v15 = v12;
    id v26 = v15;
    id v27 = *(id *)(a1 + 32);
    id v16 = v13;
    id v28 = v16;
    id v29 = *(id *)(a1 + 48);
    [v14 perform:v25];
    uint64_t v17 = *(void **)(a1 + 72);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_100050988;
    v20[3] = &unk_10026BEC8;
    id v21 = v15;
    id v22 = *(id *)(a1 + 32);
    id v23 = v16;
    id v24 = *(id *)(a1 + 48);
    id v18 = v16;
    id v19 = v15;
    [v17 perform:v20];
  }

  (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
}

void sub_1000506FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKProfileService,  "serviceFromService:",  *(void *)(a1 + 32)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerID]);
  v11[0] = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerID]);
  v11[1] = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v11, 2LL));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100050824;
  v9[3] = &unk_10026C5A0;
  id v10 = v3;
  id v8 = v3;
  [v4 getProfilesForPlayerIDs:v7 handler:v9];
}

uint64_t sub_100050824(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100050830(void *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000508C0;
  void v8[3] = &unk_10026D680;
  id v9 = v3;
  id v7 = v3;
  [v4 loadGameMetadataForBundleIDs:v5 context:v6 handler:v8];
}

uint64_t sub_1000508C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000508CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) internalRepresentation]);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10005097C;
  v9[3] = &unk_10026D680;
  id v10 = v3;
  id v8 = v3;
  [v4 loadGameStatsForPlayer:v5 bundleIdentifiers:v7 context:v6 handler:v9];
}

uint64_t sub_10005097C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100050988(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) internalRepresentation]);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100050A38;
  v9[3] = &unk_10026D680;
  id v10 = v3;
  id v8 = v3;
  [v4 loadGameStatsForPlayer:v5 bundleIdentifiers:v7 context:v6 handler:v9];
}

uint64_t sub_100050A38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100050A44(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

void sub_100050C4C(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100050CF8;
  void v8[3] = &unk_10026B408;
  unsigned int v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = *(id *)(a1 + 32);
  uint64_t v7 = a2;
  [v4 performOnManagedObjectContext:v8];
  v7[2](v7);
}

void sub_100050CF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v5));
  id v8 = *(void **)(a1 + 32);
  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 dictionaryForRequest]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v9,  v5));
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  _DWORD v17[2] = sub_100050E3C;
  v17[3] = &unk_10026E210;
  id v11 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 40);
  id v18 = v12;
  uint64_t v19 = v13;
  id v20 = v7;
  id v21 = v10;
  id v22 = v6;
  id v14 = v6;
  id v15 = v10;
  id v16 = v7;
  [v11 fetchRecentPlayersWithPlayer:v16 game:v15 context:v5 handler:v17];
}

void sub_100050E3C(uint64_t a1, void *a2, void *a3, int a4, char a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = v10;
  if (a4 && (a5 & 1) != 0)
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers(v10);
    }
    uint64_t v13 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v37 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "GKFriendList:recent list of players:%@",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"players"];
    [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"seed"];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers(v10);
    }
    id v15 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v37 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "GKFriendList:list from cache is not valid/good going to server:%@",  buf,  0xCu);
    }

    id v16 = *(void **)(a1 + 32);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameStatService.m",  464LL,  "-[GKGameStatService getRecentPlayersForGameDescriptor:handler:]_block_invoke"));
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 transactionGroupWithName:v17]);

    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_10005115C;
    v32[3] = &unk_10026BEC8;
    uint64_t v19 = *(void **)(a1 + 48);
    void v32[4] = *(void *)(a1 + 40);
    id v33 = v19;
    id v34 = *(id *)(a1 + 56);
    id v20 = v18;
    id v35 = v20;
    [v20 perform:v32];
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 replyQueue]);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_10005124C;
    void v25[3] = &unk_10026E1E8;
    id v26 = *(id *)(a1 + 32);
    id v27 = v20;
    id v23 = *(void **)(a1 + 48);
    uint64_t v28 = *(void *)(a1 + 40);
    id v29 = v23;
    id v30 = *(id *)(a1 + 56);
    id v31 = *(id *)(a1 + 64);
    id v24 = v20;
    [v24 notifyOnQueue:v22 block:v25];
  }
}

void sub_10005115C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) context]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10005121C;
  v9[3] = &unk_10026D568;
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v8 = v3;
  [v4 loadRecentPlayersWithPlayer:v5 game:v6 context:v7 handler:v9];
}

uint64_t sub_10005121C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10005124C(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    unsigned int v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _OWORD v8[2] = sub_100051374;
    void v8[3] = &unk_10026D5B8;
    id v9 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 72);
    [v4 fetchRecentPlayersWithPlayer:v5 game:v6 context:v7 handler:v8];
  }

uint64_t sub_100051374(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"players"];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"seed"];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v7];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000513FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"players"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v5, v3, v4);
}

void sub_100051610(int8x16_t *a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000516AC;
  void v6[3] = &unk_10026B608;
  int8x16_t v5 = a1[2];
  id v3 = (id)v5.i64[0];
  int8x16_t v7 = vextq_s8(v5, v5, 8uLL);
  unsigned int v4 = a2;
  [v3 performOnManagedObjectContext:v6];
  v4[2](v4);
}

void sub_1000516AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  int8x16_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v6));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 playerID]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v8,  v6));

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_1000517E0;
  void v16[3] = &unk_10026E210;
  id v10 = *(void **)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  id v17 = v11;
  uint64_t v18 = v12;
  id v19 = v7;
  id v20 = v9;
  id v21 = v5;
  id v13 = v5;
  id v14 = v9;
  id v15 = v7;
  [v10 fetchRecentGamesBetweenPlayer:v15 otherPlayer:v14 context:v6 handler:v16];
}

uint64_t sub_1000517E0(uint64_t a1, uint64_t a2, void *a3, int a4, char a5)
{
  id v9 = *(void **)(a1 + 32);
  id v10 = a3;
  [v9 setObject:a2 forKeyedSubscript:@"games"];
  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"seed"];

  if (!a4 || (a5 & 1) == 0)
  {
    id v11 = *(void **)(a1 + 32);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameStatService.m",  517LL,  "-[GKGameStatService getRecentGamesWithPlayer:handler:]_block_invoke_3"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 transactionGroupWithName:v12]);

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_1000519D4;
    void v25[3] = &unk_10026BEC8;
    id v14 = *(void **)(a1 + 48);
    void v25[4] = *(void *)(a1 + 40);
    id v26 = v14;
    id v27 = *(id *)(a1 + 56);
    id v15 = v13;
    id v28 = v15;
    [v15 perform:v25];
    if ((a5 & 1) == 0)
    {
      id v16 = *(void **)(a1 + 32);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      v20[2] = sub_100051AC4;
      v20[3] = &unk_10026BB28;
      id v21 = v15;
      int8x16_t v19 = *(int8x16_t *)(a1 + 32);
      id v17 = (id)v19.i64[0];
      int8x16_t v22 = vextq_s8(v19, v19, 8uLL);
      id v23 = *(id *)(a1 + 48);
      id v24 = *(id *)(a1 + 56);
      [v16 perform:v20];
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_1000519D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  int8x16_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) context]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100051A94;
  v9[3] = &unk_10026D568;
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v8 = v3;
  [v4 loadRecentGamesBetweenPlayer:v5 otherPlayer:v6 context:v7 handler:v9];
}

uint64_t sub_100051A94(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100051AC4(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_100051BC8;
  v10[3] = &unk_10026E1E8;
  id v11 = a1[6];
  id v7 = a1[4];
  id v8 = a1[5];
  id v12 = v7;
  id v13 = v8;
  id v14 = a1[7];
  id v15 = a1[8];
  id v16 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v6 block:v10];
}

void sub_100051BC8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    id v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 64);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _OWORD v8[2] = sub_100051CDC;
    void v8[3] = &unk_10026D590;
    id v9 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 72);
    [v4 fetchRecentGamesBetweenPlayer:v5 otherPlayer:v6 context:v7 handler:v8];
  }

uint64_t sub_100051CDC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"games"];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"seed"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100051D44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"games"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v5, v3, v4);
}

uint64_t sub_100051E68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100051F38(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  a1[4],  a1[5]));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 achievementDescriptionList]);
  if ([v3 isValid])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([v3 internalRepresentation]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 expirationDate]);
    [v4 timeIntervalSinceNow];
  }

  else
  {
    id v5 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_100052238( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_10005225C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005226C(uint64_t a1)
{
}

void sub_100052274(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v5,  a2));
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 bundleID]);
  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 achievementDescriptionList]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 expirationDate]);
    [v12 timeIntervalSinceNow];
    *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = v13;

    if (v11 && ![v11 expired])
    {
      [*(id *)(a1 + 40) setObject:&off_100287910 forKeyedSubscript:@"skipCallbacks"];
      uint64_t v26 = *(void *)(a1 + 56);
      double v27 = *(double *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
      id v23 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
      (*(void (**)(uint64_t, id, double))(v26 + 16))(v26, v23, v27);
    }

    else
    {
      id v36 = @"game";
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 gameDescriptor]);
      id v37 = v14;
      id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v37,  &v36,  1LL));

      id v16 = *(void **)(a1 + 40);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 replyQueue]);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472LL;
      void v29[2] = sub_100052544;
      v29[3] = &unk_10026E2B0;
      __int128 v28 = *(_OWORD *)(a1 + 56);
      id v19 = (id)v28;
      __int128 v34 = v28;
      id v20 = *(id *)(a1 + 40);
      uint64_t v21 = *(void *)(a1 + 48);
      id v30 = v20;
      uint64_t v31 = v21;
      uint64_t v22 = *(void *)(a1 + 72);
      id v32 = v15;
      uint64_t v35 = v22;
      id v33 = *(id *)(a1 + 32);
      id v23 = v15;
      [v16 performOnQueue:v18 block:v29];
    }

    v6[2](v6);
  }

  else
  {
    uint64_t v24 = *(void *)(a1 + 56);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  15LL,  0LL));
    (*(void (**)(uint64_t, void *, double))(v24 + 16))(v24, v25, 0.0);

    v6[2](v6);
    id v11 = v6;
  }
}

void sub_100052544(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v28, 1LL));
  id v6 = objc_retainBlock(*(id *)(a1 + 64));
  unsigned int v7 = [v4 doesCallbackListExistFor:@"gk-get-game-achievements" parameters:v5 callback:v6];

  if (v7)
  {
    [*(id *)(a1 + 32) setObject:&off_100287910 forKeyedSubscript:@"skipCallbacks"];
    v3[2](v3);
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v10 = [v9 environment];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 currentGame]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 bundleIdentifier]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v8 primaryCredentialForEnvironment:v10 gameID:v13]);

    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    uint64_t v16 = *(void *)(a1 + 48);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_1000527B4;
    v21[3] = &unk_10026E288;
    id v18 = *(id *)(a1 + 32);
    uint64_t v19 = *(void *)(a1 + 80);
    id v22 = v18;
    uint64_t v27 = v19;
    id v23 = *(id *)(a1 + 56);
    id v24 = v14;
    uint64_t v25 = *(void *)(a1 + 40);
    uint64_t v26 = v3;
    id v20 = v14;
    [v15 issueRequestForPlayer:v16 bagKey:@"gk-get-game-achievements" clientProxy:v17 locale:0 playerCredential:v20 handler:v21];
  }
}

void sub_1000527B4(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  *(double *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = a4;
  if (v7 && !a3)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1000528A0;
    v11[3] = &unk_10026E260;
    uint64_t v8 = *(void **)(a1 + 32);
    id v12 = *(id *)(a1 + 40);
    double v16 = a4;
    id v13 = v7;
    id v9 = *(id *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    id v14 = v9;
    uint64_t v15 = v10;
    [v8 performOnManagedObjectContext:v11];
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_1000528A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v25 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  *(void *)(a1 + 32),  v5));
  uint64_t v7 = objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 64)));
  uint64_t v28 = v6;
  uint64_t v8 = (GKAchievementDescriptionListCacheObject *)objc_claimAutoreleasedReturnValue([v6 achievementDescriptionList]);
  if (!v8)
  {
    uint64_t v8 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKAchievementDescriptionListCacheObject),  "initWithManagedObjectContext:",  v5);
    -[GKAchievementDescriptionListCacheObject setGame:](v8, "setGame:", v28);
  }

  uint64_t v27 = (void *)v7;
  -[GKAchievementDescriptionListCacheObject updateWithServerRepresentation:expirationDate:]( v8,  "updateWithServerRepresentation:expirationDate:",  *(void *)(a1 + 40),  v7);
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  id v24 = v8;
  id obj = (id)objc_claimAutoreleasedReturnValue(-[GKAchievementDescriptionListCacheObject entries](v8, "entries"));
  id v9 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v32;
    do
    {
      id v12 = 0LL;
      do
      {
        if (*(void *)v32 != v11) {
          objc_enumerationMutation(obj);
        }
        id v13 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)v12);
        id v14 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKAchievementThatAFriendHasListCacheObject),  "initWithManagedObjectContext:",  v5);
        -[GKAchievementThatAFriendHasListCacheObject setGame:](v14, "setGame:", v28);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v5));
        -[GKAchievementThatAFriendHasListCacheObject setPlayer:](v14, "setPlayer:", v15);

        -[GKAchievementThatAFriendHasListCacheObject setAchievementDescription:](v14, "setAchievementDescription:", v13);
        uint64_t v16 = *(void *)(a1 + 40);
        id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerInternal]);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 playerID]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);
        -[GKAchievementThatAFriendHasListCacheObject updateWithServerRepresentation:expirationDate:playerId:achievementId:]( v14,  "updateWithServerRepresentation:expirationDate:playerId:achievementId:",  v16,  v27,  v18,  v19);

        id v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
    }

    while (v10);
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKProfileService,  "serviceFromService:",  *(void *)(a1 + 56)));
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameStatService friendsRequiringHydration:]( &OBJC_CLASS___GKGameStatService,  "friendsRequiringHydration:",  *(void *)(a1 + 40)));
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 allObjects]);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472LL;
  void v29[2] = sub_100052B9C;
  v29[3] = &unk_10026C5A0;
  id v30 = v25;
  id v23 = v25;
  [v20 getProfilesForPlayerIDs:v22 handler:v29];
}

uint64_t sub_100052B9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100052BA8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"skipCallbacks"]);
  if (v2)
  {
  }

  else if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v19, 1LL));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 retrieveAndClearCallbacks:@"gk-get-game-achievements" parameters:v4]);

    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v15;
      do
      {
        id v10 = 0LL;
        do
        {
          if (*(void *)v15 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v14 + 1) + 8LL * (void)v10);
          double v12 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
          id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error", (void)v14));
          (*(void (**)(uint64_t, void *, double))(v11 + 16))(v11, v13, v12);

          id v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v8);
    }
  }

void sub_10005387C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_10005396C;
  void v14[3] = &unk_10026E378;
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(a1 + 40);
  id v15 = v9;
  uint64_t v16 = v10;
  id v17 = v11;
  id v18 = v5;
  id v19 = *(id *)(a1 + 56);
  id v20 = v6;
  id v12 = v6;
  id v13 = v5;
  [v7 fetchAchievementDescriptionsForGameDescriptor:v8 context:v13 handler:v14];
}

void sub_10005396C(uint64_t a1, void *a2, void *a3, int a4, char a5)
{
  id v9 = a2;
  id v10 = a3;
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"results"];
  if (!a4 || (a5 & 1) == 0)
  {
    uint64_t v11 = *(void **)(a1 + 32);
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameStatService.m",  809LL,  "-[GKGameStatService getAchievementDescriptionsForGameDescriptor:handler:]_block_invoke_2"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 transactionGroupWithName:v12]);

    v34[0] = 0LL;
    v34[1] = v34;
    v34[2] = 0x2020000000LL;
    char v35 = 0;
    void v29[2] = sub_100053BD4;
    v29[3] = &unk_10026B988;
    __int128 v14 = *(void **)(a1 + 48);
    void v29[4] = *(void *)(a1 + 40);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    id v30 = v14;
    id v31 = *(id *)(a1 + 56);
    __int128 v33 = v34;
    id v15 = v13;
    id v32 = v15;
    [v15 perform:v29];
    if ((a5 & 1) != 0)
    {
      uint64_t v16 = *(void *)(a1 + 64);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      void v21[2] = sub_100053EE8;
      v21[3] = &unk_10026E058;
      void v21[4] = *(void *)(a1 + 40);
      v21[5] = v34;
      [v15 notifyOnQueue:v16 block:v21];
    }

    else
    {
      id v17 = *(void **)(a1 + 32);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      void v22[2] = sub_100053CE8;
      v22[3] = &unk_10026E350;
      id v23 = v15;
      id v24 = *(id *)(a1 + 64);
      id v18 = *(id *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      id v20 = *(void **)(a1 + 48);
      id v25 = v18;
      uint64_t v26 = v19;
      id v27 = v20;
      id v28 = *(id *)(a1 + 56);
      [v17 perform:v22];
    }

    _Block_object_dispose(v34, 8);
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_100053BBC(_Unwind_Exception *a1)
{
}

void sub_100053BD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100053C84;
  void v8[3] = &unk_10026E328;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v7 = v3;
  [v4 loadAchievementDescriptionsForGameDescriptor:v5 context:v6 handler:v8];
}

void sub_100053C84(void *a1, void *a2, double a3)
{
  BOOL v5 = a3 > 0.0 && a2 == 0LL;
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = v5;
  uint64_t v6 = (void *)a1[4];
  id v7 = a2;
  [v6 setError:v7];
  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_100053CE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_100053DC0;
  v10[3] = &unk_10026E1E8;
  id v11 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void **)(a1 + 64);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v8;
  id v15 = *(id *)(a1 + 72);
  id v16 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v5 block:v10];
}

void sub_100053DC0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    id v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 64);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_100053EB0;
    void v7[3] = &unk_10026D590;
    id v8 = *(id *)(a1 + 32);
    id v9 = *(id *)(a1 + 72);
    [v4 fetchAchievementDescriptionsForGameDescriptor:v5 context:v6 handler:v7];
  }

uint64_t sub_100053EB0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100053EE8(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    [v1 refreshContentsForDataType:8 userInfo:0];
  }

void sub_100053F3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"results"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000541C0(_Unwind_Exception *a1)
{
}

void sub_1000541D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_1000542D4;
  void v14[3] = &unk_10026E430;
  id v15 = v5;
  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v16 = v8;
  id v17 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 32);
  id v18 = v9;
  uint64_t v19 = v11;
  id v20 = v6;
  uint64_t v21 = v10;
  id v12 = v6;
  id v13 = v5;
  [v7 loadAchievementDescriptionsForGameDescriptor:v8 context:v13 handler:v14];
}

void sub_1000542D4(uint64_t a1)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100054394;
  v9[3] = &unk_10026E408;
  uint64_t v2 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 48);
  id v3 = *(id *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 64);
  id v13 = v3;
  uint64_t v14 = v5;
  uint64_t v15 = v4;
  [v2 performBlockAndWait:v9];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 72) + 16LL))( *(void *)(a1 + 72),  v6,  v7,  v8);
}

void sub_100054394(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  uint64_t v3 = objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  *(void *)(a1 + 40)));
  uint64_t v29 = (void *)v3;
  if ([*(id *)(a1 + 48) count]) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (v4)
  {
    [*(id *)(a1 + 56) setObject:0 forKeyedSubscript:@"results"];
    [*(id *)(a1 + 56) setObject:0 forKeyedSubscript:@"missingPlayers"];
  }

  else
  {
    if ([*(id *)(a1 + 48) count])
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfilesWithPlayers:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfilesWithPlayers:inManagedObjectContext:",  *(void *)(a1 + 48),  *(void *)(a1 + 40)));
    }

    else
    {
      uint64_t v39 = v3;
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v39, 1LL));
    }

    uint64_t v6 = v5;
    id v7 = [v5 count];
    id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  v7));
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v7));
    [*(id *)(a1 + 40) refreshObject:v2 mergeChanges:1];
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    id obj = v6;
    id v30 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v30)
    {
      uint64_t v27 = *(void *)v35;
      do
      {
        for (i = 0LL; i != v30; i = (char *)i + 1)
        {
          if (*(void *)v35 != v27) {
            objc_enumerationMutation(obj);
          }
          id v9 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
          [*(id *)(a1 + 40) refreshObject:v9 mergeChanges:1];
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 achievementLists]);
          id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](&OBJC_CLASS___NSMutableSet, "setWithSet:", v10));

          id v12 = (void *)objc_claimAutoreleasedReturnValue([v2 achievementLists]);
          [v11 intersectSet:v12];

          id v31 = v11;
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 anyObject]);
          uint64_t v14 = v13;
          if (!v13 || [v13 expired])
          {
            *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 0;
            uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v9 internalRepresentation]);
            [v26 addObject:v15];
          }

          id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 internalRepresentation]);
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 _gkMapWithBlock:&stru_10026E3B8]);
          id v18 = *(void **)(a1 + 64);
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v29 playerID]);
          id v20 = (void *)objc_claimAutoreleasedReturnValue([v2 bundleID]);
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( [v18 getFriendsWhoHaveTheseAchievements:v17 playerID:v19 gameBundleID:v20 context:*(void *)(a1 + 40)]);

          v32[0] = _NSConcreteStackBlock;
          v32[1] = 3221225472LL;
          v32[2] = sub_1000547A8;
          v32[3] = &unk_10026E3E0;
          id v33 = v16;
          id v22 = v16;
          [v21 enumerateObjectsUsingBlock:v32];
          if (v22) {
            id v23 = v22;
          }
          else {
            id v23 = &__NSArray0__struct;
          }
          id v24 = (void *)objc_claimAutoreleasedReturnValue([v9 playerID]);
          [v28 setObject:v23 forKeyedSubscript:v24];
        }

        id v30 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
      }

      while (v30);
    }

    [*(id *)(a1 + 56) setObject:v26 forKeyedSubscript:@"missingPlayers"];
    [*(id *)(a1 + 56) setObject:v28 forKeyedSubscript:@"results"];
  }
}

id sub_1000547A0(id a1, GKAchievementInternal *a2, unint64_t a3)
{
  return -[GKAchievementInternal identifier](a2, "identifier", a3);
}

void sub_1000547A8(uint64_t a1, void *a2, uint64_t a3)
{
  BOOL v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 objectAtIndexedSubscript:a3]);
  [v6 setFriendsWhoHaveThis:v5];
}

void sub_100054804(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"results"]);
  id v5 = (id)v3;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v2 + 16))(v2, v3, 1LL, 0LL);
  }

  else
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"missingPlayers"]);
    (*(void (**)(uint64_t, id, void, void *))(v2 + 16))(v2, v5, 0LL, v4);
  }
}

void sub_100054AB4(_Unwind_Exception *a1)
{
}

void sub_100054ACC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  __int128 v36 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictionaryForRequest]);
  __int128 v37 = v5;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v6,  v5));

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleID]);
  __int128 v35 = v7;
  uint64_t v33 = objc_claimAutoreleasedReturnValue([v7 gameDescriptor]);
  uint64_t v38 = a1;
  id v9 = *(id *)(a1 + 40);
  if (!v9 || (id v9 = [v9 count]) == 0)
  {
    id v10 = (os_log_s *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v11 = (id)GKOSLoggers(v9);
      id v10 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
      sub_100067A10();
    }
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set", v33));
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  id v13 = *(id *)(a1 + 40);
  id v14 = [v13 countByEnumeratingWithState:&v47 objects:v56 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v48;
    do
    {
      for (i = 0LL; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v48 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = *(void **)(*((void *)&v47 + 1) + 8LL * (void)i);
        id v19 = [v18 length];
        if (v19 && (id v19 = [v8 length]) != 0)
        {
          v55[0] = @"GKPlayerAchievements";
          v55[1] = v8;
          v55[2] = v18;
          id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v55, 3LL));
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[GKResourceIdentifier resourceIdentifierForKeys:]( &OBJC_CLASS___GKResourceIdentifier,  "resourceIdentifierForKeys:",  v20));
          [v12 addObject:v21];
        }

        else
        {
          id v22 = (os_log_s *)os_log_GKGeneral;
          if (!os_log_GKGeneral)
          {
            id v23 = (id)GKOSLoggers(v19);
            id v22 = (os_log_s *)os_log_GKGeneral;
          }

          if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
          {
            uint64_t v24 = *(void *)(v38 + 40);
            *(_DWORD *)buf = 138412546;
            id v52 = v8;
            __int16 v53 = 2112;
            uint64_t v54 = v24;
            _os_log_fault_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_FAULT,  "================ GameKit - GKGameStatService requested a simulated crash.\n achievementsForPlayersAndGame:players:context:handler: got an invalid playerID from bundleID: %@, playerID s: %@ ================",  buf,  0x16u);
          }
        }
      }

      id v15 = [v13 countByEnumeratingWithState:&v47 objects:v56 count:16];
    }

    while (v15);
  }

  id v25 = *(void **)(v38 + 48);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v38 + 56) clientProxy]);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 replyQueue]);
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472LL;
  v39[2] = sub_100054EA0;
  void v39[3] = &unk_10026E4A0;
  id v40 = v12;
  id v41 = *(id *)(v38 + 48);
  id v28 = *(id *)(v38 + 64);
  uint64_t v29 = *(void *)(v38 + 56);
  id v42 = v34;
  uint64_t v43 = v29;
  id v44 = v35;
  id v45 = v28;
  uint64_t v46 = *(void *)(v38 + 72);
  id v30 = v35;
  id v31 = v34;
  id v32 = v12;
  [v25 performOnQueue:v27 block:v39];

  v36[2](v36);
}

void sub_100054EA0(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allObjects]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 _gkMapWithBlock:&stru_10026E478]);
  if ([v5 count])
  {
    id v6 = *(void **)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100055004;
    v12[3] = &unk_10026E4A0;
    id v13 = v6;
    id v14 = v5;
    id v18 = *(id *)(a1 + 72);
    id v7 = *(id *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    id v9 = *(void **)(a1 + 64);
    id v15 = v7;
    uint64_t v16 = v8;
    id v10 = v9;
    uint64_t v11 = *(void *)(a1 + 80);
    id v17 = v10;
    uint64_t v19 = v11;
    [v13 perform:v12];
  }

  v3[2](v3);
}

id sub_100054FC4(id a1, GKResourceIdentifier *a2, unint64_t a3)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[GKResourceIdentifier keys](a2, "keys", a3));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectAtIndexedSubscript:2]);

  return v4;
}

void sub_100055004(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"playerIDsToLoad"];
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = objc_retainBlock(*(id *)(a1 + 72));
  LODWORD(v5) = [v4 doesCallbackListExistFor:@"gk-get-player-achievements" parameters:v5 callback:v6];

  if ((_DWORD)v5)
  {
    [*(id *)(a1 + 32) setObject:&off_100287910 forKeyedSubscript:@"skipCallbacks"];
    v3[2](v3);
  }

  else
  {
    v19[0] = @"game";
    v19[1] = @"requested-player-ids";
    uint64_t v7 = *(void *)(a1 + 40);
    v20[0] = *(void *)(a1 + 48);
    v20[1] = v7;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  2LL));
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1000551F8;
    void v13[3] = &unk_10026CBA8;
    id v14 = *(id *)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 80);
    id v16 = v11;
    uint64_t v18 = v12;
    id v17 = v3;
    [v9 issueRequest:v8 bagKey:@"gk-get-player-achievements" clientProxy:v10 handler:v13];
  }
}

void sub_1000551F8(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (v7 && !v8)
  {
    id v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472LL;
    id v13 = sub_1000552EC;
    id v14 = &unk_10026C690;
    id v10 = *(void **)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    double v18 = a4;
    id v16 = v7;
    id v17 = *(id *)(a1 + 48);
    [v10 performOnManagedObjectContext:&v11];
  }

  *(double *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = a4;
  objc_msgSend(*(id *)(a1 + 32), "setError:", v9, v11, v12, v13, v14);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000552EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v21 = a3;
  uint64_t v24 = v5;
  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfilesWithPlayerIDs:inManagedObjectContext:",  *(void *)(a1 + 32),  v5));
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v20 _gkMapDictionaryWithKeyPath:@"playerID"]);
  id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 56)));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:@"results"]);
  uint64_t v22 = a1;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) achievementLists]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _gkMapDictionaryWithKeyPath:@"player.playerID"]);

  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v9 = v6;
  id v10 = [v9 countByEnumeratingWithState:&v26 objects:v32 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v27;
    do
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v27 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:@"player-id"]);
        if (v15)
        {
          id v16 = (GKAchievementListCacheObject *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v15]);
          if (!v16)
          {
            id v16 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKAchievementListCacheObject),  "initWithManagedObjectContext:",  v24);
            -[GKAchievementListCacheObject setGame:](v16, "setGame:", *(void *)(v22 + 48));
            id v17 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v15]);
            -[GKAchievementListCacheObject setPlayer:](v16, "setPlayer:", v17);
          }

          double v18 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:@"achievements"]);
          id v30 = @"results";
          id v31 = v18;
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v31,  &v30,  1LL));
          -[GKAchievementListCacheObject updateWithServerRepresentation:expirationDate:]( v16,  "updateWithServerRepresentation:expirationDate:",  v19,  v25);
        }
      }

      id v11 = [v9 countByEnumeratingWithState:&v26 objects:v32 count:16];
    }

    while (v11);
  }

  v21[2](v21);
}

void sub_1000555A4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"skipCallbacks"]);

  if (!v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"playerIDsToLoad"]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 retrieveAndClearCallbacks:@"gk-get-player-achievements" parameters:v4]);

    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v15;
      do
      {
        id v10 = 0LL;
        do
        {
          if (*(void *)v15 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v14 + 1) + 8LL * (void)v10);
          double v12 = *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
          id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error", (void)v14));
          (*(void (**)(uint64_t, void *, double))(v11 + 16))(v11, v13, v12);

          id v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v8);
    }
  }

id sub_1000557D4(id a1, GKPlayerInternal *a2, unint64_t a3)
{
  return -[GKPlayerInternal playerID](a2, "playerID", a3);
}

void sub_100055A04(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100055AB4;
  v9[3] = &unk_10026D568;
  id v10 = *(id *)(a1 + 64);
  id v11 = v3;
  id v8 = v3;
  [v4 loadAchievementsForGameDescriptor:v5 players:v6 context:v7 handler:v9];
}

uint64_t sub_100055AB4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100055AE4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100055BA8;
  void v6[3] = &unk_10026E350;
  id v7 = v2;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void **)(a1 + 56);
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = v5;
  id v11 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 72);
  [v7 perform:v6];
}

void sub_100055BA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v4];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v5)
  {
    v3[2](v3);
  }

  else
  {
    uint64_t v6 = *(void **)(a1 + 48);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) dictionaryForRequest]);
    uint64_t v8 = *(void *)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 72);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    _OWORD v10[2] = sub_100055CB0;
    v10[3] = &unk_10026E530;
    id v11 = *(id *)(a1 + 32);
    id v12 = v3;
    [v6 fetchAchievementsForGameDescriptor:v7 players:v8 context:v9 handler:v10];
  }
}

uint64_t sub_100055CB0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100055F70(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100056068;
  v12[3] = &unk_10026E598;
  void v12[4] = v7;
  uint64_t v9 = *(void *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v14 = v5;
  id v15 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 48);
  id v17 = v6;
  id v10 = v6;
  id v11 = v5;
  [v7 fetchAchievementsForGameDescriptor:v8 players:v9 context:v11 handler:v12];
}

void sub_100056068(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  id v9 = a2;
  if ((a3 & 1) == 0) {
    [*(id *)(a1 + 32) primeCacheWithAchievementDescriptions:*(void *)(a1 + 40) context:*(void *)(a1 + 48) gameDescriptor:*(void *)(a1 + 56) players:*(void *)(a1 + 64) missingPlayers:a4];
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy", v9));
  unsigned __int8 v8 = [v7 isDevSigned];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100056130;
  v11[3] = &unk_10026E570;
  unsigned __int8 v12 = v8;
  [v10 enumerateKeysAndObjectsUsingBlock:v11];
  [*(id *)(a1 + 40) setResult:v10];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

id sub_100056130(uint64_t a1, uint64_t a2, void *a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10005618C;
  v4[3] = &unk_10026E550;
  char v5 = *(_BYTE *)(a1 + 32);
  return [a3 enumerateObjectsUsingBlock:v4];
}

void sub_10005618C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!*(_BYTE *)(a1 + 32))
  {
    id v5 = [v3 releaseState];
    if (v5 != (id)1)
    {
      id v6 = (os_log_s *)os_log_GKGeneral;
      if (!os_log_GKGeneral)
      {
        id v7 = (id)GKOSLoggers(v5);
        id v6 = (os_log_s *)os_log_GKGeneral;
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
        sub_100067AAC();
      }
      [v4 setReleaseState:0];
    }
  }
}

void sub_10005621C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000564A0(_Unwind_Exception *a1)
{
}

void sub_1000564B8(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100056584;
  void v8[3] = &unk_10026E5C0;
  id v4 = *(void **)(a1 + 32);
  void v8[4] = *(void *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  id v10 = v5;
  uint64_t v12 = v6;
  id v11 = *(id *)(a1 + 32);
  id v7 = a2;
  [v4 performOnManagedObjectContext:v8];
  v7[2](v7);
}

void sub_100056584(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v59 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v5));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleIdentifier]);
  id v60 = v5;
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v8,  v5));

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 achievementLists]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](&OBJC_CLASS___NSMutableSet, "setWithSet:", v10));

  v58 = v6;
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v6 achievementLists]);
  [v11 intersectSet:v12];

  id v56 = v11;
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 anyObject]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 entries]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 _gkMapDictionaryWithKeyPath:@"identifier"]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v15));

  id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 entries]);
  double v18 = (void *)objc_claimAutoreleasedReturnValue([v17 _gkMapDictionaryWithKeyPath:@"groupIdentifier"]);
  [v16 addEntriesFromDictionary:v18];

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v9 achievementDescriptionList]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 entries]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 _gkMapDictionaryWithKeyPath:@"identifier"]);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v21));

  uint64_t v57 = v9;
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v9 achievementDescriptionList]);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 entries]);
  id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 _gkMapDictionaryWithKeyPath:@"groupIdentifier"]);
  [v22 addEntriesFromDictionary:v25];

  uint64_t v55 = v13;
  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v13 entries]);
  id v61 = [v26 mutableCopy];

  __int128 v27 = v22;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  id obj = *(id *)(a1 + 40);
  id v62 = v22;
  id v66 = [obj countByEnumeratingWithState:&v71 objects:v75 count:16];
  if (!v66) {
    goto LABEL_19;
  }
  uint64_t v65 = *(void *)v72;
  do
  {
    for (i = 0LL; i != v66; i = (char *)i + 1)
    {
      if (*(void *)v72 != v65) {
        objc_enumerationMutation(obj);
      }
      __int128 v29 = *(void **)(*((void *)&v71 + 1) + 8LL * (void)i);
      id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 identifier]);
      id v31 = (GKAchievementCacheObject *)objc_claimAutoreleasedReturnValue([v16 objectForKey:v30]);
      id v32 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKey:v30]);
      if (v32)
      {
        if (!v31)
        {
          id v31 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKAchievementCacheObject),  "initWithManagedObjectContext:",  v60);
          [v61 addObject:v31];
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 identifier]);
          -[GKAchievementCacheObject setIdentifier:](v31, "setIdentifier:", v33);

          __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v32 groupIdentifier]);
          -[GKAchievementCacheObject setGroupIdentifier:](v31, "setGroupIdentifier:", v34);
        }

        __int128 v67 = v29;
        __int128 v35 = (void *)objc_claimAutoreleasedReturnValue(-[GKAchievementCacheObject identifier](v31, "identifier"));
        __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v32 identifier]);
        if ([v35 isEqualToString:v36])
        {
          __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(-[GKAchievementCacheObject groupIdentifier](v31, "groupIdentifier"));
          uint64_t v38 = v16;
          uint64_t v39 = a1;
          id v40 = (void *)objc_claimAutoreleasedReturnValue([v32 groupIdentifier]);
          unsigned __int8 v64 = [v37 isEqualToString:v40];

          a1 = v39;
          id v16 = v38;
          __int128 v27 = v62;

          if ((v64 & 1) != 0) {
            goto LABEL_14;
          }
        }

        else
        {
        }

        id v41 = (void *)objc_claimAutoreleasedReturnValue([v32 identifier]);
        -[GKAchievementCacheObject setIdentifier:](v31, "setIdentifier:", v41);

        id v42 = (void *)objc_claimAutoreleasedReturnValue([v32 groupIdentifier]);
        -[GKAchievementCacheObject setGroupIdentifier:](v31, "setGroupIdentifier:", v42);

LABEL_14:
        __int128 v29 = v67;
      }

      -[GKAchievementCacheObject percentComplete](v31, "percentComplete");
      double v44 = v43;
      [v29 percentComplete];
      if (v45 > v44)
      {
        [v29 percentComplete];
        *(float *)&double v46 = v46;
        -[GKAchievementCacheObject setPercentComplete:](v31, "setPercentComplete:", v46);
        -[GKAchievementCacheObject setLastReportedDate:](v31, "setLastReportedDate:", *(void *)(a1 + 48));
        *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;
      }
    }

    id v66 = [obj countByEnumeratingWithState:&v71 objects:v75 count:16];
  }

  while (v66);
LABEL_19:

  [v55 setEntries:v61];
  if ([*(id *)(a1 + 40) count])
  {
    __int128 v47 = objc_alloc(&OBJC_CLASS___GKAchievementNetworkRequest);
    uint64_t v48 = *(void *)(a1 + 40);
    __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    __int128 v50 = (void *)objc_claimAutoreleasedReturnValue([v49 bundleIdentifier]);
    __int128 v51 = -[GKAchievementNetworkRequest initWithAchievements:bundleID:](v47, "initWithAchievements:bundleID:", v48, v50);

    id v52 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    __int16 v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    v68[0] = _NSConcreteStackBlock;
    v68[1] = 3221225472LL;
    v68[2] = sub_100056BDC;
    v68[3] = &unk_10026B2A0;
    id v69 = *(id *)(a1 + 56);
    uint64_t v54 = v59;
    v70 = v59;
    [v52 writeToNetwork:v51 clientProxy:v53 handler:v68];

    __int128 v27 = v62;
  }

  else
  {
    uint64_t v54 = v59;
    v59[2](v59);
  }
}

uint64_t sub_100056BDC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100056C0C(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    [v2 refreshContentsForDataType:8 userInfo:0];
  }

  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

void sub_100056E08(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100056EA4;
  void v8[3] = &unk_10026B608;
  id v5 = v4;
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v5;
  uint64_t v10 = v6;
  id v7 = a2;
  [v5 performOnManagedObjectContext:v8];
  v7[2](v7);
}

void sub_100056EA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v5));
  if (v7)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_1000570D8;
    v21[3] = &unk_10026B170;
    int8x16_t v18 = *(int8x16_t *)(a1 + 32);
    int8x16_t v22 = vextq_s8(v18, v18, 8uLL);
    [(id)v18.i64[0] perform:v21];
    unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 bundleIdentifier]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v9,  v5));

    [v7 expire];
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameRecordCacheObject recordForGame:playerProfile:]( &OBJC_CLASS___GKGameRecordCacheObject,  "recordForGame:playerProfile:",  v10,  v7));
    [v11 expire];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"game = %@ AND player = %@",  v10,  v7));
    +[GKCacheObject deleteObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKAchievementListCacheObject,  "deleteObjectsMatchingPredicate:context:",  v12,  v5);

    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
    id v14 = *(void **)(a1 + 32);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 replyQueue]);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_1000571D4;
    void v19[3] = &unk_10026B670;
    id v20 = v13;
    id v16 = v13;
    [v14 notifyOnQueue:v15 block:v19];
  }

  else
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError gkUnauthenticatedError](&OBJC_CLASS___NSError, "gkUnauthenticatedError"));
    [*(id *)(a1 + 32) setError:v17];
  }

  v6[2](v6);
}

void sub_1000570D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000571A8;
  void v7[3] = &unk_10026C6B8;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v6 = v3;
  [v4 issueRequest:0 bagKey:@"gk-reset-achievements" clientProxy:v5 handler:v7];
}

uint64_t sub_1000571A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1000571D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) refreshContentsForDataType:8 userInfo:0];
}

void sub_1000571E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10005741C(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000574C8;
  void v8[3] = &unk_10026B080;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = *(id *)(a1 + 32);
  id v7 = a2;
  [v4 perform:v8];
  v7[2](v7);
}

void sub_1000574C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100057584;
  void v8[3] = &unk_10026E5E8;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 loadScoresWithService:v5 context:v6 handler:v8];
}

uint64_t sub_100057584(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"result"];
  [*(id *)(a1 + 32) setError:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000575E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"result"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000578D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___GKScoreNetworkRequest);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);
  id v8 = -[GKScoreNetworkRequest initWithScores:bundleID:eligibleChallenges:]( v4,  "initWithScores:bundleID:eligibleChallenges:",  v5,  v7,  *(void *)(a1 + 48));

  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000579F8;
  v12[3] = &unk_10026B2A0;
  id v13 = *(id *)(a1 + 56);
  id v14 = v3;
  id v11 = v3;
  [v9 writeToNetwork:v8 clientProxy:v10 handler:v12];
}

uint64_t sub_1000579F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100057A28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100057E40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleIdentifier]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerID]);
  uint64_t v5 = (void *)v4;
  if (v2) {
    id v6 = +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"game.bundleID = %@ AND player.playerID = %@ AND set.identifier = %@",  v3,  v4,  *(void *)(a1 + 32));
  }
  else {
    id v6 = +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"game.bundleID = %@ AND player.playerID = %@ AND set.identifier = nil",  v3,  v4,  v17);
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKLeaderboardListCacheObject,  "firstObjectMatchingPredicate:context:",  v7,  *(void *)(a1 + 56)));
  id v18 = (id)objc_claimAutoreleasedReturnValue([v8 internalRepresentation]);
  if (*(void *)(a1 + 32))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictionaryForRequest]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v9,  *(void *)(a1 + 56)));

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 leaderboardSetWithIdentifier:*(void *)(a1 + 32)]);
    [*(id *)(a1 + 64) cleanUpLeaderboardTitles:v18 set:v11 context:*(void *)(a1 + 56)];
  }

  id v12 = [v8 isValid];
  if ((_DWORD)v12)
  {
    uint64_t v13 = [v8 expired] ^ 1;
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v8 game]);
    if ([v14 numberOfCategories])
    {
      id v15 = [v18 count];

      if (v15) {
        uint64_t v13 = v13;
      }
      else {
        uint64_t v13 = 0LL;
      }
    }

    else
    {
    }
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  uint64_t v16 = *(void *)(a1 + 72);
  if (v16) {
    (*(void (**)(uint64_t, id, uint64_t, id))(v16 + 16))(v16, v18, v13, v12);
  }
}

void sub_100058358(_Unwind_Exception *a1)
{
}

void sub_100058370(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictionaryForRequest]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v5, @"game");

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v6, @"player-id");

  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v7, @"set-name");
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v9 = *(void *)(a1 + 56);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) clientProxy]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100058518;
  v12[3] = &unk_10026E610;
  uint64_t v19 = *(void *)(a1 + 88);
  id v13 = *(id *)(a1 + 72);
  id v14 = *(id *)(a1 + 80);
  id v15 = *(id *)(a1 + 32);
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 48);
  id v18 = v3;
  id v11 = v3;
  [v8 issueRequest:v4 bagKey:v9 clientProxy:v10 handler:v12];
}

void sub_100058518(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v8 = a2;
  *(double *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = a4;
  [*(id *)(a1 + 32) setError:a3];
  if (v8 && !a3)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100058628;
    v9[3] = &unk_10026DD80;
    double v15 = a4;
    uint64_t v7 = *(void **)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 56);
    id v13 = *(id *)(a1 + 64);
    id v14 = v8;
    [v7 performBlockAndWait:v9];
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_100058628(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 72)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictionaryForRequest]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v3,  *(void *)(a1 + 40)));

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerID]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v5,  *(void *)(a1 + 40)));

  uint64_t v7 = objc_claimAutoreleasedReturnValue([v4 leaderboardSetWithIdentifier:*(void *)(a1 + 56)]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 defaultCategory]);

  if (!v8)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) objectForKey:@"default-category-name"]);
    [v4 setDefaultCategory:v9];
  }

  id v10 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKLeaderboardListCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 40));
  __int128 v35 = v4;
  -[GKLeaderboardListCacheObject setGame:](v10, "setGame:", v4);
  __int128 v34 = (void *)v6;
  -[GKLeaderboardListCacheObject setPlayer:](v10, "setPlayer:", v6);
  id v31 = (void *)v7;
  -[GKLeaderboardListCacheObject setSet:](v10, "setSet:", v7);
  id v32 = (void *)v2;
  uint64_t v33 = v10;
  -[GKLeaderboardListCacheObject updateWithServerRepresentation:expirationDate:]( v10,  "updateWithServerRepresentation:expirationDate:",  *(void *)(a1 + 64),  v2);
  id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) objectForKeyedSubscript:@"results"]);
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  id obj = v12;
  id v13 = [v12 countByEnumeratingWithState:&v43 objects:v48 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v44;
    do
    {
      for (i = 0LL; i != v14; i = (char *)i + 1)
      {
        if (*(void *)v44 != v15) {
          objc_enumerationMutation(obj);
        }
        id v17 = *(void **)(*((void *)&v43 + 1) + 8LL * (void)i);
        id v18 = (id)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"global-alltime-info"]);
        if (!v18) {
          id v18 = v17;
        }
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"base-leaderboard-id"]);
        if (!v19) {
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"category-name"]);
        }
        -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v17, v19);
      }

      id v14 = [obj countByEnumeratingWithState:&v43 objects:v48 count:16];
    }

    while (v14);
  }

  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  id v36 = (id)objc_claimAutoreleasedReturnValue(-[GKLeaderboardListCacheObject entries](v10, "entries"));
  id v20 = [v36 countByEnumeratingWithState:&v39 objects:v47 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v38 = *(void *)v40;
    do
    {
      for (j = 0LL; j != v21; j = (char *)j + 1)
      {
        if (*(void *)v40 != v38) {
          objc_enumerationMutation(v36);
        }
        id v23 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)j);
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
        id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerID]);
        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v23 baseLeaderboardID]);
        __int128 v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"game.bundleID = %@ AND player.playerID = %@ AND baseLeaderboardID = %@ AND isPrimary == YES",  v24,  v25,  v26));

        __int128 v28 = (GKLeaderboardCacheObject *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKLeaderboardCacheObject,  "firstObjectMatchingPredicate:context:",  v27,  *(void *)(a1 + 40)));
        if (!v28)
        {
          __int128 v28 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKLeaderboardCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 40));
          -[GKLeaderboardCacheObject setGame:](v28, "setGame:", v35);
          -[GKLeaderboardCacheObject setPlayer:](v28, "setPlayer:", v34);
        }

        __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v23 baseLeaderboardID]);
        id v30 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v11, "objectForKeyedSubscript:", v29));
        -[GKLeaderboardCacheObject updateWithServerRepresentation:](v28, "updateWithServerRepresentation:", v30);

        [v23 setLeaderboard:v28];
      }

      id v21 = [v36 countByEnumeratingWithState:&v39 objects:v47 count:16];
    }

    while (v21);
  }
}

void sub_100058AA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

void sub_100058FA8(_Unwind_Exception *a1)
{
}

void sub_100058FC0(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v2));

  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 internalRepresentationWithPieces:0]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100059044(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 6LL, 0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_10005909C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 17LL, 0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_1000590F4(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (*(void *)(a1 + 32) && (uint64_t v4 = *(void **)(a1 + 40)) != 0LL)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_100059218;
    void v7[3] = &unk_10026E350;
    uint64_t v5 = *(void **)(a1 + 48);
    void v7[4] = *(void *)(a1 + 56);
    id v8 = v4;
    id v9 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 64);
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 72);
    [v5 perform:v7];
    v3[2](v3);
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  17LL,  0LL));
    [*(id *)(a1 + 48) setError:v6];
  }
}

void sub_100059218(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) context]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100059338;
  void v13[3] = &unk_10026E700;
  id v9 = *(id *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(a1 + 40);
  id v14 = v9;
  uint64_t v15 = v10;
  id v16 = v11;
  id v17 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  id v19 = *(id *)(a1 + 72);
  id v20 = v3;
  id v12 = v3;
  [v4 fetchLeaderboardsForGameDescriptor:v5 player:v6 setIdentifier:v7 context:v8 handler:v13];
}

void sub_100059338(uint64_t a1, void *a2, char a3, char a4)
{
  id v7 = a2;
  if ((a3 & 1) == 0)
  {
    v35[0] = 0LL;
    v35[1] = v35;
    v35[2] = 0x2020000000LL;
    char v36 = 0;
    id v8 = *(void **)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameStatService.m",  1545LL,  "-[GKGameStatService getLeaderboardsForGameDescriptor:player:setIdentifier:handler:]_block_invoke_4"));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 transactionGroupWithName:v9]);

    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    void v28[2] = sub_1000595D8;
    v28[3] = &unk_10026E688;
    id v11 = *(void **)(a1 + 48);
    void v28[4] = *(void *)(a1 + 40);
    id v29 = v11;
    id v30 = *(id *)(a1 + 56);
    id v31 = *(id *)(a1 + 64);
    id v32 = *(id *)(a1 + 32);
    id v12 = v10;
    id v33 = v12;
    __int128 v34 = v35;
    [v12 perform:v28];
    if ((a4 & 1) != 0)
    {
      uint64_t v13 = *(void *)(a1 + 72);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      void v19[2] = sub_100059984;
      void v19[3] = &unk_10026E058;
      void v19[4] = *(void *)(a1 + 40);
      void v19[5] = v35;
      [v12 notifyOnQueue:v13 block:v19];
    }

    else
    {
      id v14 = *(void **)(a1 + 32);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      void v20[2] = sub_10005972C;
      v20[3] = &unk_10026E6D8;
      id v21 = v12;
      id v22 = *(id *)(a1 + 72);
      id v15 = *(id *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      id v17 = *(void **)(a1 + 48);
      id v23 = v15;
      uint64_t v24 = v16;
      id v25 = v17;
      id v26 = *(id *)(a1 + 56);
      id v27 = *(id *)(a1 + 64);
      [v14 perform:v20];
    }

    _Block_object_dispose(v35, 8);
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) updateSigningStatusIfChanged:v7]);
  [*(id *)(a1 + 32) setObject:v18 forKeyedSubscript:@"leaderboards"];

  (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

void sub_1000595C0(_Unwind_Exception *a1)
{
}

void sub_1000595D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) context]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000596B8;
  v12[3] = &unk_10026E660;
  id v9 = *(id *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  id v14 = v3;
  uint64_t v15 = v10;
  id v13 = v9;
  id v11 = v3;
  [v4 loadLeaderboardsForGameDescriptor:v5 player:v6 setIdentifier:v7 context:v8 bagKey:@"gk-get-leaderboard-categories" handler:v12];
}

void sub_1000596B8(void *a1, void *a2, double a3)
{
  uint64_t v5 = (void *)a1[4];
  id v8 = a2;
  [v5 setError:v8];
  BOOL v7 = a3 > 0.0 && v8 == 0LL;
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = v7;
  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_10005972C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_100059818;
  v10[3] = &unk_10026BF68;
  id v11 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = *(void **)(a1 + 64);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v8;
  id v15 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 80);
  id v17 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v5 block:v10];
}

void sub_100059818(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    uint64_t v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 72);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_100059934;
    v11[3] = &unk_10026E6B0;
    id v9 = *(id *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 48);
    id v12 = v9;
    uint64_t v13 = v10;
    id v14 = *(id *)(a1 + 80);
    [v4 fetchLeaderboardsForGameDescriptor:v5 player:v6 setIdentifier:v7 context:v8 handler:v11];
  }

uint64_t sub_100059934(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) updateSigningStatusIfChanged:a2]);
  [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:@"leaderboards"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100059984(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    uint64_t v4 = @"scroll";
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
    uint64_t v5 = v2;
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));
    [v1 refreshContentsForDataType:9 userInfo:v3];
  }

void sub_100059A5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"leaderboards"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100059C6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v17[0] = @"timestamp";
  uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSDate _gkServerTimestamp](&OBJC_CLASS___NSDate, "_gkServerTimestamp"));
  uint64_t v5 = (void *)v4;
  v17[1] = @"category";
  uint64_t v6 = *(const __CFString **)(a1 + 32);
  if (!v6) {
    uint64_t v6 = &stru_10027B720;
  }
  v18[0] = v4;
  v18[1] = v6;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  2LL));

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100059E04;
  void v13[3] = &unk_10026D220;
  id v14 = *(id *)(a1 + 48);
  int8x16_t v12 = *(int8x16_t *)(a1 + 32);
  id v10 = (id)v12.i64[0];
  int8x16_t v15 = vextq_s8(v12, v12, 8uLL);
  id v16 = v3;
  id v11 = v3;
  [v8 issueRequest:v7 bagKey:@"gk-set-default-leaderboard" clientProxy:v9 handler:v13];
}

void sub_100059E04(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v8 = v4;
  if (!v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100059EDC;
    v9[3] = &unk_10026BEA0;
    int8x16_t v7 = *(int8x16_t *)(a1 + 32);
    id v6 = (id)v7.i64[0];
    int8x16_t v10 = vextq_s8(v7, v7, 8uLL);
    id v11 = *(id *)(a1 + 48);
    [v5 performBlockAndWait:v9];

    id v4 = 0LL;
  }

  objc_msgSend(*(id *)(a1 + 32), "setError:", v4, *(_OWORD *)&v7);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100059EDC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 gameDescriptor]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v3,  v4));

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v5));

  int8x16_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameRecordCacheObject recordForGame:playerProfile:]( &OBJC_CLASS___GKGameRecordCacheObject,  "recordForGame:playerProfile:",  v8,  v6));
  [v7 setDefaultLeaderboardIdentifier:*(void *)(a1 + 48)];
}

void sub_100059FC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10005A130(uint64_t a1, void *a2, void *a3)
{
  uint64_t v10 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a2 lastObject]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 defaultLeaderboardIdentifier]);
  uint64_t v7 = v10 | v6;

  if (!v7) {
    uint64_t v10 = objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  16LL,  0LL));
  }
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 defaultLeaderboardIdentifier]);
  (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))(v8, v9, v10);
}

void sub_10005A3E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v2,  v3));

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 leaderboardSetList]);
  unsigned int v6 = [v5 isValid];
  char v7 = v6;
  if (!v6
    || (uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 internalRepresentation]),
        [*(id *)(a1 + 40) setObject:v8 forKeyedSubscript:@"sets"],
        v8,
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 expirationDate]),
        [v9 timeIntervalSinceNow],
        double v11 = v10,
        v9,
        v11 <= 0.0))
  {
    int8x16_t v12 = *(void **)(a1 + 40);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameStatService.m",  1669LL,  "-[GKGameStatService getLeaderboardSetsForGameDescriptor:handler:]_block_invoke"));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 transactionGroupWithName:v13]);

    uint64_t v15 = *(void *)(a1 + 32);
    id v31 = @"game";
    uint64_t v32 = v15;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_10005A660;
    void v25[3] = &unk_10026CA80;
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
    uint64_t v17 = *(void *)(a1 + 48);
    id v26 = v16;
    uint64_t v27 = v17;
    id v18 = v14;
    id v28 = v18;
    id v29 = v4;
    char v30 = v7;
    [v18 perform:v25];
    if ((v7 & 1) == 0)
    {
      id v19 = *(void **)(a1 + 40);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      void v22[2] = sub_10005A944;
      v22[3] = &unk_10026B080;
      id v23 = v18;
      int8x16_t v21 = *(int8x16_t *)(a1 + 40);
      id v20 = (id)v21.i64[0];
      int8x16_t v24 = vextq_s8(v21, v21, 8uLL);
      [v19 perform:v22];
    }
  }
}

void sub_10005A660(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = *(void *)(a1 + 32);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10005A754;
  v9[3] = &unk_10026B520;
  id v10 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  char v13 = *(_BYTE *)(a1 + 64);
  id v11 = v7;
  id v12 = v3;
  id v8 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-get-leaderboard-sets" clientProxy:v6 handler:v9];
}

void sub_10005A754(uint64_t a1, void *a2, void *a3, double a4)
{
  id v9 = a2;
  id v7 = a3;
  if (v9 && !v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    id v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472LL;
    char v13 = sub_10005A860;
    id v14 = &unk_10026E728;
    id v15 = *(id *)(a1 + 40);
    double v18 = a4;
    id v16 = *(id *)(a1 + 32);
    id v17 = v9;
    char v19 = *(_BYTE *)(a1 + 56);
    [v8 performBlockAndWait:&v11];
  }

  objc_msgSend(*(id *)(a1 + 32), "setError:", v7, v9, v11, v12, v13, v14);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10005A860(uint64_t a1)
{
  unsigned int v6 = (GKLeaderboardSetListCacheObject *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) leaderboardSetList]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 56)));
  if (!v6)
  {
    id v3 = objc_alloc(&OBJC_CLASS___GKLeaderboardSetListCacheObject);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
    unsigned int v6 = -[GKCacheObject initWithManagedObjectContext:](v3, "initWithManagedObjectContext:", v4);

    [*(id *)(a1 + 32) setLeaderboardSetList:v6];
  }

  -[GKLeaderboardSetListCacheObject updateWithServerRepresentation:expirationDate:]( v6,  "updateWithServerRepresentation:expirationDate:",  *(void *)(a1 + 48),  v2);
  if (!*(_BYTE *)(a1 + 64))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[GKListCacheObject internalRepresentation](v6, "internalRepresentation"));
    [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:@"sets"];
  }
}

void sub_10005A944(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10005AA1C;
  void v8[3] = &unk_10026B148;
  id v9 = a1[6];
  id v10 = a1[4];
  id v11 = v3;
  id v7 = v3;
  [v4 notifyOnQueue:v6 block:v8];
}

uint64_t sub_10005AA1C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"sets"]);
  [*(id *)(a1 + 32) setObject:v2 forKeyedSubscript:@"sets"];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v3];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10005AA98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"sets"]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);
  }

void sub_10005AE18(uint64_t a1, void *a2)
{
  id v3 = a2;
  v17[0] = @"game";
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictionaryForRequest]);
  v18[0] = v4;
  v17[1] = @"player-id";
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerID]);
  void v17[2] = @"base-leaderboard-ids";
  uint64_t v6 = *(void *)(a1 + 48);
  v18[1] = v5;
  void v18[2] = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  3LL));

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10005AFD4;
  v11[3] = &unk_10026E750;
  id v12 = *(id *)(a1 + 64);
  id v13 = *(id *)(a1 + 72);
  id v14 = *(id *)(a1 + 32);
  id v15 = *(id *)(a1 + 40);
  id v16 = v3;
  id v10 = v3;
  [v8 issueRequest:v7 bagKey:@"gk-get-leaderboards" clientProxy:v9 handler:v11];
}

void sub_10005AFD4(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v6 && !a3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_10005B0C8;
    void v7[3] = &unk_10026B938;
    uint64_t v5 = *(void **)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 56);
    id v11 = v6;
    id v12 = *(id *)(a1 + 32);
    [v5 performBlockAndWait:v7];
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10005B0C8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictionaryForRequest]);
  double v18 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v2,  *(void *)(a1 + 40)));

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerID]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v3,  *(void *)(a1 + 40)));

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:@"results"]);
  uint64_t v5 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v4 count]);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id obj = v4;
  id v6 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v21;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v21 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"base-leaderboard-id"]);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerID]);
        id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"game.bundleID = %@ AND player.playerID = %@ AND baseLeaderboardID = %@ AND isPrimary == YES",  v12,  v13,  v11));

        id v15 = (GKLeaderboardCacheObject *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKLeaderboardCacheObject,  "firstObjectMatchingPredicate:context:",  v14,  *(void *)(a1 + 40)));
        if (!v15)
        {
          id v15 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKLeaderboardCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 40));
          -[GKLeaderboardCacheObject setGame:](v15, "setGame:", v18);
          -[GKLeaderboardCacheObject setPlayer:](v15, "setPlayer:", v17);
        }

        -[GKLeaderboardCacheObject updateWithServerRepresentation:](v15, "updateWithServerRepresentation:", v10);
        id v16 = (void *)objc_claimAutoreleasedReturnValue(-[GKLeaderboardCacheObject internalRepresentation](v15, "internalRepresentation"));
        -[NSMutableArray addObject:](v5, "addObject:", v16);
      }

      id v7 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    }

    while (v7);
  }

  [*(id *)(a1 + 64) setResult:v5];
}

void sub_10005B378(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

id sub_10005B48C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 baseLeaderboardID]);
  LODWORD(v4) = [v4 containsObject:v5];

  if ((_DWORD)v4) {
    id v6 = v3;
  }
  else {
    id v6 = 0LL;
  }

  return v6;
}

void sub_10005B588(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(_BYTE *)(a1 + 32))
  {
    id v5 = v3;
    BOOL v4 = [v3 releaseState] == (id)1;
    id v3 = v5;
    if (!v4)
    {
      [v5 setReleaseState:0];
      id v3 = v5;
    }
  }
}

LABEL_14:
}
}
}

  id v15 = +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  3LL,  0LL);
  if (a4) {
LABEL_15:
  }
    *a4 = v15;
  return v13;
}

  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

void sub_10005BB00(_Unwind_Exception *a1)
{
}

void sub_10005BB18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 17LL, 0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_10005BB70(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v2));

  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 internalRepresentationWithPieces:0]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10005BBF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 6LL, 0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_10005BC4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 17LL, 0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_10005BCA4(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10005BDA4;
  void v6[3] = &unk_10026E6D8;
  uint64_t v4 = *(void **)(a1 + 32);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  id v10 = *(id *)(a1 + 32);
  id v11 = *(id *)(a1 + 72);
  id v12 = *(id *)(a1 + 80);
  id v5 = a2;
  [v4 perform:v6];
  v5[2](v5);
}

void sub_10005BDA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) context]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10005BED8;
  void v13[3] = &unk_10026E888;
  id v9 = *(id *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(a1 + 40);
  id v14 = v9;
  uint64_t v15 = v10;
  id v16 = v11;
  id v17 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  id v19 = *(id *)(a1 + 72);
  id v20 = *(id *)(a1 + 80);
  id v21 = v3;
  id v12 = v3;
  [v4 fetchLeaderboardsForGameDescriptor:v5 player:v6 setIdentifier:v7 context:v8 handler:v13];
}

void sub_10005BED8(uint64_t a1, void *a2, char a3, int a4)
{
  id v7 = a2;
  if ((a3 & 1) != 0)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameStatService leaderboards:filteredWithIDs:]( &OBJC_CLASS___GKGameStatService,  "leaderboards:filteredWithIDs:",  v7,  *(void *)(a1 + 72)));

    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472LL;
    v46[2] = sub_10005C8C4;
    v46[3] = &unk_10026E810;
    id v9 = (id)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v8 count]));
    id v47 = v9;
    [v8 enumerateObjectsUsingBlock:v46];
    if ([v9 count])
    {
      uint64_t v65 = 0LL;
      id v66 = &v65;
      uint64_t v67 = 0x2020000000LL;
      char v68 = 0;
      uint64_t v10 = *(void **)(a1 + 32);
      id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameStatService.m",  1913LL,  "-[GKGameStatService getLeaderboardsForGameDescriptor:player:leaderboardIDs:setIdentifier:handler :]_block_invoke_4"));
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 transactionGroupWithName:v11]);

      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472LL;
      v39[2] = sub_10005C950;
      void v39[3] = &unk_10026E688;
      void v39[4] = *(void *)(a1 + 40);
      id v40 = v9;
      id v41 = *(id *)(a1 + 48);
      id v42 = *(id *)(a1 + 56);
      id v43 = *(id *)(a1 + 32);
      id v13 = v12;
      id v44 = v13;
      __int128 v45 = &v65;
      [v13 perform:v39];
      if ([*(id *)(a1 + 72) count])
      {
        id v14 = *(void **)(a1 + 32);
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3221225472LL;
        v33[2] = sub_10005CAB0;
        v33[3] = &unk_10026BB28;
        id v34 = v13;
        id v35 = *(id *)(a1 + 80);
        id v36 = *(id *)(a1 + 32);
        id v15 = v8;
        uint64_t v16 = *(void *)(a1 + 40);
        id v37 = v15;
        uint64_t v38 = v16;
        [v14 perform:v33];
      }

      else
      {
        uint64_t v29 = *(void *)(a1 + 80);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472LL;
        v32[2] = sub_10005CE94;
        v32[3] = &unk_10026E058;
        void v32[4] = *(void *)(a1 + 40);
        void v32[5] = &v65;
        [v13 notifyOnQueue:v29 block:v32];
      }

      _Block_object_dispose(&v65, 8);
    }

    char v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) updateSigningStatusIfChanged:v8]);
    [*(id *)(a1 + 32) setObject:v30 forKeyedSubscript:@"leaderboards"];

    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
  }

  else
  {
    uint64_t v65 = 0LL;
    id v66 = &v65;
    uint64_t v67 = 0x2020000000LL;
    char v68 = 0;
    id v17 = *(void **)(a1 + 32);
    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameStatService.m",  1856LL,  "-[GKGameStatService getLeaderboardsForGameDescriptor:player:leaderboardIDs:setIdentifier:handler:]_block_invoke_4"));
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 transactionGroupWithName:v18]);

    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472LL;
    v58[2] = sub_10005C470;
    v58[3] = &unk_10026E688;
    id v20 = *(void **)(a1 + 48);
    v58[4] = *(void *)(a1 + 40);
    id v59 = v20;
    id v60 = *(id *)(a1 + 56);
    id v61 = *(id *)(a1 + 64);
    id v62 = *(id *)(a1 + 32);
    id v21 = v19;
    id v63 = v21;
    unsigned __int8 v64 = &v65;
    [v21 perform:v58];
    if (a4 && ![*(id *)(a1 + 72) count])
    {
      uint64_t v31 = *(void *)(a1 + 80);
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472LL;
      void v48[2] = sub_10005C86C;
      v48[3] = &unk_10026E058;
      v48[4] = *(void *)(a1 + 40);
      v48[5] = &v65;
      [v21 notifyOnQueue:v31 block:v48];
    }

    else
    {
      __int128 v22 = *(void **)(a1 + 32);
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 3221225472LL;
      v49[2] = sub_10005C5C4;
      v49[3] = &unk_10026E7E8;
      id v50 = v21;
      id v51 = *(id *)(a1 + 80);
      id v23 = *(id *)(a1 + 32);
      uint64_t v24 = *(void *)(a1 + 40);
      id v25 = *(void **)(a1 + 48);
      id v52 = v23;
      uint64_t v53 = v24;
      id v54 = v25;
      id v55 = *(id *)(a1 + 56);
      id v56 = *(id *)(a1 + 64);
      id v57 = *(id *)(a1 + 72);
      [v22 perform:v49];
    }

    id v26 = *(void **)(a1 + 40);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameStatService leaderboards:filteredWithIDs:]( &OBJC_CLASS___GKGameStatService,  "leaderboards:filteredWithIDs:",  v7,  *(void *)(a1 + 72)));
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v26 updateSigningStatusIfChanged:v27]);
    [*(id *)(a1 + 32) setObject:v28 forKeyedSubscript:@"leaderboards"];

    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
    _Block_object_dispose(&v65, 8);
    id v8 = v7;
  }
}

void sub_10005C454(_Unwind_Exception *a1)
{
}

void sub_10005C470(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) context]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10005C550;
  v12[3] = &unk_10026E660;
  id v9 = *(id *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  id v14 = v3;
  uint64_t v15 = v10;
  id v13 = v9;
  id v11 = v3;
  [v4 loadLeaderboardsForGameDescriptor:v5 player:v6 setIdentifier:v7 context:v8 bagKey:@"gk-get-leaderboards" handler:v12];
}

void sub_10005C550(void *a1, void *a2, double a3)
{
  uint64_t v5 = (void *)a1[4];
  id v8 = a2;
  [v5 setError:v8];
  BOOL v7 = a3 > 0.0 && v8 == 0LL;
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = v7;
  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_10005C5C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_10005C6C4;
  v10[3] = &unk_10026E7C0;
  id v11 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = *(void **)(a1 + 64);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v8;
  id v15 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 80);
  id v17 = *(id *)(a1 + 88);
  id v18 = v3;
  id v9 = v3;
  [v4 notifyOnQueue:v5 block:v10];
}

void sub_10005C6C4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
  }

  else
  {
    uint64_t v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 72);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10005C7F4;
    v11[3] = &unk_10026E798;
    id v9 = *(id *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 48);
    id v12 = v9;
    uint64_t v13 = v10;
    id v14 = *(id *)(a1 + 80);
    id v15 = *(id *)(a1 + 88);
    [v4 fetchLeaderboardsForGameDescriptor:v5 player:v6 setIdentifier:v7 context:v8 handler:v11];
  }

uint64_t sub_10005C7F4(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameStatService leaderboards:filteredWithIDs:]( &OBJC_CLASS___GKGameStatService,  "leaderboards:filteredWithIDs:",  a2,  *(void *)(a1 + 48)));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 updateSigningStatusIfChanged:v4]);
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"leaderboards"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10005C86C(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    [v1 refreshContentsForDataType:9 userInfo:&off_100288480];
  }

void sub_10005C8C4(uint64_t a1, void *a2)
{
  id v8 = a2;
  if ([v8 type] == (id)1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v8 nextStartDate]);
    [v3 timeIntervalSinceNow];
    double v5 = v4;

    if (v5 <= 0.0)
    {
      uint64_t v6 = *(void **)(a1 + 32);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v8 baseLeaderboardID]);
      [v6 addObject:v7];
    }
  }
}

void sub_10005C950(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) context]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10005CA28;
  v12[3] = &unk_10026E838;
  id v9 = *(id *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  id v14 = v3;
  uint64_t v15 = v10;
  id v13 = v9;
  id v11 = v3;
  [v4 updateLeaderboardsWithIDs:v5 gameDescriptor:v6 player:v7 context:v8 handler:v12];
}

void sub_10005CA28(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v7 = a3;
  id v6 = a2;
  [v5 setError:v7];
  [*(id *)(a1 + 32) setResult:v6];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v7 == 0LL;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10005CAB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10005CB7C;
  v9[3] = &unk_10026B0A8;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v3;
  id v8 = v3;
  [v4 notifyOnQueue:v5 block:v9];
}

uint64_t sub_10005CB7C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (!v3)
  {
    double v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) result]);
    id v6 = [v5 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v25;
      do
      {
        for (i = 0LL; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v25 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 baseLeaderboardID]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v10, v11);
        }

        id v7 = [v5 countByEnumeratingWithState:&v24 objects:v28 count:16];
      }

      while (v7);
    }

    id v12 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(a1 + 48) count]);
    uint64_t v13 = *(void **)(a1 + 48);
    id v18 = _NSConcreteStackBlock;
    uint64_t v19 = 3221225472LL;
    id v20 = sub_10005CDAC;
    id v21 = &unk_10026E860;
    __int128 v22 = v12;
    id v23 = v4;
    id v14 = v4;
    uint64_t v15 = v12;
    [v13 enumerateObjectsUsingBlock:&v18];
    id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "updateSigningStatusIfChanged:", v15, v18, v19, v20, v21));
    [*(id *)(a1 + 32) setObject:v16 forKeyedSubscript:@"leaderboards"];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10005CDAC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  double v4 = *(void **)(a1 + 40);
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 baseLeaderboardID]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v6]);
  uint64_t v8 = (void *)v7;
  if (v7) {
    id v9 = (id)v7;
  }
  else {
    id v9 = v5;
  }
  [v3 addObject:v9];

  id v10 = *(void **)(a1 + 40);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 baseLeaderboardID]);

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v11]);
  if (v12)
  {
    id v14 = (void *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v15 = (id)GKOSLoggers(v13);
      id v14 = (void *)os_log_GKGeneral;
    }

    if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_DEBUG)) {
      sub_100067C04(v14, v12);
    }
  }
}

void sub_10005CE94(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    [v1 refreshContentsForDataType:9 userInfo:&off_1002884A8];
  }

void sub_10005CEEC(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v4);
    }
    id v6 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100067CC4(v2, v6);
    }
  }

  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"leaderboards"]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerID]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) bundleIdentifier]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10005D034;
  v11[3] = &unk_10026E8B0;
  id v13 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 32);
  [v7 mixinHasActiveChallengesWithLeaderboards:v8 playerID:v9 bundleID:v10 completionHandler:v11];
}

void sub_10005D034(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 error]);
  (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v4, v5);
}

uint64_t sub_10005D238(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10005D248(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100067D48();
    }
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 _gkDistinctValuesForKeyPath:@"leaderboardID"]);
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    id v10 = a1[4];
    id v11 = [v10 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v23;
      do
      {
        for (i = 0LL; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v23 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 baseLeaderboardID]);
          objc_msgSend(v15, "setHasActiveChallenges:", objc_msgSend(v9, "containsObject:", v16));
        }

        id v12 = [v10 countByEnumeratingWithState:&v22 objects:v26 count:16];
      }

      while (v12);
    }
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  id v18 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v17 replyQueue]);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  void v19[2] = sub_10005D474;
  void v19[3] = &unk_10026B030;
  id v21 = a1[6];
  id v20 = a1[4];
  dispatch_async(v18, v19);
}

uint64_t sub_10005D474(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10005D544(void *a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"recordID = %@",  a1[4]));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKLeaderboardCacheObject,  "firstObjectMatchingPredicate:context:",  v3,  a1[5]));
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10005D8D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v19[0] = @"game";
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictionaryForRequest]);
  v20[0] = v4;
  v19[1] = @"player-id";
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerID]);
  v20[1] = v5;
  void v19[2] = @"leaderboard-id";
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) identifier]);
  void v20[2] = v6;
  v20[3] = &off_100287910;
  void v19[3] = @"count";
  void v19[4] = @"player-played-in-only";
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)));
  void v20[4] = v7;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  5LL));

  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10005DAFC;
  v12[3] = &unk_10026CD18;
  id v13 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 72);
  id v15 = *(id *)(a1 + 32);
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 48);
  id v18 = v3;
  id v11 = v3;
  [v9 issueRequest:v8 bagKey:@"gk-get-previous-leaderboard-instances" clientProxy:v10 handler:v12];
}

void sub_10005DAFC(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v6 && !a3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_10005DC04;
    void v7[3] = &unk_10026BE78;
    id v5 = *(void **)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 56);
    id v11 = v6;
    id v12 = *(id *)(a1 + 64);
    id v13 = *(id *)(a1 + 32);
    [v5 performBlockAndWait:v7];
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_10005DC04(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictionaryForRequest]);
  id v12 = (id)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v2,  *(void *)(a1 + 40)));

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v3,  *(void *)(a1 + 40)));

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:@"results"]);
  if ([v5 count])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndexedSubscript:0]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) recordID]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"recordID = %@",  v7));

    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKLeaderboardCacheObject,  "firstObjectMatchingPredicate:context:",  v8,  *(void *)(a1 + 40)));
    id v10 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKLeaderboardCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 40));
    -[GKLeaderboardCacheObject setGame:](v10, "setGame:", v12);
    -[GKLeaderboardCacheObject setPlayer:](v10, "setPlayer:", v4);
    -[GKLeaderboardCacheObject updateWithServerRepresentation:](v10, "updateWithServerRepresentation:", v6);
    -[GKLeaderboardCacheObject setIsPrimary:](v10, "setIsPrimary:", 0LL);
    [v9 setPreviousInstance:v10];
    [v9 setPreviousInstanceLoaded:1];
    id v11 = (void *)objc_claimAutoreleasedReturnValue(-[GKLeaderboardCacheObject internalRepresentation](v10, "internalRepresentation"));
    [*(id *)(a1 + 72) setResult:v11];
  }
}

void sub_10005DDC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10005E334(_Unwind_Exception *a1)
{
}

void sub_10005E34C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 17LL, 0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_10005E3A4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v2));

  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 internalRepresentationWithPieces:0]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10005E428(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 6LL, 0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_10005E480(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 17LL, 0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_10005E4D8(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10005E5B0;
  void v6[3] = &unk_10026BB28;
  uint64_t v4 = *(void **)(a1 + 32);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  id v5 = a2;
  [v4 perform:v6];
  v5[2](v5);
}

void sub_10005E5B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordID]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10005E6BC;
  v11[3] = &unk_10026E900;
  id v7 = *(id *)(a1 + 48);
  id v17 = v3;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v12 = v7;
  uint64_t v13 = v8;
  id v14 = v9;
  id v15 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  id v10 = v3;
  [v4 fetchLeaderboardWithRecordID:v5 context:v6 handler:v11];
}

void sub_10005E6BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 previousInstanceLoaded])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 previousInstance]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 internalRepresentation]);

    [*(id *)(a1 + 32) setResult:v5];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    id v9 = *(void **)(a1 + 40);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_10005E81C;
    void v14[3] = &unk_10026E8D8;
    id v15 = *(id *)(a1 + 32);
    id v11 = *(id *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void **)(a1 + 48);
    id v20 = v11;
    uint64_t v16 = v12;
    id v17 = v13;
    id v18 = *(id *)(a1 + 56);
    id v19 = *(id *)(a1 + 64);
    [v9 loadPreviousInstanceForLeaderboard:v6 gameDescriptor:v7 player:v8 playerPlayedIn:1 context:v10 handler:v14];
  }
}

void sub_10005E81C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v5)
  {
    [*(id *)(a1 + 32) setResult:v5];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    id v9 = *(void **)(a1 + 40);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10005E924;
    v11[3] = &unk_10026E5E8;
    id v12 = *(id *)(a1 + 32);
    id v13 = *(id *)(a1 + 72);
    [v9 loadPreviousInstanceForLeaderboard:v6 gameDescriptor:v7 player:v8 playerPlayedIn:0 context:v10 handler:v11];
  }
}

uint64_t sub_10005E924(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  [v5 setError:a3];
  [*(id *)(a1 + 32) setResult:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10005E97C(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v4);
    }
    id v6 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100067E68((uint64_t)v2, v6);
    }
  }

  uint64_t v7 = objc_claimAutoreleasedReturnValue([*v2 result]);
  uint64_t v8 = (void *)v7;
  if (v7)
  {
    id v9 = *(void **)(a1 + 40);
    uint64_t v18 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL));
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerID]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) bundleIdentifier]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_10005EB40;
    v15[3] = &unk_10026E8B0;
    id v17 = *(id *)(a1 + 64);
    id v16 = *(id *)(a1 + 32);
    [v9 mixinHasActiveChallengesWithLeaderboards:v10 playerID:v11 bundleID:v12 completionHandler:v15];

    id v13 = v17;
  }

  else
  {
    uint64_t v14 = *(void *)(a1 + 64);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0LL, v13);
  }
}

void sub_10005EB40(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([a2 firstObject]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v4);
}

void sub_10005ED00(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10005EDB4;
  v5[3] = &unk_10026E928;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 _gkMapDictionaryWithKeyPath:@"playerID"]);
  uint64_t v3 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = v6;
  [v3 enumerateObjectsUsingBlock:v5];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10005EDB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 player]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 playerID]);

  if (!v5)
  {
LABEL_9:
    id v7 = *(id *)(a1 + 40);
    goto LABEL_10;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v5]);
  id v7 = v6;
  if (!v6
    || (uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 displayNameWithOptions:0]),
        id v9 = [v8 length],
        v8,
        !v9))
  {
    id v10 = (os_log_s *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v11 = (id)GKOSLoggers(v6);
      id v10 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_100067EEC();
    }

    goto LABEL_9;
  }

void sub_10005F08C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v5));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 internalRepresentation]);
  uint64_t v39 = 0LL;
  id v40 = &v39;
  uint64_t v41 = 0x3032000000LL;
  id v42 = sub_10005225C;
  id v43 = sub_10005226C;
  id v44 = 0LL;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"player-score"]);
  if ([v9 count])
  {
    id v10 = objc_alloc_init(&OBJC_CLASS___GKLeaderboardEntryInternal);
    id v11 = (void *)v40[5];
    v40[5] = (uint64_t)v10;

    id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"context"]);
    id v13 = [v12 integerValue];
    [(id)v40[5] setContext:v13];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"score-value"]);
    id v15 = [v14 integerValue];
    [(id)v40[5] setScore:v15];

    id v16 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"formatted-score-value"]);
    [(id)v40[5] setFormattedScore:v16];

    id v17 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"rank"]);
    unsigned int v18 = [v17 integerValue];
    [(id)v40[5] setRank:v18];

    id v19 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"timestamp"]);
    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate _gkDateFromServerTimestamp:](&OBJC_CLASS___NSDate, "_gkDateFromServerTimestamp:", v19));
    [(id)v40[5] setDate:v20];

    [(id)v40[5] setPlayer:v8];
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) baseLeaderboardID]);
    [(id)v40[5] setBaseLeaderboardID:v21];
  }

  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"total-entries"]);
  id v23 = [v22 integerValue];

  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"results"]);
  uint64_t v31 = v5;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  v35[2] = sub_10005F45C;
  void v35[3] = &unk_10026E950;
  id v36 = *(id *)(a1 + 40);
  id v25 = v8;
  id v37 = v25;
  uint64_t v38 = &v39;
  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v24 _gkMapWithBlock:v35]);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472LL;
  v32[2] = sub_10005F690;
  v32[3] = &unk_10026B800;
  __int128 v27 = v6;
  id v28 = *(void **)(a1 + 48);
  void v32[4] = *(void *)(a1 + 56);
  id v29 = v26;
  id v33 = v29;
  id v34 = &v39;
  [v28 perform:v32];
  [*(id *)(a1 + 48) setResult:v40[5]];
  [*(id *)(a1 + 48) setObject:v29 forKeyedSubscript:@"entries"];
  char v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v23));
  [*(id *)(a1 + 48) setObject:v30 forKeyedSubscript:@"count"];

  v27[2](v27);
  _Block_object_dispose(&v39, 8);
}

void sub_10005F438( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

id sub_10005F45C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___GKLeaderboardEntryInternal);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"context"]);
  objc_msgSend(v4, "setContext:", objc_msgSend(v5, "integerValue"));

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"score-value"]);
  objc_msgSend(v4, "setScore:", objc_msgSend(v6, "integerValue"));

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"formatted-score-value"]);
  [v4 setFormattedScore:v7];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"rank"]);
  objc_msgSend(v4, "setRank:", objc_msgSend(v8, "integerValue"));

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"timestamp"]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate _gkDateFromServerTimestamp:](&OBJC_CLASS___NSDate, "_gkDateFromServerTimestamp:", v9));
  [v4 setDate:v10];

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) baseLeaderboardID]);
  [v4 setBaseLeaderboardID:v11];

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"player-descriptor"]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"player-id"]);

  if (v13)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerID]);
    unsigned int v15 = [v13 isEqualToString:v14];

    if (!v15)
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerInternal internalRepresentation]( &OBJC_CLASS___GKPlayerInternal,  "internalRepresentation"));
      [v4 setPlayer:v19];

      unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([v4 player]);
      [v18 setPlayerID:v13];
      goto LABEL_6;
    }

    [v4 setPlayer:*(void *)(a1 + 40)];
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8LL);
    if (!*(void *)(v16 + 40))
    {
      id v17 = v4;
      unsigned int v18 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v17;
LABEL_6:
    }
  }

  return v4;
}

void sub_10005F690(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10005F728;
  void v8[3] = &unk_10026B120;
  id v9 = v3;
  id v7 = v3;
  [v4 updatePlayersForEntries:v5 localPlayerEntry:v6 handler:v8];
}

uint64_t sub_10005F728(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10005F734(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"entries"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"count"]);
  (*(void (**)(uint64_t, id, void *, id, void))(v2 + 16))(v2, v5, v3, [v4 integerValue], 0);
}

NSString *__cdecl sub_10005FAEC(id a1, GKPlayerInternal *a2, unint64_t a3)
{
  return (NSString *)-[GKPlayerInternal playerID](a2, "playerID", a3);
}

void sub_10005FAF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictionaryForRequest]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v5, @"game");

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v6, @"player-id");

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) baseLeaderboardID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v7,  @"base-leaderboard-id");

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) identifier]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v8, @"leaderboard-id");

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) timeScopeName:*(void *)(a1 + 96)]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v9, @"time-scope");

  if ([*(id *)(a1 + 64) count])
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 64),  @"player-ids");
    id v10 = @"gk-get-leaderboard-entries-for-players";
  }

  else
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) playerScopeName:*(void *)(a1 + 104)]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v11, @"player-scope");

    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 112)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v12, @"starting-rank");

    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 120)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v13, @"count");

    id v10 = @"gk-get-leaderboard-entries";
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  void v20[2] = sub_10005FD9C;
  v20[3] = &unk_10026E750;
  uint64_t v16 = *(void *)(a1 + 72);
  id v17 = *(id *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 56);
  id v21 = v17;
  uint64_t v22 = v18;
  id v23 = *(id *)(a1 + 88);
  id v24 = *(id *)(a1 + 48);
  id v25 = v3;
  id v19 = v3;
  [v14 issueRequest:v4 bagKey:v10 clientProxy:v15 locale:v16 handler:v20];
}

void sub_10005FD9C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v5 && !a3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_10005FE84;
    void v7[3] = &unk_10026BB28;
    uint64_t v6 = *(void **)(a1 + 32);
    void v7[4] = *(void *)(a1 + 40);
    id v8 = v5;
    id v9 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    id v11 = *(id *)(a1 + 32);
    [v6 perform:v7];
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10005FE84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10005FF34;
  v9[3] = &unk_10026E9B8;
  id v10 = *(id *)(a1 + 64);
  id v11 = v3;
  id v8 = v3;
  [v4 generateEntriesFromServerResponse:v5 context:v6 leaderboard:v7 handler:v9];
}

uint64_t sub_10005FF34(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = a3;
  [v7 setResult:a2];
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"entries"];

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"count"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10005FFD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"entries"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"count"]);
  id v5 = [v4 integerValue];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *, id, void *))(v2 + 16))(v2, v7, v3, v5, v6);
}

LABEL_19:
      goto LABEL_20;
    }

    char v68 = 0LL;
    id v69 = &v68;
    v70 = 0x3032000000LL;
    __int128 v71 = sub_10005225C;
    __int128 v72 = sub_10005226C;
    __int128 v73 = 0LL;
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v20 context]);
    v65[0] = _NSConcreteStackBlock;
    v65[1] = 3221225472LL;
    v65[2] = sub_1000607F8;
    v65[3] = &unk_10026C320;
    id v66 = v20;
    uint64_t v67 = &v68;
    [v28 performBlockAndWait:v65];

    id v29 = (id)v69[5];
    if (v29)
    {
      uint64_t v16 = v29;

      _Block_object_dispose(&v68, 8);
      goto LABEL_7;
    }

    if (!os_log_GKGeneral) {
      id v43 = (id)GKOSLoggers(0LL);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100067FB8();
    }
    v63[0] = _NSConcreteStackBlock;
    v63[1] = 3221225472LL;
    v63[2] = sub_10006087C;
    v63[3] = &unk_10026B120;
    unsigned __int8 v64 = v18;
    dispatch_async(&_dispatch_main_q, v63);

    _Block_object_dispose(&v68, 8);
    uint64_t v16 = 0LL;
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v42 = (id)GKOSLoggers(v24);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100067F60();
    }
    v76[0] = _NSConcreteStackBlock;
    v76[1] = 3221225472LL;
    v76[2] = sub_100060738;
    v76[3] = &unk_10026B120;
    __int128 v77 = v18;
    dispatch_async(&_dispatch_main_q, v76);

    unsigned int v15 = 0LL;
  }

  *a2 = a1;
  a2[1] = v17;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v7;
}

    sub_100144E08();
  }

  id v24 = v23 + 3;
  if (v24 < v9)
  {
    if (!*(void *)(v20 + 8 * v24))
    {
      while (1)
      {
        uint64_t v22 = v24 + 1;
        if (__OFADD__(v24, 1LL)) {
          goto LABEL_27;
        }
        if (v22 >= v9) {
          goto LABEL_22;
        }
        ++v24;
        if (*(void *)(v20 + 8 * v22)) {
          goto LABEL_19;
        }
      }
    }

    uint64_t v22 = v24;
    goto LABEL_19;
  }

void sub_100060720(_Unwind_Exception *a1)
{
}

void sub_100060738(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 17LL, 0LL));
  (*(void (**)(uint64_t, void, void, void, id))(v1 + 16))(v1, 0LL, 0LL, 0LL, v2);
}

void sub_100060798(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 17LL, 0LL));
  (*(void (**)(uint64_t, void, void, void, id))(v1 + 16))(v1, 0LL, 0LL, 0LL, v2);
}

void sub_1000607F8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v2));

  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 internalRepresentationWithPieces:0]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10006087C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 6LL, 0LL));
  (*(void (**)(uint64_t, void, void, void, id))(v1 + 16))(v1, 0LL, 0LL, 0LL, v2);
}

void sub_1000608DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 17LL, 0LL));
  (*(void (**)(uint64_t, void, void, void, id))(v1 + 16))(v1, 0LL, 0LL, 0LL, v2);
}

void sub_10006093C(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100060A48;
  void v7[3] = &unk_10026EA08;
  uint64_t v4 = *(void **)(a1 + 32);
  void v7[4] = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  __int128 v5 = *(_OWORD *)(a1 + 104);
  __int128 v14 = *(_OWORD *)(a1 + 88);
  __int128 v15 = v5;
  id v11 = *(id *)(a1 + 72);
  id v12 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 80);
  id v6 = a2;
  [v4 perform:v7];
  v6[2](v6);
}

void sub_100060A48(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  __int128 v14 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 64);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) context]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_100060B44;
  v15[3] = &unk_10026E9B8;
  uint64_t v11 = *(void *)(a1 + 80);
  id v16 = *(id *)(a1 + 72);
  id v17 = v3;
  __int128 v13 = *(_OWORD *)(a1 + 104);
  id v12 = v3;
  [v14 loadEntriesForLeaderboard:v4 gameDescriptor:v5 localPlayer:v6 playerScope:v7 timeScope:v8 range:v13 players:v9 context:v10 locale:v11 handler:v15];
}

uint64_t sub_100060B44(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void **)(a1 + 32);
  id v10 = a3;
  id v11 = a2;
  [v9 setError:a5];
  [*(id *)(a1 + 32) setResult:v11];

  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"entries"];
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
  [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:@"totalPlayerCount"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100060BFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"entries"]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"totalPlayerCount"]);
  id v5 = [v4 integerValue];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *, id, void *))(v2 + 16))(v2, v7, v3, v5, v6);
}

void sub_100060E94(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  id obj = v3;
  id v6 = [obj countByEnumeratingWithState:&v48 objects:v53 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v49;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v49 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)v9);
        id v11 = objc_alloc_init(&OBJC_CLASS___GKScoreInternal);
        [v11 setDate:*(void *)(a1 + 32)];
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 baseLeaderboardID]);
        [v11 setLeaderboardIdentifier:v12];

        [v11 setValue:*(void *)(a1 + 88)];
        [v11 setContext:*(void *)(a1 + 96)];
        [v11 setPlayer:*(void *)(a1 + 40)];
        if ([v10 type] == (id)1) {
          __int128 v13 = v4;
        }
        else {
          __int128 v13 = v5;
        }
        [v13 addObject:v11];
        __int128 v14 = *(void **)(a1 + 48);
        __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v10 baseLeaderboardID]);
        [v14 removeObject:v15];

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [obj countByEnumeratingWithState:&v48 objects:v53 count:16];
    }

    while (v7);
  }

  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  id v16 = *(id *)(a1 + 48);
  id v17 = [v16 countByEnumeratingWithState:&v44 objects:v52 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v45;
    do
    {
      id v20 = 0LL;
      do
      {
        if (*(void *)v45 != v19) {
          objc_enumerationMutation(v16);
        }
        uint64_t v21 = *(void *)(*((void *)&v44 + 1) + 8LL * (void)v20);
        id v22 = objc_alloc_init(&OBJC_CLASS___GKScoreInternal);
        [v22 setDate:*(void *)(a1 + 32)];
        [v22 setLeaderboardIdentifier:v21];
        [v22 setValue:*(void *)(a1 + 88)];
        [v22 setContext:*(void *)(a1 + 96)];
        [v22 setPlayer:*(void *)(a1 + 40)];
        [v5 addObject:v22];

        id v20 = (char *)v20 + 1;
      }

      while (v18 != v20);
      id v18 = [v16 countByEnumeratingWithState:&v44 objects:v52 count:16];
    }

    while (v18);
  }

  +[GKScoreSubmissionBulletin presentForScores:](&OBJC_CLASS___GKScoreSubmissionBulletin, "presentForScores:", v4);
  +[GKScoreSubmissionBulletin presentForScores:](&OBJC_CLASS___GKScoreSubmissionBulletin, "presentForScores:", v5);
  id v23 = *(void **)(a1 + 56);
  id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) clientProxy]);
  id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 replyQueue]);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  void v37[2] = sub_1000612A0;
  v37[3] = &unk_10026EA80;
  id v26 = v4;
  id v38 = v26;
  id v39 = *(id *)(a1 + 56);
  id v27 = *(id *)(a1 + 72);
  uint64_t v28 = *(void *)(a1 + 64);
  id v40 = v27;
  uint64_t v41 = v28;
  uint64_t v43 = *(void *)(a1 + 88);
  id v29 = v5;
  id v42 = v29;
  [v23 performOnQueue:v25 block:v37];

  if (*(void *)(a1 + 80))
  {
    char v30 = *(void **)(a1 + 56);
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) clientProxy]);
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 replyQueue]);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_100061B00;
    void v34[3] = &unk_10026B310;
    id v35 = *(id *)(a1 + 56);
    id v36 = *(id *)(a1 + 80);
    [v30 notifyOnQueue:v32 block:v34];
  }
}

void sub_1000612A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) count])
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_1000613F8;
    void v18[3] = &unk_10026EA58;
    uint64_t v4 = *(void **)(a1 + 40);
    id v19 = *(id *)(a1 + 32);
    id v5 = *(id *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    id v20 = v5;
    uint64_t v21 = v6;
    id v7 = *(id *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 72);
    id v22 = v7;
    uint64_t v23 = v8;
    [v4 perform:v18];
  }

  if ([*(id *)(a1 + 64) count])
  {
    uint64_t v9 = *(void **)(a1 + 40);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1000618E8;
    void v13[3] = &unk_10026EA58;
    id v10 = *(void **)(a1 + 64);
    uint64_t v17 = *(void *)(a1 + 72);
    id v14 = v10;
    int8x16_t v12 = *(int8x16_t *)(a1 + 48);
    id v11 = (id)v12.i64[0];
    int8x16_t v15 = vextq_s8(v12, v12, 8uLL);
    id v16 = *(id *)(a1 + 40);
    [v9 perform:v13];
  }

  v3[2](v3);
}

void sub_1000613F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v24;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v23 + 1) + 8 * (void)v9) serverRepresentation]);
        -[NSMutableArray addObject:](v4, "addObject:", v10);

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }

    while (v7);
  }

  id v11 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v4, @"scores");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 40),  @"eligible-challenges");
  int8x16_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_10006163C;
  void v17[3] = &unk_10026EA30;
  id v18 = *(id *)(a1 + 32);
  int8x16_t v16 = *(int8x16_t *)(a1 + 40);
  id v14 = (id)v16.i64[0];
  int8x16_t v19 = vextq_s8(v16, v16, 8uLL);
  id v20 = *(id *)(a1 + 56);
  id v21 = v3;
  uint64_t v22 = *(void *)(a1 + 64);
  id v15 = v3;
  [v12 issueRequest:v11 bagKey:@"gk-submit-scores" clientProxy:v13 handler:v17];
}

void sub_10006163C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers(v6);
    }
    id v14 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v26 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "In-process score submission failed due to error: %@",  buf,  0xCu);
    }

    id v15 = objc_alloc(&OBJC_CLASS___GKScoreNetworkRequest);
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 bundleIdentifier]);
    int8x16_t v19 = -[GKScoreNetworkRequest initWithScores:bundleID:eligibleChallenges:]( v15,  "initWithScores:bundleID:eligibleChallenges:",  v16,  v18,  *(void *)(a1 + 48));

    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    void v22[2] = sub_1000618B8;
    v22[3] = &unk_10026B2A0;
    id v23 = *(id *)(a1 + 56);
    id v24 = *(id *)(a1 + 64);
    [v20 writeToNetwork:v19 clientProxy:v21 handler:v22];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(0LL);
    }
    uint64_t v9 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 72);
      id v11 = v9;
      int8x16_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v10));
      *(_DWORD *)buf = 138412290;
      __int128 v26 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Score %@ submitted successfully in-process",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

uint64_t sub_1000618B8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000618E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  id v6 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 64);
    id v8 = v6;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v7));
    *(_DWORD *)buf = 138412290;
    uint64_t v22 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Score %@ submitted via store and forward for classic",  buf,  0xCu);
  }

  uint64_t v10 = objc_alloc(&OBJC_CLASS___GKScoreNetworkRequest);
  uint64_t v11 = *(void *)(a1 + 32);
  int8x16_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 bundleIdentifier]);
  id v14 = -[GKScoreNetworkRequest initWithScores:bundleID:eligibleChallenges:]( v10,  "initWithScores:bundleID:eligibleChallenges:",  v11,  v13,  *(void *)(a1 + 48));

  id v15 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_100061AD0;
  void v18[3] = &unk_10026B2A0;
  id v19 = *(id *)(a1 + 56);
  id v20 = v4;
  id v17 = v4;
  [v15 writeToNetwork:v14 clientProxy:v16 handler:v18];
}

uint64_t sub_100061AD0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100061B00(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v4);
    }
    id v6 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100068048(v2, v6);
    }
  }

  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
}

void sub_100061DB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___GKScoreInternal);
  [v4 setDate:*(void *)(a1 + 32)];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  [v4 setLeaderboardIdentifier:v5];

  [v4 setValue:*(void *)(a1 + 80)];
  [v4 setContext:*(void *)(a1 + 88)];
  [v4 setPlayer:*(void *)(a1 + 48)];
  id v23 = v4;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v23, 1LL));
  +[GKScoreSubmissionBulletin presentForScores:](&OBJC_CLASS___GKScoreSubmissionBulletin, "presentForScores:", v6);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 serverRepresentation]);
  id v8 = [v7 mutableCopy];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 leaderboardIdentifier]);
  [v8 setObject:v9 forKeyedSubscript:@"leaderboard-id"];

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerID]);
  [v8 setObject:v10 forKeyedSubscript:@"player-id"];

  uint64_t v11 = *(void *)(a1 + 56);
  if (v11) {
    [v8 setObject:v11 forKeyedSubscript:@"challenges"];
  }
  int8x16_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) clientProxy]);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_100062014;
  void v18[3] = &unk_10026E750;
  id v19 = v4;
  int8x16_t v17 = *(int8x16_t *)(a1 + 56);
  id v14 = (id)v17.i64[0];
  int8x16_t v20 = vextq_s8(v17, v17, 8uLL);
  id v21 = *(id *)(a1 + 72);
  id v22 = v3;
  id v15 = v3;
  id v16 = v4;
  [v12 issueRequest:v8 bagKey:@"gk-submit-instance-score" clientProxy:v13 handler:v18];
}

void sub_100062014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    id v4 = objc_alloc(&OBJC_CLASS___GKInstanceScoreNetworkRequest);
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);
    id v8 = -[GKInstanceScoreNetworkRequest initWithInstanceScore:bundleID:challenges:]( v4,  "initWithInstanceScore:bundleID:challenges:",  v5,  v7,  *(void *)(a1 + 48));

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_100062154;
    v11[3] = &unk_10026B2A0;
    id v12 = *(id *)(a1 + 56);
    id v13 = *(id *)(a1 + 64);
    [v9 writeToNetwork:v8 clientProxy:v10 handler:v11];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

uint64_t sub_100062154(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100062184(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v4);
    }
    id v6 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000680CC(v2, v6);
    }
  }

  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
}

void sub_1000624B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }

  else
  {
    if (v5)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"status"]);
      id v10 = [v9 longValue];

      if (!v10)
      {
        id v12 = objc_alloc_init(&OBJC_CLASS___GKLeaderboardSummaryInternal);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"start-date"]);
        objc_msgSend(v12, "setStartDate:", objc_msgSend(v18, "longValue"));

        id v19 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"duration"]);
        objc_msgSend(v12, "setDuration:", objc_msgSend(v19, "longValue"));

        int8x16_t v20 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"next-start-date"]);
        objc_msgSend(v12, "setNextStartDate:", objc_msgSend(v20, "longValue"));

        id v21 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"score-value"]);
        objc_msgSend(v12, "setScoreValue:", objc_msgSend(v21, "longValue"));

        id v22 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"rank"]);
        objc_msgSend(v12, "setRank:", objc_msgSend(v22, "longValue"));

        id v23 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"total-entries"]);
        objc_msgSend(v12, "setTotalEntries:", objc_msgSend(v23, "longValue"));

        id v24 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"friend-rank"]);
        objc_msgSend(v12, "setFriendRank:", objc_msgSend(v24, "longValue"));

        __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"total-friend-entries"]);
        objc_msgSend(v12, "setTotalFriendEntries:", objc_msgSend(v25, "longValue"));

        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"context"]);
        objc_msgSend(v12, "setContext:", objc_msgSend(v26, "longValue"));

        id v27 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"leaderboard-id"]);
        [v12 setLeaderboardID:v27];

        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"base-leaderboard-id"]);
        [v12 setBaseLeaderboardID:v28];

        id v29 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"group-id"]);
        [v12 setGroupID:v29];

        char v30 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"title"]);
        [v12 setTitle:v30];

        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"type"]);
        [v12 setType:v31];

        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"formatted-score-value"]);
        [v12 setFormattedScoreValue:v32];

        uint64_t v11 = 0LL;
        goto LABEL_7;
      }
    }

    id v8 = (id)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  3LL,  0LL));
  }

  uint64_t v11 = v8;
  id v12 = 0LL;
LABEL_7:
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v13 replyQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100062894;
  block[3] = &unk_10026BEF0;
  id v15 = *(id *)(a1 + 40);
  id v35 = v11;
  id v36 = v15;
  id v34 = v12;
  id v16 = v11;
  id v17 = v12;
  dispatch_async(v14, block);
}

uint64_t sub_100062894(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_100062970(uint64_t a1, void *a2, void *a3)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100062A08;
  void v7[3] = &unk_10026EAF0;
  __int16 v8 = *(_WORD *)(a1 + 40);
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a3 _gkFilterWithBlock:v7]);
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
}

id sub_100062A08(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if ((*(_BYTE *)(a1 + 32)
     || (id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 lastReportedDate]), v5, v5))
    && (*(_BYTE *)(a1 + 33)
     || ![v4 isHidden]
     || [v4 isCompleted]))
  {
    id v6 = v4;
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}

void sub_100062B70(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKGameServicePrivate,  "serviceFromService:",  *(void *)(a1 + 32)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleIdentifier]);
  id v17 = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v17, 1LL));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100062CB0;
  v11[3] = &unk_10026EBE0;
  __int16 v16 = *(_WORD *)(a1 + 64);
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  id v12 = v7;
  uint64_t v13 = v8;
  id v9 = *(id *)(a1 + 56);
  id v14 = v3;
  id v15 = v9;
  id v10 = v3;
  [v4 getGameMetadataForBundleIDs:v6 handler:v11];
}

void sub_100062CB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 firstObject]);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_100062E14;
  void v18[3] = &unk_10026EB90;
  __int16 v21 = *(_WORD *)(a1 + 64);
  id v19 = *(id *)(a1 + 32);
  id v20 = v6;
  id v7 = v6;
  uint64_t v8 = objc_retainBlock(v18);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v9 replyQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10006301C;
  block[3] = &unk_10026EBB8;
  id v16 = *(id *)(a1 + 56);
  id v17 = v8;
  id v14 = *(id *)(a1 + 48);
  id v15 = v5;
  id v11 = v5;
  id v12 = v8;
  dispatch_async(v10, block);
}

id sub_100062E14(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameStatServicePrivate filterUnreportedAndHiddenAchievements:includeUnreported:includeHidden:]( &OBJC_CLASS___GKGameStatServicePrivate,  "filterUnreportedAndHiddenAchievements:includeUnreported:includeHidden:",  a2,  *(unsigned __int8 *)(a1 + 48),  *(unsigned __int8 *)(a1 + 49)));
  uint64_t v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100062ED4;
  v9[3] = &unk_10026EB68;
  id v5 = v3;
  id v10 = v5;
  id v11 = *(id *)(a1 + 40);
  [v4 enumerateObjectsUsingBlock:v9];
  id v6 = v11;
  id v7 = v5;

  return v7;
}

void sub_100062ED4(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v8 playerID]);
  id v4 = [v3 length];

  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 playerID]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v6]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100062FB8;
    v9[3] = &unk_10026EB40;
    id v10 = *(id *)(a1 + 40);
    id v11 = v8;
    [v7 enumerateObjectsUsingBlock:v9];
  }
}

void sub_100062FB8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setGameHint:v3];
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) minimalInternal]);
  [v4 setPlayer:v5];
}

void sub_10006301C(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = (*(uint64_t (**)(void))(a1[7] + 16LL))();
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v4, a1[5]);
}

void sub_100063288(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100063368;
  void v13[3] = &unk_10026E9B8;
  uint64_t v10 = *(void *)(a1 + 64);
  id v14 = *(id *)(a1 + 72);
  id v15 = v3;
  __int128 v12 = *(_OWORD *)(a1 + 96);
  id v11 = v3;
  [v4 getEntriesForLeaderboard:v5 gameDescriptor:v6 localPlayer:v7 playerScope:v8 timeScope:v9 range:v12 players:v10 handler:v13];
}

uint64_t sub_100063368(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void **)(a1 + 32);
  id v10 = a3;
  id v11 = a2;
  [v9 setError:a5];
  [*(id *)(a1 + 32) setResult:v11];

  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"entries"];
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
  [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:@"totalPlayerCount"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100063420(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"entries"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"totalPlayerCount"]);
  id v5 = [v4 integerValue];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *, id, void *))(v2 + 16))(v2, v7, v3, v5, v6);
}

void sub_10006369C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    (*(void (**)(void, void))(*(void *)(a1 + 56) + 16LL))(*(void *)(a1 + 56), 0LL);
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([a2 lastObject]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 defaultLeaderboardIdentifier]);
    uint64_t v6 = *(void **)(a1 + 32);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_10006389C;
    v15[3] = &unk_10026EC58;
    id v16 = v5;
    id v7 = v5;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 _gkMapWithBlock:v15]);
    v17[0] = @"game";
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictionaryForRequest]);
    v17[1] = @"scores";
    v18[0] = v9;
    v18[1] = v8;
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  2LL));

    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10006398C;
    void v13[3] = &unk_10026B4F8;
    id v14 = *(id *)(a1 + 56);
    [v11 issueRequest:v10 bagKey:@"gk-get-hypothetical-score-rank" clientProxy:v12 handler:v13];
  }

id sub_10006389C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 leaderboardIdentifier]);
  if (!v4) {
    id v4 = *(id *)(a1 + 32);
  }
  v9[0] = @"score-value";
  id v5 = [v3 value];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v5));
  v9[1] = @"category";
  v10[0] = v6;
  v10[1] = v4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v10,  v9,  2LL));

  return v7;
}

void sub_10006398C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"results"]);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100063B48(id a1, NSDictionary *a2, unint64_t a3)
{
  return -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", @"bundle-id");
}

void sub_100063B58(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 objectAtIndexedSubscript:a3]);
  [v5 updateWithGameDescriptor:v6];
}

void sub_100063D74(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = v8;
  if (!v7 || v8)
  {
    if (!v8)
    {
      id v8 = (id)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  3LL,  0LL));
      uint64_t v9 = v8;
    }

    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers(v8);
    }
    id v20 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      id v29 = v7;
      __int16 v30 = 2112;
      uint64_t v31 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Error getting games friends played from server plist: %@, error: %@",  buf,  0x16u);
    }

    uint64_t v21 = *(void *)(a1 + 48);
    if (v21) {
      (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0LL, v9);
    }
  }

  else
  {
    uint64_t v10 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", a4));
    id v11 = (void *)v10;
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers(v10);
    }
    uint64_t v13 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v29 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Games friends played data new expiration date is: %@",  buf,  0xCu);
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionGroupBypassingMultiUser]);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    void v22[2] = sub_100063FD0;
    v22[3] = &unk_10026ED38;
    id v15 = v7;
    uint64_t v16 = *(void *)(a1 + 32);
    id v17 = *(void **)(a1 + 40);
    id v23 = v15;
    uint64_t v24 = v16;
    id v25 = v17;
    id v26 = v11;
    id v27 = *(id *)(a1 + 48);
    id v18 = v11;
    [v14 performOnManagedObjectContext:v22];

    uint64_t v9 = 0LL;
  }
}

void sub_100063FD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  __int128 v48 = a3;
  id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject fetchRequestForContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "fetchRequestForContext:",  v5));
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"friendBiDirectional == %@",  &off_100287910));
  [v7 setPredicate:v8];

  __int128 v47 = v7;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 executeFetchRequest:v7 error:0]);
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  id v10 = [v9 countByEnumeratingWithState:&v60 objects:v69 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v61;
    do
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v61 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v60 + 1) + 8LL * (void)i);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 playerID]);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v14, v15);
      }

      id v11 = [v9 countByEnumeratingWithState:&v60 objects:v69 count:16];
    }

    while (v11);
  }

  uint64_t v16 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"results"]);
  id v17 = (void *)v16;
  if (!os_log_GKGeneral) {
    id v18 = (id)GKOSLoggers(v16);
  }
  id v19 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v20 = v19;
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v9 count]));
    id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v17 count]));
    *(_DWORD *)buf = 138412546;
    id v66 = v21;
    __int16 v67 = 2112;
    char v68 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Number of cached friends: %@, games and players: %@",  buf,  0x16u);
  }

  __int128 v45 = (void *)objc_claimAutoreleasedReturnValue([v17 _gkMapWithBlock:&stru_10026ECE8]);
  id v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ensureGameObjectsForDescriptors:moc:"));
  __int128 v44 = (void *)objc_claimAutoreleasedReturnValue(+[FriendsPlayedGameList _gkFetchRequest](&OBJC_CLASS___FriendsPlayedGameList, "_gkFetchRequest"));
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:"));
  uint64_t v24 = objc_alloc(&OBJC_CLASS___FriendsPlayedGameList);
  id v25 = (void *)objc_claimAutoreleasedReturnValue(+[FriendsPlayedGameList entity](&OBJC_CLASS___FriendsPlayedGameList, "entity"));
  id v26 = -[FriendsPlayedGameList initWithEntity:insertIntoManagedObjectContext:]( v24,  "initWithEntity:insertIntoManagedObjectContext:",  v25,  v5);

  id v27 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472LL;
  v53[2] = sub_10006454C;
  v53[3] = &unk_10026ED10;
  id v42 = v23;
  id v54 = v42;
  id v29 = v5;
  id v55 = v29;
  uint64_t v43 = v6;
  id v56 = v43;
  id v57 = *(id *)(a1 + 48);
  id v30 = v28;
  id v58 = v30;
  uint64_t v31 = v27;
  id v59 = v31;
  __int128 v46 = v17;
  [v17 enumerateObjectsUsingBlock:v53];
  -[FriendsPlayedGameList setEntries:](v26, "setEntries:", v31);
  -[FriendsPlayedGameList setExpirationDate:](v26, "setExpirationDate:", *(void *)(a1 + 56));
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  id v32 = v41;
  id v33 = [v32 countByEnumeratingWithState:&v49 objects:v64 count:16];
  if (v33)
  {
    id v34 = v33;
    uint64_t v35 = *(void *)v50;
    do
    {
      for (j = 0LL; j != v34; j = (char *)j + 1)
      {
        if (*(void *)v50 != v35) {
          objc_enumerationMutation(v32);
        }
        [v29 deleteObject:*(void *)(*((void *)&v49 + 1) + 8 * (void)j)];
      }

      id v34 = [v32 countByEnumeratingWithState:&v49 objects:v64 count:16];
    }

    while (v34);
  }

  id v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentLocalPlayer]);
  id v39 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKFriendServicePrivate,  "serviceWithTransport:forClient:localPlayer:",  0LL,  v37,  v38));

  [v39 notifyWidgetFriendListUpdated];
  uint64_t v40 = *(void *)(a1 + 64);
  if (v40) {
    (*(void (**)(uint64_t, id, void))(v40 + 16))(v40, v30, 0LL);
  }
  v48[2](v48);
}

id sub_10006453C(id a1, NSDictionary *a2, unint64_t a3)
{
  return -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", @"game");
}

void sub_10006454C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:a3]);
  id v42 = (void *)objc_claimAutoreleasedReturnValue([v6 internalRepresentation]);
  id v7 = objc_alloc(&OBJC_CLASS___FriendPlayedGameEntry);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[FriendPlayedGameEntry entity](&OBJC_CLASS___FriendPlayedGameEntry, "entity"));
  uint64_t v9 = -[FriendPlayedGameEntry initWithEntity:insertIntoManagedObjectContext:]( v7,  "initWithEntity:insertIntoManagedObjectContext:",  v8,  *(void *)(a1 + 40));

  id v36 = v9;
  id v38 = v6;
  -[FriendPlayedGameEntry setGame:](v9, "setGame:", v6);
  uint64_t v41 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v37 = v5;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"friends"]);
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  id v11 = [v10 countByEnumeratingWithState:&v43 objects:v49 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v44;
    uint64_t v39 = *(void *)v44;
    uint64_t v40 = v10;
    do
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v44 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = *(void **)(*((void *)&v43 + 1) + 8LL * (void)i);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:@"player-id"]);
        if (v16)
        {
          id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v16]);

          if (v17)
          {
            uint64_t v18 = objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:@"played-at"]);
            id v19 = (void *)v18;
            if (v18)
            {
              if (!os_log_GKGeneral) {
                id v20 = (id)GKOSLoggers(v18);
              }
              uint64_t v21 = (os_log_s *)os_log_GKDaemon;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                __int128 v48 = v15;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "Using friendInfo: %@",  buf,  0xCu);
              }

              id v22 = objc_alloc(&OBJC_CLASS___FriendPlayedEntry);
              id v23 = (void *)objc_claimAutoreleasedReturnValue(+[FriendPlayedEntry entity](&OBJC_CLASS___FriendPlayedEntry, "entity"));
              uint64_t v24 = -[FriendPlayedEntry initWithEntity:insertIntoManagedObjectContext:]( v22,  "initWithEntity:insertIntoManagedObjectContext:",  v23,  *(void *)(a1 + 40));

              [v19 doubleValue];
              id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSince1970:",  v25 / 1000.0));
              -[FriendPlayedEntry setPlayedAt:](v24, "setPlayedAt:", v26);
              id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v16]);
              -[FriendPlayedEntry setFriend:](v24, "setFriend:", v27);

              -[NSMutableSet addObject:](v41, "addObject:", v24);
              uint64_t v28 = objc_alloc(&OBJC_CLASS___GKFriendPlayerInternal);
              id v29 = (void *)objc_claimAutoreleasedReturnValue(-[FriendPlayedEntry friend](v24, "friend"));
              id v30 = -[GKFriendPlayerInternal initWithCacheObject:](v28, "initWithCacheObject:", v29);

              -[GKFriendPlayerInternal setLastPlayedGame:](v30, "setLastPlayedGame:", v42);
              -[GKFriendPlayerInternal setLastPlayedDate:](v30, "setLastPlayedDate:", v26);
              uint64_t v31 = *(void **)(a1 + 56);
              if (!v31
                || (id v32 = (void *)objc_claimAutoreleasedReturnValue([v38 bundleID]),
                    unsigned int v33 = [v31 containsObject:v32],
                    v32,
                    v33))
              {
                [*(id *)(a1 + 64) addObject:v30];
              }

              uint64_t v13 = v39;
              id v10 = v40;
            }

            else
            {
              if (!os_log_GKGeneral) {
                id v34 = (id)GKOSLoggers(0LL);
              }
              uint64_t v35 = (os_log_s *)os_log_GKDaemon;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                __int128 v48 = v15;
                _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "Missing required field, skipping friendInfo: %@",  buf,  0xCu);
              }
            }
          }
        }
      }

      id v12 = [v10 countByEnumeratingWithState:&v43 objects:v49 count:16];
    }

    while (v12);
  }

  -[FriendPlayedGameEntry setFriendsPlayed:](v36, "setFriendsPlayed:", v41);
  [*(id *)(a1 + 72) addObject:v36];
}

void sub_100064D74(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v9 = (id)objc_claimAutoreleasedReturnValue( +[GKGameStatServicePrivate currentFriendsPlayedList:]( &OBJC_CLASS___GKGameStatServicePrivate,  "currentFriendsPlayedList:",  a2));
  if (v9) {
    [v9 setExpirationDate:0];
  }
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentLocalPlayer]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKFriendServicePrivate,  "serviceWithTransport:forClient:localPlayer:",  0LL,  v6,  v7));

  [v8 expireFriendList];
  [v8 notifyWidgetFriendListUpdated];
  v5[2](v5);
}

void sub_100064FB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v24[0] = 0LL;
  v24[1] = v24;
  v24[2] = 0x3032000000LL;
  v24[3] = sub_10005225C;
  void v24[4] = sub_10005226C;
  id v25 = 0LL;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    if (*(void *)(a1 + 72))
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:"));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v8, @"limit");
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v9, @"type");
    }
    if (*(void *)(a1 + 80))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:"));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v10, @"within-secs");
    }

    id v11 = *(void **)(a1 + 40);
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKGameStatService.m",  3162LL,  "-[GKGameStatServicePrivate getGamesFriendsPlayed:type:fetchOptions:withinSecs:matchingBundleIDs:ha ndler:]_block_invoke"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerID]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 transactionGroupWithName:v12 forPlayerID:v13]);

    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_10006520C;
    void v18[3] = &unk_10026ED88;
    id v23 = v24;
    id v15 = *(id *)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 40);
    id v19 = v15;
    uint64_t v20 = v16;
    id v17 = v7;
    uint64_t v21 = v17;
    id v22 = *(id *)(a1 + 64);
    [v14 performOnManagedObjectContext:v18];
  }

  _Block_object_dispose(v24, 8);
}

void sub_1000651EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10006520C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = objc_claimAutoreleasedReturnValue( +[GKGameStatServicePrivate currentFriendsPlayedList:]( &OBJC_CLASS___GKGameStatServicePrivate,  "currentFriendsPlayedList:",  a2));
  id v7 = (void *)v6;
  if (v6)
  {
    __int128 v43 = v5;
    id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    __int128 v55 = 0u;
    __int128 v56 = 0u;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    id v42 = v7;
    id obj = (id)objc_claimAutoreleasedReturnValue([v7 entries]);
    id v46 = [obj countByEnumeratingWithState:&v53 objects:v60 count:16];
    if (v46)
    {
      uint64_t v45 = *(void *)v54;
      do
      {
        uint64_t v11 = 0LL;
        do
        {
          if (*(void *)v54 != v45) {
            objc_enumerationMutation(obj);
          }
          uint64_t v47 = v11;
          id v12 = *(void **)(*((void *)&v53 + 1) + 8 * v11);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 game]);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 internalRepresentation]);

          __int128 v51 = 0u;
          __int128 v52 = 0u;
          __int128 v49 = 0u;
          __int128 v50 = 0u;
          id v48 = (id)objc_claimAutoreleasedReturnValue([v12 friendsPlayed]);
          id v15 = [v48 countByEnumeratingWithState:&v49 objects:v59 count:16];
          if (v15)
          {
            id v16 = v15;
            uint64_t v17 = *(void *)v50;
            do
            {
              for (i = 0LL; i != v16; i = (char *)i + 1)
              {
                if (*(void *)v50 != v17) {
                  objc_enumerationMutation(v48);
                }
                id v19 = *(void **)(*((void *)&v49 + 1) + 8LL * (void)i);
                uint64_t v20 = *(void **)(a1 + 32);
                if (v20)
                {
                  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v12 game]);
                  id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 bundleID]);
                  unsigned int v23 = [v20 containsObject:v22];

                  if (!v23) {
                    continue;
                  }
                }

                uint64_t v24 = objc_alloc(&OBJC_CLASS___GKFriendPlayerInternal);
                id v25 = (void *)objc_claimAutoreleasedReturnValue([v19 friend]);
                id v26 = -[GKFriendPlayerInternal initWithCacheObject:](v24, "initWithCacheObject:", v25);

                -[GKFriendPlayerInternal setLastPlayedGame:](v26, "setLastPlayedGame:", v14);
                id v27 = (void *)objc_claimAutoreleasedReturnValue([v19 playedAt]);
                -[GKFriendPlayerInternal setLastPlayedDate:](v26, "setLastPlayedDate:", v27);

                [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) addObject:v26];
              }

              id v16 = [v48 countByEnumeratingWithState:&v49 objects:v59 count:16];
            }

            while (v16);
          }

          uint64_t v11 = v47 + 1;
        }

        while ((id)(v47 + 1) != v46);
        id v46 = [obj countByEnumeratingWithState:&v53 objects:v60 count:16];
      }

      while (v46);
    }

    id v7 = v42;
    id v5 = v43;
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
  {
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v7 expirationDate]);
    unsigned int v29 = [v7 _gkIsExpired:v28];

    if (v29)
    {
      if (!os_log_GKGeneral) {
        id v31 = (id)GKOSLoggers(v30);
      }
      id v32 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        unsigned int v33 = v32;
        id v34 = (void *)objc_claimAutoreleasedReturnValue([v7 expirationDate]);
        *(_DWORD *)buf = 138412290;
        id v58 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "Games friends played cache data is expired, refreshing from server: %@",  buf,  0xCu);
      }

      [*(id *)(a1 + 40) loadGamesFriendsPlayed:*(void *)(a1 + 48) matchingBundleIDs:*(void *)(a1 + 32) handler:0];
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v39 = (id)GKOSLoggers(v30);
      }
      uint64_t v40 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "Using games friends played cache data as it is still valid",  buf,  2u);
      }
    }

    uint64_t v41 = *(void *)(a1 + 56);
    if (v41) {
      (*(void (**)(uint64_t, void, void))(v41 + 16))( v41,  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL),  0LL);
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v35 = (id)GKOSLoggers(v6);
    }
    id v36 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v37 = v36;
      id v38 = (void *)objc_claimAutoreleasedReturnValue([v7 expirationDate]);
      *(_DWORD *)buf = 138412290;
      id v58 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "No games friends played cache data, refreshing from server: %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 40) loadGamesFriendsPlayed:*(void *)(a1 + 48) matchingBundleIDs:*(void *)(a1 + 32) handler:*(void *)(a1 + 56)];
  }

  v5[2](v5);
}

void sub_1000663A8(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionGroupBypassingMultiUser]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_1000664AC;
  void v16[3] = &unk_10026EE28;
  double v23 = a4;
  id v17 = v7;
  id v18 = v8;
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(a1 + 40);
  id v22 = v10;
  uint64_t v19 = v11;
  id v20 = v12;
  id v21 = v9;
  id v13 = v9;
  id v14 = v8;
  id v15 = v7;
  [v13 performOnManagedObjectContext:v16];
}

void sub_1000664AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  v60[0] = 0LL;
  v60[1] = v60;
  v60[2] = 0x3032000000LL;
  v60[3] = sub_10005225C;
  v60[4] = sub_10005226C;
  id v61 = 0LL;
  uint64_t v7 = objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 80)));
  id v8 = (void *)v7;
  uint64_t v54 = 0LL;
  __int128 v55 = &v54;
  uint64_t v56 = 0x3032000000LL;
  id v57 = sub_10005225C;
  id v58 = sub_10005226C;
  id v59 = 0LL;
  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v7);
  }
  id v10 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    uint64_t v64 = v11;
    __int16 v65 = 2112;
    id v66 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "THE reengagement server response is: %@ with expiration of: %@",  buf,  0x16u);
  }

  id v12 = *(void **)(a1 + 40);
  if (v12)
  {
    id v13 = v55;
    id v14 = v12;
    id v15 = (void *)v13[5];
    v13[5] = (uint64_t)v14;
LABEL_7:

    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers(v16);
    }
    id v18 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      id v20 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v64 = v19;
      __int16 v65 = 2112;
      id v66 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "error getting reengagement from server plist %@ error: %@",  buf,  0x16u);
    }

    uint64_t v21 = *(void *)(a1 + 72);
    if (v21) {
      (*(void (**)(uint64_t, void, void, uint64_t))(v21 + 16))(v21, 0LL, 0LL, v55[5]);
    }
    v6[2](v6);
    goto LABEL_26;
  }

  id v22 = *(void **)(a1 + 32);
  if (!v22)
  {
    uint64_t v34 = objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  3LL,  0LL));
    id v15 = (void *)v55[5];
    v55[5] = v34;
    goto LABEL_7;
  }

  double v23 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:@"results"]);
  if ([v23 count])
  {
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectAtIndexedSubscript:0]);
    id v25 = *(void **)(a1 + 48);
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"game"]);
    id v27 = (void *)objc_claimAutoreleasedReturnValue([v25 ensureGameObject:v5 gameDescriptor:v26]);

    uint64_t v28 = *(void **)(a1 + 48);
    unsigned int v29 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"game"]);
    uint64_t v62 = *(void *)(a1 + 56);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v62, 1LL));
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472LL;
    v42[2] = sub_1000669D4;
    v42[3] = &unk_10026EE00;
    id v43 = *(id *)(a1 + 40);
    id v50 = *(id *)(a1 + 72);
    __int128 v51 = v6;
    id v31 = *(id *)(a1 + 64);
    __int128 v52 = v60;
    uint64_t v32 = *(void *)(a1 + 48);
    id v44 = v31;
    uint64_t v45 = v32;
    id v46 = v23;
    id v47 = *(id *)(a1 + 56);
    id v48 = v8;
    id v33 = v27;
    id v49 = v33;
    __int128 v53 = &v54;
    [v28 fetchAchievementsForGameDescriptor:v29 players:v30 context:v5 handler:v42];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v35 = (id)GKOSLoggers(0LL);
    }
    id v36 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v37 = *(void *)(a1 + 32);
      id v38 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v64 = v37;
      __int16 v65 = 2112;
      id v66 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "No reengagement results from server plist %@ error: %@",  buf,  0x16u);
    }

    uint64_t v39 = objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  3LL,  0LL));
    uint64_t v40 = (void *)v55[5];
    v55[5] = v39;

    uint64_t v41 = *(void *)(a1 + 72);
    if (v41) {
      (*(void (**)(uint64_t, void, void, uint64_t))(v41 + 16))(v41, 0LL, 0LL, v55[5]);
    }
    v6[2](v6);
  }

LABEL_26:
  _Block_object_dispose(&v54, 8);

  _Block_object_dispose(v60, 8);
}

void sub_100066994( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void sub_1000669D4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (*(void *)(a1 + 32))
  {
    uint64_t v8 = *(void *)(a1 + 88);
    if (v8) {
      (*(void (**)(uint64_t, void, void))(v8 + 16))(v8, 0LL, 0LL);
    }
    (*(void (**)(void))(*(void *)(a1 + 96) + 16LL))();
  }

  else
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_100066B14;
    void v13[3] = &unk_10026EDD8;
    id v10 = *(void **)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v20 = *(void *)(a1 + 104);
    void v13[4] = v9;
    id v14 = *(id *)(a1 + 56);
    id v15 = *(id *)(a1 + 64);
    id v16 = *(id *)(a1 + 72);
    id v18 = *(id *)(a1 + 88);
    id v11 = *(id *)(a1 + 80);
    uint64_t v12 = *(void *)(a1 + 112);
    id v17 = v11;
    uint64_t v21 = v12;
    id v19 = *(id *)(a1 + 96);
    [v10 performOnManagedObjectContext:v13];
  }
}

void sub_100066B14(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = a3;
  uint64_t v5 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) processReengagementResults:*(void *)(a1 + 40) localPlayer:*(void *)(a1 + 48) expirationDate:*(void *)(a1 + 56) context:a2]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 88) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if (*(void *)(a1 + 72))
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) internalRepresentation]);
    if (!v8 || !*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL))
    {
      uint64_t v9 = objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  3LL,  0LL));
      uint64_t v10 = *(void *)(*(void *)(a1 + 96) + 8LL);
      id v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  v12[2]();
  (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

uint64_t sub_100066C84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100066E10(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = a1[4];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] playerID]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 existingReengagementAchievement:v8 context:v5]);

  if (!os_log_GKGeneral) {
    id v11 = (id)GKOSLoggers(v10);
  }
  uint64_t v12 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v13 = v12;
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v9 expirationDate]);
    *(_DWORD *)buf = 138412546;
    id v42 = v9;
    __int16 v43 = 2112;
    id v44 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "achievementEntry = %@ and expiry : %@",  buf,  0x16u);
  }

  if (v9
    && (id v15 = (void *)objc_claimAutoreleasedReturnValue([v9 expirationDate]),
        unsigned __int8 v16 = [v9 _gkIsExpired:v15],
        v15,
        (v16 & 1) == 0))
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v9 bundleID]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v17,  v5));

    id v19 = -[GKGameDescriptor initWithCacheObject:]( objc_alloc(&OBJC_CLASS___GKGameDescriptor),  "initWithCacheObject:",  v18);
    uint64_t v20 = v19;
    if (!os_log_GKGeneral) {
      id v21 = (id)GKOSLoggers(v19);
    }
    id v22 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      double v23 = v22;
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v9 expirationDate]);
      id v25 = (void *)objc_claimAutoreleasedReturnValue([v9 bundleID]);
      *(_DWORD *)buf = 138412546;
      id v42 = v24;
      __int16 v43 = 2112;
      id v44 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "Using reengagement cache as it is still valid: %@ game: %@",  buf,  0x16u);
    }

    id v26 = a1[4];
    id v27 = (void *)objc_claimAutoreleasedReturnValue([a1[5] playerID]);
    uint64_t v40 = v27;
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v40, 1LL));
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_10006718C;
    v32[3] = &unk_10026EEC8;
    id v29 = a1[6];
    id v30 = a1[4];
    id v33 = v29;
    id v34 = v30;
    id v35 = v9;
    id v38 = a1[7];
    id v36 = v18;
    id v37 = a1[5];
    uint64_t v39 = v6;
    id v31 = v18;
    [v26 achievementsForPlayersAndGameDescriptor:v20 players:v28 context:v5 handler:v32];
  }

  else
  {
    [a1[4] loadReengagementAchievements:a1[5] handler:a1[7]];
    v6[2](v6);
  }
}

void sub_10006718C(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100067254;
  v3[3] = &unk_10026EEA0;
  uint64_t v2 = *(void **)(a1 + 32);
  void v3[4] = *(void *)(a1 + 40);
  id v4 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 72);
  id v5 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 80);
  [v2 performOnManagedObjectContext:v3];
}

void sub_100067254(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleID]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) percentComplete]);
  [v11 doubleValue];
  double v13 = v12;
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastReportedDate]);
  id v17 = (id)objc_claimAutoreleasedReturnValue( [v5 findAchievementInternal:v9 identifier:v10 context:v8 existingPercent:v14 existingDate:v13]);

  if (v17)
  {
    uint64_t v15 = *(void *)(a1 + 64);
    unsigned __int8 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) internalRepresentation]);
    (*(void (**)(uint64_t, id, void *, void))(v15 + 16))(v15, v17, v16, 0LL);
  }

  else
  {
    [*(id *)(a1 + 32) loadReengagementAchievements:*(void *)(a1 + 56) handler:*(void *)(a1 + 64)];
  }

  v7[2](v7);

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_100067520(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKAchievementListCacheObject _gkFetchRequest]( &OBJC_CLASS___GKAchievementListCacheObject,  "_gkFetchRequest"));
  id v8 = -[NSBatchDeleteRequest initWithFetchRequest:]( objc_alloc(&OBJC_CLASS___NSBatchDeleteRequest),  "initWithFetchRequest:",  v7);
  id v11 = 0LL;
  id v9 = [v5 executeRequest:v8 error:&v11];
  id v10 = v11;
  [*(id *)(a1 + 32) setError:v10];
  v6[2](v6);
}

void sub_1000675EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKAchievementDescriptionListCacheObject _gkFetchRequest]( &OBJC_CLASS___GKAchievementDescriptionListCacheObject,  "_gkFetchRequest"));
  id v8 = -[NSBatchDeleteRequest initWithFetchRequest:]( objc_alloc(&OBJC_CLASS___NSBatchDeleteRequest),  "initWithFetchRequest:",  v7);
  id v11 = 0LL;
  id v9 = [v5 executeRequest:v8 error:&v11];
  id v10 = v11;
  [*(id *)(a1 + 32) setError:v10];
  v6[2](v6);
}

void sub_1000676B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_10006786C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKLeaderboardListCacheObject _gkFetchRequest]( &OBJC_CLASS___GKLeaderboardListCacheObject,  "_gkFetchRequest"));
  id v8 = -[NSBatchDeleteRequest initWithFetchRequest:]( objc_alloc(&OBJC_CLASS___NSBatchDeleteRequest),  "initWithFetchRequest:",  v7);
  id v11 = 0LL;
  id v9 = [v5 executeRequest:v8 error:&v11];
  id v10 = v11;
  [*(id *)(a1 + 32) setError:v10];
  v6[2](v6);
}

void sub_100067938(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_100067994(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

id sub_1000679A0(uint64_t a1, void *a2)
{
  return a2;
}

void sub_1000679AC()
{
}

void sub_100067A10()
{
  _os_log_fault_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "================ GameKit - GKGameStatService requested a simulated crash.\n achievementsForPlayersAndGame:players:context:handler: got nil playerIDs or count is zero. ================",  v1,  2u);
  sub_100020854();
}

void sub_100067A48()
{
}

void sub_100067AAC()
{
}

void sub_100067AE4()
{
}

void sub_100067B10()
{
}

void sub_100067B74()
{
}

void sub_100067BA0()
{
}

void sub_100067C04(void *a1, void *a2)
{
  id v4 = a1;
  id v5 = [(id)sub_1000208C8() baseLeaderboardID];
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a2 startDate]);
  int v9 = 138412546;
  id v10 = v6;
  __int16 v11 = 2112;
  double v12 = v7;
  sub_1000207D4( (void *)&_mh_execute_header,  v2,  v8,  "getLeaderboardsForGameDescriptor - updated: %@, %@",  (uint8_t *)&v9);
}

void sub_100067CC4(uint64_t a1, void *a2)
{
  id v3 = [(id)sub_1000208C8() error];
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000207E0();
  sub_100067994((void *)&_mh_execute_header, v2, v5, "getLeaderboardsForGameDescriptor: %@", v6);

  sub_100020818();
}

void sub_100067D48()
{
}

void sub_100067DAC()
{
}

void sub_100067DD8()
{
}

void sub_100067E04()
{
}

void sub_100067E68(uint64_t a1, void *a2)
{
  id v3 = [(id)sub_1000208C8() error];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000207E0();
  sub_100067994((void *)&_mh_execute_header, v2, v5, "getPreviousInstanceForLeaderboard: %@", v6);

  sub_100020818();
}

void sub_100067EEC()
{
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  sub_1000207D4( (void *)&_mh_execute_header,  v1,  (uint64_t)v1,  "No internal or displayName for playerID:%@ (entry:%@). Will be changed to anonymous",  v2);
  sub_10000C760();
}

void sub_100067F60()
{
}

void sub_100067F8C()
{
}

void sub_100067FB8()
{
}

void sub_100067FE4()
{
}

void sub_100068048(uint64_t a1, void *a2)
{
  id v3 = [(id)sub_1000208C8() error];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000207E0();
  sub_100067994((void *)&_mh_execute_header, v2, v5, "submitScore: %@", v6);

  sub_100020818();
}

void sub_1000680CC(uint64_t a1, void *a2)
{
  id v3 = [(id)sub_1000208C8() error];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000207E0();
  sub_100067994((void *)&_mh_execute_header, v2, v5, "submitInstanceScore: %@", v6);

  sub_100020818();
}

void sub_10006827C(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 issuingPlayer]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 playerID]);

  if (v4) {
    [*(id *)(a1 + 32) addObject:v4];
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v7 receivingPlayer]);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerID]);

  if (v6) {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_100068318(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKProfileService,  "serviceFromService:",  *(void *)(a1 + 32)));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allObjects]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000683E0;
  void v7[3] = &unk_10026C550;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getProfilesForPlayerIDs:v5 handler:v7];
}

void sub_1000683E0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 _gkMapDictionaryWithKeyPath:@"playerID"]);
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100068478;
  void v6[3] = &unk_10026EEF0;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100068478(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v9 receivingPlayer]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 playerID]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v4]);
    [v9 setReceivingPlayer:v5];
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v9 issuingPlayer]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 playerID]);

  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
    [v9 setIssuingPlayer:v8];
  }
}

id sub_100068604(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 compatibleBundleIDs]);
  id v5 = [v4 containsObject:*(void *)(a1 + 32)];

  if ((_DWORD)v5) {
    [v3 setBundleID:*(void *)(a1 + 32)];
  }

  return v5;
}

LABEL_25:
            id v19 = v35;
          }

          objc_autoreleasePoolPop(v23);
          id v21 = (char *)v21 + 1;
        }

        while (v21 != v19);
        id v19 = [obj countByEnumeratingWithState:&v41 objects:v50 count:16];
      }

      while (v19);
    }

    id v6 = v33;
    id v5 = v34;
  }
}

  if (!os_log_GKGeneral) {
    double v23 = (id)GKOSLoggers(v14);
  }
  uint64_t v24 = (os_log_s *)os_log_GKError;
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
  {
    sub_100109D1C(v15, v24);
    if (!v8) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }

  if (v8) {
LABEL_29:
  }
    v8[2](v8, 0LL);
LABEL_30:
}

void sub_100068A64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKGameServicePrivate,  "serviceFromService:",  *(void *)(a1 + 32)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allObjects]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100068B2C;
  void v7[3] = &unk_10026C550;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getGameMetadataForBundleIDs:v5 handler:v7];
}

void sub_100068B2C(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = objc_autoreleasePoolPush();
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v10 _gkMapDictionaryWithKeyPath:@"bundleIdentifier"]);
  id v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100068C00;
  v11[3] = &unk_10026EEF0;
  id v12 = v7;
  id v9 = v7;
  [v8 enumerateObjectsUsingBlock:v11];

  objc_autoreleasePoolPop(v6);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100068C00(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 bundleID]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v5]);
  [v3 setGame:v4];
}

void sub_100068CF4(uint64_t a1)
{
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](&OBJC_CLASS___GKPlayerProfileCacheObject, "selfPlayerID"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject fetchRequestForContext:]( &OBJC_CLASS___GKChallengeListCacheObject,  "fetchRequestForContext:",  *(void *)(a1 + 32)));
  [v3 setResultType:1];
  [v3 setFetchLimit:1];
  [v3 setReturnsDistinctResults:1];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"expirationDate > %@ && player.playerID = %@",  v2,  v15));
  [v3 setPredicate:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) executeFetchRequest:v3 error:0]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 firstObject]);

  if (v6)
  {
    id v7 = (void *)v6;
    if (!*(void *)(a1 + 40)) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"expirationDate != nil && player.playerID = %@",  v15));
  [v3 setPredicate:v8];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) executeFetchRequest:v3 error:0]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v9 firstObject]);

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10)
  {
    if (!v7)
    {
      uint64_t v14 = 0LL;
      double v13 = 0LL;
      goto LABEL_7;
    }

void sub_1000690B4(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000691AC;
  void v7[3] = &unk_10026D220;
  id v8 = a1[5];
  id v9 = a1[6];
  id v10 = a1[7];
  id v11 = v3;
  id v6 = v3;
  [v4 issueRequest:0 bagKey:@"gk-get-challenge-ids" clientProxy:v5 handler:v7];
}

void sub_1000691AC(uint64_t a1, void *a2, void *a3, double a4)
{
  id v10 = a2;
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4));
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"ttl"];

  [*(id *)(a1 + 32) setError:v7];
  if (v10 && !v7)
  {
    id v9 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1000692D4;
    v11[3] = &unk_10026E198;
    double v15 = a4;
    id v12 = v9;
    id v13 = v10;
    id v14 = *(id *)(a1 + 48);
    [v12 performBlockAndWait:v11];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000692D4(uint64_t a1)
{
  id v10 = (id)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 56)));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  *(void *)(a1 + 32)));
  id v3 = (GKChallengeListCacheObject *)objc_claimAutoreleasedReturnValue([v2 challengeList]);
  if (!v3)
  {
    id v3 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKChallengeListCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 32));
    -[GKChallengeListCacheObject setPlayer:](v3, "setPlayer:", v2);
  }

  -[GKChallengeListCacheObject updateWithServerRepresentation:expirationDate:]( v3,  "updateWithServerRepresentation:expirationDate:",  *(void *)(a1 + 40),  v10);
  if ([*(id *)(a1 + 48) isGameCenter])
  {
    uint64_t v4 = objc_alloc(&OBJC_CLASS___NSFetchRequest);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKChallengeCacheObject entityName](&OBJC_CLASS___GKChallengeCacheObject, "entityName"));
    id v6 = -[NSFetchRequest initWithEntityName:](v4, "initWithEntityName:", v5);

    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"wasViewed == NO"));
    -[NSFetchRequest setPredicate:](v6, "setPredicate:", v7);

    id v8 = [*(id *)(a1 + 32) countForFetchRequest:v6 error:0];
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](&OBJC_CLASS___GKBadgeController, "sharedController"));
    [v9 setBadgeCount:v8 forBundleID:GKGameCenterIdentifier badgeType:0];
  }
}

void sub_10006943C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"ttl"]);
  [v6 doubleValue];
  double v4 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v5, v4);
}

void sub_1000696DC(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000697A0;
  void v6[3] = &unk_10026BEC8;
  double v4 = *(void **)(a1 + 32);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 56);
  id v5 = a2;
  [v4 perform:v6];
  v5[2](v5);
}

void sub_1000697A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100069884;
  v11[3] = &unk_10026EF40;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v12 = v7;
  uint64_t v13 = v8;
  id v14 = v9;
  id v15 = *(id *)(a1 + 56);
  id v16 = v3;
  id v10 = v3;
  [v4 fetchChallengesForGameDescriptor:v5 context:v6 handler:v11];
}

void sub_100069884(uint64_t a1, void *a2, char a3, char a4)
{
  id v7 = a2;
  if ((a3 & 1) == 0)
  {
    v30[0] = 0LL;
    v30[1] = v30;
    v30[2] = 0x2020000000LL;
    char v31 = 0;
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKChallengeService.m",  262LL,  "-[GKChallengeService getChallengesForGameDescriptor:handler:]_block_invoke_3"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 transactionGroupWithName:v9]);

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_100069ABC;
    void v25[3] = &unk_10026DD08;
    id v11 = *(void **)(a1 + 48);
    void v25[4] = *(void *)(a1 + 40);
    id v26 = v11;
    id v27 = *(id *)(a1 + 32);
    id v12 = v10;
    id v28 = v12;
    id v29 = v30;
    [v12 perform:v25];
    if ((a4 & 1) != 0)
    {
      uint64_t v13 = *(void *)(a1 + 56);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      void v18[2] = sub_100069DD4;
      void v18[3] = &unk_10026E058;
      void v18[4] = *(void *)(a1 + 40);
      v18[5] = v30;
      [v12 notifyOnQueue:v13 block:v18];
    }

    else
    {
      id v14 = *(void **)(a1 + 32);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      void v19[2] = sub_100069BF4;
      void v19[3] = &unk_10026BB28;
      id v20 = v12;
      id v15 = *(id *)(a1 + 56);
      uint64_t v16 = *(void *)(a1 + 40);
      id v17 = *(void **)(a1 + 48);
      id v21 = v15;
      uint64_t v22 = v16;
      id v23 = v17;
      id v24 = *(id *)(a1 + 32);
      [v14 perform:v19];
    }

    _Block_object_dispose(v30, 8);
  }

  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"challengeIDs"];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100069AA4(_Unwind_Exception *a1)
{
}

void sub_100069ABC(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100069B80;
  v10[3] = &unk_10026E660;
  id v7 = *(id *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  id v12 = v3;
  uint64_t v13 = v8;
  id v11 = v7;
  id v9 = v3;
  [v4 loadChallengesForGameDescriptor:v5 context:v6 handler:v10];
}

void sub_100069B80(void *a1, void *a2, double a3)
{
  uint64_t v5 = (void *)a1[4];
  id v8 = a2;
  [v5 setError:v8];
  BOOL v7 = a3 > 0.0 && v8 == 0LL;
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = v7;
  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_100069BF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  _OWORD v8[2] = sub_100069CBC;
  void v8[3] = &unk_10026B0A8;
  double v4 = *(void **)(a1 + 56);
  void v8[4] = *(void *)(a1 + 48);
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  v8[1] = 3221225472LL;
  id v9 = v4;
  id v10 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 32);
  id v12 = v3;
  id v7 = v3;
  [v5 notifyOnQueue:v6 block:v8];
}

void sub_100069CBC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  double v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100069D7C;
  v5[3] = &unk_10026E6B0;
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 64);
  [v2 fetchChallengesForGameDescriptor:v3 context:v4 handler:v5];
}

uint64_t sub_100069D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v3];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100069DD4(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    double v4 = @"scroll";
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
    uint64_t v5 = v2;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));
    [v1 refreshContentsForDataType:1 userInfo:v3];
  }

void sub_100069EAC(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] error]);

  if (!v2)
  {
    id v3 = a1[4];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_10006A004;
    void v18[3] = &unk_10026B080;
    id v4 = v3;
    id v5 = a1[5];
    id v6 = a1[6];
    id v19 = v4;
    id v20 = v5;
    id v21 = v6;
    [v4 perform:v18];
  }

  id v7 = a1[4];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 replyQueue]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10006A14C;
  v12[3] = &unk_10026B0A8;
  id v13 = a1[4];
  id v10 = a1[6];
  id v11 = a1[5];
  id v14 = v10;
  id v15 = v11;
  id v16 = a1[7];
  id v17 = a1[8];
  [v7 notifyOnQueue:v9 block:v12];
}

void sub_10006A004(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"challengeIDs"]);
  id v5 = *(void **)(a1 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:@"bundle-id"]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10006A0E4;
  void v8[3] = &unk_10026C550;
  id v9 = *(id *)(a1 + 32);
  id v10 = v3;
  id v7 = v3;
  [v5 getChallengeDetailsForChallengeIDs:v4 receiverID:0 clientBundleID:v6 handler:v8];
}

void sub_10006A0E4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:@"challenges"];
  if (v5) {
    [*(id *)(a1 + 32) setError:v5];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10006A14C(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"challenges"]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"bundle-id"]);
  if (+[NSBundle _gkBundleIdentifierIsAnyOverlayUI:]( NSBundle,  "_gkBundleIdentifierIsAnyOverlayUI:",  v2) & 1) != 0 || ([v2 isEqual:GKDaemonIdentifier])
  {
    id v3 = v8;
  }

  else
  {
    id v6 = *(void **)(a1 + 48);
    id v7 = v2;
    if (!v2) {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) bundleIdentifier]);
    }
    id v3 = (id)objc_claimAutoreleasedReturnValue([v6 _filterChallenges:v8 compatibleWithBundleID:v7]);
    if (!v2) {
  }
    }

  uint64_t v4 = *(void *)(a1 + 64);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v3, v5);
}

void sub_10006A46C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v14[0] = 0LL;
  v14[1] = v14;
  void v14[2] = 0x2020000000LL;
  char v15 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10006A564;
  void v8[3] = &unk_10026F048;
  uint64_t v4 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 32);
  id v13 = v14;
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = v7;
  [v4 performOnManagedObjectContext:v8];
  v3[2](v3);

  _Block_object_dispose(v14, 8);
}

void sub_10006A54C(_Unwind_Exception *a1)
{
}

void sub_10006A564(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v44 = a3;
  id v42 = [*(id *)(a1 + 32) count];
  __int16 v43 = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKChallengeCacheObject challengesWithChallengeIDs:context:]( &OBJC_CLASS___GKChallengeCacheObject,  "challengesWithChallengeIDs:context:",  *(void *)(a1 + 32),  v5));
  id v7 = -[NSMutableSet initWithArray:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithArray:", *(void *)(a1 + 32));
  id v8 = [v6 count];
  id v9 = [*(id *)(a1 + 32) count];
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  BOOL v10 = v8 == v9;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  id v11 = v6;
  id v12 = [v11 countByEnumeratingWithState:&v60 objects:v64 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v61;
    double v14 = INFINITY;
    do
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v61 != v13) {
          objc_enumerationMutation(v11);
        }
        id v16 = *(void **)(*((void *)&v60 + 1) + 8LL * (void)i);
        if ([v16 hasDetails])
        {
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 detailsExpirationDate]);
          [v17 timeIntervalSinceNow];
          BOOL v19 = v18 > 0.0;

          if (v19)
          {
            id v20 = (void *)objc_claimAutoreleasedReturnValue([v16 challengeID]);
            -[NSMutableSet removeObject:](v7, "removeObject:", v20);
          }

          id v21 = (void *)objc_claimAutoreleasedReturnValue([v16 detailsExpirationDate]);
          [v21 timeIntervalSinceNow];
          double v23 = v22;

          double v14 = fmin(v14, v23);
        }

        else
        {
          BOOL v10 = 0;
        }
      }

      id v12 = [v11 countByEnumeratingWithState:&v60 objects:v64 count:16];
    }

    while (v12);
  }

  else
  {
    double v14 = INFINITY;
  }

  if (-[NSMutableSet count](v7, "count") != 0LL && !v10
    || (id v24 = (void *)objc_claimAutoreleasedReturnValue([v11 valueForKeyPath:@"internalRepresentation"]),
        [*(id *)(a1 + 40) setObject:v24 forKeyedSubscript:@"challenges"],
        v24,
        *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1,
        v14 <= 0.0))
  {
    id v25 = *(void **)(a1 + 40);
    id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKChallengeService.m",  383LL,  "-[GKChallengeService getChallengeDetailsForChallengeIDs:receiverID:clientBundleID:handler:]_block_invoke_2"));
    id v27 = (void *)objc_claimAutoreleasedReturnValue([v25 transactionGroupWithName:v26]);

    v58[0] = 0LL;
    v58[1] = v58;
    v58[2] = 0x2020000000LL;
    char v59 = 0;
    id v28 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet _gkMapWithBlock:](v7, "_gkMapWithBlock:", &stru_10026EF60));
    id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 replyQueue]);
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472LL;
    v49[2] = sub_10006AB24;
    v49[3] = &unk_10026F020;
    id v31 = v28;
    id v50 = v31;
    id v51 = *(id *)(a1 + 56);
    int8x16_t v41 = *(int8x16_t *)(a1 + 40);
    id v32 = (id)v41.i64[0];
    int8x16_t v52 = vextq_s8(v41, v41, 8uLL);
    __int128 v55 = v58;
    id v33 = v27;
    id v53 = v33;
    id v57 = v42;
    id v34 = *(id *)(a1 + 32);
    uint64_t v35 = *(void *)(a1 + 64);
    id v54 = v34;
    uint64_t v56 = v35;
    [v33 performOnQueue:v30 block:v49];

    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
    {
      id v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
      id v37 = (void *)objc_claimAutoreleasedReturnValue([v36 replyQueue]);
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472LL;
      v45[2] = sub_10006B2E4;
      v45[3] = &unk_10026E058;
      void v45[4] = *(void *)(a1 + 48);
      v45[5] = v58;
      [v33 notifyOnQueue:v37 block:v45];
    }

    else
    {
      id v38 = *(void **)(a1 + 40);
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v39 replyQueue]);
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472LL;
      v46[2] = sub_10006B268;
      v46[3] = &unk_10026BDB0;
      id v47 = *(id *)(a1 + 40);
      id v48 = v33;
      [v38 join:v48 queue:v40 block:v46];
    }

    _Block_object_dispose(v58, 8);
  }

  v44[2]();
}

void sub_10006AA54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
}

id sub_10006AA74(id a1, id a2)
{
  v6[0] = @"GKChallengeInternal";
  v6[1] = a2;
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v6, 2LL));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKResourceIdentifier resourceIdentifierForKeys:]( &OBJC_CLASS___GKResourceIdentifier,  "resourceIdentifierForKeys:",  v3));

  return v4;
}

void sub_10006AB24(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _gkMapWithBlock:&stru_10026EF80]);
  id v24 = @"challenge-ids";
  id v25 = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v25,  &v24,  1LL));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v5));

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    [v6 setObject:v7 forKey:@"player-id"];
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_10006AD2C;
  void v16[3] = &unk_10026EFF8;
  id v10 = *(id *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 80);
  id v17 = v10;
  uint64_t v21 = v11;
  id v12 = *(id *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 96);
  id v18 = v12;
  uint64_t v23 = v13;
  id v14 = *(id *)(a1 + 72);
  uint64_t v22 = *(void *)(a1 + 88);
  id v19 = v14;
  id v20 = v3;
  id v15 = v3;
  [v8 issueRequest:v6 bagKey:@"gk-get-challenges" clientProxy:v9 handler:v16];
}

id sub_10006ACEC(id a1, GKResourceIdentifier *a2, unint64_t a3)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[GKResourceIdentifier keys](a2, "keys", a3));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectAtIndexedSubscript:1]);

  return v4;
}

void sub_10006AD2C(uint64_t a1, void *a2, void *a3, double a4)
{
  id v13 = a2;
  id v7 = a3;
  [*(id *)(a1 + 32) setError:v7];
  if (v13 && !v7)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = a4 > 0.0;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
    id v15 = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472LL;
    id v17 = sub_10006AE74;
    id v18 = &unk_10026EFD0;
    double v24 = a4;
    id v9 = v13;
    uint64_t v10 = *(void *)(a1 + 80);
    id v19 = v9;
    uint64_t v25 = v10;
    id v20 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 72);
    id v21 = v11;
    uint64_t v23 = v12;
    id v22 = *(id *)(a1 + 40);
    [v8 performBlockAndWait:&v15];
  }

  objc_msgSend(*(id *)(a1 + 40), "setError:", v7, v13, v15, v16, v17, v18);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10006AE74(uint64_t a1)
{
  id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 72)));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"results"]);
  id v3 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  *(void *)(a1 + 80));
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v32 = a1;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKChallengeCacheObject challengesWithChallengeIDs:context:]( &OBJC_CLASS___GKChallengeCacheObject,  "challengesWithChallengeIDs:context:",  v4,  v5));

  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id v7 = v6;
  id v8 = [v7 countByEnumeratingWithState:&v40 objects:v45 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v41;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v41 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 challengeID]);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v12, v13);
      }

      id v9 = [v7 countByEnumeratingWithState:&v40 objects:v45 count:16];
    }

    while (v9);
  }

  id v31 = v7;

  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v14 = v2;
  id v15 = [v14 countByEnumeratingWithState:&v36 objects:v44 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v37;
    do
    {
      for (j = 0LL; j != v16; j = (char *)j + 1)
      {
        if (*(void *)v37 != v17) {
          objc_enumerationMutation(v14);
        }
        id v19 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)j);
        id v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", @"status", v31));
        id v21 = [v20 integerValue];

        if (!v21)
        {
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:@"challenge"]);
          uint64_t v23 = v22;
          if (v22)
          {
            double v24 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKey:@"challenge-id"]);
            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v3, "objectForKey:", v24));
            if (v25)
            {
              id v26 = v25;
              [v25 updateWithServerRepresentation:v23];
            }

            else
            {
              id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v32 + 48) context]);
              id v26 = (void *)objc_claimAutoreleasedReturnValue( +[GKChallengeCacheObject challengeWithServerRepresentation:context:]( &OBJC_CLASS___GKChallengeCacheObject,  "challengeWithServerRepresentation:context:",  v23,  v27));
            }

            id v28 = (void *)objc_claimAutoreleasedReturnValue([v26 challengeID]);
            -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v26, v28);

            [v26 setDetailsExpirationDate:v33];
          }
        }
      }

      id v16 = [v14 countByEnumeratingWithState:&v36 objects:v44 count:16];
    }

    while (v16);
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(v32 + 64) + 8LL) + 24LL))
  {
    id v29 = *(void **)(v32 + 40);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_10006B228;
    void v34[3] = &unk_10026EFA8;
    uint64_t v35 = v3;
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 _gkFilterWithBlock:v34]);
    [*(id *)(v32 + 56) setObject:v30 forKeyedSubscript:@"challenges"];
  }
}

id sub_10006B228(uint64_t a1, uint64_t a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:a2]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 internalRepresentation]);

  return v3;
}

void sub_10006B268(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"challenges"]);
  [*(id *)(a1 + 32) setObject:v2 forKeyedSubscript:@"challenges"];

  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v3];
}

void sub_10006B2E4(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    uint64_t v4 = @"scroll";
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
    id v5 = v2;
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));
    [v1 refreshContentsForDataType:1 userInfo:v3];
  }

void sub_10006B3BC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"challenges"]);
  id v3 = v2;
  if (v2)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_10006B520;
    void v17[3] = &unk_10026B080;
    uint64_t v4 = *(void **)(a1 + 32);
    void v17[4] = *(void *)(a1 + 40);
    id v18 = v2;
    id v19 = *(id *)(a1 + 32);
    [v4 perform:v17];
  }

  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10006B6A0;
  v11[3] = &unk_10026C9F0;
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(void **)(a1 + 48);
  id v12 = v3;
  uint64_t v13 = v8;
  id v14 = v9;
  id v16 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 32);
  id v10 = v3;
  [v5 notifyOnQueue:v7 block:v11];
}

void sub_10006B520(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKChallengeService.m",  475LL,  "-[GKChallengeService getChallengeDetailsForChallengeIDs:receiverID:clientBundleID:handler:]_block_invoke_12"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v4));

  [*(id *)(a1 + 32) _determineCompatibleGamesForChallenges:*(void *)(a1 + 40) dispatchGroup:v5];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10006B664;
  v10[3] = &unk_10026B0F8;
  uint64_t v8 = *(void **)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v8;
  id v12 = *(id *)(a1 + 48);
  id v13 = v3;
  id v9 = v3;
  [v5 notifyOnQueue:v7 block:v10];
}

uint64_t sub_10006B664(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10006B6A0(uint64_t a1)
{
  id v14 = *(id *)(a1 + 32);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  unsigned __int8 v3 = [v2 isGameCenter];

  if ((v3 & 1) != 0)
  {
    uint64_t v4 = v14;
  }

  else
  {
    id v5 = *(void **)(a1 + 48);
    if (v5)
    {
      id v6 = v5;
    }

    else
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
      id v6 = (id)objc_claimAutoreleasedReturnValue([v7 bundleIdentifier]);
    }

    uint64_t v8 = *(void **)(a1 + 32);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_10006B7FC;
    void v16[3] = &unk_10026F070;
    id v9 = v6;
    id v17 = v9;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 indexesOfObjectsPassingTest:v16]);
    if ([v10 count]) {
      uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectsAtIndexes:v10]);
    }
    else {
      uint64_t v11 = 0LL;
    }

    uint64_t v4 = (void *)v11;
  }

  uint64_t v12 = *(void *)(a1 + 64);
  if (v12)
  {
    id v15 = v4;
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) error]);
    (*(void (**)(uint64_t, id, void *))(v12 + 16))(v12, v15, v13);

    uint64_t v4 = v15;
  }
}

id sub_10006B7FC(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([a2 compatibleBundleIDs]);
  id v4 = [v3 containsObject:*(void *)(a1 + 32)];

  return v4;
}

uint64_t sub_10006BAD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10006BCB4(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v29 objects:v34 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v30;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v30 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v29 + 1) + 8 * (void)v9) challengeID]);
        [v4 addObject:v10];

        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v29 objects:v34 count:16];
    }

    while (v7);
  }

  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v11 = v4;
  id v12 = [v11 countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v26;
    do
    {
      id v15 = 0LL;
      do
      {
        if (*(void *)v26 != v14) {
          objc_enumerationMutation(v11);
        }
        uint64_t v16 = *(void *)(*((void *)&v25 + 1) + 8LL * (void)v15);
        id v17 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](&OBJC_CLASS___GKBulletinController, "sharedController"));
        [v17 clearChallengeBulletinsForChallengeID:v16];

        id v15 = (char *)v15 + 1;
      }

      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v25 objects:v33 count:16];
    }

    while (v13);
  }

  id v18 = *(void **)(a1 + 40);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  void v22[2] = sub_10006BF18;
  v22[3] = &unk_10026B408;
  id v23 = v11;
  int8x16_t v21 = *(int8x16_t *)(a1 + 40);
  id v19 = (id)v21.i64[0];
  int8x16_t v24 = vextq_s8(v21, v21, 8uLL);
  id v20 = v11;
  [v18 performOnManagedObjectContext:v22];
  v3[2](v3);
}

void sub_10006BF18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"challengeID in %@",  *(void *)(a1 + 32)));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject objectsMatchingPredicate:context:]( &OBJC_CLASS___GKChallengeCacheObject,  "objectsMatchingPredicate:context:",  v7,  v5));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](&OBJC_CLASS___GKBadgeController, "sharedController"));
  uint64_t v10 = GKGameCenterIdentifier;
  __int128 v28 = v9;
  id v11 = (char *)[v9 badgeCountForBundleID:GKGameCenterIdentifier badgeType:0];
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id v12 = v8;
  id v13 = [v12 countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v33;
    do
    {
      uint64_t v16 = 0LL;
      do
      {
        if (*(void *)v33 != v15) {
          objc_enumerationMutation(v12);
        }
        v11 -= [*(id *)(*((void *)&v32 + 1) + 8 * (void)v16) wasViewed] ^ 1;
        uint64_t v16 = (char *)v16 + 1;
      }

      while (v14 != v16);
      id v14 = [v12 countByEnumeratingWithState:&v32 objects:v36 count:16];
    }

    while (v14);
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](&OBJC_CLASS___GKBadgeController, "sharedController"));
  [v17 setBadgeCount:v11 forBundleID:v10 badgeType:0];

  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v5));
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 challengeList]);
  [v19 expire];

  +[GKCacheObject deleteObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKChallengeCacheObject,  "deleteObjectsMatchingPredicate:context:",  v7,  v5);
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKChallengeListCacheObject,  "expireObjectsMatchingPredicate:context:",  0LL,  v5);
  id v20 = objc_alloc(&OBJC_CLASS___GKAbortChallengeNetworkRequest);
  uint64_t v21 = *(void *)(a1 + 32);
  id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 bundleIdentifier]);
  int8x16_t v24 = -[GKChallengeNetworkRequest initWithChallenges:bundleID:](v20, "initWithChallenges:bundleID:", v21, v23);

  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472LL;
  void v29[2] = sub_10006C210;
  v29[3] = &unk_10026B2A0;
  id v30 = *(id *)(a1 + 48);
  id v31 = v6;
  id v27 = v6;
  [v25 writeToNetwork:v24 clientProxy:v26 handler:v29];
}

uint64_t sub_10006C210(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10006C240(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  [v2 refreshContentsForDataType:1 userInfo:&off_1002884D0];
}

void sub_10006C4B4(_Unwind_Exception *a1)
{
}

void sub_10006C4E0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v2));

  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([v5 challengeList]);
  if ([v3 isValid])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 entries]);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v4 count];

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 expired];
  }

  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"profile"];
}

void sub_10006C5A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_10006C660;
  v9[3] = &unk_10026E660;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v11 = v3;
  uint64_t v12 = v7;
  id v10 = v6;
  id v8 = v3;
  [v4 loadChallengesForGameDescriptor:0 context:v5 handler:v9];
}

void sub_10006C660(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_10006C6FC;
  v9[3] = &unk_10026C320;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  id v10 = v4;
  uint64_t v11 = v5;
  [v3 performBlockAndWait:v9];

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  v6,  v7,  v8);
}

void sub_10006C6FC(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"profile"]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  [v2 refreshObject:v5 mergeChanges:1];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 challengeList]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 entries]);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v4 count];
}

void sub_10006C798(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

void sub_10006C988(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = GKBagKeyChallengeApprovedGames;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:GKBagKeyChallengeApprovedGames]);

  uint64_t v6 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v4]);
  }

  else
  {
    v9[0] = @"com.hipsterwhale.crossy";
    v9[1] = @"com.ketchapp.ballz";
    void v9[2] = @"com.seabaa.finity";
    v9[3] = @"3Tank.TimeLockerPlus";
    void v9[4] = @"com.pixelperfectdude.htdrive";
    void v9[5] = @"com.apple.TheCoast";
    v9[6] = GKGKTester2OldIdentifier;
    v9[7] = GKGKTester2Identifier;
    uint64_t v7 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v9, 8LL));
  }

  uint64_t v8 = (void *)v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, v7);
}

_TtC14GameDaemonCore17GKCacheableEntity *__cdecl sub_10006CCE8(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  id v3 = objc_alloc(&OBJC_CLASS___GKLeaderboardChallengeInternal);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", @"result"));

  id v5 = [v3 initWithServerRepresentation:v4];
  uint64_t v11 = @"challenge-id";
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 challengeID]);
  uint64_t v12 = v6;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager makeEntityIDWithRequest:bagKey:]( &OBJC_CLASS___GKNetworkRequestManager,  "makeEntityIDWithRequest:bagKey:",  v7,  @"gk-challenge-detail"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheableEntity createWithBagKey:entityID:entity:]( &OBJC_CLASS____TtC14GameDaemonCore17GKCacheableEntity,  "createWithBagKey:entityID:entity:",  @"gk-challenge-detail",  v8,  v5));

  return (_TtC14GameDaemonCore17GKCacheableEntity *)v9;
}

NSSecureCoding *__cdecl sub_10006CF38(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  id v3 = [[GKLeaderboardChallengeInternal alloc] initWithServerRepresentation:v2];

  return (NSSecureCoding *)v3;
}

NSSecureCoding *__cdecl sub_10006D0C8(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  id v3 = [[GKLeaderboardChallengeSummaryInternal alloc] initWithServerRepresentation:v2];

  return (NSSecureCoding *)v3;
}

void sub_10006D3C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_10006D480;
  v9[3] = &unk_10026B030;
  id v7 = *(id *)(a1 + 40);
  id v10 = v4;
  id v11 = v7;
  id v8 = v4;
  dispatch_async(v6, v9);
}

uint64_t sub_10006D480(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10006D5EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v7 replyQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10006D6D0;
  block[3] = &unk_10026B1E8;
  id v13 = v6;
  id v9 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, block);
}

void sub_10006D6D0(void *a1)
{
  uint64_t v1 = a1[6];
  if (a1[4])
  {
    (*(void (**)(void, void))(v1 + 16))(a1[6], 0LL);
  }

  else
  {
    id v2 = [[GKLeaderboardChallengeInviteStatusInternal alloc] initWithServerRepresentation:a1[5]];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
  }

void sub_10006D9DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:description:]( &OBJC_CLASS___NSError,  "userErrorForCode:description:",  8LL,  @"Request playerID does not match local player"));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

NSSecureCoding *__cdecl sub_10006DBA8(id a1, NSDictionary *a2)
{
  id v2 = a2;
  id v3 = [[GKLeaderboardChallengeComparisonInternal alloc] initWithServerRepresentation:v2];

  return (NSSecureCoding *)v3;
}

NSSecureCoding *__cdecl sub_10006DD5C(id a1, NSDictionary *a2)
{
  id v2 = a2;
  id v3 = [[GKLeaderboardChallengeDetailsPageInternal alloc] initWithServerRepresentation:v2];

  return (NSSecureCoding *)v3;
}

NSSecureCoding *__cdecl sub_10006DF10(id a1, NSDictionary *a2)
{
  id v2 = a2;
  id v3 = [[GKLeaderboardChallengeCompletedSummaryInternal alloc] initWithServerRepresentation:v2];

  return (NSSecureCoding *)v3;
}

void sub_10006E0D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    id v9 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10006E864((uint64_t)v7, v9);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 activeChallenges]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 actives]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 _gkDistinctValuesForKeyPath:@"challengeID"]);

    id v13 = *(void **)(a1 + 32);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 allObjects]);
    [v13 getLeaderboardChallengeDetailsForChallengeIDs:v14 allowStaleData:*(unsigned __int8 *)(a1 + 48) completionHandler:*(void *)(a1 + 40)];
  }
}

void sub_10006E430(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10006E4E4;
  v10[3] = &unk_10026DF40;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 40);
  id v11 = v7;
  uint64_t v12 = v8;
  id v13 = v3;
  id v9 = v3;
  [v4 getLeaderboardChallengeDetailsForChallengeID:v5 allowStaleData:v6 completionHandler:v10];
}

void sub_10006E4E4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v5)
  {
    [*(id *)(a1 + 32) setError:v5];
  }

  else if (v6)
  {
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:*(void *)(a1 + 40)];
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10006E558(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allValues]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v7 allValues]);
  id v4 = (void *)v3;
  if (v3) {
    id v5 = (void *)v3;
  }
  else {
    id v5 = &__NSArray0__struct;
  }
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v5, v6);
}

void sub_10006E6F4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
  uint64_t v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v7 replyQueue]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10006E7F0;
  v11[3] = &unk_10026D1F8;
  id v12 = v6;
  id v15 = a1[6];
  id v13 = v5;
  id v14 = a1[5];
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

void sub_10006E7F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 32))
  {
    (*(void (**)(void, void))(v1 + 16))(*(void *)(a1 + 56), 0LL);
  }

  else
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(a1 + 48)]);
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
  }

void sub_10006E864(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Failed to retrieve leaderboard challenge summary: %@",  (uint8_t *)&v2,  0xCu);
}

void sub_10006EB40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10006EB64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10006EB74(uint64_t a1)
{
}

void sub_10006EB7C(uint64_t a1, int a2, void *a3)
{
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a3);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKMultiplayerMatchService.m",  115LL,  "-[GKMultiplayerMatchService fetchPseudonymIfNeededWithTransportContext:withCompletionHandler:]_block_invoke"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v7));

  uint64_t v9 = *(void *)(a1 + 48);
  if (a2 && !*(void *)(*(void *)(v9 + 8) + 40LL))
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_10006ECDC;
    void v16[3] = &unk_10026F1C8;
    uint64_t v10 = *(void *)(a1 + 56);
    void v16[4] = *(void *)(a1 + 32);
    v16[5] = v10;
    v16[6] = v9;
    [v8 perform:v16];
    uint64_t v9 = *(void *)(a1 + 48);
  }

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10006EE08;
  v12[3] = &unk_10026F1F0;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v14 = v9;
  uint64_t v15 = v11;
  id v13 = *(id *)(a1 + 40);
  [v8 notifyOnMainQueueWithBlock:v12];
}

void sub_10006ECDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pseudonymManager]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10006ED7C;
  void v6[3] = &unk_10026F1A0;
  __int128 v8 = *(_OWORD *)(a1 + 40);
  id v7 = v3;
  id v5 = v3;
  [v4 fetchPseudonymWithCompletionHandler:v6];
}

void sub_10006ED7C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[5] + 8LL);
  __int128 v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(a1[6] + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void))(a1[4] + 16LL))();
}

uint64_t sub_10006EE08(void *a1)
{
  if (*(void *)(*(void *)(a1[5] + 8LL) + 40LL))
  {
    if (!os_log_GKGeneral) {
      id v2 = (id)GKOSLoggers(a1);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10007EF60();
    }
  }

  if (*(void *)(*(void *)(a1[6] + 8LL) + 40LL)
    || (v3 = objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  35LL,  *(void *)(*(void *)(a1[5] + 8LL) + 40LL))),  uint64_t v4 = *(void *)(a1[5] + 8LL),  v5 = *(void **)(v4 + 40),  *(void *)(v4 + 40) = v3,  v5,  *(void *)(*(void *)(a1[6] + 8LL) + 40LL)))
  {
    id v6 = *(uint64_t (**)(void))(a1[4] + 16LL);
  }

  else
  {
    id v6 = *(uint64_t (**)(void))(a1[4] + 16LL);
  }

  return v6();
}

void sub_10006F230(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  [v4 beginTransaction:@"matchRequest"];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10006F35C;
  v11[3] = &unk_10026F268;
  id v6 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v6;
  id v13 = *(id *)(a1 + 48);
  id v17 = v3;
  id v14 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  uint64_t v9 = *(void **)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  id v15 = v7;
  uint64_t v18 = v8;
  id v16 = v9;
  id v10 = v3;
  [v5 getValidNATTypeWithForceRelay:0 withHandler:v11];
}

void sub_10006F35C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10006F454;
  v10[3] = &unk_10026F240;
  id v11 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 80);
  id v6 = *(id *)(a1 + 56);
  uint64_t v18 = a2;
  uint64_t v7 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v7;
  id v8 = *(id *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 88);
  id v14 = v8;
  uint64_t v19 = v9;
  id v15 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 40);
  [v4 fetchPseudonymIfNeededWithTransportContext:v5 withCompletionHandler:v10];
}

void sub_10006F454(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) setError:a3];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    [*(id *)(a1 + 40) setSelfPseudonym:v5];
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKReachability _gkReachabilityForInternetConnection]( &OBJC_CLASS___GKReachability,  "_gkReachabilityForInternetConnection"));
    uint64_t v7 = *(void *)(a1 + 88) | (8 * ([v6 _gkCurrentReachabilityStatus] == 2));
    id v9 = objc_msgSend( (id)objc_opt_class(*(void *)(a1 + 48), v8),  "makeBaseServerRequestForMatchRequest:playerCount:rematchID:connInfo:",  *(void *)(a1 + 56),  *(void *)(a1 + 96),  *(void *)(a1 + 64),  v7);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    id v12 = objc_msgSend( (id)objc_opt_class(*(void *)(a1 + 48), v11),  "makePlayersDictionaryForMatchRequest:transportContext:",  *(void *)(a1 + 56),  *(void *)(a1 + 72));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    [v10 setObject:v13 forKey:@"players"];

    if ([*(id *)(a1 + 56) matchType])
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL));
      [v10 setObject:v14 forKey:GKServerHostedKey];
    }

    else
    {
      [*(id *)(a1 + 72) enrichServerRequest:v10 withMatchRequest:*(void *)(a1 + 56) selfPseudonym:v5];
      [*(id *)(a1 + 48) validateRequests:v10 andFileMultiplayerTTRIfNeededWithContext:@"[Internal Only] Found invalid transport version for matchmaking request."];
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:GKMatchClientDataKey]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 88)));
      [v14 setObject:v15 forKey:@"nat-type"];

      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 pushToken]);

      if (v17) {
        [v14 setObject:v17 forKey:GKMatchPushTokenKey];
      }
      [v14 setObject:v5 forKey:GKTransportPseudonymKey];
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 56) isLateJoin]));
      [v10 setObject:v18 forKeyedSubscript:@"is-late-join"];
    }

    [*(id *)(a1 + 40) setServerRequest:v10];
    uint64_t v19 = *(void **)(a1 + 32);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    void v22[2] = sub_10006F718;
    v22[3] = &unk_10026B080;
    uint64_t v20 = *(void *)(a1 + 48);
    id v23 = v10;
    uint64_t v24 = v20;
    id v25 = v19;
    id v21 = v10;
    [v19 perform:v22];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }
}

void sub_10006F718(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_10006F7F4;
  v9[3] = &unk_10026C7A8;
  uint64_t v7 = *(void **)(a1 + 48);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = v7;
  id v11 = v3;
  id v8 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-request-match" clientProxy:v6 handler:v9];
}

void sub_10006F7F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v9 = v5;
  if (!v5)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = a2;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 clientProxy]);
    [v8 processMatchResponse:v7];

    id v5 = 0LL;
  }

  [*(id *)(a1 + 40) setError:v5];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10006F880(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isCancelled])
  {
    uint64_t v2 = 2LL;
  }

  else if ([*(id *)(a1 + 32) isTimeout])
  {
    uint64_t v2 = 33LL;
  }

  else
  {
    uint64_t v2 = 3LL;
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  v2,  0LL));
  [*(id *)(a1 + 40) setError:v3];

LABEL_8:
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
    (*(void (**)(uint64_t, uint64_t, void *))(v4 + 16))(v4, v5, v6);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  [v7 setCurrentMatchResponse:0];

  id v8 = (id)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  [v8 endTransaction:@"matchRequest"];
}

void sub_1000702F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100070320(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained clientProxy]);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _OWORD v8[2] = sub_10007040C;
    void v8[3] = &unk_10026B4F8;
    id v9 = v3;
    [v5 issueRequest:v6 bagKey:@"gk-cancel-match" clientProxy:v7 handler:v8];
  }

  else
  {
    v3[2](v3);
  }
}

uint64_t sub_10007040C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100070818(_Unwind_Exception *a1)
{
}

void sub_100070830(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 gameDescriptor]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v8,  v5));

  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"game == %@ && playerGroup == %@ && queueName == %@",  v9,  *(void *)(a1 + 40),  *(void *)(a1 + 48)));
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKFlowRateCacheObject,  "firstObjectMatchingPredicate:context:",  v10,  v5));
  id v12 = v11;
  if (v11)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 playersPerMinute]);
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v13 unsignedIntegerValue];

    id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 expirationDate]);
    [v14 timeIntervalSinceNow];
    BOOL v16 = v15 > 0.0;
  }

  else
  {
    BOOL v16 = 0;
  }

  if (!os_log_GKGeneral) {
    id v17 = (id)GKOSLoggers(v11);
  }
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG))
  {
    sub_10007F038();
    if (v16) {
      goto LABEL_16;
    }
  }

  else if (v16)
  {
    goto LABEL_16;
  }

  uint64_t v18 = *(void **)(a1 + 56);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKMultiplayerMatchService.m",  413LL,  "-[GKMultiplayerMatchService getFlowRateWithPlayerGroup:queueName:handler:]_block_invoke"));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v18 transactionGroupWithName:v19]);

  uint64_t v21 = *(void *)(a1 + 40);
  if (v21)
  {
    id v49 = @"bucket-id";
    uint64_t v50 = v21;
    id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v50,  &v49,  1LL));
  }

  else
  {
    id v22 = 0LL;
  }

  uint64_t v23 = *(void *)(a1 + 48);
  if (v23)
  {
    id v47 = @"queue-name";
    uint64_t v48 = v23;
    uint64_t v24 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v48,  &v47,  1LL));

    id v22 = (void *)v24;
  }

  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  void v37[2] = sub_100070BF0;
  v37[3] = &unk_10026F330;
  id v25 = v22;
  uint64_t v26 = *(void *)(a1 + 32);
  id v38 = v25;
  uint64_t v39 = v26;
  id v27 = v20;
  id v40 = v27;
  id v41 = v12;
  id v42 = v5;
  id v43 = v9;
  id v44 = *(id *)(a1 + 40);
  id v28 = *(id *)(a1 + 48);
  uint64_t v29 = *(void *)(a1 + 64);
  id v45 = v28;
  uint64_t v46 = v29;
  [v27 perform:v37];
  if (!v12)
  {
    id v30 = *(void **)(a1 + 56);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    v33[2] = sub_100070F5C;
    v33[3] = &unk_10026B080;
    id v31 = v27;
    uint64_t v32 = *(void *)(a1 + 32);
    id v34 = v31;
    uint64_t v35 = v32;
    id v36 = *(id *)(a1 + 56);
    [v30 perform:v33];
  }

LABEL_16:
  v6[2](v6);
}

void sub_100070BF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100070D34;
  v10[3] = &unk_10026F308;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 72);
  id v15 = *(id *)(a1 + 80);
  id v7 = *(id *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  id v17 = v3;
  uint64_t v18 = v8;
  id v16 = v7;
  id v9 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-get-flow-rate" clientProxy:v6 handler:v10];
}

void sub_100070D34(uint64_t a1, void *a2, void *a3, double a4)
{
  id v11 = a2;
  id v7 = a3;
  if (v11 && !v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100070E78;
    v12[3] = &unk_10026F2E0;
    id v13 = *(id *)(a1 + 40);
    id v14 = *(id *)(a1 + 48);
    id v15 = *(id *)(a1 + 56);
    id v16 = *(id *)(a1 + 64);
    id v17 = *(id *)(a1 + 72);
    id v9 = v11;
    double v20 = a4;
    uint64_t v10 = *(void *)(a1 + 88);
    id v18 = v9;
    uint64_t v19 = v10;
    [v8 performBlockAndWait:v12];
  }

  [*(id *)(a1 + 32) setError:v7];
  (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

void sub_100070E78(uint64_t a1)
{
  uint64_t v5 = (GKFlowRateCacheObject *)*(id *)(a1 + 32);
  if (!v5)
  {
    uint64_t v5 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKFlowRateCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 40));
    -[GKFlowRateCacheObject setGame:](v5, "setGame:", *(void *)(a1 + 48));
    -[GKFlowRateCacheObject setPlayerGroup:](v5, "setPlayerGroup:", *(void *)(a1 + 56));
    -[GKFlowRateCacheObject setQueueName:](v5, "setQueueName:", *(void *)(a1 + 64));
  }

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) valueForKey:@"players-per-min"]);
  -[GKFlowRateCacheObject setPlayersPerMinute:](v5, "setPlayersPerMinute:", v2);

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 88)));
  -[GKFlowRateCacheObject setExpirationDate:](v5, "setExpirationDate:", v3);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[GKFlowRateCacheObject playersPerMinute](v5, "playersPerMinute"));
  *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = [v4 unsignedIntegerValue];
}

void sub_100070F5C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100071034;
  void v8[3] = &unk_10026B148;
  id v9 = a1[6];
  id v10 = a1[4];
  id v11 = v3;
  id v7 = v3;
  [v4 notifyOnQueue:v6 block:v8];
}

uint64_t sub_100071034(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100071078(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

void sub_10007128C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"short-bundle-version"]);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"bundle-id"]);
  id v9 = *(void **)(a1 + 32);
  if (v7)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"short-bundle-version"]);
    id v11 = +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"bundleID = %@ AND shortVersion = %@",  v8,  v10);
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"bundle-version"]);
    id v11 = +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"bundleID = %@ AND version = %@",  v8,  v10);
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject firstObjectMatchingPredicate:context:]( &OBJC_CLASS___GKCompatibilityListCacheObject,  "firstObjectMatchingPredicate:context:",  v12,  v5));
  unsigned int v14 = [v13 isValid];
  char v15 = v14;
  if (!v14) {
    goto LABEL_10;
  }
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v13 internalRepresentation]);
  [*(id *)(a1 + 40) setObject:v16 forKeyedSubscript:@"result"];

  if (!os_log_GKGeneral) {
    id v18 = (id)GKOSLoggers(v17);
  }
  uint64_t v19 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    double v20 = *(void **)(a1 + 40);
    uint64_t v21 = v19;
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:@"result"]);
    *(_DWORD *)buf = 138412290;
    id v45 = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "List of compatible games:%@", buf, 0xCu);
  }

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v13 expirationDate]);
  [v23 timeIntervalSinceNow];
  double v25 = v24;

  if (v25 <= 0.0)
  {
LABEL_10:
    uint64_t v26 = *(void **)(a1 + 40);
    id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKMultiplayerMatchService.m",  492LL,  "-[GKMultiplayerMatchService getCompatibilityMatrix:handler:]_block_invoke"));
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v26 transactionGroupWithName:v27]);

    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472LL;
    void v38[2] = sub_100071620;
    void v38[3] = &unk_10026BB28;
    id v29 = *(id *)(a1 + 32);
    uint64_t v30 = *(void *)(a1 + 48);
    id v39 = v29;
    uint64_t v40 = v30;
    id v31 = v28;
    id v41 = v31;
    id v42 = v13;
    id v43 = v5;
    [v31 perform:v38];
    if ((v15 & 1) == 0)
    {
      uint64_t v32 = *(void **)(a1 + 40);
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472LL;
      v35[2] = sub_1000719EC;
      void v35[3] = &unk_10026B080;
      id v36 = v31;
      int8x16_t v34 = *(int8x16_t *)(a1 + 40);
      id v33 = (id)v34.i64[0];
      int8x16_t v37 = vextq_s8(v34, v34, 8uLL);
      [v32 perform:v35];
    }
  }

  v6[2](v6);
}

void sub_100071620(id *a1, void *a2)
{
  id v3 = a2;
  unsigned int v14 = @"game";
  id v15 = a1[4];
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100071798;
  void v8[3] = &unk_10026E750;
  id v9 = a1[6];
  id v10 = a1[7];
  id v11 = a1[8];
  id v12 = a1[4];
  id v13 = v3;
  id v7 = v3;
  [v5 issueRequest:v4 bagKey:@"gk-get-compatible-games" clientProxy:v6 handler:v8];
}

void sub_100071798(uint64_t a1, void *a2, void *a3, double a4)
{
  id v9 = a2;
  id v7 = a3;
  if (v9 && !v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_1000718C4;
    v10[3] = &unk_10026DD80;
    id v11 = *(id *)(a1 + 40);
    double v16 = a4;
    id v12 = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    id v14 = v9;
    id v15 = *(id *)(a1 + 32);
    [v8 performBlockAndWait:v10];
  }

  [*(id *)(a1 + 32) setError:v7];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_1000718C4(uint64_t a1)
{
  id v7 = (GKCompatibilityListCacheObject *)*(id *)(a1 + 32);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 72)));
  if (!v7)
  {
    id v7 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKCompatibilityListCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 40));
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"bundle-id"]);
    -[GKCompatibilityListCacheObject setBundleID:](v7, "setBundleID:", v3);

    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"bundle-version"]);
    -[GKCompatibilityListCacheObject setVersion:](v7, "setVersion:", v4);

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"short-bundle-version"]);
    -[GKCompatibilityListCacheObject setShortVersion:](v7, "setShortVersion:", v5);
  }

  -[GKCompatibilityListCacheObject updateWithServerRepresentation:expirationDate:]( v7,  "updateWithServerRepresentation:expirationDate:",  *(void *)(a1 + 56),  v2);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[GKListCacheObject internalRepresentation](v7, "internalRepresentation"));
  [*(id *)(a1 + 64) setObject:v6 forKeyedSubscript:@"result"];
}

void sub_1000719EC(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1[4];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100071AC4;
  void v8[3] = &unk_10026B148;
  id v9 = a1[6];
  id v10 = a1[4];
  id v11 = v3;
  id v7 = v3;
  [v4 notifyOnQueue:v6 block:v8];
}

uint64_t sub_100071AC4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"result"]);
  [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:@"result"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100071B40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"result"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100071DD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shareRecordID]);
  id v15 = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 1LL));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKCloudKitMultiplayerUtils privateDatabase]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "privateDatabase"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100071F14;
  v10[3] = &unk_10026D1A8;
  id v11 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  id v12 = v7;
  uint64_t v13 = v8;
  id v14 = v3;
  id v9 = v3;
  +[GKCloudKitMultiplayerUtils fetchShareRecordsWithRecordIDs:inDatabase:handler:]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "fetchShareRecordsWithRecordIDs:inDatabase:handler:",  v5,  v6,  v10);
}

void sub_100071F14(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = a2;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 shareRecordID]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v8]);

  if (v9)
  {
    [v9 setObject:*(void *)(a1 + 40) forKeyedSubscript:@"invitedPlayers"];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_10007205C;
    void v14[3] = &unk_10026F358;
    id v11 = *(void **)(a1 + 48);
    id v15 = *(id *)(a1 + 56);
    [v11 saveRecord:v9 withHandler:v14];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers(v10);
    }
    uint64_t v13 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10007F118((void **)(a1 + 32), v13, (uint64_t)v5);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_10007205C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10007F1CC();
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers(0LL);
    }
    uint64_t v10 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Saved invitee record to CloudKit, where invitedPlayers entry maps [MessagesID : playerID].",  v11,  2u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10007246C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = a2;
  uint64_t v49 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 32) hasGuestPlayers]));
  [v4 setObject:v5 forKey:@"requires-guest-player-capability"];

  [v4 setObject:*(void *)(a1 + 40) forKey:@"peers"];
  if (*(_BYTE *)(a1 + 88))
  {
    uint64_t v6 = 3LL;
    id v7 = @"nearby";
  }

  else if ([*(id *)(a1 + 56) count] {
         || [*(id *)(a1 + 40) count]
  }
         && (id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectAtIndexedSubscript:0]),
             id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"push-token"]),
             v9,
             v8,
             v9))
  {
    uint64_t v6 = 4LL;
    id v7 = @"shareplay";
  }

  else
  {
    uint64_t v6 = 1LL;
    id v7 = @"standard";
  }

  [v4 setObject:v7 forKeyedSubscript:@"mode"];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v6));
  [*(id *)(a1 + 48) setApproachUsed:v10];

  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 32) isLateJoin]));
  [v4 setObject:v11 forKeyedSubscript:@"is-late-join"];

  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 pushToken]);

  if (v13) {
    [v4 setObject:v13 forKey:@"self-push-token"];
  }
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) clientProxy]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 fetchOrCreateInviteSession]);

  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472LL;
  v46[2] = sub_100072944;
  v46[3] = &unk_10026BDB0;
  id v16 = v15;
  id v47 = v16;
  id v17 = v4;
  id v48 = v17;
  [v16 performSync:v46];
  id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v2));
  [v17 setObject:v18 forKey:@"self-nat-type"];

  uint64_t v19 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) inviteMessage]);
  double v20 = v19;
  if (!v19) {
    uint64_t v19 = &stru_10027B720;
  }
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString dataUsingEncoding:](v19, "dataUsingEncoding:", 4LL));

  id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableData dataWithCapacity:]( NSMutableData,  "dataWithCapacity:",  (char *)[v21 length] + 2));
  [v22 appendBytes:&v49 length:1];
  BOOL v45 = [*(id *)(a1 + 32) matchType] == (id)1;
  [v22 appendBytes:&v45 length:1];
  [v22 appendData:v21];
  [v22 appendBytes:&unk_1001F2EE8 length:1];
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) defaultInviteVersionFromMinimumSupportedTransportVersion]);
  unsigned __int8 v24 = [v23 unsignedIntValue];

  unsigned __int8 v44 = v24;
  [v22 appendBytes:&v44 length:1];
  double v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v22,  @"s",  0LL));
  [v17 setObject:v25 forKey:GKMatchClientDataKey];
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 32) playerGroup]));
  [v25 setObject:v26 forKey:@"g"];

  id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 32) playerAttributes]));
  [v25 setObject:v27 forKey:@"a"];

  id v28 = *(void **)(a1 + 64);
  uint64_t v29 = *(void *)(a1 + 72);
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472LL;
  v34[2] = sub_100072A58;
  void v34[3] = &unk_10026F3A8;
  id v41 = *(id *)(a1 + 80);
  uint64_t v42 = v49;
  id v35 = *(id *)(a1 + 48);
  id v36 = v13;
  id v37 = *(id *)(a1 + 72);
  id v38 = v17;
  uint64_t v30 = *(void *)(a1 + 64);
  char v43 = *(_BYTE *)(a1 + 89);
  uint64_t v39 = v30;
  id v40 = v16;
  id v31 = v16;
  id v32 = v17;
  id v33 = v13;
  [v28 fetchPseudonymIfNeededWithTransportContext:v29 withCompletionHandler:v34];
}

void sub_100072944(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionToken]);
  id v3 = v2;
  if (v2) {
    id v2 = [*(id *)(a1 + 40) setObject:v2 forKey:@"session-token"];
  }
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers(v2);
  }
  id v5 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void **)(a1 + 32);
    id v7 = v5;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 sessionToken]);
    int v9 = 138412290;
    uint64_t v10 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Session token for initiate request: %@",  (uint8_t *)&v9,  0xCu);
  }
}

void sub_100072A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    (*(void (**)(void, void, void, uint64_t, void))(*(void *)(a1 + 80) + 16LL))( *(void *)(a1 + 80),  0LL,  *(void *)(a1 + 88),  a3,  *(void *)(a1 + 32));
  }

  else
  {
    [*(id *)(a1 + 32) setSelfPseudonym:a2];
    [*(id *)(a1 + 32) setSelfPushToken:*(void *)(a1 + 40)];
    [*(id *)(a1 + 48) enrichServerRequest:*(void *)(a1 + 56) andInviteResponse:*(void *)(a1 + 32)];
    id v4 = [*(id *)(a1 + 64) validateRequests:*(void *)(a1 + 56) andFileMultiplayerTTRIfNeededWithContext:@"[Internal Only] Found invalid transport version for invitation request."];
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v4);
    }
    uint64_t v6 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      uint64_t v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "gk-invitation-initiate request: %@", buf, 0xCu);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) clientProxy]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_100072C64;
    void v13[3] = &unk_10026F380;
    id v14 = *(id *)(a1 + 32);
    id v15 = *(id *)(a1 + 48);
    char v19 = *(_BYTE *)(a1 + 96);
    id v16 = *(id *)(a1 + 72);
    id v11 = *(id *)(a1 + 80);
    uint64_t v12 = *(void *)(a1 + 88);
    id v17 = v11;
    uint64_t v18 = v12;
    [v8 issueRequest:v9 bagKey:@"gk-invitation-initiate" clientProxy:v10 handler:v13];
  }

void sub_100072C64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = v6;
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10007F28C();
    }
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"status"]);

    if (!v9) {
      goto LABEL_10;
    }
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"status"]);
    id v11 = [v10 integerValue];

    if (v11 != (id)5020) {
      goto LABEL_10;
    }
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"peers"]);
    id v13 = [v12 count];

    if (!v13
      || (id v14 = v5,
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v7 userInfo]),
          v16 = objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:userInfo:]( &OBJC_CLASS___NSError,  "userErrorForCode:userInfo:",  5020LL,  v15)),  v7,  v15,  uint64_t v7 = (void *)v16,  !v5))
    {
LABEL_10:
      id v17 = 0LL;
      goto LABEL_27;
    }
  }

  else
  {
    id v18 = v5;
    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers(v18);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
      sub_10007F22C();
    }
    uint64_t v7 = 0LL;
    if (!v5) {
      goto LABEL_10;
    }
  }

  double v20 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:GKSuggestedTransportVersionKey]);
  uint64_t v21 = v20;
  if (v20 && [v20 integerValue])
  {
    [*(id *)(a1 + 32) setTransportVersionToUse:v21];
  }

  else
  {
    id v22 = [*(id *)(a1 + 40) validTransportSelected];
    if ((_DWORD)v22)
    {
      if (!os_log_GKGeneral) {
        id v23 = (id)GKOSLoggers(v22);
      }
      unsigned __int8 v24 = (void *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        double v25 = *(void **)(a1 + 40);
        uint64_t v26 = v24;
        id v27 = (void *)objc_claimAutoreleasedReturnValue([v25 selectedTransport]);
        *(_DWORD *)buf = 138412290;
        __int128 v55 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "We didn't get transport suggestion from server, but we have previously selected transport. Use it. %@",  buf,  0xCu);
      }

      id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) selectedTransport]);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v28 version]));
      [*(id *)(a1 + 32) setTransportVersionToUse:v29];
    }
  }

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportVersionToUse]);

  if (!v30)
  {
    if (*(_BYTE *)(a1 + 72))
    {
      id v34 = [*(id *)(a1 + 32) setTransportVersionToUse:&off_100287928];
      if (!os_log_GKGeneral) {
        id v35 = (id)GKOSLoggers(v34);
      }
      id v36 = (os_log_s *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "Use V2 transport since message invitees are all available for v2.",  buf,  2u);
      }
    }

    else
    {
      id v47 = *(void **)(a1 + 40);
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
      id v48 = (void *)objc_claimAutoreleasedReturnValue([v49 forceEnabledTransportVersions]);
      id v37 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
      id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 forceDisabledTransportVersions]);
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
      id v40 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v47,  "defaultTransportWithForceEnabledTransports:forceDisabledTransports:andHealthMonitorEnabled:",  v48,  v38,  objc_msgSend(v39, "multiplayerHealthCheckEnabled")));
      id v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v40 version]));
      [*(id *)(a1 + 32) setTransportVersionToUse:v41];

      if (!os_log_GKGeneral) {
        id v43 = (id)GKOSLoggers(v42);
      }
      unsigned __int8 v44 = (void *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        BOOL v45 = v44;
        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL));
        *(_DWORD *)buf = 138412290;
        __int128 v55 = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_INFO,  "Default to use GKDefaultTransportVersionIfNeeded = %@, since this is not included in the response.",  buf,  0xCu);
      }
    }
  }

  id v17 = v5;
LABEL_27:
  id v31 = *(void **)(a1 + 48);
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472LL;
  v50[2] = sub_1000731F4;
  v50[3] = &unk_10026BEA0;
  id v32 = v17;
  id v51 = v32;
  id v52 = *(id *)(a1 + 48);
  id v53 = *(id *)(a1 + 32);
  [v31 performSync:v50];
  uint64_t v33 = *(void *)(a1 + 56);
  if (v33) {
    (*(void (**)(uint64_t, id, void, void *, void))(v33 + 16))( v33,  v32,  *(void *)(a1 + 64),  v7,  *(void *)(a1 + 32));
  }
}

void sub_1000731F4(id *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([a1[4] objectForKey:@"session-token"]);
  id v3 = v2;
  if (v2)
  {
    [a1[5] setSessionToken:v2];
    id v2 = [a1[6] setSessionToken:v3];
  }

  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers(v2);
  }
  id v5 = (os_log_s *)os_log_GKMatch;
  BOOL v6 = os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO);
  if (v6)
  {
    int v12 = 138412290;
    id v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Session token from initiate response: %@",  (uint8_t *)&v12,  0xCu);
  }

  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers(v6);
  }
  id v8 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    id v9 = a1[5];
    uint64_t v10 = v8;
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 sessionToken]);
    int v12 = 138412290;
    id v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "session.sessionToken %@", (uint8_t *)&v12, 0xCu);
  }
}

void sub_1000735B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 72);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1000736B8;
  v11[3] = &unk_10026F420;
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  id v17 = v3;
  uint64_t v9 = *(void *)(a1 + 32);
  id v12 = v8;
  uint64_t v13 = v9;
  id v14 = *(id *)(a1 + 64);
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 40);
  id v10 = v3;
  [v4 initiateInvitationForMatchRequest:v5 recipients:&__NSArray0__struct devicePushTokenMap:0 isNearbyInvite:0 availableForMessageV2:v6 transportContext:v7 handler:v11];
}

void sub_1000736B8(uint64_t a1, void *a2, unsigned __int8 a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  id v12 = v11;
  if (v10)
  {
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers(v11);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10007F3B4();
    }
    [*(id *)(a1 + 32) setError:v10];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    id v68 = v9;
    id v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 bundleIdentifier]);
    -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", v16, @"bundle-id");

    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 bundleVersion]);
    -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", v18, @"bundle-version");

    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    double v20 = (void *)objc_claimAutoreleasedReturnValue([v19 bundleShortVersion]);

    if (v20)
    {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 bundleShortVersion]);
      -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", v22, @"short-bundle-version");
    }

    id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    unsigned __int8 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 adamID]);

    if (v24)
    {
      double v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 adamID]);
      -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", v26, @"adam-id");
    }

    id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerID]);
    -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", v27, @"playerID");

    id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a3));
    -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", v28, @"self-nat-type");

    [*(id *)(a1 + 56) enrichConnectionDictionary:v14 inviteResponse:v12];
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 fetchOrCreateInviteSession]);

    v76[0] = _NSConcreteStackBlock;
    v76[1] = 3221225472LL;
    v76[2] = sub_100073F64;
    v76[3] = &unk_10026BDB0;
    id v77 = v30;
    id v31 = v14;
    __int128 v78 = v31;
    id v67 = v77;
    [v77 performSync:v76];
    id v32 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 pushToken]);

    if (v33)
    {
      id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 base64EncodedStringWithOptions:0]);
      -[NSMutableDictionary setObject:forKey:](v31, "setObject:forKey:", v34, @"self-push-token");
    }

    id v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 64) playerGroup]));
    -[NSMutableDictionary setObject:forKey:](v31, "setObject:forKey:", v35, @"g");

    id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 64) playerAttributes]));
    -[NSMutableDictionary setObject:forKey:](v31, "setObject:forKey:", v36, @"a");

    id v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 64) matchType]));
    -[NSMutableDictionary setObject:forKey:](v31, "setObject:forKey:", v37, @"matchType");

    id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) defaultInviteVersionFromMinimumSupportedTransportVersion]);
    -[NSMutableDictionary setObject:forKey:](v31, "setObject:forKey:", v38, @"inviteVersion");

    -[NSMutableDictionary setObject:forKey:](v31, "setObject:forKey:", &off_100287940, @"invite-type");
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v12 selfPseudonym]);
    -[NSMutableDictionary setObject:forKey:](v31, "setObject:forKey:", v39, GKTransportPseudonymKey);

    id v40 = (void *)objc_claimAutoreleasedReturnValue([v12 transportVersionToUse]);
    -[NSMutableDictionary setObject:forKey:](v31, "setObject:forKey:", v40, GKSuggestedTransportVersionPushShortKey);

    id v41 = (void *)objc_claimAutoreleasedReturnValue([v12 transportVersionToUse]);
    id v42 = [v41 integerValue];

    if (v42 == (id)2)
    {
      unsigned __int8 v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      BOOL v45 = (void *)objc_claimAutoreleasedReturnValue([v12 lobbyParticipantsInfo]);

      if (v45)
      {
        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v12 lobbyParticipantsInfo]);
        [v44 setObject:v46 forKey:GKInviteLobbyParticipantsKey];
      }

      id v47 = (void *)objc_claimAutoreleasedReturnValue([v12 gameParticipantsInfo]);

      if (v47)
      {
        id v48 = (void *)objc_claimAutoreleasedReturnValue([v12 gameParticipantsInfo]);
        [v44 setObject:v48 forKey:GKInviteGameParticipantsKey];
      }

      if ([v44 count])
      {
        id v75 = 0LL;
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v44,  1LL,  &v75));
        id v50 = v75;
        id v51 = v50;
        if (v49)
        {
          -[NSMutableDictionary setObject:forKey:](v31, "setObject:forKey:", v49, GKInviteArchivedParticipantInfoKey);
        }

        else if (v50)
        {
          if (!os_log_GKGeneral) {
            id v52 = (id)GKOSLoggers(v50);
          }
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
            sub_10007F34C();
          }
        }
      }

      -[NSMutableDictionary setObject:forKey:](v31, "setObject:forKey:", &off_100287928, @"inviteVersion");
    }

    if (!os_log_GKGeneral) {
      id v53 = (id)GKOSLoggers(v43);
    }
    id v54 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v80 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_INFO,  "GK-InviteMessages: loadDataForURL connectionDictionary: %@",  buf,  0xCu);
    }

    __int128 v55 = -[CKRecordZoneID initWithZoneName:ownerName:]( objc_alloc(&OBJC_CLASS___CKRecordZoneID),  "initWithZoneName:ownerName:",  @"com.apple.legacygaming.invites",  CKCurrentUserDefaultName);
    uint64_t v56 = -[CKRecord initWithRecordType:zoneID:]( objc_alloc(&OBJC_CLASS___CKRecord),  "initWithRecordType:zoneID:",  @"LegacyMultiplayerInvites",  v55);
    id v74 = 0LL;
    id v57 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v31,  1LL,  &v74));
    id v58 = v74;
    if (v58)
    {
      id v59 = [*(id *)(a1 + 32) setError:v58];
      if (!os_log_GKGeneral) {
        id v60 = (id)GKOSLoggers(v59);
      }
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
        sub_10007F2EC();
      }
    }

    else
    {
      id v61 = -[CKRecord setObject:forKeyedSubscript:](v56, "setObject:forKeyedSubscript:", v57, @"connectionData");
      if (!os_log_GKGeneral) {
        id v62 = (id)GKOSLoggers(v61);
      }
      __int128 v63 = (os_log_s *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        __int128 v80 = v57;
        _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_INFO,  "GK-InviteMessages: loadDataForURL record for inviteData: %@",  buf,  0xCu);
      }

      uint64_t v64 = *(void **)(a1 + 32);
      v69[0] = _NSConcreteStackBlock;
      v69[1] = 3221225472LL;
      v69[2] = sub_100074070;
      v69[3] = &unk_10026BEC8;
      __int16 v65 = v56;
      uint64_t v66 = *(void *)(a1 + 40);
      v70 = v65;
      uint64_t v71 = v66;
      id v72 = v12;
      id v73 = *(id *)(a1 + 32);
      [v64 perform:v69];
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();

    id v9 = v68;
  }
}

void sub_100073F64(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionToken]);
  id v3 = v2;
  if (v2)
  {
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 base64EncodedStringWithOptions:0]);
    [v4 setObject:v5 forKey:@"session-token"];
  }

  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers(v2);
  }
  uint64_t v7 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Session token for CloudKit record: %@",  (uint8_t *)&v8,  0xCu);
  }
}

void sub_100074070(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) share]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 recordID]);
  id v6 = v5;
  if (v5)
  {
    uint64_t v7 = v5;
  }

  else
  {
    int v8 = objc_alloc(&OBJC_CLASS___CKRecordID);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordID]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 recordName]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@",  @"share",  v10));
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 zoneID]);
    uint64_t v7 = -[CKRecordID initWithRecordName:zoneID:](v8, "initWithRecordName:zoneID:", v11, v13);
  }

  id v14 = *(void **)(a1 + 40);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordID]);
  [v14 setShareRecordID:v15];

  if (!os_log_GKGeneral) {
    id v17 = (id)GKOSLoggers(v16);
  }
  id v18 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v28 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Setting up CKShare for record: %@", buf, 0xCu);
  }

  uint64_t v21 = *(void *)(a1 + 32);
  double v20 = *(void **)(a1 + 40);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  void v23[2] = sub_1000742CC;
  v23[3] = &unk_10026F3F8;
  id v24 = *(id *)(a1 + 48);
  id v25 = *(id *)(a1 + 56);
  id v26 = v3;
  id v22 = v3;
  [v20 setupInviteShareWithRecordID:v7 rootRecord:v21 handler:v23];
}

void sub_1000742CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 URL]);
  [*(id *)(a1 + 32) setCloudKitShareURL:v6];

  [*(id *)(a1 + 40) setObject:*(void *)(a1 + 32) forKeyedSubscript:@"inviteResponse"];
  if (v5)
  {
    id v7 = [*(id *)(a1 + 40) setError:v5];
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v7);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10007F414();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100074394(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"inviteResponse"]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);
  }

void sub_1000746A8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_100074848;
  void v17[3] = &unk_10026F448;
  id v8 = v6;
  id v18 = v8;
  id v19 = *(id *)(a1 + 32);
  id v21 = *(id *)(a1 + 64);
  id v9 = v7;
  id v20 = v9;
  id v10 = objc_retainBlock(v17);
  if (*(_BYTE *)(a1 + 72)
    && [*(id *)(a1 + 40) zoneNotFoundFromOperation:@"setupInviteShareWithRecordID" operationError:v9])
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10007499C;
    v12[3] = &unk_10026F470;
    id v11 = *(void **)(a1 + 48);
    void v12[4] = *(void *)(a1 + 40);
    id v13 = v11;
    id v14 = *(id *)(a1 + 56);
    id v15 = *(id *)(a1 + 64);
    uint64_t v16 = v10;
    +[GKCloudKitMultiplayerUtils createZoneWithName:handler:]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "createZoneWithName:handler:",  @"com.apple.legacygaming.invites",  v12);
  }

  else
  {
    ((void (*)(void *, id))v10[2])(v10, v9);
  }
}

void sub_100074848(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v11;
    while (2)
    {
      for (i = 0LL; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
        id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "recordID", (void)v10));
        id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordID]);
        unsigned int v9 = [v7 isEqual:v8];

        if (v9)
        {
          id v3 = v6;
          goto LABEL_11;
        }
      }

      id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }

id sub_10007499C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
  else {
    return _[*(id *)(a1 + 32) setupInviteShareWithRecordID:*(void *)(a1 + 40) rootRecord:*(void *)(a1 + 48) shouldRetry:0 handler:*(void *)(a1 + 56)];
  }
}

LABEL_16:
  }

  else
  {
    LOBYTE(v10) = 0;
  }

  return (char)v10;
}

  if (-[GKGameplayBulletin gameLocation](self, "gameLocation") != 1)
  {
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    void v29[2] = sub_10011EA3C;
    v29[3] = &unk_10026B170;
    void v29[4] = self;
    uint64_t v30 = v9;
    [v30 perform:v29];
  }

  if (v5)
  {
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v25 replyQueue]);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_10011EB64;
    id v26[3] = &unk_10026B030;
    uint64_t v28 = v5;
    id v27 = v9;
    [v27 notifyOnQueue:v24 block:v26];
  }
}

    sub_1001359F0(v42);
    return;
  }

  BOOL v45 = v40;
  uint64_t v46 = v41;
  v179 = v37;
  aBlock = v177;
  id v47 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  uint64_t v49 = v48;
  sub_1001327D8(v47, (unint64_t *)&unk_1002B9140, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
  id v50 = sub_100129274(&qword_1002B83E0);
  id v51 = swift_allocObject(v50, 64LL, 7LL);
  *(_OWORD *)(v51 + 16) = xmmword_1001F3380;
  id v52 = sub_1001327D8(v51, &qword_1002B83E8, &OBJC_CLASS___NSArray_ptr);
  *(void *)(v51 + 32) = v52;
  uint64_t v16 = (os_log_s *)sub_1001327D8(v52, &qword_1002B82D8, &OBJC_CLASS___NSDictionary_ptr);
  *(void *)(v51 + 40) = v16;
  id v53 = sub_1001327D8((uint64_t)v16, &qword_1002B83F0, &OBJC_CLASS___NSString_ptr);
  *(void *)(v51 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v53;
  *(void *)(v51 + 56) = sub_1001327D8(v53, &qword_1002B83F8, &OBJC_CLASS___NSData_ptr);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(&aBlock, v51, v45, v46);
  __int128 v55 = swift_bridgeObjectRelease(v51, v54);
  if (!v187)
  {
    sub_100132768(v55, v56);
    sub_10013519C((uint64_t)&aBlock, &qword_1002B8E90);
LABEL_13:
    id v42 = v175;
    sub_100135A18();
    sub_100135A10();
    __int16 v85 = sub_1001359E8();
    if (sub_100135994(v85))
    {
      __int128 v86 = (_WORD *)sub_10012CE30(2LL);
      *__int128 v86 = 0;
      sub_1001359C8((void *)&_mh_execute_header, v87, v88, "Unarchived but it's empty.");
      sub_10012CE24((uint64_t)v86);
    }

    sub_100135A30();
    goto LABEL_16;
  }

  id v57 = sub_100129274(&qword_1002B8400);
  id v58 = sub_100135A08((uint64_t)&v190, (uint64_t)&aBlock, (uint64_t)&type metadata for Any + 8, v57);
  if ((v58 & 1) == 0)
  {
    sub_100132768(v58, v59);
    goto LABEL_13;
  }

  v177 = v46;
  id v60 = v190;
  id v61 = static os_log_type_t.default.getter(v58);
  aBlock = 0LL;
  v185 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(48LL);
  swift_bridgeObjectRelease(v185, v62);
  aBlock = (void **)0xD00000000000002ELL;
  v185 = 0x800000010024B180LL;
  v181 = v60;
  v63._countAndFlagsBits = Array.description.getter(v60, v16);
  String.append(_:)(v63);
  uint64_t v66 = sub_10012B950(v64, v65);
  id v68 = (uint64_t)aBlock;
  id v67 = v185;
  id v69 = v174;
  static GKLog.daemon.getter(v66);
  v70 = sub_100135A20(v67);
  uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
  id v72 = v61;
  id v73 = os_log_type_enabled(v71, v61);
  id v74 = (void (*)(uint64_t, unint64_t))v179;
  v169 = v45;
  v168 = v49;
  v180 = v47;
  if (v73)
  {
    id v75 = (uint8_t *)sub_10012CE30(12LL);
    __int128 v76 = sub_10012CE30(32LL);
    aBlock = (void **)v76;
    *(_DWORD *)id v75 = 136315138;
    swift_bridgeObjectRetain(v67);
    id v77 = sub_100135074(v68, v67, (uint64_t *)&aBlock);
    __int128 v78 = sub_100135980(v77);
    BOOL v45 = v169;
    __int128 v79 = (void (*)(uint64_t, unint64_t))v179;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v78, v80);
    sub_100135A44(v67);
    sub_10012CE90((void *)&_mh_execute_header, v71, v72, "TTR - %s", v75);
    sub_10012CE88(v76, v81, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v76);
    __int128 v82 = (uint64_t)v75;
    id v74 = v79;
    sub_10012CE24(v82);

    __int128 v83 = ((uint64_t (*)(uint64_t, unint64_t))v79)(v174, v5);
  }

  else
  {

    sub_100135A28(v67);
    __int128 v83 = sub_1001359F0(v69);
  }

  sub_10012B950(v83, v84);
  if ((unint64_t)v181 >> 62)
  {
LABEL_59:
    v150 = v181;
    if (v181 < 0) {
      v151 = v181;
    }
    else {
      v151 = v181 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v181);
    v90 = _CocoaArrayWrapper.endIndex.getter(v151);
    swift_bridgeObjectRelease(v150, v152);
    if (v90) {
      goto LABEL_20;
    }
LABEL_63:
    v153 = swift_bridgeObjectRelease(v181, v89);
    v155 = sub_100135A4C(v153, v154);
    v156 = static os_log_type_t.default.getter(v155);
    v157 = v156;
    v158 = v171;
    v159 = static GKLog.daemon.getter(v156);
    v160 = (os_log_s *)Logger.logObject.getter(v159);
    if (os_log_type_enabled(v160, v157))
    {
      v161 = (uint8_t *)sub_10012CE30(12LL);
      v162 = v74;
      v163 = sub_10012CE30(32LL);
      aBlock = (void **)v163;
      *(_DWORD *)v161 = 136315138;
      v164 = sub_100135074(0xD000000000000023LL, 0x800000010024B1D0LL, (uint64_t *)&aBlock);
      v165 = sub_100135980(v164);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v165, v166);
      sub_10012CE90((void *)&_mh_execute_header, v160, v157, "TTR - %s", v161);
      sub_10012CE88(v163, v167, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v163);
      sub_10012CE24((uint64_t)v161);

      v162(v158, v5);
    }

    else
    {

      sub_1001359F0(v158);
    }

    sub_1001359BC();
    return;
  }

  v90 = *(void *)((v181 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v90) {
    goto LABEL_63;
  }
LABEL_20:
  v173 = v5;
  v192 = (uint64_t)_swiftEmptyArrayStorage;
  id v5 = v181 & 0xC000000000000001LL;
  v91 = 4LL;
  uint64_t v92 = &type metadata for String;
  v178 = (uint64_t)&type metadata for Any + 8;
  v175 = v90;
  v176 = (char *)(v181 & 0xC000000000000001LL);
  do
  {
    if (v5) {
      v93 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v91 - 4, v181);
    }
    else {
      v93 = *(id *)(v181 + 8 * v91);
    }
    v94 = v93;
    v95 = v91 - 3;
    if (__OFADD__(v91 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_59;
    }

    *(void *)&v190 = 0x4449726579616C70LL;
    *((void *)&v190 + 1) = 0xE800000000000000LL;
    v96 = (uint64_t)v92;
    v97 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v190, v92);
    v98 = objc_msgSend(v94, "__swift_objectForKeyedSubscript:", v97);
    swift_unknownObjectRelease(v97);
    if (v98)
    {
      _bridgeAnyObjectToAny(_:)(&v190, v98);
      swift_unknownObjectRelease(v98);
    }

    else
    {
      v190 = 0u;
      v191 = 0u;
    }

    sub_100135A58();
    uint64_t v92 = (void *)v96;
    if (!v187)
    {

      sub_10013519C((uint64_t)&aBlock, &qword_1002B8E90);
      goto LABEL_45;
    }

    if ((sub_100135A08((uint64_t)&v182, (uint64_t)&aBlock, v178, v96) & 1) == 0)
    {

      goto LABEL_45;
    }

    v99 = v45;
    v100 = v74;
    v102 = v182;
    v101 = v183;
    *(void *)&v190 = 0x656B6F5468737570LL;
    *((void *)&v190 + 1) = 0xE90000000000006ELL;
    v103 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v190, v96);
    v104 = objc_msgSend(v94, "__swift_objectForKeyedSubscript:", v103, v168);
    swift_unknownObjectRelease(v103);
    if (v104)
    {
      _bridgeAnyObjectToAny(_:)(&v190, v104);
      swift_unknownObjectRelease(v104);
    }

    else
    {
      v190 = 0u;
      v191 = 0u;
    }

    v106 = sub_100135A58();
    id v74 = v100;
    if (v187)
    {
      v108 = sub_100135A08( (uint64_t)&v182,  (uint64_t)&aBlock,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Data);
      if ((v108 & 1) != 0)
      {
        v111 = v182;
        v110 = v183;
        objc_allocWithZone(&OBJC_CLASS___GKTTRMultiplayerParticipant);
        sub_10013593C(v111, v110);
        v112 = sub_100134DA0(v102, v101, v111, v110);
        id v5 = (unint64_t)v176;
        if (!v112)
        {
          __break(1u);
          return;
        }

        v113 = v112;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v112);
        v114 = *(void *)((v192 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        v115 = *(void *)((v192 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        v90 = v175;
        if (v114 >= v115 >> 1)
        {
          v174 = *(void *)((v192 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v115 > 1, v114 + 1, 1LL);
          v114 = v174;
        }

        v116 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v114, v113);
        specialized Array._endMutation()(v116);
        sub_100135158(v111, v110);

        id v74 = (void (*)(uint64_t, unint64_t))v179;
        BOOL v45 = v169;
        goto LABEL_44;
      }

      BOOL v45 = v99;
      sub_10012B950(v108, v109);
    }

    else
    {
      sub_10012B950(v106, v107);

      sub_10013519C((uint64_t)&aBlock, &qword_1002B8E90);
      BOOL v45 = v99;
    }

    id v5 = (unint64_t)v176;
    v90 = v175;
LABEL_44:
    uint64_t v92 = (void *)v96;
LABEL_45:
    ++v91;
    v117 = v95 == v90;
    v118 = v180;
  }

  while (!v117);
  v119 = v74;
  v120 = swift_bridgeObjectRelease(v181, v105);
  sub_1001327D8(v120, &qword_1002B8408, &off_10026A218);
  v121 = v172;
  v122 = *(void *)(v172 + OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_clientProxyBundleIdentifier);
  v123 = *(void *)(v172 + OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_clientProxyBundleIdentifier + 8);
  v124 = OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_localPlayer;
  v125 = *(void **)(v172 + OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_localPlayer);
  swift_bridgeObjectRetain(v123);
  v126 = v125;
  v127 = sub_100134AC8(v122, v123, v125);
  if (v127)
  {
    v129 = v127;
    v130 = sub_1001358B8(*(id *)(v121 + v124));
    if (v131) {
      v132 = v130;
    }
    else {
      v132 = 0x6C5065746F6D6552LL;
    }
    if (v131) {
      v133 = v131;
    }
    else {
      v133 = 0xEC00000072657961LL;
    }
    v134 = v192;
    v135 = objc_allocWithZone(&OBJC_CLASS___GKTTRLogRequestInfo);
    v136 = sub_100134E48(v134, v118, v168, v132, v133);
    v188 = sub_100134B44;
    v189 = 0LL;
    aBlock = _NSConcreteStackBlock;
    v185 = 1107296256LL;
    v186 = sub_100134D2C;
    v187 = &unk_100273C28;
    v137 = _Block_copy(&aBlock);
    [v129 requestTTRLogsWith:v136 handler:v137];
    sub_1001359BC();
    _Block_release(v137);
  }

  else
  {
    v138 = (void *)v192;
    v139 = sub_100135A4C(0LL, v128);
    v141 = sub_10012B950(v139, v140);
    v142 = v170;
    v143 = static GKLog.general.getter(v141);
    Logger.logObject.getter(v143);
    v144 = sub_1001359E8();
    v145 = sub_100135994(v144);
    v146 = (unint64_t)v177;
    if (v145)
    {
      v147 = (_WORD *)sub_10012CE30(2LL);
      *v147 = 0;
      sub_1001359C8((void *)&_mh_execute_header, v148, v149, "Failed to find match service.");
      sub_10012CE24((uint64_t)v147);
    }

    sub_100135144(v45, v146);

    v119(v142, v173);
  }

void sub_100074E24(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*(_BYTE *)(a1 + 56)
    && [*(id *)(a1 + 32) zoneNotFoundFromOperation:@"saveRecord" operationError:v9])
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_100074F2C;
    v11[3] = &unk_10026B480;
    __int128 v10 = *(void **)(a1 + 40);
    void v11[4] = *(void *)(a1 + 32);
    id v12 = v10;
    id v13 = *(id *)(a1 + 48);
    +[GKCloudKitMultiplayerUtils createZoneWithName:handler:]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "createZoneWithName:handler:",  @"com.apple.legacygaming.invites",  v11);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

id sub_100074F2C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  a2);
  }
  else {
    return _[*(id *)(a1 + 32) saveRecord:*(void *)(a1 + 40) shouldRetry:0 withHandler:*(void *)(a1 + 48)];
  }
}

void sub_1000753EC(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (([v5 isGuestPlayer] & 1) == 0)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v5 playerID]);
    [v3 addObject:v4];
  }
}

void sub_100075448(uint64_t a1, void *a2)
{
  uint64_t v30 = a2;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v51 objects:v62 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v52;
    uint64_t v31 = *(void *)v52;
    id v32 = v3;
    do
    {
      id v7 = 0LL;
      id v33 = v5;
      do
      {
        if (*(void *)v52 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v51 + 1) + 8LL * (void)v7);
        id v9 = *(void **)(a1 + 40);
        if (v9)
        {
          id v35 = v7;
          __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v8]);
          if ([v10 count])
          {
            __int128 v49 = 0u;
            __int128 v50 = 0u;
            __int128 v47 = 0u;
            __int128 v48 = 0u;
            id v11 = v10;
            id v12 = [v11 countByEnumeratingWithState:&v47 objects:v61 count:16];
            if (v12)
            {
              id v13 = v12;
              id v34 = v10;
              uint64_t v14 = *(void *)v48;
              do
              {
                id v15 = 0LL;
                do
                {
                  if (*(void *)v48 != v14) {
                    objc_enumerationMutation(v11);
                  }
                  uint64_t v16 = *(void *)(*((void *)&v47 + 1) + 8LL * (void)v15);
                  id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionary]( &OBJC_CLASS___NSMutableDictionary,  "dictionary",  v30));
                  [v17 setObject:v8 forKeyedSubscript:@"raw-id"];
                  [v17 setObject:v16 forKeyedSubscript:@"push-token"];
                  [*(id *)(a1 + 48) addObject:v17];

                  id v15 = (char *)v15 + 1;
                }

                while (v13 != v15);
                id v13 = [v11 countByEnumeratingWithState:&v47 objects:v61 count:16];
              }

              while (v13);
              uint64_t v6 = v31;
              id v3 = v32;
              id v5 = v33;
              __int128 v10 = v34;
            }

            else
            {
              id v5 = v33;
            }
          }

          else
          {
            id v24 = *(void **)(a1 + 48);
            id v59 = @"raw-id";
            uint64_t v60 = v8;
            id v11 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v60,  &v59,  1LL));
            [v24 addObject:v11];
          }

          id v7 = v35;
        }

        else
        {
          id v18 = *(void **)(a1 + 56);
          if (v18
            && (uint64_t v19 = objc_claimAutoreleasedReturnValue( [v18 objectForKeyedSubscript:*(void *)(*((void *)&v51 + 1) + 8 * (void)v7)])) != 0)
          {
            id v36 = *(void **)(a1 + 48);
            v57[0] = @"raw-id";
            v57[1] = @"push-token";
            v58[0] = v8;
            v58[1] = v19;
            uint64_t v20 = v6;
            id v21 = v3;
            id v22 = (void *)v19;
            id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v58,  v57,  2LL));
            [v36 addObject:v23];

            __int128 v10 = v22;
            id v3 = v21;
            uint64_t v6 = v20;
          }

          else
          {
            id v25 = *(void **)(a1 + 48);
            __int128 v55 = @"raw-id";
            uint64_t v56 = v8;
            __int128 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v56,  &v55,  1LL,  v30));
            [v25 addObject:v10];
          }
        }

        id v26 = *(void **)(a1 + 64);
        id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 0LL));
        [v26 setObject:v27 forKey:v8];

        id v7 = (char *)v7 + 1;
      }

      while (v7 != v5);
      id v5 = [v3 countByEnumeratingWithState:&v51 objects:v62 count:16];
    }

    while (v5);
  }

  if ([*(id *)(a1 + 48) count])
  {
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472LL;
    v46[2] = sub_1000758B8;
    v46[3] = &unk_10026C810;
    uint64_t v28 = *(void **)(a1 + 72);
    void v46[4] = *(void *)(a1 + 80);
    [v28 performOnManagedObjectContext:v46];
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472LL;
    void v37[2] = sub_100075988;
    v37[3] = &unk_10026F510;
    uint64_t v29 = *(void **)(a1 + 72);
    void v37[4] = *(void *)(a1 + 80);
    id v38 = *(id *)(a1 + 88);
    id v39 = *(id *)(a1 + 48);
    id v40 = *(id *)(a1 + 40);
    char v45 = *(_BYTE *)(a1 + 104);
    id v41 = *(id *)(a1 + 96);
    id v42 = *(id *)(a1 + 72);
    id v43 = *(id *)(a1 + 32);
    id v44 = *(id *)(a1 + 64);
    [v29 perform:v37];
  }

  v30[2](v30);
}

void sub_1000758B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v10 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v6));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleIdentifier]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v8,  v6));

  [v10 expireRecentMatchesWithGame:v9];
  v5[2](v5);
}

void sub_100075988(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 96);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100075A98;
  void v13[3] = &unk_10026F420;
  uint64_t v9 = *(void *)(a1 + 64);
  id v10 = *(id *)(a1 + 72);
  id v19 = v3;
  uint64_t v11 = *(void *)(a1 + 32);
  id v14 = v10;
  uint64_t v15 = v11;
  id v16 = *(id *)(a1 + 80);
  id v17 = *(id *)(a1 + 88);
  id v18 = *(id *)(a1 + 48);
  id v12 = v3;
  [v4 initiateInvitationForMatchRequest:v5 recipients:v6 devicePushTokenMap:v7 isNearbyInvite:v8 availableForMessageV2:0 transportContext:v9 handler:v13];
}

void sub_100075A98(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a4;
  id v10 = a5;
  if (v8 && v9 && (id v11 = [v9 code], v11 != (id)5020))
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers(v11);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10007F4D4();
    }
    [*(id *)(a1 + 32) setError:v9];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKProfileService,  "serviceFromService:",  *(void *)(a1 + 40)));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_100075C5C;
    v15[3] = &unk_10026F4E8;
    uint64_t v13 = *(void *)(a1 + 48);
    void v15[4] = *(void *)(a1 + 40);
    id v16 = v8;
    id v17 = v9;
    id v18 = *(id *)(a1 + 56);
    id v19 = *(id *)(a1 + 64);
    id v20 = v10;
    id v21 = *(id *)(a1 + 32);
    id v22 = *(id *)(a1 + 72);
    [v12 getProfilesForPlayerIDs:v13 handler:v15];
  }
}

void sub_100075C5C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v62 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
  id v68 = (void *)objc_claimAutoreleasedReturnValue([v6 fetchOrCreateInviteSession]);

  id v61 = v5;
  v70 = (void *)objc_claimAutoreleasedReturnValue([v5 _gkMapDictionaryWithKeyPath:@"playerID"]);
  __int16 v65 = a1;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1[5] objectForKey:@"peers"]);
  id v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  __int128 v85 = 0u;
  __int128 v86 = 0u;
  id obj = v7;
  id v8 = [obj countByEnumeratingWithState:&v83 objects:v96 count:16];
  if (v8)
  {
    id v9 = v8;
    char v67 = 0;
    uint64_t v10 = *(void *)v84;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v84 != v10) {
          objc_enumerationMutation(obj);
        }
        id v12 = *(void **)(*((void *)&v83 + 1) + 8LL * (void)i);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:@"raw-id"]);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:@"status"]);
        id v15 = [v14 integerValue];

        id v16 = (void *)objc_claimAutoreleasedReturnValue([v70 objectForKeyedSubscript:v13]);
        uint64_t v17 = objc_claimAutoreleasedReturnValue([v12 objectForKey:@"push-token"]);
        id v18 = (void *)v17;
        if (v16) {
          BOOL v19 = v15 == 0LL;
        }
        else {
          BOOL v19 = 0;
        }
        if (!v19 || v17 == 0)
        {
          if (!os_log_GKGeneral) {
            id v21 = (id)GKOSLoggers(v17);
          }
          id v22 = (void *)os_log_GKMatch;
          char v67 = 1;
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
          {
            id v23 = v22;
            id v24 = (void *)objc_claimAutoreleasedReturnValue([v16 conciseDescription]);
            *(_DWORD *)buf = 138412802;
            v91 = v24;
            __int16 v92 = 2048;
            id v93 = v15;
            __int16 v94 = 2112;
            v95 = v18;
            char v67 = 1;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "Invite to %@ failed with status %ld. pushToken: %@",  buf,  0x20u);
          }
        }

        else
        {
          id v25 = (void *)objc_claimAutoreleasedReturnValue([v69 objectForKeyedSubscript:v13]);
          id v26 = [v25 mutableCopy];
          id v27 = v26;
          if (v26) {
            id v28 = v26;
          }
          else {
            id v28 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
          }
          uint64_t v29 = v28;

          [v29 addObject:v18];
          [v69 setObject:v29 forKeyedSubscript:v13];
          id v30 = [v68 addInvitee:v16 reference:v18];
          if (!os_log_GKGeneral) {
            id v31 = (id)GKOSLoggers(v30);
          }
          id v32 = (os_log_s *)os_log_GKMatch;
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v91 = v68;
            __int16 v92 = 2112;
            id v93 = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "InviteSession (%@) added one player: %@.",  buf,  0x16u);
          }
        }
      }

      id v9 = [obj countByEnumeratingWithState:&v83 objects:v96 count:16];
    }

    while (v9);
  }

  else
  {
    char v67 = 0;
  }

  id v33 = v62;
  id v34 = v65;
  if (v62 || (id v33 = v65[6]) != 0LL)
  {
    id v35 = (void *)objc_claimAutoreleasedReturnValue([v33 userInfo]);
    id v36 = (void *)objc_claimAutoreleasedReturnValue([v35 objectForKey:NSUnderlyingErrorKey]);

    if ([v36 isGKCompoundError])
    {
      uint64_t v64 = v36;
      id v63 = v33;
      id v37 = (void *)objc_claimAutoreleasedReturnValue([v65[5] objectForKeyedSubscript:@"peers"]);
      id v38 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
      __int128 v79 = 0u;
      __int128 v80 = 0u;
      __int128 v81 = 0u;
      __int128 v82 = 0u;
      id v39 = v37;
      id v40 = [v39 countByEnumeratingWithState:&v79 objects:v89 count:16];
      if (v40)
      {
        id v41 = v40;
        uint64_t v42 = *(void *)v80;
        do
        {
          for (j = 0LL; j != v41; j = (char *)j + 1)
          {
            if (*(void *)v80 != v42) {
              objc_enumerationMutation(v39);
            }
            id v44 = *(void **)(*((void *)&v79 + 1) + 8LL * (void)j);
            char v45 = (void *)objc_claimAutoreleasedReturnValue([v44 objectForKeyedSubscript:@"status"]);
            uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v44 objectForKeyedSubscript:@"raw-id"]);
            else {
              [v38 addObject:v46];
            }
          }

          id v41 = [v39 countByEnumeratingWithState:&v79 objects:v89 count:16];
        }

        while (v41);
      }

      __int128 v77 = 0u;
      __int128 v78 = 0u;
      __int128 v75 = 0u;
      __int128 v76 = 0u;
      __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v65[7] allKeys]);
      id v48 = [v47 countByEnumeratingWithState:&v75 objects:v88 count:16];
      if (v48)
      {
        id v49 = v48;
        uint64_t v50 = *(void *)v76;
        do
        {
          for (k = 0LL; k != v49; k = (char *)k + 1)
          {
            if (*(void *)v76 != v50) {
              objc_enumerationMutation(v47);
            }
            uint64_t v52 = *(void *)(*((void *)&v75 + 1) + 8LL * (void)k);
            if (([v38 containsObject:v52] & 1) == 0)
            {
              __int128 v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL));
              [v65[7] setObject:v53 forKeyedSubscript:v52];
            }
          }

          id v49 = [v47 countByEnumeratingWithState:&v75 objects:v88 count:16];
        }

        while (v49);
      }

      id v33 = v63;
      id v34 = v65;
      id v36 = v64;
    }

    else
    {
      if (v36) {
        __int128 v54 = v36;
      }
      else {
        __int128 v54 = v33;
      }
      id v39 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v54 code]));
      __int128 v71 = 0u;
      __int128 v72 = 0u;
      __int128 v73 = 0u;
      __int128 v74 = 0u;
      id v38 = v65[8];
      id v55 = [v38 countByEnumeratingWithState:&v71 objects:v87 count:16];
      if (v55)
      {
        id v56 = v55;
        uint64_t v57 = *(void *)v72;
        do
        {
          for (m = 0LL; m != v56; m = (char *)m + 1)
          {
            if (*(void *)v72 != v57) {
              objc_enumerationMutation(v38);
            }
            id v59 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v71 + 1) + 8 * (void)m) objectForKey:@"raw-id"]);
            [v65[7] setObject:v39 forKey:v59];
          }

          id v56 = [v38 countByEnumeratingWithState:&v71 objects:v87 count:16];
        }

        while (v56);
      }
    }
  }

  if ((v67 & 1) != 0)
  {
    uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
    [v60 reportEvent:GKReporterDomainInvite type:GKReporterInviteFail];
  }

  [v34[9] setInvitedUserIDs:v34[7]];
  [v34[9] setPlayerTokenMap:v69];
  [v34[10] setObject:v34[9] forKeyedSubscript:@"inviteResponse"];
  [v34[10] setError:v33];
  (*((void (**)(void))v34[11] + 2))();
}

void sub_100076430(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  [v2 reportEvent:GKReporterDomainInvite type:GKReporterInviteInitiate];

  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"inviteResponse"]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v4);
  }

void sub_100076714(uint64_t a1)
{
  uint64_t v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [*(id *)(a1 + 32) count]));
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id obj = *(id *)(v1 + 32);
  id v23 = [obj countByEnumeratingWithState:&v30 objects:v39 count:16];
  if (v23)
  {
    uint64_t v21 = v1;
    uint64_t v22 = *(void *)v31;
    do
    {
      for (i = 0LL; i != v23; i = (char *)i + 1)
      {
        if (*(void *)v31 != v22) {
          objc_enumerationMutation(obj);
        }
        id v4 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
        id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) referencesForInvitee:v4]);
        if ([v5 count])
        {
          id v24 = v5;
          id v25 = i;
          __int128 v28 = 0u;
          __int128 v29 = 0u;
          __int128 v26 = 0u;
          __int128 v27 = 0u;
          id v6 = v5;
          id v7 = [v6 countByEnumeratingWithState:&v26 objects:v38 count:16];
          if (v7)
          {
            id v8 = v7;
            uint64_t v9 = *(void *)v27;
            do
            {
              for (j = 0LL; j != v8; j = (char *)j + 1)
              {
                if (*(void *)v27 != v9) {
                  objc_enumerationMutation(v6);
                }
                uint64_t v11 = *(void *)(*((void *)&v26 + 1) + 8LL * (void)j);
                v36[0] = @"id";
                id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 playerID]);
                v36[1] = @"push-token";
                v37[0] = v12;
                v37[1] = v11;
                uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v37,  v36,  2LL));
                [v2 addObject:v13];
              }

              id v8 = [v6 countByEnumeratingWithState:&v26 objects:v38 count:16];
            }

            while (v8);
          }

          uint64_t v1 = v21;
          [*(id *)(v21 + 40) removeInvitee:v4 reference:0];
          id v5 = v24;
          i = v25;
        }
      }

      id v23 = [obj countByEnumeratingWithState:&v30 objects:v39 count:16];
    }

    while (v23);
  }

  if ([v2 count])
  {
    uint64_t v14 = *(void *)(v1 + 48);
    v34[0] = @"session-token";
    v34[1] = @"peers";
    v35[0] = v14;
    v35[1] = v2;
    v34[2] = @"reason";
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 0LL));
    v35[2] = v15;
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v35,  v34,  3LL));

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 56) clientProxy]);
    [v17 issueRequest:v16 bagKey:@"gk-invitation-cancel" clientProxy:v18 handler:&stru_10026F578];

    BOOL v19 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
    [v19 reportEvent:GKReporterDomainInvite type:GKReporterInviteUninvite];
  }

  dispatch_group_leave(*(dispatch_group_t *)(v1 + 64));
}

uint64_t sub_100076A68(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100076C5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100076CFC;
  void v8[3] = &unk_10026B148;
  id v5 = v4;
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  [v5 performAsync:v8];
}

void sub_100076CFC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allInvitees]);
  if ([v2 count])
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_100076DB4;
    v4[3] = &unk_10026B120;
    id v3 = *(void **)(a1 + 40);
    id v5 = *(id *)(a1 + 48);
    [v3 removePlayersFromGameInviteV2:v2 handler:v4];
  }

  else
  {
    [*(id *)(a1 + 32) removeAllInvitees];
    [*(id *)(a1 + 32) removeAllResponses];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_100076DB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100076DC0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  [v2 reportEvent:GKReporterDomainInvite type:GKReporterInviteCancel];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  [v3 deleteInviteSession];

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000774B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[MultiplayerGroupList _gkFetchRequest](&OBJC_CLASS___MultiplayerGroupList, "_gkFetchRequest"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSManagedObject _gkRetrieveCleanEntry:request:]( &OBJC_CLASS___NSManagedObject,  "_gkRetrieveCleanEntry:request:",  v6,  v7));

  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v10 = [v9 relatedTasksExistForBagKey:@"gk-get-player-groups"];

  id v11 = &off_1001F2000;
  if (!v8
    || ((id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 expirationDate]),
         unsigned int v13 = [v8 _gkIsExpired:v12],
         v12,
         v13)
      ? (BOOL v15 = v10 == (id)2)
      : (BOOL v15 = 0),
        v15))
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_100077834;
    void v34[3] = &unk_10026E750;
    id v35 = *(id *)(a1 + 48);
    id v24 = v7;
    uint64_t v25 = *(void *)(a1 + 32);
    __int128 v26 = *(void **)(a1 + 40);
    id v36 = v24;
    uint64_t v37 = v25;
    id v38 = v26;
    id v39 = v5;
    [v22 issueRequest:&__NSDictionary0__struct bagKey:@"gk-get-player-groups" clientProxy:v23 handler:v34];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v16 = (id)GKOSLoggers(v14);
    }
    uint64_t v17 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      log = v17;
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v8 expirationDate]);
      BOOL v19 = (void *)objc_claimAutoreleasedReturnValue([v8 entries]);
      id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v19 count]));
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v10 != (id)2));
      *(_DWORD *)buf = 138412802;
      id v41 = v18;
      __int16 v42 = 2112;
      id v43 = v20;
      __int16 v44 = 2112;
      char v45 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_INFO,  "getMultiPlayerGroups using cache: %@ %@ storeAndForwardActiveUseCache: %@",  buf,  0x20u);

      id v11 = &off_1001F2000;
    }

    [*(id *)(a1 + 32) convertToInternalObjects:v8 results:*(void *)(a1 + 40)];
    v5[2](v5);
  }

  __int128 v27 = *(void **)(a1 + 48);
  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v28 replyQueue]);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = *((void *)v11 + 449);
  v31[2] = sub_100077DD8;
  v31[3] = &unk_10026B030;
  id v33 = *(id *)(a1 + 56);
  id v32 = *(id *)(a1 + 48);
  [v27 notifyOnQueue:v29 block:v31];
}

void sub_100077834(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = [*(id *)(a1 + 32) setError:v8];
  if (!v7 || v8)
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers(v9);
    }
    BOOL v15 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v24 = v8;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "getMultiPlayerGroups error: %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_1000779CC;
    void v16[3] = &unk_10026F5A0;
    id v10 = *(void **)(a1 + 32);
    id v17 = *(id *)(a1 + 40);
    id v11 = v7;
    uint64_t v12 = *(void *)(a1 + 48);
    unsigned int v13 = *(void **)(a1 + 56);
    id v18 = v11;
    uint64_t v19 = v12;
    double v22 = a4;
    id v20 = v13;
    id v21 = *(id *)(a1 + 64);
    [v10 performOnManagedObjectContext:v16];
  }
}

void sub_1000779CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  __int128 v30 = a3;
  uint64_t v36 = a1;
  id v34 = v5;
  uint64_t v6 = objc_claimAutoreleasedReturnValue( +[NSManagedObject _gkRetrieveCleanEntry:request:]( &OBJC_CLASS___NSManagedObject,  "_gkRetrieveCleanEntry:request:",  v5,  *(void *)(a1 + 32)));
  id v35 = (MultiplayerGroupList *)v6;
  if (!v6)
  {
    id v7 = objc_alloc(&OBJC_CLASS___MultiplayerGroupList);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[MultiplayerGroupList entity](&OBJC_CLASS___MultiplayerGroupList, "entity"));
    id v35 = -[MultiplayerGroupList initWithEntity:insertIntoManagedObjectContext:]( v7,  "initWithEntity:insertIntoManagedObjectContext:",  v8,  v34);
  }

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v6);
  }
  id v10 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    id v11 = v10;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[MultiplayerGroupList expirationDate](v35, "expirationDate"));
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(-[MultiplayerGroupList entries](v35, "entries"));
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v13 count]));
    *(_DWORD *)buf = 138412546;
    __int16 v44 = v12;
    __int16 v45 = 2112;
    uint64_t v46 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "getMultiPlayerGroups from server: %@ %@",  buf,  0x16u);
  }

  BOOL v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v36 + 40) objectForKey:@"groups"]);
  id v33 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id obj = v15;
  id v37 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
  if (v37)
  {
    uint64_t v32 = *(void *)v39;
    do
    {
      for (i = 0LL; i != v37; i = (char *)i + 1)
      {
        if (*(void *)v39 != v32) {
          objc_enumerationMutation(obj);
        }
        id v17 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)i);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"participants"]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"played-at"]);
        id v20 = [v19 longValue];
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"player-group-id"]);
        double v22 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"properties"]);
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:@"numberOfAutomatched"]);
        id v24 = [v23 integerValue];
        uint64_t v25 = *(void **)(v36 + 48);
        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v18));
        __int128 v27 = (void *)objc_claimAutoreleasedReturnValue( [v25 ensureGroup:v21 participants:v26 playedAt:v20 numberOfAutomatched:v24 moc:v34 list:v35]);

        -[NSMutableSet addObject:](v33, "addObject:", v27);
      }

      id v37 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
    }

    while (v37);
  }

  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(v36 + 72)));
  -[MultiplayerGroupList setExpirationDate:](v35, "setExpirationDate:", v28);
  __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(-[MultiplayerGroupList entries](v35, "entries"));
  -[MultiplayerGroupList removeEntries:](v35, "removeEntries:", v29);

  -[MultiplayerGroupList addEntries:](v35, "addEntries:", v33);
  [*(id *)(v36 + 48) convertToInternalObjects:v35 results:*(void *)(v36 + 56)];
  v30[2](v30);
  (*(void (**)(void))(*(void *)(v36 + 64) + 16LL))();
}

void sub_100077DD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100078010(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 32)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MultiplayerGroupList _gkFetchRequest](&OBJC_CLASS___MultiplayerGroupList, "_gkFetchRequest"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSManagedObject _gkRetrieveCleanEntry:request:]( &OBJC_CLASS___NSManagedObject,  "_gkRetrieveCleanEntry:request:",  v3,  v5));
  id v7 =  [*(id *)(a1 + 40) ensureGroup:*(void *)(a1 + 48) participants:v4 playedAt:*(void *)(a1 + 72) numberOfAutomatched:*(void *)(a1 + 80) moc:v3 list:v6];
  id v8 = -[GKMultiplayerGroupRequest initWithGroupID:]( objc_alloc(&OBJC_CLASS___GKMultiplayerGroupRequest),  "initWithGroupID:",  *(void *)(a1 + 48));
  -[GKMultiplayerGroupRequest setBundleID:](v8, "setBundleID:", *(void *)(a1 + 56));
  -[GKMultiplayerGroupRequest setParticipants:](v8, "setParticipants:", v4);
  if (*(void *)(a1 + 72)) {
    -[GKMultiplayerGroupRequest setPlayedAt:](v8, "setPlayedAt:");
  }
  -[GKMultiplayerGroupRequest setPlayerGroupID:](v8, "setPlayerGroupID:", *(void *)(a1 + 48));
  id v17 = @"numberOfAutomatched";
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 80)));
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v9));
  id v18 = v10;
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
  id v12 = [v11 mutableCopy];
  -[GKMultiplayerGroupRequest setRequestData:](v8, "setRequestData:", v12);

  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_10007825C;
  v15[3] = &unk_10026BBE8;
  id v16 = *(id *)(a1 + 64);
  [v13 writeToNetwork:v8 clientProxy:v14 handler:v15];
}

void sub_10007825C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers(v3, v4);
  }
  id v7 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "GKMultiplayerGroupRequest successfully registered with store and forward",  v8,  2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000785A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
  id v6 = [v5 forceRelay];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000786C4;
  v9[3] = &unk_10026F618;
  id v7 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v7;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v14 = v3;
  id v13 = *(id *)(a1 + 64);
  id v8 = v3;
  [v4 getValidNATTypeWithForceRelay:v6 withHandler:v9];
}

void sub_1000786C4(id *a1, unsigned __int8 a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](&OBJC_CLASS___NSMutableData, "data"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 dataUsingEncoding:4]);
  [v4 appendData:v7];

  if ([a1[5] version])
  {
    [v4 appendBytes:&unk_1001F2EE8 length:1];
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
    unsigned __int8 v9 = [v8 maximumInviteVersionSupported];

    unsigned __int8 v38 = v9;
    [v4 appendBytes:&v38 length:1];
  }

  __int128 v41 = @"s";
  __int16 v42 = v4;
  __int128 v29 = v4;
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v42,  &v41,  1LL));
  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v10));

  v39[0] = @"session-token";
  id v11 = (void *)objc_claimAutoreleasedReturnValue([a1[5] sessionToken]);
  v40[0] = v11;
  v39[1] = @"self-nat-type";
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a2));
  v40[1] = v12;
  v39[2] = @"peer-id";
  id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[5] peerID]);
  v40[2] = v13;
  void v39[3] = @"peer-push-token";
  id v14 = (void *)objc_claimAutoreleasedReturnValue([a1[5] peerPushToken]);
  v40[3] = v14;
  void v39[4] = @"peer-nat-type";
  BOOL v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [a1[5] peerNATType]));
  void v40[4] = v15;
  void v39[5] = @"peer-nat-ip";
  id v16 = (void *)objc_claimAutoreleasedReturnValue([a1[5] peerNATIP]);
  v40[5] = v16;
  v39[6] = @"peer-blob";
  id v17 = (void *)objc_claimAutoreleasedReturnValue([a1[5] peerBlob]);
  v40[6] = v17;
  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v40,  v39,  7LL));
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v18));

  [a1[6] enrichServerRequestWithConnectionData:v19];
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 pushToken]);

  if (v21) {
    [v19 setObject:v21 forKey:@"self-push-token"];
  }
  id v22 = a1[4];
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_100078A94;
  void v30[3] = &unk_10026F5F0;
  id v23 = a1[6];
  id v31 = a1[7];
  id v37 = a1[9];
  id v32 = a1[8];
  id v33 = v28;
  id v24 = a1[4];
  id v25 = a1[5];
  id v34 = v19;
  id v35 = v24;
  id v36 = v25;
  id v26 = v19;
  id v27 = v28;
  [v22 fetchPseudonymIfNeededWithTransportContext:v23 withCompletionHandler:v30];
}

void sub_100078A94(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) setError:a3];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    [*(id *)(a1 + 40) setSelfPseudonym:v5];
    [*(id *)(a1 + 48) setObject:v5 forKey:GKTransportPseudonymKey];
    id v6 = [*(id *)(a1 + 56) setObject:*(void *)(a1 + 48) forKey:@"client-data"];
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(v6);
    }
    id v8 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      uint64_t v20 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Created data request for gk-invitation-accept request: %@",  buf,  0xCu);
    }

    id v10 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_100078C5C;
    void v13[3] = &unk_10026BB28;
    id v11 = *(id *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 64);
    id v14 = v11;
    uint64_t v15 = v12;
    id v16 = *(id *)(a1 + 40);
    id v17 = *(id *)(a1 + 72);
    id v18 = *(id *)(a1 + 32);
    [v10 perform:v13];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }
}

void sub_100078C5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100078D5C;
  void v8[3] = &unk_10026D220;
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  id v12 = v3;
  id v7 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-invitation-accept" clientProxy:v6 handler:v8];
}

uint64_t sub_100078D5C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResponsePlist:a2];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sessionID]);
  [*(id *)(a1 + 32) setSessionID:v7];

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transportVersionToUse]);
  [*(id *)(a1 + 32) setTransportVersionToUse:v8];

  [*(id *)(a1 + 48) setObject:*(void *)(a1 + 32) forKeyedSubscript:@"acceptResponse"];
  [*(id *)(a1 + 48) setError:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100078E08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"acceptResponse"]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void *, void *))(v1 + 16))(v1, v3, v4);
  }

  id v5 = (id)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  [v5 reportEvent:GKReporterDomainInvite type:GKReporterInviteAcceptApp];
}

uint64_t sub_100079164(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100079244(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[GKDispatchGroup dispatchGroupWithName:]( &OBJC_CLASS___GKDispatchGroup,  "dispatchGroupWithName:",  @"getAcceptedGameInvite"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 gameDescriptor]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](&OBJC_CLASS___GKBulletinController, "sharedController"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 acceptedInviteManager]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 multiplayerInviteForGame:v4]);
  id v8 = (void *)v7;
  v22[0] = 0LL;
  v22[1] = v22;
  void v22[2] = 0x3032000000LL;
  v22[3] = sub_10006EB64;
  void v22[4] = sub_10006EB74;
  id v23 = 0LL;
  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers(v7);
    }
    id v10 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "GKMatchMaker invite manager and bullentin are set",  buf,  2u);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 originatorPlayer]);

    if (!v11)
    {
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      void v19[2] = sub_1000794C0;
      void v19[3] = &unk_10026B5E0;
      id v20 = v8;
      [v2 perform:v19];
    }

    id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 replyQueue]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_100079548;
    void v14[3] = &unk_10026F640;
    id v15 = v8;
    id v18 = v22;
    id v17 = *(id *)(a1 + 40);
    id v16 = v5;
    [v2 notifyOnQueue:v12 block:v14];
  }

  else
  {
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13) {
      (*(void (**)(uint64_t, void, void))(v13 + 16))(v13, 0LL, 0LL);
    }
  }

  _Block_object_dispose(v22, 8);
}

void sub_1000794A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_1000794C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10007953C;
  void v6[3] = &unk_10026BBE8;
  id v7 = v3;
  id v5 = v3;
  [v4 loadOriginatorPlayerWithCompletionHandler:v6];
}

uint64_t sub_10007953C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100079548(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKInviteInternal inviteWithBulletin:](&OBJC_CLASS___GKInviteInternal, "inviteWithBulletin:"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) declineReason]);

    if (v3)
    {
      if (!os_log_GKGeneral) {
        id v4 = (id)GKOSLoggers(a1);
      }
      id v5 = (os_log_s *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        LOWORD(v_Block_object_dispose(va, 8) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Found a declined invite due to incompatible transport version.",  (uint8_t *)&v8,  2u);
      }

      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), *(id *)(a1 + 32));
    }
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  if (*(void *)(a1 + 48))
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers(a1);
    }
    id v7 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "GKGetAcceptedInviteHandler invite: %@",  (uint8_t *)&v8,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL)) {
    objc_msgSend(*(id *)(a1 + 40), "withdrawBulletin:");
  }
}

void sub_100079944(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 gameDescriptor]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v10 = (id)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v3,  v4));

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"game = %@",  v10));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject objectsMatchingPredicate:context:]( &OBJC_CLASS___GKPlayerToInviteCacheObject,  "objectsMatchingPredicate:context:",  v5,  v6));

  int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _gkMapWithBlock:&stru_10026F680]);
  if ([v8 count]) {
    [*(id *)(a1 + 40) setObject:v8 forKeyedSubscript:@"players"];
  }
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  [v9 _gkDeleteObjects:v7];
}

id sub_100079A88(id a1, id a2, unint64_t a3)
{
  return objc_msgSend(a2, "internalRepresentation", a3);
}

void sub_100079A90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"players"]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_100079BE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100079BFC(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionToken]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL),  0LL);
  }
  return result;
}

void sub_100079F70(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = a2;
  char v47 = 0;
  if (*(void *)(a1 + 32)) {
    uint64_t v3 = *(__CFString **)(a1 + 32);
  }
  else {
    uint64_t v3 = &stru_10027B720;
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString dataUsingEncoding:](v3, "dataUsingEncoding:", 4LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableData dataWithCapacity:]( NSMutableData,  "dataWithCapacity:",  (char *)[v4 length] + 2));
  [v5 appendBytes:&v48 length:1];
  [v5 appendBytes:&v47 length:1];
  __int128 v40 = v4;
  [v5 appendData:v4];
  [v5 appendBytes:&unk_1001F2EE8 length:1];
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
  unsigned __int8 v7 = [v6 maximumInviteVersionSupported];

  unsigned __int8 v46 = v7;
  [v5 appendBytes:&v46 length:1];
  v59[0] = *(void *)(a1 + 40);
  v58[0] = @"B";
  v58[1] = @"A";
  int v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKViceroyNATConfiguration externalAddressForSelfConnectionData:]( &OBJC_CLASS___GKViceroyNATConfiguration,  "externalAddressForSelfConnectionData:"));
  v59[1] = v8;
  void v58[2] = @"N";
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v48));
  v59[2] = v9;
  void v58[3] = @"i";
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 bundleIdentifier]);
  v59[3] = v11;
  v58[4] = @"v";
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 bundleVersion]);
  void v58[5] = @"s";
  v59[4] = v13;
  v59[5] = v5;
  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v59,  v58,  6LL));

  __int128 v39 = v14;
  id v15 = [v14 mutableCopy];
  id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 bundleShortVersion]);

  if (v17)
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 bundleShortVersion]);
    [v15 setObject:v19 forKeyedSubscript:@"V"];
  }

  id v20 = v15;
  v57[0] = *(void *)(a1 + 56);
  v56[0] = @"session-token";
  v56[1] = @"self-push-token";
  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 pushToken]);
  id v23 = v22;
  if (!v22) {
    id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](&OBJC_CLASS___NSData, "data"));
  }
  v57[1] = v23;
  v56[2] = @"reason";
  id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 2LL));
  void v57[2] = v24;
  v56[3] = @"peers";
  v53[0] = @"id";
  id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) playerID]);
  v53[1] = @"push-token";
  v54[0] = v25;
  v54[1] = *(void *)(a1 + 72);
  id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v54,  v53,  2LL));
  id v55 = v26;
  id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v55, 1LL));
  v56[4] = @"client-data";
  v57[3] = v27;
  v57[4] = v20;
  unsigned __int8 v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v57,  v56,  5LL));

  if (!v22) {
  __int128 v28 = -[GKInviteSession initWithSessionToken:]( objc_alloc(&OBJC_CLASS___GKInviteSession),  "initWithSessionToken:",  *(void *)(a1 + 56));
  }
  __int128 v29 = v28;
  if (!os_log_GKGeneral) {
    id v30 = (id)GKOSLoggers(v28);
  }
  id v31 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    id v32 = v31;
    id v33 = (void *)objc_claimAutoreleasedReturnValue(-[GKInviteSession sessionToken](v29, "sessionToken"));
    *(_DWORD *)buf = 134218242;
    uint64_t v50 = v29;
    __int16 v51 = 2112;
    uint64_t v52 = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "SendReconnectInvitation: created a new GKInviteSession(%p): %@",  buf,  0x16u);
  }

  id v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  [v34 setInviteSession:v29];

  id v35 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472LL;
  v41[2] = sub_10007A510;
  v41[3] = &unk_10026D220;
  __int16 v42 = v29;
  id v43 = *(id *)(a1 + 64);
  id v44 = *(id *)(a1 + 72);
  id v45 = *(id *)(a1 + 80);
  id v37 = v29;
  [v35 issueRequest:v38 bagKey:@"gk-invitation-send" clientProxy:v36 handler:v41];
}

void sub_10007A510(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (!v5) {
    [*(id *)(a1 + 32) addInvitee:*(void *)(a1 + 40) reference:*(void *)(a1 + 48)];
  }
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }
}

void sub_10007AC34(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 serverRepresentation]);
  [v2 addObject:v3];
}

void sub_10007AC78(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 serverRepresentation]);
  [v2 addObject:v3];
}

void sub_10007ACBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v8 = v6;
  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v6, v7);
  }
  id v10 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412546;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Invitation send done. plist: %@, error: %@",  (uint8_t *)&v12,  0x16u);
  }

  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v8);
  }
}

void sub_10007B3E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(0LL);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10007F53C();
    }
  }
}

void sub_10007B468(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v8 = v6;
  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v6, v7);
  }
  id v10 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412546;
    id v12 = v5;
    __int16 v13 = 2112;
    __int16 v14 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "TTRLogs send is done. plist: %@, error: %@",  (uint8_t *)&v11,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10007B718(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_10007B7F0;
  v9[3] = &unk_10026C6B8;
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v8 = v3;
  [v4 issueRequest:v5 bagKey:v6 clientProxy:v7 handler:v9];
}

uint64_t sub_10007B7F0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setObject:a2 forKeyedSubscript:@"result"];
  [*(id *)(a1 + 32) setError:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10007B850(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"result"]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);
  }

void sub_10007B994(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) mutableCopy];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushToken]);

  if (v6) {
    [v4 setObject:v6 forKey:@"self-push-token"];
  }
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  [v4 setObject:v7 forKey:@"self-nat-type"];

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v8);
  }
  id v10 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412290;
    id v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "relayInit serverRequest:%@",  (uint8_t *)&v12,  0xCu);
  }

  [*(id *)(a1 + 40) _performRelayAction:@"gk-invitation-relay-initiate" request:v4 handler:*(void *)(a1 + 48)];
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  [v11 reportEvent:GKReporterDomainRelay type:GKReporterRelayInitiate];
}

void sub_10007BBF0(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) mutableCopy];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushToken]);

  if (v6) {
    [v4 setObject:v6 forKey:@"self-push-token"];
  }
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  [v4 setObject:v7 forKey:@"self-nat-type"];

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v8);
  }
  id v10 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412290;
    id v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "relayUpdate serverRequest:%@",  (uint8_t *)&v12,  0xCu);
  }

  [*(id *)(a1 + 40) _performRelayAction:@"gk-invitation-relay-update" request:v4 handler:*(void *)(a1 + 48)];
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  [v11 reportEvent:GKReporterDomainRelay type:GKReporterRelayUpdate];
}

void sub_10007C090(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v2,  v3));

  objc_msgSend(v4, "setAvailablePieces:", objc_msgSend(v4, "availablePieces") | 1);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", 600.0));
  [v4 setExpirationDate:v5];

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"alias"]);
  [v4 setAlias:v6];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"photos"]);
  uint64_t v8 = v7;
  if (v7 && [v7 count]) {
    id v9 = [v4 updateImagesWithImageURLs:v8];
  }
  id v35 = v8;
  uint64_t v36 = a1;
  id v37 = v4;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"photoData"]);
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  id v11 = [v10 countByEnumeratingWithState:&v40 objects:v46 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v41;
    NSErrorDomain v14 = NSCocoaErrorDomain;
    unsigned __int8 v38 = v10;
    do
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v41 != v13) {
          objc_enumerationMutation(v10);
        }
        id v16 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:v16]);
        if (v17)
        {
          id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v16));
          uint64_t v19 = GKImageCachePathForURL();
          id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

          id v21 = (void *)objc_claimAutoreleasedReturnValue([v16 lastPathComponent]);
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v20 stringByAppendingPathComponent:v21]);

          id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
          id v39 = 0LL;
          [v23 createDirectoryAtPath:v20 withIntermediateDirectories:1 attributes:0 error:&v39];
          id v24 = v39;

          if (v24)
          {
            id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 domain]);
            if (([v25 isEqual:v14] & 1) == 0)
            {

              goto LABEL_16;
            }

            id v26 = v12;
            uint64_t v27 = v13;
            __int128 v28 = v14;
            id v29 = [v24 code];

            BOOL v31 = v29 == (id)516;
            NSErrorDomain v14 = v28;
            uint64_t v13 = v27;
            id v12 = v26;
            id v10 = v38;
            if (!v31)
            {
LABEL_16:
              if (!os_log_GKGeneral) {
                id v32 = (id)GKOSLoggers(v30);
              }
              id v33 = (os_log_s *)os_log_GKMatch;
              if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                id v45 = v24;
                _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "GKMultiplayerMatchService error while trying to create path error/warning while updating cache with nearby: %@",  buf,  0xCu);
              }
            }
          }

          [v17 writeToFile:v22 atomically:1];
          _gkMarkFileAsPurgeable(v22);
        }
      }

      id v12 = [v10 countByEnumeratingWithState:&v40 objects:v46 count:16];
    }

    while (v12);
  }

  id v34 = (void *)objc_claimAutoreleasedReturnValue([v37 internalRepresentation]);
  [*(id *)(v36 + 40) setResult:v34];
}

void sub_10007C45C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10007C6F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    (*(void (**)(void))(v1 + 16))();
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v2 = (id)GKOSLoggers(0LL);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10007F59C();
    }
  }

uint64_t sub_10007C768(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10007C9AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    (*(void (**)(void))(v1 + 16))();
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v2 = (id)GKOSLoggers(0LL);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10007F5C8();
    }
  }

uint64_t sub_10007CA20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10007CCB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(0LL);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10007F5F4();
    }
  }
}

uint64_t sub_10007CD38(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10007CF80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    (*(void (**)(void))(v1 + 16))();
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v2 = (id)GKOSLoggers(0LL);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10007F620();
    }
  }

uint64_t sub_10007CFF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10007D2D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10007F64C();
    }
  }

  else if (![v5 count])
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers(0LL);
    }
    id v10 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "0 multiplyaer games loaded on this device.",  v12,  2u);
    }
  }

  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    (*(void (**)(uint64_t, id, void *))(v11 + 16))(v11, v5, v7);
  }
}

void sub_10007D74C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a3;
  id v5 = [a2 containsObject:*(void *)(a1 + 32)];
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v5, v7);
  }
}

void sub_10007DAA8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!os_log_GKGeneral) {
    id v11 = (id)GKOSLoggers(v9);
  }
  id v12 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2112;
    id v25 = v10;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "nearbyDiscovery playerFoundHandler called back. playerID: %@, deviceID: %@, discoveryInfo: %@",  buf,  0x20u);
  }

  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000LL;
  LOBYTE(v25) = 0;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_10007DCD8;
  void v18[3] = &unk_10026F748;
  id v23 = buf;
  id v19 = *(id *)(a1 + 32);
  id v13 = v7;
  id v20 = v13;
  id v14 = v8;
  id v21 = v14;
  id v15 = v10;
  id v22 = v15;
  id v16 = +[GKClientProxy enumerateClientsUsingBlock:](&OBJC_CLASS___GKClientProxy, "enumerateClientsUsingBlock:", v18);
  if (!*(_BYTE *)(*(void *)&buf[8] + 24LL))
  {
    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers(v16);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
      sub_10007F6AC();
    }
  }

  _Block_object_dispose(buf, 8);
}

void sub_10007DCB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10007DCD8(void *a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  if (!*(_BYTE *)(*(void *)(a1[8] + 8LL) + 24LL))
  {
    id v8 = v5;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    unsigned int v7 = [v6 isEqualToString:a1[4]];

    id v5 = v8;
    if (v7)
    {
      [v8 nearbyPlayerFoundForPlayerID:a1[5] deviceID:a1[6] discoveryInfo:a1[7]];
      id v5 = v8;
      *(_BYTE *)(*(void *)(a1[8] + 8LL) + 24LL) = 1;
      *a3 = 1;
    }
  }
}

void sub_10007DD6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v16 = 0LL;
  id v17 = &v16;
  uint64_t v18 = 0x2020000000LL;
  char v19 = 0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10007DECC;
  v11[3] = &unk_10026F798;
  id v15 = &v16;
  id v12 = *(id *)(a1 + 32);
  id v7 = v5;
  id v13 = v7;
  id v8 = v6;
  id v14 = v8;
  id v9 = +[GKClientProxy enumerateClientsUsingBlock:](&OBJC_CLASS___GKClientProxy, "enumerateClientsUsingBlock:", v11);
  if (!*((_BYTE *)v17 + 24))
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers(v9);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
      sub_10007F70C();
    }
  }

  _Block_object_dispose(&v16, 8);
}

void sub_10007DEB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10007DECC(void *a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  if (!*(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL))
  {
    id v8 = v5;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    unsigned int v7 = [v6 isEqualToString:a1[4]];

    id v5 = v8;
    if (v7)
    {
      [v8 nearbyPlayerLostForPlayerID:a1[5] deviceID:a1[6]];
      id v5 = v8;
      *a3 = 1;
    }
  }
}

void sub_10007DF50(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v21 = 0LL;
  id v22 = &v21;
  uint64_t v23 = 0x2020000000LL;
  char v24 = 0;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_10007E0D4;
  v15[3] = &unk_10026F748;
  id v20 = &v21;
  id v16 = *(id *)(a1 + 32);
  id v10 = v7;
  id v17 = v10;
  id v11 = v8;
  id v18 = v11;
  id v12 = v9;
  id v19 = v12;
  id v13 = +[GKClientProxy enumerateClientsUsingBlock:](&OBJC_CLASS___GKClientProxy, "enumerateClientsUsingBlock:", v15);
  if (!*((_BYTE *)v22 + 24))
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers(v13);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
      sub_10007F76C();
    }
  }

  _Block_object_dispose(&v21, 8);
}

void sub_10007E0BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10007E0D4(void *a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  if (!*(_BYTE *)(*(void *)(a1[8] + 8LL) + 24LL))
  {
    id v8 = v5;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    unsigned int v7 = [v6 isEqualToString:a1[4]];

    id v5 = v8;
    if (v7)
    {
      [v8 nearbyDataReceivedForPlayerID:a1[5] deviceID:a1[6] data:a1[7]];
      id v5 = v8;
      *a3 = 1;
    }
  }
}

uint64_t sub_10007E450(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t result = *(void *)(result + 32);
    if (result) {
      return (*(uint64_t (**)(void))(result + 16))();
    }
  }

  return result;
}

void sub_10007E468(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(0LL);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10007F7F8();
    }
  }
}

void sub_10007EC54(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v19 = (void *)objc_claimAutoreleasedReturnValue([a1[4] serverRepresentation]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:"));
  uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](&OBJC_CLASS___NSPredicate, "predicateWithFormat:", @"game = %@", v7));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([a1[5] context]);
  id v18 = (void *)v8;
  +[GKCacheObject deleteObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKPlayerToInviteCacheObject,  "deleteObjectsMatchingPredicate:context:",  v8,  v9);

  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v10 = a1[6];
  id v11 = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v21;
    do
    {
      id v14 = 0LL;
      do
      {
        if (*(void *)v21 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)v14);
        id v16 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKPlayerToInviteCacheObject),  "initWithManagedObjectContext:",  v5);
        -[GKPlayerToInviteCacheObject setGame:](v16, "setGame:", v7);
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 playerID]);
        -[GKPlayerToInviteCacheObject setPlayerID:](v16, "setPlayerID:", v17);

        id v14 = (char *)v14 + 1;
      }

      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }

    while (v12);
  }

  v6[2](v6);
}

void sub_10007EE44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10007EED8;
  block[3] = &unk_10026B670;
  id v6 = v3;
  id v4 = v3;
  dispatch_async(&_dispatch_main_q, block);
}

void sub_10007EED8(uint64_t a1)
{
  unsigned int v2 = GKGetApplicationStateForBundleID(*(void **)(a1 + 32));
  if (v2 == 8 || (unsigned int v3 = v2, GKLaunchApplicationWithIdentifier(*(void **)(a1 + 32), 0LL), v3 >= 4))
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue( +[GKClientProxy clientForBundleID:]( &OBJC_CLASS___GKClientProxy,  "clientForBundleID:",  *(void *)(a1 + 32)));
    [v4 acceptMultiplayerGameInvite];
  }

void sub_10007EF54(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void sub_10007EF60()
{
}

void sub_10007EFC8()
{
}

void sub_10007F038()
{
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEBUG,  "Fetched GKFlowRateCacheObject: %@, valid? %hhd",  v2,  0x12u);
  sub_10000C760();
}

void sub_10007F0B8()
{
}

void sub_10007F118(void **a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2;
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 shareRecordID]);
  int v8 = 138412546;
  id v9 = v6;
  __int16 v10 = 2112;
  uint64_t v11 = a3;
  sub_1000208A4( (void *)&_mh_execute_header,  v5,  v7,  "setShareInvitees - No CKRecord found fetching shareRecordID %@ error: %@",  (uint8_t *)&v8);
}

void sub_10007F1CC()
{
}

void sub_10007F22C()
{
}

void sub_10007F28C()
{
}

void sub_10007F2EC()
{
}

void sub_10007F34C()
{
}

void sub_10007F3B4()
{
}

void sub_10007F414()
{
}

void sub_10007F474()
{
}

void sub_10007F4D4()
{
}

void sub_10007F53C()
{
}

void sub_10007F59C()
{
}

void sub_10007F5C8()
{
}

void sub_10007F5F4()
{
}

void sub_10007F620()
{
}

void sub_10007F64C()
{
}

void sub_10007F6AC()
{
}

void sub_10007F70C()
{
}

void sub_10007F76C()
{
}

void sub_10007F7CC()
{
}

void sub_10007F7F8()
{
}

void sub_100080178(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1000802F0;
  v15[3] = &unk_10026BDB0;
  int8x16_t v11 = *(int8x16_t *)(a1 + 32);
  id v5 = (id)v11.i64[0];
  int8x16_t v16 = vextq_s8(v11, v11, 8uLL);
  [v4 performBlock:v15];

  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  int v8 = (void *)objc_claimAutoreleasedReturnValue([v6 updateRequestWithPushToken:*(void *)(a1 + 48)]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10008040C;
  v12[3] = &unk_10026C6B8;
  id v13 = *(id *)(a1 + 32);
  id v14 = v3;
  id v10 = v3;
  [v7 issueRequest:v8 bagKey:@"gk-tb-create-session" clientProxy:v9 handler:v12];
}

void sub_1000802F0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 bundleIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v3,  v4));

  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 turnBasedSessionList]);
  [v6 expire];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleIdentifier]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v11 = (id)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v8,  v9));

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v11 turnBasedSessionList]);
  [v10 expire];
}

uint64_t sub_10008040C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:@"session-id"]);
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"sessionID"];

  [*(id *)(a1 + 32) setError:v5];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100080484(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:@"sessionID"]);
  id v3 = v2;
  if (v2)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1000805FC;
    void v13[3] = &unk_10026B080;
    id v4 = a1[4];
    void v13[4] = a1[5];
    id v14 = v2;
    id v15 = a1[4];
    [v4 perform:v13];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100080790;
    v12[3] = &unk_10026B5E0;
    id v5 = a1[4];
    void v12[4] = a1[5];
    [v5 perform:v12];
  }

  if (a1[6])
  {
    id v6 = a1[4];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 replyQueue]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_100080818;
    v9[3] = &unk_10026B310;
    id v10 = a1[4];
    id v11 = a1[6];
    [v6 notifyOnQueue:v8 block:v9];
  }
}

void sub_1000805FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000806EC;
  void v7[3] = &unk_10026C550;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_1000806EC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v8 lastObject]);
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100080790(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10008080C;
  void v6[3] = &unk_10026C5A0;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_10008080C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100080818(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"result"]);
  if (!v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

    if (v3) {
      goto LABEL_4;
    }
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  1LL,  0LL));
    [*(id *)(a1 + 32) setError:v2];
  }

LABEL_4:
  uint64_t v4 = *(void *)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"result"]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v6, v5);
}

void sub_1000809B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKGameServicePrivate,  "serviceFromService:",  *(void *)(a1 + 32)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allObjects]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100080A7C;
  void v7[3] = &unk_10026C550;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getGameMetadataForBundleIDs:v5 handler:v7];
}

void sub_100080A7C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 _gkMapDictionaryWithKeyPath:@"bundleIdentifier"]);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bundleID", (void)v12));
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v10]);
        [v9 setGame:v11];
      }

      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100080F50(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleVersion]);
    if (v5)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v4]);
      if (!v6)
      {
        id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableSet setWithCapacity:]( &OBJC_CLASS___NSMutableSet,  "setWithCapacity:",  *(void *)(a1 + 48)));
        [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v4];
      }

      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 shortBundleVersion]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObject:forKey:",  v5,  @"bundleVersion"));
      id v9 = v8;
      if (v7) {
        [v8 setObject:v7 forKeyedSubscript:@"shortBundleVersion"];
      }
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v3 platform]));
      [v9 setObject:v10 forKeyedSubscript:@"platform"];

      id v11 = [v6 addObject:v9];
      if (!os_log_GKGeneral) {
        id v12 = (id)GKOSLoggers(v11);
      }
      __int128 v13 = (os_log_s *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v34 = v9;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "bundle version dict %@", buf, 0xCu);
      }

      if (v7) {
        __int128 v14 = v7;
      }
      else {
        __int128 v14 = v5;
      }
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@%@", v4, v14));
      int8x16_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v15]);
      if (!v16)
      {
        int8x16_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  *(void *)(a1 + 48)));
        [*(id *)(a1 + 40) setObject:v16 forKeyedSubscript:v15];
      }

      [v16 addObject:v3];
    }

    else
    {
      id v25 = (os_log_s *)os_log_GKGeneral;
      if (!os_log_GKGeneral)
      {
        id v26 = (id)GKOSLoggers(0LL);
        id v25 = (os_log_s *)os_log_GKGeneral;
      }

      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
        sub_10008E764((uint64_t)v3, v25, v27, v28, v29, v30, v31, v32);
      }
    }
  }

  else
  {
    id v17 = (os_log_s *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v18 = (id)GKOSLoggers(0LL);
      id v17 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      sub_10008E700((uint64_t)v3, v17, v19, v20, v21, v22, v23, v24);
    }
  }
}

void sub_100081240(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:@"bundleVersion"]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:@"shortBundleVersion"]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:@"platform"]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100081358;
  v10[3] = &unk_10026F858;
  int8x16_t v11 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
  id v12 = *(id *)(a1 + 56);
  id v13 = v3;
  id v9 = v3;
  [v4 _determineCompatibleBundleIDForAppID:v5 bundleVersion:v6 shortBundleVersion:v7 platform:v8 withCompletionHandler:v10];
}

void sub_100081358(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"shortBundleVersion"]);
  uint64_t v14 = *(void *)(a1 + 40);
  if (v13) {
    __int128 v15 = @"shortBundleVersion";
  }
  else {
    __int128 v15 = @"bundleVersion";
  }
  int8x16_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v15]);
  uint64_t v17 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@%@", v14, v16));

  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t v24 = (void *)v17;
  id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v17]);
  id v19 = [v18 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = *(void *)v26;
    do
    {
      for (i = 0LL; i != v20; i = (char *)i + 1)
      {
        if (*(void *)v26 != v21) {
          objc_enumerationMutation(v18);
        }
        uint64_t v23 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
        [v23 setBundleID:v9];
        [v23 setBundleVersion:v10];
        [v23 setShortBundleVersion:v11];
        objc_msgSend(v23, "setPlatform:", objc_msgSend(v12, "integerValue"));
      }

      id v20 = [v18 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }

    while (v20);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10008154C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_100081628;
  v9[3] = &unk_10026B0F8;
  uint64_t v7 = *(void **)(a1 + 48);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = v7;
  id v11 = *(id *)(a1 + 56);
  id v12 = v3;
  id v8 = v3;
  [v4 notifyOnQueue:v6 block:v9];
}

uint64_t sub_100081628(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10008196C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKMultiplayerMatchService,  "serviceFromService:",  *(void *)(a1 + 32)));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100081A34;
  void v7[3] = &unk_10026C8B0;
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v6 = v3;
  [v4 getCompatibilityMatrix:v5 handler:v7];
}

void sub_100081A34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v26 = v6;
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers(v6);
  }
  id v8 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v41 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "compatibility matrix result %@", buf, 0xCu);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKApplicationWorkspace defaultWorkspace]( &OBJC_CLASS___GKApplicationWorkspace,  "defaultWorkspace",  v26));
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  id obj = v5;
  id v10 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (v10)
  {
    id v11 = v10;
    id v12 = &OBJC_CLASS___GKAnonymousPlayerInternal_ptr;
    uint64_t v13 = *(void *)v36;
    __int128 v28 = v9;
    uint64_t v32 = *(void *)v36;
    do
    {
      uint64_t v14 = 0LL;
      id v31 = v11;
      do
      {
        if (*(void *)v36 != v13) {
          objc_enumerationMutation(obj);
        }
        __int128 v15 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)v14);
        if (objc_msgSend(v12[35], "supportsPlatform:", objc_msgSend(v15, "platform")))
        {
          int8x16_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 bundleID]);
          if ([v9 applicationIsInstalled:v16])
          {
            uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle _gkBundleWithIdentifier:]( &OBJC_CLASS___NSBundle,  "_gkBundleWithIdentifier:",  v16));
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 _gkBundleVersion]);
            id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 _gkBundleShortVersion]);
            unsigned __int8 v34 = [*(id *)(a1 + 32) isEqualToString:v16];

            if (v19)
            {
              uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v15 shortVersions]);
              if (([v30 containsObject:v19] & 1) == 0)
              {
                int v20 = 1;
                goto LABEL_17;
              }

LABEL_24:
          id v12 = &OBJC_CLASS___GKAnonymousPlayerInternal_ptr;
          uint64_t v13 = v32;
        }

        uint64_t v14 = (char *)v14 + 1;
      }

      while (v11 != v14);
      id v25 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
      id v11 = v25;
    }

    while (v25);
  }

  return v13;
}

  __break(1u);
}

    id v6 = (v13 - 1) & v13;
    id v11 = __clz(__rbit64(v13)) + (v14 << 6);
    id v9 = v14;
  }

  __int128 v15 = v9 + 5;
  if (v9 + 5 >= v31)
  {
LABEL_36:
    swift_release(v3);
    sub_100132050(a1);
    return (uint64_t)v3;
  }

  uint64_t v13 = *(void *)(v32 + 8 * v15);
  if (v13)
  {
    uint64_t v14 = v9 + 5;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v14 >= v31) {
      goto LABEL_36;
    }
    uint64_t v13 = *(void *)(v32 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_24;
    }
  }

LABEL_35:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

  swift_release(v5);
  id v3 = v36;
LABEL_37:
  if ((v39 & 1) != 0)
  {
    __int128 v35 = 1LL << *(_BYTE *)(v5 + 32);
    if (v35 >= 64) {
      sub_100137A1C(0LL, (unint64_t)(v35 + 63) >> 6, v18);
    }
    else {
      *id v18 = -1LL << v35;
    }
    *(void *)(v5 + 16) = 0LL;
  }

void sub_100081E1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"bundleID"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"bundleVersion"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"shortBundleVersion"]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"platform"]);
  (*(void (**)(uint64_t, id, void *, void *, void *))(v2 + 16))(v2, v6, v3, v4, v5);
}

void sub_100081F94(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSFetchRequest);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKTurnBasedSessionCacheObject entityName](&OBJC_CLASS___GKTurnBasedSessionCacheObject, "entityName"));
  id v4 = -[NSFetchRequest initWithEntityName:](v2, "initWithEntityName:", v3);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sessionIDs]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](&OBJC_CLASS___GKPlayerProfileCacheObject, "selfPlayerID"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"sessionID IN %@ && currentPlayerID = %@ && status IN %@",  v5,  v6,  &off_100288658));
  -[NSFetchRequest setPredicate:](v4, "setPredicate:", v7);

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"bundleID",  1LL));
  id v39 = v8;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v39, 1LL));
  -[NSFetchRequest setSortDescriptors:](v4, "setSortDescriptors:", v9);

  uint64_t v32 = v4;
  uint64_t v33 = a1;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) executeFetchRequest:v4 error:0]);
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v11 = [v10 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v11)
  {
    id v12 = v11;
    int v13 = 0;
    uint64_t v14 = 0LL;
    uint64_t v15 = *(void *)v35;
    do
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v35 != v15) {
          objc_enumerationMutation(v10);
        }
        uint64_t v17 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 bundleID]);
        unsigned __int8 v19 = [v18 isEqualToString:v14];

        if ((v19 & 1) != 0)
        {
          ++v13;
        }

        else
        {
          if (v14)
          {
            int v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](&OBJC_CLASS___GKBadgeController, "sharedController"));
            [v20 setBadgeCount:v13 forBundleID:v14 badgeType:2];
          }

          uint64_t v21 = objc_claimAutoreleasedReturnValue([v17 bundleID]);

          int v13 = 1;
          uint64_t v14 = (void *)v21;
        }
      }

      id v12 = [v10 countByEnumeratingWithState:&v34 objects:v38 count:16];
    }

    while (v12);
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v33 + 40) game]);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 bundleID]);

  id v24 = [v10 count];
  id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v33 + 48) clientProxy]);
  id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 bundleIdentifier]);
  unsigned int v27 = [v23 isEqualToString:v26];

  if (v27)
  {
    __int128 v28 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  *(void *)(v33 + 32)));
    [v28 setNumberOfTurns:v24];
  }

  uint64_t v29 = GKGameCenterIdentifier;
  if ([v23 isEqualToString:GKGameCenterIdentifier])
  {
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](&OBJC_CLASS___GKBadgeController, "sharedController"));
    [v30 setBadgeCount:(int)v24 forBundleID:v29 badgeType:2];
  }

  uint64_t v31 = *(void *)(v33 + 56);
  if (v31) {
    (*(void (**)(void))(v31 + 16))();
  }
}

void sub_10008242C(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "GKTurnBasedService: loadTurnBasedMatchesForGame:",  buf,  2u);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKTurnBasedService.m",  419LL,  "-[GKTurnBasedService loadTurnBasedMatchesForGame:loadDetails:prefetchOnly:context:handler:]_block_invoke"));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheTransactionGroup transactionGroupWithName:context:client:]( &OBJC_CLASS___GKCacheTransactionGroup,  "transactionGroupWithName:context:client:",  v4,  v5,  v6));

  *(void *)buf = 0LL;
  uint64_t v32 = buf;
  uint64_t v33 = 0x2020000000LL;
  uint64_t v34 = 0LL;
  v29[0] = 0LL;
  v29[1] = v29;
  void v29[2] = 0x2020000000LL;
  char v30 = 0;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 replyQueue]);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  void v23[2] = sub_1000826DC;
  v23[3] = &unk_10026F8A8;
  int8x16_t v16 = *(int8x16_t *)(a1 + 32);
  id v10 = (id)v16.i64[0];
  int8x16_t v24 = vextq_s8(v16, v16, 8uLL);
  id v25 = *(id *)(a1 + 48);
  id v11 = v7;
  id v26 = v11;
  unsigned int v27 = buf;
  __int128 v28 = v29;
  [v11 performOnQueue:v9 block:v23];

  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 replyQueue]);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_100082AB8;
  void v17[3] = &unk_10026F8D0;
  id v20 = *(id *)(a1 + 56);
  uint64_t v21 = buf;
  id v14 = v11;
  uint64_t v22 = v29;
  uint64_t v15 = *(void *)(a1 + 40);
  id v18 = v14;
  uint64_t v19 = v15;
  [v14 notifyOnQueue:v13 block:v17];

  _Block_object_dispose(v29, 8);
  _Block_object_dispose(buf, 8);
}

void sub_1000826B8(_Unwind_Exception *a1)
{
}

void sub_1000826DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000827E4;
  v9[3] = &unk_10026F880;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v7;
  __int128 v15 = *(_OWORD *)(a1 + 64);
  id v14 = v3;
  id v8 = v3;
  [v4 issueRequest:0 bagKey:@"gk-tb-find-sessions" clientProxy:v5 handler:v9];
}

void sub_1000827E4(uint64_t a1, void *a2, void *a3, double a4)
{
  id v13 = a2;
  id v7 = a3;
  if (v13)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_100082914;
    void v14[3] = &unk_10026DD80;
    id v8 = *(void **)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    id v16 = *(id *)(a1 + 32);
    id v17 = v13;
    double v20 = a4;
    id v9 = *(id *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    id v18 = v9;
    uint64_t v19 = v10;
    [v8 performBlockAndWait:v14];
  }

  *(double *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = a4;
  BOOL v12 = *(double *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) > 0.0 && v7 == 0LL;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = v12;
  [*(id *)(a1 + 48) setError:v7];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100082914(uint64_t a1)
{
  id v2 = (GKTurnBasedSessionListCacheObject *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) turnBasedSessionList]);
  [*(id *)(a1 + 40) refreshObject:*(void *)(a1 + 32) mergeChanges:1];
  if (!v2)
  {
    id v2 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKTurnBasedSessionListCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 40));
    [*(id *)(a1 + 32) setTurnBasedSessionList:v2];
  }

  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 72)));
  -[GKTurnBasedSessionListCacheObject updateWithServerRepresentation:expirationDate:]( v2,  "updateWithServerRepresentation:expirationDate:",  v3,  v4);

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100082A1C;
  void v7[3] = &unk_10026B080;
  uint64_t v5 = *(void **)(a1 + 56);
  void v7[4] = *(void *)(a1 + 64);
  id v8 = v2;
  id v9 = *(id *)(a1 + 40);
  id v6 = v2;
  [v5 perform:v7];
}

void sub_100082A1C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100082AAC;
  void v8[3] = &unk_10026B120;
  id v9 = v3;
  id v7 = v3;
  [v4 _determineTurnBasedBadgeCountFromList:v5 context:v6 completionHandler:v8];
}

uint64_t sub_100082AAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100082AB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  double v3 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v4, v3);

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    [v5 refreshContentsForDataType:14 userInfo:0];
  }

void sub_100082C80(id *a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  double v3 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "GKTurnBasedService: fetchTurnBasedMatchesForGame:",  buf,  2u);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKTurnBasedService.m",  472LL,  "-[GKTurnBasedService fetchTurnBasedMatchesForGame:context:handler:]_block_invoke"));
  id v5 = a1[4];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheTransactionGroup transactionGroupWithName:context:client:]( &OBJC_CLASS___GKCacheTransactionGroup,  "transactionGroupWithName:context:client:",  v4,  v5,  v6));

  *(void *)buf = 0LL;
  id v26 = buf;
  uint64_t v27 = 0x2020000000LL;
  char v28 = 0;
  v23[0] = 0LL;
  v23[1] = v23;
  void v23[2] = 0x2020000000LL;
  char v24 = 0;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_100082EF0;
  void v17[3] = &unk_10026F920;
  id v18 = a1[4];
  id v19 = a1[6];
  uint64_t v21 = v23;
  uint64_t v22 = buf;
  id v8 = v7;
  id v20 = v8;
  [v8 perform:v17];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 replyQueue]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100083084;
  v12[3] = &unk_10026C160;
  id v14 = a1[7];
  id v11 = v8;
  id v13 = v11;
  id v15 = buf;
  id v16 = v23;
  [v11 notifyOnQueue:v10 block:v12];

  _Block_object_dispose(v23, 8);
  _Block_object_dispose(buf, 8);
}

void sub_100082ECC(_Unwind_Exception *a1)
{
}

void sub_100082EF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100082FB8;
  void v6[3] = &unk_10026F8F8;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  __int128 v11 = *(_OWORD *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v5 = v3;
  [v7 performBlock:v6];
}

void sub_100082FB8(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) turnBasedSessionList]);
  if ([v4 isValid])
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v4 expired] ^ 1;
    id v2 = (void *)objc_claimAutoreleasedReturnValue([v4 sessionIDs]);
    [*(id *)(a1 + 48) setResult:v2];

    id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 seed]);
    [*(id *)(a1 + 48) setObject:v3 forKeyedSubscript:@"seed"];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100083084(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"seed"]);
  (*(void (**)(uint64_t, id, void *, void, void))(v2 + 16))( v2,  v4,  v3,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
}

void sub_1000831E4(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID:",  buf,  2u);
  }

  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKTurnBasedService.m",  505LL,  "-[GKTurnBasedService getTurnBasedMatchesAndCompatibleBundleID:handler:]_block_invoke"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 transactionGroupWithName:v5]);

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 replyQueue]);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  void v22[2] = sub_1000833E8;
  v22[3] = &unk_10026F998;
  id v9 = v6;
  uint64_t v10 = *(void *)(a1 + 32);
  __int128 v11 = *(void **)(a1 + 40);
  id v23 = v9;
  uint64_t v24 = v10;
  id v25 = v11;
  [v9 performOnQueue:v8 block:v22];

  if (*(void *)(a1 + 40))
  {
    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 replyQueue]);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_100083BD4;
    void v17[3] = &unk_10026C640;
    id v14 = v9;
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = *(void **)(a1 + 40);
    id v18 = v14;
    uint64_t v19 = v15;
    char v21 = *(_BYTE *)(a1 + 48);
    id v20 = v16;
    [v14 notifyOnQueue:v13 block:v17];
  }
}

void sub_1000833E8(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000834A4;
  void v7[3] = &unk_10026DEC8;
  int8x16_t v6 = *(int8x16_t *)(a1 + 32);
  id v4 = (id)v6.i64[0];
  int8x16_t v8 = vextq_s8(v6, v6, 8uLL);
  id v9 = *(id *)(a1 + 48);
  id v5 = a2;
  [v4 performOnManagedObjectContext:v7];
  v5[2](v5);
}

void sub_1000834A4(id *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[4] clientProxy]);
  int8x16_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[5] context]);
  int8x16_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v6,  v7));

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers(v9);
  }
  __int128 v11 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID: fetching TB match for games",  buf,  2u);
  }

  id v12 = a1[4];
  id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[5] context]);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_100083644;
  void v18[3] = &unk_10026F970;
  id v14 = a1[5];
  id v15 = a1[4];
  id v19 = v14;
  id v20 = v15;
  id v21 = v8;
  id v22 = a1[6];
  id v23 = v4;
  id v16 = v4;
  id v17 = v8;
  [v12 fetchTurnBasedMatchesForGame:v17 context:v13 handler:v18];
}

uint64_t sub_100083644(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  id v7 = *(void **)(a1 + 32);
  id v8 = a3;
  [v7 setResult:a2];
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"seed"];

  if ((a4 & 1) == 0)
  {
    uint64_t v9 = *(void **)(a1 + 32);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKTurnBasedService.m",  518LL,  "-[GKTurnBasedService getTurnBasedMatchesAndCompatibleBundleID:handler:]_block_invoke"));
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v9 transactionGroupWithName:v10]);

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_100083824;
    void v25[3] = &unk_10026F948;
    id v12 = *(void **)(a1 + 48);
    void v25[4] = *(void *)(a1 + 40);
    id v26 = v12;
    id v28 = *(id *)(a1 + 56);
    id v13 = v11;
    id v27 = v13;
    [v13 perform:v25];
    id v14 = *(void **)(a1 + 32);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 replyQueue]);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    void v20[2] = sub_100083980;
    v20[3] = &unk_10026BF40;
    id v21 = *(id *)(a1 + 32);
    id v22 = v13;
    id v17 = *(void **)(a1 + 48);
    uint64_t v23 = *(void *)(a1 + 40);
    id v24 = v17;
    id v18 = v13;
    [v14 join:v18 queue:v16 block:v20];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100083824(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  int8x16_t v6 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID: loading TB match for games",  buf,  2u);
  }

  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  BOOL v9 = *(void *)(a1 + 56) == 0LL;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100083950;
  v12[3] = &unk_10026D568;
  id v13 = *(id *)(a1 + 48);
  id v14 = v4;
  id v11 = v4;
  [v7 loadTurnBasedMatchesForGame:v8 loadDetails:1 prefetchOnly:v9 context:v10 handler:v12];
}

uint64_t sub_100083950(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100083980(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  [*(id *)(a1 + 32) setError:v2];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (!v3)
  {
    id v4 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_100083A58;
    void v6[3] = &unk_10026BEC8;
    id v5 = *(void **)(a1 + 56);
    void v6[4] = *(void *)(a1 + 48);
    id v7 = v5;
    id v8 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 32);
    [v4 perform:v6];
  }

void sub_100083A58(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  int8x16_t v6 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID: fetching TB match for games",  buf,  2u);
  }

  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100083B74;
  v11[3] = &unk_10026D590;
  id v12 = *(id *)(a1 + 56);
  id v13 = v4;
  id v10 = v4;
  [v7 fetchTurnBasedMatchesForGame:v8 context:v9 handler:v11];
}

uint64_t sub_100083B74(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"seed"];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100083BD4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = [v2 count];
  id v4 = *(void **)(a1 + 32);
  if (v3)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_100083D28;
    v11[3] = &unk_10026B548;
    void v11[4] = *(void *)(a1 + 40);
    id v12 = v2;
    id v13 = *(id *)(a1 + 32);
    char v14 = *(_BYTE *)(a1 + 56);
    [v4 perform:v11];
  }

  else
  {
    [*(id *)(a1 + 32) setResult:0];
  }

  id v5 = *(void **)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100083EC0;
  void v8[3] = &unk_10026B030;
  id v10 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 32);
  [v5 notifyOnQueue:v7 block:v8];
}

void sub_100083D28(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  id v6 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID: get details for TB match for games",  buf,  2u);
  }

  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100083E3C;
  v12[3] = &unk_10026F9C0;
  id v9 = *(id *)(a1 + 48);
  char v16 = *(_BYTE *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 32);
  id v13 = v9;
  uint64_t v14 = v10;
  id v15 = v4;
  id v11 = v4;
  [v7 getDetailsForTurnBasedMatchIDs:v8 includeGameData:0 prefetchOnly:0 handler:v12];
}

void sub_100083E3C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:v7];
  [*(id *)(a1 + 32) setError:v6];

  if (*(_BYTE *)(a1 + 56)) {
    [*(id *)(a1 + 40) _determineCompatibleGamesForMatches:v7 dispatchGroup:*(void *)(a1 + 32)];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100083EC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100083F9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_100084110;
  void v16[3] = &unk_10026FA10;
  id v17 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](&OBJC_CLASS___NSMutableSet, "setWithCapacity:", 0LL));
  id v4 = v17;
  id v5 = objc_retainBlock(v16);
  id v6 = *(void **)(a1 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_10008418C;
  void v14[3] = &unk_10026FA60;
  id v15 = v5;
  id v7 = v5;
  [v6 enumerateObjectsUsingBlock:v14];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKProfileService,  "serviceFromService:",  *(void *)(a1 + 40)));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 allObjects]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1000842C8;
  v11[3] = &unk_10026C550;
  id v12 = *(id *)(a1 + 32);
  id v13 = v3;
  id v10 = v3;
  [v8 getProfilesForPlayerIDs:v9 handler:v11];
}

void sub_100084110(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v9 = v3;
    unsigned __int8 v5 = [v3 isAutomatchPlayer];
    id v4 = v9;
    if ((v5 & 1) == 0)
    {
      unsigned __int8 v6 = [v9 isGuestPlayer];
      id v4 = v9;
      if ((v6 & 1) == 0)
      {
        id v7 = *(void **)(a1 + 32);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v9 playerID]);
        [v7 addObject:v8];

        id v4 = v9;
      }
    }
  }
}

void sub_10008418C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v4 currentPlayer]);
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

  unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([v4 participants]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100084244;
  void v7[3] = &unk_10026FA38;
  id v8 = *(id *)(a1 + 32);
  [v6 enumerateObjectsUsingBlock:v7];
}

void sub_100084244(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v4 player]);
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v4 invitedBy]);

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_1000842C8(uint64_t a1, void *a2)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000843AC;
  v12[3] = &unk_10026FA88;
  id v13 = (id)objc_claimAutoreleasedReturnValue([a2 _gkMapDictionaryWithKeyPath:@"playerID"]);
  id v3 = v13;
  id v4 = objc_retainBlock(v12);
  unsigned __int8 v5 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100084400;
  v10[3] = &unk_10026FA60;
  id v11 = v4;
  uint64_t v6 = v4;
  [v5 enumerateObjectsUsingBlock:v10];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  v7,  v8,  v9);
}

id sub_1000843AC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 playerID]);
  if (v3) {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
  }
  else {
    id v4 = 0LL;
  }

  return v4;
}

void sub_100084400(uint64_t a1, void *a2)
{
  id v10 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v10 currentPlayer]);
  unsigned __int8 v4 = [v3 isGuestPlayer];

  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v10 currentPlayer]);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(v5 + 16))(v5, v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    [v10 setCurrentPlayer:v8];
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v10 participants]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1000844F4;
  v11[3] = &unk_10026FA38;
  id v12 = *(id *)(a1 + 32);
  [v9 enumerateObjectsUsingBlock:v11];
}

void sub_1000844F4(uint64_t a1, void *a2)
{
  id v15 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v15 player]);
  unsigned __int8 v4 = [v3 isGuestPlayer];

  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v15 player]);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(v5 + 16))(v5, v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    [v15 setPlayer:v8];
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v15 invitedBy]);
  unsigned __int8 v10 = [v9 isGuestPlayer];

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v15 invitedBy]);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void *))(v11 + 16))(v11, v12);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    [v15 setInvitedBy:v14];
  }
}

void sub_100084718(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKTurnBasedService.m",  641LL,  "-[GKTurnBasedService fetchDetailsForTurnBasedMatchIDs:includeGameData:responseKind:context:handler:]_block_invoke"));
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheTransactionGroup transactionGroupWithName:context:client:]( &OBJC_CLASS___GKCacheTransactionGroup,  "transactionGroupWithName:context:client:",  v2,  v3,  v4));

  v27[0] = 0LL;
  v27[1] = v27;
  v27[2] = 0x2020000000LL;
  char v28 = 0;
  v25[0] = 0LL;
  v25[1] = v25;
  v25[2] = 0x2020000000LL;
  char v26 = 0;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_100084928;
  void v17[3] = &unk_10026D6E8;
  id v6 = *(id *)(a1 + 48);
  id v21 = v27;
  id v22 = v25;
  int v23 = *(_DWORD *)(a1 + 64);
  char v24 = *(_BYTE *)(a1 + 68);
  uint64_t v7 = *(void *)(a1 + 40);
  id v18 = v6;
  uint64_t v19 = v7;
  id v8 = v5;
  id v20 = v8;
  [v8 performOnManagedObjectContext:v17];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 replyQueue]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100084D74;
  v12[3] = &unk_10026C160;
  id v14 = *(id *)(a1 + 56);
  id v11 = v8;
  id v13 = v11;
  id v15 = v27;
  char v16 = v25;
  [v11 notifyOnQueue:v10 block:v12];

  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v27, 8);
}

void sub_100084904(_Unwind_Exception *a1)
{
}

void sub_100084928(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a3;
  id v6 = *(void **)(a1 + 32);
  id v7 = a2;
  id v8 = [v6 count];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKTurnBasedSessionCacheObject sessionsWithSessionIDs:inContext:]( &OBJC_CLASS___GKTurnBasedSessionCacheObject,  "sessionsWithSessionIDs:inContext:",  *(void *)(a1 + 32),  v7));

  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v9 count] == v8;
  BOOL v10 = *(int *)(a1 + 72) >= 1 && *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) != 0;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v10;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_100084BB8;
  void v27[3] = &unk_10026FAB0;
  char v29 = *(_BYTE *)(a1 + 76);
  int8x16_t v28 = vextq_s8(*(int8x16_t *)(a1 + 56), *(int8x16_t *)(a1 + 56), 8uLL);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 _gkFilterWithBlock:v27]);
  id v12 = [v11 count];
  uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8LL);
  if (v12) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = *(_BYTE *)(v13 + 24) == 0;
  }
  char v15 = !v14;
  *(_BYTE *)(v13 + 24) = v15;
  if (*(_DWORD *)(a1 + 72) == 2) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;
  }
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) &= *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
  {
    char v16 = (void *)objc_claimAutoreleasedReturnValue([v9 _gkMapDictionaryWithKeyPath:@"sessionID"]);
    id v17 = *(void **)(a1 + 32);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_100084D00;
    v24[3] = &unk_10026FAD8;
    id v18 = v16;
    id v25 = v18;
    char v26 = *(_BYTE *)(a1 + 76);
    uint64_t v19 = objc_claimAutoreleasedReturnValue([v17 _gkFilterWithBlock:v24]);
    id v20 = (void *)v19;
    if (!os_log_GKGeneral) {
      id v21 = (id)GKOSLoggers(v19);
    }
    id v22 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v23 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "fetchDetailsForTurnBasedMatchIDs:Group Matches with SessionIDs have been set",  v23,  2u);
    }

    [*(id *)(a1 + 40) _updatePlayersForMatches:v20 group:*(void *)(a1 + 48)];
    [*(id *)(a1 + 48) setResult:v20];
  }

  v5[2](v5);
}

id sub_100084BB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([v3 expirationDate]);
  [v4 timeIntervalSinceNow];
  double v6 = v5;
  BOOL v7 = v5 > 0.0;

  if (*(_BYTE *)(a1 + 48))
  {
    BOOL v7 = v6 > 0.0;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 dataExpirationDate]);
    [v9 timeIntervalSinceNow];
    double v11 = v10;

    BOOL v12 = v11 > 0.0;
    if (v11 <= 0.0) {
      BOOL v7 = 0;
    }
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8LL);
    if (!*(_BYTE *)(v13 + 24)) {
      BOOL v12 = 0;
    }
    *(_BYTE *)(v13 + 24) = v12;
  }

  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v14 + 24)) {
    BOOL v15 = v7;
  }
  else {
    BOOL v15 = 0;
  }
  *(_BYTE *)(v14 + 24) = v15;
  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v16 = (id)GKOSLoggers(v8);
    }
    id v17 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v20 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "fetchDetailsForTurnBasedMatchIDs:Session Valid for match ID, returning sessionID",  v20,  2u);
    }

    id v18 = 0LL;
  }

  else
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v3 sessionID]);
  }

  return v18;
}

id sub_100084D00(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:a2]);
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([v3 internalRepresentation]);
  if (*(_BYTE *)(a1 + 40))
  {
    double v5 = (void *)objc_claimAutoreleasedReturnValue([v3 gameData]);
    [v4 setMatchData:v5];
  }

  return v4;
}

void sub_100084D74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  (*(void (**)(uint64_t, id, void, void, void))(v2 + 16))( v2,  v3,  0LL,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
}

void sub_100084EFC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKTurnBasedService.m",  707LL,  "-[GKTurnBasedService loadDetailsForTurnBasedMatchIDs:includeGameData:context:handler:]_block_invoke"));
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  double v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheTransactionGroup transactionGroupWithName:context:client:]( &OBJC_CLASS___GKCacheTransactionGroup,  "transactionGroupWithName:context:client:",  v2,  v3,  v4));

  v21[0] = 0LL;
  v21[1] = v21;
  void v21[2] = 0x2020000000LL;
  v21[3] = 0LL;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1000850D0;
  v15[3] = &unk_10026FB70;
  id v16 = *(id *)(a1 + 48);
  char v20 = *(_BYTE *)(a1 + 64);
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 40);
  id v17 = v6;
  uint64_t v18 = v7;
  uint64_t v19 = v21;
  [v6 performOnManagedObjectContext:v15];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 replyQueue]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1000856B8;
  v11[3] = &unk_10026B878;
  id v13 = *(id *)(a1 + 56);
  uint64_t v14 = v21;
  id v10 = v6;
  id v12 = v10;
  [v10 notifyOnQueue:v9 block:v11];

  _Block_object_dispose(v21, 8);
}

void sub_1000850B8(_Unwind_Exception *a1)
{
}

void sub_1000850D0(uint64_t a1, uint64_t a2, void *a3)
{
  double v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKTurnBasedSessionCacheObject sessionsWithSessionIDs:inContext:]( &OBJC_CLASS___GKTurnBasedSessionCacheObject,  "sessionsWithSessionIDs:inContext:",  *(void *)(a1 + 32),  a2));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  void v19[2] = sub_100085214;
  void v19[3] = &unk_10026FB20;
  char v20 = *(_BYTE *)(a1 + 64);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 _gkFilterWithBlock:v19]);
  if ([v7 count])
  {
    uint64_t v8 = *(void **)(a1 + 40);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1000852BC;
    void v13[3] = &unk_10026FB48;
    id v14 = v7;
    char v18 = *(_BYTE *)(a1 + 64);
    int8x16_t v12 = *(int8x16_t *)(a1 + 40);
    id v9 = (id)v12.i64[0];
    int8x16_t v15 = vextq_s8(v12, v12, 8uLL);
    id v10 = v6;
    uint64_t v11 = *(void *)(a1 + 56);
    id v16 = v10;
    uint64_t v17 = v11;
    [v8 perform:v13];
  }

  v5[2](v5);
}

id sub_100085214(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([v3 expirationDate]);
  [v4 timeIntervalSinceNow];
  double v6 = v5;

  if (*(_BYTE *)(a1 + 32))
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 dataExpirationDate]);
    [v7 timeIntervalSinceNow];
    double v9 = v8;

    if (v6 > 0.0 && v9 > 0.0) {
      goto LABEL_4;
    }
LABEL_6:
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 sessionID]);
    goto LABEL_7;
  }

  if (v6 <= 0.0) {
    goto LABEL_6;
  }
LABEL_4:
  id v10 = 0LL;
LABEL_7:

  return v10;
}

void sub_1000852BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  v17[0] = @"session-ids";
  v17[1] = @"get-game-state";
  v18[0] = v4;
  v18[1] = &off_1002879B8;
  void v17[2] = @"get-exchanges";
  double v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  *(unsigned __int8 *)(a1 + 72)));
  void v18[2] = v5;
  double v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  3LL));

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  double v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100085450;
  v12[3] = &unk_10026DCE0;
  id v13 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  id v15 = v3;
  uint64_t v16 = v10;
  id v14 = v9;
  id v11 = v3;
  [v7 issueRequest:v6 bagKey:@"gk-tb-get-session" clientProxy:v8 handler:v12];
}

void sub_100085450(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  if (v7)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", a4));
    uint64_t v10 = *(void **)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100085560;
    v12[3] = &unk_10026B408;
    id v13 = v7;
    id v14 = *(id *)(a1 + 40);
    id v15 = v9;
    id v11 = v9;
    [v10 performOnManagedObjectContext:v12];
  }

  *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a4;
  [*(id *)(a1 + 32) setError:v8];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100085560(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  double v5 = a3;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"sessions"]);
  double v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _gkMapDictionaryWithKeyPath:@"sessionID"]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_100085640;
  v9[3] = &unk_10026DCB8;
  id v10 = v6;
  id v11 = *(id *)(a1 + 48);
  id v7 = v6;
  [v8 enumerateObjectsUsingBlock:v9];
  v5[2](v5);
}

void sub_100085640(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"session-id"]);
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
    [v4 updateWithServerRepresentation:v5 expirationDate:*(void *)(a1 + 40)];
  }
}

void sub_1000856B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);
}

void sub_100085824(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKTurnBasedService.m",  773LL,  "-[GKTurnBasedService getDetailsForTurnBasedMatchIDs:includeGameData:prefetchOnly:handler:]_block_invoke"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 transactionGroupWithName:v3]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  double v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_1000859DC;
  void v16[3] = &unk_10026FC38;
  id v7 = *(id *)(a1 + 48);
  char v20 = *(_BYTE *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v19 = v7;
  void v16[4] = v8;
  id v17 = v9;
  char v21 = *(_BYTE *)(a1 + 57);
  id v10 = v4;
  id v18 = v10;
  [v10 performOnQueue:v6 block:v16];

  if (*(void *)(a1 + 48))
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    int8x16_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 replyQueue]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_100086004;
    void v13[3] = &unk_10026B030;
    id v15 = *(id *)(a1 + 48);
    id v14 = v10;
    [v14 notifyOnQueue:v12 block:v13];
  }
}

void sub_1000859DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(_BYTE *)(a1 + 64)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = *(void *)(a1 + 56) == 0LL;
  }
  uint64_t v5 = !v4;
  double v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 65);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_100085AF4;
  void v14[3] = &unk_10026FC10;
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 32);
  int8x16_t v12 = *(void **)(a1 + 40);
  id v15 = v10;
  uint64_t v16 = v11;
  id v17 = v12;
  char v20 = *(_BYTE *)(a1 + 65);
  char v21 = *(_BYTE *)(a1 + 64);
  id v18 = *(id *)(a1 + 56);
  id v19 = v3;
  id v13 = v3;
  [v6 fetchDetailsForTurnBasedMatchIDs:v7 includeGameData:v8 responseKind:v5 context:v9 handler:v14];
}

void sub_100085AF4(uint64_t a1, void *a2, uint64_t a3, char a4, char a5)
{
  id v8 = a2;
  if ((a4 & 1) == 0)
  {
    id v9 = *(void **)(a1 + 32);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKTurnBasedService.m",  784LL,  "-[GKTurnBasedService getDetailsForTurnBasedMatchIDs:includeGameData:prefetchOnly:handler:]_block_invoke_3"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 transactionGroupWithName:v10]);

    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_100085CE0;
    void v27[3] = &unk_10026B548;
    int8x16_t v12 = *(void **)(a1 + 48);
    void v27[4] = *(void *)(a1 + 40);
    id v28 = v12;
    char v30 = *(_BYTE *)(a1 + 72);
    id v13 = v11;
    id v29 = v13;
    [v13 perform:v27];
    if ((a5 & 1) == 0 && !*(_BYTE *)(a1 + 73))
    {
      id v14 = *(void **)(a1 + 32);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 replyQueue]);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      void v20[2] = sub_100085E1C;
      v20[3] = &unk_10026FBE8;
      id v21 = v13;
      id v25 = *(id *)(a1 + 56);
      id v17 = *(id *)(a1 + 32);
      uint64_t v18 = *(void *)(a1 + 40);
      id v19 = *(void **)(a1 + 48);
      id v22 = v17;
      uint64_t v23 = v18;
      id v24 = v19;
      char v26 = *(_BYTE *)(a1 + 72);
      [v14 join:v21 queue:v16 block:v20];
    }
  }

  [*(id *)(a1 + 32) setResult:v8];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100085CE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_100085D94;
  v9[3] = &unk_10026D680;
  id v10 = v3;
  id v8 = v3;
  [v4 loadDetailsForTurnBasedMatchIDs:v5 includeGameData:v6 context:v7 handler:v9];
}

void sub_100085D94(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    uint64_t v6 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10008E7C8((uint64_t)v4, v6);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100085E1C(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (!v2)
  {
    id v3 = *(void **)(a1 + 56);
    BOOL v4 = *(void *)(a1 + 64) == 0LL;
    id v9 = _NSConcreteStackBlock;
    uint64_t v11 = sub_100085F00;
    int8x16_t v12 = &unk_10026FBC0;
    id v5 = *(void **)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 48);
    int v6 = !v4;
    int v7 = 2 * v6;
    uint64_t v10 = 3221225472LL;
    id v14 = v3;
    char v17 = *(_BYTE *)(a1 + 72);
    int v16 = v7;
    id v15 = *(id *)(a1 + 40);
    [v5 perform:&v9];
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error", v9, v10, v11, v12, v13));
  [*(id *)(a1 + 40) setError:v8];
}

void sub_100085F00(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 60);
  uint64_t v7 = *(unsigned int *)(a1 + 56);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100085FD4;
  v10[3] = &unk_10026D590;
  id v11 = *(id *)(a1 + 48);
  id v12 = v3;
  id v9 = v3;
  [v4 fetchDetailsForTurnBasedMatchIDs:v5 includeGameData:v6 responseKind:v7 context:v8 handler:v10];
}

uint64_t sub_100085FD4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100086004(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_100086474(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  void v23[2] = sub_100086768;
  void v23[3] = &unk_10026BDB0;
  id v24 = *(id *)(a1 + 40);
  id v25 = *(id *)(a1 + 32);
  [v4 performBlockAndWait:v23];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) participants]);
  id v6 = [v5 count];

  if (v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) participants]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v7,  "objectAtIndexedSubscript:",  (int)objc_msgSend(*(id *)(a1 + 48), "currentParticipant")));

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 player]);
    unsigned int v10 = [v9 isGuestPlayer];
    id v11 = *(void **)(a1 + 56);
    if (v10)
    {
      v31[0] = *(void *)(a1 + 40);
      v30[0] = @"session-id";
      v30[1] = @"guest-id";
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 guestIdentifier]);
      v31[1] = v12;
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v31,  v30,  2LL));
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 updateRequestWithPushToken:v13]);
    }

    else
    {
      id v28 = @"session-id";
      uint64_t v29 = *(void *)(a1 + 40);
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v29,  &v28,  1LL));
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 updateRequestWithPushToken:v12]);
    }
  }

  else
  {
    id v15 = *(void **)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 40);
    char v26 = @"session-id";
    uint64_t v27 = v16;
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v27,  &v26,  1LL));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v15 updateRequestWithPushToken:v8]);
  }

  char v17 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) clientProxy]);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  void v20[2] = sub_100086800;
  v20[3] = &unk_10026C6B8;
  id v21 = *(id *)(a1 + 32);
  id v22 = v3;
  id v19 = v3;
  [v17 issueRequest:v14 bagKey:@"gk-tb-accept" clientProxy:v18 handler:v20];
}

void sub_100086768(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:]( &OBJC_CLASS___GKTurnBasedSessionCacheObject,  "sessionWithID:inManagedObjectContext:",  v2,  v3));

  [v6 expire];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:]( &OBJC_CLASS___GKTurnBasedSessionListCacheObject,  "expireListsForSessionID:context:",  v4,  v5);
}

uint64_t sub_100086800(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008682C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_1000869C4;
    v21[3] = &unk_10026B080;
    id v3 = *(void **)(a1 + 40);
    void v21[4] = *(void *)(a1 + 48);
    id v22 = v2;
    id v23 = *(id *)(a1 + 40);
    [v3 perform:v21];
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_100086B58;
    void v18[3] = &unk_10026B170;
    id v7 = *(id *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    id v19 = v7;
    uint64_t v20 = v8;
    [v4 performOnQueue:v6 block:v18];
  }

  if (*(void *)(a1 + 56))
  {
    id v9 = *(void **)(a1 + 40);
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 replyQueue]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_100086D84;
    void v14[3] = &unk_10026BEF0;
    id v17 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 48);
    id v15 = v12;
    uint64_t v16 = v13;
    [v9 notifyOnQueue:v11 block:v14];
  }

void sub_1000869C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100086AB4;
  void v7[3] = &unk_10026C550;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_100086AB4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 lastObject]);
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100086B58(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100086C48;
  v10[3] = &unk_10026B148;
  int8x16_t v8 = *(int8x16_t *)(a1 + 32);
  id v5 = (id)v8.i64[0];
  int8x16_t v11 = vextq_s8(v8, v8, 8uLL);
  id v12 = v3;
  id v6 = v3;
  [v4 performBlockAndWait:v10];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_100086CFC;
  v9[3] = &unk_10026B5E0;
  id v7 = *(void **)(a1 + 32);
  void v9[4] = *(void *)(a1 + 40);
  [v7 perform:v9];
}

void sub_100086C48(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 bundleIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v3,  v4));

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 turnBasedSessionList]);
  [v5 expire];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100086CFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100086D78;
  void v6[3] = &unk_10026C5A0;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_100086D78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100086D84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"result"]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_10008708C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  void v20[2] = sub_100087338;
  v20[3] = &unk_10026BDB0;
  id v21 = *(id *)(a1 + 40);
  id v22 = *(id *)(a1 + 32);
  [v4 performBlockAndWait:v20];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) participants]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v5,  "objectAtIndexedSubscript:",  (int)objc_msgSend(*(id *)(a1 + 48), "currentParticipant")));

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 player]);
  unsigned int v8 = [v7 isGuestPlayer];
  id v9 = *(void **)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 40);
  if (v8)
  {
    v25[0] = @"session-id";
    v25[1] = @"reason";
    v26[0] = v10;
    v26[1] = &off_1002879B8;
    v25[2] = @"guest-id";
    int8x16_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 guestIdentifier]);
    v26[2] = v11;
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v26,  v25,  3LL));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 updateRequestWithPushToken:v12]);
  }

  else
  {
    v23[0] = @"session-id";
    v23[1] = @"reason";
    v24[0] = v10;
    v24[1] = &off_1002879B8;
    int8x16_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v24,  v23,  2LL));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 updateRequestWithPushToken:v11]);
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) clientProxy]);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_10008744C;
  void v17[3] = &unk_10026C6B8;
  id v18 = *(id *)(a1 + 32);
  id v19 = v3;
  id v16 = v3;
  [v14 issueRequest:v13 bagKey:@"gk-tb-decline" clientProxy:v15 handler:v17];
}

void sub_100087338(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v11 = (id)objc_claimAutoreleasedReturnValue( +[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:]( &OBJC_CLASS___GKTurnBasedSessionCacheObject,  "sessionWithID:inManagedObjectContext:",  v2,  v3));

  [v11 expire];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:]( &OBJC_CLASS___GKTurnBasedSessionListCacheObject,  "expireListsForSessionID:context:",  v4,  v5);

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v7,  v8));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 turnBasedSessionList]);
  [v10 expire];
}

uint64_t sub_10008744C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100087478(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1000875D4;
    v15[3] = &unk_10026B080;
    id v3 = *(void **)(a1 + 40);
    void v15[4] = *(void *)(a1 + 48);
    id v16 = v2;
    id v17 = *(id *)(a1 + 40);
    [v3 perform:v15];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_100087768;
    void v14[3] = &unk_10026B5E0;
    uint64_t v4 = *(void **)(a1 + 40);
    void v14[4] = *(void *)(a1 + 48);
    [v4 perform:v14];
  }

  if (*(void *)(a1 + 56))
  {
    id v5 = *(void **)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_1000877F0;
    v10[3] = &unk_10026BEF0;
    id v13 = *(id *)(a1 + 56);
    id v8 = *(id *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    id v11 = v8;
    uint64_t v12 = v9;
    [v5 notifyOnQueue:v7 block:v10];
  }

void sub_1000875D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000876C4;
  void v7[3] = &unk_10026C550;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_1000876C4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 lastObject]);
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100087768(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000877E4;
  void v6[3] = &unk_10026C5A0;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_1000877E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000877F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"result"]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_100087ADC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_100087C98;
  v15[3] = &unk_10026BDB0;
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 32);
  [v4 performBlock:v15];

  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  id v18 = @"session-id";
  uint64_t v19 = v5;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 updateRequestWithPushToken:v7]);

  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100087DEC;
  v12[3] = &unk_10026C6B8;
  id v13 = *(id *)(a1 + 32);
  id v14 = v3;
  id v11 = v3;
  [v9 issueRequest:v8 bagKey:@"gk-tb-remove-session" clientProxy:v10 handler:v12];
}

void sub_100087C98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:]( &OBJC_CLASS___GKTurnBasedSessionListCacheObject,  "expireListsForSessionID:context:",  v2,  v3);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v5,  v6));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 turnBasedSessionList]);
  [v8 expire];

  id v11 = (id)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"sessionID = %@",  *(void *)(a1 + 32)));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  +[GKCacheObject deleteObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKTurnBasedSessionCacheObject,  "deleteObjectsMatchingPredicate:context:",  v11,  v9);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  +[GKCacheObject deleteObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKTurnBasedSessionEntryCacheObject,  "deleteObjectsMatchingPredicate:context:",  v11,  v10);
}

uint64_t sub_100087DEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100087E18(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100087F18;
    v12[3] = &unk_10026B5E0;
    uint64_t v2 = *(void **)(a1 + 40);
    void v12[4] = *(void *)(a1 + 48);
    [v2 perform:v12];
  }

  if (*(void *)(a1 + 56))
  {
    id v3 = *(void **)(a1 + 40);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 replyQueue]);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _OWORD v8[2] = sub_100087FA0;
    void v8[3] = &unk_10026BEF0;
    id v11 = *(id *)(a1 + 56);
    id v6 = *(id *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    id v9 = v6;
    uint64_t v10 = v7;
    [v3 notifyOnQueue:v5 block:v8];
  }

void sub_100087F18(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100087F94;
  void v6[3] = &unk_10026C5A0;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_100087F94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100087FA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  [v4 refreshContentsForDataType:14 userInfo:0];
}

void sub_1000882B4(uint64_t a1, void *a2)
{
  id v31 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472LL;
  v40[2] = sub_1000886D8;
  v40[3] = &unk_10026BDB0;
  id v41 = *(id *)(a1 + 40);
  id v42 = *(id *)(a1 + 32);
  [v4 performBlockAndWait:v40];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) participants]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v5 count]));

  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) participants]);
  id v8 = [v7 countByEnumeratingWithState:&v36 objects:v45 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v37;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v37 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
        if (([v12 isAutomatchParticipant] & 1) == 0)
        {
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 serverRepresentation]);
          [v6 addObject:v13];
        }
      }

      id v9 = [v7 countByEnumeratingWithState:&v36 objects:v45 count:16];
    }

    while (v9);
  }

  id v14 = *(void **)(a1 + 48);
  v44[0] = *(void *)(a1 + 40);
  v43[0] = @"session-id";
  v43[1] = @"current-turn-number";
  id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v14 turnNumber]));
  v44[1] = v15;
  v43[2] = @"turns";
  id v16 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) turnsForParticipantIndexes:*(void *)(a1 + 64) turnTimeout:*(double *)(a1 + 80)]);
  v44[2] = v16;
  v43[3] = @"turn-at";
  uint64_t v32 = v3;
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v3 _gkServerTimestamp]);
  v44[3] = v17;
  void v43[4] = @"turn-message";
  uint64_t v18 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) message]);
  uint64_t v19 = (void *)v18;
  uint64_t v20 = &stru_10027B720;
  if (v18) {
    uint64_t v20 = (const __CFString *)v18;
  }
  v44[4] = v20;
  v43[5] = @"localized-turn-message";
  uint64_t v21 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localizableMessage]);
  id v22 = (void *)v21;
  id v23 = &__NSDictionary0__struct;
  if (v21) {
    id v23 = (void *)v21;
  }
  v44[5] = v23;
  v43[6] = @"game-state";
  id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) matchData]);
  id v25 = v24;
  if (!v24) {
    id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](&OBJC_CLASS___NSData, "data"));
  }
  v43[7] = @"players";
  v44[6] = v25;
  v44[7] = v6;
  char v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v44,  v43,  8LL));
  if (!v24) {

  }
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) updateRequestWithPushToken:v26]);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_100088748;
  v33[3] = &unk_10026C6B8;
  id v34 = *(id *)(a1 + 32);
  id v35 = v31;
  id v30 = v31;
  [v27 issueRequest:v28 bagKey:@"gk-tb-turn" clientProxy:v29 handler:v33];
}

void sub_1000886D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:]( &OBJC_CLASS___GKTurnBasedSessionCacheObject,  "sessionWithID:inManagedObjectContext:",  v1,  v2));

  [v3 expire];
  [v3 expireGameData];
}

uint64_t sub_100088748(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100088774(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1000888D0;
    v15[3] = &unk_10026B080;
    id v3 = *(void **)(a1 + 40);
    void v15[4] = *(void *)(a1 + 48);
    id v16 = v2;
    id v17 = *(id *)(a1 + 40);
    [v3 perform:v15];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_100088A64;
    void v14[3] = &unk_10026B5E0;
    id v4 = *(void **)(a1 + 40);
    void v14[4] = *(void *)(a1 + 48);
    [v4 perform:v14];
  }

  if (*(void *)(a1 + 56))
  {
    id v5 = *(void **)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_100088AEC;
    v10[3] = &unk_10026BEF0;
    id v13 = *(id *)(a1 + 56);
    id v8 = *(id *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    id v11 = v8;
    uint64_t v12 = v9;
    [v5 notifyOnQueue:v7 block:v10];
  }

void sub_1000888D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000889C0;
  void v7[3] = &unk_10026C550;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_1000889C0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 lastObject]);
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100088A64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100088AE0;
  void v6[3] = &unk_10026C5A0;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_100088AE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100088AEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"result"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_100088E10(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100088EF8;
  void v8[3] = &unk_10026CD40;
  id v4 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v5 = *(id *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  id v12 = v5;
  uint64_t v13 = v6;
  id v14 = *(id *)(a1 + 32);
  id v7 = a2;
  [v4 performOnManagedObjectContext:v8];
  v7[2](v7);
}

void sub_100088EF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:]( &OBJC_CLASS___GKTurnBasedSessionCacheObject,  "sessionWithID:inManagedObjectContext:",  *(void *)(a1 + 32),  v5));
  [v7 expire];
  id v8 = *(void **)(a1 + 40);
  v29[0] = *(void *)(a1 + 32);
  v28[0] = @"session-id";
  v28[1] = @"game-state-version";
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 matchDataVersion]);
  id v10 = (void *)v9;
  id v11 = &stru_10027B720;
  if (v9) {
    id v11 = (const __CFString *)v9;
  }
  v29[1] = v11;
  void v28[2] = @"game-state";
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) matchData]);
  uint64_t v13 = v12;
  if (!v12) {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](&OBJC_CLASS___NSData, "data"));
  }
  v28[3] = @"resolve-exchanges";
  id v14 = *(void **)(a1 + 48);
  if (!v14) {
    id v14 = &__NSArray0__struct;
  }
  void v29[2] = v13;
  void v29[3] = v14;
  id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v29,  v28,  4LL));
  if (!v12) {

  }
  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) updateRequestWithPushToken:v15]);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) clientProxy]);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  void v22[2] = sub_100089154;
  v22[3] = &unk_10026E750;
  id v23 = *(id *)(a1 + 72);
  id v24 = v5;
  id v25 = v7;
  id v26 = *(id *)(a1 + 40);
  id v27 = v6;
  id v19 = v6;
  id v20 = v7;
  id v21 = v5;
  [v16 issueRequest:v17 bagKey:@"gk-tb-update-game-state" clientProxy:v18 handler:v22];
}

uint64_t sub_100089154(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  if (!a4)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_100089200;
    v9[3] = &unk_10026B4D0;
    id v7 = *(void **)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 56);
    double v12 = a2;
    [v7 performBlockAndWait:v9];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100089200(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) matchData]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  *(double *)(a1 + 48)));
  [v2 saveGameData:v4 expirationDate:v3];
}

void sub_100089264(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10008938C;
    void v13[3] = &unk_10026B080;
    id v3 = *(void **)(a1 + 40);
    void v13[4] = *(void *)(a1 + 48);
    id v14 = v2;
    id v15 = *(id *)(a1 + 40);
    [v3 perform:v13];
  }

  if (*(void *)(a1 + 56))
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_10008951C;
    v9[3] = &unk_10026BEF0;
    id v12 = *(id *)(a1 + 56);
    id v7 = *(id *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    id v10 = v7;
    uint64_t v11 = v8;
    [v4 notifyOnQueue:v6 block:v9];
  }

void sub_10008938C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10008947C;
  void v7[3] = &unk_10026C550;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_10008947C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (!v6) {
    [*(id *)(a1 + 32) setError:v5];
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 lastObject]);
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008951C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"result"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_100089800(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_100089A08;
  void v16[3] = &unk_10026BDB0;
  id v17 = *(id *)(a1 + 40);
  id v18 = *(id *)(a1 + 32);
  [v4 performBlockAndWait:v16];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](&OBJC_CLASS___GKBulletinController, "sharedController"));
  [v5 clearTurnBasedBulletinsForMatchID:*(void *)(a1 + 40)];

  id v6 = *(void **)(a1 + 48);
  v20[0] = *(void *)(a1 + 40);
  v19[0] = @"session-id";
  v19[1] = @"player-status-code";
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 64)));
  v20[1] = v7;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  2LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 updateRequestWithPushToken:v8]);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100089B1C;
  void v13[3] = &unk_10026C6B8;
  id v14 = *(id *)(a1 + 32);
  id v15 = v3;
  id v12 = v3;
  [v10 issueRequest:v9 bagKey:@"gk-tb-resign" clientProxy:v11 handler:v13];
}

void sub_100089A08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v11 = (id)objc_claimAutoreleasedReturnValue( +[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:]( &OBJC_CLASS___GKTurnBasedSessionCacheObject,  "sessionWithID:inManagedObjectContext:",  v2,  v3));

  [v11 expire];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:]( &OBJC_CLASS___GKTurnBasedSessionListCacheObject,  "expireListsForSessionID:context:",  v4,  v5);

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v7,  v8));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 turnBasedSessionList]);
  [v10 expire];
}

uint64_t sub_100089B1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100089B48(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_100089CA4;
    v15[3] = &unk_10026B080;
    id v3 = *(void **)(a1 + 40);
    void v15[4] = *(void *)(a1 + 48);
    id v16 = v2;
    id v17 = *(id *)(a1 + 40);
    [v3 perform:v15];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_100089E34;
    void v14[3] = &unk_10026B5E0;
    uint64_t v4 = *(void **)(a1 + 40);
    void v14[4] = *(void *)(a1 + 48);
    [v4 perform:v14];
  }

  if (*(void *)(a1 + 56))
  {
    id v5 = *(void **)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_100089EBC;
    v10[3] = &unk_10026BEF0;
    id v13 = *(id *)(a1 + 56);
    id v8 = *(id *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    id v11 = v8;
    uint64_t v12 = v9;
    [v5 notifyOnQueue:v7 block:v10];
  }

void sub_100089CA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100089D94;
  void v7[3] = &unk_10026C550;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_100089D94(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (!v6) {
    [*(id *)(a1 + 32) setError:v5];
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 lastObject]);
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100089E34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100089EB0;
  void v6[3] = &unk_10026C5A0;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_100089EB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100089EBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"result"]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_10008A498(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] context]);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_10008A7A0;
  void v25[3] = &unk_10026BDB0;
  id v26 = a1[5];
  id v27 = a1[4];
  [v4 performBlockAndWait:v25];

  id v5 = a1[6];
  v29[0] = a1[5];
  v28[0] = @"session-id";
  v28[1] = @"current-turn-number";
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v5 turnNumber]));
  v29[1] = v6;
  void v28[2] = @"completion-message";
  uint64_t v7 = objc_claimAutoreleasedReturnValue([a1[6] message]);
  id v8 = (void *)v7;
  id v9 = &stru_10027B720;
  if (v7) {
    id v9 = (const __CFString *)v7;
  }
  void v29[2] = v9;
  v28[3] = @"localized-completion-message";
  uint64_t v10 = objc_claimAutoreleasedReturnValue([a1[6] localizableMessage]);
  id v11 = (void *)v10;
  uint64_t v12 = &__NSDictionary0__struct;
  if (v10) {
    uint64_t v12 = (void *)v10;
  }
  void v29[3] = v12;
  void v28[4] = @"game-state";
  id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[6] matchData]);
  id v14 = v13;
  if (!v13) {
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](&OBJC_CLASS___NSData, "data"));
  }
  void v29[4] = v14;
  void v28[5] = @"players";
  id v15 = (void *)objc_claimAutoreleasedReturnValue([a1[6] participants]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 _gkFilterWithBlock:&stru_10026FCA0]);
  v28[6] = @"reason";
  void v29[5] = v16;
  v29[6] = @"Game Over";
  id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v29,  v28,  7LL));

  if (!v13) {
  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  }
  id v19 = (void *)objc_claimAutoreleasedReturnValue([a1[7] updateRequestWithPushToken:v17]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([a1[8] clientProxy]);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  void v22[2] = sub_10008A8FC;
  v22[3] = &unk_10026C6B8;
  id v23 = a1[4];
  id v24 = v3;
  id v21 = v3;
  [v18 issueRequest:v19 bagKey:@"gk-tb-complete" clientProxy:v20 handler:v22];
}

void sub_10008A7A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v11 = (id)objc_claimAutoreleasedReturnValue( +[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:]( &OBJC_CLASS___GKTurnBasedSessionCacheObject,  "sessionWithID:inManagedObjectContext:",  v2,  v3));

  [v11 expire];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:]( &OBJC_CLASS___GKTurnBasedSessionListCacheObject,  "expireListsForSessionID:context:",  v4,  v5);

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v7,  v8));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 turnBasedSessionList]);
  [v10 expire];
}

id sub_10008A8B4(id a1, GKTurnBasedParticipantInternal *a2, unint64_t a3)
{
  id v3 = a2;
  else {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[GKTurnBasedParticipantInternal serverRepresentation](v3, "serverRepresentation"));
  }

  return v4;
}

uint64_t sub_10008A8FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008A928(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKTurnBasedService.m",  1297LL,  "-[GKTurnBasedService completeTurnBasedMatch:scores:achievements:handler:]_block_invoke_5"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 transactionGroupWithName:v3]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) error]);
  if (v5)
  {
  }

  else if ([*(id *)(a1 + 56) count])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _requestForTurnBasedSubmitValues:*(void *)(a1 + 56) withServerLabel:@"scores" sessionID:*(void *)(a1 + 32)]);
    if (v6)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 replyQueue]);
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472LL;
      v39[2] = sub_10008AC68;
      void v39[3] = &unk_10026B080;
      id v9 = v6;
      uint64_t v10 = *(void *)(a1 + 40);
      id v11 = *(void **)(a1 + 48);
      id v40 = v9;
      uint64_t v41 = v10;
      id v42 = v11;
      [v4 performOnQueue:v8 block:v39];
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) error]);
  if (v12) {
    goto LABEL_12;
  }
  if ([*(id *)(a1 + 64) count])
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _requestForTurnBasedSubmitValues:*(void *)(a1 + 64) withServerLabel:@"achievement-ids" sessionID:*(void *)(a1 + 32)]);
    if (v12)
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 replyQueue]);
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472LL;
      v35[2] = sub_10008ADBC;
      void v35[3] = &unk_10026B080;
      id v15 = v12;
      uint64_t v16 = *(void *)(a1 + 40);
      id v17 = *(void **)(a1 + 48);
      id v36 = v15;
      uint64_t v37 = v16;
      id v38 = v17;
      [v4 performOnQueue:v14 block:v35];
    }

LABEL_12:
  }

  id v18 = *(void **)(a1 + 48);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472LL;
  v32[2] = sub_10008AF10;
  v32[3] = &unk_10026B080;
  int8x16_t v26 = *(int8x16_t *)(a1 + 32);
  id v19 = (id)v26.i64[0];
  int8x16_t v33 = vextq_s8(v26, v26, 8uLL);
  id v34 = *(id *)(a1 + 48);
  [v18 perform:v32];
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  void v31[2] = sub_10008B0A4;
  v31[3] = &unk_10026B5E0;
  id v20 = *(void **)(a1 + 48);
  void v31[4] = *(void *)(a1 + 40);
  [v20 perform:v31];

LABEL_14:
  if (*(void *)(a1 + 72))
  {
    id v21 = *(void **)(a1 + 48);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 replyQueue]);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_10008B12C;
    void v27[3] = &unk_10026BEF0;
    id v30 = *(id *)(a1 + 72);
    id v24 = *(id *)(a1 + 48);
    uint64_t v25 = *(void *)(a1 + 40);
    id v28 = v24;
    uint64_t v29 = v25;
    [v21 notifyOnQueue:v23 block:v27];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

  if (*(void *)(a1 + 40))
  {
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v8 replyQueue]);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_100118340;
    v32[3] = &unk_10026B030;
    id v34 = *(id *)(a1 + 40);
    int8x16_t v33 = v7;
    [v10 notifyOnQueue:v22 block:v32];
  }
}

    swift_bridgeObjectRelease(a1, v6);
  }

  static GKLog.daemon.getter(v19);
  uint64_t v25 = swift_bridgeObjectRetain_n(v3, 2LL);
  int8x16_t v26 = (void *)Logger.logObject.getter(v25);
  id v27 = static os_log_type_t.info.getter(v26);
  if (!os_log_type_enabled((os_log_t)v26, v27))
  {

    swift_bridgeObjectRelease_n(v3, 2LL);
    uint64_t v32 = *(void (**)(char *, void *))(v0 + 8);
    int8x16_t v33 = v10;
LABEL_18:
    v32(v33, v6);
    goto LABEL_19;
  }

  id v35 = v6;
  id v28 = (uint8_t *)sub_10012CE30(12LL);
  uint64_t v29 = sub_10012CE30(32LL);
  id v36 = v29;
  *(_DWORD *)id v28 = 136315138;
  swift_bridgeObjectRetain(v3);
  id v30 = sub_100135074(v5, (unint64_t)v3, &v36);
  sub_100148550(v30);
  swift_bridgeObjectRelease_n(v3, 3LL);
  sub_10012CE90( (void *)&_mh_execute_header,  (os_log_s *)v26,  v27,  "FriendBulletin handleAcceptedRequestAction invalid actionid %s",  v28);
  sub_10012CE88(v29, v31, (uint64_t)&type metadata for Any + 8);
  sub_10012CE24(v29);
  sub_10012CE24((uint64_t)v28);

  (*(void (**)(char *, id))(v0 + 8))(v10, v35);
LABEL_19:
  sub_10012CE58();
}

    sub_10012CE58();
    return;
  }

  __break(1u);
}

void sub_10008AC68(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10008AD40;
  void v8[3] = &unk_10026C6B8;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-submit-session-scores" clientProxy:v6 handler:v8];
}

void sub_10008AD40(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008ADBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10008AE94;
  void v8[3] = &unk_10026C6B8;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-submit-session-achievements" clientProxy:v6 handler:v8];
}

void sub_10008AE94(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008AF10(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10008B000;
  void v7[3] = &unk_10026C550;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_10008B000(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 lastObject]);
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"result"];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008B0A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10008B120;
  void v6[3] = &unk_10026C5A0;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_10008B120(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008B12C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"result"]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_10008B4AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:]( &OBJC_CLASS___GKTurnBasedSessionCacheObject,  "sessionWithID:inManagedObjectContext:",  v2,  v3));

  [v6 expire];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:]( &OBJC_CLASS___GKTurnBasedSessionListCacheObject,  "expireListsForSessionID:context:",  v4,  v5);
}

void sub_10008B544(uint64_t a1, void *a2)
{
  id v3 = a2;
  v19[0] = @"session-id";
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) matchID]);
  uint64_t v5 = *(void *)(a1 + 40);
  v20[0] = v4;
  v20[1] = v5;
  v19[1] = @"participants";
  void v19[2] = @"message-timeout";
  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSNumber _gkServerTimeInterval:](&OBJC_CLASS___NSNumber, "_gkServerTimeInterval:", *(double *)(a1 + 88)));
  id v7 = (void *)v6;
  id v8 = &__NSDictionary0__struct;
  id v9 = *(void **)(a1 + 56);
  if (*(void *)(a1 + 48)) {
    id v8 = *(void **)(a1 + 48);
  }
  void v20[2] = v6;
  v20[3] = v8;
  void v19[3] = @"notification-message";
  void v19[4] = @"data";
  uint64_t v10 = v9;
  if (!v9) {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](&OBJC_CLASS___NSData, "data"));
  }
  void v20[4] = v10;
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  5LL));
  if (!v9) {

  }
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) updateRequestWithPushToken:v11]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) clientProxy]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_10008B738;
  void v16[3] = &unk_10026C6B8;
  id v17 = *(id *)(a1 + 80);
  id v18 = v3;
  id v15 = v3;
  [v12 issueRequest:v13 bagKey:@"gk-tb-send-request" clientProxy:v14 handler:v16];
}

uint64_t sub_10008B738(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:@"request-id"]);
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"exchangeID"];

  [*(id *)(a1 + 32) setError:v5];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008B7B0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"exchangeID"]);
  id v3 = (void *)v2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_10008B94C;
    void v18[3] = &unk_10026BEC8;
    void v18[4] = *(void *)(a1 + 48);
    id v19 = v4;
    id v20 = *(id *)(a1 + 32);
    id v21 = v3;
    [v6 perform:v18];
  }

  id v7 = *(void **)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_10008BB04;
  void v17[3] = &unk_10026B5E0;
  void v17[4] = *(void *)(a1 + 48);
  [v7 perform:v17];
  if (*(void *)(a1 + 56))
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 replyQueue]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10008BB8C;
    void v13[3] = &unk_10026BEF0;
    id v16 = *(id *)(a1 + 56);
    id v11 = *(id *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 48);
    id v14 = v11;
    uint64_t v15 = v12;
    [v8 notifyOnQueue:v10 block:v13];
  }
}

void sub_10008B94C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v11, 1LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10008BA50;
  void v7[3] = &unk_10026C8B0;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_10008BA50(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 lastObject]);
  [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"exchangeID"];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"match"];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10008BB04(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10008BB80;
  void v6[3] = &unk_10026C5A0;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_10008BB80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008BB8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"exchangeID"]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"match"]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *, void *))(v2 + 16))(v2, v3, v4, v5);

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  [v6 refreshContentsForDataType:14 userInfo:0];
}

void sub_10008BEB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10008C00C;
  void v13[3] = &unk_10026BDB0;
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 32);
  [v4 performBlockAndWait:v13];

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) updateRequestWithPushToken:*(void *)(a1 + 56)]);
  uint64_t v7 = *(void *)(a1 + 64);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) clientProxy]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10008C0A4;
  v10[3] = &unk_10026C6B8;
  id v11 = *(id *)(a1 + 32);
  id v12 = v3;
  id v9 = v3;
  [v5 issueRequest:v6 bagKey:v7 clientProxy:v8 handler:v10];
}

void sub_10008C00C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:]( &OBJC_CLASS___GKTurnBasedSessionCacheObject,  "sessionWithID:inManagedObjectContext:",  v2,  v3));

  [v6 expire];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:]( &OBJC_CLASS___GKTurnBasedSessionListCacheObject,  "expireListsForSessionID:context:",  v4,  v5);
}

uint64_t sub_10008C0A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008C0D0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_10008C240;
    v15[3] = &unk_10026BEC8;
    id v3 = *(void **)(a1 + 40);
    void v15[4] = *(void *)(a1 + 48);
    id v16 = v2;
    id v17 = *(id *)(a1 + 40);
    id v18 = *(id *)(a1 + 56);
    [v3 perform:v15];
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_10008C3F8;
  void v14[3] = &unk_10026B5E0;
  uint64_t v4 = *(void **)(a1 + 40);
  void v14[4] = *(void *)(a1 + 48);
  [v4 perform:v14];
  if (*(void *)(a1 + 64))
  {
    id v5 = *(void **)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_10008C480;
    v10[3] = &unk_10026BEF0;
    id v13 = *(id *)(a1 + 64);
    id v8 = *(id *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    id v11 = v8;
    uint64_t v12 = v9;
    [v5 notifyOnQueue:v7 block:v10];
  }

void sub_10008C240(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v11, 1LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10008C344;
  void v7[3] = &unk_10026C8B0;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v6 = v3;
  [v4 getDetailsForTurnBasedMatchIDs:v5 includeGameData:1 handler:v7];
}

void sub_10008C344(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

    if (!v6) {
      [*(id *)(a1 + 32) setError:v5];
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v8 lastObject]);
  [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"exchangeID"];
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"match"];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10008C3F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10008C474;
  void v6[3] = &unk_10026C5A0;
  id v7 = v3;
  id v5 = v3;
  [v4 getTurnBasedMatchesWithHandler:v6];
}

uint64_t sub_10008C474(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008C480(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"match"]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  [v5 refreshContentsForDataType:14 userInfo:0];
}

void sub_10008CCCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) updateRequestWithPushToken:*(void *)(a1 + 40)]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10008CDB8;
  void v8[3] = &unk_10026C6B8;
  id v9 = *(id *)(a1 + 56);
  id v10 = v3;
  id v7 = v3;
  [v4 issueRequest:v5 bagKey:@"gk-tb-reminder" clientProxy:v6 handler:v8];
}

uint64_t sub_10008CDB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008CDE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10008D1F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) share]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 recordID]);
  id v6 = v5;
  if (v5)
  {
    id v7 = v5;
  }

  else
  {
    id v8 = objc_alloc(&OBJC_CLASS___CKRecordID);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordID]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 recordName]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@",  @"share",  v10));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 zoneID]);
    id v7 = -[CKRecordID initWithRecordName:zoneID:](v8, "initWithRecordName:zoneID:", v11, v13);
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceFromService:]( &OBJC_CLASS___GKMultiplayerMatchService,  "serviceFromService:",  *(void *)(a1 + 40)));
  uint64_t v15 = *(void *)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_10008D398;
  void v17[3] = &unk_10026FCC8;
  id v18 = *(id *)(a1 + 48);
  id v19 = v3;
  id v16 = v3;
  [v14 setupInviteShareWithRecordID:v7 rootRecord:v15 handler:v17];
}

uint64_t sub_10008D398(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 URL]);
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"url"];

  [*(id *)(a1 + 32) setError:v5];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008D408(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"url"]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);
  }

void sub_10008D6A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v37[0] = @"session-id";
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) matchID]);
  v38[0] = v4;
  v37[1] = @"num-reservations";
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 72)));
  v38[1] = v5;
  void v37[2] = @"min-players";
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 80)));
  void v38[2] = v6;
  v37[3] = @"max-players";
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 88)));
  void v38[3] = v7;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v38,  v37,  4LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v8));

  if ([*(id *)(a1 + 40) count])
  {
    uint64_t v25 = v9;
    id v26 = v3;
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [*(id *)(a1 + 40) count]));
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    id v11 = *(id *)(a1 + 40);
    id v12 = [v11 countByEnumeratingWithState:&v30 objects:v36 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v31;
      do
      {
        uint64_t v15 = 0LL;
        do
        {
          if (*(void *)v31 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void *)(*((void *)&v30 + 1) + 8LL * (void)v15);
          id v34 = @"player-id";
          uint64_t v35 = v16;
          id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v35,  &v34,  1LL));
          id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v17));

          uint64_t v19 = *(void *)(a1 + 48);
          if (v19) {
            [v18 setObject:v19 forKeyedSubscript:@"invite-message"];
          }
          [v10 addObject:v18];

          uint64_t v15 = (char *)v15 + 1;
        }

        while (v13 != v15);
        id v13 = [v11 countByEnumeratingWithState:&v30 objects:v36 count:16];
      }

      while (v13);
    }

    id v9 = v25;
    [v25 setObject:v10 forKeyedSubscript:@"invites"];

    id v3 = v26;
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 updateRequestWithPushToken:v9]);
  id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) clientProxy]);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_10008DA1C;
  void v27[3] = &unk_10026C6B8;
  id v28 = *(id *)(a1 + 64);
  id v29 = v3;
  id v24 = v3;
  [v20 issueRequest:v22 bagKey:@"gk-tb-reserve-slots" clientProxy:v23 handler:v27];
}

uint64_t sub_10008DA1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008DA48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_10008DC60(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = v5;
  if ([v5 code] == (id)2)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 userInfo]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordID]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v9]);
  }

  if ([v6 code] == (id)26)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10008DDC0;
    void v13[3] = &unk_10026B480;
    int8x16_t v12 = *(int8x16_t *)(a1 + 32);
    id v10 = (id)v12.i64[0];
    int8x16_t v14 = vextq_s8(v12, v12, 8uLL);
    id v15 = *(id *)(a1 + 48);
    +[GKCloudKitMultiplayerUtils createZoneWithName:handler:]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "createZoneWithName:handler:",  @"com.apple.legacygaming.invites",  v13);
  }

  else
  {
    uint64_t v11 = *(void *)(a1 + 48);
    if (v11) {
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, *(void *)(a1 + 32), v6);
    }
  }
}

id *sub_10008DDC0(id *result, uint64_t a2)
{
  if (!a2) {
    return (id *)[result[4] saveRecord:result[5] withHandler:result[6]];
  }
  return result;
}

void sub_10008E024(_Unwind_Exception *a1)
{
}

void sub_10008E04C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 bundleIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v9 = (id)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v3,  v4));

  [*(id *)(a1 + 40) setObject:v9 forKeyedSubscript:@"game"];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v9 turnBasedSessionList]);
  if ([v5 isValid])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](&OBJC_CLASS___GKBadgeController, "sharedController"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleIdentifier]);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 badgeCountForBundleID:v8 badgeType:2];

    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v5 expired];
  }
}

void sub_10008E178(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10008E25C;
  v11[3] = &unk_10026FD90;
  id v12 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  id v13 = v7;
  uint64_t v14 = v9;
  id v15 = v3;
  uint64_t v16 = v8;
  id v10 = v3;
  [v4 loadTurnBasedMatchesForGame:v5 loadDetails:0 prefetchOnly:1 context:v6 handler:v11];
}

void sub_10008E25C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_10008E330;
  v9[3] = &unk_10026FD68;
  id v10 = *(id *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 48);
  id v11 = v5;
  uint64_t v12 = v7;
  id v13 = v3;
  uint64_t v14 = v6;
  id v8 = v3;
  [v4 performBlockAndWait:v9];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

id sub_10008E330(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  [v2 refreshObject:*(void *)(a1 + 40) mergeChanges:1];

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](&OBJC_CLASS___GKBadgeController, "sharedController"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) clientProxy]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v3 badgeCountForBundleID:v5 badgeType:2];

  return [*(id *)(a1 + 32) setError:*(void *)(a1 + 56)];
}

void sub_10008E3D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, v3, v4);

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientProxy]);
  [v5 refreshContentsForDataType:14 userInfo:0];
}

LABEL_9:
}

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

  return v11;
}

  return v5;
}
}

  swift_bridgeObjectRelease(a1, v5);
  return swift_release_n(a2, 2LL);
}

void sub_10008E700( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10008E764( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10008E7C8(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "getDetailsForTurnBasedMatchIDs:Failed to Load Details for TBG Match ID.Error: %@",  (uint8_t *)&v2,  0xCu);
  sub_10000C760();
}

void sub_10008EEC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, [v2 isAppUnlistedAndDisallowed]);
}

void sub_10008F240(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) clientProxy]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 verifyAuthorized]);

  id v4 = *(id **)(a1 + 32);
  if (v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 clientProxy]);
    uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_10008F330;
    void v7[3] = &unk_10026B030;
    id v9 = *(id *)(a1 + 40);
    id v8 = v3;
    dispatch_async(v6, v7);
  }

  else
  {
    [v4[5] generateIdentityVerificationSignatureWithCompletionHandler:*(void *)(a1 + 40)];
  }
}

uint64_t sub_10008F330(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

void sub_10008F500(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) clientProxy]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 verifyAuthorized]);

  id v4 = *(id **)(a1 + 32);
  if (v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 clientProxy]);
    uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v5 replyQueue]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_10008F5F0;
    void v7[3] = &unk_10026B030;
    id v9 = *(id *)(a1 + 40);
    id v8 = v3;
    dispatch_async(v6, v7);
  }

  else
  {
    [v4[5] fetchItemsForIdentityVerificationSignature:*(void *)(a1 + 40)];
  }
}

uint64_t sub_10008F5F0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

void sub_10008FA04(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKAuthenticationWrapperService.m",  161LL,  "-[GKAuthenticationWrapperService signOutPlayerWithOptOut:handler:]_block_invoke"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v2));

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  7LL,  0LL));
  [v3 setError:v4];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10008FBA0;
  v11[3] = &unk_10026FDE0;
  void v11[4] = *(void *)(a1 + 32);
  char v13 = *(_BYTE *)(a1 + 48);
  id v5 = v3;
  id v12 = v5;
  [v5 perform:v11];
  [v5 wait];
  if (*(void *)(a1 + 40))
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10008FC78;
    block[3] = &unk_10026B030;
    id v10 = *(id *)(a1 + 40);
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

void sub_10008FBA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 40LL);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10008FC48;
  void v8[3] = &unk_10026B2A0;
  id v9 = v4;
  id v10 = v3;
  id v7 = v3;
  [v5 signOutPlayerWithOptOut:v6 handler:v8];
}

uint64_t sub_10008FC48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008FC78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_10008FE8C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000900A8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKAuthenticationWrapperService.m",  209LL,  "-[GKAuthenticationWrapperService authenticateWithService:username:password:altDSID:isGame:usingFastPa th:displayAuthUI:handler:]_block_invoke"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v2));

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  7LL,  0LL));
  [v3 setError:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 appInitState]);
  unsigned int v7 = [v6 isEqual:@"GKAppInitialized"];

  if (v7)
  {
    id v22 = _NSConcreteStackBlock;
    id v8 = sub_10009035C;
    id v9 = &v22;
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 appInitState]);
    if ([v11 isEqual:@"GKAppInitInProgress"])
    {
    }

    else
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
      unsigned int v13 = [v12 setAppInitState:@"GKAppInitInProgress"];

      if (!v13) {
        goto LABEL_8;
      }
    }

    id v21 = _NSConcreteStackBlock;
    id v8 = sub_10009047C;
    id v9 = &v21;
  }

  v9[1] = (void **)3221225472LL;
  void v9[2] = (void **)v8;
  v9[3] = (void **)&unk_10026B788;
  void v9[4] = (void **)*(id *)(a1 + 32);
  void v9[5] = (void **)*(id *)(a1 + 40);
  v9[6] = (void **)*(id *)(a1 + 48);
  v9[7] = (void **)*(id *)(a1 + 56);
  *((_WORD *)v9 + 36) = *(_WORD *)(a1 + 88);
  uint64_t v14 = v3;
  void v9[8] = v14;
  [v14 perform:v9];

LABEL_8:
  [v3 wait];
  if (*(void *)(a1 + 72))
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) clientProxy]);
    uint64_t v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v15 replyQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100090714;
    block[3] = &unk_10026FE30;
    uint64_t v20 = *(void *)(a1 + 80);
    id v19 = *(id *)(a1 + 72);
    id v18 = v3;
    dispatch_async(v16, block);
  }
}

void sub_10009035C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 73);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100090424;
  v11[3] = &unk_10026BE28;
  id v12 = *(id *)(a1 + 64);
  id v13 = v3;
  id v10 = v3;
  [v4 authenticatePlayerWithUsername:v5 password:v6 altDSID:v7 isGame:v8 usingFastPath:v9 handler:v11];
}

uint64_t sub_100090424(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10009047C(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 73);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10009056C;
  void v13[3] = &unk_10026FE08;
  id v14 = v5;
  id v11 = *(id *)(a1 + 64);
  CFAbsoluteTime v17 = Current;
  id v15 = v11;
  id v16 = v3;
  id v12 = v3;
  [v14 authenticatePlayerWithUsername:v6 password:v7 altDSID:v8 isGame:v9 usingFastPath:v10 handler:v13];
}

void sub_10009056C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue([v7 appInitState]);

  if (!v6 && v8 != @"GKAppInitialized")
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers(v9);
    }
    id v11 = (os_log_s *)os_log_GKTrace;
    BOOL v12 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
    if (v12)
    {
      *(_WORD *)id v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "wrapper app-init state not set, returning not-authenticated",  v18,  2u);
    }

    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers(v12);
    }
    id v14 = (os_log_s *)os_log_GKAccount;
    if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_ERROR)) {
      sub_100093FBC(v14);
    }
    id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  6LL,  0LL));
  }

  [*(id *)(a1 + 40) setResult:v5];
  id v15 = [*(id *)(a1 + 40) setError:v6];
  if (!os_log_GKGeneral) {
    id v16 = (id)GKOSLoggers(v15);
  }
  CFAbsoluteTime v17 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_100093F30(v17);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100090714(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_100093FFC(v3);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, void *, void *))(v4 + 16))(v4, v5, v6);
}

uint64_t sub_100091048(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100092C80(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKAuthenticationWrapperService.m",  526LL,  "-[GKAuthenticationWrapperService accountCreated:playerID:authenticationToken:alias:finished:handler:]_block_invoke"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v2));

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  7LL,  0LL));
  [v3 setError:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) clientProxy]);
  [v5 setAppInitState:@"GKAppInitInProgress"];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100092E90;
  void v13[3] = &unk_10026D7A0;
  id v6 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  id v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  char v19 = *(_BYTE *)(a1 + 80);
  id v7 = v3;
  id v18 = v7;
  [v7 perform:v13];
  if (*(void *)(a1 + 72))
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 replyQueue]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_100092FB8;
    v10[3] = &unk_10026B030;
    id v12 = *(id *)(a1 + 72);
    id v11 = v7;
    [v11 notifyOnQueue:v9 block:v10];
  }
}

void sub_100092E90(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 40LL);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 80);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100092F60;
  v11[3] = &unk_10026BE28;
  uint64_t v9 = *(void *)(a1 + 64);
  id v12 = *(id *)(a1 + 72);
  id v13 = v3;
  id v10 = v3;
  [v5 accountCreated:v4 playerID:v6 authenticationToken:v7 alias:v9 finished:v8 handler:v11];
}

uint64_t sub_100092F60(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100092FB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000932C0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKAuthenticationWrapperService.m",  561LL,  "-[GKAuthenticationWrapperService accountCreated:playerID:authenticationToken:alias:altDSID:finished:h andler:]_block_invoke"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v2));

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  7LL,  0LL));
  [v3 setError:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) clientProxy]);
  [v5 setAppInitState:@"GKAppInitInProgress"];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1000934E4;
  void v13[3] = &unk_10026FEA8;
  id v6 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  id v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  id v18 = *(id *)(a1 + 72);
  char v20 = *(_BYTE *)(a1 + 88);
  id v7 = v3;
  id v19 = v7;
  [v7 perform:v13];
  if (*(void *)(a1 + 80))
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 replyQueue]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_100093620;
    v10[3] = &unk_10026B030;
    id v12 = *(id *)(a1 + 80);
    id v11 = v7;
    [v11 notifyOnQueue:v9 block:v10];
  }
}

void sub_1000934E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 40LL);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 88);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000935C8;
  v12[3] = &unk_10026BE28;
  id v13 = *(id *)(a1 + 80);
  id v14 = v3;
  id v11 = v3;
  [v5 accountCreated:v4 playerID:v6 authenticationToken:v7 alias:v8 altDSID:v9 finished:v10 handler:v12];
}

uint64_t sub_1000935C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:a2];
  [*(id *)(a1 + 32) setError:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100093620(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

uint64_t sub_10009389C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100093A74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100093DD0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) clientProxy]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 verifyAuthorized]);

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v4);
    }
    id v6 = (os_log_s *)os_log_GKAccount;
    if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_ERROR)) {
      sub_100094088((uint64_t)v3, v6);
    }
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _gkReplyHandlerInvocation]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientProxy]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 replyQueue]);
    [v7 _gkCallbackWithError:v3 queue:v9];
  }

  else
  {
    [*(id *)(a1 + 40) invokeWithTarget:*(void *)(*(void *)(a1 + 32) + 40)];
  }
}

void sub_100093F1C( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100093F30(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_1000207EC();
  sub_100093F1C((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_100020818();
}

void sub_100093FBC(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "AppInit state is not set, returning not-authenticated error",  v1,  2u);
}

void sub_100093FFC(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_1000207EC();
  sub_100093F1C((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_100020818();
}

void sub_100094088(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "verifyAuthorized failed, we might be authenticating or authorizing: %@",  (uint8_t *)&v2,  0xCu);
}

void sub_1000948C0(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100094974;
  v5[3] = &unk_10026FEF8;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 _gkMapDictionaryWithKeyPath:@"playerID"]);
  uint64_t v3 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = v6;
  [v3 enumerateObjectsUsingBlock:v5];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100094974(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 player]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 playerID]);

  if (!v5)
  {
LABEL_9:
    id v7 = *(id *)(a1 + 40);
    goto LABEL_10;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v5]);
  id v7 = v6;
  if (!v6
    || (uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 displayNameWithOptions:0]),
        id v9 = [v8 length],
        v8,
        !v9))
  {
    uint64_t v10 = (os_log_s *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v11 = (id)GKOSLoggers(v6);
      uint64_t v10 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_1000966D0((uint64_t)v5, (uint64_t)v3, v10);
    }

    goto LABEL_9;
  }

void sub_10009503C(id *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  if (a1[4])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "leaderboardForServerRepresentations:"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:@"results"]);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_100095230;
    void v19[3] = &unk_10026FF20;
    void v19[4] = a1[5];
    id v9 = v7;
    id v20 = v9;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 _gkMapWithBlock:v19]);
    [v9 setScores:v10];

    id v11 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:@"player-score"]);
    if ([v11 count])
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([a1[5] scoreForServerRepresentation:v11 leaderboard:v9]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 internalRepresentation]);
      [v12 setPlayer:v13];

      [v9 setPlayerScore:v12];
    }

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_100095240;
    void v16[3] = &unk_10026B080;
    id v14 = a1[6];
    void v16[4] = a1[5];
    id v17 = v9;
    id v18 = a1[7];
    id v15 = v9;
    [v14 perform:v16];
    [a1[6] setResult:v15];
  }

  v5[2](v5);
}

id sub_100095230(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) scoreForServerRepresentation:a2 leaderboard:*(void *)(a1 + 40)];
}

void sub_100095240(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000952D0;
  void v8[3] = &unk_10026B120;
  id v9 = v3;
  id v7 = v3;
  [v4 updatePlayersForLeaderboard:v5 service:v6 handler:v8];
}

uint64_t sub_1000952D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000952DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000954F4(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[4] serverRequestWithService:a1[5]]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] bagKey]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[5] clientProxy]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100095618;
  v12[3] = &unk_10026E750;
  id v8 = a1[6];
  id v9 = a1[4];
  id v10 = a1[5];
  id v13 = v8;
  id v14 = v9;
  id v15 = v10;
  id v16 = a1[7];
  id v17 = v3;
  id v11 = v3;
  [v4 issueRequest:v5 bagKey:v6 clientProxy:v7 handler:v12];
}

void sub_100095618(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7 = a2;
  [*(id *)(a1 + 32) setError:a3];
  if (v7 && !a3)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_100095710;
    void v13[3] = &unk_10026EA80;
    id v12 = *(void **)(a1 + 32);
    void v13[4] = *(void *)(a1 + 40);
    id v14 = v7;
    id v15 = *(id *)(a1 + 48);
    id v16 = *(id *)(a1 + 56);
    double v18 = a4;
    id v17 = *(id *)(a1 + 32);
    [v12 perform:v13];
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 64) + 16LL))( *(void *)(a1 + 64),  v8,  v9,  v10,  v11);
}

void sub_100095710(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  double v8 = *(double *)(a1 + 72);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1000957D0;
  v10[3] = &unk_10026FF48;
  id v11 = *(id *)(a1 + 64);
  id v12 = v3;
  id v9 = v3;
  [v4 generateScoresFromServerResponse:v5 service:v6 context:v7 timeToLive:v10 handler:v8];
}

uint64_t sub_1000957D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100095800(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

NSString *__cdecl sub_100095AC8(id a1, GKPlayerInternal *a2, unint64_t a3)
{
  return (NSString *)-[GKPlayerInternal playerID](a2, "playerID", a3);
}

void sub_100095C9C(id *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  id v21 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v21 internalRepresentation]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1[4] leaderboardForServerRepresentations:a1[5]]);
  double v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] objectForKeyedSubscript:@"results"]);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_100095F14;
  void v27[3] = &unk_10026FF90;
  void v27[4] = a1[4];
  id v9 = v7;
  id v28 = v9;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 _gkMapWithBlock:v27]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 _gkMapDictionaryWithKeyPath:@"player.playerID"]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([a1[4] playerInternals]);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_100095F24;
  void v25[3] = &unk_10026FFB8;
  id v13 = v11;
  id v26 = v13;
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 _gkFilterWithBlock:v25]);
  [v9 setScores:v14];

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v6 playerID]);
  if (v15)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v6 playerID]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v16]);
    [v9 setPlayerScore:v17];

    double v18 = (void *)objc_claimAutoreleasedReturnValue([v9 playerScore]);
    [v18 setPlayer:v6];
  }

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  void v22[2] = sub_100095F6C;
  v22[3] = &unk_10026B080;
  void v22[4] = a1[4];
  id v23 = v9;
  id v19 = a1[6];
  id v24 = a1[7];
  id v20 = v9;
  [v19 perform:v22];
  [a1[6] setResult:v20];
  v5[2](v5);
}

id sub_100095F14(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) scoreForServerRepresentation:a2 leaderboard:*(void *)(a1 + 40)];
}

id sub_100095F24(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 playerID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  return v4;
}

void sub_100095F6C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100095FFC;
  void v8[3] = &unk_10026B120;
  id v9 = v3;
  id v7 = v3;
  [v4 updatePlayersForLeaderboard:v5 service:v6 handler:v8];
}

uint64_t sub_100095FFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100096008(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100096238(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverRequestWithService:*(void *)(a1 + 40)]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bagKey]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100096348;
  v12[3] = &unk_10026E750;
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(a1 + 40);
  id v13 = v8;
  uint64_t v14 = v9;
  id v15 = v10;
  id v16 = *(id *)(a1 + 64);
  id v17 = v3;
  id v11 = v3;
  [v4 issueRequest:v5 bagKey:v6 clientProxy:v7 handler:v12];
}

void sub_100096348(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  [*(id *)(a1 + 32) setError:v8];
  if (v7 && !v8)
  {
    uint64_t v10 = _NSConcreteStackBlock;
    uint64_t v11 = 3221225472LL;
    id v12 = sub_100096458;
    id v13 = &unk_10026EA80;
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = v7;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 56);
    double v19 = a4;
    id v18 = *(id *)(a1 + 32);
    [v9 perform:&v10];
  }

  objc_msgSend(*(id *)(a1 + 32), "setError:", v8, v10, v11, v12, v13, v14);
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100096458(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  double v8 = *(double *)(a1 + 72);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100096518;
  v10[3] = &unk_10026FF48;
  id v11 = *(id *)(a1 + 64);
  id v12 = v3;
  id v9 = v3;
  [v4 generateScoresFromServerResponse:v5 service:v6 context:v7 timeToLive:v10 handler:v8];
}

uint64_t sub_100096518(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100096548(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000966D0(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "No internal or displayName for playerID:%@ (score:%@).Will be changed to anonymous",  (uint8_t *)&v3,  0x16u);
}

void sub_1000967B8(id a1)
{
  __int128 v6 = *(_OWORD *)off_100270030;
  __int128 v7 = *(_OWORD *)off_100270040;
  double v8 = @"Media";
  *(_OWORD *)keys = *(_OWORD *)off_100270010;
  __int128 v5 = *(_OWORD *)off_100270020;
  v2[0] = xmmword_1001F2F00;
  v2[1] = unk_1001F2F10;
  v2[2] = xmmword_1001F2F20;
  v2[3] = unk_1001F2F30;
  uint64_t v3 = 1024LL;
  qword_1002BB4E0 = (uint64_t)CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)v2,  9LL,  &kCFTypeDictionaryKeyCallBacks,  0LL);
  for (uint64_t i = 8LL; i != -1; --i)
}

void sub_100096E4C(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle _gkBundleIdentifierFromConnection:]( &OBJC_CLASS___NSBundle,  "_gkBundleIdentifierFromConnection:",  a2));
  int v5 = 138412290;
  __int128 v6 = v4;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Granting public Game Center entitlement that was not provided by: %@",  (uint8_t *)&v5,  0xCu);

  sub_100020800();
}

void sub_100096EF8(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle _gkBundleIdentifierFromConnection:]( &OBJC_CLASS___NSBundle,  "_gkBundleIdentifierFromConnection:",  a2));
  int v5 = 138412290;
  __int128 v6 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "ERROR: No Game Center entitlement provided by new connection from: %@",  (uint8_t *)&v5,  0xCu);

  sub_100020800();
}

void sub_100096FA4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "ERROR: The Game Center entitlement is required to use GameKit. To avoid failing App Store Review, follow these instr uctions:\n https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_game-center",  v1,  2u);
}

id sub_1000971A8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@".%@", a2];
}

id sub_100097230(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  __int128 v7 = a2;
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v7, 1LL));
  int v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "resourceIdentifierForKeys:", v4, v7));

  return v5;
}

void sub_1000973B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

unint64_t sub_1000973C8(uint64_t a1, void *a2)
{
  unint64_t result = (unint64_t)[a2 hash];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) ^= result;
  return result;
}

void sub_100097720(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___GKInviteURLManager);
  uint64_t v2 = (void *)qword_1002BB4F0;
  qword_1002BB4F0 = (uint64_t)v1;
}

void sub_100097910( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100097928(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100097938(uint64_t a1)
{
}

void sub_100097940(uint64_t a1)
{
}

void sub_1000979F8(uint64_t a1)
{
}

void sub_100097AA8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___GKCloudKitMultiplayerCache);
  uint64_t v2 = (void *)qword_1002BB500;
  qword_1002BB500 = (uint64_t)v1;
}

void sub_100097D88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100097DB0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 40);
  double v8 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 sessionCache]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 userPlayer]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  __int128 v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  v8[2]();
}

void sub_100098124(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___CKFetchWhitelistedBundleIDsOperation);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKCloudKitMultiplayerUtils cloudKitOperationConfigurationForContainer:]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "cloudKitOperationConfigurationForContainer:",  a1[4]));
  [v4 setConfiguration:v5];

  __int128 v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472LL;
  id v9 = sub_100098228;
  uint64_t v10 = &unk_100270110;
  id v11 = a1[5];
  id v12 = a1[6];
  id v13 = a1[7];
  id v14 = v3;
  id v6 = v3;
  [v4 setFetchWhitelistedBundleIDsCompletionBlock:&v7];
  objc_msgSend(a1[4], "addOperation:", v4, v7, v8, v9, v10);
}

void sub_100098228(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 count])
  {
    [*(id *)(a1 + 40) updateBundleIDs:v5 forContainerName:*(void *)(a1 + 32)];
  }

  else
  {
    id v7 = *(id *)(a1 + 32);
    if ([*(id *)(a1 + 32) rangeOfString:@"iCloud." options:9] != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "substringFromIndex:", objc_msgSend(@"iCloud.", "length")));

      id v7 = (id)v8;
    }

    id v10 = v7;
    uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));

    id v5 = (id)v9;
  }

  [*(id *)(a1 + 48) setResult:v5];
  [*(id *)(a1 + 48) setError:v6];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100098368(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);
  }

void sub_100098750(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 56);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000987FC;
  void v8[3] = &unk_10026B2A0;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v6 handleLegacyShareMetadata:v5 needsAccept:v4 completionHandler:v8];
}

uint64_t sub_1000987FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10009882C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKInviteURLManager sharedManager](&OBJC_CLASS___GKInviteURLManager, "sharedManager"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 acceptingInProgressRecordIDs]);
  [v3 removeObject:*(void *)(a1 + 32)];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }

void sub_100098A30(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  id v6 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Accepting CKShareMetadata for Messages multiplayer invite.",  buf,  2u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rootRecordID]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKInviteURLManager sharedManager](&OBJC_CLASS___GKInviteURLManager, "sharedManager"));
  [v8 setMostRecentInviteShareRootRecordID:v7];

  id v9 = *(void **)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
  id v12 = [v11 maxPlayersP2P];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_100098B90;
  void v14[3] = &unk_10026B2A0;
  id v15 = *(id *)(a1 + 40);
  id v16 = v4;
  id v13 = v4;
  [v9 acceptShareMetadata:v10 retryCount:v12 completionHandler:v14];
}

void sub_100098B90(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009AE90();
    }
    [*(id *)(a1 + 32) setError:v4];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100098C24(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  id v6 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Fetching share record for multiplayer invite to generate initiate bulletin.",  buf,  2u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rootRecordID]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneID]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKCloudKitMultiplayer databaseForZoneID:]( &OBJC_CLASS___GKCloudKitMultiplayer,  "databaseForZoneID:",  v8));

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rootRecordID]);
  id v23 = v10;
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v23, 1LL));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_100098E04;
  void v16[3] = &unk_100270160;
  id v17 = *(id *)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 48);
  id v18 = v12;
  id v19 = v9;
  id v20 = v4;
  uint64_t v21 = v13;
  id v14 = v4;
  id v15 = v9;
  +[GKCloudKitMultiplayerUtils fetchShareRecordsWithRecordIDs:inDatabase:handler:]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "fetchShareRecordsWithRecordIDs:inDatabase:handler:",  v11,  v15,  v16);
}

void sub_100098E04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009AEF0();
    }
    [*(id *)(a1 + 32) setError:v7];
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) rootRecordID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKInviteURLManager sharedManager](&OBJC_CLASS___GKInviteURLManager, "sharedManager"));
    [v10 setMostRecentInviteShareRootRecordID:v9];

    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) rootRecordID]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v11]);

    [*(id *)(a1 + 64) generateAndStoreInviteBulletinForRecord:v12 database:*(void *)(a1 + 48)];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100098F24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_1000990F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10009AF50();
    }
    BOOL v6 = +[GKCloudKitMultiplayerUtils shouldRetryForError:andRetryCount:]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "shouldRetryForError:andRetryCount:",  v4,  *(unsigned int *)(a1 + 56));
    if (v6)
    {
      if (!os_log_GKGeneral) {
        id v7 = (id)GKOSLoggers(v6);
      }
      id v8 = (os_log_s *)os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)(a1 + 32);
        int v23 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)buf = 138412802;
        uint64_t v35 = v22;
        __int16 v36 = 2112;
        uint64_t v37 = v4;
        __int16 v38 = 1024;
        int v39 = v23;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Error accepting CloudKit share metadata %@ due to: %@. Will retry at most %d times.",  buf,  0x1Cu);
      }

      id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 valueForKey:CKErrorRetryAfterKey]);
      [v10 doubleValue];
      double v12 = v11;

      dispatch_time_t v13 = dispatch_time(0LL, 1000000000 * (uint64_t)v12);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100099568;
      block[3] = &unk_1002701B0;
      uint64_t v28 = *(void *)(a1 + 48);
      id v26 = *(id *)(a1 + 32);
      int v29 = *(_DWORD *)(a1 + 56);
      id v27 = *(id *)(a1 + 40);
      dispatch_after(v13, &_dispatch_main_q, block);
    }

    else
    {
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21) {
        (*(void (**)(uint64_t, void *))(v21 + 16))(v21, v4);
      }
    }
  }

  else
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rootRecordID]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 zoneID]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[GKCloudKitMultiplayer databaseForZoneID:]( &OBJC_CLASS___GKCloudKitMultiplayer,  "databaseForZoneID:",  v15));

    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rootRecordID]);
    id v40 = v17;
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v40, 1LL));
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    void v30[2] = sub_100099450;
    void v30[3] = &unk_100270188;
    id v31 = *(id *)(a1 + 32);
    id v32 = v16;
    __int128 v24 = *(_OWORD *)(a1 + 40);
    id v19 = (id)v24;
    __int128 v33 = v24;
    id v20 = v16;
    +[GKCloudKitMultiplayerUtils fetchShareRecordsWithRecordIDs:inDatabase:handler:]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "fetchShareRecordsWithRecordIDs:inDatabase:handler:",  v18,  v20,  v30);
  }
}

void sub_100099450(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009AEF0();
    }
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rootRecordID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKInviteURLManager sharedManager](&OBJC_CLASS___GKInviteURLManager, "sharedManager"));
    [v10 setMostRecentInviteShareRootRecordID:v9];

    double v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rootRecordID]);
    double v12 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v11]);

    [*(id *)(a1 + 56) generateAndStoreInviteBulletinForRecord:v12 database:*(void *)(a1 + 40)];
  }

  uint64_t v13 = *(void *)(a1 + 48);
  if (v13) {
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v7);
  }
}

id sub_100099568(uint64_t a1)
{
  return [*(id *)(a1 + 48) acceptShareMetadata:*(void *)(a1 + 32) retryCount:(*(_DWORD *)(a1 + 56) - 1) completionHandler:*(void *)(a1 + 40)];
}

void sub_10009A5E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v30[0] = objc_opt_class(&OBJC_CLASS___NSDictionary, v4);
  v30[1] = objc_opt_class(&OBJC_CLASS___NSNumber, v5);
  void v30[2] = objc_opt_class(&OBJC_CLASS___NSString, v6);
  void v30[3] = objc_opt_class(&OBJC_CLASS___NSData, v7);
  void v30[4] = objc_opt_class(&OBJC_CLASS___NSArray, v8);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v30, 5LL));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v9));
  double v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"connectionData"]);
  id v27 = 0LL;
  double v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v10,  v11,  &v27));
  id v13 = v27;

  if (v13)
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers(v14);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10009B0F4();
    }
    v3[2](v3);
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v16 = (id)GKOSLoggers(v14);
    }
    id v17 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      int v29 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "Unarchived recordDictionary from invite record: %@",  buf,  0xCu);
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"invite-type"]);
    id v19 = [v18 integerValue];

    if (v19 == (id)1)
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue( +[GKCloudKitMultiplayer packFakeTurnBasedBulletinWithZoneData:]( &OBJC_CLASS___GKCloudKitMultiplayer,  "packFakeTurnBasedBulletinWithZoneData:",  v12));
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
      [v21 processIncomingiMessageInvite:v20];

      v3[2](v3);
    }

    else
    {
      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v22 = *(void *)(a1 + 40);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472LL;
      void v24[2] = sub_10009A8DC;
      v24[3] = &unk_100270200;
      id v25 = v12;
      id v26 = v3;
      +[GKCloudKitMultiplayer searchAndSaveIdentityForRecord:database:completionHandler:]( &OBJC_CLASS___GKCloudKitMultiplayer,  "searchAndSaveIdentityForRecord:database:completionHandler:",  v23,  v22,  v24);
    }
  }
}

void sub_10009A8DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    id v9 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      int v14 = 138412290;
      id v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Updated Messages invite record save completed: %@",  (uint8_t *)&v14,  0xCu);
    }

    uint64_t v10 = (__CFString *)objc_claimAutoreleasedReturnValue( +[GKCloudKitMultiplayer packFakeRealTimeBulletinWithZoneData:]( &OBJC_CLASS___GKCloudKitMultiplayer,  "packFakeRealTimeBulletinWithZoneData:",  *(void *)(a1 + 32)));
    double v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
    -[__CFString processIncomingiMessageInvite:](v11, "processIncomingiMessageInvite:", v10);
    goto LABEL_7;
  }

  if (!v6)
  {
    uint64_t v10 = (__CFString *)objc_claimAutoreleasedReturnValue( +[GCFLocalizedStrings MESSAGE_BASED_INVITEE_ERROR_ALERT_TITLE]( &OBJC_CLASS____TtC20GameCenterFoundation19GCFLocalizedStrings,  "MESSAGE_BASED_INVITEE_ERROR_ALERT_TITLE"));
    double v11 = (__CFString *)objc_claimAutoreleasedReturnValue( +[GCFLocalizedStrings MESSAGE_BASED_INVITEE_NOT_FOUND_ALERT_BODY]( &OBJC_CLASS____TtC20GameCenterFoundation19GCFLocalizedStrings,  "MESSAGE_BASED_INVITEE_NOT_FOUND_ALERT_BODY"));
    id v13 = (__CFString *)objc_claimAutoreleasedReturnValue( +[GCFLocalizedStrings MESSAGE_BASED_INVITEE_ERROR_ALERT_BUTTON]( &OBJC_CLASS____TtC20GameCenterFoundation19GCFLocalizedStrings,  "MESSAGE_BASED_INVITEE_ERROR_ALERT_BUTTON"));
    CFUserNotificationDisplayNotice(0.0, 0LL, 0LL, 0LL, 0LL, v10, v11, v13);

LABEL_7:
    goto LABEL_13;
  }

  if (!os_log_GKGeneral) {
    id v12 = (id)GKOSLoggers(v6);
  }
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
    sub_10009B158();
  }
LABEL_13:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10009AAC0(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[GKInviteURLManager sharedManager](&OBJC_CLASS___GKInviteURLManager, "sharedManager"));
  [v1 setMostRecentInviteShareRootRecordID:0];
}

void sub_10009AB38(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.GameKit.messageServicesQueue", 0LL);
  id v2 = (void *)qword_1002BB510;
  qword_1002BB510 = (uint64_t)v1;
}

void sub_10009AC84(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (v9)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(v9);
    }
    BOOL v12 = os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
    if (v12) {
      sub_10009B220();
    }
    if (!os_log_GKGeneral) {
      id v13 = (id)GKOSLoggers(v12);
    }
    int v14 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10009B1B8(a1, v14, v15, v16, v17, v18, v19, v20);
    }
  }
}

  ;
}

void sub_10009AD80(os_log_t log)
{
  *(_WORD *)dispatch_queue_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "No handler set by callers of primaryPlayerWithHandler.",  v1,  2u);
}

void sub_10009ADC0(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)id v3 = 134218242;
  *(void *)&void v3[4] = a2;
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = a1;
  sub_10000C74C( (void *)&_mh_execute_header,  a2,  a3,  "Failed to fetch the primary iCloud player with timeoutResult: %ld, error: %@",  *(void *)v3,  *(void *)&v3[8],  *(void *)&v3[16]);
  sub_10000C760();
}

void sub_10009AE30()
{
}

void sub_10009AE90()
{
}

void sub_10009AEF0()
{
}

void sub_10009AF50()
{
}

void sub_10009AFB4()
{
}

void sub_10009B014(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a2 recordID]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKInviteURLManager sharedManager](&OBJC_CLASS___GKInviteURLManager, "sharedManager"));
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 mostRecentInviteShareRootRecordID]);
  int v7 = 138412546;
  id v8 = v4;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Could not generate invite bulletin from CKRecord, recordID (%@) does not equal most recent invite share root recordID %@",  (uint8_t *)&v7,  0x16u);
}

void sub_10009B0F4()
{
}

void sub_10009B158()
{
}

void sub_10009B1B8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10009B220()
{
}

uint64_t sub_10009B408(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 64);
  *(void *)(v2 + 64) = 0LL;

  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = 0LL;

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_10009B4F4(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 64LL);
  if (result)
  {
    id result = [result timeIntervalSinceNow];
    BOOL v4 = v3 > 0.0;
  }

  else
  {
    BOOL v4 = 0;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v4;
  return result;
}

void sub_10009B594(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", 3600.0));
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = *(void **)(v3 + 64);
  *(void *)(v3 + 64) = v2;
}

uint64_t sub_10009B688(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10009B698(uint64_t a1)
{
}

void sub_10009B6A0(uint64_t a1)
{
}

void sub_10009B874(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([v7 alias]);
  [*(id *)(a1 + 32) setResult:v6];

  v5[2](v5);
}

void sub_10009BA10(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10009BB0C;
  void v7[3] = &unk_10026B170;
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[GKDispatchGroup dispatchGroupWithName:]( &OBJC_CLASS___GKDispatchGroup,  "dispatchGroupWithName:",  @"updateUserWithHandler"));
  uint64_t v3 = *(void *)(a1 + 32);
  id v8 = v2;
  uint64_t v9 = v3;
  [v2 perform:v7];
  [v2 wait];
  if (*(void *)(a1 + 40))
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_10009BE7C;
    v4[3] = &unk_10026B030;
    id v6 = *(id *)(a1 + 40);
    id v5 = v2;
    dispatch_async(&_dispatch_main_q, v4);
  }
}

void sub_10009BB0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  id v6 = (os_log_s *)os_log_GKAccount;
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG)) {
    sub_10009C410(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_10009BBF4;
  void v17[3] = &unk_100270290;
  id v14 = *(id *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  id v18 = v14;
  uint64_t v19 = v15;
  id v20 = v4;
  id v16 = v4;
  +[GKCloudKitMultiplayerUtils fetchUserRecordIDWithHandler:]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "fetchUserRecordIDWithHandler:",  v17);
}

void sub_10009BBF4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [*(id *)(a1 + 32) setError:a3];
  id v6 = *(id *)(*(void *)(a1 + 40) + 24LL);
  if (v6 == v5)
  {
    unsigned int v7 = 0;
  }

  else
  {
    id v6 = [v6 isEqual:v5];
    unsigned int v7 = v6 ^ 1;
  }

  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  uint64_t v9 = (os_log_s *)os_log_GKAccount;
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG))
  {
    sub_10009C444((uint64_t)v5, a1 + 40, v9);
    if (!v7) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  if (v7)
  {
LABEL_8:
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v5 != 0LL));
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"read"];

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10009BD58;
    v12[3] = &unk_10026FDE0;
    uint64_t v11 = *(void **)(a1 + 32);
    void v12[4] = *(void *)(a1 + 40);
    BOOL v14 = v5 != 0LL;
    id v13 = v5;
    [v11 perform:v12];
  }

void sub_10009BD58(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_10009BDFC;
  void v8[3] = &unk_10026C640;
  char v12 = *(_BYTE *)(a1 + 48);
  BOOL v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  [v4 clearWithHandler:v8];
}

uint64_t sub_10009BDFC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    if (!os_log_GKGeneral) {
      id v2 = (id)GKOSLoggers(a1);
    }
    id v3 = (os_log_s *)os_log_GKAccount;
    if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG)) {
      sub_10009C4D0(a1, v3);
    }
    [*(id *)(a1 + 40) setUserRecordID:*(void *)(a1 + 32)];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10009BE7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10009BFA8(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 40) objectForKeyedSubscript:a1[5]]);
  if (v2)
  {
    id v8 = v2;
    [v2 doubleValue];
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:"));
    [v3 timeIntervalSinceNow];
    if (v4 > 0.0)
    {
      uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[5]]);
      uint64_t v6 = *(void *)(a1[6] + 8LL);
      id v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v5;
    }

    id v2 = v8;
  }
}

id sub_10009C0E0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    [*(id *)(*(void *)(a1 + 40) + 32) setObject:*(void *)(a1 + 32) forKeyedSubscript:*(void *)(a1 + 48)];
    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v2 + 3600.0));
    [*(id *)(*(void *)(a1 + 40) + 40) setObject:v3 forKeyedSubscript:*(void *)(a1 + 48)];
  }

  else
  {
    [*(id *)(*(void *)(a1 + 40) + 32) removeObjectForKey:*(void *)(a1 + 48)];
  }

  return _[*(id *)(a1 + 40) writeBundleIDsToDisk];
}

void sub_10009C3DC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10009C410( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10009C444(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 24LL);
  int v4 = 138412546;
  uint64_t v5 = a1;
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "Fetched user record ID: %@, previous record ID: %@",  (uint8_t *)&v4,  0x16u);
}

void sub_10009C4D0(uint64_t a1, os_log_s *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Setting user record ID to: %@",  (uint8_t *)&v3,  0xCu);
}

void sub_10009CE04( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

id _localPlayerID()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 networkManagerUserOverride]);

  if ([v1 length])
  {
    id v2 = v1;
  }

  else
  {
    int v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pushCredentialForEnvironment:", objc_msgSend(v3, "environment")));
    __int16 v6 = (void *)objc_claimAutoreleasedReturnValue([v5 playerInternal]);

    id v2 = (id)objc_claimAutoreleasedReturnValue([v6 playerID]);
  }

  return v2;
}

void _updateRequestBody(void *a1, uint64_t a2)
{
  id v5 = a1;
  int v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  a2,  100LL,  0LL,  0LL));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v5 allHTTPHeaderFields]);
  if (v4) {
    [v5 setValue:0 forHTTPHeaderField:@"Content-Encoding"];
  }
  [v5 setHTTPBody:v3];
}

void sub_10009D75C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10009D780(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setFairPlaySessionReady:v6 == 0];
  id v8 = [WeakRetained fairPlaySessionReady];
  if ((v8 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers(v8);
    }
    uint64_t v10 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000A8A3C((uint64_t)v6, v10);
    }
  }

  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v5);
  }
}

void sub_10009DE44(id a1)
{
  uint64_t v1 = -[GKNetworkRequestManager initWithInMemoryEntityCache:]( objc_alloc(&OBJC_CLASS___GKNetworkRequestManager),  "initWithInMemoryEntityCache:",  0LL);
  id v2 = (void *)qword_1002BB520;
  qword_1002BB520 = (uint64_t)v1;

  _[(id)qword_1002BB520 setupSessionsAsync];
}

void sub_10009E178(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10009E208;
  block[3] = &unk_10026B670;
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_10009E208(uint64_t a1)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = *(void *)v14;
    *(void *)&__int128 v3 = 138412290LL;
    __int128 v12 = v3;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v1);
        }
        id v7 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)v6);
        if (!os_log_GKGeneral) {
          id v8 = (id)GKOSLoggers(v2);
        }
        id v9 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = v9;
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager dictionaryFromTaskDescription:]( &OBJC_CLASS___GKNetworkRequestManager,  "dictionaryFromTaskDescription:",  v7));
          *(_DWORD *)buf = v12;
          id v18 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager taskDescription: %@",  buf,  0xCu);
        }

        id v2 = objc_msgSend(v7, "cancel", v12, (void)v13);
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v2 = [v1 countByEnumeratingWithState:&v13 objects:v19 count:16];
      id v4 = v2;
    }

    while (v2);
  }
}

void sub_10009E57C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10009E5A0(uint64_t a1)
{
  uint64_t v1 = a1;
  if ([*(id *)(a1 + 32) managerReady])
  {
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id obj = *(id *)(v1 + 40);
    id v2 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v2)
    {
      id v3 = v2;
      uint64_t v4 = *(void *)v24;
      uint64_t v20 = v1;
      uint64_t v21 = *(void *)v24;
      while (2)
      {
        for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v4) {
            objc_enumerationMutation(obj);
          }
          uint64_t v6 = *(void *)(*((void *)&v23 + 1) + 8LL * (void)i);
          id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) existingTasks]);
          id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v6]);

          if (v8)
          {
            id v9 = _localPlayerID();
            uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
            uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v10]);
            __int128 v12 = v11;
            if (v11)
            {
              __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v11 currentTasks]);
              __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 allKeys]);
              if ([v14 count])
              {

LABEL_17:
                *(void *)(*(void *)(*(void *)(v1 + 48) + 8LL) + 24LL) = 1LL;

                goto LABEL_18;
              }

              __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v12 pendingRequests]);
              __int128 v16 = v10;
              id v17 = v3;
              id v18 = (void *)objc_claimAutoreleasedReturnValue([v15 allKeys]);
              id v19 = [v18 count];

              id v3 = v17;
              uint64_t v10 = v16;

              uint64_t v1 = v20;
              uint64_t v4 = v21;

              if (v19) {
                goto LABEL_17;
              }
            }
          }
        }

        id v3 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
        if (v3) {
          continue;
        }
        break;
      }
    }

void sub_10009F1EC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) dictionaryForBagAndPlayer:*(void *)(a1 + 40) createIfNotPresent:0 description:0]);
  uint64_t v3 = objc_opt_respondsToSelector(*(void *)(a1 + 40), "isDuplicateRequest:");
  if ((v3 & 1) != 0)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 currentTasks]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestIdentifier]);
    [v4 setObject:0 forKeyedSubscript:v5];
  }

  else if (v2 && (uint64_t v3 = objc_opt_respondsToSelector(*(void *)(a1 + 40), "removeFromStore:"), (v3 & 1) != 0))
  {
    id v6 = [*(id *)(a1 + 40) removeFromStore:v2];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(v3);
    }
    id v8 = (os_log_s *)os_log_GKDaemon;
    id v6 = (id)os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
    if ((_DWORD)v6)
    {
      id v9 = *(void **)(a1 + 40);
      int v15 = 138412290;
      __int128 v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager error when trying to remove from store: %@",  (uint8_t *)&v15,  0xCu);
    }
  }

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers(v6);
  }
  uint64_t v11 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    __int128 v12 = *(void **)(a1 + 32);
    __int128 v13 = v11;
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v12 existingTasks]);
    int v15 = 138412290;
    __int128 v16 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager handleTaskFinished state after update: %@",  (uint8_t *)&v15,  0xCu);
  }
}

void sub_10009F440(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  uint64_t v3 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager setupSessionsAsync",  buf,  2u);
  }

  [*(id *)(a1 + 32) getFairPlaySession:0];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier:]( &OBJC_CLASS___NSURLSessionConfiguration,  "backgroundSessionConfigurationWithIdentifier:",  @"com.apple.gamed.networking.background"));
  [*(id *)(a1 + 32) setBackgroundConfig:v4];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) backgroundConfig]);
  [v5 setDiscretionary:0];

  id v6 = -[GKNetworkRequestManagerSessionDelegate initWithNetworkManager:]( objc_alloc(&OBJC_CLASS___GKNetworkRequestManagerSessionDelegate),  "initWithNetworkManager:",  *(void *)(a1 + 32));
  [*(id *)(a1 + 32) setBackgroundTasksSessionDelegate:v6];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) backgroundConfig]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) backgroundTasksSessionDelegate]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLSession sessionWithConfiguration:delegate:delegateQueue:]( &OBJC_CLASS___NSURLSession,  "sessionWithConfiguration:delegate:delegateQueue:",  v7,  v8,  v9));
  [*(id *)(a1 + 32) setBackgroundSession:v10];

  [*(id *)(a1 + 32) setCurrentState:1];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) backgroundSession]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10009F61C;
  v12[3] = &unk_100270328;
  void v12[4] = *(void *)(a1 + 32);
  [v11 getAllTasksWithCompletionHandler:v12];
}

void sub_10009F61C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  id v6 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v7 = v6;
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v4 count]));
    *(_DWORD *)buf = 138412290;
    __int128 v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager setupSessionsAsync tasks: %@",  buf,  0xCu);
  }

  if (v4)
  {
    id v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateQueue]);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10009F784;
    v12[3] = &unk_10026BDB0;
    id v10 = v4;
    uint64_t v11 = *(void *)(a1 + 32);
    id v13 = v10;
    uint64_t v14 = v11;
    dispatch_async(v9, v12);
  }
}

void sub_10009F784(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v40 = (uint64_t)[*(id *)(a1 + 32) count];
  if (v40 < 61 || ([*(id *)(v1 + 40) reportedExessiveRequests] & 1) != 0)
  {
    id v2 = 0LL;
    int v3 = 0;
  }

  else
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    int v3 = 1;
  }

  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  id obj = *(id *)(v1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v47 objects:v56 count:16];
  uint64_t v41 = v1;
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v48;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v48 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v47 + 1) + 8LL * (void)v7);
        if (!os_log_GKGeneral) {
          id v9 = (id)GKOSLoggers(v4);
        }
        id v10 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          uint64_t v11 = v10;
          __int128 v12 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager dictionaryFromTaskDescription:]( &OBJC_CLASS___GKNetworkRequestManager,  "dictionaryFromTaskDescription:",  v8));
          *(_DWORD *)buf = 138412290;
          id v55 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager setupSessionsAsync task: %@",  buf,  0xCu);
        }

        id v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager networkRequestFromNsurlTask:]( &OBJC_CLASS___GKNetworkRequestManager,  "networkRequestFromNsurlTask:",  v8));
        uint64_t v14 = v13;
        if (v13)
        {
          [v13 setCurrentlyRunning:1];
          int v15 = *(void **)(v1 + 40);
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v14 taskInfo]);
          [v15 addNetworkRequest:v14 description:v16 clientProxy:0];

          if (v3)
          {
            id v18 = objc_msgSend((id)objc_opt_class(v14, v17), "bagKey");
            id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", v19));
            if (v20)
            {
              uint64_t v21 = v20;
              uint64_t v22 = -[NSNumber initWithInt:]( [NSNumber alloc],  "initWithInt:",  [v20 intValue] + 1);

              -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v22, v19);
              uint64_t v1 = v41;
            }

            else
            {
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  &off_100287A90,  v19);
            }
          }
        }

        else
        {
          if (!os_log_GKGeneral) {
            id v23 = (id)GKOSLoggers(0LL);
          }
          __int128 v24 = (os_log_s *)os_log_GKDaemon;
          if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager got an invalid request, skipping",  buf,  2u);
          }

          [v8 cancel];
        }

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v4 = [obj countByEnumeratingWithState:&v47 objects:v56 count:16];
      id v5 = v4;
    }

    while (v4);
  }

  if (v3)
  {
    __int128 v25 = objc_alloc_init(&OBJC_CLASS___NSString);
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](v2, "allKeys"));
    id v27 = [v26 countByEnumeratingWithState:&v43 objects:v53 count:16];
    if (v27)
    {
      id v28 = v27;
      uint64_t v29 = *(void *)v44;
      do
      {
        __int128 v30 = 0LL;
        id v31 = v25;
        do
        {
          if (*(void *)v44 != v29) {
            objc_enumerationMutation(v26);
          }
          uint64_t v32 = *(void *)(*((void *)&v43 + 1) + 8LL * (void)v30);
          __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", v32));
          __int128 v25 = (NSString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ %@:%@",  v31,  v32,  v33));

          __int128 v30 = (char *)v30 + 1;
          id v31 = v25;
        }

        while (v28 != v30);
        id v28 = [v26 countByEnumeratingWithState:&v43 objects:v53 count:16];
      }

      while (v28);
    }

    v51[0] = @"concurrentCount";
    id v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", v40));
    v51[1] = @"concurrentBreakDown";
    v52[0] = v34;
    v52[1] = v25;
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v52,  v51,  2LL));

    if (!os_log_GKGeneral) {
      id v37 = (id)GKOSLoggers(v36);
    }
    __int16 v38 = (os_log_s *)os_log_GKDaemon;
    uint64_t v1 = v41;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v55 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager sending event %@",  buf,  0xCu);
    }

    int v39 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
    [v39 reportEvent:GKReporterDomainNetworkRequests type:GKNetworkRequestCount payload:v35];

    [*(id *)(v41 + 40) setReportedExessiveRequests:1];
  }

  [*(id *)(v1 + 40) setCurrentState:2];
}

void sub_10009FD34(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", &off_1002886A0));
  id v2 = (void *)qword_1002BB530;
  qword_1002BB530 = v1;
}

void sub_10009FDCC(id a1)
{
  v4[0] = @"gk-get-activity-feed";
  v4[1] = @"gk-get-friends-latest-activity";
  v4[2] = @"gk-challenge-accept";
  v4[3] = @"gk-challenge-compare";
  void v4[4] = @"gk-challenge-create";
  v4[5] = @"gk-challenge-create-invite-code";
  v4[6] = @"gk-challenge-detail";
  v4[7] = @"gk-challenge-get-completed";
  v4[8] = @"gk-challenge-get-completed-summary";
  v4[9] = @"gk-challenge-invite";
  v4[10] = @"gk-challenge-leave";
  v4[11] = @"gk-challenge-summary";
  v4[12] = @"gk-accept-friend-invitation";
  v4[13] = @"gk-cancel-friend-invitation";
  v4[14] = @"gk-ignore-friend-invitation";
  v4[15] = GKBagKeyGetFriendInvitationMailbox;
  v4[16] = @"gk-send-friend-invitation";
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v4, 17LL));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v1));
  int v3 = (void *)qword_1002BB540;
  qword_1002BB540 = v2;
}

void sub_1000A01BC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    unsigned int v2 = +[GKNetworkRequestManager useJSONForBagKey:]( &OBJC_CLASS___GKNetworkRequestManager,  "useJSONForBagKey:",  *(void *)(a1 + 40));
    uint64_t v3 = *(void *)(a1 + 32);
    if (v2) {
      uint64_t v4 = objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v3,  0LL,  0LL));
    }
    else {
      uint64_t v4 = objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v3,  100LL,  0LL,  0LL));
    }
    id v5 = (void *)v4;
  }

  else
  {
    id v5 = 0LL;
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 storeBag]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 APNSRequired]);
  unsigned __int8 v10 = [v9 containsObject:*(void *)(a1 + 40)];

  uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) authenticationToken]);
  __int128 v12 = (void *)v11;
  id v13 = &stru_10027B720;
  if (v11) {
    id v13 = (__CFString *)v11;
  }
  uint64_t v14 = v13;

  if (!-[__CFString length](v14, "length"))
  {
    if (!os_log_GKGeneral) {
      id v15 = (id)GKOSLoggers(0LL);
    }
    __int128 v16 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000A8AB0(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }

  uint64_t v24 = *(void *)(a1 + 40);
  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) stateQueue]);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  void v30[2] = sub_1000A0444;
  void v30[3] = &unk_100270390;
  id v31 = v8;
  id v32 = *(id *)(a1 + 48);
  __int128 v33 = v14;
  id v34 = v7;
  id v35 = *(id *)(a1 + 64);
  id v36 = v5;
  unsigned __int8 v40 = v10;
  id v37 = *(id *)(a1 + 72);
  id v38 = *(id *)(a1 + 40);
  id v39 = *(id *)(a1 + 80);
  id v26 = v5;
  id v27 = v7;
  id v28 = v14;
  id v29 = v8;
  [v29 getURLForKey:v24 queue:v25 handler:v30];
}

void sub_1000A0444(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 playerInternal]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 playerID]);
  BYTE1(v10) = *(_BYTE *)(a1 + 104);
  LOBYTE(v10) = 0;
  id v11 = (id)objc_claimAutoreleasedReturnValue( objc_msgSend( v3,  "requestWithURL:playerID:authToken:pushToken:client:postData:includeUDID:includeAPNS:sapSession:",  v5,  v7,  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  v10,  *(void *)(a1 + 80)));

  if (+[GKNetworkRequestManager useJSONForBagKey:]( &OBJC_CLASS___GKNetworkRequestManager,  "useJSONForBagKey:",  *(void *)(a1 + 88)))
  {
    [v11 setValue:@"application/json" forHTTPHeaderField:@"content-type"];
    [v11 setValue:@"application/json" forHTTPHeaderField:@"Accept"];
  }

  [v11 setCachePolicy:4];
  [v11 setValue:@"ra,fp" forHTTPHeaderField:@"x-gk-client-capabilities"];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) originalBundleIdentifier]);

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) originalBundleIdentifier]);
    [v11 setValue:v9 forHTTPHeaderField:@"x-gk-host-bundle-id"];
  }

  if (+[GKNetworkRequestManager entityIsReleaseStateAwareForBagKey:]( &OBJC_CLASS___GKNetworkRequestManager,  "entityIsReleaseStateAwareForBagKey:",  *(void *)(a1 + 88))
    && [*(id *)(a1 + 64) isDevSigned])
  {
    [v11 setValue:@"prerelease" forHTTPHeaderField:@"x-gk-release-state"];
  }

  +[GKStoreBag addAppOriginHeadersToRequest:clientProxy:]( &OBJC_CLASS___GKStoreBag,  "addAppOriginHeadersToRequest:clientProxy:",  v11,  *(void *)(a1 + 64));
  (*(void (**)(void))(*(void *)(a1 + 96) + 16LL))();
}

void sub_1000A0728(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) handlerQueue]);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_1000A07D8;
    v5[3] = &unk_10026B030;
    id v7 = *(id *)(a1 + 40);
    id v6 = v3;
    dispatch_async(v4, v5);
  }
}

uint64_t sub_1000A07D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000A07E8(uint64_t a1)
{
  id v3 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 40), v2), "bagKey");
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) postBody]);
  if (![*(id *)(a1 + 32) beforeFirstUnlock])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v7 storeBag]);
    uint64_t v13 = *(void *)(a1 + 48);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1000A0A40;
    void v17[3] = &unk_1002703E0;
    id v24 = *(id *)(a1 + 64);
    id v18 = v12;
    id v14 = v4;
    uint64_t v15 = *(void *)(a1 + 32);
    id v19 = v14;
    uint64_t v20 = v15;
    id v21 = v5;
    id v22 = *(id *)(a1 + 48);
    id v23 = *(id *)(a1 + 40);
    id v16 = v12;
    [v16 verifyEligibilityForBagKey:v14 replyQueue:0 client:v13 completion:v17];

LABEL_9:
    goto LABEL_10;
  }

  if (*(void *)(a1 + 56))
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  31LL,  0LL));
    id v7 = (void *)v6;
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    id v9 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void **)(a1 + 32);
      id v11 = v9;
      *(_DWORD *)buf = 67109378;
      unsigned int v26 = [v10 beforeFirstUnlock];
      __int16 v27 = 2112;
      id v28 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager cannot send due to not being initialized beforeFirstUnlock: %d , error: %@",  buf,  0x12u);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    goto LABEL_9;
  }

void sub_1000A0A40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    uint64_t v6 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v7 = v6;
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
      *(_DWORD *)buf = 138412290;
      unsigned int v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager ignoring request to write to network as the request isn't eligible: %@",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    id v9 = *(void **)(a1 + 32);
    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 signatureRequired]);
      unsigned __int8 v11 = [v10 containsObject:*(void *)(a1 + 40)];
    }

    else
    {
      unsigned __int8 v11 = 0;
    }

    uint64_t v13 = *(void *)(a1 + 40);
    __int128 v12 = *(void **)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_1000A0C2C;
    void v18[3] = &unk_1002703B8;
    unsigned __int8 v24 = v11;
    id v19 = *(id *)(a1 + 72);
    id v16 = *(id *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 48);
    id v20 = v16;
    uint64_t v21 = v17;
    id v22 = *(id *)(a1 + 64);
    id v23 = *(id *)(a1 + 80);
    [v12 assembleRequest:v14 bagKey:v13 clientProxy:v15 sapSession:0 handler:v18];
  }
}

void sub_1000A0C2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(_BYTE *)(a1 + 72)) {
    [v3 setValue:@"1" forHTTPHeaderField:@"x-gk-sap-signature"];
  }
  [*(id *)(a1 + 32) setNsurlRequest:v4];
  id v5 = [*(id *)(a1 + 32) setCurrentlyRunning:0];
  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers(v5);
  }
  id v7 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = v7;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v4 loggableHeaders]);
    int v14 = 138412802;
    uint64_t v15 = v4;
    __int16 v16 = 2112;
    uint64_t v17 = v8;
    __int16 v18 = 2112;
    id v19 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager sending background %@ postBody:%@ {\nheaders: %@}",  (uint8_t *)&v14,  0x20u);
  }

  unsigned __int8 v11 = *(void **)(a1 + 48);
  __int128 v12 = *(void **)(a1 + 32);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 taskInfo]);
  [v11 addNetworkRequest:v12 description:v13 clientProxy:*(void *)(a1 + 56)];

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_1000A1180(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] allHeaderFields]);
  id v9 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"Retry-After"]);

  if (v9)
  {
    id v4 = a1[5];
    id v5 = objc_msgSend((id)objc_opt_class(a1[6], v3), "bagKey");
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    [v9 doubleValue];
    objc_msgSend(v4, "setWaitPeriod:waitPeriod:", v6);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[6] bundleID]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKClientProxy clientForBundleID:pid:createIfNecessary:]( &OBJC_CLASS___GKClientProxy,  "clientForBundleID:pid:createIfNecessary:",  v7,  0LL,  1LL));

  [a1[5] writeToNetwork:a1[6] clientProxy:v8 handler:0];
}

id sub_1000A159C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(double))(*(void *)(a1 + 80) + 16LL))(0.0);
  }
  else {
    return _[*(id *)(a1 + 32) _issueRequestForPlayer:*(void *)(a1 + 40) bagKey:*(void *)(a1 + 48) clientProxy:*(void *)(a1 + 56) locale:*(void *)(a1 + 64) playerCredential:*(void *)(a1 + 72) handler:*(void *)(a1 + 80)];
  }
}

void sub_1000A1710(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) canSafelyIssueRequest:*(void *)(a1 + 40)]);
  if (v4)
  {
    (*(void (**)(double))(*(void *)(a1 + 80) + 16LL))(0.0);
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 storeBag]);
    id v7 = v6;
    __int16 v18 = v5;
    if (v6
      && (uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 signatureRequired]),
          unsigned int v9 = [v8 containsObject:*(void *)(a1 + 40)],
          v8,
          v9))
    {
      id v10 = v3;
    }

    else
    {
      id v10 = 0LL;
    }

    unsigned __int8 v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_1000A18C0;
    void v19[3] = &unk_100270498;
    id v25 = *(id *)(a1 + 80);
    id v16 = *(id *)(a1 + 72);
    uint64_t v17 = *(void *)(a1 + 32);
    id v20 = v16;
    uint64_t v21 = v17;
    id v22 = *(id *)(a1 + 56);
    id v23 = *(id *)(a1 + 40);
    id v24 = *(id *)(a1 + 48);
    [v11 assembleRequestForPlayer:v13 bagKey:v12 clientProxy:v14 sapSession:v10 playerCredential:v15 handler:v19];
  }
}

void sub_1000A18C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (*(void *)(a1 + 32))
    {
      if (!os_log_GKGeneral) {
        id v5 = (id)GKOSLoggers(v3);
      }
      id v6 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        id v7 = *(void **)(a1 + 32);
        uint64_t v8 = v6;
        unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v7 localeIdentifier]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 URL]);
        *(_DWORD *)buf = 138412546;
        __int128 v30 = v9;
        __int16 v31 = 2112;
        id v32 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Overriding locale to %@ for request to %@",  buf,  0x16u);
      }

      [v4 setLocale:*(void *)(a1 + 32) isOverridingUsersPreferredLanguage:1];
    }

    unsigned __int8 v11 = objc_alloc(&OBJC_CLASS___NSURLSessionConfiguration);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) inProcessConfig]);
    id v13 = -[NSURLSessionConfiguration _initWithConfiguration:](v11, "_initWithConfiguration:", v12);

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) originalBundleIdentifier]);
    objc_msgSend(v13, "set_sourceApplicationBundleIdentifier:", v14);

    +[GKStoreBag addAuthHeadersToRequest:](&OBJC_CLASS___GKStoreBag, "addAuthHeadersToRequest:", v4);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) inProcessSession]);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_1000A1C3C;
    void v26[3] = &unk_100270470;
    void v26[4] = *(void *)(a1 + 40);
    id v27 = *(id *)(a1 + 56);
    id v28 = *(id *)(a1 + 72);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 dataTaskWithRequest:v4 completionHandler:v26]);

    if (!os_log_GKGeneral) {
      id v18 = (id)GKOSLoggers(v17);
    }
    id v19 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      id v20 = v19;
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v4 URL]);
      uint64_t v22 = *(void *)(a1 + 64);
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v4 loggableHeaders]);
      *(_DWORD *)buf = 138413314;
      __int128 v30 = v16;
      __int16 v31 = 2112;
      id v32 = v21;
      __int16 v33 = 2112;
      uint64_t v34 = v22;
      __int16 v35 = 2112;
      id v36 = v4;
      __int16 v37 = 2112;
      id v38 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager sending in process task: %@ \nREQUEST:%@ postBody:%@ request: %@ {\nheaders: %@}",  buf,  0x34u);
    }

    [v16 _adoptEffectiveConfiguration:v13];
    [v16 resume];
  }

  else
  {
    uint64_t v24 = *(void *)(a1 + 72);
    NSErrorUserInfoKey v39 = NSLocalizedFailureReasonErrorKey;
    unsigned __int8 v40 = @"Could not create network task";
    id v13 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v40,  &v39,  1LL));
    id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 3LL, v13));
    (*(void (**)(uint64_t, void, void *, double))(v24 + 16))(v24, 0LL, v25, 0.0);
  }
}

void sub_1000A1C3C(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v8;
  [v10 _maxAge];
  double v12 = v11;
  if ([v10 statusCode] == (id)520)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 allHeaderFields]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:@"Retry-After"]);

    if (v14)
    {
      uint64_t v15 = (void *)a1[4];
      uint64_t v16 = a1[5];
      [v14 doubleValue];
      objc_msgSend(v15, "setWaitPeriod:waitPeriod:", v16);
    }

    NSErrorUserInfoKey v47 = NSLocalizedFailureReasonErrorKey;
    __int128 v48 = @"Server returned 520 with a wait period";
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v48,  &v47,  1LL));
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 3LL, v17));

    goto LABEL_5;
  }

  if (v9)
  {
    id v19 = (id)objc_claimAutoreleasedReturnValue([v9 serializableError]);
    id v18 = v19;
    goto LABEL_8;
  }

  if (!v7)
  {
    NSErrorUserInfoKey v45 = NSLocalizedFailureReasonErrorKey;
    __int128 v46 = @"Empty server response";
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v46,  &v45,  1LL));
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 3LL, v14));
LABEL_5:

LABEL_8:
    id v20 = 0LL;
    goto LABEL_9;
  }

  id v29 = (void *)objc_claimAutoreleasedReturnValue([v10 allHeaderFields]);
  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKeyedSubscript:@"Content-Type"]);
  unsigned int v31 = [v30 isEqualToString:@"application/json"];

  if (v31)
  {
    uint64_t v34 = 0LL;
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary _gkDictionaryWithServerDataJson:error:]( &OBJC_CLASS___NSDictionary,  "_gkDictionaryWithServerDataJson:error:",  v7,  &v34));
    id v32 = v34;
  }

  else
  {
    __int16 v33 = 0LL;
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary _gkDictionaryWithServerData:error:]( &OBJC_CLASS___NSDictionary,  "_gkDictionaryWithServerData:error:",  v7,  &v33));
    id v32 = v33;
  }

  id v19 = v32;
  id v18 = v19;
LABEL_9:
  if (!os_log_GKGeneral) {
    id v21 = (id)GKOSLoggers(v19);
  }
  uint64_t v22 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v23 = v22;
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v10 URL]);
    id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v10 statusCode]));
    unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue([v10 allHeaderFields]);
    *(_DWORD *)buf = 138413314;
    id v36 = v24;
    __int16 v37 = 2112;
    id v38 = v25;
    __int16 v39 = 2112;
    id v40 = v9;
    __int16 v41 = 2112;
    id v42 = v26;
    __int16 v43 = 2112;
    __int128 v44 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager in process task completed:%@ code:%@ error: %@ headers: %@ plist: %@",  buf,  0x34u);
  }

  id v27 = (void *)objc_claimAutoreleasedReturnValue([v18 underlyingErrors]);
  unsigned int v28 = [v27 _gkContainsObjectPassingTest:&stru_100270448];

  if (v28)
  {

    id v18 = 0LL;
  }

  (*(void (**)(double))(a1[6] + 16LL))(v12);
}

BOOL sub_1000A1FF0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  BOOL v3 = (id)-[NSError code](v2, "code") == (id)5044 || (id)-[NSError code](v2, "code") == (id)5043;

  return v3;
}

void sub_1000A2518(uint64_t a1)
{
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateQueue]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000A25A0;
  v5[3] = &unk_10026BDB0;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  dispatch_async(v2, v5);
}

void sub_1000A25A0(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager issuing pending requests",  buf,  2u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"lastPathComponent CONTAINS %@",  *(void *)(a1 + 32)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pendingLocation]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v5));

  if (v6)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    id v9 = (void *)objc_claimAutoreleasedReturnValue( [v8 contentsOfDirectoryAtURL:v6 includingPropertiesForKeys:&__NSArray0__struct options:0 error:0]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 filteredArrayUsingPredicate:v4]);

    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    id v11 = v10;
    id v12 = [v11 countByEnumeratingWithState:&v36 objects:v42 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v34 = v6;
      __int16 v35 = v4;
      uint64_t v14 = 0LL;
      uint64_t v15 = *(void *)v37;
      do
      {
        uint64_t v16 = 0LL;
        uint64_t v17 = v14;
        do
        {
          if (*(void *)v37 != v15) {
            objc_enumerationMutation(v11);
          }
          id v18 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)v16);
          if (!os_log_GKGeneral) {
            id v19 = (id)GKOSLoggers(v12);
          }
          id v20 = (os_log_s *)os_log_GKDaemon;
          if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            __int16 v41 = v18;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Issueing: %@", buf, 0xCu);
          }

          id v21 = *(void **)(a1 + 40);
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v18 lastPathComponent]);
          id v23 = (void *)objc_claimAutoreleasedReturnValue([v21 taskFromIdentifier:v22]);

          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 bundleID]);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[GKClientProxy clientForBundleID:pid:createIfNecessary:]( &OBJC_CLASS___GKClientProxy,  "clientForBundleID:pid:createIfNecessary:",  v24,  0LL,  1LL));

          [v23 setIssueRequests:1];
          [*(id *)(a1 + 40) writeToNetwork:v23 clientProxy:v14 handler:0];

          uint64_t v16 = (char *)v16 + 1;
          uint64_t v17 = v14;
        }

        while (v13 != v16);
        id v12 = [v11 countByEnumeratingWithState:&v36 objects:v42 count:16];
        id v13 = v12;
      }

      while (v12);

      id v6 = v34;
      uint64_t v4 = v35;
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v25 = (id)GKOSLoggers(v7);
    }
    unsigned int v26 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000A8AE4(v26, v27, v28, v29, v30, v31, v32, v33);
    }
  }
}

id networkRequestIdentifier(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 bundleID]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 playerID]);
  id v5 = (void *)objc_opt_class(v1, v4);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bagKey]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@+%@+%@",  v2,  v3,  v6));

  return v7;
}

void updateCoalescingState(int a1, void *a2, void *a3)
{
  id v8 = a3;
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 requestIdentifier]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 alreadyCoalescingNetworkRequests]);

  if (a1) {
    [v7 setObject:v8 forKeyedSubscript:v6];
  }
  else {
    [v7 removeObjectForKey:v6];
  }
}

BOOL alreadyCoalescing(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 alreadyCoalescingNetworkRequests]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v3]);

  return v5 != 0LL;
}

void handleStandardRequest(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 requestIdentifier]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v8 currentTasks]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v11]);

  unsigned __int8 v15 = [v12 managerReady];
  id v16 = [v7 currentlyRunning];
  if (!(_DWORD)v16)
  {
    id v69 = v10;
    if ((objc_opt_respondsToSelector(v7, "mergeRequestData:") & 1) != 0)
    {
      uint64_t v21 = objc_claimAutoreleasedReturnValue([v12 contentsOfPendingStore:v11]);
      uint64_t v22 = (void *)v21;
      if (v21)
      {
        if (!os_log_GKGeneral) {
          id v23 = (id)GKOSLoggers(v21);
        }
        uint64_t v24 = (os_log_s *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          __int128 v71 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager adding in pending data: %@",  buf,  0xCu);
        }

        id v25 = (void *)objc_claimAutoreleasedReturnValue([v12 taskFromIdentifier:v11]);
        [v7 mergeRequestData:v25];
      }
    }

    id v26 = objc_msgSend((id)objc_opt_class(v7, v20), "bagKey");
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v12 canSafelyIssueRequest:v27]);

    if (v19) {
      unsigned __int8 v29 = 0;
    }
    else {
      unsigned __int8 v29 = v15;
    }
    if ((v29 & 1) == 0)
    {
      if (!os_log_GKGeneral) {
        id v34 = (id)GKOSLoggers(v28);
      }
      __int16 v35 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        __int128 v36 = v35;
        __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v7 nsurlTask]);
        *(_DWORD *)buf = 138412802;
        __int128 v71 = v11;
        __int16 v72 = 2112;
        id v73 = v37;
        __int16 v74 = 2112;
        __int128 v75 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager cannot issue request, writing to pending: %@ : %@ %@",  buf,  0x20u);
      }

      id v33 = (id)objc_claimAutoreleasedReturnValue([v7 taskInfo]);
      __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v7 requestIdentifier]);
      [v12 writeToPendingStore:v33 fileName:v38];

      goto LABEL_54;
    }

    id v68 = v9;
    if (v14)
    {
      id v30 = [v7 isDuplicateRequest:v14];
      if ((v30 & 1) != 0)
      {
        if (!os_log_GKGeneral) {
          id v31 = (id)GKOSLoggers(v30);
        }
        uint64_t v32 = (os_log_s *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          __int128 v71 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager duplicate request skipping: %@",  buf,  0xCu);
        }

        id v33 = (id)objc_claimAutoreleasedReturnValue([v7 requestIdentifier]);
        [v12 cleanUpPendingStore:v33];
LABEL_54:

        id v10 = v69;
        goto LABEL_55;
      }

      if (!os_log_GKGeneral) {
        id v39 = (id)GKOSLoggers(v30);
      }
      id v40 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        __int128 v71 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager non duplicate value for same request, reissuing: %@",  buf,  0xCu);
      }

      __int16 v41 = (void *)objc_claimAutoreleasedReturnValue([v14 nsurlTask]);
      [v41 cancel];

      uint64_t v42 = objc_opt_respondsToSelector(v7, "mergeRequestData:");
      if ((v42 & 1) != 0)
      {
        if (!os_log_GKGeneral) {
          id v43 = (id)GKOSLoggers(v42);
        }
        __int128 v44 = (os_log_s *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          __int128 v71 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager non duplicate requires merge of data: %@",  buf,  0xCu);
        }

        [v7 mergeRequestData:v14];
      }
    }

    NSErrorUserInfoKey v45 = (void *)objc_claimAutoreleasedReturnValue([v8 currentTasks]);
    [v45 setObject:v7 forKeyedSubscript:v11];

    __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v7 requestIdentifier]);
    [v12 cleanUpPendingStore:v46];

    if (!os_log_GKGeneral) {
      id v48 = (id)GKOSLoggers(v47);
    }
    __int128 v49 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      __int128 v50 = v49;
      uint64_t v52 = (void *)objc_opt_class(v7, v51);
      id v67 = v52;
      __int128 v53 = (void *)objc_claimAutoreleasedReturnValue([v7 nsurlRequest]);
      __int128 v54 = (void *)objc_claimAutoreleasedReturnValue([v53 allHTTPHeaderFields]);
      *(_DWORD *)buf = 138412802;
      __int128 v71 = v52;
      __int16 v72 = 2112;
      id v73 = v7;
      __int16 v74 = 2112;
      __int128 v75 = v54;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "%@ issuing request: %@ headers: %@", buf, 0x20u);
    }

    id v55 = (void *)objc_claimAutoreleasedReturnValue([v7 nsurlRequest]);
    id v56 = (void *)objc_claimAutoreleasedReturnValue([v7 taskInfo]);
    uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager taskWithRequest:description:session:]( &OBJC_CLASS___GKNetworkRequestManager,  "taskWithRequest:description:session:",  v55,  v56,  v68));
    [v7 setNsurlTask:v57];

    id v58 = (void *)objc_claimAutoreleasedReturnValue([v7 nsurlTask]);
    if (v58)
    {
      uint64_t v60 = objc_alloc(&OBJC_CLASS___NSURLSessionConfiguration);
      id v61 = (void *)objc_claimAutoreleasedReturnValue([v12 backgroundConfig]);
      id v33 = -[NSURLSessionConfiguration _initWithConfiguration:](v60, "_initWithConfiguration:", v61);

      id v62 = (void *)objc_claimAutoreleasedReturnValue([v69 originalBundleIdentifier]);
      objc_msgSend(v33, "set_sourceApplicationBundleIdentifier:", v62);

      id v63 = (void *)objc_claimAutoreleasedReturnValue([v7 nsurlTask]);
      [v63 _adoptEffectiveConfiguration:v33];

      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v7 nsurlTask]);
      [v64 resume];
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v65 = (id)GKOSLoggers(v59);
      }
      uint64_t v66 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        __int128 v71 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager cannot issue request as it is nil, writing to pending: %@",  buf,  0xCu);
      }

      id v33 = (id)objc_claimAutoreleasedReturnValue([v7 taskInfo]);
      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v7 requestIdentifier]);
      [v12 writeToPendingStore:v33 fileName:v64];
    }

    id v9 = v68;
    goto LABEL_54;
  }

  if (v14)
  {
    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers(v16);
    }
    id v18 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v71 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager possible duplicate tasks when syncing nsurlsession: %@",  buf,  0xCu);
    }
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue([v8 currentTasks]);
  [v19 setObject:v7 forKeyedSubscript:v11];
LABEL_55:
}

void handleCoalescingRequest(void *a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  id v8 = a1;
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary bundleID](v8, "bundleID"));

  if (v12) {
    uint64_t v13 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary bundleID](v8, "bundleID"));
  }
  else {
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v9 bundleIdentifier]);
  }
  uint64_t v14 = (NSMutableDictionary *)v13;
  if (v13)
  {
    id v240 = v11;
    v248 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
    unsigned int v239 = [v248 managerReady];
    unsigned __int8 v15 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 pendingRequests]);
    id v17 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:v14]);

    v244 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary requestIdentifier](v8, "requestIdentifier"));
    id v18 = v10;
    BOOL v19 = alreadyCoalescing(v9, v244);
    uint64_t v20 = v17;
    unint64_t v243 = (unint64_t)-[NSMutableDictionary numberOfRequests](v17, "numberOfRequests");
    v245 = v18;
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v18 currentTasks]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:v14]);

    if (!os_log_GKGeneral) {
      id v24 = (id)GKOSLoggers(v23);
    }
    id v25 = (void *)os_log_GKDaemon;
    id v27 = v9;
    v246 = v22;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = v25;
      id v30 = (void *)objc_opt_class(v8, v29);
      id v31 = v30;
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  -[NSMutableDictionary currentlyRunning](v8, "currentlyRunning")));
      *(_DWORD *)buf = 138414082;
      id v261 = v30;
      uint64_t v22 = v246;
      __int16 v262 = 2112;
      v263 = v14;
      __int16 v264 = 2048;
      unint64_t v265 = a4;
      __int16 v266 = 2048;
      *(void *)v267 = v243;
      *(_WORD *)&v267[8] = 1024;
      *(_DWORD *)&v267[10] = v239;
      __int16 v268 = 1024;
      BOOL v269 = v19;
      __int16 v270 = 2112;
      v271 = v8;
      __int16 v272 = 2112;
      v273 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "%@ bundleID: %@ previousPending:%ld pending:%ld managerReady: %d clientProxyFlag:%d request:%@ currentlyRunning:%@",  buf,  0x4Au);

      id v9 = v27;
    }

    if (!v20)
    {
      id v34 = (void *)objc_claimAutoreleasedReturnValue([v248 contentsOfPendingStore:v244]);
      if (v34)
      {
        __int16 v35 = (NSMutableDictionary *)objc_alloc_init((Class)objc_opt_class(v8, v33));
        -[NSMutableDictionary updateWithTaskInfo:](v35, "updateWithTaskInfo:", v34);
        __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v245 pendingRequests]);
        uint64_t v20 = v35;
        [v36 setObject:v35 forKeyedSubscript:v14];

        if (!os_log_GKGeneral) {
          id v38 = (id)GKOSLoggers(v37);
        }
        id v39 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          id v40 = v39;
          uint64_t v42 = (void *)objc_opt_class(v8, v41);
          *(_DWORD *)buf = 138412802;
          id v261 = v42;
          __int16 v262 = 2112;
          v263 = v14;
          __int16 v264 = 2112;
          unint64_t v265 = (unint64_t)v20;
          id v43 = v42;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "%@ bundleID: %@ using file system cache: %@",  buf,  0x20u);
        }
      }

      else
      {
        uint64_t v20 = 0LL;
      }

      id v9 = v27;
    }

    id v49 = objc_msgSend((id)objc_opt_class(v8, v26), "bagKey");
    __int128 v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
    v242 = (void *)objc_claimAutoreleasedReturnValue([v248 canSafelyIssueRequest:v50]);

    id v51 = -[NSMutableDictionary currentlyRunning](v8, "currentlyRunning");
    if ((_DWORD)v51)
    {
      if (!v22)
      {
        id v10 = v245;
        if (!os_log_GKGeneral) {
          id v74 = (id)GKOSLoggers(v51);
        }
        __int128 v75 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          __int128 v76 = v75;
          __int128 v78 = (void *)objc_opt_class(v8, v77);
          id v79 = v78;
          __int128 v80 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary nsurlTask](v8, "nsurlTask"));
          __int128 v81 = (void *)objc_claimAutoreleasedReturnValue([v80 taskDescription]);
          *(_DWORD *)buf = 138413314;
          id v261 = v78;
          __int16 v262 = 2048;
          v263 = (NSMutableDictionary *)a4;
          __int16 v264 = 2048;
          unint64_t v265 = v243;
          __int16 v266 = 1024;
          *(_DWORD *)v267 = v239;
          *(_WORD *)&v267[4] = 2112;
          *(void *)&v267[6] = v81;
          _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_INFO,  "%@ already running with no other current, update state: previousPending:%ld pending:%ld managerReady: %d request:%@",  buf,  0x30u);

          id v9 = v27;
          id v10 = v245;
        }

        __int128 v82 = (void *)objc_claimAutoreleasedReturnValue([v10 currentTasks]);
        [v82 setObject:v8 forKeyedSubscript:v14];

        goto LABEL_42;
      }

      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v22 requestData]);
      __int128 v53 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary requestData](v8, "requestData"));
      unsigned int v54 = [v52 isEqualToDictionary:v53];

      id v10 = v245;
      if (v54)
      {
        if (!os_log_GKGeneral) {
          id v56 = (id)GKOSLoggers(v55);
        }
        uint64_t v57 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          id v58 = v57;
          uint64_t v60 = (void *)objc_opt_class(v8, v59);
          id v61 = v60;
          id v62 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary nsurlTask](v8, "nsurlTask"));
          id v63 = (void *)objc_claimAutoreleasedReturnValue([v62 taskDescription]);
          *(_DWORD *)buf = 138413314;
          id v261 = v60;
          __int16 v262 = 2048;
          v263 = (NSMutableDictionary *)a4;
          __int16 v264 = 2048;
          unint64_t v265 = v243;
          __int16 v266 = 1024;
          *(_DWORD *)v267 = v239;
          *(_WORD *)&v267[4] = 2112;
          *(void *)&v267[6] = v63;
          _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_INFO,  "%@ already running this task, doing nothing: previousPending:%ld pending:%ld managerReady: %d request:%@",  buf,  0x30u);

          id v9 = v27;
          id v10 = v245;
        }

LABEL_42:
        id v11 = v240;
        id v67 = v20;
LABEL_132:

        goto LABEL_133;
      }

      if (!os_log_GKGeneral) {
        id v83 = (id)GKOSLoggers(v55);
      }
      __int128 v84 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        __int128 v85 = v84;
        __int128 v87 = (void *)objc_opt_class(v8, v86);
        id v88 = v87;
        id v89 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary nsurlTask](v8, "nsurlTask"));
        v90 = (void *)objc_claimAutoreleasedReturnValue([v89 taskDescription]);
        *(_DWORD *)buf = 138413314;
        id v261 = v87;
        __int16 v262 = 2048;
        v263 = (NSMutableDictionary *)a4;
        __int16 v264 = 2048;
        unint64_t v265 = v243;
        __int16 v266 = 1024;
        *(_DWORD *)v267 = v239;
        *(_WORD *)&v267[4] = 2112;
        *(void *)&v267[6] = v90;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_INFO,  "%@ currently running two tasks, cancel and issue again: previousPending:%ld pending:%ld managerReady: %d request:%@",  buf,  0x30u);

        id v9 = v27;
      }

      v91 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary nsurlTask](v8, "nsurlTask"));
      [v91 cancel];

      id v11 = v240;
      v237 = v20;
      goto LABEL_48;
    }

    id v64 = -[NSMutableDictionary coalescingAgent](v8, "coalescingAgent");
    if ((_DWORD)v64 && v243 != a4)
    {
      int v65 = 0;
      LODWORD(v66) = 1;
      id v11 = v240;
      id v67 = v20;
      goto LABEL_100;
    }

    id v11 = v240;
    if (v242)
    {
      id v67 = v20;
      if (!os_log_GKGeneral) {
        id v68 = (id)GKOSLoggers(v64);
      }
      id v69 = (void *)os_log_GKDaemon;
      int v65 = 1;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v70 = v69;
        __int16 v72 = (void *)objc_opt_class(v8, v71);
        *(_DWORD *)buf = 138412290;
        id v261 = v72;
        id v73 = v72;
        _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_INFO,  "%@ do not retry wait period exists, adding to pending",  buf,  0xCu);

        id v67 = v20;
      }

      LODWORD(v66) = 0;
LABEL_100:
      id v174 = -[NSMutableDictionary coalescingAgent](v8, "coalescingAgent", v237);
      if ((_DWORD)v174)
      {
        if (!os_log_GKGeneral) {
          id v175 = (id)GKOSLoggers(v174);
        }
        v176 = (void *)os_log_GKDaemon;
        uint64_t v177 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
        id v10 = v245;
        if ((_DWORD)v177)
        {
          char v178 = (char)v66;
          uint64_t v66 = v15;
          v179 = v67;
          v180 = v176;
          v182 = (void *)objc_opt_class(v8, v181);
          *(_DWORD *)buf = 138412546;
          id v261 = v182;
          __int16 v262 = 2112;
          v263 = v8;
          id v183 = v182;
          _os_log_impl( (void *)&_mh_execute_header,  v180,  OS_LOG_TYPE_INFO,  "%@ we have already added in the coalescingAgent's data, do nothing: %@",  buf,  0x16u);

          id v67 = v179;
          unsigned __int8 v15 = v66;
          LOBYTE(v66) = v178;
        }
      }

      else
      {
        if (!v65)
        {
          if (!os_log_GKGeneral) {
            id v196 = (id)GKOSLoggers(v174);
          }
          v197 = (void *)os_log_GKDaemon;
          id v10 = v245;
          if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO)) {
            goto LABEL_132;
          }
          v143 = v15;
          v144 = v67;
          v147 = v197;
          v199 = (void *)objc_opt_class(v8, v198);
          *(_DWORD *)buf = 138413314;
          id v261 = v199;
          __int16 v262 = 2048;
          v263 = (NSMutableDictionary *)a4;
          __int16 v264 = 2048;
          unint64_t v265 = v243;
          __int16 v266 = 1024;
          *(_DWORD *)v267 = v239;
          *(_WORD *)&v267[4] = 2112;
          *(void *)&v267[6] = v8;
          id v150 = v199;
          v151 = "%@ Issuance failure: previousPending:%ld pending:%ld managerReady: %d request:%@";
          v152 = v147;
          uint32_t v153 = 48;
          goto LABEL_118;
        }

        if (!os_log_GKGeneral) {
          id v184 = (id)GKOSLoggers(v174);
        }
        int v241 = (int)v66;
        v185 = (void *)os_log_GKDaemon;
        id v10 = v245;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v186 = v15;
          v187 = v67;
          v188 = v185;
          v190 = (void *)objc_opt_class(v8, v189);
          *(_DWORD *)buf = 138412546;
          id v261 = v190;
          __int16 v262 = 2112;
          v263 = v8;
          id v191 = v190;
          _os_log_impl( (void *)&_mh_execute_header,  v188,  OS_LOG_TYPE_INFO,  "%@ adding request to pending:%@",  buf,  0x16u);

          id v67 = v187;
          unsigned __int8 v15 = v186;
        }

        if (v67)
        {
          v256 = v15;
          v192 = v67;
          v193 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary requestData](v8, "requestData"));
          -[NSMutableDictionary addInRequestData:additional:](v8, "addInRequestData:additional:", &v256, v193);
          v194 = v256;

          v255 = v194;
          v195 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary requestData](v192, "requestData"));
          -[NSMutableDictionary addInRequestData:additional:](v8, "addInRequestData:additional:", &v255, v195);
          unsigned __int8 v15 = v255;

          id v67 = v192;
          -[NSMutableDictionary setRequestData:](v192, "setRequestData:", v15);
        }

        else
        {
          v200 = (void *)objc_claimAutoreleasedReturnValue([v245 pendingRequests]);
          [v200 setObject:v8 forKeyedSubscript:v14];

          id v67 = v8;
        }

        uint64_t v177 = (uint64_t)-[NSMutableDictionary numberOfRequests](v67, "numberOfRequests");
        if (v177 < 1)
        {
          if (!v241) {
            goto LABEL_132;
          }
        }

        else
        {
          v201 = v15;
          v202 = v67;
          v203 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary taskInfo](v67, "taskInfo"));
          v204 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary requestIdentifier](v8, "requestIdentifier"));
          [v248 writeToPendingStore:v203 fileName:v204];

          id v67 = v202;
          unsigned __int8 v15 = v201;
          if ((v241 & 1) == 0) {
            goto LABEL_132;
          }
        }
      }

      if (!os_log_GKGeneral) {
        id v205 = (id)GKOSLoggers(v177);
      }
      v206 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v207 = v15;
        v208 = v67;
        v209 = v206;
        v211 = (void *)objc_opt_class(v8, v210);
        *(_DWORD *)buf = 138413314;
        id v261 = v211;
        __int16 v262 = 2048;
        v263 = (NSMutableDictionary *)a4;
        __int16 v264 = 2048;
        unint64_t v265 = v243;
        __int16 v266 = 1024;
        *(_DWORD *)v267 = v239;
        *(_WORD *)&v267[4] = 2112;
        *(void *)&v267[6] = v8;
        id v212 = v211;
        _os_log_impl( (void *)&_mh_execute_header,  v209,  OS_LOG_TYPE_INFO,  "%@ Dispatching block: previousPending:%ld pending:%ld managerReady: %d request:%@",  buf,  0x30u);

        id v67 = v208;
        unsigned __int8 v15 = v207;
      }

      -[NSMutableDictionary setCoalescingAgent:](v8, "setCoalescingAgent:", 1LL);
      updateCoalescingState(1, v9, v8);
      id v213 = -[NSMutableDictionary numberOfRequests](v67, "numberOfRequests");
      int64_t v215 = 1000000000 * (void)objc_msgSend((id)objc_opt_class(v8, v214), "coalescingDelay");
      if (v215)
      {
        v216 = v15;
        v217 = v67;
        dispatch_time_t v218 = dispatch_time(0LL, v215);
        v219 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v248 stateQueue]);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1000A4E60;
        block[3] = &unk_100270510;
        v250 = v8;
        id v251 = v10;
        id v252 = v11;
        id v253 = v9;
        id v254 = v213;
        dispatch_time_t v220 = v218;
        id v67 = v217;
        unsigned __int8 v15 = v216;
        dispatch_after(v220, v219, block);
      }

      else
      {
        -[NSMutableDictionary handleNetworkRequest:session:clientProxy:previousKnownPendingAmount:]( v8,  "handleNetworkRequest:session:clientProxy:previousKnownPendingAmount:",  v10,  v11,  v9,  v213);
      }

      goto LABEL_132;
    }

    id v67 = v20;
    if ((v239 & 1) != 0)
    {
      id v135 = -[NSMutableDictionary issueRequests](v8, "issueRequests");
      if ((_DWORD)v135)
      {
        if (v19)
        {
          if (!os_log_GKGeneral) {
            id v136 = (id)GKOSLoggers(v135);
          }
          v137 = (void *)os_log_GKDaemon;
          int v65 = 1;
          if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO)) {
            goto LABEL_73;
          }
          v138 = v15;
          v139 = v137;
          v141 = (void *)objc_opt_class(v8, v140);
          *(_DWORD *)buf = 138413058;
          id v261 = v141;
          __int16 v262 = 2048;
          v263 = (NSMutableDictionary *)a4;
          __int16 v264 = 2048;
          unint64_t v265 = v243;
          __int16 v266 = 1024;
          *(_DWORD *)v267 = 1;
          id v142 = v141;
          _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_INFO,  "%@ issue pending request while coalescing add to pending, update state: previousPending:%ld pending:%ld managerReady: %d",  buf,  0x26u);

          id v67 = v20;
LABEL_72:
          unsigned __int8 v15 = v138;
LABEL_73:
          LODWORD(v66) = 0;
          goto LABEL_100;
        }

        if (!os_log_GKGeneral) {
          id v221 = (id)GKOSLoggers(v135);
        }
        v222 = (void *)os_log_GKDaemon;
        v237 = v20;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v223 = v222;
          v225 = (void *)objc_opt_class(v8, v224);
          *(_DWORD *)buf = 138413058;
          id v261 = v225;
          __int16 v262 = 2048;
          v263 = (NSMutableDictionary *)a4;
          __int16 v264 = 2048;
          unint64_t v265 = v243;
          __int16 v266 = 1024;
          *(_DWORD *)v267 = 1;
          id v226 = v225;
          _os_log_impl( (void *)&_mh_execute_header,  v223,  OS_LOG_TYPE_INFO,  "%@ issue pending request while not coalescing issue request, update state: previousPending:%ld pending:%ld managerReady: %d",  buf,  0x26u);
        }

        goto LABEL_48;
      }

      if (a4 | v243)
      {
        if (v243)
        {
          v237 = v20;
          if (v243 != a4)
          {
            v138 = v15;
            if (a4)
            {
              id v67 = v20;
              if (!v19)
              {
                if (!os_log_GKGeneral) {
                  id v227 = (id)GKOSLoggers(v135);
                }
                v228 = (void *)os_log_GKDaemon;
                if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
                {
                  v229 = v228;
                  v231 = (void *)objc_opt_class(v8, v230);
                  *(_DWORD *)buf = 138413314;
                  id v261 = v231;
                  __int16 v262 = 2048;
                  v263 = (NSMutableDictionary *)a4;
                  __int16 v264 = 2048;
                  unint64_t v265 = v243;
                  __int16 v266 = 1024;
                  *(_DWORD *)v267 = 1;
                  *(_WORD *)&v267[4] = 2112;
                  *(void *)&v267[6] = v8;
                  id v232 = v231;
                  _os_log_impl( (void *)&_mh_execute_header,  v229,  OS_LOG_TYPE_INFO,  "%@ dispatch logic failure: previousPending:%ld pending:%ld managerReady: %d request:%@",  buf,  0x30u);

                  id v67 = v20;
                }
              }

              int v65 = 0;
            }

            else
            {
              id v67 = v20;
              if (v19 && !-[NSMutableDictionary coalescingAgent](v8, "coalescingAgent"))
              {
                int v65 = 1;
                goto LABEL_72;
              }

              int v65 = 1;
            }

            LODWORD(v66) = 1;
            goto LABEL_100;
          }

  id result = swift_release(v5);
  void *v3 = v8;
  return result;
}

LABEL_48:
          v259 = v15;
          __int16 v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v246, "requestData", v237));
          -[NSMutableDictionary addInRequestData:additional:](v8, "addInRequestData:additional:", &v259, v92);
          id v93 = v259;

          v258 = v93;
          __int16 v94 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary requestData](v238, "requestData"));
          -[NSMutableDictionary addInRequestData:additional:](v8, "addInRequestData:additional:", &v258, v94);
          v95 = v258;

          v257 = v95;
          v96 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary requestData](v8, "requestData"));
          -[NSMutableDictionary addInRequestData:additional:](v8, "addInRequestData:additional:", &v257, v96);
          unsigned __int8 v15 = v257;

          id v97 = -[NSMutableDictionary numberOfRequests](v8, "numberOfRequests");
          id v10 = v245;
          if (v97)
          {
            if (!os_log_GKGeneral) {
              id v98 = (id)GKOSLoggers(v97);
            }
            v99 = (void *)os_log_GKDaemon;
            BOOL v100 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
            if (v100)
            {
              v101 = v99;
              v103 = (void *)objc_opt_class(v8, v102);
              *(_DWORD *)buf = 138412546;
              id v261 = v103;
              __int16 v262 = 2112;
              v263 = v15;
              id v104 = v103;
              _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_INFO,  "%@ attempting to issue request:%@",  buf,  0x16u);
            }

            if (v246)
            {
              if (!os_log_GKGeneral) {
                id v105 = (id)GKOSLoggers(v100);
              }
              v106 = (void *)os_log_GKDaemon;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                v107 = v106;
                v109 = (void *)objc_opt_class(v8, v108);
                *(_DWORD *)buf = 138412546;
                id v261 = v109;
                __int16 v262 = 2112;
                v263 = v8;
                id v110 = v109;
                _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_INFO,  "%@ canceling previous request as we are going to replace it with new data: %@",  buf,  0x16u);
              }

              v111 = (void *)objc_claimAutoreleasedReturnValue([v246 nsurlTask]);
              [v111 cancel];
            }

            v112 = (void *)objc_claimAutoreleasedReturnValue([v245 pendingRequests]);
            [v112 removeObjectForKey:v14];

            -[NSMutableDictionary setRequestData:](v8, "setRequestData:", v15);
            v113 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary nsurlRequest](v8, "nsurlRequest"));
            v114 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary postBody](v8, "postBody"));
            _updateRequestBody(v113, (uint64_t)v114);

            v115 = (void *)objc_claimAutoreleasedReturnValue([v245 currentTasks]);
            [v115 setObject:v8 forKeyedSubscript:v14];

            v116 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary nsurlRequest](v8, "nsurlRequest"));
            v117 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary taskInfo](v8, "taskInfo"));
            v118 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager taskWithRequest:description:session:]( &OBJC_CLASS___GKNetworkRequestManager,  "taskWithRequest:description:session:",  v116,  v117,  v11));
            -[NSMutableDictionary setNsurlTask:](v8, "setNsurlTask:", v118);

            v119 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary nsurlTask](v8, "nsurlTask"));
            if (v119)
            {
              if (!os_log_GKGeneral) {
                id v121 = (id)GKOSLoggers(v120);
              }
              v122 = (void *)os_log_GKDaemon;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                v123 = v122;
                v125 = (void *)objc_opt_class(v8, v124);
                id v126 = v125;
                v127 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary nsurlTask](v8, "nsurlTask"));
                *(_DWORD *)buf = 138412546;
                id v261 = v125;
                __int16 v262 = 2112;
                v263 = v127;
                _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_INFO, "%@ resuming task:%@", buf, 0x16u);
              }

              v128 = objc_alloc(&OBJC_CLASS___NSURLSessionConfiguration);
              v129 = (void *)objc_claimAutoreleasedReturnValue([v248 backgroundConfig]);
              id v130 = -[NSURLSessionConfiguration _initWithConfiguration:](v128, "_initWithConfiguration:", v129);

              v131 = (void *)objc_claimAutoreleasedReturnValue([v9 originalBundleIdentifier]);
              objc_msgSend(v130, "set_sourceApplicationBundleIdentifier:", v131);

              v132 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary nsurlTask](v8, "nsurlTask"));
              [v132 _adoptEffectiveConfiguration:v130];

              v133 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary nsurlTask](v8, "nsurlTask"));
              [v133 resume];

              v134 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary requestIdentifier](v8, "requestIdentifier"));
              [v248 cleanUpPendingStore:v134];
              id v67 = v20;
            }

            else
            {
              if (!os_log_GKGeneral) {
                id v154 = (id)GKOSLoggers(v120);
              }
              v155 = (void *)os_log_GKDaemon;
              id v67 = v20;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                v156 = v155;
                v157 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary requestData](v8, "requestData"));
                *(_DWORD *)buf = 138412290;
                id v261 = v157;
                _os_log_impl( (void *)&_mh_execute_header,  v156,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager cannot issue request as it is nil, writing to pending: %@",  buf,  0xCu);

                id v67 = v20;
              }

              id v130 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary taskInfo](v67, "taskInfo"));
              v134 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary requestIdentifier](v8, "requestIdentifier"));
              [v248 writeToPendingStore:v130 fileName:v134];
            }

            updateCoalescingState(0, v9, v8);
            id v10 = v245;
            goto LABEL_132;
          }

          v143 = v15;
          v144 = v238;
          if (!os_log_GKGeneral) {
            id v145 = (id)GKOSLoggers(0LL);
          }
          v146 = (void *)os_log_GKDaemon;
          if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO)) {
            goto LABEL_119;
          }
          v147 = v146;
          v149 = (void *)objc_opt_class(v8, v148);
          *(_DWORD *)buf = 138412546;
          id v261 = v149;
          __int16 v262 = 2112;
          v263 = v8;
          id v150 = v149;
          v151 = "%@ new request is empty, skipping: %@";
          v152 = v147;
          uint32_t v153 = 22;
LABEL_118:
          _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_INFO, v151, buf, v153);

LABEL_119:
          id v67 = v144;
          unsigned __int8 v15 = v143;
          goto LABEL_132;
        }

        if (!os_log_GKGeneral) {
          id v233 = (id)GKOSLoggers(v135);
        }
        v234 = (void *)os_log_GKDaemon;
        id v10 = v245;
        if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO)) {
          goto LABEL_132;
        }
        v167 = v15;
        v168 = v67;
        v169 = v234;
        v236 = (void *)objc_opt_class(v8, v235);
        *(_DWORD *)buf = 138413314;
        id v261 = v236;
        __int16 v262 = 2048;
        v263 = (NSMutableDictionary *)a4;
        __int16 v264 = 2048;
        unint64_t v265 = 0LL;
        __int16 v266 = 1024;
        *(_DWORD *)v267 = 1;
        *(_WORD *)&v267[4] = 2112;
        *(void *)&v267[6] = v8;
        id v172 = v236;
        v173 = "%@ Selection logic failure: previousPending:%ld pending:%ld managerReady: %d request:%@";
LABEL_151:
        _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_INFO, v173, buf, 0x30u);

        id v67 = v168;
        unsigned __int8 v15 = v167;
        goto LABEL_132;
      }

      if (v19)
      {
        if (!os_log_GKGeneral) {
          id v158 = (id)GKOSLoggers(v135);
        }
        v159 = (void *)os_log_GKDaemon;
        id v10 = v245;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v160 = v159;
          v162 = (void *)objc_opt_class(v8, v161);
          *(_DWORD *)buf = 138413314;
          id v261 = v162;
          __int16 v262 = 2048;
          v263 = 0LL;
          __int16 v264 = 2048;
          unint64_t v265 = 0LL;
          __int16 v266 = 1024;
          *(_DWORD *)v267 = 1;
          *(_WORD *)&v267[4] = 2112;
          *(void *)&v267[6] = v8;
          id v163 = v162;
          _os_log_impl( (void *)&_mh_execute_header,  v160,  OS_LOG_TYPE_INFO,  "%@ first request condition: previousPending:%ld pending:%ld managerReady: %d request:%@",  buf,  0x30u);

          id v67 = v20;
        }

        id v164 = -[NSMutableDictionary coalescingAgent](v8, "coalescingAgent");
        if (!(_DWORD)v164)
        {
          LODWORD(v66) = 1;
          int v65 = 1;
          goto LABEL_100;
        }

        if (!os_log_GKGeneral) {
          id v165 = (id)GKOSLoggers(v164);
        }
        v166 = (void *)os_log_GKDaemon;
        if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO)) {
          goto LABEL_132;
        }
        v167 = v15;
        v168 = v67;
        v169 = v166;
        v171 = (void *)objc_opt_class(v8, v170);
        *(_DWORD *)buf = 138413314;
        id v261 = v171;
        __int16 v262 = 2048;
        v263 = 0LL;
        __int16 v264 = 2048;
        unint64_t v265 = 0LL;
        __int16 v266 = 1024;
        *(_DWORD *)v267 = 1;
        *(_WORD *)&v267[4] = 2112;
        *(void *)&v267[6] = v8;
        id v172 = v171;
        v173 = "%@ stopping coalescing monitoring: previousPending:%ld pending:%ld managerReady: %d request:%@";
        goto LABEL_151;
      }
    }

    else if (v19 && !-[NSMutableDictionary coalescingAgent](v8, "coalescingAgent"))
    {
      LODWORD(v66) = 0;
LABEL_99:
      int v65 = 1;
      goto LABEL_100;
    }

    LODWORD(v66) = 1;
    goto LABEL_99;
  }

  if (!os_log_GKGeneral) {
    id v44 = (id)GKOSLoggers(0LL);
  }
  NSErrorUserInfoKey v45 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    __int128 v46 = v45;
    *(_DWORD *)buf = 138412546;
    id v261 = (id)objc_opt_class(v8, v47);
    __int16 v262 = 2112;
    v263 = v8;
    id v48 = v261;
    _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_INFO,  "%@ cannot issue a request without bundleId: %@",  buf,  0x16u);
  }

LABEL_133:
}

id sub_1000A4E60(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleNetworkRequest:*(void *)(a1 + 40) session:*(void *)(a1 + 48) clientProxy:*(void *)(a1 + 56) previousKnownPendingAmount:*(void *)(a1 + 64)];
}

void sub_1000A8A3C(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "GKNetworkRequestManager fairplay session creation failed due to error: %@",  (uint8_t *)&v2,  0xCu);
}

void sub_1000A8AB0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000A8AE4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1000A8E64(void *a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  uint64_t v3 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = a1[4];
    uint64_t v4 = (void *)a1[5];
    id v6 = v3;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 loggableHeaders]);
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager updated headers for: %@ {\nheaders: %@}",  (uint8_t *)&v9,  0x16u);
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_1000A8F68(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 storeBag]);
  id v6 = *(void **)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 HTTPBody]);
  [v5 signRequest:v6 sapSession:v3 postData:v7];

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v8);
  }
  uint64_t v10 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int16 v11 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager finished getting session.",  v11,  2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

LABEL_33:
        __int128 v82 = &stru_10027B720;
        goto LABEL_34;
      }

      __int128 v81 = 0LL;
    }

    else
    {
      __int128 v81 = 0LL;
      uint64_t v28 = 0LL;
      id v83 = 0LL;
    }

    __int128 v80 = -1LL;
    goto LABEL_33;
  }

  if (!os_log_GKGeneral) {
    id v16 = (id)GKOSLoggers(-999LL);
  }
  id v17 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v18 = v17;
    BOOL v19 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager dictionaryFromTaskDescription:]( &OBJC_CLASS___GKNetworkRequestManager,  "dictionaryFromTaskDescription:",  v9));
    *(_DWORD *)buf = 138412290;
    __int128 v85 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "GKNetworkRequestManager task was explicitly cancelled: %@",  buf,  0xCu);
LABEL_29:
  }

                  sub_100132040(v49, v13);
                  sub_100132050(v53);
                  id v44 = swift_release(v54);
                  sub_10013262C(v44, v45);
                  sub_100132040(v49, v46);
                  goto LABEL_34;
                }
              }
            }
          }
        }

LABEL_82:
  objc_autoreleasePoolPop(v11);
}

void sub_1000A9E30(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "GKNetworkRequestManager is missing.", v1, 2u);
}

LABEL_28:
    CFRelease(v7);
    objc_autoreleasePoolPop(v6);
    goto LABEL_29;
  }

  uint64_t v14 = 0LL;
LABEL_29:

  return v14;
}
      }

      uint64_t v4 = [obj countByEnumeratingWithState:&v36 objects:v43 count:16];
    }

    while (v4);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

    id v6 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    uint64_t v8 = v13;
  }

  id v17 = v16 + 4;
  if (v17 >= v32)
  {
LABEL_40:
    swift_release(v3);
    sub_100132050(a1);
    return;
  }

  id v12 = *(void *)(v33 + 8 * v17);
  if (v12)
  {
    uint64_t v13 = v17;
    goto LABEL_28;
  }

  while (!__OFADD__(v17, 1LL))
  {
    sub_100188A78();
    if (v14 == v15) {
      goto LABEL_40;
    }
    sub_100188A6C();
    id v17 = v18 + 1;
    if (v12) {
      goto LABEL_28;
    }
  }

void sub_1000AAAA4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000AAB08( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000AAB6C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000AAD54(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___GKIDSConnectionManager);
  id v2 = (void *)qword_1002BB558;
  qword_1002BB558 = (uint64_t)v1;
}

void sub_1000AAFA8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSIDQueryController sharedInstance](&OBJC_CLASS___IDSIDQueryController, "sharedInstance"));
  id v3 = objc_alloc_init(&OBJC_CLASS___IDSIDInfoOptions);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 64);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) idsDelegateQueue]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000AB098;
  void v8[3] = &unk_10026C758;
  id v9 = *(id *)(a1 + 56);
  [v2 idInfoForDestinations:v4 service:v5 infoTypes:v6 options:v3 listenerID:@"com.apple.gamed" queue:v7 completionBlock:v8];
}

uint64_t sub_1000AB098(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000AB13C(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 8LL), *(id *)(a1 + 40));
}

void sub_1000AB510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AB5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AB750( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000AB820( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000ABA90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_1000ABAF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) getStatement:&v6 forSQL:v3];
  if (!(_DWORD)v4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v4 = (id)sqlite3_step(v6);
  }

  return v4;
}

void sub_1000ABB64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ABC38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1000ABC5C(uint64_t a1, uint64_t a2, void *a3)
{
  id v23 = a3;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id obj = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v5)
  {
    uint64_t v19 = *(void *)v34;
    do
    {
      id v20 = v5;
      for (uint64_t i = 0LL; i != v20; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v34 != v19) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)i);
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 representedItem]);
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        id v22 = v7;
        id v8 = [v22 countByEnumeratingWithState:&v29 objects:v37 count:16];
        if (v8)
        {
          uint64_t v9 = *(void *)v30;
          do
          {
            for (j = 0LL; j != v8; j = (char *)j + 1)
            {
              if (*(void *)v30 != v9) {
                objc_enumerationMutation(v22);
              }
              id v12 = *(void **)(a1 + 40);
              uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 requestsInsertSQL]);
              v27[0] = _NSConcreteStackBlock;
              v27[1] = 3221225472LL;
              v27[2] = sub_1000ABFB4;
              void v27[3] = &unk_1002705D8;
              void v27[4] = *(void *)(a1 + 40);
              void v27[5] = v6;
              id v14 = v11;
              id v28 = v14;
              [v12 writeToDatabase:a2 statementStore:v23 withInsertSQL:v13 updateSQL:0 bindOperation:v27];

              unsigned __int8 v15 = *(void **)(a1 + 40);
              id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 removeGamesInsertSQL]);
              v24[0] = _NSConcreteStackBlock;
              v24[1] = 3221225472LL;
              void v24[2] = sub_1000AC020;
              v24[3] = &unk_100270600;
              void v24[4] = *(void *)(a1 + 40);
              id v17 = v14;
              id v25 = v17;
              uint64_t v26 = a2;
              [v15 writeToDatabase:a2 statementStore:v23 withInsertSQL:v16 updateSQL:0 bindOperation:v24];
            }

            id v8 = [v22 countByEnumeratingWithState:&v29 objects:v37 count:16];
          }

          while (v8);
        }
      }

      id v5 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
    }

    while (v5);
  }
}

void sub_1000ABF1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_1000ABFB4(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) resourceID]);
  objc_msgSend(v3, "bindParametersForRequestsStatement:playerID:digest:", a2);
}

void sub_1000AC00C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_1000AC020(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 48));
  return _[v3 bindParametersForRemoveGamesStatement:a2 forRemovedBundleID:v4 requestsRowID:insert_rowid];
}

uint64_t sub_1000AC060(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000AC144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AC1EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AC274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000AC284(uint64_t a1)
{
  uint64_t v2 = 0LL;
  int v3 = 0;
  do
  {
    uint64_t v4 = *(_BYTE **)(a1 + 8 * v2);
    if (*v4)
    {
      id v5 = v4 + 1;
      do
        ++v3;
      while (*v5++);
    }

    ++v2;
  }

  while (v2 != 4);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](&OBJC_CLASS___NSMutableString, "stringWithCapacity:", v3 + 8));
  for (uint64_t i = 0LL; i != 24; i += 8LL)
    objc_msgSend(v7, "appendFormat:", @"%s, ", *(void *)(a1 + i));
  objc_msgSend(v7, "appendFormat:", @"%s ", *(void *)(a1 + 24));
  return v7;
}

void sub_1000AC344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AC3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000AC3D0(void *a1)
{
  if (*(_BYTE *)*a1)
  {
    uint64_t v2 = 1LL;
    uint64_t v4 = (int)v2 + 1;
  }

  else
  {
    uint64_t v4 = 2LL;
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](&OBJC_CLASS___NSMutableString, "stringWithCapacity:", v4));
  objc_msgSend(v5, "appendFormat:", @"%s ", *a1);
  return v5;
}

void sub_1000AC44C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AC4C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000AC5AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1000AC5D8(sqlite3_stmt **a1)
{
  id v1 = (unsigned __int8 *)sqlite3_column_text(*a1, 3);
  if (v1) {
    id v1 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v1));
  }
  return v1;
}

void sub_1000AC7B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1000AC820(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 8LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000AC8F8;
  v9[3] = &unk_1002706A0;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v6;
  uint64_t v11 = v7;
  id v12 = *(id *)(a1 + 48);
  id v13 = v3;
  id v8 = v3;
  [v5 performAsync:v9];
}

void sub_1000AC8D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000AC8F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v30 = a3;
  id v40 = 0LL;
  uint64_t v41 = 0LL;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v36 objects:v43 count:16];
  if (v4)
  {
    uint64_t v26 = *(void *)v37;
    do
    {
      id v27 = v4;
      for (uint64_t i = 0LL; i != v27; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v37 != v26) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
        __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v6 resourceID]);
        __int128 v34 = 0u;
        __int128 v35 = 0u;
        __int128 v32 = 0u;
        __int128 v33 = 0u;
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 representedItem]);
        id v8 = [v7 countByEnumeratingWithState:&v32 objects:v42 count:16];
        if (v8)
        {
          uint64_t v28 = *(void *)v33;
          id v29 = v7;
          while (2)
          {
            for (j = 0LL; j != v8; j = (char *)j + 1)
            {
              if (*(void *)v33 != v28) {
                objc_enumerationMutation(v29);
              }
              uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
              id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
              id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) getAllRemoveGamesRequestIDsStatement]);
              int v14 = [v30 getStatement:&v40 forSQL:v13];

              [*(id *)(a1 + 40) bindParametersForStatement:v40 playerID:v31 bundleID:v10];
              if (!v14)
              {
                int v14 = sqlite3_step(v40);
                while (v14 == 100)
                {
                  id v20 =  +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  sqlite3_column_double(v40, 0));
                  [v12 addObject:v20];
                  int v14 = sqlite3_step(v40);
                }
              }

              if (v14 != 101) {
                goto LABEL_27;
              }
              unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) getRemoveGamesDescriptorsStatement]);
              unsigned int v16 = [v30 getStatement:&v41 forSQL:v15];

              if (v16) {
                goto LABEL_27;
              }
              [*(id *)(a1 + 40) bindParametersForStatement:v41 playerID:v31 bundleID:v10];
              int v17 = sqlite3_step(v41);
              while (v17 == 100)
              {
                id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) removeGamesForExecutedStatement:v41]);
                [v11 addObject:v18];
                int v17 = sqlite3_step(v41);
              }

              if (v17 != 101)
              {
LABEL_27:
                id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkErrorForDatabase:](&OBJC_CLASS___NSError, "_gkErrorForDatabase:", a2));
                [*(id *)(a1 + 48) setError:v23];

                uint64_t v7 = v29;
                goto LABEL_28;
              }

              if ([v11 count]) {
                uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
              }
              else {
                uint64_t v19 = &__NSDictionary0__struct;
              }
              uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[GKResource resourceWithID:representedItem:]( &OBJC_CLASS___GKMutableResource,  "resourceWithID:representedItem:",  v31,  v19));
              [v21 setObject:v12 forKeyedSubscript:@"GKRequestIDs"];
              id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) result]);
              [v22 addObject:v21];
            }

            uint64_t v7 = v29;
            id v8 = [v29 countByEnumeratingWithState:&v32 objects:v42 count:16];
            if (v8) {
              continue;
            }
            break;
          }
        }

void sub_1000ACD54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
}

void sub_1000ACE74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000ACED4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000ACF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AD010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AD094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000AD0A4(void *a1)
{
  uint64_t v2 = 0LL;
  int v3 = 0;
  do
  {
    id v4 = (_BYTE *)a1[v2];
    if (*v4)
    {
      id v5 = v4 + 1;
      do
        ++v3;
      while (*v5++);
    }

    ++v2;
  }

  while (v2 != 2);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](&OBJC_CLASS___NSMutableString, "stringWithCapacity:", v3 + 4));
  objc_msgSend(v7, "appendFormat:", @"%s, ", *a1);
  objc_msgSend(v7, "appendFormat:", @"%s ", a1[1]);
  return v7;
}

void sub_1000AD144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AD254(_Unwind_Exception *a1)
{
  int v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1000AD4A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AD514(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 8LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000AD5EC;
  v9[3] = &unk_1002706A0;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v6;
  uint64_t v11 = v7;
  id v12 = *(id *)(a1 + 48);
  id v13 = v3;
  id v8 = v3;
  [v5 performAsync:v9];
}

void sub_1000AD5C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000AD5EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unsigned __int8 v15 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) anyObject]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 resourceID]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deletePhotoDescriptorStatement]);
  int v10 = [v5 getStatement:&v15 forSQL:v9];

  if (v10
    || ([*(id *)(a1 + 40) bindParametersForStatement:v15 playerID:v7],
        int v10 = sqlite3_step(v15),
        v10 != 100))
  {
    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v11 = 0LL;
    do
    {
      if (!v11) {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deletePhotoDescriptorForExecutedStatement:v15]);
      }
      id v12 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", sqlite3_column_double(v15, 0));
      [v8 addObject:v12];
      int v10 = sqlite3_step(v15);
    }

    while (v10 == 100);
  }

  if (v10 == 101)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKResource resourceWithID:representedItem:]( &OBJC_CLASS___GKMutableResource,  "resourceWithID:representedItem:",  v7,  v11));
    [v13 setObject:v8 forKeyedSubscript:@"GKRequestIDs"];
    int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) result]);
    [v14 addObject:v13];
  }

  else
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkErrorForDatabase:](&OBJC_CLASS___NSError, "_gkErrorForDatabase:", a2));
    [*(id *)(a1 + 48) setError:v13];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000AD7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AD858(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000AD8B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000AD938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AD9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ADA88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000ADDE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_1000ADE4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) getStatement:&v6 forSQL:v3];
  if (!(_DWORD)v4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v4 = (id)sqlite3_step(v6);
  }

  return v4;
}

void sub_1000ADEBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE05C(uint64_t a1, sqlite3 *a2, void *a3)
{
  id v5 = a3;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  id obj = *(id *)(a1 + 32);
  id v6 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (v6)
  {
    uint64_t v31 = *(void *)v38;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v38 != v31) {
          objc_enumerationMutation(obj);
        }
        id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v37 + 1) + 8 * (void)v7) resourceID]);
        __int128 v36 = 0LL;
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) getOldPhotosSQL]);
        if ([v5 getStatement:&v36 forSQL:v9])
        {
          id v23 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
          id v43 = @"SQL";
          id v44 = v9;
          id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v44,  &v43,  1LL));
          id v26 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  NSInternalInconsistencyException,  v24,  v25));

          objc_exception_throw(v26);
          goto LABEL_20;
        }

        __int128 v35 = 0LL;
        int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deleteOldPhotosSQL]);
        int i = [v5 getStatement:&v35 forSQL:v10];
        if (!i)
        {
          [*(id *)(a1 + 40) bindParametersForGetOldPhotosStatement:v36 playerID:v8];
          for (int i = sqlite3_step(v36); ; int i = sqlite3_step(v36))
          {
            if (i != 100) {
              goto LABEL_8;
            }
            sqlite3_int64 v17 = sqlite3_column_int64(v36, 0);
            [*(id *)(a1 + 40) bindParametersForDeleteOldPhotosStatement:v35 requestsRowID:v17];
            if (sqlite3_step(v35) != 101) {
              break;
            }
          }

          uint64_t v19 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          uint64_t v41 = @"SQL";
          uint64_t v42 = v10;
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v42,  &v41,  1LL));
          id v22 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  NSInternalInconsistencyException,  v20,  v21));

          objc_exception_throw(v22);
LABEL_20:
          __break(1u);
        }

void sub_1000AE4AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id sub_1000AE580(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) bindParametersForRequestsStatement:a2 playerID:*(void *)(a1 + 40)];
}

id sub_1000AE590(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 40));
  return _[v3 bindParametersForPhotoStatement:a2 requestsRowID:insert_rowid];
}

uint64_t sub_1000AE5C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000AE62C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE89C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSData *sub_1000AE8D8(sqlite3_stmt **a1)
{
  uint64_t v2 = sqlite3_column_blob(*a1, 2);
  return +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v2,  sqlite3_column_bytes(*a1, 2));
}

void sub_1000AEB50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AEBC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 8LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000AEC9C;
  v9[3] = &unk_1002706A0;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v6;
  uint64_t v11 = v7;
  id v12 = *(id *)(a1 + 48);
  id v13 = v3;
  id v8 = v3;
  [v5 performAsync:v9];
}

void sub_1000AEC74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000AEC9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unsigned __int8 v15 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) anyObject]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 resourceID]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) setPhotoDescriptorStatement]);
  int v10 = [v5 getStatement:&v15 forSQL:v9];

  if (v10
    || ([*(id *)(a1 + 40) bindParametersForStatement:v15 playerID:v7],
        int v10 = sqlite3_step(v15),
        v10 != 100))
  {
    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v11 = 0LL;
    do
    {
      if (!v11) {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) setPhotoDescriptorForExecutedStatement:v15]);
      }
      id v12 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", sqlite3_column_double(v15, 0));
      [v8 addObject:v12];
      int v10 = sqlite3_step(v15);
    }

    while (v10 == 100);
  }

  if (v10 == 101)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKResource resourceWithID:representedItem:]( &OBJC_CLASS___GKMutableResource,  "resourceWithID:representedItem:",  v7,  v11));
    [v13 setObject:v8 forKeyedSubscript:@"GKRequestIDs"];
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) result]);
    [v14 addObject:v13];
  }

  else
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkErrorForDatabase:](&OBJC_CLASS___NSError, "_gkErrorForDatabase:", a2));
    [*(id *)(a1 + 48) setError:v13];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000AEE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AEF08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000AEF68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000AEFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AF06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AF138( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000AF22C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000AF538( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_1000AF59C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) getStatement:&v6 forSQL:v3];
  if (!(_DWORD)v4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v4 = (id)sqlite3_step(v6);
  }

  return v4;
}

void sub_1000AF60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AF774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AF7AC(uint64_t a1, sqlite3 *a2, void *a3)
{
  id v37 = a3;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v44 objects:v52 count:16];
  if (v4)
  {
    uint64_t v32 = *(void *)v45;
    uint64_t v31 = GKAvatarTypeKey;
    do
    {
      id v5 = 0LL;
      do
      {
        if (*(void *)v45 != v32) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)v5);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 resourceID]);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 representedItem]);
        id v34 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"photo-data"]);
        __int128 v33 = v8;
        __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v31]);
        id v43 = 0LL;
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) getOldPhotosSQL]);
        if ([v37 getStatement:&v43 forSQL:v9])
        {
          id v23 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
          __int128 v50 = @"SQL";
          id v51 = v9;
          id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v51,  &v50,  1LL));
          id v26 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  NSInternalInconsistencyException,  v24,  v25));

          objc_exception_throw(v26);
          goto LABEL_20;
        }

        uint64_t v42 = 0LL;
        int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deleteOldPhotosSQL]);
        int i = [v37 getStatement:&v42 forSQL:v10];
        if (!i)
        {
          [*(id *)(a1 + 40) bindParametersForGetOldPhotosStatement:v43 playerID:v7];
          for (int i = sqlite3_step(v43); ; int i = sqlite3_step(v43))
          {
            if (i != 100) {
              goto LABEL_8;
            }
            sqlite3_int64 v17 = sqlite3_column_int64(v43, 0);
            [*(id *)(a1 + 40) bindParametersForDeleteOldPhotosStatement:v42 requestsRowID:v17];
            if (sqlite3_step(v42) != 101) {
              break;
            }
          }

          uint64_t v19 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          id v48 = @"SQL";
          id v49 = v10;
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v49,  &v48,  1LL));
          id v22 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  NSInternalInconsistencyException,  v20,  v21));

          objc_exception_throw(v22);
LABEL_20:
          __break(1u);
        }

void sub_1000AFC94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

id sub_1000AFDB0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) bindParametersForRequestsStatement:a2 playerID:*(void *)(a1 + 40)];
}

id sub_1000AFDC0(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 56));
  return _[v3 bindParametersForPhotoStatement:a2 photo:v4 avatarType:v5 requestsRowID:insert_rowid];
}

uint64_t sub_1000AFE04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000B01C0(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] firstObject]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] _gkResourceWithID:v4]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 representedItem]);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:GKAvatarTypeKey]);
  [a1[6] setAvatarType:v7];

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"image-data"]);
  uint64_t v19 = @"file-size";
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v8 length]));
  id v20 = v9;
  int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([a1[6] transport]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([a1[6] bagKey]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1000B03B0;
  v15[3] = &unk_1002707C0;
  id v16 = a1[7];
  id v17 = v8;
  id v18 = v3;
  id v13 = v3;
  id v14 = v8;
  [v11 postRequest:v10 forBagKey:v12 response:v15];
}

void sub_1000B03B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 representedItem]);
  uint64_t v7 = v6;
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    uint64_t v9 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000B1430((uint64_t)v5, v9, v10, v11, v12, v13, v14, v15);
    }
    [*(id *)(a1 + 32) setError:v5];
  }

  else if (v6)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"upload-url"]);
    [*(id *)(a1 + 32) setResult:v16];

    [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"image-data"];
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000B049C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (!v3) {
      return;
    }
    id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v6);
  }

  else
  {
    uint64_t v4 = *(void **)(a1 + 40);
    id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"image-data"]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
    [v4 uploadImageData:v6 toURL:v5 handler:*(void *)(a1 + 48)];
  }
}

void sub_1000B071C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", *(void *)(a1 + 32)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableURLRequest requestWithURL:](&OBJC_CLASS___NSMutableURLRequest, "requestWithURL:", v4));
  [v5 setValue:@"image/png" forHTTPHeaderField:@"content-type"];
  [v5 setHTTPMethod:@"POST"];
  [v5 setHTTPBody:*(void *)(a1 + 40)];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000B0854;
  v9[3] = &unk_1002707E8;
  id v10 = v5;
  id v11 = *(id *)(a1 + 48);
  id v12 = v4;
  id v13 = v3;
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  +[NSURLSession _gkSendAsynchronousRequest:completionHandler:]( &OBJC_CLASS___NSURLSession,  "_gkSendAsynchronousRequest:completionHandler:",  v8,  v9);
}

void sub_1000B0854(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v7;
  id v11 = (id)os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO);
  if ((_DWORD)v11 && *(void *)(a1 + 32))
  {
    context = objc_autoreleasePoolPush();
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) HTTPBody]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForHTTPHeaderField:@"content-encoding"]);
    unsigned int v14 = [v13 isEqualToString:@"gzip"];

    if (v14)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v12 _gkUnzippedData]);
      id v17 = v16;
      if (v16)
      {
        id v18 = v16;

        id v12 = v18;
      }
    }

    uint64_t v19 = (os_log_s *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v20 = (id)GKOSLoggers(v15);
      uint64_t v19 = (os_log_s *)os_log_GKGeneral;
    }

    BOOL v21 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v21)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Upload avatar image data: Received HTTP Response",  buf,  2u);
    }

    if (!os_log_GKGeneral) {
      id v22 = (id)GKOSLoggers(v21);
    }
    id v23 = (void *)os_log_GKHTTP;
    BOOL v24 = os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO);
    if (v24)
    {
      id v25 = *(void **)(a1 + 32);
      id v26 = v23;
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v25 loggableHeaders]);
      *(_DWORD *)buf = 138412802;
      id v54 = v25;
      __int16 v55 = 2112;
      id v56 = v27;
      __int16 v57 = 2112;
      id v58 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "%@\nREQUEST {\nheader: %@\nbody: %@}",  buf,  0x20u);
    }

    if (!os_log_GKGeneral) {
      id v28 = (id)GKOSLoggers(v24);
    }
    id v29 = (void *)os_log_GKHTTP;
    if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
    {
      id v30 = v29;
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v10 statusCode]));
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSHTTPURLResponse localizedStringForStatusCode:]( NSHTTPURLResponse,  "localizedStringForStatusCode:",  [v10 statusCode]));
      __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v10 allHeaderFields]);
      *(_DWORD *)buf = 138413570;
      id v54 = v10;
      __int16 v55 = 2112;
      id v56 = v9;
      __int16 v57 = 2112;
      id v58 = v31;
      __int16 v59 = 2112;
      uint64_t v60 = v32;
      __int16 v61 = 2112;
      id v62 = v33;
      __int16 v63 = 2112;
      id v64 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "%@\nRESPONSE (error:%@) {\nstatus: (%@) %@\nheader: %@\nbody: %@ }",  buf,  0x3Eu);
    }

    objc_autoreleasePoolPop(context);
  }

  if (v8 && !v9 && (id v11 = [v10 statusCode], v11 == (id)200))
  {
    id v52 = 0LL;
    id v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v8,  0LL,  &v52));
    id v35 = v52;
    if (v35 || !v34)
    {
      id v39 = [*(id *)(a1 + 40) setError:v35];
      if (!os_log_GKGeneral) {
        id v40 = (id)GKOSLoggers(v39);
      }
      id v41 = (os_log_s *)os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_1000B1494((uint64_t)v35, v41, v42, v43, v44, v45, v46, v47);
      }
    }

    else
    {
      __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:@"singleFile"]);
      [*(id *)(a1 + 40) setResult:v36];
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v37 = (id)GKOSLoggers(v11);
    }
    id v38 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      id v48 = *(void **)(a1 + 48);
      id v49 = v38;
      __int128 v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v10 statusCode]));
      *(_DWORD *)buf = 138412802;
      id v54 = v48;
      __int16 v55 = 2112;
      id v56 = v50;
      __int16 v57 = 2112;
      id v58 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_ERROR,  "Error uploading profile image data to url:  %@, status code:  %@, error:  %@",  buf,  0x20u);
    }

    [*(id *)(a1 + 40) setError:v9];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000B0D2C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);

  if (v2)
  {
    id v3 = *(void **)(a1 + 40);
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
    objc_msgSend(v3, "uploadProfileImageMetadata:fromUploadURL:handler:");
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 56);
    if (!v4) {
      return;
    }
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t))(v4 + 16))(v4);
  }
}

void sub_1000B0F60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  *(void *)(a1 + 32),  @"upload-url",  *(void *)(a1 + 40),  @"asset-metadata",  0LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) avatarType]);

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) avatarType]);
    [v4 setObject:v6 forKeyedSubscript:GKAvatarTypeKey];
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) transport]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1000B1094;
  v11[3] = &unk_10026B480;
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 48);
  id v12 = v8;
  uint64_t v13 = v9;
  id v14 = v3;
  id v10 = v3;
  [v7 postRequest:v4 forBagKey:@"gk-set-profile-image-metadata" result:v11];
}

void sub_1000B1094(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    id v6 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000B14F8((uint64_t)v4, v6, v7, v8, v9, v10, v11, v12);
    }
    [*(id *)(a1 + 32) setError:v4];
  }

  else
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transport]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 clientProxy]);

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKDelayedSetPhotoNetworkWriter.m",  179LL,  "-[GKDelayedSetPhotoNetworkWriter uploadProfileImageMetadata:fromUploadURL:handler:]_block_invoke"));
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transport]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 credential]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 playerInternal]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 playerID]);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v14 transactionGroupWithName:v15 forPlayerID:v19]);

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_1000B124C;
    v21[3] = &unk_10026C810;
    void v21[4] = *(void *)(a1 + 40);
    [v20 performOnManagedObjectContext:v21];
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000B124C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  uint64_t v9 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = v9;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 transport]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 credential]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 playerInternal]);
    int v15 = 138412290;
    id v16 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "GKDelayedSetPhotoNetworkWriter: Successfully uploaded player avatar image and metadata to server for %@",  (uint8_t *)&v15,  0xCu);
  }
}

void sub_1000B1378(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000B1430( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000B1494( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000B14F8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000B159C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B1620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B16A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B1760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1000B1778(sqlite3_stmt **a1)
{
  uint64_t v1 = (unsigned __int8 *)sqlite3_column_text(*a1, 1);
  if (v1) {
    uint64_t v1 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v1));
  }
  return v1;
}

void sub_1000B19D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B1A44(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 8LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000B1B1C;
  v9[3] = &unk_1002706A0;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v6;
  uint64_t v11 = v7;
  id v12 = *(id *)(a1 + 48);
  id v13 = v3;
  id v8 = v3;
  [v5 performAsync:v9];
}

void sub_1000B1AF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000B1B1C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  int v15 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) anyObject]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 resourceID]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) setStatusDescriptorStatement]);
  int v10 = [v5 getStatement:&v15 forSQL:v9];

  if (v10
    || ([*(id *)(a1 + 40) bindParametersForStatement:v15 playerID:v7],
        int v10 = sqlite3_step(v15),
        v10 != 100))
  {
    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v11 = 0LL;
    do
    {
      if (!v11) {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) setStatusDescriptorForExecutedStatement:v15]);
      }
      id v12 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", sqlite3_column_double(v15, 0));
      [v8 addObject:v12];
      int v10 = sqlite3_step(v15);
    }

    while (v10 == 100);
  }

  if (v10 == 101)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[GKResource resourceWithID:representedItem:]( &OBJC_CLASS___GKMutableResource,  "resourceWithID:representedItem:",  v7,  v11));
    [v13 setObject:v8 forKeyedSubscript:@"GKRequestIDs"];
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) result]);
    [v14 addObject:v13];
  }

  else
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkErrorForDatabase:](&OBJC_CLASS___NSError, "_gkErrorForDatabase:", a2));
    [*(id *)(a1 + 48) setError:v13];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000B1D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B1D88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000B1DE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B1E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B1EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B1FB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B2074( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000B237C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_1000B23E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) getStatement:&v6 forSQL:v3];
  if (!(_DWORD)v4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v4 = (id)sqlite3_step(v6);
  }

  return v4;
}

void sub_1000B2450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B25B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B25F0(uint64_t a1, sqlite3 *a2, void *a3)
{
  id v34 = a3;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  id obj = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v42 objects:v50 count:16];
  if (v5)
  {
    uint64_t v32 = *(void *)v43;
    do
    {
      id v33 = v5;
      for (int i = 0LL; i != v33; int i = (char *)i + 1)
      {
        if (*(void *)v43 != v32) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v42 + 1) + 8LL * (void)i);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 resourceID]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 representedItem]);
        id v41 = 0LL;
        int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) getOldStatusesSQL]);
        if ([v34 getStatement:&v41 forSQL:v10])
        {
          BOOL v24 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          id v48 = @"SQL";
          id v49 = v10;
          id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v49,  &v48,  1LL));
          id v27 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  NSInternalInconsistencyException,  v25,  v26));

          objc_exception_throw(v27);
          goto LABEL_20;
        }

        id v40 = 0LL;
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deleteOldStatusesSQL]);
        int j = [v34 getStatement:&v40 forSQL:v11];
        if (!j)
        {
          [*(id *)(a1 + 40) bindParametersForGetOldStatusesStatement:v41 playerID:v8];
          for (int j = sqlite3_step(v41); ; int j = sqlite3_step(v41))
          {
            if (j != 100) {
              goto LABEL_8;
            }
            sqlite3_int64 v19 = sqlite3_column_int64(v41, 0);
            [*(id *)(a1 + 40) bindParametersForDeleteOldStatusesStatement:v40 requestsRowID:v19];
            if (sqlite3_step(v40) != 101) {
              break;
            }
          }

          id v20 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          BOOL v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
          uint64_t v46 = @"SQL";
          uint64_t v47 = v11;
          id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v47,  &v46,  1LL));
          id v23 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  NSInternalInconsistencyException,  v21,  v22));

          objc_exception_throw(v23);
LABEL_20:
          __break(1u);
        }

void sub_1000B2A78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
}

id sub_1000B2B64(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) bindParametersForRequestsStatement:a2 playerID:*(void *)(a1 + 40)];
}

id sub_1000B2B74(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 48));
  return _[v3 bindParametersForStatusStatement:a2 status:v4 requestsRowID:insert_rowid];
}

uint64_t sub_1000B2BB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000B2EF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000B30B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B320C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B32EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B3310(void *a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = dispatch_time(0LL, (uint64_t)(*(double *)(a1[4] + 16LL) * 1000000000.0));
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000B33E8;
  block[3] = &unk_100270828;
  uint64_t v7 = (void *)a1[5];
  uint64_t v12 = a1[6];
  id v10 = v7;
  id v11 = v3;
  id v8 = v3;
  dispatch_after(v4, v6, block);
}

uint64_t sub_1000B33E8(void *a1)
{
  if (a1[6] == qword_1002BB560) {
    (*(void (**)(void))(a1[4] + 16LL))();
  }
  return (*(uint64_t (**)(void))(a1[5] + 16LL))();
}

void sub_1000B34FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B3608( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000B3638(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  pStmt = 0LL;
  id v5 = [v4 getStatement:&pStmt forSQL:*(void *)(a1 + 32)];
  if ((_DWORD)v5)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers(v5);
    }
    uint64_t v7 = (os_log_s *)os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_1000B4EDC(a1, v7, v8);
    }
  }

  else
  {
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v9 = *(id *)(a1 + 40);
    id v10 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v19;
      do
      {
        for (int i = 0LL; i != v10; int i = (char *)i + 1)
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v9);
          }
          id v13 = *(NSNumber **)(*((void *)&v18 + 1) + 8LL * (void)i);
          GKBindParam(pStmt, ":request_id", v13);
          int v14 = sqlite3_step(pStmt);
          uint64_t v15 = sqlite3_reset(pStmt);
          if (v14 != 101)
          {
            if (!os_log_GKGeneral) {
              id v16 = (id)GKOSLoggers(v15);
            }
            id v17 = (os_log_s *)os_log_GKCache;
            if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              BOOL v24 = v13;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Unable to delete delayed request with id: %@",  buf,  0xCu);
            }
          }
        }

        id v10 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
      }

      while (v10);
    }
  }
}

void sub_1000B3854( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B3A3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, void *a25)
{
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000B3AA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 48LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1000B3B6C;
  v10[3] = &unk_1002708E8;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v8;
  id v13 = v3;
  uint64_t v14 = v7;
  id v9 = v3;
  [v5 readResources:v4 handler:v10];
}

void sub_1000B3B4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000B3B6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) setError:v6];
  if (!v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v42 objects:v47 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v43;
      do
      {
        id v11 = 0LL;
        do
        {
          if (*(void *)v43 != v10) {
            objc_enumerationMutation(v8);
          }
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v42 + 1) + 8 * (void)v11) objectForKeyedSubscript:@"GKRequestIDs"]);
          [v7 unionSet:v12];

          id v11 = (char *)v11 + 1;
        }

        while (v9 != v11);
        id v9 = [v8 countByEnumeratingWithState:&v42 objects:v47 count:16];
      }

      while (v9);
    }

    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v7 count];
    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
      uint64_t v15 = (objc_class *)objc_opt_class(*(void *)(*(void *)(a1 + 40) + 40LL), v14);
      id v16 = NSStringFromClass(v15);
      id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      __int128 v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"GKRetryAfter-%@",  v17));
      [v13 doubleForKey:v18];
      if (v19 == 0.0
        || (__int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( NSDate,  "dateWithTimeIntervalSinceReferenceDate:")),  [v20 timeIntervalSinceNow],  v22 = v21 > 0.0,  v20,  !v22))
      {
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472LL;
        v35[2] = sub_1000B3F7C;
        void v35[3] = &unk_1002708C0;
        uint64_t v32 = *(void **)(a1 + 32);
        void v35[4] = *(void *)(a1 + 40);
        id v36 = v8;
        id v33 = v7;
        uint64_t v34 = *(void *)(a1 + 56);
        id v37 = v33;
        uint64_t v41 = v34;
        id v38 = v13;
        id v39 = v18;
        id v40 = *(id *)(a1 + 32);
        [v32 perform:v35];
      }

      else
      {
        id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:userInfo:]( &OBJC_CLASS___NSError,  "userErrorForCode:userInfo:",  3LL,  &off_100288548));
        [*(id *)(a1 + 32) setError:v23];

        id v25 = (void *)os_log_GKGeneral;
        if (!os_log_GKGeneral)
        {
          id v26 = (id)GKOSLoggers(v24);
          id v25 = (void *)os_log_GKGeneral;
        }

        id v27 = v25;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v29 = (objc_class *)objc_opt_class(*(void *)(a1 + 40), v28);
          id v30 = NSStringFromClass(v29);
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
          sub_1000B4F4C(v31, (uint64_t)v46, v27);
        }
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000B3EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B3F7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(v4 + 56);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1000B409C;
  v10[3] = &unk_100270898;
  void v10[4] = v4;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 80);
  id v11 = v7;
  uint64_t v16 = v8;
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 72);
  id v15 = v3;
  id v9 = v3;
  [v6 writeResources:v5 handler:v10];
}

void sub_1000B4064( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1000B409C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v13 = v3;
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 userInfo]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"retryTime"]);
    [v5 doubleValue];
    double v7 = v6;

    if (v7 > 0.0)
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", v7));
      id v9 = *(void **)(a1 + 48);
      [v8 timeIntervalSinceReferenceDate];
      objc_msgSend(v9, "setDouble:forKey:", *(void *)(a1 + 56));
    }
  }

  else
  {
    uint64_t v10 = *(id **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10[6] databaseConnection]);
    [v10 deleteSubmittedRequestsWithIDs:v11 onConnection:v12];

    *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 0LL;
  }

  [*(id *)(a1 + 64) setError:v13];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_1000B4198( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000B41D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t))(v1 + 16))(v1);
}

void sub_1000B4228( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000B42F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B4308(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKDelayedRequestWriter.mm",  191LL,  "-[GKDelayedRequestWriter writeResources:handler:]_block_invoke"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v2));

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1000B44DC;
  void v13[3] = &unk_100270A50;
  uint64_t v4 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  id v14 = v4;
  id v5 = v3;
  id v15 = v5;
  char v17 = *(_BYTE *)(a1 + 56);
  id v16 = *(id *)(a1 + 48);
  [v5 perform:v13];
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  double v7 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000B4B74;
  v9[3] = &unk_100270A78;
  id v8 = v5;
  id v10 = v8;
  char v12 = *(_BYTE *)(a1 + 56);
  id v11 = *(id *)(a1 + 48);
  [v8 notifyOnQueue:v7 block:v9];
}

void sub_1000B448C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, void *a26, void *a27)
{
  _Unwind_Resume(a1);
}

void sub_1000B44DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  double v6 = *(void **)(v4 + 40);
  id v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472LL;
  char v12 = sub_1000B4600;
  id v13 = &unk_100270A28;
  uint64_t v14 = v4;
  id v15 = v5;
  id v16 = *(id *)(a1 + 48);
  id v7 = v3;
  id v17 = v7;
  [v6 writeResources:v15 handler:&v10];
  if (!*(_BYTE *)(a1 + 64))
  {
    uint64_t v8 = *(void *)(a1 + 56);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error", v10, v11, v12, v13, v14, v15, v16));
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
}

void sub_1000B45C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  __int128 v18 = v17;

  _Unwind_Resume(a1);
}

uint64_t sub_1000B4600(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    id v5 = *(dispatch_queue_s **)(v3 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000B469C;
    block[3] = &unk_100270A00;
    void block[4] = v3;
    id v8 = v4;
    id v9 = *(id *)(a1 + 48);
    dispatch_async(v5, block);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000B469C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) resourcesPending]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 setByAddingObjectsFromSet:*(void *)(a1 + 40)]);
  [*(id *)(a1 + 32) setResourcesPending:v3];

  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000B4780;
  void v8[3] = &unk_100270960;
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 32);
  id v9 = v6;
  uint64_t v10 = v7;
  [v4 batchAndPerformInGroup:v6 block:v8];
}

void sub_1000B4754( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_1000B4780(int8x16_t *a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1000B480C;
  v2[3] = &unk_1002709D8;
  int8x16_t v1 = a1[2];
  int8x16_t v3 = vextq_s8(v1, v1, 8uLL);
  [(id)v1.i64[0] perform:v2];
}

void sub_1000B47F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void sub_1000B480C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000B48A0;
  block[3] = &unk_1002709B0;
  void block[4] = v4;
  id v9 = v5;
  id v10 = v3;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_1000B48A0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) resourcesPending]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
  [*(id *)(a1 + 32) setResourcesPending:v3];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000B49A0;
  v5[3] = &unk_100270988;
  uint64_t v4 = *(void **)(a1 + 40);
  id v6 = *(id *)(a1 + 32);
  id v7 = v4;
  id v8 = *(id *)(a1 + 48);
  [v6 readAndSubmitDelayedRequestsOfResources:v2 handler:v5];
}

void sub_1000B496C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000B49A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  [v4 setAchievementsRateLimitedCurrentState:0];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  [v5 setAchievementsRateLimitingCurrentNumberOfRequests:0];

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  [v6 setScoresRateLimitedCurrentState:0];

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  [v7 setScoresRateLimitingCurrentNumberOfRequests:0];

  if ((objc_opt_respondsToSelector(*(void *)(*(void *)(a1 + 32) + 40LL), "refreshDataType") & 1) != 0)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
    id v9 = *(void **)(a1 + 40);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 replyQueue]);
    id v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472LL;
    id v15 = sub_1000B4B44;
    id v16 = &unk_100270960;
    id v11 = v8;
    uint64_t v12 = *(void *)(a1 + 32);
    id v17 = v11;
    uint64_t v18 = v12;
    [v9 notifyOnQueue:v10 block:&v13];
  }

  objc_msgSend(*(id *)(a1 + 40), "setError:", v3, v13, v14, v15, v16);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000B4B00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_1000B4B44(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "refreshContentsForDataType:userInfo:",  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "refreshDataType"),  0);
}

void sub_1000B4B74(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (v2)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers(v3);
    }
    id v5 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
      int v9 = 138412290;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@", (uint8_t *)&v9, 0xCu);
    }
  }

  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }

void sub_1000B4C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B4D68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 40LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1000B4DF4;
  v3[3] = &unk_100270650;
  id v4 = *(id *)(a1 + 48);
  [v2 writeResources:v1 handler:v3];
}

void sub_1000B4DE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t sub_1000B4DF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000B4EDC(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = 138412290;
  uint64_t v5 = v3;
  sub_1000208B0((void *)&_mh_execute_header, a2, a3, "Unable to delete delayed requests with ids: %@", (uint8_t *)&v4);
}

void sub_1000B4F4C(void *a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(void *)(a2 + 4) = a1;
  sub_1000208B0( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "%@ - Not submitting delayed requests because retry time interval has not expired. Will try again",  (uint8_t *)a2);
}

void sub_1000B5160(void *a1)
{
  id v2 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithContentsOfFile:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithContentsOfFile:",  a1[4]));
  if (!v2) {
    id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }
  uint64_t v3 = v2;
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", &off_100287AC0, a1[5]);
  -[NSMutableDictionary writeToFile:atomically:](v3, "writeToFile:atomically:", a1[4], 1LL);
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1000B52A0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) friendSuggestionsDenyListLocation]);
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary writeToFile:atomically:](v1, "writeToFile:atomically:", v2, 1LL);
}

void sub_1000B53D8(uint64_t a1, os_log_s *a2)
{
  int v2 = 136315394;
  uint64_t v3 = "-[GKContactDenier deniedContactIdentifiers]";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s error: %@", (uint8_t *)&v2, 0x16u);
}

void sub_1000B55F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) inFlightProvision];
  if ((v2 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v3 = (id)GKOSLoggers(v2);
    }
    __int16 v4 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Provisioning pseudonym", buf, 2u);
    }

    [*(id *)(a1 + 32) setInFlightProvision:1];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKFireworksPseudonymManager.m",  56LL,  "-[GKFireworksPseudonymManager provisionPseudonymIfNeeded:]_block_invoke"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKDispatchGroup dispatchGroupWithName:]( &OBJC_CLASS___GKDispatchGroup,  "dispatchGroupWithName:",  v5));

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( [v7 pseudonymPropertiesWithFeatureID:@"GamecenterMultiplayerFastsync" scopeID:0 expiryDurationInSeconds:86400.0]);

    *(void *)buf = 0LL;
    BOOL v22 = buf;
    uint64_t v23 = 0x2020000000LL;
    int v24 = 0;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1000B58F4;
    void v17[3] = &unk_100270B18;
    void v17[4] = *(void *)(a1 + 32);
    id v9 = v8;
    id v18 = v9;
    __int128 v20 = buf;
    id v19 = *(id *)(a1 + 40);
    [v6 perform:v17];
    id v10 = [v6 waitWithTimeout:60.0];
    if (v10)
    {
      id v10 = (id)GKAtomicCompareAndSwap32(0LL, 1LL, v22 + 24);
      if ((_DWORD)v10)
      {
        if (!os_log_GKGeneral) {
          id v11 = (id)GKOSLoggers(v10);
        }
        uint64_t v12 = (os_log_s *)os_log_GKMatch;
        if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)id v16 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Timeout while handling pseudonym provision.",  v16,  2u);
        }

        id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:description:]( &OBJC_CLASS___NSError,  "userErrorForCode:description:",  28LL,  @"Connection timeout."));
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
      }
    }

    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers(v10);
    }
    id v15 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Provisioning pseudonym task done.", v16, 2u);
    }

    _Block_object_dispose(buf, 8);
  }

void sub_1000B58D4(_Unwind_Exception *a1)
{
}

void sub_1000B58F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int16 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000B59AC;
  v9[3] = &unk_100270AF0;
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  void v9[4] = *(void *)(a1 + 32);
  uint64_t v12 = v6;
  id v10 = v7;
  id v11 = v3;
  id v8 = v3;
  [v4 provisionPseudonymWithProperties:v5 completion:v9];
}

void sub_1000B59AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_1000B5A88;
  v12[3] = &unk_100270AC8;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v14 = v6;
  uint64_t v15 = v8;
  uint64_t v18 = v7;
  v12[1] = 3221225472LL;
  id v13 = v5;
  id v16 = v9;
  id v17 = *(id *)(a1 + 48);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(&_dispatch_main_q, v12);
}

uint64_t sub_1000B5A88(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v7 = 138412546;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Provisioned pseudonym %@ %@",  (uint8_t *)&v7,  0x16u);
  }

  [*(id *)(a1 + 48) setInFlightProvision:0];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_1000B5C54(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    id v49 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Revoking pseudonym: %@.", buf, 0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKFireworksPseudonymManager.m",  90LL,  "-[GKFireworksPseudonymManager revokePseudonym:withCompletionHandler:]_block_invoke"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v5));

  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 pseudonymURIMap]);

  id obj = v8;
  id v34 = [v8 countByEnumeratingWithState:&v42 objects:v47 count:16];
  if (v34)
  {
    uint64_t v33 = *(void *)v43;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v43 != v33) {
          objc_enumerationMutation(obj);
        }
        uint64_t v35 = v9;
        uint64_t v10 = *(void *)(*((void *)&v42 + 1) + 8 * v9);
        __int128 v38 = 0u;
        __int128 v39 = 0u;
        __int128 v40 = 0u;
        __int128 v41 = 0u;
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 pseudonymURIMap]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v10]);

        id v14 = [v13 countByEnumeratingWithState:&v38 objects:v46 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v16 = *(void *)v39;
          do
          {
            for (int i = 0LL; i != v15; int i = (char *)i + 1)
            {
              if (*(void *)v39 != v16) {
                objc_enumerationMutation(v13);
              }
              uint64_t v18 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)i);
              id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 URI]);
              __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 prefixedURI]);
              unsigned int v21 = [v20 isEqualToString:*(void *)(a1 + 32)];

              if (v21)
              {
                if (!os_log_GKGeneral) {
                  id v23 = (id)GKOSLoggers(v22);
                }
                int v24 = (os_log_s *)os_log_GKMatch;
                if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  id v49 = v18;
                  _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "Revoking {pseudonym: %@}",  buf,  0xCu);
                }

                [v6 enter];
                id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
                v36[0] = _NSConcreteStackBlock;
                v36[1] = 3221225472LL;
                void v36[2] = sub_1000B610C;
                v36[3] = &unk_100270B40;
                void v36[4] = v18;
                id v37 = v6;
                [v25 revokePseudonym:v18 completion:v36];
              }
            }

            id v15 = [v13 countByEnumeratingWithState:&v38 objects:v46 count:16];
          }

          while (v15);
        }

        uint64_t v9 = v35 + 1;
      }

      while ((id)(v35 + 1) != v34);
      id v34 = [obj countByEnumeratingWithState:&v42 objects:v47 count:16];
    }

    while (v34);
  }

  id v26 = [v6 waitWithTimeout:60.0];
  if (v26)
  {
    if (!os_log_GKGeneral) {
      id v27 = (id)GKOSLoggers(v26);
    }
    uint64_t v28 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      uint64_t v29 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      id v49 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "Timeout while revoking pseudonym: %@.",  buf,  0xCu);
    }

    id v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Timeout while revoking pseudonym: %@.",  *(void *)(a1 + 32)));
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:description:]( &OBJC_CLASS___NSError,  "userErrorForCode:description:",  35LL,  v30));
  }

  else
  {
    uint64_t v31 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000B610C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers(v4);
  }
  int v7 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412546;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Revoked {pseudonym: %@, error: %@}",  (uint8_t *)&v9,  0x16u);
  }

  [*(id *)(a1 + 40) leave];
}

uint64_t finalize_stmt_applier(int a1, sqlite3_stmt *pStmt)
{
  return sqlite3_finalize(pStmt);
}

void sub_1000B6A48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 144), 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000B6A8C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(sqlite3 **)(*(void *)(a1 + 32) + 24LL);
  int v29 = 1;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sqlite3_file_control(v5, 0LL, 10, &v29);
  uint64_t v6 = sqlite3_exec( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "PRAGMA journal_mode=WAL; PRAGMA foreign_keys=ON;",
         0LL,
         0LL,
         (char **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v6;
  int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  if (v7 != 13 && v7 != 10) {
    goto LABEL_13;
  }
  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v6);
  }
  uint64_t v10 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "GKDatabaseConnection can't exec on database due to rc2=%d - closing and retrying",  buf,  8u);
  }

  sqlite3_close(*(sqlite3 **)(*(void *)(a1 + 32) + 24LL));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v28 = 0LL;
  unsigned __int8 v14 = [v12 removeItemAtPath:v13 error:&v28];
  id v15 = v28;
  if ((v14 & 1) != 0)
  {
    uint64_t v16 = v15;
    uint64_t v17 = sqlite3_open_v2( (const char *)[*(id *)(*(void *)(a1 + 32) + 16) cStringUsingEncoding:4],  (sqlite3 **)(*(void *)(a1 + 32) + 24),  6,  0);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v17;
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
    {
      *(void *)buf = 0LL;
      uint64_t v18 = *(sqlite3 **)(*(void *)(a1 + 32) + 24LL);
      int v27 = 1;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sqlite3_file_control(v18, 0LL, 10, &v27);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = sqlite3_exec( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "PRAGMA journal_mode=WAL; PRAGMA foreign_keys=ON;",
                                                                      0LL,
                                                                      0LL,
                                                                      (char **)buf);

LABEL_13:
      return;
    }

    if (!os_log_GKGeneral) {
      id v20 = (id)GKOSLoggers(v17);
    }
    unsigned int v21 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      int v22 = *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "GKDatabaseConnection couldn't recreate the database due to returnFlagFileOpen=%d - closing and throwing exception",  buf,  8u);
    }

    sqlite3_close(*(sqlite3 **)(*(void *)(a1 + 32) + 24LL));
    uint64_t v19 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"failed to open database (%d)",  *(unsigned int *)(a1 + 72));
  }

  else
  {
    uint64_t v19 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"failed to set pragmas for database connection and to remove existing database.(%d)",  *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
  }

  id v23 = (void *)objc_claimAutoreleasedReturnValue(v19);
  id v24 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  @"GKDatabaseInaccessibleException",  v23,  0LL));

  objc_exception_throw(v24);
  -[GKDatabaseConnection close](v25, v26);
}

void sub_1000B6E50(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  CFDictionaryApplyFunction( *(CFDictionaryRef *)(*(void *)(a1 + 32) + 8LL),  (CFDictionaryApplierFunction)finalize_stmt_applier,  0LL);
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(*(void *)v1 + 8LL));
  uint64_t v2 = sqlite3_close(*(sqlite3 **)(*(void *)v1 + 24LL));
  if ((_DWORD)v2)
  {
    uint64_t v3 = v2;
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers(v2);
    }
    uint64_t v5 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000B7858(v1, v5, v3);
    }
  }

  else
  {
    *(void *)(*(void *)v1 + 24LL) = 0LL;
  }

  uint64_t v6 = GKAtomicCompareAndSwap32Barrier(1LL, 0LL, &unk_1002BB568);
  if ((v6 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(v6);
    }
    uint64_t v8 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "databaseCloseReentrancyCount out of sync",  v9,  2u);
    }
  }

uint64_t sub_1000B7080(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 24LL));
}

uint64_t sub_1000B719C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 24LL));
}

void sub_1000B72EC(uint64_t a1)
{
  if (sqlite3_exec(*(sqlite3 **)(*(void *)(a1 + 32) + 24LL), "COMMIT", 0LL, 0LL, 0LL))
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue( +[NSError _gkErrorForDatabase:]( &OBJC_CLASS___NSError,  "_gkErrorForDatabase:",  *(void *)(*(void *)(a1 + 32) + 24LL)));
    uint64_t v3 = (void *)v2;
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers(v2);
    }
    uint64_t v5 = (os_log_s *)os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_1000B7994((uint64_t)v3, v5);
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000B75E0;
  v9[3] = &unk_10026B030;
  id v11 = *(id *)(a1 + 48);
  id v8 = v3;
  id v10 = v8;
  dispatch_async(v7, v9);
}

void sub_1000B74A0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B75E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000B7654( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000B7668()
{
}

void sub_1000B7694(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
  sub_100038C40();
  sub_1000B7654( (void *)&_mh_execute_header,  v6,  v7,  "unable to reset prepared statement for SQL: %@ due to id result = %@",  v8,  v9,  v10,  v11,  2u);

  sub_100020800();
}

void sub_1000B7738(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
  sub_100038C40();
  sub_1000B7654( (void *)&_mh_execute_header,  v6,  v7,  "unable to create prepared statement for SQL: %@ due to result=%@",  v8,  v9,  v10,  v11,  2u);

  sub_100020800();
}

void sub_1000B77DC(uint64_t a1, os_log_s *a2)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 24LL);
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "unable to sqlite3_exec  due to error %s",  (uint8_t *)&v3,  0xCu);
}

void sub_1000B7858(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 16LL);
  uint64_t v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
  int v7 = 138412546;
  uint64_t v8 = v4;
  sub_100038C40();
  _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "unable to close database connection to %@due to id result = %@",  (uint8_t *)&v7,  0x16u);

  sub_100020800();
}

void sub_1000B7910()
{
}

void sub_1000B793C()
{
}

void sub_1000B7968()
{
}

void sub_1000B7994(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Unable to write record to cache. Rolling back transaction: %@",  (uint8_t *)&v2,  0xCu);
}

void sub_1000B7BAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000B7BC4(uint64_t a1, sqlite3 *a2)
{
  uint64_t result = sqlite3_exec( a2, (const char *)[*(id *)(a1 + 32) UTF8String], 0, 0, 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_1000B8B60(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a2 ttrURLString]);
  int v5 = 138412290;
  uint8_t v6 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Can't handle action of filing a radar due to invalid url: %@",  (uint8_t *)&v5,  0xCu);
}

void sub_1000B8FF0(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 48);
  int v5 = (void *)v2[1];
  uint64_t v6 = v2[2];
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v2 credential]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 playerInternal]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 _gkPlistXMLDataForClient:v6 player:v8]);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(a1 + 40);
  uint64_t v12 = *(void *)(v10 + 16);
  uint64_t v13 = *(void *)(v10 + 24);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1000B90EC;
  v15[3] = &unk_100270BE8;
  id v16 = v11;
  id v14 = *(id *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 32);
  id v18 = v14;
  [v5 readDataForBagKey:v3 postData:v9 client:v12 credential:v13 completion:v15];
}

void sub_1000B90EC(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = v8;
  if (v8)
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers(v8);
    }
    uint64_t v11 = (os_log_s *)os_log_GKError;
    id v8 = (id)os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v8) {
      sub_1000B95C0(a1, (uint64_t)v9, v11);
    }
  }

  if (*(void *)(a1 + 48))
  {
    if (!os_log_GKGeneral) {
      id v12 = (id)GKOSLoggers(v8);
    }
    uint64_t v13 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "postRequest:Response handler exist for read data for bag key call",  buf,  2u);
    }

    if (v7)
    {
      id v19 = 0LL;
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary _gkDictionaryWithServerData:error:]( &OBJC_CLASS___NSDictionary,  "_gkDictionaryWithServerData:error:",  v7,  &v19));
      id v15 = v19;
      id v16 = (void *)objc_claimAutoreleasedReturnValue( +[GKResource resourceWithID:representedItem:TTL:]( &OBJC_CLASS___GKResource,  "resourceWithID:representedItem:TTL:",  *(void *)(a1 + 32),  v14,  a4));
    }

    else
    {
      id v16 = 0LL;
      id v14 = 0LL;
      id v15 = 0LL;
    }

    uint64_t v17 = *(void *)(a1 + 48);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) errorForBagError:v9 serverError:v15]);
    (*(void (**)(uint64_t, void *, void *))(v17 + 16))(v17, v16, v18);
  }
}

void sub_1000B93C0(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  uint64_t v3 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "postRequest: forBagKey: result:", buf, 2u);
  }

  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  id v7 = (void *)v4[1];
  uint64_t v8 = v4[2];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 credential]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 playerInternal]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 _gkPlistXMLDataForClient:v8 player:v10]);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = *(void *)(v12 + 24);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1000B9508;
  v15[3] = &unk_10026B358;
  id v16 = *(id *)(a1 + 56);
  [v7 readDataForBagKey:v5 postData:v11 client:v13 credential:v14 completion:v15];
}

uint64_t sub_1000B9508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_1000B95C0(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "postRequest:Failed to read data for bag key (%@) due to error: %@",  (uint8_t *)&v4,  0x16u);
}

void sub_1000B991C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  id v2 = (void *)qword_1002BB570;
  qword_1002BB570 = (uint64_t)v1;

  [(id)qword_1002BB570 setDateStyle:1];
  _[(id)qword_1002BB570 setTimeStyle:2];
}

id sub_1000B9BE4(id a1, NSString *a2, unint64_t a3)
{
  return +[GKResource resourceWithID:](&OBJC_CLASS___GKResource, "resourceWithID:", a2);
}

void sub_1000B9DE4(uint64_t a1)
{
  uint64_t v1 = -[GKResource initWithResourceID:representedItem:TTL:]( objc_alloc(&OBJC_CLASS___GKResource),  "initWithResourceID:representedItem:TTL:",  *(void *)(a1 + 32),  0LL,  0.0);
  id v2 = (void *)qword_1002BB580;
  qword_1002BB580 = (uint64_t)v1;
}

void sub_1000B9ED8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000B9EF0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a3 = 1;
  }

  return result;
}

BOOL sub_1000B9F40(id a1, GKResource *a2, BOOL *a3)
{
  return -[GKResource isExpired](a2, "isExpired", a3);
}

BOOL sub_1000B9F54(id a1, GKResource *a2, BOOL *a3)
{
  return -[GKResource isInvalid](a2, "isInvalid", a3);
}

BOOL sub_1000B9F68(id a1, GKResource *a2, BOOL *a3)
{
  uint64_t v3 = a2;
  if (-[GKResource isExpired](v3, "isExpired")) {
    LOBYTE(v4) = 0;
  }
  else {
    unsigned int v4 = !-[GKResource isInvalid](v3, "isInvalid");
  }

  return v4;
}

BOOL sub_1000B9FB8(id a1, GKResource *a2, BOOL *a3)
{
  uint64_t v3 = a2;
  if (-[GKResource isExpired](v3, "isExpired")) {
    unsigned __int8 v4 = 1;
  }
  else {
    unsigned __int8 v4 = -[GKResource isInvalid](v3, "isInvalid");
  }

  return v4;
}

BOOL sub_1000BA020(id a1, GKResource *a2)
{
  id v2 = a2;
  if (-[GKResource isInvalid](v2, "isInvalid")) {
    unsigned __int8 v3 = 1;
  }
  else {
    unsigned __int8 v3 = -[GKResource isExpired](v2, "isExpired");
  }

  return v3;
}

BOOL sub_1000BA070(id a1, GKResource *a2)
{
  return -[GKResource isExpired](a2, "isExpired");
}

BOOL sub_1000BA084(id a1, GKResource *a2)
{
  return -[GKResource isInvalid](a2, "isInvalid");
}

void GKBindParam(sqlite3_stmt *a1, const char *a2, NSString *a3)
{
  uint64_t v7 = a3;
  int v5 = sqlite3_bind_parameter_index(a1, a2);
  if (v5 >= 1)
  {
    __int16 v6 = v7;
    sqlite3_bind_text( a1,  v5,  -[NSString UTF8String](v6, "UTF8String"),  (int)-[NSString lengthOfBytesUsingEncoding:](v6, "lengthOfBytesUsingEncoding:", 4LL),  (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

void sub_1000BA468( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t GKBindParam(sqlite3_stmt *a1, const char *a2, sqlite3_int64 a3)
{
  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  return result;
}

{
  uint64_t result;
  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  return result;
}

uint64_t GKBindParam(sqlite3_stmt *a1, const char *a2, int a3)
{
  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  return result;
}

{
  uint64_t result;
  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  return result;
}

{
  uint64_t result;
  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  return result;
}

{
  uint64_t result;
  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  return result;
}

uint64_t GKBindParam(sqlite3_stmt *a1, const char *a2, double a3)
{
  uint64_t result = sqlite3_bind_parameter_index(a1, a2);
  return result;
}

void GKBindParam(sqlite3_stmt *a1, const char *a2, NSDate *a3)
{
  uint64_t v7 = a3;
  int v5 = sqlite3_bind_parameter_index(a1, a2);
  if (v5 >= 1)
  {
    __int16 v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSDate _gkServerTimestamp](v7, "_gkServerTimestamp"));
    sqlite3_bind_int64(a1, v5, (sqlite3_int64)[v6 longLongValue]);
  }
}

void sub_1000BA69C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void GKBindParam(sqlite3_stmt *a1, const char *a2, NSNumber *a3)
{
  uint64_t v7 = a3;
  int v5 = sqlite3_bind_parameter_index(a1, a2);
  if (v5 >= 1)
  {
    -[NSNumber doubleValue](v7, "doubleValue");
    sqlite3_bind_double(a1, v5, v6);
  }
}

void sub_1000BA71C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void GKBindParam(sqlite3_stmt *a1, const char *a2, NSData *a3)
{
  uint64_t v7 = a3;
  int v5 = sqlite3_bind_parameter_index(a1, a2);
  if (v5 >= 1)
  {
    double v6 = v7;
    sqlite3_bind_blob( a1,  v5,  -[NSData bytes](v6, "bytes"),  (int)-[NSData length](v6, "length"),  (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

void sub_1000BA7FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000BAB14(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKAMPController controller](&OBJC_CLASS___GKAMPController, "controller"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000BABDC;
  void v8[3] = &unk_100270E08;
  id v12 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  [v4 getBagWithCompletion:v8];
}

void sub_1000BABDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = v3;
  if (v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 stringForKey:@"arcade-iap-family-id"]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1000BACFC;
    v11[3] = &unk_100270DE0;
    id v6 = *(id *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void **)(a1 + 48);
    id v12 = v6;
    uint64_t v13 = v7;
    id v14 = v8;
    id v15 = *(id *)(a1 + 56);
    [v5 valueWithCompletion:v11];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v9 = (id)GKOSLoggers(0LL);
    }
    uint64_t v10 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000BAE28(v10);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_1000BACFC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v18 = a2;
  id v6 = a4;
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 familyID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 stringValue]);
    unsigned int v10 = [v9 isEqualToString:v18];

    if (v10)
    {
      unsigned __int8 v11 = [*(id *)(a1 + 40) hasConsumedArcadeSubscription:*(void *)(a1 + 48) arcadeFamilyId:v18];
      id v12 = *(void **)(a1 + 32);
      if (v12)
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 expiryDate]);
        id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
        id v15 = [v13 compare:v14];

        uint64_t v16 = 1LL;
        if (((v18 != 0LL) & v11) != 0) {
          uint64_t v16 = 2LL;
        }
        if (v15 == (id)1) {
          uint64_t v17 = 3LL;
        }
        else {
          uint64_t v17 = v16;
        }
      }

      else if (((v18 != 0LL) & v11) != 0)
      {
        uint64_t v17 = 2LL;
      }

      else
      {
        uint64_t v17 = 1LL;
      }

      [*(id *)(a1 + 40) setArcadeSubscriptionState:v17];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000BAE28(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Cannot setup arcade subscription state without a bag.",  v1,  2u);
}

void sub_1000BAEA8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___GKBadgeController);
  id v2 = (void *)qword_1002BB590;
  qword_1002BB590 = (uint64_t)v1;
}

void sub_1000BB0B8(uint64_t a1)
{
  if (qword_1002BB5A0 == *(void *)(a1 + 40))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  4LL));
    for (uint64_t i = 0LL; i != 4; ++i)
    {
      unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _plistKeyForBadgeType:i]);
      [v2 setObject:*(void *)(*(void *)(a1 + 32) + 8 * i + 8) forKeyedSubscript:v4];
    }

    id v29 = 0LL;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v2,  200LL,  0LL,  &v29));
    id v6 = v29;
    uint64_t v7 = v6;
    if (v5)
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _badgeCountURL]);
      id v28 = v7;
      unsigned __int8 v9 = [v5 writeToURL:v8 options:1 error:&v28];
      id v10 = v28;

      if ((v9 & 1) == 0)
      {
        if (!os_log_GKGeneral) {
          id v12 = (id)GKOSLoggers(v11);
        }
        uint64_t v13 = (os_log_s *)os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_1000BCA50((uint64_t)v10, v13, v14, v15, v16, v17, v18, v19);
        }
      }
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v20 = (id)GKOSLoggers(v6);
      }
      unsigned int v21 = (os_log_s *)os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_1000BC9EC((uint64_t)v7, v21, v22, v23, v24, v25, v26, v27);
      }
      id v10 = v7;
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 48LL) = 0;
  }

void sub_1000BB284(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (!v2[1])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _badgeCountURL]);
    id v36 = 0LL;
    unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithContentsOfURL:options:error:]( &OBJC_CLASS___NSData,  "dataWithContentsOfURL:options:error:",  v3,  1LL,  &v36));
    id v5 = v36;

    if (v4)
    {
      id v34 = 0LL;
      uint64_t v35 = 200LL;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v4,  1LL,  &v35,  &v34));
      id v7 = v34;

      if (v6)
      {
        for (uint64_t i = 1LL; i != 5; ++i)
        {
          id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _plistKeyForBadgeType:i - 1]);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:v10]);
          id v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a1 + 32);
            id v14 = v11;
            uint64_t v15 = *(void **)(v13 + 8 * i);
            *(void *)(v13 + 8 * i) = v14;
          }

          else
          {
            uint64_t v16 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
            uint64_t v17 = *(void *)(a1 + 32);
            uint64_t v15 = *(void **)(v17 + 8 * i);
            *(void *)(v17 + 8 * i) = v16;
          }
        }
      }

      else
      {
        if (!os_log_GKGeneral) {
          id v22 = (id)GKOSLoggers(v8);
        }
        uint64_t v23 = (os_log_s *)os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_1000BCAB4((uint64_t)v7, v23, v24, v25, v26, v27, v28, v29);
        }
        for (uint64_t j = 8LL; j != 40; j += 8LL)
        {
          uint64_t v31 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          uint64_t v32 = *(void *)(a1 + 32);
          uint64_t v33 = *(void **)(v32 + j);
          *(void *)(v32 + j) = v31;
        }
      }
    }

    else
    {
      for (uint64_t k = 8LL; k != 40; k += 8LL)
      {
        uint64_t v19 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v20 = *(void *)(a1 + 32);
        unsigned int v21 = *(void **)(v20 + k);
        *(void *)(v20 + k) = v19;
      }

      id v7 = v5;
    }
  }

void sub_1000BB690(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    [*(id *)(a1 + 32) badgeBundleID:*(void *)(a1 + 40) badgeCount:*(void *)(a1 + 48)];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(v5);
    }
    uint64_t v8 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned __int8 v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "GKBadgeController - RegisterBadgePermission denied",  v9,  2u);
    }
  }
}

void sub_1000BB740(uint64_t a1)
{
  uint64_t v2 = GKGameCenterIdentifier;
  if ([*(id *)(a1 + 32) isEqualToString:GKGameCenterIdentifier])
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
    objc_msgSend( v3,  "setBadgeCount:forType:",  objc_msgSend(*(id *)(a1 + 40), "_badgeCountForBundleID:badgeType:", v2, 0),  0);
    objc_msgSend( v3,  "setBadgeCount:forType:",  objc_msgSend(*(id *)(a1 + 40), "_badgeCountForBundleID:badgeType:", v2, 1),  1);
    objc_msgSend( v3,  "setBadgeCount:forType:",  objc_msgSend(*(id *)(a1 + 40), "_badgeCountForBundleID:badgeType:", v2, 2),  2);
  }

id sub_1000BBEC4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _badgeCountForBundleID:*(void *)(a1 + 40) badgeType:*(void *)(a1 + 56)];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = result;
  return result;
}

void sub_1000BC2C4(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _dictionaryForBadgeType:*(void *)(a1 + 48)]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 56)));
  [v3 setObject:v2 forKeyedSubscript:*(void *)(a1 + 40)];

  *(_BYTE *)(*(void *)(a1 + 32) + 48LL) = 1;
  objc_msgSend( *(id *)(a1 + 32),  "badgeApplicationWithBundleID:badgeCount:",  *(void *)(a1 + 40),  objc_msgSend(*(id *)(a1 + 32), "_totalBadgeCountForBundleID:", *(void *)(a1 + 40)));
}

void sub_1000BC3B0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  for (uint64_t i = 8LL; i != 40; i += 8LL)
  {
    unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + i) allKeys]);
    [v2 addObjectsFromArray:v4];
  }

  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v5 = v2;
  id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      unsigned __int8 v9 = 0LL;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        objc_msgSend( *(id *)(a1 + 32),  "badgeApplicationWithBundleID:badgeCount:",  *(void *)(*((void *)&v12 + 1) + 8 * (void)v9),  objc_msgSend( *(id *)(a1 + 32),  "_totalBadgeCountForBundleID:",  *(void *)(*((void *)&v12 + 1) + 8 * (void)v9),  (void)v12));
        unsigned __int8 v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v7);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  uint64_t v11 = GKGameCenterIdentifier;
  objc_msgSend( v10,  "setBadgeCount:forType:",  objc_msgSend(*(id *)(a1 + 32), "_badgeCountForBundleID:badgeType:", GKGameCenterIdentifier, 0),  0);
  objc_msgSend( v10,  "setBadgeCount:forType:",  objc_msgSend(*(id *)(a1 + 32), "_badgeCountForBundleID:badgeType:", v11, 1),  1);
  objc_msgSend( v10,  "setBadgeCount:forType:",  objc_msgSend(*(id *)(a1 + 32), "_badgeCountForBundleID:badgeType:", v11, 2),  2);
}

void sub_1000BC5F4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  for (uint64_t i = 8LL; i != 40; i += 8LL)
  {
    unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + i) allKeys]);
    [v2 addObjectsFromArray:v4];

    [*(id *)(*(void *)(a1 + 32) + i) removeAllObjects];
    *(_BYTE *)(*(void *)(a1 + 32) + 48LL) = 1;
  }

  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v5 = v2;
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      unsigned __int8 v9 = 0LL;
      do
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        objc_msgSend( *(id *)(a1 + 32),  "badgeApplicationWithBundleID:badgeCount:",  *(void *)(*((void *)&v11 + 1) + 8 * (void)v9),  0,  (void)v11);
        unsigned __int8 v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v7);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  [v10 setBadgeCount:0 forType:0];
  [v10 setBadgeCount:0 forType:1];
  [v10 setBadgeCount:0 forType:2];
}

void sub_1000BC8F8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _totalBadgeCountForBundleID:*(void *)(a1 + 40)])
  {
    uint64_t v2 = -[UNUserNotificationCenter initWithBundleIdentifier:]( objc_alloc(&OBJC_CLASS___UNUserNotificationCenter),  "initWithBundleIdentifier:",  *(void *)(a1 + 40));
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    _DWORD v3[2] = sub_1000BC998;
    v3[3] = &unk_100270F18;
    id v4 = *(id *)(a1 + 48);
    -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:]( v2,  "requestAuthorizationWithOptions:completionHandler:",  1LL,  v3);
  }

uint64_t sub_1000BC998(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000BC9EC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BCA50( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BCAB4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BD22C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (!v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"Assertion failed"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKCacheObject.m"));
    id v7 = objc_claimAutoreleasedReturnValue([v6 lastPathComponent]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@ (self->_lookup != ((void *)0))\n[%s (%s:%d)]",  v5,  "-[GKUniqueObjectIDLookup _populateWithContext:]_block_invoke",  [v7 UTF8String],  105));

    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  @"GameKit Exception",  @"%@",  v8);
    id v4 = *(void **)(*(void *)(a1 + 32) + 16LL);
  }

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000BD3B0;
  v12[3] = &unk_100270F40;
  id v13 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  id v14 = v9;
  uint64_t v15 = v10;
  id v16 = *(id *)(a1 + 56);
  id v17 = v3;
  id v11 = v3;
  [v4 writeToDictionary:v12];
}

void sub_1000BD3B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 removeAllObjects];
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v23 objects:v35 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v24;
    *(void *)&__int128 v5 = 136315906LL;
    __int128 v20 = v5;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", @"objectID", v20));
        uint64_t v11 = objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:*(void *)(a1 + 40)]);
        __int128 v12 = (void *)v11;
        if (v10) {
          BOOL v13 = v11 == 0;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13)
        {
          uint64_t v14 = objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v11]);
          uint64_t v15 = (void *)v14;
          if (v14)
          {
            if (!os_log_GKGeneral) {
              id v16 = (id)GKOSLoggers(v14);
            }
            id v17 = (void *)os_log_GKCache;
            if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
            {
              cls = *(objc_class **)(*(void *)(a1 + 48) + 8LL);
              uint64_t v18 = v17;
              Name = class_getName(cls);
              *(_DWORD *)buf = v20;
              uint64_t v28 = Name;
              __int16 v29 = 2112;
              id v30 = v10;
              __int16 v31 = 2112;
              uint64_t v32 = v15;
              __int16 v33 = 2112;
              id v34 = v12;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "UNIQUENESS FAILURE for %s:%@ and %@ found for %@",  buf,  0x2Au);
            }

            [*(id *)(a1 + 56) addObject:v15];
          }

          [v3 setObject:v10 forKeyedSubscript:v12];
        }
      }

      id v6 = [obj countByEnumeratingWithState:&v23 objects:v35 count:16];
    }

    while (v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_1000BDC5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8LL * (void)i);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v9, (void)v11));
        if (v10) {
          [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:v9];
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v6);
  }
}

void sub_1000BDD8C(id *a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectRegisteredForID:v5]);
  if (v6)
  {
    [a1[5] setObject:v6 forKeyedSubscript:v7];
    [a1[6] removeObject:v5];
  }
}

void sub_1000BDE0C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 valueForKeyPath:*(void *)(a1 + 32)]);
  if (v3) {
    [*(id *)(a1 + 40) setObject:v4 forKeyedSubscript:v3];
  }
}

void sub_1000BDE64(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));
  if (v3) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, id))(v4 + 16))(v4, v7);
    uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      id v3 = (void *)v6;
      [*(id *)(a1 + 40) addObject:v6];
LABEL_5:
      [*(id *)(a1 + 48) addObject:v3];
    }
  }
}

void sub_1000BDEE8(uint64_t a1, void *a2)
{
}

uint64_t sub_1000BDF14(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 32LL));
}

uint64_t sub_1000BE1D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000BE1E0(uint64_t a1, void *a2)
{
  return [a2 addEntriesFromDictionary:*(void *)(a1 + 32)];
}

id sub_1000BF454(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
}

void sub_1000BF5B4(id a1)
{
  uint64_t v1 = (void *)qword_1002BB5A8;
  qword_1002BB5A8 = (uint64_t)&off_100288570;
}

void sub_1000BF8A8(id *a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:v9]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[5] valueForKeyPath:v5]);
  uint64_t v8 = v7;
  if (v7 != v6 && ([v7 isEqualToString:v6] & 1) == 0)
  {
    [a1[6] addObject:v9];
    [a1[5] setValue:v6 forKeyPath:v5];
    [a1[5] deleteCachedImage:v8];
  }
}

void sub_1000BFBDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000BFBF4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000BFC04(uint64_t a1)
{
}

void sub_1000BFC0C(uint64_t a1, void *a2, uint64_t a3)
{
  id v10 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForKeyPath:a3]);
  if (v5)
  {
    uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    if (!v6)
    {
      id v7 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  4LL);
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    }

    [v6 setObject:v5 forKeyedSubscript:v10];
  }
}

void sub_1000C00A0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v6 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 valueForKeyPath:v6]);
  [v4 deleteCachedImage:v5];

  [*(id *)(a1 + 32) setValue:0 forKeyPath:v6];
}

void sub_1000C0368( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000C0380(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKeyPath:"));

  if (v6)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

id sub_1000C1468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setValue:0 forKeyPath:a3];
}

id sub_1000C1D88(id a1, GKPlayerInternal *a2, unint64_t a3)
{
  return -[GKPlayerInternal playerID](a2, "playerID", a3);
}

id sub_1000C1F98(uint64_t a1, void *a2)
{
  id v3 = *(objc_class **)(a1 + 40);
  id v4 = a2;
  id v5 = [[v3 alloc] initWithManagedObjectContext:*(void *)(a1 + 32)];
  [v5 setPlayerID:v4];

  return v5;
}

void sub_1000C2BBC(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v9 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v9 path]);
  unsigned __int8 v8 = [v6 fileExistsAtPath:v7];

  if ((v8 & 1) == 0)
  {
    [*(id *)(a1 + 32) setPhotoPending:0];
    *a4 = 1;
  }
}

uint64_t sub_1000C2C60(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 isEqualToString:@"everyone"])
  {
    uint64_t v3 = 0LL;
  }

  else if ([v2 isEqualToString:@"friends"])
  {
    uint64_t v3 = 1LL;
  }

  else
  {
    [v2 isEqualToString:@"me"];
    uint64_t v3 = 2LL;
  }

  return v3;
}

uint64_t sub_1000C2CD0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 isEqualToString:GKGlobalFriendListAccessAllowed])
  {
    uint64_t v3 = 0LL;
  }

  else if ([v2 isEqualToString:GKGlobalFriendListAccessDenied])
  {
    uint64_t v3 = 1LL;
  }

  else
  {
    [v2 isEqualToString:GKGlobalFriendListAccessUndetermined];
    uint64_t v3 = 2LL;
  }

  return v3;
}

void sub_1000C3924(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSString, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {
    [*(id *)(a1 + 32) removeObject:v3];
  }

  else
  {
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___GKPlayerInternal, v6);
    uint64_t isKindOfClass = objc_opt_isKindOfClass(v3, v7);
    if ((isKindOfClass & 1) != 0)
    {
      id v9 = *(void **)(a1 + 32);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 playerID]);
      [v9 removeObject:v10];
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v11 = (id)GKOSLoggers(isKindOfClass);
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_1000D801C();
      }
    }
  }
}

void sub_1000C3EFC(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 isEqualToString:*(void *)(a1 + 32)])
  {
    id v3 = (id *)(a1 + 40);
  }

  else if ([*(id *)(a1 + 48) containsObject:v5])
  {
    id v3 = (id *)(a1 + 56);
  }

  else if ([*(id *)(a1 + 64) containsObject:v5])
  {
    id v3 = (id *)(a1 + 72);
  }

  else
  {
    unsigned int v4 = [*(id *)(a1 + 80) containsObject:v5];
    id v3 = (id *)(a1 + 96);
    if (v4) {
      id v3 = (id *)(a1 + 88);
    }
  }

  [*v3 addObject:v5];
}

id sub_1000C410C(uint64_t a1, void *a2)
{
  id v3 = a2;
  else {
    id v4 = 0LL;
  }

  return v4;
}

void sub_1000C4780(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"bundle-id"]);
  if (v3) {
    [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:v3];
  }
}

id sub_1000C47DC(uint64_t a1, void *a2)
{
  id v3 = *(objc_class **)(a1 + 48);
  id v4 = a2;
  id v5 = [[v3 alloc] initWithManagedObjectContext:*(void *)(a1 + 32)];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v4]);

  [v5 updateWithGameDescriptor:v6];
  return v5;
}

id sub_1000C484C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"bundle-id"]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v5]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"short-bundle-version"]);
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"bundle-version"]);
  id v9 = (void *)v8;
  if (v7)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([v6 shortBundleVersion]);
    if (([v2 isEqualToString:v7] & 1) == 0)
    {

LABEL_11:
      [v6 updateWithGameDescriptor:v4];
      [v6 expire];
      [v6 invalidate];
      goto LABEL_12;
    }

    if (!v9)
    {

      goto LABEL_12;
    }
  }

  else if (!v8)
  {
    goto LABEL_12;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleVersion]);
  unsigned __int8 v11 = [v10 isEqualToString:v9];

  if (v7) {
  if ((v11 & 1) == 0)
  }
    goto LABEL_11;
LABEL_12:
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v6 managedObjectContext]);
  __int128 v13 = *(void **)(a1 + 40);

  if (v12 != v13)
  {
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"The managed object context (moc) that requested a cached game object did not match the moc owned by the game. This is an illegal state and execution cannot continue."));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKCacheObject.m"));
    id v16 = objc_claimAutoreleasedReturnValue([v15 lastPathComponent]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@ (game.managedObjectContext == moc)\n[%s (%s:%d)]",  v14,  "+[GKGameCacheObject _gamesForFullGameDescriptors:context:]_block_invoke_3",  [v16 UTF8String],  1389));

    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  @"GameKit Exception",  @"%@",  v17);
  }

  return v6;
}

id sub_1000C5F70(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"achievement-id"]);
  id v7 = [v6 isEqualToString:*(void *)(a1 + 32)];

  if ((_DWORD)v7) {
    *a4 = 1;
  }
  return v7;
}

id sub_1000C6118(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 managedObjectContext]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v3,  v4));

  return v5;
}

GKListEntryCacheObject *__cdecl sub_1000C6180(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKAchievementThatAFriendHasCacheObject),  "initWithManagedObjectContext:",  v3);

  return (GKListEntryCacheObject *)v4;
}

GKListEntryCacheObject *__cdecl sub_1000C63FC(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKAchievementDescriptionCacheObject),  "initWithManagedObjectContext:",  v3);

  return (GKListEntryCacheObject *)v4;
}

GKListEntryCacheObject *__cdecl sub_1000C6CD8(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKAchievementCacheObject),  "initWithManagedObjectContext:",  v3);

  return (GKListEntryCacheObject *)v4;
}

void sub_1000C6FA8(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
  if (v3) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v3];
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v5 groupIdentifier]);

  if (v4) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v4];
  }
}

id sub_1000C702C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  if (v4)
  {
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 groupIdentifier]);

    if (!v5) {
      goto LABEL_9;
    }
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 internalRepresentation]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v3 identifier]);
  if (v6)
  {
    id v7 = (void *)v6;
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v9]);

    if (v10) {
      goto LABEL_8;
    }
  }

  uint64_t v11 = objc_claimAutoreleasedReturnValue([v3 groupIdentifier]);
  if (v11)
  {
    __int128 v12 = (void *)v11;
    __int128 v13 = *(void **)(a1 + 32);
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v3 groupIdentifier]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v14]);

    if (v10)
    {
LABEL_8:
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v10 lastReportedDate]);
      [v5 setLastReportedDate:v15];

      [v10 percentComplete];
      [v5 setPercentComplete:v16];
      id v17 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerInternal internalRepresentation]( &OBJC_CLASS___GKPlayerInternal,  "internalRepresentation"));
      [v17 setPlayerID:*(void *)(a1 + 40)];
      [v5 setPlayer:v17];
    }
  }

GKGameRecordCacheObject *sub_1000C75E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
  if (!v4) {
    goto LABEL_5;
  }
  id v5 = (GKGameRecordCacheObject *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v4]);
  if (!v5)
  {
    if (*(void *)(a1 + 40))
    {
      id v5 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKGameRecordCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 40));
      -[GKGameRecordCacheObject setGame:](v5, "setGame:", v3);
      -[GKGameRecordCacheObject setPlayer:](v5, "setPlayer:", *(void *)(a1 + 48));
      goto LABEL_6;
    }

LABEL_5:
    id v5 = 0LL;
  }

  v6[2](v6);
}

  sub_1001296D0();
  id v4 = sub_10013A624();
  id v5 = sub_100139D60(v4);
  id v7 = v3;
  if (!(v3 >> 62))
  {
    uint64_t v8 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v8) {
      goto LABEL_7;
    }
LABEL_24:
    sub_1001322A0(v5, v6);
    id v30 = sub_10013604C((uint64_t)_swiftEmptyArrayStorage);
    id v3 = (unint64_t)sub_100135A64(v30);
    sub_100132324(v3, v31);
    return (char *)v3;
  }

  sub_10013A624();
  uint64_t v8 = sub_10013A694();
  id v5 = sub_1001322A0(v8, v29);
  if (!v8) {
    goto LABEL_24;
  }
LABEL_7:
  uint64_t result = sub_10013A724(v5, v8 & ~(v8 >> 63));
  if ((v8 & 0x8000000000000000LL) == 0)
  {
    id v10 = 0LL;
    uint64_t v32 = v7 & 0xC000000000000001LL;
    __int16 v33 = v7;
    do
    {
      if (v32) {
        uint64_t v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
      }
      else {
        uint64_t v11 = *(id *)(v7 + 8 * v10 + 32);
      }
      __int128 v12 = v11;
      __int128 v13 = objc_msgSend(v11, "playerID", v32);
      __int128 v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      float v16 = v15;

      id v17 = [v12 gameBundleID];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      __int128 v20 = v19;

      id v22 = _swiftEmptyArrayStorage[2];
      unsigned int v21 = _swiftEmptyArrayStorage[3];
      if (v22 >= v21 >> 1) {
        id v5 = (uint64_t)sub_100137634((char *)(v21 > 1), v22 + 1, 1);
      }
      ++v10;
      _swiftEmptyArrayStorage[2] = v22 + 1;
      __int128 v23 = &_swiftEmptyArrayStorage[5 * v22];
      void v23[4] = v14;
      v23[5] = v16;
      v23[6] = v18;
      v23[7] = v20;
      uint8_t v23[8] = v12;
      id v7 = v33;
    }

    while (v8 != v10);
    goto LABEL_24;
  }

  __break(1u);
  return result;
}

  void v10[4] = v17;
  if ((v18 & 1) != 0) {
    unsigned int v21 = *(void *)(*(void *)(*v5 + 56) + 8 * v17);
  }
  else {
    unsigned int v21 = 0LL;
  }
  *id v10 = v21;
  return sub_10014AF10;
}

  uint64_t v11 = swift_allocObject(&unk_100276010, 24LL, 7LL);
  *(void *)(v11 + 16) = v8;
  __int128 v12 = self;
  MatchReporter.recordMatchComplete(matchType:result:completion:)();

  swift_release(v11);
  swift_bridgeObjectRelease(a4, v13);
  swift_bridgeObjectRelease(a3, v14);
}

GKListEntryCacheObject *__cdecl sub_1000C8350(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKLeaderboardSetCacheObject),  "initWithManagedObjectContext:",  v3);

  return (GKListEntryCacheObject *)v4;
}

GKLeaderboardTitleMapCacheObject *sub_1000C875C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"category-name"]);
  if (v4)
  {
    id v5 = (GKLeaderboardTitleMapCacheObject *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v4]);
    if (!v5)
    {
      uint64_t v6 = objc_alloc(&OBJC_CLASS___GKLeaderboardTitleMapCacheObject);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) managedObjectContext]);
      id v5 = -[GKCacheObject initWithManagedObjectContext:](v6, "initWithManagedObjectContext:", v7);

      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"category-name"]);
      -[GKLeaderboardTitleMapCacheObject setIdentifier:](v5, "setIdentifier:", v8);

      id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"category-title"]);
      -[GKLeaderboardTitleMapCacheObject setLocalizedTitle:](v5, "setLocalizedTitle:", v9);

      [*(id *)(a1 + 32) setObject:v5 forKey:v4];
    }
  }

  else
  {
    id v5 = 0LL;
  }

  return v5;
}

GKListEntryCacheObject *__cdecl sub_1000C8B3C(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKLeaderboardTitleMapCacheObject),  "initWithManagedObjectContext:",  v3);

  return (GKListEntryCacheObject *)v4;
}

GKListEntryCacheObject *__cdecl sub_1000C9000(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKLeaderboardListEntryCacheObject),  "initWithManagedObjectContext:",  v3);

  return (GKListEntryCacheObject *)v4;
}

uint64_t sub_1000C9D80(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    *a4 = 1;
  }
  return result;
}

GKFriendListEntryCacheObject *sub_1000CA548(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSString, v7);
  if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0)
  {
    id v10 = v5;
    id v11 = [v10 isEqual:&stru_10027B720];
    if ((_DWORD)v11)
    {
      if (!os_log_GKGeneral) {
        id v12 = (id)GKOSLoggers(v11);
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_1000D827C();
      }
    }
  }

  else
  {
    uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSDictionary, v9);
    uint64_t isKindOfClass = objc_opt_isKindOfClass(v5, v13);
    if ((isKindOfClass & 1) != 0)
    {
      id v15 = v5;
      uint64_t v16 = objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:@"player-id"]);
      id v10 = (id)v16;
      if (v16)
      {
        [*(id *)(a1 + 32) setObject:v15 forKey:v16];
      }

      else
      {
        if (!os_log_GKGeneral) {
          id v18 = (id)GKOSLoggers(0LL);
        }
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_1000D82B4();
        }
      }
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v17 = (id)GKOSLoggers(isKindOfClass);
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_1000D8314();
      }
      id v10 = 0LL;
    }
  }

  uint64_t v19 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKFriendListEntryCacheObject),  "initWithManagedObjectContext:",  v6);

  -[GKFriendListEntryCacheObject setPlayerID:](v19, "setPlayerID:", v10);
  return v19;
}

void sub_1000CA8FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 playerID]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v5]);

  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v7);
  }
  uint64_t v9 = (os_log_s *)os_log_GKDaemon;
  BOOL v10 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
  if (v10)
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v46 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "populating friend profile cache info with info from server:%@",  buf,  0xCu);
  }

  if (v6)
  {
    uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSDictionary, v11);
    if ((objc_opt_isKindOfClass(v6, v12) & 1) == 0)
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = GKStackTraceWithFrameLimit(10LL);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"got %@ from %@ %@",  v6,  v13,  v15));
      id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKCacheObject.m"));
      id v18 = objc_claimAutoreleasedReturnValue([v17 lastPathComponent]);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@ ([playerInfo isKindOfClass:[NSDictionary class]])\n[%s (%s:%d)]",  v16,  "-[GKFriendListCacheObject populateFriendNamesFromServerRepresentationDictionary:]_block_invoke",  [v18 UTF8String],  2504));

      +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  @"GameKit Exception",  @"%@",  v19);
    }

    uint64_t v20 = objc_claimAutoreleasedReturnValue([v6 objectForKey:@"alias"]);
    unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"bi-directional"]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"played-with"]);
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"played-nearby"]);
    uint64_t v24 = objc_claimAutoreleasedReturnValue([v6 objectForKey:@"accepted-game-invitation"]);
    __int128 v44 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"initiated-game-invitation"]);
    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"automatched-together"]);
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"last-played-game"]);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"last-played-timestamp"]);
    [v3 setContactsAssociationID:0];
    if (v21) {
      [v3 setFriendBiDirectional:v21];
    }
    if (v22) {
      [v3 setFriendPlayedWith:v22];
    }
    if (v23) {
      [v3 setFriendPlayedNearby:v23];
    }
    if (v24) {
      [v3 setAcceptedGameInviteFromThisFriend:v24];
    }
    if (v44) {
      objc_msgSend(v3, "setInitiatedGameInviteToThisFriend:");
    }
    if (v25) {
      [v3 setAutomatchedTogether:v25];
    }
    if (v20) {
      [v3 setAlias:v20];
    }
    __int128 v42 = (void *)v24;
    __int128 v43 = (void *)v20;
    if (v26) {
      [v3 setLastPlayedGame:v26];
    }
    if (v27)
    {
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate _gkDateFromServerTimestamp:](&OBJC_CLASS___NSDate, "_gkDateFromServerTimestamp:", v27));
      [v3 setLastPlayedDate:v28];
    }

    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"challenged-together"]);
    objc_msgSend(v3, "setChallengedTogether:", objc_msgSend(v29, "BOOLValue"));

    id v30 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"last-challenged-timestamp"]);
    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate _gkDateFromServerTimestamp:](&OBJC_CLASS___NSDate, "_gkDateFromServerTimestamp:", v30));
    [v3 setLastChallengedDate:v31];

    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"last-challenged-game"]);
    [v3 setLastChallengedGame:v32];

    if (v21)
    {
      id v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLong:]( NSNumber,  "numberWithLong:",  (unint64_t)[v21 integerValue] | (2 * (void)objc_msgSend(v22, "integerValue")) | (4 * (void)objc_msgSend(v23, "integerValue"))));
      [v3 setFriendLevel:v34];

      id v35 = objc_msgSend(v3, "setAvailablePieces:", objc_msgSend(v3, "availablePieces") | 0x20);
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v38 = (id)GKOSLoggers(v33);
      }
      __int128 v39 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_INFO,  "a friend list came back with no info on friend relationship. Tracking by assigning a friend level of 512",  buf,  2u);
      }

      id v35 = [v3 setFriendLevel:&off_100287BB0];
    }

    __int128 v40 = (void *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v41 = (id)GKOSLoggers(v35);
      __int128 v40 = (void *)os_log_GKGeneral;
    }

    if (os_log_type_enabled((os_log_t)v40, OS_LOG_TYPE_DEBUG)) {
      sub_1000D8400(v40, v3);
    }
  }

  else
  {
    id v36 = (void *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v37 = (id)GKOSLoggers(v10);
      id v36 = (void *)os_log_GKGeneral;
    }

    if (os_log_type_enabled((os_log_t)v36, OS_LOG_TYPE_DEBUG)) {
      sub_1000D8374(v36, v3);
    }
  }
}

GKListEntryCacheObject *__cdecl sub_1000CB948(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKCompatibilityEntryCacheObject),  "initWithManagedObjectContext:",  v3);

  return (GKListEntryCacheObject *)v4;
}

GKFriendRecommendationListEntryCacheObject *sub_1000CC5F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:GKPlayerIDKey]);
  uint64_t v9 = (void *)v8;
  if (v8)
  {
    [*(id *)(a1 + 32) setObject:v7 forKey:v8];
    BOOL v10 = (GKFriendRecommendationListEntryCacheObject *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v9]);
    if (!v10)
    {
      BOOL v10 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKFriendRecommendationListEntryCacheObject),  "initWithManagedObjectContext:",  v6);
      -[GKFriendRecommendationListEntryCacheObject setPlayerID:](v10, "setPlayerID:", v9);
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(0LL);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000D82B4();
    }
    BOOL v10 = 0LL;
  }

  return v10;
}

GKFriendRequestListEntryCacheObject *sub_1000CD248(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"player-id"]);
  if (v6)
  {
    id v7 = (GKFriendRequestListEntryCacheObject *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v6]);
    if (!v7)
    {
      id v7 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKFriendRequestListEntryCacheObject),  "initWithManagedObjectContext:",  v5);
      -[GKFriendRequestListEntryCacheObject setWasViewed:](v7, "setWasViewed:", 0LL);
    }
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

GKGameListEntryCacheObject *sub_1000CE09C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"game"]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"bundle-id"]);
  if (v7)
  {
    uint64_t v8 = (GKGameListEntryCacheObject *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
    if (!v8) {
      uint64_t v8 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKGameListEntryCacheObject),  "initWithManagedObjectContext:",  v5);
    }
    -[GKGameListEntryCacheObject setBundleID:](v8, "setBundleID:", v7);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  return v8;
}

int64_t sub_1000CE4AC(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = v4;
  id v7 = v5;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 game]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 softwareType]);
  unsigned int v10 = [v9 isEqualToString:@"iOS"];

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 game]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 softwareType]);
  unsigned int v13 = [v12 isEqualToString:@"iOS"];

  if (v10 == v13)
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v6 lastPlayedDate]);
    if (v15) {
      uint64_t v16 = objc_claimAutoreleasedReturnValue([v6 lastPlayedDate]);
    }
    else {
      uint64_t v16 = objc_claimAutoreleasedReturnValue([v6 purchaseDate]);
    }
    id v17 = (void *)v16;

    id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 lastPlayedDate]);
    if (v18) {
      uint64_t v19 = objc_claimAutoreleasedReturnValue([v7 lastPlayedDate]);
    }
    else {
      uint64_t v19 = objc_claimAutoreleasedReturnValue([v7 purchaseDate]);
    }
    uint64_t v20 = (void *)v19;

    int64_t v14 = (int64_t)[v17 compare:v20];
  }

  else if (v10)
  {
    int64_t v14 = -1LL;
  }

  else
  {
    int64_t v14 = 1LL;
  }

  return v14;
}

GKListEntryCacheObject *__cdecl sub_1000CF310(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKRecentPlayerListEntryCacheObject),  "initWithManagedObjectContext:",  v3);

  return (GKListEntryCacheObject *)v4;
}

id sub_1000CF578(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 playerID]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v5]);

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKRecentMatchInternal internalRepresentation]( &OBJC_CLASS___GKRecentMatchInternal,  "internalRepresentation"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 internalRepresentation]);
  [v7 setPlayer:v8];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 date]);
  [v7 setDate:v9];

  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) game]);
  if (v10)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameRecordCacheObject recordForGame:playerProfile:]( &OBJC_CLASS___GKGameRecordCacheObject,  "recordForGame:playerProfile:",  v10,  v6));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 internalRepresentation]);
    [v7 setGame:v12];
  }

  return v7;
}

GKListEntryCacheObject *__cdecl sub_1000CFB4C(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKRecentGameListEntryCacheObject),  "initWithManagedObjectContext:",  v3);

  return (GKListEntryCacheObject *)v4;
}

id sub_1000CFE20(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleID]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v5]);

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKRecentMatchInternal internalRepresentation]( &OBJC_CLASS___GKRecentMatchInternal,  "internalRepresentation"));
  [v7 setPlayer:*(void *)(a1 + 40)];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 internalRepresentation]);
  [v7 setGame:v8];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 date]);
  [v7 setDate:v9];

  return v7;
}

GKListEntryCacheObject *__cdecl sub_1000D0264(id a1, NSDictionary *a2, NSManagedObjectContext *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", @"game"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"bundle-id"]);
  id v7 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKTopGamesListEntryCacheObject),  "initWithManagedObjectContext:",  v4);

  -[GKTopGamesListEntryCacheObject setBundleID:](v7, "setBundleID:", v6);
  return (GKListEntryCacheObject *)v7;
}

id sub_1000D0538(id a1, GKOnDeviceMultiplayerGameListEntryCacheObject *a2, unint64_t a3)
{
  return -[GKOnDeviceMultiplayerGameListEntryCacheObject bundleID](a2, "bundleID", a3);
}

void sub_1000D05F0(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 supportsMultiplayer])
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleID]);
    [v3 addObject:v4];
  }
}

GKListEntryCacheObject *__cdecl sub_1000D07F0(id a1, NSDictionary *a2, NSManagedObjectContext *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", @"bundle-id"));
  id v6 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKOnDeviceMultiplayerGameListEntryCacheObject),  "initWithManagedObjectContext:",  v4);

  -[GKOnDeviceMultiplayerGameListEntryCacheObject setBundleID:](v6, "setBundleID:", v5);
  return (GKListEntryCacheObject *)v6;
}

GKAchievementPointsEntryCacheObject *sub_1000D1290(id *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:@"game"]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"bundle-id"]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKey:v7]);
  if (v8)
  {
    uint64_t v9 = (GKAchievementPointsEntryCacheObject *)objc_claimAutoreleasedReturnValue([a1[5] objectForKeyedSubscript:v7]);
    if (!v9)
    {
      uint64_t v9 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKAchievementPointsEntryCacheObject),  "initWithManagedObjectContext:",  v5);
      unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([a1[6] objectForKey:v7]);
      -[GKAchievementPointsEntryCacheObject setGameRecord:](v9, "setGameRecord:", v10);
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return v9;
}

id sub_1000D203C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 playerID]);
  id v7 = [v6 isEqualToString:*(void *)(a1 + 32)];

  if ((_DWORD)v7) {
    *a4 = 1;
  }
  return v7;
}

void sub_1000D2A2C(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a3));
  [v4 setObject:v5 forKey:v6];
}

void sub_1000D2A98(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a3));
  uint64_t v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));
  if (v6)
  {
    id v7 = (GKTurnBasedParticipantCacheObject *)v6;
    [*(id *)(a1 + 32) removeObjectForKey:v8];
  }

  else
  {
    id v7 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKTurnBasedParticipantCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 40));
  }

  -[GKTurnBasedParticipantCacheObject updateWithServerRepresentation:](v7, "updateWithServerRepresentation:", v5);

  [*(id *)(a1 + 48) insertObject:v7 atIndex:a3];
}

void sub_1000D2B54(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"request-id"]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));
  if (v6)
  {
    id v7 = (GKTurnBasedExchangeCacheObject *)v6;
    [*(id *)(a1 + 32) removeObjectForKey:v8];
  }

  else
  {
    id v7 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKTurnBasedExchangeCacheObject),  "initWithManagedObjectContext:",  *(void *)(a1 + 40));
  }

  -[GKTurnBasedExchangeCacheObject updateWithServerRepresentation:participants:]( v7,  "updateWithServerRepresentation:participants:",  v5,  *(void *)(a1 + 48));

  [*(id *)(a1 + 56) insertObject:v7 atIndex:a3];
}

id sub_1000D2EF8(uint64_t a1, void *a2)
{
  id v3 = *(objc_class **)(a1 + 40);
  id v4 = a2;
  id v5 = [[v3 alloc] initWithManagedObjectContext:*(void *)(a1 + 32)];
  [v5 setSessionID:v4];

  return v5;
}

GKTurnBasedSessionEntryCacheObject *sub_1000D4598(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"session-id"]);
  if (v7)
  {
    [*(id *)(a1 + 32) setObject:v5 forKey:v7];
    id v8 = (GKTurnBasedSessionEntryCacheObject *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v7]);
    if (!v8)
    {
      id v8 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKTurnBasedSessionEntryCacheObject),  "initWithManagedObjectContext:",  v6);
      -[GKTurnBasedSessionEntryCacheObject setSessionID:](v8, "setSessionID:", v7);
    }
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

void sub_1000D47E8(id a1, GKTurnBasedSessionEntryCacheObject *a2, unint64_t a3, BOOL *a4)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(-[GKTurnBasedSessionEntryCacheObject list](a2, "list", a3, a4));
  [v4 expire];
}

GKListEntryCacheObject *__cdecl sub_1000D4D00(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKPlayerEntryCacheObject),  "initWithManagedObjectContext:",  v3);

  return (GKListEntryCacheObject *)v4;
}

id sub_1000D4F60(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKRecentMatchInternal internalRepresentation]( &OBJC_CLASS___GKRecentMatchInternal,  "internalRepresentation"));
  id v5 = *(void **)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 playerID]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v6]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 internalRepresentation]);
  [v4 setPlayer:v8];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 date]);
  [v4 setDate:v9];

  return v4;
}

id sub_1000D55B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"challenge-id"]);
  if (v8)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v8]);
    if (!v9)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[GKChallengeCacheObject challengeWithServerRepresentation:context:]( &OBJC_CLASS___GKChallengeCacheObject,  "challengeWithServerRepresentation:context:",  v7,  v6));
      [*(id *)(a1 + 32) setObject:v9 forKey:v8];
    }

    [v9 setReceivingPlayerID:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return v9;
}

id sub_1000D5A3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"challenge-type"]);
  id v5 = [v4 integerValue];

  if (v5 == (id)1)
  {
    id v6 = &off_10026A2A8;
  }

  else
  {
    if (v5 != (id)2)
    {
      id v7 = 0LL;
      goto LABEL_7;
    }

    id v6 = &off_100269FC8;
  }

  id v7 = [objc_alloc(*v6) initWithManagedObjectContext:*(void *)(a1 + 32)];
LABEL_7:
  [v7 updateWithServerRepresentation:v3];

  return v7;
}

GKListEntryCacheObject *__cdecl sub_1000D78D0(id a1, id a2, NSManagedObjectContext *a3)
{
  id v3 = a3;
  id v4 = -[GKCacheObject initWithManagedObjectContext:]( objc_alloc(&OBJC_CLASS___GKCompatiblePlayerEntryCacheObject),  "initWithManagedObjectContext:",  v3);

  return (GKListEntryCacheObject *)v4;
}

void sub_1000D7920()
{
}

void sub_1000D7980()
{
}

void sub_1000D79E0()
{
}

void sub_1000D7A0C()
{
}

void sub_1000D7A6C()
{
}

void sub_1000D7A98()
{
}

void sub_1000D7AC4()
{
}

void sub_1000D7AF0()
{
}

void sub_1000D7B1C()
{
}

void sub_1000D7B7C()
{
}

void sub_1000D7BA8()
{
}

void sub_1000D7BD4()
{
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "Error deleting cached image (%@): %@",  v2,  0x16u);
  sub_10000C760();
}

void sub_1000D7C50()
{
}

void sub_1000D7CB0()
{
}

void sub_1000D7D10()
{
}

void sub_1000D7D3C()
{
}

void sub_1000D7D9C()
{
}

void sub_1000D7DFC()
{
}

void sub_1000D7E28()
{
}

void sub_1000D7E54()
{
}

void sub_1000D7E80()
{
}

void sub_1000D7EE0()
{
}

void sub_1000D7F0C()
{
}

void sub_1000D7F38()
{
}

void sub_1000D7F64(void *a1, void *a2)
{
  uint64_t v3 = (os_log_s *)sub_100020824(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a2 friendLevel]);
  sub_1000207E0();
  sub_1000208B0( (void *)&_mh_execute_header,  v3,  v5,  "Updated the friend level based on the server response. New friendLevel:%@",  v6);

  sub_100020818();
}

void sub_1000D7FF0()
{
}

void sub_1000D801C()
{
}

void sub_1000D807C(void *a1)
{
  uint64_t v1 = (os_log_s *)sub_100020824(a1);
  uint64_t v2 = GKStackTraceWithFrameLimit(12LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000207E0();
  _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "gameForBunDleID:context: was called with no bundleID. Stack trace:%@",  v4,  0xCu);

  sub_100020818();
}

void sub_1000D810C()
{
}

void sub_1000D8138()
{
}

void sub_1000D8164()
{
}

void sub_1000D8190()
{
}

void sub_1000D81F0()
{
}

void sub_1000D821C()
{
}

void sub_1000D827C()
{
}

void sub_1000D82B4()
{
}

void sub_1000D8314()
{
}

void sub_1000D8374(void *a1, void *a2)
{
  uint64_t v3 = (os_log_s *)sub_100020824(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a2 playerID]);
  sub_1000207E0();
  sub_1000208B0((void *)&_mh_execute_header, v3, v5, "%@ missing from dictionary", v6);

  sub_100020818();
}

void sub_1000D8400(void *a1, void *a2)
{
  uint64_t v3 = (os_log_s *)sub_100020824(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a2 alias]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a2 contactsAssociationID]);
  int v6 = 138412546;
  id v7 = v4;
  __int16 v8 = 2112;
  uint64_t v9 = v5;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "GKFriendCache:populated player pieces with server info: player alias:%@ and contactsAssociationID:%@",  (uint8_t *)&v6,  0x16u);
}

void sub_1000D84C8()
{
}

void sub_1000D8528()
{
}

void GKIncrementContextTransactionCount(void *a1, int a2, void *a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000D85D4;
  v5[3] = &unk_100271728;
  int v7 = a2;
  id v6 = a3;
  id v4 = v6;
  [a1 performBlock:v5];
}

void sub_1000D85D4(uint64_t a1)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  queue = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(current_queue);
  dispatch_queue_set_specific(queue, @"GKManagedObjectContextTransactionCountKey", v3, 0LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    (*(void (**)(uint64_t, char *))(v4 + 16))(v4, v3);
  }
}

void sub_1000D8B9C(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v8 = v2;
    uint64_t v9 = v3;
    [*(id *)(a1 + 32) _gkSafeSave];
    [*(id *)(a1 + 32) reset];
    dispatch_time_t v5 = dispatch_time(0LL, 30000000000LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000D8C44;
    block[3] = &unk_10026B670;
    id v7 = *(id *)(a1 + 32);
    dispatch_after(v5, &_dispatch_main_q, block);
  }

void sub_1000D8C44(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1000D8CA8;
  v2[3] = &unk_100271750;
  id v3 = v1;
  GKIncrementContextTransactionCount(v3, 0, v2);
}

void sub_1000D8CA8(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    if (!os_log_GKGeneral) {
      id v3 = (id)GKOSLoggers(a1);
    }
    uint64_t v4 = (os_log_s *)os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_1000D95F8(a1, v4);
    }
  }

void sub_1000D8DF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000D8EA4;
  void v7[3] = &unk_100271778;
  id v5 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v5;
  id v9 = v3;
  id v6 = v3;
  [v4 performBlock:v7];
}

void sub_1000D8EA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000D8F38;
  v4[3] = &unk_10026B120;
  id v5 = *(id *)(a1 + 48);
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);
}

uint64_t sub_1000D8F38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000D8FE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000D9078;
  void v6[3] = &unk_1002717C8;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

uint64_t sub_1000D9078(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

void sub_1000D91A0(uint64_t a1, void *a2)
{
  id v2 = a2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v11;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)v7);
        uint64_t v9 = objc_opt_class(&OBJC_CLASS___GKPlayerInternal, v4);
        if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0) {
          [v8 sanitize];
        }
        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v5);
  }
}

void sub_1000D9388(_Unwind_Exception *a1)
{
}

void sub_1000D93A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained stripGKPlayerInternalPIIs];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000D94B0(_Unwind_Exception *a1)
{
}

void sub_1000D94CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained stripGKPlayerInternalPIIs];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000D9598( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D95C8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D95F8(uint64_t a1, os_log_s *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Context reached a count of 0: %@",  (uint8_t *)&v3,  0xCu);
}

void sub_1000D9670( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D9C88(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKProfileService,  "serviceWithTransport:forClient:localPlayer:",  0LL,  a1[4],  0LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000D9D38;
  void v7[3] = &unk_10026C550;
  uint64_t v5 = a1[5];
  void v7[4] = a1[6];
  id v8 = v3;
  id v6 = v3;
  [v4 getProfilesForPlayerIDs:v5 handler:v7];
}

void sub_1000D9D38(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 count] == (id)2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:0]);
    [*(id *)(a1 + 32) setReceivingPlayer:v3];

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:1]);
    [*(id *)(a1 + 32) setIssuingPlayer:v4];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000D9DC8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKChallengeInvite.m",  124LL,  "-[GKChallengeInvite loadDetailsWithHandler:]_block_invoke_3"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v2));

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) challenge]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleID]);

  if (v5)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1000D9F80;
    void v13[3] = &unk_10026B170;
    id v7 = *(void **)(a1 + 40);
    void v13[4] = *(void *)(a1 + 32);
    id v14 = v7;
    [v3 perform:v13];
  }

  else
  {
    id v8 = (os_log_s *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v9 = (id)GKOSLoggers(v6);
      id v8 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_1000DA868(v8);
    }
    [*(id *)(a1 + 32) setGoalText:&stru_10027B720];
  }

  if (*(void *)(a1 + 56))
  {
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) replyQueue]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1000DA050;
    v11[3] = &unk_10026B120;
    id v12 = *(id *)(a1 + 56);
    [v3 notifyOnQueue:v10 block:v11];
  }
}

void sub_1000D9F80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) gameDescriptor]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000DA020;
  void v7[3] = &unk_100271818;
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v3;
  id v6 = v3;
  [v4 loadGoalTextForGameDescriptor:v5 handler:v7];
}

uint64_t sub_1000DA020(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1000DA050(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000DA314(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DA334(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000DA344(uint64_t a1)
{
}

void sub_1000DA34C(uint64_t a1, void *a2)
{
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v21;
    while (2)
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier", (void)v20));
        __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) achievement]);
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
        unsigned int v12 = [v9 isEqualToString:v11];

        if (!v12)
        {
          __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v8 groupIdentifier]);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) achievement]);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 groupIdentifier]);
          unsigned int v16 = [v13 isEqualToString:v15];

          if (!v16) {
            continue;
          }
        }

        uint64_t v17 = objc_claimAutoreleasedReturnValue([v8 unachievedDescription]);
        uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8LL);
        uint64_t v19 = *(void **)(v18 + 40);
        *(void *)(v18 + 40) = v17;

        goto LABEL_12;
      }

      id v5 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

void sub_1000DA50C(uint64_t a1, void *a2)
{
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v25;
    while (2)
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
        __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) score]);
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 leaderboardIdentifier]);
        unsigned int v12 = [v9 isEqualToString:v11];

        if (!v12)
        {
          __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v8 groupIdentifier]);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) score]);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 groupLeaderboardIdentifier]);
          unsigned int v16 = [v13 isEqualToString:v15];

          if (!v16) {
            continue;
          }
        }

        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[GCFLocalizedStrings SCORE_CHALLENGE_RECEIVED_ALERT_GOAL_FORMAT]( &OBJC_CLASS____TtC20GameCenterFoundation19GCFLocalizedStrings,  "SCORE_CHALLENGE_RECEIVED_ALERT_GOAL_FORMAT"));
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) score]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 formattedValue]);
        __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v8 localizedTitle]);
        uint64_t v21 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v17, v19, v20, (void)v24));
        uint64_t v22 = *(void *)(*(void *)(a1 + 48) + 8LL);
        __int128 v23 = *(void **)(v22 + 40);
        *(void *)(v22 + 40) = v21;

        goto LABEL_12;
      }

      id v5 = [v3 countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

uint64_t sub_1000DA72C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  }
  return result;
}

void sub_1000DA868(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "no bundleID found for challenge, causing us to display empty goal text",  v1,  2u);
}

id sub_1000DB704(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
    sub_1000E955C();
  }
  return [*(id *)(a1 + 32) leave];
}

id sub_1000DB76C(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
    sub_1000E9588();
  }
  return [*(id *)(a1 + 32) leave];
}

void sub_1000DB8C0(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", @"com.apple.Magellan"));
  id v2 = (void *)qword_1002BB5B8;
  qword_1002BB5B8 = v1;
}

void sub_1000DC7D0(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.GameKit.GKClient.sync", 0LL);
  id v2 = (void *)qword_1002BB5C8;
  qword_1002BB5C8 = (uint64_t)v1;
}

void sub_1000DCA68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  uint64_t v18 = @"rid";
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rid]);
  uint64_t v19 = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000DCBBC;
  v12[3] = &unk_1002718E8;
  int v17 = *(_DWORD *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  __int128 v10 = *(void **)(a1 + 48);
  id v13 = v8;
  uint64_t v14 = v9;
  id v15 = v10;
  id v16 = v3;
  id v11 = v3;
  [v4 issueRequest:v6 bagKey:@"gk-check-match-status" clientProxy:v7 handler:v12];
}

void sub_1000DCBBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(_DWORD *)(a1 + 64);
  if (v7 == [*(id *)(a1 + 32) sequence])
  {
    if (v6)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:GKServerStatusCode]);

      if ([v6 gkIsNotConnectedToInternetError])
      {
        [*(id *)(a1 + 32) transitionToState:7];
      }

      else if ([v9 integerValue] == (id)5067)
      {
        [*(id *)(a1 + 40) processMatchResponse:v5];
      }

      else if ([*(id *)(a1 + 32) transitionToState:2])
      {
        dispatch_time_t v10 = dispatch_time(0LL, 3000000000LL);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472LL;
        v12[2] = sub_1000DCD10;
        v12[3] = &unk_10026BA70;
        id v11 = *(void **)(a1 + 48);
        void v12[4] = *(void *)(a1 + 40);
        void v12[5] = v10;
        [v11 perform:v12];
      }
    }

    else
    {
      [*(id *)(a1 + 40) processMatchResponse:v5];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000DCD10(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000DCD94;
  void v6[3] = &unk_10026B310;
  dispatch_time_t v4 = *(void *)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_after(v4, &_dispatch_main_q, v6);
}

uint64_t sub_1000DCD94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000DD394(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) checkMatchStatusQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000DD434;
  block[3] = &unk_100271938;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v6;
  void block[4] = v5;
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_1000DD434(uint64_t a1)
{
  id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) checkMatchStatusQueue]);
  dispatch_source_t v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, v2);
  [*(id *)(a1 + 32) setCheckMatchStatusTimer:v3];

  dispatch_time_t v4 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) checkMatchStatusTimer]);
  dispatch_source_set_timer(v4, *(void *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);

  uint64_t v5 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) checkMatchStatusTimer]);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1000DD54C;
  handler[3] = &unk_10026B670;
  handler[4] = *(void *)(a1 + 32);
  dispatch_source_set_event_handler(v5, handler);

  uint64_t v6 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) checkMatchStatusTimer]);
  dispatch_source_set_cancel_handler(v6, *(dispatch_block_t *)(a1 + 40));

  id v7 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) checkMatchStatusTimer]);
  dispatch_resume(v7);
}

id sub_1000DD54C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCheckMatchStatusTimer:0];
}

void sub_1000DD578(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v2));

  dispatch_source_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleIdentifier]);
  dispatch_time_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v3,  v4));

  [v7 expireRecentMatchesWithGame:v5];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v7 friendList]);
  [v6 invalidate];
}

id sub_1000DD830(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCheckMatchStatusTimer:0];
}

void sub_1000DDBE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_1000DDC08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000DDC18(uint64_t a1)
{
}

void sub_1000DDC20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  id v6 = a3;
  id v7 = (id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  id obj = 0LL;
  id v8 =  +[NSDictionary _gkDictionaryWithServerData:error:]( &OBJC_CLASS___NSDictionary,  "_gkDictionaryWithServerData:error:",  v5,  &obj);
  objc_storeStrong(v7, obj);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1000DDCBC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  }
  return result;
}

void sub_1000DE1D8(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v3 dataType];
  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 userInfo]);

  [v2 refreshContentsForDataType:v4 userInfo:v5];
}

GKGameInternal *__cdecl sub_1000DE784(GKClientProxy *self, SEL a2)
{
  return self->_currentGame;
}

void sub_1000DEAD8(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.GameKit.GKClient.sync", 0LL);
  id v2 = (void *)qword_1002BB5D8;
  qword_1002BB5D8 = (uint64_t)v1;
}

void sub_1000DEB44(id a1)
{
  dispatch_queue_t v1 = -[NSMutableDictionary initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableDictionary), "initWithCapacity:", 0LL);
  id v2 = (void *)qword_1002BB5E8;
  qword_1002BB5E8 = (uint64_t)v1;
}

void sub_1000DEC78(id a1)
{
  v4[0] = GKGameCenterDashboardIdentifier;
  v4[1] = GKMatchmakerExtensionIdentifier;
  v4[2] = GKTurnBasedMatchmakerExtensionIdentifier;
  v4[3] = GKChallengeIssueExtensionIdentifier;
  void v4[4] = GKFriendRequestExtensionIdentifier;
  v4[5] = GKAuthenticateExtensionIdentifier;
  dispatch_queue_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v4, 6LL));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v1));
  id v3 = (void *)qword_1002BB5F8;
  qword_1002BB5F8 = v2;
}

void sub_1000DF008( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000DF028(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _clientLookup]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  id v4 = v3;
  if (*(_DWORD *)(a1 + 64))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

    if (v6)
    {
LABEL_6:
      uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
      id v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v6;
      id v12 = v6;

      [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) updateIfRecentlyInstalled];
      goto LABEL_7;
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:&off_100287BC8]);
    if (v7)
    {
      id v6 = v7;
      [v7 setPid:*(unsigned int *)(a1 + 64)];
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
      [v4 setObject:v6 forKeyedSubscript:v8];

      [v4 removeObjectForKey:&off_100287BC8];
      goto LABEL_6;
    }
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 allValues]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v9 firstObject]);

    if (v6) {
      goto LABEL_6;
    }
  }

  if (!*(_BYTE *)(a1 + 68)) {
    goto LABEL_7;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  id v15 = (objc_class *)objc_opt_class(&OBJC_CLASS___GKClientProxy, v14);
  if ((objc_msgSend( (id)objc_opt_class(*(void *)(a1 + 56), v16),  "isExtensionBundleID:",  *(void *)(a1 + 32)) & 1) == 0)
  {
    if ([*(id *)(a1 + 32) isEqualToString:GKGameCenterUIServiceIdentifier])
    {
      uint64_t v18 = &off_10026A330;
      goto LABEL_18;
    }

    if (([*(id *)(a1 + 32) isEqualToString:GKGameCenterToolIdentifier] & 1) != 0
      || ([*(id *)(a1 + 32) isEqualToString:GKGameCenterDarwinTestIdentifier] & 1) != 0
      || ([*(id *)(a1 + 32) isEqualToString:GKGKTester2Identifier] & 1) != 0
      || ([*(id *)(a1 + 32) isEqualToString:GKGKTester2OldIdentifier] & 1) != 0)
    {
      uint64_t v18 = &off_10026A2F0;
      goto LABEL_18;
    }

    if (([*(id *)(a1 + 32) isEqualToString:GKIMDPersistenceIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKPreferencesIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKMacOSPreferencesExtensionIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterHostingContainerIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterHUDActivityProcessIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterOverlayProcessIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKInternetAccountsIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterMessageExtensionIdentifier] & 1) == 0
      && ([*(id *)(a1 + 32) isEqualToString:GKSpringboardIdentifier] & 1) == 0)
    {
      uint64_t v28 = GKAccountsDaemonIdentifier;
      if (([*(id *)(a1 + 32) isEqualToString:GKAccountsDaemonIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreBinaryIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreDaemonIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKMessagesIndentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GCUITester] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKTVAppStoreIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKArcadeIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKGameOverlayUIIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKGameOverlayUIInternalIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreProductPageExtensionIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKWidgetIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKWidgetExtensionIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreSuscribePageExtensionIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreWidgetIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKArcadeWidgetIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreKitIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKArcadeTopShelfExtensionIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKTVAppStoreTopShelfExtensionIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKAppStoreGameUISample] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKTVSettingsIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKPineboardIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:v28] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterTodayWidgetIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKMatchmakerExtensionIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKCopresenceCoreIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKMuseBuddyIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKGameCenterRemoteAlertIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKDaemonIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKContactsUITesterIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKMobileAddressBookIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKContactViewViewServiceIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKContactsViewServiceIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKContactsUIIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKMobilePhoneIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKMobileSMSIdentifier] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKXCTestInternalAngel] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKAppleAccountSetupTool] & 1) == 0
        && ([*(id *)(a1 + 32) isEqualToString:GKAppleIDSetupDaemon] & 1) == 0
        && ([*(id *)(a1 + 32) isEqual:GKAppleIDSettings] & 1) == 0)
      {
        __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _gkSHA256Hash]);
        if (([v29 isEqualToString:@"t/IRG+OATWH+smiJ2A4GRp6fHjSftOF5bYwT7kv+1Mk="] & 1) == 0)
        {
          id v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _gkSHA256Hash]);
          if (![v30 isEqualToString:@"BKN3YPrkowJshOfzYN9kxtu/zEFYrAWOeXV3rzu9h1k="])
          {
            __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _gkSHA256Hash]);
            unsigned __int8 v32 = [v31 isEqualToString:@"AAUzovXOVSY+3xbHnUFtnxv9PkIE3KuLYT2BnWRnkJ0="];

            if ((v32 & 1) == 0) {
              goto LABEL_19;
            }
            goto LABEL_80;
          }
        }
      }
    }

LABEL_80:
    uint64_t v18 = &off_10026A2D0;
    goto LABEL_18;
  }

  uint64_t v18 = &off_10026A0B8;
LABEL_18:
  id v15 = (objc_class *)objc_opt_class(*v18, v17);
LABEL_19:
  id v19 = [[v15 alloc] initWithBundleIdentifier:*(void *)(a1 + 32) bundleOrNil:*(void *)(a1 + 40) pid:*(unsigned int *)(a1 + 64)];
  uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v21 = *(void **)(v20 + 40);
  *(void *)(v20 + 40) = v19;

  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:*(void *)(a1 + 32)]);
    if (!v23)
    {
      __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      [v2 setObject:v23 forKeyedSubscript:*(void *)(a1 + 32)];
    }

    uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
    [v23 setObject:v24 forKeyedSubscript:v25];
  }

  if (!os_log_GKGeneral) {
    id v26 = (id)GKOSLoggers(v22);
  }
  __int128 v27 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_1000E96F4(v27, Current);
  }
LABEL_7:
}

    if (v2 < 0)
    {
      sub_10013249C();
      __int128 v80 = "UnsafeMutablePointer.initialize with negative count";
      __int128 v81 = 51LL;
      goto LABEL_90;
    }

    id v7 = _swiftEmptyArrayStorage;
    goto LABEL_82;
  }

  __int16 v55 = swift_dynamicCastClass(*(void *)(v3 + 208), v50);
  LODWORD(v7) = v55;
  if (!v55)
  {
    __int16 v55 = sub_100132454(0LL, v56);
    goto LABEL_59;
  }

void sub_1000DF928( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000DF940(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6 = a2;
  if ([v6 applicationState] == 8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
    *a3 = 1;
  }
}

void sub_1000DFA5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000DFA74(uint64_t a1, void *a2, _BYTE *a3)
{
  id v7 = a2;
  unsigned int v6 = [v7 applicationState];
  if (([v7 isGameCenter] & 1) == 0 && v6 == 8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
    *a3 = 1;
  }
}

void sub_1000DFC60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000DFC80(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6 = a2;
  id v7 = v6;
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  id v9 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = v9;
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 inviteSession]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 sessionToken]);
    int v16 = 138412290;
    uint64_t v17 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Client candidate session token %@",  (uint8_t *)&v16,  0xCu);
  }

  id v13 = *(void **)(a1 + 32);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 inviteSession]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 sessionToken]);
  LODWORD(v13) = [v13 isEqualToData:v15];

  if ((_DWORD)v13)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    *a3 = 1;
  }
}

void sub_1000DFEC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000DFED8(uint64_t a1, void *a2, _BYTE *a3)
{
  id v9 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) currentMatchResponse]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 rid]);
  unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    *a3 = 1;
  }
}

void sub_1000E0050( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000E0068(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _clientLookup]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1000E00DC;
  v3[3] = &unk_100271AB0;
  void v3[4] = *(void *)(a1 + 32);
  [v2 enumerateKeysAndObjectsUsingBlock:v3];
}

id sub_1000E00DC(uint64_t a1, uint64_t a2, void *a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000E0138;
  v4[3] = &unk_100271A88;
  void v4[4] = *(void *)(a1 + 32);
  return [a3 enumerateKeysAndObjectsUsingBlock:v4];
}

id sub_1000E0138(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "addObject:");
}

uint64_t sub_1000E01D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000E02B0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _clientLookup]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:*(void *)(a1 + 32)]);

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(a1 + 40) pid]));
  [v4 removeObjectForKey:v3];
}

LABEL_36:
}

  static GKLog.daemon.getter(v20);
  id v38 = swift_bridgeObjectRetain_n(v3, 2LL);
  Logger.logObject.getter(v38);
  __int128 v39 = sub_100148620();
  if (!os_log_type_enabled((os_log_t)v10, v39))
  {

    swift_bridgeObjectRelease_n(v3, 2LL);
    id v30 = *(void (**)(os_log_s *, void *))(v0 + 8);
    __int16 v31 = (os_log_s *)v10;
LABEL_39:
    v30(v31, v6);
    goto LABEL_40;
  }

  __int128 v45 = v6;
  __int128 v40 = (uint8_t *)sub_10012CE30(12LL);
  id v41 = sub_10012CE30(32LL);
  uint64_t v46 = v41;
  *(_DWORD *)__int128 v40 = 136315138;
  swift_bridgeObjectRetain(v3);
  __int128 v42 = sub_100135074(v5, v3, &v46);
  sub_100148550(v42);
  swift_bridgeObjectRelease_n(v3, 3LL);
  sub_10012CE90( (void *)&_mh_execute_header,  (os_log_s *)v10,  v39,  "FriendBulletin handleFriendRequestAction invalid actionid %s",  v40);
  sub_10012CE88(v41, v43, (uint64_t)&type metadata for Any + 8);
  sub_10012CE24(v41);
  sub_10012CE24((uint64_t)v40);

  (*(void (**)(void *, id))(v0 + 8))(v10, v45);
LABEL_40:
  sub_10012CE58();
}

void sub_1000E0B6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1000E0C64;
  v11[3] = &unk_100271B28;
  id v12 = *(id *)(a1 + 32);
  if (([v3 _gkContainsObjectPassingTest:v11] & 1) == 0)
  {
    id v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472LL;
    unsigned int v8 = sub_1000E0CA4;
    id v9 = &unk_100271B28;
    id v10 = *(id *)(a1 + 40);
    else {
      uint64_t v4 = 3LL;
    }
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKAMPController controller](&OBJC_CLASS___GKAMPController, "controller", v6, v7, v8, v9));
    [v5 reportFriendInviteActivityEventAtStage:v4 hostApp:0];
  }
}

id sub_1000E0C64(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 playerID]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_1000E0CA4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 playerID]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1000E0CE4(id a1, GKClientProxy *a2, BOOL *a3)
{
}

uint64_t sub_1000E0D74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000E1120(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void, void, void, void, void, void))(a1[14] + 16LL))( a1[14],  a1[4],  a1[5],  a1[6],  a1[7],  a1[8],  a1[9],  a1[10],  a1[11],  a1[12],  a1[13]);
}

uint64_t sub_1000E1500(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void, void, void, void, void, void, void))(a1[14] + 16LL))( a1[14],  0LL,  a1[4],  a1[5],  a1[6],  a1[7],  a1[8],  a1[9],  a1[10],  a1[11],  a1[12],  a1[13]);
}

void sub_1000E1C8C(_Unwind_Exception *a1)
{
}

void sub_1000E1CA4(uint64_t a1, void *a2)
{
  id v13 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  id v4 = [*(id *)(a1 + 32) environment];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentGame]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 primaryCredentialForEnvironment:v4 gameID:v6]);

  if (v7)
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___GKAuthenticateResponse);
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 playerInternal]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 playerID]);
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setPlayerID:v12];

    [*(id *)(a1 + 40) setObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forKeyedSubscript:@"response"];
  }

  v13[2]();
}

void sub_1000E1DC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"response"]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_1000E1FD0(_Unwind_Exception *a1)
{
}

void sub_1000E1FE8(uint64_t a1, void *a2)
{
  id v15 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  id v4 = [*(id *)(a1 + 32) environment];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentGame]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 primaryCredentialForEnvironment:v4 gameID:v6]);

  if (v7)
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___GKAuthenticateCredential);
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 accountName]);
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setAccountName:v11];

    id v12 = (void *)objc_claimAutoreleasedReturnValue([v7 authenticationToken]);
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setAuthenticationToken:v12];

    id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 playerInternal]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 playerID]);
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setPlayerID:v14];

    [*(id *)(a1 + 40) setObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forKeyedSubscript:@"response"];
  }

  v15[2]();
}

void sub_1000E215C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"response"]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1000E2310(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

GKLocalPlayerInternal *sub_1000E2614(void *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [v3 isEqual:a1[4]];
  unint64_t v5 = (unint64_t)[v3 scope] & 8;
  uint64_t v6 = a1[6];
  if ((v6 & 1) != 0 || (v4 & (v6 >> 2) & 1) != 0 || (uint64_t v7 = 0LL, (v6 & 8) != 0) && (_DWORD)v5)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 playerInternal]);
    uint64_t v9 = objc_alloc(&OBJC_CLASS___GKLocalPlayerInternal);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_1000E27C8;
    void v19[3] = &unk_100271BE8;
    void v19[4] = a1[5];
    uint64_t v7 = -[GKLocalPlayerInternal initWithSanitizeBeforeEncodingBlock:](v9, "initWithSanitizeBeforeEncodingBlock:", v19);
    uint64_t v10 = 5LL;
    if (!v4) {
      uint64_t v10 = 1LL;
    }
    unint64_t v11 = v10 | v5;
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 alias]);
    -[GKLocalPlayerInternal setAlias:](v7, "setAlias:", v12);

    id v13 = (void *)objc_claimAutoreleasedReturnValue([v8 playerID]);
    -[GKLocalPlayerInternal setPlayerID:](v7, "setPlayerID:", v13);

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v3 accountName]);
    -[GKLocalPlayerInternal setAccountName:](v7, "setAccountName:", v14);

    -[GKLocalPlayerInternal setLoginStatus:](v7, "setLoginStatus:", v11);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v8 firstName]);
    -[GKLocalPlayerInternal setFirstName:](v7, "setFirstName:", v15);

    int v16 = (void *)objc_claimAutoreleasedReturnValue([v8 lastName]);
    -[GKLocalPlayerInternal setLastName:](v7, "setLastName:", v16);

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v8 compositeName]);
    -[GKLocalPlayerInternal setCompositeName:](v7, "setCompositeName:", v17);
  }

  return v7;
}

uint64_t sub_1000E27C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) clientHasAnyPrivateEntitlement] ^ 1;
}

void sub_1000E27E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = objc_alloc(&OBJC_CLASS___GKPlayerInternalOnboarding);
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 playerID]);
  uint64_t v6 = -[GKPlayerInternalOnboarding initWithPlayerID:](v4, "initWithPlayerID:", v5);
  [v3 setOnboarding:v6];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000E28B0;
  v9[3] = &unk_10026B170;
  uint64_t v7 = *(void **)(a1 + 32);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = v3;
  id v8 = v3;
  [v7 perform:v9];
}

void sub_1000E28B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerID]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 transactionGroupIfCacheExistsForPlayerID:v5]);

  if (v6)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_1000E2988;
    v9[3] = &unk_10026DEC8;
    id v7 = *(id *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 32);
    id v10 = v7;
    uint64_t v11 = v8;
    id v12 = v3;
    [v6 performOnManagedObjectContext:v9];
  }

  else
  {
    v3[2](v3);
  }
}

void sub_1000E2988(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v5));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] bundleIdentifier]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1[4] playerID]);
  if (v9 && ([v8 isEqualToString:GKGameCenterIdentifier] & 1) == 0)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([a1[5] originalBundleIdentifier]);
    if (([v11 isEqualToString:GKGameCenterToolIdentifier] & 1) != 0
      || GKGetApplicationStateForBundleID(v8) == 8)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForBundleID:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForBundleID:context:",  v8,  v5));
    }

    else
    {
      id v10 = 0LL;
    }
  }

  else
  {
    id v10 = 0LL;
  }

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  void v23[2] = sub_1000E2C60;
  void v23[3] = &unk_100271C38;
  id v12 = v8;
  id v24 = v12;
  id v25 = a1[4];
  id v13 = v6;
  id v26 = v13;
  id v27 = a1[6];
  uint64_t v14 = objc_retainBlock(v23);
  id v15 = v14;
  if (v10)
  {
    int v16 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceForBundleID:localPlayer:]( &OBJC_CLASS___GKProfileServicePrivate,  "serviceForBundleID:localPlayer:",  v12,  a1[4]));
    __int16 v29 = v9;
    id v17 = v5;
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v29, 1LL));
    id v28 = v12;
    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v28, 1LL));
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    void v20[2] = sub_1000E2D44;
    v20[3] = &unk_10026C550;
    id v21 = a1[4];
    id v22 = v15;
    [v16 loadScopedPlayerIDs:v18 gameBundleIDs:v19 handler:v20];

    id v5 = v17;
  }

  else
  {
    ((void (*)(void *))v14[2])(v14);
  }
}

uint64_t sub_1000E2C60(void *a1, uint64_t a2)
{
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers(a1, a2);
  }
  unsigned int v4 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[5];
    int v8 = 138412546;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "For bundleID: %@ we are returning playerInternal: %@ in auth reponse",  (uint8_t *)&v8,  0x16u);
  }

  (*(void (**)(void))(a1[6] + 16LL))();
  return (*(uint64_t (**)(void))(a1[7] + 16LL))();
}

uint64_t sub_1000E2D44(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 firstObject]);
  unsigned int v4 = *(void **)(a1 + 32);
  if (v3)
  {
    [v4 setScopedIDs:v3];
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 scopedIDs]);
    [*(id *)(a1 + 32) setScopedIDs:v5];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000E2DB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"players"]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_1000E2F6C(uint64_t a1, void *a2)
{
  uint64_t v5 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 suggestedUsername]);
  [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:@"accountName"];

  v5[2]();
}

void sub_1000E2FF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"accountName"]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000E30B8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 playerID]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

uint64_t sub_1000E31D0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_1000E33E8(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Received CloudKit share metadata from Messages for multiplayer invite.",  v5,  2u);
  }

  return +[GKCloudKitMultiplayer handleCloudKitShareMetadata:completionHandler:]( &OBJC_CLASS___GKCloudKitMultiplayer,  "handleCloudKitShareMetadata:completionHandler:",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

void sub_1000E3488(id a1, GKClientProxy *a2, BOOL *a3)
{
}

void sub_1000E3598(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1000E3624;
  v3[3] = &unk_10026C8B0;
  id v2 = *(void **)(a1 + 40);
  id v4 = *(id *)(a1 + 32);
  id v5 = v2;
  id v6 = *(id *)(a1 + 48);
  [v4 getAuthenticatedLocalPlayersWithStatus:1 handler:v3];
}

void sub_1000E3624(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000E979C();
    }
  }

  [*(id *)(a1 + 32) authenticatedPlayersDidChange:v5 authenticatingBundleID:*(void *)(a1 + 40) reply:*(void *)(a1 + 48)];
}

id GKSavedAuthentiactionStateQueue()
{
  if (qword_1002BB610 != -1) {
    dispatch_once(&qword_1002BB610, &stru_100271CC0);
  }
  return (id)qword_1002BB608;
}

void sub_1000E38C4(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.gamed.GKSavedAppInitState", 0LL);
  id v2 = (void *)qword_1002BB608;
  qword_1002BB608 = (uint64_t)v1;
}

void sub_1000E39E4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"GKSavedAppInitState"]);
  id v4 = (id)*(int *)(a1 + 48);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"pid"]);
  if ([v5 integerValue] == v4)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"bundleID"]);
    LODWORD(sub_100020844((void *)&_mh_execute_header, v0, v1, "GKCacheObject: sessionsWithSessionIDs", v2, v3, v4, v5, v6) = [v6 isEqualToString:v7];

    if ((_DWORD)v6)
    {
      uint64_t v9 = objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"state"]);
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
      uint64_t v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      if (!os_log_GKGeneral) {
        id v13 = (id)GKOSLoggers(v12);
      }
      uint64_t v14 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        int v16 = *(_DWORD *)(a1 + 48);
        int v21 = 138412802;
        id v22 = v3;
        __int16 v23 = 2112;
        uint64_t v24 = v15;
        __int16 v25 = 1024;
        int v26 = v16;
        id v17 = "Auth state resolved %@ for client %@ : %d";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, v17, (uint8_t *)&v21, 0x1Cu);
        goto LABEL_14;
      }

      goto LABEL_14;
    }
  }

  else
  {
  }

  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v18 = (id)GKOSLoggers(v8);
    }
    uint64_t v14 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      int v20 = *(_DWORD *)(a1 + 48);
      int v21 = 138412802;
      id v22 = v3;
      __int16 v23 = 2112;
      uint64_t v24 = v19;
      __int16 v25 = 1024;
      int v26 = v20;
      id v17 = "Ignoring old appInit state -- %@ does not match client %@ : %d";
      goto LABEL_13;
    }
  }

void sub_1000E3CC0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v3 = v2;
  if (*(__CFString **)(a1 + 32) == @"GKAppInitUnknown")
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"GKSavedAppInitState"]);
    uint64_t v12 = *(void **)(a1 + 40);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"bundleID"]);
    LODWORD(v12) = [v12 isEqualToString:v13];

    if ((_DWORD)v12)
    {
      id v15 = [v3 removeObjectForKey:@"GKSavedAppInitState"];
      if (!os_log_GKGeneral) {
        id v16 = (id)GKOSLoggers(v15);
      }
      id v17 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        id v18 = *(void **)(a1 + 40);
        int v23 = 138412290;
        uint64_t v24 = v18;
        uint64_t v10 = "saveAppInitState: cleared for client %@";
        uint64_t v11 = v17;
        goto LABEL_11;
      }
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v20 = (id)GKOSLoggers(v14);
      }
      int v21 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v22 = *(void *)(a1 + 40);
        int v23 = 138412546;
        uint64_t v24 = v6;
        __int16 v25 = 2112;
        uint64_t v26 = v22;
        uint64_t v10 = "saveAppInitState: ignoring old state -- %@ does not match client %@";
        uint64_t v11 = v21;
        uint32_t v19 = 22;
        goto LABEL_12;
      }
    }
  }

  else
  {
    v28[0] = *(void *)(a1 + 40);
    v27[0] = @"bundleID";
    v27[1] = @"pid";
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
    v27[2] = @"state";
    uint64_t v5 = *(void *)(a1 + 32);
    v28[1] = v4;
    void v28[2] = v5;
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v28,  v27,  3LL));

    id v7 = [v3 setValue:v6 forKey:@"GKSavedAppInitState"];
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v7);
    }
    uint64_t v9 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v23 = 138412290;
      uint64_t v24 = v6;
      uint64_t v10 = "saveAppInitState: saved: %@";
      uint64_t v11 = v9;
LABEL_11:
      uint32_t v19 = 12;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v23, v19);
    }
  }
}

id sub_1000E41C0(uint64_t a1)
{
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) responses]);
  id v3 = [v2 countByEnumeratingWithState:&v21 objects:v27 count:16];
  if (v3)
  {
    id v6 = v3;
    uint64_t v7 = *(void *)v22;
    *(void *)&__int128 v5 = 138412290LL;
    __int128 v20 = v5;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(v2);
        }
        uint64_t v9 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        uint64_t v10 = objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerActionBulletin, v4);
        if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
        {
          id v11 = v9;
          uint64_t v12 = v11;
          if (!os_log_GKGeneral) {
            id v13 = (id)GKOSLoggers(v11);
          }
          uint64_t v14 = (os_log_s *)os_log_GKDaemon;
          if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v20;
            uint64_t v26 = v12;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Sending notification with bulletin %@",  buf,  0xCu);
          }

          id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bundleIdentifier", v20));
          id v16 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:](&OBJC_CLASS___GKClientProxy, "clientForBundleID:", v15));

          unsigned int v17 = [v12 isAccept];
          id v18 = (void *)objc_claimAutoreleasedReturnValue([v12 clientNotification]);
          if (v17) {
            [v16 acceptInviteWithNotification:v18];
          }
          else {
            [v16 declineInviteWithNotification:v18];
          }
        }
      }

      id v6 = [v2 countByEnumeratingWithState:&v21 objects:v27 count:16];
    }

    while (v6);
  }

  [*(id *)(a1 + 32) removeAllResponses];
  id result = [*(id *)(a1 + 32) shouldBeCleared];
  if ((_DWORD)result) {
    return [*(id *)(a1 + 40) deleteInviteSession];
  }
  return result;
}

void sub_1000E4484(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    id v6 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000E9864(a1, (uint64_t)v4, v6);
    }
  }
}

uint64_t sub_1000E4624(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000E4A6C(id a1, id a2, GKExtensionClientProxy *a3, BOOL *a4)
{
}

id sub_1000E4B4C(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 acceptInviteWithNotification:*(void *)(a1 + 32)];
}

id sub_1000E4C34(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 declineInviteWithNotification:*(void *)(a1 + 32)];
}

void sub_1000E4CFC(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers(v2);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000E9938();
    }
  }
}

id sub_1000E4E44(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 cancelInviteWithNotification:*(void *)(a1 + 32)];
}

id sub_1000E4F2C(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 cancelGameInvite:*(void *)(a1 + 32)];
}

id sub_1000E518C(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 relayPushNotification:*(void *)(a1 + 32)];
}

id sub_1000E55BC(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 refreshContentsForDataType:*(unsigned int *)(a1 + 40) userInfo:*(void *)(a1 + 32)];
}

id sub_1000E56B4(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 setPreferencesValues:*(void *)(a1 + 32)];
}

void sub_1000E598C(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v4);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000E9998();
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000E5A18(uint64_t a1)
{
}

id sub_1000E5A24(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 setCurrentGame:*(void *)(a1 + 32) serverEnvironment:*(void *)(a1 + 40) reply:&stru_100271E50];
}

uint64_t sub_1000E5A40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000E5D14(id *a1)
{
  dispatch_group_t v2 = dispatch_group_create();
  id v3 = a1 + 4;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] connection]);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_1000E5FC4;
  void v27[3] = &unk_100271D38;
  id v5 = v2;
  id v28 = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 remoteObjectProxyWithErrorHandler:v27]);

  id v8 = (os_log_s *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v9 = (id)GKOSLoggers(v7);
    id v8 = (os_log_s *)os_log_GKGeneral;
  }

  BOOL v10 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "authenticatedPlayersDidChange: sent to Client",  buf,  2u);
  }

  id v11 = (void *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v12 = (id)GKOSLoggers(v10);
    id v11 = (void *)os_log_GKGeneral;
  }

  if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_DEBUG))
  {
    sub_1000E99F8(a1 + 4, v11);
    if (!v6) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  if (v6)
  {
LABEL_9:
    dispatch_group_enter(v5);
    id v13 = a1[5];
    id v14 = a1[6];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    void v24[2] = sub_1000E6048;
    v24[3] = &unk_10026B670;
    __int16 v25 = v5;
    [v6 authenticatedPlayersDidChange:v13 authenticatingBundleID:v14 reply:v24];
  }

void sub_1000E5FC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000E9AD4();
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000E6048(uint64_t a1)
{
}

id sub_1000E6054(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 authenticatedPlayersDidChange:*(void *)(a1 + 32) authenticatingBundleID:*(void *)(a1 + 40) reply:&stru_100271EB8];
}

uint64_t sub_1000E6070(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000E6324(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a3 objectAtIndexedSubscript:1]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000E63E0;
  void v7[3] = &unk_10026BEC8;
  id v5 = *(void **)(a1 + 32);
  void v7[4] = *(void *)(a1 + 40);
  id v8 = v4;
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 32);
  id v6 = v4;
  [v5 perform:v7];
}

void sub_1000E63E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportWithCredential:*(void *)(a1 + 40)]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000E64B0;
  void v7[3] = &unk_100271F08;
  void v7[4] = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v6 = v3;
  [v4 postRequest:v5 forBagKey:@"gk-app-terminate" response:v7];
}

uint64_t sub_1000E64B0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 setInitialized:0];
  [*(id *)(a1 + 40) setResult:v7];

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) appSessions]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) playerInternal]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 playerID]);
  [v8 removeObjectForKey:v10];

  [*(id *)(a1 + 40) setError:v6];
  if (!os_log_GKGeneral) {
    id v12 = (id)GKOSLoggers(v11);
  }
  id v13 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    int v16 = 138412290;
    uint64_t v17 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Terminated (exiting) client %@",  (uint8_t *)&v16,  0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000E6614(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000E6804(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000E6888;
  void v7[3] = &unk_100271F30;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = v6;
  [a2 enumerateKeysAndObjectsUsingBlock:v7];
}

void sub_1000E6888(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 objectAtIndexedSubscript:1]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000E6944;
  void v7[3] = &unk_10026BEC8;
  uint64_t v5 = *(void **)(a1 + 32);
  void v7[4] = *(void *)(a1 + 40);
  id v8 = v4;
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 32);
  id v6 = v4;
  [v5 perform:v7];
}

void sub_1000E6944(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportWithCredential:*(void *)(a1 + 40)]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000E6A14;
  void v8[3] = &unk_100271F08;
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v5;
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v7 = v3;
  [v4 postRequest:v6 forBagKey:@"gk-app-terminate" response:v8];
}

uint64_t sub_1000E6A14(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 setInitialized:0];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) appSessions]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerInternal]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 playerID]);
  [v8 removeObjectForKey:v10];

  [*(id *)(a1 + 48) setResult:v7];
  [*(id *)(a1 + 48) setError:v6];

  if (!os_log_GKGeneral) {
    id v12 = (id)GKOSLoggers(v11);
  }
  id v13 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    int v16 = 138412290;
    uint64_t v17 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Terminated (backgrounding) client %@",  (uint8_t *)&v16,  0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000E6B78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000E6FC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportWithCredential:*(void *)(a1 + 40)]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1000E7088;
  v10[3] = &unk_100271F08;
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v11 = v6;
  uint64_t v12 = v7;
  id v13 = v8;
  id v14 = v3;
  id v9 = v3;
  [v4 postRequest:v5 forBagKey:@"gk-app-init" response:v10];
}

void sub_1000E7088(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  [v6 setResult:v5];
  [*(id *)(a1 + 32) setError:v7];

  if (v7)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    [*(id *)(a1 + 40) setInitialized:1];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 representedItem]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"app-session"]);

    [*(id *)(a1 + 40) addAppSession:v9 forCredential:*(void *)(a1 + 48)];
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKUtilityServicePrivate,  "serviceWithTransport:forClient:localPlayer:",  0LL,  v10,  0LL));

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000E71D8;
    v12[3] = &unk_10026BBE8;
    id v13 = *(id *)(a1 + 56);
    [v11 checkAndUpdateArcadeSubscriberStatusWithHandler:v12];
  }
}

uint64_t sub_1000E71D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000E71E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) result]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
    (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
  }

void sub_1000E7470(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportWithCredential:*(void *)(a1 + 40)]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1000E7538;
  v10[3] = &unk_100271F08;
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v11 = v6;
  uint64_t v12 = v7;
  id v13 = v8;
  id v14 = v3;
  id v9 = v3;
  [v4 postRequest:v5 forBagKey:@"gk-bg-init" response:v10];
}

void sub_1000E7538(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setResult:v9];
  [*(id *)(a1 + 32) setError:v6];

  if (!v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v9 representedItem]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"app-session"]);

    [*(id *)(a1 + 40) addAppSession:v8 forCredential:*(void *)(a1 + 48)];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000E75E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000E7F1C(uint64_t a1)
{
  char v2 = objc_opt_respondsToSelector(*(void *)(a1 + 64), "writerWithDatabaseConnection:gameDescriptor:");
  id v3 = *(void **)(a1 + 64);
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = v4[35];
  if ((v2 & 1) != 0)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 gameDescriptor]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 writerWithDatabaseConnection:v5 gameDescriptor:v6]);
  }

  else
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) writerWithDatabaseConnection:v5]);
  }

  char v8 = objc_opt_respondsToSelector(*(void *)(a1 + 72), "readerWithDatabaseConnection:bundleID:");
  id v9 = *(void **)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(v10 + 280);
  if ((v8 & 1) != 0) {
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v9 readerWithDatabaseConnection:v11 bundleID:*(void *)(v10 + 96)]);
  }
  else {
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v9 readerWithDatabaseConnection:v11]);
  }
  id v13 = (void *)v12;
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportWithCredential:*(void *)(a1 + 40)]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) writerWithTransport:v14 forBagKey:*(void *)(a1 + 48)]);
  uint64_t v16 = objc_claimAutoreleasedReturnValue([v13 databaseConnection]);
  if (v16
    && (uint64_t v17 = (void *)v16,
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 databaseConnection]),
        v18,
        v17,
        v18))
  {
    uint64_t v19 = objc_claimAutoreleasedReturnValue( +[GKDelayedRequestWriter writerWithCacheWriter:cacheReader:networkWriter:batchSubmissionInterval:]( &OBJC_CLASS___GKDelayedRequestWriter,  "writerWithCacheWriter:cacheReader:networkWriter:batchSubmissionInterval:",  v7,  v13,  v15,  (double)*(uint64_t *)(a1 + 88)));
    uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8LL);
    __int128 v21 = *(void **)(v20 + 40);
    *(void *)(v20 + 40) = v19;
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v22 = (id)GKOSLoggers(v16);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000E9BF8();
    }
  }
}

void sub_1000E8414(uint64_t a1)
{
  char v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKClientProxy storeAndForwardDirectoryPathForEnvironment:]( &OBJC_CLASS___GKClientProxy,  "storeAndForwardDirectoryPathForEnvironment:",  *(void *)(a1 + 32)));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager"));
  [v4 issuePending];

  id v21 = 0LL;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 contentsOfDirectoryAtPath:v3 error:&v21]);
  id v6 = v21;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v17 objects:v22 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v18;
    do
    {
      uint64_t v11 = 0LL;
      do
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[GKClientProxy clientForBundleID:pid:createIfNecessary:]( &OBJC_CLASS___GKClientProxy,  "clientForBundleID:pid:createIfNecessary:",  *(void *)(*((void *)&v17 + 1) + 8LL * (void)v11),  0LL,  1LL));
        [v12 performDelayedRequestsForEnvironment:*(void *)(a1 + 32)];

        uint64_t v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v17 objects:v22 count:16];
    }

    while (v9);
  }

  uint64_t v13 = GKAtomicCompareAndSwap32Barrier(1LL, 0LL, &unk_1002BB618);
  if ((v13 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers(v13);
    }
    id v15 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "store and forward reentry count out of sync",  v16,  2u);
    }
  }
}

id sub_1000E86BC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) performDelayedRequestsForCredential:a2];
}

void sub_1000E8764(uint64_t a1)
{
  char v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) playerInternal]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 playerID]);
  id v4 = dispatch_group_create();
  v51[0] = 0LL;
  v51[1] = v51;
  void v51[2] = 0x3032000000LL;
  v51[3] = sub_1000DDC08;
  v51[4] = sub_1000DDC18;
  id v52 = 0LL;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) appSessionForPlayer:v2]);
  if (!v5)
  {
    dispatch_group_enter(v4);
    uint64_t v7 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472LL;
    void v47[2] = sub_1000E8D04;
    void v47[3] = &unk_100271FF0;
    __int128 v50 = v51;
    v47[4] = v6;
    id v48 = v2;
    id v8 = v4;
    id v49 = v8;
    [v6 bgInitializeWithCredential:v7 completionHandler:v47];
    dispatch_time_t v9 = dispatch_time(0LL, 30000000000LL);
    dispatch_group_wait(v8, v9);
  }

  v46[0] = 0LL;
  v46[1] = v46;
  v46[2] = 0x2020000000LL;
  v46[3] = 0LL;
  dispatch_group_enter(v4);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) setPlayerStatusWriterWithCredential:*(void *)(a1 + 32)]);
  if (v10)
  {
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472LL;
    v42[2] = sub_1000E8D48;
    v42[3] = &unk_100272018;
    __int128 v44 = v46;
    __int128 v43 = v4;
    [v10 submitDelayedRequestsForPlayer:v3 handler:v42];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(0LL);
    }
    uint64_t v12 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "setStatusWriter is nil. Do not call submitDelayedRequest.",  buf,  2u);
    }

    dispatch_group_leave(v4);
  }

  dispatch_group_enter(v4);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) setPlayerPhotoWriterWithCredential:*(void *)(a1 + 32)]);
  id v27 = v10;
  if (v13)
  {
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472LL;
    v39[2] = sub_1000E8E3C;
    void v39[3] = &unk_100272018;
    id v41 = v46;
    __int128 v40 = v4;
    [v13 submitDelayedRequestsForPlayer:v3 handler:v39];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers(0LL);
    }
    id v15 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "setPlayerPhotoWriter is nil. Do not call submitDelayedRequest.",  buf,  2u);
    }

    dispatch_group_leave(v4);
  }

  dispatch_group_enter(v4);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deletePlayerPhotoWriterWithCredential:*(void *)(a1 + 32)]);
  if (v16)
  {
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    void v36[2] = sub_1000E8F30;
    v36[3] = &unk_100272018;
    id v38 = v46;
    id v37 = v4;
    [v16 submitDelayedRequestsForPlayer:v3 handler:v36];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers(0LL);
    }
    __int128 v18 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "deletePlayerPhotoWriter is nil. Do not call submitDelayedRequest.",  buf,  2u);
    }

    dispatch_group_leave(v4);
  }

  dispatch_group_enter(v4);
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) removeGameWriterWithCredential:*(void *)(a1 + 32)]);
  if (v19)
  {
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    v33[2] = sub_1000E9024;
    v33[3] = &unk_100272018;
    id v35 = v46;
    id v34 = v4;
    [v19 submitDelayedRequestsForPlayer:v3 handler:v33];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v20 = (id)GKOSLoggers(0LL);
    }
    id v21 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "removeGameWriter is nil. Do not call submitDelayedRequest.",  buf,  2u);
    }

    dispatch_group_leave(v4);
  }

  dispatch_semaphore_t v22 = dispatch_semaphore_create(0LL);
  uint64_t v23 = *(void *)(a1 + 40);
  __int128 v24 = *(dispatch_queue_s **)(v23 + 272);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E9118;
  block[3] = &unk_100272040;
  __int16 v31 = v46;
  unsigned __int8 v32 = v51;
  void block[4] = v23;
  id v29 = v2;
  dispatch_semaphore_t v30 = v22;
  __int16 v25 = v22;
  id v26 = v2;
  dispatch_group_notify(v4, v24, block);
  dispatch_semaphore_wait(v25, 0xFFFFFFFFFFFFFFFFLL);

  _Block_object_dispose(v46, 8);
  _Block_object_dispose(v51, 8);
}

void sub_1000E8CCC(_Unwind_Exception *a1)
{
}

void sub_1000E8D04(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) appSessionForPlayer:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1000E8D48(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v7 = v5;
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v5, v6);
    }
    dispatch_time_t v9 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      id v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Error submitting delayed requests for set player status %@",  (uint8_t *)&v10,  0xCu);
    }
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000E8E3C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v7 = v5;
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v5, v6);
    }
    dispatch_time_t v9 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      id v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Error submitting delayed requests for set player photo %@",  (uint8_t *)&v10,  0xCu);
    }
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000E8F30(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v7 = v5;
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v5, v6);
    }
    dispatch_time_t v9 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      id v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Error submitting delayed requests for delete player photo %@",  (uint8_t *)&v10,  0xCu);
    }
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000E9024(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v7 = v5;
  if (v5)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v5, v6);
    }
    dispatch_time_t v9 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      id v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Error submitting delayed requests for remove game %@",  (uint8_t *)&v10,  0xCu);
    }
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1000E9118(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delayedRequestsDBConnection]);
  [v2 close];

  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)) {
    [*(id *)(a1 + 32) _removeDelayedRequestStore];
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL)) {
    [*(id *)(a1 + 32) removeAppSessionForPlayer:*(void *)(a1 + 40)];
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1000E9180( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000E9194(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = 0LL;
  sub_1000207D4( (void *)&_mh_execute_header,  a2,  a3,  "[%@]Current game not supporting nearby advertising since we cannot find the bundle for it. Bundle: %@.",  (uint8_t *)&v3);
  sub_10000C760();
}

void sub_1000E9208()
{
}

void sub_1000E9270()
{
}

void sub_1000E92D8(void *a1)
{
  id v2 = [(id)sub_1000208C8() currentGame];
  int v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000207E0();
  sub_1000E9180((void *)&_mh_execute_header, v4, v5, "Setting up nearbyDiscovery for game: %@", v6, v7, v8, v9, v10);

  sub_100020818();
}

void sub_1000E9358(void *a1)
{
  id v2 = [(id)sub_1000208C8() currentGame];
  int v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000207E0();
  sub_1000E9180( (void *)&_mh_execute_header,  v4,  v5,  "Skipping nearbyDiscovery setup since current game not supporting multiplayer: %@",  v6,  v7,  v8,  v9,  v10);

  sub_100020818();
}

void sub_1000E93D8()
{
}

void sub_1000E9404(void *a1)
{
  id v2 = [(id)sub_1000208C8() currentGame];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000207E0();
  sub_1000E9180((void *)&_mh_execute_header, v4, v5, "Setting up peerDiscovery for game: %@", v6, v7, v8, v9, v10);

  sub_100020818();
}

void sub_1000E9484(void *a1)
{
  id v2 = [(id)sub_1000208C8() currentGame];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000207E0();
  sub_1000E9180( (void *)&_mh_execute_header,  v4,  v5,  "Skipping peerDiscovery setup since current game not supporting multiplayer: %@",  v6,  v7,  v8,  v9,  v10);

  sub_100020818();
}

void sub_1000E9504()
{
}

void sub_1000E9530()
{
}

void sub_1000E955C()
{
}

void sub_1000E9588()
{
}

void sub_1000E95B4()
{
}

void sub_1000E9618()
{
}

void sub_1000E9644()
{
}

void sub_1000E9670()
{
}

void sub_1000E969C()
{
}

void sub_1000E96C8()
{
}

void sub_1000E96F4(void *a1, double a2)
{
  uint64_t v3 = (os_log_s *)sub_100020824(a1);
  int v5 = 136315394;
  uint8_t v6 = "clientInit";
  __int16 v7 = 2048;
  double v8 = CFAbsoluteTimeGetCurrent() - a2;
  sub_1000207D4((void *)&_mh_execute_header, v3, v4, "%s elapsed seconds:%g", (uint8_t *)&v5);
}

void sub_1000E979C()
{
}

void sub_1000E97FC()
{
}

void sub_1000E9864(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)uint64_t v3 = 138412546;
  *(void *)&void v3[4] = *(void *)(a1 + 32);
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = a2;
  sub_10000C74C( (void *)&_mh_execute_header,  a2,  a3,  "%@ encountered an error:%@",  *(void *)v3,  *(void *)&v3[8],  *(void *)&v3[16]);
  sub_10000C760();
}

void sub_1000E98D8()
{
}

void sub_1000E9938()
{
}

void sub_1000E9998()
{
}

void sub_1000E99F8(void *a1, void *a2)
{
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
  __int16 v7 = (void *)objc_opt_class(*a1, v6);
  int v9 = 138412802;
  uint8_t v10 = v5;
  __int16 v11 = 2112;
  uint64_t v12 = v7;
  __int16 v13 = 2048;
  id v8 = sub_100020824(v7);
  _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "authenticatedPlayersDidChange: sent to client:%@ <%@ %p>)",  (uint8_t *)&v9,  0x20u);
}

void sub_1000E9AD4()
{
}

void sub_1000E9B34()
{
}

void sub_1000E9B94()
{
}

void sub_1000E9BF8()
{
}

void sub_1000E9D78(id a1)
{
  uint64_t v1 = -[GKThreadsafeDictionary initWithName:]( objc_alloc(&OBJC_CLASS___GKThreadsafeDictionary),  "initWithName:",  @"com.apple.gamed.per-player-context");
  uint64_t v2 = (void *)qword_1002BB620;
  qword_1002BB620 = (uint64_t)v1;
}

id sub_1000E9DAC(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), a2), "gameCenterClient");
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint8_t v6 = (void *)objc_opt_class(*(void *)(a1 + 32), v5);
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v4 language]);
  id v10 = objc_msgSend( v6,  "newManagedObjectContextForPlayerID:bundleID:language:environment:",  v7,  v8,  v9,  objc_msgSend(v4, "environment"));

  return v10;
}

id sub_1000EA398(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_1000EBA08(a1, v3, v4, v5, v6, v7, v8, v9);
  }
  [*(id *)(a1 + 48) closeDatabaseFromManagedObjectContextForPlayerID:*(void *)(a1 + 32)];
  return [(id)qword_1002BB620 removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_1000EA418(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EA4B0;
  block[3] = &unk_10026BEA0;
  id v2 = *(dispatch_queue_s **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  dispatch_async(v2, block);
}

void sub_1000EA4B0(uint64_t a1)
{
  id v4 = -[GKSecureFileLocator initWithFileManager:]( objc_alloc(&OBJC_CLASS___GKSecureFileLocator),  "initWithFileManager:",  *(void *)(a1 + 32));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleIdentifier]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) language]);
  -[GKSecureFileLocator removeCacheDirectoryWithBundleID:language:contextID:]( v4,  "removeCacheDirectoryWithBundleID:language:contextID:",  v2,  v3,  *(void *)(a1 + 48));
}

void sub_1000EA534(uint64_t a1)
{
  uint64_t v2 = GKImageCacheRoot(0LL);
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  id v4 = (void *)v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_1000EBAD0();
  }
  id v6 = *(void **)(a1 + 32);
  id v11 = 0LL;
  unsigned __int8 v7 = [v6 removeItemAtPath:v4 error:&v11];
  id v8 = v11;
  uint64_t v9 = v8;
  if ((v7 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers(v8);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000EBA70();
    }
  }
}

void sub_1000EA728(uint64_t a1)
{
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cacheFileQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EA7CC;
  block[3] = &unk_100271938;
  id v6 = *(id *)(a1 + 32);
  __int128 v4 = *(_OWORD *)(a1 + 40);
  id v3 = (id)v4;
  __int128 v7 = v4;
  dispatch_async(v2, block);
}

void sub_1000EA7CC(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_1000EBBF4(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allValues]);
  id v12 = [v11 countByEnumeratingWithState:&v27 objects:v31 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v28;
    do
    {
      id v15 = 0LL;
      do
      {
        if (*(void *)v28 != v14) {
          objc_enumerationMutation(v11);
        }
        [*(id *)(a1 + 48) closeDatabaseFromManagedObjectContextForMOC:*(void *)(*((void *)&v27 + 1) + 8 * (void)v15)];
        id v15 = (char *)v15 + 1;
      }

      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v27 objects:v31 count:16];
    }

    while (v13);
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v17 = -[GKSecureFileLocator initWithFileManager:]( objc_alloc(&OBJC_CLASS___GKSecureFileLocator),  "initWithFileManager:",  v16);
  -[GKSecureFileLocator removeCaches](v17, "removeCaches");
  uint64_t v18 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cacheDirectoryForBundleID:0]);
  __int128 v19 = (void *)v18;
  if (!os_log_GKGeneral) {
    id v20 = (id)GKOSLoggers(v18);
  }
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_1000EBB94();
  }
  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](&OBJC_CLASS___NSURL, "fileURLWithPath:isDirectory:", v19, 1LL));
  id v26 = 0LL;
  unsigned __int8 v22 = [v16 removeItemAtURL:v21 error:&v26];
  id v23 = v26;

  if ((v22 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v25 = (id)GKOSLoggers(v24);
    }
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_ERROR)) {
      sub_1000EBB30();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000EAA4C(id a1)
{
  if (!os_log_GKGeneral) {
    id v1 = (id)GKOSLoggers(a1);
  }
  id v2 = (os_log_s *)os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_1000EBC24(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_1000EAAE8(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 URLForResource:@"GKCentralCache" withExtension:@"momd"]);

  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers(v3);
  }
  uint64_t v5 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    uint64_t v9 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Loading CoreData model from URL: %@",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v6 = -[NSManagedObjectModel initWithContentsOfURL:]( objc_alloc(&OBJC_CLASS___NSManagedObjectModel),  "initWithContentsOfURL:",  v2);
  uint64_t v7 = (void *)qword_1002BB638;
  qword_1002BB638 = (uint64_t)v6;
}

void sub_1000EAC3C(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.gamed.GKClientProxy.cache.file.queue", 0LL);
  id v2 = (void *)qword_1002BB648;
  qword_1002BB648 = (uint64_t)v1;
}

void sub_1000EB078(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers(v2);
  }
  id v4 = (os_log_s *)os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_1000EBEB0(a1, v4, v5, v6, v7, v8, v9, v10);
  }
  id v11 = *(void **)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 48);
  id v51 = 0LL;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( [v11 addPersistentStoreWithType:NSSQLiteStoreType configuration:0 URL:v12 options:v13 error:&v51]);
  id v15 = v51;

  if (!v14)
  {
    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers(v16);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000EBE44((void *)(a1 + 32));
    }

    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers(v18);
    }
    id v20 = (os_log_s *)os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_1000EBE14(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    __int128 v28 = *(void **)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 32);
    id v50 = 0LL;
    unsigned int v30 = [v28 removeItemAtURL:v29 error:&v50];
    id v31 = v50;
    id v15 = v31;
    if (v30)
    {

      uint64_t v33 = *(void *)(a1 + 32);
      unsigned __int8 v32 = *(void **)(a1 + 40);
      uint64_t v34 = *(void *)(a1 + 48);
      id v49 = 0LL;
      id v35 =  [v32 addPersistentStoreWithType:NSSQLiteStoreType configuration:0 URL:v33 options:v34 error:&v49];
      id v16 = v49;
      id v15 = v16;
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v36 = (id)GKOSLoggers(v31);
      }
      id v16 = (id)os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v16) {
        sub_1000EBDA8((void *)(a1 + 32));
      }
    }
  }

  if (!os_log_GKGeneral) {
    id v37 = (id)GKOSLoggers(v16);
  }
  id v38 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_1000EBD1C(v38);
  }
  __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) persistentStores]);
  id v40 = [v39 count];

  if (!v40)
  {
    id v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"FATAL: Failed to add persistent store at %@ : %@",  *(void *)(a1 + 32),  v15));
    +[GKProcessExiter cleanExitWith:](&OBJC_CLASS___GKProcessExiter, "cleanExitWith:", v41);
  }

  dispatch_queue_t current_queue = dispatch_get_current_queue();
  __int128 v43 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(current_queue);
  dispatch_queue_set_specific(v43, @"com.apple.gamed.cachequeue", @"com.apple.gamed.cachequeue", 0LL);

  if (!os_log_GKGeneral) {
    id v45 = (id)GKOSLoggers(v44);
  }
  uint64_t v46 = (void *)os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
    sub_1000EBC54((void **)(a1 + 40), v46);
  }
  [*(id *)(a1 + 64) setPersistentStoreCoordinator:*(void *)(a1 + 40)];
  [*(id *)(a1 + 64) setMergePolicy:NSMergeByPropertyObjectTrumpMergePolicy];
  [*(id *)(a1 + 64) setRetainsRegisteredObjects:0];
  uint64_t v47 = *(void *)(a1 + 72);
  if (v47)
  {
    id v48 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v47,  *(void *)(a1 + 64)));
    if (v48) {
      +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "buildFamiliarilyLookupForProfile:",  v48);
    }
  }
}

void sub_1000EB51C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000EB534(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000EB544(uint64_t a1)
{
}

void sub_1000EB54C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) createPersistentStoreCoordinator]);
  v9[0] = NSPersistentStoreFileProtectionKey;
  v9[1] = NSSQLitePragmasOption;
  v10[0] = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v10[1] = &off_100288598;
  void v9[2] = NSMigratePersistentStoresAutomaticallyOption;
  v9[3] = NSInferMappingModelAutomaticallyOption;
  void v10[2] = &__kCFBooleanTrue;
  v10[3] = &__kCFBooleanTrue;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v10,  v9,  4LL));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 64) gameCenterCacheDatabaseURLForPlayerID:*(void *)(a1 + 32) language:*(void *)(a1 + 40) name:@"database.sqlite3" fileManager:v4]);
  [*(id *)(a1 + 64) migrateInsecureDatabaseToSecureDatabaseURL:v5 usingPersistantStoreCoordinator:v2 fileManager:v4 options:v3 playerID:*(void *)(a1 + 32) bundleID:*(void *)(a1 + 48) language:*(void *)(a1 + 40) name:@"database.sqlite3"];
  id v6 = [*(id *)(a1 + 64) _newManagedObjectContextWithCacheURL:v5 environment:*(void *)(a1 + 72) psc:v2 storeOptions:v3];
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1000EB8F4(uint64_t a1)
{
  id v1 = objc_msgSend(*(id *)(a1 + 32), "persistentStoreCoordinator", CFAbsoluteTimeGetCurrent());
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 persistentStores]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);
  id v9 = 0LL;
  unsigned __int8 v5 = [v2 removePersistentStore:v4 error:&v9];
  id v6 = v9;

  if ((v5 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v7);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000EBFA4();
    }
  }
}

void sub_1000EB9D4( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_1000EBA08( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000EBA70()
{
}

void sub_1000EBAD0()
{
}

void sub_1000EBB30()
{
}

void sub_1000EBB94()
{
}

void sub_1000EBBF4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000EBC24( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000EBC54(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 persistentStores]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 firstObject]);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 URL]);
  sub_1000207E0();
  _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Creating managed object context with persistent store %@",  v7,  0xCu);
}

void sub_1000EBD1C(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_1000207EC();
  sub_1000EB9D4((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_1000EB9E8();
}

void sub_1000EBDA8(void *a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = *a1;
  sub_1000EB9F8();
  sub_10000C74C((void *)&_mh_execute_header, v1, v2, "Error removing cache file at %@ : %@", (void)v3, DWORD2(v3));
  sub_10000C760();
}

void sub_1000EBE14( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000EBE44(void *a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = *a1;
  sub_1000EB9F8();
  sub_10000C74C((void *)&_mh_execute_header, v1, v2, "Error adding persistent store at %@ : %@", (void)v3, DWORD2(v3));
  sub_10000C760();
}

void sub_1000EBEB0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000EBF18(void *a1)
{
  id v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_1000207EC();
  sub_1000EB9D4((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_1000EB9E8();
}

void sub_1000EBFA4()
{
}

uint64_t sub_1000EC500(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000ECABC(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "setTestGame: rejected non-allowed bundleID: %@",  (uint8_t *)&v2,  0xCu);
}

void sub_1000ECD40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  uint8_t v6 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "got localized name for game:%@", buf, 0xCu);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "pushCredentialForEnvironment:", objc_msgSend(*(id *)(a1 + 32), "currentEnvironment")));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 playerInternal]);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceForBundleID:localPlayer:]( &OBJC_CLASS___GKMultiplayerMatchService,  "serviceForBundleID:localPlayer:",  *(void *)(a1 + 40),  v9));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1000ECEE8;
  v15[3] = &unk_100272138;
  id v16 = v4;
  id v11 = *(void **)(a1 + 48);
  id v12 = v11;
  uint64_t v13 = *(void *)(a1 + 32);
  id v17 = v12;
  uint64_t v18 = v13;
  id v14 = v4;
  [v10 updateCacheWithNearbyProfileDictionary:v11 handler:v15];
}

void sub_1000ECEE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = -[GKBulletinNearbyInvite initWithPlayer:localizedGameName:inviteDictionary:]( objc_alloc(&OBJC_CLASS___GKBulletinNearbyInvite),  "initWithPlayer:localizedGameName:inviteDictionary:",  v3,  *(void *)(a1 + 32),  *(void *)(a1 + 40));

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](&OBJC_CLASS___GKBulletinController, "sharedController"));
  [v5 presentBulletin:v4];

  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers(v6);
  }
  id v8 = (os_log_s *)os_log_GKTrace;
  BOOL v9 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
  if (v9)
  {
    LOWORD(v1_Block_object_dispose(va, 8) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "GKDataRequestManager+Nearby: presentNearbyInvite - Presented Nearby Invite",  (uint8_t *)&v18,  2u);
  }

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers(v9);
  }
  id v11 = (os_log_s *)os_log_GKMatch;
  BOOL v12 = os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO);
  if (v12)
  {
    int v18 = 138412290;
    id v19 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "presented nearby invite:%@",  (uint8_t *)&v18,  0xCu);
  }

  if (!os_log_GKGeneral) {
    id v13 = (id)GKOSLoggers(v12);
  }
  id v14 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    LOWORD(v1_Block_object_dispose(va, 8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "end presentNearbyInvite:", (uint8_t *)&v18, 2u);
  }

  id v15 = [*(id *)(a1 + 48) endTransaction:@"presentNearbyInvite"];
  if (!os_log_GKGeneral) {
    id v16 = (id)GKOSLoggers(v15);
  }
  id v17 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    LOWORD(v1_Block_object_dispose(va, 8) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "GKDataRequestManager+Nearby: presentNearbyInvite - Ended Nearby Invite",  (uint8_t *)&v18,  2u);
  }
}

void sub_1000ED74C(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "GKDataRequestManager+Nearby: handleNearbyInviteResponse: - No Client Proxy Found for incoming dictionary:%@",  (uint8_t *)&v2,  0xCu);
}

void sub_1000ED7C0(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 134218242;
  uint64_t v4 = a2;
  __int16 v5 = 2112;
  uint64_t v6 = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "GKDataRequestManager+Nearby - Nearby invite NC response type not handled: %ld for incoming dictionary:%@",  (uint8_t *)&v3,  0x16u);
}

id GKDaemonRun()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.gamed.clientQueue", 0LL);
  uint64_t v1 = (void *)qword_1002BB650;
  qword_1002BB650 = (uint64_t)v0;

  int v2 = objc_alloc_init(&OBJC_CLASS___GKDataRequestManager);
  int v3 = (void *)qword_1002BB658;
  qword_1002BB658 = (uint64_t)v2;

  [(id)qword_1002BB658 finishStartup];
  [(id)qword_1002BB658 updateActivePushEnvironment];
  return +[GKClientProxy checkGameCenterEnabledForegroundClients]( &OBJC_CLASS___GKClientProxy,  "checkGameCenterEnabledForegroundClients");
}

void sub_1000ED9A8(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.GameKit.GKDataRequestManager.push", 0LL);
  int v2 = (void *)qword_1002BB660;
  qword_1002BB660 = (uint64_t)v1;
}

void sub_1000EDA14(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.GameKit.GKDataRequestManager.sync", 0LL);
  int v2 = (void *)qword_1002BB670;
  qword_1002BB670 = (uint64_t)v1;

  dispatch_queue_set_specific( (dispatch_queue_t)qword_1002BB670,  &off_1002B7BB8,  "com.apple.GameKit.GKDataRequestManager.sync",  0LL);
}

void sub_1000EDCAC(uint64_t a1)
{
  int v2 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  @"com.apple.gamed");
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 8);
  *(void *)(v3 + _Block_object_dispose(va, 8) = v2;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "setDelegate:");
  [*(id *)(*(void *)(a1 + 32) + 8) setOptions:256];
  objc_msgSend( *(id *)(a1 + 32),  "setNatType:",  +[GKViceroyNATTypeHelper initialNATType](GKViceroyNATTypeHelper, "initialNATType"));
  __int16 v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKReachability _gkReachabilityForInternetConnection]( &OBJC_CLASS___GKReachability,  "_gkReachabilityForInternetConnection"));
  [*(id *)(a1 + 32) setReachability:v5];

  [*(id *)(*(void *)(a1 + 32) + 120) _gkStartNotifier];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v6 addObserver:*(void *)(a1 + 32) selector:"reachabilityDidChange:" name:@"GKNetworkReachabilityChangedNotification" object:0];

  [*(id *)(a1 + 32) iCloudAccountAvailabilityChanged:0];
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v7 addObserver:*(void *)(a1 + 32) selector:"iCloudAccountAvailabilityChanged:" name:CKAccountChangedNotification object:0];

  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  [*(id *)(a1 + 32) setTransactionBag:v8];

  BOOL v9 = objc_alloc_init(&OBJC_CLASS___NSCountedSet);
  [*(id *)(a1 + 32) setTransactionCounts:v9];
}

void sub_1000EDF34(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  CFAbsoluteTimeGetCurrent();
  uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  int v65 = (void *)v3;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers(v3);
  }
  __int16 v5 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_1000F4E18(v5);
  }
  CFAbsoluteTimeGetCurrent();
  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
  id v64 = (void *)v6;
  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers(v6);
  }
  id v8 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_1000F4D8C(v8);
  }
  +[GKImageRestrictions setForCurrentProcess](&OBJC_CLASS___GKImageRestrictions, "setForCurrentProcess");
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
  objc_msgSend(v9, "setUseTestProtocols:", _os_feature_enabled_impl("gseui", "de7bbd8e"));

  +[GKPlayerCredentialController migrateOldAccountInformation]( &OBJC_CLASS___GKPlayerCredentialController,  "migrateOldAccountInformation");
  CFAbsoluteTimeGetCurrent();
  id v10 = [*(id *)(a1 + 32) preferredEnvironment];
  id v11 = [v64 isStoreDemoModeEnabled];
  if ((v11 & 1) == 0)
  {
    uint64_t v12 = GKCurrentEnvironmentKey;
    id v11 = [v65 integerForKey:GKCurrentEnvironmentKey];
    if (v10 != v11) {
      id v11 = [v65 setInteger:v10 forKey:v12];
    }
  }

  *(void *)(*(void *)(a1 + 32) + 16LL) = v10;
  if (!os_log_GKGeneral) {
    id v13 = (id)GKOSLoggers(v11);
  }
  id v14 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_1000F4D00(v14);
  }
  uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSBundle _gkPreferredSystemLanguage](&OBJC_CLASS___NSBundle, "_gkPreferredSystemLanguage"));
  id v16 = (void *)v15;
  if (v15) {
    GKSetPreferredLanguage(v15);
  }
  CFAbsoluteTimeGetCurrent();
  __int16 v63 = -[NSURLCache initWithMemoryCapacity:diskCapacity:diskPath:]( objc_alloc(&OBJC_CLASS___NSURLCache),  "initWithMemoryCapacity:diskCapacity:diskPath:",  0LL,  0LL,  &stru_10027B720);
  id v17 = +[NSURLCache setSharedURLCache:](&OBJC_CLASS___NSURLCache, "setSharedURLCache:", v63);
  if (!os_log_GKGeneral) {
    id v18 = (id)GKOSLoggers(v17);
  }
  id v19 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_1000F4C74(v19);
  }
  CFAbsoluteTimeGetCurrent();
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  uint64_t v21 = GKPushTokenKey;
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:GKPushTokenKey]);
  uint64_t v23 = a1 + 32;
  [*(id *)(a1 + 32) setPushToken:v22];

  uint64_t v24 = objc_claimAutoreleasedReturnValue([v65 objectForKey:v21]);
  uint64_t v25 = *(void **)(*(void *)(a1 + 32) + 24LL);
  *(void *)(*(void *)v23 + 24LL) = v24;

  uint64_t v26 = objc_alloc(&OBJC_CLASS___APSConnection);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager pushQueue](&OBJC_CLASS___GKDataRequestManager, "pushQueue"));
  __int128 v28 = -[APSConnection initWithEnvironmentName:namedDelegatePort:queue:]( v26,  "initWithEnvironmentName:namedDelegatePort:queue:",  APSEnvironmentProduction,  @"com.apple.gamed.aps",  v27);
  uint64_t v29 = *(void **)(*(void *)(a1 + 32) + 72LL);
  *(void *)(*(void *)v23 + 72LL) = v28;

  unsigned int v30 = *(void **)(a1 + 32);
  v70[0] = _NSConcreteStackBlock;
  v70[1] = 3221225472LL;
  v70[2] = sub_1000EE6DC;
  v70[3] = &unk_10026B670;
  void v70[4] = v30;
  [v30 performAsync:v70];
  else {
    id v31 = [v65 integerForKey:GKPushEnvironmentKey];
  }
  id v32 = [*(id *)(a1 + 32) setActivePushEnvironment:v31];
  if (!os_log_GKGeneral) {
    id v33 = (id)GKOSLoggers(v32);
  }
  uint64_t v34 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_1000F4BE8(v34);
  }
  CFAbsoluteTimeGetCurrent();
  id v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v35 addObserver:*(void *)(a1 + 32) selector:"credentialsDidChange:" name:GKPrimaryCredentialDidChangeNotification object:0];

  id v36 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
  unsigned int v37 = [v36 isGameCenterRestricted];

  if (v37) {
    [*(id *)(a1 + 32) gameCenterDidBecomeRestricted];
  }
  id v38 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
  [v38 setPreferencesDelegate:*(void *)(a1 + 32)];

  id v39 = [*(id *)(a1 + 32) setUpCloudKitNotificationTopics];
  if (!os_log_GKGeneral) {
    id v40 = (id)GKOSLoggers(v39);
  }
  id v41 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG)) {
    sub_1000F4B5C(v41);
  }
  double v42 = CFAbsoluteTimeGetCurrent();
  __int128 v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v44 = objc_alloc_init(&OBJC_CLASS___GKApplicationStateMonitor);
  uint64_t v45 = *(void *)(a1 + 32);
  uint64_t v46 = *(void **)(v45 + 104);
  *(void *)(v45 + 104) = v44;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3221225472LL;
  v67[2] = sub_1000EE7B8;
  v67[3] = &unk_1002721C8;
  objc_copyWeak(&v68, &location);
  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationStateMonitor]);
  [v47 setHandler:v67];

  id v48 = *(void **)(a1 + 32);
  v66[0] = _NSConcreteStackBlock;
  v66[1] = 3221225472LL;
  v66[2] = sub_1000EE800;
  v66[3] = &unk_10026B670;
  v66[4] = v48;
  [v48 performAsync:v66];
  [v43 addObserver:*(void *)(a1 + 32) selector:"storeBagChanged:" name:@"GKStoreBagUpdatedNotification" object:0];
  [*(id *)(a1 + 32) performAsync:&stru_1002721E8];
  id v49 = [*(id *)(a1 + 32) setReceivesMemoryWarnings:1];
  if (!os_log_GKGeneral) {
    id v50 = (id)GKOSLoggers(v49);
  }
  id v51 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "Installing language change notification", buf, 2u);
  }

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  @"GKLanguageObserver",  (CFNotificationCallback)sub_1000EE8A8,  @"com.apple.language.changed",  0LL,  CFNotificationSuspensionBehaviorCoalesce);
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  @"GKApplicationObserver",  (CFNotificationCallback)sub_1000EE948,  GKApplicationsChangeNotificationName,  0LL,  CFNotificationSuspensionBehaviorCoalesce);
  if (!os_log_GKGeneral) {
    id v54 = (id)GKOSLoggers(v53);
  }
  __int16 v55 = (os_log_s *)os_log_GKPerf;
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
  {
    double v56 = CFAbsoluteTimeGetCurrent();
    sub_1000F4B18(buf, v56, v42);
  }

  [*(id *)(*(void *)(a1 + 32) + 8) resume];
  __int16 v57 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ampController]);
  id v58 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) storeBag]);
  [v57 setupAsyncWithStoreBag:v58 withCompletion:&stru_100272208];

  id v59 = [*(id *)(a1 + 32) synchronizeBagWithPreferences];
  if (!os_log_GKGeneral) {
    id v60 = (id)GKOSLoggers(v59);
  }
  __int16 v61 = (os_log_s *)os_log_GKPerf;
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
  {
    double v62 = CFAbsoluteTimeGetCurrent();
    sub_1000F4AD4(v71, v62, Current);
  }

  objc_destroyWeak(&v68);
  objc_destroyWeak(&location);
}

void sub_1000EE6A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

void sub_1000EE6DC(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 72), "setDelegate:");
  if (!os_log_GKGeneral) {
    id v3 = (id)GKOSLoggers(v2);
  }
  id v4 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(v5 + 72);
    uint64_t v6 = *(void *)(v5 + 80);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "PROD CONNECTION: %@ DEV: %@",  (uint8_t *)&v8,  0x16u);
  }

void sub_1000EE7B8(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained appStateChanged:v3];
}

id sub_1000EE800(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Installing startObservingApplicationWorkspaceChanges observer",  v5,  2u);
  }

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 104), "setDelegate:");
  return [*(id *)(*(void *)(a1 + 32) + 104) startObservingApplicationWorkspaceChanges];
}

void sub_1000EE89C(id a1)
{
}

uint64_t sub_1000EE8A8(uint64_t a1, uint64_t a2)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1, a2);
  }
  id v3 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Terminating due to language change notification",  v6,  2u);
  }

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver( DarwinNotifyCenter,  @"GKLanguageObserver",  @"com.apple.language.changed",  0LL);
  return xpc_transaction_exit_clean();
}

void sub_1000EE948(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v1 = (id)GKOSLoggers(a1);
  }
  id v2 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Applications changed.", buf, 2u);
  }

  id v3 = objc_autoreleasePoolPush();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  [v5 invalidateCredentialCaches];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  id v7 = [v4 environment];
  int v8 = (void *)objc_claimAutoreleasedReturnValue([v4 currentGame]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 bundleIdentifier]);
  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v6 primaryCredentialForEnvironment:v7 gameID:v9]);

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKDataRequestManager.m",  253LL,  "void GKObserveApplicationsChanged(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 playerInternal]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 playerID]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v4 transactionGroupWithName:v11 forPlayerID:v13]);

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_1000F49E0;
  void v16[3] = &unk_10026C810;
  id v17 = v4;
  id v15 = v4;
  [v14 performOnManagedObjectContext:v16];

  objc_autoreleasePoolPop(v3);
}

void sub_1000EEB4C(id a1)
{
  if (!os_log_GKGeneral) {
    id v1 = (id)GKOSLoggers(a1);
  }
  id v2 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Finished setting up metrics controller during initial launch phase.",  v3,  2u);
  }

void sub_1000EECB0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) storeBag]);

  if (v2 == v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v4);
    }
    uint64_t v6 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Updating connectivity and push environment",  v7,  2u);
    }

    [*(id *)(a1 + 40) updateCachedNATSettingsIfNeededWithCompletionHandler:&stru_100272228];
    [*(id *)(a1 + 40) updateActivePushEnvironment];
    [*(id *)(a1 + 40) synchronizeBagWithPreferences];
  }

LABEL_40:
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

id sub_1000EF360(uint64_t a1)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(current_queue);
  uint64_t v4 = v3;
  id v5 = *(dispatch_queue_s **)(a1 + 32);
  if (v3 != v5)
  {
    label = dispatch_queue_get_label(v3);
    id v7 = dispatch_queue_get_label(v5);
    int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s invoked on the wrong queue (got:%s expected:%s) at %@",  "-[GKDataRequestManager _updateNotificationTopicsForcefully:]_block_invoke",  label,  v7,  v8));
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m"));
    id v11 = objc_claimAutoreleasedReturnValue([v10 lastPathComponent]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@ (_actualCurrentQueue == syncQueue)\n[%s (%s:%d)]",  v9,  "-[GKDataRequestManager _updateNotificationTopicsForcefully:]_block_invoke",  [v11 UTF8String],  585));

    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  @"GameKit Exception",  @"%@",  v12);
  }

  return [*(id *)(a1 + 40) setPushUpdatesBusy:0];
}

id sub_1000EF618(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateNotificationTopicsForcefully:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1000EF7C4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v2 removeObjectForKey:GKPushTokenKey];
  [v2 removeObjectForKey:GKPushEnvironmentKey];
  [*(id *)(a1 + 32) _setActivePushEnvironment:0];
}

void sub_1000EFA24(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    uint64_t v6 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_ERROR)) {
      sub_1000F4F10(a1, v6, (uint64_t)v4);
    }
  }

  [*(id *)(a1 + 32) updateCachedNATSettingsIfNeededWithCompletionHandler:&stru_100272248];
  [*(id *)(a1 + 32) updateActivePushEnvironment];
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](&OBJC_CLASS___GKBulletinController, "sharedController"));
  [v7 removeAllBulletins];

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000EFB38;
  void v8[3] = &unk_10026B120;
  id v9 = *(id *)(a1 + 40);
  +[GKClientProxy removeAllCachesWithHandler:](&OBJC_CLASS___GKClientProxy, "removeAllCachesWithHandler:", v8);
}

uint64_t sub_1000EFB38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000EFB50(id a1)
{
  if (!os_log_GKGeneral) {
    id v1 = (id)GKOSLoggers(a1);
  }
  id v2 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "The environment has been reset", v3, 2u);
  }

void sub_1000F0198( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id location)
{
}

id sub_1000F01E0(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = v3;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 138412546;
    id v9 = WeakRetained;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Connection (%@) to client (%@) INTERRUPTED.",  (uint8_t *)&v8,  0x16u);
  }

  return [*(id *)(a1 + 32) setConnection:0];
}

void sub_1000F02E0(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = v3;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    id v12 = WeakRetained;
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Connection (%@) to client (%@) INVALID.",  buf,  0x16u);
  }

  [*(id *)(a1 + 32) setConnection:0];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000F0430;
  void v8[3] = &unk_10026BDB0;
  id v7 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = v7;
  [v9 performAsync:v8];
}

id sub_1000F0430(uint64_t a1)
{
  return _[*(id *)(a1 + 32) terminateClient:*(void *)(a1 + 40)];
}

id sub_1000F0778(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateCachedNATSettingsIfNeededWithCompletionHandler:*(void *)(a1 + 40)];
}

void sub_1000F0784(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  int v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(current_queue);
  id v10 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v9), "syncQueue");
  uint64_t v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);

  if (v8 != v11)
  {
    id v30 = v6;
    label = dispatch_queue_get_label(v8);
    id v14 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v13), "syncQueue");
    id v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v14);
    id v16 = dispatch_queue_get_label(v15);
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s invoked on the wrong queue (got:%s expected:%s) at %@",  "-[GKDataRequestManager updateCachedNATSettingsIfNeededWithCompletionHandler:]_block_invoke",  label,  v16,  v17));
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m"));
    id v20 = objc_claimAutoreleasedReturnValue([v19 lastPathComponent]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@ (_actualCurrentQueue == [[self class] syncQueue])\n[%s (%s:%d)]",  v18,  "-[GKDataRequestManager updateCachedNATSettingsIfNeededWithCompletionHandler:]_block_invoke",  [v20 UTF8String],  878));

    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  @"GameKit Exception",  @"%@",  v21);
    id v6 = v30;
  }

  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v23 = (id)GKOSLoggers(v22);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_1000F50D8();
    }
  }

  if ([v5 count])
  {
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) storeBag]);
    uint64_t v25 = *(void **)(a1 + 40);

    if (v24 == v25)
    {
      [*(id *)(a1 + 32) setCommonNATSettings:v5];
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v27 = (id)GKOSLoggers(v26);
      }
      __int128 v28 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "[NAT] Bag has changed, not updating NAT settings",  buf,  2u);
      }
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v29 = (id)GKOSLoggers(0LL);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000F5078();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000F0B48(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) natType];
  if (v3)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastNATTypeCheckDate]);
    BOOL v4 = v1 != 0LL;
  }

  else
  {
    BOOL v4 = 0LL;
  }

  id v5 = +[GKViceroyNATTypeHelper isUnknown:](&OBJC_CLASS___GKViceroyNATTypeHelper, "isUnknown:", v4);
  if ((v5 & 1) != 0)
  {
    BOOL v6 = 0;
    if (!v3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastNATTypeCheckDate]);
  [v15 timeIntervalSinceDate:v16];
  BOOL v6 = v17 <= 60.0;

  if (v3) {
LABEL_6:
  }

LABEL_7:
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(v5);
    }
    int v8 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void **)(a1 + 32);
      id v10 = v8;
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v9 natType]));
      *(_DWORD *)buf = 138412290;
      uint64_t v25 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[NAT] Returning cached NAT type: %@.",  buf,  0xCu);
    }

    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    uint64_t v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000F0E10;
    block[3] = &unk_10026B030;
    id v14 = *(id *)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v23 = v14;
    dispatch_async(v13, block);
  }

  else
  {
    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    id v18 = *(void **)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_1000F0E3C;
    void v19[3] = &unk_100272330;
    void v19[4] = v18;
    objc_copyWeak(&v21, (id *)buf);
    id v20 = *(id *)(a1 + 40);
    [v18 awaitNATSettingsAndUpdateIfNeededWithCompletionHandler:v19];

    objc_destroyWeak(&v21);
    objc_destroyWeak((id *)buf);
  }

void sub_1000F0DEC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F0E10(uint64_t a1)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [*(id *)(a1 + 32) natType]);
}

void sub_1000F0E3C(uint64_t a1)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(current_queue);
  id v5 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v4), "syncQueue");
  BOOL v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v5);

  if (v3 != v6)
  {
    label = dispatch_queue_get_label(v3);
    id v9 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v8), "syncQueue");
    id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = dispatch_queue_get_label(v10);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s invoked on the wrong queue (got:%s expected:%s) at %@",  "-[GKDataRequestManager getValidNATTypeWithForceRelay:withHandler:]_block_invoke_2",  label,  v11,  v12));
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m"));
    id v15 = objc_claimAutoreleasedReturnValue([v14 lastPathComponent]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@ (_actualCurrentQueue == [[self class] syncQueue])\n[%s (%s:%d)]",  v13,  "-[GKDataRequestManager getValidNATTypeWithForceRelay:withHandler:]_block_invoke_2",  [v15 UTF8String],  921));

    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  @"GameKit Exception",  @"%@",  v16);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained commonNATSettings]);

  if (v18)
  {
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKDataRequestManager.m",  933LL,  "-[GKDataRequestManager getValidNATTypeWithForceRelay:withHandler:]_block_invoke_2"));
    id v21 = (void *)objc_claimAutoreleasedReturnValue( +[GKDispatchGroup dispatchGroupWithName:]( &OBJC_CLASS___GKDispatchGroup,  "dispatchGroupWithName:",  v20));

    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_1000F1258;
    void v35[3] = &unk_100272308;
    id v22 = (id)objc_claimAutoreleasedReturnValue( +[GKViceroyNATObserverFactory makeObserver]( &OBJC_CLASS___GKViceroyNATObserverFactory,  "makeObserver"));
    id v36 = v22;
    id v37 = WeakRetained;
    objc_copyWeak(&v38, (id *)(a1 + 48));
    [v21 perform:v35];
    id v23 = [v21 waitWithTimeout:3.0];
    if (v23)
    {
      if (!os_log_GKGeneral) {
        id v24 = (id)GKOSLoggers(v23);
      }
      uint64_t v25 = (os_log_s *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
        sub_1000F5138(v25);
      }
    }

    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    id v27 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000F1490;
    block[3] = &unk_10026B030;
    id v28 = *(id *)(a1 + 40);
    void block[4] = WeakRetained;
    id v34 = v28;
    dispatch_async(v27, block);

    objc_destroyWeak(&v38);
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v29 = (id)GKOSLoggers(v19);
    }
    id v30 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "[NAT] Returning unknown NAT type since common NAT settings are not available yet.",  buf,  2u);
    }

    dispatch_queue_global_t v31 = dispatch_get_global_queue(0LL, 0LL);
    id v32 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v31);
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472LL;
    v39[2] = sub_1000F1224;
    void v39[3] = &unk_10026B120;
    id v40 = *(id *)(a1 + 40);
    dispatch_async(v32, v39);

    id v21 = v40;
  }
}

void sub_1000F120C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F1224(uint64_t a1)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[GKViceroyNATTypeHelper initialNATType](&OBJC_CLASS___GKViceroyNATTypeHelper, "initialNATType"));
}

void sub_1000F1258(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) commonNATSettings]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000F132C;
  void v7[3] = &unk_1002722E0;
  objc_copyWeak(&v9, (id *)(a1 + 48));
  id v6 = v3;
  id v8 = v6;
  [v4 getNATTypeWithNATSettings:v5 completionHandler:v7];

  objc_destroyWeak(&v9);
}

void sub_1000F1318(_Unwind_Exception *a1)
{
}

void sub_1000F132C(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setNatType:a2];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [WeakRetained setLastNATTypeCheckDate:v5];

  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers(v6);
  }
  id v8 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v9 = v8;
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained lastNATTypeCheckDate]);
    int v12 = 138412546;
    uint64_t v13 = v10;
    __int16 v14 = 2112;
    id v15 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "[NAT] Returning NAT type: %@. Updating last check date to: %@.",  (uint8_t *)&v12,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000F1490(uint64_t a1)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [*(id *)(a1 + 32) natType]);
}

void sub_1000F1574( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000F158C(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 40LL);
  return result;
}

id sub_1000F1938(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setActivePushEnvironment:*(void *)(a1 + 40)];
}

void sub_1000F19F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000F1A08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000F1A18(uint64_t a1)
{
}

void sub_1000F1A20(uint64_t a1)
{
}

id sub_1000F1D38(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setPushToken:*(void *)(a1 + 40)];
}

void sub_1000F1F94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(current_queue);
  id v10 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v9), "syncQueue");
  uint64_t v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);

  if (v8 != v11)
  {
    id v25 = v6;
    label = dispatch_queue_get_label(v8);
    id v14 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v13), "syncQueue");
    id v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v14);
    id v16 = dispatch_queue_get_label(v15);
    double v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s invoked on the wrong queue (got:%s expected:%s) at %@",  "-[GKDataRequestManager updateActivePushEnvironment]_block_invoke",  label,  v16,  v17));
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m"));
    id v20 = objc_claimAutoreleasedReturnValue([v19 lastPathComponent]);
    id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@ (_actualCurrentQueue == [[self class] syncQueue])\n[%s (%s:%d)]",  v18,  "-[GKDataRequestManager updateActivePushEnvironment]_block_invoke",  [v20 UTF8String],  1066));

    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  @"GameKit Exception",  @"%@",  v21);
    id v6 = v25;
  }

  if (![v5 count])
  {
    if (!os_log_GKGeneral) {
      id v22 = (id)GKOSLoggers(0LL);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000F5178();
    }
  }

  id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) storeBag]);
  id v24 = *(void **)(a1 + 40);

  if (v23 == v24) {
    [*(id *)(a1 + 32) _updatePushEnvironmentWithStoreBag:v5];
  }
}

void sub_1000F22B8(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"gk-push-token-ttl"]);
  double v4 = (double)(uint64_t)[v3 integerValue];

  id v5 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000F237C;
  void v6[3] = &unk_1002723C8;
  void v6[4] = v5;
  __int128 v9 = *(_OWORD *)(a1 + 56);
  id v8 = *(id *)(a1 + 48);
  double v10 = v4;
  id v7 = *(id *)(a1 + 40);
  [v5 performAsync:v6];
}

void sub_1000F237C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 pushCredentialForEnvironment:*(void *)(a1 + 56)]);

  double v4 = (void *)objc_claimAutoreleasedReturnValue([v3 playerInternal]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 playerID]);

  uint64_t v7 = *(void *)(a1 + 32);
  if (*(void *)(v7 + 16) == *(void *)(a1 + 56) && *(void *)(v7 + 40) == *(void *)(a1 + 64))
  {
    id v8 = *(id *)(v7 + 24);
    if ([v8 length])
    {
      if (v3)
      {
        __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
        double v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"GKLastPushTokenPlayerID"]);
        __int128 v43 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"GKLastPreferredSystemLanguage"]);
        id v11 = [v9 integerForKey:@"GKLastPushTokenEnvironment"];
        int v12 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"GKLastPushTokenKey"]);
        id v40 = v9;
        uint64_t v13 = objc_claimAutoreleasedReturnValue([v9 objectForKey:@"GKLastPushTokenDateKey"]);
        uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NSBundle _gkPreferredSystemLanguage](&OBJC_CLASS___NSBundle, "_gkPreferredSystemLanguage"));
        id v15 = *(id *)(a1 + 56);
        double v42 = v10;
        unsigned int v16 = [v10 isEqualToString:v5];
        unsigned int v17 = [v12 isEqualToData:v8];
        id v41 = v12;
        uint64_t v44 = (void *)v13;
        if (v12) {
          BOOL v18 = v13 == 0;
        }
        else {
          BOOL v18 = 1;
        }
        if (!v18 && v11 == v15) {
          int v20 = v16 & v17 ^ 1;
        }
        else {
          int v20 = 1;
        }
        double v21 = *(double *)(a1 + 72);
        if (v21 > 0.0)
        {
          id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          [v22 timeIntervalSinceDate:v13];
          if (v21 < v23) {
            int v20 = 1;
          }
        }

        id v24 = (void *)v14;
        id v25 = [v43 isEqualToString:v14];
        if (!(_DWORD)v25 || v20)
        {
          id v54 = @"apns-token";
          id v55 = v8;
          id v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v55,  &v54,  1LL));
          id v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) storeBag]);
          id v37 = (void *)objc_claimAutoreleasedReturnValue([v35 _gkPlistXMLDataForClient:0 player:0]);
          v45[0] = _NSConcreteStackBlock;
          v45[1] = 3221225472LL;
          v45[2] = sub_1000F284C;
          v45[3] = &unk_1002723A0;
          uint64_t v26 = v40;
          id v46 = v40;
          id v38 = v5;
          uint64_t v39 = *(void *)(a1 + 56);
          id v47 = v38;
          uint64_t v52 = v39;
          id v48 = v8;
          id v49 = v24;
          id v50 = *(id *)(a1 + 40);
          id v51 = *(id *)(a1 + 48);
          [v36 writeDataForBagKey:@"gk-set-apns-token" postData:v37 client:0 credential:v3 completion:v45];

          id v27 = v41;
          id v30 = v42;
        }

        else
        {
          uint64_t v26 = v40;
          id v27 = v41;
          if (!os_log_GKGeneral) {
            id v28 = (id)GKOSLoggers(v25);
          }
          id v29 = (os_log_s *)os_log_GKDaemon;
          id v30 = v42;
          if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "Not sending push token, last one sent is still good",  buf,  2u);
          }

          (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
        }

        goto LABEL_37;
      }
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v33 = (id)GKOSLoggers(0LL);
      }
      id v34 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "Not sending push token, NO PUSH TOKEN.",  buf,  2u);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_37:

    goto LABEL_38;
  }

  if (!os_log_GKGeneral) {
    id v31 = (id)GKOSLoggers(v6);
  }
  id v32 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "Not sending push token, environment changed",  buf,  2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_38:
}

void sub_1000F284C(uint64_t a1, uint64_t a2)
{
  id v12 = 0LL;
  id v3 =  +[NSDictionary _gkDictionaryWithServerData:error:]( &OBJC_CLASS___NSDictionary,  "_gkDictionaryWithServerData:error:",  a2,  &v12);
  id v4 = v12;
  id v5 = v4;
  if (v4)
  {
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers(v4);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000F51D8();
    }
  }

  else
  {
    [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKey:@"GKLastPushTokenPlayerID"];
    [*(id *)(a1 + 32) setInteger:*(void *)(a1 + 80) forKey:@"GKLastPushTokenEnvironment"];
    [*(id *)(a1 + 32) setObject:*(void *)(a1 + 48) forKey:@"GKLastPushTokenKey"];
    uint64_t v7 = *(void **)(a1 + 32);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v7 setObject:v8 forKey:@"GKLastPushTokenDateKey"];

    [*(id *)(a1 + 32) setObject:*(void *)(a1 + 56) forKey:@"GKLastPreferredSystemLanguage"];
    [*(id *)(a1 + 32) synchronize];
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1000F29C4;
  v10[3] = &unk_10026B120;
  __int128 v9 = *(dispatch_queue_s **)(a1 + 64);
  id v11 = *(id *)(a1 + 72);
  dispatch_async(v9, v10);
}

uint64_t sub_1000F29C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000F2AB0(id a1, NSDictionary *a2, NSError *a3)
{
  id v12 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", GKMaxRecentPlayersCount));
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber, v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0)
  {
    id v7 = [v4 unsignedIntegerValue];
    if (v7) {
      [v3 setMaxRecentPlayersCount:v7];
    }
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", GKMaxRecentPlayersTime));
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSNumber, v9);
  if ((objc_opt_isKindOfClass(v8, v10) & 1) != 0)
  {
    id v11 = [v8 unsignedIntegerValue];
    if (v11) {
      [v3 setMaxRecentPlayersTime:(double)(unint64_t)v11];
    }
  }
}

id sub_1000F31EC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) terminateClient:*(void *)(a1 + 40)];
}

void sub_1000F3398(uint64_t a1, void *a2)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([a2 lastObject]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 name]);
  if (!v3)
  {
    uint64_t v4 = GKCopyLocalizedApplicationNameForDisplayIdentifier(*(void *)(a1 + 32));
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v4);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000F3570(id a1, NSArray *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (!os_log_GKGeneral) {
    id v4 = (id)GKOSLoggers(v2);
  }
  id v5 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    int v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Got bulletins from invite data : %@", buf, 0xCu);
  }

  if (!-[NSArray count](v3, "count"))
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKApplicationWorkspace defaultWorkspace](&OBJC_CLASS___GKApplicationWorkspace, "defaultWorkspace"));
    [v6 openGameCenterSettings];
  }

  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v7 = v3;
  id v8 = -[NSArray countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v14,  v18,  16LL);
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v15;
    do
    {
      for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "acceptAction", (void)v14));
        if (!v13)
        {
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 defaultAction]);
          if (!v13) {
            continue;
          }
        }

        [v12 handleAction:@"GKAccepted"];
      }

      id v9 = -[NSArray countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v14,  v18,  16LL);
    }

    while (v9);
  }
}

void sub_1000F38EC(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pushConnectionForEnvironment:*(void *)(*(void *)(a1 + 32) + 40)]);
  id v3 = (void *)v2;
  if (*(void *)(a1 + 40) == v2)
  {
    id v9 = (void *)v2;
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
    uint64_t v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pushCredentialForEnvironment:", objc_msgSend(*(id *)(a1 + 32), "currentEnvironment")));
    if (!v5)
    {

      goto LABEL_7;
    }

    uint64_t v6 = (void *)v5;
    unsigned __int8 v7 = [*(id *)(*(void *)(a1 + 32) + 24) isEqualToData:*(void *)(a1 + 48)];

    id v3 = v9;
    if ((v7 & 1) == 0)
    {
      [*(id *)(a1 + 32) _setPushToken:*(void *)(a1 + 48)];
      id v8 = [*(id *)(a1 + 48) length];
      id v3 = v9;
      if (v8)
      {
        [*(id *)(a1 + 32) sendPushTokenWithReplyQueue:0];
LABEL_7:
        id v3 = v9;
      }
    }
  }
}

id sub_1000F3DAC(uint64_t a1)
{
  return +[GKBulletin bulletinsForPushNotification:withHandler:]( &OBJC_CLASS___GKBulletin,  "bulletinsForPushNotification:withHandler:",  *(void *)(a1 + 32),  &stru_100272530);
}

void sub_1000F3DC8(id a1, NSArray *a2)
{
  uint64_t v2 = a2;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v3 = -[NSArray countByEnumeratingWithState:objects:count:]( v2,  "countByEnumeratingWithState:objects:count:",  &v9,  v13,  16LL);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        unsigned __int8 v7 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)v6);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](&OBJC_CLASS___GKBulletinController, "sharedController"));
        [v7 executeBulletinWithBulletinController:v8];

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = -[NSArray countByEnumeratingWithState:objects:count:]( v2,  "countByEnumeratingWithState:objects:count:",  &v9,  v13,  16LL);
    }

    while (v4);
  }
}

void sub_1000F3FB8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionCounts]);
  [v2 removeObject:*(void *)(a1 + 40)];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionCounts]);
  id v4 = [v3 countForObject:*(void *)(a1 + 40)];

  if (!v4)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionBag]);
    [v5 removeObjectForKey:*(void *)(a1 + 40)];
  }

uint64_t sub_1000F4164(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionCounts]);
  id v3 = [v2 countForObject:*(void *)(a1 + 40)];

  if (!v3)
  {
    id v4 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"com.apple.gamed.%@", *(void *)(a1 + 40)));
    id v5 = (void *)os_transaction_create([v4 UTF8String]);

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionBag]);
    [v6 setObject:v5 forKeyedSubscript:*(void *)(a1 + 40)];
  }

  unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionCounts]);
  [v7 addObject:*(void *)(a1 + 40)];

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000F4384(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.gamecenter.statsQueue", 0LL);
  uint64_t v2 = (void *)qword_1002BB680;
  qword_1002BB680 = (uint64_t)v1;
}

void sub_1000F43F0(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.gamecenter.ratingsQueue", 0LL);
  uint64_t v2 = (void *)qword_1002BB690;
  qword_1002BB690 = (uint64_t)v1;
}

void sub_1000F49E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v7 gameList]);
  [v6 expire];

  [*(id *)(a1 + 32) refreshContentsForDataType:5 userInfo:0];
  v5[2](v5);
}

uint64_t sub_1000F4A6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)(result + 4) = a2;
  *(_WORD *)(result + 12) = 2048;
  *(double *)(result + 14) = a3;
  return result;
}

  ;
}

void sub_1000F4A94(os_log_t log)
{
  *(_WORD *)dispatch_queue_t v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "Received notification that iCloud account availability changed",  v1,  2u);
}

void sub_1000F4AD4(_DWORD *a1, double a2, double a3)
{
  *a1 = 136315394;
  sub_1000F4A6C((uint64_t)a1, (uint64_t)"finishStartup", a2 - a3);
  sub_1000207D4((void *)&_mh_execute_header, v3, v4, "%s elapsed seconds:%g", v5);
}

void sub_1000F4B18(_DWORD *a1, double a2, double a3)
{
  *a1 = 136315394;
  sub_1000F4A6C((uint64_t)a1, (uint64_t)"finishStartupMoreNotifications", a2 - a3);
  sub_1000207D4((void *)&_mh_execute_header, v3, v4, "%s elapsed seconds:%g", v5);
}

void sub_1000F4B5C(void *a1)
{
  id v1 = sub_100020824(a1);
  CFAbsoluteTimeGetCurrent();
  sub_1000207EC();
  sub_1000EB9D4((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_1000EB9E8();
}

void sub_1000F4BE8(void *a1)
{
  id v1 = sub_100020824(a1);
  CFAbsoluteTimeGetCurrent();
  sub_1000207EC();
  sub_1000EB9D4((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_1000EB9E8();
}

void sub_1000F4C74(void *a1)
{
  id v1 = sub_100020824(a1);
  CFAbsoluteTimeGetCurrent();
  sub_1000207EC();
  sub_1000EB9D4((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_1000EB9E8();
}

void sub_1000F4D00(void *a1)
{
  id v1 = sub_100020824(a1);
  CFAbsoluteTimeGetCurrent();
  sub_1000207EC();
  sub_1000EB9D4((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_1000EB9E8();
}

void sub_1000F4D8C(void *a1)
{
  id v1 = sub_100020824(a1);
  CFAbsoluteTimeGetCurrent();
  sub_1000207EC();
  sub_1000EB9D4((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_1000EB9E8();
}

void sub_1000F4E18(void *a1)
{
  id v1 = sub_100020824(a1);
  CFAbsoluteTimeGetCurrent();
  sub_1000207EC();
  sub_1000EB9D4((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_1000EB9E8();
}

void sub_1000F4EA4()
{
  uint64_t v3 = v0;
  sub_1000207D4((void *)&_mh_execute_header, v1, (uint64_t)v1, "connection: %@ publicToken: %@", v2);
  sub_10000C760();
}

void sub_1000F4F10(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v4 currentEnvironment]));
  sub_1000F4A80();
  uint64_t v8 = a3;
  _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to remove all credentials for environment: %@, error: %@",  v7,  0x16u);
}

void sub_1000F4FD4(_DWORD *a1, double a2, double a3)
{
  *a1 = 136315394;
  sub_1000F4A6C((uint64_t)a1, (uint64_t)"acceptConnection", a2 - a3);
  sub_1000207D4((void *)&_mh_execute_header, v3, v4, "%s elapsed seconds:%g", v5);
}

void sub_1000F5018()
{
  sub_10002D26C( (void *)&_mh_execute_header,  v0,  v1,  "shouldAcceptNewConnection: creating GKClientProxy for bundleID=%@",  v2,  v3,  v4,  v5,  v6);
  sub_10000C760();
}

void sub_1000F5078()
{
  sub_1000207C4((void *)&_mh_execute_header, v0, v1, "[NAT] NO CommNAT settings in bag, error = %@", v2, v3, v4, v5, v6);
  sub_10000C760();
}

void sub_1000F50D8()
{
}

void sub_1000F5138(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[NAT] Timed out waiting for a valid NAT type from observer.",  v1,  2u);
}

void sub_1000F5178()
{
  sub_1000207C4((void *)&_mh_execute_header, v0, v1, "no apns environment in bag, error = %@", v2, v3, v4, v5, v6);
  sub_10000C760();
}

void sub_1000F51D8()
{
}

void sub_1000F5238()
{
}

CFDataRef sub_1000F5750(const UInt8 *a1, unsigned int a2)
{
  *(_OWORD *)&v7.reallocate = unk_100272610;
  v7.preferredSize = 0LL;
  memset(&v7, 0, 48);
  uint64_t v4 = CFAllocatorCreate(0LL, &v7);
  CFDataRef v5 = CFDataCreateWithBytesNoCopy(0LL, a1, a2, v4);
  CFRelease(v4);
  return v5;
}

void sub_1000F5C2C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Fairplay could not get the the FairPlayHWInfo",  v1,  2u);
}

id userInfoForStateUpdate(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 state]);
  uint64_t v3 = applicationStateForProcessState(v2);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1 process]);
  CFDataRef v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bundle]);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);

  if (v6)
  {
    v12[0] = GKApplicationStateKey;
    CFAllocatorContext v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v3));
    v13[0] = v7;
    v13[1] = v6;
    v12[1] = GKApplicationStateDisplayIDKey;
    v12[2] = GKApplicationStatePIDKey;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 process]);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v8 pid]));
    void v13[2] = v9;
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v13,  v12,  3LL));
  }

  else
  {
    __int128 v10 = 0LL;
  }

  return v10;
}

uint64_t applicationStateForProcessState(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 endowmentNamespaces]);
  unsigned int v3 = [v2 containsObject:FBSSceneVisibilityEndowmentNamespace];

  LODWORD(sub_1000208B0((void *)&_mh_execute_header, v0, v1, "Removing delayed request store %@.", v2) = [v1 taskState];
  switch((int)v2)
  {
    case 1:
      uint64_t result = 1LL;
      break;
    case 2:
    case 4:
      if (v3) {
        uint64_t result = 8LL;
      }
      else {
        uint64_t result = 4LL;
      }
      break;
    case 3:
      uint64_t result = 2LL;
      break;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

void sub_1000F6030( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000F6054(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessStateDescriptor descriptor](&OBJC_CLASS___RBSProcessStateDescriptor, "descriptor"));
  [v4 setValues:1];
  uint64_t v8 = FBSSceneVisibilityEndowmentNamespace;
  CFDataRef v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v8, 1LL));
  [v4 setEndowmentNamespaces:v5];

  [v3 setStateDescriptor:v4];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000F6190;
  void v6[3] = &unk_100272630;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  [v3 setUpdateHandler:v6];
  objc_destroyWeak(&v7);
}

void sub_1000F6174(_Unwind_Exception *a1)
{
}

void sub_1000F6190(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = userInfoForStateUpdate(a4);
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
  id v7 = (void *)v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    __int128 v9 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315394;
      __int128 v12 = "-[GKApplicationStateMonitor setHandler:]_block_invoke_2";
      __int16 v13 = 2112;
      __int128 v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s userInfo=%@", (uint8_t *)&v11, 0x16u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    (*(void (**)(void))(WeakRetained[1] + 16LL))();
  }

  +[GKClientProxy checkGameCenterEnabledForegroundClients]( &OBJC_CLASS___GKClientProxy,  "checkGameCenterEnabledForegroundClients");
}

void sub_1000F641C(_Unwind_Exception *a1)
{
}

void sub_1000F6440(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[RBSProcessPredicate predicateMatchingBundleIdentifiers:]( &OBJC_CLASS___RBSProcessPredicate,  "predicateMatchingBundleIdentifiers:",  WeakRetained[4]));
  __int128 v15 = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 1LL));
  [v3 setPredicates:v6];

  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v7);
  }
  __int128 v9 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = WeakRetained[4];
    int v11 = 136315394;
    __int128 v12 = "-[GKApplicationStateMonitor updateStateObservation]_block_invoke";
    __int16 v13 = 2112;
    uint64_t v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s interestedBundleIDs=%@", (uint8_t *)&v11, 0x16u);
  }
}

uint64_t shouldNotCheckApplicationState(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    if (qword_1002BB6A8 != -1) {
      dispatch_once(&qword_1002BB6A8, &stru_100272678);
    }
    uint64_t v2 = (uint64_t)[(id)qword_1002BB6A0 containsObject:v1];
  }

  else
  {
    uint64_t v2 = 1LL;
  }

  return v2;
}

void sub_1000F69C0(id a1)
{
  v4[0] = GKGameCenterIdentifier;
  v4[1] = GKGameCenterMessageExtensionIdentifier;
  v4[2] = GKGameCenterDashboardIdentifier;
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v4, 3LL));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v1));
  id v3 = (void *)qword_1002BB6A0;
  qword_1002BB6A0 = v2;
}

uint64_t GKGetApplicationStateForBundleID(void *a1)
{
  id v1 = a1;
  if ((shouldNotCheckApplicationState(v1) & 1) != 0)
  {
    uint64_t v2 = 0LL;
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[RBSProcessPredicate predicateMatchingBundleIdentifier:]( &OBJC_CLASS___RBSProcessPredicate,  "predicateMatchingBundleIdentifier:",  v1));
    id v16 = 0LL;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[RBSProcessHandle handleForPredicate:error:]( &OBJC_CLASS___RBSProcessHandle,  "handleForPredicate:error:",  v3,  &v16));
    id v5 = v16;

    if (v5)
    {
      uint64_t v7 = (os_log_s *)os_log_GKGeneral;
      if (!os_log_GKGeneral)
      {
        id v8 = (id)GKOSLoggers(v6);
        uint64_t v7 = (os_log_s *)os_log_GKGeneral;
      }

      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        BOOL v18 = "GKApplicationState GKGetApplicationStateForBundleID(NSString *__strong)";
        __int16 v19 = 2112;
        id v20 = v1;
        __int16 v21 = 2112;
        id v22 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s bundleID=%@ error=%@", buf, 0x20u);
      }

      uint64_t v2 = 0LL;
    }

    else
    {
      __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v4 currentState]);
      uint64_t v2 = applicationStateForProcessState(v9);

      if (!os_log_GKGeneral) {
        id v11 = (id)GKOSLoggers(v10);
      }
      __int128 v12 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        __int16 v13 = v12;
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v2));
        *(_DWORD *)buf = 136315650;
        BOOL v18 = "GKApplicationState GKGetApplicationStateForBundleID(NSString *__strong)";
        __int16 v19 = 2112;
        id v20 = v1;
        __int16 v21 = 2112;
        id v22 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s bundleID=%@ state=%@", buf, 0x20u);
      }
    }
  }

  return v2;
}

void GKLaunchApplicationWithIdentifier(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  [v4 reportAppLaunchDuration];

  v8[0] = FBSOpenApplicationOptionKeyActivateSuspended;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  v8[1] = FBSOpenApplicationOptionKeyPromptUnlockDevice;
  v9[0] = v5;
  v9[1] = &__kCFBooleanTrue;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v8,  2LL));

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[FBSSystemService sharedService](&OBJC_CLASS___FBSSystemService, "sharedService"));
  [v7 openApplication:v3 options:v6 withResult:0];
}

id GKApplicationWithIdentifierIsInstalled(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000F6E9C;
  void v7[3] = &unk_10026DFB8;
  id v8 = v2;
  id v4 = v2;
  [v3 enumerateBundlesOfType:1 block:v7];

  id v5 = [v4 containsObject:v1];
  return v5;
}

id sub_1000F6E9C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

uint64_t sub_1000F7F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a4);
  }
  return result;
}

void sub_1000F8078(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[CKContainer containerWithIdentifier:]( &OBJC_CLASS___CKContainer,  "containerWithIdentifier:",  @"com.apple.socialgaming.sessions"));
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v1 cloudKitOperationConfigurationForContainer:v4]);
  id v3 = (void *)qword_1002BB6B0;
  qword_1002BB6B0 = v2;
}

void sub_1000F8504(uint64_t a1, void *a2)
{
  id v3 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000F85F0;
  v9[3] = &unk_100272740;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 56);
  uint64_t v6 = *(void **)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  id v12 = v4;
  uint64_t v15 = v5;
  int v16 = *(_DWORD *)(a1 + 80);
  id v13 = v6;
  id v14 = v3;
  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = v3;
  [v7 setModifyRecordsCompletionBlock:v9];
  [*(id *)(a1 + 56) addOperation:*(void *)(a1 + 32)];
}

void sub_1000F85F0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = a2;
  [v7 setError:v6];
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 firstObject]);

  [*(id *)(a1 + 32) setResult:v9];
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(v10);
    }
    id v12 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1000F8F38((uint64_t)v6, v12);
    }
    if ([v6 code] == (id)2)
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordID]);
      int v16 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v15]);

      if ([v16 code] == (id)14)
      {
        if (!os_log_GKGeneral) {
          id v17 = (id)GKOSLoggers(14LL);
        }
        BOOL v18 = (os_log_s *)os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_1000F8EF8(v18);
        }
        __int16 v19 = *(void **)(a1 + 32);
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472LL;
        v41[2] = sub_1000F89BC;
        v41[3] = &unk_1002726F0;
        id v42 = *(id *)(a1 + 48);
        id v20 = *(id *)(a1 + 40);
        uint64_t v21 = *(void *)(a1 + 72);
        id v43 = v20;
        uint64_t v45 = v21;
        int v46 = *(_DWORD *)(a1 + 80);
        id v44 = *(id *)(a1 + 32);
        [v19 perform:v41];
      }

      id v6 = v16;
    }
  }

  BOOL v22 = +[GKCloudKitMultiplayerUtils shouldRetryForError:andRetryCount:]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "shouldRetryForError:andRetryCount:",  v6,  *(unsigned int *)(a1 + 80));
  if (v22)
  {
    if (!os_log_GKGeneral) {
      id v26 = (id)GKOSLoggers(v22);
    }
    id v27 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)(a1 + 40);
      int v34 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)buf = 138412802;
      uint64_t v48 = v33;
      __int16 v49 = 2112;
      id v50 = v6;
      __int16 v51 = 1024;
      int v52 = v34;
      _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "Error save invite record: %@ due to: %@. Will retry at most %d times.",  buf,  0x1Cu);
    }

    id v28 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
    id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 valueForKey:CKErrorRetryAfterKey]);
    [v29 doubleValue];
    double v31 = v30;

    dispatch_time_t v32 = dispatch_time(0LL, 1000000000 * (uint64_t)v31);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_1000F8B90;
    void v35[3] = &unk_100272718;
    uint64_t v39 = *(void *)(a1 + 72);
    id v36 = *(id *)(a1 + 40);
    id v37 = *(id *)(a1 + 48);
    int v40 = *(_DWORD *)(a1 + 80);
    id v38 = *(id *)(a1 + 56);
    dispatch_after(v32, &_dispatch_main_q, v35);
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 64) + 16LL))( *(void *)(a1 + 64),  v23,  v24,  v25);
}

void sub_1000F89BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordID]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000F8A8C;
  void v7[3] = &unk_1002726C8;
  uint64_t v11 = *(void *)(a1 + 56);
  id v8 = *(id *)(a1 + 32);
  int v12 = *(_DWORD *)(a1 + 64);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v6 = v3;
  [v4 fetchRecordWithID:v5 completionHandler:v7];
}

void sub_1000F8A8C(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 56);
  uint64_t v5 = *(unsigned int *)(a1 + 64);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000F8B38;
  void v7[3] = &unk_100270200;
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  [v4 saveInviteRecord:a2 database:v6 retryCount:v5 completionHandler:v7];
}

uint64_t sub_1000F8B38(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a2;
  [v5 setError:a3];
  [*(id *)(a1 + 32) setResult:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1000F8B90(uint64_t a1)
{
  return [*(id *)(a1 + 56) saveInviteRecord:*(void *)(a1 + 32) database:*(void *)(a1 + 40) retryCount:(*(_DWORD *)(a1 + 64) - 1) completionHandler:*(void *)(a1 + 48)];
}

void sub_1000F8BA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_1000F8EF8(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Error saving CKRecord (for Messages Invite) because server record changed. Will fetch updated record from CloudKit and retry save.",  v1,  2u);
}

void sub_1000F8F38(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Error saving CKRecord (for Messages Invite) because of: %@",  (uint8_t *)&v2,  0xCu);
}

id sub_1000FA9CC(uint64_t a1, void *a2, unsigned __int8 a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKTurnBasedParticipantInternal internalRepresentationForCacheObject:]( &OBJC_CLASS___GKTurnBasedParticipantInternal,  "internalRepresentationForCacheObject:",  v5));
  [v6 setSlot:a3];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 playerID]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 guestID]);
  if ([v7 length])
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
    id v10 = [v8 length];
    if (v10)
    {
      if (!os_log_GKGeneral) {
        id v11 = (id)GKOSLoggers(v10);
      }
      int v12 = (os_log_s *)os_log_GKCache;
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
        sub_1000FB454((uint64_t)v8, v12);
      }
      id v13 = [[GKAnonymousGuestPlayerInternal alloc] initWithHostPlayerInternal:v9 guestIdentifier:v8];
      [v6 setPlayer:v13];
    }

    else
    {
      [v6 setPlayer:v9];
    }
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 invitedBy]);

  if ([v14 length])
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v14]);
    [v6 setInvitedBy:v15];
  }

  return v6;
}

id sub_1000FAB54(id a1, GKTurnBasedExchangeCacheObject *a2, unint64_t a3)
{
  return +[GKTurnBasedExchangeInternal internalRepresentationForCacheObject:]( &OBJC_CLASS___GKTurnBasedExchangeInternal,  "internalRepresentationForCacheObject:",  a2);
}

id sub_1000FB0B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1000FB21C;
  void v13[3] = &unk_1002727F8;
  id v5 = v3;
  id v14 = v5;
  id v6 = [v4 indexOfObjectPassingTest:v13];
  if (v6 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"invalid recipientIndex %ld encountered %@ searching in participants:%@",  0x7FFFFFFFFFFFFFFFLL,  v5,  *(void *)(a1 + 32)));
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/GKInternalRepresentation+Cache.m"));
    id v9 = objc_claimAutoreleasedReturnValue([v8 lastPathComponent]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@ (index != NSNotFound)\n[%s (%s:%d)]",  v7,  "-[GKTurnBasedExchangeInternal(Cache) updateWithCacheObject:]_block_invoke",  [v9 UTF8String],  416));

    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  @"GameKit Exception",  @"%@",  v10);
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v6));

  return v11;
}

BOOL sub_1000FB21C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  BOOL result = *(void *)(a1 + 32) == a2;
  *a4 = result;
  return result;
}

id sub_1000FB230(id a1, GKTurnBasedExchangeReplyCacheObject *a2, unint64_t a3)
{
  return +[GKTurnBasedExchangeReplyInternal internalRepresentationForCacheObject:]( &OBJC_CLASS___GKTurnBasedExchangeReplyInternal,  "internalRepresentationForCacheObject:",  a2);
}

void sub_1000FB418(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Your device is able to use fastsync transport for this game, but the fast_sync_transport feature flag has not been turned on.",  buf,  2u);
}

void sub_1000FB454(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "participant is a guest with identifier = %@",  (uint8_t *)&v2,  0xCu);
}

void sub_1000FB70C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000FB724(id a1)
{
  qword_1002BB6C0 = (uint64_t)dispatch_queue_create("com.apple.GameKit.GKStoreBag.lookup", 0LL);
  qword_1002BB6C8 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  0LL);
}

void sub_1000FB768(uint64_t a1, uint64_t a2)
{
}

void sub_1000FB778(uint64_t a1)
{
}

id sub_1000FB784(void *a1)
{
  *(void *)(*(void *)(a1[6] + 8) + 40) = [(id)qword_1002BB6C8 objectForKey:a1[4]];
  int v2 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  if (!v2)
  {
    *(void *)(*(void *)(a1[6] + 8LL) + 40LL) =  -[GKStoreBag initWithURL:dataRequestManager:]( objc_alloc(&OBJC_CLASS___GKStoreBag),  "initWithURL:dataRequestManager:",  a1[4],  a1[5]);
    [(id)qword_1002BB6C8 setObject:*(void *)(*(void *)(a1[6] + 8) + 40) forKey:a1[4]];
    int v2 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  }

  return v2;
}

uint64_t sub_1000FBC70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000FBC7C(uint64_t a1)
{
  unsigned __int8 v2 = objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "internalBag"),  "isEqualToDictionary:",  *(void *)(a1 + 40));
  [*(id *)(a1 + 32) setInternalBag:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setExpiration:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) setError:*(void *)(a1 + 56)];
  [*(id *)(a1 + 32) _updatePlayerIDHashParameters];
  if ((v2 & 1) == 0) {
    -[NSNotificationCenter postNotificationName:object:userInfo:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "postNotificationName:object:userInfo:",  @"GKStoreBagUpdatedNotification",  *(void *)(a1 + 32),  0LL);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

id sub_1000FBEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000FBF10;
  void v6[3] = &unk_100272910;
  void v6[4] = a2;
  void v6[5] = a4;
  v6[6] = a3;
  __int128 v4 = *(_OWORD *)(a1 + 48);
  __int128 v7 = *(_OWORD *)(a1 + 32);
  __int128 v8 = v4;
  return [(id)v7 performAsync:v6];
}

uint64_t sub_1000FBF10(NSDate *a1)
{
  id v1 = a1;
  Class isa = a1[4].super.isa;
  Class v2 = a1[5].super.isa;
  Class v21 = v2;
  if (a1[6].super.isa) {
    BOOL v4 = v2 == 0LL;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4
    && (a1 = (NSDate *)-[objc_class statusCode](isa, "statusCode"), a1 == (NSDate *)200)
    && (-[objc_class _maxAge](isa, "_maxAge"),
        double v6 = v5,
        __int128 v7 = (objc_class *)-[objc_class _storeBagForData:error:]( v1[7].super.isa,  "_storeBagForData:error:",  v1[6].super.isa,  &v21),  a1 = +[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", v6),  v7)
    && !v21)
  {
    __int128 v8 = a1;
    id v9 = objc_msgSend(-[objc_class url](v1[7].super.isa, "url"), "cacheKeyRepresentation");
    id v10 = [(id)GKInsecureCacheRoot(v9) stringByAppendingPathComponent:@"StoreBag"];
    id v11 = [v10 stringByAppendingPathComponent:v9];
    int v12 = objc_alloc_init(&OBJC_CLASS___NSFileManager);
    -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v12,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v10,  1LL,  0LL,  0LL);
    -[objc_class writeToFile:atomically:](v1[6].super.isa, "writeToFile:atomically:", v11, 1LL);
    -[NSFileManager _gkSetExpirationInterval:ofFileAtPath:](v12, "_gkSetExpirationInterval:ofFileAtPath:", v11, v6);

    id v13 = +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults");
    id v14 = -[NSUserDefaults setValue:forKey:](v13, "setValue:forKey:", v1[8].super.isa, GKLastProtocolVersionUsedKey);
    if (!os_log_GKGeneral) {
      GKOSLoggers(v14);
    }
    uint64_t v15 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      Class v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Loaded new store bag %@", buf, 0xCu);
    }

    -[objc_class _setupAPNSRequired:](v1[7].super.isa, "_setupAPNSRequired:", v7);
    -[objc_class _setupSignatureRequired:](v1[7].super.isa, "_setupSignatureRequired:", v7);
    -[objc_class _setupResponseSignatureRequired:](v1[7].super.isa, "_setupResponseSignatureRequired:", v7);
    -[objc_class _metricsThrottleThreshold:](v1[7].super.isa, "_metricsThrottleThreshold:", v7);
    -[NSNotificationCenter postNotificationName:object:userInfo:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "postNotificationName:object:userInfo:",  @"GKStoreBagUpdatedNotification",  v1[7].super.isa,  0LL);
    -[objc_class setInternalBag:](v1[7].super.isa, "setInternalBag:", v7);
    -[objc_class setExpiration:](v1[7].super.isa, "setExpiration:", v8);
    Class v16 = 0LL;
  }

  else
  {
    if (!os_log_GKGeneral) {
      GKOSLoggers(a1);
    }
    id v17 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      Class v19 = v1[9].super.isa;
      id v20 = -[objc_class statusCode](isa, "statusCode");
      *(_DWORD *)buf = 138412802;
      Class v23 = v19;
      __int16 v24 = 2048;
      id v25 = v20;
      __int16 v26 = 2112;
      Class v27 = v21;
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Game Center store bag couldn't be loaded with url:%@, status code returned:%ld with error:%@",  buf,  0x20u);
    }

    -[objc_class setExpiration:]( v1[7].super.isa,  "setExpiration:",  +[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", 60.0));
    Class v16 = v21;
    if (!v21) {
      Class v16 = (Class)+[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  3LL,  0LL);
    }
  }

  -[objc_class setError:](v1[7].super.isa, "setError:", v16);
  return ((uint64_t (*)(void))v1[10].super.isa[2].isa)();
}

uint64_t sub_1000FC4B8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(*(void *)(a1 + 32) + 80LL));
  }
  return result;
}

id sub_1000FC4D8(uint64_t a1, uint64_t a2)
{
  Class v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000FC52C;
  void v4[3] = &unk_1002728C0;
  void v4[4] = a2;
  return [v2 _fetchFromServerWithHandler:v4];
}

uint64_t sub_1000FC52C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000FC538(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1000FC594;
  v3[3] = &unk_1002729B0;
  __int128 v4 = *(_OWORD *)(a1 + 32);
  uint64_t v5 = a2;
  return [(id)v4 _fetchFromCacheWithHandler:v3];
}

uint64_t sub_1000FC594(uint64_t a1)
{
  if (([*(id *)(a1 + 32) _isValidAndNotExpired] & 1) == 0)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1000FC60C;
    void v4[3] = &unk_100272988;
    Class v2 = *(void **)(a1 + 40);
    void v4[4] = *(void *)(a1 + 32);
    [v2 perform:v4];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

id sub_1000FC60C(uint64_t a1, uint64_t a2)
{
  Class v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000FC660;
  void v4[3] = &unk_1002728C0;
  void v4[4] = a2;
  return [v2 _fetchFromServerWithHandler:v4];
}

uint64_t sub_1000FC660(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000FC66C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16LL) = 0LL;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, *(void *)(*(void *)(a1 + 32) + 80LL));
  }
  return _[*(id *)(a1 + 32) updateURLPatternCache];
}

void sub_1000FC770(uint64_t a1)
{
  uint64_t v2 = dispatch_group_create();
  if (([*(id *)(a1 + 32) _isValidAndNotExpired] & 1) == 0)
  {
    dispatch_group_enter(v2);
    uint64_t v3 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_1000FC83C;
    void v8[3] = &unk_100272A28;
    void v8[4] = v2;
    [v3 _fetchBagWithHandler:v8];
  }

  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    double v6 = *(dispatch_queue_s **)(v5 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000FC844;
    block[3] = &unk_100272960;
    void block[4] = v5;
    void block[5] = v4;
    dispatch_group_notify(v2, v6, block);
  }

  dispatch_release(v2);
}

void sub_1000FC83C(uint64_t a1)
{
}

uint64_t sub_1000FC844(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 80LL));
}

id sub_1000FCB30(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000FCB94;
  void v4[3] = &unk_100272A78;
  uint64_t v2 = *(void *)(a1 + 56);
  __int128 v5 = *(_OWORD *)(a1 + 40);
  double v6 = v1;
  uint64_t v7 = v2;
  return [v1 getValuesWithCompletion:v4];
}

void sub_1000FCB94(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 56))
  {
    uint64_t v3 = (NSURL *)[a2 objectForKey:*(void *)(a1 + 32)];
    if (v3) {
      uint64_t v3 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v3);
    }
    uint64_t v4 = *(dispatch_queue_s **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000FCC28;
    block[3] = &unk_100272A50;
    void block[4] = v3;
    __int128 v6 = *(_OWORD *)(a1 + 48);
    dispatch_async(v4, block);
  }

uint64_t sub_1000FCC28(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], *(void *)(a1[5] + 40LL));
}

void sub_1000FCD18(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 56))
  {
    id v3 = [a2 _gkSubDictionaryWithKeys:*(void *)(a1 + 32)];
    uint64_t v4 = *(dispatch_queue_s **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000FCD98;
    block[3] = &unk_100272A50;
    void block[4] = v3;
    __int128 v6 = *(_OWORD *)(a1 + 48);
    dispatch_async(v4, block);
  }

uint64_t sub_1000FCD98(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], *(void *)(a1[5] + 40LL));
}

void sub_1000FCE58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_1000FCE70(void *a1)
{
  id result = [*(id *)(a1[4] + 80) objectForKey:a1[5]];
  *(void *)(*(void *)(a1[6] + 8LL) + 40LL) = result;
  return result;
}

void sub_1000FCF64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000FCF7C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _shouldUseHTTPPipelining];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_1000FD090( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000FD0A8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _gkSessionRateLimiting];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_1000FD190( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000FD1A8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _achievementsThrottleThreshold];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_1000FD290( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000FD2A8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _scoresThrottleThreshold];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_1000FDE54(id a1)
{
  qword_1002BB6D8 = (uint64_t)[[AKAppleIDSession alloc] initWithIdentifier:@"gamed"];
}

void sub_1000FDEC4(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AADeviceInfo);
  qword_1002BB6E8 = (uint64_t)objc_msgSend(objc_msgSend(v1, "clientInfoHeader"), "copy");
}

id sub_1000FE03C(uint64_t a1, void *a2, uint64_t a3)
{
  if (!*(_BYTE *)(a1 + 40)) {
    return [*(id *)(a1 + 32) setValue:a3 forHTTPHeaderField:a2];
  }
  id result = [a2 isEqualToString:@"X-Apple-I-TimeZone"];
  return result;
}

id sub_1000FE160(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) dataRequestManager];
  [v2 beginTransaction:@"sendAsynchronousRequest"];
  id v3 = +[GKStoreBag appleIdSession](&OBJC_CLASS___GKStoreBag, "appleIdSession");
  +[GKStoreBag addAuthHeadersToRequest:](&OBJC_CLASS___GKStoreBag, "addAuthHeadersToRequest:", *(void *)(a1 + 40));
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000FE20C;
  v9[3] = &unk_100272B58;
  uint64_t v7 = *(void *)(a1 + 48);
  void v9[4] = v2;
  void v9[5] = v7;
  return [v4 _sendOneAsyncTryWithRequest:v5 responseMustBeSigned:v6 session:v3 retryCount:4 completionHandler:v9];
}

id sub_1000FE20C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  return [*(id *)(a1 + 32) endTransaction:@"sendAsynchronousRequest"];
}

void sub_1000FE414(uint64_t a1, NSData *a2, void *a3, void *a4)
{
  char v59 = 0;
  id v7 = [*(id *)(a1 + 32) handleResponse:a2 forRequest:*(void *)(a1 + 40) shouldRetry:&v59];
  if (v59)
  {
    int v8 = *(_DWORD *)(a1 + 64);
    if (v8 > 0)
    {
      [*(id *)(a1 + 48) _sendOneAsyncTryWithRequest:*(void *)(a1 + 40) responseMustBeSigned:*(unsigned __int8 *)(a1 + 68) session:*(void *)(a1 + 32) retryCount:(v8 - 1) completionHandler:*(void *)(a1 + 56)];
      return;
    }

    NSErrorUserInfoKey v72 = NSLocalizedFailureReasonErrorKey;
    id v73 = @"Exhausted retry count for _sendOneAsyncTryWithRequest.";
    id v7 = +[NSError userErrorForCode:userInfo:]( &OBJC_CLASS___NSError,  "userErrorForCode:userInfo:",  3LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v73,  &v72,  1LL));
    a4 = v7;
  }

  if (a4)
  {
    if (!os_log_GKGeneral) {
      GKOSLoggers(v7);
    }
    id v9 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100100614((uint64_t)a4, v9, v10, v11, v12, v13, v14, v15);
    }
  }

  Class v16 = objc_autoreleasePoolPush();
  if ((uint64_t)-[NSData statusCode](a2, "statusCode") >= 400)
  {
    uint64_t v17 = (uint64_t)-[NSData statusCode](a2, "statusCode");
    if (!a4 && v17 <= 599)
    {
      double v18 = 0.0;
      if (-[NSData statusCode](a2, "statusCode") == (id)503)
      {
        objc_msgSend( objc_msgSend(-[NSData allHeaderFields](a2, "allHeaderFields"), "objectForKey:", @"Retry-After"),  "doubleValue");
        double v18 = v19;
      }

      v70[0] = @"statusCode";
      id v20 = +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[NSData statusCode](a2, "statusCode"));
      v70[1] = @"retryTime";
      v71[0] = v20;
      v71[1] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v18);
      Class v21 = (NSError *)+[NSError userErrorForCode:userInfo:]( &OBJC_CLASS___NSError,  "userErrorForCode:userInfo:",  3LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v71,  v70,  2LL));
      goto LABEL_18;
    }
  }

  if (a4)
  {
    Class v21 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  [a4 domain],  objc_msgSend(a4, "code"),  0);
LABEL_18:
    BOOL v22 = v21;
    goto LABEL_20;
  }

  BOOL v22 = 0LL;
LABEL_20:
  if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO) && *(void *)(a1 + 40))
  {
    context = objc_autoreleasePoolPush();
    id v24 = [*(id *)(a1 + 40) HTTPBody];
    id v25 = objc_msgSend( objc_msgSend(*(id *)(a1 + 40), "valueForHTTPHeaderField:", @"content-encoding"),  "isEqualToString:",  @"gzip");
    double v56 = v16;
    if ((_DWORD)v25)
    {
      id v25 = [v24 _gkUnzippedData];
      if (v25) {
        id v24 = v25;
      }
    }

    __int16 v26 = (os_log_s *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      GKOSLoggers(v25);
      __int16 v26 = (os_log_s *)os_log_GKGeneral;
    }

    BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    if (v27)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "_sendAsynchronousRequest:Received HTTP Response",  buf,  2u);
      __int16 v26 = (os_log_s *)os_log_GKGeneral;
    }

    if (!v26) {
      GKOSLoggers(v27);
    }
    id v28 = (os_log_s *)os_log_GKHTTP;
    BOOL v29 = os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO);
    if (v29)
    {
      double v30 = *(NSData **)(a1 + 40);
      id v31 = -[NSData loggableHeaders](v30, "loggableHeaders");
      dispatch_time_t v32 = sub_1000FEB2C(v24);
      *(_DWORD *)buf = 138412802;
      __int16 v61 = v30;
      __int16 v62 = 2112;
      id v63 = v31;
      __int16 v64 = 2112;
      *(void *)int v65 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "%@\nREQUEST {\nheader: %@\nbody: %@}",  buf,  0x20u);
    }

    if (!os_log_GKGeneral) {
      GKOSLoggers(v29);
    }
    uint64_t v33 = (os_log_s *)os_log_GKHTTP;
    if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
    {
      unsigned int v54 = -[NSData statusCode](a2, "statusCode");
      int v34 = +[NSHTTPURLResponse localizedStringForStatusCode:]( &OBJC_CLASS___NSHTTPURLResponse,  "localizedStringForStatusCode:",  -[NSData statusCode](a2, "statusCode"));
      id v35 = -[NSData allHeaderFields](a2, "allHeaderFields");
      id v36 = sub_1000FEB2C(a3);
      *(_DWORD *)buf = 138413570;
      __int16 v61 = a2;
      __int16 v62 = 2112;
      id v63 = a4;
      __int16 v64 = 1024;
      *(_DWORD *)int v65 = v54;
      *(_WORD *)&void v65[4] = 2112;
      *(void *)&v65[6] = v34;
      __int16 v66 = 2112;
      id v67 = v35;
      __int16 v68 = 2112;
      id v69 = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "%@\nRESPONSE (error:%@) {\nstatus: (%d) %@\nheader: %@\nbody: %@ }",  buf,  0x3Au);
    }

    objc_autoreleasePoolPop(context);
    Class v16 = v56;
  }

  if (*(_BYTE *)(a1 + 68))
  {
    id v37 = -[NSData getSAPSignature](a2, "getSAPSignature");
    id v58 = 0LL;
    if (v37)
    {
      id v38 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v37,  0LL);
      uint64_t v39 = v38;
      if (!os_log_GKGeneral) {
        GKOSLoggers(v38);
      }
      int v40 = (os_log_s *)os_log_GKTrace;
      BOOL v41 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
      if (v41)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "_sendAsynchronousRequest:HTTP Response was signed and logged",  buf,  2u);
      }

      if (!os_log_GKGeneral) {
        GKOSLoggers(v41);
      }
      id v42 = (os_log_s *)os_log_GKHTTP;
      if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        __int16 v61 = v39;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "\nRESPONSE was signed:%@}", buf, 0xCu);
      }

      id v43 = objc_msgSend( objc_msgSend(*(id *)(a1 + 40), "_gkSAPSession"),  "processSignedData:withSignature:error:",  a3,  v39,  &v58);
      if (v58)
      {
        if (!os_log_GKGeneral) {
          GKOSLoggers(v43);
        }
        id v44 = (os_log_s *)os_log_GKHTTP;
        BOOL v45 = os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO);
        if (v45)
        {
          *(_DWORD *)buf = 138412290;
          __int16 v61 = v58;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "\nSIGNATURE ERROR:%@}", buf, 0xCu);
        }

        if (!os_log_GKGeneral) {
          GKOSLoggers(v45);
        }
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_1001005B0();
        }
        BOOL v22 = (NSError *)+[NSError userErrorForCode:userInfo:]( &OBJC_CLASS___NSError,  "userErrorForCode:userInfo:",  3LL,  0LL);
        a3 = 0LL;
      }
    }

    else
    {
      if (!os_log_GKGeneral) {
        GKOSLoggers(0LL);
      }
      int v46 = (os_log_s *)os_log_GKHTTP;
      BOOL v47 = os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO);
      if (v47)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_INFO,  "\nSIGNATURE ERROR: A SIGNED RESPONSE WAS EXPECTED BUT NONE WAS AVAILABLE}",  buf,  2u);
      }

      if (!os_log_GKGeneral) {
        GKOSLoggers(v47);
      }
      uint64_t v48 = (os_log_s *)os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_100100570(v48);
      }
    }
  }

  uint64_t v49 = objc_opt_class(&OBJC_CLASS___NSHTTPURLResponse, v23);
  char isKindOfClass = objc_opt_isKindOfClass(a2, v49);
  v51.n128_u64[0] = 0LL;
  if ((isKindOfClass & 1) != 0) {
    -[NSData _maxAge](a2, "_maxAge", 0.0);
  }
  uint64_t v52 = *(void *)(a1 + 56);
  if (v52)
  {
    if (a4) {
      uint64_t v53 = 0LL;
    }
    else {
      uint64_t v53 = a3;
    }
    (*(void (**)(uint64_t, void *, NSError *, __n128))(v52 + 16))(v52, v53, v22, v51);
  }

  objc_autoreleasePoolPop(v16);
}

CFStringRef sub_1000FEB2C(void *a1)
{
  if (!a1) {
    return @"(null: empty body)";
  }
  uint64_t v2 = (unsigned __int8 *)[a1 bytes];
  uint64_t v3 = (uint64_t)[a1 length];
  uint64_t v4 = v3;
  if (v3 >= 5)
  {
    int v5 = *v2;
    if (v5 == 255)
    {
      if (v2[1] == 216) {
        return @"(probably JPEG data)";
      }
    }

    else if ((unint64_t)v3 >= 9 && v5 == 137 && v2[1] == 80 && v2[2] == 78 && v2[3] == 71)
    {
      return @"(probably PNG data)";
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v14 = 100LL;
  id v7 = +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  a1,  0LL,  &v14,  &v13);
  if (v7)
  {
    uint64_t v6 = v7;
    if (![v7 objectForKeyedSubscript:@"password"]) {
      return (const __CFString *)v6;
    }
    id v8 = [v6 mutableCopy];
    [v8 setObject:@"PASSWORD REDACTED" forKeyedSubscript:@"password"];
    id v9 = (NSString *)v8;
    return (const __CFString *)v9;
  }

  if (v4 >= 128) {
    size_t v10 = 128LL;
  }
  else {
    size_t v10 = v4;
  }
  if (memmem(v2, v10, "<html", 5uLL) || memmem(v2, v10, "<xml", 4uLL))
  {
    id v9 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  v2,  v4,  4LL);
    return (const __CFString *)v9;
  }

  if (!os_log_GKGeneral) {
    GKOSLoggers(0LL);
  }
  uint64_t v12 = (os_log_s *)os_log_GKHTTP;
  if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218242;
    uint64_t v16 = v4;
    __int16 v17 = 2112;
    double v18 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "(couldn't decode data of length:%ld as plist/html or xml) %@",  buf,  0x16u);
  }

  return 0LL;
}

void sub_1000FED9C(id a1)
{
  qword_1002BB6F8 = -[GKThreadsafeDictionary initWithName:]( objc_alloc(&OBJC_CLASS___GKThreadsafeDictionary),  "initWithName:",  @"com.apple.GameKit.invalidationDates");
}

id sub_1000FEE4C(uint64_t a1, void *a2)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v4 = *(void **)(a1 + 32);
  id result = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (result)
  {
    id v6 = result;
    uint64_t v7 = *(void *)v10;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [a2 setObject:*(void *)(a1 + 40) forKey:*(void *)(*((void *)&v9 + 1) + 8 * (void)v8)];
        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id result = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      id v6 = result;
    }

    while (result);
  }

  return result;
}

void sub_1000FEFD0(id a1)
{
  qword_1002BB708 = (uint64_t)dispatch_queue_create( "com.apple.GameKit.networkSynchronization",  &_dispatch_queue_attr_concurrent);
}

void sub_1000FF0B0(_Unwind_Exception *a1)
{
}

void sub_1000FF0CC(uint64_t a1, void *a2)
{
  id v3 = objc_msgSend( objc_loadWeak((id *)(a1 + 64)),  "verifyEligibilityForBagKey:checkingAllowedRequestKeys:client:",  *(void *)(a1 + 32),  objc_msgSend(a2, "objectForKeyedSubscript:", @"gk-allowed-pregdpr-requests"),  *(void *)(a1 + 40));
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 48);
  if (v4)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_1000FF18C;
    void v6[3] = &unk_100272960;
    uint64_t v5 = *(void *)(a1 + 56);
    void v6[4] = v3;
    void v6[5] = v5;
    dispatch_async(v4, v6);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

uint64_t sub_1000FF18C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000FF4B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

void sub_1000FF4E4(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    GKOSLoggers(a1);
  }
  uint64_t v2 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "_loadDataForBagKey:Starting GKDataRequestManager transaction",  buf,  2u);
  }

  id v3 = [*(id *)(a1 + 32) dataRequestManager];
  [v3 beginTransaction:@"loadDataForBagKey"];
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
  v16[0] = _NSConcreteStackBlock;
  int8x16_t v4 = *(int8x16_t *)(a1 + 32);
  __int128 v5 = *(_OWORD *)(a1 + 48);
  int8x16_t v17 = vextq_s8(v4, v4, 8uLL);
  v16[1] = 3221225472LL;
  void v16[2] = sub_1000FF678;
  void v16[3] = &unk_100272CF8;
  __int128 v18 = v5;
  __int128 v19 = *(_OWORD *)(a1 + 64);
  __int128 v20 = *(_OWORD *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 112);
  void v16[4] = v3;
  uint64_t v21 = v6;
  [(id)v4.i64[0] performAsync:v16];
  uint64_t v7 = *(dispatch_group_s **)(a1 + 40);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_1000FFC50;
  void v12[3] = &unk_100272D20;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  void v12[4] = *(void *)(a1 + 32);
  void v12[5] = v9;
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  void v12[6] = *(void *)(a1 + 80);
  v12[7] = v3;
  char v15 = *(_BYTE *)(a1 + 120);
  v12[1] = 3221225472LL;
  int8x16_t v13 = vextq_s8(*(int8x16_t *)(a1 + 104), *(int8x16_t *)(a1 + 104), 8uLL);
  uint8_t v12[8] = v10;
  v12[9] = v11;
  dispatch_group_notify(v7, global_queue, v12);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void sub_1000FF678(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pushToken];
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
  id v3 = *(void **)(a1 + 48);
  v18[0] = *(void *)(a1 + 56);
  v18[1] = @"gk-allowed-pregdpr-requests";
  int8x16_t v4 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v18, 2LL);
  v10[0] = _NSConcreteStackBlock;
  __int128 v5 = *(_OWORD *)(a1 + 48);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  void v10[2] = sub_1000FF778;
  v10[3] = &unk_100272CD0;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = v7;
  v10[1] = 3221225472LL;
  __int128 v11 = v5;
  uint64_t v14 = v8;
  id v15 = v2;
  __int128 v9 = *(_OWORD *)(a1 + 96);
  __int128 v16 = *(_OWORD *)(a1 + 80);
  __int128 v17 = v9;
  [v3 getValuesForKeys:v4 queue:v6 completion:v10];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000FF778(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)(a1 + 40);
  id v7 = objc_msgSend( *(id *)(a1 + 32),  "verifyEligibilityForBagKey:checkingAllowedRequestKeys:client:",  *(void *)(a1 + 40),  objc_msgSend(a2, "objectForKeyedSubscript:", @"gk-allowed-pregdpr-requests"),  *(void *)(a1 + 48));
  if (v7)
  {
    *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL) = v7;
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
    return;
  }

  uint64_t v8 = (NSURL *)[a2 objectForKey:*v6];
  if (!v8)
  {
    if (!a3)
    {
LABEL_14:
      id v13 = +[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 3LL, 0LL);
LABEL_17:
      *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL) = v13;
      goto LABEL_18;
    }

    __int128 v9 = 0LL;
LABEL_9:
    if (!os_log_GKGeneral) {
      GKOSLoggers(v8);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      sub_100100678();
      if (v9) {
        goto LABEL_13;
      }
    }

    else if (v9)
    {
      goto LABEL_13;
    }

    id v13 = a3;
    goto LABEL_17;
  }

  uint64_t v8 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v8);
  __int128 v9 = v8;
  if (a3) {
    goto LABEL_9;
  }
  if (!v8) {
    goto LABEL_14;
  }
LABEL_13:
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
  id v10 = +[GKNetworkRequestManager commonNetworkRequestManager]( &OBJC_CLASS___GKNetworkRequestManager,  "commonNetworkRequestManager");
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_1000FF94C;
  void v14[3] = &unk_100272CA8;
  __int128 v15 = *(_OWORD *)(a1 + 32);
  __int128 v16 = v9;
  __int128 v17 = *(_OWORD *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = v11;
  uint64_t v20 = v12;
  int8x16_t v21 = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
  uint64_t v22 = *(void *)(a1 + 104);
  [v10 getFairPlaySession:v14];
LABEL_18:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1000FF94C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  __int128 v5 = *(void **)(v4 + 56);
  if (v5)
  {
    uint64_t v4 = *(void *)(a1 + 32);
  }

  unsigned __int8 v21 = [*(id *)(v4 + 48) containsObject:*(void *)(a1 + 40)];
  unsigned int v20 = [*(id *)(*(void *)(a1 + 32) + 64) containsObject:*(void *)(a1 + 40)];
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 56), "playerInternal"), "playerID");
  id v9 = [*(id *)(a1 + 56) authenticationToken];
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  BYTE1(v19) = +[GKStoreBag shouldIncludeClientInfoAuthHeaderForBagKey:]( &OBJC_CLASS___GKStoreBag,  "shouldIncludeClientInfoAuthHeaderForBagKey:",  *(void *)(a1 + 40));
  LOBYTE(v19) = 1;
  BYTE1(v1_Block_object_dispose((const void *)(v33 - 144), 8) = v21;
  LOBYTE(v1_Block_object_dispose((const void *)(v33 - 144), 8) = 0;
  id v13 = objc_msgSend( v6,  "requestWithURL:playerID:authToken:pushToken:client:postData:includeUDID:includeAPNS:sapSession:includeAppOrigi nHeaders:includeClientInfoAuthHeader:",  v7,  v8,  v9,  v11,  v10,  v12,  v18,  a2,  v19);
  if (v13)
  {
    id v14 = v13;
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 88));
    [*(id *)(a1 + 72) beginNetworkActivity];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    void v22[2] = sub_1000FFB28;
    v22[3] = &unk_100272C80;
    __int128 v15 = *(void **)(a1 + 32);
    __int128 v16 = *(_OWORD *)(a1 + 104);
    uint64_t v17 = *(void *)(a1 + 72);
    void v22[4] = *(void *)(a1 + 40);
    void v22[5] = v17;
    __int128 v23 = *(_OWORD *)(a1 + 88);
    __int128 v24 = v16;
    [v15 _sendAsynchronousRequest:v14 responseMustBeSigned:v20 completion:v22];
  }

  else
  {
    if (!os_log_GKGeneral) {
      GKOSLoggers(0LL);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001006D8();
    }
    *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL) =  +[NSError userErrorForCode:userInfo:]( &OBJC_CLASS___NSError,  "userErrorForCode:userInfo:",  3LL,  0LL);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

void sub_1000FFB28(uint64_t a1, void *a2, void *a3, double a4)
{
  if (a3)
  {
    if (!os_log_GKGeneral) {
      GKOSLoggers(a1);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010073C();
    }
  }

  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) = a2;
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL) = a3;
  if (qword_1002BB720 != -1) {
    dispatch_once(&qword_1002BB720, &stru_100272C58);
  }
  double v8 = *(double *)&qword_1002BB718;
  *(double *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = v8;
  [*(id *)(a1 + 40) endNetworkActivity];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1000FFC28(id a1)
{
  qword_1002BB718 = v1;
}

void sub_1000FFC50(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = [*(id *)(a1 + 32) isLoadValidForBagKey:*(void *)(a1 + 40) date:*(void *)(a1 + 48)];
  if ((v3 & 1) == 0)
  {
    if (!os_log_GKGeneral) {
      GKOSLoggers(v3);
    }
    uint64_t v4 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v5 = *(void *)(a1 + 48);
      id v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "_bagKeyValidationDict"), "objectForKey:", v6);
      int v9 = 138412802;
      uint64_t v10 = v6;
      __int16 v11 = 2112;
      uint64_t v12 = v5;
      __int16 v13 = 2112;
      id v14 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "STALE LOAD(%@) started: %@ invalidated: %@",  (uint8_t *)&v9,  0x20u);
    }

    *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 0xBFF0000000000000LL;
  }

  uint64_t v8 = *(void *)(a1 + 72);
  if (v8) {
    (*(void (**)(uint64_t, void, void, double))(v8 + 16))( v8,  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL),  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL),  *(double *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL));
  }

  objc_autoreleasePoolPop(v2);
  [*(id *)(a1 + 56) endTransaction:@"loadDataForBagKey"];
  if (*(_BYTE *)(a1 + 104)) {
}
  }

id sub_1000FFECC(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v1 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000FFF2C;
  void v7[3] = &unk_100272D70;
  uint64_t v5 = a1[8];
  void v7[4] = a1[9];
  return [v2 _loadDataForBagKey:v1 postData:v3 client:v4 credential:v5 completion:v7];
}

uint64_t sub_1000FFF2C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100100010(uint64_t a1)
{
  id v2 = (dispatch_queue_s *)[*(id *)(a1 + 32) _networkSynchonizationQueue];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100100080;
  void v4[3] = &unk_100272D98;
  __int128 v3 = *(_OWORD *)(a1 + 48);
  __int128 v5 = *(_OWORD *)(a1 + 32);
  __int128 v6 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 64);
  dispatch_barrier_async(v2, v4);
}

id sub_100100080(uint64_t a1)
{
  return [*(id *)(a1 + 32) _loadDataForBagKey:*(void *)(a1 + 40) postData:*(void *)(a1 + 48) client:*(void *)(a1 + 56) credential:*(void *)(a1 + 64) completion:*(void *)(a1 + 72)];
}

void sub_100100240( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
}

void sub_100100270(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) dataRequestManager];
  __int128 v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "playerInternal"), "playerID");
  id v6 = [*(id *)(a1 + 48) authenticationToken];
  id v7 = [v2 pushToken];
  LOWORD(v13) = *(_WORD *)(a1 + 104);
  id v8 = objc_msgSend( v3,  "requestWithURL:playerID:authToken:pushToken:client:postData:includeUDID:includeAPNS:sapSession:",  v4,  v5,  v6,  v7,  *(void *)(a1 + 56),  *(void *)(a1 + 64),  v13,  0);
  if (v8)
  {
    id v9 = v8;
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 72));
    [*(id *)(a1 + 56) beginNetworkActivity];
    uint64_t v10 = *(void **)(a1 + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_1001003E8;
    void v14[3] = &unk_100272DC0;
    __int128 v11 = *(_OWORD *)(a1 + 88);
    void v14[4] = *(void *)(a1 + 56);
    __int128 v15 = *(_OWORD *)(a1 + 72);
    __int128 v16 = v11;
    [v10 _sendAsynchronousRequest:v9 responseMustBeSigned:0 completion:v14];
  }

  else
  {
    id v12 = +[NSError userErrorForCode:userInfo:](&OBJC_CLASS___NSError, "userErrorForCode:userInfo:", 3LL, 0LL);
    *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL) = v12;
    if (!os_log_GKGeneral) {
      GKOSLoggers(v12);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001007A0();
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void sub_1001003E8(uint64_t a1, void *a2, void *a3, double a4)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) = a2;
  *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a4;
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL) = a3;
  [*(id *)(a1 + 32) endNetworkActivity];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10010044C(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t, void, void, double))(v2 + 16))( v2,  *(void *)(*(void *)(a1[5] + 8LL) + 40LL),  *(void *)(*(void *)(a1[7] + 8LL) + 40LL),  *(double *)(*(void *)(a1[6] + 8LL) + 24LL));
  }
}

void sub_100100570(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "_sendAsynchronousRequest:Signature Error: A signed response was expected but non was available",  v1,  2u);
}

void sub_1001005B0()
{
}

void sub_100100614( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100100678()
{
}

void sub_1001006D8()
{
}

void sub_10010073C()
{
}

void sub_1001007A0()
{
}

uint64_t sub_1001009D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

LABEL_15:
}

  return (char)v11;
}

            uint64_t v17 = +[GKApplicationWorkspace getPlatformForBundleID:]( &OBJC_CLASS___GKApplicationWorkspace,  "getPlatformForBundleID:",  v7);
            uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[GKBulletin gameDescriptor](self, "gameDescriptor"));
            uint64_t v19 = [v18 platform];

            if (v19 == v17)
            {
              if (!os_log_GKGeneral) {
                unsigned __int8 v21 = (id)GKOSLoggers(v20);
              }
              uint64_t v22 = (os_log_s *)os_log_GKDaemon;
              __int128 v16 = v32;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412802;
                int v34 = v7;
                id v35 = 2112;
                id v36 = v9;
                id v37 = 2112;
                id v38 = v32;
                _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "Found perfect compatible game: bundleID = %@, short version = %@, version = %@",  buf,  0x20u);
              }

              __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(-[GKBulletin gameDescriptor](self, "gameDescriptor"));
              [v23 setShortBundleVersion:v9];

              __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(-[GKBulletin gameDescriptor](self, "gameDescriptor"));
              [v24 setBundleVersion:v32];

              -[GKGameplayBulletin setGameLocation:](self, "setGameLocation:", 1LL);
            }

            else
            {
              if (!os_log_GKGeneral) {
                id v25 = (id)GKOSLoggers(v20);
              }
              __int16 v26 = (os_log_s *)os_log_GKDaemon;
              __int128 v16 = v32;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412802;
                int v34 = v7;
                id v35 = 2112;
                id v36 = v9;
                id v37 = 2112;
                id v38 = v32;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "Didn't find a perfect compatible game: bundleID = %@, short version = %@, version = %@",  buf,  0x20u);
              }
            }

            goto LABEL_25;
          }

          id v14 = v28;
          uint64_t v13 = v29;
        }

        id v9 = v30;
        id v12 = v31;
      }
    }

    goto LABEL_15;
  }

  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(-[GKBulletin gameDescriptor](self, "gameDescriptor"));

  if (v23)
  {
    -[GKGameplayBulletin checkCompatibleGameWithoutCompatibilityMatrix]( self,  "checkCompatibleGameWithoutCompatibilityMatrix");
    if (-[GKGameplayBulletin gameLocation](self, "gameLocation") != 1)
    {
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      void v30[2] = sub_10010C0CC;
      void v30[3] = &unk_10026B080;
      void v30[4] = self;
      id v31 = v10;
      uint64_t v32 = v9;
      [v32 perform:v30];
    }
  }

  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v10 replyQueue]);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_10010C58C;
  void v27[3] = &unk_10026B030;
  id v28 = v9;
  BOOL v29 = v5;
  id v25 = v9;
  __int16 v26 = v5;
  [v25 notifyOnQueue:v24 block:v27];
}

            id v55 = v57;
LABEL_12:
            id v44 = (v56 - 1) & v56;
            uint64_t v49 = __clz(__rbit64(v56)) + (v55 << 6);
            BOOL v47 = v55;
            goto LABEL_8;
          }
        }
      }
    }

  result |= 0x800uLL;
  if ((a5 & 1) != 0) {
LABEL_6:
  }
    result |= 0x1000uLL;
LABEL_7:
  if ((a6 & 1) != 0) {
    result |= 0x2000uLL;
  }
  if ((a7 & 1) != 0) {
    return result | 0x4000;
  }
  return result;
}

void sub_100100CD8(uint64_t a1)
{
}

void sub_100100CE0(uint64_t a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100100D58;
  void v4[3] = &unk_10026B670;
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [v3 authenticatedPlayersDidChange:a2 authenticatingBundleID:0 reply:v4];
}

void sub_100100D58(uint64_t a1)
{
}

uint64_t sub_100100D60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001010E0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  GKInternalErrorDomain,  400LL,  0LL));
  (*(void (**)(void, void *, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  v2,  0LL,  0LL);
}

void sub_1001011A4(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Unable to find host with pid %d",  (uint8_t *)v2,  8u);
}

void sub_100101218(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "getPrivateServicesForPID: Missing a host client",  v1,  2u);
}

void sub_1001015D0( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int buf, __int128 a16, void *a17)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v17 = objc_begin_catch(a1);
      uint64_t v18 = v17;
      if (!os_log_GKGeneral) {
        id v19 = (id)GKOSLoggers(v17);
      }
      unsigned int v20 = (os_log_s *)os_log_GKError;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        unsigned __int8 v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
        buf = 138412802;
        WORD2(a16) = 2112;
        *(void *)((char *)&a16 + 6) = v18;
        HIWORD(a16) = 2112;
        a17 = v21;
        _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "CAUGHT EXCEPTION DURING SAVE(%@): %@ at %@",  (uint8_t *)&buf,  0x20u);
      }

      objc_end_catch();
      JUMPOUT(0x100101598LL);
    }

    objc_begin_catch(a1);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x1001016C4LL);
  }

  _Unwind_Resume(a1);
}

void sub_100101978(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "SUCCESFULLY SAVED(%@)", (uint8_t *)&v2, 0xCu);
}

void sub_1001019EC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "we will rollback to last known good state because we FAILED TO SAVE(%@), ERROR: %@",  (uint8_t *)&v3,  0x16u);
}

void sub_100101A70( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100101AA4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100101B18(id a1)
{
  uint64_t v1 = -[GKAMPController initWithHasAcknowledgedLatestGDPRBlock:bagChanged:]( objc_alloc(&OBJC_CLASS___GKAMPController),  "initWithHasAcknowledgedLatestGDPRBlock:bagChanged:",  &stru_100272E80,  &stru_100272EA0);
  int v2 = (void *)qword_1002BB728;
  qword_1002BB728 = (uint64_t)v1;

  +[AMSMetrics setDisableBackgroundMetrics:](&OBJC_CLASS___AMSMetrics, "setDisableBackgroundMetrics:", 0LL);
}

BOOL sub_100101B64(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___GKPlayerInternalProvider);
  int v2 = (void *)objc_claimAutoreleasedReturnValue(-[GKPlayerInternalProvider localPlayer](v1, "localPlayer"));
  unsigned __int8 v3 = [v2 hasAcknowledgedLatestGDPR];

  return v3;
}

void sub_100101BB4(id a1)
{
}

void sub_100101BC8(id a1, GKClientProxy *a2, BOOL *a3)
{
}

void sub_100101D30(uint64_t a1)
{
  int v2 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) hasAcknowledgedLatestGDPRBlock]);
  int v3 = v2[2]();

  if (v3) {
    [*(id *)(a1 + 32) createBagIfNecessary];
  }
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  __int16 v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100101DF0;
  void v7[3] = &unk_10026B030;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  dispatch_async(v5, v7);
}

void sub_100101DF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bag]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_100102110(uint64_t a1)
{
  id v2 = (GKMultiplayerActivityEventFilter *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mafEventFilter]);
  if (!v2)
  {
    if (!*(void *)(a1 + 40)) {
      goto LABEL_5;
    }
    id v2 = objc_alloc_init(&OBJC_CLASS___GKMultiplayerActivityEventFilter);
    [*(id *)(a1 + 32) setMafEventFilter:v2];
  }

LABEL_5:
  int v3 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) hasAcknowledgedLatestGDPRBlock]);
  char v4 = v3[2]();

  __int16 v5 = *(void **)(a1 + 32);
  if ((v4 & 1) == 0)
  {
    [v5 tearDown];
    return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  id v6 = [*(id *)(a1 + 32) createBagIfNecessary];
  id v7 = (os_log_s *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v8 = (id)GKOSLoggers(v6);
    id v7 = (os_log_s *)os_log_GKGeneral;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Setting up metrics", v17, 2u);
  }

  id v9 = objc_alloc(&OBJC_CLASS____TtC14GameDaemonCore17GKMetricsPipeline);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bag]);
  __int128 v11 = -[GKMetricsPipeline initWithBag:](v9, "initWithBag:", v10);
  [*(id *)(a1 + 32) setMetricsPipeline:v11];

  id v12 = objc_alloc(&OBJC_CLASS___AMSMetrics);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bag]);
  id v14 = -[AMSMetrics initWithContainerID:bag:]( v12,  "initWithContainerID:bag:",  @"com.apple.game-center-client",  v13);
  [*(id *)(a1 + 32) setMetrics:v14];

  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);
  [v15 setFlushTimerEnabled:1];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10010286C(id a1)
{
  uint64_t v1 = (os_log_s *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v2 = (id)GKOSLoggers(a1);
    uint64_t v1 = (os_log_s *)os_log_GKGeneral;
  }

  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Metrics event finished processing", v3, 2u);
  }

void sub_1001029D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    char v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metricsPipeline]);
    [v4 processMultiplayerActivityEventWithMetricsFields:v3 hostAppBundleId:*(void *)(a1 + 40) completionHandler:&stru_100272F00];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(0LL);
    }
    id v6 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Not emitting MAF event", v7, 2u);
    }
  }
}

void sub_100102A98(id a1)
{
  if (!os_log_GKGeneral) {
    id v1 = (id)GKOSLoggers(a1);
  }
  id v2 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "MAF event finished processing", v3, 2u);
  }

void sub_100103090(id a1)
{
  id v1 = -[GKLRUCache initWithCapacity:]( objc_alloc(&OBJC_CLASS____TtC14GameDaemonCore10GKLRUCache),  "initWithCapacity:",  3LL);
  id v2 = (void *)qword_1002BB738;
  qword_1002BB738 = (uint64_t)v1;
}

void sub_10010359C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1001035AC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_1001035C8()
{
}

void sub_100103628()
{
}

void sub_100103688()
{
}

void sub_1001036E8()
{
}

uint64_t sub_100103898(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001038A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100103DC0(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Error writing new local player avatar image (%@) to image cache: %@",  (uint8_t *)&v3,  0x16u);
}

void sub_100103E44(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "error while creating cache directory:%@",  (uint8_t *)&v2,  0xCu);
}

void sub_100103EF8(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.GameKit.GKBulletin.sync", v4);
  uint64_t v3 = (void *)qword_1002BB748;
  qword_1002BB748 = (uint64_t)v2;
}

void sub_1001040E4(id a1)
{
  v3[0] = &off_100287D00;
  v4[0] = objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerInitiateBulletin);
  v3[1] = &off_100287D18;
  v4[1] = objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerAcceptBulletin);
  _DWORD v3[2] = &off_100287D30;
  v4[2] = objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerDeclineBulletin);
  v3[3] = &off_100287D48;
  void v4[3] = objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerCancelBulletin);
  void v3[4] = &off_100287D60;
  void v4[4] = objc_opt_class(&OBJC_CLASS___GKRelayBulletin);
  void v3[5] = &off_100287D78;
  void v4[5] = objc_opt_class(&OBJC_CLASS___GKRelayBulletin);
  int v3[6] = &off_100287D90;
  void v4[6] = objc_opt_class(&OBJC_CLASS___GKRelayBulletin);
  v3[7] = &off_100287DA8;
  v4[7] = objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerSendBulletin);
  v3[8] = &off_100287DC0;
  v4[8] = objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerInitiateBulletin);
  v3[9] = &off_100287DD8;
  v4[9] = objc_opt_class(&OBJC_CLASS___GKMatchmakerBulletin);
  v3[10] = &off_100287DF0;
  v4[10] = objc_opt_class(&OBJC_CLASS___GKProfileUpdateBulletin);
  v3[11] = &off_100287E08;
  v4[11] = objc_opt_class(&OBJC_CLASS___GKGenericBulletin);
  v3[12] = &off_100287E20;
  v4[12] = objc_opt_class(0x1002B4000LL);
  v3[13] = &off_100287E38;
  v4[13] = objc_opt_class(0x1002B4000LL);
  v3[14] = &off_100287E50;
  v4[14] = objc_opt_class(&OBJC_CLASS___GKFriendBulletin);
  v3[15] = &off_100287E68;
  v4[15] = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerInviteBulletin);
  uint8_t v3[16] = &off_100287E80;
  v4[16] = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerTurnBulletin);
  v3[17] = &off_100287E98;
  void v4[17] = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerCompletedBulletin);
  v3[18] = &off_100287EB0;
  v4[18] = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerTurnCountBulletin);
  v3[19] = &off_100287EC8;
  v4[19] = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerClearBulletin);
  v3[20] = &off_100287EE0;
  v4[20] = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerMatchChangedBulletin);
  v3[21] = &off_100287EF8;
  v4[21] = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerRequestedExchangeBulletin);
  v3[22] = &off_100287F10;
  v4[22] = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerCompletedExchangeBulletin);
  v3[23] = &off_100287F28;
  v4[23] = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerCanceledExchangeBulletin);
  _BYTE v3[24] = &off_100287F40;
  uint8_t v4[24] = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerTurnReminderBulletin);
  v3[25] = &off_100287F58;
  v4[25] = objc_opt_class(&OBJC_CLASS___GKChallengeReceivedBulletin);
  v3[26] = &off_100287F70;
  v4[26] = objc_opt_class(&OBJC_CLASS___GKChallengeCompletedBulletin);
  v3[27] = &off_100287F88;
  v4[27] = objc_opt_class(0x1002B4000LL);
  v3[28] = &off_100287FA0;
  v4[28] = objc_opt_class(0x1002B4000LL);
  v3[29] = &off_100287FB8;
  v4[29] = objc_opt_class(0x1002B4000LL);
  v3[30] = &off_100287FD0;
  v4[30] = objc_opt_class(&OBJC_CLASS___GKContactsIntegrationBulletin);
  v3[31] = &off_100287FE8;
  v4[31] = objc_opt_class(&OBJC_CLASS___GKLeaderboardChallengeBulletin);
  v3[32] = &off_100288000;
  v4[32] = objc_opt_class(&OBJC_CLASS___GKTTRInitiationBulletin);
  v3[33] = &off_100288018;
  v4[33] = objc_opt_class(&OBJC_CLASS___GKTTRUploadRequestBulletin);
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  34LL));
  dispatch_queue_t v2 = (void *)qword_1002BB758;
  qword_1002BB758 = v1;
}

void sub_1001052F4(uint64_t a1, void *a2)
{
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v6 = @"targetId";
    id v7 = a2;
    id v4 = a2;
    id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
    [v2 reportMetricsForActionID:v3 withAdditionalFields:v5];
  }

  else
  {
    id v5 = 0LL;
    [v2 reportMetricsForActionID:v3 withAdditionalFields:0];
  }
}

void sub_1001056D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (v7)
  {
    if (!os_log_GKGeneral) {
      id v11 = (id)GKOSLoggers(v9);
    }
    id v12 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100106284(v12, v7);
    }
    uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v13();
}

void sub_100106104(void *a1, uint64_t a2, const char *a3)
{
  id v5 = a1;
  id v7 = (void *)objc_opt_class(a2, v6);
  id v8 = v7;
  id v9 = NSStringFromSelector(a3);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  int v11 = 138412546;
  id v12 = v7;
  __int16 v13 = 2112;
  id v14 = v10;
  _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%@ doesn't implement %@; Will not load or process information in the bulletin",
    (uint8_t *)&v11,
    0x16u);
}

void sub_1001061D8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Could not launch trampoline, action.appLaunchTrampolineURL is unexpectedly nil.",  v1,  2u);
}

void sub_100106218(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = 138412290;
  uint64_t v4 = a1;
  sub_100067994((void *)&_mh_execute_header, a2, a3, "Error: No Action: %@", (uint8_t *)&v3);
}

void sub_100106284(void *a1, void *a2)
{
  int v3 = a1;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a2 localizedDescription]);
  int v6 = 138412290;
  id v7 = v4;
  sub_100067994( (void *)&_mh_execute_header,  v3,  v5,  "invokeASCAppLaunchTrampoline failed with error: %@",  (uint8_t *)&v6);
}

void sub_100106ED4(void *a1, void *a2)
{
  int v3 = a1;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a2 adamID]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a2 bundleID]);
  int v6 = 138412546;
  id v7 = v4;
  __int16 v8 = 2112;
  id v9 = v5;
  _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Could not create appLaunchTrampolineURL with adamID: %@, bundleID: %@",  (uint8_t *)&v6,  0x16u);
}

void sub_1001074C4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a3;
  id v6 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  v6));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 playerID]);
  +[GKCachingUtils ensureGameInGamesPlayed:playerID:bundleID:gameDescriptor:updateWidget:]( &OBJC_CLASS___GKCachingUtils,  "ensureGameInGamesPlayed:playerID:bundleID:gameDescriptor:updateWidget:",  v6,  v7,  *(void *)(a1 + 32),  *(void *)(a1 + 40),  1LL);

  v5[2](v5);
}

void sub_100107570(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:GKCacheInvialidationKey]);
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v15;
    uint64_t v11 = GKCacheInvialidationStoreBagKey;
    do
    {
      id v12 = 0LL;
      do
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v14 + 1) + 8 * (void)v12) objectForKey:v11]);
        +[GKSystemBulletin expireCachesForBagKey:payload:context:group:]( &OBJC_CLASS___GKSystemBulletin,  "expireCachesForBagKey:payload:context:group:",  v13,  *(void *)(a1 + 32),  v5,  *(void *)(a1 + 40));

        id v12 = (char *)v12 + 1;
      }

      while (v9 != v12);
      id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v9);
  }

  v6[2](v6);
}

void sub_1001076D8(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a1[4];
  id v6 = a3;
  id v7 = a2;
  id v10 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v5,  v7));
  +[GKSystemBulletin expireFriendCodeDetails:payload:context:]( &OBJC_CLASS___GKSystemBulletin,  "expireFriendCodeDetails:payload:context:",  a1[5],  a1[6],  v7);

  uint64_t v8 = a1[6];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v10 alias]);
  +[GKSystemBulletin presentGameCenterInviteUpdate:playerAlias:]( &OBJC_CLASS___GKSystemBulletin,  "presentGameCenterInviteUpdate:playerAlias:",  v8,  v9);

  v6[2](v6);
}

void sub_1001084D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10010856C;
  void v7[3] = &unk_10026B2A0;
  id v8 = v4;
  id v9 = v3;
  id v6 = v3;
  [v5 clearEntityCacheForBagKey:v8 completionHandler:v7];
}

void sub_10010856C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    id v6 = (os_log_s *)os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG)) {
      sub_100109E04(a1, (uint64_t)v4, v6);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100108C80(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKBulletinService,  "serviceWithTransport:forClient:localPlayer:",  0LL,  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  [v1 sendRefreshContentsForDataTypeToAllClientProxy:2];
}

void sub_100108EF8(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472LL;
  v1[2] = sub_100108F6C;
  v1[3] = &unk_10026B4A8;
  id v2 = *(id *)(a1 + 32);
  +[GKClientProxy enumerateClientsUsingBlock:](&OBJC_CLASS___GKClientProxy, "enumerateClientsUsingBlock:", v1);
}

void sub_100108F6C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 relayPushNotification:v3];
  id v9 = (id)objc_claimAutoreleasedReturnValue([v4 currentMatchResponse]);

  id v5 = v9;
  if (v9)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v9 relayPushes]);
    if (v6)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v9 relayPushes]);
      id v8 = (NSMutableArray *)[v7 mutableCopy];
    }

    else
    {
      id v8 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 0LL);
    }

    -[NSMutableArray addObject:](v8, "addObject:", *(void *)(a1 + 32));
    [v9 setRelayPushes:v8];

    id v5 = v9;
  }
}

void sub_1001091F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "playerProfileWithPlayerID:inManagedObjectContext:",  v5,  v7));
  [v8 expire];
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKProfileService,  "serviceWithTransport:forClient:localPlayer:",  0LL,  v9,  0LL));
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
  [v10 getProfilesForPlayerIDs:v11 handler:&stru_100273120];

  +[GKSystemBulletin expireGetPerGameFriendPlayerIDsCache:payload:context:]( &OBJC_CLASS___GKSystemBulletin,  "expireGetPerGameFriendPlayerIDsCache:payload:context:",  0LL,  *(void *)(a1 + 40),  v7);
  v6[2](v6);
}

void sub_100109340(id a1, NSArray *a2, NSError *a3)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(-[NSArray _gkMapDictionaryWithKeyPath:](a2, "_gkMapDictionaryWithKeyPath:", @"playerID"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy foregroundClient](&OBJC_CLASS___GKClientProxy, "foregroundClient"));
  [v3 refreshContentsForDataType:6 userInfo:v4];
}

void sub_1001097A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001097C4(uint64_t a1, void *a2, _BYTE *a3)
{
  id v9 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v9 currentMatchResponse]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 rid]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) matchID]);
  unsigned int v8 = [v6 isEqualToString:v7];

  if (v8)
  {
    [v9 checkMatchStatus];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a3 = 1;
  }
}

void sub_100109D1C(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid system push (%d)", (uint8_t *)v2, 8u);
}

void sub_100109D90(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Expiring caches for store bag key %@",  (uint8_t *)&v2,  0xCu);
}

void sub_100109E04(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "Failed to clear entity cache for bagKey: %@, error: %@",  (uint8_t *)&v4,  0x16u);
}

void sub_100109E8C(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Profile Update Push Notification has no player.",  v1,  2u);
}

void sub_10010A560(id a1, GKClientProxy *a2, BOOL *a3)
{
  uint64_t v5 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[GKClientProxy originalBundleIdentifier](v5, "originalBundleIdentifier"));
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 _gkSHA256Hash]);
}

void sub_10010C0CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) gameDescriptor]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 dictionaryForRequest]);

  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKMultiplayerMatchService,  "serviceWithTransport:forClient:localPlayer:",  0LL,  *(void *)(a1 + 40),  0LL));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10010C1C4;
  v10[3] = &unk_100270110;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v5;
  uint64_t v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v14 = v3;
  id v8 = v3;
  id v9 = v5;
  [v6 getCompatibilityMatrix:v9 handler:v10];
}

void sub_10010C1C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    id v9 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010D1F8((uint64_t)v7, v9, v10, v11, v12, v13, v14, v15);
    }
    [*(id *)(a1 + 48) setError:v7];
  }

  else
  {
    id v16 = [v5 count];
    if (v16)
    {
      if (!os_log_GKGeneral) {
        id v17 = (id)GKOSLoggers(v16);
      }
      uint64_t v18 = (os_log_s *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        id v19 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        id v46 = v19;
        __int16 v47 = 2112;
        id v48 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "GKGameplayBulletin - checking compatibility for app %@, compatibility matrix = %@",  buf,  0x16u);
      }

      __int128 v42 = 0u;
      __int128 v43 = 0u;
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      id v20 = v5;
      id v21 = [v20 countByEnumeratingWithState:&v40 objects:v44 count:16];
      if (v21)
      {
        id v22 = v21;
        uint64_t v23 = *(void *)v41;
LABEL_14:
        uint64_t v24 = 0LL;
        while (1)
        {
          if (*(void *)v41 != v23) {
            objc_enumerationMutation(v20);
          }
          id v25 = *(void **)(*((void *)&v40 + 1) + 8 * v24);
          id v26 = +[GKGameDescriptor currentPlatform](&OBJC_CLASS___GKGameDescriptor, "currentPlatform");
          id v27 = [v25 platform];
          if (v26 == v27) {
            break;
          }
          if (v22 == (id)++v24)
          {
            id v22 = [v20 countByEnumeratingWithState:&v40 objects:v44 count:16];
            if (v22) {
              goto LABEL_14;
            }
            goto LABEL_20;
          }
        }

        if (!os_log_GKGeneral) {
          id v28 = (id)GKOSLoggers(v27);
        }
        BOOL v29 = (void *)os_log_GKTrace;
        if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
        {
          double v30 = v29;
          id v31 = +[GKGameDescriptor currentPlatform](&OBJC_CLASS___GKGameDescriptor, "currentPlatform");
          *(_DWORD *)buf = 134218242;
          id v46 = v31;
          __int16 v47 = 2112;
          id v48 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "GKGameplayBulletin - found compatible game of this current platform (%ld). compatibleGame: %@",  buf,  0x16u);
        }

        unsigned __int8 v32 = [*(id *)(a1 + 40) setInstalledGameLocationFor:v25 descriptor:*(void *)(a1 + 32)];

        if ((v32 & 1) != 0) {
          goto LABEL_31;
        }
      }

      else
      {
LABEL_20:
      }

      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472LL;
      void v38[2] = sub_10010C55C;
      void v38[3] = &unk_100273168;
      int8x16_t v37 = *(int8x16_t *)(a1 + 32);
      id v33 = (id)v37.i64[0];
      int8x16_t v39 = vextq_s8(v37, v37, 8uLL);
      [v20 enumerateObjectsUsingBlock:v38];
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v34 = (id)GKOSLoggers(0LL);
      }
      id v35 = (os_log_s *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        id v36 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        id v46 = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "GKGameplayBulletin - skip checking compatibility for app %@, since compatibility matrix is empty.",  buf,  0xCu);
      }
    }
  }

LABEL_31:
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

              sub_100132050(v4);
              return (unint64_t)v3;
            }
          }
        }
      }
    }

      id v8 = v18;
LABEL_32:
      if (v8 >= v3) {
        goto LABEL_41;
      }
      if (__OFSUB__(v8, v10)) {
        goto LABEL_144;
      }
      if (v8 - v10 >= v109) {
        goto LABEL_41;
      }
      if (__OFADD__(v10, v109)) {
        goto LABEL_147;
      }
      if (v10 + v109 >= v3) {
        id v33 = v3;
      }
      else {
        id v33 = v10 + v109;
      }
      if (v33 < v10)
      {
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
        return;
      }

      if (v8 == v33)
      {
LABEL_41:
        id v34 = v113;
      }

      else
      {
        uint64_t v86 = (void *)(v9 + 16 * v8);
        id v34 = v113;
        do
        {
          __int128 v87 = (uint64_t *)(v9 + 16 * v8);
          id v88 = *v87;
          id v89 = v87[1];
          v90 = v10;
          v91 = v86;
          do
          {
            __int16 v92 = *(v91 - 2);
            id v93 = *(v91 - 1);
            __int16 v94 = v88 == v92 && v89 == v93;
            if (v94 || (_stringCompareWithSmolCheck(_:_:expecting:)(v88, v89, v92, v93, 1LL) & 1) == 0) {
              break;
            }
            if (!v9) {
              goto LABEL_151;
            }
            id v88 = *v91;
            id v89 = v91[1];
            *(_OWORD *)v91 = *((_OWORD *)v91 - 1);
            *(v91 - 1) = v89;
            *(v91 - 2) = v88;
            v91 -= 2;
            ++v90;
          }

          while (v8 != v90);
          ++v8;
          v86 += 2;
        }

        while (v8 != v33);
        id v8 = v33;
      }

      if (v8 < v10) {
        goto LABEL_143;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
      {
        sub_100157628(0, *((void *)v34 + 2) + 1LL, 1, v34);
        id v34 = v95;
      }

      id v36 = *((void *)v34 + 2);
      id v35 = *((void *)v34 + 3);
      int8x16_t v37 = v36 + 1;
      if (v36 >= v35 >> 1)
      {
        sub_100157628(v35 > 1, v36 + 1, 1, v34);
        id v34 = v96;
      }

      *((void *)v34 + 2) = v37;
      id v38 = v34 + 32;
      int8x16_t v39 = (Swift::Int *)&v34[16 * v36 + 32];
      NSData *v39 = v10;
      v39[1] = v8;
      v113 = v34;
      if (v36)
      {
        while (1)
        {
          __int128 v40 = v37 - 1;
          if (v37 >= 4)
          {
            BOOL v45 = &v38[2 * v37];
            id v46 = *(v45 - 8);
            __int16 v47 = *(v45 - 7);
            __n128 v51 = __OFSUB__(v47, v46);
            id v48 = v47 - v46;
            if (v51) {
              goto LABEL_128;
            }
            id v50 = *(v45 - 6);
            uint64_t v49 = *(v45 - 5);
            __n128 v51 = __OFSUB__(v49, v50);
            __int128 v43 = v49 - v50;
            id v44 = v51;
            if (v51) {
              goto LABEL_129;
            }
            uint64_t v52 = v37 - 2;
            uint64_t v53 = &v38[2 * v37 - 4];
            id v55 = *v53;
            unsigned int v54 = v53[1];
            __n128 v51 = __OFSUB__(v54, v55);
            double v56 = v54 - v55;
            if (v51) {
              goto LABEL_130;
            }
            __n128 v51 = __OFADD__(v43, v56);
            __int16 v57 = v43 + v56;
            if (v51) {
              goto LABEL_132;
            }
            if (v57 >= v48)
            {
              __int128 v75 = &v38[2 * v40];
              uint64_t v77 = *v75;
              __int128 v76 = v75[1];
              __n128 v51 = __OFSUB__(v76, v77);
              __int128 v78 = v76 - v77;
              if (v51) {
                goto LABEL_138;
              }
              __int16 v68 = v43 < v78;
              goto LABEL_79;
            }
          }

          else
          {
            if (v37 != 3)
            {
              id v69 = *((void *)v34 + 4);
              v70 = *((void *)v34 + 5);
              __n128 v51 = __OFSUB__(v70, v69);
              __int16 v62 = v70 - v69;
              id v63 = v51;
              goto LABEL_73;
            }

            __int128 v42 = *((void *)v34 + 4);
            __int128 v41 = *((void *)v34 + 5);
            __n128 v51 = __OFSUB__(v41, v42);
            __int128 v43 = v41 - v42;
            id v44 = v51;
          }

          if ((v44 & 1) != 0) {
            goto LABEL_131;
          }
          uint64_t v52 = v37 - 2;
          id v58 = &v38[2 * v37 - 4];
          id v60 = *v58;
          char v59 = v58[1];
          __int16 v61 = __OFSUB__(v59, v60);
          __int16 v62 = v59 - v60;
          id v63 = v61;
          if (v61) {
            goto LABEL_133;
          }
          __int16 v64 = &v38[2 * v40];
          __int16 v66 = *v64;
          int v65 = v64[1];
          __n128 v51 = __OFSUB__(v65, v66);
          id v67 = v65 - v66;
          if (v51) {
            goto LABEL_135;
          }
          if (__OFADD__(v62, v67)) {
            goto LABEL_137;
          }
          if (v62 + v67 >= v43)
          {
            __int16 v68 = v43 < v67;
LABEL_79:
            if (v68) {
              __int128 v40 = v52;
            }
            goto LABEL_81;
          }

id sub_10010C55C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result = [*(id *)(a1 + 32) setInstalledGameLocationFor:a2 descriptor:*(void *)(a1 + 40)];
  *a4 = (_BYTE)result;
  return result;
}

void sub_10010C58C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_10010C8B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10010C94C;
  void v6[3] = &unk_10026B480;
  int v4 = *(void **)(a1 + 40);
  id v7 = *(id *)(a1 + 32);
  id v8 = v4;
  id v9 = v3;
  id v5 = v3;
  [v7 determineGameLocationViaCompatibilityMatrixWithCompletionHandler:v6];
}

void sub_10010C94C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    id v6 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010D25C((uint64_t)v4, v6, v7, v8, v9, v10, v11, v12);
    }
    [*(id *)(a1 + 40) setError:v4];
    goto LABEL_26;
  }

  id v13 = [*(id *)(a1 + 32) gameLocation];
  if ((_DWORD)v13 == 1)
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers(v13);
    }
    uint64_t v15 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      __int16 v27 = 0;
      id v16 = "determineGameLocationOnDeviceOrInStoreWithCompletionHandler - Compatible App Installed";
      id v17 = (uint8_t *)&v27;
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v16, v17, 2u);
    }
  }

  else
  {
    id v18 = [*(id *)(a1 + 32) gameLocation];
    if ((_DWORD)v18 == 2)
    {
      if (!os_log_GKGeneral) {
        id v19 = (id)GKOSLoggers(v18);
      }
      uint64_t v15 = (os_log_s *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        __int16 v26 = 0;
        id v16 = "determineGameLocationOnDeviceOrInStoreWithCompletionHandler - Compatible App In Store";
        id v17 = (uint8_t *)&v26;
        goto LABEL_25;
      }
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v20 = (id)GKOSLoggers(v18);
      }
      id v21 = (os_log_s *)os_log_GKTrace;
      BOOL v22 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
      if (v22)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "determineGameLocationOnDeviceOrInStoreWithCompletionHandler - No compatible App Installed",  buf,  2u);
      }

      if (!os_log_GKGeneral) {
        id v23 = (id)GKOSLoggers(v22);
      }
      uint64_t v15 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        __int16 v24 = 0;
        id v16 = "No compatible app installed";
        id v17 = (uint8_t *)&v24;
        goto LABEL_25;
      }
    }
  }

void sub_10010CB60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10010CD8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKProfileService,  "serviceWithTransport:forClient:localPlayer:",  0LL,  v4,  0LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) originatorPlayerID]);
  id v13 = v6;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v13, 1LL));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10010CED4;
  v10[3] = &unk_10026C8B0;
  uint64_t v8 = *(void **)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v8;
  id v12 = v3;
  id v9 = v3;
  [v5 getProfilesForPlayerIDs:v7 handler:v10];
}

void sub_10010CED4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    id v9 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010D2C0((uint64_t)v7, v9, v10, v11, v12, v13, v14, v15);
    }
    [*(id *)(a1 + 40) setError:v7];
  }

  else
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v5 lastObject]);
    [*(id *)(a1 + 32) setOriginatorPlayer:v16];
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10010CF9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10010D1F8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10010D25C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10010D2C0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10010DB34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    id v9 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10010E01C(a1, (uint64_t)v7, v9);
    }
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 lastObject]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 name]);
    if (!v11)
    {
      uint64_t v12 = GKCopyLocalizedApplicationNameForDisplayIdentifier(*(void *)(a1 + 32));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v12);
    }

    [*(id *)(a1 + 40) setGameName:v11];
  }

  uint64_t v13 = *(void *)(a1 + 48);
  if (v13) {
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v7);
  }
}

void sub_10010DFA8(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "loadLocalizedGameNameForBundleID was called with no handler - returning -bundleID was:%@",  (uint8_t *)&v2,  0xCu);
}

void sub_10010E01C(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "loadLocalizedGameNameForBundleID (%@) - Error getting localized game name: %@",  (uint8_t *)&v4,  0x16u);
}

void sub_10010E1DC(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.GameKit.GKAcceptedInviteManager.sync", 0LL);
  int v2 = (void *)qword_1002BB768;
  qword_1002BB768 = (uint64_t)v1;
}

id sub_10010E4C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
}

id sub_10010E5D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) insertObject:*(void *)(a1 + 40) atIndex:0];
}

void sub_10010E740( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10010E758(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10010E768(uint64_t a1)
{
}

void sub_10010E770(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10010E80C;
  void v7[3] = &unk_1002713D8;
  int v2 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v3 = [v2 indexOfObjectPassingTest:v7];
  if (v3 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v3]);
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
    __int16 v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
}

uint64_t sub_10010E80C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  *a4 = result;
  return result;
}

void sub_10010E994( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10010E9AC(uint64_t a1)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_10010EA58;
  void v8[3] = &unk_1002713D8;
  int v2 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v3 = [v2 indexOfObjectPassingTest:v8];
  if (v3 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v4 = v3;
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v3]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    [*(id *)(a1 + 32) removeObjectAtIndex:v4];
  }
}

uint64_t sub_10010EA58(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  *a4 = result;
  return result;
}

id sub_10010EC2C(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 sessionToken]);
  id v5 = [v3 isEqualToData:v4];

  return v5;
}

id sub_10010EFE4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 sessionToken]);
  id v4 = [v3 isEqualToData:*(void *)(a1 + 32)];

  return v4;
}

id sub_10010F124(uint64_t a1, void *a2)
{
  return [a2 isEqualToData:*(void *)(a1 + 32)];
}

id sub_10010F228(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 matchID]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_10010F4C0(uint64_t a1, void *a2)
{
  return _[a2 isCompatibleWithGameDescriptor:*(void *)(a1 + 32)];
}

id sub_10010F690(uint64_t a1, void *a2)
{
  return _[a2 isCompatibleWithGameDescriptor:*(void *)(a1 + 32)];
}

void sub_10010F748( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10010F760(uint64_t a1)
{
  v7.receiver = *(id *)(a1 + 32);
  v7.super_class = (Class)&OBJC_CLASS___GKAcceptedInviteManager;
  id v2 = objc_msgSendSuper2(&v7, "description");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue( [v3 stringByAppendingFormat:@"AcceptedInvites: \n\tMultiplayerInvites: %@ \n\tTurnBased: %@", *(void *)(*(void *)(a1 + 32) + 8), *(void *)(*(void *)(a1 + 32) + 24)]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_10010FAF0(uint64_t a1, os_log_s *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Encountered an unsupported IDS URI type: %ld",  (uint8_t *)&v2,  0xCu);
}

void sub_10010FC64(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  uint64_t v3 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "GKTurnBasedMultiplayerBulletin loadBulletinsForPushNotification:",  buf,  2u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  uint64_t v5 = GKReporterDomainPushCount;
  [v4 reportEvent:GKReporterDomainPushCount type:GKReporterPushCountTurnBased];

  uint64_t v6 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 1LL);
  objc_super v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKTurnBasedMultiplayerBulletin.m",  53LL,  "+[GKTurnBasedMultiplayerBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v8));

  id v10 = [objc_alloc(*(Class *)(a1 + 48)) initWithPushNotification:*(void *)(a1 + 32)];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 aggregateDictionaryKey]);
  [v11 reportEvent:v5 type:v12];

  id v13 = [v10 isPushForLocalPlayers];
  if ((_DWORD)v13)
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_10010FF48;
    void v27[3] = &unk_10026B080;
    id v28 = v10;
    id v29 = v9;
    double v30 = v6;
    [v29 perform:v27];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers(v13);
    }
    uint64_t v15 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001156B8(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }

  if (*(void *)(a1 + 40))
  {
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v7 replyQueue]);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    void v24[2] = sub_100110414;
    v24[3] = &unk_10026B030;
    id v26 = *(id *)(a1 + 40);
    id v25 = v6;
    [v9 notifyOnQueue:v23 block:v24];
  }
}

void sub_10010FF48(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100110008;
  void v6[3] = &unk_100273278;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v5 = v3;
  [v7 determineGameLocationOnDeviceOrInStoreWithCompletionHandler:v6];
}

void sub_100110008(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001156E8();
    }
  }

  else
  {
    id v9 = [*(id *)(a1 + 32) gameLocation];
    if ((_DWORD)v9)
    {
      [*(id *)(a1 + 32) update];
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) gameDescriptor]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 bundleIdentifier]);

      uint64_t v12 = GKGetApplicationStateForBundleID(v11);
      if (v12 <= 3
        && (uint64_t v12 = (uint64_t)[(id)objc_opt_class(*(void *)(a1 + 32)) displayNotification], (v12 & 1) != 0))
      {
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472LL;
        void v19[2] = sub_100110250;
        void v19[3] = &unk_10026B170;
        id v13 = *(void **)(a1 + 40);
        id v20 = *(id *)(a1 + 32);
        id v21 = *(id *)(a1 + 48);
        [v13 perform:v19];

        id v14 = v20;
      }

      else
      {
        if (!os_log_GKGeneral) {
          id v15 = (id)GKOSLoggers(v12);
        }
        uint64_t v16 = (os_log_s *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Notify the App, do not display bulletin",  buf,  2u);
        }

        [*(id *)(a1 + 32) saveTurnBasedEvent];
        [*(id *)(a1 + 32) invalidateTurnCache];
        id v14 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:](&OBJC_CLASS___GKClientProxy, "clientForBundleID:", v11));
        [v14 fetchTurnBasedData];
      }
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v17 = (id)GKOSLoggers(v9);
      }
      uint64_t v18 = (os_log_s *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "GKTurnBasedMultiplayerBulletin Declining invite due to no compatible game found",  buf,  2u);
      }

      [*(id *)(a1 + 32) declineTurnBasedInviteWithReason:2];
    }
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v6,  v7,  v8);
}

void sub_100110250(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1001102FC;
  void v6[3] = &unk_10026B480;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v5 = v3;
  [v7 loadDataWithHandler:v6];
}

void sub_1001102FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100115748();
    }
  }

  else
  {
    id v6 = [(id)objc_opt_class(*(void *)(a1 + 32)) displayNotification];
    if ((_DWORD)v6)
    {
      if (!os_log_GKGeneral) {
        id v7 = (id)GKOSLoggers(v6);
      }
      id v8 = (os_log_s *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Assemble Bulletin", v9, 2u);
      }

      [*(id *)(a1 + 32) assembleBulletin];
      [*(id *)(a1 + 32) saveTurnBasedEvent];
      [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_100110414(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100110CE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 gameDescriptor]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_100110DAC;
  void v8[3] = &unk_10026B2A0;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 loadLocalizedGameNameForBundleID:v6 handler:v8];
}

void sub_100110DAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001157A8();
    }
    [*(id *)(a1 + 32) setError:v4];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100110E40(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100110ED8;
  void v6[3] = &unk_10026B480;
  uint64_t v4 = *(void **)(a1 + 40);
  id v7 = *(id *)(a1 + 32);
  id v8 = v4;
  id v9 = v3;
  id v5 = v3;
  [v7 loadOriginatorPlayerWithCompletionHandler:v6];
}

void sub_100110ED8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    id v6 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100115808(a1, v6, (uint64_t)v4);
    }
    [*(id *)(a1 + 40) setError:v4];
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100110F70(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) gameDescriptor]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceForBundleID:localPlayer:]( &OBJC_CLASS___GKTurnBasedService,  "serviceForBundleID:localPlayer:",  v5,  0LL));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) matchID]);
  id v14 = v7;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v14, 1LL));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1001110CC;
  v11[3] = &unk_10026C8B0;
  id v9 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v9;
  id v13 = v3;
  id v10 = v3;
  [v6 getDetailsForTurnBasedMatchIDs:v8 includeGameData:1 handler:v11];
}

void sub_1001110CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    id v9 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      int v17 = 138412290;
      uint64_t v18 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "loadBulletinMessageWithHandler - Error getting expiration date for match: %@",  (uint8_t *)&v17,  0xCu);
    }

    [*(id *)(a1 + 40) setError:v7];
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 lastObject]);
    unsigned __int8 v11 = [v10 currentParticipant];
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 participants]);
    id v13 = [v12 count];

    if ((unint64_t)v13 > v11)
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 participants]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", (int)objc_msgSend(v10, "currentParticipant")));

      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 timeoutDate]);
      [*(id *)(a1 + 32) setExpirationDate:v16];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100111270(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_100111668(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) gameDescriptor]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 adamID]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"game.bundleID = %@ OR game.adamID = %@",  v6,  v8));
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKTurnBasedSessionListCacheObject,  "expireObjectsMatchingPredicate:context:",  v9,  v13);

  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) matchID]);
  if (v10)
  {
    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) matchID]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"sessionID = %@",  v11));
    +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKTurnBasedSessionCacheObject,  "expireObjectsMatchingPredicate:context:",  v12,  v13);
  }

  v5[2](v5);
}

void sub_1001125B4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  unsigned int v7 = [(id)objc_opt_class(a1[4]) shouldLoadCacheList];
  unsigned int v8 = [(id)objc_opt_class(a1[4]) shouldLoadCacheDetails];
  id v9 = [(id)objc_opt_class(a1[4]) shouldLoadCacheData];
  if (![(id)objc_opt_class(a1[4]) shouldExpirePlayerList])
  {
    if (!v7) {
      goto LABEL_3;
    }
LABEL_7:
    id v20 = (void *)objc_claimAutoreleasedReturnValue([a1[4] gameDescriptor]);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 bundleIdentifier]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"game.bundleID = %@",  v21));
    +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKTurnBasedSessionListCacheObject,  "expireObjectsMatchingPredicate:context:",  v22,  v5);

    id v23 = (void *)objc_claimAutoreleasedReturnValue([a1[5] bundleIdentifier]);
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"game.bundleID = %@",  v23));
    +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKTurnBasedSessionListCacheObject,  "expireObjectsMatchingPredicate:context:",  v24,  v5);

    [a1[6] getTurnBasedMatchesAndCompatibleBundleID:0 handler:0];
    [a1[7] getTurnBasedMatchesAndCompatibleBundleID:1 handler:0];
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  id v26 = @"bundle-id";
  id v15 = (void *)objc_claimAutoreleasedReturnValue([a1[4] gameDescriptor]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 bundleIdentifier]);
  __int16 v27 = v16;
  int v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v27,  &v26,  1LL));

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[GKGameCacheObject gameForGameDescriptor:context:]( &OBJC_CLASS___GKGameCacheObject,  "gameForGameDescriptor:context:",  v17,  v5));
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"game = %@ AND type = %d",  v18,  1LL));
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKCompatiblePlayerListCacheObject,  "expireObjectsMatchingPredicate:context:",  v19,  v5);

  if (v7) {
    goto LABEL_7;
  }
LABEL_3:
  if (v8)
  {
LABEL_4:
    id v10 = (void *)objc_claimAutoreleasedReturnValue([a1[4] matchID]);
    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"sessionID = %@",  v10));
    +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:]( &OBJC_CLASS___GKTurnBasedSessionCacheObject,  "expireObjectsMatchingPredicate:context:",  v11,  v5);

    id v12 = a1[6];
    id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[4] matchID]);
    id v25 = v13;
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v25, 1LL));
    [v12 getDetailsForTurnBasedMatchIDs:v14 includeGameData:v9 handler:0];
  }

void sub_100112DA0(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "GKTurnBasedMultiplayerInviteBulletin loadBulletinsForPushNotification: withHandler:",  buf,  2u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  [v4 reportEvent:GKReporterDomainPushCount type:GKReporterPushCountTurnBasedInitiate];

  id v5 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 1LL);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKTurnBasedMultiplayerBulletin.m",  493LL,  "+[GKTurnBasedMultiplayerInviteBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke"));
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v7));

  id v9 = -[GKTurnBasedMultiplayerBulletin initWithPushNotification:]( objc_alloc(&OBJC_CLASS___GKTurnBasedMultiplayerInviteBulletin),  "initWithPushNotification:",  *(void *)(a1 + 32));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:GKInviteIsFromMessageKey]);
  unsigned int v11 = [v10 BOOLValue];

  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  id v13 = v12;
  if (v11)
  {
    [v12 reportEvent:GKReporterDomainInviteInitiateType type:GKMessageInviteInitiate];
  }

  else
  {
    [v12 reportEvent:GKReporterDomainInviteInitiateType type:GKPushInviteInitiate];

    if (!-[GKGameplayBulletin isPushForLocalPlayers](v9, "isPushForLocalPlayers")) {
      goto LABEL_9;
    }
  }

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_10011308C;
  void v18[3] = &unk_10026B548;
  uint64_t v19 = v9;
  id v20 = v8;
  char v22 = v11;
  id v21 = v5;
  [v20 perform:v18];

LABEL_9:
  if (*(void *)(a1 + 40))
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 replyQueue]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1001134C8;
    v15[3] = &unk_10026B030;
    id v17 = *(id *)(a1 + 40);
    uint64_t v16 = v5;
    [v8 notifyOnQueue:v14 block:v15];
  }
}

void sub_10011308C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100113154;
  void v6[3] = &unk_1002732C8;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  char v11 = *(_BYTE *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v5 = v3;
  [v7 determineGameLocationOnDeviceOrInStoreWithCompletionHandler:v6];
}

void sub_100113154(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001158C0();
    }
  }

  else
  {
    id v6 = [*(id *)(a1 + 32) gameLocation];
    if ((_DWORD)v6)
    {
      [*(id *)(a1 + 32) updateBadgeCount];
      [*(id *)(a1 + 32) expireAndLoadCaches];
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_10011330C;
      void v12[3] = &unk_10026FDE0;
      id v7 = *(void **)(a1 + 40);
      id v13 = *(id *)(a1 + 32);
      char v15 = *(_BYTE *)(a1 + 64);
      id v14 = *(id *)(a1 + 48);
      [v7 perform:v12];
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v8 = (id)GKOSLoggers(v6);
      }
      id v9 = (os_log_s *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)char v11 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "GKTurnBasedMultiplayerInviteBulletin Declining invite due to no compatible game found",  v11,  2u);
      }

      [*(id *)(a1 + 32) declineTurnBasedInviteWithReason:2];
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
    [v10 reportEvent:GKReporterDomainPushCount type:GKReporterPushCountTurnBasedTurn];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10011330C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1001133C0;
  void v6[3] = &unk_1002732A0;
  id v7 = v4;
  char v10 = *(_BYTE *)(a1 + 48);
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v5 = v3;
  [v7 loadDataWithHandler:v6];
}

void sub_1001133C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 code];
  if (v4 == (id)10)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(10LL);
    }
    id v6 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100115920(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    [*(id *)(a1 + 32) declineTurnBasedInviteWithReason:1];
  }

  else if (!v3 || *(_BYTE *)(a1 + 56))
  {
    [*(id *)(a1 + 32) setGameInviteMessage];
    [*(id *)(a1 + 32) assembleBulletin];
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers(v4);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100115950();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_1001134C8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100113D9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 gameDescriptor]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_100113E64;
  void v8[3] = &unk_10026B2A0;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 loadLocalizedGameNameForBundleID:v6 handler:v8];
}

void sub_100113E64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001159B0();
    }
    [*(id *)(a1 + 32) setError:v4];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100113EF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_100113F94;
  void v8[3] = &unk_10026B480;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  [v4 loadOriginatorPlayerWithCompletionHandler:v8];
}

void sub_100113F94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
    if ([v6 multiplayerAllowedPlayerType] == (id)1)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) originatorPlayer]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 friendBiDirectional]);
      unsigned __int8 v9 = [v8 isEqualToNumber:&off_100288030];

      if ((v9 & 1) != 0) {
        goto LABEL_15;
      }
      if (!os_log_GKGeneral) {
        id v11 = (id)GKOSLoggers(v10);
      }
      uint64_t v12 = (os_log_s *)os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_100115A10(v12, v13, v14, v15, v16, v17, v18, v19);
      }
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  10LL,  0LL));
      [*(id *)(a1 + 32) setError:v6];
    }

    goto LABEL_15;
  }

  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_100115A40();
  }
  [*(id *)(a1 + 32) setError:v4];
LABEL_15:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100114100(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_100114DA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 gameDescriptor]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_100114E68;
  void v8[3] = &unk_10026B2A0;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 loadLocalizedGameNameForBundleID:v6 handler:v8];
}

void sub_100114E68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001159B0();
    }
    [*(id *)(a1 + 32) setError:v4];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100114EFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100114F90;
  void v6[3] = &unk_10026B2A0;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 loadBulletinMessageWithHandler:v6];
}

void sub_100114F90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100115AA0();
    }
    [*(id *)(a1 + 32) setError:v4];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100115024(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_1001151D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) gameDescriptor]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceForBundleID:localPlayer:]( &OBJC_CLASS___GKTurnBasedService,  "serviceForBundleID:localPlayer:",  v5,  0LL));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) matchID]);
  uint64_t v14 = v7;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v14, 1LL));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10011532C;
  v11[3] = &unk_10026C8B0;
  id v9 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v9;
  id v13 = v3;
  id v10 = v3;
  [v6 getDetailsForTurnBasedMatchIDs:v8 includeGameData:1 handler:v11];
}

void sub_10011532C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 40) setError:v5];
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100115B00();
    }
  }

  else
  {
    id v29 = (void *)objc_claimAutoreleasedReturnValue([a2 lastObject]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v29 exchanges]);
    double v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableOrderedSet orderedSet](&OBJC_CLASS___NSMutableOrderedSet, "orderedSet"));
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    id v9 = v8;
    id v10 = [v9 countByEnumeratingWithState:&v35 objects:v40 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v36;
      while (2)
      {
        for (uint64_t i = 0LL; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v36 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)i);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 exchangeID]);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) exchangeID]);
          unsigned int v17 = [v15 isEqual:v16];

          if (v17)
          {
            uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v14 replies]);
            __int128 v31 = 0u;
            __int128 v32 = 0u;
            __int128 v33 = 0u;
            __int128 v34 = 0u;
            id v19 = [v18 countByEnumeratingWithState:&v31 objects:v39 count:16];
            if (v19)
            {
              id v20 = v19;
              uint64_t v21 = *(void *)v32;
              do
              {
                for (uint64_t j = 0LL; j != v20; uint64_t j = (char *)j + 1)
                {
                  if (*(void *)v32 != v21) {
                    objc_enumerationMutation(v18);
                  }
                  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) gameDescriptor]);
                  id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 bundleIdentifier]);
                  id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle _gkLocalizedMessageFromPushDictionary:forBundleID:]( &OBJC_CLASS___NSBundle,  "_gkLocalizedMessageFromPushDictionary:forBundleID:",  v23,  v25));

                  if (v26 && [v26 length]) {
                    [v30 addObject:v26];
                  }
                }

                id v20 = [v18 countByEnumeratingWithState:&v31 objects:v39 count:16];
              }

              while (v20);
            }

            id v5 = 0LL;
            goto LABEL_26;
          }
        }

        id v11 = [v9 countByEnumeratingWithState:&v35 objects:v40 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }

void sub_100115674(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1001156B8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001156E8()
{
}

void sub_100115748()
{
}

void sub_1001157A8()
{
}

void sub_100115808(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = a2;
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 originatorPlayerID]);
  sub_1000207E0();
  __int16 v8 = 2112;
  uint64_t v9 = a3;
  _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "loadDataWithHandler - Error loading info about originator player (%@): %@",  v7,  0x16u);
}

void sub_1001158C0()
{
}

void sub_100115920( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100115950()
{
}

void sub_1001159B0()
{
}

void sub_100115A10( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100115A40()
{
}

void sub_100115AA0()
{
}

void sub_100115B00()
{
}

void sub_10011765C(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  uint64_t v3 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "GKRealTimeMultiplayerInitiateBulletin loadBulletinsForPushNotification:",  buf,  2u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  [v4 reportMessageInviteProcessingDuration];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  [v5 recordAppLaunchAndTotalTimestamp];

  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  [v6 reportEvent:GKReporterDomainPushCount type:GKReporterPushCountInviteInitiate];

  id v7 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 1LL);
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKRealTimeMultiplayerBulletin.m",  313LL,  "+[GKRealTimeMultiplayerInitiateBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v9));

  id v11 = -[GKRealTimeMultiplayerInitiateBulletin initWithPushNotification:]( objc_alloc(&OBJC_CLASS___GKRealTimeMultiplayerInitiateBulletin),  "initWithPushNotification:",  *(void *)(a1 + 32));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:GKInviteIsFromMessageKey]);
  id v13 = [v12 BOOLValue];

  -[GKRealTimeMultiplayerBulletin setIsMessageBasedInvite:](v11, "setIsMessageBasedInvite:", v13);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:GKPushCommandKey]);
  BOOL v15 = [v14 unsignedIntValue] == 9;

  -[GKRealTimeMultiplayerBulletin setIsSharePlayInvite:](v11, "setIsSharePlayInvite:", v15);
  uint64_t v16 = GKInviteIsFromNearbyKey;
  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:GKInviteIsFromNearbyKey]);

  if (v17)
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v16]);
    -[GKRealTimeMultiplayerBulletin setIsNearbyInvite:](v11, "setIsNearbyInvite:", [v18 BOOLValue]);
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  id v20 = v19;
  if ((_DWORD)v13)
  {
    [v19 reportEvent:GKReporterDomainInviteInitiateType type:GKMessageInviteInitiate];

LABEL_11:
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_100117B6C;
    void v35[3] = &unk_10026B548;
    __int128 v36 = v11;
    id v37 = v10;
    char v39 = (char)v13;
    __int128 v38 = v7;
    [v37 perform:v35];

    goto LABEL_12;
  }

  [v19 reportEvent:GKReporterDomainInviteInitiateType type:GKPushInviteInitiate];

  if (-[GKRealTimeMultiplayerInitiateBulletin isReconnect](v11, "isReconnect")) {
    goto LABEL_11;
  }
  BOOL v21 = -[GKGameplayBulletin isPushForLocalPlayers](v11, "isPushForLocalPlayers");
  if (v21) {
    goto LABEL_11;
  }
  if (!os_log_GKGeneral) {
    id v23 = (id)GKOSLoggers(v21);
  }
  __int16 v24 = (os_log_s *)os_log_GKMatch;
  BOOL v25 = os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO);
  if (v25)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "GKRealTimeMultiplayerInitiateBulletin loadBulletinsForPushNotification: push is not for local players",  buf,  2u);
  }

  if (!os_log_GKGeneral) {
    id v26 = (id)GKOSLoggers(v25);
  }
  __int16 v27 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    log = v27;
    double v30 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameplayBulletin receiverPlayerID](v11, "receiverPlayerID"));
    id v28 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
    id v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "pushCredentialForEnvironment:", objc_msgSend(v8, "environment")));
    *(_DWORD *)buf = 138412546;
    __int128 v41 = v30;
    __int16 v42 = 2112;
    __int128 v43 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_INFO,  "Ignoring initiate push not intended for this player. InviteID: %@ LocalPlayer: %@",  buf,  0x16u);
  }

void sub_100117B6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100117C34;
  void v6[3] = &unk_1002732C8;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  char v11 = *(_BYTE *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v5 = v3;
  [v7 determineGameLocationOnDeviceOrInStoreWithCompletionHandler:v6];
}

void sub_100117C34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR)) {
      sub_10011DEAC();
    }
  }

  else
  {
    id v6 = [*(id *)(a1 + 32) gameLocation];
    if ((_DWORD)v6)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      void v11[2] = sub_100117DA8;
      v11[3] = &unk_10026FDE0;
      id v7 = *(void **)(a1 + 40);
      id v12 = *(id *)(a1 + 32);
      char v14 = *(_BYTE *)(a1 + 64);
      id v13 = *(id *)(a1 + 48);
      [v7 perform:v11];
    }

    else
    {
      if (!os_log_GKGeneral) {
        id v8 = (id)GKOSLoggers(v6);
      }
      id v9 = (os_log_s *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)id v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "GKRealTimeMultiplayerInitiateBulletin Declining invite due to no compatible game found",  v10,  2u);
      }

      [*(id *)(a1 + 32) declineInviteWithReason:2];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100117DA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100117E5C;
  void v6[3] = &unk_1002732A0;
  id v7 = v4;
  char v10 = *(_BYTE *)(a1 + 48);
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v5 = v3;
  [v7 loadDataWithHandler:v6];
}

void sub_100117E5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 code] == (id)10)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers(10LL);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10011DF0C();
    }
    [*(id *)(a1 + 32) declineInviteWithReason:1];
  }

  else if (!v3 || *(_BYTE *)(a1 + 56))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](&OBJC_CLASS___GKDataRequestManager, "sharedManager"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_100117FE4;
    void v8[3] = &unk_10026F720;
    id v9 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 48);
    [v7 getValidNATTypeWithForceRelay:0 withHandler:v8];
  }

  else
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
    if (!os_log_GKGeneral) {
      id v6 = (id)GKOSLoggers(v5);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10011DF38();
    }
  }
}

uint64_t sub_100117FE4(uint64_t a1, void *a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerNatType]);
  id v5 = [v4 integerValue];

  if (!os_log_GKGeneral) {
    id v7 = (id)GKOSLoggers(v6);
  }
  id v8 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    int v31 = 134218240;
    __int128 v32 = a2;
    __int16 v33 = 2048;
    id v34 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "NAT types before generating bulletins: localNATType = %tu, peerNatType = %tu",  (uint8_t *)&v31,  0x16u);
  }

  if (([*(id *)(a1 + 32) serverHosted] & 1) == 0)
  {
    id v9 = +[GKViceroyNATTypeHelper isClosed:](&OBJC_CLASS___GKViceroyNATTypeHelper, "isClosed:", a2);
    if ((v9 & 1) != 0
      || (id v9 = +[GKViceroyNATTypeHelper isClosed:](&OBJC_CLASS___GKViceroyNATTypeHelper, "isClosed:", v5), (_DWORD)v9))
    {
      if (!os_log_GKGeneral) {
        id v10 = (id)GKOSLoggers(v9);
      }
      id v11 = (os_log_s *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        int v31 = 134218240;
        __int128 v32 = a2;
        __int16 v33 = 2048;
        id v34 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "NAT types might not connect: own is %tu and inviter has %tu",  (uint8_t *)&v31,  0x16u);
      }
    }
  }

  [*(id *)(a1 + 32) setGameInviteMessage];
  id v12 = [*(id *)(a1 + 32) assembleBulletin];
  if (!os_log_GKGeneral) {
    id v13 = (id)GKOSLoggers(v12);
  }
  char v14 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    BOOL v15 = *(void **)(a1 + 32);
    uint64_t v16 = v14;
    unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([v15 sessionToken]);
    int v31 = 138412290;
    __int128 v32 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "GKRealTimeMultiplayerInitiateBulletin - assembled bulletin with sessionToken %@",  (uint8_t *)&v31,  0xCu);
  }

  +[GKMatchReporter onInviteReceivedWithBulletin:]( &OBJC_CLASS___GKMatchReporter,  "onInviteReceivedWithBulletin:",  *(void *)(a1 + 32));
  id v18 = [*(id *)(a1 + 32) isSharePlayInvite];
  if ((_DWORD)v18)
  {
    if (!os_log_GKGeneral) {
      id v19 = (id)GKOSLoggers(v18);
    }
    id v20 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      BOOL v21 = *(void **)(a1 + 32);
      char v22 = v20;
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v21 gameDescriptor]);
      __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 bundleIdentifier]);
      int v31 = 138412290;
      __int128 v32 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "Launching app (%@) automatically and accept the game invite from SharePlay",  (uint8_t *)&v31,  0xCu);
    }

    if ([*(id *)(a1 + 32) gameLocation] == 1)
    {
      BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) gameDescriptor]);
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 bundleIdentifier]);
      int v27 = GKGetApplicationStateForBundleID(v26);

      if (v27 != 8)
      {
        id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) gameDescriptor]);
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 bundleIdentifier]);
        GKLaunchApplicationWithIdentifier(v29, 0LL);
      }
    }

    [*(id *)(a1 + 32) handleAcceptAction];
  }

  else
  {
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_100118340(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100119304(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 gameDescriptor]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1001193CC;
  void v8[3] = &unk_10026B2A0;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 loadLocalizedGameNameForBundleID:v6 handler:v8];
}

void sub_1001193CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10011DF98();
    }
    [*(id *)(a1 + 32) setError:v4];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100119460(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1001194FC;
  void v8[3] = &unk_10026B480;
  id v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  [v4 loadOriginatorPlayerWithCompletionHandler:v8];
}

void sub_1001194FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](&OBJC_CLASS___GKPreferences, "shared"));
    if ([v6 multiplayerAllowedPlayerType] == (id)1)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) originatorPlayer]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 friendBiDirectional]);
      unsigned __int8 v9 = [v8 isEqualToNumber:&off_100288048];

      if ((v9 & 1) != 0) {
        goto LABEL_15;
      }
      if (!os_log_GKGeneral) {
        id v11 = (id)GKOSLoggers(v10);
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_10011DFF8();
      }
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError userErrorForCode:underlyingError:]( &OBJC_CLASS___NSError,  "userErrorForCode:underlyingError:",  10LL,  0LL));
      [*(id *)(a1 + 32) setError:v6];
    }

    goto LABEL_15;
  }

  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
    sub_10011E024();
  }
  [*(id *)(a1 + 32) setError:v4];
LABEL_15:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100119668(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_1001197E0(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "GKRealTimeMultiplayerActionBulletin loadBulletinsForPushNotification withHandler:",  (uint8_t *)buf,  2u);
  }

  id v4 = [objc_alloc(*(Class *)(a1 + 48)) initWithPushNotification:*(void *)(a1 + 32)];
  id v5 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 1LL);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKRealTimeMultiplayerBulletin.m",  630LL,  "+[GKRealTimeMultiplayerActionBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v6));

  objc_initWeak(buf, v4);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_100119A0C;
  void v14[3] = &unk_100273340;
  id v8 = v4;
  id v15 = v8;
  objc_copyWeak(&v17, buf);
  unsigned __int8 v9 = v5;
  uint64_t v16 = v9;
  [v7 perform:v14];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100119DA8;
  v11[3] = &unk_10026B030;
  id v13 = *(id *)(a1 + 40);
  uint64_t v10 = v9;
  id v12 = v10;
  [v7 notifyOnMainQueueWithBlock:v11];

  objc_destroyWeak(&v17);
  objc_destroyWeak(buf);
}

void sub_1001199EC(_Unwind_Exception *a1)
{
}

void sub_100119A0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100119AEC;
  void v6[3] = &unk_100273318;
  id v7 = v4;
  objc_copyWeak(&v10, (id *)(a1 + 48));
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  id v9 = v5;
  [v7 loadDataWithHandler:v6];

  objc_destroyWeak(&v10);
}

void sub_100119AD8(_Unwind_Exception *a1)
{
}

void sub_100119AEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10011E084();
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_100119C14;
    void v7[3] = &unk_1002732F0;
    objc_copyWeak(&v10, (id *)(a1 + 56));
    id v8 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    [v6 setInvitedPlayerRespondedWithCompletionHandler:v7];

    objc_destroyWeak(&v10);
  }
}

void sub_100119C00(_Unwind_Exception *a1)
{
}

uint64_t sub_100119C14(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      if (!os_log_GKGeneral) {
        id v5 = (id)GKOSLoggers(v4);
      }
      uint64_t v6 = (void *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        id v7 = v6;
        id v8 = objc_loadWeakRetained((id *)(a1 + 48));
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 debugLine]);
        int v17 = 138412290;
        id v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Will post bulletin: %@", (uint8_t *)&v17, 0xCu);
      }

      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
      uint64_t v11 = GKReporterDomainPushCount;
      id v12 = objc_loadWeakRetained((id *)(a1 + 48));
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 aggregateDictionaryKey]);
      [v10 reportEvent:v11 type:v13];

      char v14 = *(void **)(a1 + 32);
      id v15 = objc_loadWeakRetained((id *)(a1 + 48));
      [v14 addObject:v15];
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100119DA8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10011A0B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 gameDescriptor]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_10011A178;
  void v8[3] = &unk_10026B2A0;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v7 = v3;
  [v4 loadLocalizedGameNameForBundleID:v6 handler:v8];
}

void sub_10011A178(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10011E110();
    }
    [*(id *)(a1 + 32) setError:v4];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10011A20C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10011A2A0;
  void v6[3] = &unk_10026B2A0;
  uint64_t v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 loadOriginatorPlayerWithCompletionHandler:v6];
}

void sub_10011A2A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10011E170();
    }
    [*(id *)(a1 + 32) setError:v4];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10011A334(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_10011A570(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1[4])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] originatorPlayer]);
    uint64_t v6 = v5;
    if (v5)
    {
      id v7 = a1[6];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      void v20[2] = sub_10011A784;
      v20[3] = &unk_10026EA58;
      id v21 = v5;
      id v8 = a1[4];
      id v9 = a1[5];
      id v22 = v8;
      id v23 = v9;
      __int128 v19 = *((_OWORD *)a1 + 3);
      id v10 = (id)v19;
      __int128 v24 = v19;
      [v7 perform:v20];
    }

    v4[2](v4);
  }

  else
  {
    uint64_t v11 = (os_log_s *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v12 = (id)GKOSLoggers(v3);
      uint64_t v11 = (os_log_s *)os_log_GKGeneral;
    }

    BOOL v13 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "setInvitedPlayerRespondedWithCompletionHandler: Received Accept for unkown Session Token",  buf,  2u);
    }

    if (!os_log_GKGeneral) {
      id v14 = (id)GKOSLoggers(v13);
    }
    id v15 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      id v16 = a1[5];
      int v17 = v15;
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 sessionToken]);
      *(_DWORD *)buf = 138412290;
      id v26 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "Received accept for unknown sessionToken %@",  buf,  0xCu);
    }

    [a1[6] setResult:&__kCFBooleanFalse];
    v4[2](v4);
  }
}

void sub_10011A784(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v3);
  }
  uint64_t v6 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = v6;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 debugDescription]);
    *(_DWORD *)buf = 138412290;
    __int128 v24 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "setInvitedPlayerRespondedWithCompletionHandler: starting invite session for player: %@",  buf,  0xCu);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) inviteSession]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_10011A928;
  void v16[3] = &unk_1002733D8;
  void v16[4] = *(void *)(a1 + 48);
  id v17 = v10;
  id v18 = *(id *)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  BOOL v13 = *(void **)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  id v19 = v11;
  uint64_t v22 = v12;
  id v20 = v13;
  id v21 = v4;
  id v14 = v4;
  id v15 = v10;
  [v15 performAsync:v16];
}

void sub_10011A928(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) originatorPlayerID]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*v2 peerPushToken]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) referencesForInvitee:*(void *)(a1 + 48)]);
  uint64_t v40 = 0LL;
  __int128 v41 = &v40;
  uint64_t v42 = 0x3032000000LL;
  __int128 v43 = sub_10011AE28;
  id v44 = sub_10011AE38;
  id v45 = 0LL;
  id v6 = [v5 containsObject:v4];
  if ((_DWORD)v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(v6);
    }
    id v8 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) debugDescription]);
      *(_DWORD *)buf = 138412546;
      __int16 v47 = v9;
      __int16 v48 = 2112;
      uint64_t v49 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Have a push token for peer(%@): %@", buf, 0x16u);
    }

    [*(id *)(a1 + 40) removeInvitee:*(void *)(a1 + 48) reference:v4];
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) referencesForInvitee:*(void *)(a1 + 48)]);

    id v11 = [v10 count];
    if ([*(id *)(a1 + 32) isAccept])
    {
      if (v11)
      {
LABEL_8:
        uint64_t v12 = *(void **)(a1 + 56);
        BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sessionToken]);
        [v12 cancelInvitationForSession:v13 playerID:v3 pushTokens:v10 handler:&stru_100273360];

        [*(id *)(a1 + 40) removeInvitee:*(void *)(a1 + 48) reference:0];
LABEL_17:
        id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) bundleIdentifier]);
        int v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) gameDescriptor]);
        [v27 setBundleIdentifier:v26];

        id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) bundleIdentifier]);
        LODWORD(v27) = GKGetApplicationStateForBundleID(v28);

        if ((_DWORD)v27 != 8)
        {
          [*(id *)(a1 + 40) addResponse:*(void *)(a1 + 32)];
          [*(id *)(a1 + 32) assembleBulletin];
          uint64_t v33 = 1LL;
LABEL_25:
          id v5 = v10;
          goto LABEL_26;
        }

        unsigned int v29 = [*(id *)(a1 + 32) isAccept];
        double v30 = *(void **)(a1 + 56);
        int v31 = *(void **)(a1 + 32);
        if (v29)
        {
          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 clientNotificationWithiCloudID:v41[5]]);
          [v30 acceptInviteWithNotification:v32];
        }

        else
        {
          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 clientNotification]);
          [v30 declineInviteWithNotification:v32];
        }

LABEL_24:
        uint64_t v33 = 0LL;
        goto LABEL_25;
      }
    }

    else
    {
      __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) declineReason]);
      BOOL v25 = [v24 integerValue] != (id)1;

      if (!v25 && v11 != 0LL) {
        goto LABEL_8;
      }
    }

    if ([v10 count]) {
      goto LABEL_24;
    }
    goto LABEL_17;
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) shareInvitees]);
  BOOL v15 = [v14 count] == 0;

  if (!v15)
  {
    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers(v16);
    }
    id v18 = (os_log_s *)os_log_GKMatch;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) shareInvitees]);
      *(_DWORD *)buf = 138412290;
      __int16 v47 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Have share invitees %@", buf, 0xCu);
    }

    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKRealTimeMultiplayerBulletin.m",  763LL,  "-[GKRealTimeMultiplayerActionBulletin setInvitedPlayerRespondedWithCompletionHandler:]_block_invoke"));
    id v21 = (void *)objc_claimAutoreleasedReturnValue( +[GKDispatchGroup dispatchGroupWithName:]( &OBJC_CLASS___GKDispatchGroup,  "dispatchGroupWithName:",  v20));

    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_10011AEB0;
    void v35[3] = &unk_1002733B0;
    id v22 = *(id *)(a1 + 40);
    uint64_t v23 = *(void *)(a1 + 80);
    id v36 = v22;
    uint64_t v39 = v23;
    id v37 = *(id *)(a1 + 48);
    __int128 v38 = &v40;
    [v21 perform:v35];
    [v21 wait];

    id v10 = v5;
    goto LABEL_17;
  }

  uint64_t v33 = 0LL;
LABEL_26:
  id v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v33));
  [*(id *)(a1 + 64) setResult:v34];

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  _Block_object_dispose(&v40, 8);
}

void sub_10011ADF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10011AE28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10011AE38(uint64_t a1)
{
}

void sub_10011AE40(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (!os_log_GKGeneral) {
      id v4 = (id)GKOSLoggers(v2);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10011E1D0();
    }
  }
}

void sub_10011AEB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shareRecordID]);
  id v18 = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[GKCloudKitMultiplayerUtils privateDatabase]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "privateDatabase"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10011AFF8;
  void v12[3] = &unk_100273388;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 56);
  id v13 = v7;
  uint64_t v17 = v8;
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  id v15 = v3;
  uint64_t v16 = v10;
  id v14 = v9;
  id v11 = v3;
  +[GKCloudKitMultiplayerUtils fetchShareRecordsWithRecordIDs:inDatabase:handler:]( &OBJC_CLASS___GKCloudKitMultiplayerUtils,  "fetchShareRecordsWithRecordIDs:inDatabase:handler:",  v5,  v6,  v12);
}

void sub_10011AFF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shareRecordID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v4]);

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"invitedPlayers"]);

    if (v6)
    {
      id v38 = v3;
      v49[0] = objc_opt_class(&OBJC_CLASS___NSDictionary);
      v49[1] = objc_opt_class(&OBJC_CLASS___NSNumber);
      v49[2] = objc_opt_class(&OBJC_CLASS___NSString);
      v49[3] = objc_opt_class(&OBJC_CLASS___NSData);
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v49, 4LL));
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v7));
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"invitedPlayers"]);
      id v43 = 0LL;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v8,  v9,  &v43));
      id v11 = v43;

      if (v11)
      {
        if (!os_log_GKGeneral) {
          id v13 = (id)GKOSLoggers(v12);
        }
        id v14 = (void *)os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
          sub_10011E230((uint64_t)v11, a1, v14);
        }
      }

      id v37 = v11;
      __int128 v41 = 0u;
      __int128 v42 = 0u;
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      id v15 = v10;
      id v16 = [v15 countByEnumeratingWithState:&v39 objects:v48 count:16];
      if (v16)
      {
        id v17 = v16;
        uint64_t v18 = *(void *)v40;
        while (2)
        {
          for (uint64_t i = 0LL; i != v17; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v40 != v18) {
              objc_enumerationMutation(v15);
            }
            id v20 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)i);
            id v21 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v20]);
            id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) playerID]);
            unsigned int v23 = [v21 isEqualToString:v22];

            if (v23)
            {
              if (!os_log_GKGeneral) {
                id v25 = (id)GKOSLoggers(v24);
              }
              id v26 = (void *)os_log_GKMatch;
              if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
              {
                int v27 = *(void **)(a1 + 32);
                id v28 = v26;
                unsigned int v29 = (void *)objc_claimAutoreleasedReturnValue([v27 shareInvitees]);
                *(_DWORD *)buf = 138412546;
                id v45 = v20;
                __int16 v46 = 2112;
                __int16 v47 = v29;
                _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "Remove %@ from shareInvitees %@",  buf,  0x16u);
              }

              double v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shareInvitees]);
              [v30 removeObject:v20];

              objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), v20);
              goto LABEL_22;
            }
          }

          id v17 = [v15 countByEnumeratingWithState:&v39 objects:v48 count:16];
          if (v17) {
            continue;
          }
          break;
        }
      }

void sub_10011B428(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, [v2 BOOLValue]);
}

void sub_10011C6E0(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKTrace;
  BOOL v4 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
  if (v4)
  {
    LOWORD(v40) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "GKRealTimeMultiplayerCancelBulletin loadBulletinsForPushNotification withHandler:",  (uint8_t *)&v40,  2u);
  }

  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v4);
  }
  id v6 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    LOWORD(v40) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "invitation cancel push", (uint8_t *)&v40, 2u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](&OBJC_CLASS___GKReporter, "reporter"));
  [v7 reportEvent:GKReporterDomainPushCount type:GKReporterPushCountInviteCancel];

  uint64_t v8 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 1LL);
  id v9 = -[GKRealTimeMultiplayerBulletin initWithPushNotification:]( objc_alloc(&OBJC_CLASS___GKRealTimeMultiplayerCancelBulletin),  "initWithPushNotification:",  *(void *)(a1 + 32));
  BOOL v10 = -[GKGameplayBulletin isPushForLocalPlayers](v9, "isPushForLocalPlayers");
  if (v10)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](&OBJC_CLASS___GKBulletinController, "sharedController"));
    uint64_t v12 = (GKRealTimeMultiplayerCancelBulletin *)objc_claimAutoreleasedReturnValue( -[GKRealTimeMultiplayerCancelBulletin removeAndReturnAssociatedInvite]( v9,  "removeAndReturnAssociatedInvite"));
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v11 acceptedInviteManager]);
    id v14 = (void *)v13;
    if (v12) {
      goto LABEL_16;
    }
    id v15 = (void *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerBulletin sessionToken](v9, "sessionToken"));
    uint64_t v12 = (GKRealTimeMultiplayerCancelBulletin *)objc_claimAutoreleasedReturnValue([v14 removeAndReturnInviteWithSessionToken:v15]);

    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers(v16);
    }
    uint64_t v18 = (os_log_s *)os_log_GKMatch;
    uint64_t v13 = os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO);
    if ((_DWORD)v13)
    {
      int v40 = 138412290;
      __int128 v41 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Did Removed Invite from inviteManager?: %@",  (uint8_t *)&v40,  0xCu);
    }

    if (v12)
    {
LABEL_16:
      if (!os_log_GKGeneral) {
        id v19 = (id)GKOSLoggers(v13);
      }
      id v20 = (os_log_s *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        LOWORD(v40) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "GKRealTimeMultiplayerCancelBulletin: loadBulletinsForPushNotification - attempting to display bulletin",  (uint8_t *)&v40,  2u);
      }

      -[GKRealTimeMultiplayerCancelBulletin copyDataFromAssociatedBulletin:](v9, "copyDataFromAssociatedBulletin:", v12);
      id v21 = -[GKRealTimeMultiplayerCancelBulletin assembleBulletin](v9, "assembleBulletin");
      if (!os_log_GKGeneral) {
        id v22 = (id)GKOSLoggers(v21);
      }
      unsigned int v23 = (os_log_s *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        int v40 = 138412290;
        __int128 v41 = v9;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Cancel Bulletin: %@", (uint8_t *)&v40, 0xCu);
      }

      -[NSMutableArray addObject:](v8, "addObject:", v9);
      [v11 withdrawBulletin:v12];
    }

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerBulletin sessionToken](v9, "sessionToken"));
    [v14 queueCancelledMultiplayerInviteSessionToken:v24];

    if (!os_log_GKGeneral) {
      id v26 = (id)GKOSLoggers(v25);
    }
    int v27 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      id v28 = v27;
      unsigned int v29 = (GKRealTimeMultiplayerCancelBulletin *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerBulletin sessionToken](v9, "sessionToken"));
      int v40 = 138412290;
      __int128 v41 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "queued canceled invite session token: %@",  (uint8_t *)&v40,  0xCu);
    }

    uint64_t v30 = *(void *)(a1 + 40);
    if (v30)
    {
      (*(void (**)(uint64_t, NSMutableArray *))(v30 + 16))(v30, v8);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerBulletin clientNotification](v9, "clientNotification"));
      id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 objectForKeyedSubscript:@"x-gk-bundle-id"]);

      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:](&OBJC_CLASS___GKClientProxy, "clientForBundleID:", v32));
      id v34 = (void *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerBulletin clientNotification](v9, "clientNotification"));
      [v33 cancelInviteWithNotification:v34];
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v35 = (id)GKOSLoggers(v10);
    }
    id v36 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      id v37 = v36;
      id v38 = (GKRealTimeMultiplayerCancelBulletin *)objc_claimAutoreleasedReturnValue(-[GKGameplayBulletin originatorPlayerID](v9, "originatorPlayerID"));
      __int128 v39 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameplayBulletin receiverPlayerID](v9, "receiverPlayerID"));
      int v40 = 138412546;
      __int128 v41 = v38;
      __int16 v42 = 2112;
      id v43 = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "Ignoring cancel push not intended for this local player. inviter: %@, intendedReceiverPlayer: %@",  (uint8_t *)&v40,  0x16u);
    }
  }
}

void sub_10011D4D4(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "GKRealTimeMultiplayerSendBulletin loadBulletinsForPushNotification: withHandler:",  buf,  2u);
  }

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"y"]);
  int v5 = [v4 intValue];

  id v6 = objc_alloc(&OBJC_CLASS___NSData);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"s"]);
  uint64_t v8 = -[NSData initWithBase64EncodedString:options:](v6, "initWithBase64EncodedString:options:", v7, 0LL);

  if (v5 > 2)
  {
    if (v5 == 3)
    {
      if (!os_log_GKGeneral) {
        id v53 = (id)GKOSLoggers(v9);
      }
      unsigned int v54 = (os_log_s *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_INFO,  "GKRealTimeMultiplayerSendBulletin GKUpdateInvitationReason",  buf,  2u);
      }

      id v55 = -[GKRealTimeMultiplayerSendBulletin initWithPushNotification:]( objc_alloc(&OBJC_CLASS___GKRealTimeMultiplayerSendBulletin),  "initWithPushNotification:",  *(void *)(a1 + 32));
      v60[0] = _NSConcreteStackBlock;
      v60[1] = 3221225472LL;
      v60[2] = sub_10011DC4C;
      v60[3] = &unk_100273428;
      __int16 v61 = v55;
      id v62 = *(id *)(a1 + 32);
      uint64_t v33 = v55;
      +[GKClientProxy enumerateClientsUsingBlock:](&OBJC_CLASS___GKClientProxy, "enumerateClientsUsingBlock:", v60);
    }

    else
    {
      if (v5 != 100) {
        goto LABEL_46;
      }
      if (!os_log_GKGeneral) {
        id v31 = (id)GKOSLoggers(v9);
      }
      id v32 = (os_log_s *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "GKRealTimeMultiplayerSendBulletin GKTTRMultiplayerLogRequestReason",  buf,  2u);
      }

      uint64_t v33 = -[GKRealTimeMultiplayerSendBulletin initWithPushNotification:]( objc_alloc(&OBJC_CLASS___GKRealTimeMultiplayerSendBulletin),  "initWithPushNotification:",  *(void *)(a1 + 32));
      id v34 = (void *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerBulletin clientDictionary](v33, "clientDictionary"));
      id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:GKTTRBulletinKeyRadarID]);
      uint64_t v36 = objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:GKTTRBulletinKeyRequesterPlayerAlias]);
      id v37 = (void *)v36;
      if (v35 && v36)
      {
        id v38 = (void *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerSendBulletin bundleIdentifier](v33, "bundleIdentifier"));
        __int128 v39 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameplayBulletin receiverPlayer](v33, "receiverPlayer"));
        int v40 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceForBundleID:localPlayer:]( &OBJC_CLASS___GKMultiplayerMatchService,  "serviceForBundleID:localPlayer:",  v38,  v39));
        v57[0] = _NSConcreteStackBlock;
        v57[1] = 3221225472LL;
        void v57[2] = sub_10011DDA4;
        v57[3] = &unk_10026BDB0;
        id v58 = v35;
        id v59 = v37;
        [v40 uploadLogsForRadar:v58 from:v59 handler:v57];
      }
    }

    goto LABEL_48;
  }

  if (v5 == 1)
  {
    if (!os_log_GKGeneral) {
      id v41 = (id)GKOSLoggers(v9);
    }
    __int16 v42 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_INFO,  "GKRealTimeMultiplayerSendBulletin GKClearInvitationReason",  buf,  2u);
    }

    id v12 = (id)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](&OBJC_CLASS___GKBulletinController, "sharedController"));
    id v43 = [v12 getBulletinsOfType:objc_opt_class(GKRealTimeMultiplayerInitiateBulletin)];
    id v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    __int128 v66 = 0u;
    id v45 = [v44 countByEnumeratingWithState:&v63 objects:v70 count:16];
    if (v45)
    {
      id v46 = v45;
      uint64_t v47 = *(void *)v64;
      do
      {
        __int16 v48 = 0LL;
        do
        {
          if (*(void *)v64 != v47) {
            objc_enumerationMutation(v44);
          }
          uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v44 objectForKey:*(void *)(*((void *)&v63 + 1) + 8 * (void)v48)]);
          id v50 = (void *)objc_claimAutoreleasedReturnValue([v49 sessionToken]);
          unsigned int v51 = [v50 isEqualToData:v8];

          if (v51) {
            [v12 withdrawBulletin:v49];
          }

          __int16 v48 = (char *)v48 + 1;
        }

        while (v46 != v48);
        id v46 = [v44 countByEnumeratingWithState:&v63 objects:v70 count:16];
      }

      while (v46);
    }

    uint64_t v52 = *(void *)(a1 + 40);
    if (v52) {
      (*(void (**)(uint64_t, void))(v52 + 16))(v52, 0LL);
    }

    goto LABEL_39;
  }

  if (v5 == 2)
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers(v9);
    }
    id v11 = (os_log_s *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "GKRealTimeMultiplayerSendBulletin GKReconnectInvitationReason",  buf,  2u);
    }

    id v12 = [*(id *)(a1 + 32) mutableCopy];
    [v12 setObject:&off_100288048 forKeyedSubscript:GKPushCommandKey];
    uint64_t v13 = GKInviteGameIDKey;
    v68[0] = GKInviteGameIDKey;
    uint64_t v14 = GKClientDataKey;
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:GKClientDataKey]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v13]);
    v69[0] = v16;
    uint64_t v17 = GKInviteGameVersionKey;
    v68[1] = GKInviteGameVersionKey;
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v14]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v17]);
    v69[1] = v19;
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v69,  v68,  2LL));
    [v12 setObject:v20 forKeyedSubscript:GKPushDataKey];

    id v21 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v14]);
    uint64_t v22 = GKInvitePeerNATIPKey;
    unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:GKInvitePeerNATIPKey]);
    [v12 setObject:v23 forKeyedSubscript:v22];

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v14]);
    uint64_t v25 = GKInvitePeerNATTypeKey;
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:GKInvitePeerNATTypeKey]);
    [v12 setObject:v26 forKeyedSubscript:v25];

    int v27 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v14]);
    uint64_t v28 = GKInvitePeerBlobKey;
    unsigned int v29 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:GKInvitePeerBlobKey]);
    [v12 setObject:v29 forKeyedSubscript:v28];

    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    [v12 setObject:v30 forKeyedSubscript:GKInviteIsReinvite];

    +[GKRealTimeMultiplayerInitiateBulletin loadBulletinsForPushNotification:withHandler:]( &OBJC_CLASS___GKRealTimeMultiplayerInitiateBulletin,  "loadBulletinsForPushNotification:withHandler:",  v12,  *(void *)(a1 + 40));
LABEL_39:

    goto LABEL_48;
  }

LABEL_46:
  uint64_t v56 = *(void *)(a1 + 40);
  if (v56) {
    (*(void (**)(uint64_t, void))(v56 + 16))(v56, 0LL);
  }
LABEL_48:
}

                __break(1u);
              }

              uint64_t v13 = v9 + 5;
            }
          }
        }
      }

  swift_bridgeObjectRelease(a3, v37);
  swift_bridgeObjectRelease(v5, v58);
  return v62;
}

void sub_10011DC4C(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 connection]);
  if (v6)
  {
    id v7 = (void *)v6;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
    unsigned int v10 = [v8 isEqualToString:v9];

    if (v10)
    {
      if (!os_log_GKGeneral) {
        id v12 = (id)GKOSLoggers(v11);
      }
      uint64_t v13 = (os_log_s *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v15 = 138412546;
        id v16 = v5;
        __int16 v17 = 2112;
        uint64_t v18 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Found a matching client proxy(%@) for the update bulletin: %@",  (uint8_t *)&v15,  0x16u);
      }

      [v5 updateInviteWithNotification:*(void *)(a1 + 40)];
      *a3 = 1;
    }
  }
}

void sub_10011DDA4(uint64_t a1)
{
  if (!os_log_GKGeneral) {
    id v2 = (id)GKOSLoggers(a1);
  }
  id v3 = (os_log_s *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG)) {
    sub_10011E2EC(a1, v3);
  }
}

void sub_10011DE80()
{
}

void sub_10011DEAC()
{
}

void sub_10011DF0C()
{
}

void sub_10011DF38()
{
}

void sub_10011DF98()
{
}

void sub_10011DFF8()
{
}

void sub_10011E024()
{
}

void sub_10011E084()
{
}

void sub_10011E0E4()
{
}

void sub_10011E110()
{
}

void sub_10011E170()
{
}

void sub_10011E1D0()
{
}

void sub_10011E230(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(const char **)(a2 + 64);
  uint64_t v5 = a3;
  uint8_t v6 = NSStringFromSelector(v4);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  int v8 = 138412546;
  uint64_t v9 = a1;
  __int16 v10 = 2112;
  uint64_t v11 = v7;
  _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "error:%@ while decoding invitedPlayers archive in %@",  (uint8_t *)&v8,  0x16u);
}

void sub_10011E2EC(uint64_t a1, os_log_s *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = 138412546;
  uint64_t v5 = v2;
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Done uploadLogsForRadar: %@, from: %@",  (uint8_t *)&v4,  0x16u);
  sub_10000C760();
}

void sub_10011E640(id a1, NSManagedObjectContext *a2, id a3)
{
  int v4 = (void (**)(void))a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:]( &OBJC_CLASS___GKPlayerProfileCacheObject,  "localPlayerInManagedObjectContext:",  a2));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v6 challengeList]);
  [v5 invalidate];

  v4[2](v4);
}

void sub_10011EA3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10011EAD0;
  void v6[3] = &unk_10026B2A0;
  int v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 determineGameLocationViaCompatibilityMatrixWithCompletionHandler:v6];
}

void sub_10011EAD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_10012223C();
    }
    [*(id *)(a1 + 32) setError:v4];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10011EB64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100120190(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  uint64_t v9 = (os_log_s *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "GKChallengeCompletedBulletin clearing challenge cache",  buf,  2u);
  }

  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"challengeID IN %@",  *(void *)(a1 + 32)));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[GKCacheObject objectsMatchingPredicate:context:]( &OBJC_CLASS___GKChallengeCacheObject,  "objectsMatchingPredicate:context:",  v10,  v5));

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1001202E4;
  void v12[3] = &unk_1002734A0;
  id v13 = *(id *)(a1 + 40);
  [v11 enumerateObjectsUsingBlock:v12];
  v7[2](v7);
}

void sub_1001202E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:](&OBJC_CLASS___GKClientProxy, "clientForBundleID:", v5));

    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKChallengeBulletin.m",  342LL,  "+[GKChallengeCompletedBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke"));
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[GKPlayerCredentialController sharedController]( &OBJC_CLASS___GKPlayerCredentialController,  "sharedController"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "pushCredentialForEnvironment:", objc_msgSend(*(id *)(a1 + 32), "environment")));
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 playerInternal]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 playerID]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v6 transactionGroupWithName:v7 forPlayerID:v11]);

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10012047C;
    void v13[3] = &unk_10026C810;
    id v14 = v3;
    [v12 performOnManagedObjectContext:v13];
    [v6 refreshContentsForDataType:1 userInfo:0];
  }
}

void sub_10012047C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 challengeID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"challengeID = %@",  v4));
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[GKCacheObject objectsMatchingPredicate:context:]( &OBJC_CLASS___GKChallengeCacheObject,  "objectsMatchingPredicate:context:",  v5,  v3));

  [v6 makeObjectsPerformSelector:"invalidate"];
}

void sub_100120524(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKChallengeService,  "serviceWithTransport:forClient:localPlayer:",  0LL,  v2,  0LL));

  int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s:%d %s",  "GKChallengeBulletin.m",  358LL,  "+[GKChallengeCompletedBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke_3"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](&OBJC_CLASS___GKDispatchGroup, "dispatchGroupWithName:", v4));

  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id obj = a1[5];
  id v6 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v31;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v31 != v8) {
          objc_enumerationMutation(obj);
        }
        __int16 v10 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([a1[5] objectForKey:v10]);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

        if (v10) {
          BOOL v13 = v10 == v12;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13) {
          id v14 = 0LL;
        }
        else {
          id v14 = v10;
        }
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472LL;
        void v23[2] = sub_10012084C;
        void v23[3] = &unk_10026E350;
        id v24 = v3;
        id v25 = v11;
        id v26 = v14;
        id v27 = a1[6];
        id v15 = v5;
        id v28 = v15;
        id v29 = a1[7];
        id v16 = v14;
        id v17 = v11;
        [v15 perform:v23];
      }

      id v7 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    }

    while (v7);
  }

  if (a1[8])
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1[4] replyQueue]);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    void v20[2] = sub_100120D60;
    v20[3] = &unk_10026B030;
    id v22 = a1[8];
    id v21 = a1[7];
    [v5 notifyOnQueue:v18 block:v20];
  }
}

void sub_10012084C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_100120930;
  void v8[3] = &unk_1002734C8;
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 72);
  id v12 = *(id *)(a1 + 32);
  id v13 = v3;
  id v7 = v3;
  [v4 getChallengeDetailsForChallengeIDs:v5 receiverID:v6 handler:v8];
}

void sub_100120930(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v19 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100122370();
    }
  }

  else
  {
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v8 = [v5 countByEnumeratingWithState:&v23 objects:v29 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v24;
      do
      {
        for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v10) {
            objc_enumerationMutation(v5);
          }
          id v12 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
          id v13 = -[GKBulletin initWithPushNotification:]( objc_alloc(&OBJC_CLASS___GKChallengeCompletedBulletin),  "initWithPushNotification:",  *(void *)(a1 + 32));
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 challengeID]);

          if (!v14)
          {
            if (!os_log_GKGeneral) {
              id v16 = (id)GKOSLoggers(v15);
            }
            id v17 = (os_log_s *)os_log_GKError;
            if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              id v28 = v12;
              _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "We received a challenge with a nil ID back from getChallengeDetailsForChallengeIDs, and we're going to c rash because of it. %@",  buf,  0xCu);
            }
          }

          -[GKChallengeBulletin setChallenge:](v13, "setChallenge:", v12);
          if (-[GKGameplayBulletin isPushFromLocalPlayers](v13, "isPushFromLocalPlayers"))
          {
            uint64_t v18 = *(void **)(a1 + 40);
            v20[0] = _NSConcreteStackBlock;
            v20[1] = 3221225472LL;
            void v20[2] = sub_100120BEC;
            v20[3] = &unk_10026B170;
            id v21 = v13;
            id v22 = *(id *)(a1 + 48);
            [v18 perform:v20];
          }

          else if (-[GKGameplayBulletin isPushForLocalPlayers](v13, "isPushForLocalPlayers"))
          {
            -[GKChallengeBulletin notifyApp](v13, "notifyApp");
          }
        }

        id v9 = [v5 countByEnumeratingWithState:&v23 objects:v29 count:16];
      }

      while (v9);
    }
  }

  [*(id *)(a1 + 56) getChallengesForGameDescriptor:0 handler:0];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100120BEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100120C98;
  void v6[3] = &unk_10026B480;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v5 = v3;
  [v7 determineGameLocationOnDeviceOrInStoreWithCompletionHandler:v6];
}

void sub_100120C98(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_1001223D0();
    }
  }

  else
  {
    [*(id *)(a1 + 32) refreshData];
    if ([*(id *)(a1 + 32) gameLocation])
    {
      unsigned int v6 = [*(id *)(a1 + 32) isAppRunning];
      id v7 = *(void **)(a1 + 32);
      if (v6)
      {
        [v7 notifyApp];
      }

      else
      {
        [v7 assembleBulletin];
        [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_100120D60(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100121570(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allObjects]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100121644;
  void v7[3] = &unk_100270110;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  id v11 = v3;
  id v6 = v3;
  [v4 getChallengeDetailsForChallengeIDs:v5 handler:v7];
}

void sub_100121644(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v24 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(v6);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100122430();
    }
  }

  else
  {
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id v8 = [v5 countByEnumeratingWithState:&v28 objects:v34 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v29;
      do
      {
        for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v29 != v10) {
            objc_enumerationMutation(v5);
          }
          id v12 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
          id v13 = -[GKBulletin initWithPushNotification:]( objc_alloc(&OBJC_CLASS___GKChallengeReceivedBulletin),  "initWithPushNotification:",  *(void *)(a1 + 32));
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 challengeID]);

          if (!v14)
          {
            if (!os_log_GKGeneral) {
              id v16 = (id)GKOSLoggers(v15);
            }
            id v17 = (os_log_s *)os_log_GKError;
            if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              __int128 v33 = v12;
              _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "We received a challenge with a nil ID back from getChallengeDetailsForChallengeIDs, and we're going to c rash because of it. %@",  buf,  0xCu);
            }
          }

          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v12 game]);
          unsigned __int8 v19 = [v18 supportsChallenges];

          if ((v19 & 1) != 0)
          {
            -[GKChallengeBulletin setChallenge:](v13, "setChallenge:", v12);
            if (-[GKGameplayBulletin isPushForLocalPlayers](v13, "isPushForLocalPlayers"))
            {
              id v21 = *(void **)(a1 + 40);
              v25[0] = _NSConcreteStackBlock;
              v25[1] = 3221225472LL;
              v25[2] = sub_100121964;
              void v25[3] = &unk_10026B170;
              __int128 v26 = v13;
              id v27 = *(id *)(a1 + 48);
              [v21 perform:v25];
            }
          }

          else
          {
            if (!os_log_GKGeneral) {
              id v22 = (id)GKOSLoggers(v20);
            }
            __int128 v23 = (os_log_s *)os_log_GKTrace;
            if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              __int128 v33 = v12;
              _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "We received a challenge from a game that developers did not opt in. So we are going to ignore it. Challenge: %@",  buf,  0xCu);
            }
          }
        }

        id v9 = [v5 countByEnumeratingWithState:&v28 objects:v34 count:16];
      }

      while (v9);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100121964(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100121A10;
  void v6[3] = &unk_10026B480;
  id v7 = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v5 = v3;
  [v7 determineGameLocationOnDeviceOrInStoreWithCompletionHandler:v6];
}

void sub_100121A10(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral) {
      id v5 = (id)GKOSLoggers(v3);
    }
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100122490();
    }
  }

  else if ([*(id *)(a1 + 32) gameLocation])
  {
    [*(id *)(a1 + 32) refreshData];
    unsigned int v6 = [*(id *)(a1 + 32) isAppRunning];
    id v7 = *(void **)(a1 + 32);
    if (v6)
    {
      [v7 notifyApp];
    }

    else
    {
      [v7 assembleBulletin];
      [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_100121AD8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10012223C()
{
}

void sub_10012229C(void *a1, uint64_t a2, const char *a3)
{
  uint64_t v5 = a1;
  id v7 = (void *)objc_opt_class(a2, v6);
  id v8 = v7;
  id v9 = NSStringFromSelector(a3);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  int v11 = 138412546;
  id v12 = v7;
  __int16 v13 = 2112;
  id v14 = v10;
  _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%@ doesn't implement %@; Subclasses should set launch event",
    (uint8_t *)&v11,
    0x16u);
}

void sub_100122370()
{
}

void sub_1001223D0()
{
}

void sub_100122430()
{
}

void sub_100122490()
{
}

void sub_100122C7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  void v21[2] = sub_100122EBC;
  v21[3] = &unk_1002734F0;
  id v22 = *(id *)(a1 + 32);
  id v23 = *(id *)(a1 + 40);
  id v4 = v3;
  id v24 = v4;
  uint64_t v5 = objc_retainBlock(v21);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getRelationshipGameImage]);
  if (v6)
  {
    id v7 = v6;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 stringByReplacingOccurrencesOfString:@"{w}" withString:@"128"]);

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByReplacingOccurrencesOfString:@"{h}" withString:@"128"]);
    uint64_t v10 = -[NSURL initWithString:](objc_alloc(&OBJC_CLASS___NSURL), "initWithString:", v9);
    int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getRelationshipGameAdamId]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 _gkSHA256Hash]);
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@_%@", v11, v12));
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:credential:]( &OBJC_CLASS___GKUtilityService,  "serviceWithTransport:forClient:credential:",  0LL,  *(void *)(a1 + 48),  0LL));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_100122FAC;
    void v17[3] = &unk_100273518;
    uint64_t v18 = v10;
    id v19 = v13;
    uint64_t v20 = v5;
    id v15 = v13;
    id v16 = v10;
    [v14 requestImageDataForURL:v16 subdirectory:@"GKBulletins" fileName:v15 handler:v17];
  }

  else
  {
    ((void (*)(void *, void))v5[2])(v5, 0LL);
  }
}

void sub_100122EBC(id *a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100122F74;
  void v4[3] = &unk_10026B148;
  id v5 = a1[4];
  id v6 = a1[5];
  id v7 = a1[6];
  id v3 = objc_retainBlock(v4);
  ((void (*)(void))v3[2])();
}

uint64_t sub_100122F74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100122FAC(void *a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (v3
    && +[GKImageRestrictions isAuthorizedForGamesWithImageData:]( &OBJC_CLASS___GKImageRestrictions,  "isAuthorizedForGamesWithImageData:",  v3))
  {
    id v4 = objc_alloc(&OBJC_CLASS___NSURL);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSData _gkImageCachePathForURL:subdirectory:filename:]( &OBJC_CLASS___NSData,  "_gkImageCachePathForURL:subdirectory:filename:",  a1[4],  @"GKBulletins",  a1[5]));
    id v6 = -[NSURL initWithString:](v4, "initWithString:", v5);
  }

  else
  {
    id v6 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

uint64_t sub_100123064(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001239F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    id v6 = [v5 count];
    if (v6 == (id)1)
    {
      id v8 = (id)objc_claimAutoreleasedReturnValue([v5 objectAtIndexedSubscript:0]);
      else {
        id v9 = 0LL;
      }
      [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"targetType"];
      goto LABEL_11;
    }
  }

  if (!os_log_GKGeneral) {
    id v10 = (id)GKOSLoggers(v6);
  }
  int v11 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    id v8 = v11;
    id v12 = [v5 count];
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
    *(_DWORD *)buf = 134218242;
    id v18 = v12;
    __int16 v19 = 2112;
    uint64_t v20 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_INFO,  "GKActivityFeedBulletin getGameMetadataForBundleIDs returned %lu games and error: %@",  buf,  0x16u);

LABEL_11:
  }

  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 32);
  v16.receiver = *(id *)(a1 + 48);
  v16.super_class = (Class)&OBJC_CLASS___GKActivityFeedBulletin;
  objc_msgSendSuper2(&v16, "reportMetricsForActionID:withAdditionalFields:", v14, v15);
}

void sub_1001246B8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "GKBulletinNearbyInvite: initWithPlayer: - No message in Nearby Invite. Dropping on the floor",  v1,  2u);
}

void sub_100124968(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.gamed.GKBulletinController.file.queue", 0LL);
  uint64_t v2 = (void *)qword_1002BB780;
  qword_1002BB780 = (uint64_t)v1;
}

void sub_100124B10(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bulletinStorageFilePathForEnvironment:", objc_msgSend(v4, "environment")));

  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 stringByAppendingString:@".doomed"]);
  id v7 = (void *)v6;
  if (!os_log_GKGeneral) {
    id v8 = (id)GKOSLoggers(v6);
  }
  id v9 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Removing bulletin store %@.", buf, 0xCu);
  }

  id v20 = 0LL;
  unsigned int v10 = [v2 moveItemAtPath:v5 toPath:v7 error:&v20];
  id v11 = v20;
  id v12 = v11;
  if (v10)
  {
    id v19 = v11;
    unsigned __int8 v13 = [v2 removeItemAtPath:v7 error:&v19];
    id v14 = v19;

    if ((v13 & 1) == 0)
    {
      if (!os_log_GKGeneral) {
        id v16 = (id)GKOSLoggers(v15);
      }
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
        sub_100125CDC();
      }
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v17 = (id)GKOSLoggers(v11);
    }
    id v18 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      id v22 = v5;
      __int16 v23 = 2112;
      id v24 = v7;
      __int16 v25 = 2112;
      __int128 v26 = v12;
      _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Failed to move delayed requests store %@ to %@. ERROR: %@",  buf,  0x20u);
    }

    id v14 = v12;
  }
}

void sub_100124E44(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bulletinStorageFilePathForEnvironment:", objc_msgSend(v3, "environment")));

  if (!os_log_GKGeneral) {
    id v6 = (id)GKOSLoggers(v5);
  }
  id v7 = (os_log_s *)os_log_GKTrace;
  BOOL v8 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
  if (v8)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "GKBulletinController+Common: updateSavedBulletins - Writing Bulletin Store",  buf,  2u);
  }

  if (!os_log_GKGeneral) {
    id v9 = (id)GKOSLoggers(v8);
  }
  unsigned int v10 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    __int16 v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "writing bulletin store %@.", buf, 0xCu);
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bulletins]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  v11));

  id v21 = 0LL;
  unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v12,  1LL,  &v21));
  id v14 = v21;
  uint64_t v15 = v14;
  if (v14)
  {
    if (!os_log_GKGeneral) {
      id v16 = (id)GKOSLoggers(v14);
    }
    id v17 = (os_log_s *)os_log_GKError;
    BOOL v18 = os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
    if (v18) {
      sub_100125DB4(v17);
    }
    id v19 = (os_log_s *)os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      id v20 = (id)GKOSLoggers(v18);
      id v19 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      sub_100125D44();
    }
  }

  [v13 writeToFile:v4 atomically:1];
}

void sub_100125178(uint64_t a1)
{
  dispatch_queue_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
  uint64_t v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "bulletinStorageFilePathForEnvironment:", objc_msgSend(v2, "environment")));

  if (!os_log_GKGeneral) {
    id v5 = (id)GKOSLoggers(v4);
  }
  id v6 = (os_log_s *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v54 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Reading bulletin store %@.", buf, 0xCu);
  }

  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerInviteBulletin),  @"GKGameInviteBulletinMultiplayerTurnBased");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerTurnBulletin),  @"GKPlayerTurnTurnBasedMultiplayerBulletin");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerCompletedBulletin),  @"GKCompletedGameTurnBasedMultiplayerBulletinBased");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerTurnCountBulletin),  @"GKUpdateTurnCountTurnBasedMultiplayerBulletin");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerClearBulletin),  @"GKClearTurnBasedMultiplayerBulletin");
  uint64_t v46 = v3;
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerMatchChangedBulletin),  @"GKMatchChangedTurnBasedMultiplayerBulletin");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerRequestedExchangeBulletin),  @"GKRequestedExchangeTurnBasedMultiplayerBulletin");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerCompletedExchangeBulletin),  @"GKCompletedExchangeTurnBasedMultiplayerBulletin");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerCanceledExchangeBulletin),  @"GKCanceledExchangeTurnBasedMultiplayerBulletin");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerTurnReminderBulletin),  @"GKTurnReminderTurnBasedMultiplayerBulletin");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKChallengeReceivedBulletin),  @"GKBulletinChallengeReceive");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKChallengeCompletedBulletin),  @"GKBulletinChallengeComplete");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerInviteBulletin),  @"GKBulletinMultiplayerTurnBasedInvite");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerTurnBulletin),  @"GKBulletinMultiplayerTurnBasedTurn");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerCompletedBulletin),  @"GKBulletinMultiplayerTurnBasedCompleted");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerTurnCountBulletin),  @"GKBulletinMultiplayerTurnBasedTurnCount");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerClearBulletin),  @"GKBulletinMultiplayerTurnBasedClear");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerMatchChangedBulletin),  @"GKBulletinMultiplayerTurnBasedMatchChanged");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerRequestedExchangeBulletin),  @"GKBulletinMultiplayerTurnBasedExchangeRequested");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerCompletedExchangeBulletin),  @"GKBulletinMultiplayerTurnBasedExchangeCompleted");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerCanceledExchangeBulletin),  @"GKBulletinMultiplayerTurnBasedExchangeCanceled");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerTurnReminderBulletin),  @"GKBulletinMultiplayerTurnBasedReminder");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerInitiateBulletin),  @"GKBulletinMultiplayerInviteInitiate");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerAcceptBulletin),  @"GKBulletinMultiplayerInviteAccept");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerDeclineBulletin),  @"GKBulletinMultiplayerInviteDecline");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerCancelBulletin),  @"GKBulletinMultiplayerInviteCancel");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKDeprecatedBulletin),  @"GKFriendRequestReceivedBulletin");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKDeprecatedBulletin),  @"GKFriendRequestBulletin");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKDeprecatedBulletin),  @"GKFriendRequestAcceptedBulletin");
  +[NSKeyedUnarchiver setClass:forClassName:]( &OBJC_CLASS___NSKeyedUnarchiver,  "setClass:forClassName:",  objc_opt_class(&OBJC_CLASS___GKDeprecatedBulletin),  @"GKFriendRequestCancelBulletin");
  uint64_t v45 = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerInviteBulletin);
  uint64_t v44 = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerTurnBulletin);
  uint64_t v43 = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerCompletedBulletin);
  uint64_t v42 = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerTurnCountBulletin);
  uint64_t v41 = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerClearBulletin);
  uint64_t v40 = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerMatchChangedBulletin);
  uint64_t v39 = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerRequestedExchangeBulletin);
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerCompletedExchangeBulletin);
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerCanceledExchangeBulletin);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___GKTurnBasedMultiplayerTurnReminderBulletin);
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___GKChallengeReceivedBulletin);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___GKChallengeCompletedBulletin);
  uint64_t v12 = objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerInitiateBulletin);
  uint64_t v13 = objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerAcceptBulletin);
  uint64_t v14 = objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerDeclineBulletin);
  uint64_t v15 = objc_opt_class(&OBJC_CLASS___GKRealTimeMultiplayerCancelBulletin);
  uint64_t v37 = v13;
  id v16 = (void *)v46;
  id v17 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v45,  v44,  v43,  v42,  v41,  v40,  v39,  v7,  v8,  v9,  v10,  v11,  v12,  v37,  v14,  v15,  objc_opt_class(&OBJC_CLASS___GKDeprecatedBulletin),  0LL);
  BOOL v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](&OBJC_CLASS___NSData, "dataWithContentsOfFile:", v46));
  id v51 = 0LL;
  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v18,  v19,  &v51));
  id v21 = v51;
  id v22 = v21;
  if (!v21) {
    goto LABEL_9;
  }
  if (!os_log_GKGeneral) {
    id v23 = (id)GKOSLoggers(v21);
  }
  id v24 = (void *)os_log_GKError;
  id v21 = (id)os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
  if ((_DWORD)v21)
  {
    sub_100125E64((uint64_t)v22, a1, v24);
    if (v20) {
      goto LABEL_10;
    }
  }

  else
  {
LABEL_9:
    if (v20)
    {
LABEL_10:
      uint64_t v25 = objc_opt_class(&OBJC_CLASS___NSMutableDictionary);
      if ((objc_opt_isKindOfClass(v20, v25) & 1) == 0)
      {
        id v26 = [v20 mutableCopy];

        id v20 = v26;
      }

      __int128 v49 = 0u;
      __int128 v50 = 0u;
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v20 allValues]);
      id v28 = [v27 countByEnumeratingWithState:&v47 objects:v52 count:16];
      if (v28)
      {
        id v29 = v28;
        uint64_t v30 = *(void *)v48;
        do
        {
          for (uint64_t i = 0LL; i != v29; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v48 != v30) {
              objc_enumerationMutation(v27);
            }
            __int128 v32 = *(void **)(*((void *)&v47 + 1) + 8LL * (void)i);
            if ([v32 conformsToProtocol:&OBJC_PROTOCOL___GKDeprecated])
            {
              __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 recordID]);
              [v20 removeObjectForKey:v33];
            }
          }

          id v29 = [v27 countByEnumeratingWithState:&v47 objects:v52 count:16];
        }

        while (v29);
      }

      id v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bulletins]);
      [v34 addEntriesFromDictionary:v20];

      id v16 = (void *)v46;
      goto LABEL_27;
    }
  }

  id v35 = (os_log_s *)os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    id v36 = (id)GKOSLoggers(v21);
    id v35 = (os_log_s *)os_log_GKGeneral;
  }

  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
    sub_100125DF4(v46, v35);
  }
LABEL_27:
}

void sub_100125AFC(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 matchID]);
  unsigned int v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  if (v5) {
    [*(id *)(a1 + 40) withdrawBulletin:v6];
  }
}

void sub_100125C68(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v7 challenge]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 challengeID]);
  unsigned int v6 = [v5 isEqualToString:*(void *)(a1 + 32)];

  if (v6) {
    [*(id *)(a1 + 40) withdrawBulletin:v7];
  }
}

void sub_100125CDC()
{
}

void sub_100125D44()
{
}

void sub_100125DB4(os_log_t log)
{
  *(_WORD *)dispatch_queue_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "GKBulletinController+Common updateSavedBulletins - Failed to write bulletin store",  v1,  2u);
}

void sub_100125DF4(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "No result after unarchiving file at %@.",  (uint8_t *)&v2,  0xCu);
  sub_10000C760();
}

void sub_100125E64(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(const char **)(a2 + 40);
  unsigned int v5 = a3;
  unsigned int v6 = NSStringFromSelector(v4);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  int v9 = 138412546;
  uint64_t v10 = a1;
  __int16 v11 = 2112;
  uint64_t v12 = v7;
  sub_1000208A4((void *)&_mh_execute_header, v5, v8, "error:%@ while decoding result archive in %@", (uint8_t *)&v9);
}

id sub_100126084(uint64_t a1)
{
  return [*(id *)(a1 + 32) sharedController];
}

void sub_100126154(id a1)
{
  dispatch_queue_t v1 = objc_alloc_init(&OBJC_CLASS___GKBulletinController);
  int v2 = (void *)qword_1002BB788;
  qword_1002BB788 = (uint64_t)v1;
}

void sub_1001263CC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  [*(id *)(a1 + 32) setBulletins:v2];
}

void sub_100126538(_Unwind_Exception *exception_object)
{
}

void sub_1001268F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100126BC0(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bulletins]);
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 recordID]);
  [v4 setObject:v2 forKey:v3];
}

void sub_100126C20(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = v5;
  if ((a2 & 1) != 0)
  {
    if (!os_log_GKGeneral) {
      id v7 = (id)GKOSLoggers(v5);
    }
    uint64_t v8 = (os_log_s *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      int v12 = 138412290;
      uint64_t v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "GKBulletinController presented Bulletin: %@",  (uint8_t *)&v12,  0xCu);
    }
  }

  else
  {
    if (!os_log_GKGeneral) {
      id v10 = (id)GKOSLoggers(v5);
    }
    __int16 v11 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100128154(a1, v11, (uint64_t)v6);
    }
  }
}

void sub_100126E74(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bulletins]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordID]);
  [v3 removeObjectForKey:v2];
}

void sub_100127000(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bulletins]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordID]);
  [v3 removeObjectForKey:v2];
}

void sub_100127240( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_10012726C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10012727C(uint64_t a1)
{
}

void sub_100127284(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bulletins]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 allValues]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bulletins]);
  [v6 removeAllObjects];
}

void sub_100127594( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001275B4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bulletins]);
  id obj = (id)objc_claimAutoreleasedReturnValue([v2 objectForKey:*(void *)(a1 + 40)]);

  uint64_t v3 = objc_opt_class(&OBJC_CLASS___GKGameplayBulletin);
  if ((objc_opt_isKindOfClass(obj, v3) & 1) != 0) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), obj);
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bulletins]);
  [v4 removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_100127944(_Unwind_Exception *a1)
{
}

void sub_100127964(void *a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v19 = 0LL;
  id v20 = &v19;
  uint64_t v21 = 0x3032000000LL;
  id v22 = sub_10012726C;
  id v23 = sub_10012727C;
  id v24 = 0LL;
  id v4 = [(id)objc_opt_class(a1[4]) bulletinQueue];
  id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100127B50;
  block[3] = &unk_1002702B8;
  id v6 = (void *)a1[5];
  void block[4] = a1[4];
  id v17 = v6;
  BOOL v18 = &v19;
  dispatch_sync(v5, block);

  id v7 = (void *)v20[5];
  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 gameDescriptor]);

    if (v8)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([(id)v20[5] gameDescriptor]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 dictionaryForRequest]);

      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](&OBJC_CLASS___GKClientProxy, "gameCenterClient"));
      int v12 = (void *)objc_claimAutoreleasedReturnValue( +[GKService serviceWithTransport:forClient:localPlayer:]( &OBJC_CLASS___GKMultiplayerMatchService,  "serviceWithTransport:forClient:localPlayer:",  0LL,  v11,  0LL));
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      void v13[2] = sub_100127BCC;
      void v13[3] = &unk_100273618;
      uint64_t v15 = a1[6];
      uint64_t v14 = v3;
      [v12 getCompatibilityMatrix:v10 handler:v13];
    }
  }

  else
  {
    v3[2](v3);
  }

  _Block_object_dispose(&v19, 8);
}

void sub_100127B30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100127B50(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bulletins]);
  id obj = (id)objc_claimAutoreleasedReturnValue([v2 objectForKey:*(void *)(a1 + 40)]);

  uint64_t v3 = objc_opt_class(&OBJC_CLASS___GKGameplayBulletin);
  if ((objc_opt_isKindOfClass(obj, v3) & 1) != 0) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), obj);
  }
}

void sub_100127BCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral) {
      id v8 = (id)GKOSLoggers(v6);
    }
    uint64_t v9 = (os_log_s *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR)) {
      sub_100128210((uint64_t)v7, v9);
    }
  }

  else
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v10 = v5;
    id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v13) {
            objc_enumerationMutation(v10);
          }
          if (objc_msgSend(*(id *)(*((void *)&v16 + 1) + 8 * (void)i), "platform", (void)v16) != (id)3)
          {
            char v15 = 0;
            goto LABEL_16;
          }
        }

        id v12 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v12) {
          continue;
        }
        break;
      }
    }

    char v15 = 1;
LABEL_16:

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v15;
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100127D50(uint64_t a1)
{
  uint64_t v1 = (os_log_s *)os_log_GKGeneral;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    if (!os_log_GKGeneral)
    {
      id v3 = (id)GKOSLoggers(a1);
      uint64_t v1 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "Should decline this bulletin because this is a tv only game, and we regard user's no action to this bulletin as a decline.",  buf,  2u);
    }

    id v4 =  [*(id *)(a1 + 32) callAction:@"GKDeclined" forBulletinDictionary:*(void *)(a1 + 40)];
  }

  else
  {
    if (!os_log_GKGeneral)
    {
      id v5 = (id)GKOSLoggers(a1);
      uint64_t v1 = (os_log_s *)os_log_GKGeneral;
    }

    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "Should not decline this bulletin because this is not a tv only game, and other devices might need to handle this bulletin.",  v6,  2u);
    }
  }

Class sub_100127F00(uint64_t a1)
{
  Class result = objc_getClass("PBSBulletin");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_100128284();
  }
  qword_1002BB798 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

uint64_t sub_100127F54()
{
  id v2 = 0LL;
  if (!qword_1002BB7A0)
  {
    __int128 v3 = off_100273660;
    uint64_t v4 = 0LL;
    qword_1002BB7A0 = _sl_dlopen(&v3, &v2);
  }

  uint64_t v0 = qword_1002BB7A0;
  if (!qword_1002BB7A0) {
    sub_1001282FC(&v2);
  }
  if (v2) {
    free(v2);
  }
  return v0;
}

char *sub_100127FFC()
{
  return dlerror();
}

void sub_100128004()
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString *getPBSSystemBulletinServiceName(void)"));
  objc_msgSend( v1,  "handleFailureInFunction:file:lineNumber:description:",  v0,  @"GKBulletinController.m",  59,  @"%s",  sub_100127FFC());

  __break(1u);
}

void sub_100128074()
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString *getPBSSystemBulletinViewControllerClassName(void)"));
  objc_msgSend( v1,  "handleFailureInFunction:file:lineNumber:description:",  v0,  @"GKBulletinController.m",  60,  @"%s",  sub_100127FFC());

  __break(1u);
}

void sub_1001280E4()
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString *getPBSSystemBulletinTextImageIDTVButton(void)"));
  objc_msgSend( v1,  "handleFailureInFunction:file:lineNumber:description:",  v0,  @"GKBulletinController.m",  61,  @"%s",  sub_100127FFC());

  __break(1u);
}

void sub_100128154(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  int v8 = 138412546;
  id v9 = (id)objc_opt_class(v4, v6);
  __int16 v10 = 2112;
  uint64_t v11 = a3;
  id v7 = v9;
  _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%@ failed to present Bulletin: %@",  (uint8_t *)&v8,  0x16u);
}

void sub_100128210(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "cannot getCompatibilityMatrix due to error: %@",  (uint8_t *)&v2,  0xCu);
}

void sub_100128284()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getPBSBulletinClass(void)_block_invoke"));
  objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v1,  @"GKBulletinController.m",  58,  @"Unable to find class %s",  "PBSBulletin");

  __break(1u);
}

void sub_1001282FC(void *a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *PineBoardServicesLibrary(void)"));
  objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"GKBulletinController.m",  56,  @"%s",  *a1);

  __break(1u);
}

void sub_100128430(__int16 a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Feature not suppported on platform, ignoring command: %d",  (uint8_t *)v2,  8u);
}

uint64_t sub_1001286E8()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_playerID);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_playerID + 8));
  return v1;
}

uint64_t sub_100128744()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendBiDirectional);
}

uint64_t sub_100128778()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendPlayedWith);
}

id sub_100128788()
{
  id v0 = objc_allocWithZone((Class)sub_1001296A8());
  return sub_1001287D0();
}

id sub_1001287D0()
{
  uint64_t v5 = sub_1001296A8();
  ObjectType = (objc_class *)swift_getObjectType(v5);
  id v7 = &v1[OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_playerID];
  void *v7 = v4;
  v7[1] = v3;
  v1[OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendBiDirectional] = v2;
  v1[OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendPlayedWith] = v0;
  v9.receiver = v1;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t sub_100128888(void *a1)
{
  uint64_t result = sub_100129554(a1);
  if (v4)
  {
    uint64_t v5 = v4;
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5, v7);
    id v8 = objc_msgSend( v1,  "initWithPlayerID:friendBiDirectional:friendPlayedWith:",  v6,  objc_msgSend(a1, "friendBiDirectional"),  objc_msgSend(a1, "friendPlayedWith"));

    return (uint64_t)v8;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100128940()
{
}

id InsecureDatabaseMigrator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void *sub_100128A0C()
{
  id v1 = [v0 entries];
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  objc_super v2 = v1;
  if ((uint64_t)[v1 count] < 1)
  {
LABEL_12:

    return _swiftEmptyArrayStorage;
  }

  int64_t v3 = sub_100128B74(v2);
  int64_t v5 = v3;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0) {
      v3 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v3);
    if (!v6) {
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v6)
    {
LABEL_11:
      swift_bridgeObjectRelease(v5, v4);
      goto LABEL_12;
    }
  }

  uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v6);
  if ((v6 & 0x8000000000000000LL) == 0)
  {
    uint64_t v8 = 0LL;
    do
    {
      if ((v5 & 0xC000000000000001LL) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
      }
      else {
        id v9 = *(id *)(v5 + 8 * v8 + 32);
      }
      __int16 v10 = v9;
      ++v8;
      id v11 = objc_allocWithZone((Class)type metadata accessor for GKFilterableFriend());
      uint64_t v12 = sub_100128888(v10);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v13 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      specialized ContiguousArray._endMutation()(v14);
    }

    while (v6 != v8);
    goto LABEL_11;
  }

  __break(1u);
  return result;
}

unint64_t sub_100128B74(void *a1)
{
  unint64_t v21 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for NSFastEnumerationIterator(0LL);
  uint64_t v15 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = a1;
  NSOrderedSet.makeIterator()();

  uint64_t v6 = sub_1001295B4( &qword_1002B7FB8,  (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator,  (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()(&v19, v2, v6);
  while (v20)
  {
    sub_1001295F4(&v19, v18);
    sub_100129604((uint64_t)v18, (uint64_t)v16);
    uint64_t v7 = sub_100129640(0LL, (unint64_t *)&unk_1002B7FC0, &off_10026A0D8);
    uint64_t v8 = sub_100129678(v18);
    uint64_t v9 = v17;
    if (v17)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      unint64_t v11 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v10 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v11 >= v10 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1LL);
      }
      uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized Array._endMutation()(v12);
    }

    dispatch thunk of IteratorProtocol.next()(&v19, v2, v6);
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v4, v2);
  return v21;
}

void *sub_100128D4C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (void *)a1;
  if (!a1) {
    goto LABEL_10;
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0) {
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v9 = a1;
    }
    sub_1001296D0();
    if (_CocoaArrayWrapper.endIndex.getter(v9)) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }

  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  sub_1001296D0();
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(v2, v5);
LABEL_10:
    sub_1001296D0();
    return v2;
  }

LABEL_4:
  uint64_t v6 = sub_100128DF8(a2);
  uint64_t v8 = v7;
  uint64_t v2 = sub_100128F3C((unint64_t)v2, (uint64_t (*)(id))v6, v7);
  swift_release(v8);
  return v2;
}

  sub_10016C6F8();
  sub_10016C428();
}

uint64_t (*sub_100128DF8(unsigned int a1))()
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1 < 3) {
    return off_1002737D0[a1];
  }
  uint64_t v8 = static GKLog.daemon.getter(v4);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v11 = 67109120;
    unsigned int v13 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Ignoring unsupported friends filter: %d", v11, 8u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return sub_100129158;
}

void *sub_100128F3C(unint64_t a1, uint64_t (*a2)(id), void *a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0LL;
      uint64_t v24 = v6 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v25 = v6 & 0xC000000000000001LL;
      uint64_t v23 = v6;
      while (v25)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
LABEL_7:
        os_log_type_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_17;
        }
        uint64_t v12 = a3;
        char v13 = v5(v9);
        if (v3)
        {
          swift_bridgeObjectRelease(v6, v14);

          swift_release(_swiftEmptyArrayStorage);
          return v12;
        }

        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v15 = v7;
          __int128 v16 = v5;
          uint64_t v17 = a3;
          uint64_t v18 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
          uint64_t v19 = v18;
          a3 = v17;
          uint64_t v5 = v16;
          uint64_t v7 = v15;
          uint64_t v6 = v23;
          uint64_t v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v10);
          specialized ContiguousArray._endMutation()(v20);
        }

        else
        {
        }

        ++v8;
        if (v11 == v7)
        {
          uint64_t v12 = _swiftEmptyArrayStorage;
          goto LABEL_23;
        }
      }

      if (v8 < *(void *)(v24 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v6 < 0) {
        uint64_t v21 = v6;
      }
      else {
        uint64_t v21 = v6 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (!v7) {
        goto LABEL_22;
      }
    }

    id v9 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_7;
  }

uint64_t sub_100129158()
{
  return 1LL;
}

uint64_t sub_100129160(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendBiDirectional);
}

uint64_t sub_100129170(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendPlayedWith);
}

uint64_t variable initialization expression of GKLRUCache.cache()
{
  uint64_t v0 = type metadata accessor for GKLRUDequeNode();
  return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  v0,  &protocol witness table for AnyHashable);
}

void *variable initialization expression of PeerDiscovery.acceptedInBoundConnections()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t variable initialization expression of GKMetricsPipeline.$__lazy_storage_$_metricsPipeline@<X0>( uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MetricsPipeline(0LL);
  return sub_1001291F8(a1, 1LL, 1LL, v2);
}

uint64_t sub_1001291F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t ArcadeStateMetricsFieldsProvider.category.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for MetricsFieldsProviderCategory.timeSensitive(_:);
  uint64_t v3 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t variable initialization expression of MatchReporter.matchQueue()
{
  return sub_10012935C( (void (*)(void))&static DispatchQoS.unspecified.getter,  0x636552686374616DLL,  0xED0000726564726FLL);
}

uint64_t sub_100129274(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_1001292B4()
{
  unint64_t result = qword_1002B7F70;
  if (!qword_1002B7F70)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002B7F68);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B7F70);
  }

  return result;
}

uint64_t sub_1001292F8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t variable initialization expression of MultiplayerActivityEventFilter.serialQueue()
{
  return sub_1001296A0((void (*)(void))&static DispatchQoS.default.getter, 63LL, 0x800000010024A790LL);
}

uint64_t sub_10012935C(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v6);
  sub_1001296C0();
  uint64_t v9 = v8 - v7;
  a1();
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v10);
  sub_1001296C0();
  uint64_t v13 = v12 - v11;
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_1001295B4( (unint64_t *)&qword_1002B7F60,  v14,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v16 = sub_100129274(&qword_1002B7F68);
  unint64_t v17 = sub_1001292B4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v16, v17, v10, v15);
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v18);
  sub_1001296C0();
  uint64_t v21 = v20 - v19;
  (*(void (**)(uint64_t, void))(v22 + 104))( v20 - v19,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(a2, a3, v9, v13, v21, 0LL);
}

uint64_t variable initialization expression of GKGameModeListener.gameModeNotificationToken()
{
  return 0xFFFFFFFFLL;
}

uint64_t variable initialization expression of GKGameModeListener.gameModeNotificationQueue()
{
  return sub_1001296A0((void (*)(void))&static DispatchQoS.default.getter, 41LL, 0x800000010024A7D0LL);
}

uint64_t type metadata accessor for GKFilterableFriend()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCore18GKFilterableFriend);
}

uint64_t sub_10012952C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AppMetadataNetworkFetcher.init(batchTask:)(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100129554(void *a1)
{
  id v1 = [a1 playerID];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1001295B4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

_OWORD *sub_1001295F4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100129604(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100129640(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_100129678(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t _s14GameDaemonCore13PeerDiscoveryC8listener33_674604DC109586124CDCDC3171C542DDLLAA0D8ListenerCSgvpfi_0()
{
  return 0LL;
}

uint64_t sub_1001296A0(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  return sub_10012935C(a1, a2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a3);
}

uint64_t sub_1001296A8()
{
  return v0;
}

  ;
}

uint64_t sub_1001296D0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1001297EC(uint64_t a1, _OWORD *a2)
{
  *(void *)(v2 + 8_Block_object_dispose(va, 8) = 0LL;
  swift_weakInit(v2 + 96, 0LL);
  __int128 v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 32) = v5;
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = *(void *)(a1 + 32);
  sub_1001295F4(a2, (_OWORD *)(v2 + 56));
  return v2;
}

uint64_t sub_10012989C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = 0LL;
  if (v1)
  {
    do
    {
      uint64_t v2 = *(void *)(v1 + 88);
      swift_retain(v2);
      swift_release(v1);
      uint64_t v1 = v2;
    }

    while (v2);
  }

  swift_release(v1);
  return v0;
}

uint64_t sub_100129914()
{
  uint64_t v0 = sub_10012989C();
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

id GKLRUCache.__allocating_init(capacity:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return GKLRUCache.init(capacity:)(a1);
}

id GKLRUCache.init(capacity:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType(v1);
  *(void *)&v1[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode] = 0LL;
  *(void *)&v1[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode] = 0LL;
  uint64_t v4 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache;
  uint64_t v5 = type metadata accessor for GKLRUDequeNode();
  uint64_t v6 = v1;
  *(void *)&v1[v4] = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  v5,  &protocol witness table for AnyHashable);
  *(void *)&v6[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_capacity] = a1;
  sub_100129B78();
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  sub_1001296C0();
  uint64_t v10 = v9 - v8;
  static DispatchQoS.default.getter();
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v11);
  sub_1001296C0();
  uint64_t v14 = v13 - v12;
  unint64_t v25 = _swiftEmptyArrayStorage;
  unint64_t v15 = sub_100129BB4();
  uint64_t v16 = sub_100129274(&qword_1002B7F68);
  unint64_t v17 = sub_1001292B4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v16, v17, v11, v15);
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v18);
  sub_1001296C0();
  uint64_t v21 = v20 - v19;
  (*(void (**)(uint64_t, void))(v22 + 104))( v20 - v19,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  *(void *)&v6[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_dispatchQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001FLL,  0x800000010024AB90LL,  v10,  v14,  v21,  0LL);

  v24.receiver = v6;
  v24.super_class = ObjectType;
  return objc_msgSendSuper2(&v24, "init");
}

uint64_t type metadata accessor for GKLRUDequeNode()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCoreP33_99CD75528634227EFA44F2FA82BB26BA14GKLRUDequeNode);
}

unint64_t sub_100129B78()
{
  unint64_t result = qword_1002B7F58;
  if (!qword_1002B7F58)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B7F58);
  }

  return result;
}

unint64_t sub_100129BB4()
{
  unint64_t result = qword_1002B7F60;
  if (!qword_1002B7F60)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1002B7F60);
  }

  return result;
}

Swift::Void __swiftcall GKLRUCache.clear()()
{
  uint64_t v1 = *(dispatch_queue_s **)&v0[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_dispatchQueue];
  uint64_t v2 = sub_10012AAEC((uint64_t)&unk_1002737F8, 24LL);
  *(void *)(v2 + sub_10012A92C(v0 + 16) = v0;
  uint64_t v3 = sub_10012AAEC((uint64_t)&unk_100273820, 32LL);
  *(void *)(v3 + sub_10012A92C(v0 + 16) = sub_100129E20;
  *(void *)(v3 + 24) = v2;
  void v8[4] = sub_100129E38;
  uint64_t v9 = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256LL;
  void v8[2] = sub_100129E58;
  void v8[3] = &unk_100273838;
  uint64_t v4 = _Block_copy(v8);
  uint64_t v5 = v9;
  uint64_t v6 = v0;
  swift_retain(v3);
  swift_release(v5);
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 103LL, 55LL, 28LL, 1LL);
  swift_release(v2);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
}

uint64_t sub_100129D38(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode;
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 88);
    swift_retain_n(v4, 2LL);
    if (v4)
    {
      do
      {
        swift_release(v4);
        uint64_t v5 = *(void *)(v4 + 88);
        swift_retain_n(v5, 2LL);
        swift_release(v4);
        uint64_t v4 = v5;
      }

      while (v5);
    }
  }

  uint64_t v6 = *(void *)(a1 + v2);
  *(void *)(a1 + sub_1000208B0((void *)&_mh_execute_header, v0, v1, "Removing delayed request store %@.", v2) = 0LL;
  swift_release(v6);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache, v8, 33LL, 0LL);
  sub_100129274(&qword_1002B8138);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  return swift_endAccess(v8);
}

uint64_t sub_100129DFC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100129E20()
{
  return sub_100129D38(*(void *)(v0 + 16));
}

uint64_t sub_100129E28()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100129E38()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100129E58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100129E78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100129E88(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t GKLRUCache.insertValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1001296C0();
  uint64_t v9 = v8 - v7;
  static DispatchWorkItemFlags.barrier.getter();
  sub_10012A22C(a2, (uint64_t)v22);
  sub_100129604(a1, (uint64_t)v21);
  uint64_t v10 = sub_10012AAEC((uint64_t)&unk_100273870, 96LL);
  *(void *)(v10 + sub_10012A92C(v0 + 16) = v2;
  __int128 v11 = v22[1];
  *(_OWORD *)(v10 + 24) = v22[0];
  *(_OWORD *)(v10 + 40) = v11;
  *(void *)(v10 + 56) = v23;
  sub_1001295F4(v21, (_OWORD *)(v10 + 64));
  aBlock[4] = sub_10012A29C;
  uint64_t v20 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10012A550;
  aBlock[3] = &unk_100273888;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_1001296C0();
  uint64_t v17 = v16 - v15;
  static DispatchQoS.unspecified.getter(v2);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v9, v12);
  _Block_release(v12);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v13);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  return swift_release(v20);
}

uint64_t sub_10012A06C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache, v16, 32LL, 0LL);
  sub_10012CF80(a2, *v6);
  if (v7)
  {
    uint64_t v8 = v7;
    swift_endAccess(v16);
    sub_10012A2AC(v8);
    swift_beginAccess(v8 + 56, v16, 33LL, 0LL);
    sub_10012A984((void *)(v8 + 56), a3);
    swift_endAccess(v16);
    uint64_t v9 = v8;
  }

  else
  {
    swift_endAccess(v16);
    sub_10012A22C(a2, (uint64_t)v16);
    sub_100129604((uint64_t)a3, (uint64_t)v15);
    uint64_t v10 = type metadata accessor for GKLRUDequeNode();
    swift_allocObject(v10, 104LL, 7LL);
    uint64_t v11 = sub_1001297EC((uint64_t)v16, v15);
    swift_beginAccess(v6, v16, 33LL, 0LL);
    swift_retain(v11);
    sub_100187968();
    swift_endAccess(v16);
    sub_10012A400(v11);
    if (*(void *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_capacity) < *(void *)(*v6 + 16))
    {
      uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode);
      if (v12)
      {
        swift_beginAccess(v6, v16, 33LL, 0LL);
        swift_retain(v12);
        uint64_t v13 = sub_1001568A4(v12 + 16);
        swift_endAccess(v16);
        swift_release(v13);
        sub_10012A48C();
        swift_release(v12);
      }
    }

    uint64_t v9 = v11;
  }

  return swift_release(v9);
}

uint64_t sub_10012A22C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10012A268()
{
  sub_100129678((void *)(v0 + 24));
  sub_100129678((void *)(v0 + 64));
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_10012A29C()
{
  return sub_10012A06C(*(void *)(v0 + 16), v0 + 24, (void *)(v0 + 64));
}

uint64_t sub_10012A2AC(uint64_t result)
{
  uint64_t v2 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode);
  if (v3) {
    BOOL v4 = v3 == result;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = result + 96;
  uint64_t Strong = swift_weakLoadStrong(result + 96);
  uint64_t v8 = Strong;
  uint64_t v9 = *(void *)(v5 + 88);
  if (!Strong)
  {
    swift_retain(*(void *)(v5 + 88));
    if (!v9) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  uint64_t v10 = *(void *)(Strong + 88);
  *(void *)(Strong + 8_Block_object_dispose(va, 8) = v9;
  swift_retain_n(v9, 2LL);
  swift_release(v10);
  if (v9) {
LABEL_7:
  }
    swift_weakAssign(v9 + 96, v8);
LABEL_8:
  swift_weakAssign(v6, 0LL);
  uint64_t v11 = *(void *)(v1 + v2);
  uint64_t v12 = *(void *)(v5 + 88);
  *(void *)(v5 + 8_Block_object_dispose(va, 8) = v11;
  swift_retain(v11);
  swift_release(v12);
  uint64_t v13 = *(void *)(v1 + v2);
  if (v13)
  {
    swift_weakAssign(v13 + 96, v5);
    uint64_t v14 = *(void *)(v1 + v2);
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  *(void *)(v1 + sub_1000208B0((void *)&_mh_execute_header, v0, v1, "Removing delayed request store %@.", v2) = v5;
  swift_release(v14);
  uint64_t v15 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode;
  uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode);
  if (v16)
  {
    swift_retain(v5);
    swift_release(v9);
    if (v16 == v5)
    {
      uint64_t v17 = *(void *)(v1 + v15);
      *(void *)(v1 + v15) = v8;
      uint64_t v8 = v17;
    }
  }

  else
  {
    swift_retain(v5);
    swift_release(v8);
    uint64_t v8 = v9;
  }

  return swift_release(v8);
}

uint64_t sub_10012A400(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode);
  uint64_t v5 = *(void *)(a1 + 88);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = *(void *)(v1 + v3);
  if (v6)
  {
    swift_weakAssign(v6 + 96, a1);
    uint64_t v7 = *(void *)(v1 + v3);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *(void *)(v1 + v3) = a1;
  swift_release(v7);
  if (!*(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode))
  {
    *(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode) = a1;
    swift_retain(a1);
  }

  return swift_retain(a1);
}

void sub_10012A48C()
{
  uint64_t v1 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode);
  if (v2)
  {
    uint64_t Strong = swift_weakLoadStrong(v2 + 96);
    uint64_t v4 = Strong;
    if (Strong)
    {
      uint64_t v5 = *(void *)(Strong + 88);
      *(void *)(Strong + 8_Block_object_dispose(va, 8) = 0LL;
      swift_retain(v2);
      swift_release(v5);
    }

    else
    {
      swift_retain(v2);
    }

    swift_weakAssign(v2 + 96, 0LL);
    uint64_t v6 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode;
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode);
    swift_release(v2);
    if (v7) {
      BOOL v8 = v2 == v7;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      uint64_t v9 = *(void *)(v0 + v6);
      *(void *)(v0 + sub_1000207C4( (void *)&_mh_execute_header,  v0,  v1,  "loadBulletinsForPushNotification - Error determining game location: %@",  v2,  v3,  v4,  v5, v6) = 0LL;
      swift_release(v9);
    }

    uint64_t v10 = *(void *)(v0 + v1);
    *(void *)(v0 + sub_1000208A4( (void *)&_mh_execute_header,  v0,  (uint64_t)v0,  "Failed to remove delayed requests store %@. ERROR: %@", v1) = v4;
    swift_release(v10);
  }

uint64_t sub_10012A550(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t GKLRUCache.getValue(forKey:)(uint64_t a1)
{
  v3[3] = a1;
  uint64_t v1 = sub_100129274(&qword_1002B8E90);
  return OS_dispatch_queue.sync<A>(execute:)(sub_10012A754, v3, v1);
}

double sub_10012A678@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache, v10, 32LL, 0LL);
  uint64_t v4 = *v3;
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_10014A454(), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
    swift_endAccess(v10);
    uint64_t v8 = swift_retain(v7);
    sub_10012A2AC(v8);
    swift_beginAccess(v7 + 56, v10, 0LL, 0LL);
    sub_100129604(v7 + 56, (uint64_t)a2);
    swift_release(v7);
  }

  else
  {
    swift_endAccess(v10);
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

double sub_10012A754@<D0>(_OWORD *a1@<X8>)
{
  return sub_10012A678(*(void *)(v1 + 16), a1);
}

id NetworkRequestEligibiltyChecker.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

void GKLRUCache.init()()
{
}

uint64_t type metadata accessor for GKLRUCache()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCore10GKLRUCache);
}

uint64_t sub_10012A92C(uint64_t a1)
{
  return a1;
}

void *sub_10012A960(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

void *sub_10012A984(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        double result = (void *)swift_release(v11);
        void *v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          void *v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          void *v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

uint64_t sub_10012AAEC(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

uint64_t sub_10012AAF4(void *a1)
{
  id v60 = a1;
  uint64_t v2 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2, v4);
  v64.receiver = v1;
  v64.super_class = (Class)type metadata accessor for ScoreSubmissionBulletin();
  id v5 = objc_msgSendSuper2(&v64, "initWithPushNotification:", isa);

  if (!v5)
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void **)(v6 - 8);
  uint64_t v8 = v7[8];
  __chkstk_darwin(v6);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v10 = (char *)&v55 - v9;
  id v11 = v5;
  Date.init()();
  Class v12 = Date._bridgeToObjectiveC()().super.isa;
  id v59 = (void (*)(char *, uint64_t))v7[1];
  v59((char *)&v55 - v9, v6);
  [v11 setDate:v12];

  id v58 = &v55;
  __chkstk_darwin(v13);
  __int16 v61 = v11;
  id v14 = [v11 date];
  uint64_t v15 = sub_100129274(&qword_1002B8168);
  __chkstk_darwin(v15);
  sub_10012B5F0();
  if (!v14)
  {
LABEL_20:
    sub_10012B5DC();
    goto LABEL_21;
  }

  __chkstk_darwin(v16);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v14);

  uint64_t v17 = (void (*)(char *, char *, uint64_t))v7[4];
  v17(v10, (char *)&v55 - v9, v6);
  sub_1001291F8((uint64_t)v10, 0LL, 1LL, v6);
  if (sub_10012B4E8((uint64_t)v10, 1LL, v6) == 1)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    uint64_t result = sub_10012B5DC();
    goto LABEL_23;
  }

  Date.advanced(by:)(30.0);
  uint64_t v18 = v59;
  v59(v10, v6);
  Class v19 = Date._bridgeToObjectiveC()().super.isa;
  v18((char *)&v55 - v9, v6);
  uint64_t v20 = v61;
  [v61 setExpirationDate:v19];

  sub_1001882FC(0x75532065726F6353LL, 0xEF64657474696D62LL, v20);
  uint64_t v21 = v60;
  uint64_t v22 = sub_10012B544(v60, (SEL *)&selRef_formattedValue);
  if (!v23)
  {
    uint64_t v62 = (uint64_t)[v21 value];
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  }

  v56._countAndFlagsBits = v22;
  v56._object = v23;
  id v58 = (uint64_t *)v17;
  id v24 = [v21 player];
  if (!v24)
  {
    id v25 = [(id)objc_opt_self(GKLocalPlayer) localPlayer];
    id v24 = [v25 internal];
  }

  id v57 = v24;
  uint64_t v26 = sub_10012B544(v24, (SEL *)&selRef_alias);
  id v28 = v27;
  if (qword_1002B7ED0 != -1) {
    swift_once(&qword_1002B7ED0, sub_10012B110);
  }
  id v29 = (void *)qword_1002BF868;
  id v30 = [v61 date];
  __chkstk_darwin(v30);
  sub_10012B5F0();
  if (!v31) {
    goto LABEL_22;
  }
  __chkstk_darwin(v31);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v30);

  ((void (*)(id, char *, uint64_t))v58)(v24, (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
  sub_1001291F8((uint64_t)v24, 0LL, 1LL, v6);
  uint64_t result = sub_10012B4E8((uint64_t)v24, 1LL, v6);
  if ((_DWORD)result == 1)
  {
LABEL_23:
    __break(1u);
    return result;
  }

  if (v28) {
    __int128 v33 = v28;
  }
  else {
    __int128 v33 = (void *)0xE90000000000003ELL;
  }
  if (v28) {
    uint64_t v34 = v26;
  }
  else {
    uint64_t v34 = 0x6E776F6E6B6E753CLL;
  }
  Class v35 = Date._bridgeToObjectiveC()().super.isa;
  v59((char *)v24, v6);
  id v36 = [v29 stringFromDate:v35];

  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  uint64_t v39 = v38;

  uint64_t v62 = 0LL;
  uint64_t v63 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(27LL);
  swift_bridgeObjectRelease(v63, v40);
  uint64_t v62 = 0x206465726F6353LL;
  uint64_t v63 = 0xE700000000000000LL;
  object = v56._object;
  String.append(_:)(v56);
  swift_bridgeObjectRelease(object, v42);
  sub_10012B608(544108320LL);
  uint64_t v43 = v60;
  id v44 = [v60 leaderboardIdentifier];
  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  __int128 v47 = v46;

  v48._countAndFlagsBits = v45;
  v48._object = v47;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v47, v49);
  sub_10012B608(544825888LL);
  v50._countAndFlagsBits = v34;
  v50._object = v33;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v33, v51);
  sub_10012B608(544497952LL);
  v52._countAndFlagsBits = v37;
  v52._object = v39;
  String.append(_:)(v52);
  swift_bridgeObjectRelease(v39, v53);
  uint64_t v54 = v61;
  sub_100188308(v62, v63, v61);
  [v54 setHasSound:0];

  return (uint64_t)v54;
}

void sub_10012B110()
{
  id v0 = [objc_allocWithZone(NSDateFormatter) init];
  sub_10012B4F4(0x73733A6D6D3A4848LL, 0xEC0000005353532ELL, v0);
  qword_1002BF868 = (uint64_t)v0;
}

id sub_10012B170()
{
  if (qword_1002B7ED0 != -1) {
    swift_once(&qword_1002B7ED0, sub_10012B110);
  }
  return (id)qword_1002BF868;
}

void sub_10012B1C4()
{
}

void sub_10012B228(uint64_t a1)
{
  id v2 = [(id)objc_opt_self(GKPreferences) shared];
  if (!v2)
  {
LABEL_21:
    __break(1u);
    return;
  }

  uint64_t v3 = v2;
  unsigned int v4 = [v2 notifyAboutScoreSubmissions];

  if (v4)
  {
    if ((unint64_t)a1 >> 62)
    {
LABEL_15:
      if (a1 < 0) {
        uint64_t v17 = a1;
      }
      else {
        uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
      if (v5)
      {
LABEL_5:
        uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___GKBulletinController);
        uint64_t v8 = 4LL;
        while (1)
        {
          if ((a1 & 0xC000000000000001LL) != 0) {
            id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1);
          }
          else {
            id v9 = *(id *)(a1 + 8 * v8);
          }
          uint64_t v10 = v9;
          uint64_t v11 = v8 - 3;
          if (__OFADD__(v8 - 4, 1LL))
          {
            __break(1u);
            goto LABEL_15;
          }

          id v12 = objc_allocWithZone((Class)type metadata accessor for ScoreSubmissionBulletin());
          id v13 = v10;
          id v14 = (void *)sub_10012AAF4(v13);
          id v15 = [v7 sharedController];
          if (!v15) {
            break;
          }
          uint64_t v16 = v15;
          [v15 presentBulletin:v14];

          ++v8;
          if (v11 == v5) {
            goto LABEL_12;
          }
        }

        __break(1u);
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v5) {
        goto LABEL_5;
      }
    }

void sub_10012B3F8()
{
}

void sub_10012B45C()
{
}

id sub_10012B494()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScoreSubmissionBulletin();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ScoreSubmissionBulletin()
{
  return objc_opt_self(&OBJC_CLASS___GKScoreSubmissionBulletin);
}

uint64_t sub_10012B4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

void sub_10012B4F4(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v5);
  [a3 setDateFormat:v6];
}

uint64_t sub_10012B544(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

unint64_t sub_10012B5A0()
{
  unint64_t result = qword_1002B8170;
  if (!qword_1002B8170)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___GKScoreInternal);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B8170);
  }

  return result;
}

uint64_t sub_10012B5DC()
{
  return sub_1001291F8(v0, 1LL, 1LL, v1);
}

  ;
}

void sub_10012B608(uint64_t a1)
{
  unint64_t v1 = 0xE400000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10012B610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0LL;
  }
  unint64_t v8 = sub_10012B89C();
  uint64_t v13 = sub_10012B938(v8, (uint64_t)&type metadata for String, v9, v10, v11, v12, a3, a4);
  if ((v13 & 1) != 0) {
    return 0LL;
  }
  uint64_t v18 = sub_10012B938(v13, (uint64_t)&type metadata for String, v14, v15, v16, v17, a1, a2);
  if ((v18 & 1) != 0) {
    return 0LL;
  }
  uint64_t v22 = sub_10012B91C(v18, v19, v20, v21, a3, a4);
  uint64_t result = sub_10012B91C(v22, v23, v24, v25, a1, a2);
  uint64_t v28 = result;
  unint64_t v29 = *(void *)(v22 + 16);
  if (!v29)
  {
    sub_10012B950(result, v27);
    swift_bridgeObjectRelease(v28, v46);
    return 0LL;
  }

  unint64_t v30 = 0LL;
  unint64_t v31 = 0LL;
  unint64_t v32 = 0LL;
  unint64_t v33 = *(void *)(result + 16);
  do
  {
    if (v32 >= v29)
    {
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

    if (v31 >= v33) {
      goto LABEL_32;
    }
    uint64_t v34 = (uint64_t *)(v22 + 32 + 16 * v32);
    uint64_t result = *v34;
    uint64_t v35 = v34[1];
    id v36 = (void *)(v28 + 32 + 16 * v31);
    uint64_t v37 = v36[1];
    BOOL v38 = result == *v36 && v35 == v37;
    if (v38 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v35, *v36, v37, 0LL), (result & 1) != 0))
    {
      ++v32;
      ++v31;
    }

    else
    {
      BOOL v38 = v31 == 0;
      unint64_t v31 = 0LL;
      if (v38) {
        unint64_t v30 = v32 + 1;
      }
      else {
        unint64_t v30 = v32;
      }
      unint64_t v32 = v30;
    }
  }

  while ((uint64_t)v32 < (uint64_t)v29);
  uint64_t result = swift_bridgeObjectRelease(v28, v35);
  if ((uint64_t)v30 >= (uint64_t)v29)
  {
    sub_10012B950(result, v39);
    return 0LL;
  }

  if ((v30 & 0x8000000000000000LL) != 0) {
    goto LABEL_33;
  }
  unint64_t v40 = *(void *)(v22 + 16);
  if (v40 >= v30 && v40 >= v29)
  {
    uint64_t v42 = sub_100129274(&qword_1002B8180);
    unint64_t v43 = sub_10012B8D8();
    uint64_t v44 = BidirectionalCollection<>.joined(separator:)(46LL, 0xE100000000000000LL, v42, v43);
    sub_10012B950(v44, v45);
    return v44;
  }

unint64_t sub_10012B89C()
{
  unint64_t result = qword_1002B8178;
  if (!qword_1002B8178)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1002B8178);
  }

  return result;
}

unint64_t sub_10012B8D8()
{
  unint64_t result = qword_1002B8188;
  if (!qword_1002B8188)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002B8180);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B8188);
  }

  return result;
}

uint64_t sub_10012B91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return StringProtocol.components<A>(separatedBy:)(va, v5, v5, v4, v4);
}

uint64_t sub_10012B938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return StringProtocol.contains<A>(_:)(va, a2, a2, v6, v6);
}

uint64_t sub_10012B950(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_10012B958(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint8_t v2[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[13] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint8_t v2[14] = swift_task_alloc(v5);
  v2[15] = swift_task_alloc(v5);
  v2[16] = swift_task_alloc(v5);
  v2[17] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for NWError(0LL);
  v2[18] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[19] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[20] = swift_task_alloc(v8);
  v2[21] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for NWBrowser.State(0LL);
  v2[22] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[23] = v10;
  uint8_t v2[24] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10012BA40, 0LL, 0LL);
}

uint64_t sub_10012BA40()
{
  unint64_t v6 = *(void *)(*(void *)(v2 + 88) + 32LL);
  *(void *)(v2 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001BLL,  0x800000010024ADD0LL,  "GameDaemonCore/ScoreSubmissionBulletin.swift",  44LL,  2LL,  41LL, 0) = v6;
  if (!v6) {
    goto LABEL_26;
  }
  uint64_t v3 = (uint8_t *)(v2 + 64);
  uint64_t v4 = (uint8_t *)(v2 + 80);
  uint64_t v5 = *(void *)(v2 + 184);
  uint64_t v0 = *(os_log_s **)(v2 + 192);
  (*(void (**)(os_log_s *, void, void))(v5 + 16))(v0, *(void *)(v2 + 80), *(void *)(v2 + 176));
  uint64_t v7 = sub_10012CF08();
  int v9 = v8(v7);
  if (v9 != enum case for NWBrowser.State.failed(_:))
  {
    uint64_t v1 = (uint64_t *)(v2 + 56);
    if (v9 == enum case for NWBrowser.State.ready(_:))
    {
      uint64_t v29 = sub_10012CF1C();
      os_log_type_t v30 = static os_log_type_t.info.getter(v29);
      uint64_t v31 = sub_10012CEF0();
      uint64_t v0 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v32 = v30;
      BOOL v33 = os_log_type_enabled(v0, v30);
      uint64_t v4 = *(uint8_t **)(v2 + 120);
      uint64_t v5 = *(void *)(v2 + 96);
      uint64_t v34 = *(void *)(v2 + 104);
      if (!v33)
      {

        (*(void (**)(uint8_t *, uint64_t))(v34 + 8))(v4, v5);
        goto LABEL_25;
      }

      uint64_t v77 = *(void *)(v2 + 96);
      uint64_t v74 = *(void *)(v2 + 120);
      uint64_t v4 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v35 = sub_10012CE30(32LL);
      uint64_t v79 = v35;
      uint64_t v71 = v34;
      *(_DWORD *)uint64_t v4 = 136315138;
      uint64_t v5 = (uint64_t)(v4 + 4);
      *uint64_t v1 = sub_100135074(0x20726573776F7242LL, 0xEE002E7964616572LL, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 56, v2 + 64);
      sub_10012CE90((void *)&_mh_execute_header, v0, v32, "Nearby - %s", v4);
      sub_10012CE38((uint64_t)&type metadata for Any);
      sub_10012CE24(v35);
      uint64_t v36 = (uint64_t)v4;
    }

    else
    {
      if (v9 != enum case for NWBrowser.State.cancelled(_:))
      {
        (*(void (**)(void, void))(*(void *)(v2 + 184) + 8LL))( *(void *)(v2 + 192),  *(void *)(v2 + 176));
        goto LABEL_26;
      }

      uint64_t v46 = sub_10012CF1C();
      os_log_type_t v47 = static os_log_type_t.info.getter(v46);
      uint64_t v48 = sub_10012CEF0();
      uint64_t v0 = (os_log_s *)Logger.logObject.getter(v48);
      uint64_t v5 = v47;
      BOOL v49 = os_log_type_enabled(v0, v47);
      uint64_t v50 = *(void *)(v2 + 104);
      uint64_t v3 = *(uint8_t **)(v2 + 112);
      uint64_t v4 = *(uint8_t **)(v2 + 96);
      if (!v49)
      {

        (*(void (**)(uint8_t *, uint8_t *))(v50 + 8))(v3, v4);
        goto LABEL_25;
      }

      uint64_t v77 = *(void *)(v2 + 96);
      uint64_t v74 = *(void *)(v2 + 112);
      uint64_t v3 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v51 = sub_10012CE30(32LL);
      uint64_t v79 = v51;
      uint64_t v71 = v50;
      *(_DWORD *)uint64_t v3 = 136315138;
      uint64_t v4 = v3 + 4;
      *(void *)(v2 + 4_Block_object_dispose(va, 8) = sub_100135074(0xD000000000000011LL, 0x800000010024AE60LL, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 48, v2 + 56);
      sub_10012CE90((void *)&_mh_execute_header, v0, (os_log_type_t)v5, "Nearby - %s", v3);
      sub_10012CE38((uint64_t)&type metadata for Any);
      sub_10012CE24(v51);
      uint64_t v36 = (uint64_t)v3;
    }

    sub_10012CE24(v36);

    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v74, v77);
LABEL_25:
    swift_release(v6);
    goto LABEL_26;
  }

  uint64_t v10 = *(void *)(v2 + 192);
  uint64_t v11 = *(void *)(v2 + 168);
  uint64_t v12 = *(void *)(v2 + 152);
  uint64_t v5 = *(void *)(v2 + 160);
  uint64_t v13 = *(void *)(v2 + 144);
  (*(void (**)(uint64_t, void))(*(void *)(v2 + 184) + 96LL))(v10, *(void *)(v2 + 176));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v11, v10, v13);
  *(_DWORD *)uint64_t v5 = -65569;
  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v5, enum case for NWError.dns(_:), v13);
  sub_10012CF1C();
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001BLL,  0x800000010024ADD0LL,  "GameDaemonCore/ScoreSubmissionBulletin.swift",  44LL,  2LL,  41LL, 0) = static NWError.== infix(_:_:)(v11, v5);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
  *(void *)(v2 + 20_Block_object_dispose(va, 8) = v14;
  uint64_t v15 = v14(v5, v13);
  LOBYTE(v5) = static os_log_type_t.info.getter(v15);
  uint64_t v16 = *(void *)(v2 + 168);
  uint64_t v17 = *(void *)(v2 + 144);
  if ((v10 & 1) != 0)
  {
    __int128 v76 = (uint64_t *)(v2 + 72);
    uint64_t v79 = 0LL;
    unint64_t v80 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(34LL);
    *(void *)(v2 + 32) = 0LL;
    *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001BLL,  0x800000010024ADD0LL,  "GameDaemonCore/ScoreSubmissionBulletin.swift",  44LL,  2LL,  41LL, 0) = 0xE000000000000000LL;
    v18._countAndFlagsBits = sub_10012CF4C();
    String.append(_:)(v18);
    _print_unlocked<A, B>(_:_:)(v16, v2 + 32, v17);
    v19._countAndFlagsBits = 0x726174736572202CLL;
    v19._object = (void *)0xEC000000676E6974LL;
    String.append(_:)(v19);
    uint64_t v3 = *(uint8_t **)(v2 + 40);
    uint64_t v73 = *(void *)(v2 + 32);
    static GKLog.match.getter(v20);
    uint64_t v21 = swift_bridgeObjectRetain_n(v3, 2LL);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = v5;
    BOOL v24 = os_log_type_enabled(v22, (os_log_type_t)v5);
    uint64_t v25 = *(void *)(v2 + 136);
    uint64_t v5 = *(void *)(v2 + 104);
    if (v24)
    {
      uint64_t v70 = *(void *)(v2 + 96);
      uint64_t v68 = *(void *)(v2 + 104);
      uint64_t v5 = sub_10012CE30(12LL);
      uint64_t v67 = v25;
      uint64_t v26 = sub_10012CE30(32LL);
      uint64_t v79 = v26;
      *(_DWORD *)uint64_t v5 = 136315138;
      swift_bridgeObjectRetain(v3);
      *__int128 v76 = sub_100135074(v73, (unint64_t)v3, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v76, v2 + 80);
      swift_bridgeObjectRelease_n(v3, 3LL);
      sub_10012CE90((void *)&_mh_execute_header, v22, v23, "Nearby - %s", (uint8_t *)v5);
      sub_10012CE88(v26, v27, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v26);
      sub_10012CE24(v5);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v70);
    }

    else
    {

      swift_bridgeObjectRelease_n(v3, 2LL);
      uint64_t v52 = sub_10012CF08();
      v54(v52, v53);
    }

    swift_bridgeObjectRelease(v3, v28);
    uint64_t v1 = *(uint64_t **)(v2 + 88);
    NWBrowser.cancel()();
    uint64_t v0 = (os_log_s *)v1;
    sub_10012C300();
  }

  else
  {
    __int128 v78 = (uint64_t *)(v2 + 64);
    uint64_t v79 = 0LL;
    unint64_t v80 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(32LL);
    *(void *)(v2 + sub_10012A92C(v0 + 16) = 0LL;
    *(void *)(v2 + 24) = 0xE000000000000000LL;
    v37._countAndFlagsBits = sub_10012CF4C();
    String.append(_:)(v37);
    _print_unlocked<A, B>(_:_:)(v16, v2 + 16, v17);
    v38._countAndFlagsBits = 0x6970706F7473202CLL;
    v38._object = (void *)0xEA0000000000676ELL;
    String.append(_:)(v38);
    uint64_t v3 = *(uint8_t **)(v2 + 16);
    unint64_t v6 = *(void *)(v2 + 24);
    static GKLog.match.getter(v39);
    uint64_t v40 = swift_bridgeObjectRetain_n(v6, 2LL);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    uint64_t v5 = v5;
    BOOL v42 = os_log_type_enabled(v41, (os_log_type_t)v5);
    uint64_t v1 = *(uint64_t **)(v2 + 96);
    uint64_t v4 = *(uint8_t **)(v2 + 104);
    if (v42)
    {
      uint64_t v75 = *(void *)(v2 + 104);
      uint64_t v72 = *(void *)(v2 + 128);
      unint64_t v43 = (uint8_t *)sub_10012CE30(12LL);
      id v69 = v1;
      uint64_t v1 = (uint64_t *)(v2 + 72);
      uint64_t v44 = sub_10012CE30(32LL);
      uint64_t v79 = v44;
      *(_DWORD *)unint64_t v43 = 136315138;
      uint64_t v4 = v43 + 4;
      swift_bridgeObjectRetain(v6);
      *__int128 v78 = sub_100135074((uint64_t)v3, v6, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v78, v2 + 72);
      swift_bridgeObjectRelease_n(v6, 3LL);
      sub_10012CE90((void *)&_mh_execute_header, v41, (os_log_type_t)v5, "Nearby - %s", v43);
      sub_10012CE38((uint64_t)&type metadata for Any);
      sub_10012CE24(v44);
      sub_10012CE24((uint64_t)v43);

      (*(void (**)(uint64_t, uint64_t *))(v75 + 8))(v72, v69);
    }

    else
    {

      swift_bridgeObjectRelease_n(v6, 2LL);
      uint64_t v55 = sub_10012CF08();
      v57(v55, v56);
    }

    swift_bridgeObjectRelease(v6, v45);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(*(void *)(v2 + 88) + 16LL);
    *(void *)(v2 + 2sub_10012A92C(v0 + 16) = Strong;
    if (Strong)
    {
      uint64_t v59 = *(void *)(v2 + 168);
      uint64_t v60 = *(void *)(v2 + 144);
      uint64_t v61 = *(void *)(v2 + 152);
      unint64_t v62 = sub_10012CDE0();
      uint64_t v63 = swift_allocError(v60, v62, 0LL, 0LL);
      *(void *)(v2 + 224) = v63;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v64, v59, v60);
      __int128 v65 = (void *)swift_task_alloc(dword_1002B86A4);
      *(void *)(v2 + 232) = v65;
      *__int128 v65 = v2;
      v65[1] = sub_10012C234;
      return sub_10013F8F8(v63);
    }

    uint64_t v0 = *(os_log_s **)(v2 + 200);
    NWBrowser.cancel()();
  }

  sub_10012CEE0();
  sub_10012CF40();
LABEL_26:
  sub_10012CE98();
  swift_task_dealloc(v0);
  swift_task_dealloc(v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10012C234()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 216);
  sub_10012CE48();
  swift_unknownObjectRelease(v2);
  swift_errorRelease(v1);
  return swift_task_switch(sub_10012C288, 0LL, 0LL);
}

uint64_t sub_10012C288()
{
  uint64_t v6 = *(void *)(v2 + 200);
  NWBrowser.cancel()();
  sub_10012CEE0();
  sub_10012CF40();
  sub_10012CE98();
  swift_task_dealloc(v6);
  swift_task_dealloc(v0);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return sub_10012CEAC(*(uint64_t (**)(void))(v2 + 8));
}

void sub_10012C300()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NWBrowser.Descriptor(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_type_t v8 = sub_10012CE70();
  uint64_t v9 = sub_10012CEF0();
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = v8;
  if (os_log_type_enabled(v10, v8))
  {
    uint64_t v29 = v2;
    uint64_t v12 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v13 = sub_10012CE30(32LL);
    uint64_t v30 = v0;
    uint64_t v14 = v13;
    uint64_t v31 = v13;
    uint64_t v28 = v6;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v15 = sub_100135074(0xD000000000000011LL, 0x800000010024AE40LL, &v31);
    uint64_t v16 = sub_10012CF6C(v15);
    uint64_t v2 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v16, v17);
    sub_10012CE90((void *)&_mh_execute_header, v10, v11, "Nearby - %s", v12);
    sub_10012CE88(v14, v18, (uint64_t)&type metadata for Any + 8);
    uint64_t v19 = v14;
    uint64_t v1 = v30;
    sub_10012CE24(v19);
    sub_10012CE24((uint64_t)v12);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v28);
  }

  else
  {

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v6);
  }

  uint64_t v20 = type metadata accessor for NWParameters(0LL);
  sub_10012CF60(v20);
  uint64_t v21 = NWParameters.init()();
  NWParameters.includePeerToPeer.setter(1LL);
  void *v5 = 0x5F2E64656D61675FLL;
  v5[1] = 0xEB00000000706374LL;
  v5[2] = 0LL;
  v5[3] = 0LL;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))( v5,  enum case for NWBrowser.Descriptor.bonjourWithTXTRecord(_:),  v2);
  uint64_t v22 = type metadata accessor for NWBrowser(0LL);
  sub_10012CF60(v22);
  swift_retain(v21);
  uint64_t v23 = NWBrowser.init(for:using:)(v5, v21);
  uint64_t v24 = sub_10012CEF8();
  sub_10012CF2C(v24);
  swift_retain(v24);
  sub_10012CBD0((uint64_t)sub_10012CC04, v24);
  NWBrowser.stateUpdateHandler.setter(sub_10012CC04, v24);
  swift_release_n(v24, 2LL);
  uint64_t v25 = sub_10012CEF8();
  sub_10012CF2C(v25);
  swift_retain(v25);
  sub_10012CBD0((uint64_t)sub_10012CC0C, v25);
  NWBrowser.browseResultsChangedHandler.setter(sub_10012CC0C, v25);
  swift_release_n(v25, 2LL);
  *(void *)(v1 + 32) = v23;
  swift_retain(v23);
  sub_10012CF14();
  sub_100129B78();
  uint64_t v26 = (void *)static OS_dispatch_queue.main.getter();
  NWBrowser.start(queue:)();

  swift_release(v23);
  swift_release(v21);
  sub_10012CE58();
}

uint64_t sub_10012C5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWBrowser.State(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v7);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a2 += 16LL;
  swift_beginAccess(a2, v18, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = type metadata accessor for TaskPriority(0LL);
    sub_1001291F8((uint64_t)v9, 1LL, 1LL, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(&v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8], a1, v4);
    uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v14 = (v13 + 40) & ~v13;
    uint64_t v15 = (char *)swift_allocObject(&unk_100273910, v14 + v6, v13 | 7);
    *((void *)v15 + 2) = 0LL;
    *((void *)v15 + 3) = 0LL;
    *((void *)v15 + 4) = v11;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))( &v15[v14],  &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8],  v4);
    sub_100185858();
    return swift_release(v16);
  }

  return result;
}

uint64_t sub_10012C75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_1002B8264);
  *(void *)(v5 + sub_10012A92C(v0 + 16) = v7;
  void *v7 = v5;
  v7[1] = sub_10012CE20;
  return sub_10012B958(a5);
}

uint64_t sub_10012C7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v6);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a3 += 16LL;
  swift_beginAccess(a3, v15, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3);
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = type metadata accessor for TaskPriority(0LL);
    sub_1001291F8((uint64_t)v8, 1LL, 1LL, v11);
    uint64_t v12 = (void *)swift_allocObject(&unk_1002738E8, 56LL, 7LL);
    v12[2] = 0LL;
    void v12[3] = 0LL;
    void v12[4] = v10;
    void v12[5] = a1;
    void v12[6] = a2;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    sub_100185924();
    return swift_release(v13);
  }

  return result;
}

uint64_t sub_10012C8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a5;
  void v6[5] = a6;
  void v6[2] = a1;
  void v6[3] = a4;
  return swift_task_switch(sub_10012C8D0, 0LL, 0LL);
}

uint64_t sub_10012C8D0()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(*(void *)(v0 + 24) + 16LL);
  *(void *)(v0 + 4_Block_object_dispose(va, 8) = Strong;
  if (Strong)
  {
    uint64_t v2 = *(void *)(v0 + 40);
    uint64_t v3 = (void *)swift_task_alloc(dword_1002B862C);
    *(void *)(v0 + 56) = v3;
    void *v3 = v0;
    v3[1] = sub_10012C958;
    return sub_10013E7E0(*(void *)(v0 + 32), v2);
  }

  else
  {
    **(_BYTE **)(v0 + sub_10012A92C(v0 + 16) = 1;
    return sub_10012CEAC(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10012C958()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_10012CE48();
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_10012C9A0, 0LL, 0LL);
}

uint64_t sub_10012C9A0()
{
  **(_BYTE **)(v0 + sub_10012A92C(v0 + 16) = *(void *)(v0 + 48) == 0LL;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10012C9BC()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v1);
  os_log_type_t v2 = sub_10012CE70();
  uint64_t v3 = sub_10012CEF0();
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = v2;
  if (os_log_type_enabled(v4, v2))
  {
    uint64_t v6 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v7 = sub_10012CE30(32LL);
    uint64_t v15 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = sub_100135074(0xD000000000000015LL, 0x800000010024AE20LL, &v15);
    uint64_t v9 = sub_10012CF6C(v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, v10);
    sub_10012CE90((void *)&_mh_execute_header, v4, v5, "Nearby - %s", v6);
    sub_10012CE88(v7, v11, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v7);
    sub_10012CE24((uint64_t)v6);
  }

  uint64_t v12 = sub_10012CF08();
  v13(v12);
  if (!*(void *)(v0 + 32)) {
    goto LABEL_7;
  }
  sub_10012CF38();
  sub_10012CBD0(0LL, 0LL);
  NWBrowser.stateUpdateHandler.setter(0LL, 0LL);
  sub_10012CF14();
  if (!*(void *)(v0 + 32)) {
    goto LABEL_7;
  }
  sub_10012CF38();
  sub_10012CBD0(0LL, 0LL);
  NWBrowser.browseResultsChangedHandler.setter(0LL, 0LL);
  sub_10012CF14();
  if (*(void *)(v0 + 32))
  {
    sub_10012CF38();
    NWBrowser.cancel()();
    sub_10012CF14();
    uint64_t v14 = *(void *)(v0 + 32);
  }

  else
  {
LABEL_7:
    uint64_t v14 = 0LL;
  }

  *(void *)(v0 + 32) = 0LL;
  swift_release(v14);
  sub_10012CE58();
}

uint64_t sub_10012CB64()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for PeerBrowser()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCore11PeerBrowser);
}

uint64_t sub_10012CBAC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10012CBD0(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_10012CBE0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10012CC04(uint64_t a1)
{
  return sub_10012C5FC(a1, v1);
}

uint64_t sub_10012CC0C(uint64_t a1, uint64_t a2)
{
  return sub_10012C7B0(a1, a2, v2);
}

uint64_t sub_10012CC14()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10012CC4C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = (void *)swift_task_alloc(dword_1002B8244);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  uint64_t v5 = sub_10012CEB4(v4);
  return sub_10012C8B4(v5, v6, v7, v8, v2, v3);
}

uint64_t sub_10012CCB8()
{
  uint64_t v1 = type metadata accessor for NWBrowser.State(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  sub_10012CF24();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v6 = sub_10012CF08();
  return swift_deallocObject(v6, v7, v5);
}

uint64_t sub_10012CD2C()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for NWBrowser.State(0LL) - 8) + 80LL);
  uint64_t v3 = v0 + ((v2 + 40) & ~v2);
  uint64_t v4 = (void *)swift_task_alloc(dword_1002B8254);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  uint64_t v5 = sub_10012CEB4(v4);
  return sub_10012C75C(v5, v6, v7, v8, v3);
}

uint64_t sub_10012CDAC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10012CDE0()
{
  unint64_t result = qword_1002B8268;
  if (!qword_1002B8268)
  {
    uint64_t v1 = type metadata accessor for NWError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NWError, v1);
    atomic_store(result, (unint64_t *)&qword_1002B8268);
  }

  return result;
}

uint64_t sub_10012CE24(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_10012CE30(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t sub_10012CE38@<X0>(uint64_t a1@<X8>)
{
  return swift_arrayDestroy(v1, 1LL, a1 + 8);
}

uint64_t sub_10012CE48()
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = *v0;
  return swift_task_dealloc();
}

  ;
}

uint64_t sub_10012CE70()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_10012CE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 1LL, a3);
}

void sub_10012CE90(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_10012CE98()
{
  return swift_task_dealloc(*(void *)(v0 + 192));
}

uint64_t sub_10012CEAC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10012CEB4(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_10012CED0()
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = *v0;
}

uint64_t sub_10012CEE0()
{
  return swift_release(*(void *)(v0 + 200));
}

uint64_t sub_10012CEF0()
{
  return static GKLog.match.getter();
}

uint64_t sub_10012CEF8()
{
  return swift_allocObject(v0, 24LL, 7LL);
}

uint64_t sub_10012CF08()
{
  return v0;
}

uint64_t sub_10012CF14()
{
  return swift_release(v0);
}

uint64_t sub_10012CF1C()
{
  return swift_retain(v0);
}

uint64_t sub_10012CF24()
{
  return swift_release(*(void *)(v0 + 32));
}

uint64_t sub_10012CF2C(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_10012CF38()
{
  return swift_retain(v0);
}

uint64_t sub_10012CF40()
{
  return v2(v1, v0);
}

unint64_t sub_10012CF4C()
{
  return 0xD000000000000014LL;
}

uint64_t sub_10012CF60(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_10012CF6C(uint64_t a1)
{
  *(void *)(v1 - swift_weakDestroy(v0 + 96) = a1;
  return v1 - 96;
}

void sub_10012CF80(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v2 = sub_10014A454();
    if ((v3 & 1) != 0) {
      sub_1001325CC(v2);
    }
  }

  sub_100132514();
}

void sub_10012CFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v3 = sub_100132868(a1, a2);
    if ((v4 & 1) != 0) {
      sub_1001325CC(v3);
    }
  }

  sub_100132514();
}

void sub_10012CFE4(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_10014A454(), (v5 & 1) != 0))
  {
    sub_1001325C4(*(void *)(a1 + 56) + 32 * v4, (uint64_t)a2);
  }

  else
  {
    *a2 = 0u;
    a2[1] = 0u;
    sub_100132514();
  }

uint64_t sub_10012D02C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  unint64_t v4 = sub_100132868(a1, a2);
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  uint64_t v6 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v4);
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain(v6[1]);
  return v7;
}

void sub_10012D07C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v2 = sub_10014A4D0();
    if ((v3 & 1) != 0) {
      sub_1001325CC(v2);
    }
  }

  sub_100132514();
}

void sub_10012D0B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_100132868(a1, a2), (v7 & 1) != 0))
  {
    sub_1001325C4(*(void *)(v4 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    sub_100132514();
  }

BOOL static GameIdentifierType.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void GameIdentifierType.hash(into:)(uint64_t a1, char a2)
{
}

BOOL sub_10012D128(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static GameIdentifierType.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t sub_10012D134()
{
  return AppMetadataFetcher.FetcherError.hashValue.getter(*v0);
}

void sub_10012D13C(uint64_t a1)
{
}