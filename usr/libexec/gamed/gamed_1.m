void _s14GameDaemonCore18AppMetadataFetcherC0F5ErrorO9hashValueSivg_0(char a1)
{
  void v2[9];
  Hasher.init(_seed:)(v2, 0LL);
  Hasher._combine(_:)(a1 & 1);
  Hasher._finalize()();
  sub_1001327B0();
}

void sub_10012D188(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  sub_1001327B0();
}

uint64_t sub_10012D1D4()
{
  unint64_t v0 = sub_100131C68();
  swift_allocError(&type metadata for AppMetadataFetcher.FetcherError, v0, 0LL, 0LL);
  _BYTE *v1 = 0;
  return swift_willThrow();
}

id AppMetadataFetcher.__allocating_init(cache:network:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return AppMetadataFetcher.init(cache:network:)(a1, a2, a3);
}

id AppMetadataFetcher.init(cache:network:)(uint64_t a1, uint64_t a2, void *a3)
{
  v5 = &v3[OBJC_IVAR___GKAppMetadataFetcher_cache];
  *(void *)v5 = a1;
  *((void *)v5 + 1) = a2;
  sub_10012D388((uint64_t)a3, (uint64_t)&v3[OBJC_IVAR___GKAppMetadataFetcher_network]);
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for AppMetadataFetcher();
  id v6 = objc_msgSendSuper2(&v8, "init");
  sub_100129678(a3);
  return v6;
}

uint64_t sub_10012D388(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for AppMetadataFetcher()
{
  return objc_opt_self(&OBJC_CLASS___GKAppMetadataFetcher);
}

uint64_t AppMetadataFetcher.fetch(bundleIDs:adamIDs:batchSize:ttl:refreshExpiredCompletion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)(v7 + 64) = a5;
  *(void *)(v7 + 72) = v6;
  *(void *)(v7 + 56) = a4;
  *(double *)(v7 + 48) = a6;
  *(void *)(v7 + 32) = a2;
  *(void *)(v7 + 40) = a3;
  *(void *)(v7 + 24) = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  *(void *)(v7 + 80) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v7 + 88) = v9;
  *(void *)(v7 + 96) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100132278();
  return swift_task_switch(v10, v11, v12);
}

uint64_t sub_10012D458()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  if (*(void *)(v2 + 16) || *(void *)(v1 + 16))
  {
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 40);
    sub_100129274(&qword_1002B8290);
    sub_100129274(&qword_1002B8298);
    uint64_t v6 = swift_task_alloc(80LL);
    *(void *)(v0 + 104) = v6;
    __int128 v7 = *(_OWORD *)(v0 + 56);
    *(void *)(v6 + 16) = v2;
    *(void *)(v6 + 24) = v3;
    *(void *)(v6 + 32) = v5;
    *(void *)(v6 + 40) = v4;
    *(_OWORD *)(v6 + 48) = v7;
    *(void *)(v6 + 64) = v1;
    uint64_t v8 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(void *)(v0 + 112) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10012D5E4;
    sub_100132430();
    sub_1001322D8();
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
  }

  else
  {
    uint64_t v10 = static GKLog.general.getter();
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.debug.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)sub_10012CE30(2LL);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No IDs to fetch, returning nil.", v13, 2u);
      sub_10012CE24((uint64_t)v13);
    }

    uint64_t v15 = *(void *)(v0 + 88);
    uint64_t v14 = *(void *)(v0 + 96);
    uint64_t v16 = *(void *)(v0 + 80);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    swift_task_dealloc(*(void *)(v0 + 96));
    return sub_1001325E0(0LL, *(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10012D5E4()
{
  *(void *)(v0 + 120) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_task_dealloc(*(void *)(v0 + 104));
  }
  sub_100132278();
  return sub_100132230();
}

uint64_t sub_10012D638()
{
  uint64_t v1 = sub_10013261C();
  return v2(v1);
}

uint64_t sub_10012D66C()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10012D69C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  *(void *)(v9 + 192) = a7;
  *(void *)(v9 + 200) = a8;
  *(void *)(v9 + 184) = a6;
  *(double *)(v9 + 176) = a9;
  *(void *)(v9 + 160) = a4;
  *(void *)(v9 + 168) = a5;
  *(void *)(v9 + 144) = a2;
  *(void *)(v9 + 152) = a3;
  *(void *)(v9 + 136) = a1;
  uint64_t v10 = sub_100129274(&qword_1002B8390);
  *(void *)(v9 + 208) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v9 + 216) = v11;
  *(void *)(v9 + 224) = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100129274(&qword_1002B8238);
  *(void *)(v9 + 232) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10012D738, 0LL, 0LL);
}

uint64_t sub_10012D738( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (*(void *)(*(void *)(v14 + 152) + 16LL))
  {
    uint64_t v15 = sub_1001323D4();
    sub_10013251C(v12, v16, v17, v15);
    v18 = (void *)sub_10012AAEC((uint64_t)&unk_100273B88, 80LL);
    sub_10013239C(v18);
    sub_1001325D8();
    uint64_t v19 = swift_retain(v13);
    sub_100132820(v19, (uint64_t)&unk_1002B83A0);
    sub_100131288(v12, &qword_1002B8238);
  }

  if (*(void *)(*(void *)(v14 + 200) + 16LL))
  {
    uint64_t v20 = sub_1001323D4();
    sub_10013251C(v12, v21, v22, v20);
    v23 = (void *)sub_10012AAEC((uint64_t)&unk_100273BB0, 80LL);
    sub_10013239C(v23);
    swift_retain(v13);
    uint64_t v24 = sub_1001325D8();
    sub_100132820(v24, (uint64_t)&unk_1002B83B0);
    sub_100131288(v12, &qword_1002B8238);
  }

  uint64_t v25 = **(void **)(v14 + 144);
  uint64_t v26 = sub_100129274(&qword_1002B8290);
  uint64_t v27 = sub_100129274(&qword_1002B83B8);
  ThrowingTaskGroup.makeAsyncIterator()(v25, v26, v27, &protocol self-conformance witness table for Error);
  *(void *)(v14 + 240) = sub_10013215C();
  v28 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(void *)(v14 + 248) = v28;
  void *v28 = v14;
  v28[1] = sub_10012D8A0;
  sub_1001322D8();
  return dispatch thunk of AsyncIteratorProtocol.next()(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10, a11, a12);
}

uint64_t sub_10012D8A0()
{
  if (v1)
  {
    v0[33] = v1;
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton, v3);
    sub_1001326DC();
  }

  else
  {
    v0[32] = (uint64_t)&_swiftEmptyDictionarySingleton;
  }

  sub_100132278();
  return sub_1001321F0();
}

void sub_10012D914(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[15];
  if (v3 == 1)
  {
    uint64_t v4 = v2[32];
    uint64_t v5 = v2[28];
    uint64_t v6 = (void *)v2[17];
    sub_1001327B8(v2[27]);
    sub_100132040(v2[15], v7);
    *uint64_t v6 = v4;
    sub_1001324F4();
    swift_task_dealloc(v5);
    sub_10013265C();
    __asm { BR              X0 }
  }

  if (v3)
  {
    uint64_t v9 = v2[32];
    sub_1001325D8();
    char v10 = sub_10013280C();
    v2[16] = v9;
    sub_100132004(v3, (uint64_t)sub_100131FC4, 0LL, v2 + 2);
    uint64_t v53 = v2[2];
    uint64_t v54 = v2[8];
    uint64_t v55 = v2[5];
    uint64_t v11 = v2[6];
    v52 = (uint64_t (*)(void *))v2[7];
    uint64_t v49 = v3;
    uint64_t v50 = v2[3];
    int64_t v51 = (unint64_t)(v2[4] + 64LL) >> 6;
    uint64_t v12 = (void *)v2[32];
    sub_1001325D8();
    while (1)
    {
      if (v11)
      {
        sub_100132748();
        uint64_t v15 = v14 | (v55 << 6);
      }

      else
      {
        int64_t v16 = v55 + 1;
        if (__OFADD__(v55, 1LL)) {
          goto LABEL_38;
        }
        if (v16 >= v51) {
          goto LABEL_33;
        }
        if (!*(void *)(v50 + 8 * v16))
        {
          if (v55 + 2 >= v51) {
            goto LABEL_33;
          }
          if (!*(void *)(v50 + 8 * (v55 + 2)))
          {
            if (v55 + 3 >= v51) {
              goto LABEL_33;
            }
            if (!*(void *)(v50 + 8 * (v55 + 3)))
            {
              if (v55 + 4 >= v51) {
                goto LABEL_33;
              }
              if (!*(void *)(v50 + 8 * (v55 + 4)))
              {
                if (v55 + 5 >= v51) {
                  goto LABEL_33;
                }
                if (!*(void *)(v50 + 8 * (v55 + 5)))
                {
                  int64_t v17 = v55 + 6;
                  while (v17 < v51)
                  {
                    if (*(void *)(v50 + 8 * v17++)) {
                      goto LABEL_21;
                    }
                  }

LABEL_21:
        sub_1001325E8();
        uint64_t v55 = v19;
      }

      uint64_t v20 = (void *)(*(void *)(v53 + 48) + 16 * v15);
      uint64_t v21 = v20[1];
      uint64_t v22 = *(void **)(*(void *)(v53 + 56) + 8 * v15);
      v2[9] = *v20;
      v2[10] = v21;
      v2[11] = v22;
      swift_bridgeObjectRetain(v21);
      id v23 = v22;
      uint64_t v24 = v52(v2 + 9);
      sub_1001322A0(v24, v25);

      uint64_t v27 = v2[12];
      uint64_t v26 = v2[13];
      uint64_t v28 = v2[14];
      unint64_t v30 = sub_10014A480(v27, v26);
      uint64_t v31 = v12[2];
      BOOL v32 = (v29 & 1) == 0;
      uint64_t v33 = v31 + v32;
      if (__OFADD__(v31, v32)) {
        break;
      }
      char v34 = v29;
      if (v12[3] >= v33)
      {
        if ((v10 & 1) == 0)
        {
          sub_100129274(&qword_1002B8340);
          _NativeDictionary.copy()();
        }
      }

      else
      {
        sub_10013282C(v33);
        unint64_t v35 = sub_1001326CC();
        if ((v34 & 1) != (v36 & 1))
        {
          sub_10013265C();
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v48);
          return;
        }

        unint64_t v30 = v35;
      }

      uint64_t v12 = (void *)v2[16];
      if ((v34 & 1) != 0)
      {
        id v37 = *(id *)(v12[7] + 8 * v30);
        sub_1001327F8();
        sub_100132454(v38, v39);
        sub_1001327E0(v12[7]);
        char v10 = 1;
      }

      else
      {
        sub_100132694((uint64_t)&v12[v30 >> 6]);
        v40 = (uint64_t *)(v12[6] + 16 * v30);
        uint64_t *v40 = v27;
        v40[1] = v26;
        *(void *)(v12[7] + 8 * v30) = v28;
        uint64_t v41 = v12[2];
        BOOL v42 = __OFADD__(v41, 1LL);
        uint64_t v43 = v41 + 1;
        if (v42) {
          goto LABEL_37;
        }
        v12[2] = v43;
        char v10 = 1;
      }
    }

    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }

  else
  {
    sub_100132040(0LL, a2);
    uint64_t v12 = (void *)v2[32];
LABEL_34:
    v2[34] = v12;
    v47 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    v2[35] = v47;
    void *v47 = v2;
    v47[1] = sub_10012DD0C;
    sub_10013265C();
    dispatch thunk of AsyncIteratorProtocol.next()();
  }

    sub_1001325E8();
    v89 = v19;
LABEL_22:
    uint64_t v20 = (void *)(*(void *)(v87 + 48) + 16 * v15);
    uint64_t v21 = v20[1];
    uint64_t v22 = *(void **)(*(void *)(v87 + 56) + 8 * v15);
    *(void *)(v3 + 152) = *v20;
    *(void *)(v3 + 160) = v21;
    *(void *)(v3 + 168) = v22;
    sub_1001296D0();
    id v23 = v22;
    uint64_t v24 = v86(v3 + 152);
    sub_10012B950(v24, v25);

    uint64_t v5 = *(void *)(v3 + 128);
    uint64_t v4 = *(void *)(v3 + 136);
    uint64_t v26 = *(void *)(v3 + 144);
    uint64_t v2 = (uint64_t)v7;
    uint64_t v6 = sub_10014A480(v5, v4);
    uint64_t v27 = v7[2];
    uint64_t v28 = (a2 & 1) == 0;
    a1 = v27 + v28;
    if (__OFADD__(v27, v28))
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }

    char v29 = a2;
    if (v7[3] >= a1)
    {
      if ((v11 & 1) == 0)
      {
        sub_100129274(&qword_1002B8340);
        uint64_t v2 = v3 + 176;
        _NativeDictionary.copy()();
      }
    }

    else
    {
      sub_10013282C(a1);
      unint64_t v30 = sub_1001326CC();
      if ((v29 & 1) != (v31 & 1))
      {
        sub_10013240C();
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v47);
        return;
      }

      uint64_t v6 = v30;
    }

    uint64_t v7 = *(void **)(v3 + 176);
    if ((v29 & 1) != 0)
    {
      BOOL v32 = *(id *)(v7[7] + 8 * v6);
      sub_1001327F8();
      sub_100132454(v33, v34);
      sub_1001327E0(v7[7]);
      uint64_t v11 = 1;
    }

    else
    {
      sub_100132694((uint64_t)&v7[v6 >> 6]);
      unint64_t v35 = (uint64_t *)(v7[6] + 16 * v6);
      *unint64_t v35 = v5;
      v35[1] = v4;
      *(void *)(v7[7] + 8 * v6) = v26;
      char v36 = v7[2];
      id v37 = __OFADD__(v36, 1LL);
      uint64_t v38 = v36 + 1;
      if (v37) {
        goto LABEL_69;
      }
      v7[2] = v38;
      uint64_t v11 = 1;
    }
  }

  int64_t v17 = v89 + 6;
  while (v17 < v84)
  {
    if (*(void *)(v85 + 8 * v17++)) {
      goto LABEL_21;
    }
  }

    uint64_t v11 = (v19 - 1) & v19;
  }

  uint64_t v20 = v17 + 2;
  if (v20 < v37)
  {
    uint64_t v19 = *(void *)(v38 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        uint64_t v14 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_45;
        }
        if (v14 >= v37) {
          goto LABEL_35;
        }
        uint64_t v19 = *(void *)(v38 + 8 * v14);
        ++v20;
        if (v19) {
          goto LABEL_21;
        }
      }
    }

    uint64_t v14 = v20;
    goto LABEL_21;
  }

              sub_10013A738();
              return (void *)v13;
            }
          }
        }
      }
    }

  uint64_t v27 = *v33;
  *(void *)(*v33 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t v28 = *(void *)(v27 + 48) + 40 * a2;
  char v29 = *((_OWORD *)a1 + 1);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)a1;
  *(_OWORD *)(v28 + 16) = v29;
  *(void *)(v28 + 32) = a1[4];
  unint64_t v30 = *(void *)(v27 + 16);
  uint64_t v31 = __OFADD__(v30, 1LL);
  BOOL v32 = v30 + 1;
  if (!v31)
  {
    *(void *)(v27 + 16) = v32;
    return;
  }

  __break(1u);
LABEL_24:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for PlayerAndGameID);
  __break(1u);
}

    uint64_t v6 = (v12 - 1) & v12;
  }

  uint64_t v13 = v11 + 4;
  if (v13 >= v7) {
    return (id *)swift_release(v2);
  }
  uint64_t v12 = (unint64_t)v3[v13];
  if (v12)
  {
    uint64_t v8 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      return (id *)swift_release(v2);
    }
    uint64_t v12 = (unint64_t)v3[v8];
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

    sub_10013A738();
LABEL_22:
    sub_100145068();
    sub_1001324F4();
    sub_1001446D0();
    sub_1001447A4();
LABEL_23:
    sub_100144AA0();
    __asm { BR              X0 }
  }

  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  swift_retain(v7);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(void *)(v1 + 64) = 0LL;
  char v10 = [v8 archivedDataWithRootObject:isa requiringSecureCoding:1 error:v1 + 64];

  uint64_t v11 = *(id *)(v1 + 64);
  uint64_t v13 = *(void *)(v1 + 136);
  if (!v10)
  {
    v94 = v11;
    v95 = *(void *)(v1 + 112);
    sub_100144A98((uint64_t)v11, v12);
    _convertNSErrorToError(_:)(v94);

    swift_willThrow(v96);
    sub_1001450FC();
    sub_10013A738();
    swift_task_dealloc(v13);
    sub_100144838();
    sub_100144AFC();
    swift_task_dealloc(v95);
    goto LABEL_23;
  }

  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
  int64_t v16 = v15;

  *(void *)(v1 + 160) = v14;
  *(void *)(v1 + 168) = v16;
  sub_100144E50();
  int64_t v17 = sub_1001488C4(1);
  *(void *)(v1 + 176) = v17;
  v18 = sub_100129274(&qword_1002B8550);
  uint64_t v19 = sub_100144810(v18);
  *(_OWORD *)(v19 + 16) = xmmword_1001F3470;
  *(void *)(v19 + 32) = v17;
  v122 = v19;
  specialized Array._endMutation()(v19);
  uint64_t v20 = sub_100145060();
  sub_10012CF60(v20);
  sub_10012CF1C();
  uint64_t v21 = sub_1001448C0();
  uint64_t v27 = NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( v21,  v22,  v23,  v24,  v25,  v122,  v26);
  *(void *)(v1 + 184) = v27;
  uint64_t v28 = static os_log_type_t.info.getter(v27);
  v122 = 0LL;
  v123 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(69LL);
  v124._countAndFlagsBits = 0xD00000000000002FLL;
  v124._object = (void *)0x800000010024BC40LL;
  sub_100144EE8(v124);
  v125._countAndFlagsBits = sub_100145200(v6, (uint64_t)&type metadata for String);
  sub_100144EE8(v125);
  uint64_t v31 = sub_10012B950(v29, v30);
  sub_100144A98(v31, v32);
  v126._countAndFlagsBits = 0xD000000000000012LL;
  v126._object = (void *)0x800000010024BC70LL;
  sub_100144EE8(v126);
  v127._countAndFlagsBits = NWConnection.debugDescription.getter(v33, v34, v35, v36, v37, v38, v39);
  sub_100144EE8(v127);
  BOOL v42 = sub_10012B950(v40, v41);
  static GKLog.match.getter(v42);
  uint64_t v43 = sub_100135A20(0xE000000000000000LL);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  uint64_t v45 = sub_100144CEC(v44);
  uint64_t v46 = *(void *)(v1 + 136);
  v47 = *(void *)(v1 + 104);
  if (v45)
  {
    v114 = *(void *)(v1 + 96);
    uint64_t v48 = (uint8_t *)sub_10012CE30(12LL);
    v113 = v47;
    uint64_t v49 = sub_10012CE30(32LL);
    v122 = v49;
    *(_DWORD *)uint64_t v48 = 136315138;
    sub_100144D2C();
    *(void *)(v1 + 72) = sub_100145088(0LL, v50, &v122);
    int64_t v51 = sub_100144864();
    sub_100144AD8(v51, v52);
    sub_100135A44(0xE000000000000000LL);
    sub_10012CE90((void *)&_mh_execute_header, v44, v28, "Nearby - %s", v48);
    sub_10012CE88(v49, v53, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v49);
    sub_10012CE24((uint64_t)v48);

    uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v46, v114);
  }

  else
  {
    sub_100135A28(0xE000000000000000LL);

    v97 = sub_100144870();
    uint64_t v54 = v99(v97, v98);
  }

  sub_100144C2C(v54, v55);
  v100 = sub_100144870();
  sub_10013593C(v100, v101);
  v102 = (void *)swift_task_alloc(dword_1002B963C);
  *(void *)(v1 + 192) = v102;
  *v102 = v1;
  v102[1] = sub_100140AD0;
  sub_100144870();
  sub_100144AA0();
  return sub_10015F1FC(v103, v104, v105, v106, v107);
}

    uint64_t v5 = (v12 - 1) & v12;
    char v10 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_22:
    sub_10012A22C(*(void *)(a1 + 48) + 40 * v10, (uint64_t)v23);
    v21[0] = v23[0];
    v21[1] = v23[1];
    uint64_t v22 = v24;
    sub_10012A22C((uint64_t)v21, (uint64_t)v20);
    uint64_t v14 = sub_100129274(&qword_1002B9158);
    if ((swift_dynamicCast(&v25, v20, &type metadata for AnyHashable, v14, 6LL) & 1) == 0) {
      uint64_t v25 = 0LL;
    }
    sub_10012A92C((uint64_t)v21);
    uint64_t v15 = v25;
    if (v25)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        sub_100169A6C(0, v8[2] + 1LL, 1, (uint64_t)v8);
        uint64_t v8 = v18;
      }

      int64_t v17 = v8[2];
      int64_t v16 = v8[3];
      if (v17 >= v16 >> 1)
      {
        sub_100169A6C(v16 > 1, v17 + 1, 1, (uint64_t)v8);
        uint64_t v8 = v19;
      }

      v8[2] = v17 + 1;
      v8[v17 + 4] = v15;
    }
  }

  uint64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_30:
    swift_release(a1);
    return;
  }

  uint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    uint64_t v7 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_30;
    }
    uint64_t v12 = *(void *)(v2 + 8 * v7);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

    unint64_t v35 = (v14 - 1) & v14;
    char v36 = v15;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

  uint64_t v6 = v7;
LABEL_47:
  sub_10016A278(v4, (v12 - v4) / 16, v6);
  return 1LL;
}

uint64_t sub_10012DCDC()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10012DD0C()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v6 = v2;
  sub_1001323F0(v2[35], &v6);
  uint64_t v4 = v2[34];
  if (v0)
  {
    v2[33] = v0;
    swift_bridgeObjectRelease(v4, v3);
    sub_1001326DC();
  }

  else
  {
    v2[32] = v4;
  }

  sub_100132278();
  return sub_1001321F0();
}

uint64_t sub_10012DD7C()
{
  uint64_t v0 = swift_task_alloc(dword_1002B82A4);
  uint64_t v1 = (void *)sub_100132570(v0);
  sub_1001324BC(v1);
  sub_1001322D8();
  return sub_10012D69C(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10012DDF0( uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 56) = a8;
  *(void *)(v9 + 64) = a9;
  *(double *)(v9 + 48) = a2;
  *(void *)(v9 + 32) = a6;
  *(void *)(v9 + 40) = a7;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a5;
  return swift_task_switch(sub_10012DE14, 0LL, 0LL);
}

uint64_t sub_10012DE14()
{
  uint64_t v1 = swift_bridgeObjectRetain(v0[4]);
  v0[9] = sub_100135FB4(v1);
  uint64_t v2 = (void *)swift_task_alloc(dword_1002B8324);
  v0[10] = v2;
  uint64_t v3 = sub_10013246C(v2, (uint64_t)sub_10012DE64);
  return sub_1001324B0(v3, 1, v4, v5, v6, v7);
}

uint64_t sub_10012DE64()
{
  if (!v1)
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 72), v3);
    *(void *)(v2 + 96) = v0;
  }

  sub_100132278();
  return sub_1001321F0();
}

uint64_t sub_10012DEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v8);
  double v10 = (char *)&v27[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100131F98(a1, (uint64_t)v10, &qword_1002B8238);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  uint64_t v12 = sub_10012B4E8((uint64_t)v10, 1LL, v11);
  if ((_DWORD)v12 == 1)
  {
    sub_100131288((uint64_t)v10, &qword_1002B8238);
    uint64_t v13 = 12544LL;
  }

  else
  {
    unsigned __int8 v14 = TaskPriority.rawValue.getter(v12);
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
    uint64_t v13 = v14 | 0x3100LL;
  }

  uint64_t v15 = *(void *)(a3 + 16);
  if (v15)
  {
    uint64_t v16 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v15);
    uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
    uint64_t v20 = v19;
    swift_unknownObjectRelease(v15);
  }

  else
  {
    uint64_t v18 = 0LL;
    uint64_t v20 = 0LL;
  }

  uint64_t v21 = *v4;
  uint64_t v22 = sub_100129274(&qword_1002B8290);
  id v23 = (void *)(v20 | v18);
  if (v20 | v18)
  {
    v28[0] = 0LL;
    v28[1] = 0LL;
    id v23 = v28;
    v28[2] = v18;
    v28[3] = v20;
  }

  v27[0] = 1LL;
  v27[1] = v23;
  v27[2] = v21;
  uint64_t v24 = swift_task_create(v13, v27, v22, a2, a3);
  return swift_release(v24);
}

uint64_t sub_10012E03C( uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 56) = a8;
  *(void *)(v9 + 64) = a9;
  *(double *)(v9 + 48) = a2;
  *(void *)(v9 + 32) = a6;
  *(void *)(v9 + 40) = a7;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a5;
  return swift_task_switch(sub_10012E060, 0LL, 0LL);
}

uint64_t sub_10012E060()
{
  uint64_t v1 = swift_bridgeObjectRetain(v0[4]);
  v0[9] = sub_100135FB4(v1);
  uint64_t v2 = (void *)swift_task_alloc(dword_1002B8324);
  v0[10] = v2;
  uint64_t v3 = sub_10013246C(v2, (uint64_t)sub_10012E0B0);
  return sub_1001324B0(v3, 0, v4, v5, v6, v7);
}

uint64_t sub_10012E0B0()
{
  if (!v1)
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 72), v3);
    *(void *)(v2 + 96) = v0;
  }

  sub_100132278();
  return sub_1001321F0();
}

uint64_t sub_10012E0FC()
{
  return sub_100132388(*(void *)(v0 + 96));
}

uint64_t sub_10012E104(uint64_t a1, uint64_t a2)
{
  return sub_10013224C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10012E1DC(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, const void *a5, void *a6, double a7)
{
  v7[2] = a6;
  unsigned __int8 v14 = _Block_copy(aBlock);
  v7[3] = _Block_copy(a5);
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String);
  v7[4] = v15;
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String);
  v7[5] = v16;
  uint64_t v17 = swift_allocObject(&unk_100273B38, 24LL, 7LL);
  v7[6] = v17;
  *(void *)(v17 + 16) = v14;
  uint64_t v18 = dword_1002B828C;
  a6;
  uint64_t v19 = (void *)swift_task_alloc(v18);
  v7[7] = v19;
  *uint64_t v19 = v7;
  v19[1] = sub_10012E2E8;
  return AppMetadataFetcher.fetch(bundleIDs:adamIDs:batchSize:ttl:refreshExpiredCompletion:)( v15,  v16,  a3,  (uint64_t)sub_100131C60,  v17,  a7);
}

void sub_10012E2E8(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (void *)*v2;
  uint64_t v18 = v5;
  uint64_t v6 = v5[6];
  double v7 = (void *)v5[2];
  sub_1001323F0(v5[7], &v18);

  uint64_t v8 = swift_release(v6);
  uint64_t v10 = sub_100132454(v8, v9);
  uint64_t v12 = sub_100132858(v10, v11);
  if (v3)
  {
    a1 = _convertErrorToNSError(_:)(v3);
    sub_100132428();
    Class isa = 0LL;
    unsigned __int8 v14 = (void *)a1;
  }

  else if (a1)
  {
    sub_1001327D8(v12, &qword_1002B8358, &OBJC_CLASS___GKAppMetadata_ptr);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_100132324((uint64_t)isa, v15);
    a1 = 0LL;
    unsigned __int8 v14 = isa;
  }

  else
  {
    Class isa = 0LL;
    unsigned __int8 v14 = 0LL;
  }

  uint64_t v16 = (void (**)(void, void, void))v5[3];
  ((void (**)(void, Class, uint64_t))v16)[2](v16, isa, a1);

  _Block_release(v16);
  sub_1001326EC();
  __asm { BR              X0 }

void sub_10012E3F0(uint64_t a1, uint64_t a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
}

uint64_t sub_10012E464(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 64) = v6;
  *(void *)(v7 + 48) = a4;
  *(double *)(v7 + 40) = a6;
  *(_BYTE *)(v7 + 144) = a2;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a3;
  return sub_100132294((uint64_t)sub_10012E484);
}

uint64_t sub_10012E484()
{
  uint64_t v1 = (uint64_t *)(v0[8] + OBJC_IVAR___GKAppMetadataFetcher_cache);
  uint64_t v2 = *v1;
  v0[9] = *v1;
  uint64_t v3 = v1[1];
  v0[10] = v3;
  uint64_t ObjectType = swift_getObjectType(v2);
  v0[11] = ObjectType;
  v0[12] = *(void *)(v3 + 16);
  dispatch thunk of Actor.unownedExecutor.getter(ObjectType, *(void *)(v3 + 8));
  return sub_100132230();
}

uint64_t sub_10012E4F4()
{
  *(void *)(v0 + 104) = (*(uint64_t (**)(void, void, void, void, double))(v0 + 96))( *(void *)(v0 + 24),  *(_BYTE *)(v0 + 144) & 1,  *(void *)(v0 + 88),  *(void *)(v0 + 80),  *(double *)(v0 + 40));
  sub_100132278();
  return swift_task_switch(v1, v2, v3);
}

uint64_t sub_10012E570()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(v1);
    sub_1001296D0();
    uint64_t v4 = (unsigned __int8 *)(v2 + 56);
    uint64_t v5 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = *((void *)v4 - 3);
      uint64_t v6 = *((void *)v4 - 2);
      int v8 = *v4;
      id v9 = *((id *)v4 - 1);
      swift_bridgeObjectRetain_n(v6, 2LL);
      sub_1001315F8(v7, v6);
      uint64_t v11 = swift_bridgeObjectRelease(v10, v10);
      if (v8 == 1)
      {
        uint64_t v13 = sub_10013280C();
        if ((v13 & 1) == 0)
        {
          sub_10013271C(0, v5[2] + 1LL);
          uint64_t v5 = (void *)v13;
        }

        unint64_t v16 = v5[2];
        unint64_t v15 = v5[3];
        if (v16 >= v15 >> 1)
        {
          sub_10013271C(v15 > 1, v16 + 1);
          uint64_t v5 = (void *)v13;
        }

        v5[2] = v16 + 1;
        uint64_t v17 = &v5[2 * v16];
        v17[4] = v7;
        v17[5] = v6;
      }

      else
      {
        uint64_t v13 = sub_1001322A0(v11, v12);
      }

      sub_1001322A0(v13, v14);

      v4 += 32;
      --v3;
    }

    while (v3);
    uint64_t v19 = swift_bridgeObjectRelease(*(void *)(v0 + 104), v18);
  }

  else
  {
    uint64_t v19 = swift_bridgeObjectRetain(v1);
    uint64_t v5 = _swiftEmptyArrayStorage;
  }

  if (v5[2]) {
    sub_10012EC54( (uint64_t)v5,  *(_BYTE *)(v0 + 144) & 1,  *(void *)(v0 + 32),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
  }
  char v21 = *(_BYTE *)(v0 + 144);
  sub_10012B950(v19, v20);
  uint64_t v22 = *(void *)(v0 + 16);
  *(void *)(v0 + 112) = v22;
  id v23 = (void *)swift_task_alloc(dword_1002B832C);
  *(void *)(v0 + 120) = v23;
  void *v23 = v0;
  v23[1] = sub_10012E710;
  return sub_10012E7B0(v22, v21 & 1, *(void *)(v0 + 32), *(void *)(v0 + 104));
}

uint64_t sub_10012E710(uint64_t a1)
{
  uint64_t v16 = *v2;
  uint64_t v4 = v16;
  sub_100132600(&v16);
  *(void *)(v4 + 128) = v1;
  uint64_t v6 = swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v8 = sub_10012B950(v6, v7);
    sub_1001322A0(v8, v9);
  }

  else
  {
    uint64_t v10 = sub_1001322A0(v6, v7);
    sub_10012B950(v10, v11);
    *(void *)(v4 + 136) = a1;
  }

  sub_100132278();
  return swift_task_switch(v12, v13, v14);
}

uint64_t sub_10012E798()
{
  return sub_10013257C(*(void *)(v0 + 136), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10012E7A4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012E7B0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = v4;
  *(_BYTE *)(v5 + 80) = a2;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a3;
  return sub_100132294((uint64_t)sub_10012E7C8);
}

void sub_10012E7C8()
{
  uint64_t v1 = v0[2];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = (void *)(v0[5] + OBJC_IVAR___GKAppMetadataFetcher_network);
    uint64_t v3 = v2[4];
    sub_10012A960(v2, v2[3]);
    uint64_t v4 = swift_bridgeObjectRetain(v1);
    sub_10014A264(v4);
    v0[6] = v5;
    sub_100132324(v5, v6);
    uint64_t v7 = (void *)swift_task_alloc(*(unsigned int *)(*(void *)(v3 + 8) + 4LL));
    v0[7] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10012EA34;
    sub_100132678();
    __asm { BR              X5 }
  }

  uint64_t v9 = v0[4];
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10)
  {
LABEL_20:
    sub_10013261C();
    sub_100132678();
    __asm { BR              X1 }
  }

  uint64_t v11 = 0LL;
  uint64_t v13 = swift_bridgeObjectRetain(v9) + 48;
  uint64_t v14 = &selRef_KETTLE_INVITEE_DECLINED_ALERT_MESSAGE_ALIAS_1_FORMAT;
  while (2)
  {
    unint64_t v15 = (id *)(v13 + 32 * v11);
    uint64_t v16 = v11;
    while (1)
    {
      uint64_t v11 = v16 + 1;
      if (__OFADD__(v16, 1LL))
      {
        __break(1u);
        goto LABEL_22;
      }

      if (*v15) {
        break;
      }
      v15 += 4;
      ++v16;
      if (v11 == v10) {
        goto LABEL_19;
      }
    }

    uint64_t v37 = v13;
    uint64_t v17 = (uint64_t)*(v15 - 1);
    id v18 = *v15;
    swift_bridgeObjectRetain(v17);
    id v19 = [v18 v14[393]];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

    swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_100132400();
    sub_100132838();
    if (v22)
    {
      __break(1u);
      break;
    }

    unint64_t v23 = v20;
    char v24 = v21;
    sub_100129274(&qword_1002B8340);
    if (!sub_10013275C()) {
      goto LABEL_14;
    }
    unint64_t v25 = sub_100132400();
    if ((v24 & 1) != (v26 & 1))
    {
LABEL_22:
      sub_100132678();
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v36);
      return;
    }

    unint64_t v23 = v25;
LABEL_14:
    if ((v24 & 1) != 0)
    {
      sub_10013273C();
      *((void *)v19 + v23) = v18;
      goto LABEL_18;
    }

    sub_1001322A8();
    *(void *)(v29 + 8 * v23) = v18;
    uint64_t v30 = *((void *)&_swiftEmptyDictionarySingleton + 2);
    BOOL v22 = __OFADD__(v30, 1LL);
    uint64_t v31 = v30 + 1;
    if (!v22)
    {
      uint64_t v27 = sub_100132730(v31);
LABEL_18:
      uint64_t v14 = &selRef_KETTLE_INVITEE_DECLINED_ALERT_MESSAGE_ALIAS_1_FORMAT;
      uint64_t v32 = sub_10013262C(v27, v28);
      sub_100132858(v32, v33);
      swift_bridgeObjectRelease(v17, v34);

      uint64_t v13 = v37;
      if (v11 == v10)
      {
LABEL_19:
        swift_bridgeObjectRelease(v0[4], v12);
        goto LABEL_20;
      }

      continue;
    }

    break;
  }

  __break(1u);
}

uint64_t sub_10012EA34()
{
  uint64_t v2 = v0[7];
  v0[8] = v3;
  v0[9] = v1;
  swift_task_dealloc(v2);
  if (!v1) {
    swift_release(v0[6]);
  }
  sub_100132278();
  return sub_100132230();
}

void sub_10012EA94()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (!*(void *)(v1 + 16))
  {
LABEL_15:
    sub_10013261C();
    sub_10013232C();
    __asm { BR              X1 }
  }

  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v5 = (id *)(swift_bridgeObjectRetain(v1) + 48);
  uint64_t v6 = v2;
  while (1)
  {
    if (!*v5) {
      goto LABEL_13;
    }
    uint64_t v7 = (uint64_t)*(v5 - 1);
    id v8 = *v5;
    uint64_t v29 = v7;
    sub_1001325D8();
    id v9 = [v8 bundleID];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);

    id v10 = v8;
    swift_isUniquelyReferenced_nonNull_native(v3);
    sub_100132400();
    sub_100132838();
    if (v13) {
      break;
    }
    unint64_t v14 = v11;
    char v15 = v12;
    sub_100129274(&qword_1002B8340);
    if (sub_10013275C())
    {
      unint64_t v16 = sub_100132400();
      if ((v15 & 1) != (v17 & 1))
      {
        sub_10013232C();
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v27);
        return;
      }

      unint64_t v14 = v16;
    }

    if ((v15 & 1) != 0)
    {
      sub_10013273C();
      *((void *)v8 + v14) = v10;
    }

    else
    {
      sub_1001322A8();
      *(void *)(v20 + 8 * v14) = v10;
      uint64_t v21 = *(void *)(v3 + 16);
      BOOL v13 = __OFADD__(v21, 1LL);
      uint64_t v22 = v21 + 1;
      if (v13) {
        goto LABEL_18;
      }
      uint64_t v18 = sub_100132730(v22);
    }

    uint64_t v23 = sub_10013262C(v18, v19);
    sub_100132858(v23, v24);
    swift_bridgeObjectRelease(v29, v25);

LABEL_13:
    v5 += 4;
    if (!--v6)
    {
      swift_bridgeObjectRelease(*(void *)(v28 + 32), v4);
      goto LABEL_15;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
}

uint64_t sub_10012EC28()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10012EC54(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10 = a2 & 1;
  uint64_t v11 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v11);
  BOOL v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100132568();
  sub_10013251C((uint64_t)v13, v15, v16, v14);
  uint64_t v17 = sub_10012AAEC((uint64_t)&unk_100273AE8, 80LL);
  *(void *)(v17 + 16) = 0LL;
  *(void *)(v17 + 24) = 0LL;
  *(void *)(v17 + 32) = v5;
  *(void *)(v17 + 40) = a1;
  *(_BYTE *)(v17 + 48) = v10;
  *(void *)(v17 + 56) = a3;
  *(void *)(v17 + 64) = a4;
  *(void *)(v17 + 72) = a5;
  id v18 = v5;
  swift_bridgeObjectRetain(a1);
  swift_retain(a5);
  uint64_t v19 = sub_100159228((uint64_t)v13, (uint64_t)&unk_1002B8338, v17);
  swift_release(v19);
  sub_100131288((uint64_t)v13, &qword_1002B8238);
}

uint64_t sub_10012ED50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 48) = a8;
  *(void *)(v8 + 56) = v12;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 40) = a7;
  *(_BYTE *)(v8 + 112) = a6;
  *(void *)(v8 + 24) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 64) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 72) = v10;
  *(void *)(v8 + 80) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10012EDC0, 0LL, 0LL);
}

uint64_t sub_10012EDC0()
{
  char v1 = *(_BYTE *)(v0 + 112);
  uint64_t v2 = (void *)(*(void *)(v0 + 24) + OBJC_IVAR___GKAppMetadataFetcher_network);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_10012A960(v2, v3);
  uint64_t v5 = *(int **)(v4 + 8);
  uint64_t v8 = (int *)((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc(v5[1]);
  *(void *)(v0 + 88) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10012EE58;
  return ((uint64_t (*)(void, void, void, uint64_t, uint64_t))v8)( *(void *)(v0 + 32),  v1 & 1,  *(void *)(v0 + 40),  v3,  v4);
}

uint64_t sub_10012EE58()
{
  *(void *)(v2 + 96) = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    *(void *)(v2 + 104) = v0;
  }
  sub_100132278();
  return sub_1001321F0();
}

uint64_t sub_10012EEAC()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 48))(*(void *)(v0 + 104));
  sub_10012B950(v1, v2);
  swift_task_dealloc(*(void *)(v0 + 80));
  return sub_10012CEAC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10012EEEC()
{
  uint64_t v1 = *(void *)(v0 + 96);
  static GKLog.general.getter();
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v6 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v7 = (void *)sub_10012CE30(8LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *uint64_t v7 = v8;
    sub_100132428();
    sub_100132428();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to refresh expired adamIDs with error: %@", v6, 0xCu);
    uint64_t v9 = sub_100129274(&qword_1002B8ED0);
    swift_arrayDestroy(v7, 1LL, v9);
    sub_10012CE24((uint64_t)v7);
    sub_10012CE24((uint64_t)v6);

    sub_100132428();
  }

  else
  {
    sub_100132428();
    sub_100132428();
    sub_100132428();
  }

  (*(void (**)(void, void))(*(void *)(v0 + 72) + 8LL))(*(void *)(v0 + 80), *(void *)(v0 + 64));
  swift_task_dealloc(*(void *)(v0 + 80));
  return sub_10012CEAC(*(uint64_t (**)(void))(v0 + 8));
}

void AppMetadataFetcher.init()()
{
}

id AppMetadataFetcher.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppMetadataFetcher();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t AppMetadataNetworkFetcher.fetch(ids:type:batchSize:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  *(_BYTE *)(v5 + 80) = a2;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a3;
  return sub_100132294((uint64_t)sub_10012F11C);
}

uint64_t sub_10012F11C()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  char v3 = *(_BYTE *)(v0 + 80) & 1;
  sub_100129274(&qword_1002B8290);
  sub_100129274(&qword_1002B8298);
  uint64_t v4 = swift_task_alloc(64LL);
  *(void *)(v0 + 56) = v4;
  __int128 v5 = *(_OWORD *)(v0 + 40);
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v5;
  *(_BYTE *)(v4 + 48) = v3;
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(void *)(v0 + 64) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10012F1D4;
  sub_100132430();
  sub_1001326EC();
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10012F1D4()
{
  *(void *)(v0 + 72) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_task_dealloc(*(void *)(v0 + 56));
  }
  sub_100132278();
  return sub_100132230();
}

uint64_t sub_10012F228()
{
  return sub_10013257C(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10012F230()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10012F25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(_BYTE *)(v7 + 296) = a7;
  *(void *)(v7 + 224) = a5;
  *(void *)(v7 + 232) = a6;
  *(void *)(v7 + 208) = a3;
  *(void *)(v7 + 216) = a4;
  *(void *)(v7 + 192) = a1;
  *(void *)(v7 + 200) = a2;
  unint64_t v8 = (*(void *)(*(void *)(sub_100129274(&qword_1002B8238) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v7 + 240) = swift_task_alloc(v8);
  *(void *)(v7 + 248) = swift_task_alloc(v8);
  return swift_task_switch(sub_10012F2D4, 0LL, 0LL);
}

void sub_10012F2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v4 + 216);
  unint64_t v8 = *(void *)(*(void *)(v4 + 208) + 16LL);
  *(void *)(v4 + 256) = v8;
  if (v7)
  {
    if (v7 < 1 || v8 == 0)
    {
      uint64_t v10 = *(void *)(v4 + 248);
      **(void **)(v4 + 192) = &_swiftEmptyDictionarySingleton;
      swift_task_dealloc(v10);
      sub_1001324F4();
      sub_10013232C();
      __asm { BR              X0 }
    }

    if (v8 >= v7) {
      uint64_t v2 = v7;
    }
    else {
      uint64_t v2 = v8;
    }
    *(void *)(v4 + 264) = &_swiftEmptyDictionarySingleton;
    *(void *)(v4 + 272) = v7;
    uint64_t v3 = (void *)type metadata accessor for __ContiguousArrayStorageBase(0LL);
    uint64_t v12 = sub_1001296D0();
    uint64_t v13 = swift_unknownObjectRetain_n(v12, 2LL);
    uint64_t v14 = (void *)swift_dynamicCastClass(v13, v3);
    if (!v14)
    {
      sub_10012B950(0LL, v15);
      uint64_t v14 = _swiftEmptyArrayStorage;
    }

    uint64_t v5 = v14[2];
    a1 = swift_release(v14);
    if (v5 == v2)
    {
      uint64_t v16 = swift_dynamicCastClass(*(void *)(v4 + 208), v3);
      LODWORD(v3) = v16;
      if (!v16)
      {
        uint64_t v16 = sub_10012B950(0LL, v17);
        uint64_t v3 = _swiftEmptyArrayStorage;
      }

      goto LABEL_16;
    }
  }

  else
  {
    __break(1u);
  }

  sub_10012B950(a1, a2);
  uint64_t v32 = sub_100129274(&qword_1002B8380);
  uint64_t v33 = (void *)sub_10012AAEC(v32, 16 * v2 + 32);
  sub_100132634(v33);
  unint64_t v34 = *(void *)(v4 + 208) + 32LL;
  unint64_t v35 = (unint64_t)(v3 + 4);
  if (v34 < (unint64_t)&v3[2 * v2 + 4] && v35 < v34 + 16 * v2)
  {
    sub_10013249C();
    sub_100132790( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)"UnsafeMutablePointer.initialize overlapping range",  49LL,  v37,  (uint64_t)"Swift/UnsafePointer.swift");
    sub_10013232C();
    return;
  }

  uint64_t v16 = swift_arrayInitWithCopy(v35);
LABEL_16:
  sub_1001325B0(v16, v17);
  uint64_t v18 = sub_100132568();
  sub_1001324FC(v18);
  uint64_t v19 = sub_10012AAEC((uint64_t)&unk_100273B60, 57LL);
  uint64_t v20 = sub_100132530(v19);
  sub_10013284C(v20, v21, &qword_1002B8238);
  uint64_t v22 = sub_10013258C();
  uint64_t v23 = *(void *)(v4 + 240);
  if ((_DWORD)v3 == 1)
  {
    sub_100132584(v22, &qword_1002B8238);
    uint64_t v23 = 0LL;
    uint64_t v5 = 0LL;
  }

  else
  {
    TaskPriority.rawValue.getter(v22);
    sub_1001324DC();
    if (*v6)
    {
      sub_1001327EC();
      sub_100132800();
      sub_1001326AC();
      sub_1001326BC();
    }

    else
    {
      uint64_t v23 = 0LL;
      uint64_t v5 = 0LL;
    }
  }

  uint64_t v24 = **(void **)(v4 + 200);
  sub_100129274(&qword_1002B8290);
  if (v5 | v23)
  {
    *(void *)(v4 + 72) = 0LL;
    *(void *)(v4 + 80) = 0LL;
    *(void *)(v4 + 88) = v23;
    *(void *)(v4 + 96) = v5;
  }

  sub_1001327C4();
  *(void *)(v4 + 112) = v25;
  *(void *)(v4 + 120) = v24;
  uint64_t v29 = sub_100132784(v26, v27, v28, (uint64_t)&unk_1002B8370);
  uint64_t v30 = swift_release(v29);
  sub_100132584(v30, &qword_1002B8238);
  uint64_t v31 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
  *(void *)(v4 + 280) = v31;
  sub_100129274(&qword_1002B8378);
  *uint64_t v31 = v4;
  v31[1] = sub_10012F59C;
  sub_100132278();
  sub_10013232C();
  ThrowingTaskGroup.next(isolation:)();
}

uint64_t sub_10012F59C()
{
  uint64_t v6 = *v1;
  uint64_t v2 = v6;
  sub_100132600(&v6);
  *(void *)(v2 + 288) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    swift_bridgeObjectRelease(*(void *)(v2 + 264), v4);
  }
  sub_100132278();
  return sub_100132230();
}

void sub_10012F5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void **)(v3 + 184);
  if ((unint64_t)v7 < 2)
  {
    uint64_t v5 = *(void *)(v3 + 272);
    uint64_t v8 = *(void *)(v3 + 256);
    BOOL v9 = v8 >= v5;
    if (v5 < v8)
    {
      uint64_t v83 = v3 + 184;
      goto LABEL_34;
    }

    uint64_t v7 = *(void **)(v3 + 264);
LABEL_44:
    uint64_t v45 = *(void *)(v3 + 248);
    **(void **)(v3 + 192) = v7;
    swift_task_dealloc(v45);
    sub_1001324F4();
    sub_10013240C();
    __asm { BR              X0 }
  }

  uint64_t v2 = v3 + 16;
  uint64_t v83 = v3 + 184;
  uint64_t v10 = *(void *)(v3 + 264);
  char v11 = sub_10013280C();
  *(void *)(v3 + 176) = v10;
  sub_100132004((uint64_t)v7, (uint64_t)sub_100131FC4, 0LL, (void *)(v3 + 16));
  uint64_t v87 = *(void *)(v3 + 16);
  uint64_t v88 = *(void *)(v3 + 64);
  uint64_t v85 = *(void *)(v3 + 24);
  uint64_t v89 = *(void *)(v3 + 40);
  uint64_t v12 = *(void *)(v3 + 48);
  v86 = *(uint64_t (**)(uint64_t))(v3 + 56);
  int64_t v84 = (unint64_t)(*(void *)(v3 + 32) + 64LL) >> 6;
  uint64_t v13 = v7;
  uint64_t v7 = *(void **)(v3 + 264);
  uint64_t v82 = (uint64_t)v13;
  a1 = swift_bridgeObjectRetain(v13);
  while (1)
  {
    if (v12)
    {
      sub_100132748();
      uint64_t v15 = v14 | (v89 << 6);
      goto LABEL_22;
    }

    int64_t v16 = v89 + 1;
    if (__OFADD__(v89, 1LL)) {
      goto LABEL_70;
    }
    if (v16 >= v84) {
      goto LABEL_32;
    }
    if (!*(void *)(v85 + 8 * v16))
    {
      if (v89 + 2 >= v84) {
        goto LABEL_32;
      }
      if (!*(void *)(v85 + 8 * (v89 + 2)))
      {
        if (v89 + 3 >= v84) {
          goto LABEL_32;
        }
        if (!*(void *)(v85 + 8 * (v89 + 3)))
        {
          if (v89 + 4 >= v84) {
            goto LABEL_32;
          }
          if (!*(void *)(v85 + 8 * (v89 + 4)))
          {
            if (v89 + 5 >= v84) {
              goto LABEL_32;
            }
            if (!*(void *)(v85 + 8 * (v89 + 5))) {
              break;
            }
          }
        }
      }
    }

LABEL_60:
  sub_1001325B0(v55, v56);
  uint64_t v57 = sub_100132568();
  sub_1001324FC(v57);
  uint64_t v58 = sub_10012AAEC((uint64_t)&unk_100273B60, 57LL);
  uint64_t v59 = sub_100132530(v58);
  sub_10013284C(v59, v60, &qword_1002B8238);
  uint64_t v61 = sub_10013258C();
  uint64_t v62 = *(void *)(v3 + 240);
  if ((_DWORD)v7 == 1)
  {
    sub_100132584(v61, &qword_1002B8238);
    uint64_t v62 = 0LL;
    uint64_t v4 = 0LL;
  }

  else
  {
    TaskPriority.rawValue.getter(v61);
    sub_1001324DC();
    if (*(void *)v6)
    {
      sub_1001327EC();
      sub_100132800();
      sub_1001326AC();
      sub_1001326BC();
    }

    else
    {
      uint64_t v62 = 0LL;
      uint64_t v4 = 0LL;
    }
  }

  uint64_t v63 = **(void **)(v3 + 200);
  sub_100129274(&qword_1002B8290);
  if (v4 | v62)
  {
    v64 = (void *)(v83 - 112);
    void *v64 = 0LL;
    v64[1] = 0LL;
    *(void *)(v3 + 88) = v62;
    *(void *)(v3 + 96) = v4;
  }

  sub_1001327C4();
  *(void *)(v3 + 112) = v65;
  *(void *)(v3 + 120) = v63;
  uint64_t v69 = sub_100132784(v66, v67, v68, (uint64_t)&unk_1002B8370);
  uint64_t v70 = swift_release(v69);
  sub_100132584(v70, &qword_1002B8238);
  v71 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
  *(void *)(v3 + 280) = v71;
  sub_100129274(&qword_1002B8378);
  void *v71 = v3;
  v71[1] = sub_10012F59C;
  sub_100132278();
  sub_10013240C();
  ThrowingTaskGroup.next(isolation:)();
}

uint64_t sub_10012FC90()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10012FCC0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v7 + 16) = a1;
  uint64_t v9 = a7 & 1;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  uint64_t v10 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v7 + 24) = v10;
  *uint64_t v10 = v7;
  v10[1] = sub_10012FD34;
  return v12(a6, v9);
}

uint64_t sub_10012FD34()
{
  uint64_t v4 = *v3;
  sub_1001323F0(*(void *)(v2 + 24), v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  *(void *)(v2 + 32) = v0;
  sub_100132278();
  return sub_1001321F0();
}

uint64_t sub_10012FD90()
{
  return sub_100132388(*(void *)(v0 + 32));
}

uint64_t sub_10012FD98(uint64_t a1, char a2, uint64_t a3)
{
  char v7 = a2 & 1;
  uint64_t v9 = *v3;
  uint64_t v8 = v3[1];
  uint64_t v10 = (void *)swift_task_alloc(dword_1002B82B4);
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_10012FE10;
  return AppMetadataNetworkFetcher.fetch(ids:type:batchSize:)(a1, v7, a3, v9, v8);
}

uint64_t sub_10012FE10(uint64_t a1)
{
  uint64_t v4 = sub_100132258();
  if (!v1) {
    uint64_t v4 = a1;
  }
  return sub_1001325E0(v4, *(uint64_t (**)(void))(v2 + 8));
}

id GKAppMetadata.init(responseDataItem:)(uint64_t a1)
{
  uint64_t v2 = v1;
  v180[0] = 25705LL;
  v180[1] = 0xE200000000000000LL;
  sub_1001321E4();
  sub_100132218();
  uint64_t v4 = sub_100132228();
  if (*((void *)&v184 + 1))
  {
    if ((sub_1001321D0(v4, v5, v6, (uint64_t)&type metadata for String) & 1) == 0)
    {
      uint64_t v69 = a1;
LABEL_41:
      swift_bridgeObjectRelease(v69, v7);
      return 0LL;
    }

    uint64_t v8 = v180[1];
    strcpy((char *)v180, "attributes");
    BYTE3(v180[1]) = 0;
    HIDWORD(v180[1]) = -369098752;
    sub_1001321E4();
    sub_100132218();
    sub_100132324(v9, v10);
    sub_100132228();
    sub_100129274(&qword_1002B82C8);
    if ((sub_100132200() & 1) == 0)
    {
LABEL_40:
      uint64_t v69 = v8;
      goto LABEL_41;
    }

    sub_10013245C(0xD000000000000012LL);
    sub_1001321E4();
    sub_100132284();
    sub_100132228();
    uint64_t v11 = sub_100132200();
    if ((v11 & 1) == 0
      || (v180[0] = 7565161LL,
          v180[1] = 0xE300000000000000LL,
          sub_1001321E4(),
          sub_100132218(),
          sub_100132324(v13, v14),
          sub_100132228(),
          uint64_t v11 = sub_100132200(),
          (v11 & 1) == 0))
    {
LABEL_39:
      sub_1001322A0(v11, v12);
      goto LABEL_40;
    }

    strcpy((char *)v180, "shortName");
    WORD1(v180[1]) = 0;
    HIDWORD(v180[1]) = -385875968;
    sub_1001321E4();
    sub_100132218();
    uint64_t v15 = sub_100132228();
    uint64_t v18 = sub_1001321D0(v15, v16, v17, (uint64_t)&type metadata for String);
    if ((v18 & 1) == 0)
    {
LABEL_38:
      uint64_t v11 = sub_100132324(v18, v19);
      goto LABEL_39;
    }

    uint64_t v20 = v180[0];
    uint64_t v21 = v180[1];
    v180[0] = 1701667182LL;
    v180[1] = 0xE400000000000000LL;
    sub_1001321E4();
    sub_100132284();
    uint64_t v22 = sub_100132228();
    if ((sub_1001321D0(v22, v23, v24, (uint64_t)&type metadata for String) & 1) == 0)
    {
      uint64_t v70 = v21;
LABEL_37:
      uint64_t v18 = swift_bridgeObjectRelease(v70, v25);
      goto LABEL_38;
    }

    uint64_t v179 = v21;
    NSString v26 = (NSString)v180[0];
    uint64_t v178 = v180[1];
    strcpy((char *)v180, "bundleId");
    BYTE1(v180[1]) = 0;
    WORD1(v180[1]) = 0;
    HIDWORD(v180[1]) = -402653184;
    sub_1001321E4();
    sub_100132218();
    uint64_t v27 = sub_100132228();
    if ((sub_1001321D0(v27, v28, v29, (uint64_t)&type metadata for String) & 1) == 0)
    {
LABEL_36:
      swift_bridgeObjectRelease(v178, v30);
      uint64_t v70 = v179;
      goto LABEL_37;
    }

    NSString v176 = (NSString)v180[0];
    NSString v177 = (NSString)v180[1];
    sub_10013245C(0xD000000000000013LL);
    sub_1001321E4();
    sub_100132218();
    NSString v174 = v26;
    uint64_t v175 = v20;
    uint64_t v31 = sub_100132228();
    unsigned int v173 = LOBYTE(v180[0]);
    strcpy((char *)v180, "supportsArcade");
    HIBYTE(v180[1]) = -18;
    sub_1001321E4();
    sub_100132284();
    uint64_t v35 = sub_100132228();
    char v38 = v180[0];
    sub_10013245C(0xD000000000000016LL);
    sub_1001321E4();
    sub_100132218();
    uint64_t v39 = sub_100132228();
    if ((sub_1001321D0(v39, v40, v41, (uint64_t)&type metadata for Bool) & 1) == 0
      || (int v172 = LOBYTE(v180[0]),
          strcpy((char *)v180, "deviceFamilies"),
          HIBYTE(v180[1]) = -18,
          sub_1001321E4(),
          sub_100132284(),
          sub_100132228(),
          uint64_t v42 = sub_100129274(&qword_1002B8E80),
          (sub_1001321D0(v42, v43, v44, v42) & 1) == 0))
    {
LABEL_35:
      swift_bridgeObjectRelease(v177, v34);
      goto LABEL_36;
    }

    strcpy((char *)v180, "artwork");
    v180[1] = 0xE700000000000000LL;
    sub_1001321E4();
    sub_100132218();
    sub_100132228();
    uint64_t v45 = sub_100132200();
    if ((v45 & 1) == 0)
    {
LABEL_34:
      sub_100132454(v45, v46);
      goto LABEL_35;
    }

    uint64_t v47 = (void *)v180[0];
    v180[0] = 7107189LL;
    v180[1] = 0xE300000000000000LL;
    sub_1001321E4();
    id v171 = v47;
    sub_10012CFE4((uint64_t)v47, &v183);
    uint64_t v48 = sub_100132228();
    if (*((void *)&v184 + 1))
    {
      if ((sub_1001321D0(v48, v49, v50, (uint64_t)&type metadata for String) & 1) == 0)
      {
LABEL_33:
        uint64_t v45 = swift_bridgeObjectRelease(v171, v51);
        goto LABEL_34;
      }

      v169 = (void *)v180[0];
      id v170 = (id)v180[1];
      v180[0] = 0x6874646977LL;
      v180[1] = 0xE500000000000000LL;
      sub_1001321E4();
      sub_10013223C();
      uint64_t v52 = sub_100132228();
      if (*((void *)&v184 + 1))
      {
        uint64_t v54 = sub_1001327D8(v52, (unint64_t *)&qword_1002B82D0, &OBJC_CLASS___NSNumber_ptr);
        if ((sub_100132200() & 1) == 0)
        {
LABEL_32:
          swift_bridgeObjectRelease(v170, v55);
          goto LABEL_33;
        }

        id v168 = (id)v180[0];
        v180[0] = 0x746867696568LL;
        v180[1] = 0xE600000000000000LL;
        sub_1001321E4();
        sub_10013223C();
        sub_100132228();
        if (*((void *)&v184 + 1))
        {
          if ((sub_100132200() & 1) != 0)
          {
            id v163 = (id)v180[0];
            uint64_t v56 = sub_100129274(&qword_1002B8168);
            v164 = &v154;
            __chkstk_darwin(v56);
            uint64_t v165 = v57;
            sub_100132770();
            uint64_t v58 = type metadata accessor for Date(0LL);
            uint64_t v167 = v54;
            uint64_t v166 = v58;
            sub_1001291F8(v54, 1LL, 1LL, v58);
            sub_10013245C(0xD000000000000011LL);
            sub_1001321E4();
            sub_100132218();
            sub_100132324(v59, v60);
            uint64_t v61 = sub_100132228();
            if (*((void *)&v184 + 1))
            {
              uint64_t v62 = sub_1001327D8(v61, &qword_1002B82D8, &OBJC_CLASS___NSDictionary_ptr);
              if ((sub_1001321D0(v62, v63, v64, v62) & 1) == 0) {
                goto LABEL_54;
              }
              uint64_t v65 = (void *)v180[0];
              *(void *)&__int128 v183 = 0xD000000000000010LL;
              *((void *)&v183 + 1) = 0x800000010024AF70LL;
              uint64_t v66 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v183, &type metadata for String);
              uint64_t v162 = (uint64_t)v65;
              id v67 = objc_msgSend(v65, "__swift_objectForKeyedSubscript:", v66);
              swift_unknownObjectRelease(v66);
              if (v67)
              {
                _bridgeAnyObjectToAny(_:)(&v183, v67);
                swift_unknownObjectRelease(v67);
              }

              else
              {
                __int128 v183 = 0u;
                __int128 v184 = 0u;
              }

              sub_100130E80((uint64_t)&v183, (uint64_t)v181, &qword_1002B8E90);
              if (v182)
              {
                if ((swift_dynamicCast(v180, v181, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
                {
                  int64_t v84 = (void *)v180[1];
                  if (qword_1002B7ED8 != -1) {
                    swift_once(&qword_1002B7ED8, sub_100130C5C);
                  }
                  v161 = (uint64_t *)qword_1002B8270;
                  NSString v85 = String._bridgeToObjectiveC()();
                  sub_100132324((uint64_t)v85, v86);
                  id v87 = [v161 dateFromString:v85];
                  sub_1001327F8();
                  v161 = &v154;
                  __chkstk_darwin(v88);
                  sub_100132770();
                  if (v84)
                  {
                    static Date._unconditionallyBridgeFromObjectiveC(_:)(v84);

                    LODWORD(v160) = 0;
                  }

                  else
                  {
                    LODWORD(v160) = 1;
                  }

                  sub_100132528((uint64_t)&v185);
                  uint64_t v150 = v167;
                  sub_100132584(v151, &qword_1002B8168);
                  sub_1001291F8((uint64_t)v85, v160, 1LL, v166);
                  sub_100130E80((uint64_t)v85, v150, &qword_1002B8168);
                }

                else
                {
                  sub_100132528((uint64_t)&v185);
                }

LABEL_54:
                *(void *)&__int128 v183 = 0x6F6C6F4374786574LL;
                *((void *)&v183 + 1) = 0xEA00000000003172LL;
                sub_100132348();
                sub_10013223C();
                uint64_t v89 = sub_100132228();
                if (*((void *)&v184 + 1))
                {
                  sub_1001321D0(v89, v90, v91, (uint64_t)&type metadata for String);
                  sub_100132378();
                  uint64_t v162 = v93;
                  if (v94) {
                    v95 = 0LL;
                  }
                  else {
                    v95 = v92;
                  }
                  v161 = v95;
                }

                else
                {
                  sub_1001323F8(v89, &qword_1002B8E90);
                  uint64_t v162 = 0LL;
                  v161 = 0LL;
                }

                *(void *)&__int128 v183 = 0x6F6C6F4374786574LL;
                *((void *)&v183 + 1) = 0xEA00000000003272LL;
                sub_100132348();
                sub_10013223C();
                uint64_t v96 = sub_100132228();
                if (*((void *)&v184 + 1))
                {
                  sub_1001321D0(v96, v97, v98, (uint64_t)&type metadata for String);
                  sub_100132378();
                  uint64_t v160 = v100;
                  if (v94) {
                    uint64_t v101 = 0LL;
                  }
                  else {
                    uint64_t v101 = v99;
                  }
                  uint64_t v159 = v101;
                }

                else
                {
                  sub_1001323F8(v96, &qword_1002B8E90);
                  uint64_t v160 = 0LL;
                  uint64_t v159 = 0LL;
                }

                *(void *)&__int128 v183 = 0x6F6C6F4374786574LL;
                *((void *)&v183 + 1) = 0xEA00000000003372LL;
                sub_100132348();
                sub_10013223C();
                uint64_t v102 = sub_100132228();
                if (*((void *)&v184 + 1))
                {
                  sub_1001321D0(v102, v103, v104, (uint64_t)&type metadata for String);
                  sub_100132378();
                  uint64_t v158 = v106;
                  if (v94) {
                    uint64_t v107 = 0LL;
                  }
                  else {
                    uint64_t v107 = v105;
                  }
                  uint64_t v157 = v107;
                }

                else
                {
                  sub_1001323F8(v102, &qword_1002B8E90);
                  uint64_t v158 = 0LL;
                  uint64_t v157 = 0LL;
                }

                *(void *)&__int128 v183 = 0x6F6C6F4374786574LL;
                *((void *)&v183 + 1) = 0xEA00000000003472LL;
                sub_100132348();
                sub_10013223C();
                uint64_t v108 = sub_100132228();
                if (*((void *)&v184 + 1))
                {
                  sub_1001321D0(v108, v109, v110, (uint64_t)&type metadata for String);
                  sub_100132378();
                  uint64_t v156 = v112;
                  if (v94) {
                    uint64_t v113 = 0LL;
                  }
                  else {
                    uint64_t v113 = v111;
                  }
                  uint64_t v155 = v113;
                }

                else
                {
                  sub_1001323F8(v108, &qword_1002B8E90);
                  uint64_t v156 = 0LL;
                  uint64_t v155 = 0LL;
                }

                *(void *)&__int128 v183 = 0x726F6C6F436762LL;
                *((void *)&v183 + 1) = 0xE700000000000000LL;
                sub_100132348();
                sub_10012CFE4((uint64_t)v171, &v183);
                sub_100132324(v114, v115);
                uint64_t v116 = sub_100132228();
                if (*((void *)&v184 + 1))
                {
                  sub_1001321D0(v116, v117, v118, (uint64_t)&type metadata for String);
                  sub_100132378();
                  id v171 = v120;
                  if (v94) {
                    uint64_t v121 = 0LL;
                  }
                  else {
                    uint64_t v121 = v119;
                  }
                  uint64_t v154 = v121;
                }

                else
                {
                  sub_1001323F8(v116, &qword_1002B8E90);
                  id v171 = 0LL;
                  uint64_t v154 = 0LL;
                }

                id v122 = objc_allocWithZone(&OBJC_CLASS___GKArtworkMetadata);
                id v123 = v163;
                id v124 = v168;
                uint64_t v153 = (uint64_t)v171;
                uint64_t v125 = (uint64_t)v170;
                id v170 = v124;
                id v171 = v123;
                sub_100130C8C( (uint64_t)v169,  v125,  v124,  v123,  v162,  (uint64_t)v161,  v160,  v159,  v158,  v157,  v156,  v155,  v153,  v154);
                v169 = (void *)v126;
                NSString v176 = String._bridgeToObjectiveC()();
                sub_100132324((uint64_t)v176, v127);
                NSString v177 = sub_100132860();
                sub_10012B950((uint64_t)v177, v128);
                NSString v174 = sub_100132860();
                sub_10012B950((uint64_t)v174, v129);
                NSString v130 = sub_100132860();
                sub_10012B950((uint64_t)v130, v131);
                v132.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
                uint64_t v134 = sub_10012B950((uint64_t)v132.super.isa, v133);
                __chkstk_darwin(v134);
                v136 = (char *)&v154 - ((v135 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                sub_100131F98(v167, (uint64_t)v136, &qword_1002B8168);
                if (sub_10012B4E8((uint64_t)v136, 1LL, v166) == 1)
                {
                  Class isa = 0LL;
                }

                else
                {
                  Class isa = Date._bridgeToObjectiveC()().super.isa;
                  (*(void (**)(char *))(*(void *)(v166 - 8) + 8LL))(v136);
                }

                v180[0] = 0xD000000000000010LL;
                v180[1] = 0x800000010024AF50LL;
                sub_1001321E4();
                sub_100132284();
                sub_1001322A0(v138, v139);
                uint64_t v140 = sub_100132228();
                if (*((void *)&v184 + 1))
                {
                  if ((sub_1001321D0(v140, v141, v142, (uint64_t)&type metadata for String) & 1) != 0)
                  {
                    NSString v143 = String._bridgeToObjectiveC()();
                    sub_1001322A0((uint64_t)v143, v144);
LABEL_92:
                    id v145 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
                    BYTE1(v152) = v172;
                    LOBYTE(v152) = v38;
                    NSString v146 = v176;
                    NSString v147 = v177;
                    NSString v148 = v174;
                    v149 = v169;
                    id v81 = objc_msgSend( v145,  "initWithBundleID:adamID:name:shortName:artwork:supportsGameCenter:supportsArcade:supportsGam eController:deviceFamilies:latestVersionReleaseDate:genreDisplayName:",  v176,  v177,  v174,  v130,  v169,  v173,  v152,  v132.super.isa,  isa,  v143);

                    sub_100131288(v167, &qword_1002B8168);
                    return v81;
                  }
                }

                else
                {
                  sub_1001323F8(v140, &qword_1002B8E90);
                }

                NSString v143 = 0LL;
                goto LABEL_92;
              }

              sub_100132528((uint64_t)&v185);
              uint64_t v83 = (__int128 *)v181;
            }

            else
            {
              uint64_t v83 = &v183;
            }

            sub_100131288((uint64_t)v83, &qword_1002B8E90);
            goto LABEL_54;
          }

          sub_100132528((uint64_t)&v186);
          goto LABEL_32;
        }

        sub_100132528((uint64_t)&v186);
      }

      swift_bridgeObjectRelease(v170, v53);
    }

    uint64_t v71 = swift_bridgeObjectRelease(v171, v49);
    sub_100132454(v71, v72);
    swift_bridgeObjectRelease(v177, v73);
    swift_bridgeObjectRelease(v178, v74);
    uint64_t v76 = swift_bridgeObjectRelease(v179, v75);
    uint64_t v78 = sub_100132324(v76, v77);
    sub_1001322A0(v78, v79);
    uint64_t v68 = v8;
  }

  else
  {
    uint64_t v68 = a1;
  }

  uint64_t v80 = swift_bridgeObjectRelease(v68, v5);
  sub_1001323F8(v80, &qword_1002B8E90);
  return 0LL;
}

  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

id sub_100130C5C()
{
  id result = [objc_allocWithZone(NSISO8601DateFormatter) init];
  qword_1002B8270 = (uint64_t)result;
  return result;
}

void sub_100130C8C( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = v14;
  NSString v20 = String._bridgeToObjectiveC()();
  sub_100132768((uint64_t)v20, v21);
  if (a6)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6, v23);
  }

  else
  {
    NSString v22 = 0LL;
  }

  if (a8)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a8, v25);
  }

  else
  {
    NSString v24 = 0LL;
  }

  if (a10)
  {
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a10, v27);
  }

  else
  {
    NSString v26 = 0LL;
  }

  if (!a12)
  {
    NSString v28 = 0LL;
    if (a14) {
      goto LABEL_12;
    }
LABEL_14:
    NSString v30 = 0LL;
    goto LABEL_15;
  }

  NSString v28 = String._bridgeToObjectiveC()();
  sub_100132768((uint64_t)v28, v29);
  if (!a14) {
    goto LABEL_14;
  }
LABEL_12:
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a14, v31);
LABEL_15:
  [v15 initWithTemplateURL:v20 width:a3 height:a4 textColor1:v22 textColor2:v24 textColor3:v26 textColor4:v28 backgroundColor:v30];

  sub_1001327B0();
}

uint64_t sub_100130E04(uint64_t result, _BYTE **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100130E14()
{
  uint64_t v0 = swift_task_alloc(dword_1002B82BC);
  uint64_t v1 = (void *)sub_100132570(v0);
  sub_1001324BC(v1);
  sub_1001326EC();
  return sub_10012F25C(v2, v3, v4, v5, v6, v7, v8);
}

void sub_100130E80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10013260C(a1, a2, a3);
  sub_100132814(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_100132514();
}

unint64_t sub_100130EB0()
{
  unint64_t result = qword_1002B82E0;
  if (!qword_1002B82E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GameIdentifierType,  &type metadata for GameIdentifierType);
    atomic_store(result, (unint64_t *)&qword_1002B82E0);
  }

  return result;
}

unint64_t sub_100130EF0()
{
  unint64_t result = qword_1002B82E8;
  if (!qword_1002B82E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppMetadataFetcher.FetcherError,  &type metadata for AppMetadataFetcher.FetcherError);
    atomic_store(result, (unint64_t *)&qword_1002B82E8);
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for GameIdentifierType(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t sub_100130F44(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100130F4C(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

void type metadata accessor for GameIdentifierType()
{
}

uint64_t getEnumTagSinglePayload for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t _s14GameDaemonCore18GameIdentifierTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100131038 + 4 * byte_1001F3135[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10013106C + 4 * asc_1001F3130[v4]))();
}

uint64_t sub_10013106C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100131074(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10013107CLL);
  }
  return result;
}

uint64_t sub_100131088(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100131090LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100131094(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013109C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for AppMetadataFetcher.FetcherError()
{
}

void *initializeBufferWithCopyOfBuffer for AppMetadataNetworkFetcher(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for AppMetadataNetworkFetcher(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 8));
}

void *assignWithCopy for AppMetadataNetworkFetcher(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

__n128 initializeWithTake for AppMetadataNetworkFetcher(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for AppMetadataNetworkFetcher(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppMetadataNetworkFetcher(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(sub_1001323F0(v0[31], v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_1001323F0(v0[31], v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppMetadataNetworkFetcher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for AppMetadataNetworkFetcher()
{
}

uint64_t sub_1001311E8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  char v8 = *(_BYTE *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = swift_task_alloc(dword_1002B8334);
  uint64_t v12 = (void *)sub_100132570(v11);
  *uint64_t v12 = v2;
  v12[1] = sub_1001321AC;
  return sub_10012ED50(a1, v4, v5, v6, v7, v8, v9, v10);
}

void sub_100131288(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_100129274(a2);
  sub_1001327B8(*(void *)(v2 - 8));
  sub_100132514();
}

Swift::Int sub_1001312B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100129274(&qword_1002B8388);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_42;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  if (!v11) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    NSString v24 = *(void **)(*(void *)(v5 + 56) + 8 * i);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v21[1]);
      id v25 = v24;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v23, v22);
    Swift::Int result = Hasher._finalize()();
    uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v12 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    unint64_t v29 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v12 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
    uint64_t v34 = (void *)(*(void *)(v8 + 48) + 16 * v29);
    *uint64_t v34 = v23;
    v34[1] = v22;
    *(void *)(*(void *)(v8 + 56) + 8 * v29) = v24;
    ++*(void *)(v8 + 16);
    if (v11) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      goto LABEL_44;
    }
    if (v17 >= v37)
    {
      swift_release(v5);
      uint64_t v3 = v36;
      uint64_t v18 = (void *)(v5 + 64);
      goto LABEL_37;
    }

    uint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v38 + 8 * v17);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v37) {
        goto LABEL_35;
      }
      unint64_t v19 = *(void *)(v38 + 8 * v14);
      if (!v19) {
        break;
      }
    }

uint64_t sub_1001315B4(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a1 = a4;
  swift_bridgeObjectRetain(a3);
  id v6 = a4;
  return a2;
}

uint64_t sub_1001315F8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v22, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v8 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v9 = v6 & ~v8;
  if (((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5, v7);
    return 0LL;
  }

  uint64_t v10 = *(void *)(v5 + 48);
  unint64_t v11 = (void *)(v10 + 16 * v9);
  uint64_t v7 = v11[1];
  BOOL v12 = *v11 == a1 && v7 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v7, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v18 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v18;
      if (((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_18;
      }
      unint64_t v19 = (void *)(v10 + 16 * v9);
      uint64_t v7 = v19[1];
      BOOL v20 = *v19 == a1 && v7 == a2;
    }

    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v7, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease(v5, v7);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v22[0] = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001387B0();
    uint64_t v14 = v22[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v9);
  sub_10013197C(v9);
  uint64_t v16 = *v2;
  *uint64_t v2 = v22[0];
  swift_bridgeObjectRelease(v16, v17);
  return v15;
}

void sub_100131784(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v32, *(void *)(*v2 + 40));
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v32, v6, v7);
  swift_bridgeObjectRelease(v7, v8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain(v10);
  uint64_t v11 = String.hash(into:)(v32, v9, v10);
  sub_100132768(v11, v12);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v15 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v16 = v13 & ~v15;
  uint64_t v17 = v5 + 56;
  if (((*(void *)(v5 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v29 = v5;
    char v30 = a2;
    a1 = ~v15;
    uint64_t v5 = *(void *)(v5 + 48);
    while (1)
    {
      uint64_t v18 = (void *)(v5 + 40 * v16);
      uint64_t v19 = v18[1];
      uint64_t v20 = v18[2];
      uint64_t v21 = v18[3];
      BOOL v22 = *v18 == v6 && v19 == v7;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, v6, v7, 0LL) & 1) != 0)
      {
        BOOL v23 = v20 == v9 && v21 == v10;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v9, v10, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v16 = (v16 + 1) & a1;
      if (((*(void *)(v17 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v29, v19);
        sub_100132704();
        a2 = v30;
        goto LABEL_19;
      }
    }

    swift_bridgeObjectRelease(v29, v19);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    uint64_t v25 = *v31;
    v32[0] = *v31;
    *unint64_t v31 = 0x8000000000000000LL;
    a2 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100138908();
      uint64_t v25 = v32[0];
    }

    uint64_t v26 = *(void *)(v25 + 48) + 40 * v16;
    a1 = *(void *)v26;
    uint64_t v17 = *(void *)(v26 + 8);
    uint64_t v5 = *(void *)(v26 + 16);
    uint64_t v6 = *(void *)(v26 + 24);
    uint64_t v7 = *(void *)(v26 + 32);
    sub_100131CA4(v16);
    uint64_t v27 = *v31;
    *unint64_t v31 = v32[0];
    swift_bridgeObjectRelease(v27, v28);
  }

  else
  {
    swift_bridgeObjectRelease(v5, v14);
    sub_100132704();
  }

unint64_t sub_10013197C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v25, *(void *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v25, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12, v14);
        Swift::Int v15 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v15 >= v9 && v2 >= v15)
          {
LABEL_15:
            uint64_t v18 = *(void *)(v3 + 48);
            uint64_t v19 = (_OWORD *)(v18 + 16 * v2);
            uint64_t v20 = (_OWORD *)(v18 + 16 * v6);
            BOOL v21 = v2 != v6 || v19 >= v20 + 1;
            int64_t v2 = v6;
            if (v21)
            {
              *uint64_t v19 = *v20;
              int64_t v2 = v6;
            }
          }
        }

        else if (v15 >= v9 || v2 >= v15)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    Swift::Int result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v22 = *(void *)(v3 + 16);
  BOOL v23 = __OFSUB__(v22, 1LL);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v24;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_100131B34()
{
  _Block_release(*(const void **)(v0 + 48));
  _Block_release(*(const void **)(v0 + 56));

  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100131B78()
{
  uint64_t v2 = *((void *)v0 + 2);
  uint64_t v3 = *((void *)v0 + 3);
  uint64_t v4 = *((void *)v0 + 4);
  double v5 = v0[5];
  unint64_t v6 = (void *)*((void *)v0 + 6);
  uint64_t v7 = (const void *)*((void *)v0 + 7);
  uint64_t v8 = (void *)*((void *)v0 + 8);
  unint64_t v9 = (void *)swift_task_alloc(dword_1002B834C);
  *(void *)(v1 + 16) = v9;
  *unint64_t v9 = v1;
  v9[1] = sub_100131C10;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, const void *, void *, double))((char *)&dword_1002B8348
                                                                                                  + dword_1002B8348))( v2,  v3,  v4,  v6,  v7,  v8,  v5);
}

uint64_t sub_100131C10()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100131C3C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100131C60(uint64_t a1)
{
}

unint64_t sub_100131C68()
{
  unint64_t result = qword_1002B8360;
  if (!qword_1002B8360)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppMetadataFetcher.FetcherError,  &type metadata for AppMetadataFetcher.FetcherError);
    atomic_store(result, &qword_1002B8360);
  }

  return result;
}

unint64_t sub_100131CA4(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      uint64_t v9 = (v8 + 1) & v7;
      uint64_t v38 = v4;
      do
      {
        uint64_t v10 = *(void *)(v3 + 40);
        uint64_t v11 = v3;
        uint64_t v12 = (uint64_t *)(*(void *)(v3 + 48) + 40 * v6);
        uint64_t v13 = *v12;
        uint64_t v14 = v12[1];
        uint64_t v15 = v7;
        uint64_t v16 = v12[2];
        uint64_t v17 = v12[3];
        uint64_t v18 = (void *)v12[4];
        unint64_t v19 = v9;
        Hasher.init(_seed:)(v39, v10);
        id v20 = v18;
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v17);
        String.hash(into:)(v39, v13, v14);
        swift_bridgeObjectRetain(v17);
        uint64_t v21 = v16;
        uint64_t v7 = v15;
        String.hash(into:)(v39, v21, v17);
        swift_bridgeObjectRelease(v17, v22);
        Swift::Int v23 = Hasher._finalize()();

        swift_bridgeObjectRelease(v17, v24);
        swift_bridgeObjectRelease(v14, v25);
        uint64_t v9 = v19;
        Swift::Int v26 = v23 & v15;
        if (v2 >= (uint64_t)v19)
        {
          if (v26 >= v19 && v2 >= v26)
          {
LABEL_9:
            uint64_t v3 = v11;
            uint64_t v28 = *(void *)(v11 + 48);
            unint64_t v29 = v28 + 40 * v2;
            char v30 = (__int128 *)(v28 + 40 * v6);
            BOOL v31 = v2 != v6 || v29 >= (unint64_t)v30 + 40;
            int64_t v2 = v6;
            uint64_t v4 = v38;
            if (v31)
            {
              __int128 v32 = *v30;
              __int128 v33 = v30[1];
              *(void *)(v29 + 32) = *((void *)v30 + 4);
              *(_OWORD *)unint64_t v29 = v32;
              *(_OWORD *)(v29 + 16) = v33;
              int64_t v2 = v6;
            }

            goto LABEL_21;
          }
        }

        else if (v26 >= v19 || v2 >= v26)
        {
          goto LABEL_9;
        }

        uint64_t v4 = v38;
        uint64_t v3 = v11;
LABEL_21:
        unint64_t v6 = (v6 + 1) & v15;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    unint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v35 = *(void *)(v3 + 16);
  BOOL v36 = __OFSUB__(v35, 1LL);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v37;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_100131EE0()
{
  return swift_deallocObject(v0, 57LL, 7LL);
}

uint64_t sub_100131F14()
{
  uint64_t v1 = swift_task_alloc(dword_1002B836C);
  int64_t v2 = (void *)sub_100132570(v1);
  *int64_t v2 = v0;
  v2[1] = sub_1001321A0;
  sub_1001326EC();
  return sub_10012FCC0(v3, v4, v5, v6, v7, v8, v9);
}

void sub_100131F98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10013260C(a1, a2, a3);
  sub_100132814(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_100132514();
}

uint64_t sub_100131FC4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001315B4(&v6, *(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16));
  uint64_t v4 = v6;
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  return result;
}

uint64_t sub_100132004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v8 = -1LL;
  }
  a4[3] = 0LL;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_100132040(uint64_t result, uint64_t a2)
{
  if (result != 1) {
    return swift_bridgeObjectRelease(result, a2);
  }
  return result;
}

uint64_t sub_100132050(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100132060()
{
  uint64_t v0 = swift_task_alloc(dword_1002B839C);
  uint64_t v1 = (void *)sub_100132570(v0);
  sub_1001322F4(v1);
  sub_1001322D8();
  return sub_10012DDF0(v2, v10, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1001320B0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40), v1);
  swift_release(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_1001320EC()
{
  uint64_t v0 = swift_task_alloc(dword_1002B83AC);
  uint64_t v1 = (void *)sub_100132570(v0);
  sub_1001322F4(v1);
  sub_1001322D8();
  return sub_10012E03C(v2, v10, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100132138()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_10013215C()
{
  unint64_t result = qword_1002B83C0;
  if (!qword_1002B83C0)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002B8390);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ThrowingTaskGroup<A, B>.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_1002B83C0);
  }

  return result;
}

uint64_t sub_1001321D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 184, v5 - 128, v4 + 8, a4, 6LL);
}

uint64_t sub_1001321E4()
{
  return AnyHashable.init<A>(_:)(v0 - 184);
}

uint64_t sub_1001321F0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_100132200()
{
  return swift_dynamicCast(v2 - 184, v2 - 128, v0 + 8, v1, 6LL);
}

void sub_100132218()
{
}

uint64_t sub_100132228()
{
  return sub_10012A92C(v0 - 168);
}

uint64_t sub_100132230()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

void sub_10013223C()
{
}

uint64_t sub_10013224C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100132258()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

  ;
}

void sub_100132284()
{
}

uint64_t sub_100132294(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t sub_1001322A0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

void sub_1001322A8()
{
  *(void *)(v0 + 8 * (v3 >> 6) + 64) |= 1LL << v3;
  uint64_t v4 = (void *)(*(void *)(v0 + 48) + 16 * v3);
  *uint64_t v4 = v2;
  v4[1] = v1;
}

  ;
}

double sub_1001322F4(void *a1)
{
  *a1 = v2;
  a1[1] = v1;
  return v3;
}

uint64_t sub_100132324(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

  ;
}

uint64_t sub_100132348()
{
  return AnyHashable.init<A>(_:)(v0 - 128);
}

uint64_t sub_100132354()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 80);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 88) = v0;
  return swift_task_dealloc(v5);
}

  ;
}

uint64_t sub_100132388@<X0>(uint64_t a1@<X8>)
{
  **(void **)(v1 + 16) = a1;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

id sub_10013239C(void *a1)
{
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = v5;
  a1[5] = v2;
  a1[6] = v4;
  a1[7] = v6;
  a1[8] = v3;
  a1[9] = v1;
  return v5;
}

  ;
}

uint64_t sub_1001323D4()
{
  return type metadata accessor for TaskPriority(0LL);
}

uint64_t sub_1001323F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  return swift_task_dealloc(a1);
}

void sub_1001323F8(uint64_t a1, uint64_t *a2)
{
}

unint64_t sub_100132400()
{
  return sub_10014A480(v1, v0);
}

  ;
}

uint64_t sub_100132428()
{
  return swift_errorRelease(v0);
}

uint64_t sub_100132430()
{
  return v0;
}

uint64_t sub_100132454(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

void sub_10013245C(uint64_t a1@<X8>)
{
  *(void *)(v2 - 184) = a1;
  *(void *)(v2 - 176) = (v1 - 32) | 0x8000000000000000LL;
}

uint64_t sub_10013246C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void sub_10013248C()
{
  *(void *)(v1 - 8) = *v0;
}

  ;
}

uint64_t sub_1001324B0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  return sub_10012E464(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1001324BC(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1001324DC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t sub_1001324F4()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1001324FC(uint64_t a1)
{
  return sub_1001291F8(v1, 1LL, 1LL, a1);
}

  ;
}

uint64_t sub_10013251C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001291F8(a1, 1LL, 1LL, a4);
}

void sub_100132528(uint64_t a1@<X8>)
{
}

uint64_t sub_100132530(uint64_t result)
{
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = v3;
  *(void *)(result + 40) = v2;
  *(void *)(result + 48) = v1;
  *(_BYTE *)(result + 56) = v4;
  return result;
}

  ;
}

uint64_t sub_100132568()
{
  return type metadata accessor for TaskPriority(0LL);
}

uint64_t sub_100132570(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_10013257C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_100132584(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10013258C()
{
  return swift_retain(v2);
}

uint64_t sub_1001325B0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(*(void *)(v2 + 208), a2);
}

uint64_t sub_1001325C4(uint64_t a1, uint64_t a2)
{
  return sub_100129604(a1, a2);
}

uint64_t sub_1001325CC(uint64_t a1)
{
  return swift_retain(*(void *)(*(void *)(v1 + 56) + 8 * a1));
}

uint64_t sub_1001325D8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1001325E0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

  ;
}

void sub_100132600(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10013260C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100129274(a3);
}

uint64_t sub_10013261C()
{
  return v0;
}

uint64_t sub_10013262C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(0x8000000000000000LL, a2);
}

size_t sub_100132634(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / 16);
  return result;
}

  ;
}

  ;
}

void sub_100132694(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= 1LL << v1;
}

uint64_t sub_1001326AC()
{
  return dispatch thunk of Actor.unownedExecutor.getter(v1, v0);
}

uint64_t sub_1001326BC()
{
  return swift_unknownObjectRelease(v0);
}

unint64_t sub_1001326CC()
{
  return sub_10014A480(v1, v0);
}

uint64_t sub_1001326DC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

  ;
}

void sub_10013271C(char a1, uint64_t a2)
{
}

  ;
}

uint64_t sub_100132730@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRetain(v2);
}

void sub_10013273C()
{
}

  ;
}

BOOL sub_10013275C()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

uint64_t sub_100132768(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

  ;
}

uint64_t sub_100132784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_task_create(v5, a2, a3, a4, v4);
}

uint64_t sub_100132790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL);
}

void sub_10013279C()
{
  *(void *)(v1 - 8) = *v0;
}

  ;
}

uint64_t sub_1001327B8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

void sub_1001327C4()
{
  *(void *)(v0 + 104) = 1LL;
}

uint64_t sub_1001327D8(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_100129640(0LL, a2, a3);
}

void sub_1001327E0(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)(a1 + 8 * v2);
  *(void *)(a1 + 8 * sub_1001323F0(v0[31], v2) = v1;
}

uint64_t sub_1001327EC()
{
  return swift_getObjectType(v0);
}

void sub_1001327F8()
{
}

uint64_t sub_100132800()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10013280C()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_100132814@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100132820(uint64_t a1, uint64_t a2)
{
  return sub_10012DEB0(v2, a2, v3);
}

Swift::Int sub_10013282C(uint64_t a1)
{
  return sub_1001312B8(a1, v1 & 1);
}

  ;
}

void sub_10013284C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100132858(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

NSString sub_100132860()
{
  return String._bridgeToObjectiveC()();
}

unint64_t sub_100132868(uint64_t a1, uint64_t a2)
{
  return sub_10014A480(a1, a2);
}

uint64_t sub_100132870(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001328A8 + 4 * byte_1001F3300[a1]))( 0xD000000000000014LL,  0x800000010024B450LL);
}

uint64_t sub_1001328A8()
{
  return 0x64656D6167LL;
}

uint64_t sub_1001328BC()
{
  return 0x746E6543656D6147LL;
}

uint64_t sub_1001328DC()
{
  return 0x7265764F656D6167LL;
}

uint64_t sub_100132900()
{
  return 0x616C7069746C754DLL;
}

uint64_t sub_100132920(char a1)
{
  return *(void *)&a1688540[8 * a1];
}

unint64_t sub_100132938(unsigned __int8 a1)
{
  int v2 = a1;
  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease(0xE000000000000000LL, v3);
  v4._countAndFlagsBits = sub_100132870(a1);
  String.append(_:)(v4);
  sub_10012B950(v5, v6);
  v7._countAndFlagsBits = 2570LL;
  v7._object = (void *)0xE200000000000000LL;
  String.append(_:)(v7);
  if (v2 == 4) {
    unint64_t v8 = 0xD0000000000000C5LL;
  }
  else {
    unint64_t v8 = 0xD000000000000065LL;
  }
  if (v2 == 4) {
    unint64_t v9 = 0x800000010024B380LL;
  }
  else {
    unint64_t v9 = 0x800000010024B310LL;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  sub_10012B950(v11, v12);
  return 0xD000000000000010LL;
}

id GameDaemonTTR.__allocating_init(clientProxyBundleIdentifier:localPlayer:)(uint64_t a1, void *a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return GameDaemonTTR.init(clientProxyBundleIdentifier:localPlayer:)(a1, a2, a3);
}

id GameDaemonTTR.init(clientProxyBundleIdentifier:localPlayer:)(uint64_t a1, void *a2, void *a3)
{
  id v7 = (uint64_t *)&v3[OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_clientProxyBundleIdentifier];
  *id v7 = a1;
  v7[1] = (uint64_t)a2;
  *(void *)&v3[OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_localPlayer] = a3;
  v47.receiver = v3;
  v47.Class super_class = (Class)type metadata accessor for GameDaemonTTR();
  Class super_class = v47.super_class;
  swift_bridgeObjectRetain(a2);
  id v8 = a3;
  id v9 = objc_msgSendSuper2(&v47, "init");
  os_log_type_t v10 = static os_log_type_t.default.getter();
  v46[0] = 0LL;
  v46[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(64LL);
  v11._countAndFlagsBits = 0xD000000000000029LL;
  v11._object = (void *)0x800000010024B0F0LL;
  String.append(_:)(v11);
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(a2, v13);
  v14._object = (void *)0x800000010024B120LL;
  v14._countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v14);
  id v15 = [v8 description];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18, v20);
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_1001296C0();
  uint64_t v25 = v24 - v23;
  static GKLog.daemon.getter(v26);
  uint64_t v27 = sub_100135A20(0xE000000000000000LL);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  if (os_log_type_enabled(v28, v10))
  {
    uint64_t v43 = v21;
    unint64_t v29 = (uint8_t *)sub_10012CE30(12LL);
    id v44 = v9;
    uint64_t v30 = sub_10012CE30(32LL);
    v46[0] = v30;
    *(_DWORD *)unint64_t v29 = 136315138;
    swift_bridgeObjectRetain(0xE000000000000000LL);
    uint64_t v31 = sub_100135074(0LL, 0xE000000000000000LL, v46);
    uint64_t v32 = sub_100135980(v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v33);
    sub_100135A44(0xE000000000000000LL);
    sub_10012CE90((void *)&_mh_execute_header, v28, v10, "TTR - %s", v29);
    sub_10012CE88(v30, v34, (uint64_t)&type metadata for Any + 8);
    uint64_t v35 = v30;
    id v9 = v44;
    sub_10012CE24(v35);
    sub_10012CE24((uint64_t)v29);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v25, v43);
  }

  else
  {

    sub_100135A28(0xE000000000000000LL);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v25, v21);
  }

  swift_bridgeObjectRelease(0xE000000000000000LL, v36);
  if (&class metadata base offset for TapToRadarService) {
    BOOL v37 = &type metadata accessor for TapToRadarService == 0LL;
  }
  else {
    BOOL v37 = 1;
  }
  if (v37 || &type metadata for TapToRadarService == 0LL || &nominal type descriptor for TapToRadarService == 0LL)
  {
  }

  else
  {
    type metadata accessor for TapToRadarService(0LL);
    uint64_t v40 = (void *)static TapToRadarService.shared.getter();
    v46[3] = (uint64_t)super_class;
    v46[4] = sub_100132DA4();
    v46[0] = (uint64_t)v9;
    id v41 = v9;
    TapToRadarService.draftObserver.setter(v46);
  }

  return v9;
}

uint64_t type metadata accessor for GameDaemonTTR()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCore13GameDaemonTTR);
}

unint64_t sub_100132DA4()
{
  unint64_t result = qword_1002B83D8;
  if (!qword_1002B83D8)
  {
    uint64_t v1 = type metadata accessor for GameDaemonTTR();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GameDaemonTTR, v1);
    atomic_store(result, (unint64_t *)&qword_1002B83D8);
  }

  return result;
}

Swift::String_optional __swiftcall GameDaemonTTR.getURLForNewMultiplayerRadar(callbackIdentifier:descriptionAddition:)( Swift::String_optional callbackIdentifier, Swift::String_optional descriptionAddition)
{
  object = descriptionAddition.value._object;
  uint64_t countAndFlagsBits = descriptionAddition.value._countAndFlagsBits;
  Swift::String v4 = callbackIdentifier.value._object;
  uint64_t v5 = callbackIdentifier.value._countAndFlagsBits;
  uint64_t v6 = sub_100129274(&qword_1002B9D00);
  __chkstk_darwin(v6);
  sub_1001296C0();
  uint64_t v9 = v8 - v7;
  sub_100132F20(4, v5, (unint64_t)v4, countAndFlagsBits, (uint64_t)object, v8 - v7);
  uint64_t v10 = type metadata accessor for URL(0LL);
  if (sub_10012B4E8(v9, 1LL, v10) == 1)
  {
    sub_10013519C(v9, &qword_1002B9D00);
    uint64_t v11 = 0LL;
    Swift::String v12 = 0LL;
  }

  else
  {
    uint64_t v11 = URL.absoluteString.getter();
    Swift::String v12 = v13;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  }

  uint64_t v14 = v11;
  id v15 = v12;
  result.value._object = v15;
  result.value._uint64_t countAndFlagsBits = v14;
  return result;
}

uint64_t sub_100132F20@<X0>( int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v113 = a4;
  uint64_t v114 = a2;
  unint64_t v115 = a3;
  uint64_t v116 = a6;
  int v119 = a1;
  uint64_t v7 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  URLQueryItem.init(name:value:)(0x6966697373616C43LL, 0xEE006E6F69746163LL, 0x2073756F69726553LL, 0xEB00000000677542LL);
  sub_100169878(0, 1LL, 1, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = v11;
  unint64_t v14 = *(void *)(v11 + 16);
  unint64_t v13 = *(void *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    sub_100169878(v13 > 1, v14 + 1, 1, v11);
    uint64_t v12 = v103;
  }

  *(void *)(v12 + 16) = v14 + 1;
  unint64_t v120 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = *(void *)(v8 + 72);
  unint64_t v16 = v12 + v120 + v15 * v14;
  uint64_t v17 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v18 = v17(v16, (char *)&v113 - v10, v7);
  __chkstk_darwin(v18);
  Swift::String v19 = (char *)&v113 - v10;
  if (v119 >= 2u)
  {
    if (v119 == 2)
    {
      unint64_t v20 = 0xE700000000000000LL;
      uint64_t v21 = 0x30383934363331LL;
    }

    else
    {
      unint64_t v20 = 0xE600000000000000LL;
      uint64_t v21 = 0x383634303336LL;
    }
  }

  else
  {
    unint64_t v20 = 0xE700000000000000LL;
    uint64_t v21 = 0x36303634373431LL;
  }

  URLQueryItem.init(name:value:)(0x6E656E6F706D6F43LL, 0xEB00000000444974LL, v21, v20);
  swift_bridgeObjectRelease(v20, v22);
  unint64_t v24 = *(void *)(v12 + 16);
  unint64_t v23 = *(void *)(v12 + 24);
  if (v24 >= v23 >> 1)
  {
    sub_100169878(v23 > 1, v24 + 1, 1, v12);
    uint64_t v12 = v104;
  }

  *(void *)(v12 + 16) = v24 + 1;
  uint64_t v118 = v17;
  uint64_t v25 = v17(v12 + v120 + v24 * v15, v19, v7);
  __chkstk_darwin(v25);
  unint64_t v26 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  URLQueryItem.init(name:value:)(0x6E656E6F706D6F43LL, 0xED0000656D614E74LL, 0x6E654320656D6147LL, 0xEB00000000726574LL);
  unint64_t v28 = *(void *)(v12 + 16);
  unint64_t v27 = *(void *)(v12 + 24);
  if (v28 >= v27 >> 1)
  {
    sub_100169878(v27 > 1, v28 + 1, 1, v12);
    uint64_t v12 = v105;
  }

  *(void *)(v12 + 16) = v28 + 1;
  unint64_t v29 = v12 + v120 + v28 * v15;
  uint64_t v30 = v118;
  uint64_t v31 = v118(v29, (char *)&v113 - v26, v7);
  __chkstk_darwin(v31);
  uint64_t v32 = (char *)&v113 - v26;
  if (v119 >= 2u)
  {
    if (v119 == 2)
    {
      unint64_t v33 = 0xE200000000000000LL;
      uint64_t v34 = 18773LL;
    }

    else
    {
      unint64_t v33 = 0xE800000000000000LL;
      uint64_t v34 = 0x736775422077654ELL;
    }
  }

  else
  {
    unint64_t v33 = 0xEA00000000006E6FLL;
    uint64_t v34 = 0x697461646E756F46LL;
  }

  URLQueryItem.init(name:value:)(0xD000000000000010LL, 0x800000010024B250LL, v34, v33);
  swift_bridgeObjectRelease(v33, v35);
  unint64_t v37 = *(void *)(v12 + 16);
  unint64_t v36 = *(void *)(v12 + 24);
  if (v37 >= v36 >> 1)
  {
    sub_100169878(v36 > 1, v37 + 1, 1, v12);
    uint64_t v12 = v106;
  }

  *(void *)(v12 + 16) = v37 + 1;
  uint64_t v117 = v15;
  uint64_t v38 = v30(v12 + v120 + v37 * v15, v32, v7);
  __chkstk_darwin(v38);
  unint64_t v39 = sub_100132938(v119);
  unint64_t v41 = v40;
  unint64_t v122 = 0LL;
  unint64_t v123 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(27LL);
  swift_bridgeObjectRelease(v123, v42);
  unint64_t v122 = 0xD000000000000019LL;
  unint64_t v123 = 0x800000010024B270LL;
  if (a5)
  {
    v121[0] = v113;
    v121[1] = a5;
    swift_bridgeObjectRetain(a5);
    uint64_t v43 = String.init<A>(reflecting:)(v121, &type metadata for String);
    unint64_t v45 = v44;
  }

  else
  {
    unint64_t v45 = 0xE300000000000000LL;
    uint64_t v43 = 7104878LL;
  }

  unint64_t v46 = v45;
  String.append(_:)(*(Swift::String *)&v43);
  swift_bridgeObjectRelease(v45, v47);
  uint64_t v49 = v122;
  uint64_t v48 = (void *)v123;
  unint64_t v122 = v39;
  unint64_t v123 = v41;
  swift_bridgeObjectRetain(v41);
  v50._uint64_t countAndFlagsBits = v49;
  v50._object = v48;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v41, v51);
  swift_bridgeObjectRelease(v48, v52);
  unint64_t v53 = v123;
  URLQueryItem.init(name:value:)(0x7470697263736544LL, 0xEB000000006E6F69LL, v122, v123);
  swift_bridgeObjectRelease(v53, v54);
  unint64_t v56 = *(void *)(v12 + 16);
  unint64_t v55 = *(void *)(v12 + 24);
  if (v56 >= v55 >> 1)
  {
    sub_100169878(v55 > 1, v56 + 1, 1, v12);
    uint64_t v12 = v107;
  }

  uint64_t v57 = v117;
  uint64_t v58 = v118;
  *(void *)(v12 + 16) = v56 + 1;
  uint64_t v59 = v58(v12 + v120 + v56 * v57, (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL), v7);
  __chkstk_darwin(v59);
  unint64_t v60 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  URLQueryItem.init(name:value:)(0xD00000000000001ALL, 0x800000010024B290LL, 49LL, 0xE100000000000000LL);
  unint64_t v62 = *(void *)(v12 + 16);
  unint64_t v61 = *(void *)(v12 + 24);
  if (v62 >= v61 >> 1)
  {
    sub_100169878(v61 > 1, v62 + 1, 1, v12);
    uint64_t v12 = v108;
  }

  *(void *)(v12 + 16) = v62 + 1;
  uint64_t v63 = v117;
  uint64_t v64 = v58(v12 + v120 + v62 * v117, (char *)&v113 - v60, v7);
  __chkstk_darwin(v64);
  uint64_t v65 = (char *)&v113 - v60;
  uint64_t v66 = sub_100132920(v119);
  URLQueryItem.init(name:value:)(0x7364726F7779654BLL, 0xE800000000000000LL, v66, 0xE700000000000000LL);
  swift_bridgeObjectRelease(0xE700000000000000LL, v67);
  unint64_t v69 = *(void *)(v12 + 16);
  unint64_t v68 = *(void *)(v12 + 24);
  if (v69 >= v68 >> 1)
  {
    sub_100169878(v68 > 1, v69 + 1, 1, v12);
    uint64_t v12 = v109;
  }

  *(void *)(v12 + 16) = v69 + 1;
  uint64_t v70 = v58(v12 + v120 + v69 * v63, v65, v7);
  __chkstk_darwin(v70);
  URLQueryItem.init(name:value:)(0x6375646F72706552LL, 0xEF7974696C696269LL, 0x6C70704120746F4ELL, 0xEE00656C62616369LL);
  unint64_t v72 = *(void *)(v12 + 16);
  unint64_t v71 = *(void *)(v12 + 24);
  if (v72 >= v71 >> 1)
  {
    sub_100169878(v71 > 1, v72 + 1, 1, v12);
    uint64_t v12 = v110;
  }

  *(void *)(v12 + 16) = v72 + 1;
  uint64_t v73 = v58(v12 + v120 + v72 * v63, (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL), v7);
  if (v115)
  {
    uint64_t v74 = HIBYTE(v115) & 0xF;
    if ((v115 & 0x2000000000000000LL) == 0) {
      uint64_t v74 = v114 & 0xFFFFFFFFFFFFLL;
    }
    if (v74)
    {
      __chkstk_darwin(v73);
      URLQueryItem.init(name:value:)(0xD000000000000012LL, 0x800000010024B2D0LL, v75, v76);
      unint64_t v78 = *(void *)(v12 + 16);
      unint64_t v77 = *(void *)(v12 + 24);
      if (v78 >= v77 >> 1)
      {
        sub_100169878(v77 > 1, v78 + 1, 1, v12);
        uint64_t v12 = v112;
      }

      *(void *)(v12 + 16) = v78 + 1;
      v58(v12 + v120 + v78 * v63, (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL), v7);
    }
  }

  id v79 = [objc_allocWithZone(NSDateFormatter) init];
  sub_10012B4F4(0xD000000000000013LL, 0x800000010024B2B0LL, v79);
  uint64_t v80 = type metadata accessor for Date(0LL);
  uint64_t v81 = *(void *)(v80 - 8);
  uint64_t v82 = __chkstk_darwin(v80);
  int64_t v84 = (char *)&v113 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Date.init()(v82);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v81 + 8))(v84, v80);
  id v86 = [v79 stringFromDate:isa];

  uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
  uint64_t v89 = v88;

  __chkstk_darwin(v90);
  uint64_t v91 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URLQueryItem.init(name:value:)(0x7349664F656D6954LL, 0xEB00000000657573LL, v87, v89);
  swift_bridgeObjectRelease(v89, v92);
  unint64_t v94 = *(void *)(v12 + 16);
  unint64_t v93 = *(void *)(v12 + 24);
  if (v94 >= v93 >> 1)
  {
    sub_100169878(v93 > 1, v94 + 1, 1, v12);
    uint64_t v12 = v111;
  }

  v95 = (void (*)(unint64_t, char *, uint64_t))v118;
  *(void *)(v12 + 16) = v94 + 1;
  v95(v12 + v120 + v94 * v63, v91, v7);
  uint64_t v96 = type metadata accessor for URLComponents(0LL);
  uint64_t v97 = *(void *)(v96 - 8);
  uint64_t v98 = __chkstk_darwin(v96);
  uint64_t v100 = (char *)&v113 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URLComponents.init()(v98);
  URLComponents.scheme.setter(0x722D6F742D706174LL, 0xEC00000072616461LL);
  URLComponents.host.setter(7824750LL, 0xE300000000000000LL);
  uint64_t v101 = URLComponents.queryItems.setter(v12);
  URLComponents.url.getter(v101);

  return (*(uint64_t (**)(char *, uint64_t))(v97 + 8))(v100, v96);
}

Swift::String_optional __swiftcall GameDaemonTTR.getURLForExistingMultiplayerRadar(radarID:)(Swift::String radarID)
{
  object = radarID._object;
  uint64_t countAndFlagsBits = radarID._countAndFlagsBits;
  uint64_t v3 = type metadata accessor for URLComponents(0LL);
  __chkstk_darwin(v3);
  sub_1001296C0();
  URLComponents.init()(v4);
  URLComponents.scheme.setter(0x722D6F742D706174LL, 0xEC00000072616461LL);
  swift_bridgeObjectRetain(object);
  URLComponents.host.setter(countAndFlagsBits, object);
  uint64_t v5 = sub_100129274(&qword_1002B9D00);
  __chkstk_darwin(v5);
  sub_1001296C0();
  uint64_t v8 = v7 - v6;
  URLComponents.url.getter(v9);
  uint64_t v10 = type metadata accessor for URL(0LL);
  if (sub_10012B4E8(v8, 1LL, v10) == 1)
  {
    sub_1001359F8();
    sub_10013519C(v8, &qword_1002B9D00);
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v11 = URL.absoluteString.getter();
    uint64_t v12 = v13;
    sub_1001359F8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v8, v10);
  }

  uint64_t v14 = v11;
  uint64_t v15 = v12;
  result.value._object = v15;
  result.value._uint64_t countAndFlagsBits = v14;
  return result;
}

void GameDaemonTTR.init()()
{
}

id GameDaemonTTR.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for GameDaemonTTR();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall GameDaemonTTR.tapToRadarDidFileRadar(_:callbackIdentifier:)( Swift::Int64 _, Swift::String callbackIdentifier)
{
  object = callbackIdentifier._object;
  uint64_t countAndFlagsBits = callbackIdentifier._countAndFlagsBits;
  unint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v179 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  NSString v176 = (char *)&v168 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  sub_1001359DC();
  uint64_t v178 = v8;
  __chkstk_darwin(v9);
  sub_1001359DC();
  sub_1001359A4();
  __chkstk_darwin(v10);
  sub_1001359DC();
  sub_1001359A4();
  __chkstk_darwin(v11);
  sub_1001359DC();
  sub_1001359A4();
  __chkstk_darwin(v12);
  sub_1001359DC();
  sub_1001359A4();
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v16 = (os_log_s *)((char *)&v168 - v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v14);
  aBlock = 0LL;
  unint64_t v185 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(44LL);
  swift_bridgeObjectRelease(v185, v18);
  aBlock = (void **)0xD00000000000001ALL;
  unint64_t v185 = 0x800000010024B160LL;
  NSString v177 = (void **)_;
  *(void *)&__int128 v190 = _;
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  unint64_t v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20, v21);
  v22._uint64_t countAndFlagsBits = 0x61626C6C6163202CLL;
  v22._object = (void *)0xEE00203A44496B63LL;
  String.append(_:)(v22);
  uint64_t v180 = countAndFlagsBits;
  uint64_t v181 = (uint64_t)object;
  v23._uint64_t countAndFlagsBits = countAndFlagsBits;
  v23._object = object;
  String.append(_:)(v23);
  uint64_t v24 = (uint64_t)aBlock;
  unint64_t v25 = v185;
  static GKLog.daemon.getter(v26);
  uint64_t v27 = sub_100135A20(v25);
  unint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  if (os_log_type_enabled(v28, v17))
  {
    uint64_t v29 = sub_10012CE30(12LL);
    unint64_t v173 = v5;
    uint64_t v30 = (uint8_t *)v29;
    uint64_t v31 = sub_10012CE30(32LL);
    aBlock = (void **)v31;
    *(_DWORD *)uint64_t v30 = 136315138;
    swift_bridgeObjectRetain(v25);
    uint64_t v32 = sub_100135074(v24, v25, (uint64_t *)&aBlock);
    uint64_t v33 = sub_100135980(v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, v34);
    sub_100135A44(v25);
    sub_10012CE90((void *)&_mh_execute_header, v28, v17, "TTR - %s", v30);
    sub_10012CE88(v31, v35, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v31);
    uint64_t v36 = (uint64_t)v30;
    unint64_t v5 = v173;
    sub_10012CE24(v36);
  }

  else
  {

    sub_100135A28(v25);
  }

  uint64_t v37 = *(void *)(v179 + 8);
  uint64_t v38 = sub_1001359F0((uint64_t)v16);
  sub_100132768(v38, v39);
  uint64_t v40 = Data.init(base64Encoded:options:)(v180, v181, 0LL);
  if ((unint64_t)v41 >> 60 == 15)
  {
    uint64_t v42 = v178;
    sub_100135A18();
    sub_100135A10();
    os_log_type_t v43 = sub_1001359E8();
    if (sub_100135994(v43))
    {
      unint64_t v44 = (uint8_t *)sub_10012CE30(2LL);
      *(_WORD *)unint64_t v44 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  (os_log_type_t)v28,  "Failed to convert callbackIdentifier to data.",  v44,  2u);
      sub_10012CE24((uint64_t)v44);
    }

id sub_100134AC8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2, v8);
  }

  else
  {
    NSString v7 = 0LL;
  }

  id v9 = [(id)swift_getObjCClassFromMetadata(v4) serviceForBundleID:v7 localPlayer:a3];

  return v9;
}

uint64_t sub_100134B44(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static GKLog.general.getter(v4);
  swift_errorRetain(a1);
  uint64_t v7 = swift_errorRetain(a1);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    if (a1)
    {
      uint64_t v18 = a1;
      swift_errorRetain(a1);
      uint64_t v12 = sub_100129274(&qword_1002B83B8);
      uint64_t v13 = String.init<A>(reflecting:)(&v18, v12);
      unint64_t v15 = v14;
    }

    else
    {
      unint64_t v15 = 0xE300000000000000LL;
      uint64_t v13 = 7104878LL;
    }

    uint64_t v18 = sub_100135074(v13, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease(v15, v16);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to requestTTRLogs due to error: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_100134D2C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

void sub_100134D80(Swift::Int64 a1, uint64_t a2, uint64_t a3)
{
}

id sub_100134DA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2, v9);
  }

  else
  {
    NSString v8 = 0LL;
  }

  if (a4 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100135144(a3, a4);
  }

  id v11 = [v4 initWithPlayerID:v8 pushToken:isa];

  return v11;
}

id sub_100134E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    sub_100129640(0LL, &qword_1002B8438, &OBJC_CLASS___GKTTRMultiplayerParticipant_ptr);
    v9.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1, v10);
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v11 = 0LL;
    if (a5) {
      goto LABEL_4;
    }
LABEL_7:
    NSString v13 = 0LL;
    goto LABEL_8;
  }

  v9.super.Class isa = 0LL;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3, v12);
  if (!a5) {
    goto LABEL_7;
  }
LABEL_4:
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5, v14);
LABEL_8:
  id v15 = [v5 initWithPlayersAndPushTokens:v9.super.isa radarID:v11 requesterAlias:v13];

  return v15;
}

uint64_t sub_100134F40( uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_100134F74(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

uint64_t sub_100134F94(uint64_t (*a1)(void))
{
  return a1();
}

_BYTE **sub_100134FB4(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *Swift::String_optional result = v4 + 1;
  return result;
}

void sub_100134FC4(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *a1 + 8;
  if (v6) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0LL;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  NSArray v9 = *a2;
  if (*a2)
  {
    *NSArray v9 = v7;
    *a2 = v9 + 1;
  }

  else
  {
  }

uint64_t sub_100135074(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100135220(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100129604((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100129604((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_100129678(v12);
  return v7;
}

uint64_t sub_100135144(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100135158(result, a2);
  }
  return result;
}

uint64_t sub_100135158(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10013519C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100129274(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_1001351D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B8E90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_100135220(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100135374((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      Swift::String_optional result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    Swift::String_optional result = sub_100135438(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      Swift::String_optional result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_100135374(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    id v5 = "UnsafeMutableRawPointer.initializeMemory with negative count";
    uint64_t v6 = 60LL;
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    id v5 = "UnsafeMutableRawPointer.initializeMemory overlapping range";
    uint64_t v6 = 58LL;
  }

  Swift::String_optional result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v5,  v6,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL);
  __break(1u);
  return result;
}

void *sub_100135438(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1001354CC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1001356A0(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1001356A0((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_1001354CC(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return _swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
LABEL_6:
  id v5 = sub_10013563C(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    uint64_t v9 = "Insufficient space allocated to copy string contents";
    uint64_t v10 = "Swift/StringUTF8View.swift";
    uint64_t v11 = 52LL;
    uint64_t v12 = 26LL;
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  uint64_t v9 = "invalid Collection: less than 'count' elements in collection";
  uint64_t v10 = "Swift/ContiguousArrayBuffer.swift";
  uint64_t v11 = 60LL;
  uint64_t v12 = 33LL;
LABEL_15:
  Swift::String_optional result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v9, v11, 2LL, v10, v12);
  __break(1u);
  return result;
}

void *sub_10013563C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100129274(&qword_1002B8440);
  id v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_1001356A0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100129274(&qword_1002B8440);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  NSString v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100135838(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_100135774(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4, v15);
  return v11;
}

void *sub_100135774(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    char v5 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v6 = 51LL;
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    char v5 = "UnsafeMutablePointer.initialize overlapping range";
    uint64_t v6 = 49LL;
  }

  Swift::String_optional result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v5,  v6,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

char *sub_100135838(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

uint64_t sub_1001358B8(void *a1)
{
  id v2 = [a1 alias];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100135924(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100135934(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10013593C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100135980(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

BOOL sub_100135994(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_1001359A4()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_1001359B4()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1001359BC()
{
  return sub_100135144(v0, *(void *)(v1 - 248));
}

void sub_1001359C8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

  ;
}

uint64_t sub_1001359E8()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_1001359F0(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1001359F8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100135A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

uint64_t sub_100135A10()
{
  return Logger.logObject.getter();
}

uint64_t sub_100135A18()
{
  return static GKLog.general.getter();
}

uint64_t sub_100135A20(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t sub_100135A28(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

uint64_t sub_100135A30()
{
  return sub_100135144(v1, v0);
}

uint64_t sub_100135A3C()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100135A44(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

uint64_t sub_100135A4C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(*(void *)(v2 - 320), a2);
}

uint64_t sub_100135A58()
{
  return sub_1001351D8(v0 - 144, v0 - 192);
}

void *sub_100135A64(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  Swift::String_optional result = (void *)swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    uint64_t v14 = *(void **)(*(void *)(a1 + 48) + 40 * v10 + 32);
    if (v14)
    {
      id v15 = v14;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v17 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v16 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v17 >= v16 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1LL);
      }
      uint64_t v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
      Swift::String_optional result = (void *)specialized Array._endMutation()(v18);
    }
  }

  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_28;
  }

  if (v11 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release(a1);
    return _swiftEmptyArrayStorage;
  }

  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

void *sub_100135C30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    unint64_t v5 = (uint64_t *)(a1 + 32);
    int64_t v6 = (objc_class *)type metadata accessor for ScopedIDsBatchRequest();
    do
    {
      uint64_t v7 = *v5++;
      objc_allocWithZone(v6);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(a2);
      id v8 = sub_100136474(v7, a2);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v9 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      uint64_t v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v8);
      specialized ContiguousArray._endMutation()(v10);
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(a2, v11);
  }

  else
  {
    swift_bridgeObjectRelease(a2, a2);
  }

  return _swiftEmptyArrayStorage;
}

void *sub_100135D38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    unint64_t v5 = (uint64_t *)(a1 + 32);
    int64_t v6 = (objc_class *)type metadata accessor for ScopedIDsBatchRequest();
    do
    {
      uint64_t v7 = *v5++;
      objc_allocWithZone(v6);
      swift_bridgeObjectRetain(v7);
      uint64_t v8 = swift_bridgeObjectRetain(a2);
      id v9 = sub_100136474(v8, v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
      specialized ContiguousArray._endMutation()(v11);
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(a2, v12);
  }

  else
  {
    swift_bridgeObjectRelease(a2, a2);
  }

  return _swiftEmptyArrayStorage;
}

void *sub_100135E3C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1001375E4(0LL, v1, 0);
  Swift::String_optional result = (void *)sub_10015D93C(a1);
  uint64_t v4 = (uint64_t)result;
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  while ((v4 & 0x8000000000000000LL) == 0 && v4 < 1LL << *(_BYTE *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v6) {
      goto LABEL_14;
    }
    char v17 = v8;
    id v9 = (uint64_t *)(*(void *)(a1 + 48) + 40 * v4);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    unint64_t v13 = _swiftEmptyArrayStorage[2];
    unint64_t v12 = _swiftEmptyArrayStorage[3];
    swift_bridgeObjectRetain(v11);
    if (v13 >= v12 >> 1) {
      sub_1001375E4((char *)(v12 > 1), v13 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v13 + 1;
    uint64_t v14 = &_swiftEmptyArrayStorage[2 * v13];
    v14[4] = v10;
    v14[5] = v11;
    Swift::String_optional result = (void *)sub_10015D854(v4, v6, v17 & 1, a1);
    uint64_t v4 = (uint64_t)result;
    uint64_t v6 = v15;
    char v8 = v16 & 1;
    if (!--v1)
    {
      sub_10013A198((uint64_t)result, v15, v8);
      return _swiftEmptyArrayStorage;
    }
  }

  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_100135FB4(uint64_t a1)
{
  uint64_t v3 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t v12 = v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = a1 + 40;
    do
    {
      sub_10013A678();
      sub_10013A740(v11);
      uint64_t v8 = swift_bridgeObjectRelease(v11[1], v7);
      v6 += 16LL;
      --v5;
    }

    while (v5);
    sub_10012B950(v8, v9);
    return v12;
  }

  else
  {
    sub_10013A654(v3, v4);
  }

  return v1;
}

uint64_t sub_10013604C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = sub_10013A300();
  uint64_t v4 = Set.init(minimumCapacity:)(v2, &type metadata for PlayerAndGameID, v3);
  uint64_t v20 = v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = (void **)(a1 + 64);
    do
    {
      uint64_t v8 = (uint64_t)*(v7 - 4);
      uint64_t v9 = (uint64_t)*(v7 - 3);
      uint64_t v10 = (uint64_t)*(v7 - 2);
      uint64_t v11 = (uint64_t)*(v7 - 1);
      uint64_t v12 = *v7;
      v7 += 5;
      v21[0] = v8;
      v21[1] = v9;
      v21[2] = v10;
      v21[3] = v11;
      v21[4] = v12;
      id v13 = v12;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v11);
      sub_100137BB8(v19, v21);
      swift_bridgeObjectRelease(v19[1], v14);
      swift_bridgeObjectRelease(v19[3], v15);

      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease(a1, v16);
    return v20;
  }

  else
  {
    uint64_t v17 = v4;
    swift_bridgeObjectRelease(a1, v5);
  }

  return v17;
}

void *sub_100136128(uint64_t a1)
{
  uint64_t v13 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  Swift::String_optional result = sub_10017BB54(v14, a1);
  uint64_t v3 = v14[1];
  int64_t v4 = v14[3];
  uint64_t v5 = v15;
  int64_t v6 = (unint64_t)(v14[2] + 64LL) >> 6;
  if (!v15) {
    goto LABEL_3;
  }
LABEL_2:
  v5 &= v5 - 1;
  while (1)
  {
    sub_10013A678();
    sub_10013A740(v12);
    Swift::String_optional result = (void *)swift_bridgeObjectRelease(v12[1], v11);
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_21;
    }
    uint64_t v8 = *(void *)(v3 + 8 * v7);
    int64_t v9 = v4 + 1;
    if (!v8)
    {
      int64_t v9 = v4 + 2;
      if (v4 + 2 >= v6) {
        goto LABEL_21;
      }
      uint64_t v8 = *(void *)(v3 + 8 * v9);
      if (!v8)
      {
        int64_t v9 = v4 + 3;
        if (v4 + 3 >= v6) {
          goto LABEL_21;
        }
        uint64_t v8 = *(void *)(v3 + 8 * v9);
        if (!v8)
        {
          int64_t v9 = v4 + 4;
          if (v4 + 4 >= v6) {
            goto LABEL_21;
          }
          uint64_t v8 = *(void *)(v3 + 8 * v9);
          if (!v8)
          {
            int64_t v9 = v4 + 5;
            if (v4 + 5 >= v6) {
              goto LABEL_21;
            }
            uint64_t v8 = *(void *)(v3 + 8 * v9);
            if (!v8)
            {
              int64_t v10 = v4 + 6;
              while (v10 < v6)
              {
                uint64_t v8 = *(void *)(v3 + 8 * v10++);
                if (v8)
                {
                  int64_t v9 = v10 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_100136294(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  BOOL v7 = v4 == *a2 && v5 == v6;
  if (v7 || (char v8 = sub_10013A6CC(v4, v5, *a2, v6), result = 0LL, (v8 & 1) != 0))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = a1[3];
    uint64_t v12 = a2[2];
    uint64_t v13 = a2[3];
    if (v10 == v12 && v11 == v13) {
      return 1LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0LL);
    }
  }

  return result;
}

uint64_t sub_100136304(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  sub_10013A678();
  uint64_t v5 = String.hash(into:)(a1, v3, v4);
  sub_10013A6AC(v5, v6);
  uint64_t v8 = v1[2];
  uint64_t v7 = v1[3];
  sub_10013A69C();
  sub_10013A780(a1, v8);
  return swift_bridgeObjectRelease(v7, v9);
}

void sub_10013635C()
{
  uint64_t v1 = sub_10013A624();
  uint64_t v2 = sub_10013A6E4(v1);
  sub_1001322A0(v2, v3);
  uint64_t v4 = *(void *)(v0 + 16);
  sub_10013A69C();
  uint64_t v5 = sub_10013A780((uint64_t)v7, v4);
  sub_100132324(v5, v6);
  sub_10013A74C();
  sub_10013A6F4();
}

void sub_1001363B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  Hasher.init(_seed:)(v8, a1);
  uint64_t v3 = sub_10013A624();
  uint64_t v4 = sub_10013A6E4(v3);
  sub_1001322A0(v4, v5);
  sub_10013A69C();
  uint64_t v6 = sub_10013A780((uint64_t)v8, v2);
  sub_100132324(v6, v7);
  sub_10013A74C();
  sub_10013A6F4();
}

uint64_t ScopedIDsBatchRequest.playerIDs.getter()
{
  return sub_10013A6A4(OBJC_IVAR___GKScopedIDsBatchRequest_playerIDs);
}

id sub_100136430(void *a1, uint64_t a2, void (*a3)(void))
{
  v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_10013A654((uint64_t)v4.super.isa, v5);
  return a1;
}

uint64_t ScopedIDsBatchRequest.gameBundleIDs.getter()
{
  return sub_10013A6A4(OBJC_IVAR___GKScopedIDsBatchRequest_gameBundleIDs);
}

id sub_100136474(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (objc_class *)sub_10013A730();
  *(void *)&v2[OBJC_IVAR___GKScopedIDsBatchRequest_playerIDs] = a1;
  *(void *)&v2[OBJC_IVAR___GKScopedIDsBatchRequest_gameBundleIDs] = a2;
  v7.receiver = v2;
  v7.Class super_class = v5;
  return objc_msgSendSuper2(&v7, "init");
}

void ScopedIDsBatchRequest.init()()
{
}

void *static ScopedIDsUtils.filterUnsupportedGameBundleIDs(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = GKGameCenterIdentifier;
    uint64_t v3 = (uint64_t *)(swift_bridgeObjectRetain(a1) + 40);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
      BOOL v8 = v5 == v6 && v4 == v7;
      if (v8
        || (uint64_t v9 = v7,
            char v10 = sub_10013A6CC(v5, v4, v6, v7),
            sub_10013A678(),
            uint64_t v6 = swift_bridgeObjectRelease(v9, v11),
            (v10 & 1) != 0))
      {
        uint64_t isUniquelyReferenced_nonNull_native = sub_10013A6AC(v6, v7);
      }

      else
      {
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1001375E4(0LL, _swiftEmptyArrayStorage[2] + 1LL, 1);
        }
        unint64_t v15 = _swiftEmptyArrayStorage[2];
        unint64_t v14 = _swiftEmptyArrayStorage[3];
        if (v15 >= v14 >> 1) {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1001375E4((char *)(v14 > 1), v15 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v15 + 1;
        uint64_t v16 = &_swiftEmptyArrayStorage[2 * v15];
        v16[4] = v5;
        v16[5] = v4;
      }

      v3 += 2;
      --v1;
    }

    while (v1);
    sub_10012B950(isUniquelyReferenced_nonNull_native, v13);
  }

  return _swiftEmptyArrayStorage;
}

void *static ScopedIDsUtils.batchRequest(playerIDs:gameBundleIDs:desiredSize:)( uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v3)
  {
    else {
      uint64_t v13 = a3 / v3;
    }
    sub_1001296D0();
    uint64_t v14 = sub_100136FF4(0LL, v5, v13, a2, v13);
    sub_10013A69C();
    uint64_t v11 = sub_100135D38(v14, a1);
  }

  else
  {
    else {
      uint64_t v9 = a3 / v5;
    }
    sub_10013A69C();
    uint64_t v10 = sub_100136FF4(0LL, v3, v9, a1, v9);
    sub_1001296D0();
    uint64_t v11 = sub_100135C30(v10, a2);
  }

  uint64_t v7 = v11;
  sub_10013A6AC((uint64_t)v11, v12);
  return v7;
}

char *static ScopedIDsUtils.incomplete(playerIDs:gameBundleIDs:scopedIDs:)( void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    sub_10013A624();
    uint64_t v49 = sub_10013A694();
    sub_1001322A0(v49, v50);
    if (v49) {
      goto LABEL_3;
    }
LABEL_25:
    sub_1001325D8();
    return (char *)a1;
  }

  if (!*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_25;
  }
LABEL_3:
  uint64_t v7 = a1[2];
  if (!v7) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v56 = *(void *)(a2 + 16);
  if (!v56) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v51 = v6;
  unint64_t v53 = a3;
  uint64_t v58 = &_swiftEmptySetSingleton;
  uint64_t v54 = a1 + 4;
  uint64_t v52 = a1;
  sub_1001325D8();
  for (uint64_t i = 0LL; i != v7; ++i)
  {
    uint64_t v9 = &v54[2 * i];
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    sub_1001325D8();
    sub_10013A678();
    uint64_t v12 = (uint64_t *)(a2 + 40);
    uint64_t v13 = v56;
    do
    {
      uint64_t v14 = *(v12 - 1);
      uint64_t v15 = *v12;
      v59[0] = v10;
      v59[1] = v11;
      v59[2] = v14;
      v59[3] = v15;
      v59[4] = 0LL;
      swift_bridgeObjectRetain_n(v15, 2LL);
      sub_1001325D8();
      sub_100137BB8(v57, v59);
      swift_bridgeObjectRelease(v57[1], v16);
      swift_bridgeObjectRelease(v57[3], v17);
      uint64_t v18 = (void *)v57[4];
      swift_bridgeObjectRelease(v15, v19);

      v12 += 2;
      --v13;
    }

    while (v13);
    uint64_t v21 = swift_bridgeObjectRelease(v11, v20);
    sub_10013A6AC(v21, v22);
  }

  uint64_t v24 = swift_bridgeObjectRelease(v52, v23);
  uint64_t v25 = (uint64_t)v58;
  unint64_t v26 = v53;
  if (v51)
  {
    sub_10013A624();
    uint64_t v27 = sub_10013A694();
    uint64_t v24 = sub_1001322A0(v27, v28);
  }

  else
  {
    uint64_t v27 = *(void *)((v53 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v29 = _swiftEmptyArrayStorage;
  if (!v27)
  {
LABEL_23:
    uint64_t v45 = sub_10013604C((uint64_t)v29);
    unint64_t v46 = sub_100136B70(v45, v25);
    sub_10013A654((uint64_t)v46, v47);
    a1 = sub_100135E3C((uint64_t)v29);
    sub_100132324((uint64_t)a1, v48);
    return (char *)a1;
  }

  uint64_t v55 = v25;
  v57[0] = _swiftEmptyArrayStorage;
  uint64_t result = sub_10013A724(v24, v27 & ~(v27 >> 63));
  if ((v27 & 0x8000000000000000LL) == 0)
  {
    uint64_t v31 = 0LL;
    uint64_t v29 = (void *)v57[0];
    do
    {
      if ((v53 & 0xC000000000000001LL) != 0) {
        id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v26);
      }
      else {
        id v32 = *(id *)(v26 + 8 * v31 + 32);
      }
      uint64_t v33 = v32;
      id v34 = objc_msgSend(v32, "playerID", v51);
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      id v38 = [v33 gameBundleID];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      uint64_t v41 = v40;

      v57[0] = v29;
      unint64_t v43 = v29[2];
      unint64_t v42 = v29[3];
      if (v43 >= v42 >> 1)
      {
        sub_100137634((char *)(v42 > 1), v43 + 1, 1);
        uint64_t v29 = (void *)v57[0];
      }

      ++v31;
      v29[2] = v43 + 1;
      unint64_t v44 = &v29[5 * v43];
      v44[4] = v35;
      v44[5] = v37;
      v44[6] = v39;
      v44[7] = v41;
      v44[8] = v33;
      unint64_t v26 = v53;
    }

    while (v27 != v31);
    uint64_t v25 = v55;
    goto LABEL_23;
  }

  __break(1u);
  return result;
}

void *sub_100136B70(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) > *(void *)(a2 + 16) >> 3) {
    return sub_100139230(a1, a2);
  }
  sub_10013904C((id *)a1);
  return (void *)a2;
}

char *static ScopedIDsUtils.merge(scopedIDs:with:)(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a1;
  if (!((unint64_t)a1 >> 62))
  {
    if (*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_3;
    }
LABEL_20:
    sub_10013A624();
    return (char *)a2;
  }

  if (a1 < 0) {
    uint64_t v24 = a1;
  }
  else {
    uint64_t v24 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_1001296D0();
  uint64_t v25 = sub_10013A694();
  sub_10013A654(v25, v26);
  if (!v24) {
    goto LABEL_20;
  }
LABEL_3:
  if (!(a2 >> 62))
  {
    if (*(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }

  sub_10013A624();
  uint64_t v27 = sub_10013A694();
  sub_1001322A0(v27, v28);
  if (!v27)
  {
LABEL_22:
    sub_1001296D0();
    return (char *)v3;
  }

id ScopedIDsUtils.init()()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)sub_10013A730();
  return objc_msgSendSuper2(&v2, "init");
}

id MultiplayerActivityEventFilter.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)sub_10013A730();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100136FF4(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a3;
  int64_t v7 = a1;
  uint64_t v8 = sub_10013A33C(a1, a2, a3);
  sub_100137600(0LL, v8 & ~(v8 >> 63), 0);
  if ((v8 & 0x8000000000000000LL) == 0)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    if (v8)
    {
      uint64_t v54 = a4 + 32;
      while (1)
      {
        BOOL v11 = v7 <= a2;
        if (v6 > 0) {
          BOOL v11 = v7 >= a2;
        }
        if (v11)
        {
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
          goto LABEL_75;
        }

        if (__OFADD__(v7, v6)) {
          int64_t v12 = ((v7 + v6) >> 63) ^ 0x8000000000000000LL;
        }
        else {
          int64_t v12 = v7 + v6;
        }
        if (__OFADD__(v7, a5)) {
          goto LABEL_72;
        }
        if (*(void *)(a4 + 16) >= v7 + a5) {
          uint64_t v13 = v7 + a5;
        }
        else {
          uint64_t v13 = *(void *)(a4 + 16);
        }
        uint64_t v14 = v13 - v7;
        if (v13 < v7) {
          goto LABEL_73;
        }
        if (v7 < 0) {
          goto LABEL_74;
        }
        uint64_t v57 = v10;
        uint64_t v15 = v6;
        uint64_t v16 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
        uint64_t v17 = swift_bridgeObjectRetain(a4);
        uint64_t v18 = swift_unknownObjectRetain_n(v17, 2LL);
        uint64_t v19 = (void *)swift_dynamicCastClass(v18, v16);
        if (!v19)
        {
          swift_bridgeObjectRelease(a4, v20);
          uint64_t v19 = _swiftEmptyArrayStorage;
        }

        uint64_t v21 = v19[2];
        swift_release(v19);
        if (v21 == v14)
        {
          uint64_t v24 = (void *)swift_dynamicCastClass(a4, v16);
          uint64_t v6 = v15;
          uint64_t v10 = v57;
          if (!v24)
          {
            swift_bridgeObjectRelease(a4, v23);
            uint64_t v24 = _swiftEmptyArrayStorage;
          }
        }

        else
        {
          swift_bridgeObjectRelease(a4, v22);
          uint64_t v24 = _swiftEmptyArrayStorage;
          uint64_t v6 = v15;
          uint64_t v10 = v57;
          if (v13 != v7)
          {
            if (v14 < 1)
            {
              if (v14 < 0) {
                goto LABEL_79;
              }
            }

            else
            {
              uint64_t v27 = sub_100129274(&qword_1002B8380);
              uint64_t v24 = (void *)swift_allocObject(v27, 16 * v14 + 32, 7LL);
              size_t v28 = j__malloc_size(v24);
              v24[2] = v14;
              v24[3] = 2 * ((uint64_t)(v28 - 32) / 16);
            }

            unint64_t v29 = (unint64_t)(v24 + 4);
            if (v54 + 16 * v7 < (unint64_t)&v24[2 * v14 + 4] && v29 < v54 + 16 * v13)
            {
LABEL_80:
              uint64_t v52 = "UnsafeMutablePointer.initialize overlapping range";
              uint64_t v53 = 49LL;
              goto LABEL_81;
            }

            swift_arrayInitWithCopy(v29);
          }
        }

        swift_bridgeObjectRelease(a4, v23);
        unint64_t v26 = v10[2];
        unint64_t v25 = v10[3];
        if (v26 >= v25 >> 1) {
          sub_100137600((void *)(v25 > 1), v26 + 1, 1);
        }
        v10[2] = v26 + 1;
        v10[v26 + 4] = v24;
        int64_t v7 = v12;
        if (!--v8) {
          goto LABEL_36;
        }
      }
    }

    int64_t v12 = v7;
LABEL_36:
    BOOL v31 = v12 <= a2;
    if (v6 > 0) {
      BOOL v31 = v12 >= a2;
    }
    if (v31)
    {
LABEL_39:
      swift_bridgeObjectRelease(a4, v9);
      return (uint64_t)v10;
    }

    uint64_t v58 = a4 + 32;
    while (1)
    {
      int64_t v33 = __OFADD__(v12, v6) ? ((v12 + v6) >> 63) ^ 0x8000000000000000LL : v12 + v6;
      if (__OFADD__(v12, a5)) {
        break;
      }
      if (*(void *)(a4 + 16) >= v12 + a5) {
        uint64_t v34 = v12 + a5;
      }
      else {
        uint64_t v34 = *(void *)(a4 + 16);
      }
      uint64_t v35 = v34 - v12;
      if (v34 < v12) {
        goto LABEL_76;
      }
      if (v12 < 0) {
        goto LABEL_77;
      }
      uint64_t v36 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
      uint64_t v37 = swift_bridgeObjectRetain(a4);
      uint64_t v38 = swift_unknownObjectRetain_n(v37, 2LL);
      uint64_t v39 = (void *)swift_dynamicCastClass(v38, v36);
      if (!v39)
      {
        swift_bridgeObjectRelease(a4, v40);
        uint64_t v39 = _swiftEmptyArrayStorage;
      }

      uint64_t v41 = v39[2];
      swift_release(v39);
      if (v41 == v35)
      {
        unint64_t v44 = (void *)swift_dynamicCastClass(a4, v36);
        if (!v44)
        {
          swift_bridgeObjectRelease(a4, v43);
          unint64_t v44 = _swiftEmptyArrayStorage;
        }
      }

      else
      {
        swift_bridgeObjectRelease(a4, v42);
        unint64_t v44 = _swiftEmptyArrayStorage;
        if (v34 != v12)
        {
          if (v35 < 1)
          {
            if (v35 < 0) {
              goto LABEL_79;
            }
          }

          else
          {
            uint64_t v48 = sub_100129274(&qword_1002B8380);
            unint64_t v44 = (void *)swift_allocObject(v48, 16 * v35 + 32, 7LL);
            size_t v49 = j__malloc_size(v44);
            v44[2] = v35;
            v44[3] = 2 * ((uint64_t)(v49 - 32) / 16);
          }

          unint64_t v50 = (unint64_t)(v44 + 4);
          swift_arrayInitWithCopy(v50);
        }
      }

      swift_bridgeObjectRelease(a4, v43);
      unint64_t v46 = v10[2];
      unint64_t v45 = v10[3];
      if (v46 >= v45 >> 1) {
        sub_100137600((void *)(v45 > 1), v46 + 1, 1);
      }
      v10[2] = v46 + 1;
      v10[v46 + 4] = v44;
      BOOL v47 = v33 <= a2;
      if (v6 > 0) {
        BOOL v47 = v33 >= a2;
      }
      int64_t v12 = v33;
      if (v47) {
        goto LABEL_39;
      }
    }

LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
  }

  __break(1u);
LABEL_79:
  uint64_t v52 = "UnsafeMutablePointer.initialize with negative count";
  uint64_t v53 = 51LL;
LABEL_81:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v52,  v53,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

void sub_1001374C4(uint64_t a1)
{
}

void sub_1001374D0(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_10013A6B4();
    sub_10013A660( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Can't construct Array with count < 0",  v5,  v6,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v2 = sub_100129640(0LL, &qword_1002B84D0, &OBJC_CLASS___GKGameActivityInternal_ptr);
      *(void *)((static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2) & 0xFFFFFFFFFFFFF8LL) + 0x10) = a1;
    }

    sub_100020818();
  }

void sub_100137558(uint64_t a1)
{
}

void sub_100137564(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    sub_10013A6B4();
    sub_10013A660( (uint64_t)"Fatal error",  v2,  v3,  (uint64_t)"Can't construct Array with count < 0",  v4,  v5,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1) {
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2) + 16) = a1;
    }
    sub_100020818();
  }

char *sub_1001375C8(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100137684(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_1001375E4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100137764(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

void *sub_100137600(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013793C( a1,  a2,  a3,  *v3,  &qword_1002B84F8,  (void (*)(uint64_t, uint64_t, void *))sub_10016A21C,  (void (*)(uint64_t, uint64_t, void *))sub_10016A6A4);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_100137634(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100137838(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

void *sub_100137650(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013793C( a1,  a2,  a3,  *v3,  &qword_1002B84A8,  (void (*)(uint64_t, uint64_t, void *))sub_10016A21C,  (void (*)(uint64_t, uint64_t, void *))sub_10016A760);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_100137684(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100129274(&qword_1002B84C0);
    BOOL v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 32);
  }

  else
  {
    BOOL v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10016A220(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10016A568((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release(a4);
  return v11;
}

char *sub_100137764(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100129274(&qword_1002B8380);
    BOOL v11 = (char *)sub_10013A718(v10, 16 * v9);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    BOOL v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10016A278(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10016A60C((unint64_t)v14, v8, (unint64_t)v13);
  }

  sub_10013A738();
  return v11;
}

char *sub_100137838(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100129274(&qword_1002B84F0);
    BOOL v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    BOOL v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10016A2D0(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10016A6B0((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release(a4);
  return v11;
}

void *sub_100137920(void *a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_10013793C( a1,  a2,  a3,  a4,  &qword_1002B84C8,  (void (*)(uint64_t, uint64_t, void *))sub_10016A3BC,  (void (*)(uint64_t, uint64_t, void *))sub_10016AA1C);
}

void *sub_10013793C( void *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *), void (*a7)(uint64_t, uint64_t, void *))
{
  char v10 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    int64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v12 = a2;
  }

  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    uint64_t v15 = sub_100129274(a5);
    uint64_t v16 = (void *)sub_10013A718(v15, 8 * v14);
    size_t v17 = j__malloc_size(v16);
    v16[2] = v13;
    v16[3] = 2 * ((uint64_t)(v17 - 32) / 8);
  }

  else
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
  }

  uint64_t v18 = v16 + 4;
  uint64_t v19 = a4 + 32;
  if ((v10 & 1) != 0)
  {
    a6(v19, v13, v18);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    a7(v19, v13, v18);
  }

  sub_10013A738();
  return v16;
}

uint64_t sub_100137A1C(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

uint64_t sub_100137A38(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v29, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v29, a2, a3);
  Swift::Int v8 = sub_10013A74C();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_10013A754();
  if ((v12 & 1) != 0)
  {
    uint64_t v13 = *(void *)(v7 + 48);
    uint64_t v14 = (uint64_t *)(v13 + 16 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    BOOL v17 = *v14 == a2 && v16 == a3;
    if (v17 || (uint64_t v15 = sub_10013A6CC(v15, v16, a2, a3), (v15 & 1) != 0))
    {
LABEL_7:
      sub_10013A6AC(v15, v16);
      swift_bridgeObjectRelease(v7, v18);
      uint64_t v19 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v20 = v19[1];
      *a1 = *v19;
      a1[1] = v20;
      swift_bridgeObjectRetain(v20);
      return 0LL;
    }

    uint64_t v22 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v22;
      sub_10013A754();
      if ((v23 & 1) == 0) {
        break;
      }
      uint64_t v24 = (uint64_t *)(v13 + 16 * v10);
      uint64_t v15 = *v24;
      uint64_t v16 = v24[1];
      if (*v24 != a2 || v16 != a3)
      {
        uint64_t v15 = sub_10013A6CC(v15, v16, a2, a3);
        if ((v15 & 1) == 0) {
          continue;
        }
      }

      goto LABEL_7;
    }
  }

  swift_bridgeObjectRelease(v7, v11);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v29[0] = *v3;
  void *v3 = 0x8000000000000000LL;
  sub_10013A678();
  sub_100138428(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v27 = *v3;
  void *v3 = v29[0];
  swift_bridgeObjectRelease(v27, v28);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_100137BB8(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  sub_10013A1A4((uint64_t)(a2 + 4), (uint64_t)&v41);
  uint64_t v38 = v2;
  uint64_t v7 = *v2;
  Hasher.init(_seed:)(v40, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v40, v4, v3);
  swift_bridgeObjectRelease(v3, v8);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v40, v6, v5);
  swift_bridgeObjectRelease(v5, v9);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v13 = v10 & ~v12;
  uint64_t v14 = v7 + 56;
  uint64_t v37 = v7;
  if (((*(void *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    uint64_t v15 = ~v12;
    uint64_t v16 = *(void *)(v7 + 48);
    while (1)
    {
      BOOL v17 = (void *)(v16 + 40 * v13);
      uint64_t v11 = v17[1];
      uint64_t v19 = v17[2];
      uint64_t v18 = v17[3];
      BOOL v20 = *v17 == v4 && v11 == v3;
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v11, v4, v3, 0LL) & 1) != 0)
      {
        BOOL v21 = v19 == v6 && v18 == v5;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v18, v6, v5, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v13 = (v13 + 1) & v15;
      if (((*(void *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
        goto LABEL_14;
      }
    }

    swift_bridgeObjectRelease(v5, v11);
    swift_bridgeObjectRelease(v3, v27);
    swift_bridgeObjectRelease(v37, v28);
    sub_10013A2D8(&v41);
    unint64_t v29 = (uint64_t *)(*(void *)(*v38 + 48LL) + 40 * v13);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    uint64_t v32 = v29[2];
    uint64_t v33 = v29[3];
    uint64_t v34 = (void *)v29[4];
    *a1 = v30;
    a1[1] = v31;
    a1[2] = v32;
    a1[3] = v33;
    a1[4] = v34;
    id v35 = v34;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v33);
    return 0LL;
  }

  else
  {
LABEL_14:
    swift_bridgeObjectRelease(v37, v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v38);
    v40[0] = *v38;
    *uint64_t v38 = 0x8000000000000000LL;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v5);
    sub_10013A214(&v41);
    sub_1001385C0(a2, v13, isUniquelyReferenced_nonNull_native);
    uint64_t v23 = *v38;
    *uint64_t v38 = v40[0];
    swift_bridgeObjectRelease(v23, v24);
    __int128 v25 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v25;
    a1[4] = a2[4];
    return 1LL;
  }

Swift::Int sub_100137E08(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100129274(&qword_1002B84B0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      uint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
      *uint64_t v30 = v20;
      v30[1] = v21;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v10) {
        goto LABEL_35;
      }
      unint64_t v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = v33[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v10) {
            goto LABEL_35;
          }
          unint64_t v17 = v33[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v32;
              uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
              if (v31 > 63) {
                sub_100137A1C(0LL, (unint64_t)(v31 + 63) >> 6, v33);
              }
              else {
                *uint64_t v33 = -1LL << v31;
              }
              *(void *)(v3 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v17 = v33[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

Swift::Int sub_1001380E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100129274(&qword_1002B84D8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v36 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v38 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v37 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v12 = 0LL;
    uint64_t v39 = v3;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      int64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + 40 * i);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      uint64_t v21 = v18[2];
      uint64_t v22 = v18[3];
      uint64_t v23 = v18[4];
      Hasher.init(_seed:)(v40, *(void *)(v6 + 40));
      swift_bridgeObjectRetain(v20);
      String.hash(into:)(v40, v19, v20);
      swift_bridgeObjectRelease(v20, v24);
      swift_bridgeObjectRetain(v22);
      String.hash(into:)(v40, v21, v22);
      swift_bridgeObjectRelease(v22, v25);
      Swift::Int result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v10 + 8 * (v27 >> 6))) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0LL;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v10 + 8 * v28);
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v29 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v10 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
      uint64_t v34 = (void *)(*(void *)(v6 + 48) + 40 * v29);
      *uint64_t v34 = v19;
      v34[1] = v20;
      v34[2] = v21;
      v34[3] = v22;
      v34[4] = v23;
      ++*(void *)(v6 + 16);
      uint64_t v3 = v39;
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1LL)) {
        goto LABEL_41;
      }
      if (v15 >= v37) {
        goto LABEL_35;
      }
      unint64_t v16 = v38[v15];
      ++v12;
      if (!v16)
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v37) {
          goto LABEL_35;
        }
        unint64_t v16 = v38[v12];
        if (!v16)
        {
          int64_t v12 = v15 + 2;
          if (v15 + 2 >= v37) {
            goto LABEL_35;
          }
          unint64_t v16 = v38[v12];
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v37)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v36;
              uint64_t v35 = 1LL << *(_BYTE *)(v3 + 32);
              if (v35 > 63) {
                sub_100137A1C(0LL, (unint64_t)(v35 + 63) >> 6, v38);
              }
              else {
                *uint64_t v38 = -1LL << v35;
              }
              *(void *)(v3 + 16) = 0LL;
              break;
            }

            unint64_t v16 = v38[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_42;
                }
                if (v12 >= v37) {
                  goto LABEL_35;
                }
                unint64_t v16 = v38[v12];
                ++v17;
                if (v16) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v12 = v17;
          }
        }
      }

void sub_100138428(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100137E08(v11);
  }

  else
  {
    if (v10 > v9)
    {
      sub_1001387B0();
      goto LABEL_22;
    }

    sub_100138A88(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v29, *(void *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  uint64_t v15 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v16 = *(void *)(v12 + 48);
    int64_t v17 = (void *)(v16 + 16 * a3);
    uint64_t v18 = v17[1];
    BOOL v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(void *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v21 = (void *)(v16 + 16 * a3);
        uint64_t v22 = v21[1];
        BOOL v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0LL) & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }

void sub_1001385C0(void *a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_21;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001380E0(v8);
  }

  else
  {
    if (v7 > v6)
    {
      sub_100138908();
      goto LABEL_21;
    }

    sub_100138D30(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v35, *(void *)(*v3 + 40));
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(v35, v10, v11);
  swift_bridgeObjectRelease(v11, v12);
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[3];
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(v35, v13, v14);
  swift_bridgeObjectRelease(v14, v15);
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = v16 & ~v17;
  uint64_t v18 = v9 + 56;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v19 = ~v17;
    uint64_t v20 = *(void *)(v9 + 48);
    do
    {
      uint64_t v21 = (void *)(v20 + 40 * a2);
      uint64_t v22 = v21[1];
      uint64_t v23 = v21[2];
      uint64_t v24 = v21[3];
      BOOL v25 = *v21 == v10 && v22 == v11;
      if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, v10, v11, 0LL) & 1) != 0)
      {
        BOOL v26 = v23 == v13 && v24 == v14;
        if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v13, v14, 0LL) & 1) != 0) {
          goto LABEL_24;
        }
      }

      a2 = (a2 + 1) & v19;
    }

    while (((*(void *)(v18 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void sub_1001387B0()
{
  uint64_t v3 = v0;
  sub_100129274(&qword_1002B84B0);
  uint64_t v4 = sub_10013A6D4();
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    swift_release(v1);
    uint64_t *v3 = v4;
    return;
  }

  uint64_t v5 = (void *)sub_10013A62C();
  if (v8) {
    BOOL v9 = (unint64_t)v5 >= v7;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    sub_10013A768(v5, v6);
  }
  int64_t v10 = 0LL;
  sub_10013A5F8();
  unint64_t v13 = v12 & v11;
  int64_t v15 = (unint64_t)(v14 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v10 << 6))
  {
    uint64_t v21 = (void *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v22 = v21[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + 16 * i);
    void *v23 = *v21;
    v23[1] = v22;
    swift_bridgeObjectRetain(v22);
    if (v13) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v15) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v2 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v2 + 8 * v10);
      if (!v19)
      {
        int64_t v10 = v18 + 2;
        if (v18 + 2 >= v15) {
          goto LABEL_26;
        }
        unint64_t v19 = *(void *)(v2 + 8 * v10);
        if (!v19) {
          break;
        }
      }
    }

void sub_100138908()
{
  uint64_t v3 = v0;
  sub_100129274(&qword_1002B84D8);
  uint64_t v4 = sub_10013A6D4();
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    swift_release(v1);
    uint64_t *v3 = v4;
    return;
  }

  uint64_t v5 = (void *)sub_10013A62C();
  if (v8) {
    BOOL v9 = (unint64_t)v5 >= v7;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    sub_10013A768(v5, v6);
  }
  int64_t v10 = 0LL;
  sub_10013A5F8();
  unint64_t v13 = v12 & v11;
  int64_t v15 = (unint64_t)(v14 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v10 << 6))
  {
    uint64_t v21 = 5 * i;
    uint64_t v22 = (uint64_t *)(*(void *)(v1 + 48) + 8 * v21);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v25 = v22[2];
    uint64_t v26 = v22[3];
    uint64_t v27 = (void *)v22[4];
    uint64_t v28 = (void *)(*(void *)(v4 + 48) + 8 * v21);
    void *v28 = v23;
    v28[1] = v24;
    v28[2] = v25;
    v28[3] = v26;
    void v28[4] = v27;
    id v29 = v27;
    sub_1001325D8();
    swift_bridgeObjectRetain(v26);
    if (v13) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v15) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v2 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v2 + 8 * v10);
      if (!v19)
      {
        int64_t v10 = v18 + 2;
        if (v18 + 2 >= v15) {
          goto LABEL_26;
        }
        unint64_t v19 = *(void *)(v2 + 8 * v10);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_100138A88(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100129274(&qword_1002B84B0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  BOOL v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    unint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    Swift::Int result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    uint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
    *uint64_t v30 = v20;
    v30[1] = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

Swift::Int sub_100138D30(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100129274(&qword_1002B84D8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v38 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v12 = 0LL;
  uint64_t v39 = v3;
  if (!v9) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    int64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + 40 * i);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = v18[2];
    uint64_t v22 = v18[3];
    unint64_t v23 = (void *)v18[4];
    Hasher.init(_seed:)(v40, *(void *)(v6 + 40));
    id v24 = v23;
    swift_bridgeObjectRetain_n(v20, 2LL);
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v40, v19, v20);
    swift_bridgeObjectRelease(v20, v25);
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v40, v21, v22);
    swift_bridgeObjectRelease(v22, v26);
    Swift::Int result = Hasher._finalize()();
    uint64_t v27 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v10 + 8 * (v28 >> 6))) == 0)
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      while (++v29 != v32 || (v31 & 1) == 0)
      {
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0LL;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v10 + 8 * v29);
        if (v34 != -1)
        {
          unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v30 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v10 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v10 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v30;
    uint64_t v35 = (void *)(*(void *)(v6 + 48) + 40 * v30);
    *uint64_t v35 = v19;
    v35[1] = v20;
    v35[2] = v21;
    v35[3] = v22;
    v35[4] = v23;
    ++*(void *)(v6 + 16);
    uint64_t v3 = v39;
    if (v9) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= v38) {
      goto LABEL_35;
    }
    unint64_t v16 = *(void *)(v37 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v37 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v16 = *(void *)(v37 + 8 * v12);
        if (!v16) {
          break;
        }
      }
    }

id *sub_10013904C(id *result)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 7;
  uint64_t v4 = 1LL << *((_BYTE *)result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & (unint64_t)result[7];
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  Swift::Int result = (id *)swift_bridgeObjectRetain(result);
  int64_t v8 = 0LL;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = (uint64_t)v2[6] + 40 * i;
    __int128 v16 = *(_OWORD *)v14;
    __int128 v15 = *(_OWORD *)(v14 + 16);
    uint64_t v21 = *(void *)(v14 + 32);
    v20[0] = v16;
    v20[1] = v15;
    __int128 v22 = *(_OWORD *)v14;
    __int128 v23 = v15;
    sub_10013A1A4((uint64_t)&v21, (uint64_t)&v24);
    sub_10013A1EC((uint64_t)&v22);
    sub_10013A1EC((uint64_t)&v23);
    sub_10013A214(&v24);
    sub_100131784((uint64_t)v20, v19);
    sub_10013A23C((uint64_t)v19);
    sub_10013A2B0((uint64_t)&v22, v17);
    sub_10013A2B0((uint64_t)&v23, v18);
    Swift::Int result = sub_10013A2D8(&v24);
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v11 >= v7) {
      return (id *)swift_release(v2);
    }
    unint64_t v12 = (unint64_t)v3[v11];
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        return (id *)swift_release(v2);
      }
      unint64_t v12 = (unint64_t)v3[v8];
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          return (id *)swift_release(v2);
        }
        unint64_t v12 = (unint64_t)v3[v8];
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            return (id *)swift_release(v2);
          }
          unint64_t v12 = (unint64_t)v3[v8];
          if (!v12) {
            break;
          }
        }
      }
    }

LABEL_27:
  __break(1u);
  return result;
}

  *a2 = v5;
  a2[1] = v4;
  a2[2] = v8;
  a2[3] = v9;
  a2[4] = v12;
  a2[5] = result;
  return result;
}

void *sub_100139230(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v54 = a1 + 56;
    uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v51 = ~v4;
    if (-v4 < 64) {
      uint64_t v5 = ~(-1LL << -(char)v4);
    }
    else {
      uint64_t v5 = -1LL;
    }
    unint64_t v6 = v5 & v3;
    int64_t v52 = (unint64_t)(63 - v4) >> 6;
    int64_t v7 = (char *)(a2 + 56);
    uint64_t v8 = swift_bridgeObjectRetain(a1);
    uint64_t v9 = 0LL;
    uint64_t v58 = v2;
    uint64_t v53 = v8;
    if (!v6) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v56 = (v6 - 1) & v6;
    uint64_t v57 = v9;
    for (unint64_t i = __clz(__rbit64(v6)) | (v9 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v13 << 6))
    {
      __int128 v15 = (uint64_t *)(*(void *)(v8 + 48) + 40 * i);
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      uint64_t v18 = v15[2];
      uint64_t v19 = v15[3];
      uint64_t v20 = (void *)v15[4];
      Hasher.init(_seed:)(v59, *(void *)(v2 + 40));
      id v55 = v20;
      swift_bridgeObjectRetain_n(v17, 2LL);
      swift_bridgeObjectRetain(v19);
      String.hash(into:)(v59, v16, v17);
      swift_bridgeObjectRelease(v17, v21);
      swift_bridgeObjectRetain(v19);
      String.hash(into:)(v59, v18, v19);
      swift_bridgeObjectRelease(v19, v22);
      Swift::Int v23 = Hasher._finalize()();
      uint64_t v25 = -1LL << *(_BYTE *)(v2 + 32);
      unint64_t v26 = v23 & ~v25;
      if (((*(void *)&v7[(v26 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v26) & 1) != 0) {
        break;
      }
LABEL_36:
      swift_bridgeObjectRelease(v19, v24);
      swift_bridgeObjectRelease(v17, v35);

      uint64_t v9 = v57;
      uint64_t v2 = v58;
      uint64_t v8 = v53;
      unint64_t v6 = v56;
      if (v56) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v11 = v9 + 1;
      if (__OFADD__(v9, 1LL))
      {
        __break(1u);
        goto LABEL_46;
      }

      if (v11 >= v52) {
        goto LABEL_44;
      }
      unint64_t v12 = *(void *)(v54 + 8 * v11);
      int64_t v13 = v9 + 1;
      if (!v12)
      {
        int64_t v13 = v9 + 2;
        if (v9 + 2 >= v52) {
          goto LABEL_44;
        }
        unint64_t v12 = *(void *)(v54 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v9 + 3;
          if (v9 + 3 >= v52) {
            goto LABEL_44;
          }
          unint64_t v12 = *(void *)(v54 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v9 + 4;
            if (v9 + 4 >= v52) {
              goto LABEL_44;
            }
            unint64_t v12 = *(void *)(v54 + 8 * v13);
            if (!v12)
            {
              uint64_t v14 = v9 + 5;
              if (v9 + 5 >= v52)
              {
LABEL_44:
                sub_100132050(v8);
                return (void *)v2;
              }

              unint64_t v12 = *(void *)(v54 + 8 * v14);
              if (!v12)
              {
                while (1)
                {
                  int64_t v13 = v14 + 1;
                  if (__OFADD__(v14, 1LL)) {
                    break;
                  }
                  if (v13 >= v52) {
                    goto LABEL_44;
                  }
                  unint64_t v12 = *(void *)(v54 + 8 * v13);
                  ++v14;
                  if (v12) {
                    goto LABEL_22;
                  }
                }

void sub_100139740(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v7 = v6 - 1;
  uint64_t v48 = a3 + 56;
  size_t v44 = a5;
  while (2)
  {
    uint64_t v42 = v7;
    do
    {
      while (1)
      {
        int64_t v8 = a5[3];
        unint64_t v9 = a5[4];
        if (v9)
        {
          uint64_t v10 = (v9 - 1) & v9;
          unint64_t v11 = __clz(__rbit64(v9)) | (v8 << 6);
          goto LABEL_21;
        }

        int64_t v12 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
          __break(1u);
          goto LABEL_45;
        }

        int64_t v13 = (unint64_t)(a5[2] + 64LL) >> 6;
        if (v12 >= v13) {
          goto LABEL_43;
        }
        uint64_t v14 = a5[1];
        unint64_t v15 = *(void *)(v14 + 8 * v12);
        if (!v15)
        {
          if (v8 + 2 >= v13)
          {
            ++v8;
          }

          else
          {
            unint64_t v15 = *(void *)(v14 + 8 * (v8 + 2));
            if (v15)
            {
              int64_t v12 = v8 + 2;
              goto LABEL_20;
            }

            if (v8 + 3 >= v13)
            {
              v8 += 2LL;
            }

            else
            {
              unint64_t v15 = *(void *)(v14 + 8 * (v8 + 3));
              if (v15)
              {
                int64_t v12 = v8 + 3;
                goto LABEL_20;
              }

              int64_t v12 = v8 + 4;
              if (v8 + 4 >= v13)
              {
                v8 += 3LL;
              }

              else
              {
                unint64_t v15 = *(void *)(v14 + 8 * v12);
                if (v15) {
                  goto LABEL_20;
                }
                int64_t v16 = v8 + 5;
                while (v16 < v13)
                {
                  unint64_t v15 = *(void *)(v14 + 8 * v16++);
                  if (v15)
                  {
                    int64_t v12 = v16 - 1;
                    goto LABEL_20;
                  }
                }

                int64_t v8 = v13 - 1;
              }
            }
          }

LABEL_43:
          a5[3] = v8;
          a5[4] = 0LL;
          swift_retain(v5);
          sub_100139A74(a1, a2, v42, v5);
          return;
        }

  __break(1u);
}

Swift::Int sub_100139A74(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    int64_t v8 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release(v4);
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100129274(&qword_1002B84D8);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  int64_t v8 = (void *)result;
  uint64_t v37 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  uint64_t v39 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v40 = v10;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v37) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    uint64_t v16 = v10 + 1;
    if (!v15)
    {
      uint64_t v16 = v10 + 2;
      if (v10 + 2 >= v37) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v16];
      if (!v15)
      {
        uint64_t v16 = v10 + 3;
        if (v10 + 3 >= v37) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v16];
        if (!v15) {
          break;
        }
      }
    }

uint64_t sub_100139D60(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1, v19);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v4 < 0) {
      uint64_t v20 = *v1;
    }
    else {
      uint64_t v20 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v4, v21);
  }

  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  uint64_t *v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease(*v1, v10);
    uint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_16:
    uint64_t result = sub_10014BB90(v8 + 8LL * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v13 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v22 = v4;
    }
    else {
      uint64_t v22 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v4, v23);
  }

  if (v13 < 1) {
    goto LABEL_20;
  }
  uint64_t v14 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v15 = __OFADD__(v14, v13);
  uint64_t v16 = v14 + v13;
  if (!v15)
  {
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v16;
LABEL_20:
    uint64_t v17 = swift_bridgeObjectRelease(result, v12);
    return specialized Array._endMutation()(v17);
  }

  __break(1u);
  return result;
}

void sub_100139F14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v9 = v4 + v2;
    }
    else {
      uint64_t v9 = v4;
    }
    sub_100169A6C((char)isUniquelyReferenced_nonNull_native, v9, 1, v3);
    uint64_t v3 = (uint64_t)isUniquelyReferenced_nonNull_native;
  }

  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  char isUniquelyReferenced_nonNull_native = sub_10016AA1C(a1 + 32, v2);
  if (!v2)
  {
LABEL_14:
    sub_10012B950((uint64_t)isUniquelyReferenced_nonNull_native, v8);
    uint64_t *v1 = v3;
    return;
  }

  uint64_t v10 = *(void *)(v3 + 16);
  BOOL v11 = __OFADD__(v10, v2);
  uint64_t v12 = v10 + v2;
  if (!v11)
  {
    *(void *)(v3 + 16) = v12;
    goto LABEL_14;
  }

void sub_100139FE8()
{
  uint64_t v1 = sub_10013A680();
  uint64_t v2 = (void *)sub_10013A704((uint64_t)v1);
  *(void *)(v0 + 32) = sub_10013A078(v2, v3, v4);
  sub_10013A774();
}

void sub_10013A01C()
{
  uint64_t v1 = sub_10013A680();
  uint64_t v2 = (void *)sub_10013A704((uint64_t)v1);
  *(void *)(v0 + 32) = sub_10013A12C(v2, v3, v4);
  sub_10013A774();
}

void sub_10013A04C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_10013A078(void *a1, uint64_t a2, uint64_t a3))(id *a1)
{
  unint64_t v6 = a3 & 0xC000000000000001LL;
  sub_10015687C(a2, (a3 & 0xC000000000000001LL) == 0);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return sub_10013A0E4;
}

void sub_10013A0E4(id *a1)
{
}

uint64_t type metadata accessor for ScopedIDsBatchRequest()
{
  return objc_opt_self(&OBJC_CLASS___GKScopedIDsBatchRequest);
}

uint64_t type metadata accessor for ScopedIDsUtils()
{
  return objc_opt_self(&OBJC_CLASS___GKScopedIDsUtils);
}

void (*sub_10013A12C(void *a1, uint64_t a2, uint64_t a3))(id *)
{
  unint64_t v6 = a3 & 0xC000000000000001LL;
  sub_10015687C(a2, (a3 & 0xC000000000000001LL) == 0);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return sub_10013A5F4;
}

uint64_t sub_10013A198(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result, a2);
  }
  return result;
}

uint64_t sub_10013A1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B84E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013A1EC(uint64_t a1)
{
  return a1;
}

id *sub_10013A214(id *a1)
{
  id v2 = *a1;
  return a1;
}

uint64_t sub_10013A23C(uint64_t a1)
{
  return a1;
}

void sub_10013A26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2, a2);
    swift_bridgeObjectRelease(a4, v6);
  }

uint64_t sub_10013A2B0(uint64_t a1, uint64_t a2)
{
  return a1;
}

id *sub_10013A2D8(id *a1)
{
  return a1;
}

unint64_t sub_10013A300()
{
  unint64_t result = qword_1002B84E8;
  if (!qword_1002B84E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3410, &type metadata for PlayerAndGameID);
    atomic_store(result, (unint64_t *)&qword_1002B84E8);
  }

  return result;
}

uint64_t sub_10013A33C(int64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t result = 0LL;
  while (1)
  {
    BOOL v5 = a1 <= a2;
    if (a3 > 0) {
      BOOL v5 = a1 >= a2;
    }
    if (v5) {
      break;
    }
    BOOL v6 = __OFADD__(a1, a3);
    a1 += a3;
    if (v6) {
      a1 = (a1 >> 63) ^ 0x8000000000000000LL;
    }
    BOOL v6 = __OFADD__(result++, 1LL);
    if (v6)
    {
      __break(1u);
      return result;
    }
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PlayerAndGameID(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

void destroy for PlayerAndGameID(uint64_t a1, uint64_t a2)
{
}

void *initializeWithCopy for PlayerAndGameID(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  BOOL v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  id v6 = v5;
  return a1;
}

void *assignWithCopy for PlayerAndGameID(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6);
  a1[2] = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a1[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8, v9);
  uint64_t v10 = (void *)a1[4];
  BOOL v11 = (void *)a2[4];
  a1[4] = v11;
  id v12 = v11;

  return a1;
}

__n128 initializeWithTake for PlayerAndGameID(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for PlayerAndGameID(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5, a2);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3], v6);
  uint64_t v7 = (void *)a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for PlayerAndGameID(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(sub_1001323F0(v0[31], v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_1001323F0(v0[31], v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_1001323F0(v0[31], v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayerAndGameID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PlayerAndGameID()
{
  return &type metadata for PlayerAndGameID;
}

unint64_t sub_10013A5B4()
{
  unint64_t result = qword_1002B8500;
  if (!qword_1002B8500)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F33E8, &type metadata for PlayerAndGameID);
    atomic_store(result, (unint64_t *)&qword_1002B8500);
  }

  return result;
}

void sub_10013A5F8()
{
  *(void *)(v0 + 16) = *(void *)(v1 + 16);
}

uint64_t sub_10013A624()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10013A62C()
{
  return v0 + 56;
}

uint64_t sub_10013A654(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_10013A660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 36LL, 2LL, a7, 17LL);
}

uint64_t sub_10013A678()
{
  return swift_bridgeObjectRetain(v0);
}

void *sub_10013A680()
{
  return malloc(0x28uLL);
}

uint64_t sub_10013A694()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_10013A69C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10013A6A4@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + a1));
}

uint64_t sub_10013A6AC(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

  ;
}

uint64_t sub_10013A6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

uint64_t sub_10013A6D4()
{
  return static _SetStorage.copy(original:)(*v0);
}

uint64_t sub_10013A6E4(uint64_t a1, ...)
{
  return String.hash(into:)(va, v1, v2);
}

  ;
}

uint64_t sub_10013A704(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t sub_10013A718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_allocObject(a1, a2 + 32, 7LL);
}

char *sub_10013A724(uint64_t a1, int64_t a2)
{
  return sub_100137634(0LL, a2, 0);
}

uint64_t sub_10013A730()
{
  return swift_getObjectType(v0);
}

uint64_t sub_10013A738()
{
  return swift_release(v0);
}

uint64_t sub_10013A740(uint64_t *a1)
{
  return sub_100137A38(a1, v1, v2);
}

Swift::Int sub_10013A74C()
{
  return Hasher._finalize()();
}

  ;
}

void *sub_10013A768@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return memmove(a1, v2, 8 * a2);
}

  ;
}

uint64_t sub_10013A780(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

uint64_t sub_10013A788(uint64_t a1, uint64_t a2)
{
  uint64_t v62 = a2;
  uint64_t v3 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NWBrowser.Result(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v59 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v53 - v11;
  uint64_t v60 = v13;
  __chkstk_darwin(v10);
  uint64_t v58 = (char *)&v53 - v14;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v54 = a1 + 56;
  uint64_t v16 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v55 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v63 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v20 = 0LL;
  uint64_t v56 = v12;
  uint64_t v57 = (char *)&type metadata for () + 8;
  uint64_t v61 = v7;
  if (!v18) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v66 = (v18 - 1) & v18;
  int64_t v64 = v20;
  for (unint64_t i = __clz(__rbit64(v18)) | (v20 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v24 << 6))
  {
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v27 = v58;
    v26(v58, *(void *)(v63 + 48) + *(void *)(v7 + 72) * i, v6);
    unint64_t v28 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v28(v12, v27, v6);
    uint64_t v29 = type metadata accessor for TaskPriority(0LL);
    sub_1001291F8((uint64_t)v5, 1LL, 1LL, v29);
    unint64_t v30 = v59;
    v26(v59, (unint64_t)v12, v6);
    sub_10014441C( &qword_1002B8688,  v31,  (uint64_t (*)(uint64_t))type metadata accessor for PeerDiscovery,  (uint64_t)&protocol conformance descriptor for PeerDiscovery);
    uint64_t v32 = v6;
    uint64_t v34 = v33;
    uint64_t v35 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v36 = (v35 + 40) & ~v35;
    uint64_t v37 = (char *)swift_allocObject(&unk_100273ED8, v36 + v60, v35 | 7);
    uint64_t v38 = (uint64_t)v5;
    uint64_t v39 = v62;
    *((void *)v37 + 2) = v62;
    *((void *)v37 + 3) = v34;
    uint64_t v6 = v32;
    *((void *)v37 + 4) = v39;
    v28(&v37[v36], v30, v32);
    int v40 = sub_10012B4E8(v38, 1LL, v29);
    uint64_t v41 = swift_retain_n(v39, 2LL);
    if (v40 == 1)
    {
      sub_100144560(v38, &qword_1002B8238);
      uint64_t v42 = 0LL;
    }

    else
    {
      unsigned __int8 v43 = TaskPriority.rawValue.getter(v41);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8LL))(v38, v29);
      uint64_t v42 = v43;
    }

    uint64_t v5 = (char *)v38;
    id v12 = v56;
    int64_t v20 = v64;
    uint64_t v44 = *((void *)v37 + 2);
    if (v44)
    {
      uint64_t v45 = *((void *)v37 + 3);
      uint64_t ObjectType = swift_getObjectType(*((void *)v37 + 2));
      swift_unknownObjectRetain(v44);
      uint64_t v47 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v45);
      uint64_t v49 = v48;
      swift_unknownObjectRelease(v44);
    }

    else
    {
      uint64_t v47 = 0LL;
      uint64_t v49 = 0LL;
    }

    uint64_t v50 = swift_allocObject(&unk_100273F00, 32LL, 7LL);
    *(void *)(v50 + 16) = &unk_1002B8690;
    *(void *)(v50 + 24) = v37;
    if (v49 | v47)
    {
      v65[0] = 0LL;
      v65[1] = 0LL;
      uint64_t v51 = v65;
      v65[2] = v47;
      v65[3] = v49;
    }

    else
    {
      uint64_t v51 = 0LL;
    }

    uint64_t v7 = v61;
    uint64_t v52 = swift_task_create(v42 | 0x1C00, v51, v57, &unk_1002B8698, v50);
    swift_release(v52);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    unint64_t v18 = v66;
    if (v66) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v22 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
      __break(1u);
      goto LABEL_34;
    }

    if (v22 >= v55) {
      goto LABEL_32;
    }
    unint64_t v23 = *(void *)(v54 + 8 * v22);
    int64_t v24 = v20 + 1;
    if (!v23)
    {
      int64_t v24 = v20 + 2;
      if (v20 + 2 >= v55) {
        goto LABEL_32;
      }
      unint64_t v23 = *(void *)(v54 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v20 + 3;
        if (v20 + 3 >= v55) {
          goto LABEL_32;
        }
        unint64_t v23 = *(void *)(v54 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v20 + 4;
          if (v20 + 4 >= v55) {
            goto LABEL_32;
          }
          unint64_t v23 = *(void *)(v54 + 8 * v24);
          if (!v23) {
            break;
          }
        }
      }
    }

void sub_10013AC08(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_100129274(&qword_1002B8608);
  uint64_t inited = swift_initStackObject(v5, &v17);
  *(_OWORD *)(inited + 16) = xmmword_1001F3460;
  __int128 v7 = v2[1];
  __int128 v21 = *v2;
  __int128 v8 = v21;
  __int128 v22 = v7;
  *(_OWORD *)(inited + 48) = v7;
  *(_OWORD *)(inited + 96) = v8;
  __int128 v20 = v2[2];
  *(_OWORD *)(inited + 192) = v20;
  *(void *)(inited + 32) = 101LL;
  *(void *)(inited + 40) = 0xE100000000000000LL;
  sub_1001451B8();
  *(void *)(v9 + 72) = &type metadata for String;
  *(void *)(v9 + 80) = v10;
  *(void *)(v9 + 88) = 0xE800000000000000LL;
  *(void *)(v9 + 120) = &type metadata for String;
  *(void *)(v9 + 128) = 0x7550656369766564LL;
  *(void *)(v9 + 136) = 0xEF6E656B6F546873LL;
  *(void *)(v9 + 144) = a1;
  *(void *)(v9 + 152) = a2;
  *(void *)(v9 + 168) = &type metadata for Data;
  *(void *)(v9 + 176) = 104LL;
  *(void *)(v9 + 184) = v11;
  *(void *)(v9 + 216) = &type metadata for String;
  *(void *)(v9 + 224) = 28776LL;
  *(void *)(v9 + 232) = 0xE200000000000000LL;
  *(_OWORD *)(v9 + 240) = v12;
  *(void *)(v9 + 264) = &type metadata for String;
  *(void *)(v9 + 272) = 0x4449726579616C70LL;
  *(void *)(v9 + 280) = 0xE800000000000000LL;
  __int128 v18 = v2[4];
  __int128 v19 = v12;
  *(_OWORD *)(v9 + 288) = v18;
  *(void *)(v9 + 312) = &type metadata for String;
  *(void *)(v9 + 320) = 0xD000000000000010LL;
  *(void *)(v9 + 328) = 0x800000010024C010LL;
  *(void *)(v9 + 360) = &type metadata for Bool;
  *(_BYTE *)(v9 + 336) = 1;
  sub_10013A1EC((uint64_t)&v22);
  sub_10013A1EC((uint64_t)&v21);
  sub_10013593C(a1, a2);
  sub_10013A1EC((uint64_t)&v20);
  sub_10013A1EC((uint64_t)&v19);
  sub_10013A1EC((uint64_t)&v18);
  uint64_t v13 = sub_100144C20();
  Dictionary.init(dictionaryLiteral:)(v13, v14, v15, v16);
  sub_100144EAC();
}

void PeerDiscovery.__allocating_init(delegate:localPlayerID:localPushToken:)()
{
  uint64_t v0 = sub_100144CF4();
  sub_1001450D0(v0);
  PeerDiscovery.init(delegate:localPlayerID:localPushToken:)();
  sub_100144EAC();
}

char *PeerDiscovery.init(delegate:localPlayerID:localPushToken:)()
{
  uint64_t v6 = sub_100144CF4();
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v6);
  swift_defaultActor_initialize(v1);
  sub_100144C04((uint64_t)(v1 + 14));
  v1[15] = 0LL;
  v1[16] = 0LL;
  v1[21] = _swiftEmptyDictionarySingleton;
  v1[22] = _swiftEmptyDictionarySingleton;
  v1[23] = _swiftEmptyDictionarySingleton;
  v1[17] = v4;
  v1[18] = v3;
  v1[19] = v2;
  v1[20] = v0;
  v10.receiver = v1;
  v10.Class super_class = ObjectType;
  __int128 v8 = (char *)objc_msgSendSuper2(&v10, "init");
  swift_unknownObjectWeakAssign(v8 + 112, v5);
  swift_unknownObjectRelease(v5);
  return v8;
}

uint64_t PeerDiscovery.startBrowsing()()
{
  v1[4] = v0;
  uint64_t v2 = sub_1001447C4();
  v1[5] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[6] = v3;
  v1[7] = sub_10014468C(v3);
  v1[8] = sub_1001446BC();
  sub_1001446C4();
  return sub_100132230();
}

#error "10013AFF0: call analysis failed (funcsize=165)"
uint64_t sub_10013B204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_10012CED0();
  sub_10012CE48();
  sub_1001446C4();
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_10013B23C(uint64_t a1)
{
  uint64_t v3 = *(os_log_s **)(v1 + 56);
  static os_log_type_t.info.getter(a1);
  uint64_t v4 = sub_10012CEF0();
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  if (sub_100144B20(v5))
  {
    uint64_t v6 = *(void *)(v1 + 48);
    __int128 v7 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v8 = sub_10012CE30(32LL);
    uint64_t v21 = v8;
    *(_DWORD *)__int128 v7 = 136315138;
    sub_10014487C();
    uint64_t v10 = sub_100144BBC(26LL, v9, &v21);
    uint64_t v11 = sub_100145120(v10);
    sub_100144C60(v11, v12);
    sub_10012CE90((void *)&_mh_execute_header, v3, v2, "Nearby - %s", v7);
    sub_10012CE88(v8, v13, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v8);
    sub_10012CE24((uint64_t)v7);

    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  }

  else
  {
    uint64_t v15 = *(void *)(v1 + 48);

    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
  }

  sub_1001450DC(v14);
  uint64_t v16 = *(void *)(v1 + 32);
  uint64_t v17 = type metadata accessor for PeerBrowser();
  uint64_t v18 = sub_100144810(v17);
  *(void *)(v18 + 24) = 0LL;
  uint64_t v19 = sub_100144C04(v18 + 16);
  *(void *)(v18 + 24) = &off_100273D20;
  *(void *)(v18 + 32) = 0LL;
  sub_100145048(v19);
  sub_1001451A4();
  if (*(void *)(v16 + 120))
  {
    sub_10012CF38();
    sub_10012C300();
    sub_10012CF14();
  }

  swift_task_dealloc(*(void *)(v1 + 64));
  sub_1001324F4();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t PeerDiscovery.stopBrowsing()()
{
  v1[9] = v0;
  uint64_t v2 = sub_1001447C4();
  v1[10] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[11] = v3;
  v1[12] = sub_1001446D8(v3);
  sub_1001446C4();
  return sub_100144664(v4, v5, v6);
}

uint64_t sub_10013B3FC(uint64_t a1)
{
  uint64_t v2 = v1 + 40;
  unsigned __int8 v3 = static os_log_type_t.info.getter(a1);
  uint64_t v4 = sub_10012CEF0();
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  uint64_t v6 = v3;
  if (sub_1001449DC(v5))
  {
    uint64_t v7 = *(void *)(v1 + 88);
    uint64_t v27 = *(void *)(v1 + 80);
    uint64_t v28 = *(void *)(v1 + 96);
    uint64_t v8 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v9 = v1 + 40;
    uint64_t v10 = sub_10012CE30(32LL);
    uint64_t v29 = v10;
    sub_100144E8C(4.8149e-34);
    sub_10014487C();
    *(void *)(v1 + 64) = sub_100144BBC(26LL, v11, &v29);
    sub_1001449A8(v1 + 64, v1 + 72);
    sub_10012CE90((void *)&_mh_execute_header, v5, (os_log_type_t)v6, "Nearby - %s", v8);
    sub_10012CE88(v10, v12, (uint64_t)&type metadata for Any + 8);
    uint64_t v13 = v10;
    uint64_t v2 = v1 + 40;
    sub_10012CE24(v13);
    sub_10012CE24((uint64_t)v8);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v28, v27);
  }

  else
  {
    uint64_t v14 = *(void *)(v1 + 88);
    uint64_t v15 = *(void *)(v1 + 96);
    uint64_t v9 = *(void *)(v1 + 80);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v9);
  }

  uint64_t v16 = (uint64_t *)(*(void *)(v1 + 72) + 184LL);
  uint64_t v17 = sub_100144864();
  sub_100144704(v17, v18, 0LL);
  uint64_t v19 = *v16;
  uint64_t v20 = *v16 + 64;
  sub_1001449B0();
  uint64_t result = sub_1001325D8();
  uint64_t v22 = 0LL;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  sub_100144E20();
  while (1)
  {
    sub_10012CF38();
    sub_10015EE50();
    uint64_t result = sub_10012CF14();
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    uint64_t v23 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }

    if (v23 >= v9) {
      goto LABEL_22;
    }
    ++v22;
    if (!*(void *)(v20 + 8 * v23))
    {
      uint64_t v22 = v23 + 1;
      if (v23 + 1 >= v9) {
        goto LABEL_22;
      }
      if (!*(void *)(v20 + 8 * v22))
      {
        uint64_t v22 = v23 + 2;
        if (v23 + 2 >= v9) {
          goto LABEL_22;
        }
        if (!*(void *)(v20 + 8 * v22)) {
          break;
        }
      }
    }

uint64_t sub_10013B6B4(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1002B850C;
  swift_retain(a2);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_100144660;
  return PeerDiscovery.startBrowsing()();
}

uint64_t sub_10013B728(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1002B8514;
  swift_retain(a2);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_10013B788;
  return PeerDiscovery.stopBrowsing()();
}

uint64_t sub_10013B788()
{
  uint64_t v2 = *(void (***)(void))(v1 + 24);
  sub_10012CE48();
  sub_10013A738();
  v2[2](v2);
  _Block_release(v2);
  return sub_10012CEAC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t PeerDiscovery.startListening(_:)(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = sub_1001447C4();
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = sub_10014468C(v4);
  v2[9] = sub_1001446BC();
  sub_1001446C4();
  return sub_100132230();
}

uint64_t sub_10013B820( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v29;
  a26 = v30;
  a24 = v26;
  uint64_t v31 = v26 + 24;
  if (*(void *)(*(void *)(v26 + 40) + 128LL))
  {
    uint64_t v32 = *(os_log_s **)(v26 + 72);
    static os_log_type_t.debug.getter(v30);
    uint64_t v33 = sub_10012CEF0();
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    BOOL v35 = sub_100144B30(v34);
    uint64_t v36 = *(void *)(v26 + 72);
    uint64_t v37 = *(void *)(v26 + 56);
    if (v35)
    {
      uint64_t v38 = (uint8_t *)sub_10012CE30(12LL);
      a14 = sub_10012CE30(32LL);
      uint64_t v39 = a14;
      *(_DWORD *)uint64_t v38 = 136315138;
      sub_10014487C();
      *(void *)(v26 + 24) = sub_100144BBC(47LL, v40, &a14);
      sub_100144840(v26 + 24, v26 + 32);
      sub_10012CE90((void *)&_mh_execute_header, v32, v27, "Nearby - %s", v38);
      sub_10012CE88(v39, v41, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v39);
      sub_10012CE24((uint64_t)v38);
    }

    sub_100144EBC(v36, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
    uint64_t v57 = (void *)swift_task_alloc(dword_1002B852C);
    *(void *)(v26 + 80) = v57;
    *uint64_t v57 = v26;
    v57[1] = sub_10013BB64;
    sub_1001448F0();
    return PeerDiscovery.stopListening()();
  }

  else
  {
    uint64_t v42 = *(void *)(v26 + 32);
    static os_log_type_t.info.getter(v30);
    sub_100144F70();
    sub_100145214();
    sub_100144F00(0xD000000000000032LL, (uint64_t)"Factory starting listening. Local discovery info: ");
    v43._uint64_t countAndFlagsBits = sub_100145200(v42, (uint64_t)&type metadata for String);
    String.append(_:)(v43);
    sub_1001322A0(v44, v45);
    uint64_t v47 = a14;
    uint64_t v46 = a15;
    sub_100144998();
    sub_100135A20(v46);
    uint64_t v48 = (os_log_s *)sub_100135A10();
    BOOL v49 = sub_100144764(v48);
    uint64_t v51 = *(void *)(v26 + 56);
    uint64_t v50 = *(void *)(v26 + 64);
    uint64_t v52 = *(void *)(v26 + 48);
    if (v49)
    {
      uint64_t v64 = *(void *)(v26 + 56);
      uint64_t v51 = sub_10012CE30(12LL);
      uint64_t v63 = v50;
      uint64_t v50 = sub_10012CE30(32LL);
      a14 = v50;
      uint64_t v62 = v52;
      uint64_t v52 = v26 + 24;
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v31 = v51 + 12;
      sub_10013A624();
      *(void *)(v26 + 16) = sub_100144DA4(v47, v53, &a14);
      sub_100144C60(v26 + 16, v26 + 24);
      sub_100135A44(v46);
      sub_10012CE90((void *)&_mh_execute_header, v48, v28, "Nearby - %s", (uint8_t *)v51);
      sub_10012CE88(v50, v54, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v50);
      sub_10012CE24(v51);

      uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v63, v62);
    }

    else
    {

      sub_100135A28(v46);
      uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
    }

    sub_1001322A0(v55, v56);
    uint64_t v59 = sub_100144D64();
    uint64_t v60 = (void *)sub_10012AAEC(v59, 80LL);
    v60[3] = 0LL;
    uint64_t v61 = sub_100144C04((uint64_t)(v60 + 2));
    uint64_t v60[5] = v50;
    v60[6] = v46;
    v60[7] = v51;
    v60[8] = v31;
    v60[9] = v48;
    sub_100145184(v61, (uint64_t)&off_100273D38);
    sub_100144B4C();
    sub_100144B4C();
    sub_10013A69C();
    sub_100144E9C();
    sub_10016D328();
    sub_100145114();
    sub_100145140();
    if (*(void *)(v52 + 128))
    {
      sub_10012CF38();
      sub_10016C878();
      sub_10012CF14();
    }

    swift_task_dealloc(*(void *)(v26 + 72));
    sub_1001324F4();
    return sub_1001446A0(*(uint64_t (**)(void))(v26 + 8));
  }

uint64_t sub_10013BB64()
{
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_10013BB9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v26;
  a24 = v27;
  a22 = v25;
  uint64_t v28 = *(void *)(v25 + 32);
  static os_log_type_t.info.getter(v27);
  sub_10014509C();
  sub_100145214();
  sub_100144BB4(50LL, 0x800000010024B870LL);
  v55._uint64_t countAndFlagsBits = sub_100145200(v28, (uint64_t)&type metadata for String);
  sub_1001447F4(v55);
  sub_10012B950(v29, v30);
  uint64_t v32 = a12;
  uint64_t v31 = a13;
  sub_100144D50();
  sub_100135A20(v31);
  uint64_t v33 = (os_log_s *)sub_100144D48();
  os_log_type_t v34 = v24;
  if (sub_1001447BC(v33))
  {
    uint64_t v35 = *(void *)(v25 + 56);
    uint64_t v53 = *(void *)(v25 + 48);
    uint64_t v54 = *(void *)(v25 + 64);
    uint64_t v36 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v37 = sub_10012CE30(32LL);
    a12 = v37;
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v38 = v36 + 4;
    sub_1001296D0();
    uint64_t v40 = sub_100144848(v32, v39, &a12);
    uint64_t v41 = sub_100145120(v40);
    sub_1001449A8(v41, v42);
    sub_100135A44(v31);
    sub_10012CE90((void *)&_mh_execute_header, v33, v34, "Nearby - %s", v36);
    sub_10012CE88(v37, v43, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v37);
    sub_10012CE24((uint64_t)v36);

    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v54, v53);
  }

  else
  {
    uint64_t v36 = *(uint8_t **)(v25 + 56);
    uint64_t v38 = *(uint8_t **)(v25 + 64);
    uint64_t v35 = *(void *)(v25 + 48);

    sub_100135A28(v31);
    uint64_t v46 = sub_100144864();
    uint64_t v44 = v48(v46, v47);
  }

  sub_10012B950(v44, v45);
  uint64_t v49 = sub_100144D64();
  uint64_t v50 = (void *)sub_10012AAEC(v49, 80LL);
  v50[3] = 0LL;
  uint64_t v51 = sub_100144C04((uint64_t)(v50 + 2));
  v50[5] = v33;
  v50[6] = v38;
  v50[7] = v35;
  v50[8] = v32;
  v50[9] = v36;
  sub_100145184(v51, (uint64_t)&off_100273D38);
  sub_100144B4C();
  sub_100144B4C();
  sub_10013A69C();
  sub_100144E9C();
  sub_10016D328();
  sub_100145114();
  sub_100145140();
  if (*(void *)(v31 + 128))
  {
    sub_10012CF38();
    sub_10016C878();
    sub_10012CF14();
  }

  swift_task_dealloc(*(void *)(v25 + 72));
  sub_1001324F4();
  return sub_100144670(*(uint64_t (**)(void))(v25 + 8));
}

uint64_t PeerDiscovery.stopListening()()
{
  v1[15] = v0;
  uint64_t v2 = sub_100129274(&qword_1002B8530);
  v1[16] = sub_10014468C(*(void *)(v2 - 8));
  v1[17] = sub_1001446BC();
  uint64_t v3 = sub_1001447C4();
  v1[18] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[19] = v4;
  v1[20] = sub_1001446D8(v4);
  sub_1001446C4();
  return sub_100132230();
}

uint64_t sub_10013BDF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v28;
  a24 = v26;
  os_log_type_t v29 = static os_log_type_t.info.getter(v28);
  uint64_t v30 = sub_10012CEF0();
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = v29;
  if (sub_100144CEC(v31))
  {
    uint64_t v33 = *(void *)(v26 + 152);
    uint64_t v72 = *(void *)(v26 + 160);
    os_log_type_t v34 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v35 = sub_10012CE30(32LL);
    a15 = v35;
    *(_DWORD *)os_log_type_t v34 = 136315138;
    *(void *)(v26 + 112) = sub_100144BBC(27LL, 0x800000010024B8E0LL, &a15);
    sub_100144840(v26 + 112, v26 + 120);
    sub_10012CE90((void *)&_mh_execute_header, v31, v32, "Nearby - %s", v34);
    sub_10012CE88(v35, v36, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v35);
    sub_10012CE24((uint64_t)v34);

    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8);
    uint64_t v38 = v72;
  }

  else
  {
    uint64_t v39 = *(void *)(v26 + 152);
    uint64_t v40 = *(void *)(v26 + 160);

    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8);
    uint64_t v38 = v40;
  }

  sub_100144D78(v38, v37);
  uint64_t v71 = *(void *)(v26 + 120) + 168LL;
  sub_100144704(v71, v26 + 16, 0LL);
  uint64_t v41 = *(void *)v71;
  uint64_t v73 = *(void *)v71 + 64LL;
  uint64_t v42 = -1LL;
  uint64_t v43 = -1LL << *(_BYTE *)(*(void *)v71 + 32LL);
  if (-v43 < 64) {
    uint64_t v42 = ~(-1LL << -(char)v43);
  }
  int64_t v44 = v42 & *(void *)(*(void *)v71 + 64LL);
  int64_t v45 = (unint64_t)(63 - v43) >> 6;
  uint64_t result = sub_100144D2C();
  int64_t v47 = 0LL;
  if (!v44) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v48 = __clz(__rbit64(v44));
  v44 &= v44 - 1;
  unint64_t v49 = v48 | (v47 << 6);
LABEL_8:
  uint64_t v50 = *(void *)(v26 + 128);
  uint64_t v51 = *(void *)(v41 + 48);
  uint64_t v52 = sub_100145050();
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v52 - 8) + 16LL))( v50,  v51 + *(void *)(*(void *)(v52 - 8) + 72LL) * v49,  v52);
  uint64_t v53 = *(void *)(v41 + 56);
  uint64_t v54 = sub_100144FA8();
  *(void *)(v50 + *(int *)(v54 + swift_release(*(void *)(v0 + 48)) = *(void *)(v53 + 8 * v49);
  sub_1001291F8(v50, 0LL, 1LL, v54);
  sub_10012CF1C();
  while (1)
  {
    uint64_t v60 = *(void *)(v26 + 136);
    sub_100144188(*(void *)(v26 + 128), v60, &qword_1002B8530);
    uint64_t v61 = sub_100144FA8();
    sub_10015EE50();
    sub_10012CF14();
    uint64_t v62 = sub_100145050();
    uint64_t result = sub_10014471C(v62);
    if (v44) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v55 = v47 + 1;
    if (__OFADD__(v47, 1LL))
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }

    if (v55 < v45)
    {
      unint64_t v56 = *(void *)(v73 + 8 * v55);
      if (v56) {
        goto LABEL_12;
      }
      int64_t v57 = v47 + 2;
      ++v47;
      if (v55 + 1 < v45)
      {
        unint64_t v56 = *(void *)(v73 + 8 * v57);
        if (v56) {
          goto LABEL_15;
        }
        int64_t v47 = v55 + 1;
        if (v55 + 2 < v45)
        {
          unint64_t v56 = *(void *)(v73 + 8 * (v55 + 2));
          if (v56)
          {
            v55 += 2LL;
            goto LABEL_12;
          }

          int64_t v57 = v55 + 3;
          int64_t v47 = v55 + 2;
          if (v55 + 3 < v45)
          {
            unint64_t v56 = *(void *)(v73 + 8 * v57);
            if (!v56)
            {
              while (1)
              {
                int64_t v55 = v57 + 1;
                if (__OFADD__(v57, 1LL)) {
                  goto LABEL_55;
                }
                if (v55 >= v45)
                {
                  int64_t v47 = v45 - 1;
                  goto LABEL_26;
                }

                unint64_t v56 = *(void *)(v73 + 8 * v55);
                ++v57;
                if (v56) {
                  goto LABEL_12;
                }
              }
            }

LABEL_45:
    sub_100144E08();
  }

  int64_t v68 = v67 + 3;
  if (v68 >= v44) {
    goto LABEL_48;
  }
  if (*(void *)(v65 + 8 * v68))
  {
    int64_t v66 = v68;
    goto LABEL_45;
  }

  while (1)
  {
    int64_t v66 = v68 + 1;
    if (__OFADD__(v68, 1LL)) {
      break;
    }
    if (v66 >= v44) {
      goto LABEL_48;
    }
    ++v68;
    if (*(void *)(v65 + 8 * v66)) {
      goto LABEL_45;
    }
  }

uint64_t sub_10013C350(uint64_t a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a1,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  v3[4] = v6;
  uint64_t v7 = dword_1002B8524;
  swift_retain(a3);
  uint64_t v8 = (void *)swift_task_alloc(v7);
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10013C3E8;
  return PeerDiscovery.startListening(_:)(v6);
}

uint64_t sub_10013C3E8()
{
  uint64_t v2 = *(void (***)(void))(v1 + 24);
  uint64_t v3 = sub_10012CE48();
  sub_100132324(v3, v4);
  sub_10014510C();
  v2[2](v2);
  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10013C458(uint64_t a1, int a2, void *aBlock, uint64_t a4)
{
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = sub_10012AAEC(a4, 32LL);
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = a1;
  swift_retain(a1);
  uint64_t v8 = sub_100144B40();
  sub_100188AB4(v8, v9);
}

uint64_t sub_10013C4B0(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1002B852C;
  swift_retain(a2);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_100144660;
  return PeerDiscovery.stopListening()();
}

uint64_t PeerDiscovery.sendDataToParticipant(_:deviceID:data:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[15] = a6;
  v7[16] = v6;
  v7[13] = a4;
  v7[14] = a5;
  v7[11] = a2;
  v7[12] = a3;
  v7[10] = a1;
  uint64_t v8 = sub_1001447C4();
  v7[17] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[18] = v9;
  v7[19] = sub_10014468C(v9);
  v7[20] = sub_1001446BC();
  sub_1001446C4();
  return sub_100132230();
}

uint64_t sub_10013C568( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = v18[12];
  sub_100144704(v18[16] + 184LL, (uint64_t)(v18 + 2), 32LL);
  sub_1001296D0();
  sub_100144ED8();
  uint64_t v20 = sub_1001451E8();
  uint64_t v22 = sub_10012B950(v20, v21);
  uint64_t v83 = v18 + 9;
  if (v19
    || (uint64_t v19 = v18[12],
        sub_100144704(v18[16] + 176LL, (uint64_t)(v18 + 5), 32LL),
        sub_1001296D0(),
        sub_100144ED8(),
        uint64_t v23 = sub_1001451E8(),
        uint64_t v22 = sub_10012B950(v23, v24),
        v19))
  {
    v18[21] = v19;
    uint64_t v25 = v18[12];
    os_log_type_t v26 = static os_log_type_t.info.getter(v22);
    sub_100144F70();
    _StringGuts.grow(_:)(40LL);
    swift_bridgeObjectRelease(a15, v27);
    sub_1001450F0();
    sub_100144784();
    sub_100144EC4(v25);
    sub_1001451B0();
    sub_100135A20(0x800000010024B940LL);
    uint64_t v28 = (os_log_s *)sub_10014514C();
    os_log_type_t v29 = v26;
    BOOL v30 = sub_100144F3C(v28);
    uint64_t v31 = v18[20];
    uint64_t v32 = v18[17];
    uint64_t v33 = v18[18];
    if (v30)
    {
      uint64_t v82 = v18[17];
      uint64_t v81 = v18[20];
      os_log_type_t v34 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v84 = sub_10012CE30(32LL);
      *(_DWORD *)os_log_type_t v34 = 136315138;
      sub_1001325D8();
      uint64_t v35 = sub_100144C20();
      uint64_t v38 = sub_100135074(v35, v36, v37);
      uint64_t v39 = sub_100144D58(v38, v83);
      sub_1001449A8((uint64_t)v39, (uint64_t)(v18 + 10));
      sub_100135A44(0x800000010024B940LL);
      sub_10012CE90((void *)&_mh_execute_header, v28, v29, "Nearby - %s", v34);
      sub_10012CE88(v84, v40, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v84);
      sub_10012CE24((uint64_t)v34);

      uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v81, v82);
    }

    else
    {
      sub_100135A28(0x800000010024B940LL);

      uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    }

    sub_100132454(v41, v42);
    sub_100144E50();
    uint64_t v43 = sub_1001488C4(3);
    v18[22] = v43;
    uint64_t v44 = sub_100129274(&qword_1002B8550);
    uint64_t v45 = sub_100144810(v44);
    *(_OWORD *)(v45 + 16) = xmmword_1001F3470;
    *(void *)(v45 + 32) = v43;
    uint64_t v85 = v45;
    specialized Array._endMutation()(v45);
    uint64_t v46 = sub_100145060();
    sub_10012CF60(v46);
    sub_10012CF1C();
    v18[23] = NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( 0x654D79627261654ELL,  0xED00006567617373LL,  0LL,  0LL,  0LL,  v85,  0.5);
    int64_t v47 = (void *)swift_task_alloc(dword_1002B963C);
    v18[24] = v47;
    void *v47 = v18;
    v47[1] = sub_10013CA18;
    sub_100144970(v18[14]);
    sub_1001448F0();
    return sub_10015F1FC(v48, v49, v50, v51, v52);
  }

  else
  {
    uint64_t v55 = v18[10];
    uint64_t v54 = (void *)v18[11];
    os_log_type_t v56 = static os_log_type_t.debug.getter(v22);
    sub_100144F70();
    _StringGuts.grow(_:)(55LL);
    sub_10014487C();
    sub_100144BB4(21LL, v57);
    v58._uint64_t countAndFlagsBits = sub_100144ECC();
    String.append(_:)(v58);
    sub_100144F00(0xD00000000000001ELL, (uint64_t)". Cannot send data to player: ");
    v59._uint64_t countAndFlagsBits = v55;
    v59._object = v54;
    String.append(_:)(v59);
    sub_100144D50();
    sub_100135A20(a15);
    uint64_t v60 = (os_log_s *)sub_100144D48();
    BOOL v61 = sub_1001447BC(v60);
    uint64_t v62 = v18[19];
    if (v61)
    {
      a13 = v18[18];
      a11 = v18[17];
      uint64_t v63 = (uint8_t *)sub_10012CE30(12LL);
      a10 = v62;
      a14 = sub_10012CE30(32LL);
      sub_100144F60(4.8149e-34);
      sub_10013A624();
      uint64_t v64 = sub_100144870();
      v18[8] = sub_100135074(v64, v65, v66);
      sub_100144C60((uint64_t)(v18 + 8), (uint64_t)v83);
      sub_100135A44(a15);
      sub_10012CE90((void *)&_mh_execute_header, v60, v56, "Nearby - %s", v63);
      sub_10012CE88(a14, v67, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(a14);
      sub_10012CE24((uint64_t)v63);

      uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(a13 + 8))(v62, a11);
    }

    else
    {
      sub_100135A28(a15);

      uint64_t v70 = sub_100144C20();
      uint64_t v68 = v72(v70, v71);
    }

    sub_1001322A0(v68, v69);
    swift_task_dealloc(v18[20]);
    sub_1001324F4();
    sub_1001448F0();
    return v74(v73, v74, v75, v76, v77, v78, v79, v80, a9, a10, a11, v83, a13, a14, a15, a16, a17, a18);
  }

uint64_t sub_10013CA18()
{
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_10013CA4C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_10013CB20(uint64_t a1, uint64_t a2, void *a3, void *aBlock, uint64_t a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v12 = v11;
  v5[4] = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v15 = v14;
  v5[5] = v14;
  id v16 = a3;
  swift_retain(a5);
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v19 = v18;

  v5[6] = v17;
  v5[7] = v19;
  uint64_t v20 = (void *)swift_task_alloc(dword_1002B854C);
  v5[8] = v20;
  *uint64_t v20 = v5;
  v20[1] = sub_10013CC04;
  return PeerDiscovery.sendDataToParticipant(_:deviceID:data:)(v10, v12, v13, v15, v17, v19);
}

uint64_t sub_10013CC04(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v11 = v3;
  sub_100145134(*(void *)(v3 + 64), &v11);
  uint64_t v4 = sub_100144D3C();
  uint64_t v6 = sub_100132454(v4, v5);
  sub_100132858(v6, v7);
  sub_1001450FC();
  if (a1)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)(a1);
    swift_errorRelease(a1);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  uint64_t v9 = *(uint64_t (***)(uint64_t, uint64_t))(v3 + 24);
  sub_1001447E8(v9[2]);

  _Block_release(v9);
  return ((uint64_t (*)(void))v1[1])();
}

void PeerDiscovery.__allocating_init()()
{
  uint64_t v1 = sub_1001450D0(v0);
  swift_defaultActor_initialize(v1);
  sub_100144E7C((uint64_t)"GameDaemonCore.PeerDiscovery", v2, (uint64_t)"init()");
  __break(1u);
}

void PeerDiscovery.init()()
{
}

void *PeerDiscovery.deinit()
{
  return v0;
}

uint64_t PeerDiscovery.__deallocating_deinit()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t PeerDiscovery.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_10013CD98()
{
  return PeerDiscovery.unownedExecutor.getter();
}

uint64_t sub_10013CDB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v84 = *(char **)(v2 - 8);
  uint64_t v85 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v83 = (uint64_t (*)(char *, uint64_t))((char *)&v77 - v6);
  uint64_t v7 = type metadata accessor for NWTXTRecord(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NWBrowser.Result.Metadata(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v77 - v17;
  NWBrowser.Result.metadata.getter(v16);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v18, v11);
  if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v15, v11) != enum case for NWBrowser.Result.Metadata.bonjour(_:))
  {
    uint64_t v50 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
    uint64_t v51 = v50(v15, v11);
    os_log_type_t v52 = static os_log_type_t.info.getter(v51);
    uint64_t v53 = ((uint64_t (*)(void))static GKLog.match.getter)();
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = v52;
    if (os_log_type_enabled(v54, v52))
    {
      os_log_type_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v57 = swift_slowAlloc(32LL, -1LL);
      uint64_t v83 = v50;
      uint64_t v58 = v57;
      uint64_t v86 = v57;
      *(_DWORD *)os_log_type_t v56 = 136315138;
      uint64_t v88 = sub_100135074(0xD000000000000021LL, 0x800000010024C270LL, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Nearby - %s", v56, 0xCu);
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v59 = v58;
      uint64_t v50 = v83;
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    (*((void (**)(char *, uint64_t))v84 + 1))(v5, v85);
    uint64_t result = v50(v18, v11);
    goto LABEL_29;
  }

  (*(void (**)(char *, uint64_t))(v12 + 96))(v15, v11);
  uint64_t v82 = v8;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v15, v7);
  uint64_t v19 = NWTXTRecord.subscript.getter(0x4449656369766564LL, 0xE800000000000000LL);
  if (!v20)
  {
    uint64_t v81 = v12;
    os_log_type_t v60 = static os_log_type_t.info.getter(v19);
    uint64_t v86 = 0LL;
    unint64_t v87 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(34LL);
    v61._object = (void *)0x800000010024C2A0LL;
    v61._uint64_t countAndFlagsBits = 0xD000000000000020LL;
    String.append(_:)(v61);
    uint64_t v80 = v10;
    uint64_t v62 = _print_unlocked<A, B>(_:_:)(v10, &v86, v7);
    uint64_t v63 = v86;
    unint64_t v64 = v87;
    unint64_t v65 = (char *)v83;
    static GKLog.match.getter(v62);
    uint64_t v66 = swift_bridgeObjectRetain_n(v64, 2LL);
    uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
    os_log_type_t v68 = v60;
    if (os_log_type_enabled(v67, v60))
    {
      uint64_t v79 = v7;
      uint64_t v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v70 = swift_slowAlloc(32LL, -1LL);
      uint64_t v78 = v11;
      uint64_t v71 = v70;
      uint64_t v86 = v70;
      *(_DWORD *)uint64_t v69 = 136315138;
      uint64_t v77 = v69 + 4;
      swift_bridgeObjectRetain(v64);
      uint64_t v88 = sub_100135074(v63, v64, &v86);
      uint64_t v7 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease_n(v64, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Nearby - %s", v69, 0xCu);
      swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v72 = v71;
      uint64_t v11 = v78;
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_slowDealloc(v69, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v64, 2LL);
    }

    (*((void (**)(char *, uint64_t))v84 + 1))(v65, v85);
    swift_bridgeObjectRelease(v64, v73);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v7);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v18, v11);
    goto LABEL_29;
  }

  uint64_t v21 = v20;
  uint64_t v85 = v19;
  id v22 = [(id)objc_opt_self(GKDevice) currentDevice];
  if (v22)
  {
    uint64_t v24 = sub_10016EE18(v22);
    if (v25)
    {
      uint64_t v26 = v25;
      if (v85 == v24 && v21 == v25)
      {
        swift_bridgeObjectRelease(v21, v25);
        uint64_t v21 = v26;
      }

      else
      {
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v21, v24, v25, 0LL);
        swift_bridgeObjectRelease(v26, v29);
        if ((v28 & 1) == 0) {
          goto LABEL_10;
        }
      }

      swift_bridgeObjectRelease(v21, v30);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v10, v7);
LABEL_28:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v18, v11);
LABEL_29:
      uint64_t v49 = 0LL;
      uint64_t v21 = 0LL;
      uint64_t v33 = 0LL;
      uint64_t v34 = 0LL;
      uint64_t v38 = 0LL;
      uint64_t v39 = 0LL;
      uint64_t v42 = 0LL;
      uint64_t v43 = 0LL;
      uint64_t v44 = 0LL;
      uint64_t v46 = 0LL;
LABEL_30:
      *a1 = v49;
      a1[1] = v21;
      a1[2] = v33;
      a1[3] = v34;
      a1[4] = v38;
      a1[5] = v39;
      a1[6] = v42;
      a1[7] = v43;
      a1[8] = v44;
      a1[9] = v46;
      return result;
    }

uint64_t sub_10013D4C8(uint64_t a1)
{
  v2[54] = a1;
  v2[55] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[56] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[57] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[58] = swift_task_alloc(v5);
  v2[59] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for NWEndpoint(0LL);
  v2[60] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10013D558, v1, 0LL);
}

uint64_t sub_10013D558()
{
  uint64_t v1 = v0[60];
  if (!v0[13])
  {
    sub_100144838();
    sub_1001324F4();
    sub_1001446D0();
    sub_100144AA0();
    __asm { BR              X0 }
  }

  uint64_t v77 = v0 + 53;
  uint64_t v2 = v0[55];
  sub_100145034(v0 + 2, v0 + 12);
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = sub_1001296D0();
  NWBrowser.Result.endpoint.getter(v5);
  uint64_t v6 = sub_100144E48();
  uint64_t v7 = sub_10012AAEC(v6, 128LL);
  uint64_t v8 = swift_retain(v2);
  sub_100144FBC( v8,  (void (*)(void, void, void, void, void, void, void, void, void, void))sub_1001440D0);
  uint64_t v9 = sub_1001441C4(v1, v0 + 2, v2, v7);
  v0[61] = v9;
  uint64_t v79 = v2 + 184;
  sub_100144704(v2 + 184, (uint64_t)(v0 + 42), 32LL);
  uint64_t v10 = *(void *)(v2 + 184);
  sub_1001296D0();
  sub_10012CFB4(v4, v3, v10);
  uint64_t v12 = v11;
  sub_10012B950(v11, v13);
  uint64_t v78 = v9;
  if (v12)
  {
    uint64_t v14 = sub_100144D34();
    os_log_type_t v15 = static os_log_type_t.debug.getter(v14);
    uint64_t v80 = 0LL;
    uint64_t v81 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(109LL);
    sub_100144BB4(44LL, 0x800000010024C200LL);
    sub_1001325D8();
    v16._uint64_t countAndFlagsBits = sub_100144864();
    String.append(_:)(v16);
    uint64_t v18 = sub_100144FBC( v17,  (void (*)(void, void, void, void, void, void, void, void, void, void))sub_10014412C);
    sub_100132454((uint64_t)v18, v19);
    v20._uint64_t countAndFlagsBits = 0x656369766564202CLL;
    v20._object = (void *)0xEB000000005B4449LL;
    String.append(_:)(v20);
    uint64_t v21 = *(void *)(v12 + 48);
    if (v21)
    {
      v0[50] = *(void *)(v12 + 40);
      v0[51] = v21;
      swift_bridgeObjectRetain(v21);
      uint64_t v22 = String.init<A>(reflecting:)(v0 + 50, &type metadata for String);
    }

    else
    {
      uint64_t v22 = 7104878LL;
    }

    sub_100144EC4(v22);
    sub_100132454(v39, v40);
    v41._uint64_t countAndFlagsBits = 0xD000000000000030LL;
    v41._object = (void *)0x800000010024C230LL;
    String.append(_:)(v41);
    uint64_t v42 = sub_1001325D8();
    v43._uint64_t countAndFlagsBits = Dictionary.description.getter(v42, &type metadata for String, v6);
    String.append(_:)(v43);
    uint64_t v46 = sub_100132858(v44, v45);
    uint64_t v48 = sub_100132454(v46, v47);
    uint64_t v49 = v80;
    uint64_t v50 = v81;
    static GKLog.match.getter(v48);
    sub_100135A20(v81);
    uint64_t v51 = (os_log_s *)sub_100144FF8();
    os_log_type_t v52 = v15;
    BOOL v53 = os_log_type_enabled(v51, v15);
    uint64_t v54 = v0[59];
    uint64_t v55 = v0[56];
    if (v53)
    {
      uint64_t v75 = v0[57];
      os_log_type_t v56 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v57 = sub_10012CE30(32LL);
      uint64_t v80 = v57;
      *(_DWORD *)os_log_type_t v56 = 136315138;
      swift_bridgeObjectRetain(v50);
      uint64_t v58 = sub_100135074(v49, v50, &v80);
      uint64_t v59 = sub_100144D58(v58, v77);
      sub_1001451F4((uint64_t)v59, (uint64_t)(v0 + 54));
      sub_100135A44(v50);
      sub_10012CE90((void *)&_mh_execute_header, v51, v52, "Nearby - %s", v56);
      sub_10012CE88(v57, v60, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v57);
      sub_10012CE24((uint64_t)v56);

      uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 8))(v54, v55);
    }

    else
    {
      sub_100135A28(v81);

      uint64_t v63 = sub_100144F44();
      uint64_t v61 = v65(v63, v64);
    }

    sub_100132768(v61, v62);
    sub_10015EE50();
    swift_release(v12);
  }

  else
  {
    uint64_t v24 = sub_100144D34();
    os_log_type_t v25 = static os_log_type_t.info.getter(v24);
    uint64_t v80 = 0LL;
    uint64_t v81 = 0xE000000000000000LL;
    sub_100144DC8();
    v0[48] = 0LL;
    v0[49] = 0xE000000000000000LL;
    sub_100144F10(0xD00000000000002ELL, (uint64_t)"Adding/Changing a peer connection for result: ");
    sub_100145034(v0 + 32, v0 + 2);
    uint64_t v26 = _print_unlocked<A, B>(_:_:)(v0 + 32, v0 + 48, &type metadata for PeerDiscoveryInfo);
    sub_100144FBC( v26,  (void (*)(void, void, void, void, void, void, void, void, void, void))sub_10014412C);
    sub_100144C8C();
    uint64_t v28 = v0[48];
    uint64_t v27 = v0[49];
    sub_100144DC0();
    sub_100135A20(v27);
    uint64_t v29 = (os_log_s *)sub_100144DB8();
    BOOL v30 = sub_100144B10(v29);
    uint64_t v32 = v0[57];
    uint64_t v31 = v0[58];
    if (v30)
    {
      uint64_t v76 = v0[56];
      uint64_t v73 = v28;
      uint64_t v33 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v74 = v32;
      uint64_t v34 = sub_10012CE30(32LL);
      uint64_t v80 = v34;
      *(_DWORD *)uint64_t v33 = 136315138;
      sub_100144D2C();
      v0[52] = sub_100145088(v73, v35, &v80);
      sub_1001451F4((uint64_t)(v0 + 52), (uint64_t)v77);
      sub_100135A44(v27);
      sub_10012CE90((void *)&_mh_execute_header, (os_log_s *)&v80, v25, "Nearby - %s", v33);
      sub_10012CE88(v34, v36, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v34);
      sub_10012CE24((uint64_t)v33);

      uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 8))(v31, v76);
    }

    else
    {
      sub_100135A28(v27);

      uint64_t v66 = sub_100144F44();
      uint64_t v37 = v68(v66, v67);
    }

    sub_100144C2C(v37, v38);
  }

  sub_100144704(v79, (uint64_t)(v0 + 45), 33LL);
  swift_retain(v78);
  sub_1001879A0();
  uint64_t v69 = sub_100144D34();
  sub_10012B950(v69, v70);
  uint64_t v71 = (uint64_t **)swift_task_alloc(dword_1002B9654);
  v0[62] = (uint64_t)v71;
  os_log_s *v71 = v0;
  v71[1] = (uint64_t *)sub_10013DB04;
  sub_100144AA0();
  return sub_10015F618();
}

uint64_t sub_10013DB04()
{
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_10013DB3C()
{
  return sub_10012CEAC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10013DB7C(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = type metadata accessor for NWBrowser.Result.Metadata(0LL);
  v2[18] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[19] = v4;
  v2[20] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v2[21] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[22] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[23] = swift_task_alloc(v7);
  v2[24] = swift_task_alloc(v7);
  v2[25] = swift_task_alloc(v7);
  return swift_task_switch(sub_10013DC20, v1, 0LL);
}

void sub_10013DC20(uint64_t a1)
{
  uint64_t v2 = v1[16];
  os_log_type_t v3 = static os_log_type_t.info.getter(a1);
  sub_100144F80();
  _StringGuts.grow(_:)(27LL);
  unint64_t v4 = v99;
  v1[11] = v98;
  v1[12] = v4;
  sub_10014487C();
  String.append(_:)(v5);
  uint64_t v6 = sub_100144E58();
  _print_unlocked<A, B>(_:_:)(v2, v1 + 11, v6);
  uint64_t v7 = v1[11];
  uint64_t v8 = v1[12];
  sub_100144DC0();
  sub_100135A20(v8);
  uint64_t v9 = (os_log_s *)sub_100144DB8();
  if (sub_100144F3C(v9))
  {
    uint64_t v90 = v1[22];
    uint64_t v93 = v1[21];
    uint64_t v95 = v1[25];
    uint64_t v10 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v11 = sub_10012CE30(32LL);
    uint64_t v98 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    sub_1001325D8();
    v1[15] = sub_100144D24(v7, v12, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 15, v1 + 16);
    sub_100135A44(v8);
    sub_10012CE90((void *)&_mh_execute_header, v9, v3, "Nearby - %s", v10);
    sub_10012CE88(v11, v13, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v11);
    sub_10012CE24((uint64_t)v10);

    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v90 + 8);
    uint64_t v15 = v14(v95, v93);
  }

  else
  {
    uint64_t v17 = v1[25];
    uint64_t v19 = v1[21];
    uint64_t v18 = v1[22];
    sub_100135A28(v8);

    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
    uint64_t v15 = v14(v17, v19);
  }

  sub_100132454(v15, v16);
  uint64_t v20 = v1[16];
  uint64_t v21 = (uint64_t *)(v1[17] + 184LL);
  sub_100144704((uint64_t)v21, (uint64_t)(v1 + 5), 0LL);
  uint64_t v22 = *v21;
  uint64_t v23 = swift_task_alloc(32LL);
  *(void *)(v23 + 16) = v20;
  sub_10013A69C();
  uint64_t v24 = sub_10013E5C8((uint64_t (*)(void *))sub_1001443B8, v23, v22);
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  sub_100132324(v24, v25);
  sub_1001446D0();
  if (!v26) {
    goto LABEL_19;
  }
  if (*(void *)(v28 + 48))
  {
    uint64_t v97 = v14;
    uint64_t v89 = (uint64_t)(v1 + 14);
    uint64_t v29 = *(void *)(v28 + 104);
    uint64_t v94 = v28;
    BOOL v30 = (void *)sub_1001450C8(v1[17]);
    uint64_t v31 = sub_1001325D8();
    if (v30)
    {
      NSString v32 = String._bridgeToObjectiveC()();
      NSString v33 = String._bridgeToObjectiveC()();
      [v30 playerLost:v32 deviceID:v33];
      swift_unknownObjectRelease(v30);
    }

    os_log_type_t v34 = static os_log_type_t.info.getter(v31);
    sub_100144F80();
    _StringGuts.grow(_:)(34LL);
    swift_bridgeObjectRelease(v99, v35);
    uint64_t v98 = 0xD00000000000001FLL;
    unint64_t v99 = 0x800000010024C2F0LL;
    sub_100144EC4(v29);
    sub_100132454(v36, v37);
    sub_100144C8C();
    uint64_t v38 = v98;
    unint64_t v39 = v99;
    sub_100144DC0();
    sub_100135A20(v39);
    uint64_t v40 = (os_log_s *)sub_100144DB8();
    BOOL v41 = sub_100144B10(v40);
    uint64_t v42 = v1[24];
    if (v41)
    {
      uint64_t v88 = v1[21];
      uint64_t v86 = v38;
      Swift::String v43 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v87 = v42;
      uint64_t v44 = sub_10012CE30(32LL);
      uint64_t v98 = v44;
      *(_DWORD *)Swift::String v43 = 136315138;
      sub_100144D9C();
      v1[14] = sub_100135074(v86, v39, &v98);
      sub_100144C60(v89, (uint64_t)(v1 + 15));
      sub_100135A44(v39);
      sub_10012CE90((void *)&_mh_execute_header, (os_log_s *)&v98, v34, "Nearby - %s", v43);
      sub_10012CE88(v44, v45, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v44);
      sub_10012CE24((uint64_t)v43);

      uint64_t v46 = v87;
      uint64_t v47 = v88;
    }

    else
    {
      sub_100135A28(v39);

      uint64_t v46 = sub_100144C20();
    }

    uint64_t v49 = v14(v46, v47);
    sub_1001451E0(v49, v50);
    uint64_t v51 = sub_1001450BC();
    sub_100144704(v51, v52, 32LL);
    uint64_t v53 = *v21;
    sub_100144D2C();
    sub_10012CFB4(v24, v26, v53);
    uint64_t v55 = v54;
    sub_100144C2C(v54, v56);
    if (v55)
    {
      uint64_t v57 = v1[19];
      uint64_t v58 = v1[20];
      uint64_t v91 = v1[18];
      swift_endAccess(v1 + 8);
      uint64_t v96 = v55;
      sub_10015EE50();
      sub_100144704((uint64_t)v21, (uint64_t)(v1 + 2), 33LL);
      sub_10015693C(v24, v26);
      uint64_t v59 = sub_1001450E8();
      sub_100144C2C(v59, v60);
      uint64_t v61 = sub_10012CF14();
      os_log_type_t v62 = static os_log_type_t.info.getter(v61);
      sub_100144F80();
      _StringGuts.grow(_:)(26LL);
      uint64_t v64 = swift_bridgeObjectRelease(v99, v63);
      uint64_t v98 = 0xD000000000000018LL;
      unint64_t v99 = 0x800000010024C310LL;
      uint64_t v65 = NWBrowser.Result.metadata.getter(v64);
      NWBrowser.Result.Metadata.debugDescription.getter(v65);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v91);
      v66._uint64_t countAndFlagsBits = sub_100144870();
      String.append(_:)(v66);
      uint64_t v69 = sub_1001322A0(v67, v68);
      uint64_t v71 = v98;
      unint64_t v70 = v99;
      static GKLog.match.getter(v69);
      uint64_t v72 = sub_100135A20(v70);
      uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
      BOOL v74 = os_log_type_enabled(v73, v62);
      uint64_t v75 = v1[23];
      if (v74)
      {
        uint64_t v92 = v1[21];
        uint64_t v76 = (uint8_t *)sub_10012CE30(12LL);
        uint64_t v77 = sub_10012CE30(32LL);
        uint64_t v98 = v77;
        *(_DWORD *)uint64_t v76 = 136315138;
        sub_100144E9C();
        v1[13] = sub_100135074(v71, v70, &v98);
        sub_100144AD8((uint64_t)(v1 + 13), v89);
        sub_100135A44(v70);
        sub_10012CE90((void *)&_mh_execute_header, v73, v62, "Nearby - %s", v76);
        sub_10012CE88(v77, v78, (uint64_t)&type metadata for Any + 8);
        sub_10012CE24(v77);
        sub_10012CE24((uint64_t)v76);

        uint64_t v79 = v75;
        uint64_t v80 = v92;
      }

      else
      {
        sub_100135A28(v70);

        uint64_t v79 = sub_100144C20();
      }

      uint64_t v83 = v97(v79, v80);
      sub_100132858(v83, v84);
      swift_release(v96);
      swift_release(v94);
LABEL_19:
      swift_task_dealloc(v1[25]);
      sub_1001324F4();
      sub_1001446D0();
      sub_1001447A4();
      sub_10013265C();
      __asm { BR              X0 }
    }

    swift_endAccess(v1 + 8);
    uint64_t v48 = v94;
  }

  else
  {
    uint64_t v48 = v28;
  }

  uint64_t v81 = swift_release(v48);
  sub_100144C2C(v81, v82);
  goto LABEL_19;
}

uint64_t sub_10013E2A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v30 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100129274(&qword_1002B8668);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100129274(&qword_1002B8670);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v29 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(v17 + 32);
  if (v18)
  {
    uint64_t v19 = swift_retain(*(void *)(v17 + 32));
    NWConnection.endpoint.getter(v19);
    swift_release(v18);
    uint64_t v20 = 0LL;
  }

  else
  {
    uint64_t v20 = 1LL;
  }

  uint64_t v21 = sub_1001291F8((uint64_t)v16, v20, 1LL, v2);
  NWBrowser.Result.endpoint.getter(v21);
  sub_1001291F8((uint64_t)v14, 0LL, 1LL, v2);
  uint64_t v22 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_1001443D4((uint64_t)v16, (uint64_t)v7);
  sub_1001443D4((uint64_t)v14, v22);
  if (sub_10012B4E8((uint64_t)v7, 1LL, v2) == 1)
  {
    uint64_t v23 = &qword_1002B8670;
    sub_100144560((uint64_t)v14, &qword_1002B8670);
    sub_100144560((uint64_t)v16, &qword_1002B8670);
    if (sub_10012B4E8(v22, 1LL, v2) == 1)
    {
      char v24 = -1;
    }

    else
    {
      uint64_t v23 = &qword_1002B8668;
      char v24 = 0;
    }
  }

  else
  {
    sub_1001443D4((uint64_t)v7, (uint64_t)v11);
    if (sub_10012B4E8(v22, 1LL, v2) == 1)
    {
      sub_100144560((uint64_t)v14, &qword_1002B8670);
      sub_100144560((uint64_t)v16, &qword_1002B8670);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v2);
      char v24 = 0;
      uint64_t v23 = &qword_1002B8668;
    }

    else
    {
      uint64_t v25 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v4, v22, v2);
      sub_10014441C( &qword_1002B8678,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NWEndpoint,  (uint64_t)&protocol conformance descriptor for NWEndpoint);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v4, v2, v26);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v25 + 8);
      v27(v4, v2);
      uint64_t v23 = &qword_1002B8670;
      sub_100144560((uint64_t)v14, &qword_1002B8670);
      sub_100144560((uint64_t)v16, &qword_1002B8670);
      v27(v11, v2);
    }
  }

  sub_100144560((uint64_t)v7, v23);
  return v24 & 1;
}

uint64_t sub_10013E5C8(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v25[0];
  uint64_t v23 = v25[1];
  int64_t v7 = v25[3];
  unint64_t v8 = v25[4];
  int64_t v26 = (unint64_t)(v25[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  if (!v8) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v11 = v10 | (v7 << 6);
  while (1)
  {
    uint64_t v15 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v11);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(v6 + 56) + 8 * v11);
    v24[0] = *v15;
    v24[1] = v16;
    v24[2] = v18;
    swift_bridgeObjectRetain(v16);
    swift_retain(v18);
    char v19 = a1(v24);
    if (v3)
    {
      swift_release(v6);
      swift_release(v18);
      swift_bridgeObjectRelease(v16, v22);
      return v17;
    }

    if ((v19 & 1) != 0)
    {
      swift_release(v6);
      return v17;
    }

    swift_release(v18);
    uint64_t result = swift_bridgeObjectRelease(v16, v20);
    if (v8) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v12 >= v26) {
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v23 + 8 * v12);
    if (!v13)
    {
      int64_t v14 = v7 + 2;
      if (v7 + 2 >= v26) {
        goto LABEL_26;
      }
      unint64_t v13 = *(void *)(v23 + 8 * v14);
      if (v13) {
        goto LABEL_12;
      }
      int64_t v14 = v7 + 3;
      if (v7 + 3 >= v26) {
        goto LABEL_26;
      }
      unint64_t v13 = *(void *)(v23 + 8 * v14);
      if (v13) {
        goto LABEL_12;
      }
      int64_t v14 = v7 + 4;
      if (v7 + 4 >= v26) {
        goto LABEL_26;
      }
      unint64_t v13 = *(void *)(v23 + 8 * v14);
      if (v13)
      {
LABEL_12:
        int64_t v12 = v14;
        goto LABEL_13;
      }

      int64_t v12 = v7 + 5;
      if (v7 + 5 >= v26) {
        goto LABEL_26;
      }
      unint64_t v13 = *(void *)(v23 + 8 * v12);
      if (!v13)
      {
        int64_t v21 = v7 + 6;
        while (v21 < v26)
        {
          unint64_t v13 = *(void *)(v23 + 8 * v21++);
          if (v13)
          {
            int64_t v12 = v21 - 1;
            goto LABEL_13;
          }
        }

uint64_t sub_10013E7E0(uint64_t a1, uint64_t a2)
{
  void v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = sub_100144E58();
  v3[11] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[12] = v5;
  v3[13] = sub_10014468C(v5);
  v3[14] = sub_1001446BC();
  uint64_t v6 = type metadata accessor for NWBrowser.Result.Change(0LL);
  v3[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[16] = v7;
  v3[17] = sub_10014468C(v7);
  v3[18] = sub_1001446BC();
  uint64_t v8 = sub_1001447C4();
  v3[19] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[20] = v9;
  v3[21] = sub_10014468C(v9);
  v3[22] = sub_1001446BC();
  v3[23] = sub_1001446BC();
  sub_1001446C4();
  return sub_100132230();
}

uint64_t sub_10013E87C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  a27 = v30;
  a28 = v31;
  a26 = v28;
  uint64_t v32 = *(void *)(v28 + 72);
  static os_log_type_t.debug.getter(v31);
  a15 = 0LL;
  a16 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(42LL);
  swift_bridgeObjectRelease(a16, v33);
  a15 = 0xD00000000000001BLL;
  a16 = 0x800000010024C100LL;
  sub_10014441C( &qword_1002B8630,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NWBrowser.Result,  (uint64_t)&protocol conformance descriptor for NWBrowser.Result);
  *(void *)(v28 + 192) = v34;
  uint64_t v35 = sub_100144ECC();
  v36._uint64_t countAndFlagsBits = Set.description.getter(v35);
  String.append(_:)(v36);
  sub_10012B950(v37, v38);
  sub_100144FEC(0x65676E616863202CLL, 14963LL);
  if (v32)
  {
    uint64_t v39 = *(void *)(v28 + 72);
    *(void *)(v28 + 56) = v39;
    swift_bridgeObjectRetain(v39);
    uint64_t v40 = sub_100129274(&qword_1002B8658);
    uint64_t v41 = String.init<A>(reflecting:)(v28 + 56, v40);
    unint64_t v43 = v42;
  }

  else
  {
    unint64_t v43 = 0xE300000000000000LL;
    uint64_t v41 = 7104878LL;
  }

  unint64_t v44 = v43;
  String.append(_:)(*(Swift::String *)&v41);
  sub_10012B950(v45, v46);
  uint64_t v48 = a15;
  uint64_t v47 = a16;
  sub_100144998();
  sub_100135A20(v47);
  uint64_t v49 = (os_log_s *)sub_100135A10();
  BOOL v50 = sub_100144764(v49);
  uint64_t v51 = *(void *)(v28 + 184);
  uint64_t v52 = *(void *)(v28 + 152);
  uint64_t v53 = *(void *)(v28 + 160);
  if (v50)
  {
    uint64_t v150 = *(void *)(v28 + 184);
    uint64_t v152 = v32;
    uint64_t v54 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v148 = v52;
    uint64_t v55 = sub_10012CE30(32LL);
    a15 = v55;
    *(_DWORD *)uint64_t v54 = 136315138;
    sub_10013A624();
    *(void *)(v28 + 48) = sub_100144DA4(v48, v56, &a15);
    sub_1001449A8(v28 + 48, v28 + 56);
    sub_100135A44(v47);
    sub_10012CE90((void *)&_mh_execute_header, v49, v29, "Nearby - %s", v54);
    sub_10012CE88(v55, v57, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v55);
    uint64_t v58 = (uint64_t)v54;
    uint64_t v32 = v152;
    sub_10012CE24(v58);

    uint64_t v59 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8);
    uint64_t v60 = v59(v150, v148);
  }

  else
  {
    sub_100135A28(v47);

    uint64_t v59 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8);
    uint64_t v60 = v59(v51, v52);
  }

  uint64_t v62 = sub_1001322A0(v60, v61);
  *(void *)(v28 + 200) = v59;
  if (!v32)
  {
    uint64_t v85 = *(os_log_s **)(v28 + 168);
    static os_log_type_t.info.getter(v62);
    uint64_t v86 = sub_10012CEF0();
    uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
    BOOL v88 = sub_100144B20(v87);
    uint64_t v89 = *(void *)(v28 + 152);
    if (v88)
    {
      uint64_t v154 = *(void *)(v28 + 168);
      uint64_t v90 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v91 = sub_10012CE30(32LL);
      a15 = v91;
      *(_DWORD *)uint64_t v90 = 136315138;
      *(void *)(v28 + 32) = sub_100135074(0xD00000000000002FLL, 0x800000010024C120LL, &a15);
      uint64_t v92 = sub_100144864();
      sub_100144840(v92, v93);
      sub_10012CE90((void *)&_mh_execute_header, v85, (os_log_type_t)v49, "Nearby - %s", v90);
      sub_10012CE88(v91, v94, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v91);
      sub_10012CE24((uint64_t)v90);

      uint64_t v95 = v154;
      uint64_t v96 = v89;
    }

    else
    {

      uint64_t v95 = sub_100144870();
    }

    v59(v95, v96);
    sub_10012CF38();
    uint64_t v102 = sub_100144B40();
    sub_10013A788(v102, v103);
    goto LABEL_35;
  }

  uint64_t v63 = *(void *)(v28 + 128);
  uint64_t v64 = *(void *)(v28 + 72);
  char v65 = *(_BYTE *)(v64 + 32);
  *(_BYTE *)(v28 + 260) = v65;
  uint64_t v66 = -1LL;
  uint64_t v67 = -1LL << v65;
  if (-(-1LL << v65) < 64) {
    uint64_t v66 = ~(-1LL << -(char)(-1LL << v65));
  }
  unint64_t v68 = v66 & *(void *)(v64 + 56);
  int v69 = enum case for NWBrowser.Result.Change.added(_:);
  int v70 = enum case for NWBrowser.Result.Change.removed(_:);
  *(_DWORD *)(v28 + 248) = enum case for NWBrowser.Result.Change.added(_:);
  *(_DWORD *)(v28 + 252) = v70;
  *(_DWORD *)(v28 + 256) = enum case for NWBrowser.Result.Change.changed(_:);
  uint64_t v71 = (void *)swift_bridgeObjectRetain(v64);
  if (v68)
  {
    uint64_t v72 = 0LL;
    unint64_t v73 = __clz(__rbit64(v68));
    uint64_t v74 = (v68 - 1) & v68;
    goto LABEL_12;
  }

  unint64_t v100 = 63 - v67;
  unint64_t v101 = v71[8];
  if (!v101)
  {
    if (v100 >= 0xC0)
    {
      unint64_t v101 = v71[9];
      if (v101)
      {
        uint64_t v72 = 2LL;
        goto LABEL_21;
      }

      if (v100 >= 0x100)
      {
        unint64_t v101 = v71[10];
        if (v101)
        {
          uint64_t v72 = 3LL;
          goto LABEL_21;
        }

        if (v100 > 0x13F)
        {
          unint64_t v101 = v71[11];
          if (!v101)
          {
            unint64_t v146 = v100 >> 6;
            uint64_t v147 = 12LL;
            while (v147 - 7 < v146)
            {
              unint64_t v101 = v71[v147++];
              if (v101)
              {
                uint64_t v72 = v147 - 8;
                goto LABEL_21;
              }
            }

            goto LABEL_34;
          }

          uint64_t v72 = 4LL;
          goto LABEL_21;
        }
      }
    }

uint64_t sub_10013F0EC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[28];
  uint64_t v2 = v0[14];
  uint64_t v4 = v0[10];
  uint64_t v3 = v0[11];
  sub_10012CE48();
  v1(v2, v3);
  return swift_task_switch(sub_10013F148, v4, 0LL);
}

#error "10013F328: call analysis failed (funcsize=219)"
uint64_t sub_10013F4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_10014515C();
  sub_10012CE48();
  sub_1001446C4();
  return sub_100144664(v0, v1, v2);
}

#error "10013F6F8: call analysis failed (funcsize=223)"
uint64_t sub_10013F8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v7;
  uint64_t v7 = (void *)swift_task_alloc(dword_1002B8654);
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100144658;
  return sub_10013D4C8(a5);
}

uint64_t sub_10013F8F8(uint64_t a1)
{
  v1[7] = a1;
  uint64_t v2 = sub_1001447C4();
  v1[8] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[9] = v3;
  v1[10] = sub_1001446D8(v3);
  sub_1001446C4();
  return sub_100144664(v4, v5, v6);
}

#error "10013F96C: call analysis failed (funcsize=82)"
uint64_t sub_10013FA94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_BYTE *, uint64_t);
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];
  uint64_t v1 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = &v19[-v7 - 8];
  NWConnection.endpoint.getter(v6);
  uint64_t v9 = (uint64_t *)(v0 + 168);
  swift_beginAccess(v0 + 168, v19, 32LL, 0LL);
  sub_10012D07C((uint64_t)v8, *(void *)(v0 + 168));
  unint64_t v11 = v10;
  swift_endAccess(v19);
  int64_t v12 = *(void (**)(_BYTE *, uint64_t))(v2 + 8);
  v12(v8, v1);
  uint64_t result = swift_release(v11);
  if (v11)
  {
    NWConnection.endpoint.getter(result);
    swift_beginAccess(v9, v19, 32LL, 0LL);
    sub_10012D07C((uint64_t)v5, *v9);
    if (v14)
    {
      uint64_t v15 = v14;
      swift_endAccess(v19);
      v12(v5, v1);
      sub_10015EE50();
      uint64_t v16 = swift_release(v15);
    }

    else
    {
      swift_endAccess(v19);
      uint64_t v16 = ((uint64_t (*)(_BYTE *, uint64_t))v12)(v5, v1);
    }

    NWConnection.endpoint.getter(v16);
    swift_beginAccess(v9, v19, 33LL, 0LL);
    uint64_t v17 = sub_1001569DC();
    swift_endAccess(v19);
    v12(v8, v1);
    return swift_release(v17);
  }

  return result;
}

uint64_t sub_10013FC38(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = sub_1001447C4();
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = sub_1001446D8(v4);
  sub_1001446C4();
  return sub_100144664(v5, v6, v7);
}

#error "10013FCB0: call analysis failed (funcsize=83)"
uint64_t sub_10013FDD8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = sub_1001447C4();
  v2[10] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[11] = v4;
  v2[12] = sub_10014468C(v4);
  v2[13] = sub_1001446BC();
  sub_1001446C4();
  return sub_100132230();
}

#error "10013FE58: call analysis failed (funcsize=103)"
uint64_t sub_10013FFD4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *(void *)(*v1 + 120);
  uint64_t v3 = *v1;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return sub_100132230();
  }
  swift_task_dealloc(*(void *)(v3 + 104));
  sub_1001324F4();
  return sub_10012CEAC(*(uint64_t (**)(void))(v3 + 8));
}

#error "100140078: call analysis failed (funcsize=115)"
uint64_t sub_10014022C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[13] = v4;
  uint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[14] = swift_task_alloc(v5);
  v2[15] = swift_task_alloc(v5);
  v2[16] = swift_task_alloc(v5);
  v2[17] = swift_task_alloc(v5);
  return swift_task_switch(sub_1001402E8, v1, 0LL);
}

uint64_t sub_1001402E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)(v1 + 88) + 128LL);
  *(void *)(v1 + 144) = v3;
  if (!v3)
  {
    uint64_t v56 = *(os_log_s **)(v1 + 112);
    static os_log_type_t.debug.getter(a1);
    uint64_t v57 = sub_10012CEF0();
    uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
    BOOL v59 = sub_100144B20(v58);
    uint64_t v61 = *(void *)(v1 + 104);
    uint64_t v60 = *(void *)(v1 + 112);
    uint64_t v62 = *(void *)(v1 + 96);
    if (v59)
    {
      uint64_t v119 = *(void *)(v1 + 112);
      uint64_t v116 = *(void *)(v1 + 96);
      uint64_t v63 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v64 = sub_10012CE30(32LL);
      uint64_t v122 = v64;
      sub_100144E8C(4.8149e-34);
      uint64_t v65 = sub_100144BBC(39LL, 0x800000010024BBB0LL, &v122);
      uint64_t v66 = sub_100145090(v65);
      sub_1001449A8((uint64_t)v66, v1 + 40);
      sub_10012CE90((void *)&_mh_execute_header, v56, v2, "Nearby - %s", v63);
      sub_10012CE88(v64, v67, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v64);
      sub_10012CE24((uint64_t)v63);

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v119, v116);
    }

    else
    {

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
    }

    goto LABEL_22;
  }

  sub_10012CF1C();
  id v4 = sub_10016CEC8();
  if (!v4)
  {
    os_log_type_t v68 = static os_log_type_t.debug.getter(0LL);
    uint64_t v122 = 0LL;
    unint64_t v123 = 0xE000000000000000LL;
    sub_100144DC8();
    *(void *)(v1 + 16) = 0LL;
    *(void *)(v1 + 24) = 0xE000000000000000LL;
    sub_10014487C();
    String.append(_:)(v69);
    *(void *)(v1 + 40) = v3;
    uint64_t v70 = type metadata accessor for PeerListener();
    _print_unlocked<A, B>(_:_:)(v1 + 40, v1 + 16, v70);
    uint64_t v72 = *(void *)(v1 + 16);
    uint64_t v71 = *(void *)(v1 + 24);
    sub_1001451B0();
    sub_100135A20(v71);
    unint64_t v73 = (os_log_s *)sub_10014514C();
    os_log_type_t v74 = v68;
    BOOL v75 = sub_1001449DC(v73);
    uint64_t v76 = *(void *)(v1 + 120);
    uint64_t v77 = *(void *)(v1 + 96);
    uint64_t v78 = *(void *)(v1 + 104);
    if (v75)
    {
      uint64_t v120 = *(void *)(v1 + 96);
      uint64_t v117 = *(void *)(v1 + 120);
      uint64_t v79 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v115 = v78;
      uint64_t v80 = sub_10012CE30(32LL);
      uint64_t v122 = v80;
      *(_DWORD *)uint64_t v79 = 136315138;
      sub_1001325D8();
      *(void *)(v1 + 48) = sub_100144D24(v72, v81, &v122);
      sub_100144840(v1 + 48, v1 + 56);
      sub_100135A44(v71);
      sub_10012CE90((void *)&_mh_execute_header, v73, v74, "Nearby - %s", v79);
      sub_10012CE88(v80, v82, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v80);
      sub_10012CE24((uint64_t)v79);

      uint64_t v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v115 + 8))(v117, v120);
    }

    else
    {
      sub_100135A28(v71);

      uint64_t v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 8))(v76, v77);
    }

    sub_100132454(v83, v84);
    goto LABEL_21;
  }

  uint64_t v6 = (uint64_t)v4;
  uint64_t v7 = *(void *)(*(void *)(v1 + 80) + 32LL);
  *(void *)(v1 + 152) = v7;
  if (!v7)
  {
    uint64_t v85 = *(os_log_s **)(v1 + 128);
    uint64_t v86 = sub_100144A98((uint64_t)v4, v5);
    static os_log_type_t.debug.getter(v86);
    uint64_t v87 = sub_10012CEF0();
    BOOL v88 = (os_log_s *)Logger.logObject.getter(v87);
    BOOL v89 = sub_100144744(v88);
    uint64_t v90 = *(void *)(v1 + 128);
    if (v89)
    {
      uint64_t v121 = *(void *)(v1 + 104);
      uint64_t v118 = *(void *)(v1 + 96);
      uint64_t v91 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v92 = sub_10012CE30(32LL);
      uint64_t v122 = v92;
      *(_DWORD *)uint64_t v91 = 136315138;
      *(void *)(v1 + 56) = sub_100144BBC(39LL, 0x800000010024BC10LL, &v122);
      sub_100144840(v1 + 56, v1 + 64);
      sub_10012CE90((void *)&_mh_execute_header, v85, (os_log_type_t)v6, "Nearby - %s", v91);
      sub_10012CE88(v92, v93, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v92);
      sub_10012CE24((uint64_t)v91);

      (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v90, v118);
    }

    else
    {

      uint64_t v109 = sub_100144864();
      v111(v109, v110);
    }

uint64_t sub_100140AD0()
{
  return swift_task_switch(v0, v1, v2);
}

uint64_t sub_100140B48()
{
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v1 = *(void *)(v0 + 152);
  swift_release(*(void *)(v0 + 184));
  sub_10012CF14();
  sub_100144D3C();
  swift_release(v1);
  swift_release(v2);
  sub_100145068();
  sub_1001324F4();
  sub_1001446D0();
  sub_1001447A4();
  return sub_100144770(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100140BD8(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = sub_1001447C4();
  v2[9] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[10] = v4;
  v2[11] = sub_1001446D8(v4);
  sub_1001446C4();
  return sub_100144664(v5, v6, v7);
}

#error "100140C4C: call analysis failed (funcsize=90)"
uint64_t sub_100140D98()
{
  uint64_t v0;
  sub_10012CED0();
  sub_10012CE48();
  sub_1001324F4();
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100140DC8(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = sub_1001447C4();
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = sub_1001446D8(v4);
  sub_1001446C4();
  return sub_100144664(v5, v6, v7);
}

#error "100140F38: call analysis failed (funcsize=88)"
uint64_t sub_100140F78(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  v2[19] = a1;
  v2[20] = v1;
  uint64_t v3 = sub_1001447C4();
  v2[21] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[22] = v4;
  v2[23] = sub_10014468C(v4);
  v2[24] = sub_1001446BC();
  v2[25] = sub_1001446BC();
  uint64_t v5 = sub_100145050();
  v2[26] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[27] = v6;
  v2[28] = sub_1001446D8(v6);
  sub_1001446C4();
  return sub_100132230();
}

uint64_t sub_100140FE4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  a27 = v29;
  a28 = v30;
  a26 = v28;
  uint64_t v31 = *(void *)(v28 + 224);
  uint64_t v32 = NWConnection.endpoint.getter(v30);
  os_log_type_t v33 = static os_log_type_t.info.getter(v32);
  sub_100144C68();
  sub_100144DC8();
  uint64_t v34 = a17;
  *(void *)(v28 + 80) = a16;
  uint64_t v105 = v28 + 120;
  uint64_t v107 = v28 + 40;
  *(void *)(v28 + 88) = v34;
  v108._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  v108._object = (void *)0x800000010024BAE0LL;
  sub_100144C18(v108);
  v109._uint64_t countAndFlagsBits = NWConnection.debugDescription.getter(v35, v36, v37, v38, v39, v40, v41);
  sub_100144C18(v109);
  sub_1001322A0(v42, v43);
  sub_100144BB4(19LL, 0x800000010024BB00LL);
  sub_100144CA0(v31);
  sub_100144C8C();
  uint64_t v44 = *(void *)(v28 + 80);
  uint64_t v45 = *(void *)(v28 + 88);
  sub_100144DC0();
  sub_100135A20(v45);
  uint64_t v46 = (os_log_s *)sub_100144DB8();
  os_log_type_t v47 = v33;
  if (sub_100144CEC(v46))
  {
    uint64_t v99 = *(void *)(v28 + 176);
    uint64_t v100 = *(void *)(v28 + 168);
    uint64_t v102 = *(void *)(v28 + 200);
    uint64_t v48 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v49 = sub_10012CE30(32LL);
    a16 = v49;
    *(_DWORD *)uint64_t v48 = 136315138;
    sub_100144D2C();
    *(void *)(v28 + 144) = sub_100145088(v44, v50, &a16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 144, v28 + 152);
    sub_100135A44(v45);
    sub_10012CE90((void *)&_mh_execute_header, v46, v47, "Nearby - %s", v48);
    sub_10012CE88(v49, v51, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v49);
    sub_10012CE24((uint64_t)v48);

    uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t))(v99 + 8);
    uint64_t v53 = v52(v102, v100);
  }

  else
  {
    uint64_t v55 = *(void *)(v28 + 176);
    sub_100135A28(v45);

    uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8);
    uint64_t v56 = sub_100144864();
    uint64_t v53 = v52(v56, v57);
  }

  sub_100144C2C(v53, v54);
  uint64_t v58 = *(void *)(v28 + 224);
  uint64_t v59 = *(void *)(v28 + 160);
  sub_100144704(v59 + 168, v107, 32LL);
  sub_10012D07C(v58, *(void *)(v59 + 168));
  uint64_t v61 = v60;
  swift_endAccess(v107);
  uint64_t v62 = sub_10012CF14();
  uint64_t v63 = *(void *)(v28 + 152);
  if (v61)
  {
    os_log_type_t v64 = static os_log_type_t.debug.getter(v62);
    sub_100144C68();
    _StringGuts.grow(_:)(25LL);
    uint64_t v65 = a17;
    *(void *)(v28 + 64) = a16;
    *(void *)(v28 + 72) = v65;
    sub_100144FB0();
    sub_100144F10(v66 + 4, (uint64_t)"Ignoring a connection: ");
    *(void *)(v28 + 128) = v63;
    uint64_t v67 = type metadata accessor for NWConnection(0LL);
    _print_unlocked<A, B>(_:_:)(v28 + 128, v28 + 64, v67);
    uint64_t v69 = *(void *)(v28 + 64);
    uint64_t v68 = *(void *)(v28 + 72);
    sub_100144998();
    sub_100135A20(v68);
    uint64_t v70 = (os_log_s *)sub_100135A10();
    BOOL v71 = sub_100144B10(v70);
    uint64_t v72 = *(void *)(v28 + 184);
    uint64_t v73 = *(void *)(v28 + 168);
    if (v71)
    {
      uint64_t v103 = *(void *)(v28 + 168);
      uint64_t v101 = *(void *)(v28 + 184);
      os_log_type_t v74 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v75 = sub_10012CE30(32LL);
      a16 = v75;
      *(_DWORD *)os_log_type_t v74 = 136315138;
      sub_1001325D8();
      *(void *)(v28 + 112) = sub_100144D24(v69, v76, &a16);
      sub_100144AD8(v28 + 112, v105);
      sub_100135A44(v68);
      sub_10012CE90((void *)&_mh_execute_header, v61, v64, "Nearby - %s", v74);
      sub_10012CE88(v75, v77, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v75);
      sub_10012CE24((uint64_t)v74);

      uint64_t v78 = v52(v101, v103);
    }

    else
    {
      sub_100135A28(v68);

      uint64_t v78 = v52(v72, v73);
    }

    sub_100132454(v78, v79);
    NWConnection.cancel()();
    sub_100144C48();
    sub_1001324F4();
    sub_1001446D0();
    sub_1001447A4();
    sub_100144838();
    return sub_100144944(*(uint64_t (**)(void))(v28 + 8));
  }

  else
  {
    static os_log_type_t.info.getter(v62);
    sub_100144C68();
    _StringGuts.grow(_:)(26LL);
    uint64_t v80 = a17;
    *(void *)(v28 + 96) = a16;
    *(void *)(v28 + 104) = v80;
    sub_100144FB0();
    sub_10014487C();
    String.append(_:)(v81);
    *(void *)(v28 + 120) = v63;
    uint64_t v82 = type metadata accessor for NWConnection(0LL);
    _print_unlocked<A, B>(_:_:)(v105, v28 + 96, v82);
    uint64_t v84 = *(void *)(v28 + 96);
    uint64_t v83 = *(void *)(v28 + 104);
    sub_100144998();
    sub_100135A20(v83);
    uint64_t v85 = (os_log_s *)sub_100135A10();
    if (sub_100144764(v85))
    {
      uint64_t v106 = *(void *)(v28 + 168);
      uint64_t v104 = *(void *)(v28 + 192);
      uint64_t v86 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v87 = sub_10012CE30(32LL);
      a16 = v87;
      *(_DWORD *)uint64_t v86 = 136315138;
      sub_10013A624();
      *(void *)(v28 + 136) = sub_100144DA4(v84, v88, &a16);
      sub_100144AD8(v28 + 136, v28 + 144);
      sub_100135A44(v83);
      sub_10012CE90((void *)&_mh_execute_header, v85, (os_log_type_t)v45, "Nearby - %s", v86);
      sub_10012CE88(v87, v89, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v87);
      sub_10012CE24((uint64_t)v86);

      uint64_t v90 = v52(v104, v106);
    }

    else
    {
      sub_100135A28(v83);

      uint64_t v93 = sub_100144F44();
      uint64_t v90 = ((uint64_t (*)(uint64_t))v52)(v93);
    }

    sub_1001322A0(v90, v91);
    uint64_t v94 = *(void *)(v28 + 152);
    uint64_t v95 = sub_100144E48();
    uint64_t v96 = sub_10012AAEC(v95, 128LL);
    *(void *)(v28 + 232) = v96;
    *(void *)(v96 + 24) = 0LL;
    uint64_t v97 = sub_100144C04(v96 + 16);
    *(_OWORD *)(v96 + 96) = 0u;
    *(_OWORD *)(v96 + 112) = 0u;
    *(_OWORD *)(v96 + 64) = 0u;
    *(_OWORD *)(v96 + 80) = 0u;
    *(_OWORD *)(v96 + 32) = 0u;
    *(_OWORD *)(v96 + 48) = 0u;
    *(void *)(v96 + 24) = &off_100273D38;
    sub_100145048(v97);
    *(void *)(v96 + 32) = v94;
    sub_10012CF1C();
    sub_10012CF14();
    uint64_t v98 = (void *)swift_task_alloc(dword_1002B9654);
    *(void *)(v28 + 240) = v98;
    *uint64_t v98 = v28;
    v98[1] = sub_1001415A0;
    sub_100144B7C();
    return sub_10015F618();
  }

uint64_t sub_1001415A0()
{
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_1001415D4()
{
  uint64_t v1 = *(void *)(v0 + 232);
  sub_100144704(*(void *)(v0 + 160) + 168LL, v0 + 16, 33LL);
  swift_retain(v1);
  sub_1001879E0();
  sub_1001450E8();
  sub_10014510C();
  sub_100144C48();
  sub_1001324F4();
  sub_1001446D0();
  sub_1001447A4();
  sub_100144838();
  return sub_10012CEAC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100141650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[24] = a4;
  v5[25] = v4;
  v5[22] = a2;
  v5[23] = a3;
  v5[21] = a1;
  uint64_t v6 = sub_1001447C4();
  v5[26] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[27] = v7;
  v5[28] = sub_10014468C(v7);
  v5[29] = sub_1001446BC();
  v5[30] = sub_1001446BC();
  v5[31] = sub_1001446BC();
  v5[32] = sub_1001446BC();
  sub_1001446C4();
  return sub_100132230();
}

void sub_1001416BC(uint64_t a1)
{
  unint64_t v2 = *(void *)(v1 + 176);
  os_log_type_t v3 = static os_log_type_t.info.getter(a1);
  sub_100144F90();
  _StringGuts.grow(_:)(54LL);
  uint64_t v4 = v43[1];
  *(void *)(v1 + 80) = v43[0];
  *(void *)(v1 + 88) = v4;
  sub_10014487C();
  v44._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  sub_100145154(v44);
  unint64_t v42 = v2 >> 60;
  if (v2 >> 60 == 15)
  {
    object = (void *)0xE300000000000000LL;
    v6._uint64_t countAndFlagsBits = 7104878LL;
  }

  else
  {
    *(Swift::String *)(v1 + 64) = Data.base64EncodedString(options:)(0LL);
    v6._uint64_t countAndFlagsBits = String.init<A>(reflecting:)(v1 + 64, &type metadata for String);
    object = v6._object;
  }

  uint64_t v40 = (uint64_t *)(v1 + 152);
  uint64_t v7 = *(void *)(v1 + 184);
  v6._object = object;
  sub_100145154(v6);
  sub_10012B950(v8, v9);
  sub_100144FEC(0x67617373656D202CLL, 14949LL);
  *(void *)(v1 + 136) = v7;
  uint64_t v10 = sub_100144E50();
  _print_unlocked<A, B>(_:_:)(v1 + 136, v1 + 80, v10);
  sub_1001449F8(0xD000000000000013LL, (uint64_t)", from connection: ");
  v45._uint64_t countAndFlagsBits = sub_10015F990();
  sub_100145154(v45);
  uint64_t v13 = sub_10012B950(v11, v12);
  uint64_t v14 = *(void *)(v1 + 80);
  unint64_t v15 = *(void *)(v1 + 88);
  static GKLog.match.getter(v13);
  uint64_t v16 = sub_100135A20(v15);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  BOOL v18 = sub_100144CEC(v17);
  uint64_t v19 = *(void *)(v1 + 256);
  uint64_t v20 = *(void *)(v1 + 216);
  uint64_t v41 = *(void *)(v1 + 208);
  if (v18)
  {
    uint64_t v39 = *(void *)(v1 + 256);
    uint64_t v21 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v38 = v20;
    uint64_t v22 = sub_10012CE30(32LL);
    v43[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    sub_100144FA0();
    uint64_t *v40 = sub_100135074(v14, v15, v43);
    sub_100144AD8((uint64_t)v40, v1 + 160);
    sub_100135A44(v15);
    sub_10012CE90((void *)&_mh_execute_header, v17, v3, "Nearby - %s", v21);
    sub_10012CE88(v22, v23, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v22);
    sub_10012CE24((uint64_t)v21);

    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8);
    uint64_t v25 = v24(v39, v41);
  }

  else
  {
    sub_100135A28(v15);

    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    uint64_t v25 = v24(v19, v41);
  }

  uint64_t v27 = sub_100144A98(v25, v26);
  if (v42 > 0xE)
  {
    os_log_type_t v28 = static os_log_type_t.info.getter(v27);
    uint64_t v29 = sub_10012CEF0();
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    if (sub_1001447BC(v30))
    {
      uint64_t v31 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v32 = sub_10012CE30(32LL);
      v43[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      sub_100144C0C();
      *(void *)(v1 + 120) = sub_100144800(v33 + 13, (uint64_t)"Invalid content received. Drop.");
      sub_100144840(v1 + 120, v1 + 128);
      sub_10012CE90((void *)&_mh_execute_header, v30, v28, "Nearby - %s", v31);
      sub_10012CE88(v32, v34, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v32);
      sub_10012CE24((uint64_t)v31);

      sub_100144870();
      sub_100144EA4();
    }

    else
    {

      uint64_t v36 = sub_100144870();
      ((void (*)(uint64_t))v24)(v36);
    }

    sub_100144DD0();
    sub_1001324F4();
    sub_1001446D0();
    sub_1001447A4();
    sub_100144838();
    sub_100144F30();
    sub_100144AE0();
    __asm { BR              X0 }
  }

  sub_10013593C(*(void *)(v1 + 168), *(void *)(v1 + 176));
  uint64_t v35 = (char *)&loc_100141A68 + 4 * byte_1001F3490[sub_100148964()];
  __asm { BR              X10 }

uint64_t sub_100142130()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 264LL);
  *(void *)(*(void *)v1 + 272LL) = v0;
  swift_task_dealloc(v2);
  return sub_100132230();
}

uint64_t sub_10014218C()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100144F30();
  return sub_10012CEAC(v1);
}

uint64_t sub_1001421D4()
{
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_10014220C()
{
  return sub_100144770(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100142260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[105] = v3;
  v4[104] = a3;
  v4[103] = a2;
  v4[102] = a1;
  uint64_t v5 = type metadata accessor for NWEndpoint(0LL);
  v4[106] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[107] = v6;
  v4[108] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v4[109] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[110] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[111] = swift_task_alloc(v9);
  v4[112] = swift_task_alloc(v9);
  v4[113] = swift_task_alloc(v9);
  v4[114] = swift_task_alloc(v9);
  return swift_task_switch(sub_10014231C, v3, 0LL);
}

#error "100142910: call analysis failed (funcsize=454)"
uint64_t sub_100142A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_10012CED0();
  sub_10012CE48();
  sub_1001446C4();
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_100142AC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28)
{
  a27 = v29;
  a28 = v30;
  a26 = v28;
  uint64_t v31 = v28 + 12;
  uint64_t v32 = v28[104];
  sub_100144704(v28[105] + 176LL, (uint64_t)(v28 + 70), 33LL);
  swift_retain(v32);
  sub_1001879A0();
  uint64_t v33 = swift_endAccess(v28 + 70);
  uint64_t v35 = sub_100132858(v33, v34);
  uint64_t v36 = *(void *)(v32 + 32);
  if (v36)
  {
    uint64_t v83 = (uint64_t)(v28 + 67);
    uint64_t v37 = swift_retain(v36);
    os_log_type_t v38 = static os_log_type_t.info.getter(v37);
    uint64_t v39 = sub_10012CEF0();
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    BOOL v41 = sub_100144CEC(v40);
    unint64_t v42 = (uint64_t (*)(uint64_t, uint64_t))v28[115];
    uint64_t v43 = v28[113];
    uint64_t v44 = v28[109];
    if (v41)
    {
      Swift::String v45 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v82 = v42;
      uint64_t v46 = sub_10012CE30(32LL);
      a16 = v46;
      *(_DWORD *)Swift::String v45 = 136315138;
      sub_10014487C();
      v28[100] = sub_100135074(v47, v48, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 100, v28 + 101);
      sub_10012CE90((void *)&_mh_execute_header, v40, v38, "Nearby - %s", v45);
      sub_10012CE88(v46, v49, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v46);
      sub_10012CE24((uint64_t)v45);

      uint64_t v50 = v82(v43, v44);
    }

    else
    {

      uint64_t v50 = v42(v43, v44);
    }

    uint64_t v51 = v28[107];
    uint64_t v52 = v28[105];
    NWConnection.endpoint.getter(v50);
    sub_100144704(v52 + 168, v83, 33LL);
    sub_1001569DC();
    swift_endAccess(v83);
    swift_release(v36);
    sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
    uint64_t v35 = sub_10012CF14();
    uint64_t v31 = v28 + 12;
  }

  os_log_type_t v53 = static os_log_type_t.info.getter(v35);
  sub_100144C68();
  _StringGuts.grow(_:)(64LL);
  uint64_t v54 = a17;
  v28[95] = a16;
  v28[96] = v54;
  sub_10014487C();
  v55._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
  String.append(_:)(v55);
  sub_100145034(v31, v28 + 2);
  uint64_t v56 = _print_unlocked<A, B>(_:_:)(v31, v28 + 95, &type metadata for PeerDiscoveryInfo);
  uint64_t v58 = sub_1001322A0(v56, v57);
  uint64_t v60 = sub_10012B950(v58, v59);
  uint64_t v62 = sub_100132454(v60, v61);
  uint64_t v64 = sub_100132768(v62, v63);
  sub_100144A98(v64, v65);
  uint64_t v66 = v28[95];
  uint64_t v67 = v28[96];
  sub_1001451B0();
  sub_100135A20(v67);
  uint64_t v68 = (os_log_s *)sub_10014514C();
  BOOL v69 = os_log_type_enabled(v68, v53);
  uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t))v28[115];
  uint64_t v71 = v28[112];
  uint64_t v72 = v28[109];
  if (v69)
  {
    uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t))v28[115];
    uint64_t v73 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v74 = sub_10012CE30(32LL);
    a16 = v74;
    *(_DWORD *)uint64_t v73 = 136315138;
    sub_1001296D0();
    v28[98] = sub_100144848(v66, v75, &a16);
    sub_1001449A0((uint64_t)(v28 + 98), (uint64_t)(v28 + 99));
    sub_100135A44(v67);
    sub_10012CE90((void *)&_mh_execute_header, v68, v53, "Nearby - %s", v73);
    sub_10012CE88(v74, v76, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v74);
    sub_10012CE24((uint64_t)v73);

    uint64_t v77 = sub_100144EBC(v71, v84);
  }

  else
  {
    sub_100135A28(v67);

    uint64_t v77 = v70(v71, v72);
  }

  sub_10012B950(v77, v78);
  uint64_t v79 = (void *)swift_task_alloc(dword_1002B8604);
  v28[123] = v79;
  *uint64_t v79 = v28;
  v79[1] = sub_100142EB0;
  sub_100144970(v28[104]);
  sub_100144B7C();
  return sub_100143550(v80);
}

uint64_t sub_100142EB0()
{
  uint64_t v1 = *v0;
  uint64_t v3 = v1;
  sub_100145134(*(void *)(v1 + 984), &v3);
  swift_task_dealloc(*(void *)(v1 + 912));
  sub_1001446D0();
  sub_1001447A4();
  sub_100144838();
  sub_100144AFC();
  return sub_100144770((uint64_t (*)(void))v0[1]);
}

uint64_t sub_100142F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[19] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[20] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[21] = swift_task_alloc(v7);
  v4[22] = swift_task_alloc(v7);
  v4[23] = swift_task_alloc(v7);
  return swift_task_switch(sub_100142F94, v3, 0LL);
}

void sub_100142F94()
{
  uint64_t v2 = v0;
  uint64_t v3 = v0 + 13;
  uint64_t v4 = sub_1001450C8(v2[18]);
  uint64_t v94 = (void *)v4;
  if (v4)
  {
    uint64_t v5 = (void *)v2[17];
    uint64_t v6 = (void *)v5[6];
    if (v6)
    {
      uint64_t v7 = v5[5];
      uint64_t v8 = v5[7];
      uint64_t v9 = v5[8];
      uint64_t v10 = v5[9];
      uint64_t v11 = v5[10];
      uint64_t v12 = v5[11];
      uint64_t v13 = v5[12];
      uint64_t v14 = v5[13];
      unint64_t v15 = (void *)v5[14];
      uint64_t v80 = v2[15];
      uint64_t v78 = v2[16];
      v2[2] = v7;
      v2[3] = v6;
      uint64_t v89 = v8;
      v2[4] = v8;
      v2[5] = v9;
      uint64_t v87 = v10;
      v2[6] = v10;
      v2[7] = v11;
      uint64_t v85 = v12;
      v2[8] = v12;
      v2[9] = v13;
      v2[10] = v14;
      v2[11] = v15;
      sub_10013A624();
      uint64_t v88 = v9;
      sub_10013A69C();
      uint64_t v86 = v11;
      sub_1001296D0();
      uint64_t v84 = v13;
      sub_1001325D8();
      uint64_t v16 = sub_100144D9C();
      LOBYTE(v13) = static os_log_type_t.info.getter(v16);
      sub_100144F90();
      _StringGuts.grow(_:)(88LL);
      sub_100144FB0();
      sub_1001449F8(v17 + 16, (uint64_t)"Handle hello response from player: ");
      sub_100144D9C();
      v18._uint64_t countAndFlagsBits = v14;
      v18._object = v15;
      String.append(_:)(v18);
      uint64_t v83 = (uint64_t)v15;
      sub_1001451E0(v19, v20);
      sub_100144784();
      sub_10013A624();
      uint64_t v91 = v7;
      v21._uint64_t countAndFlagsBits = v7;
      v21._object = v6;
      String.append(_:)(v21);
      sub_1001322A0(v22, v23);
      sub_100144BB4(19LL, 0x800000010024BCB0LL);
      v24._uint64_t countAndFlagsBits = sub_10015F990();
      String.append(_:)(v24);
      sub_10012B950(v25, v26);
      v27._uint64_t countAndFlagsBits = 0x742068737550202ELL;
      v27._object = (void *)0xEE00203A6E656B6FLL;
      String.append(_:)(v27);
      v28._uint64_t countAndFlagsBits = Data.description.getter(v80, v78);
      String.append(_:)(v28);
      sub_10012B950(v29, v30);
      uint64_t v31 = v96;
      uint64_t v81 = v95;
      sub_10012CEF0();
      uint64_t v32 = sub_100135A20(v96);
      uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
      os_log_type_t v34 = v13;
      BOOL v35 = os_log_type_enabled(v33, (os_log_type_t)v13);
      uint64_t v36 = v2[23];
      uint64_t v37 = v2[20];
      if (v35)
      {
        uint64_t v82 = v2[20];
        uint64_t v79 = v2[19];
        os_log_type_t v38 = (uint8_t *)sub_10012CE30(12LL);
        uint64_t v77 = v36;
        uint64_t v39 = sub_10012CE30(32LL);
        uint64_t v95 = v39;
        *(_DWORD *)os_log_type_t v38 = 136315138;
        swift_bridgeObjectRetain(v31);
        uint64_t v40 = sub_100135074(v81, v31, &v95);
        BOOL v41 = sub_100144D58(v40, v2 + 14);
        sub_1001449A0((uint64_t)v41, (uint64_t)(v2 + 15));
        sub_100135A44(v31);
        sub_10012CE90((void *)&_mh_execute_header, v33, v34, "Nearby - %s", v38);
        sub_10012CE88(v39, v42, (uint64_t)&type metadata for Any + 8);
        sub_10012CE24(v39);
        sub_10012CE24((uint64_t)v38);

        uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 8))(v77, v79);
        sub_100132768(v43, v44);
      }

      else
      {
        sub_100135A28(v96);

        uint64_t v66 = sub_100144D78(v36, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
        sub_100132768(v66, v67);
      }

      uint64_t v69 = v2[15];
      unint64_t v68 = v2[16];
      NSString v70 = String._bridgeToObjectiveC()();
      NSString v71 = String._bridgeToObjectiveC()();
      sub_10013AC08(v69, v68);
      sub_10014412C(v91, (uint64_t)v6, v89, v88, v87, v86, v85, v84, v14, v83);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      sub_100132324((uint64_t)isa, v73);
      [v94 playerFound:v70 deviceID:v71 discoveryInfo:isa];

      uint64_t v74 = v94;
    }

    else
    {
      os_log_type_t v56 = static os_log_type_t.debug.getter(v4);
      uint64_t v57 = sub_10012CEF0();
      uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
      BOOL v59 = os_log_type_enabled(v58, v56);
      uint64_t v60 = v2[22];
      uint64_t v62 = v2[19];
      uint64_t v61 = v2[20];
      if (v59)
      {
        uint64_t v93 = v2[22];
        uint64_t v63 = (uint8_t *)sub_10012CE30(12LL);
        uint64_t v90 = v62;
        uint64_t v64 = sub_10012CE30(32LL);
        *(_DWORD *)uint64_t v63 = 136315138;
        uint64_t v95 = v64;
        uint64_t *v3 = sub_100144800(0xD000000000000037LL, (uint64_t)"Cannot handle hello response without valid remote info.");
        sub_100144840((uint64_t)v3, (uint64_t)(v2 + 14));
        sub_10012CE90((void *)&_mh_execute_header, v58, v56, "Nearby - %s", v63);
        sub_10012CE88(v64, v65, (uint64_t)&type metadata for Any + 8);
        sub_10012CE24(v64);
        sub_10012CE24((uint64_t)v63);

        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v93, v90);
      }

      else
      {

        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
      }

      uint64_t v74 = v94;
    }

    swift_unknownObjectRelease(v74);
  }

  else
  {
    static os_log_type_t.debug.getter(0LL);
    uint64_t v45 = sub_10012CEF0();
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    BOOL v47 = sub_100144C80(v46);
    uint64_t v49 = v2[20];
    uint64_t v48 = v2[21];
    uint64_t v50 = v2[19];
    if (v47)
    {
      uint64_t v92 = v2[19];
      uint64_t v51 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v95 = sub_10012CE30(32LL);
      sub_100144E8C(4.8149e-34);
      sub_100144FB0();
      uint64_t v53 = sub_100144800(v52 + 27, (uint64_t)"Cannot handle hello response without delegate.");
      uint64_t v54 = sub_100145090(v53);
      sub_1001449A8((uint64_t)v54, (uint64_t)v3);
      sub_10012CE90((void *)&_mh_execute_header, v46, v1, "Nearby - %s", v51);
      sub_10012CE88(v95, v55, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v95);
      sub_10012CE24((uint64_t)v51);

      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v92);
    }

    else
    {

      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
    }
  }

  uint64_t v75 = v2[21];
  swift_task_dealloc(v2[23]);
  sub_1001324F4();
  swift_task_dealloc(v75);
  sub_100144AE0();
  __asm { BR              X0 }

uint64_t sub_100143550(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[8] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  return swift_task_switch(sub_1001435CC, v1, 0LL);
}

uint64_t sub_1001435CC(uint64_t a1)
{
  uint64_t v3 = (void *)v1[5];
  if (!v3[4])
  {
    static os_log_type_t.debug.getter(a1);
    uint64_t v42 = sub_10012CEF0();
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    BOOL v44 = sub_100144764(v43);
    uint64_t v46 = v1[8];
    uint64_t v45 = v1[9];
    uint64_t v47 = v1[7];
    if (v44)
    {
      uint64_t v97 = v1[9];
      uint64_t v48 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v49 = sub_10012CE30(32LL);
      v104[0] = v49;
      *(_DWORD *)uint64_t v48 = 136315138;
      sub_100144C0C();
      uint64_t v51 = sub_100144F20( v50 + 30,  (uint64_t)"Cannot send hello response without nwConnection.",  v79,  v80,  v81,  v82,  v84,  v86,  v88,  v90,  v92,  v97,  v47);
      uint64_t v52 = sub_100145090(v51);
      sub_1001449A8((uint64_t)v52, (uint64_t)(v1 + 3));
      sub_10012CE90((void *)&_mh_execute_header, v43, (os_log_type_t)v3, "Nearby - %s", v48);
      sub_10012CE88(v49, v53, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v49);
      sub_10012CE24((uint64_t)v48);

      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v98, v101);
      goto LABEL_14;
    }

    uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    uint64_t v77 = v45;
    goto LABEL_13;
  }

  uint64_t v4 = (void *)v3[6];
  if (!v4)
  {
    uint64_t v54 = (os_log_s *)v1[10];
    static os_log_type_t.debug.getter(a1);
    uint64_t v55 = sub_10012CEF0();
    os_log_type_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    BOOL v57 = sub_100144B30(v56);
    uint64_t v58 = v1[10];
    uint64_t v47 = v1[7];
    uint64_t v59 = v1[8];
    if (v57)
    {
      uint64_t v102 = v1[10];
      uint64_t v60 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v99 = v47;
      uint64_t v61 = sub_10012CE30(32LL);
      v104[0] = v61;
      *(_DWORD *)uint64_t v60 = 136315138;
      sub_100144C0C();
      v1[3] = sub_100144F20( v62 + 35,  (uint64_t)"Cannot send hello response without valid remote info.",  v79,  v80,  v81,  v82,  v84,  v86,  v88,  v90,  v92,  v99,  v102);
      uint64_t v63 = sub_100144C20();
      sub_100144840(v63, v64);
      sub_10012CE90((void *)&_mh_execute_header, v54, v2, "Nearby - %s", v60);
      sub_10012CE88(v61, v65, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v61);
      sub_10012CE24((uint64_t)v60);

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v103, v100);
      goto LABEL_14;
    }

    uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    uint64_t v77 = v58;
LABEL_13:
    v76(v77, v47);
LABEL_14:
    sub_100145074();
    sub_1001324F4();
    sub_1001446D0();
    sub_100144F30();
    sub_10013265C();
    __asm { BR              X0 }
  }

  uint64_t v5 = v3[14];
  uint64_t v85 = v3[13];
  uint64_t v87 = v3[12];
  uint64_t v95 = v3[11];
  uint64_t v6 = v3[8];
  uint64_t v93 = v3[9];
  uint64_t v89 = v3[10];
  uint64_t v91 = v3[7];
  uint64_t v7 = v3[5];
  sub_100144E50();
  sub_100144FA0();
  sub_100144E9C();
  sub_1001325D8();
  sub_1001296D0();
  sub_100144D9C();
  uint64_t v8 = sub_1001488C4(2);
  v1[12] = v8;
  uint64_t v9 = sub_100129274(&qword_1002B8550);
  uint64_t v10 = sub_100144810(v9);
  *(_OWORD *)(v10 + 16) = xmmword_1001F3470;
  *(void *)(v10 + 32) = v8;
  v104[0] = v10;
  specialized Array._endMutation()(v10);
  uint64_t v11 = sub_100145060();
  sub_10012CF60(v11);
  sub_10012CF1C();
  uint64_t v12 = sub_1001448C0();
  uint64_t v18 = NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( v12,  v13,  v14,  v15,  v16,  v104[0],  v17);
  v1[13] = v18;
  os_log_type_t v83 = static os_log_type_t.info.getter(v18);
  v104[0] = 0LL;
  v104[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(70LL);
  sub_100144C0C();
  v20._uint64_t countAndFlagsBits = v19 + 16;
  v20._object = (void *)0x800000010024BF40LL;
  String.append(_:)(v20);
  sub_100144D9C();
  sub_1001450F0();
  sub_1001451E0(v21, v22);
  sub_100144784();
  sub_100144FA0();
  v23._uint64_t countAndFlagsBits = v7;
  v23._object = v4;
  String.append(_:)(v23);
  uint64_t v24 = sub_10014412C(v7, (uint64_t)v4, v91, v6, v93, v89, v95, v87, v85, v5);
  sub_100144A98(v24, v25);
  sub_100144BB4(18LL, 0x800000010024BC70LL);
  v26._uint64_t countAndFlagsBits = sub_10015F990();
  String.append(_:)(v26);
  sub_10012B950(v27, v28);
  sub_10012CEF0();
  uint64_t v29 = sub_100135A20(0xE000000000000000LL);
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  BOOL v31 = sub_1001447BC(v30);
  uint64_t v32 = v1[7];
  uint64_t v33 = v1[8];
  if (v31)
  {
    uint64_t v96 = v1[11];
    os_log_type_t v34 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v94 = v33;
    uint64_t v35 = sub_10012CE30(32LL);
    v104[0] = v35;
    sub_100144F60(4.8149e-34);
    sub_1001296D0();
    uint64_t v37 = sub_100144848(0LL, v36, v104);
    os_log_type_t v38 = sub_100144D58(v37, v1 + 4);
    sub_100144C60((uint64_t)v38, (uint64_t)(v1 + 5));
    sub_100135A44(0xE000000000000000LL);
    sub_10012CE90((void *)&_mh_execute_header, v30, v83, "Nearby - %s", v34);
    sub_10012CE88(v35, v39, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v35);
    sub_10012CE24((uint64_t)v34);

    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 8))(v96, v32);
  }

  else
  {
    sub_100135A28(0xE000000000000000LL);

    uint64_t v66 = sub_1001450BC();
    uint64_t v40 = v68(v66, v67);
  }

  sub_10012B950(v40, v41);
  uint64_t v69 = (void *)swift_task_alloc(dword_1002B963C);
  v1[14] = v69;
  *uint64_t v69 = v1;
  v69[1] = sub_100143B0C;
  sub_10013265C();
  return sub_10015F1FC(v70, v71, v72, v73, v74);
}

uint64_t sub_100143B0C()
{
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_100143B44()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100144F30();
  return sub_10012CEAC(v1);
}

uint64_t type metadata accessor for PeerDiscovery()
{
  return objc_opt_self(&OBJC_CLASS___GKPeerDiscovery);
}

uint64_t destroy for PeerDiscoveryInfo(void *a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a1[9], v6);
}

void *initializeWithCopy for PeerDiscoveryInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

void *assignWithCopy for PeerDiscoveryInfo(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6);
  a1[2] = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a1[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8, v9);
  a1[4] = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11, v12);
  a1[6] = a2[6];
  uint64_t v13 = a2[7];
  uint64_t v14 = a1[7];
  a1[7] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14, v15);
  a1[8] = a2[8];
  uint64_t v16 = a2[9];
  uint64_t v17 = a1[9];
  a1[9] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17, v18);
  return a1;
}

void *initializeWithTake for PeerDiscoveryInfo(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

void *assignWithTake for PeerDiscoveryInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5, a2);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7, v8);
  uint64_t v9 = a2[5];
  uint64_t v10 = a1[5];
  a1[4] = a2[4];
  a1[5] = v9;
  swift_bridgeObjectRelease(v10, v11);
  uint64_t v12 = a2[7];
  uint64_t v13 = a1[7];
  a1[6] = a2[6];
  a1[7] = v12;
  swift_bridgeObjectRelease(v13, v14);
  uint64_t v15 = a2[9];
  uint64_t v16 = a1[9];
  a1[8] = a2[8];
  a1[9] = v15;
  swift_bridgeObjectRelease(v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for PeerDiscoveryInfo(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(swift_bridgeObjectRelease(v0[21], v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(swift_bridgeObjectRelease(v0[21], v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(swift_bridgeObjectRelease(v0[21], v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PeerDiscoveryInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PeerDiscoveryInfo()
{
  return &type metadata for PeerDiscoveryInfo;
}

uint64_t sub_100143E48()
{
  _Block_release(*(const void **)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100143E8C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B8584);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100144658;
  uint64_t v2 = sub_100144870();
  return v3(v2);
}

uint64_t sub_100143F0C()
{
  uint64_t v1 = (void *)sub_100145020();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10014497C(v1, (uint64_t)sub_100144658);
  return sub_1001447AC(v2, v3, v4);
}

uint64_t sub_100143F4C()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100143F80()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B85A4);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100144658;
  uint64_t v2 = sub_100144870();
  return v3(v2);
}

uint64_t sub_100143FEC()
{
  uint64_t v1 = (void *)sub_100145020();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10014497C(v1, (uint64_t)sub_10014402C);
  return sub_1001447AC(v2, v3, v4);
}

uint64_t sub_10014402C()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100144064()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100144090()
{
  uint64_t v1 = (void *)sub_100145020();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10014497C(v1, (uint64_t)sub_100144658);
  return sub_1001447AC(v2, v3, v4);
}

uint64_t sub_1001440D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    return swift_bridgeObjectRetain(a10);
  }

  return result;
}

uint64_t sub_10014412C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2, a2);
    swift_bridgeObjectRelease(a4, v13);
    swift_bridgeObjectRelease(a6, v14);
    swift_bridgeObjectRelease(a8, v15);
    return swift_bridgeObjectRelease(a10, v16);
  }

  return result;
}

void sub_100144188(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100144B40();
  v4(v3);
  sub_100132514();
}

uint64_t sub_1001441C4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *a2;
  __int128 v7 = *(_OWORD *)(a2 + 1);
  uint64_t v8 = a2[3];
  __int128 v32 = *((_OWORD *)a2 + 2);
  __int128 v33 = v7;
  uint64_t v9 = a2[6];
  __int128 v31 = *(_OWORD *)(a2 + 7);
  uint64_t v10 = a2[9];
  uint64_t v11 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(a4 + 24) = 0LL;
  uint64_t v15 = swift_unknownObjectWeakInit(a4 + 16, 0LL);
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(void *)(a4 + 24) = &off_100273D38;
  swift_unknownObjectWeakAssign(v15, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  type metadata accessor for NWParameters(0LL);
  uint64_t v16 = sub_1001732C8();
  uint64_t v17 = type metadata accessor for NWConnection(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = NWConnection.init(to:using:)(v14, v16);
  swift_release(a3);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  uint64_t v19 = *(void *)(a4 + 32);
  *(void *)(a4 + 32) = v18;
  swift_release(v19);
  uint64_t v20 = *(void *)(a4 + 40);
  uint64_t v21 = *(void *)(a4 + 48);
  uint64_t v22 = *(void *)(a4 + 56);
  uint64_t v23 = *(void *)(a4 + 64);
  uint64_t v24 = *(void *)(a4 + 72);
  uint64_t v25 = *(void *)(a4 + 80);
  uint64_t v26 = *(void *)(a4 + 88);
  uint64_t v27 = *(void *)(a4 + 96);
  uint64_t v28 = *(void *)(a4 + 104);
  uint64_t v29 = *(void *)(a4 + 112);
  *(void *)(a4 + 40) = v34;
  *(_OWORD *)(a4 + 48) = v33;
  *(void *)(a4 + 64) = v8;
  *(_OWORD *)(a4 + 72) = v32;
  *(void *)(a4 + 88) = v9;
  *(_OWORD *)(a4 + 96) = v31;
  *(void *)(a4 + 112) = v10;
  sub_10014412C(v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);
  return a4;
}

void *sub_10014436C( void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1001443B8(uint64_t a1)
{
  return sub_10013E2A8(a1) & 1;
}

uint64_t sub_1001443D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B8670);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_10014441C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (!*a1)
  {
    uint64_t v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }

  sub_100132514();
}

uint64_t sub_100144458()
{
  uint64_t v1 = sub_100144E58();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001444D0(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100144E58() - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_1002B8684);
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100144658;
  return sub_10013F8A4(a1, v5, v6, v7, v8);
}

void sub_100144560(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_100129274(a2);
  sub_10014471C(v2);
  sub_100132514();
}

uint64_t sub_100144588()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001445AC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1002BA5D4);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10014461C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002BA5D0 + dword_1002BA5D0))(a1, v4);
}

uint64_t sub_10014461C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100144664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100144670(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10014468C@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_1001446A0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001446BC()
{
  return swift_task_alloc(v0);
}

  ;
}

uint64_t sub_1001446D0()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1001446D8@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

  ;
}

uint64_t sub_100144704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0LL);
}

uint64_t sub_10014470C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2, v3);
}

uint64_t sub_10014471C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_100144730@<X0>(uint64_t a1@<X8>)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v1);
}

BOOL sub_100144744(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100144754(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return sub_100135074(v4, v3, (uint64_t *)va);
}

BOOL sub_100144764(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100144770(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100144784()
{
  v0._uint64_t countAndFlagsBits = 0x656369766564202CLL;
  v0._object = (void *)0xEC000000203A4449LL;
  String.append(_:)(v0);
}

uint64_t sub_1001447A4()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1001447AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

BOOL sub_1001447BC(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1001447C4()
{
  return type metadata accessor for Logger(0LL);
}

  ;
}

uint64_t sub_1001447E8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void sub_1001447F4(Swift::String a1)
{
}

uint64_t sub_100144800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100135074(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)(v2 - 88));
}

uint64_t sub_100144810(uint64_t a1)
{
  return swift_allocObject(a1, 40LL, 7LL);
}

uint64_t sub_10014481C()
{
  return (*(uint64_t (**)(void, void))(v0[16] + 96LL))(v0[17], v0[15]);
}

uint64_t sub_100144838()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100144840(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_100144848(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100135074(a1, v3, a3);
}

  ;
}

uint64_t sub_100144864()
{
  return v0;
}

uint64_t sub_100144870()
{
  return v0;
}

  ;
}

uint64_t sub_100144888@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 96))(v1);
}

uint64_t sub_100144894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v4[26] = a2;
  v4[27] = v3;
  return (*(uint64_t (**)(void, uint64_t, void))(v4[16] + 16LL))( v4[18],  *(void *)(a1 + 48) + *(void *)(v4[16] + 72LL) * v2,  v4[15]);
}

uint64_t sub_1001448C0()
{
  return 0x73654D6F6C6C6548LL;
}

  ;
}

uint64_t sub_10014490C(uint64_t a1)
{
  return sub_10013DB7C(a1);
}

uint64_t sub_100144928(uint64_t a1)
{
  return sub_10013D4C8(a1);
}

uint64_t sub_100144944(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100144960@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_100144970@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10014497C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100144998()
{
  return static GKLog.match.getter();
}

uint64_t sub_1001449A0(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_1001449A8(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

  ;
}

BOOL sub_1001449DC(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1001449E4()
{
  return swift_task_dealloc(*(void *)(v0 + 184));
}

void sub_1001449F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100144A04()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)( *(void *)(v0 + 40),  *(void *)(v1 + 88),  *(void *)(v1 + 192));
}

uint64_t sub_100144A18(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v1 + *(int *)(a1 + 48), v3);
}

  ;
}

void sub_100144A50(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._uint64_t countAndFlagsBits = 0xD000000000000035LL;
  String.append(_:)(v1);
}

  ;
}

uint64_t sub_100144A98(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

  ;
}

uint64_t sub_100144ABC@<X0>(uint64_t a1@<X8>)
{
  return v1(*(void *)(v2 + 104), *(void *)(a1 + 48) + v3 * v4, *(void *)(v2 + 88));
}

uint64_t sub_100144AD8(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

  ;
}

uint64_t sub_100144AFC()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100144B04@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

BOOL sub_100144B10(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

BOOL sub_100144B20(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

BOOL sub_100144B30(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100144B40()
{
  return v0;
}

uint64_t sub_100144B4C()
{
  return sub_10013593C(v0, v1);
}

  ;
}

  ;
}

uint64_t sub_100144B98()
{
  return swift_getErrorValue(v0, v2, v1);
}

void sub_100144BB4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_100144BBC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return sub_100135074(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2, a3);
}

uint64_t sub_100144BC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return a11;
}

void sub_100144BD4()
{
}

uint64_t sub_100144BEC(uint64_t a1)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(v2, v1, v3, a1);
}

uint64_t sub_100144C04(uint64_t a1)
{
  return swift_unknownObjectWeakInit(a1, 0LL);
}

  ;
}

void sub_100144C18(Swift::String a1)
{
}

uint64_t sub_100144C20()
{
  return v0;
}

uint64_t sub_100144C2C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_100144C34()
{
  return v0;
}

uint64_t sub_100144C48()
{
  return (*(uint64_t (**)(void, void))(v0[27] + 8LL))(v0[28], v0[26]);
}

uint64_t sub_100144C60(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

  ;
}

uint64_t sub_100144C78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_bridgeObjectRelease(a13, a2);
}

BOOL sub_100144C80(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_100144C8C()
{
  v0._uint64_t countAndFlagsBits = 46LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_100144C98@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_100144CA0(uint64_t a1)
{
  return _print_unlocked<A, B>(_:_:)(a1, v1, v2);
}

void sub_100144CAC(_OWORD *a1@<X8>)
{
}

uint64_t sub_100144CB4()
{
  return *(void *)(v0 + 72);
}

uint64_t sub_100144CD0()
{
  return *(void *)(v0 + 72);
}

BOOL sub_100144CEC(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100144CF4()
{
  return v0;
}

uint64_t sub_100144D10()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_100144D24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100135074(a1, v3, a3);
}

uint64_t sub_100144D2C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100144D34()
{
  return swift_endAccess(v0);
}

uint64_t sub_100144D3C()
{
  return sub_100135158(v1, v0);
}

uint64_t sub_100144D48()
{
  return Logger.logObject.getter();
}

uint64_t sub_100144D50()
{
  return static GKLog.match.getter();
}

void *sub_100144D58@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return a2;
}

uint64_t sub_100144D64()
{
  return type metadata accessor for PeerListener();
}

uint64_t sub_100144D78@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100144D80()
{
  return v0;
}

uint64_t sub_100144D9C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100144DA4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100135074(a1, v3, a3);
}

  ;
}

uint64_t sub_100144DB8()
{
  return Logger.logObject.getter();
}

uint64_t sub_100144DC0()
{
  return static GKLog.match.getter();
}

void sub_100144DC8()
{
}

uint64_t sub_100144DD0()
{
  return swift_task_dealloc(*(void *)(v0 + 256));
}

  ;
}

NSString sub_100144DF8(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return String._bridgeToObjectiveC()();
}

  ;
}

  ;
}

uint64_t sub_100144E38()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v0, v1);
}

uint64_t sub_100144E48()
{
  return type metadata accessor for PeerConnection();
}

uint64_t sub_100144E50()
{
  return type metadata accessor for NWProtocolFramer.Message(0LL);
}

uint64_t sub_100144E58()
{
  return type metadata accessor for NWBrowser.Result(0LL);
}

  ;
}

uint64_t sub_100144E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, 28LL, a3, 6LL, 0LL);
}

void sub_100144E8C(float a1)
{
  float *v1 = a1;
}

uint64_t sub_100144E9C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100144EA4()
{
  return (*(uint64_t (**)(void))(v0 - 104))();
}

  ;
}

uint64_t sub_100144EBC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_100144EC4(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100144ECC()
{
  return v0;
}

void sub_100144ED8()
{
}

void sub_100144EE8(Swift::String a1)
{
}

uint64_t sub_100144EF0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return sub_100135074(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)va);
}

void sub_100144F00(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_100144F10(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100144F20@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  return sub_100135074(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)va);
}

uint64_t sub_100144F30()
{
  return *(void *)(v0 + 8);
}

BOOL sub_100144F3C(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100144F44()
{
  return v0;
}

void sub_100144F50()
{
}

void sub_100144F60(float a1)
{
  float *v1 = a1;
}

  ;
}

  ;
}

void sub_100144F90()
{
  *(void *)(v0 - 88) = 0LL;
  *(void *)(v0 - 80) = 0xE000000000000000LL;
}

uint64_t sub_100144FA0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100144FA8()
{
  return sub_100129274(v0);
}

  ;
}

void *sub_100144FBC( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void))
{
  return sub_10014436C(v2, a2);
}

uint64_t sub_100144FC4()
{
  return Error.localizedDescription.getter(*(void *)(v0 - 32), *(void *)(v0 - 24));
}

  ;
}

uint64_t sub_100144FE4()
{
  return swift_release(*(void *)(v0 + 72));
}

void sub_100144FEC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a2 & 0xFFFF0000FFFFLL | 0xEB00000000200000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100144FF8()
{
  return Logger.logObject.getter();
}

uint64_t sub_100145000( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t), uint64_t a13)
{
  return a12(a13, a10);
}

  ;
}

uint64_t sub_100145020()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_100145028()
{
  return static GKLog.match.getter();
}

void *sub_100145034(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t sub_10014503C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_10014412C(a1, a2, a3, a4, a5, v10, a7, v11, a9, a10);
}

uint64_t sub_100145048(uint64_t a1)
{
  return swift_unknownObjectWeakAssign(a1, v1);
}

uint64_t sub_100145050()
{
  return type metadata accessor for NWEndpoint(0LL);
}

uint64_t sub_100145058()
{
  return type metadata accessor for NWBrowser.Result.Change.Flags(0LL);
}

uint64_t sub_100145060()
{
  return type metadata accessor for NWConnection.ContentContext(0LL);
}

uint64_t sub_100145068()
{
  return swift_task_dealloc(*(void *)(v0 + 136));
}

uint64_t sub_100145074()
{
  return swift_task_dealloc(*(void *)(v0 + 88));
}

uint64_t sub_100145080@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100145088(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100135074(a1, v3, a3);
}

void *sub_100145090(uint64_t a1)
{
  void *v1 = a1;
  return v1;
}

  ;
}

uint64_t sub_1001450B0()
{
  return v0(v1, v2);
}

uint64_t sub_1001450BC()
{
  return v0;
}

uint64_t sub_1001450C8@<X0>(uint64_t a1@<X8>)
{
  return swift_unknownObjectWeakLoadStrong(a1 + 112);
}

uint64_t sub_1001450D0(uint64_t a1)
{
  return swift_allocObject(a1, 192LL, 15LL);
}

uint64_t sub_1001450DC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_1001450E8()
{
  return swift_endAccess(v0);
}

void sub_1001450F0()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1001450FC()
{
  return swift_release(v0);
}

uint64_t sub_100145104()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10014510C()
{
  return swift_release(v0);
}

uint64_t sub_100145114()
{
  return sub_100135158(v0, v1);
}

uint64_t sub_100145120(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1 + 16;
}

uint64_t sub_100145134@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_100145140()
{
  uint64_t v2 = *(void *)(v0 + 128);
  *(void *)(v0 + 128) = v1;
  return swift_release(v2);
}

uint64_t sub_10014514C()
{
  return Logger.logObject.getter();
}

void sub_100145154(Swift::String a1)
{
}

uint64_t sub_10014515C()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  return *(void *)(v2 + 240);
}

uint64_t sub_100145170()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  return *(void *)(v2 + 192);
}

uint64_t sub_100145184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = 0LL;
  return swift_unknownObjectWeakAssign(a1, v2);
}

  ;
}

uint64_t sub_1001451A4()
{
  uint64_t v2 = *(void *)(v1 + 120);
  *(void *)(v1 + 120) = v0;
  return swift_release(v2);
}

uint64_t sub_1001451B0()
{
  return static GKLog.match.getter();
}

  ;
}

  ;
}

uint64_t sub_1001451E0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_1001451E8()
{
  return swift_endAccess(v0);
}

uint64_t sub_1001451F4(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_100145200(uint64_t a1, uint64_t a2)
{
  return Dictionary.description.getter(a1, a2, a2);
}

uint64_t sub_100145208()
{
  return sub_10013FA94();
}

void sub_100145214()
{
}

void sub_10014521C(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v74 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v73 = (char *)&v71 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v71 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v71 - v18;
  uint64_t v75 = swift_allocObject(&unk_100273FA0, 24LL, 7LL);
  *(void *)(v75 + 16) = a3;
  _Block_copy(a3);
  uint64_t v20 = _Block_copy(a3);
  uint64_t v21 = static GKLog.daemon.getter(v20);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.info.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v72 = v10;
    uint64_t v25 = v17;
    uint64_t v26 = a3;
    uint64_t v27 = v9;
    uint64_t v28 = v8;
    uint64_t v29 = a2;
    uint64_t v30 = a1;
    __int128 v31 = v24;
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "FriendBulletin loadBulletinsForPushNotification:", v24, 2u);
    __int128 v32 = v31;
    a1 = v30;
    a2 = v29;
    uint64_t v8 = v28;
    uint64_t v9 = v27;
    a3 = v26;
    uint64_t v17 = v25;
    uint64_t v10 = v72;
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  __int128 v33 = *(void (**)(char *, uint64_t))(v10 + 8);
  v33(v19, v9);
  uint64_t v76 = 99LL;
  unint64_t v77 = 0xE100000000000000LL;
  AnyHashable.init<A>(_:)(&v76);
  sub_10012CFE4(a1, &v79);
  sub_10012A92C((uint64_t)v78);
  if (!v80)
  {
    uint64_t v34 = sub_10013519C((uint64_t)&v79, &qword_1002B8E90);
LABEL_15:
    uint64_t v42 = v74;
    uint64_t v43 = static GKLog.daemon.getter(v34);
    BOOL v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.info.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "FriendBulletin loadBulletinsForPushNotification: failed to get category",  v46,  2u);
      swift_slowDealloc(v46, -1LL, -1LL);
    }

    uint64_t v47 = v42;
    goto LABEL_18;
  }

  uint64_t v34 = swift_dynamicCast(&v76, &v79, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL);
  if ((v34 & 1) == 0 || v76 != 52) {
    goto LABEL_15;
  }
  uint64_t v76 = 116LL;
  unint64_t v77 = 0xE100000000000000LL;
  AnyHashable.init<A>(_:)(&v76);
  sub_10012CFE4(a1, &v79);
  sub_10012A92C((uint64_t)v78);
  if (v80)
  {
    uint64_t v35 = swift_dynamicCast(&v76, &v79, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    if ((v35 & 1) != 0)
    {
      uint64_t v37 = a1;
      uint64_t v39 = v76;
      unint64_t v38 = v77;
      if (v76 == 0x64657469766E69LL && v77 == 0xE700000000000000LL)
      {
        unint64_t v41 = 0xE700000000000000LL;
        goto LABEL_25;
      }

      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v76, v77, 0x64657469766E69LL, 0xE700000000000000LL, 0LL) & 1) != 0)
      {
        unint64_t v41 = v38;
LABEL_25:
        swift_bridgeObjectRelease(v41, v36);
        uint64_t v49 = v75;
        id v58 = [(id)objc_opt_self(GKAMPController) controller];
        [v58 reportFriendInviteActivityEventAtStage:2 hostApp:0];
        char v59 = 1;
LABEL_26:

        uint64_t v60 = type metadata accessor for TaskPriority(0LL);
        sub_1001291F8((uint64_t)v8, 1LL, 1LL, v60);
        uint64_t v61 = swift_allocObject(&unk_100273FC8, 72LL, 7LL);
        *(void *)(v61 + 16) = 0LL;
        *(void *)(v61 + 24) = 0LL;
        *(void *)(v61 + 32) = a2;
        *(void *)(v61 + 40) = v37;
        *(_BYTE *)(v61 + 48) = v59;
        *(void *)(v61 + 56) = sub_1001481F4;
        *(void *)(v61 + 64) = v49;
        swift_bridgeObjectRetain(v37);
        swift_retain(v49);
        sub_100185858();
        swift_release(v62);
        goto LABEL_19;
      }

      if (v39 == 0x6465747065636361LL && v38 == 0xE800000000000000LL)
      {
        swift_bridgeObjectRelease(0xE800000000000000LL, v36);
      }

      else
      {
        char v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v38, 0x6465747065636361LL, 0xE800000000000000LL, 0LL);
        uint64_t v66 = swift_bridgeObjectRelease(v38, v65);
        if ((v64 & 1) == 0)
        {
          uint64_t v67 = static GKLog.daemon.getter(v66);
          unint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
          os_log_type_t v69 = static os_log_type_t.info.getter(v68);
          if (os_log_type_enabled(v68, v69))
          {
            uint64_t v70 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v70 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v68,  v69,  "FriendBulletin loadBulletinsForPushNotification: unknown type",  v70,  2u);
            swift_slowDealloc(v70, -1LL, -1LL);
          }

          uint64_t v47 = v17;
LABEL_18:
          v33(v47, v9);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          ((void (**)(void, Class))a3)[2](a3, isa);

          uint64_t v49 = v75;
          goto LABEL_19;
        }
      }

      id v58 = [(id)objc_opt_self(GKAMPController) controller];
      [v58 reportFriendInviteActivityEventAtStage:8 hostApp:0];
      char v59 = 0;
      uint64_t v49 = v75;
      goto LABEL_26;
    }
  }

  else
  {
    uint64_t v35 = sub_10013519C((uint64_t)&v79, &qword_1002B8E90);
  }

  uint64_t v49 = v75;
  uint64_t v50 = v73;
  uint64_t v51 = static GKLog.daemon.getter(v35);
  uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
  os_log_type_t v53 = static os_log_type_t.info.getter(v52);
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = a2;
    uint64_t v55 = a1;
    os_log_type_t v56 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v56 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "FriendBulletin loadBulletinsForPushNotification: failed to get type, attempting to parse using the old protocol",  v56,  2u);
    BOOL v57 = v56;
    a1 = v55;
    a2 = v54;
    swift_slowDealloc(v57, -1LL, -1LL);
  }

  v33(v50, v9);
  _Block_copy(a3);
  sub_100146354(a1, a2, a3);
LABEL_19:
  swift_release(v49);
  _Block_release(a3);
  _Block_release(a3);
}

uint64_t sub_1001458E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  v8[3] = a7;
  v8[4] = a8;
  char v10 = a6 & 1;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  v8[5] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[6] = v12;
  v8[7] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)swift_task_alloc(dword_1002B86D4);
  v8[8] = v13;
  void *v13 = v8;
  v13[1] = sub_100145974;
  return sub_100145D68(a5, v10, (uint64_t)(v8 + 10));
}

uint64_t sub_100145974(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 64));
  if (v1)
  {
    *(_BYTE *)(v4 + 81) = *(_BYTE *)(v4 + 80);
    uint64_t v5 = sub_1001459EC;
  }

  else
  {
    *(void *)(v4 + 72) = a1;
    uint64_t v5 = sub_100145B78;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

void sub_1001459EC()
{
  char v1 = *(_BYTE *)(v0 + 81);
  unint64_t v2 = sub_100147F64();
  uint64_t v3 = swift_allocError(&type metadata for FriendBulletin.FriendBulletinError, v2, 0LL, 0LL);
  *uint64_t v4 = v1;
  uint64_t v5 = swift_errorRetain(v3);
  static GKLog.daemon.getter(v5);
  sub_10014864C();
  uint64_t v6 = sub_10014864C();
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)sub_10012CE30(12LL);
    char v10 = (void *)sub_10012CE30(8LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    sub_10014864C();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v3);
    *(void *)(v0 + 16) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *char v10 = v11;
    sub_100132428();
    sub_100132428();
    sub_10012CE90( (void *)&_mh_execute_header,  v7,  v8,  "FriendBulletin Unable to parse bulletin, bailing. Reason: %@",  v9);
    uint64_t v12 = sub_100129274(&qword_1002B8ED0);
    sub_10012CE88((uint64_t)v10, v13, v12);
    sub_10012CE24((uint64_t)v10);
    sub_10012CE24((uint64_t)v9);
  }

  else
  {
    sub_100132428();
    sub_100132428();
  }

  uint64_t v15 = *(void *)(v0 + 48);
  uint64_t v14 = *(void *)(v0 + 56);
  uint64_t v16 = *(void (**)(void *))(v0 + 24);

  sub_100144EBC(v14, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  v16(_swiftEmptyArrayStorage);
  sub_100132428();
  sub_100132428();
  swift_task_dealloc(*(void *)(v0 + 56));
  sub_1001485A4();
  __asm { BR              X0 }

uint64_t sub_100145B78()
{
  char v1 = *(void **)(v0 + 72);
  unint64_t v2 = *(void (**)(uint64_t))(v0 + 24);
  uint64_t v3 = sub_100129274(&qword_1002B8708);
  uint64_t v4 = swift_allocObject(v3, 64LL, 7LL);
  *(_OWORD *)(v4 + 16) = xmmword_1001F3480;
  *(void *)(v4 + 56) = type metadata accessor for FriendBulletin();
  *(void *)(v4 + 32) = v1;
  id v5 = v1;
  v2(v4);

  swift_bridgeObjectRelease(v4, v6);
  swift_task_dealloc(*(void *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_100145C94(char a1, char a2)
{
  return a1 == a2;
}

void sub_100145CA4(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_100145CC8(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_100145D0C(char *a1, char *a2)
{
  return sub_100145C94(*a1, *a2);
}

Swift::Int sub_100145D18()
{
  return sub_100145CC8(*v0);
}

void sub_100145D20(uint64_t a1)
{
}

Swift::Int sub_100145D28(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100145D68(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v3 + 1112) = a3;
  *(_BYTE *)(v3 + 1120) = a2;
  *(void *)(v3 + 1104) = a1;
  return swift_task_switch(sub_100145D88, 0LL, 0LL);
}

void sub_100145D88()
{
  char v1 = (_BYTE *)(v0 + 616);
  sub_100166684(*(void *)(v0 + 1104), v0 + 16);
  sub_10014818C(v0 + 16, v0 + 320, &qword_1002B86D8);
  if (sub_100147F40(v0 + 320) == 1)
  {
    _BYTE *v1 = 0;
    sub_100147F64();
    sub_100148644();
    char v2 = 0;
    goto LABEL_26;
  }

  memcpy((void *)(v0 + 168), (const void *)(v0 + 320), 0x98uLL);
  sub_1001484F0(v0 + 168, v0 + 568);
  sub_1001484F0(v0 + 568, v0 + 520);
  if (*(void *)(v0 + 528))
  {
    uint64_t v3 = *(void *)(v0 + 1104);
    __int128 v4 = *(_OWORD *)(v0 + 536);
    *(_OWORD *)(v0 + 472) = *(_OWORD *)(v0 + 520);
    *(_OWORD *)(v0 + 488) = v4;
    *(_OWORD *)(v0 + 504) = *(_OWORD *)(v0 + 552);
    sub_10014811C((uint64_t *)(v0 + 568));
    sub_100147FA0((uint64_t *)(v0 + 16));
    type metadata accessor for FriendBulletin();
    uint64_t v5 = swift_bridgeObjectRetain(v3);
    uint64_t v6 = sub_1001462DC(v5);
    if (v6)
    {
      os_log_type_t v8 = v6;
      uint64_t v9 = *(void *)(v0 + 1104);
      *(void *)(v0 + 992) = 0x656C746974LL;
      *(void *)(v0 + 1000) = 0xE500000000000000LL;
      sub_10014857C();
      sub_10012CFE4(v9, (_OWORD *)(v0 + 656));
      uint64_t v10 = sub_100148654();
      if (*(void *)(v0 + 680))
      {
        if ((sub_1001484C4(v10, v11, v12, (uint64_t)&type metadata for String) & 1) == 0)
        {
          sub_100148588(v0 + 864, v13);
          sub_10014818C(v0 + 488, v0 + 848, &qword_1002B86F0);
          sub_10013A2B0(v0 + 848, v42);
          uint64_t v43 = v0 + 504;
          uint64_t v44 = v0 + 832;
LABEL_24:
          uint64_t v58 = sub_10014818C(v43, v44, &qword_1002B86F0);
          sub_100148688(v58, v59);
          goto LABEL_25;
        }

        uint64_t v14 = *(void *)(v0 + 1104);
        uint64_t v15 = *(void *)(v0 + 992);
        uint64_t v16 = *(void *)(v0 + 1000);
        *(void *)(v0 + 992) = 0x6567617373656DLL;
        *(void *)(v0 + 1000) = 0xE700000000000000LL;
        sub_10014857C();
        sub_10012CFE4(v14, (_OWORD *)(v0 + 656));
        uint64_t v17 = sub_100148654();
        if (*(void *)(v0 + 680))
        {
          uint64_t v20 = sub_1001484C4(v17, v18, v19, (uint64_t)&type metadata for String);
          if ((v20 & 1) == 0)
          {
            uint64_t v48 = v0 + 784;
            uint64_t v49 = v0 + 800;
            uint64_t v50 = (_OWORD *)(v0 + 816);
LABEL_23:
            sub_100132454(v20, v21);
            *uint64_t v50 = *(_OWORD *)(v0 + 472);
            sub_10013A2B0((uint64_t)v50, v56);
            sub_1001484F0(v0 + 488, v49);
            sub_10013A2B0(v49, v57);
            uint64_t v43 = v0 + 504;
            uint64_t v44 = v48;
            goto LABEL_24;
          }

          uint64_t v65 = v15;
          uint64_t v22 = *(void *)(v0 + 1104);
          *(void *)(v0 + 992) = 0xD000000000000010LL;
          *(void *)(v0 + 1000) = 0x800000010024C470LL;
          sub_10014857C();
          sub_10012CFE4(v22, (_OWORD *)(v0 + 656));
          uint64_t v23 = sub_100148654();
          if (*(void *)(v0 + 680))
          {
            uint64_t v26 = sub_1001484C4(v23, v24, v25, (uint64_t)&type metadata for String);
            if ((v26 & 1) != 0)
            {
              char v28 = *(_BYTE *)(v0 + 1120);
              uint64_t v29 = *(void *)(v0 + 992);
              uint64_t v30 = *(void *)(v0 + 1000);
              sub_10014818C(v0 + 488, v0 + 880, &qword_1002B86F0);
              sub_10014818C(v0 + 880, v0 + 1008, &qword_1002B86F0);
              sub_1001882FC(v65, v16, v8);
              sub_100144A98(v31, v32);
              sub_100188308(v29, v30, v8);
              if ((v28 & 1) != 0)
              {
                uint64_t v33 = v0 + 704;
                sub_1001467F0();
              }

              else
              {
                uint64_t v33 = v0 + 720;
                sub_100146AE8();
              }

              sub_100132454(v34, v35);
              sub_10013A2B0(v0 + 880, v61);
              uint64_t v62 = sub_10014818C(v0 + 504, v33, &qword_1002B86F0);
              sub_100148688(v62, v63);
              sub_1001485A4();
              __asm { BR              X1 }
            }

            uint64_t v48 = v0 + 736;
            uint64_t v49 = v0 + 752;
            uint64_t v50 = (_OWORD *)(v0 + 768);
            uint64_t v20 = sub_100144A98(v26, v27);
            goto LABEL_23;
          }

          uint64_t v51 = sub_100144A98(v23, v24);
          uint64_t v53 = sub_100132454(v51, v52);
          sub_100148628(v53, v54);
          sub_1001484F0(v0 + 488, v0 + 896);
          sub_10013A2B0(v0 + 896, v55);
          sub_1001484F0(v0 + 504, v0 + 912);
          uint64_t v41 = v0 + 912;
        }

        else
        {
          uint64_t v45 = sub_100132454(v17, v18);
          sub_100148628(v45, v46);
          sub_1001484F0(v0 + 488, v0 + 944);
          sub_10013A2B0(v0 + 944, v47);
          sub_1001484F0(v0 + 504, v0 + 960);
          uint64_t v41 = v0 + 960;
        }
      }

      else
      {
        sub_100148588(v0 + 976, v11);
        sub_10014818C(v0 + 488, v0 + 1024, &qword_1002B86F0);
        sub_10013A2B0(v0 + 1024, v39);
        sub_10014818C(v0 + 504, v0 + 1040, &qword_1002B86F0);
        uint64_t v41 = v0 + 1040;
      }

      sub_10013A2B0(v41, v40);
      sub_10013519C(v0 + 656, &qword_1002B8E90);
LABEL_25:
      char v2 = 3;
      _BYTE *v1 = 3;
      sub_100147F64();
      sub_100148644();

LABEL_26:
      **(_BYTE **)(v0 + 1112) = v2;
      sub_1001485A4();
      __asm { BR              X0 }
    }

    sub_100148588(v0 + 1072, v7);
    uint64_t v36 = sub_1001484F0(v0 + 488, v0 + 1088);
    sub_100148688(v36, v37);
    sub_1001484F0(v0 + 504, v0 + 1056);
    sub_10013A2B0(v0 + 1056, v38);
    char v2 = 2;
    *(_BYTE *)(v0 + 616) = 2;
  }

  else
  {
    sub_100147FA0((uint64_t *)(v0 + 16));
    char v2 = 1;
    _BYTE *v1 = 1;
  }

  sub_100147F64();
  sub_100148644();
  goto LABEL_26;
}

objc_class *sub_1001462DC(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_1001322A0((uint64_t)v2.super.isa, v3);
  }

  else
  {
    v2.super.Class isa = 0LL;
  }

  [objc_allocWithZone(v1) initWithPushNotification:v2.super.isa];
  sub_100148690();
  return v1;
}

void sub_100146354(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v12 = type metadata accessor for FriendBulletin();
  uint64_t v13 = swift_bridgeObjectRetain(a1);
  uint64_t v14 = (uint64_t)sub_1001462DC(v13);
  if (!v14) {
    goto LABEL_11;
  }
  uint64_t v15 = (void *)v14;
  uint64_t v41 = 0x656C746974LL;
  unint64_t v42 = 0xE500000000000000LL;
  AnyHashable.init<A>(_:)(&v41);
  sub_10012CFE4(a1, &v44);
  sub_10012A92C((uint64_t)v43);
  if (!v45)
  {

    uint64_t v14 = sub_10013519C((uint64_t)&v44, &qword_1002B8E90);
LABEL_11:
    uint64_t v25 = static GKLog.daemon.getter(v14);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.info.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      char v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v28 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "FriendBulletin loadBulletinsForPushNotification: failed to create bulletin",  v28,  2u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v29.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class))a3)[2](a3, v29.super.isa);
    goto LABEL_14;
  }

  if ((swift_dynamicCast(&v41, &v44, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {

    goto LABEL_11;
  }

  uint64_t v17 = v41;
  uint64_t v16 = v42;
  uint64_t v41 = 26991LL;
  unint64_t v42 = 0xE200000000000000LL;
  AnyHashable.init<A>(_:)(&v41);
  sub_10012CFE4(a1, &v44);
  sub_10012A92C((uint64_t)v43);
  if (v45)
  {
    if ((swift_dynamicCast(&v41, &v44, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      unint64_t v20 = v42;
      sub_1001882FC(v17, v16, v15);
      uint64_t v41 = 2036625250LL;
      unint64_t v42 = 0xE400000000000000LL;
      id v21 = v15;
      AnyHashable.init<A>(_:)(&v41);
      sub_10012CFE4(a1, &v44);
      sub_10012A92C((uint64_t)v43);
      if (v45)
      {
        if ((swift_dynamicCast(&v41, &v44, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
        {
          unint64_t v22 = v42;
          NSString v23 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v22, v24);
LABEL_22:
          [v21 setMessage:v23];

          sub_1001467F0();
          swift_bridgeObjectRelease(v20, v35);
          uint64_t v36 = sub_100129274(&qword_1002B8708);
          uint64_t v37 = swift_allocObject(v36, 64LL, 7LL);
          *(_OWORD *)(v37 + 16) = xmmword_1001F3480;
          *(void *)(v37 + 56) = v12;
          *(void *)(v37 + 32) = v21;
          id v38 = v21;
          v29.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          ((void (**)(void, Class))a3)[2](a3, v29.super.isa);
          swift_bridgeObjectRelease(v37, v39);

          goto LABEL_14;
        }
      }

      else
      {
        sub_10013519C((uint64_t)&v44, &qword_1002B8E90);
      }

      NSString v23 = 0LL;
      goto LABEL_22;
    }

    uint64_t v30 = swift_bridgeObjectRelease(v16, v19);
  }

  else
  {
    swift_bridgeObjectRelease(v16, v18);
    uint64_t v30 = sub_10013519C((uint64_t)&v44, &qword_1002B8E90);
  }

  uint64_t v31 = static GKLog.daemon.getter(v30);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.info.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "FriendBulletin loadBulletinsForPushNotification: failed to get player id",  v34,  2u);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v29.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  ((void (**)(void, Class))a3)[2](a3, v29.super.isa);

LABEL_14:
  _Block_release(a3);
}

void sub_1001467F0()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"GKNotificationsCategoryActionsFriendRequest");
  sub_100147DE8(v1, v2, v0);
  sub_1001485E8(v3, v4, v5, v6, v7, v8, v9, v10, v32);
  id v11 = sub_1001485E0(objc_allocWithZone((Class)&OBJC_CLASS___GKBulletinAction));
  sub_100148544(v11);
  swift_bridgeObjectRetain(v38);
  sub_1001485C0();
  uint64_t v14 = sub_100132858(v12, v13);
  sub_100148670(v14, "setDefaultAction:");
  id v15 = sub_1001485E0(objc_allocWithZone((Class)&OBJC_CLASS___GKBulletinAction));
  sub_100148544(v15);
  swift_bridgeObjectRetain(v33);
  sub_100147E38(v32, v33, v15);
  sub_100144C2C(v16, v17);
  uint64_t v18 = sub_100144ECC();
  sub_100147E7C(v18, v19, v15);
  [v0 setAcceptAction:v15];
  id v20 = sub_1001485E0(objc_allocWithZone((Class)&OBJC_CLASS___GKBulletinAction));
  sub_100148544(v20);
  swift_bridgeObjectRetain(v35);
  sub_100147E38(v34, v35, v20);
  sub_100144A98(v21, v22);
  uint64_t v23 = sub_100144ECC();
  sub_100147E7C(v23, v24, v20);
  [v0 setDeclineAction:v20];
  id v25 = sub_1001485E0(objc_allocWithZone((Class)&OBJC_CLASS___GKBulletinAction));
  sub_100148544(v25);
  uint64_t v26 = v36;
  uint64_t v27 = v37;
  swift_bridgeObjectRetain(v37);
  sub_100147ED8(&v32, v28);
  sub_100147E38(v26, v27, v25);
  swift_bridgeObjectRelease(v27, v29);
  uint64_t v30 = sub_100144ECC();
  sub_100147E7C(v30, v31, v25);
  [v0 setViewAction:v25];
}

uint64_t sub_1001469B8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CharacterSet(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1001484F8();
  static CharacterSet.alphanumerics.getter();
  unint64_t v5 = sub_10012B89C();
  StringProtocol.addingPercentEncoding(withAllowedCharacters:)(v1, &type metadata for String, v5);
  uint64_t v7 = v6;
  uint64_t result = sub_100144EBC(v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  if (v7)
  {
    unint64_t v9 = 0xD000000000000043LL;
    sub_1001486A0();
    unint64_t v10 = 0xD000000000000043LL;
    unint64_t v11 = 0x800000010024C380LL;
    sub_1001486A0();
    uint64_t result = sub_1001322A0(v12, v13);
    unint64_t v14 = 0xD000000000000047LL;
    unint64_t v15 = 0x800000010024C420LL;
    unint64_t v16 = 0x800000010024C3D0LL;
  }

  else
  {
    unint64_t v10 = 0LL;
    unint64_t v14 = 0LL;
    unint64_t v9 = 0LL;
    unint64_t v11 = 0xE000000000000000LL;
    unint64_t v15 = 0xE000000000000000LL;
    unint64_t v16 = 0xE000000000000000LL;
  }

  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v14;
  a1[7] = v15;
  a1[8] = v9;
  a1[9] = v16;
  return result;
}

void sub_100146AE8()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"GKNotificationCategoryActionsFriendRequestAccepted");
  sub_100147DE8(v1, v2, v0);
  sub_1001485E8(v3, v4, v5, v6, v7, v8, v9, v10, v18[0]);
  id v11 = [objc_allocWithZone((Class)GKBulletinAction) init];
  [v11 setType:0];
  swift_bridgeObjectRetain(v18[5]);
  sub_100147ED8(v18, v12);
  sub_1001485C0();
  sub_100132858(v13, v14);
  uint64_t v15 = sub_100144ECC();
  sub_100147E7C(v15, v16, v11);
  sub_100148670(v17, "setDefaultAction:");
}

void sub_100146BA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1001447C4();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1001485F8();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v46 - v6;
  uint64_t v8 = static GKLog.trace.getter(v5);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)sub_10012CE30(2LL);
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "FriendBulletin handleAction:", v11, 2u);
    sub_10012CE24((uint64_t)v11);
  }

  uint64_t v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v7, v2);
  NSString v13 = String._bridgeToObjectiveC()();
  uint64_t v14 = (objc_class *)type metadata accessor for FriendBulletin();
  v48.receiver = v1;
  v48.Class super_class = v14;
  objc_msgSendSuper2(&v48, "handleAction:", v13);

  uint64_t v16 = sub_100148698(v15, (SEL *)&selRef_categoryIdentifier);
  uint64_t v18 = v17;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"GKNotificationsCategoryActionsFriendRequest");
  if (v18)
  {
    if (v19 == v16 && v18 == (os_log_s *)v20)
    {
      uint64_t v24 = sub_100144A98(v19, v20);
LABEL_19:
      sub_100132324(v24, v25);
      sub_100146F04();
LABEL_28:
      sub_10012CE58();
      return;
    }

    uint64_t v22 = sub_10013A6CC(v19, v20, v16, (uint64_t)v18);
    uint64_t v24 = sub_100144A98(v22, v23);
    if ((v22 & 1) != 0) {
      goto LABEL_19;
    }
  }

  else
  {
    sub_100144A98(v19, v20);
  }

  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"GKNotificationCategoryActionsFriendRequestAccepted");
  if (v18)
  {
    if (v26 == v16 && v18 == (os_log_s *)v27)
    {
      uint64_t v43 = sub_100132324(v26, v27);
      sub_100144A98(v43, v44);
LABEL_25:
      sub_1001476A8();
      goto LABEL_28;
    }

    uint64_t v29 = sub_10013A6CC(v26, v27, v16, (uint64_t)v18);
    uint64_t v31 = sub_100132324(v29, v30);
    uint64_t v33 = sub_100144A98(v31, v32);
    if ((v29 & 1) != 0) {
      goto LABEL_25;
    }
  }

  else
  {
    uint64_t v33 = sub_100144A98(v26, v27);
  }

  static GKLog.daemon.getter(v33);
  id v34 = v1;
  sub_10014867C();
  os_log_type_t v35 = sub_100148620();
  if (!os_log_type_enabled(v18, v35))
  {

    goto LABEL_27;
  }

  uint64_t v36 = (uint8_t *)sub_10012CE30(12LL);
  uint64_t v37 = sub_10012CE30(32LL);
  uint64_t v47 = v37;
  *(_DWORD *)uint64_t v36 = 136315138;
  uint64_t v38 = sub_100148698(v37, (SEL *)&selRef_categoryIdentifier);
  if (v39)
  {
    uint64_t v46 = sub_100135074(v38, v39, &v47);
    uint64_t v40 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
    sub_100144A98(v40, v41);

    sub_10012CE90( (void *)&_mh_execute_header,  v18,  v35,  "FriendBulleting handleAction invalid categoryIdentifier %s",  v36);
    sub_10012CE88(v37, v42, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v37);
    sub_10012CE24((uint64_t)v36);
LABEL_27:

    uint64_t v45 = sub_100144ECC();
    ((void (*)(uint64_t))v12)(v45);
    goto LABEL_28;
  }

  __break(1u);
}

void sub_100146F04()
{
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = (void *)sub_1001447C4();
  sub_10014856C();
  __chkstk_darwin(v7);
  sub_1001485F8();
  os_log_type_t v10 = (void *)(v8 - v9);
  __chkstk_darwin(v11);
  NSString v13 = (os_log_s *)((char *)&v44 - v12);
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"GKDefault");
  if (v14 == v5 && v15 == v3)
  {
    uint64_t v19 = &selRef_defaultAction;
LABEL_8:
    sub_1001322A0(v14, v15);
    goto LABEL_9;
  }

  uint64_t v17 = sub_1001484B0(v14, v15);
  sub_100144C2C(v17, v18);
  if ((v17 & 1) != 0)
  {
    uint64_t v19 = &selRef_defaultAction;
    goto LABEL_9;
  }

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"GKAccepted");
  if (v14 == v5 && v15 == v3)
  {
    uint64_t v19 = &selRef_acceptAction;
    goto LABEL_8;
  }

  uint64_t v28 = sub_1001484B0(v14, v15);
  sub_100144C2C(v28, v29);
  if ((v28 & 1) != 0)
  {
    uint64_t v19 = &selRef_acceptAction;
    goto LABEL_9;
  }

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"GKDeclined");
  if (v14 == v5 && v15 == v3)
  {
    uint64_t v19 = &selRef_declineAction;
    goto LABEL_8;
  }

  uint64_t v33 = sub_1001484B0(v14, v15);
  sub_100144C2C(v33, v34);
  if ((v33 & 1) != 0)
  {
    uint64_t v19 = &selRef_declineAction;
    goto LABEL_9;
  }

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"GKView");
  if (v14 == v5 && v15 == v3)
  {
    uint64_t v19 = &selRef_viewAction;
    goto LABEL_8;
  }

  uint64_t v36 = sub_1001484B0(v14, v15);
  id v20 = (id)sub_100144C2C(v36, v37);
  if ((v36 & 1) == 0) {
    goto LABEL_36;
  }
  uint64_t v19 = &selRef_viewAction;
LABEL_9:
  id v20 = [v1 *v19];
  if (v20)
  {
    id v21 = sub_1001485D0(v20);
    if (!v21)
    {
      sub_100147934();
      sub_100147270(v5, v3);
      sub_1001484D8(v45);
      return;
    }

    static GKLog.daemon.getter(v21);
    id v22 = v45;
    uint64_t v23 = v13;
    Logger.logObject.getter(v22);
    os_log_type_t v24 = sub_100148620();
    if (sub_100148594(v24))
    {
      uint64_t v25 = (float *)sub_10012CE30(12LL);
      sub_10014865C(v25, 3.852e-34);
      sub_100148528((uint64_t)[v22 v26]);

      sub_10012CE90( (void *)&_mh_execute_header,  v13,  (os_log_type_t)v5,  "FriendBulletin handleFriendRequestAction invalid action type %ld",  (uint8_t *)v25);
      sub_10012CE24((uint64_t)v25);
    }

    else
    {

      uint64_t v23 = (os_log_s *)v22;
    }

    uint64_t v30 = *(void (**)(os_log_s *, void *))(v0 + 8);
    uint64_t v31 = v13;
    goto LABEL_39;
  }

void sub_100147270(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"GKAccepted");
  if (v4 == a1 && v5 == a2)
  {
    sub_100132324(v4, v5);
    goto LABEL_13;
  }

  uint64_t v7 = sub_10013A6CC(a1, a2, v4, v5);
  char v8 = v7;
  sub_10013A6AC(v7, v9);
  if ((v8 & 1) != 0)
  {
LABEL_13:
    sub_100147344();
    return;
  }

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"GKDeclined");
  if (v10 == a1 && v11 == a2)
  {
    sub_100132324(v10, v11);
LABEL_16:
    sub_100147374();
    return;
  }

  uint64_t v13 = sub_10013A6CC(a1, a2, v10, v11);
  char v14 = v13;
  sub_10013A6AC(v13, v15);
  if ((v14 & 1) != 0) {
    goto LABEL_16;
  }
}

void sub_100147344()
{
}

void sub_100147368( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_100147374()
{
}

void sub_100147398()
{
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = sub_1001447C4();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1001484F8();
  uint64_t v13 = sub_10012B544(v10, (SEL *)&selRef_playerID);
  if (v14)
  {
    id v15 = [(id)objc_opt_self(GKDaemonProxy) proxyForLocalPlayer];
    id v16 = [v15 friendServicePrivate];

    NSString v17 = String._bridgeToObjectiveC()();
    sub_100144C2C((uint64_t)v17, v18);
    v24[4] = v8;
    v24[5] = 0LL;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 1107296256LL;
    v24[2] = sub_100134D2C;
    void v24[3] = v6;
    uint64_t v19 = _Block_copy(v24);
    objc_msgSend(v16, *v4, v17, v19);
    _Block_release(v19);
    swift_unknownObjectRelease(v16);
  }

  else
  {
    uint64_t v20 = static GKLog.daemon.getter(v13);
    id v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.info.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)sub_10012CE30(2LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, v2, v23, 2u);
      sub_10012CE24((uint64_t)v23);
    }

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0, v11);
  }

  sub_10012CE58();
}

void sub_10014753C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_100147548( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  sub_1001447C4();
  sub_10014856C();
  __chkstk_darwin(v28);
  sub_100148608();
  if (v27)
  {
    uint64_t v29 = sub_100135A3C();
    static GKLog.friending.getter(v29);
    sub_100135A3C();
    uint64_t v30 = sub_100135A3C();
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v38 = v25;
      uint64_t v33 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v34 = (void *)sub_10012CE30(8LL);
      *(_DWORD *)uint64_t v33 = 138412290;
      sub_100135A3C();
      uint64_t v35 = _swift_stdlib_bridgeErrorToNSError(v27);
      uint64_t v39 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &a9);
      *uint64_t v34 = v35;
      sub_1001359B4();
      sub_1001359B4();
      sub_10012CE90((void *)&_mh_execute_header, v31, v32, v38, v33);
      uint64_t v36 = sub_100129274(&qword_1002B8ED0);
      sub_10012CE88((uint64_t)v34, v37, v36);
      sub_10012CE24((uint64_t)v34);
      sub_10012CE24((uint64_t)v33);

      sub_1001359B4();
    }

    else
    {
      sub_1001359B4();
      sub_1001359B4();
      sub_1001359B4();
    }

    sub_100144EBC(v21, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
  }

  sub_10012CE58();
}

void sub_1001476A8()
{
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = (void *)sub_1001447C4();
  sub_10014856C();
  __chkstk_darwin(v7);
  sub_1001485F8();
  uint64_t v10 = (char *)(v8 - v9);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"GKDefault");
  if (v14 == v5 && v15 == (void)v3)
  {
    sub_10013A6AC(v14, v15);
  }

  else
  {
    uint64_t v17 = sub_10013A6CC(v14, v15, v5, (uint64_t)v3);
    id v19 = (id)sub_100132858(v17, v18);
    if ((v17 & 1) == 0) {
      goto LABEL_12;
    }
  }

  id v19 = [v1 defaultAction];
  if (v19)
  {
    id v20 = sub_1001485D0(v19);
    if (!v20)
    {
      sub_100147934();
      sub_1001484D8(v35);
      return;
    }

    static GKLog.daemon.getter(v20);
    id v21 = v35;
    sub_10014867C();
    os_log_type_t v22 = sub_100148620();
    if (sub_100148594(v22))
    {
      uint64_t v23 = (float *)sub_10012CE30(12LL);
      sub_10014865C(v23, 3.852e-34);
      sub_100148528((uint64_t)[v3 v24]);

      sub_10012CE90( (void *)&_mh_execute_header,  (os_log_s *)v1,  (os_log_type_t)v5,  "FriendBulletin handleAcceptedRequestAction invalid action type %ld",  (uint8_t *)v23);
      sub_10012CE24((uint64_t)v23);
    }

    else
    {

      uint64_t v1 = v3;
    }

    os_log_type_t v32 = *(void (**)(char *, void *))(v0 + 8);
    uint64_t v33 = v13;
    goto LABEL_18;
  }

void sub_100147934()
{
  uint64_t v4 = v3;
  uint64_t v5 = sub_1001447C4();
  sub_10014856C();
  __chkstk_darwin(v6);
  sub_100148608();
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100129274(&qword_1002B9D00);
  __chkstk_darwin(v11);
  sub_1001484F8();
  uint64_t v12 = sub_10012B544(v4, (SEL *)&selRef_info);
  if (v13)
  {
    uint64_t v14 = URL.init(string:)(v12);
    sub_100144C2C(v14, v15);
    if (sub_10012B4E8(v2, 1LL, v7) == 1)
    {
      uint64_t v16 = sub_10013519C(v2, &qword_1002B9D00);
      static GKLog.daemon.getter(v16);
      id v17 = v4;
      uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v19 = static os_log_type_t.info.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v33 = v5;
        id v20 = (uint8_t *)sub_10012CE30(12LL);
        uint64_t v21 = sub_10012CE30(32LL);
        uint64_t v35 = v21;
        *(_DWORD *)id v20 = 136315138;
        uint64_t v22 = sub_100148698(v21, (SEL *)&selRef_info);
        if (v23)
        {
          unint64_t v24 = v23;
        }

        else
        {
          uint64_t v22 = 7104878LL;
          unint64_t v24 = 0xE300000000000000LL;
        }

        uint64_t v34 = sub_100135074(v22, v24, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);

        swift_bridgeObjectRelease(v24, v25);
        sub_10012CE90((void *)&_mh_execute_header, v18, v19, "FriendBulletin openSettings invalid url %s", v20);
        sub_10012CE88(v21, v26, (uint64_t)&type metadata for Any + 8);
        sub_10012CE24(v21);
        sub_10012CE24((uint64_t)v20);

        (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v33);
      }

      else
      {

        (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v5);
      }

      goto LABEL_11;
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, v2, v7);
    id v27 = [(id)objc_opt_self(GKApplicationWorkspace) defaultWorkspace];
    if (v27)
    {
      uint64_t v29 = v27;
      URL._bridgeToObjectiveC()(v28);
      uint64_t v31 = v30;
      [v29 openURL:v30];

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_11:
      sub_10012CE58();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

void *sub_100147BDC(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_1001322A0((uint64_t)v2.super.isa, v3);
  }

  v12.receiver = v1;
  v12.Class super_class = (Class)type metadata accessor for FriendBulletin();
  id v10 = sub_100148638((uint64_t)v12.super_class, "initWithPushNotification:", v4, v5, v6, v7, v8, v9, v12);
  sub_100148690();
  if (v1) {

  }
  return v1;
}

id sub_100147CBC()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for FriendBulletin();
  return objc_msgSendSuper2(&v2, "init");
}

void *sub_100147D0C()
{
  v8.receiver = v0;
  v8.Class super_class = (Class)type metadata accessor for FriendBulletin();
  sub_100148638((uint64_t)v8.super_class, "initWithCoder:", v1, v2, v3, v4, v5, v6, v8);
  sub_100148690();
  return v0;
}

id sub_100147D70()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for FriendBulletin();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FriendBulletin()
{
  return objc_opt_self(&OBJC_CLASS___GKFriendBulletin);
}

uint64_t sub_100147DC0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

void sub_100147DE8(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v5);
  [a3 setCategoryIdentifier:v6];
}

void sub_100147E38(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setInfo:v4];
}

void sub_100147E7C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setPlayerID:v4];
}

uint64_t sub_100147EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100147ED0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_100147ED8(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[7];
  swift_bridgeObjectRelease(a1[9], a2);
  swift_bridgeObjectRelease(v6, v7);
  swift_bridgeObjectRelease(v5, v8);
  swift_bridgeObjectRelease(v4, v9);
  swift_bridgeObjectRelease(v3, v10);
  return a1;
}

uint64_t sub_100147F40(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(swift_bridgeObjectRelease(v0[18], v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

unint64_t sub_100147F64()
{
  unint64_t result = qword_1002B86E0;
  if (!qword_1002B86E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3628, &type metadata for FriendBulletin.FriendBulletinError);
    atomic_store(result, (unint64_t *)&qword_1002B86E0);
  }

  return result;
}

uint64_t *sub_100147FA0(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100148000( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a2 != 1)
  {
    sub_1001480B4(result, a2, a3, a4, a5, a6);
    swift_bridgeObjectRelease(a7, v21);
    sub_1001480B4(a8, a9, a10, a11, a12, a13);
    swift_bridgeObjectRelease(a15, v22);
    return sub_1001480EC(a16, a17, a18, a19);
  }

  return result;
}

void sub_1001480B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    uint64_t v7 = swift_bridgeObjectRelease(a2, a2);
    sub_100132324(v7, v8);
    swift_bridgeObjectRelease(a6, v9);
  }

uint64_t sub_1001480EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2, a2);
    return swift_bridgeObjectRelease(a4, v5);
  }

  return result;
}

uint64_t *sub_10014811C(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100148150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }

  return result;
}

uint64_t sub_10014818C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100129274(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001481D0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1001481F4(uint64_t a1)
{
}

uint64_t sub_1001481FC()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100148230(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  char v8 = *(_BYTE *)(v1 + 48);
  uint64_t v10 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  uint64_t v11 = (void *)swift_task_alloc(dword_1002B86FC);
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_1001482C4;
  return sub_1001458E4(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1001482C4()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t getEnumTagSinglePayload for FriendBulletin.FriendBulletinError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for FriendBulletin.FriendBulletinError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = 1;
  }
  else {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1001483E0 + 4 * byte_1001F3575[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100148414 + 4 * asc_1001F3570[v4]))();
}

uint64_t sub_100148414(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014841C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100148424LL);
  }
  return result;
}

uint64_t sub_100148430(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100148438LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10014843C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100148444(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100148450(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FriendBulletin.FriendBulletinError()
{
  return &type metadata for FriendBulletin.FriendBulletinError;
}

unint64_t sub_10014846C()
{
  unint64_t result = qword_1002B8710;
  if (!qword_1002B8710)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3600, &type metadata for FriendBulletin.FriendBulletinError);
    atomic_store(result, (unint64_t *)&qword_1002B8710);
  }

  return result;
}

uint64_t sub_1001484B0(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_1001484C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5, v4, v6 + 8, a4, 6LL);
}

void sub_1001484D8(id a1)
{
}

uint64_t sub_1001484F0(uint64_t a1, uint64_t a2)
{
  return sub_10014818C(a1, a2, v2);
}

  ;
}

  ;
}

uint64_t sub_100148528(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 88, v1 - 80);
}

id sub_100148544(void *a1)
{
  return objc_msgSend(a1, *(SEL *)(v1 + 3560), 0);
}

uint64_t sub_100148550(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 96, v1 - 88);
}

  ;
}

uint64_t sub_10014857C()
{
  return AnyHashable.init<A>(_:)(v0);
}

uint64_t sub_100148588(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *v2;
  return sub_10013A2B0(a1, a2);
}

BOOL sub_100148594(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

void sub_1001485C0()
{
}

id sub_1001485D0(void *a1)
{
  *(void *)(v1 - 104) = a1;
  return [a1 type];
}

id sub_1001485E0(void *a1)
{
  return [a1 *(SEL *)(v1 + 352)];
}

uint64_t sub_1001485E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1001469B8(&a9);
}

  ;
}

  ;
}

uint64_t sub_100148620()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_100148628(uint64_t a1, uint64_t a2)
{
  *uint64_t v2 = *v3;
  return sub_10013A2B0((uint64_t)v2, a2);
}

id sub_100148638( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  return objc_msgSendSuper2(&a9, a2, v9);
}

uint64_t sub_100148644()
{
  return swift_willThrowTypedImpl(v0);
}

uint64_t sub_10014864C()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100148654()
{
  return sub_10012A92C(v0);
}

float *sub_10014865C(float *result, float a2)
{
  *unint64_t result = a2;
  return result;
}

id sub_100148670(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_10014867C()
{
  return Logger.logObject.getter();
}

uint64_t sub_100148688(uint64_t a1, uint64_t a2)
{
  return sub_10013A2B0(v2, a2);
}

void sub_100148690()
{
}

uint64_t sub_100148698(uint64_t a1, SEL *a2)
{
  return sub_10012B544(v2, a2);
}

void sub_1001486A0()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

void sub_1001486AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin();
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = static GKLog.daemon.getter(v7);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "URLSessionTask finished collecting metrics", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  id v14 = [(id)objc_opt_self(GKAMPController) controller];
  [v14 reportURLSessionEventWithTask:a2 metrics:a3];
}

id sub_100148850()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for GKInstrumentedURLSessionDelegate()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCore32GKInstrumentedURLSessionDelegate);
}

uint64_t sub_1001488C4(char a1)
{
  if (qword_1002B7EE0 != -1) {
    swift_once(&qword_1002B7EE0, sub_100148B08);
  }
  uint64_t v2 = swift_retain(qword_1002BF870);
  uint64_t v3 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)(v2);
  uint64_t v6 = &type metadata for PeerDiscoveryMessageType;
  v5[0] = a1;
  swift_retain(v3);
  dispatch thunk of NWProtocolFramer.Message.subscript.setter(v5, 0xD000000000000018LL, 0x80000001001F3730LL);
  swift_release(v3);
  return v3;
}

uint64_t sub_100148964()
{
  if (v2[3])
  {
    uint64_t result = swift_dynamicCast( &v1,  v2,  (char *)&type metadata for Any + 8,  &type metadata for PeerDiscoveryMessageType,  6LL);
    if ((_DWORD)result) {
      return v1;
    }
  }

  else
  {
    sub_100149210((uint64_t)v2);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001489E0(uint64_t result)
{
  else {
    return result;
  }
}

uint64_t sub_1001489F0(uint64_t result)
{
  return result;
}

Swift::Int sub_1001489F8()
{
  return sub_100148A00(*v0);
}

Swift::Int sub_100148A00(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

void sub_100148A44(uint64_t a1)
{
}

void sub_100148A4C(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_100148A70(uint64_t a1)
{
  return sub_100148A78(a1, *v1);
}

Swift::Int sub_100148A78(uint64_t a1, unsigned __int8 a2)
{
  return Hasher._finalize()();
}

uint64_t sub_100148AB8@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001489E0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100148AE0@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = sub_1001489F0(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100148B08()
{
  uint64_t v0 = type metadata accessor for PeerDiscoveryFramer();
  unint64_t v1 = sub_10014925C();
  uint64_t v2 = type metadata accessor for NWProtocolFramer.Definition(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t result = NWProtocolFramer.Definition.init(implementation:)(v0, v1);
  qword_1002BF870 = result;
  return result;
}

unint64_t sub_100148B60()
{
  return 0xD000000000000017LL;
}

uint64_t sub_100148B7C(uint64_t a1)
{
  return swift_allocObject(v1, 16LL, 7LL);
}

uint64_t sub_100148B9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for NWProtocolFramer.StartResult.ready(_:);
  uint64_t started = type metadata accessor for NWProtocolFramer.StartResult(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 104LL))(a1, v2, started);
}

void sub_100148BE0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned __int8 v8 = sub_100148964();
  if ((a3 & 0x8000000000000000LL) != 0)
  {
    sub_10013249C();
    id v27 = "Negative value is not representable";
    uint64_t v28 = 35LL;
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v27, v28, 2LL, "Swift/Integers.swift", 20LL);
    __break(1u);
    return;
  }

  if (HIDWORD(a3))
  {
    sub_10013249C();
    id v27 = "Not enough bits to represent the passed value";
    uint64_t v28 = 45LL;
    goto LABEL_11;
  }

  uint64_t v9 = sub_100148EDC(v8 | (a3 << 32));
  unint64_t v11 = v10;
  NWProtocolFramer.Instance.writeOutput(data:)();
  sub_100135158(v9, v11);
  NWProtocolFramer.Instance.writeOutputNoCopy(length:)(a3);
  if (v13)
  {
    os_log_type_t v14 = static os_log_type_t.error.getter(v12);
    uint64_t v32 = 0LL;
    unint64_t v33 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(20LL);
    v15._object = (void *)0x800000010024C520LL;
    v15._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v15);
    uint64_t v31 = v13;
    uint64_t v16 = sub_100129274(&qword_1002B83B8);
    uint64_t v17 = _print_unlocked<A, B>(_:_:)(&v31, &v32, v16);
    uint64_t v19 = v32;
    unint64_t v18 = v33;
    static GKLog.match.getter(v17);
    uint64_t v20 = swift_bridgeObjectRetain_n(v18, 2LL);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = v14;
    if (os_log_type_enabled(v21, v14))
    {
      uint64_t v30 = v4;
      unint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v5;
      uint64_t v25 = v24;
      uint64_t v32 = v24;
      *(_DWORD *)unint64_t v23 = 136315138;
      swift_bridgeObjectRetain(v18);
      uint64_t v31 = sub_100135074(v19, v18, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      swift_bridgeObjectRelease_n(v18, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Nearby - %s", v23, 0xCu);
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      sub_10012CE24(v25);
      sub_10012CE24((uint64_t)v23);

      (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v30);
    }

    else
    {

      swift_bridgeObjectRelease_n(v18, 2LL);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }

    swift_bridgeObjectRelease(v18, v26);
    swift_errorRelease(v13);
  }

uint64_t sub_100148EDC(uint64_t a1)
{
  int v6 = HIDWORD(a1);
  int v7 = a1;
  uint64_t v8 = Data.init(bytes:count:)(&v7, 4LL);
  uint64_t v9 = v1;
  uint64_t v2 = Data.init(bytes:count:)(&v6, 4LL);
  unint64_t v4 = v3;
  Data.append(_:)();
  sub_100135158(v2, v4);
  return v8;
}

uint64_t sub_100148F74()
{
  char v12 = 1;
  uint64_t v0 = 8LL;
  uint64_t v9 = 8LL;
  unint64_t v10 = &v11;
  unint64_t v11 = 0LL;
  if ((NWProtocolFramer.Instance.parseInput(minimumIncompleteLength:maximumLength:parse:)(8LL, 8LL, sub_100149250, v8) & 1) != 0)
  {
    uint64_t v0 = 8LL;
    while ((v12 & 1) == 0)
    {
      unint64_t v1 = HIDWORD(v11);
      if ((v11 & 0xFFFFFFFC) != 0) {
        char v2 = 0;
      }
      else {
        char v2 = v11;
      }
      type metadata accessor for NWProtocolFramer.Message(0LL);
      uint64_t v3 = sub_1001488C4(v2);
      char v4 = NWProtocolFramer.Instance.deliverInputNoCopy(length:message:isComplete:)(v1, v3, 1LL);
      uint64_t v5 = swift_release(v3);
      if ((v4 & 1) == 0) {
        return 0LL;
      }
      unint64_t v11 = 0LL;
      char v12 = 1;
      __chkstk_darwin(v5);
      v7[2] = 8LL;
      v7[3] = &v11;
      if ((NWProtocolFramer.Instance.parseInput(minimumIncompleteLength:maximumLength:parse:)( 8LL,  8LL,  sub_100149250,  v7) & 1) == 0) {
        return v0;
      }
    }
  }

  return v0;
}

uint64_t sub_1001490A8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a5;
    if (a1)
    {
      if (a2 - a1 >= a5)
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a1 + 4);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(a1 + 4, a1 + 8);
LABEL_7:
        *(void *)a6 = 0LL;
        *(_BYTE *)(a6 + 8) = 0;
        return v7;
      }
    }

    else if (a5 <= 0)
    {
      goto LABEL_7;
    }
  }

  return 0LL;
}

uint64_t sub_100149180()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for PeerDiscoveryFramer()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCore19PeerDiscoveryFramer);
}

unint64_t sub_1001491B0()
{
  return 0xD000000000000017LL;
}

uint64_t sub_1001491D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100148B9C(a1);
}

uint64_t sub_1001491E4()
{
  return sub_100148F74();
}

void sub_1001491F8(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

uint64_t sub_100149210(uint64_t a1)
{
  uint64_t v2 = sub_100129274(&qword_1002B8E90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100149250(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_1001490A8(a1, a2, a3 & 1, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

unint64_t sub_10014925C()
{
  unint64_t result = qword_1002B88A8;
  if (!qword_1002B88A8)
  {
    uint64_t v1 = type metadata accessor for PeerDiscoveryFramer();
    unint64_t result = swift_getWitnessTable(&unk_1001F36E4, v1);
    atomic_store(result, (unint64_t *)&qword_1002B88A8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for PeerDiscoveryMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = 1;
  }
  else {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1001492E4 + 4 * byte_1001F36B5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100149318 + 4 * asc_1001F36B0[v4]))();
}

uint64_t sub_100149318(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100149320(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100149328LL);
  }
  return result;
}

uint64_t sub_100149334(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10014933CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100149340(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100149348(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PeerDiscoveryMessageType()
{
  return &type metadata for PeerDiscoveryMessageType;
}

unint64_t sub_100149368()
{
  unint64_t result = qword_1002B88B0;
  if (!qword_1002B88B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F37E4, &type metadata for PeerDiscoveryMessageType);
    atomic_store(result, (unint64_t *)&qword_1002B88B0);
  }

  return result;
}

void GameActivityStore.__allocating_init()()
{
}

id GameActivityStore.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  swift_defaultActor_initialize(v0);
  swift_retain(v0);
  uint64_t v2 = sub_100129274(&qword_1002B88B8);
  v0[14] = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v2,  &protocol witness table for String);
  sub_10012CF14();
  v4.receiver = v0;
  v4.Class super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t GameActivityStore.add(_:)(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return sub_10014C550((uint64_t)sub_10014948C, v1);
}

unint64_t sub_10014948C()
{
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  id v3 = [v1 bundleID];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  uint64_t v7 = (void **)(v2 + 112);
  sub_10014C5B0(v2 + 112);
  id v8 = v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + 112));
  unint64_t v10 = *(void **)(v2 + 112);
  *(void *)(v2 + 112) = 0x8000000000000000LL;
  unint64_t result = sub_10014C694();
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    unint64_t v16 = result;
    char v17 = v12;
    sub_100129274(&qword_1002B88C8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v15))
    {
      unint64_t v19 = sub_10014C694();
      if ((v17 & 1) != (v18 & 1)) {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      }
      unint64_t v16 = v19;
    }

    uint64_t v20 = (uint64_t)*v7;
    *uint64_t v7 = v10;
    uint64_t v21 = swift_bridgeObjectRelease(v20, v18);
    uint64_t v22 = (uint64_t)*v7;
    if ((v17 & 1) == 0)
    {
      sub_10014ABD4(v16, v4, v6, (uint64_t)_swiftEmptyArrayStorage, *v7);
      uint64_t v21 = sub_10013A624();
    }

    uint64_t v23 = *(void *)(v0 + 40);
    uint64_t v24 = (void *)(*(void *)(v22 + 56) + 8 * v16);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
    uint64_t v25 = *(void *)((*v24 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_10014A1FC(v25);
    uint64_t v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
    specialized Array._endMutation()(v26);
    uint64_t v27 = sub_1001450E8();
    sub_1001322A0(v27, v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_100149644(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_1002B88C4;
  id v7 = a1;
  swift_retain(a3);
  id v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_1001496C0;
  return GameActivityStore.add(_:)((uint64_t)v7);
}

uint64_t sub_1001496C0()
{
  uint64_t v1 = (const void *)*((void *)*v0 + 4);
  id v3 = (void *)*((void *)*v0 + 2);
  uint64_t v2 = *((void *)*v0 + 3);
  sub_10012CE48();
  swift_release(v2);

  sub_10014C720();
  _Block_release(v1);
  return sub_10014C604(v0[1]);
}

uint64_t GameActivityStore.fetchAndRemoveLatestActivity(bundleID:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  void v3[9] = a1;
  return sub_10014C550((uint64_t)sub_10014972C, v2);
}

uint64_t sub_10014972C()
{
  uint64_t v2 = sub_10014C680();
  if (*v3) {
    uint64_t v4 = sub_10014983C();
  }
  else {
    uint64_t v4 = 0LL;
  }
  ((void (*)(uint64_t, void))v2)(v0, 0LL);
  uint64_t v5 = sub_1001450E8();
  sub_1001322A0(v5, v6);
  return sub_10014C614(v4, *(uint64_t (**)(void))(v1 + 8));
}

void (*sub_1001497A4(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_10014AD20(v6, a2, a3);
  return sub_100149810;
}

void sub_100149810(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = sub_10014C6A8(*a1, *(uint64_t (**)(uint64_t, void))(*a1 + 40));
  sub_100132324(v2, v3);
  sub_10014C6A0(v1);
}

uint64_t sub_10014983C()
{
  uint64_t v1 = *v0;
  if (!((unint64_t)*v0 >> 62))
  {
    if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_3;
    }
    return 0LL;
  }

  if (v1 < 0) {
    uint64_t v5 = *v0;
  }
  else {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v0);
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(v1, v7);
  if (!v6) {
    return 0LL;
  }
LABEL_3:
  uint64_t result = sub_10014C404();
  if (!result)
  {
    uint64_t v3 = *v0;
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    while (__OFSUB__(v4, 1LL))
    {
      __break(1u);
LABEL_15:
      if (v3 < 0) {
        uint64_t v8 = v3;
      }
      else {
        uint64_t v8 = v3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v3);
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v8);
      swift_bridgeObjectRelease(v3, v9);
    }

    return sub_10014C374(v4 - 1);
  }

  return result;
}

uint64_t sub_100149914(uint64_t a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_1002B88D4;
  swift_retain(a3);
  unint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *unint64_t v10 = v3;
  v10[1] = sub_1001499A0;
  return GameActivityStore.fetchAndRemoveLatestActivity(bundleID:)(v6, v8);
}

uint64_t sub_1001499A0(void *a1)
{
  uint64_t v4 = *((void *)*v1 + 2);
  uint64_t v3 = (void (**)(void, void))*((void *)*v1 + 3);
  uint64_t v5 = sub_10012CE48();
  sub_10012B950(v5, v6);
  swift_release(v4);
  ((void (**)(void, void *))v3)[2](v3, a1);
  _Block_release(v3);

  return sub_10012CEAC(v1[1]);
}

uint64_t GameActivityStore.deinit(uint64_t a1, uint64_t a2)
{
  return v2;
}

uint64_t GameActivityStore.__deallocating_deinit(uint64_t a1, uint64_t a2)
{
  return swift_defaultActor_deallocate(v2);
}

uint64_t GameActivityStore.fetchActivities(bundleID:ascending:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 48) = a2;
  *(void *)(v4 + 56) = v3;
  *(_BYTE *)(v4 + 64) = a3;
  *(void *)(v4 + 40) = a1;
  return sub_10014C550((uint64_t)sub_100149A74, v3);
}

uint64_t sub_100149A74()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_beginAccess(v1 + 112, v0 + 16, 32LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 112);
  if (!*(void *)(v2 + 16)) {
    goto LABEL_10;
  }
  sub_10013A624();
  unint64_t v3 = sub_10014C694();
  if ((v4 & 1) == 0)
  {
    sub_1001322A0(v3, v4);
LABEL_10:
    sub_1001450E8();
    char v12 = _swiftEmptyArrayStorage;
    return sub_10014C614((uint64_t)v12, *(uint64_t (**)(void))(v0 + 8));
  }

  unint64_t v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
  sub_10013A69C();
  uint64_t v6 = sub_1001450E8();
  sub_1001322A0(v6, v7);
  if ((v5 & 0x8000000000000000LL) != 0 || (v5 & 0x4000000000000000LL) != 0)
  {
    uint64_t v13 = sub_10014A2D4(v5);
    unint64_t v14 = v5;
    unint64_t v8 = (unint64_t)v13;
    swift_bridgeObjectRelease(v14, v15);
  }

  else
  {
    unint64_t v8 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }

  sub_10013A69C();
  if ((v8 & 0x8000000000000000LL) != 0 || (uint64_t v9 = (void *)v8, (v8 & 0x4000000000000000LL) != 0))
  {
    uint64_t v9 = sub_10014A2D4(v8);
    sub_10012CF14();
  }

  char v10 = *(_BYTE *)(v0 + 64);
  unint64_t v16 = v9;
  sub_10014B034((uint64_t *)&v16, v10);
  sub_10012CF14();
  char v12 = v16;
  return sub_10014C614((uint64_t)v12, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t static GKGameActivityInternal.< infix(_:_:)(void *a1, void *a2)
{
  id v3 = [a1 createdAt];
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin();
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v3);

  id v8 = [a2 createdAt];
  uint64_t v9 = __chkstk_darwin();
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v9);

  LOBYTE(v8) = static Date.< infix(_:_:)((char *)&v12 - v7, (char *)&v12 - v7);
  char v10 = *(void (**)(char *, uint64_t))(v5 + 8);
  v10((char *)&v12 - v7, v4);
  v10((char *)&v12 - v7, v4);
  return v8 & 1;
}

uint64_t sub_100149D14(uint64_t a1, char a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  v4[4] = v9;
  uint64_t v11 = dword_1002B88DC;
  swift_retain(a4);
  uint64_t v12 = (void *)swift_task_alloc(v11);
  v4[5] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_100149DB0;
  return GameActivityStore.fetchActivities(bundleID:ascending:)(v8, v10, a2);
}

uint64_t sub_100149DB0()
{
  uint64_t v2 = *((void *)*v0 + 2);
  uint64_t v1 = (void (**)(void, void))*((void *)*v0 + 3);
  uint64_t v3 = sub_10012CE48();
  sub_10012B950(v3, v4);
  swift_release(v2);
  sub_100129640(0LL, &qword_1002B84D0, &OBJC_CLASS___GKGameActivityInternal_ptr);
  sub_10014C6E8();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_100132324((uint64_t)isa, v6);
  ((void (**)(void, Class))v1)[2](v1, isa);

  _Block_release(v1);
  return sub_10012CEAC(v0[1]);
}

uint64_t GameActivityStore.removeActivities(forBundleID:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  void v3[9] = a1;
  return sub_10014C550((uint64_t)sub_100149E60, v2);
}

uint64_t sub_100149E60()
{
  uint64_t v3 = sub_10014C680();
  uint64_t v4 = *v2;
  if (*v2)
  {
    *uint64_t v2 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10014C6A8(v0, (uint64_t (*)(uint64_t, void))v3);
    sub_1001450E8();
    uint64_t v6 = swift_bridgeObjectRelease(v4, v5);
  }

  else
  {
    sub_10014C6A8(v0, (uint64_t (*)(uint64_t, void))v3);
    uint64_t v6 = sub_1001450E8();
  }

  sub_100132324(v6, v7);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100149EFC(uint64_t a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = (void *)swift_allocObject(a5, 40LL, 7LL);
  uint64_t v11[2] = a3;
  v11[3] = v10;
  v11[4] = a1;
  id v12 = a3;
  swift_retain(a1);
  sub_100188AB4(a6, (uint64_t)v11);
}

uint64_t sub_100149F70(uint64_t a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_1002B88E4;
  swift_retain(a3);
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_100149FFC;
  return GameActivityStore.removeActivities(forBundleID:)(v6, v8);
}

uint64_t sub_100149FFC()
{
  uint64_t v2 = *((void *)*v0 + 2);
  uint64_t v1 = (void (**)(void))*((void *)*v0 + 3);
  uint64_t v3 = sub_10012CE48();
  sub_100132324(v3, v4);
  swift_release(v2);
  v1[2](v1);
  _Block_release(v1);
  return sub_10014C604(v0[1]);
}

uint64_t GameActivityStore.removeAllActivities()()
{
  *(void *)(v1 + 40) = v0;
  return sub_10014C550((uint64_t)sub_10014A06C, v0);
}

uint64_t sub_10014A06C()
{
  return sub_10012CEAC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10014A120(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1002B88EC;
  swift_retain(a2);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  void v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_10014A180;
  return GameActivityStore.removeAllActivities()();
}

uint64_t sub_10014A180()
{
  uint64_t v1 = (const void *)*((void *)*v0 + 3);
  uint64_t v2 = *((void *)*v0 + 2);
  sub_10012CE48();
  swift_release(v2);
  sub_10014C720();
  _Block_release(v1);
  return sub_10012CEAC(v0[1]);
}

uint64_t sub_10014A1D0(void **a1, void **a2)
{
  return static GKGameActivityInternal.< infix(_:_:)(*a1, *a2) & 1;
}

uint64_t sub_10014A1FC(uint64_t result)
{
  unint64_t v2 = *(void *)((*v1 & 0xFFFFFFFFFFFFF8LL) + 0x18);
  return result;
}

void sub_10014A228(uint64_t a1)
{
  unint64_t v2 = *(void *)(*v1 + 24);
  if (a1 + 1 > (uint64_t)(v2 >> 1))
  {
    sub_100169B80(v2 > 1, a1 + 1, 1, *v1);
    uint64_t *v1 = v3;
  }

void sub_10014A264(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v1 = sub_100129274(&qword_1002B8380);
    unint64_t v2 = (const void *)sub_10014C6F4(v1);
    size_t v3 = j__malloc_size(v2);
    sub_10014C5C0(v3);
    sub_10014BD30(v4, v5, v6, v7);
    sub_10014C620();
    sub_10014C6C0();
    if (!v8) {
      __break(1u);
    }
  }

  sub_10014C5E8();
}

void *sub_10014A2D4(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = sub_100129274(&qword_1002B8550);
      uint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      size_t v5 = j__malloc_size(v4);
      v4[2] = v2;
      v4[3] = (2 * ((uint64_t)(v5 - 32) / 8)) | 1;
    }

    swift_bridgeObjectRetain(v1);
    uint64_t v6 = sub_10014BBB4( (uint64_t)(v4 + 4),  v2,  v1,  (void (*)(uint64_t, void, uint64_t))sub_10016A974,  &qword_1002B8980,  &qword_1002B88B8,  (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10013A01C);
    uint64_t v1 = v7;
    swift_bridgeObjectRelease(v6, v8);
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_8:
    if (v1 < 0) {
      uint64_t v9 = v1;
    }
    else {
      uint64_t v9 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1, v10);
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

void sub_10014A3E4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v1 = sub_100129274(&qword_1002B8380);
    uint64_t v2 = (const void *)sub_10014C6F4(v1);
    size_t v3 = j__malloc_size(v2);
    sub_10014C5C0(v3);
    sub_10014BF2C(v4, v5, v6, v7);
    sub_10014C620();
    sub_10014C6C0();
    if (!v8) {
      __break(1u);
    }
  }

  sub_10014C5E8();
}

unint64_t sub_10014A454()
{
  uint64_t v1 = sub_10014C6E8();
  return sub_10014A5EC(v1, v2);
}

unint64_t sub_10014A480(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10014C704(a1);
  sub_10014C6B0((uint64_t)v4);
  Swift::Int v5 = Hasher._finalize()();
  return sub_10014A6B0(a1, a2, v5);
}

unint64_t sub_10014A4D0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = type metadata accessor for NWEndpoint(0LL);
  sub_10014C4D8(&qword_1002B91A0);
  dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, v3);
  uint64_t v4 = sub_10014C6E8();
  return sub_10014A790(v4, v5);
}

unint64_t sub_10014A530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_10013A624();
  uint64_t v10 = sub_10014C6B0(v9);
  sub_1001322A0(v10, v11);
  Swift::Int v12 = Hasher._finalize()();
  return sub_10014A8C8(a1, a2, a3, a4, v12);
}

unint64_t sub_10014A5C0()
{
  uint64_t v1 = sub_10014C6E8();
  return sub_10014A9C0(v1, v2);
}

unint64_t sub_10014A5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_10012A22C(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10012A92C((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_10014A6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10014A790(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      sub_10014C4D8(&qword_1002B8678);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_10014A8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if (((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    uint64_t v13 = ~v7;
    uint64_t v14 = *(void *)(v5 + 48);
    do
    {
      char v15 = (void *)(v14 + 32 * v8);
      uint64_t v16 = v15[1];
      uint64_t v17 = v15[2];
      uint64_t v18 = v15[3];
      BOOL v19 = *v15 == a1 && v16 == a2;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, a1, a2, 0LL) & 1) != 0)
      {
        BOOL v20 = v17 == a3 && v18 == a4;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a3, a4, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v8 = (v8 + 1) & v13;
    }

    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0);
  }

  return v8;
}

unint64_t sub_10014A9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_100129640(0LL, (unint64_t *)&qword_1002B8928, &OBJC_CLASS___CNContact_ptr);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t sub_10014AAD8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_10014C638(a1, a4 + 8 * (a1 >> 6));
  uint64_t v6 = v5[6] + 40 * result;
  __int128 v8 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
  *(_OWORD *)(v6 + 16) = v8;
  *(void *)(v6 + 32) = *(void *)(v7 + 32);
  *(void *)(v5[7] + 8 * result) = v9;
  uint64_t v10 = v5[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    v5[2] = v12;
  }
  return result;
}

void sub_10014AB28(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = sub_10014C650(a1, a2, a3, a4, a5);
  *(void *)(v8 + 8 * v5) = v7;
  uint64_t v9 = *(void *)(v6 + 16);
  BOOL v10 = __OFADD__(v9, 1LL);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    sub_10014C710(v6, v11);
  }
}

uint64_t sub_10014AB4C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for NWEndpoint(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1,  a2,  v10);
  *(void *)(*(void *)(a4 + 56) + 8 * a1) = a3;
  uint64_t v12 = *(void *)(a4 + 16);
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    *(void *)(a4 + 16) = v14;
  }
  return result;
}

unint64_t sub_10014ABD4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  unint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_10014AC1C( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_10014C638(a1, a7 + 8 * (a1 >> 6));
  uint64_t v9 = (void *)(v8[6] + 32 * result);
  *uint64_t v9 = v10;
  v9[1] = v11;
  v9[2] = v12;
  v9[3] = v13;
  *(void *)(v8[7] + 8 * result) = v14;
  uint64_t v15 = v8[2];
  BOOL v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    v8[2] = v17;
  }
  return result;
}

void sub_10014AC60(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = sub_10014C650(a1, a2, a3, a4, a5);
  uint64_t v8 = v7 + 40 * v5;
  __int128 v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v11 = *(void *)(v6 + 16);
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    sub_10014C710(v6, v13);
  }
}

void sub_10014AC98(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a5[6] + 8 * a1) = a2;
  unint64_t v5 = (void *)(a5[7] + 16 * a1);
  void *v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    sub_10014C710((uint64_t)a5, v8);
  }
}

uint64_t sub_10014ACDC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_10014C638(a1, a6 + 8 * (a1 >> 6));
  uint64_t v8 = (void *)(v7[6] + 16 * result);
  *uint64_t v8 = v9;
  v8[1] = v10;
  uint64_t v11 = (void *)(v7[7] + 16 * result);
  *uint64_t v11 = v12;
  v11[1] = v13;
  uint64_t v14 = v7[2];
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    v7[2] = v16;
  }
  return result;
}

void (*sub_10014AD20(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  BOOL v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  void v7[9] = sub_10014AF48(v7);
  v7[10] = sub_10014ADF8(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10014ADB0;
}

void sub_10014ADB0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72LL);
  uint64_t v3 = sub_10014C6A8(*(void *)a1 + 32LL, *(uint64_t (**)(uint64_t, void))(*(void *)a1 + 80LL));
  sub_100132324(v3, v4);
  v2(v1, 0LL);
  free(v1);
}

void (*sub_10014ADF8(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  unint64_t v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  uint64_t v11 = *v5;
  unint64_t v12 = sub_10014A480(a2, a3);
  *((_BYTE *)v10 + 40) = v13 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v17 = v12;
  char v18 = v13;
  sub_100129274(&qword_1002B88C8);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v16))
  {
    unint64_t v19 = sub_10014A480(a2, a3);
    if ((v18 & 1) == (v20 & 1))
    {
      unint64_t v17 = v19;
      goto LABEL_5;
    }

void sub_10014AF10(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_10014AF74(*a1, *((_BYTE *)*a1 + 40), (void **)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease(*v1, v2);
  sub_10014C6A0(v1);
}

uint64_t (*sub_10014AF48(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000LL;
  return sub_10014AF68;
}

uint64_t sub_10014AF68(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_10014AF74(uint64_t *a1, char a2, void **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(void *)((*a3)[7] + 8 * a4) = v8;
    }

    else
    {
      sub_10014ABD4(a4, a5, a6, v8, *a3);
      swift_bridgeObjectRetain(a6);
    }
  }

  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy((*a3)[6] + 16 * a4, 1LL, &type metadata for String);
    uint64_t v9 = (uint64_t)*a3;
    sub_100129274(&qword_1002B88B8);
    _NativeDictionary._delete(at:)(a4, v9);
  }

  return swift_bridgeObjectRetain(v8);
}

uint64_t sub_10014B034(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_10015781C(v4);
    *a1 = v4;
  }

  uint64_t v6 = *(void *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  sub_10014B128(v9, a2 & 1);
  return specialized ContiguousArray._endMutation()(v7);
}

unint64_t sub_10014B0B8()
{
  unint64_t result = qword_1002B88F8;
  if (!qword_1002B88F8)
  {
    uint64_t v1 = sub_100129640(255LL, &qword_1002B84D0, &OBJC_CLASS___GKGameActivityInternal_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1002B88F8);
  }

  return result;
}

uint64_t type metadata accessor for GameActivityStore()
{
  return objc_opt_self(&OBJC_CLASS___GKGameActivityStore);
}

void sub_10014B128(uint64_t *a1, char a2)
{
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if ((v4 & 0x8000000000000000LL) == 0)
    {
      if (v4) {
        sub_10014B834(0LL, v4, 1LL, a1, a2 & 1);
      }
      return;
    }

LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }

  Swift::Int v6 = v5;
  sub_1001374D0(v4 / 2);
  uint64_t v119 = v4;
  uint64_t v120 = v7;
  uint64_t v123 = v8;
  uint64_t v116 = a1;
  if (v4 <= 0)
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
    unint64_t v53 = _swiftEmptyArrayStorage[2];
LABEL_102:
    if (v53 < 2) {
      goto LABEL_116;
    }
    uint64_t v105 = *v116;
    while (1)
    {
      unint64_t v106 = v53 - 2;
      if (v53 < 2) {
        break;
      }
      if (!v105) {
        goto LABEL_148;
      }
      uint64_t v96 = (uint64_t)v11;
      uint64_t v107 = *(void *)&v11[16 * v106 + 32];
      uint64_t v108 = *(void *)&v11[16 * v53 + 24];
      sub_10014B92C( (void **)(v105 + 8 * v107),  (id *)(v105 + 8LL * *(void *)&v11[16 * v53 + 16]),  v105 + 8 * v108,  v120,  a2 & 1);
      if (v2) {
        goto LABEL_114;
      }
      if (v108 < v107) {
        goto LABEL_135;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
      {
        sub_10015770C(v96);
        uint64_t v96 = v111;
      }

      if (v106 >= *(void *)(v96 + 16)) {
        goto LABEL_136;
      }
      Swift::String v109 = (void *)(v96 + 32 + 16 * v106);
      *Swift::String v109 = v107;
      v109[1] = v108;
      unint64_t v110 = *(void *)(v96 + 16);
      if (v53 > v110) {
        goto LABEL_137;
      }
      memmove((void *)(v96 + 32 + 16 * (v53 - 1)), (const void *)(v96 + 32 + 16 * v53), 16 * (v110 - v53));
      uint64_t v11 = (char *)v96;
      *(void *)(v96 + 16) = v110 - 1;
      unint64_t v53 = v110 - 1;
      if (v110 <= 2) {
        goto LABEL_116;
      }
    }

LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }

  Swift::Int v117 = v6;
  Swift::Int v9 = 0LL;
  uint64_t v10 = *a1;
  uint64_t v115 = *a1 - 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v121 = *a1;
  while (1)
  {
    Swift::Int v12 = v9++;
    if (v9 < v4)
    {
      char v13 = v11;
      uint64_t v14 = *(void **)(v10 + 8 * v9);
      BOOL v15 = *(void **)(v10 + 8 * v12);
      sub_100129640(0LL, &qword_1002B84D0, &OBJC_CLASS___GKGameActivityInternal_ptr);
      id v16 = v14;
      id v17 = v15;
      char v18 = v17;
      if ((a2 & 1) != 0)
      {
        id v17 = v16;
        unint64_t v19 = v18;
      }

      else
      {
        unint64_t v19 = v16;
      }

      int v20 = static GKGameActivityInternal.< infix(_:_:)(v17, v19);

      Swift::Int v9 = v12 + 2;
      if (v12 + 2 < v4)
      {
        Swift::Int v21 = v12;
        uint64_t v22 = v121;
        while (1)
        {
          uint64_t v23 = v22 + 8 * v21;
          uint64_t v24 = *(void **)(v23 + 8);
          id v25 = *(id *)(v23 + 16);
          id v26 = v24;
          uint64_t v27 = v26;
          if ((a2 & 1) != 0)
          {
            id v26 = v25;
            uint64_t v28 = v27;
          }

          else
          {
            uint64_t v28 = v25;
          }

          int v29 = static GKGameActivityInternal.< infix(_:_:)(v26, v28);

          if (((v20 ^ v29) & 1) != 0) {
            break;
          }
          Swift::Int v30 = v21 + 3;
          ++v21;
          uint64_t v22 = v121;
          if (v30 >= v4)
          {
            Swift::Int v9 = v4;
            goto LABEL_18;
          }
        }

        Swift::Int v9 = v21 + 2;
      }

      uint64_t v22 = v121;
LABEL_18:
      uint64_t v11 = v13;
      if ((v20 & 1) != 0)
      {
        if (v9 < v12) {
          goto LABEL_141;
        }
        if (v12 < v9)
        {
          uint64_t v31 = (uint64_t *)(v115 + 8 * v9);
          Swift::Int v32 = v9;
          Swift::Int v33 = v12;
          uint64_t v34 = (uint64_t *)(v22 + 8 * v12);
          do
          {
            if (v33 != --v32)
            {
              if (!v22) {
                goto LABEL_147;
              }
              uint64_t v35 = *v34;
              *uint64_t v34 = *v31;
              *uint64_t v31 = v35;
            }

            ++v33;
            --v31;
            ++v34;
          }

          while (v33 < v32);
        }
      }
    }

    if (v9 < v4)
    {
      if (__OFSUB__(v9, v12)) {
        goto LABEL_139;
      }
      if (v9 - v12 < v117)
      {
        if (__OFADD__(v12, v117)) {
          goto LABEL_142;
        }
        if (v12 + v117 >= v4) {
          Swift::Int v36 = v4;
        }
        else {
          Swift::Int v36 = v12 + v117;
        }
        if (v36 < v12) {
          goto LABEL_143;
        }
        if (v9 != v36)
        {
          Swift::Int v118 = v12;
          uint64_t v114 = v11;
          sub_100129640(0LL, &qword_1002B84D0, &OBJC_CLASS___GKGameActivityInternal_ptr);
          uint64_t v37 = v121;
          uint64_t v38 = v115 + 8 * v9;
          do
          {
            Swift::Int v39 = v36;
            uint64_t v40 = *(void **)(v37 + 8 * v9);
            Swift::Int v41 = v118;
            uint64_t v42 = v38;
            while (1)
            {
              uint64_t v43 = *(void **)v42;
              id v44 = v40;
              id v45 = v43;
              uint64_t v46 = v45;
              if ((a2 & 1) != 0)
              {
                id v45 = v44;
                uint64_t v47 = v46;
              }

              else
              {
                uint64_t v47 = v44;
              }

              char v48 = static GKGameActivityInternal.< infix(_:_:)(v45, v47);

              if ((v48 & 1) == 0) {
                break;
              }
              uint64_t v37 = v121;
              if (!v121) {
                goto LABEL_145;
              }
              uint64_t v49 = *(void **)v42;
              uint64_t v40 = *(void **)(v42 + 8);
              *(void *)uint64_t v42 = v40;
              *(void *)(v42 + 8) = v49;
              v42 -= 8LL;
              if (v9 == ++v41) {
                goto LABEL_45;
              }
            }

            uint64_t v37 = v121;
LABEL_45:
            ++v9;
            v38 += 8LL;
            Swift::Int v36 = v39;
          }

          while (v9 != v39);
          Swift::Int v9 = v39;
          Swift::Int v12 = v118;
          Swift::Int v4 = v119;
          uint64_t v11 = v114;
        }
      }
    }

    if (v9 < v12) {
      goto LABEL_138;
    }
    uint64_t v50 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) != 0)
    {
      uint64_t v11 = v50;
    }

    else
    {
      sub_100157628(0, *((void *)v50 + 2) + 1LL, 1, v50);
      uint64_t v11 = v103;
    }

    unint64_t v52 = *((void *)v11 + 2);
    unint64_t v51 = *((void *)v11 + 3);
    unint64_t v53 = v52 + 1;
    uint64_t v10 = v121;
    if (v52 >= v51 >> 1)
    {
      sub_100157628(v51 > 1, v52 + 1, 1, v11);
      uint64_t v10 = v121;
      uint64_t v11 = v104;
    }

    *((void *)v11 + 2) = v53;
    uint64_t v54 = v11 + 32;
    uint64_t v55 = &v11[16 * v52 + 32];
    *(void *)uint64_t v55 = v12;
    *((void *)v55 + 1) = v9;
    if (v52) {
      break;
    }
    unint64_t v53 = 1LL;
LABEL_95:
    if (v9 >= v4) {
      goto LABEL_102;
    }
  }

  while (1)
  {
    unint64_t v56 = v53 - 1;
    if (v53 >= 4)
    {
      uint64_t v61 = &v54[2 * v53];
      uint64_t v62 = *(v61 - 8);
      uint64_t v63 = *(v61 - 7);
      BOOL v67 = __OFSUB__(v63, v62);
      uint64_t v64 = v63 - v62;
      if (v67) {
        goto LABEL_123;
      }
      uint64_t v66 = *(v61 - 6);
      uint64_t v65 = *(v61 - 5);
      BOOL v67 = __OFSUB__(v65, v66);
      uint64_t v59 = v65 - v66;
      char v60 = v67;
      if (v67) {
        goto LABEL_124;
      }
      unint64_t v68 = v53 - 2;
      os_log_type_t v69 = &v54[2 * v53 - 4];
      uint64_t v71 = *v69;
      uint64_t v70 = v69[1];
      BOOL v67 = __OFSUB__(v70, v71);
      uint64_t v72 = v70 - v71;
      if (v67) {
        goto LABEL_125;
      }
      BOOL v67 = __OFADD__(v59, v72);
      uint64_t v73 = v59 + v72;
      if (v67) {
        goto LABEL_127;
      }
      if (v73 >= v64)
      {
        uint64_t v91 = &v54[2 * v56];
        uint64_t v93 = *v91;
        uint64_t v92 = v91[1];
        BOOL v67 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v67) {
          goto LABEL_133;
        }
        BOOL v84 = v59 < v94;
        goto LABEL_84;
      }
    }

    else
    {
      if (v53 != 3)
      {
        uint64_t v85 = *((void *)v11 + 4);
        uint64_t v86 = *((void *)v11 + 5);
        BOOL v67 = __OFSUB__(v86, v85);
        uint64_t v78 = v86 - v85;
        char v79 = v67;
        goto LABEL_78;
      }

      uint64_t v58 = *((void *)v11 + 4);
      uint64_t v57 = *((void *)v11 + 5);
      BOOL v67 = __OFSUB__(v57, v58);
      uint64_t v59 = v57 - v58;
      char v60 = v67;
    }

    if ((v60 & 1) != 0) {
      goto LABEL_126;
    }
    unint64_t v68 = v53 - 2;
    uint64_t v74 = &v54[2 * v53 - 4];
    uint64_t v76 = *v74;
    uint64_t v75 = v74[1];
    BOOL v77 = __OFSUB__(v75, v76);
    uint64_t v78 = v75 - v76;
    char v79 = v77;
    if (v77) {
      goto LABEL_128;
    }
    uint64_t v80 = &v54[2 * v56];
    uint64_t v82 = *v80;
    uint64_t v81 = v80[1];
    BOOL v67 = __OFSUB__(v81, v82);
    uint64_t v83 = v81 - v82;
    if (v67) {
      goto LABEL_130;
    }
    if (__OFADD__(v78, v83)) {
      goto LABEL_132;
    }
    if (v78 + v83 >= v59)
    {
      BOOL v84 = v59 < v83;
LABEL_84:
      if (v84) {
        unint64_t v56 = v68;
      }
      goto LABEL_86;
    }

LABEL_78:
    if ((v79 & 1) != 0) {
      goto LABEL_129;
    }
    uint64_t v87 = &v54[2 * v56];
    uint64_t v89 = *v87;
    uint64_t v88 = v87[1];
    BOOL v67 = __OFSUB__(v88, v89);
    uint64_t v90 = v88 - v89;
    if (v67) {
      goto LABEL_131;
    }
    if (v90 < v78) {
      goto LABEL_95;
    }
LABEL_86:
    unint64_t v95 = v56 - 1;
    if (v56 - 1 >= v53)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }

    if (!v10) {
      goto LABEL_146;
    }
    uint64_t v96 = (uint64_t)v11;
    uint64_t v97 = &v54[2 * v95];
    uint64_t v98 = *v97;
    uint64_t v99 = &v54[2 * v56];
    uint64_t v100 = v99[1];
    sub_10014B92C((void **)(v10 + 8 * *v97), (id *)(v10 + 8LL * *v99), v10 + 8 * v100, v120, a2 & 1);
    if (v2) {
      break;
    }
    if (v100 < v98) {
      goto LABEL_120;
    }
    if (v56 > *(void *)(v96 + 16)) {
      goto LABEL_121;
    }
    *uint64_t v97 = v98;
    v54[2 * v95 + 1] = v100;
    unint64_t v102 = *(void *)(v96 + 16);
    if (v56 >= v102) {
      goto LABEL_122;
    }
    unint64_t v53 = v102 - 1;
    memmove(&v54[2 * v56], v99 + 2, 16 * (v102 - 1 - v56));
    uint64_t v11 = (char *)v96;
    *(void *)(v96 + 16) = v102 - 1;
    Swift::Int v4 = v119;
    uint64_t v10 = v121;
    if (v102 <= 2) {
      goto LABEL_95;
    }
  }

LABEL_114:
  uint64_t v112 = swift_bridgeObjectRelease(v96, v101);
  if (v119 >= -1) {
    goto LABEL_117;
  }
  __break(1u);
LABEL_116:
  uint64_t v112 = swift_bridgeObjectRelease(v11, v7);
  if (v119 >= -1)
  {
LABEL_117:
    *(void *)((v123 & 0xFFFFFFFFFFFFF8LL) + 0x10) = 0LL;
    specialized Array._endMutation()(v112);
    swift_bridgeObjectRelease(v123, v113);
    return;
  }

LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
}

void sub_10014B834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    uint64_t v7 = *a4;
    sub_100129640(0LL, &qword_1002B84D0, &OBJC_CLASS___GKGameActivityInternal_ptr);
    uint64_t v8 = v7 + 8 * v6 - 8;
    while (2)
    {
      Swift::Int v9 = *(void **)(v7 + 8 * v6);
      uint64_t v10 = a1;
      uint64_t v11 = v8;
      do
      {
        Swift::Int v12 = *(void **)v11;
        id v13 = v9;
        id v14 = v12;
        BOOL v15 = v14;
        if ((a5 & 1) != 0)
        {
          id v14 = v13;
          id v16 = v15;
        }

        else
        {
          id v16 = v13;
        }

        char v17 = static GKGameActivityInternal.< infix(_:_:)(v14, v16);

        if ((v17 & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return;
        }

        char v18 = *(void **)v11;
        Swift::Int v9 = *(void **)(v11 + 8);
        *(void *)uint64_t v11 = v9;
        *(void *)(v11 + 8) = v18;
        v11 -= 8LL;
        ++v10;
      }

      while (v6 != v10);
      ++v6;
      v8 += 8LL;
      if (v6 != a2) {
        continue;
      }
      break;
    }
  }

uint64_t sub_10014B92C(void **a1, id *a2, unint64_t a3, void **a4, char a5)
{
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  uint64_t v9 = (char *)a2 - (char *)a1;
  uint64_t v10 = a2 - a1;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = (uint64_t)(a3 - (void)a2) / 8;
  if (v10 >= v12)
  {
    sub_10016A21C(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    id v44 = a4;
    id v13 = &a4[v12];
    if (v8 >= v7 || v11 < 8)
    {
      BOOL v15 = a4;
      goto LABEL_47;
    }

    sub_100129640(0LL, &qword_1002B84D0, &OBJC_CLASS___GKGameActivityInternal_ptr);
    uint64_t v27 = (id *)(a3 - 8);
    while (1)
    {
      uint64_t v28 = v7;
      int v29 = v27 + 1;
      Swift::Int v30 = v13 - 1;
      id v45 = v28;
      Swift::Int v32 = *(v28 - 1);
      uint64_t v31 = v28 - 1;
      id v33 = *(v13 - 1);
      id v34 = v32;
      uint64_t v35 = v34;
      unint64_t v36 = (unint64_t)v13;
      if ((a5 & 1) != 0)
      {
        id v34 = v33;
        uint64_t v37 = v35;
      }

      else
      {
        uint64_t v37 = v33;
      }

      char v38 = static GKGameActivityInternal.< infix(_:_:)(v34, v37);

      if ((v38 & 1) != 0)
      {
        Swift::Int v39 = v44;
        BOOL v40 = v29 != v45 || v27 >= v45;
        uint64_t v7 = v31;
        id v13 = (void **)v36;
        if (!v40) {
          goto LABEL_42;
        }
      }

      else
      {
        BOOL v41 = v29 != (id *)v36 || (unint64_t)v27 >= v36;
        uint64_t v31 = v30;
        id v13 = v30;
        Swift::Int v39 = v44;
        uint64_t v7 = v45;
        if (!v41) {
          goto LABEL_42;
        }
      }

      *uint64_t v27 = *v31;
LABEL_42:
      --v27;
      if (v7 <= v8 || v13 <= v39)
      {
        BOOL v15 = v44;
        goto LABEL_47;
      }
    }
  }

  sub_10016A21C(a1, a2 - a1, a4);
  id v13 = &a4[v10];
  BOOL v14 = (unint64_t)v7 >= a3 || v9 < 8;
  BOOL v15 = a4;
  if (!v14)
  {
    sub_100129640(0LL, &qword_1002B84D0, &OBJC_CLASS___GKGameActivityInternal_ptr);
    do
    {
      unint64_t v16 = (unint64_t)v13;
      char v17 = *v15;
      id v18 = *v7;
      id v19 = v17;
      int v20 = v19;
      if ((a5 & 1) != 0)
      {
        id v19 = v18;
        Swift::Int v21 = v20;
      }

      else
      {
        Swift::Int v21 = v18;
      }

      char v22 = static GKGameActivityInternal.< infix(_:_:)(v19, v21);

      if ((v22 & 1) != 0)
      {
        uint64_t v23 = v7;
        BOOL v24 = v8 == v7++;
      }

      else
      {
        uint64_t v23 = v15;
        BOOL v24 = v8 == v15++;
      }

      id v13 = (void **)v16;
      if (!v24) {
        *uint64_t v8 = *v23;
      }
      ++v8;
    }

    while ((unint64_t)v15 < v16 && (unint64_t)v7 < a3);
  }

  uint64_t v7 = v8;
LABEL_47:
  sub_10016A21C(v15, v13 - v15, v7);
  return 1LL;
}

uint64_t sub_10014BB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014BBB4( a1,  a2,  a3,  (void (*)(uint64_t, void, uint64_t))sub_10016A74C,  &qword_1002B8990,  &qword_1002B8988,  (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_100139FE8);
}

uint64_t sub_10014BBB4( uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void, uint64_t), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = result;
  unint64_t v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v28 = a3;
    }
    else {
      uint64_t v28 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1001296D0();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v28);
    unint64_t result = sub_10012B950(v15, v29);
    if (!v15) {
      return a3;
    }
  }

  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v15) {
      return a3;
    }
  }

  if (v13)
  {
    if (v14)
    {
      if (a3 < 0) {
        uint64_t v16 = a3;
      }
      else {
        uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_1001296D0();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v16);
      unint64_t result = sub_10012B950(v17, v18);
      if (v17 <= a2)
      {
        if (v15 >= 1)
        {
          sub_10014C510(a5, a6);
          uint64_t v20 = v19;
          sub_1001296D0();
          for (uint64_t i = 0LL; i != v15; ++i)
          {
            uint64_t v22 = sub_100129274(a6);
            uint64_t v23 = (uint64_t (*)(_BYTE *, void))a7(v30, i, a3, v22, v20);
            id v25 = *v24;
            uint64_t v26 = v23(v30, 0LL);
            *(void *)(v13 + 8 * i) = v25;
          }

          sub_10012B950(v26, v27);
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        a4((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10), v13);
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10014BD30(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    unint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_10014BF2C(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    unint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_10014C128()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10014C154()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  Swift::Int v4 = (void *)swift_task_alloc(dword_1002B8934);
  *(void *)(v1 + 16) = v4;
  *Swift::Int v4 = v1;
  v4[1] = sub_10014C54C;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1002B8930 + dword_1002B8930))(v2, v3);
}

uint64_t sub_10014C1BC()
{
  uint64_t v1 = (void *)sub_10014C718();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10014C568(v1, (uint64_t)sub_10014C54C);
  return sub_10014C558(v2, v3, v4, v5);
}

uint64_t sub_10014C200()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10014C234()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(_BYTE *)(v0 + 24);
  Swift::Int v5 = *(void **)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc(dword_1002B8954);
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10014C54C;
  return ((uint64_t (*)(uint64_t, char, void *, uint64_t))((char *)&dword_1002B8950 + dword_1002B8950))( v2,  v3,  v5,  v4);
}

uint64_t sub_10014C2B4()
{
  uint64_t v1 = (void *)sub_10014C718();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10014C568(v1, (uint64_t)sub_10014461C);
  return sub_10014C558(v2, v3, v4, v5);
}

uint64_t sub_10014C2FC()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10014C330()
{
  uint64_t v1 = (void *)sub_10014C718();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10014C568(v1, (uint64_t)sub_10014C54C);
  return sub_10014C558(v2, v3, v4, v5);
}

uint64_t sub_10014C374(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  uint64_t *v1 = v3;
  if (!(_DWORD)result || v3 < 0 || (v3 & 0x4000000000000000LL) != 0)
  {
    uint64_t result = sub_10014C470(v3);
    uint64_t v3 = result;
    uint64_t *v1 = result;
  }

  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v6 - 1;
    unint64_t v8 = v6 - 1 - a1;
    uint64_t v9 = v5 + 8 * a1;
    uint64_t v10 = *(void *)(v9 + 32);
    uint64_t v11 = sub_10016A21C(v9 + 40, v8, v9 + 32);
    *(void *)((*v1 & 0xFFFFFFFFFFFFF8LL) + 0x10) = v7;
    specialized Array._endMutation()(v11);
    return v10;
  }

  return result;
}

uint64_t sub_10014C404()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  *uint64_t v0 = v1;
  if (!(_DWORD)result || v1 < 0 || (v1 & 0x4000000000000000LL) != 0)
  {
    uint64_t result = sub_10014C470(v1);
    uint64_t v1 = result;
    *uint64_t v0 = result;
  }

  uint64_t v3 = v1 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 8 * v5 + 0x20);
    *(void *)(v3 + 16) = v5;
    specialized Array._endMutation()(result);
    return v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10014C470(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1, v5);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

void sub_10014C4D8(unint64_t *a1)
{
  if (!*a1)
  {
    type metadata accessor for NWEndpoint(255LL);
    uint64_t v2 = sub_10014C6E8();
    atomic_store(swift_getWitnessTable(v2, v3), a1);
  }

  sub_100132514();
}

void sub_10014C510(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_1001292F8(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }

  sub_100132514();
}

uint64_t sub_10014C550(uint64_t a1, uint64_t a2)
{
  return swift_task_switch(a1, a2, 0LL);
}

uint64_t sub_10014C558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_10014C568@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10014C588()
{
  return swift_beginAccess(*(void *)(v0 + 88) + 112LL, v0 + 48, 33LL, 0LL);
}

uint64_t sub_10014C5B0(uint64_t a1)
{
  return swift_beginAccess(a1, v1, 33LL, 0LL);
}

void sub_10014C5C0(uint64_t a1)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((a1 - 32) / 16);
}

  ;
}

uint64_t sub_10014C604(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10014C614(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10014C620()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10014C638@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) |= 1LL << result;
  return result;
}

unint64_t sub_10014C650(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1LL << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  return result;
}

void (*sub_10014C680())(uint64_t *a1)
{
  return sub_1001497A4(v1, v2, v0);
}

unint64_t sub_10014C694()
{
  return sub_10014A480(v1, v0);
}

void sub_10014C6A0(void *a1)
{
}

uint64_t sub_10014C6A8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, 0LL);
}

uint64_t sub_10014C6B0(uint64_t a1, ...)
{
  return String.hash(into:)(va, v2, v1);
}

uint64_t sub_10014C6C0()
{
  return sub_100132050(v0);
}

uint64_t sub_10014C6E8()
{
  return v0;
}

uint64_t sub_10014C6F4(uint64_t a1)
{
  return swift_allocObject(a1, 16 * v1 + 32, 7LL);
}

void *sub_10014C704(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, *(void *)(v1 + 40));
}

void sub_10014C710(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 16) = a2;
}

uint64_t sub_10014C718()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_10014C720()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0);
}

void sub_10014C72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v21, *(void *)(a3 + 40));
    String.hash(into:)(v21, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_10013A754();
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_10014CCEC(*v11, v12) & 1) == 0)
      {
        uint64_t v14 = ~v7;
        uint64_t v15 = (v8 + 1) & v14;
        sub_10013A754();
        if ((v16 & 1) != 0)
        {
          do
          {
            int64_t v17 = (uint64_t *)(v10 + 16 * v15);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((sub_10014CCEC(*v17, v18) & 1) != 0) {
              break;
            }
            uint64_t v15 = (v15 + 1) & v14;
            sub_10013A754();
          }

          while ((v20 & 1) != 0);
        }
      }
    }
  }

Swift::Int sub_10014C824(uint64_t a1, uint64_t a2)
{
  Swift::Int result = sub_10017637C((Swift::Int)&off_100273770, a2);
  qword_1002B8998 = result;
  return result;
}

id NetworkRequestEligibiltyChecker.__allocating_init(hasAcknowledgedLatestGDPR:alwaysAllowedBagKeysObject:isAppUnlistedAndDisallowed:)( char a1, uint64_t a2, char a3)
{
  id v7 = objc_allocWithZone(v3);
  return NetworkRequestEligibiltyChecker.init(hasAcknowledgedLatestGDPR:alwaysAllowedBagKeysObject:isAppUnlistedAndDisallowed:)( a1,  a2,  a3);
}

id NetworkRequestEligibiltyChecker.init(hasAcknowledgedLatestGDPR:alwaysAllowedBagKeysObject:isAppUnlistedAndDisallowed:)( char a1, uint64_t a2, char a3)
{
  if (v17)
  {
    id v7 = v3;
    uint64_t v8 = sub_100129274(&qword_1002B8E80);
    if ((swift_dynamicCast(&v14, v16, (char *)&type metadata for Any + 8, v8, 6LL) & 1) != 0)
    {
      uint64_t v9 = sub_100135FB4(v14);
      v7[OBJC_IVAR___GKNetworkRequestEligibilityChecker_hasAcknowledgedLatestGDPR] = a1 & 1;
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v10 = v3;
    sub_100149210((uint64_t)v16);
  }

  v3[OBJC_IVAR___GKNetworkRequestEligibilityChecker_hasAcknowledgedLatestGDPR] = a1 & 1;
  if (qword_1002B7EE8 != -1) {
    swift_once(&qword_1002B7EE8, sub_10014C824);
  }
  uint64_t v9 = swift_bridgeObjectRetain(qword_1002B8998);
LABEL_8:
  *(void *)&v3[OBJC_IVAR___GKNetworkRequestEligibilityChecker_alwaysAllowedBagKeys] = v9;
  v3[OBJC_IVAR___GKNetworkRequestEligibilityChecker_isAppUnlistedAndDisallowed] = a3 & 1;

  uint64_t v11 = (objc_class *)type metadata accessor for NetworkRequestEligibiltyChecker();
  v15.receiver = v3;
  v15.Class super_class = v11;
  id v12 = objc_msgSendSuper2(&v15, "init");
  sub_100149210(a2);
  return v12;
}

uint64_t sub_10014C9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B8E90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NetworkRequestEligibiltyChecker()
{
  return objc_opt_self(&OBJC_CLASS___GKNetworkRequestEligibilityChecker);
}

id NetworkRequestEligibiltyChecker.verifyEligibility(bagKey:)(uint64_t a1, uint64_t a2)
{
  if ((v3 & 1) == 0
    && (*(_BYTE *)(v2 + OBJC_IVAR___GKNetworkRequestEligibilityChecker_hasAcknowledgedLatestGDPR) & 1) == 0)
  {
    return [(id)objc_opt_self(NSError) gkPrivacyNoticeNotAcceptedError];
  }

  if (*(_BYTE *)(v2 + OBJC_IVAR___GKNetworkRequestEligibilityChecker_isAppUnlistedAndDisallowed) != 1) {
    return 0LL;
  }
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___NSError);
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  return sub_10014CC64(37LL, v5, v4);
}

void NetworkRequestEligibiltyChecker.init()()
{
}

id NetworkRequestEligibiltyChecker.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for NetworkRequestEligibiltyChecker();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_10014CC64(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2, v7);
  id v8 = [a3 userErrorForCode:a1 userInfo:isa];

  return v8;
}

uint64_t sub_10014CCEC(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

void sub_10014CCFC(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  id v8 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v7 << 6);
      goto LABEL_22;
    }

    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v11 >= v6) {
      goto LABEL_30;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v7;
    if (!v12)
    {
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_30;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v7);
      if (!v12)
      {
        int64_t v7 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_30;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v7);
        if (!v12)
        {
          int64_t v7 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_30;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v7);
          if (!v12) {
            break;
          }
        }
      }
    }

void *sub_10014CF3C(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease(a2, a2);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_1001375E4(0LL, v3, 0);
  unint64_t v5 = _swiftEmptyArrayStorage;
  int64_t v6 = (void *)(a1 + 40);
  do
  {
    uint64_t v8 = *(v6 - 1);
    int64_t v7 = (void *)*v6;
    if (*(void *)(a2 + 16))
    {
      swift_bridgeObjectRetain_n(*v6, 2LL);
      unint64_t v9 = sub_10014A480(v8, (uint64_t)v7);
      if ((v10 & 1) != 0)
      {
        sub_100129604(*(void *)(a2 + 56) + 32 * v9, (uint64_t)&v23);
      }

      else
      {
        __int128 v23 = 0u;
        __int128 v24 = 0u;
      }

      swift_bridgeObjectRelease(v7, v10);
      if (*((void *)&v24 + 1))
      {
        sub_1001295F4(&v23, v25);
        *(void *)&__int128 v23 = 0LL;
        *((void *)&v23 + 1) = 0xE000000000000000LL;
        v11._uint64_t countAndFlagsBits = v8;
        v11._object = v7;
        String.append(_:)(v11);
        v12._uint64_t countAndFlagsBits = 61LL;
        v12._object = (void *)0xE100000000000000LL;
        String.append(_:)(v12);
        _print_unlocked<A, B>(_:_:)(v25, &v23, (char *)&type metadata for Any + 8);
        uint64_t v13 = *((void *)&v23 + 1);
        uint64_t v14 = v23;
        sub_100129678(v25);
        swift_bridgeObjectRelease(v7, v15);
        goto LABEL_11;
      }
    }

    else
    {
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      swift_bridgeObjectRetain(v7);
    }

    sub_100131288((uint64_t)&v23, &qword_1002B8E90);
    *(void *)&v25[0] = v8;
    *((void *)&v25[0] + 1) = v7;
    swift_bridgeObjectRetain(v7);
    v17._uint64_t countAndFlagsBits = 1818848829LL;
    v17._object = (void *)0xE400000000000000LL;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v7, v18);
    uint64_t v13 = *((void *)&v25[0] + 1);
    uint64_t v14 = *(void *)&v25[0];
LABEL_11:
    uint64_t v26 = v5;
    unint64_t v20 = v5[2];
    unint64_t v19 = v5[3];
    if (v20 >= v19 >> 1)
    {
      sub_1001375E4((char *)(v19 > 1), v20 + 1, 1);
      unint64_t v5 = v26;
    }

    v6 += 2;
    v5[2] = v20 + 1;
    uint64_t v21 = &v5[2 * v20];
    v21[4] = v14;
    void v21[5] = v13;
    --v3;
  }

  while (v3);
  swift_bridgeObjectRelease(a2, v16);
  return v5;
}

uint64_t sub_10014D158()
{
  uint64_t v0 = sub_100129274(&qword_1002B91B8);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1001F3480;
  unint64_t v2 = sub_1001589EC();
  *(void *)(v1 + 32) = &type metadata for EntityCacheSchemaV1;
  *(void *)(v1 + 40) = v2;
  return v1;
}

void *sub_10014D1AC()
{
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10014D1C0()
{
  uint64_t v0 = sub_100129274(&qword_1002B8E78);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1001F3480;
  uint64_t v2 = type metadata accessor for EntityCacheSchemaV1.CachedEntity(0LL);
  sub_100158464((uint64_t)&unk_1002B8E50);
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  return v1;
}

uint64_t sub_10014D230()
{
  return Schema.Version.init(_:_:_:)(1LL, 0LL, 0LL);
}

uint64_t sub_10014D240()
{
  return sub_10014D2EC();
}

uint64_t sub_10014D24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100159050();
  v9[0] = a1;
  v9[1] = a2;
  uint64_t v6 = sub_100159038(v5, (uint64_t)v9, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_1001322A0(v6, v7);
  sub_10013A738();
  return sub_100129678(v10);
}

uint64_t sub_10014D2E0()
{
  return sub_10014D2EC();
}

uint64_t sub_10014D2EC()
{
  uint64_t v10 = v1;
  uint64_t v11 = v2;
  v9[0] = v0;
  uint64_t KeyPath = swift_getKeyPath(v3);
  sub_100158464((uint64_t)&unk_1002B8E30);
  ((void (*)(void *, uint64_t, uint64_t))ObservationRegistrar.access<A, B>(_:keyPath:))(v9, KeyPath, v5);
  swift_release(KeyPath);
  uint64_t v6 = sub_100159050();
  sub_100158464((uint64_t)&unk_1002B8E50);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, void *))PersistentModel.getValue<A>(forKey:))( v9,  v6,  v7,  &protocol witness table for String);
  sub_10013A738();
  return v9[0];
}

uint64_t sub_10014D3B4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = v12;
  uint64_t v6 = v13;
  sub_10012A960(v11, v12);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F3D60);
  v10[0] = a1;
  v10[1] = a2;
  unint64_t v8 = sub_1001584C8();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, v10, &type metadata for Data, v8, v5, v6);
  swift_release(KeyPath);
  sub_100135158(a1, a2);
  return sub_100129678(v11);
}

uint64_t sub_10014D460()
{
  uint64_t v8 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F3D60);
  sub_100158464((uint64_t)&unk_1002B8E30);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1001F3D60);
  sub_100158464((uint64_t)&unk_1002B8E50);
  uint64_t v5 = v4;
  unint64_t v6 = sub_100156784();
  PersistentModel.getValue<A>(forKey:)(&v8, v3, v5, v6);
  swift_release(v3);
  return v8;
}

void sub_10014D540( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_10014D54C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100158FCC();
  sub_100158464((uint64_t)&unk_1002B9110);
  uint64_t v4 = sub_100144870();
  sub_100159038(v4, v5, v3, v6);
  sub_10013A738();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return sub_100129678(v8);
}

void sub_10014D604( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void sub_10014D610( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  a17 = v19;
  a18 = v20;
  uint64_t v22 = v21;
  __int128 v24 = v23;
  a10 = v18;
  uint64_t KeyPath = swift_getKeyPath(v21);
  sub_100158FC4((uint64_t)&unk_1002B8E30);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&a10, KeyPath, v26);
  swift_release(KeyPath);
  uint64_t v27 = swift_getKeyPath(v22);
  sub_100158FC4((uint64_t)&unk_1002B8E50);
  uint64_t v29 = v28;
  sub_100158464((uint64_t)&unk_1002B8E58);
  PersistentModel.getValue<A>(forKey:)(v24, v27, v29, v30);
  sub_10014510C();
  sub_100158BC0();
}

uint64_t sub_10014D6E0()
{
  uint64_t v52 = 0LL;
  uint64_t v53 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(78LL);
  v0._object = (void *)0x800000010024CC30LL;
  v0._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = sub_10014D240();
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object, v3);
  v4._uint64_t countAndFlagsBits = 0x203A6469202CLL;
  v4._object = (void *)0xE600000000000000LL;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = sub_10014D2E0();
  uint64_t v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6, v7);
  v8._uint64_t countAndFlagsBits = 0x632065747962202CLL;
  v8._object = (void *)0xEE00203A746E756FLL;
  String.append(_:)(v8);
  uint64_t v9 = sub_10014D460();
  unint64_t v11 = v10;
  uint64_t v12 = Data.count.getter();
  sub_100135158(v9, v11);
  uint64_t v51 = v12;
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14, v15);
  v16._uint64_t countAndFlagsBits = 0x646568636163202CLL;
  v16._object = (void *)0xED0000203A746120LL;
  String.append(_:)(v16);
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v20 = __chkstk_darwin(v17);
  unint64_t v21 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  sub_10014D540( v20,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v50,  v12,  0LL,  0xE000000000000000LL,  v54,  v55,  v56,  v57,  v58,  v59);
  sub_100158464((uint64_t)&unk_1002B8E48);
  uint64_t v30 = v29;
  v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v29);
  Swift::Int v32 = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v32, v33);
  id v34 = *(void (**)(char *, uint64_t))(v18 + 8);
  v34((char *)&v50 - v21, v17);
  v35._uint64_t countAndFlagsBits = 0x657269707865202CLL;
  v35._object = (void *)0xED0000203A746120LL;
  String.append(_:)(v35);
  uint64_t v37 = __chkstk_darwin(v36);
  sub_10014D604(v37, v38, v39, v40, v41, v42, v43, v44, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59);
  v45._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v30);
  uint64_t v46 = v45._object;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v46, v47);
  v34((char *)&v50 - v21, v17);
  v48._uint64_t countAndFlagsBits = 41LL;
  v48._object = (void *)0xE100000000000000LL;
  String.append(_:)(v48);
  return v52;
}

BOOL sub_10014D96C()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = __chkstk_darwin(v0);
  unint64_t v4 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v5 = static Date.now.getter(v3);
  uint64_t v6 = __chkstk_darwin(v5);
  sub_10014D604( v6,  v7,  v8,  v9,  v10,  v11,  v12,  v13,  var40[0],  var40[1],  var40[2],  var40[3],  var40[4],  var40[5],  var40[6],  var40[7],  var40[8],  var40[9]);
  sub_100158464((uint64_t)&unk_1002B90B8);
  char v15 = dispatch thunk of static Comparable.< infix(_:_:)((char *)var40 - v4, (char *)var40 - v4, v0, v14);
  Swift::String v16 = *(void (**)(char *, uint64_t))(v1 + 8);
  v16((char *)var40 - v4, v0);
  v16((char *)var40 - v4, v0);
  return (v15 & 1) == 0;
}

void *sub_10014DA64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v16 = *v8;
  v9[5] = sub_100129274(&qword_1002B9128);
  sub_100158464((uint64_t)&unk_1002B8E50);
  uint64_t v18 = v17;
  v34[0] = v16;
  v34[1] = v16;
  v34[2] = v17;
  v34[3] = v17;
  v9[6] = swift_getOpaqueTypeConformance2( v34,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10015848C(v9 + 2);
  uint64_t v19 = static PersistentModel.createBackingData<A>()(v16, v16, v18, v18);
  ObservationRegistrar.init()(v19);
  sub_10014D24C(a1, a2, (uint64_t)(v9 + 2));
  sub_10014D24C(a3, a4, (uint64_t)(v9 + 2));
  uint64_t v30 = a5;
  unint64_t v31 = a6;
  sub_10013593C(a5, a6);
  sub_10014D3B4(a5, a6, (uint64_t)(v9 + 2));
  uint64_t v20 = type metadata accessor for Date(0LL);
  unint64_t v21 = *(void **)(v20 - 8);
  uint64_t v22 = v21[8];
  __chkstk_darwin(v20);
  unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v24 = (void (*)(char *, uint64_t, uint64_t))v21[2];
  uint64_t v25 = v32;
  v24((char *)&v30 - v23, v32, v20);
  uint64_t v26 = sub_10014D54C((uint64_t)&v30 - v23, (uint64_t)(v9 + 2));
  __chkstk_darwin(v26);
  uint64_t v27 = v33;
  v24((char *)&v30 - v23, v33, v20);
  sub_10014D54C((uint64_t)&v30 - v23, (uint64_t)(v9 + 2));
  sub_100135158(v30, v31);
  uint64_t v28 = (void (*)(uint64_t, uint64_t))v21[1];
  v28(v27, v20);
  v28(v25, v20);
  return v9;
}

uint64_t sub_10014DC84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 16;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_10012D388(v3, a1);
}

uint64_t sub_10014DCCC(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + 16);
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_100129678(v3);
  sub_100156808(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t sub_10014DD24()
{
  uint64_t v0 = sub_100129274(&qword_1002B8E70);
  uint64_t v1 = *(void *)(type metadata accessor for Schema.PropertyMetadata(0LL) - 8);
  uint64_t v2 = swift_allocObject( v0,  ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
       + 5LL * *(void *)(v1 + 72),
         *(unsigned __int8 *)(v1 + 80) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_1001F3910;
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F3DB0);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v11 = 0LL;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x79654B676162LL,  0xE600000000000000LL,  KeyPath,  &v12,  &v9);
  uint64_t v4 = swift_getKeyPath(&unk_1001F3D88);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v11 = 0LL;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(25705LL, 0xE200000000000000LL, v4, &v12, &v9);
  uint64_t v5 = swift_getKeyPath(&unk_1001F3D60);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v11 = 0LL;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1635017060LL, 0xE400000000000000LL, v5, &v12, &v9);
  uint64_t v6 = swift_getKeyPath(&unk_1001F3D38);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v11 = 0LL;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x7441646568636163LL,  0xE800000000000000LL,  v6,  &v12,  &v9);
  uint64_t v7 = swift_getKeyPath(&unk_1001F3D10);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v11 = 0LL;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x4173657269707865LL,  0xE900000000000074LL,  v7,  &v12,  &v9);
  return v2;
}

void *sub_10014DEF8(void *a1)
{
  return sub_10014DF30(a1);
}

void *sub_10014DF30(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  v2[5] = sub_100129274(&qword_1002B9128);
  sub_100158464((uint64_t)&unk_1002B8E50);
  uint64_t v6 = v5;
  *(void *)&__int128 v10 = v4;
  *((void *)&v10 + 1) = v4;
  uint64_t v11 = v5;
  uint64_t v12 = v5;
  v2[6] = swift_getOpaqueTypeConformance2( &v10,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10015848C(v2 + 2);
  uint64_t v7 = static PersistentModel.createBackingData<A>()(v4, v4, v6, v6);
  ObservationRegistrar.init()(v7);
  sub_10012D388((uint64_t)a1, (uint64_t)&v10);
  swift_beginAccess(v2 + 2, v9, 33LL, 0LL);
  sub_100129678(v2 + 2);
  sub_100156808(&v10, (uint64_t)(v2 + 2));
  swift_endAccess(v9);
  sub_100129678(a1);
  return v2;
}

uint64_t sub_10014E038()
{
  uint64_t v1 = (char *)v0
     + OBJC_IVAR____TtCV14GameDaemonCoreP33_1FC4D10440B9DF42E57D244557C7E23B19EntityCacheSchemaV112CachedEntity___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_10014E090()
{
  return type metadata accessor for EntityCacheSchemaV1.CachedEntity(0LL);
}

uint64_t type metadata accessor for EntityCacheSchemaV1.CachedEntity(uint64_t a1)
{
  uint64_t result = qword_1002B8A18;
  if (!qword_1002B8A18) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EntityCacheSchemaV1.CachedEntity);
  }
  return result;
}

uint64_t sub_10014E0D0(uint64_t a1)
{
  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = "(";
  uint64_t result = type metadata accessor for ObservationRegistrar(319LL);
  if (v3 <= 0x3F)
  {
    v4[6] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10014E15C()
{
  return sub_10014D6E0();
}

uint64_t sub_10014E190()
{
  v1._uint64_t countAndFlagsBits = 0x4564656863746546LL;
  v1._object = (void *)0xEE0020797469746ELL;
  String.append(_:)(v1);
  uint64_t v2 = sub_100129274(&qword_1002B8F70);
  sub_100158FD4( v2,  v3,  v2,  (uint64_t)&type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v4._uint64_t countAndFlagsBits = 0x697078457369202CLL;
  v4._object = (void *)0xED0000203A646572LL;
  String.append(_:)(v4);
  if (*(_BYTE *)(v0 + OBJC_IVAR___GKFetchedEntity_isExpired)) {
    uint64_t v5 = 1702195828LL;
  }
  else {
    uint64_t v5 = 0x65736C6166LL;
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR___GKFetchedEntity_isExpired)) {
    unint64_t v6 = 0xE400000000000000LL;
  }
  else {
    unint64_t v6 = 0xE500000000000000LL;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  sub_10012B950(v8, v9);
  return v11;
}

id sub_10014E290(uint64_t a1, char a2)
{
  uint64_t v5 = (objc_class *)sub_10013A730();
  *(void *)&v2[OBJC_IVAR___GKFetchedEntity_entity] = a1;
  v2[OBJC_IVAR___GKFetchedEntity_isExpired] = a2;
  v7.receiver = v2;
  v7.Class super_class = v5;
  return objc_msgSendSuper2(&v7, "init");
}

void sub_10014E2F0()
{
}

uint64_t type metadata accessor for FetchedEntity()
{
  return objc_opt_self(&OBJC_CLASS___GKFetchedEntity);
}

uint64_t sub_10014E350()
{
  uint64_t result = sub_10014E36C();
  qword_1002B89E0 = result;
  return result;
}

uint64_t sub_10014E36C()
{
  uint64_t v0 = sub_100129274(&qword_1002B83E0);
  uint64_t v1 = swift_allocObject(v0, 40LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1001F3480;
  *(void *)(v1 + 3sub_100129678(v0 + 2) = sub_100129640(0LL, &qword_1002B9150, &OBJC_CLASS___GKInternalRepresentation_ptr);
  id v2 = [(id)objc_opt_self(GKInternalRepresentation) secureCodedJsonTypes];
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10014CCFC(v3);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease(v3, v6);
  sub_100139F14(v5);
  return v1;
}

void *sub_10014E444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)&__int128 v96 = a3;
  uint64_t v9 = (void *)type metadata accessor for Logger(0LL);
  uint64_t v10 = *(v9 - 1);
  __chkstk_darwin(v9);
  unint64_t v95 = (char *)v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for ModelConfiguration.CloudKitDatabase(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = type metadata accessor for ModelConfiguration(0LL);
  uint64_t v15 = *(void *)(v98 - 8);
  uint64_t v16 = __chkstk_darwin(v98);
  uint64_t v93 = (char *)v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v86 - v19;
  uint64_t v94 = v10;
  if ((a5 & 1) != 0)
  {
    swift_bridgeObjectRelease(a4, v18);
    swift_bridgeObjectRelease(a2, v21);
    ModelConfiguration.init(isStoredInMemoryOnly:)(1LL);
    goto LABEL_6;
  }

  uint64_t v88 = v14;
  uint64_t v90 = (char *)v86 - v19;
  uint64_t v91 = v15;
  uint64_t v92 = v9;
  uint64_t v9 = (void *)type metadata accessor for URL(0LL);
  uint64_t v89 = (os_log_s *)*(v9 - 1);
  uint64_t v22 = *((void *)v89 + 8);
  __chkstk_darwin(v9);
  unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v87 = (char *)v86 - v23;
  uint64_t v24 = (void *)objc_opt_self(&OBJC_CLASS___GKClientProxy);
  id v25 = [(id)objc_opt_self(NSFileManager) defaultManager];
  id v26 = sub_1001848EC(a1, a2, v96, a4, 0xD000000000000026LL, 0x800000010024CE70LL, (uint64_t)v25, v24);

  uint64_t v27 = sub_100129274(&qword_1002B9D00);
  uint64_t v28 = __chkstk_darwin(v27);
  unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  unint64_t v31 = (char *)v86 - v30;
  if (!v26)
  {
    sub_1001291F8((uint64_t)v86 - v30, 1LL, 1LL, (uint64_t)v9);
    goto LABEL_11;
  }

  __chkstk_darwin(v28);
  uint64_t v32 = (char *)v86 - v23;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);

  uint64_t v33 = v89;
  id v34 = (void (*)(char *, char *, void *))*((void *)v89 + 4);
  v34(v31, v32, v9);
  sub_1001291F8((uint64_t)v31, 0LL, 1LL, (uint64_t)v9);
  if (sub_10012B4E8((uint64_t)v31, 1LL, (uint64_t)v9) == 1)
  {
LABEL_11:
    sub_100131288((uint64_t)v31, &qword_1002B9D00);
    unint64_t v81 = sub_100157E98();
    uint64_t v82 = swift_allocError(&type metadata for EntityCacheError, v81, 0LL, 0LL);
    *uint64_t v83 = 0x8000000000000000LL;
    swift_willThrow(v82);
    return v9;
  }

  Swift::String v35 = v87;
  uint64_t v36 = ((uint64_t (*)(char *, char *, void *))v34)(v87, v31, v9);
  __chkstk_darwin(v36);
  uint64_t v37 = (char *)v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = (*((uint64_t (**)(char *, char *, void *))v33 + 2))(v37, v35, v9);
  uint64_t v39 = v88;
  static ModelConfiguration.CloudKitDatabase.none.getter(v38);
  uint64_t v20 = v90;
  ModelConfiguration.init(_:schema:url:allowsSave:cloudKitDatabase:)(0LL, 0LL, 0LL, v37, 1LL, v39);
  (*((void (**)(char *, void *))v33 + 1))(v35, v9);
  uint64_t v15 = v91;
  uint64_t v9 = v92;
LABEL_6:
  type metadata accessor for ModelContainer(0LL);
  uint64_t v40 = sub_100129274(&qword_1002B8E78);
  uint64_t v41 = swift_allocObject(v40, 48LL, 7LL);
  __int128 v96 = xmmword_1001F3480;
  *(_OWORD *)(v41 + 16) = xmmword_1001F3480;
  uint64_t v42 = type metadata accessor for EntityCacheSchemaV1.CachedEntity(0LL);
  sub_100158464((uint64_t)&unk_1002B8E50);
  *(void *)(v41 + 3sub_100129678(v0 + 2) = v42;
  *(void *)(v41 + 40) = v43;
  unint64_t v44 = sub_100157ED4();
  uint64_t v45 = sub_100129274(&qword_1002B8FB0);
  uint64_t v46 = *(void *)(v15 + 72);
  uint64_t v47 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v48 = v15;
  uint64_t v49 = (v47 + 32) & ~v47;
  uint64_t v50 = swift_allocObject(v45, v49 + v46, v47 | 7);
  *(_OWORD *)(v50 + 16) = v96;
  uint64_t v51 = v50 + v49;
  uint64_t v52 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 16);
  uint64_t v53 = v98;
  v52(v51, v20, v98);
  uint64_t v54 = v97;
  uint64_t v55 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)( v41,  &type metadata for EntityCacheMigrationPlan,  v44,  v50);
  if (v54)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v53);
  }

  else
  {
    uint64_t v56 = v55;
    uint64_t v91 = v48;
    uint64_t v92 = v9;
    uint64_t v57 = type metadata accessor for EntityCache();
    swift_allocObject(v57, 40LL, 7LL);
    uint64_t v58 = swift_retain(v56);
    uint64_t v97 = v56;
    uint64_t v9 = sub_1001510DC(v58);
    uint64_t v59 = v95;
    static GKLog.cache.getter(v9);
    char v60 = v93;
    uint64_t v61 = ((uint64_t (*)(char *, char *, uint64_t))v52)(v93, v20, v53);
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.debug.getter(v62);
    int v64 = v63;
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v65 = swift_slowAlloc(22LL, -1LL);
      uint64_t v89 = v62;
      uint64_t v66 = v65;
      *(void *)&__int128 v96 = swift_slowAlloc(64LL, -1LL);
      uint64_t v101 = v96;
      *(_DWORD *)uint64_t v66 = 136315394;
      LODWORD(v88) = v64;
      uint64_t v99 = sub_100135074(0xD000000000000020LL, 0x800000010024CEA0LL, &v101);
      uint64_t v87 = (char *)&v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100);
      *(_WORD *)(v66 + 1sub_100129678(v0 + 2) = 2080;
      v86[2] = v66 + 14;
      uint64_t v67 = type metadata accessor for URL(0LL);
      v86[1] = v86;
      uint64_t v90 = v20;
      uint64_t v68 = *(void *)(v67 - 8);
      uint64_t v69 = __chkstk_darwin(v67);
      uint64_t v71 = (char *)v86 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v72 = ModelConfiguration.url.getter(v69);
      uint64_t v73 = URL.absoluteString.getter(v72);
      unint64_t v75 = v74;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v71, v67);
      uint64_t v99 = sub_100135074(v73, v75, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v87);
      swift_bridgeObjectRelease(v75, v76);
      BOOL v77 = *(void (**)(char *, uint64_t))(v91 + 8);
      uint64_t v78 = v98;
      v77(v60, v98);
      os_log_t v79 = v89;
      _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v88, "%s initialized at: %s", (uint8_t *)v66, 0x16u);
      uint64_t v80 = v96;
      swift_arrayDestroy(v96, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_slowDealloc(v66, -1LL, -1LL);
      swift_release(v97);

      (*(void (**)(char *, void *))(v94 + 8))(v95, v92);
      v77(v90, v78);
    }

    else
    {

      uint64_t v85 = *(void (**)(char *, uint64_t))(v91 + 8);
      v85(v60, v53);
      swift_release(v97);
      (*(void (**)(char *, void *))(v94 + 8))(v59, v92);
      v85(v20, v53);
    }
  }

  return v9;
}

uint64_t sub_10014EBA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = static GKLog.cache.getter(v4);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v13 = sub_100135074(0xD000000000000020LL, 0x800000010024CEA0LL, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s is deinitializing", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_unknownObjectRelease(*(void *)(v1 + 16));
  swift_release(*(void *)(v1 + 32));
  return v1;
}

uint64_t sub_10014ED40()
{
  uint64_t v0 = sub_10014EBA0();
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t sub_10014ED5C(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[8] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v3[9] = swift_task_alloc(v6);
  v3[10] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for EntityCache();
  v3[11] = v7;
  sub_100158464((uint64_t)&unk_1002B8E20);
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  return swift_task_switch(sub_10014EE10, v9, v10);
}

uint64_t sub_10014EE10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28)
{
  a27 = v29;
  a28 = v30;
  a26 = v28;
  unint64_t v31 = v28[5];
  unint64_t v32 = (*(void *)(*(void *)(sub_100129274(&qword_1002B9038) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v33 = swift_task_alloc(v32);
  if (v31)
  {
    id v34 = v28 + 2;
    Swift::String v35 = v28 + 4;
    sub_100158CB8();
    uint64_t v36 = swift_bridgeObjectRetain_n(v31, 2LL);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.debug.getter(v37);
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = v28[10];
    uint64_t v41 = v28[7];
    if (v39)
    {
      a12 = v28[7];
      a13 = v32;
      a9 = *v35;
      a11 = v28[8];
      a15 = v33;
      uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      a14 = v28 + 2;
      uint64_t v43 = sub_10012CE30(32LL);
      a16 = v43;
      a10 = v40;
      *(_DWORD *)uint64_t v42 = 136315138;
      sub_10013A624();
      v28[3] = sub_100135074(a9, v31, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 3, v28 + 4);
      sub_100135A44(v31);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Deleting entities for bagKey: %s", v42, 0xCu);
      sub_10012CE88(v43, v44, (uint64_t)&type metadata for Any + 8);
      uint64_t v45 = v43;
      id v34 = v28 + 2;
      sub_10012CE24(v45);
      uint64_t v46 = (uint64_t)v42;
      uint64_t v33 = a15;
      sub_10012CE24(v46);

      (*(void (**)(uint64_t, uint64_t))(a11 + 8))(v40, a12);
    }

    else
    {
      uint64_t v53 = v28[8];

      sub_100135A28(v31);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v40, v41);
    }

    uint64_t v54 = *v35;
    uint64_t v55 = swift_task_alloc(v32);
    uint64_t v56 = swift_task_alloc(32LL);
    *(void *)(v56 + 16) = v54;
    *(void *)(v56 + 24) = v31;
    *id v34 = sub_10014E090();
    Predicate.init(_:)(sub_100158510, v56, 1LL, v34);
    uint64_t v57 = sub_100129274(&qword_1002B9040);
    sub_100159010(v55, v58, v59, v57);
    sub_100158518(v55, v33);
    sub_1001446D0();
    sub_1001324F4();
  }

  else
  {
    uint64_t v47 = (os_log_s *)v28[9];
    uint64_t v48 = sub_100158CB8();
    Logger.logObject.getter(v48);
    uint64_t v49 = sub_100158D38();
    if (os_log_type_enabled(v47, (os_log_type_t)v49))
    {
      uint64_t v50 = (uint8_t *)sub_10012CE30(2LL);
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v49, "Deleting all entities", v50, 2u);
      sub_10012CE24((uint64_t)v50);
    }

    uint64_t v51 = v28[8];

    sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
    uint64_t v52 = sub_100129274(&qword_1002B9040);
    sub_1001291F8(v33, 1LL, 1LL, v52);
  }

  sub_100158464((uint64_t)&unk_1002B8E68);
  sub_100159060();
  uint64_t v60 = sub_10014E090();
  sub_100158464((uint64_t)&unk_1002B8E50);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v60, v33, 1LL, v60, v61);
  sub_100158E00();
  sub_100159060();
  dispatch thunk of ModelContext.save()();
  sub_100131288(v33, &qword_1002B9038);
  sub_100158E00();
  swift_task_dealloc(v33);
  sub_1001324F4();
  sub_1001446D0();
  sub_100144B7C();
  return v62(v62, v63, v64, v65, v66, v67, v68, v69, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t sub_10014F1C8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v6 = *a1;
  uint64_t v7 = sub_100129274(&qword_1002B9058);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100129274(&qword_1002B9060);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100157C90((uint64_t)&unk_1002B9068);
  uint64_t v16 = v15;
  static PredicateExpressions.build_Arg<A>(_:)(v6, v11, v15);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F3DB0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v14, KeyPath, v11, v16);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v18 = sub_100129274(&qword_1002B9070);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[0] = a2;
  v28[1] = v27;
  static PredicateExpressions.build_Arg<A>(_:)(v28, &type metadata for String);
  a4[3] = sub_100129274(&qword_1002B9050);
  a4[4] = sub_1001581F8();
  sub_10015848C(a4);
  sub_100157C90((uint64_t)&unk_1002B9078);
  uint64_t v23 = v22;
  sub_100157C90((uint64_t)&unk_1002B9080);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v10,  v21,  v7,  v18,  v23,  v24,  &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10014F418(uint64_t a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  v3[4] = v7;
  uint64_t v8 = dword_1002B8B9C;
  swift_retain(a3);
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_10014F4B0;
  return sub_10014ED5C(a1, v7);
}

uint64_t sub_10014F4B0()
{
  uint64_t v4 = sub_10014510C();
  sub_10012B950(v4, v5);
  uint64_t v6 = *(void *)(v2 + 24);
  if (v0)
  {
    uint64_t v7 = (void *)sub_100158D80();
    sub_100158BB8();
    sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16));
  }

  else
  {
    sub_100158B00();
  }

  _Block_release(*(const void **)(v2 + 24));
  return sub_10012CEAC(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10014F524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  uint64_t v6 = sub_100129274(&qword_1002B9138);
  v5[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[22] = v7;
  v5[23] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for EntityCache();
  _BYTE v5[24] = v8;
  sub_100158464((uint64_t)&unk_1002B8E20);
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, v9);
  return swift_task_switch(sub_10014F5D0, v10, v11);
}

uint64_t sub_10014F5D0()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v47 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 152);
  __int128 v46 = *(_OWORD *)(v0 + 128);
  unint64_t v5 = (*(void *)(*(void *)(sub_100129274(&qword_1002B9038) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v6 = swift_task_alloc(v5);
  sub_100129274(&qword_1002B9040);
  sub_100159044(v6, 1LL);
  uint64_t v7 = sub_10014E090();
  sub_100158464((uint64_t)&unk_1002B8E50);
  uint64_t v9 = v8;
  uint64_t v45 = v6;
  FetchDescriptor.init(predicate:sortBy:)(v6, _swiftEmptyArrayStorage, v7, v8);
  uint64_t v10 = swift_task_alloc(v5);
  uint64_t v11 = swift_task_alloc(48LL);
  *(_OWORD *)(v11 + 16) = v46;
  *(void *)(v11 + 3sub_100129678(v0 + 2) = v3;
  *(void *)(v11 + 40) = v4;
  *(void *)(v0 + 11sub_100129678(v0 + 2) = v7;
  Predicate.init(_:)(sub_100158504, v11, 1LL, v0 + 112);
  sub_100159044(v10, 0LL);
  FetchDescriptor.predicate.setter(v10, v2);
  FetchDescriptor.fetchLimit.setter(1LL, 0LL, v2);
  sub_100158464((uint64_t)&unk_1002B8E68);
  ModelActor.modelContext.getter(v47, v12);
  uint64_t v13 = dispatch thunk of ModelContext.fetch<A>(_:)(v1, v7, v9);
  uint64_t v14 = sub_1001450FC();
  if (!((unint64_t)v13 >> 62))
  {
    uint64_t v16 = *(void **)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v16) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v42 = *(void *)(v0 + 176);
    sub_100132324(v14, v15);
    sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8));
    goto LABEL_19;
  }

  if (v13 < 0) {
    uint64_t v40 = v13;
  }
  else {
    uint64_t v40 = v13 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_10013A69C();
  uint64_t v16 = (void *)_CocoaArrayWrapper.endIndex.getter(v40);
  uint64_t v14 = sub_100132324((uint64_t)v16, v41);
  if (!v16) {
    goto LABEL_18;
  }
LABEL_3:
  if ((v13 & 0xC000000000000001LL) != 0)
  {
    uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v13);
  }

  else
  {
    if (!*(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_22;
    }

    uint64_t v17 = swift_retain(*(void *)(v13 + 32));
  }

  uint64_t v16 = (void *)(v0 + 48);
  sub_100132324(v17, v18);
  sub_100129640(0LL, (unint64_t *)&unk_1002B9140, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
  if (qword_1002B7EF0 != -1) {
LABEL_22:
  }
    swift_once(&qword_1002B7EF0, sub_10014E350);
  uint64_t v19 = qword_1002B89E0;
  uint64_t v20 = sub_10014D460();
  unint64_t v22 = v21;
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v16, v19, v20, v21);
  sub_100135158(v20, v22);
  if (!*(void *)(v0 + 72))
  {
    sub_100131288((uint64_t)v16, &qword_1002B8E90);
    unint64_t v35 = sub_100157E98();
    uint64_t v36 = sub_100158C54((uint64_t)&type metadata for EntityCacheError, v35);
    sub_100158F3C(v37, 0x8000000000000008LL);
LABEL_8:
    uint64_t v24 = *(void *)(v0 + 176);
    uint64_t v23 = *(void *)(v0 + 184);
    uint64_t v25 = *(void *)(v0 + 168);
    unint64_t v26 = sub_100157E98();
    sub_100158C54((uint64_t)&type metadata for EntityCacheError, v26);
    *uint64_t v27 = v36;
    uint64_t v28 = sub_100158D64();
    swift_willThrow(v28);
    sub_1001450FC();
    sub_100158BB8();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    sub_100144AFC();
    sub_100158E08();
    swift_task_dealloc(v45);
    sub_1001324F4();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  sub_1001295F4(v16, (_OWORD *)(v0 + 16));
  sub_100129604(v0 + 16, v0 + 80);
  uint64_t v30 = sub_100129274(&qword_1002B8F70);
  if (!swift_dynamicCast(v0 + 120, v0 + 80, (char *)&type metadata for Any + 8, v30, 6LL))
  {
    unint64_t v38 = sub_100157E98();
    uint64_t v36 = sub_100158C54((uint64_t)&type metadata for EntityCacheError, v38);
    sub_100158F3C(v39, 0x8000000000000010LL);
    sub_100129678((void *)(v0 + 16));
    goto LABEL_8;
  }

  uint64_t v31 = *(void *)(v0 + 176);
  uint64_t v32 = *(void *)(v0 + 120);
  BOOL v33 = sub_10014D96C();
  id v34 = objc_allocWithZone((Class)type metadata accessor for FetchedEntity());
  sub_10014E290(v32, v33);
  sub_1001450FC();
  sub_100129678((void *)(v0 + 16));
  sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
LABEL_19:
  sub_100144AFC();
  sub_100158E08();
  swift_task_dealloc(v45);
  sub_1001446D0();
  uint64_t v43 = sub_10013261C();
  return v44(v43);
}

uint64_t sub_10014FA78@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v59 = a4;
  uint64_t v60 = a5;
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  uint64_t v61 = a6;
  uint64_t v52 = *a1;
  uint64_t v6 = v52;
  uint64_t v7 = sub_100129274(&qword_1002B9050);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v62 = v7;
  uint64_t v63 = v8;
  uint64_t v57 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  unint64_t v58 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v65 = (char *)&v47 - v58;
  uint64_t v64 = sub_100129274(&qword_1002B9058);
  uint64_t v10 = *(void *)(*(void *)(v64 - 8) + 64LL);
  uint64_t v54 = *(void *)(v64 - 8);
  uint64_t v55 = v10;
  __chkstk_darwin(v64);
  unint64_t v56 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v12 = (char *)&v47 - v56;
  uint64_t v13 = sub_100129274(&qword_1002B9060);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  unint64_t v53 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v16 = (char *)&v47 - v53;
  sub_100157C90((uint64_t)&unk_1002B9068);
  uint64_t v18 = v17;
  static PredicateExpressions.build_Arg<A>(_:)(v6, v13, v17);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F3DB0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v16, KeyPath, v13, v18);
  swift_release(KeyPath);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v14 + 8);
  v51(v16, v13);
  uint64_t v20 = sub_100129274(&qword_1002B9070);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  __chkstk_darwin(v20);
  unint64_t v48 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v23 = (char *)&v47 - v48;
  uint64_t v66 = v49;
  uint64_t v67 = v50;
  static PredicateExpressions.build_Arg<A>(_:)(&v66, &type metadata for String);
  sub_100157C90((uint64_t)&unk_1002B9078);
  uint64_t v25 = v24;
  uint64_t v50 = v24;
  sub_100157C90((uint64_t)&unk_1002B9080);
  uint64_t v49 = v26;
  uint64_t v27 = v64;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v12,  v23,  v64,  v20,  v25,  v26,  &protocol witness table for String);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v21 + 8);
  v28(v23, v20);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v54 + 8);
  uint64_t v30 = v29(v12, v27);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v47 - v58;
  uint64_t v33 = __chkstk_darwin(v31);
  id v34 = (char *)&v47 - v56;
  __chkstk_darwin(v33);
  unint64_t v35 = (char *)&v47 - v53;
  static PredicateExpressions.build_Arg<A>(_:)(v52, v13, v18);
  uint64_t v36 = swift_getKeyPath(&unk_1001F3D88);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v35, v36, v13, v18);
  swift_release(v36);
  uint64_t v37 = ((uint64_t (*)(char *, uint64_t))v51)(v35, v13);
  __chkstk_darwin(v37);
  unint64_t v38 = (char *)&v47 - v48;
  uint64_t v66 = v59;
  uint64_t v67 = v60;
  static PredicateExpressions.build_Arg<A>(_:)(&v66, &type metadata for String);
  uint64_t v39 = v64;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v34,  v38,  v64,  v20,  v50,  v49,  &protocol witness table for String);
  v28(v38, v20);
  v29(v34, v39);
  uint64_t v40 = sub_100129274(&qword_1002B9048);
  uint64_t v41 = v61;
  v61[3] = v40;
  v41[4] = sub_100158194();
  sub_10015848C(v41);
  sub_100157C90((uint64_t)&unk_1002B9088);
  uint64_t v42 = v65;
  uint64_t v43 = v62;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v65, v32, v62, v62, v44, v44);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v63 + 8);
  v45(v32, v43);
  return ((uint64_t (*)(char *, uint64_t))v45)(v42, v43);
}

uint64_t sub_10014FED0(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  v4[4] = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v13 = v12;
  v4[5] = v12;
  uint64_t v14 = dword_1002B8BA4;
  swift_retain(a4);
  uint64_t v15 = (void *)swift_task_alloc(v14);
  v4[6] = v15;
  *uint64_t v15 = v4;
  v15[1] = sub_10014FF84;
  return sub_10014F524(v8, v10, v11, v13);
}

uint64_t sub_10014FF84(void *a1)
{
  uint64_t v4 = v1;
  sub_100158E10();
  sub_100145134(*(void *)(v3 + 48), v6);
  uint64_t v7 = sub_100158E00();
  uint64_t v9 = sub_1001322A0(v7, v8);
  sub_100132454(v9, v10);
  if (v4)
  {
    uint64_t v11 = (void *)sub_100159058();
    sub_100132428();
    sub_100158B6C();

    sub_100158C9C();
  }

  else
  {
    sub_100158B80();
    sub_100158C9C();
  }

  return sub_10012CEAC(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100150010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[11] = a6;
  v7[12] = v6;
  void v7[9] = a4;
  v7[10] = a5;
  v7[7] = a2;
  v7[8] = a3;
  v7[6] = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[14] = v9;
  v7[15] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for EntityCache();
  v7[16] = v10;
  sub_100158464((uint64_t)&unk_1002B8E20);
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(v10, v11);
  return swift_task_switch(sub_1001500F0, v12, v13);
}

uint64_t sub_1001500F0()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  *(void *)(v0 + 16) = 0LL;
  id v3 = [v2 archivedDataWithRootObject:v1 requiringSecureCoding:1 error:v0 + 16];
  id v4 = *(id *)(v0 + 16);
  if (v3)
  {
    uint64_t v53 = v0 + 16;
    uint64_t v5 = v0 + 48;
    uint64_t v57 = *(void *)(v0 + 48);
    uint64_t v63 = *(void *)(v0 + 88);
    uint64_t v6 = *(void *)(v0 + 56);
    uint64_t v54 = *(void *)(v0 + 72);
    uint64_t v56 = *(void *)(v0 + 64);
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v9 = v8;

    uint64_t v10 = sub_100158FCC();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v61 = v0;
    uint64_t v12 = sub_100158C3C(*(void *)(v11 + 64));
    uint64_t v13 = sub_10013593C(v7, v9);
    static Date.now.getter(v13);
    uint64_t v14 = sub_100158C4C();
    uint64_t v62 = v11;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v15(v14, v12, v10);
    uint64_t v16 = sub_100158C4C();
    v15(v16, v63, v10);
    uint64_t v17 = sub_10014E090();
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    sub_1001296D0();
    swift_bridgeObjectRetain(v54);
    uint64_t v18 = v6;
    uint64_t v19 = v7;
    uint64_t v20 = sub_10014DA64(v57, v18, v56, v54, v7, v9, v14, v16);
    swift_task_dealloc(v16);
    sub_1001447A4();
    sub_100158464((uint64_t)&unk_1002B8E68);
    uint64_t v22 = v21;
    sub_100158E88();
    sub_100158464((uint64_t)&unk_1002B8E50);
    uint64_t v58 = v23;
    dispatch thunk of ModelContext.insert<A>(_:)(v20, v17);
    sub_10012CF14();
    sub_100158E88();
    dispatch thunk of ModelContext.save()();
    uint64_t v30 = *(void *)(v61 + 128);
    unint64_t v59 = v9;
    uint64_t v60 = *(void *)(v61 + 72);
    uint64_t v50 = *(void *)(v61 + 64);
    __int128 v49 = *(_OWORD *)(v61 + 48);
    sub_10012CF14();
    ModelActor.modelContext.getter(v30, v22);
    uint64_t v31 = sub_100129274(&qword_1002B9038);
    uint64_t v32 = sub_100158BAC(*(void *)(*(void *)(v31 - 8) + 64LL));
    uint64_t v33 = swift_task_alloc(64LL);
    *(_OWORD *)(v33 + 16) = v49;
    *(void *)(v33 + 3sub_100129678(v0 + 2) = v50;
    *(void *)(v33 + 40) = v60;
    *(void *)(v33 + 48) = v12;
    *(void *)(v61 + 24) = v17;
    uint64_t v51 = v33;
    Predicate.init(_:)(sub_100158118, v33, 1LL, v53 + 8);
    uint64_t v34 = sub_100129274(&qword_1002B9040);
    sub_100159010(v32, v35, v36, v34);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v17, v32, 1LL, v17, v58);
    uint64_t v37 = *(void *)(v61 + 128);
    sub_100131288(v32, &qword_1002B9038);
    sub_10013A738();
    ModelActor.modelContext.getter(v37, v22);
    uint64_t v38 = dispatch thunk of ModelContext.save()();
    sub_100158D88( v38,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v5,  v49,  *((uint64_t *)&v49 + 1),  v53 + 8,  (uint64_t)v20,  v51,  v53,  v32,  v19,  v58,  v59);
    sub_100159080();
    sub_10013A738();
    sub_1001327B8(v62);
    swift_task_dealloc(v52);
    swift_task_dealloc(v55);
    sub_1001446D0();
    sub_1001324F4();
    uint64_t v39 = *(uint64_t (**)(void))(v61 + 8);
  }

  else
  {
    uint64_t v24 = v4;
    uint64_t v25 = _convertNSErrorToError(_:)(v4);

    swift_willThrow(v26);
    unint64_t v27 = sub_100157E98();
    uint64_t v28 = sub_100158C54((uint64_t)&type metadata for EntityCacheError, v27);
    *uint64_t v29 = v25 | 0x4000000000000000LL;
    swift_willThrow(v28);
    swift_task_dealloc(*(void *)(v0 + 120));
    uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v39();
}

uint64_t sub_10015071C@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v98 = a6;
  uint64_t v94 = a4;
  uint64_t v95 = a5;
  uint64_t v90 = a3;
  uint64_t v88 = a2;
  uint64_t v99 = a7;
  uint64_t v104 = *a1;
  uint64_t v7 = v104;
  uint64_t v8 = sub_100129274(&qword_1002B9048);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v100 = v8;
  uint64_t v101 = v9;
  __chkstk_darwin(v8);
  uint64_t v107 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100129274(&qword_1002B9050);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v96 = v11;
  uint64_t v97 = v12;
  uint64_t v92 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  unint64_t v93 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v87 = (char *)&v85 - v93;
  uint64_t v102 = sub_100129274(&qword_1002B9058);
  uint64_t v89 = *(void *)(v102 - 8);
  uint64_t v14 = *(void *)(v89 + 64);
  __chkstk_darwin(v102);
  unint64_t v91 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v15 = (char *)&v85 - v91;
  uint64_t v16 = sub_100129274(&qword_1002B9060);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v105 = *(void *)(v17 + 64);
  __chkstk_darwin(v16);
  unint64_t v106 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v19 = (char *)&v85 - v106;
  sub_100157C90((uint64_t)&unk_1002B9068);
  uint64_t v21 = v20;
  uint64_t v22 = v7;
  uint64_t v23 = v21;
  uint64_t v103 = v21;
  static PredicateExpressions.build_Arg<A>(_:)(v22, v16, v21);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F3DB0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v19, KeyPath, v16, v23);
  swift_release(KeyPath);
  uint64_t v86 = *(void (**)(char *, uint64_t))(v17 + 8);
  v86(v19, v16);
  uint64_t v25 = sub_100129274(&qword_1002B9070);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(void *)(v26 + 64);
  __chkstk_darwin(v25);
  unint64_t v85 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v28 = (char *)&v85 - v85;
  uint64_t v108 = v88;
  uint64_t v109 = v90;
  static PredicateExpressions.build_Arg<A>(_:)(&v108, &type metadata for String);
  sub_100157C90((uint64_t)&unk_1002B9078);
  uint64_t v30 = v29;
  uint64_t v90 = v29;
  sub_100157C90((uint64_t)&unk_1002B9080);
  uint64_t v88 = v31;
  uint64_t v32 = v102;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v15,  v28,  v102,  v25,  v30,  v31,  &protocol witness table for String);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v26 + 8);
  v33(v28, v25);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v89 + 8);
  uint64_t v35 = v34(v15, v32);
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v85 - v93;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v39 = (char *)&v85 - v91;
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v85 - v106;
  uint64_t v41 = v103;
  static PredicateExpressions.build_Arg<A>(_:)(v104, v16, v103);
  uint64_t v42 = swift_getKeyPath(&unk_1001F3D88);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v40, v42, v16, v41);
  swift_release(v42);
  uint64_t v43 = v40;
  uint64_t v44 = v86;
  uint64_t v45 = ((uint64_t (*)(char *, uint64_t))v86)(v43, v16);
  __chkstk_darwin(v45);
  uint64_t v46 = (char *)&v85 - v85;
  uint64_t v108 = v94;
  uint64_t v109 = v95;
  static PredicateExpressions.build_Arg<A>(_:)(&v108, &type metadata for String);
  uint64_t v47 = v102;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v39,  v46,  v102,  v25,  v90,  v88,  &protocol witness table for String);
  v33(v46, v25);
  v34(v39, v47);
  sub_100157C90((uint64_t)&unk_1002B9088);
  uint64_t v48 = v87;
  uint64_t v49 = v96;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v87, v37, v96, v96, v50, v50);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v97 + 8);
  v51(v37, v49);
  v51(v48, v49);
  uint64_t v97 = sub_100129274(&qword_1002B9090);
  uint64_t v102 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v53 = (char *)&v85 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = sub_100129274(&qword_1002B9098);
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v95 = v54;
  uint64_t v96 = v55;
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v58 = (char *)&v85 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v56);
  unint64_t v59 = (char *)&v85 - v106;
  uint64_t v60 = v103;
  static PredicateExpressions.build_Arg<A>(_:)(v104, v16, v103);
  uint64_t v61 = swift_getKeyPath(&unk_1001F3D38);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v59, v61, v16, v60);
  swift_release(v61);
  v44(v59, v16);
  uint64_t v62 = sub_100129274(&qword_1002B90A0);
  unint64_t v106 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v64 = (char *)&v85 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = type metadata accessor for Date(0LL);
  static PredicateExpressions.build_Arg<A>(_:)(v98, v65);
  uint64_t v66 = type metadata accessor for PredicateExpressions.ComparisonOperator(0LL);
  uint64_t v67 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v69 = (char *)&v85 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v67 + 104))( v69,  enum case for PredicateExpressions.ComparisonOperator.lessThan(_:),  v66);
  sub_100157C90((uint64_t)&unk_1002B90A8);
  uint64_t v71 = v70;
  sub_100157C90((uint64_t)&unk_1002B90B0);
  uint64_t v73 = v72;
  sub_100158464((uint64_t)&unk_1002B90B8);
  uint64_t v74 = v95;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)(v58, v64, v69, v95, v62, v71, v73, v75);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v66);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v64, v62);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v58, v74);
  uint64_t v76 = sub_100129274(&qword_1002B90C0);
  BOOL v77 = v99;
  v99[3] = v76;
  v77[4] = sub_100158128();
  sub_10015848C(v77);
  sub_100157C90((uint64_t)&unk_1002B9118);
  uint64_t v79 = v78;
  sub_100157C90((uint64_t)&unk_1002B9120);
  uint64_t v80 = v107;
  uint64_t v81 = v100;
  uint64_t v82 = v97;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v107, v53, v100, v97, v79, v83);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v53, v82);
  return (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v80, v81);
}

uint64_t type metadata accessor for EntityCache()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCoreP33_1FC4D10440B9DF42E57D244557C7E23B11EntityCache);
}

uint64_t sub_100150F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *aBlock, uint64_t a6)
{
  v6[2] = a3;
  v6[3] = a6;
  v6[4] = _Block_copy(aBlock);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v14 = v13;
  v6[5] = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v17 = v16;
  v6[6] = v16;
  uint64_t v18 = type metadata accessor for Date(0LL);
  v6[7] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v6[8] = v19;
  uint64_t v20 = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v6[9] = v20;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(a4);
  uint64_t v21 = dword_1002B8BAC;
  swift_unknownObjectRetain(a3);
  swift_retain(a6);
  uint64_t v22 = (void *)swift_task_alloc(v21);
  v6[10] = v22;
  *uint64_t v22 = v6;
  v22[1] = sub_10015102C;
  return sub_100150010(v12, v14, v15, v17, a3, v20);
}

void sub_10015102C()
{
  uint64_t v2 = *v1;
  uint64_t v12 = v2;
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(v2 + 16);
  sub_100145134(*(void *)(v2 + 80), &v12);
  sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  swift_unknownObjectRelease(v4);
  uint64_t v5 = sub_1001450FC();
  uint64_t v7 = sub_100132454(v5, v6);
  sub_100132858(v7, v8);
  uint64_t v9 = *(void *)(v2 + 32);
  if (v0)
  {
    uint64_t v10 = (void *)sub_100158D80();
    sub_100158BB8();
    sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16));
  }

  else
  {
    sub_100158B00();
  }

  _Block_release(*(const void **)(v2 + 32));
  sub_1001324F4();
  sub_1001485A4();
  __asm { BR              X0 }

void *sub_1001510DC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ModelContext(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v5 = swift_retain(a1);
  uint64_t v6 = ModelContext.init(_:)(v5);
  uint64_t v7 = type metadata accessor for DefaultSerialModelExecutor(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = DefaultSerialModelExecutor.init(modelContext:)(v6);
  sub_100158464((uint64_t)&unk_1002B8FB8);
  v2[2] = v8;
  v2[3] = v9;
  void v2[4] = a1;
  return v2;
}

uint64_t sub_100151180()
{
  uint64_t v0 = type metadata accessor for EntityCache();
  sub_100158464((uint64_t)&unk_1002B8E68);
  return ModelActor.unownedExecutor.getter(v0, v1);
}

uint64_t sub_1001511C8()
{
  return sub_100158068(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1001511EC(uint64_t a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = (void *)sub_10012AAEC(a5, 40LL);
  void v9[2] = a3;
  v9[3] = v8;
  v9[4] = a1;
  id v10 = a3;
  swift_retain(a1);
  uint64_t v11 = sub_100144B40();
  sub_100158C60(v11, v12);
}

uint64_t sub_10015124C(uint64_t a1, void *aBlock)
{
  v2[2] = _Block_copy(aBlock);
  if (a1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    uint64_t v5 = v4;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  v2[3] = v5;
  uint64_t v6 = (void *)swift_task_alloc(dword_1002B9034);
  void v2[4] = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_1001512D4;
  return sub_1001511C8();
}

uint64_t sub_1001512D4()
{
  uint64_t v4 = sub_100145134(*(void *)(v2 + 32), v3);
  sub_10012B950(v4, v5);
  uint64_t v6 = *(void *)(v2 + 16);
  if (v0)
  {
    uint64_t v7 = (void *)sub_100158D80();
    sub_100158BB8();
    sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16));
  }

  else
  {
    sub_100158B00();
  }

  _Block_release(*(const void **)(v2 + 16));
  return sub_10012CEAC(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100151340()
{
  return sub_1001580B8(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0LL);
}

uint64_t sub_100151368(uint64_t a1, uint64_t a2, void *aBlock)
{
  v3[2] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v3[3] = v6;
  static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v3[4] = v7;
  uint64_t v8 = (void *)swift_task_alloc(dword_1002B901C);
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1001513E0;
  return sub_1001513E0();
}

uint64_t sub_1001513E0()
{
  uint64_t v4 = sub_100145134(*(void *)(v2 + 40), v3);
  uint64_t v6 = sub_10012B950(v4, v5);
  sub_100132454(v6, v7);
  uint64_t v8 = *(void (***)(void, void, void))(v2 + 16);
  if (v0)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)(v0);
    sub_1001359B4();
    ((void (**)(void, void, void *))v8)[2](v8, 0LL, v9);

    _Block_release(v8);
  }

  else
  {
    uint64_t v10 = sub_100144B40();
    v11(v10);
    _Block_release(v8);
  }

  return sub_100144770(*(uint64_t (**)(void))(v1 + 8));
}

void sub_1001514A8( uint64_t a1, int a2, void *a3, void *a4, uint64_t a5, void *a6, void *aBlock, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = (void *)sub_10012AAEC(a8, 64LL);
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v16[6] = v15;
  v16[7] = a1;
  id v17 = a3;
  id v18 = a4;
  swift_unknownObjectRetain(a5);
  id v19 = a6;
  sub_100158FF4();
  sub_100188AB4(a9, (uint64_t)v16);
}

uint64_t sub_10015153C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *aBlock)
{
  v5[2] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5[3] = v9;
  static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5[4] = v10;
  uint64_t v11 = type metadata accessor for Date(0LL);
  v5[5] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[6] = v12;
  v5[7] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(a4);
  uint64_t v13 = (void *)swift_task_alloc(dword_1002B9004);
  v5[8] = v13;
  void *v13 = v5;
  v13[1] = sub_1001515F0;
  return sub_1001515F0();
}

uint64_t sub_1001515F0()
{
  uint64_t v3 = *(void *)(v2 + 48);
  sub_100145134(*(void *)(v2 + 64), v4);
  uint64_t v5 = sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  uint64_t v7 = sub_100132454(v5, v6);
  sub_100132858(v7, v8);
  uint64_t v9 = *(void *)(v2 + 16);
  if (v0)
  {
    uint64_t v10 = (void *)sub_100158D80();
    sub_100158BB8();
    sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16));
  }

  else
  {
    sub_100158B00();
  }

  _Block_release(*(const void **)(v2 + 16));
  sub_1001324F4();
  return sub_100158B94(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t type metadata accessor for NoopEntityCache()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCoreP33_1FC4D10440B9DF42E57D244557C7E23B15NoopEntityCache);
}

unint64_t sub_100151690(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  v9._uint64_t countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(a2, v10);
  v11._uint64_t countAndFlagsBits = 0x6175676E616C202CLL;
  v11._object = (void *)0xEC000000203A6567LL;
  String.append(_:)(v11);
  swift_bridgeObjectRetain(a4);
  v12._uint64_t countAndFlagsBits = a3;
  v12._object = a4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(a4, v13);
  return 0xD000000000000019LL;
}

uint64_t sub_100151770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = String.hash(into:)(a1, a2, a3);
  sub_1001322A0(v10, v11);
  sub_1001296D0();
  String.hash(into:)(a1, a4, a5);
  return swift_bridgeObjectRelease(a5, v12);
}

uint64_t sub_1001517E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if (v12 || (char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0LL), result = 0LL, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8) {
      return 1LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0LL);
    }
  }

  return result;
}

Swift::Int sub_10015186C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Hasher._finalize()();
}

Swift::Int sub_1001518F8()
{
  return sub_10015186C(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_100151904(uint64_t a1)
{
  return sub_100151770(a1, *v1, v1[1], v1[2], v1[3]);
}

Swift::Int sub_100151910(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  Hasher.init(_seed:)(v11, a1);
  sub_10013A624();
  uint64_t v6 = String.hash(into:)(v11, v2, v3);
  sub_1001322A0(v6, v7);
  sub_10013A69C();
  uint64_t v8 = String.hash(into:)(v11, v5, v4);
  sub_100132324(v8, v9);
  return Hasher._finalize()();
}

unint64_t sub_100151980()
{
  return sub_100151690(*(void *)v0, *(void **)(v0 + 8), *(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10015198C(uint64_t *a1, uint64_t *a2)
{
  return sub_1001517E0(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1001519A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[13] = a4;
  v5[14] = v4;
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[16] = v7;
  v5[17] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100151A10, v4, 0LL);
}

void sub_100151A10()
{
  uint64_t v1 = v0[14] + 120LL;
  swift_beginAccess(v1, v0 + 2, 0LL, 0LL);
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 16LL);
  sub_1001325D8();
  sub_10013A624();
  if (v3)
  {
    uint64_t v5 = v0[12];
    uint64_t v4 = v0[13];
    uint64_t v7 = v0[10];
    uint64_t v6 = v0[11];
    sub_10013A69C();
    unint64_t v8 = sub_10014A530(v7, v6, v5, v4);
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = swift_unknownObjectRetain(*(void *)(*(void *)(v2 + 56) + 8 * v8));
      uint64_t v12 = sub_100132324(v10, v11);
      goto LABEL_6;
    }

    sub_100132324(v8, v9);
  }

  uint64_t v14 = v0[10];
  uint64_t v15 = v0[13];
  uint64_t v16 = v0[14];
  uint64_t v18 = v0[11];
  uint64_t v17 = v0[12];
  type metadata accessor for EntityCache();
  LOBYTE(v16) = *(_BYTE *)(v16 + 112);
  sub_100144E9C();
  sub_10013A624();
  id v19 = sub_10014E444(v14, v18, v17, v15, v16);
  uint64_t v20 = v0[12];
  uint64_t v21 = v0[13];
  uint64_t v23 = v0[10];
  uint64_t v22 = v0[11];
  sub_100158DA8(v1, (uint64_t)(v0 + 5));
  uint64_t v24 = swift_unknownObjectRetain(v19);
  sub_100187A18(v24, v23, v22, v20, v21);
  uint64_t v12 = swift_endAccess(v0 + 5);
LABEL_6:
  uint64_t v25 = sub_100132858(v12, v13);
  sub_1001322A0(v25, v26);
  swift_task_dealloc(v0[17]);
  sub_10013265C();
  __asm { BR              X1 }

uint64_t sub_100151D9C(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  v4[4] = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v13 = v12;
  v4[5] = v12;
  uint64_t v14 = dword_1002B8D0C;
  swift_retain(a4);
  uint64_t v15 = (void *)swift_task_alloc(v14);
  v4[6] = v15;
  *uint64_t v15 = v4;
  v15[1] = sub_100151E50;
  return sub_1001519A8(v8, v10, v11, v13);
}

uint64_t sub_100151E50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  a15 = v17;
  a16 = v18;
  a14 = v16;
  uint64_t v20 = v19;
  sub_10012CED0();
  uint64_t v22 = *(void (***)(void, void))(v21 + 24);
  uint64_t v23 = *v16;
  uint64_t v24 = sub_1001323F0(*(void *)(v21 + 48), &a14);
  uint64_t v26 = sub_10012B950(v24, v25);
  sub_1001322A0(v26, v27);
  sub_100158E00();
  v22[2](v22, v20);
  _Block_release(v22);
  sub_100158D6C();
  return sub_100144770(*(uint64_t (**)(void))(v23 + 8));
}

uint64_t sub_100151EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[11] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[12] = v7;
  v5[13] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100151F24, v4, 0LL);
}

uint64_t sub_100151F24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  a27 = v29;
  a28 = v30;
  a26 = v28;
  uint64_t v31 = *(void *)(v28 + 48);
  uint64_t v32 = *(void *)(v28 + 72);
  uint64_t v34 = *(void *)(v28 + 56);
  uint64_t v33 = *(void *)(v28 + 64);
  sub_100158DA8(*(void *)(v28 + 80) + 120LL, v28 + 16);
  sub_100144D2C();
  sub_10013A624();
  uint64_t v35 = sub_100156ABC(v31, v34, v33, v32);
  swift_endAccess(v28 + 16);
  if (v35) {
    swift_unknownObjectRelease(v35);
  }
  sub_100158CB8();
  sub_10013A624();
  uint64_t v36 = sub_1001296D0();
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.debug.getter(v37);
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v41 = *(void *)(v28 + 96);
  uint64_t v40 = *(void *)(v28 + 104);
  uint64_t v42 = *(void *)(v28 + 88);
  uint64_t v43 = *(void **)(v28 + 72);
  if (v39)
  {
    a13 = v28 + 112;
    HIDWORD(a1sub_100129678(v0 + 2) = v35 != 0;
    a16 = *(void *)(v28 + 104);
    uint64_t v44 = *(void *)(v28 + 56);
    a10 = *(void *)(v28 + 64);
    a11 = v28 + 40;
    uint64_t v45 = sub_10012CE30(18LL);
    a15 = v42;
    uint64_t v46 = sub_10012CE30(32LL);
    a17 = v46;
    *(_DWORD *)uint64_t v45 = 136315394;
    a14 = v41;
    uint64_t v47 = sub_100158D74();
    unint64_t v49 = sub_100151690(v47, v48, a10, v43);
    *(void *)(v28 + 40) = sub_100135074(v49, v50, &a17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 40, v28 + 48);
    sub_100135A28((uint64_t)v43);
    uint64_t v51 = sub_100135A28(v44);
    sub_100132324(v51, v52);
    *(_WORD *)(v45 + 1sub_100129678(v0 + 2) = 1024;
    *(_DWORD *)(v28 + 11sub_100129678(v0 + 2) = HIDWORD(a12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 112, v28 + 116);
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "Deleted entity cache: %s (wasRemoved? %{BOOL}d)",  (uint8_t *)v45,  0x12u);
    sub_10012CE88(v46, v53, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v46);
    sub_10012CE24(v45);

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(a16, a15);
  }

  else
  {
    uint64_t v54 = *(void *)(v28 + 56);

    sub_100135A28((uint64_t)v43);
    sub_100135A28(v54);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  }

  swift_task_dealloc(*(void *)(v28 + 104));
  sub_100144B7C();
  return v55(v55, v56, v57, v58, v59, v60, v61, v62, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

void sub_10015215C(uint64_t a1, int a2, void *a3, void *a4, void *aBlock, uint64_t a6)
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = (void *)sub_10012AAEC(a6, 48LL);
  uint64_t v11[2] = a3;
  void v11[3] = a4;
  v11[4] = v10;
  v11[5] = a1;
  id v12 = a3;
  id v13 = a4;
  swift_retain(a1);
  uint64_t v14 = sub_100144B40();
  sub_100158C60(v14, v15);
}

uint64_t sub_1001521C4(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;
  v4[4] = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v13 = v12;
  v4[5] = v12;
  uint64_t v14 = dword_1002B8D14;
  swift_retain(a4);
  uint64_t v15 = (void *)swift_task_alloc(v14);
  v4[6] = v15;
  *uint64_t v15 = v4;
  v15[1] = sub_100152278;
  return sub_100151EBC(v8, v10, v11, v13);
}

uint64_t sub_100152278()
{
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[2];
  uint64_t v4 = *v0;
  uint64_t v5 = sub_1001323F0(v1[6], &v10);
  uint64_t v7 = sub_100132324(v5, v6);
  sub_10012B950(v7, v8);
  swift_release(v3);
  (*(void (**)(uint64_t))(v2 + 16))(v2);
  sub_100158C9C();
  return sub_10012CEAC(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_1001522E0()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[6] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100152340, v0, 0LL);
}

uint64_t sub_100152340()
{
  uint64_t v1 = *(os_log_s **)(v0 + 64);
  uint64_t v2 = sub_100158D74();
  sub_100158DA8(v2, v3);
  sub_100129274(&qword_1002B8F78);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  uint64_t v4 = swift_endAccess(v0 + 16);
  uint64_t v5 = static GKLog.cache.getter(v4);
  uint64_t v6 = v1;
  Logger.logObject.getter(v5);
  os_log_type_t v7 = sub_100158D38();
  if (os_log_type_enabled(v1, v7))
  {
    uint64_t v8 = (uint8_t *)sub_10012CE30(2LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Deleted all entity caches", v8, 2u);
    sub_10012CE24((uint64_t)v8);
  }

  uint64_t v9 = *(void *)(v0 + 56);

  sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  sub_1001446D0();
  return sub_10012CEAC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100152480(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1002B8D1C;
  swift_retain(a2);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  void v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_1001524E0;
  return sub_1001522E0();
}

uint64_t sub_1001524E0()
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *v0;
  sub_1001323F0(*(void *)(v1 + 32), &v5);
  sub_10013A738();
  (*(void (**)(uint64_t))(v2 + 16))(v2);
  sub_100158F84();
  return sub_10012CEAC(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_100152530(uint64_t a1, uint64_t a2)
{
  return swift_defaultActor_deallocate(v2);
}

uint64_t type metadata accessor for EntityCacheProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCoreP33_1FC4D10440B9DF42E57D244557C7E23B19EntityCacheProvider);
}

id sub_100152584(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  sub_100144870();
  NSString v5 = String._bridgeToObjectiveC()();
  sub_1001322A0((uint64_t)v5, v6);
  return sub_100158CA4(v5);
}

void sub_1001525CC()
{
  v1._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  v1._object = (void *)0x800000010024CE30LL;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_id);
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_id + 8);
  swift_bridgeObjectRetain(v3);
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3, v5);
  v6._uint64_t countAndFlagsBits = 0x797469746E65202CLL;
  v6._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v6);
  uint64_t v7 = sub_100129274(&qword_1002B8F70);
  sub_100158FD4( v7,  v8,  v7,  (uint64_t)&type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v9._object = (void *)0x800000010024CE50LL;
  v9._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v9);
  uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride + 8);
  if (v10)
  {
    uint64_t v11 = *(void *)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride);
    uint64_t v12 = *(void **)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride + 8);
  }

  else
  {
    uint64_t v12 = (void *)0xE300000000000000LL;
    uint64_t v11 = 7104878LL;
  }

  swift_bridgeObjectRetain(v10);
  v13._uint64_t countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  sub_10012B950(v14, v15);
  sub_100020800();
}

void sub_10015270C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  a16 = v18;
  a17 = v19;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v30 = (objc_class *)sub_10013A730();
  uint64_t v31 = &v17[OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_id];
  *(void *)uint64_t v31 = v29;
  *((void *)v31 + 1) = v27;
  *(void *)&v17[OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_entity] = v25;
  uint64_t v32 = &v17[OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride];
  *(void *)uint64_t v32 = v23;
  *((void *)v32 + 1) = v21;
  a9.receiver = v17;
  a9.Class super_class = v30;
  objc_msgSendSuper2(&a9, "init");
  sub_100158BC0();
}

#error "1001527C8: call analysis failed (funcsize=21)"
id __cdecl +[GKCacheableEntity createWithEntityID:entity:](id a1, SEL a2, id a3, id a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  Swift::String v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v8 = v7;
  swift_getObjCClassMetadata(a1);
  swift_unknownObjectRetain(a4);
  Swift::String v9 = (void *)sub_100152780(v6, v8, a4);
  swift_unknownObjectRelease(a4);
  swift_bridgeObjectRelease(v8, v10);
  return v9;
}

#error "1001528A0: call analysis failed (funcsize=28)"
id __cdecl +[GKCacheableEntity createWithBagKey:entityID:entity:](id a1, SEL a2, id a3, id a4, id a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  Swift::String v13 = v12;
  swift_getObjCClassMetadata(a1);
  swift_unknownObjectRetain(a5);
  uint64_t v14 = (void *)sub_100152848(v8, v10, v11, v13, a5);
  swift_unknownObjectRelease(a5);
  swift_bridgeObjectRelease(v10, v15);
  swift_bridgeObjectRelease(v13, v16);
  return v14;
}

void sub_10015295C()
{
}

uint64_t type metadata accessor for GKCacheableEntity()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCore17GKCacheableEntity);
}

void sub_1001529F8(char a1)
{
  uint64_t v2 = type metadata accessor for EntityCacheProvider();
  uint64_t v3 = swift_allocObject(v2, 128LL, 15LL);
  swift_defaultActor_initialize(v3);
  *(_BYTE *)(v3 + 11sub_100129678(v0 + 2) = a1;
  *(void *)(v3 + 120) = _swiftEmptyDictionarySingleton;
  sub_100132514();
}

id sub_100152A58( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id result = [a4 replyQueue];
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v17 = (void *)sub_10012AAEC((uint64_t)&unk_100274750, 72LL);
    v17[2] = v8;
    v17[3] = a1;
    v17[4] = a2;
    v17[5] = a3;
    v17[6] = a4;
    v17[7] = a7;
    v17[8] = a8;
    id v18 = v8;
    swift_bridgeObjectRetain(a1);
    sub_100144D2C();
    id v19 = a4;
    swift_retain(a8);
    sub_100152D90(a5, a6, v16, (uint64_t)&unk_1002B8F68, (uint64_t)v17);

    return (id)swift_release(v17);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100152B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[22] = a6;
  v7[23] = a7;
  v7[20] = a4;
  v7[21] = a5;
  v7[18] = a2;
  v7[19] = a3;
  v7[17] = a1;
  return swift_task_switch(sub_100152B68, 0LL, 0LL);
}

uint64_t sub_100152B68()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  Swift::String v9 = (void *)v0[17];
  uint64_t v10 = v0[21];
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[24] = isa;
  NSString v4 = String._bridgeToObjectiveC()();
  v0[25] = v4;
  v0[14] = v2;
  v0[15] = v1;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256LL;
  v0[12] = sub_100152D38;
  v0[13] = &unk_100274768;
  uint64_t v5 = _Block_copy(v0 + 10);
  v0[26] = v5;
  uint64_t v6 = v0[15];
  sub_100158FF4();
  swift_release(v6);
  v0[7] = v0 + 16;
  uint64_t v7 = sub_100158C8C((uint64_t)sub_100152C90);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = sub_100152D3C;
  v0[13] = &unk_100274790;
  v0[14] = v7;
  [v9 createEntityWithRequest:isa bagKey:v4 clientProxy:v10 entityMaker:v5 completionHandler:v0 + 10];
  return sub_100158B50();
}

uint64_t sub_100152C90()
{
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_100152CCC()
{
  uint64_t v2 = sub_10013261C();
  return sub_100158AF0(v2, v3);
}

uint64_t sub_100152CFC()
{
  return sub_100158BE8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100152D3C(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return sub_10017BC0C(v3, a3);
  }
  if (a2)
  {
    swift_unknownObjectRetain(a2);
    return sub_10017BC60(v3, a2);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100152D90(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for TaskPriority(0LL);
  sub_1001291F8((uint64_t)v12, 1LL, 1LL, v13);
  uint64_t v14 = (void *)swift_allocObject(&unk_1002745A8, 72LL, 7LL);
  v14[2] = 0LL;
  v14[3] = 0LL;
  void v14[4] = a4;
  v14[5] = a5;
  v14[6] = a3;
  v14[7] = a1;
  v14[8] = a2;
  swift_retain(a5);
  id v15 = a3;
  swift_retain(a2);
  sub_100185858();
  return swift_release(v16);
}

uint64_t sub_100152FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a4;
  v6[5] = a5;
  v6[2] = a2;
  v6[3] = a3;
  uint64_t v12 = swift_allocObject(&unk_1002746D8, 24LL, 7LL);
  v6[6] = v12;
  *(void *)(v12 + 16) = a6;
  uint64_t v13 = (void *)swift_task_alloc(dword_1002B8EF4);
  v6[7] = v13;
  void *v13 = v6;
  v13[1] = sub_100153050;
  return sub_1001531D4(a1, a2, a3, a4);
}

uint64_t sub_100153050(double a1)
{
  v3[8] = v1;
  void v3[9] = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    sub_100132278();
    return sub_100158B10(v8, v9, v10);
  }

  else
  {
    uint64_t v12 = (void *)swift_task_alloc(dword_1002B8EFC);
    v3[10] = (uint64_t)v12;
    *uint64_t v12 = v4;
    v12[1] = sub_1001530F0;
    uint64_t v13 = sub_100144970(v3[2]);
    return sub_100153350(v13, v14, v1, v15, v16, v17, a1);
  }

uint64_t sub_1001530F0()
{
  *(void *)(v2 + 88) = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    *(void *)(v2 + 96) = v0;
  }
  sub_100132278();
  return sub_1001321F0();
}

uint64_t sub_100153144()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100153170(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v2 + 8))(*(void *)(v2 + 96));
}

uint64_t sub_1001531A8(uint64_t a1, uint64_t a2)
{
  return sub_10013224C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1001531D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  return swift_task_switch(sub_1001531F4, 0LL, 0LL);
}

uint64_t sub_1001531F4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v4 = swift_task_alloc(64LL);
  *(void *)(v0 + 7sub_100129678(v0 + 2) = v4;
  __int128 v5 = *(_OWORD *)(v0 + 48);
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  *(void *)(v4 + 3sub_100129678(v0 + 2) = v2;
  *(_OWORD *)(v4 + 40) = v5;
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 80) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1001532AC;
  sub_100132278();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1001532AC()
{
  uint64_t v8 = *v1;
  uint64_t v2 = v8;
  sub_100132600(&v8);
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc(v3);
  if (!v0) {
    swift_task_dealloc(*(void *)(v2 + 72));
  }
  sub_100132278();
  return sub_100158B10(v4, v5, v6);
}

uint64_t sub_10015330C()
{
  return (*(uint64_t (**)(void, double))(v0 + 8))(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_10015331C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100153350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  *(void *)(v8 + 184) = a6;
  *(void *)(v8 + 19sub_100129678(v0 + 2) = v7;
  *(void *)(v8 + 168) = a4;
  *(void *)(v8 + 176) = a5;
  *(double *)(v8 + 160) = a7;
  *(void *)(v8 + 144) = a2;
  *(void *)(v8 + 15sub_100129678(v0 + 2) = a3;
  *(void *)(v8 + 136) = a1;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 200) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 208) = v10;
  *(void *)(v8 + 216) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001533C0, 0LL, 0LL);
}

uint64_t sub_1001533C0()
{
  *(void *)(v0 + 224) = (*(uint64_t (**)(void))(v0 + 176))(*(void *)(v0 + 152));
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B8ECC);
  *(void *)(v0 + 23sub_100129678(v0 + 2) = v1;
  void *v1 = v0;
  v1[1] = sub_100153414;
  uint64_t v2 = sub_100144970(*(void *)(v0 + 168));
  return sub_100158D2C(v2);
}

uint64_t sub_100153414()
{
  *(void *)(v1 + 240) = v0;
  sub_100158EA8(v2);
  sub_100132278();
  return sub_100144664(v3, v4, v5);
}

uint64_t sub_100153450()
{
  uint64_t v1 = *((void *)v0 + 28);
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride + 8);
  if (!v2)
  {
    sub_10013A69C();
    uint64_t v2 = 0LL;
  }

  uint64_t v3 = (void *)*((void *)v0 + 30);
  double v4 = v0[20];
  swift_bridgeObjectRetain(v2);
  NSString v5 = String._bridgeToObjectiveC()();
  *((void *)v0 + 31) = v5;
  sub_100132324((uint64_t)v5, v6);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_id + 8);
  sub_100144D2C();
  NSString v8 = String._bridgeToObjectiveC()();
  *((void *)v0 + 3sub_100129678(v0 + 2) = v8;
  swift_bridgeObjectRelease(v7, v9);
  uint64_t v10 = OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_entity;
  *((void *)v0 + 33) = OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_entity;
  uint64_t v11 = *(void *)(v1 + v10);
  *((void *)v0 + 34) = v11;
  uint64_t v12 = sub_100158FCC();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = sub_100158C3C(*(void *)(v13 + 64));
  uint64_t v15 = sub_100158C4C();
  uint64_t v16 = swift_unknownObjectRetain(v11);
  uint64_t v17 = static Date.now.getter(v16);
  Date.addingTimeInterval(_:)(v17, v4);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v18(v15, v12);
  sub_1001324F4();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  *((void *)v0 + 35) = isa;
  v18(v14, v12);
  sub_100158E08();
  uint64_t v20 = sub_100158EF0((uint64_t)sub_100153600);
  *((void *)v0 + 10) = _NSConcreteStackBlock;
  uint64_t v21 = v0 + 10;
  v21[1] = 0x40000000LL;
  sub_100158F6C(v20, (uint64_t)sub_1001659CC);
  [v3 storeWithBagKey:v5 id:v8 entity:v11 expiresAt:isa completionHandler:v21];
  return sub_100158DF8();
}

uint64_t sub_100153600()
{
  *(void *)(v0 + 288) = v1;
  sub_100132278();
  return sub_100144664(v2, v3, v4);
}

uint64_t sub_100153640()
{
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v3 = *(void **)(v0 + 248);
  uint64_t v2 = *(void **)(v0 + 256);
  swift_unknownObjectRelease(*(void *)(v0 + 240));

  sub_100158D6C();
  sub_100158D50();

  sub_1001324F4();
  return sub_1001325E0((uint64_t)v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001536A0()
{
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v4 = *(void **)(v0 + 248);
  uint64_t v3 = *(void **)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v6 = *(void **)(v0 + 224);
  swift_willThrow(v7);
  swift_unknownObjectRelease(v5);

  swift_unknownObjectRelease(v2);
  static GKLog.cache.getter(v8);
  id v9 = v6;
  sub_100158D64();
  id v10 = v9;
  uint64_t v11 = sub_100158D64();
  uint64_t v12 = Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter(v12);
  if (os_log_type_enabled((os_log_t)v12, v13))
  {
    uint64_t v22 = *(void **)(v0 + 288);
    uint64_t v14 = *(void **)(v0 + 224);
    uint64_t v23 = (os_log_s *)v12;
    uint64_t v12 = sub_10012CE30(22LL);
    uint64_t v15 = (void *)sub_10012CE30(16LL);
    *(void *)(v0 + 120) = v14;
    *(_DWORD *)uint64_t v12 = 138412546;
    id v16 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128);
    *uint64_t v15 = v14;

    *(_WORD *)(v12 + 1sub_100129678(v0 + 2) = 2112;
    uint64_t v17 = v22;
    swift_errorRetain(v22);
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError(v22);
    *(void *)(v0 + 128) = v18;
    sub_100158CB0(v0 + 128, v0 + 136);
    v15[1] = v18;
    sub_100132428();
    sub_100132428();
    sub_100158F8C((void *)&_mh_execute_header, v23, v13, "Failed to cache entity: %@, error: %@", (uint8_t *)v12);
    uint64_t v19 = sub_100129274(&qword_1002B8ED0);
    sub_100158F1C((uint64_t)v15, v20, v19);
    sub_10012CE24((uint64_t)v15);
    sub_10012CE24(v12);

    sub_100132428();
  }

  else
  {
    uint64_t v17 = *(void **)(v0 + 224);
    sub_100158BB8();

    sub_100158BB8();
    sub_100158BB8();
  }

  sub_100158EA0(*(void *)(v0 + 208));
  sub_100158D50();

  sub_1001324F4();
  return (*(uint64_t (**)(void *))(v0 + 8))(v17);
}

uint64_t sub_10015393C(uint64_t a1, uint64_t a2, void *a3, void *aBlock, const void *a5, void *a6)
{
  v6[2] = a3;
  v6[3] = a6;
  uint64_t v12 = _Block_copy(aBlock);
  v6[4] = v12;
  v6[5] = _Block_copy(a5);
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  v6[6] = v13;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v16 = v15;
  v6[7] = v15;
  _Block_copy(v12);
  uint64_t v17 = unk_1002B8F5C;
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1002B8F58
                                                                                     + dword_1002B8F58);
  id v18 = a3;
  id v19 = a6;
  uint64_t v20 = (void *)swift_task_alloc(v17);
  v6[8] = v20;
  *uint64_t v20 = v6;
  v20[1] = sub_100153A54;
  return v22(v13, v14, v16, (uint64_t)v18, (uint64_t)v19, (uint64_t)v12);
}

uint64_t sub_100153A54()
{
  uint64_t v4 = *(void **)(v2 + 16);
  uint64_t v3 = *(void **)(v2 + 24);
  sub_100145134(*(void *)(v2 + 64), v5);

  _Block_release(*(const void **)(v2 + 32));
  uint64_t v8 = sub_100132454(v6, v7);
  sub_100132858(v8, v9);
  if (v0)
  {
    id v10 = (void *)sub_100159058();
    sub_100132428();
    sub_100158B6C();

    sub_100158C9C();
  }

  else
  {
    sub_100158B80();
    sub_100158C9C();
    sub_100158D6C();
  }

  return sub_10012CEAC(*(uint64_t (**)(void))(v1 + 8));
}

id sub_100153AE8( uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10 = v9;
  swift_getObjectType(v10);
  id result = [a5 replyQueue];
  if (result)
  {
    id v18 = result;
    uint64_t v19 = sub_10012AAEC((uint64_t)&unk_100274580, 80LL);
    *(void *)(v19 + 16) = v10;
    *(void *)(v19 + 24) = a1;
    *(void *)(v19 + 3sub_100129678(v0 + 2) = a2;
    *(void *)(v19 + 40) = a3;
    *(_BYTE *)(v19 + 48) = a4 & 1;
    *(void *)(v19 + 56) = a5;
    *(void *)(v19 + 64) = a8;
    *(void *)(v19 + 7sub_100129678(v0 + 2) = a9;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a3);
    id v20 = a5;
    sub_100158FF4();
    id v21 = v10;
    sub_100152D90(a6, a7, v18, (uint64_t)&unk_1002B8F10, v19);

    return (id)swift_release(v19);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100153BE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 176) = a7;
  *(void *)(v8 + 184) = a8;
  *(void *)(v8 + 160) = a4;
  *(void *)(v8 + 168) = a6;
  *(_BYTE *)(v8 + 224) = a5;
  *(void *)(v8 + 144) = a2;
  *(void *)(v8 + 15sub_100129678(v0 + 2) = a3;
  *(void *)(v8 + 136) = a1;
  return swift_task_switch(sub_100153C10, 0LL, 0LL);
}

uint64_t sub_100153C10()
{
  if (v0[18]) {
    v1.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v1.super.Class isa = 0LL;
  }
  v0[24] = v1.super.isa;
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v10 = v0[21];
  unsigned int v9 = *((unsigned __int8 *)v0 + 224);
  uint64_t v4 = (void *)v0[17];
  NSString v5 = String._bridgeToObjectiveC()();
  v0[25] = v5;
  v0[14] = v2;
  v0[15] = v3;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256LL;
  v0[12] = sub_100152D38;
  v0[13] = &unk_100274660;
  uint64_t v6 = _Block_copy(v0 + 10);
  v0[26] = v6;
  swift_retain(v3);
  sub_10014510C();
  v0[7] = v0 + 16;
  uint64_t v7 = sub_100158C8C((uint64_t)sub_100152C90);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = sub_100152D3C;
  v0[13] = &unk_100274688;
  v0[14] = v7;
  [v4 readEntityWithRequest:v1.super.isa bagKey:v5 includeStaleCacheData:v9 clientProxy:v10 entityMaker:v6 completionHandler:v0 + 10];
  return sub_100158B50();
}

id sub_100153D58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_10012CF38();
  uint64_t v4 = (void *)v2(v3);
  uint64_t v5 = sub_10012CF14();
  sub_10012B950(v5, v6);
  return sub_100158CA4(v4);
}

void sub_100153F04()
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v1 = sub_100144B40();
  id v3 = (id)v2(v1);

  sub_100132514();
}

uint64_t sub_100153F60(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 216) = a7;
  *(void *)(v8 + 224) = v7;
  *(void *)(v8 + 200) = a5;
  *(void *)(v8 + 208) = a6;
  *(_BYTE *)(v8 + 400) = a4;
  *(void *)(v8 + 184) = a2;
  *(void *)(v8 + 19sub_100129678(v0 + 2) = a3;
  *(void *)(v8 + 176) = a1;
  *(void *)(v8 + 23sub_100129678(v0 + 2) = sub_10013A730();
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 240) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 248) = v10;
  *(void *)(v8 + 256) = sub_100158C3C(*(void *)(v10 + 64));
  *(void *)(v8 + 264) = sub_100158C4C();
  sub_100132278();
  return sub_100144664(v11, v12, v13);
}

uint64_t sub_100153FCC()
{
  *(void *)(v0 + 27sub_100129678(v0 + 2) = v1;
  *(void *)(v0 + 280) = v2;
  id v3 = (void *)swift_task_alloc(dword_1002B8ECC);
  *(void *)(v0 + 288) = v3;
  void *v3 = v0;
  v3[1] = sub_100154020;
  uint64_t v4 = sub_100144970(*(void *)(v0 + 200));
  return sub_100158D2C(v4);
}

uint64_t sub_100154020()
{
  *(void *)(v1 + 296) = v0;
  sub_100158EA8(v2);
  sub_100132278();
  return sub_100144664(v3, v4, v5);
}

uint64_t sub_10015405C()
{
  uint64_t v1 = (void *)v0[37];
  NSString v2 = String._bridgeToObjectiveC()();
  v0[38] = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  v0[39] = v3;
  v0[7] = v0 + 15;
  uint64_t v4 = sub_100158C8C((uint64_t)sub_10015411C);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  sub_100158F6C(v4, (uint64_t)sub_100154EAC);
  [v1 fetchWithBagKey:v2 id:v3 completionHandler:v5];
  return sub_100158DF8();
}

uint64_t sub_10015411C()
{
  *(void *)(v0 + 320) = v1;
  sub_100132278();
  return sub_100144664(v2, v3, v4);
}

uint64_t sub_10015415C()
{
  uint64_t v2 = *(void **)(v0 + 304);
  uint64_t v1 = *(void **)(v0 + 312);
  uint64_t v3 = *(char **)(v0 + 120);
  swift_unknownObjectRelease(*(void *)(v0 + 296));

  if (v3 && ((*(_BYTE *)(v0 + 400) & 1) != 0 || (v3[OBJC_IVAR___GKFetchedEntity_isExpired] & 1) == 0))
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 280), v4);
    swift_unknownObjectRetain(*(void *)&v3[OBJC_IVAR___GKFetchedEntity_entity]);

    sub_100158FEC();
    sub_1001446D0();
    uint64_t v11 = sub_10013261C();
    return sub_100158AF0(v11, v12);
  }

  else
  {
    *(void *)(v0 + 328) = v3;
    uint64_t v5 = (void *)swift_task_alloc(dword_1002B8EF4);
    *(void *)(v0 + 336) = v5;
    uint64_t v6 = sub_100158DDC(v5, (uint64_t)sub_100154210);
    return sub_1001531D4(v6, v7, v8, v9);
  }

uint64_t sub_100154210(uint64_t a1, double a2)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 336);
  *(void *)(v5 + 344) = a1;
  *(void *)(v5 + 35sub_100129678(v0 + 2) = v2;
  sub_100158EA8(v6);
  if (!v2) {
    *(double *)(v5 + 360) = a2;
  }
  sub_100132278();
  return sub_100158B10(v7, v8, v9);
}

uint64_t sub_100154280()
{
  __int128 v13 = *(_OWORD *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v3 = sub_10012AAEC((uint64_t)&unk_1002744A0, 48LL);
  *(void *)(v0 + 368) = v3;
  *(_OWORD *)(v3 + 16) = v13;
  *(void *)(v3 + 3sub_100129678(v0 + 2) = v2;
  *(void *)(v3 + 40) = v1;
  uint64_t v4 = dword_1002B8EFC;
  sub_10012CF38();
  uint64_t v5 = (void *)swift_task_alloc(v4);
  *(void *)(v0 + 376) = v5;
  void *v5 = v0;
  v5[1] = sub_100154324;
  uint64_t v6 = sub_100144970(*(void *)(v0 + 184));
  return sub_100153350(v6, v7, v8, v9, v10, v3, v11);
}

uint64_t sub_100154324(uint64_t a1)
{
  v2[48] = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = swift_release(v2[46]);
  sub_1001322A0(v6, v7);
  if (!v1) {
    v2[49] = a1;
  }
  sub_100132278();
  return sub_100158B10(v8, v9, v10);
}

uint64_t sub_100154394()
{
  sub_100158FEC();
  sub_1001446D0();
  uint64_t v1 = sub_10013261C();
  return sub_1001325E0(v1, v2);
}

uint64_t sub_1001543CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28)
{
  a27 = v29;
  a28 = v30;
  a26 = v28;
  uint64_t v31 = (void *)v28[39];
  uint64_t v32 = v28[37];
  uint64_t v33 = (void *)v28[38];
  uint64_t v34 = (os_log_s *)v28[33];
  swift_willThrow(v30);

  uint64_t v35 = swift_unknownObjectRelease(v32);
  static GKLog.cache.getter(v35);
  sub_1001325D8();
  sub_100144D2C();
  sub_100158D64();
  sub_1001325D8();
  sub_100144D2C();
  uint64_t v36 = sub_100158D64();
  uint64_t v37 = v34;
  Logger.logObject.getter(v36);
  os_log_type_t v38 = sub_100158D38();
  if (os_log_type_enabled(v34, v38))
  {
    uint64_t v39 = v28[40];
    uint64_t v40 = v28[35];
    uint64_t v64 = v28[31];
    uint64_t v65 = v28[30];
    uint64_t v66 = v28[33];
    unint64_t v41 = v28[24];
    uint64_t v61 = v28[23];
    uint64_t v42 = sub_10012CE30(32LL);
    uint64_t v62 = (void *)sub_10012CE30(8LL);
    uint64_t v63 = sub_10012CE30(64LL);
    a16 = v63;
    *(_DWORD *)uint64_t v42 = 136315650;
    sub_10013A624();
    uint64_t v43 = sub_100144870();
    v28[19] = sub_100135074(v43, v44, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 19, v28 + 20);
    sub_100135A44(v40);
    *(_WORD *)(v42 + 1sub_100129678(v0 + 2) = 2080;
    swift_bridgeObjectRetain(v41);
    v28[20] = sub_100135074(v61, v41, &a16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 20, v28 + 21);
    sub_100135A44(v41);
    *(_WORD *)(v42 + sub_10013CDB0(v0 + 22) = 2112;
    swift_errorRetain(v39);
    uint64_t v46 = _swift_stdlib_bridgeErrorToNSError(v39);
    v28[21] = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 21, v28 + 22);
    *uint64_t v62 = v46;
    sub_100158F94();
    sub_100158F94();
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "Failed to fetch entity ID: %s, bagKey: %s, from cache: %@",  (uint8_t *)v42,  0x20u);
    uint64_t v47 = sub_100129274(&qword_1002B8ED0);
    sub_10012CE88((uint64_t)v62, v48, v47);
    sub_10012CE24((uint64_t)v62);
    sub_100158F1C(v63, v49, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v63);
    sub_10012CE24(v42);

    sub_100158F94();
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v66, v65);
  }

  else
  {
    uint64_t v50 = v28[35];
    uint64_t v51 = v28[33];
    uint64_t v52 = v28[30];
    uint64_t v53 = v28[31];
    uint64_t v54 = v28[24];
    sub_100132428();
    sub_100135A28(v54);
    sub_100135A28(v50);
    sub_100132428();
    sub_100132428();

    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v51, v52);
  }

  v28[41] = 0LL;
  uint64_t v55 = (void *)swift_task_alloc(dword_1002B8EF4);
  v28[42] = v55;
  sub_100158DDC(v55, (uint64_t)sub_100154210);
  sub_100144B7C();
  return sub_1001531D4(v56, v57, v58, v59);
}

void sub_10015466C()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = (void *)_convertErrorToNSError(_:)(v0[44]);
  uint64_t v3 = sub_100154EF4();
  uint64_t v5 = (void *)v0[41];
  if ((v3 & 1) != 0 && v1)
  {
    uint64_t v6 = (os_log_s *)v0[32];
    uint64_t v7 = v5;
    static GKLog.cache.getter(v7);
    sub_100144E9C();
    sub_100135A3C();
    sub_10013A69C();
    sub_100144E9C();
    uint64_t v8 = sub_100135A3C();
    uint64_t v9 = v6;
    Logger.logObject.getter(v8);
    os_log_type_t v10 = sub_100158D38();
    BOOL v11 = os_log_type_enabled(v6, v10);
    unint64_t v12 = v0[35];
    if (v11)
    {
      uint64_t v13 = v0[34];
      uint64_t v30 = v0[31];
      uint64_t v31 = v0[30];
      uint64_t v32 = v0[32];
      unint64_t v14 = v0[24];
      uint64_t v27 = v0[23];
      uint64_t v15 = sub_10012CE30(32LL);
      uint64_t v28 = (void *)sub_10012CE30(8LL);
      uint64_t v29 = sub_10012CE30(64LL);
      v33[0] = v29;
      *(_DWORD *)uint64_t v15 = 136315650;
      sub_100144D2C();
      v0[16] = sub_100135074(v13, v12, v33);
      sub_100158CB0((uint64_t)(v0 + 16), (uint64_t)(v0 + 17));
      sub_100135A44(v12);
      *(_WORD *)(v15 + 1sub_100129678(v0 + 2) = 2080;
      sub_1001296D0();
      v0[17] = sub_100135074(v27, v14, v33);
      sub_100158CB0((uint64_t)(v0 + 17), (uint64_t)(v0 + 18));
      sub_100135A44(v14);
      *(_WORD *)(v15 + sub_10013CDB0(v0 + 22) = 2112;
      sub_100135A3C();
      uint64_t v16 = sub_100159024();
      v0[18] = v16;
      sub_100158CB0((uint64_t)(v0 + 18), (uint64_t)(v0 + 19));
      void *v28 = v16;
      sub_1001359B4();
      sub_1001359B4();
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Using cache fallback for entity ID: %s, bagKey: %s after request error: %@",  (uint8_t *)v15,  0x20u);
      uint64_t v17 = sub_100129274(&qword_1002B8ED0);
      sub_10012CE88((uint64_t)v28, v18, v17);
      sub_10012CE24((uint64_t)v28);
      sub_100158F1C(v29, v19, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v29);
      sub_10012CE24(v15);

      sub_1001359B4();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
    }

    else
    {
      uint64_t v22 = v0[24];

      sub_1001359B4();
      sub_100135A28(v12);
      sub_100135A28(v22);
      sub_1001359B4();
      sub_1001359B4();

      uint64_t v23 = sub_100158D74();
      v25(v23, v24);
    }

    swift_unknownObjectRetain(*(void *)&v7[OBJC_IVAR___GKFetchedEntity_entity]);

    sub_100158FEC();
    sub_1001446D0();
    sub_10013261C();
    sub_10013265C();
    __asm { BR              X1 }
  }

  uint64_t v20 = sub_100132324(v3, v4);
  swift_willThrow(v20);

  sub_1001446D0();
  sub_1001447A4();
  sub_10013265C();
  __asm { BR              X0 }

uint64_t sub_100154978()
{
  sub_1001446D0();
  sub_1001447A4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001549C0(char *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = swift_bridgeObjectRetain(a1);
    unint64_t v5 = sub_100155620(v4);
    if (v5)
    {
      uint64_t v7 = v5;
      sub_100132324(v5, v6);
      swift_bridgeObjectRetain_n(v7, 2LL);
      sub_10014A3E4(v7);
      uint64_t v9 = (char *)v8;
      sub_10012B950(v8, v10);
      id v21 = v9;
      sub_100156CF4(&v21);
      sub_10012B950(v11, v12);
      sub_1001296D0();
      uint64_t v13 = sub_100158D74();
      uint64_t v15 = (char *)sub_10014CF3C(v13, v14);
      sub_10012B950((uint64_t)v15, v16);
      sub_10012CF14();
      id v21 = v15;
      uint64_t v17 = sub_100129274(&qword_1002B8E80);
      sub_100157C90((uint64_t)&unk_1002B8E88);
      BidirectionalCollection<>.joined(separator:)(124LL, 0xE100000000000000LL, v17, v18);
      uint64_t v20 = v15;
    }

    else
    {
      Dictionary.description.getter(a1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8);
      uint64_t v20 = a1;
    }

    swift_bridgeObjectRelease(v20, v19);
  }

  else
  {
    swift_bridgeObjectRetain(a3);
  }

  sub_100144870();
  sub_100020800();
}

uint64_t sub_100154AFC(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[19] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[20] = v4;
  v2[21] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100154B5C, 0LL, 0LL);
}

uint64_t sub_100154B5C()
{
  id v1 = [*(id *)(v0 + 144) playerCredentialsForClientProxy:*(void *)(v0 + 136)];
  if (!v1
    || (uint64_t v2 = v1, v3 = [v1 playerInternal], v2, !v3))
  {
    uint64_t v18 = *(os_log_s **)(v0 + 168);
    uint64_t v19 = *(void **)(v0 + 136);
    sub_100158CB8();
    Logger.logObject.getter(v19);
    os_log_type_t v20 = sub_100158D38();
    BOOL v21 = os_log_type_enabled(v18, v20);
    uint64_t v22 = *(void **)(v0 + 136);
    if (v21)
    {
      uint64_t v23 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v24 = (void *)sub_10012CE30(8LL);
      *(_DWORD *)uint64_t v23 = 138412290;
      *(void *)(v0 + 120) = v22;
      id v25 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128);
      *uint64_t v24 = v22;

      _os_log_impl( (void *)&_mh_execute_header,  v18,  v20,  "No playerID associated with %@, defaulting to NOOP cache",  v23,  0xCu);
      uint64_t v26 = sub_100129274(&qword_1002B8ED0);
      sub_10012CE88((uint64_t)v24, v27, v26);
      sub_10012CE24((uint64_t)v24);
      sub_10012CE24((uint64_t)v23);
    }

    else
    {
    }

    sub_100158EA0(*(void *)(v0 + 160));
    uint64_t v28 = type metadata accessor for NoopEntityCache();
    swift_initStaticObject(v28, &unk_1002B7F48);
    swift_task_dealloc(*(void *)(v0 + 168));
    sub_1001485A4();
    __asm { BR              X1 }
  }

  unint64_t v5 = *(void **)(v0 + 136);
  uint64_t v4 = *(void **)(v0 + 144);
  id v6 = [v3 playerID];

  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v8 = v7;

  id v9 = [v4 entityCacheProvider];
  *(void *)(v0 + 176) = v9;
  NSString v10 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 184) = v10;
  swift_bridgeObjectRelease(v8, v11);
  uint64_t result = sub_10015774C(v5);
  if (v13)
  {
    NSString v14 = String._bridgeToObjectiveC()();
    *(void *)(v0 + 19sub_100129678(v0 + 2) = v14;
    sub_100132454((uint64_t)v14, v15);
    *(void *)(v0 + 56) = v0 + 128;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_100154E18;
    uint64_t v16 = swift_continuation_init(v0 + 16, 0LL);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    uint64_t v17 = v0 + 80;
    *(void *)(v17 + 8) = 0x40000000LL;
    sub_100158F6C(v16, (uint64_t)sub_1001560A8);
    [v9 getCacheWithPlayerID:v10 language:v14 completionHandler:v17];
    sub_1001485A4();
    return swift_continuation_await();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100154E18()
{
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_100154E58()
{
  uint64_t v2 = *(void **)(v0 + 184);
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 128);
  swift_unknownObjectRelease(*(void *)(v0 + 176));

  swift_task_dealloc(*(void *)(v0 + 168));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_100154EAC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    return sub_10017BC0C(v3, a3);
  }
  id v6 = a2;
  return sub_10017BC70(v3, (uint64_t)a2);
}

uint64_t sub_100154EF4()
{
  id v1 = [v0 domain];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKErrorDomain);
  if (v2 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(v4, 2LL);
  }

  else
  {
    uint64_t v8 = v6;
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0LL);
    swift_bridgeObjectRelease(v4, v10);
    swift_bridgeObjectRelease(v8, v11);
    if ((v9 & 1) == 0) {
      return (uint64_t)[v0 gkIsNotConnectedToInternetError];
    }
  }

  if ([v0 code] == (id)3) {
    return 1LL;
  }
  return (uint64_t)[v0 gkIsNotConnectedToInternetError];
}

#error "10015502C: call analysis failed (funcsize=29)"
void __cdecl -[GKNetworkRequestManager readEntityWithRequest:bagKey:includeStaleCacheData:clientProxy:entityMaker:completionHandler:]( GKNetworkRequestManager *self,  SEL a2,  NSDictionary *a3,  NSString *a4,  BOOL a5,  GKClientProxy *a6,  id a7)
{
  const void *v7;
  const void *v8;
  void *v14;
  void *v15;
  uint64_t v16;
  NSDictionary *v17;
  NSString *v18;
  GKClientProxy *v19;
  GKNetworkRequestManager *v20;
  uint64_t v8 = v7;
  NSString v14 = _Block_copy(a7);
  uint64_t v15 = _Block_copy(v8);
  uint64_t v16 = swift_allocObject(&unk_100274438, 72LL, 7LL);
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  *(_BYTE *)(v16 + 3sub_100129678(v0 + 2) = a5;
  *(void *)(v16 + 40) = a6;
  *(void *)(v16 + 48) = v14;
  *(void *)(v16 + 56) = v15;
  *(void *)(v16 + 64) = self;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a6;
  os_log_type_t v20 = self;
  sub_100188AB4((uint64_t)&unk_1002B8EE0, v16);
}

uint64_t sub_1001550E8(uint64_t a1, uint64_t a2, char a3, void *a4, void *aBlock, const void *a6, void *a7)
{
  v7[2] = a4;
  v7[3] = a7;
  NSString v14 = _Block_copy(aBlock);
  void v7[4] = _Block_copy(a6);
  if (a1) {
    a1 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  v7[5] = a1;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v17 = v16;
  v7[6] = v16;
  uint64_t v18 = swift_allocObject(&unk_100274460, 24LL, 7LL);
  v7[7] = v18;
  *(void *)(v18 + 16) = v14;
  uint64_t v19 = dword_1002B8EEC;
  id v20 = a4;
  a7;
  BOOL v21 = (void *)swift_task_alloc(v19);
  v7[8] = v21;
  *BOOL v21 = v7;
  v21[1] = sub_100155214;
  return sub_100153F60(a1, v15, v17, a3 & 1, (uint64_t)v20, (uint64_t)sub_100158A2C, v18);
}

uint64_t sub_100155214()
{
  uint64_t v4 = (void *)v2[2];
  uint64_t v3 = (void *)v2[3];
  sub_100145134(v2[8], v5);

  uint64_t v6 = sub_10014510C();
  sub_100132454(v6, v7);
  swift_bridgeObjectRelease(v2[5], v8);
  if (v0)
  {
    char v9 = (void *)sub_100159058();
    sub_100132428();
    sub_100158B6C();

    sub_100158C9C();
  }

  else
  {
    sub_100158B80();
    sub_100158C9C();
    sub_100158D6C();
  }

  return sub_100158B94(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100155294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[15] = a1;
  v3[16] = a2;
  uint64_t v5 = (void *)swift_task_alloc(dword_1002B8ECC);
  v3[17] = v5;
  void *v5 = v3;
  v5[1] = sub_1001552E4;
  return sub_100154AFC(a3);
}

uint64_t sub_1001552E4()
{
  *(void *)(v1 + 144) = v0;
  sub_100158EA8(v2);
  sub_100132278();
  return sub_100144664(v3, v4, v5);
}

uint64_t sub_100155320()
{
  if (v0[16]) {
    NSString v1 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v1 = 0LL;
  }
  uint64_t v2 = v0 + 2;
  v0[19] = v1;
  uint64_t v3 = (void *)v0[18];
  uint64_t v4 = sub_100158EF0((uint64_t)sub_1001553C8);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  sub_100158F6C(v4, (uint64_t)sub_1001659CC);
  [v3 deleteWithBagKey:v1 completionHandler:v5];
  return swift_continuation_await(v2);
}

uint64_t sub_1001553C8()
{
  *(void *)(v0 + 160) = v1;
  sub_100132278();
  return sub_100144664(v2, v3, v4);
}

uint64_t sub_100155408()
{
  uint64_t v1 = *(void **)(v0 + 152);
  swift_unknownObjectRelease(*(void *)(v0 + 144));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100155440(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 152);
  swift_willThrow(a1);
  sub_100158D6C();

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100155500(uint64_t a1, void *a2, void *aBlock, void *a4)
{
  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  v4[5] = v9;
  uint64_t v10 = dword_1002B8EC4;
  id v11 = a2;
  a4;
  uint64_t v12 = (void *)swift_task_alloc(v10);
  v4[6] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_1001555B0;
  return sub_100155294(a1, v9, (uint64_t)v11);
}

uint64_t sub_1001555B0()
{
  uint64_t v4 = *(void **)(v2 + 16);
  uint64_t v3 = *(void **)(v2 + 24);
  sub_100145134(*(void *)(v2 + 48), v5);

  sub_10012B950(v6, v7);
  uint64_t v8 = *(void *)(v2 + 32);
  if (v0)
  {
    uint64_t v9 = (void *)sub_100158D80();
    sub_100158BB8();
    sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16));
  }

  else
  {
    sub_100158B00();
  }

  _Block_release(*(const void **)(v2 + 32));
  return sub_100144770(*(uint64_t (**)(void))(v1 + 8));
}

unint64_t sub_100155620(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100129274(&qword_1002B8EA0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }

  sub_10017BB54(v46, a1);
  uint64_t v4 = v46[0];
  uint64_t v5 = v46[3];
  int64_t v33 = (unint64_t)(v46[2] + 64LL) >> 6;
  uint64_t v34 = v46[1];
  unint64_t v6 = v46[4];
  uint64_t v7 = &__src[40];
  uint64_t v8 = &__dst[40];
  uint64_t v9 = &v40;
  uint64_t v10 = &v42;
  unint64_t result = swift_bridgeObjectRetain(a1);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v35 = (v6 - 1) & v6;
  int64_t v36 = v5;
  for (unint64_t i = __clz(__rbit64(v6)) | (v5 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v15 << 6))
  {
    sub_10012A22C(*(void *)(v4 + 48) + 40 * i, (uint64_t)__src);
    sub_100129604(*(void *)(v4 + 56) + 32 * i, (uint64_t)v7);
    memcpy(__dst, __src, sizeof(__dst));
    sub_10012A22C((uint64_t)__dst, (uint64_t)v39);
    if (!swift_dynamicCast(&v37, v39, &type metadata for AnyHashable, &type metadata for String, 6LL))
    {
      uint64_t v37 = 0LL;
      uint64_t v38 = 0LL;
      sub_100131288((uint64_t)__dst, &qword_1002B8EA8);
      swift_bridgeObjectRelease(v38, v32);
      sub_100132050(v4);
      swift_release(v3);
      return 0LL;
    }

    uint64_t v17 = v37;
    uint64_t v18 = v38;
    sub_100129604((uint64_t)v8, (uint64_t)v39);
    sub_100131288((uint64_t)__dst, &qword_1002B8EA8);
    sub_1001295F4(v39, v9);
    *(void *)&__int128 v41 = v17;
    *((void *)&v41 + 1) = v18;
    sub_1001295F4(v9, v10);
    __int128 v19 = v41;
    sub_1001295F4(v10, v43);
    sub_1001295F4(v43, &v41);
    unint64_t result = sub_10014A480(v19, *((uint64_t *)&v19 + 1));
    unint64_t v21 = result;
    if ((v20 & 1) != 0)
    {
      uint64_t v22 = v10;
      uint64_t v23 = v9;
      uint64_t v24 = v8;
      uint64_t v25 = v4;
      uint64_t v26 = v7;
      uint64_t v27 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(void *)(v27 + 8), v20);
      *(_OWORD *)uint64_t v27 = v19;
      uint64_t v7 = v26;
      uint64_t v4 = v25;
      uint64_t v8 = v24;
      uint64_t v9 = v23;
      uint64_t v10 = v22;
      uint64_t v28 = (void *)(v3[7] + 32 * v21);
      sub_100129678(v28);
      unint64_t result = (unint64_t)sub_1001295F4(&v41, v28);
      goto LABEL_28;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_OWORD *)(v3[6] + 16 * result) = v19;
    unint64_t result = (unint64_t)sub_1001295F4(&v41, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v29 = v3[2];
    BOOL v30 = __OFADD__(v29, 1LL);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_34;
    }
    v3[2] = v31;
LABEL_28:
    unint64_t v6 = v35;
    uint64_t v5 = v36;
    if (v35) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_35;
    }
    if (v13 >= v33) {
      goto LABEL_31;
    }
    unint64_t v14 = *(void *)(v34 + 8 * v13);
    int64_t v15 = v5 + 1;
    if (!v14)
    {
      int64_t v15 = v5 + 2;
      if (v5 + 2 >= v33) {
        goto LABEL_31;
      }
      unint64_t v14 = *(void *)(v34 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v5 + 3;
        if (v5 + 3 >= v33) {
          goto LABEL_31;
        }
        unint64_t v14 = *(void *)(v34 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v5 + 4;
          if (v5 + 4 >= v33) {
            goto LABEL_31;
          }
          unint64_t v14 = *(void *)(v34 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v5 + 5;
            if (v5 + 5 >= v33) {
              goto LABEL_31;
            }
            unint64_t v14 = *(void *)(v34 + 8 * v15);
            if (!v14)
            {
              int64_t v16 = v5 + 6;
              while (v16 < v33)
              {
                unint64_t v14 = *(void *)(v34 + 8 * v16++);
                if (v14)
                {
                  int64_t v15 = v16 - 1;
                  goto LABEL_21;
                }
              }

uint64_t destroy for EntityCacheProvider.EntityCacheKey(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24), v3);
}

void *initializeWithCopy for EntityCacheProvider.EntityCacheKey(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for EntityCacheProvider.EntityCacheKey(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6);
  a1[2] = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a1[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8, v9);
  return a1;
}

__n128 initializeWithTake for EntityCacheProvider.EntityCacheKey(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for EntityCacheProvider.EntityCacheKey(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5, a2);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityCacheProvider.EntityCacheKey(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(sub_10012CFB4(v1, v0, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10012CFB4(v1, v0, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10012CFB4(v1, v0, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EntityCacheProvider.EntityCacheKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 3sub_100129678(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 3sub_100129678(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for EntityCacheProvider.EntityCacheKey()
{
  return &type metadata for EntityCacheProvider.EntityCacheKey;
}

ValueMetadata *type metadata accessor for EntityCacheSchemaV1()
{
  return &type metadata for EntityCacheSchemaV1;
}

ValueMetadata *type metadata accessor for EntityCacheSchemaV1.CachedEntity._SwiftDataNoType()
{
  return &type metadata for EntityCacheSchemaV1.CachedEntity._SwiftDataNoType;
}

unint64_t sub_100155C68()
{
  unint64_t result = qword_1002B8E18;
  if (!qword_1002B8E18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3AB4, &type metadata for EntityCacheProvider.EntityCacheKey);
    atomic_store(result, (unint64_t *)&qword_1002B8E18);
  }

  return result;
}

void sub_100155CA4()
{
}

uint64_t sub_100155CD0( uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a7;
  v8[18] = a8;
  _BYTE v8[16] = a6;
  id v11 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v9 = (void *)swift_task_alloc(a4[1]);
  v8[19] = v9;
  *uint64_t v9 = v8;
  v9[1] = sub_100155D2C;
  return v11();
}

uint64_t sub_100155D2C()
{
  *(void *)(v2 + 160) = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    *(void *)(v2 + 168) = v0;
  }
  sub_100132278();
  return sub_1001321F0();
}

uint64_t sub_100155D80()
{
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v5 = (void *)sub_10012AAEC((uint64_t)&unk_100274620, 40LL);
  v5[2] = v3;
  v5[3] = v4;
  v5[4] = v2;
  v0[12] = sub_100157CFC;
  v0[13] = v5;
  v0[8] = _NSConcreteStackBlock;
  v0[9] = 1107296256LL;
  v0[10] = sub_10012A550;
  v0[11] = &unk_100274638;
  _Block_copy(v0 + 8);
  uint64_t v6 = sub_100158F48();
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  sub_100158BAC(*(void *)(v20 + 64));
  sub_10012CF38();
  uint64_t v7 = swift_unknownObjectRetain(v2);
  static DispatchQoS.unspecified.getter(v7);
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  sub_100158BAC(*(void *)(*(void *)(v8 - 8) + 64LL));
  v0[15] = _swiftEmptyArrayStorage;
  sub_100158464((uint64_t)&unk_1002B8F30);
  sub_100129274(&qword_1002B8F38);
  sub_100157C90((uint64_t)&unk_1002B8F40);
  sub_100158C1C(v9);
  sub_100158D04();
  _Block_release(v1);
  swift_unknownObjectRelease(v2);
  uint64_t v10 = sub_100158EE0();
  sub_100158ED0(v10, v11, v12, v13, v14, v15, v16, v17, v19, v2, v20, v21);
  sub_100158E08();
  sub_100144AFC();
  swift_release(v0[13]);
  return sub_100144670((uint64_t (*)(void))v0[1]);
}

uint64_t sub_100155EF4()
{
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v5 = (void *)sub_10012AAEC((uint64_t)&unk_1002745D0, 40LL);
  v5[2] = v3;
  v5[3] = v4;
  v5[4] = v2;
  v0[6] = sub_100157C84;
  v0[7] = v5;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256LL;
  v0[4] = sub_10012A550;
  v0[5] = &unk_1002745E8;
  _Block_copy(v0 + 2);
  uint64_t v6 = sub_100158F48();
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  sub_100158BAC(*(void *)(v20 + 64));
  sub_10012CF38();
  uint64_t v7 = sub_100135A3C();
  static DispatchQoS.unspecified.getter(v7);
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  sub_100158BAC(*(void *)(*(void *)(v8 - 8) + 64LL));
  v0[14] = _swiftEmptyArrayStorage;
  sub_100158464((uint64_t)&unk_1002B8F30);
  sub_100129274(&qword_1002B8F38);
  sub_100157C90((uint64_t)&unk_1002B8F40);
  sub_100158C1C(v9);
  sub_100158D04();
  _Block_release(v1);
  swift_errorRelease(v2);
  uint64_t v10 = sub_100158EE0();
  sub_100158ED0(v10, v11, v12, v13, v14, v15, v16, v17, v19, v2, v20, v21);
  sub_100158E08();
  sub_100144AFC();
  swift_release(v0[7]);
  return sub_100144670((uint64_t (*)(void))v0[1]);
}

void sub_100156064(void (*a1)(void, id), uint64_t a2, uint64_t a3)
{
  id v4 = (id)_convertErrorToNSError(_:)(a3);
  a1(0LL, v4);
}

uint64_t sub_1001560A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  swift_unknownObjectRetain(a2);
  return sub_10016F210(v3, a2);
}

void sub_1001560D8(uint64_t a1, void *a2, Class isa, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_100129274(&qword_1002B8F00);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  NSString v13 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v10);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = (v14 + 16) & ~v14;
  uint64_t v16 = swift_allocObject(&unk_1002744E0, v15 + v12, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))( v16 + v15,  (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
  aBlock[4] = sub_100157A28;
  uint64_t v19 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100156328;
  aBlock[3] = &unk_1002744F8;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release(v19);
  [a2 issueRequest:isa bagKey:v13 clientProxy:a6 handler:v17];
  _Block_release(v17);
}

id sub_100156270(uint64_t a1, uint64_t a2, double a3)
{
  if (a2)
  {
    v7[0] = a2;
    swift_errorRetain(a2);
LABEL_3:
    uint64_t v3 = sub_100129274(&qword_1002B8F00);
    return (id)CheckedContinuation.resume(throwing:)(v7, v3);
  }

  if (a1)
  {
    v7[0] = a1;
    *(double *)&v7[1] = a3;
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = sub_100129274(&qword_1002B8F00);
    return (id)CheckedContinuation.resume(returning:)(v7, v5);
  }

  else
  {
    uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___NSError);
    id result = sub_1001577AC(3LL, 0xD000000000000021LL, 0x800000010024CD30LL, v6);
    if (result)
    {
      v7[0] = result;
      goto LABEL_3;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100156328(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v7 = *(void (**)(uint64_t, void *, double))(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (a2) {
    uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  else {
    uint64_t v8 = 0LL;
  }
  swift_retain(v6);
  id v9 = a3;
  v7(v8, a3, a4);
  swift_release(v6);

  return swift_bridgeObjectRelease(v8, v10);
}

Swift::Int sub_1001563CC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  sub_100158464((uint64_t)&unk_1002B8E38);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

void (*sub_100156444(void *a1))(__int128 **a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_10014DC84((uint64_t)v3);
  return sub_100156490;
}

void sub_100156490(__int128 **a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    uint64_t v3 = sub_100144870();
    sub_10012D388(v3, v4);
    sub_10014DCCC((__int128 *)((char *)v2 + 40));
    sub_100129678(v2);
  }

  else
  {
    sub_10014DCCC(*a1);
  }

  free(v2);
}

Swift::Int sub_1001564F0()
{
  return sub_1001563CC();
}

uint64_t sub_100156510(uint64_t a1, uint64_t a2)
{
  return PersistentModel.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100156568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_1001565C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10014D2E0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001565EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  sub_100158464((uint64_t)&unk_1002B8E50);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t AppMetadataCache.modelContainer.getter()
{
  return swift_retain(*(void *)(v0 + 32));
}

uint64_t AppMetadataCache.modelExecutor.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 16));
}

void *sub_10015666C()
{
  return &protocol witness table for String;
}

void sub_100156678()
{
}

void sub_1001566A4()
{
}

void sub_1001566D0()
{
}

void sub_1001566FC()
{
}

#error "100156738: call analysis failed (funcsize=7)"
#error "100156754: call analysis failed (funcsize=7)"
void sub_100156760(uint64_t *a1@<X8>)
{
  uint64_t v2;
  *a1 = sub_10014D460();
  a1[1] = v2;
  sub_100132514();
}

unint64_t sub_100156784()
{
  unint64_t result = qword_1002B8E60;
  if (!qword_1002B8E60)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002B8E60);
  }

  return result;
}

void sub_1001567C0(uint64_t *a1@<X8>)
{
  *a1 = sub_10014D2E0();
  a1[1] = v2;
  sub_100132514();
}

void sub_1001567E4(uint64_t *a1@<X8>)
{
  *a1 = sub_10014D240();
  a1[1] = v2;
  sub_100132514();
}

uint64_t sub_100156808(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 3sub_100129678(v0 + 2) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_100156820(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  *a2 = sub_100158FBC(a1);
  sub_100132514();
}

uint64_t sub_100156840(uint64_t (*a1)(void))
{
  return sub_100158FBC(a1) & 1;
}

uint64_t sub_100156860(uint64_t (*a1)(void))
{
  return sub_100158FBC(a1);
}

unint64_t sub_100156880(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

#error "1001568E4: call analysis failed (funcsize=37)"
#error "100156994: call analysis failed (funcsize=39)"
uint64_t sub_1001569DC()
{
  uint64_t v0;
  char v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  sub_100158D94();
  __int128 v2 = sub_10014A4D0();
  sub_100158C70(v2, v3);
  if ((v1 & 1) == 0) {
    return 0LL;
  }
  sub_100158E98();
  sub_100158B34();
  uint64_t v4 = sub_100129274(&qword_1002B9198);
  sub_100158BD4(v4, v5, v6, v7, v8, v9, v10, v11, v17, v18);
  uint64_t v12 = *(void *)(v19 + 48);
  NSString v13 = type metadata accessor for NWEndpoint(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))( v12 + *(void *)(*(void *)(v13 - 8) + 72LL) * v0,  v13);
  sub_100158E78();
  sub_100158FC4((uint64_t)&qword_1002B91A0);
  uint64_t v14 = _NativeDictionary._delete(at:)(v0, v19);
  sub_100158DB4(v14, v15);
  return v12;
}

uint64_t sub_100156ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v5;
  swift_bridgeObjectRetain(*v5);
  unint64_t v11 = sub_10014A530(a1, a2, a3, a4);
  LOBYTE(a4) = v12;
  swift_bridgeObjectRelease(v10, v12);
  if ((a4 & 1) == 0) {
    return 0LL;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  uint64_t v24 = *v5;
  uint64_t v14 = *v5;
  void *v5 = 0x8000000000000000LL;
  Swift::Int v15 = *(void *)(v14 + 24);
  sub_100129274(&qword_1002B8F80);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v15);
  uint64_t v16 = *(void *)(v24 + 48) + 32 * v11;
  uint64_t v17 = *(void *)(v16 + 24);
  swift_bridgeObjectRelease(*(void *)(v16 + 8), v18);
  swift_bridgeObjectRelease(v17, v19);
  uint64_t v20 = *(void *)(*(void *)(v24 + 56) + 8 * v11);
  sub_100129274(&qword_1002B8F88);
  sub_100157E5C();
  _NativeDictionary._delete(at:)(v11, v24);
  uint64_t v21 = *v5;
  void *v5 = v24;
  swift_bridgeObjectRelease(v21, v22);
  return v20;
}

void sub_100156BE8()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_1001325D8();
  unint64_t v8 = sub_10014A480(v5, v3);
  LOBYTE(sub_100145134(*(void *)(v2 + 40), v3) = v9;
  sub_100132454(v8, v9);
  if ((v3 & 1) != 0)
  {
    char v10 = sub_100158E98();
    uint64_t v18 = *v1;
    uint64_t v11 = *v1;
    uint64_t *v1 = 0x8000000000000000LL;
    Swift::Int v12 = *(void *)(v11 + 24);
    sub_100129274(&qword_1002B9190);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v12);
    sub_100158F24(v13, *(void *)(v18 + 48) + 16 * v8);
    uint64_t v14 = *(void *)(v18 + 56) + 40 * v8;
    __int128 v15 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v14;
    *(_OWORD *)(v7 + 16) = v15;
    *(void *)(v7 + 3sub_100129678(v0 + 2) = *(void *)(v14 + 32);
    _NativeDictionary._delete(at:)(v8, v18);
    uint64_t v16 = *v1;
    uint64_t *v1 = v18;
    swift_bridgeObjectRelease(v16, v17);
  }

  else
  {
    *(void *)(v7 + 3sub_100129678(v0 + 2) = 0LL;
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    sub_100158BC0();
  }

void sub_100156CF4(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_100157830((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v4[0] = (uint64_t)(v2 + 32);
  v4[1] = v3;
  sub_100156D5C(v4);
  *a1 = v2;
}

void sub_100156D5C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_1001573C0(0LL, v3, 1LL, a1);
      }
      return;
    }

LABEL_145:
    __break(1u);
    goto LABEL_146;
  }

  Swift::Int v5 = v4;
  sub_1001374C4(v3 / 2);
  uint64_t v110 = v7;
  uint64_t v111 = v3;
  uint64_t v112 = v6;
  uint64_t v108 = a1;
  if (v3 > 0)
  {
    Swift::Int v109 = v5;
    Swift::Int v8 = 0LL;
    uint64_t v9 = *a1;
    uint64_t v107 = *a1 + 8;
    uint64_t v113 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      Swift::Int v10 = v8++;
      if (v8 >= v3) {
        goto LABEL_32;
      }
      uint64_t v11 = (uint64_t *)(v9 + 16 * v8);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = (void *)(v9 + 16 * v10);
      uint64_t v15 = v14[1];
      if (v12 == *v14 && v13 == v15) {
        break;
      }
      int v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 1LL);
      Swift::Int v18 = v10 + 2;
      if (v10 + 2 < v3) {
        goto LABEL_13;
      }
LABEL_23:
      Swift::Int v8 = v18;
      if ((v17 & 1) == 0) {
        goto LABEL_32;
      }
LABEL_24:
      if (v18 < v10) {
        goto LABEL_149;
      }
      if (v10 < v18)
      {
        uint64_t v26 = 16 * v18;
        uint64_t v27 = 16 * v10;
        Swift::Int v28 = v18;
        Swift::Int v29 = v10;
        do
        {
          if (v29 != --v28)
          {
            if (!v9) {
              goto LABEL_153;
            }
            uint64_t v30 = v9 + v26;
            uint64_t v31 = *(void *)(v9 + v27);
            uint64_t v32 = *(void *)(v9 + v27 + 8);
            *(_OWORD *)(v9 + v27) = *(_OWORD *)(v9 + v26 - 16);
            *(void *)(v30 - 16) = v31;
            *(void *)(v30 - 8) = v32;
          }

          ++v29;
          v26 -= 16LL;
          v27 += 16LL;
        }

        while (v29 < v28);
      }

LABEL_73:
          if ((v63 & 1) != 0) {
            goto LABEL_134;
          }
          uint64_t v71 = &v38[2 * v40];
          uint64_t v73 = *v71;
          uint64_t v72 = v71[1];
          BOOL v51 = __OFSUB__(v72, v73);
          uint64_t v74 = v72 - v73;
          if (v51) {
            goto LABEL_136;
          }
          if (v74 < v62) {
            goto LABEL_90;
          }
LABEL_81:
          unint64_t v79 = v40 - 1;
          if (v40 - 1 >= v37)
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
            goto LABEL_139;
          }

          if (!v9) {
            goto LABEL_152;
          }
          uint64_t v80 = &v38[2 * v79];
          uint64_t v81 = *v80;
          uint64_t v82 = &v38[2 * v40];
          uint64_t v83 = v82[1];
          sub_100157484((char *)(v9 + 16 * *v80), (char *)(v9 + 16LL * *v82), v9 + 16 * v83, v112);
          if (v1)
          {
            uint64_t v97 = v113;
LABEL_107:
            swift_bridgeObjectRelease(v97, v84);
            if (v111 >= -1)
            {
              *(void *)(v110 + 16) = 0LL;
              swift_bridgeObjectRelease(v110, v98);
              return;
            }

LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
            goto LABEL_148;
          }

          if (v83 < v81) {
            goto LABEL_125;
          }
          if (v40 > *((void *)v113 + 2)) {
            goto LABEL_126;
          }
          uint64_t *v80 = v81;
          v38[2 * v79 + 1] = v83;
          unint64_t v85 = *((void *)v113 + 2);
          if (v40 >= v85) {
            goto LABEL_127;
          }
          uint64_t v34 = v113;
          unint64_t v37 = v85 - 1;
          memmove(&v38[2 * v40], v82 + 2, 16 * (v85 - 1 - v40));
          *((void *)v113 + sub_100129678(v0 + 2) = v85 - 1;
          if (v85 <= 2) {
            goto LABEL_90;
          }
        }
      }

      unint64_t v37 = 1LL;
LABEL_90:
      Swift::Int v3 = v111;
      if (v8 >= v111) {
        goto LABEL_111;
      }
    }

    Swift::Int v18 = v10 + 2;
    if (v10 + 2 >= v3) {
      goto LABEL_31;
    }
    int v17 = 0;
LABEL_13:
    uint64_t v19 = (uint64_t *)(v107 + 16 * v18);
    do
    {
      uint64_t v20 = *(v19 - 1);
      uint64_t v21 = *v19;
      uint64_t v22 = (void *)(v9 + 16 * v8);
      uint64_t v23 = v22[1];
      if (v20 == *v22 && v21 == v23)
      {
        if ((v17 & 1) != 0) {
          goto LABEL_24;
        }
      }

      else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *v22, v23, 1LL)) & 1) != 0)
      {
        goto LABEL_23;
      }

      v19 += 2;
      Swift::Int v25 = v18 + 1;
      Swift::Int v8 = v18;
      Swift::Int v18 = v25;
    }

    while (v25 < v3);
    Swift::Int v18 = v25;
    goto LABEL_23;
  }

  uint64_t v113 = (char *)_swiftEmptyArrayStorage;
  unint64_t v37 = _swiftEmptyArrayStorage[2];
LABEL_111:
  if (v37 >= 2)
  {
    uint64_t v99 = *v108;
    while (1)
    {
      unint64_t v100 = v37 - 2;
      if (v37 < 2) {
        break;
      }
      if (!v99) {
        goto LABEL_154;
      }
      uint64_t v97 = v113;
      uint64_t v101 = *(void *)&v113[16 * v100 + 32];
      uint64_t v102 = *(void *)&v113[16 * v37 + 24];
      sub_100157484( (char *)(v99 + 16 * v101),  (char *)(v99 + 16LL * *(void *)&v113[16 * v37 + 16]),  v99 + 16 * v102,  v112);
      if (v1) {
        goto LABEL_107;
      }
      if (v102 < v101) {
        goto LABEL_140;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) == 0)
      {
        sub_10015770C((uint64_t)v113);
        uint64_t v97 = v105;
      }

      if (v100 >= *((void *)v97 + 2)) {
        goto LABEL_141;
      }
      uint64_t v103 = &v97[16 * v100 + 32];
      *(void *)uint64_t v103 = v101;
      *((void *)v103 + 1) = v102;
      unint64_t v104 = *((void *)v97 + 2);
      if (v37 > v104) {
        goto LABEL_142;
      }
      memmove(&v97[16 * v37 + 16], &v97[16 * v37 + 32], 16 * (v104 - v37));
      uint64_t v113 = v97;
      *((void *)v97 + sub_100129678(v0 + 2) = v104 - 1;
      unint64_t v37 = v104 - 1;
      Swift::Int v3 = v111;
      if (v104 <= 2) {
        goto LABEL_122;
      }
    }

LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }

LABEL_122:
  swift_bridgeObjectRelease(v113, v6);
  if (v3 < -1) {
    goto LABEL_150;
  }
  *(void *)(v110 + 16) = 0LL;
  swift_bridgeObjectRelease(v110, v106);
}

uint64_t sub_1001573C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
      unint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      uint64_t v12 = (uint64_t *)v8;
      do
      {
        uint64_t v13 = *(v12 - 2);
        uint64_t v14 = *(v12 - 1);
        if (result == v13 && v10 == v14) {
          break;
        }
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1LL);
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }

        unint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - sub_100129678(v0 + 2) = result;
        v12 -= 2;
        ++v11;
      }

      while (v4 != v11);
      ++v4;
      v8 += 16LL;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_100157484(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_10016A278(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    uint64_t v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    uint64_t v20 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v21 = v20 + 16;
      uint64_t v22 = *((void *)v12 - 2);
      uint64_t v23 = *((void *)v12 - 1);
      uint64_t v24 = v12 - 16;
      uint64_t v25 = *((void *)v6 - 2);
      uint64_t v26 = *((void *)v6 - 1);
      BOOL v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1LL) & 1) == 0)
      {
        BOOL v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29) {
          goto LABEL_43;
        }
      }

      else
      {
        BOOL v28 = v21 != v6 || v20 >= v6;
        uint64_t v24 = v6 - 16;
        v6 -= 16;
        if (!v28) {
          goto LABEL_43;
        }
      }

      *(_OWORD *)uint64_t v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_47;
      }
    }
  }

  sub_10016A278(a1, (a2 - a1) / 16, a4);
  uint64_t v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      uint64_t v14 = *((void *)v6 + 1);
      uint64_t v15 = *((void *)v4 + 1);
      BOOL v16 = *(void *)v6 == *(void *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v6, v14, *(void *)v4, v15, 1LL) & 1) != 0) {
        break;
      }
      int v17 = v4;
      BOOL v16 = v7 == v4;
      v4 += 16;
      if (!v16) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
    }

    int v17 = v6;
    BOOL v16 = v7 == v6;
    v6 += 16;
    if (v16) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }

void sub_100157628(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100129274(&qword_1002B8E98);
    uint64_t v11 = (char *)sub_10012AAEC(v10, 16 * v9 + 32);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_100129678(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13) {
      uint64_t v13 = (char *)memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + sub_100129678(v0 + 2) = 0LL;
  }

  else
  {
    uint64_t v13 = (char *)memcpy(v13, v14, 16 * v8);
  }

  sub_10012B950((uint64_t)v13, (uint64_t)v14);
  sub_10013A774();
}

void sub_10015770C(uint64_t a1)
{
}

char *sub_100157720(char *__src, uint64_t a2, char *__dst)
{
  if (__dst != __src || &__src[16 * a2] <= __dst) {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t sub_10015774C(void *a1)
{
  id v1 = [a1 language];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

id sub_1001577AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3, v8);
  id v9 = [a4 userErrorForServerCode:a1 reason:v7];

  return v9;
}

uint64_t sub_10015781C(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0LL,  a1);
}

char *sub_100157830(uint64_t a1)
{
  return sub_100137764(0LL, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100157844()
{
  uint64_t v1 = sub_100158CD4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10015786C()
{
  uint64_t v1 = (void *)sub_100158D40();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100158A88(v1, (uint64_t)sub_100158A30);
  return sub_100158A74(v2, v3, v4, v5, v6);
}

uint64_t sub_1001578AC()
{
  uint64_t v1 = sub_100158E58();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1001578E0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B8EDC);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100158A30;
  uint64_t v2 = sub_100144870();
  return v3(v2);
}

uint64_t sub_100157970()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100157994(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100158CD4();
  return swift_deallocObject(v2, v3, v4);
}

uint64_t sub_1001579B0(uint64_t a1)
{
  return sub_100154FD0(a1, v1[2], v1[3], v1[4], v1[5]);
}

void sub_1001579BC(uint64_t a1)
{
}

uint64_t sub_1001579CC()
{
  uint64_t v0 = *(void *)(sub_100129274(&qword_1002B8F00) - 8);
  uint64_t v1 = *(unsigned __int8 *)(v0 + 80) | 7LL;
  sub_100158EA0(v0);
  uint64_t v2 = sub_100158D74();
  return swift_deallocObject(v2, v3, v1);
}

id sub_100157A28(uint64_t a1, uint64_t a2, double a3)
{
  return sub_100156270(a1, a2, a3);
}

uint64_t sub_100157A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100129678(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100157A98(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100157AA0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_100157AB4()
{
  swift_release(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100157AF0()
{
  char v2 = *(_BYTE *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  unint64_t v6 = (void *)swift_task_alloc(dword_1002B8F0C);
  *(void *)(v1 + 16) = v6;
  uint64_t v7 = sub_100158DC0(v6, (uint64_t)sub_100157B6C);
  return sub_100153BE8(v7, v8, v9, v10, v2, v3, v4, v5);
}

uint64_t sub_100157B6C(uint64_t a1)
{
  uint64_t v5 = *v1;
  uint64_t v3 = *v1;
  sub_1001323F0(*(void *)(v5 + 16), &v5);
  return sub_1001325E0(a1, *(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_100157BB4()
{
  swift_release(*(void *)(v0 + 64));
  uint64_t v1 = sub_100158E58();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100157BE4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc(dword_1002B8F24);
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100158A30;
  return sub_100155CD0(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100157C78()
{
  return sub_100157CC4((void (*)(void))&_swift_errorRelease);
}

void sub_100157C84()
{
}

void sub_100157C90(uint64_t a1)
{
  if (!sub_100158F00(a1))
  {
    uint64_t v3 = sub_100158F54(0LL, v2);
    atomic_store(sub_100158C80(v3), v1);
  }

  sub_100132514();
}

uint64_t sub_100157CB8()
{
  return sub_100157CC4((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_100157CC4(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

void sub_100157CFC()
{
}

uint64_t sub_100157D24()
{
  _Block_release(*(const void **)(v0 + 40));
  sub_100158F2C();

  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100157D64()
{
  uint64_t v1 = (void *)sub_10015901C();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100158AAC(v1, (uint64_t)sub_100158A30);
  return sub_100158AD8(v2, v3, v4, v5, v6, v7, v8);
}

void sub_100157DA4()
{
}

uint64_t sub_100157DBC()
{
  swift_release(*(void *)(v0 + 64));
  uint64_t v4 = sub_100158E58();
  return swift_deallocObject(v4, v5, v6);
}

uint64_t sub_100157DF0()
{
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = (void *)swift_task_alloc(dword_1002B8F64);
  *(void *)(v1 + 16) = v5;
  uint64_t v6 = sub_100158DC0(v5, (uint64_t)sub_100158A70);
  return sub_100152B44(v6, v7, v8, v9, v2, v3, v4);
}

unint64_t sub_100157E5C()
{
  unint64_t result = qword_1002B8F90;
  if (!qword_1002B8F90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3B04, &type metadata for EntityCacheProvider.EntityCacheKey);
    atomic_store(result, (unint64_t *)&qword_1002B8F90);
  }

  return result;
}

unint64_t sub_100157E98()
{
  unint64_t result = qword_1002B8FA0;
  if (!qword_1002B8FA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3E50, &type metadata for EntityCacheError);
    atomic_store(result, (unint64_t *)&qword_1002B8FA0);
  }

  return result;
}

unint64_t sub_100157ED4()
{
  unint64_t result = qword_1002B8FA8;
  if (!qword_1002B8FA8)
  {
    unint64_t result = swift_getWitnessTable("1\r\b", &type metadata for EntityCacheMigrationPlan);
    atomic_store(result, (unint64_t *)&qword_1002B8FA8);
  }

  return result;
}

uint64_t sub_100157F10()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100157F3C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B8FC4);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100158A30;
  uint64_t v2 = sub_100144B40();
  return v3(v2);
}

uint64_t sub_100157FA0()
{
  uint64_t v1 = (void *)sub_100158D40();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100158A88(v1, (uint64_t)sub_100158A30);
  return sub_100158A74(v2, v3, v4, v5, v6);
}

uint64_t sub_100157FE4()
{
  uint64_t v1 = (void *)sub_100158D40();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100158A88(v1, (uint64_t)sub_100158A30);
  return sub_100158A74(v2, v3, v4, v5, v6);
}

uint64_t sub_100158028()
{
  uint64_t v1 = (void *)sub_10015901C();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100158AAC(v1, (uint64_t)sub_100158A30);
  return sub_100158AD8(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100158068(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100158078()
{
  uint64_t v1 = (void *)sub_100158D40();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100158A88(v1, (uint64_t)sub_100158A30);
  return sub_100158A74(v2, v3, v4, v5, v6);
}

uint64_t sub_1001580B8(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_1001580D0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B9024);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10014C568(v1, (uint64_t)sub_100158A30);
  return sub_10014C558(v2, v3, v4, v5);
}

uint64_t sub_100158118@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10015071C(a1, v2[2], v2[3], v2[4], v2[5], v2[6], a2);
}

unint64_t sub_100158128()
{
  unint64_t result = qword_1002B90C8;
  if (!qword_1002B90C8)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002B90C0);
    sub_100158194();
    sub_1001582D8();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B90C8);
  }

  return result;
}

unint64_t sub_100158194()
{
  unint64_t result = qword_1002B90D0;
  if (!qword_1002B90D0)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002B9048);
    sub_1001581F8();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B90D0);
  }

  return result;
}

unint64_t sub_1001581F8()
{
  unint64_t result = qword_1002B90D8;
  if (!qword_1002B90D8)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002B9050);
    sub_100158354((uint64_t)&unk_1002B90E0);
    sub_100158274();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B90D8);
  }

  return result;
}

unint64_t sub_100158274()
{
  unint64_t result = qword_1002B90F0;
  if (!qword_1002B90F0)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002B9070);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B90F0);
  }

  return result;
}

unint64_t sub_1001582D8()
{
  unint64_t result = qword_1002B90F8;
  if (!qword_1002B90F8)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002B9090);
    sub_100158354((uint64_t)&unk_1002B9100);
    sub_1001583C0();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Comparison<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B90F8);
  }

  return result;
}

unint64_t sub_100158354(uint64_t a1)
{
  unint64_t result = sub_100158F00(a1);
  if (!result)
  {
    uint64_t v4 = sub_1001292F8(v3);
    sub_100157C90((uint64_t)&unk_1002B90E8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, v4);
    atomic_store(result, v1);
  }

  return result;
}

unint64_t sub_1001583C0()
{
  unint64_t result = qword_1002B9108;
  if (!qword_1002B9108)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002B90A0);
    sub_100158464((uint64_t)&unk_1002B8E58);
    sub_100158464((uint64_t)&unk_1002B9110);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B9108);
  }

  return result;
}

void sub_100158464(uint64_t a1)
{
  if (!sub_100158F00(a1))
  {
    uint64_t v3 = sub_100158F60(0LL, v2);
    atomic_store(sub_100158C80(v3), v1);
  }

  sub_100132514();
}

void *sub_10015848C(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

unint64_t sub_1001584C8()
{
  unint64_t result = qword_1002B9130;
  if (!qword_1002B9130)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002B9130);
  }

  return result;
}

uint64_t sub_100158504@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10014FA78(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_100158510@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10014F1C8(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100158518(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B9038);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100158564()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1001585A0()
{
  uint64_t v1 = (void *)sub_10015901C();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100158AAC(v1, (uint64_t)sub_100158A30);
  return sub_100158AD8(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1001585E4()
{
  uint64_t v1 = sub_100158CD4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10015860C()
{
  uint64_t v1 = (void *)sub_100158D40();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100158A88(v1, (uint64_t)sub_10015864C);
  return sub_100158A74(v2, v3, v4, v5, v6);
}

uint64_t sub_10015864C()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *v0;
  sub_1001323F0(*(void *)(v3 + 16), &v3);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100158694()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001586C4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B9184);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10014C568(v1, (uint64_t)sub_100158A30);
  return sub_10014C558(v2, v3, v4, v5);
}

void *sub_10015870C(uint64_t a1)
{
  return sub_100137920(0LL, *(void *)(a1 + 16), 0, a1);
}

ValueMetadata *type metadata accessor for EntityCacheMigrationPlan()
{
  return &type metadata for EntityCacheMigrationPlan;
}

unint64_t *initializeBufferWithCopyOfBuffer for EntityCacheError( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_100158760(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_100158760(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1) {
      return result;
    }
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }

  return swift_errorRetain(result);
}

unint64_t destroy for EntityCacheError(unint64_t *a1)
{
  return sub_100158784(*a1);
}

unint64_t sub_100158784(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1) {
      return result;
    }
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }

  return swift_errorRelease(result);
}

unint64_t *assignWithCopy for EntityCacheError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_100158760(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_100158784(v4);
  return a1;
}

void *initializeWithTake for EntityCacheError(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for EntityCacheError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_100158784(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityCacheError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    {
      unsigned int v2 = *(_DWORD *)a1 + 125;
    }

    else
    {
      unsigned int v2 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7D) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for EntityCacheError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t sub_1001588B8(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  else {
    return (*a1 >> 3) + 2;
  }
}

void *sub_1001588D4(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1001588E4(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v3 = a2 << 62;
  }

  else
  {
    uint64_t v2 = 8LL * (a2 - 2);
    unint64_t v3 = 0x8000000000000000LL;
  }

  *unint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for EntityCacheError()
{
  return &type metadata for EntityCacheError;
}

uint64_t *initializeBufferWithCopyOfBuffer for ServerResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for ServerResponse(void *a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(*a1, a2);
}

uint64_t *assignWithCopy for ServerResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for ServerResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4, a2);
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for ServerResponse()
{
  return &type metadata for ServerResponse;
}

unint64_t sub_1001589EC()
{
  unint64_t result = qword_1002B91C0;
  if (!qword_1002B91C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3A84, &type metadata for EntityCacheSchemaV1);
    atomic_store(result, (unint64_t *)&qword_1002B91C0);
  }

  return result;
}

uint64_t sub_100158A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_100158A88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100158AAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100158AD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return a7();
}

uint64_t sub_100158AF0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100158B00()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 16))(v0, 0LL);
}

uint64_t sub_100158B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

void sub_100158B18()
{
  uint64_t v2 = (void *)(v1 - 8);
  *uint64_t v2 = *v0;
  *uint64_t v2 = *v0;
}

void sub_100158B34()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

uint64_t sub_100158B50()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_100158B6C()
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 16))(v1, 0LL, v0);
}

uint64_t sub_100158B80()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 16))(v1, v0, 0LL);
}

uint64_t sub_100158B94(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100158BAC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100158BB8()
{
  return swift_errorRelease(v0);
}

  ;
}

BOOL sub_100158BD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_100158BE8(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100158BFC()
{
}

  ;
}

uint64_t sub_100158C1C(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4, v2, a1, v3, v1);
}

uint64_t sub_100158C3C@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100158C4C()
{
  return swift_task_alloc(v0);
}

uint64_t sub_100158C54(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

void sub_100158C60(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100158C70(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_100158C80(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_100158C8C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v2;
  *(void *)(v2 + 24) = a1;
  return swift_continuation_init(v1, 1LL);
}

void sub_100158C9C()
{
}

id sub_100158CA4(id a1)
{
  return a1;
}

uint64_t sub_100158CB0(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_100158CB8()
{
  return static GKLog.cache.getter();
}

  ;
}

uint64_t sub_100158CD4()
{
  return v0;
}

void sub_100158CE4()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (uint64_t *)(v1 - 8);
  uint64_t *v3 = *v0;
  uint64_t *v3 = *v0;
  *(void *)(v2 + 216) = *(void *)(v2 + 48);
}

uint64_t sub_100158D04()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v0, v2, v1);
}

void sub_100158D1C()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_100158D2C(uint64_t a1)
{
  return sub_100154AFC(a1);
}

uint64_t sub_100158D38()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_100158D40()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

void sub_100158D48()
{
}

uint64_t sub_100158D50()
{
  return swift_unknownObjectRetain(*(void *)(*(void *)(v0 + 224) + *(void *)(v0 + 264)));
}

uint64_t sub_100158D64()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100158D6C()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100158D74()
{
  return v0;
}

uint64_t sub_100158D80()
{
  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_100158D88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20)
{
  return sub_100135158(a18, a20);
}

uint64_t sub_100158D94()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_100158DA8(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33LL, 0LL);
}

uint64_t sub_100158DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = v3;
  return swift_bridgeObjectRelease(v4, a2);
}

uint64_t sub_100158DC0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100158DDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 176);
}

uint64_t sub_100158DF8()
{
  return swift_continuation_await();
}

uint64_t sub_100158E00()
{
  return swift_release(v0);
}

uint64_t sub_100158E08()
{
  return swift_task_dealloc(v0);
}

void sub_100158E10()
{
  *(void *)(v1 - 8) = *v0;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100158E58()
{
  return v0;
}

void sub_100158E68()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_100158E78()
{
  return type metadata accessor for PeerConnection();
}

uint64_t sub_100158E88()
{
  return ModelActor.modelContext.getter(v0, v1);
}

uint64_t sub_100158E98()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100158EA0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_100158EA8@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

void sub_100158EB0()
{
  *(void *)(v1 - 8) = *v0;
}

void sub_100158EC0()
{
}

uint64_t sub_100158ED0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 8))(v12, a12);
}

uint64_t sub_100158EE0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100158EF0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v2;
  *(void *)(v2 + 24) = a1;
  return swift_continuation_init(v1, 1LL);
}

uint64_t sub_100158F00(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_100158F0C()
{
  return swift_release(*(void *)(v0 + 40));
}

uint64_t sub_100158F14(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(*(void *)(v2 + 24), a2);
}

uint64_t sub_100158F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 2LL, a3);
}

uint64_t sub_100158F24@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a2 + 8), a1);
}

void sub_100158F2C()
{
}

void sub_100158F34()
{
}

uint64_t sub_100158F3C@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = a2;
  return swift_willThrow();
}

uint64_t sub_100158F48()
{
  return type metadata accessor for DispatchQoS(0LL);
}

uint64_t sub_100158F54(uint64_t a1, uint64_t *a2)
{
  return sub_1001292F8(a2);
}

uint64_t sub_100158F60(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return a2(255LL);
}

uint64_t sub_100158F6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v3[2] = a2;
  v3[3] = v2;
  v3[4] = result;
  return result;
}

uint64_t sub_100158F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, a2, a3, 6LL, 0LL);
}

void sub_100158F84()
{
}

void sub_100158F8C(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_100158F94()
{
  return swift_errorRelease(v0);
}

  ;
}

uint64_t sub_100158FB0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(*(void *)(v2 + 64), a2);
}

uint64_t sub_100158FBC(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100158FC4(uint64_t a1)
{
}

uint64_t sub_100158FCC()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_100158FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5 = va_arg(va1, void);
  return _print_unlocked<A, B>(_:_:)((uint64_t *)va, va1, a3);
}

uint64_t sub_100158FE0()
{
  return swift_willThrow();
}

uint64_t sub_100158FEC()
{
  return swift_task_dealloc(*(void *)(v0 + 264));
}

uint64_t sub_100158FF4()
{
  return swift_retain(v0);
}

  ;
}

uint64_t sub_100159010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001291F8(a1, 0LL, 1LL, a4);
}

uint64_t sub_10015901C()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_100159024()
{
  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t sub_10015902C()
{
  return _NativeDictionary._delete(at:)(v0, v1);
}

uint64_t sub_100159038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of BackingData.setValue<A>(forKey:to:)(a1, a2, a3, a4, v4, v5);
}

uint64_t sub_100159044(uint64_t a1, uint64_t a2)
{
  return sub_1001291F8(a1, a2, 1LL, v2);
}

uint64_t sub_100159050()
{
  return swift_getKeyPath(v0);
}

uint64_t sub_100159058()
{
  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_100159060()
{
  return ModelActor.modelContext.getter(v0, v1);
}

void sub_10015906C()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_100159080()
{
  return swift_release(v0);
}

uint64_t sub_100159088()
{
  return swift_release_n(v0, 2LL);
}

void *sub_100159094(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v4)
  {
    uint64_t v24 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    unint64_t result = (void *)sub_10015D940(a3);
    int64_t v7 = (int64_t)result;
    int v9 = v8;
    char v11 = v10 & 1;
    while ((v7 & 0x8000000000000000LL) == 0 && v7 < 1LL << *(_BYTE *)(a3 + 32))
    {
      if (*(_DWORD *)(a3 + 36) != v9) {
        goto LABEL_14;
      }
      uint64_t v12 = (void *)(*(void *)(a3 + 48) + 16 * v7);
      uint64_t v13 = v12[1];
      v22[0] = *v12;
      v22[1] = v13;
      swift_bridgeObjectRetain(v13);
      a1(&v23, v22);
      uint64_t v15 = swift_bridgeObjectRelease(v13, v14);
      if (v3) {
        return (void *)swift_release(v24);
      }
      uint64_t v16 = v23;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      uint64_t v17 = v24[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
      uint64_t v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v16);
      specialized ContiguousArray._endMutation()(v18);
      unint64_t result = (void *)sub_10015D858(v7, v9, v11 & 1, a3);
      int64_t v7 = (int64_t)result;
      int v9 = v19;
      char v11 = v20 & 1;
      if (!--v4)
      {
        sub_10013A198((uint64_t)result, v19, v20 & 1);
        return v24;
      }
    }

    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }

  return result;
}

uint64_t sub_100159228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10015CE9C(a1, 0, 0, 0, 1, 0, 0);
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v6);
    uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v7);
    uint64_t v11 = v10;
    swift_unknownObjectRelease(v6);
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
  }

  uint64_t v12 = sub_10012AAEC((uint64_t)&unk_100274CA0, 32LL);
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  if (v11 | v9)
  {
    v15[0] = 0LL;
    v15[1] = 0LL;
    uint64_t v13 = v15;
    v15[2] = v9;
    v15[3] = v11;
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  return swift_task_create(v5, v13, (char *)&type metadata for () + 8, &unk_1002B8698, v12);
}

uint64_t sub_100159324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_retain(a2);
  swift_bridgeObjectRetain(a1);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    uint64_t v6 = 4LL;
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1);
      }

      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * v6);
        swift_retain(v7);
      }

      uint64_t v8 = v6 - 3;
      if (__OFADD__(v6 - 4, 1LL)) {
        break;
      }
      uint64_t v9 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0LL);
      sub_10015D9FC(&qword_1002B9420, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
      dispatch thunk of ModelContext.insert<A>(_:)(v7, v9);
      swift_release(v7);
      ++v6;
      if (v8 == v4) {
        goto LABEL_9;
      }
    }

    __break(1u);
LABEL_11:
    if (a1 < 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_retain(a2);
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_100159460(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    for (uint64_t i = 4LL; ; ++i)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
      }

      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i);
        swift_retain(v7);
      }

      uint64_t v8 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      sub_10015AF0C();
      if (v2)
      {
        swift_bridgeObjectRelease(a1, v9);
        return swift_release(v7);
      }

      swift_release(v7);
      if (v8 == v4) {
        return swift_bridgeObjectRelease(a1, v5);
      }
    }

    __break(1u);
LABEL_13:
    if (a1 < 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

  return swift_bridgeObjectRelease(a1, v5);
}

uint64_t sub_10015957C()
{
  uint64_t v0 = sub_100129274(&qword_1002B91B8);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1001F3480;
  unint64_t v2 = sub_10015DD6C();
  *(void *)(v1 + 3sub_100129678(v0 + 2) = &type metadata for DeniedSuggestionSchemaV1;
  *(void *)(v1 + 40) = v2;
  return v1;
}

uint64_t sub_1001595D4()
{
  uint64_t v0 = sub_100129274(&qword_1002B8E78);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1001F3480;
  uint64_t v2 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0LL);
  sub_10015D9FC(&qword_1002B9420, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  *(void *)(v1 + 3sub_100129678(v0 + 2) = v2;
  *(void *)(v1 + 40) = v3;
  return v1;
}

uint64_t sub_100159644()
{
  return sub_100159700((uint64_t)&unk_1001F4228);
}

uint64_t sub_100159650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = v15;
  uint64_t v9 = v16;
  sub_10012A960(v14, v15);
  uint64_t KeyPath = swift_getKeyPath(a5);
  v13[0] = a1;
  v13[1] = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  v13,  &type metadata for String,  &protocol witness table for String,  v8,  v9);
  swift_bridgeObjectRelease(a2, v11);
  sub_10013A738();
  return sub_100129678(v14);
}

uint64_t sub_1001596F4()
{
  return sub_100159700((uint64_t)&unk_1001F4200);
}

uint64_t sub_100159700(uint64_t a1)
{
  uint64_t v8 = v1;
  uint64_t KeyPath = swift_getKeyPath(a1);
  sub_10015D9FC(&qword_1002B9400, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(a1);
  sub_10015D9FC(&qword_1002B9420, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for String);
  sub_10013A738();
  return v8;
}

uint64_t sub_1001597D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v10;
  uint64_t v4 = v11;
  sub_10012A960(v9, v10);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F41D8);
  uint64_t v6 = type metadata accessor for Date(0LL);
  sub_10015D37C(&qword_1002B9110);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, a1, v6, v7, v3, v4);
  swift_release(KeyPath);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
  return sub_100129678(v9);
}

uint64_t sub_100159898@<X0>(void *a1@<X8>)
{
  uint64_t v10 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F41D8);
  sub_10015D9FC(&qword_1002B9400, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1001F41D8);
  sub_10015D9FC(&qword_1002B9420, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  uint64_t v7 = v6;
  sub_10015D37C(&qword_1002B8E58);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v7, v8);
  return swift_release(v5);
}

uint64_t sub_100159988()
{
  v18[0] = 0xD000000000000012LL;
  v18[1] = 0x800000010024D140LL;
  v1._uint64_t countAndFlagsBits = sub_100159644();
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object, v3);
  v4._uint64_t countAndFlagsBits = 32LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = sub_1001596F4();
  uint64_t v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6, v7);
  v8._uint64_t countAndFlagsBits = 2113568LL;
  v8._object = (void *)0xE300000000000000LL;
  String.append(_:)(v8);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_100159898(v12);
  sub_10015D37C(&qword_1002B8E48);
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v9, v13);
  uint64_t v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15, v16);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  return v18[0];
}

uint64_t *sub_100159AD8(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v5 = v4;
  uint64_t v10 = *v4;
  v5[5] = sub_100129274(&qword_1002B9478);
  sub_10015D9FC(&qword_1002B9420, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  uint64_t v12 = v11;
  v22[0] = v10;
  v22[1] = v10;
  void v22[2] = v11;
  v22[3] = v11;
  v5[6] = swift_getOpaqueTypeConformance2( v22,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10015848C(v5 + 2);
  uint64_t v13 = static PersistentModel.createBackingData<A>()(v10, v10, v12, v12);
  ObservationRegistrar.init()(v13);
  if ((a1 & 1) != 0) {
    uint64_t v14 = 0x726579616C70LL;
  }
  else {
    uint64_t v14 = 0x746361746E6F63LL;
  }
  if ((a1 & 1) != 0) {
    uint64_t v15 = 0xE600000000000000LL;
  }
  else {
    uint64_t v15 = 0xE700000000000000LL;
  }
  uint64_t v16 = *v5;
  sub_100159650(v14, v15, (uint64_t)(v5 + 2), *v5, (uint64_t)&unk_1001F4228);
  sub_100159650(a2, a3, (uint64_t)(v5 + 2), v16, (uint64_t)&unk_1001F4200);
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  char v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a4, v17);
  sub_1001597D0((uint64_t)v20, (uint64_t)(v5 + 2));
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a4, v17);
  return v5;
}

uint64_t sub_100159C80()
{
  uint64_t v0 = sub_100129274(&qword_1002B8E70);
  uint64_t v1 = type metadata accessor for Schema.PropertyMetadata(0LL);
  uint64_t v2 = swift_allocObject( v0,  ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL))
       + 3LL * *(void *)(*(void *)(v1 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_1001F3E90;
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F4228);
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  uint64_t v9 = 0LL;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 1684957547LL,  0xE400000000000000LL,  KeyPath,  &v10,  &v7);
  uint64_t v4 = swift_getKeyPath(&unk_1001F4200);
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  uint64_t v9 = 0LL;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(25705LL, 0xE200000000000000LL, v4, &v10, &v7);
  uint64_t v5 = swift_getKeyPath(&unk_1001F41D8);
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  uint64_t v9 = 0LL;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1702125924LL, 0xE400000000000000LL, v5, &v10, &v7);
  return v2;
}

void *sub_100159DB8(void *a1)
{
  return sub_100159DF0(a1);
}

void *sub_100159DF0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  v2[5] = sub_100129274(&qword_1002B9478);
  sub_10015D9FC(&qword_1002B9420, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  uint64_t v6 = v5;
  *(void *)&__int128 v10 = v4;
  *((void *)&v10 + 1) = v4;
  uint64_t v11 = v5;
  uint64_t v12 = v5;
  v2[6] = swift_getOpaqueTypeConformance2( &v10,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10015848C(v2 + 2);
  uint64_t v7 = static PersistentModel.createBackingData<A>()(v4, v4, v6, v6);
  ObservationRegistrar.init()(v7);
  sub_10012D388((uint64_t)a1, (uint64_t)&v10);
  swift_beginAccess(v2 + 2, v9, 33LL, 0LL);
  sub_100129678(v2 + 2);
  sub_100156808(&v10, (uint64_t)(v2 + 2));
  swift_endAccess(v9);
  sub_100129678(a1);
  return v2;
}

uint64_t sub_100159EF8()
{
  uint64_t v1 = (char *)v0
     + OBJC_IVAR____TtCV14GameDaemonCoreP33_59C5B83A364DDF4FB01D7B31902CAB5424DeniedSuggestionSchemaV116DeniedSuggestion___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_100159F50()
{
  return sub_100159988();
}

uint64_t sub_100159F74(char a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for ModelConfiguration.CloudKitDatabase(0LL);
  __chkstk_darwin(v6);
  __int128 v8 = (char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ModelConfiguration.GroupContainer(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for ModelConfiguration(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = v14;
  if ((a1 & 1) != 0)
  {
    char v17 = 1;
    ModelConfiguration.init(isStoredInMemoryOnly:)(1LL);
  }

  else
  {
    uint64_t v18 = static ModelConfiguration.GroupContainer.identifier(_:)(0xD00000000000001ALL, 0x800000010024D160LL);
    static ModelConfiguration.CloudKitDatabase.none.getter(v18);
    ModelConfiguration.init(_:schema:isStoredInMemoryOnly:allowsSave:groupContainer:cloudKitDatabase:)( 0xD000000000000010LL,  0x80000001001F3EC0LL,  0LL,  0LL,  1LL,  v11,  v8);
    *(void *)&__int128 v54 = [(id)objc_opt_self(NSFileManager) defaultManager];
    uint64_t v19 = type metadata accessor for URL(0LL);
    v53[1] = v53;
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = __chkstk_darwin(v19);
    uint64_t v23 = (char *)v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v24 = ModelConfiguration.url.getter(v21);
    URL.absoluteString.getter(v24);
    uint64_t v25 = v4;
    uint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    NSString v28 = String._bridgeToObjectiveC()();
    uint64_t v29 = v27;
    uint64_t v4 = v25;
    uint64_t v3 = v2;
    swift_bridgeObjectRelease(v29, v30);
    uint64_t v31 = (void *)v54;
    LOBYTE(v19) = [(id)v54 fileExistsAtPath:v28];

    char v17 = v19 ^ 1;
  }

  *(_BYTE *)(v4 + 16) = v17;
  type metadata accessor for ModelContainer(0LL);
  uint64_t v32 = sub_100129274(&qword_1002B8E78);
  uint64_t v33 = swift_allocObject(v32, 48LL, 7LL);
  __int128 v54 = xmmword_1001F3480;
  *(_OWORD *)(v33 + 16) = xmmword_1001F3480;
  uint64_t v34 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0LL);
  sub_10015D9FC(&qword_1002B9420, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  *(void *)(v33 + 3sub_100129678(v0 + 2) = v34;
  *(void *)(v33 + 40) = v35;
  unint64_t v36 = sub_10015D9C0();
  uint64_t v37 = sub_100129274(&qword_1002B8FB0);
  uint64_t v38 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v39 = (v38 + 32) & ~v38;
  uint64_t v40 = swift_allocObject(v37, v39 + *(void *)(v13 + 72), v38 | 7);
  *(_OWORD *)(v40 + 16) = v54;
  uint64_t v41 = v40 + v39;
  uint64_t v42 = v55;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v41, v16, v55);
  uint64_t v43 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)( v33,  &type metadata for DeniedSuggestionMigrationPlan,  v36,  v40);
  if (v3)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v42);
    uint64_t v44 = type metadata accessor for FriendSuggestionDenierStorage();
    swift_deallocPartialClassInstance(v4, v44, 48LL, 7LL);
  }

  else
  {
    uint64_t v45 = v43;
    *(void *)(v4 + 40) = v43;
    uint64_t v46 = type metadata accessor for ModelContext(0LL);
    swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
    uint64_t v47 = swift_retain(v45);
    uint64_t v48 = ModelContext.init(_:)(v47);
    uint64_t v49 = type metadata accessor for DefaultSerialModelExecutor(0LL);
    swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
    uint64_t v50 = DefaultSerialModelExecutor.init(modelContext:)(v48);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v42);
    sub_10015D9FC( &qword_1002B8FB8,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultSerialModelExecutor);
    *(void *)(v4 + 24) = v50;
    *(void *)(v4 + 3sub_100129678(v0 + 2) = v51;
  }

  return v4;
}

uint64_t sub_10015A370(uint64_t a1)
{
  uint64_t v2 = sub_100129274(&qword_1002B94A8);
  uint64_t v33 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100129274(&qword_1002B94B0);
  uint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64LL);
  __chkstk_darwin(v5);
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v31 = sub_100129274(&qword_1002B94B8);
  sub_1001291F8((uint64_t)&v28 - v7, 1LL, 1LL, v31);
  uint64_t v8 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0LL);
  sub_10015D9FC(&qword_1002B9420, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  uint64_t v34 = v9;
  FetchDescriptor.init(predicate:sortBy:)((char *)&v28 - v7, _swiftEmptyArrayStorage, v8, v9);
  uint64_t v10 = sub_100159644();
  uint64_t v12 = v11;
  uint64_t v30 = a1;
  uint64_t v13 = sub_1001596F4();
  uint64_t v15 = v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v36 = v10;
  uint64_t v37 = v12;
  uint64_t v38 = v16;
  uint64_t v39 = v15;
  uint64_t v40 = v8;
  Predicate.init(_:)(sub_10015D58C, v35, 1LL, &v40);
  swift_bridgeObjectRelease(v15, v17);
  swift_bridgeObjectRelease(v12, v18);
  sub_1001291F8((uint64_t)&v28 - v7, 0LL, 1LL, v31);
  FetchDescriptor.predicate.setter((char *)&v28 - v7, v2);
  FetchDescriptor.fetchLimit.setter(1LL, 0LL, v2);
  uint64_t v31 = v2;
  FetchDescriptor.includePendingChanges.setter(1LL, v2);
  uint64_t v19 = type metadata accessor for FriendSuggestionDenierStorage();
  sub_10015D9FC( &qword_1002B9418,  (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  uint64_t v21 = v20;
  uint64_t v22 = ModelActor.modelContext.getter(v19, v20);
  uint64_t v29 = v8;
  uint64_t v23 = v32;
  uint64_t v24 = dispatch thunk of ModelContext.fetchCount<A>(_:)(v4, v8, v34);
  if (v23) {
    goto LABEL_2;
  }
  uint64_t v26 = v24;
  swift_release(v22);
  if (!v26)
  {
    uint64_t v27 = ModelActor.modelContext.getter(v19, v21);
    dispatch thunk of ModelContext.insert<A>(_:)(v30, v29);
    swift_release(v27);
    uint64_t v22 = ModelActor.modelContext.getter(v19, v21);
    dispatch thunk of ModelContext.save()();
LABEL_2:
    (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v31);
    return swift_release(v22);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v4, v31);
}

uint64_t sub_10015A64C@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v59 = a4;
  uint64_t v60 = a5;
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  BOOL v61 = a6;
  uint64_t v52 = *a1;
  uint64_t v6 = v52;
  uint64_t v7 = sub_100129274(&qword_1002B94C0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v62 = v7;
  uint64_t v63 = v8;
  uint64_t v57 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  unint64_t v58 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v65 = (char *)&v47 - v58;
  uint64_t v64 = sub_100129274(&qword_1002B94C8);
  uint64_t v10 = *(void *)(*(void *)(v64 - 8) + 64LL);
  uint64_t v54 = *(void *)(v64 - 8);
  uint64_t v55 = v10;
  __chkstk_darwin(v64);
  unint64_t v56 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v12 = (char *)&v47 - v56;
  uint64_t v13 = sub_100129274(&qword_1002B94D0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  unint64_t v53 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v16 = (char *)&v47 - v53;
  sub_10015D6E4(&qword_1002B94D8, &qword_1002B94D0);
  uint64_t v18 = v17;
  static PredicateExpressions.build_Arg<A>(_:)(v6, v13, v17);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F4228);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v16, KeyPath, v13, v18);
  swift_release(KeyPath);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v14 + 8);
  v51(v16, v13);
  uint64_t v20 = sub_100129274(&qword_1002B9070);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  __chkstk_darwin(v20);
  unint64_t v48 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v23 = (char *)&v47 - v48;
  uint64_t v66 = v49;
  uint64_t v67 = v50;
  static PredicateExpressions.build_Arg<A>(_:)(&v66, &type metadata for String);
  sub_10015D6E4(&qword_1002B94E0, &qword_1002B94C8);
  uint64_t v25 = v24;
  uint64_t v50 = v24;
  sub_10015D6E4(&qword_1002B9080, &qword_1002B9070);
  uint64_t v49 = v26;
  uint64_t v27 = v64;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v12,  v23,  v64,  v20,  v25,  v26,  &protocol witness table for String);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v21 + 8);
  v28(v23, v20);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v54 + 8);
  uint64_t v30 = v29(v12, v27);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v47 - v58;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v47 - v56;
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v47 - v53;
  static PredicateExpressions.build_Arg<A>(_:)(v52, v13, v18);
  uint64_t v36 = swift_getKeyPath(&unk_1001F4200);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v35, v36, v13, v18);
  swift_release(v36);
  uint64_t v37 = ((uint64_t (*)(char *, uint64_t))v51)(v35, v13);
  __chkstk_darwin(v37);
  uint64_t v38 = (char *)&v47 - v48;
  uint64_t v66 = v59;
  uint64_t v67 = v60;
  static PredicateExpressions.build_Arg<A>(_:)(&v66, &type metadata for String);
  uint64_t v39 = v64;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v34,  v38,  v64,  v20,  v50,  v49,  &protocol witness table for String);
  v28(v38, v20);
  v29(v34, v39);
  uint64_t v40 = sub_100129274(&qword_1002B94E8);
  uint64_t v41 = v61;
  v61[3] = v40;
  v41[4] = sub_10015D598();
  sub_10015848C(v41);
  sub_10015D6E4(&qword_1002B9510, &qword_1002B94C0);
  uint64_t v42 = v65;
  uint64_t v43 = v62;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v65, v32, v62, v62, v44, v44);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v63 + 8);
  v45(v32, v43);
  return ((uint64_t (*)(char *, uint64_t))v45)(v42, v43);
}

uint64_t sub_10015AA90(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FriendSuggestionDenierStorage();
  sub_10015D9FC( &qword_1002B9418,  (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  uint64_t v4 = v3;
  uint64_t v5 = ModelActor.modelContext.getter(v2, v3);
  swift_retain(v5);
  sub_100159324(a1, v5);
  swift_release(v5);
  uint64_t v6 = ModelActor.modelContext.getter(v2, v4);
  dispatch thunk of ModelContext.save()();
  return swift_release(v6);
}

uint64_t sub_10015AB44()
{
  uint64_t v1 = type metadata accessor for FriendSuggestionDenierStorage();
  sub_10015D9FC( &qword_1002B9418,  (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  uint64_t v3 = v2;
  uint64_t v4 = ModelActor.modelContext.getter(v1, v2);
  uint64_t v5 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0LL);
  uint64_t v6 = sub_100129274(&qword_1002B94B0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100129274(&qword_1002B94B8);
  sub_1001291F8((uint64_t)v8, 1LL, 1LL, v9);
  sub_10015D9FC(&qword_1002B9420, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v5, v8, 1LL, v5, v10);
  sub_10015D718((uint64_t)v8, &qword_1002B94B0);
  uint64_t result = swift_release(v4);
  if (!v0)
  {
    uint64_t v12 = ModelActor.modelContext.getter(v1, v3);
    dispatch thunk of ModelContext.save()();
    return swift_release(v12);
  }

  return result;
}

id sub_10015ACB0()
{
  uint64_t v1 = sub_100129274(&qword_1002B94A8);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100129274(&qword_1002B94B0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100129274(&qword_1002B94B8);
  sub_1001291F8((uint64_t)v7, 1LL, 1LL, v8);
  uint64_t v9 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0LL);
  sub_10015D9FC(&qword_1002B9420, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  uint64_t v11 = v10;
  FetchDescriptor.init(predicate:sortBy:)(v7, _swiftEmptyArrayStorage, v9, v10);
  FetchDescriptor.includePendingChanges.setter(1LL, v1);
  uint64_t v23 = &_swiftEmptySetSingleton;
  uint64_t v24 = &_swiftEmptySetSingleton;
  uint64_t v12 = type metadata accessor for FriendSuggestionDenierStorage();
  sub_10015D9FC( &qword_1002B9418,  (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  id v14 = (id)ModelActor.modelContext.getter(v12, v13);
  uint64_t v15 = dispatch thunk of ModelContext.fetch<A>(_:)(v4, v9, v11);
  if (v0)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    swift_release(v14);
  }

  else
  {
    uint64_t v17 = v15;
    swift_release(v14);
    sub_100159460(v17);
    swift_bridgeObjectRelease(v17, v18);
    uint64_t v22 = (uint64_t)v23;
    uint64_t v21 = (uint64_t)v24;
    objc_allocWithZone((Class)type metadata accessor for FriendSuggestionDenyList());
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    id v14 = sub_10015B2B4(v21, v22);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }

  swift_bridgeObjectRelease(v23, v16);
  swift_bridgeObjectRelease(v24, v19);
  return v14;
}

uint64_t sub_10015AF0C()
{
  uint64_t v0 = sub_100159644();
  if (v0 == 0x746361746E6F63LL && v1 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  uint64_t v3 = v0;
  unint64_t v4 = v1;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746361746E6F63LL, 0xE700000000000000LL, v0, v1, 0LL) & 1) != 0)
  {
    unint64_t v5 = v4;
LABEL_8:
    swift_bridgeObjectRelease(v5, v1);
    uint64_t v6 = sub_1001596F4();
    uint64_t v8 = v7;
    uint64_t v9 = v6;
    uint64_t v10 = v8;
LABEL_9:
    sub_100137A38(v27, v9, v10);
    return swift_bridgeObjectRelease(v27[1], v11);
  }

  if (v3 == 0x726579616C70LL && v4 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL, v1);
    goto LABEL_17;
  }

  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726579616C70LL, 0xE600000000000000LL, v3, v4, 0LL);
  swift_bridgeObjectRelease(v4, v15);
  if ((v14 & 1) != 0)
  {
LABEL_17:
    uint64_t v24 = sub_1001596F4();
    uint64_t v26 = v25;
    uint64_t v9 = v24;
    uint64_t v10 = v26;
    goto LABEL_9;
  }

  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease(0xE000000000000000LL, v16);
  strcpy((char *)v27, "Unknown kind: ");
  HIBYTE(v27[1]) = -18;
  v17._uint64_t countAndFlagsBits = sub_100159644();
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object, v19);
  uint64_t v20 = v27[1];
  unint64_t v21 = sub_10015D340();
  uint64_t v22 = swift_allocError(&type metadata for FriendSuggestionDenierError, v21, 0LL, 0LL);
  void *v23 = v27[0];
  v23[1] = v20;
  _OWORD v23[2] = 0LL;
  return swift_willThrow(v22);
}

uint64_t sub_10015B0F8()
{
  return v0;
}

uint64_t sub_10015B11C()
{
  uint64_t v0 = sub_10015B0F8();
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t sub_10015B138()
{
  uint64_t v0 = type metadata accessor for FriendSuggestionDenierStorage();
  sub_10015D9FC( &qword_1002B9418,  (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  return ModelActor.unownedExecutor.getter(v0, v1);
}

uint64_t sub_10015B180()
{
  return swift_retain(*(void *)(v0 + 40));
}

uint64_t sub_10015B188()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 24));
}

id sub_10015B1AC()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for FriendSuggestionDenyList());
  id result = sub_10015B2B4((uint64_t)&_swiftEmptySetSingleton, (uint64_t)&_swiftEmptySetSingleton);
  qword_1002BF878 = (uint64_t)result;
  return result;
}

id sub_10015B1E8()
{
  if (qword_1002B7EF8 != -1) {
    swift_once(&qword_1002B7EF8, sub_10015B1AC);
  }
  return (id)qword_1002BF878;
}

uint64_t FriendSuggestionDenyList.contactIDs.getter()
{
  return sub_10013A6A4(OBJC_IVAR___GKFriendSuggestionDenyList_contactIDs);
}

Class sub_10015B260(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3, v5);
  return isa;
}

uint64_t FriendSuggestionDenyList.playerIDs.getter()
{
  return sub_10013A6A4(OBJC_IVAR___GKFriendSuggestionDenyList_playerIDs);
}

id sub_10015B2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (objc_class *)sub_10013A730();
  *(void *)&v2[OBJC_IVAR___GKFriendSuggestionDenyList_contactIDs] = a1;
  *(void *)&v2[OBJC_IVAR___GKFriendSuggestionDenyList_playerIDs] = a2;
  v7.receiver = v2;
  v7.Class super_class = v5;
  return objc_msgSendSuper2(&v7, "init");
}

void FriendSuggestionDenyList.init()()
{
}

void FriendSuggestionDenier.init()()
{
  id v1 = [objc_allocWithZone((Class)GKContactDenier) init];
  [v0 initInMemory:0 legacyDenier:v1];

  sub_100132514();
}

id FriendSuggestionDenier.__allocating_init(inMemory:legacyDenier:)(char a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return FriendSuggestionDenier.init(inMemory:legacyDenier:)(a1, a2);
}

id FriendSuggestionDenier.init(inMemory:legacyDenier:)(char a1, void *a2)
{
  id v5 = (objc_class *)sub_10013A730();
  uint64_t v6 = sub_10015DE94();
  sub_10012AAEC(v6, 48LL);
  objc_super v7 = v2;
  uint64_t v8 = sub_100159F74(a1);
  *(void *)&v7[OBJC_IVAR___GKFriendSuggestionDenier_storage] = v8;
  swift_retain(v8);

  if (*(_BYTE *)(v8 + 16) == 1) {
    sub_10015B5AC(a2, v8);
  }
  swift_release(v8);
  v11.receiver = v7;
  v11.Class super_class = v5;
  id v9 = objc_msgSendSuper2(&v11, "init");

  return v9;
}

uint64_t type metadata accessor for FriendSuggestionDenierStorage()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCoreP33_59C5B83A364DDF4FB01D7B31902CAB5429FriendSuggestionDenierStorage);
}

void sub_10015B5AC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = [a1 deniedContactIdentifiers];
  unint64_t v12 = sub_10015D750();
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v11,  &type metadata for String,  v12,  &protocol witness table for String);

  char v14 = sub_100136128(v13);
  static GKLog.general.getter(v14);
  uint64_t v15 = swift_bridgeObjectRetain(v14);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v18 = 134217984;
    uint64_t v27 = v14[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    swift_bridgeObjectRelease(v14, v19);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Importing %ld denied contact IDs", v18, 0xCu);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease(v14, v20);
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v14[2])
  {
    uint64_t v22 = type metadata accessor for TaskPriority(0LL);
    sub_1001291F8((uint64_t)v6, 1LL, 1LL, v22);
    uint64_t v23 = (void *)swift_allocObject(&unk_100274CC8, 56LL, 7LL);
    _OWORD v23[2] = 0LL;
    v23[3] = 0LL;
    v23[4] = v14;
    v23[5] = a2;
    v23[6] = a1;
    swift_retain(a2);
    id v24 = a1;
    uint64_t v25 = sub_100159228((uint64_t)v6, (uint64_t)&unk_1002B9520, (uint64_t)v23);
    swift_release(v25);
    sub_10015D718((uint64_t)v6, &qword_1002B8238);
  }

  else
  {
    swift_bridgeObjectRelease(v14, v21);
  }

void sub_10015B840()
{
  uint64_t v1 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TaskPriority(0LL);
  sub_1001291F8((uint64_t)v3, 1LL, 1LL, v4);
  uint64_t v5 = (void *)sub_10012AAEC((uint64_t)&unk_100274C78, 40LL);
  v5[2] = 0LL;
  v5[3] = 0LL;
  v5[4] = v0;
  id v6 = v0;
  uint64_t v7 = sub_100159228((uint64_t)v3, (uint64_t)&unk_1002B94A0, (uint64_t)v5);
  swift_release(v7);
  sub_10015D718((uint64_t)v3, &qword_1002B8238);
}

uint64_t sub_10015B900()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B91EC);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10014C54C;
  return FriendSuggestionDenier.deleteAll()();
}

uint64_t FriendSuggestionDenier.deleteAll()()
{
  uint64_t v1 = sub_10015DF08();
  v0[6] = sub_10015DDE0(v1);
  v0[7] = sub_100158C4C();
  v0[8] = sub_100158C4C();
  sub_100132278();
  return sub_100144664(v2, v3, v4);
}

uint64_t sub_10015B98C()
{
  uint64_t v3 = *(void *)(*(void *)(v1 + 24) + OBJC_IVAR___GKFriendSuggestionDenier_storage);
  *(void *)(v1 + 7sub_100129678(v0 + 2) = v3;
  if (v3)
  {
    sub_10015DE94();
    sub_10015D9FC( &qword_1002B91F0,  (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
    sub_10015DE88();
    sub_10015DE54();
    sub_10015DF14();
    sub_10015DF58();
    return sub_100158B10(v4, v5, v6);
  }

  else
  {
    uint64_t v8 = sub_10015DECC();
    Logger.logObject.getter(v8);
    os_log_type_t v9 = sub_10015DE80();
    if (sub_10015DDD0(v9))
    {
      uint64_t v10 = (_WORD *)sub_10012CE30(2LL);
      sub_10015DF44(v10);
      sub_10015DDBC( (void *)&_mh_execute_header,  v11,  v12,  "Can not clear deny list because storage has failed to initialize");
      sub_10012CE24(v0);
    }

    sub_10015DF20();
    sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    sub_10015DE74();
    sub_1001324F4();
    sub_1001446D0();
    return sub_10012CEAC(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_10015BA74()
{
  *(void *)(v0 + 80) = 0LL;
  sub_100132278();
  return sub_10015DDB0(v1, v2, v3);
}

uint64_t sub_10015BAC4()
{
  uint64_t v2 = sub_10015DECC();
  uint64_t v3 = (void *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter(v3);
  if (sub_10015DDD0(v4))
  {
    uint64_t v5 = (_WORD *)sub_10012CE30(2LL);
    sub_10015DF44(v5);
    sub_10015DDBC((void *)&_mh_execute_header, v6, v7, "Friend suggestion deny list has been cleared");
    sub_10012CE24(v0);
  }

  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v9 = *(void *)(v1 + 32);
  uint64_t v10 = *(void *)(v1 + 40);

  sub_10013A738();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  sub_10015DE74();
  sub_1001324F4();
  sub_1001446D0();
  return sub_100144770(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10015BB5C()
{
  uint64_t v2 = sub_100158D64();
  sub_10015DF50(v2);
  os_log_type_t v3 = sub_10015DE80();
  if (os_log_type_enabled(v0, v3))
  {
    uint64_t v5 = *(void *)(v1 + 72);
    uint64_t v4 = *(void *)(v1 + 80);
    uint64_t v6 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v7 = (void *)sub_10012CE30(8LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain(v4);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(void *)(v1 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24);
    *uint64_t v7 = v8;
    sub_100132428();
    sub_100132428();
    sub_10012CE90((void *)&_mh_execute_header, v0, v3, "Failed to clear deny list: %@", v6);
    uint64_t v9 = sub_100129274(&qword_1002B8ED0);
    sub_10012CE88((uint64_t)v7, v10, v9);
    sub_10012CE24((uint64_t)v7);
    sub_10012CE24((uint64_t)v6);
    swift_release(v5);

    sub_100132428();
  }

  else
  {
    swift_release(*(void *)(v1 + 72));
    sub_100132428();
    sub_100132428();
    sub_100132428();
  }

  sub_10015DE9C();
  sub_10015DE74();
  sub_1001324F4();
  sub_1001446D0();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10015BCF0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100132294((uint64_t)sub_10015BD04);
}

uint64_t sub_10015BD04()
{
  uint64_t v1 = sub_10015DEFC();
  sub_1001446D8(*(void *)(v1 - 8));
  uint64_t v2 = sub_10015DF2C();
  static Date.now.getter(v2);
  uint64_t v3 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0LL);
  sub_10012CF60(v3);
  uint64_t v4 = sub_10015DE60(0);
  sub_10015DEBC((uint64_t)v4);
  uint64_t v5 = (void *)swift_task_alloc(dword_1002B946C);
  *(void *)(v0 + 48) = v5;
  uint64_t v6 = sub_10015DF64(v5, (uint64_t)sub_10015BD74);
  return sub_10015DE20(v6);
}

uint64_t sub_10015BD74()
{
  if (v1)
  {
    sub_100132278();
    return sub_100158B10(v3, v4, v5);
  }

  else
  {
    swift_release(*(void *)(v0 + 40));
    return sub_10015DE30(*(uint64_t (**)(void))(v2 + 8));
  }

uint64_t sub_10015BDBC(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(sub_10015BDD4, 0LL, 0LL);
}

uint64_t sub_10015BDD4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + OBJC_IVAR___GKFriendSuggestionDenier_storage);
  *(void *)(v0 + 3sub_100129678(v0 + 2) = v1;
  if (v1)
  {
    sub_10015DE94();
    sub_10015D9FC( &qword_1002B91F0,  (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
    sub_10015DE88();
    sub_10015DE54();
    sub_10015DF14();
    sub_10015DF58();
    return sub_10015DDB0(v2, v3, v4);
  }

  else
  {
    unint64_t v6 = sub_10015D340();
    uint64_t v7 = sub_100158C54((uint64_t)&type metadata for FriendSuggestionDenierError, v6);
    *(_OWORD *)uint64_t v8 = xmmword_1001F3EA0;
    *(void *)(v8 + 16) = 0LL;
    swift_willThrow(v7);
    return sub_10014C604(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10015BE88()
{
  *(void *)(v0 + 40) = 0LL;
  sub_100132278();
  return sub_10015DDB0(v1, v2, v3);
}

uint64_t sub_10015BEDC()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10015BF08()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  unint64_t v3 = sub_10015D340();
  uint64_t v4 = sub_100158C54((uint64_t)&type metadata for FriendSuggestionDenierError, v3);
  void *v5 = 0LL;
  v5[1] = 0LL;
  v5[2] = v2;
  swift_willThrow(v4);
  swift_release(v1);
  return sub_10014C604(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10015BF78(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_1002B9494;
  a3;
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_10015DDA8;
  return sub_10015BCF0(v6, v8);
}

uint64_t sub_10015C004(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100132294((uint64_t)sub_10015C018);
}

uint64_t sub_10015C018()
{
  uint64_t v1 = sub_10015DEFC();
  sub_1001446D8(*(void *)(v1 - 8));
  uint64_t v2 = sub_10015DF2C();
  static Date.now.getter(v2);
  uint64_t v3 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0LL);
  sub_10012CF60(v3);
  uint64_t v4 = sub_10015DE60(1);
  sub_10015DEBC((uint64_t)v4);
  uint64_t v5 = (void *)swift_task_alloc(dword_1002B946C);
  *(void *)(v0 + 48) = v5;
  uint64_t v6 = sub_10015DF64(v5, (uint64_t)sub_10015C088);
  return sub_10015DE20(v6);
}

uint64_t sub_10015C088()
{
  if (v1)
  {
    sub_100132278();
    return sub_100158B10(v3, v4, v5);
  }

  else
  {
    swift_release(*(void *)(v0 + 40));
    return sub_10015DE30(*(uint64_t (**)(void))(v2 + 8));
  }

uint64_t sub_10015C0D0()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10015C110(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = (void *)sub_10012AAEC(a5, 40LL);
  uint64_t v11[2] = a3;
  void v11[3] = v10;
  v11[4] = a1;
  id v12 = a3;
  id v13 = a1;
  sub_100188AB4(a6, (uint64_t)v11);
}

uint64_t sub_10015C17C(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_1002B9464;
  a3;
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_10015C208;
  return sub_10015C004(v6, v8);
}

uint64_t sub_10015C208()
{
  uint64_t v3 = *(void *)(*v1 + 32);
  uint64_t v2 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc(v2);

  swift_bridgeObjectRelease(v3, v6);
  uint64_t v7 = *(void *)(v5 + 24);
  if (v0)
  {
    _convertErrorToNSError(_:)(v0);
    sub_10015DF38();
    sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16));
  }

  else
  {
    (*(void (**)(void, void))(v7 + 16))(*(void *)(v5 + 24), 0LL);
  }

  _Block_release(*(const void **)(v5 + 24));
  return sub_10012CEAC(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_10015C29C()
{
  uint64_t v1 = sub_10015DF08();
  *(void *)(v0 + 48) = sub_10015DDE0(v1);
  *(void *)(v0 + 56) = sub_100158C4C();
  sub_100132278();
  return sub_100144664(v2, v3, v4);
}

uint64_t sub_10015C2D8()
{
  uint64_t v3 = *(void *)(*(void *)(v1 + 24) + OBJC_IVAR___GKFriendSuggestionDenier_storage);
  *(void *)(v1 + 64) = v3;
  if (v3)
  {
    sub_10015DE94();
    sub_10015D9FC( &qword_1002B91F0,  (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
    sub_10015DE88();
    sub_10015DE54();
    sub_10015DF14();
    sub_10015DF58();
    return sub_100158B10(v4, v5, v6);
  }

  else
  {
    uint64_t v8 = sub_10015DECC();
    Logger.logObject.getter(v8);
    os_log_type_t v9 = sub_10015DE80();
    if (sub_10015DDD0(v9))
    {
      uint64_t v10 = (_WORD *)sub_10012CE30(2LL);
      sub_10015DF44(v10);
      sub_10015DDBC( (void *)&_mh_execute_header,  v11,  v12,  "Can not fetch deny list because storage has failed to initialize");
      sub_10012CE24(v0);
    }

    sub_10015DF20();
    sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    if (qword_1002B7EF8 != -1) {
      swift_once(&qword_1002B7EF8, sub_10015B1AC);
    }
    id v13 = (id)qword_1002BF878;
    sub_1001324F4();
    sub_1001446D0();
    return sub_1001325E0((uint64_t)v13, *(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_10015C3FC()
{
  *(void *)(v0 + 7sub_100129678(v0 + 2) = sub_10015ACB0();
  *(void *)(v0 + 80) = 0LL;
  sub_100132278();
  return sub_10015DDB0(v1, v2, v3);
}

uint64_t sub_10015C44C()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 56));
  sub_1001446D0();
  return sub_1001325E0(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10015C48C()
{
  uint64_t v2 = sub_100158D64();
  sub_10015DF50(v2);
  os_log_type_t v3 = sub_10015DE80();
  uint64_t v4 = v3;
  if (os_log_type_enabled(v0, v3))
  {
    uint64_t v5 = *(void *)(v1 + 80);
    uint64_t v6 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v7 = (void *)sub_10012CE30(8LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v1 + 16) = v8;
    sub_10015DEAC(v1 + 16);
    *uint64_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    sub_10012CE90((void *)&_mh_execute_header, v0, (os_log_type_t)v4, "Failed to fetch deny list: %@", v6);
    uint64_t v9 = sub_100129274(&qword_1002B8ED0);
    sub_10012CE88((uint64_t)v7, v10, v9);
    sub_10012CE24((uint64_t)v7);
    sub_10012CE24((uint64_t)v6);
  }

  else
  {
    sub_100132428();
    sub_100132428();
  }

  sub_10015DE9C();
  if (qword_1002B7EF8 != -1) {
    swift_once(&qword_1002B7EF8, sub_10015B1AC);
  }
  id v11 = (id)qword_1002BF878;
  sub_10015DF38();
  sub_10013A738();
  swift_task_dealloc(*(void *)(v1 + 56));
  sub_1001324F4();
  return sub_1001325E0(v4, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10015C620(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1002B944C;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  void v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_10015C680;
  return sub_10015C29C();
}

uint64_t sub_10015C680(void *a1)
{
  os_log_type_t v3 = (void (**)(void, void))*((void *)*v1 + 3);
  uint64_t v4 = (void *)*((void *)*v1 + 2);
  sub_10012CE48();

  ((void (**)(void, void *))v3)[2](v3, a1);
  _Block_release(v3);

  return v1[1]();
}

void sub_10015C710(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = sub_10012AAEC(a4, 32LL);
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = a1;
  id v10 = a1;
  sub_100188AB4(a5, v9);
}

uint64_t sub_10015C768(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1002B91EC;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  void v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_10015C7C8;
  return FriendSuggestionDenier.deleteAll()();
}

uint64_t sub_10015C7C8()
{
  uint64_t v1 = (void (**)(void))*((void *)*v0 + 3);
  uint64_t v2 = (void *)*((void *)*v0 + 2);
  sub_10012CE48();

  v1[2](v1);
  _Block_release(v1);
  return sub_10012CEAC(v0[1]);
}

uint64_t sub_10015C81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v6[7] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[8] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[9] = swift_task_alloc(v9);
  v6[10] = swift_task_alloc(v9);
  return swift_task_switch(sub_10015C890, 0LL, 0LL);
}

uint64_t sub_10015C890()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = type metadata accessor for Date(0LL);
  v0[11] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v0[12] = v3;
  uint64_t v4 = sub_1001446D8(v3);
  v0[13] = v4;
  static Date.now.getter(v4);
  uint64_t v5 = swift_task_alloc(32LL);
  *(void *)(v5 + 16) = v4;
  v0[14] = sub_100159094((void (*)(uint64_t *__return_ptr, void *))sub_10015D838, v5, v1);
  v0[15] = 0LL;
  swift_task_dealloc(v5);
  uint64_t v6 = sub_10015DE94();
  sub_10015D9FC( &qword_1002B91F0,  (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  dispatch thunk of Actor.unownedExecutor.getter(v6, v7);
  sub_10015DF14();
  sub_10015DF58();
  return swift_task_switch(v8, v9, v10);
}

uint64_t sub_10015C96C()
{
  uint64_t v1 = v0[15];
  sub_10015AA90(v0[14]);
  v0[16] = v1;
  swift_bridgeObjectRelease(v0[14], v2);
  sub_100132278();
  return sub_10015DDB0(v3, v4, v5);
}

uint64_t sub_10015C9C4()
{
  uint64_t v2 = sub_10015DECC();
  uint64_t v3 = (void *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter(v3);
  if (sub_10015DDD0(v4))
  {
    uint64_t v5 = (_WORD *)sub_10012CE30(2LL);
    sub_10015DF44(v5);
    sub_10015DDBC((void *)&_mh_execute_header, v6, v7, "Clearing legacy denier after successfully importing from it");
    sub_10012CE24(v0);
  }

  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  uint64_t v10 = *(void **)(v1 + 48);

  sub_1001450DC(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  [v10 clearFriendSuggestionsDenyList];
  sub_10015DE3C();
  sub_1001324F4();
  sub_1001446D0();
  swift_task_dealloc(v8);
  return sub_100144770(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10015CA6C(uint64_t a1)
{
  uint64_t v3 = *(os_log_s **)(v2 + 128);
  static GKLog.general.getter(a1);
  sub_100158D64();
  uint64_t v4 = sub_100158D64();
  sub_10015DF50(v4);
  os_log_type_t v5 = sub_10015DE80();
  if (os_log_type_enabled(v3, v5))
  {
    uint64_t v6 = *(void *)(v2 + 128);
    uint64_t v1 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v7 = (void *)sub_10012CE30(8LL);
    *(_DWORD *)uint64_t v1 = 138412290;
    swift_errorRetain(v6);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(void *)(v2 + 24) = v8;
    sub_10015DEAC(v2 + 24);
    *uint64_t v7 = v8;
    sub_100132428();
    sub_100132428();
    sub_10012CE90((void *)&_mh_execute_header, v3, v5, "Failed to import denied contact IDs: %@", v1);
    uint64_t v9 = sub_100129274(&qword_1002B8ED0);
    sub_10012CE88((uint64_t)v7, v10, v9);
    sub_10012CE24((uint64_t)v7);
    sub_10012CE24((uint64_t)v1);

    sub_100132428();
  }

  else
  {
    sub_100132428();
    sub_100132428();
    sub_100132428();
  }

  (*(void (**)(void, void))(*(void *)(v2 + 64) + 8LL))(*(void *)(v2 + 72), *(void *)(v2 + 56));
  sub_10015DE3C();
  sub_1001324F4();
  sub_1001446D0();
  swift_task_dealloc(v1);
  return sub_10012CEAC(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t *sub_10015CBC8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, a2);
  uint64_t v11 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  swift_bridgeObjectRetain(v6);
  id result = sub_100159AD8(0, v5, v6, (uint64_t)v9);
  *a3 = result;
  return result;
}

Swift::Int sub_10015CC88()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  sub_10015D9FC(&qword_1002B9408, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

void (*sub_10015CCF8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_10014DC84((uint64_t)v3);
  return sub_10015CD44;
}

void sub_10015CD44(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    sub_10012D388(*a1, v2 + 40);
    sub_10014DCCC((__int128 *)(v2 + 40));
    sub_100129678((void *)v2);
  }

  else
  {
    sub_10014DCCC((__int128 *)*a1);
  }

  free((void *)v2);
}

Swift::Int sub_10015CDA8()
{
  return sub_10015CC88();
}

uint64_t sub_10015CDC8(uint64_t a1, uint64_t a2)
{
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_10015CE20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001596F4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10015CE48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  sub_10015D9FC(&qword_1002B9420, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_10015CE9C(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10015D544(a1, (uint64_t)v16);
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  uint64_t v18 = sub_10012B4E8((uint64_t)v16, 1LL, v17);
  if ((_DWORD)v18 == 1)
  {
    sub_10015D718((uint64_t)v16, &qword_1002B8238);
    uint64_t result = 0LL;
    if ((a2 & 1) == 0) {
      goto LABEL_3;
    }
  }

  else
  {
    unsigned __int8 v20 = TaskPriority.rawValue.getter(v18);
    (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8LL))(v16, v17);
    uint64_t result = v20;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if ((a3 & 1) != 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  result |= 0x100uLL;
  if ((a3 & 1) != 0)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_10015CFD4()
{
  return type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0LL);
}

uint64_t type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(uint64_t a1)
{
  uint64_t result = qword_1002B9228;
  if (!qword_1002B9228) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  }
  return result;
}

uint64_t sub_10015D014(uint64_t a1)
{
  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  uint64_t v4[2] = (char *)&value witness table for () + 64;
  v4[3] = "(";
  uint64_t result = type metadata accessor for ObservationRegistrar(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for FriendSuggestionDenyList()
{
  return objc_opt_self(&OBJC_CLASS___GKFriendSuggestionDenyList);
}

uint64_t type metadata accessor for FriendSuggestionDenier()
{
  return objc_opt_self(&OBJC_CLASS___GKFriendSuggestionDenier);
}

ValueMetadata *type metadata accessor for DeniedSuggestionSchemaV1()
{
  return &type metadata for DeniedSuggestionSchemaV1;
}

ValueMetadata *type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion._SwiftDataNoType()
{
  return &type metadata for DeniedSuggestionSchemaV1.DeniedSuggestion._SwiftDataNoType;
}

void sub_10015D0FC()
{
}

void sub_10015D128()
{
}

void sub_10015D154()
{
}

void sub_10015D180()
{
}

void sub_10015D1AC()
{
}

void sub_10015D1D8(void *a1@<X8>)
{
}

void sub_10015D1F4(uint64_t *a1@<X8>)
{
  *a1 = sub_1001596F4();
  a1[1] = v2;
  sub_100132514();
}

void sub_10015D218(uint64_t *a1@<X8>)
{
  *a1 = sub_100159644();
  a1[1] = v2;
  sub_100132514();
}

uint64_t sub_10015D240()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B942C);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10014497C(v1, (uint64_t)sub_10014C54C);
  return sub_1001447AC(v2, v3, v4);
}

uint64_t sub_10015D288()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10015D2B4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B943C);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10014497C(v1, (uint64_t)sub_10014C54C);
  return sub_1001447AC(v2, v3, v4);
}

uint64_t sub_10015D2FC()
{
  uint64_t v1 = (void *)sub_10014C718();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10014C568(v1, (uint64_t)sub_10014C54C);
  return sub_10014C558(v2, v3, v4, v5);
}

unint64_t sub_10015D340()
{
  unint64_t result = qword_1002B9470;
  if (!qword_1002B9470)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F42BC, &type metadata for FriendSuggestionDenierError);
    atomic_store(result, (unint64_t *)&qword_1002B9470);
  }

  return result;
}

void sub_10015D37C(unint64_t *a1)
{
  if (!*a1)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    atomic_store(sub_100158C80(v2), a1);
  }

  sub_100132514();
}

uint64_t sub_10015D3B4()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10015D3E8()
{
  uint64_t v1 = (void *)sub_10014C718();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10014C568(v1, (uint64_t)sub_10014C54C);
  return sub_10014C558(v2, v3, v4, v5);
}

uint64_t sub_10015D42C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10015D458()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B949C);
  *(void *)(v0 + 16) = v1;
  sub_10015DEE4(v1);
  return sub_10015B900();
}

uint64_t sub_10015D4B4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10015D4D8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)sub_10014C718();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10014402C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002BA5D0 + dword_1002BA5D0))(a1, v4);
}

uint64_t sub_10015D544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B8238);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015D58C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10015A64C(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

unint64_t sub_10015D598()
{
  unint64_t result = qword_1002B94F0;
  if (!qword_1002B94F0)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002B94E8);
    sub_10015D5FC();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B94F0);
  }

  return result;
}

unint64_t sub_10015D5FC()
{
  unint64_t result = qword_1002B94F8;
  if (!qword_1002B94F8)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002B94C0);
    sub_10015D668();
    sub_100158274();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B94F8);
  }

  return result;
}

unint64_t sub_10015D668()
{
  unint64_t result = qword_1002B9500;
  if (!qword_1002B9500)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002B94C8);
    sub_10015D6E4(&qword_1002B9508, &qword_1002B94D0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B9500);
  }

  return result;
}

void sub_10015D6E4(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_1001292F8(a2);
    atomic_store(sub_100158C80(v3), a1);
  }

  sub_100132514();
}

void sub_10015D718(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100129274(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_100132514();
}

unint64_t sub_10015D750()
{
  unint64_t result = qword_1002B82D0;
  if (!qword_1002B82D0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B82D0);
  }

  return result;
}

uint64_t sub_10015D78C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10015D7C8()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc(dword_1002B951C);
  *(void *)(v1 + 16) = v5;
  uint64_t v6 = sub_10015DEE4(v5);
  return sub_10015C81C(v6, v7, v8, v2, v3, v4);
}

uint64_t *sub_10015D838@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  return sub_10015CBC8(a1, *(void *)(v2 + 16), a2);
}

int64_t sub_10015D858(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t sub_10015D940(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 9LL; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

unint64_t sub_10015D9C0()
{
  unint64_t result = qword_1002B9528;
  if (!qword_1002B9528)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F428C, &type metadata for DeniedSuggestionMigrationPlan);
    atomic_store(result, (unint64_t *)&qword_1002B9528);
  }

  return result;
}

void sub_10015D9FC(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = a2(255LL);
    atomic_store(sub_100158C80(v3), a1);
  }

  sub_100132514();
}

ValueMetadata *type metadata accessor for DeniedSuggestionMigrationPlan()
{
  return &type metadata for DeniedSuggestionMigrationPlan;
}

unint64_t destroy for FriendSuggestionDenierError(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(void *)(a1 + 8);
  int v4 = -1;
  if (result < 0xFFFFFFFF) {
    int v4 = result;
  }
  if (v4 - 1 < 0)
  {
    swift_bridgeObjectRelease(result, a2);
    return swift_errorRelease(*(void *)(a1 + 16));
  }

  return result;
}

void _s14GameDaemonCore27FriendSuggestionDenierErrorOwCP_0(void *a1, void *a2)
{
  unint64_t v3 = a2[1];
  LODWORD(swift_bridgeObjectRelease(v0[23], v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = a2[1];
  }
  if ((int)v4 - 1 < 0)
  {
    *a1 = *a2;
    a1[1] = v3;
    uint64_t v5 = a2[2];
    swift_bridgeObjectRetain(v3);
    sub_100158D64();
    a1[2] = v5;
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
  }

  sub_100132514();
}

void *assignWithCopy for FriendSuggestionDenierError(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF) {
    LODWORD(v6) = -1;
  }
  else {
    uint64_t v6 = a1[1];
  }
  int v7 = v6 - 1;
  if (a2[1] < 0xFFFFFFFFuLL) {
    uint64_t v5 = a2[1];
  }
  int v8 = v5 - 1;
  if (v7 < 0)
  {
    if (v8 < 0)
    {
      *a1 = *a2;
      uint64_t v13 = a2[1];
      a1[1] = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v4, v14);
      uint64_t v15 = a1[2];
      uint64_t v16 = a2[2];
      swift_errorRetain(v16);
      a1[2] = v16;
      swift_errorRelease(v15);
      return a1;
    }

    swift_bridgeObjectRelease(a1[1], a2);
    swift_errorRelease(a1[2]);
    goto LABEL_11;
  }

  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    __int128 v11 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v11;
    return a1;
  }

  *a1 = *a2;
  uint64_t v9 = a2[1];
  a1[1] = v9;
  uint64_t v10 = a2[2];
  swift_bridgeObjectRetain(v9);
  swift_errorRetain(v10);
  a1[2] = v10;
  return a1;
}

__n128 initializeWithTake for FriendSuggestionDenierError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for FriendSuggestionDenierError(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    unint64_t v6 = a2[1];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF) {
      uint64_t v7 = a2[1];
    }
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRelease(v4, a2);
      uint64_t v9 = a1[2];
      a1[2] = a2[2];
      swift_errorRelease(v9);
      return a1;
    }

    swift_bridgeObjectRelease(v4, a2);
    swift_errorRelease(a1[2]);
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for FriendSuggestionDenierError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(swift_bridgeObjectRelease(*(void *)(v0 + 40), v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for FriendSuggestionDenierError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_DWORD *)__n128 result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

void *sub_10015DD2C(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    result[1] = 0LL;
    result[2] = 0LL;
    *__n128 result = a2 - 0x7FFFFFFF;
  }

  else if (a2)
  {
    result[1] = a2;
  }

  return result;
}

ValueMetadata *type metadata accessor for FriendSuggestionDenierError()
{
  return &type metadata for FriendSuggestionDenierError;
}

unint64_t sub_10015DD6C()
{
  unint64_t result = qword_1002B9530;
  if (!qword_1002B9530)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4004, &type metadata for DeniedSuggestionSchemaV1);
    atomic_store(result, (unint64_t *)&qword_1002B9530);
  }

  return result;
}

uint64_t sub_10015DDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

void sub_10015DDBC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

BOOL sub_10015DDD0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10015DDE0(uint64_t a1)
{
  *(void *)(v1 + 3sub_100129678(v0 + 2) = a1;
  uint64_t v2 = *(void *)(a1 - 8);
  *(void *)(v1 + 40) = v2;
  return swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10015DE00()
{
  uint64_t v3 = *v1;
  os_log_type_t v4 = (uint64_t *)(v2 - 8);
  *os_log_type_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 48);
  *os_log_type_t v4 = *v1;
  *(void *)(v3 + 56) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10015DE20(uint64_t a1)
{
  return sub_10015BDBC(a1);
}

uint64_t sub_10015DE30(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10015DE3C()
{
  return (*(uint64_t (**)(void, void))(v0[12] + 8LL))(v0[13], v0[11]);
}

uint64_t sub_10015DE54()
{
  return dispatch thunk of Actor.unownedExecutor.getter(v0, v1);
}

uint64_t *sub_10015DE60(char a1)
{
  return sub_100159AD8(a1, v1, v2, v3);
}

uint64_t sub_10015DE74()
{
  return swift_task_dealloc(*(void *)(v0 + 64));
}

uint64_t sub_10015DE80()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10015DE88()
{
  return swift_retain(v0);
}

uint64_t sub_10015DE94()
{
  return type metadata accessor for FriendSuggestionDenierStorage();
}

uint64_t sub_10015DE9C()
{
  return (*(uint64_t (**)(void, void))(v0[5] + 8LL))(v0[6], v0[4]);
}

uint64_t sub_10015DEAC(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a1 + 8);
}

uint64_t sub_10015DEBC(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  return swift_task_dealloc(v1);
}

uint64_t sub_10015DECC()
{
  return static GKLog.general.getter();
}

uint64_t sub_10015DED4()
{
  return static GKLog.general.getter();
}

uint64_t sub_10015DEE4(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10015DEFC()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_10015DF08()
{
  *(void *)(v1 + 24) = v0;
  return type metadata accessor for Logger(0LL);
}

  ;
}

void sub_10015DF20()
{
}

uint64_t sub_10015DF2C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10015DF38()
{
  return swift_errorRelease(v0);
}

_WORD *sub_10015DF44(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_10015DF50(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

  ;
}

uint64_t sub_10015DF64@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

id MetricsIntBucketer.__allocating_init(buckets:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return MetricsIntBucketer.init(buckets:)(a1);
}

id MetricsIntBucketer.init(buckets:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType(v2);
  if (*(void *)(a1 + 16))
  {
    uint64_t v5 = (objc_class *)ObjectType;
    uint64_t v11 = a1;
    unint64_t v6 = v2;
    swift_bridgeObjectRetain(a1);
    sub_10015E1F8(&v11);
    swift_bridgeObjectRelease(a1, v7);
    if (*(void *)(v11 + 16))
    {
      uint64_t v8 = *(void *)(v11 + 32);
      sub_10015EC30(0LL, 1LL);
      *(void *)&v6[OBJC_IVAR___GKMetricsIntBucketer_firstBucket] = v8;
      *(void *)&v6[OBJC_IVAR___GKMetricsIntBucketer_buckets] = v11;

      v10.receiver = v6;
      v10.Class super_class = v5;
      return objc_msgSendSuper2(&v10, "init");
    }

    __break(1u);
  }

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001FLL,  0x800000010024D1C0LL,  "GameDaemonCore/MetricsIntBucketer.swift",  39LL,  2LL,  20LL,  0);
  __break(1u);
  id result = (id)swift_release(v11);
  __break(1u);
  return result;
}

Swift::Int __swiftcall MetricsIntBucketer.clamp(_:)(Swift::Int a1)
{
  Swift::Int v2 = *(void *)(v1 + OBJC_IVAR___GKMetricsIntBucketer_firstBucket);
  if (v2 < a1)
  {
    id v3 = *(void **)(v1 + OBJC_IVAR___GKMetricsIntBucketer_buckets);
    uint64_t v4 = v3[2];
    if (v4)
    {
      Swift::Int v5 = v3[4];
      if (v5 == a1) {
        return a1;
      }
      if (v5 > a1) {
        return v2;
      }
      if (v4 == 1) {
        return v5;
      }
      Swift::Int v7 = v3[5];
      if (v7 == a1)
      {
        return a1;
      }

      else
      {
        uint64_t v8 = v3 + 6;
        for (uint64_t i = v4 - 2; ; --i)
        {
          Swift::Int v2 = v5;
          if (v7 > a1) {
            break;
          }
          Swift::Int v5 = v7;
          if (!i) {
            return v5;
          }
          Swift::Int v10 = *v8++;
          Swift::Int v7 = v10;
          if (v10 == a1) {
            return a1;
          }
        }
      }
    }
  }

  return v2;
}

void MetricsIntBucketer.init()()
{
}

void sub_10015E1F8(void *a1)
{
  Swift::Int v2 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    Swift::Int v2 = sub_10015870C((uint64_t)v2);
  }
  uint64_t v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  sub_10015E260(v4);
  *a1 = v2;
}

void sub_10015E260(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_10015E830(0LL, v3, 1LL, a1);
      }
      return;
    }

LABEL_125:
    __break(1u);
    goto LABEL_126;
  }

  Swift::Int v5 = v4;
  sub_100137558(v3 / 2);
  Swift::Int v90 = a1;
  uint64_t v91 = v7;
  uint64_t v95 = v6;
  uint64_t v93 = v3;
  if (v3 > 0)
  {
    Swift::Int v8 = 0LL;
    uint64_t v9 = *a1;
    uint64_t v89 = *a1 - 8;
    Swift::Int v10 = (char *)_swiftEmptyArrayStorage;
    Swift::Int v92 = v5;
    uint64_t v94 = *a1;
    while (1)
    {
      Swift::Int v11 = v8++;
      if (v8 < v3)
      {
        uint64_t v12 = *(void *)(v9 + 8 * v8);
        uint64_t v13 = *(void *)(v9 + 8 * v11);
        Swift::Int v8 = v11 + 2;
        if (v11 + 2 < v3)
        {
          uint64_t v14 = v12;
          while (1)
          {
            uint64_t v15 = *(void *)(v9 + 8 * v8);
            if (v12 < v13 == v15 >= v14) {
              break;
            }
            ++v8;
            uint64_t v14 = v15;
            if (v8 >= v3)
            {
              Swift::Int v8 = v3;
              break;
            }
          }
        }

        if (v12 < v13)
        {
          if (v8 < v11) {
            goto LABEL_127;
          }
          if (v11 < v8)
          {
            Swift::Int v16 = v8 - 1;
            Swift::Int v17 = v11;
            do
            {
              if (v17 != v16)
              {
                if (!v9) {
                  goto LABEL_133;
                }
                uint64_t v18 = *(void *)(v9 + 8 * v17);
                *(void *)(v9 + 8 * v17) = *(void *)(v9 + 8 * v16);
                *(void *)(v9 + 8 * v16) = v18;
              }

              BOOL v58 = ++v17 < v16--;
            }

            while (v58);
          }
        }
      }

      if (v8 < v3)
      {
        if (__OFSUB__(v8, v11)) {
          goto LABEL_124;
        }
        if (v8 - v11 < v5)
        {
          Swift::Int v19 = v11 + v5;
          if (__OFADD__(v11, v5)) {
            goto LABEL_128;
          }
          if (v19 >= v3) {
            Swift::Int v19 = v3;
          }
          if (v19 < v11)
          {
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            return;
          }

          if (v8 != v19)
          {
            unsigned __int8 v20 = (uint64_t *)(v89 + 8 * v8);
            do
            {
              uint64_t v21 = *(void *)(v9 + 8 * v8);
              Swift::Int v22 = v11;
              uint64_t v23 = v20;
              do
              {
                uint64_t v24 = *v23;
                if (v21 >= *v23) {
                  break;
                }
                if (!v9) {
                  goto LABEL_131;
                }
                uint64_t *v23 = v21;
                v23[1] = v24;
                --v23;
                ++v22;
              }

              while (v8 != v22);
              ++v8;
              ++v20;
            }

            while (v8 != v19);
            Swift::Int v8 = v19;
          }
        }
      }

      if (v8 < v11) {
        goto LABEL_123;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      {
        sub_100157628(0, *((void *)v10 + 2) + 1LL, 1, v10);
        Swift::Int v10 = v78;
      }

      unint64_t v26 = *((void *)v10 + 2);
      unint64_t v25 = *((void *)v10 + 3);
      unint64_t v27 = v26 + 1;
      uint64_t v9 = v94;
      if (v26 >= v25 >> 1)
      {
        sub_100157628(v25 > 1, v26 + 1, 1, v10);
        uint64_t v9 = v94;
        Swift::Int v10 = v79;
      }

      *((void *)v10 + sub_100129678(v0 + 2) = v27;
      uint64_t v28 = v10 + 32;
      uint64_t v29 = &v10[16 * v26 + 32];
      *(void *)uint64_t v29 = v11;
      *((void *)v29 + 1) = v8;
      if (v26)
      {
        while (1)
        {
          unint64_t v30 = v27 - 1;
          if (v27 >= 4)
          {
            uint64_t v35 = &v28[2 * v27];
            uint64_t v36 = *(v35 - 8);
            uint64_t v37 = *(v35 - 7);
            BOOL v41 = __OFSUB__(v37, v36);
            uint64_t v38 = v37 - v36;
            if (v41) {
              goto LABEL_108;
            }
            uint64_t v40 = *(v35 - 6);
            uint64_t v39 = *(v35 - 5);
            BOOL v41 = __OFSUB__(v39, v40);
            uint64_t v33 = v39 - v40;
            char v34 = v41;
            if (v41) {
              goto LABEL_109;
            }
            unint64_t v42 = v27 - 2;
            uint64_t v43 = &v28[2 * v27 - 4];
            uint64_t v45 = *v43;
            uint64_t v44 = v43[1];
            BOOL v41 = __OFSUB__(v44, v45);
            uint64_t v46 = v44 - v45;
            if (v41) {
              goto LABEL_110;
            }
            BOOL v41 = __OFADD__(v33, v46);
            uint64_t v47 = v33 + v46;
            if (v41) {
              goto LABEL_112;
            }
            if (v47 >= v38)
            {
              uint64_t v65 = &v28[2 * v30];
              uint64_t v67 = *v65;
              uint64_t v66 = v65[1];
              BOOL v41 = __OFSUB__(v66, v67);
              uint64_t v68 = v66 - v67;
              if (v41) {
                goto LABEL_118;
              }
              BOOL v58 = v33 < v68;
              goto LABEL_70;
            }
          }

          else
          {
            if (v27 != 3)
            {
              uint64_t v59 = *((void *)v10 + 4);
              uint64_t v60 = *((void *)v10 + 5);
              BOOL v41 = __OFSUB__(v60, v59);
              uint64_t v52 = v60 - v59;
              char v53 = v41;
              goto LABEL_64;
            }

            uint64_t v32 = *((void *)v10 + 4);
            uint64_t v31 = *((void *)v10 + 5);
            BOOL v41 = __OFSUB__(v31, v32);
            uint64_t v33 = v31 - v32;
            char v34 = v41;
          }

          if ((v34 & 1) != 0) {
            goto LABEL_111;
          }
          unint64_t v42 = v27 - 2;
          unint64_t v48 = &v28[2 * v27 - 4];
          uint64_t v50 = *v48;
          uint64_t v49 = v48[1];
          BOOL v51 = __OFSUB__(v49, v50);
          uint64_t v52 = v49 - v50;
          char v53 = v51;
          if (v51) {
            goto LABEL_113;
          }
          uint64_t v54 = &v28[2 * v30];
          uint64_t v56 = *v54;
          uint64_t v55 = v54[1];
          BOOL v41 = __OFSUB__(v55, v56);
          uint64_t v57 = v55 - v56;
          if (v41) {
            goto LABEL_115;
          }
          if (__OFADD__(v52, v57)) {
            goto LABEL_117;
          }
          if (v52 + v57 >= v33)
          {
            BOOL v58 = v33 < v57;
LABEL_70:
            if (v58) {
              unint64_t v30 = v42;
            }
            goto LABEL_72;
          }

LABEL_64:
          if ((v53 & 1) != 0) {
            goto LABEL_114;
          }
          BOOL v61 = &v28[2 * v30];
          uint64_t v63 = *v61;
          uint64_t v62 = v61[1];
          BOOL v41 = __OFSUB__(v62, v63);
          uint64_t v64 = v62 - v63;
          if (v41) {
            goto LABEL_116;
          }
          if (v64 < v52) {
            goto LABEL_81;
          }
LABEL_72:
          uint64_t v69 = v10;
          unint64_t v70 = v30 - 1;
          if (v30 - 1 >= v27)
          {
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }

          if (!v9) {
            goto LABEL_132;
          }
          uint64_t v71 = &v28[2 * v70];
          uint64_t v72 = *v71;
          uint64_t v73 = v28;
          uint64_t v74 = &v28[2 * v30];
          uint64_t v75 = v74[1];
          sub_10015E888((char *)(v9 + 8 * *v71), (char *)(v9 + 8LL * *v74), v9 + 8 * v75, v95);
          if (v1)
          {
            Swift::Int v10 = v69;
LABEL_87:
            swift_bridgeObjectRelease(v10, v76);
            if (v93 >= -1)
            {
              *(void *)(v91 + 16) = 0LL;
              swift_bridgeObjectRelease(v91, v80);
              return;
            }

LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
            goto LABEL_129;
          }

          if (v75 < v72) {
            goto LABEL_105;
          }
          if (v30 > *((void *)v69 + 2)) {
            goto LABEL_106;
          }
          uint64_t *v71 = v72;
          v73[2 * v70 + 1] = v75;
          unint64_t v77 = *((void *)v69 + 2);
          if (v30 >= v77) {
            goto LABEL_107;
          }
          Swift::Int v10 = v69;
          unint64_t v27 = v77 - 1;
          memmove(v74, v74 + 2, 16 * (v77 - 1 - v30));
          uint64_t v28 = v73;
          *((void *)v69 + sub_100129678(v0 + 2) = v77 - 1;
          uint64_t v9 = v94;
          if (v77 <= 2) {
            goto LABEL_81;
          }
        }
      }

      unint64_t v27 = 1LL;
LABEL_81:
      Swift::Int v5 = v92;
      Swift::Int v3 = v93;
      if (v8 >= v93) {
        goto LABEL_91;
      }
    }
  }

  Swift::Int v10 = (char *)_swiftEmptyArrayStorage;
  unint64_t v27 = _swiftEmptyArrayStorage[2];
LABEL_91:
  if (v27 >= 2)
  {
    uint64_t v81 = *v90;
    while (1)
    {
      unint64_t v82 = v27 - 2;
      if (v27 < 2) {
        break;
      }
      if (!v81) {
        goto LABEL_134;
      }
      uint64_t v83 = *(void *)&v10[16 * v82 + 32];
      uint64_t v84 = *(void *)&v10[16 * v27 + 24];
      sub_10015E888((char *)(v81 + 8 * v83), (char *)(v81 + 8LL * *(void *)&v10[16 * v27 + 16]), v81 + 8 * v84, v95);
      if (v1) {
        goto LABEL_87;
      }
      if (v84 < v83) {
        goto LABEL_120;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      {
        sub_10015770C((uint64_t)v10);
        Swift::Int v10 = v87;
      }

      if (v82 >= *((void *)v10 + 2)) {
        goto LABEL_121;
      }
      unint64_t v85 = &v10[16 * v82 + 32];
      *(void *)unint64_t v85 = v83;
      *((void *)v85 + 1) = v84;
      unint64_t v86 = *((void *)v10 + 2);
      if (v27 > v86) {
        goto LABEL_122;
      }
      memmove(&v10[16 * v27 + 16], &v10[16 * v27 + 32], 16 * (v86 - v27));
      *((void *)v10 + sub_100129678(v0 + 2) = v86 - 1;
      unint64_t v27 = v86 - 1;
      if (v86 <= 2) {
        goto LABEL_102;
      }
    }

LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }

LABEL_102:
  swift_bridgeObjectRelease(v10, v6);
  if (v93 < -1) {
    goto LABEL_130;
  }
  *(void *)(v91 + 16) = 0LL;
  swift_bridgeObjectRelease(v91, v88);
}

uint64_t sub_10015E830(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
    while (2)
    {
      uint64_t v6 = *(void *)(v4 + 8 * a3);
      uint64_t v7 = result;
      Swift::Int v8 = (uint64_t *)v5;
      do
      {
        uint64_t v9 = *v8;
        if (v6 >= *v8) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }

        *Swift::Int v8 = v6;
        v8[1] = v9;
        --v8;
        ++v7;
      }

      while (a3 != v7);
      ++a3;
      v5 += 8LL;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_10015E888(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 8;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 8;
  if (v9 >= v11)
  {
    sub_10016A3BC(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    uint64_t v12 = &v4[8 * v11];
    if (v7 >= v6 || v10 < 8) {
      goto LABEL_39;
    }
    uint64_t v18 = (char *)(a3 - 8);
    while (1)
    {
      Swift::Int v19 = v18 + 8;
      uint64_t v20 = *((void *)v6 - 1);
      if (*((void *)v12 - 1) >= v20)
      {
        BOOL v22 = v19 != v12 || v18 >= v12;
        uint64_t v20 = *((void *)v12 - 1);
        v12 -= 8;
        if (!v22) {
          goto LABEL_35;
        }
      }

      else
      {
        BOOL v21 = v19 != v6 || v18 >= v6;
        v6 -= 8;
        if (!v21) {
          goto LABEL_35;
        }
      }

      *(void *)uint64_t v18 = v20;
LABEL_35:
      v18 -= 8;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_39;
      }
    }
  }

  sub_10016A3BC(a1, (a2 - a1) / 8, a4);
  uint64_t v12 = &v4[8 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      uint64_t v14 = *(void *)v6;
      if (*(void *)v6 < *(void *)v4) {
        break;
      }
      uint64_t v14 = *(void *)v4;
      BOOL v15 = v7 == v4;
      v4 += 8;
      if (!v15) {
        goto LABEL_11;
      }
LABEL_12:
      v7 += 8;
    }

    BOOL v15 = v7 == v6;
    v6 += 8;
    if (v15) {
      goto LABEL_12;
    }
LABEL_11:
    *(void *)uint64_t v7 = v14;
    goto LABEL_12;
  }

uint64_t sub_10015EA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    uint64_t v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_4;
    }
  }

  if (v7 < 0) {
    uint64_t v21 = v7;
  }
  else {
    uint64_t v21 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_1001325D8();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v21);
  sub_100132454(v9, v22);
LABEL_4:
  if (v9 < v5)
  {
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1LL, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    goto LABEL_9;
  }

void sub_10015EC30(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (isUniquelyReferenced_nonNull_native && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_17;
    }
  }

  else
  {
    if (v5 <= v9) {
      uint64_t v11 = v5 + v8;
    }
    else {
      uint64_t v11 = v5;
    }
    sub_100169B64(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    uint64_t v4 = v12;
    if (!v8) {
      goto LABEL_17;
    }
  }

  uint64_t v13 = *(void *)(v4 + 16);
  if (__OFSUB__(v13, a2)) {
    goto LABEL_23;
  }
  sub_10016A3BC((char *)(v4 + 32 + 8 * a2), v13 - a2, (char *)(v4 + 32 + 8 * a1));
  uint64_t v14 = *(void *)(v4 + 16);
  BOOL v15 = __OFADD__(v14, v8);
  uint64_t v16 = v14 + v8;
  if (!v15)
  {
    *(void *)(v4 + 16) = v16;
LABEL_17:
    *Swift::Int v2 = v4;
    return;
  }

uint64_t type metadata accessor for MetricsIntBucketer()
{
  return objc_opt_self(&OBJC_CLASS___GKMetricsIntBucketer);
}

uint64_t sub_10015ED3C(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v6 = result;
  uint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v8 = result - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      uint64_t v11 = v5 + v8;
    }
    else {
      uint64_t v11 = v5;
    }
    sub_100169B80(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    uint64_t v4 = v12;
  }

  uint64_t v13 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v15 = v4 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v16 = *(void *)(v14 + 72);
  unint64_t v17 = v15 + v16 * v6;
  uint64_t result = swift_arrayDestroy(v17, v7, v13);
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v18 = *(void *)(v4 + 16);
  if (__OFSUB__(v18, a2)) {
    goto LABEL_22;
  }
  uint64_t result = sub_10016A498(v15 + v16 * a2, v18 - a2, v17);
  uint64_t v19 = *(void *)(v4 + 16);
  BOOL v20 = __OFADD__(v19, v8);
  uint64_t v21 = v19 - v7;
  if (!v20)
  {
    *(void *)(v4 + 16) = v21;
LABEL_16:
    *Swift::Int v2 = v4;
    return result;
  }

uint64_t sub_10015EE50()
{
  Swift::Int v2 = v0;
  uint64_t v3 = sub_1001447C4();
  uint64_t v63 = *(uint64_t (**)(char *, uint64_t))(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v61 - v8;
  static os_log_type_t.info.getter(v7);
  sub_1001624BC();
  _StringGuts.grow(_:)(32LL);
  swift_bridgeObjectRelease(v65, v10);
  uint64_t v64 = 0xD00000000000001ELL;
  unint64_t v65 = 0x800000010024D570LL;
  v11._uint64_t countAndFlagsBits = sub_10015F990();
  String.append(_:)(v11);
  sub_100132858(v12, v13);
  uint64_t v15 = v64;
  uint64_t v14 = v65;
  sub_100144D50();
  sub_100135A20(v14);
  uint64_t v16 = (os_log_s *)sub_100144D48();
  if (sub_1001449DC(v16))
  {
    uint64_t v62 = v3;
    unint64_t v17 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v18 = sub_10012CE30(32LL);
    BOOL v61 = v6;
    uint64_t v19 = v18;
    uint64_t v64 = v18;
    *(_DWORD *)unint64_t v17 = 136315138;
    sub_100144E9C();
    uint64_t v21 = sub_100162470(v15, v20, &v64);
    uint64_t v22 = sub_100162498(v21);
    uint64_t v3 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22, v23);
    sub_100135A44(v14);
    sub_10012CE90((void *)&_mh_execute_header, v16, v1, "Nearby - %s", v17);
    sub_10012CE88(v19, v24, (uint64_t)&type metadata for Any + 8);
    uint64_t v25 = v19;
    uint64_t v6 = v61;
    sub_10012CE24(v25);
    sub_10012CE24((uint64_t)v17);
  }

  else
  {

    sub_100135A28(v14);
  }

  uint64_t v26 = (uint64_t (*)(char *, uint64_t))*((void *)v63 + 1);
  uint64_t v27 = v26(v9, v3);
  sub_100132858(v27, v28);
  if (v2[15])
  {
    sub_10012CF38();
    Task.cancel()();
    sub_10012CF14();
  }

  uint64_t v29 = v2[4];
  if (v29)
  {
    uint64_t v63 = v26;
    uint64_t v30 = swift_retain(v29);
    static os_log_type_t.info.getter(v30);
    sub_1001624BC();
    _StringGuts.grow(_:)(24LL);
    uint64_t v32 = swift_bridgeObjectRelease(v65, v31);
    uint64_t v64 = 0xD000000000000016LL;
    unint64_t v65 = 0x800000010024D590LL;
    v39._uint64_t countAndFlagsBits = NWConnection.debugDescription.getter(v32, v33, v34, v35, v36, v37, v38);
    String.append(_:)(v39);
    uint64_t v42 = sub_1001322A0(v40, v41);
    uint64_t v44 = v64;
    uint64_t v43 = v65;
    static GKLog.match.getter(v42);
    uint64_t v45 = sub_100135A20(v43);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = v26;
    if (sub_1001449DC(v46))
    {
      BOOL v61 = v6;
      unint64_t v48 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v49 = sub_10012CE30(32LL);
      uint64_t v64 = v49;
      uint64_t v62 = v3;
      *(_DWORD *)unint64_t v48 = 136315138;
      sub_100144E9C();
      uint64_t v51 = sub_100162470(v44, v50, &v64);
      uint64_t v52 = sub_100162498(v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v52, v53);
      sub_100135A44(v43);
      sub_10012CE90((void *)&_mh_execute_header, v46, v47, "Nearby - %s", v48);
      sub_10012CE88(v49, v54, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v49);
      sub_10012CE24((uint64_t)v48);

      uint64_t v55 = v61;
      uint64_t v56 = v62;
    }

    else
    {

      sub_100135A28(v43);
      uint64_t v55 = v6;
      uint64_t v56 = v3;
    }

    uint64_t v58 = v63(v55, v56);
    sub_100132858(v58, v59);
    NWConnection.forceCancel()();
    swift_release(v29);
    uint64_t v57 = v2[4];
  }

  else
  {
    uint64_t v57 = 0LL;
  }

  void v2[4] = 0LL;
  swift_release(v57);
  v2[3] = 0LL;
  return swift_unknownObjectWeakAssign(v2 + 2, 0LL);
}

uint64_t sub_10015F1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[10] = a5;
  v6[11] = v5;
  v6[8] = a3;
  v6[9] = a4;
  v6[6] = a1;
  v6[7] = a2;
  uint64_t v7 = sub_1001447C4();
  v6[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[13] = v8;
  v6[14] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100132278();
  return sub_100144664(v9, v10, v11);
}

uint64_t sub_10015F254()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 88) + 32LL);
  *(void *)(v0 + 120) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 64);
    __int128 v7 = *(_OWORD *)(v0 + 48);
    uint64_t v3 = swift_task_alloc(48LL);
    *(void *)(v0 + 128) = v3;
    *(void *)(v3 + 16) = v1;
    *(_OWORD *)(v3 + 24) = v7;
    *(void *)(v3 + 40) = v2;
    uint64_t v4 = async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1];
    sub_10012CF38();
    uint64_t v5 = (void *)swift_task_alloc(v4);
    *(void *)(v0 + 136) = v5;
    void *v5 = v0;
    v5[1] = sub_10015F330;
    sub_100132278();
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }

  else
  {
    sub_100162490();
    return sub_100162414(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10015F330()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 136);
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (!v0) {
    swift_task_dealloc(*(void *)(v2 + 128));
  }
  sub_100132278();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_10015F398()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10015F3C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v28;
  a24 = v26;
  uint64_t v29 = *(void *)(v26 + 144);
  uint64_t v30 = *(void **)(v26 + 80);
  uint64_t v31 = *(void *)(v26 + 72);
  uint64_t v32 = swift_task_dealloc(*(void *)(v26 + 128));
  os_log_type_t v33 = static os_log_type_t.error.getter(v32);
  sub_100144F70();
  _StringGuts.grow(_:)(47LL);
  uint64_t v34 = a15;
  *(void *)(v26 + 16) = a14;
  *(void *)(v26 + 24) = v34;
  sub_10014487C();
  v35._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v35);
  v36._uint64_t countAndFlagsBits = sub_10015F990();
  object = v36._object;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(object, v38);
  v39._uint64_t countAndFlagsBits = 673197344LL;
  v39._object = (void *)0xE400000000000000LL;
  String.append(_:)(v39);
  v40._uint64_t countAndFlagsBits = v31;
  v40._object = v30;
  String.append(_:)(v40);
  sub_10014487C();
  String.append(_:)(v41);
  *(void *)(v26 + 3sub_100129678(v0 + 2) = v29;
  uint64_t v42 = sub_100129274(&qword_1002B83B8);
  uint64_t v43 = _print_unlocked<A, B>(_:_:)(v26 + 32, v26 + 16, v42);
  uint64_t v44 = *(void *)(v26 + 16);
  uint64_t v45 = *(void *)(v26 + 24);
  static GKLog.match.getter(v43);
  uint64_t v46 = sub_100135A20(v45);
  os_log_type_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v48 = v33;
  if (sub_1001449DC(v47))
  {
    uint64_t v65 = *(void *)(v26 + 120);
    uint64_t v66 = *(void *)(v26 + 144);
    uint64_t v49 = *(void *)(v26 + 104);
    uint64_t v63 = *(void *)(v26 + 96);
    uint64_t v64 = *(void *)(v26 + 112);
    uint64_t v50 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v51 = sub_10012CE30(32LL);
    a14 = v51;
    *(_DWORD *)uint64_t v50 = 136315138;
    sub_1001296D0();
    *(void *)(v26 + 40) = sub_100144848(v44, v52, &a14);
    sub_100144840(v26 + 40, v26 + 48);
    sub_100135A44(v45);
    sub_10012CE90((void *)&_mh_execute_header, v47, v48, "Nearby - %s", v50);
    sub_10012CE88(v51, v53, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v51);
    sub_10012CE24((uint64_t)v50);

    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v64, v63);
    uint64_t v54 = swift_release(v65);
    sub_10012B950(v54, v55);
    uint64_t v56 = v66;
  }

  else
  {
    uint64_t v57 = *(void *)(v26 + 144);
    uint64_t v58 = *(void *)(v26 + 120);
    uint64_t v59 = *(void *)(v26 + 104);
    sub_100135A28(v45);

    sub_100144B04(*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8));
    uint64_t v60 = swift_release(v58);
    sub_10012B950(v60, v61);
    uint64_t v56 = v57;
  }

  swift_errorRelease(v56);
  sub_100162490();
  return sub_1001446A0(*(uint64_t (**)(void))(v26 + 8));
}

uint64_t sub_10015F618()
{
  v1[4] = v0;
  uint64_t v2 = sub_1001447C4();
  v1[5] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[6] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[7] = swift_task_alloc(v4);
  v1[8] = swift_task_alloc(v4);
  sub_100132278();
  return sub_100144664(v5, v6, v7);
}

#error "10015F8B0: call analysis failed (funcsize=188)"
unint64_t sub_10015F990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v1 = 7104878LL;
  _StringGuts.grow(_:)(45LL);
  swift_bridgeObjectRelease(0xE000000000000000LL, v2);
  uint64_t v30 = 0xD00000000000001DLL;
  uint64_t v31 = 0x800000010024D2C0LL;
  if (*(void *)(v0 + 32))
  {
    uint64_t v3 = sub_10012CF38();
    uint64_t v10 = NWConnection.debugDescription.getter(v3, v4, v5, v6, v7, v8, v9);
    uint64_t v12 = v11;
    sub_10012CF14();
    uint64_t v28 = v10;
    uint64_t v29 = v12;
    uint64_t v13 = String.init<A>(reflecting:)(&v28, &type metadata for String);
    uint64_t v15 = v14;
  }

  else
  {
    uint64_t v15 = 0xE300000000000000LL;
    uint64_t v13 = 7104878LL;
  }

  uint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease(v15, v17);
  v18._uint64_t countAndFlagsBits = 0x6167656C6564202CLL;
  v18._object = (void *)0xEC000000203A6574LL;
  String.append(_:)(v18);
  uint64_t v19 = sub_1001624AC();
  if (v19)
  {
    uint64_t v20 = *(void *)(v0 + 24);
    uint64_t v28 = v19;
    uint64_t v29 = v20;
    uint64_t v21 = sub_100129274(&qword_1002B9630);
    uint64_t v1 = String.init<A>(reflecting:)(&v28, v21);
    uint64_t v23 = v22;
  }

  else
  {
    uint64_t v23 = (void *)0xE300000000000000LL;
  }

  v24._uint64_t countAndFlagsBits = v1;
  v24._object = v23;
  String.append(_:)(v24);
  sub_1001322A0(v25, v26);
  return v30;
}

uint64_t sub_10015FAD0(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(v2 + 3sub_100129678(v0 + 2) = *(void *)a1;
  *(void *)(v2 + 40) = v3;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 16);
  *(void *)(v2 + 64) = *(void *)(a1 + 32);
  *(_OWORD *)(v2 + 7sub_100129678(v0 + 2) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 56);
  *(void *)(v2 + 104) = *(void *)(a1 + 72);
  sub_100132278();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_10015FB1C()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  __int128 v4 = *(_OWORD *)(v0 + 64);
  __int128 v3 = *(_OWORD *)(v0 + 80);
  __int128 v5 = *(_OWORD *)(v0 + 48);
  uint64_t v7 = *(void **)(v0 + 16);
  uint64_t v6 = *(void **)(v0 + 24);
  uint64_t v8 = v6[5];
  uint64_t v9 = v6[6];
  uint64_t v10 = v6[7];
  uint64_t v11 = v6[8];
  uint64_t v12 = v6[9];
  uint64_t v13 = v6[10];
  uint64_t v14 = v6[11];
  uint64_t v15 = v6[12];
  uint64_t v16 = v6[13];
  uint64_t v17 = v6[14];
  *(_OWORD *)(v6 + 5) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v6 + 7) = v5;
  *(_OWORD *)(v6 + 9) = v4;
  *(_OWORD *)(v6 + 11) = v3;
  v6[13] = v2;
  v6[14] = v1;
  sub_10014412C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
  sub_100161FA8(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015FB8C(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for NWError(0LL);
  v2[11] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100129274(&qword_1002B8238);
  v2[14] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v2[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[16] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[17] = swift_task_alloc(v8);
  v2[18] = swift_task_alloc(v8);
  v2[19] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for NWConnection.State(0LL);
  v2[20] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[21] = v10;
  v2[22] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10015FC7C, 0LL, 0LL);
}

#error "10015FF24: call analysis failed (funcsize=415)"
uint64_t sub_10016033C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_10012CED0();
  sub_10012CE48();
  sub_100158D6C();
  sub_100132278();
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_100160374()
{
  return sub_100162414(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001603C4()
{
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_1001603FC()
{
  return sub_100162414(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100160458()
{
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_100160490()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B9684);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10016240C;
  return sub_1001604D8();
}

uint64_t sub_1001604D8()
{
  v1[15] = v0;
  uint64_t v2 = sub_100129274(&qword_1002B9688);
  v1[16] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[17] = v3;
  v1[18] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100129274(&qword_1002B9690);
  v1[19] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[20] = v5;
  v1[21] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v1[22] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[23] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[24] = swift_task_alloc(v8);
  v1[25] = swift_task_alloc(v8);
  return swift_task_switch(sub_1001605A0, 0LL, 0LL);
}

#error "1001605E8: call analysis failed (funcsize=140)"
uint64_t sub_1001607E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_10012CED0();
  sub_10012CE48();
  sub_100132278();
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_100160818( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v28;
  a24 = v26;
  uint64_t v29 = *(void *)(v26 + 24);
  *(void *)(v26 + 240) = *(void *)(v26 + 16);
  *(void *)(v26 + 248) = v29;
  uint64_t v30 = *(void *)(v26 + 32);
  uint64_t v31 = *(void *)(v26 + 40);
  *(void *)(v26 + 256) = v30;
  *(void *)(v26 + 264) = v31;
  if (v30 == 1)
  {
    sub_100158EA0(*(void *)(v26 + 160));
    sub_10012CF14();
    swift_task_dealloc(*(void *)(v26 + 200));
    sub_1001324F4();
    sub_1001446D0();
    sub_1001447A4();
    return sub_1001446A0(*(uint64_t (**)(void))(v26 + 8));
  }

  else
  {
    if (v31)
    {
      uint64_t v33 = swift_errorRetain(v31);
      os_log_type_t v60 = static os_log_type_t.error.getter(v33);
      *(void *)(v26 + 88) = 0LL;
      *(void *)(v26 + 96) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(53LL);
      uint64_t v34 = *(void *)(v26 + 96);
      *(void *)(v26 + 7sub_100129678(v0 + 2) = *(void *)(v26 + 88);
      *(void *)(v26 + 80) = v34;
      sub_10014487C();
      v35._uint64_t countAndFlagsBits = 0xD000000000000033LL;
      String.append(_:)(v35);
      swift_getErrorValue(v31, v26 + 104, v26 + 48);
      v36._uint64_t countAndFlagsBits = Error.localizedDescription.getter(*(void *)(v26 + 56), *(void *)(v26 + 64));
      object = v36._object;
      String.append(_:)(v36);
      uint64_t v39 = swift_bridgeObjectRelease(object, v38);
      unint64_t v40 = *(void *)(v26 + 80);
      uint64_t v58 = *(void *)(v26 + 72);
      static GKLog.match.getter(v39);
      uint64_t v41 = sub_100135A20(v40);
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = v60;
      BOOL v44 = sub_1001449DC(v42);
      uint64_t v45 = *(void *)(v26 + 192);
      uint64_t v61 = *(void *)(v26 + 176);
      if (v44)
      {
        uint64_t v46 = (void *)(v26 + 216);
        uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v26 + 216);
        uint64_t v59 = v42;
        uint64_t v47 = sub_10012CE30(12LL);
        uint64_t v56 = v45;
        uint64_t v48 = sub_10012CE30(32LL);
        a15 = v48;
        *(_DWORD *)uint64_t v47 = 136315138;
        swift_bridgeObjectRetain(v40);
        *(void *)(v47 + 4) = sub_100135074(v58, v40, &a15);
        sub_100135A44(v40);
        sub_10012CE90((void *)&_mh_execute_header, v59, v43, "Nearby - %s", (uint8_t *)v47);
        sub_10012CE88(v48, v49, (uint64_t)&type metadata for Any + 8);
        sub_10012CE24(v48);
        sub_10012CE24(v47);

        v57(v56, v61);
      }

      else
      {
        uint64_t v46 = (void *)(v26 + 224);
        uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v26 + 224);
        sub_100135A28(v40);

        v51(v45, v61);
      }

      swift_bridgeObjectRelease(v40, v50);
      swift_errorRelease(v31);
    }

    else
    {
      uint64_t v46 = (void *)(v26 + 224);
    }

    *(void *)(v26 + 27sub_100129678(v0 + 2) = *v46;
    uint64_t v52 = (void *)swift_task_alloc(dword_1002B969C);
    *(void *)(v26 + 280) = v52;
    *uint64_t v52 = v26;
    v52[1] = sub_100160A8C;
    sub_1001448F0();
    return sub_100160CE8(v53, v54, v55);
  }

uint64_t sub_100160A8C()
{
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_100160AC0()
{
  v0[28] = v0[34];
  uint64_t v1 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to AsyncStream.Iterator.next(isolation:) + 1));
  v0[29] = v1;
  void *v1 = v0;
  v1[1] = sub_1001607E4;
  sub_100132278();
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t sub_100160B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWConnection.State(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v7);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a2 += 16LL;
  swift_beginAccess(a2, v18, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = type metadata accessor for TaskPriority(0LL);
    sub_1001291F8((uint64_t)v9, 1LL, 1LL, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(&v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8], a1, v4);
    uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v14 = (v13 + 40) & ~v13;
    uint64_t v15 = (char *)swift_allocObject(&unk_100274F38, v14 + v6, v13 | 7);
    *((void *)v15 + sub_100129678(v0 + 2) = 0LL;
    *((void *)v15 + 3) = 0LL;
    *((void *)v15 + 4) = v11;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))( &v15[v14],  &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8],  v4);
    sub_100185858();
    return swift_release(v16);
  }

  return result;
}

uint64_t sub_100160C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_1002B966C);
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10016240C;
  return sub_10015FB8C(a5);
}

uint64_t sub_100160CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[11] = a3;
  v4[12] = v3;
  void v4[9] = a1;
  v4[10] = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[14] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[15] = swift_task_alloc(v7);
  v4[16] = swift_task_alloc(v7);
  return swift_task_switch(sub_100160D5C, 0LL, 0LL);
}

uint64_t sub_100160D5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 96);
  os_log_type_t v3 = static os_log_type_t.info.getter(a1);
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease(0xE000000000000000LL, v4);
  uint64_t v33 = 0xD000000000000018LL;
  uint64_t v34 = 0x800000010024D4F0LL;
  *(void *)(v1 + 40) = *(void *)(v2 + 32);
  uint64_t v5 = sub_100129274(&qword_1002B96A0);
  v6._uint64_t countAndFlagsBits = Optional.debugDescription.getter(v5);
  String.append(_:)(v6);
  sub_10012B950(v7, v8);
  uint64_t v10 = v33;
  uint64_t v9 = v34;
  sub_100144D50();
  sub_100135A20(v34);
  uint64_t v11 = (os_log_s *)sub_100144D48();
  if (os_log_type_enabled(v11, v3))
  {
    uint64_t v12 = *(void *)(v1 + 112);
    uint64_t v31 = *(void *)(v1 + 104);
    uint64_t v32 = *(void *)(v1 + 128);
    uint64_t v13 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v14 = sub_10012CE30(32LL);
    uint64_t v33 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_1001296D0();
    *(void *)(v1 + 64) = sub_100144848(v10, v15, &v33);
    sub_1001449A8(v1 + 64, v1 + 72);
    sub_100135A44(v9);
    sub_10012CE90((void *)&_mh_execute_header, v11, v3, "Nearby - %s", v13);
    sub_10012CE88(v14, v16, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v14);
    sub_10012CE24((uint64_t)v13);

    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    uint64_t v18 = v17(v32, v31);
  }

  else
  {
    uint64_t v20 = *(void *)(v1 + 112);
    sub_100135A28(v34);

    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    uint64_t v21 = sub_100144864();
    uint64_t v18 = v17(v21, v22);
  }

  sub_10012B950(v18, v19);
  *(void *)(v1 + 136) = v17;
  if (*(void *)(v1 + 88))
  {
    if (qword_1002B7EE0 != -1) {
      swift_once(&qword_1002B7EE0, sub_100148B08);
    }
    uint64_t v23 = dispatch thunk of NWConnection.ContentContext.protocolMetadata(definition:)(qword_1002BF870);
    *(void *)(v1 + 144) = v23;
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = type metadata accessor for NWProtocolFramer.Message(0LL);
      uint64_t v26 = swift_dynamicCastClass(v24, v25);
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t Strong = swift_unknownObjectWeakLoadStrong(*(void *)(v1 + 96) + 16LL);
        *(void *)(v1 + 15sub_100129678(v0 + 2) = Strong;
        if (Strong)
        {
          uint64_t v29 = (void *)swift_task_alloc(dword_1002B85EC);
          *(void *)(v1 + 160) = v29;
          *uint64_t v29 = v1;
          v29[1] = sub_100161008;
          return sub_100141650(*(void *)(v1 + 72), *(void *)(v1 + 80), v27, *(void *)(v1 + 96));
        }
      }

      sub_10013A738();
    }
  }

  sub_1001624B4();
  sub_1001324F4();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100161008()
{
  uint64_t v3 = *(void *)(v2 + 160);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 168) = v0;
  swift_task_dealloc(v3);
  sub_100132278();
  return sub_100144664(v5, v6, v7);
}

uint64_t sub_100161058()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

#error "1001610C8: call analysis failed (funcsize=124)"
uint64_t sub_10016128C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v1 = sub_100129274(&qword_1002B96B0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v4 + 104))( v3,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:));
  return AsyncStream.init(_:bufferingPolicy:_:)(&_s7MessageVN, v3, sub_100162010, v0, &_s7MessageVN);
}

uint64_t sub_10016132C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a2;
  uint64_t v7 = sub_100129274(&qword_1002B9640);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = type metadata accessor for NWConnection.SendCompletion(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t (**)(uint64_t))((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v7);
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = (v14 + 16) & ~v14;
  uint64_t v16 = swift_allocObject(&unk_100274EE8, v15 + v9, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v16 + v15,  (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7);
  uint8_t *v13 = sub_100161CD0;
  v13[1] = (uint64_t (*)(uint64_t))v16;
  (*(void (**)(uint64_t (**)(uint64_t), void, uint64_t))(v11 + 104))( v13,  enum case for NWConnection.SendCompletion.contentProcessed(_:),  v10);
  NWConnection.send(content:contentContext:isComplete:completion:)(a3, v19, v20, 1LL, v13);
  return (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_10016148C(uint64_t a1)
{
  uint64_t v2 = sub_100129274(&qword_1002B9648);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NWError(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100161D10(a1, (uint64_t)v4);
  if (sub_10012B4E8((uint64_t)v4, 1LL, v5) == 1)
  {
    sub_100161D58((uint64_t)v4);
    uint64_t v9 = sub_100129274(&qword_1002B9640);
    return CheckedContinuation.resume(returning:)(v9, v9);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    unint64_t v11 = sub_10012CDE0();
    uint64_t v12 = swift_allocError(v5, v11, 0LL, 0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v13, v8, v5);
    uint64_t v16 = v12;
    uint64_t v14 = sub_100129274(&qword_1002B9640);
    CheckedContinuation.resume(throwing:)(&v16, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

uint64_t *sub_1001615E8()
{
  return v0;
}

uint64_t sub_100161634()
{
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

uint64_t type metadata accessor for PeerConnection()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCore14PeerConnection);
}

unint64_t sub_100161674()
{
  return sub_10015F990();
}

uint64_t sub_100161694(uint64_t a1)
{
  return sub_10016132C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1001616A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B96B8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  unint64_t v10 = (v6 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_100274F88, v10 + 8, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v11 + v9, v7, v4);
  *(void *)(v11 + v10) = a2;
  swift_retain(a2);
  NWConnection.receiveMessage(completion:)(sub_10016201C, v11);
  return swift_release(v11);
}

uint64_t sub_100161794( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = a7;
  uint64_t v68 = a6;
  uint64_t v64 = a3;
  uint64_t v65 = a1;
  unint64_t v66 = a2;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v62 = *(void *)(v8 - 8);
  uint64_t v63 = v8;
  __chkstk_darwin(v8);
  uint64_t v61 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = sub_100129274(&qword_1002B96B8);
  uint64_t v58 = *(void *)(v69 - 8);
  uint64_t v10 = *(void *)(v58 + 64);
  __chkstk_darwin(v69);
  uint64_t v57 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NWError(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v67 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100129274(&qword_1002B9648);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v57 - v18;
  uint64_t v20 = sub_100129274(&qword_1002B96C0);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = a5;
  sub_100161D10(a5, (uint64_t)v19);
  int v25 = sub_10012B4E8((uint64_t)v19, 1LL, v11);
  uint64_t v60 = v12;
  if (v25 == 1)
  {
    sub_100161D58((uint64_t)v19);
    uint64_t v26 = 0LL;
  }

  else
  {
    unint64_t v27 = sub_10012CDE0();
    uint64_t v26 = swift_allocError(v11, v27, 0LL, 0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v28, v19, v11);
  }

  uint64_t v30 = v65;
  unint64_t v29 = v66;
  uint64_t v71 = v65;
  unint64_t v72 = v66;
  uint64_t v73 = v64;
  uint64_t v74 = v26;
  swift_retain(v64);
  sub_100162020(v30, v29);
  uint64_t v32 = v68;
  uint64_t v31 = v69;
  AsyncStream.Continuation.yield(_:)(&v71, v69);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  sub_100161D10(v24, (uint64_t)v17);
  if (sub_10012B4E8((uint64_t)v17, 1LL, v11) == 1)
  {
    sub_100161D58((uint64_t)v17);
    uint64_t v34 = v57;
    uint64_t v33 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v32, v31);
    uint64_t v35 = *(unsigned __int8 *)(v33 + 80);
    uint64_t v36 = (v35 + 16) & ~v35;
    unint64_t v37 = (v10 + v36 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v38 = swift_allocObject(&unk_100274FB0, v37 + 8, v35 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v38 + v36, v34, v31);
    uint64_t v39 = v59;
    *(void *)(v38 + v37) = v59;
    swift_retain(v39);
    NWConnection.receiveMessage(completion:)(sub_10016201C, v38);
    return swift_release(v38);
  }

  else
  {
    uint64_t v41 = v60;
    uint64_t v42 = v67;
    uint64_t v43 = (*(uint64_t (**)(char *, char *, uint64_t))(v60 + 32))(v67, v17, v11);
    os_log_type_t v44 = static os_log_type_t.info.getter(v43);
    uint64_t v71 = 0LL;
    unint64_t v72 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(42LL);
    v45._object = (void *)0x800000010024D540LL;
    v45._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    String.append(_:)(v45);
    unint64_t v66 = v11;
    _print_unlocked<A, B>(_:_:)(v42, &v71, v11);
    v46._uint64_t countAndFlagsBits = 41LL;
    v46._object = (void *)0xE100000000000000LL;
    String.append(_:)(v46);
    uint64_t v48 = v71;
    unint64_t v47 = v72;
    uint64_t v49 = v61;
    static GKLog.match.getter(v50);
    uint64_t v51 = swift_bridgeObjectRetain_n(v47, 2LL);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = v44;
    if (os_log_type_enabled(v52, v44))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v55 = swift_slowAlloc(32LL, -1LL);
      uint64_t v71 = v55;
      *(_DWORD *)uint64_t v54 = 136315138;
      swift_bridgeObjectRetain(v47);
      uint64_t v70 = sub_100135074(v48, v47, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease_n(v47, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Nearby - %s", v54, 0xCu);
      swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v47, 2LL);
    }

    (*(void (**)(char *, uint64_t))(v62 + 8))(v49, v63);
    swift_bridgeObjectRelease(v47, v56);
    AsyncStream.Continuation.finish()();
    return (*(uint64_t (**)(char *, unint64_t))(v41 + 8))(v67, v66);
  }

uint64_t sub_100161C8C()
{
  uint64_t v3 = v1 + v2;
  uint64_t v5 = v4 | 7;
  sub_100158EA0(v6);
  return sub_100162434(v0, v3, v5);
}

uint64_t sub_100161CD0(uint64_t a1)
{
  return sub_10016148C(a1);
}

uint64_t sub_100161D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B9648);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100161D58(uint64_t a1)
{
  uint64_t v2 = sub_100129274(&qword_1002B9648);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100161D98()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100161DBC(uint64_t a1)
{
  return sub_100160B34(a1, v1);
}

uint64_t sub_100161DC4()
{
  uint64_t v1 = type metadata accessor for NWConnection.State(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  sub_10012CF24();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v6 = sub_10012CF08();
  return swift_deallocObject(v6, v7, v5);
}

uint64_t sub_100161E38()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for NWConnection.State(0LL) - 8) + 80LL);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((v2 + 40) & ~v2);
  uint64_t v5 = (void *)swift_task_alloc(dword_1002B965C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  uint64_t v6 = sub_10015DEE4(v5);
  return sub_100160C94(v6, v7, v8, v3, v4);
}

uint64_t sub_100161EBC()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100161EE8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100161F10()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B9674);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  sub_10015DEE4(v1);
  return sub_100160490();
}

uint64_t sub_100161F6C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != 1)
  {
    sub_100135144(result, a2);
    swift_release(a3);
    return swift_errorRelease(a4);
  }

  return result;
}

void *sub_100161FA8(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[9];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_100162010(uint64_t a1)
{
  return sub_1001616A0(a1, v1);
}

uint64_t sub_100162020(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10013593C(result, a2);
  }
  return result;
}

uint64_t sub_100162038()
{
  uint64_t v2 = v1 | 7;
  unint64_t v5 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100158EA0(v6);
  swift_release(*(void *)(v0 + v5));
  uint64_t v7 = sub_10012CF08();
  return sub_100162434(v7, v8, v2);
}

uint64_t sub_10016208C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(sub_100129274(&qword_1002B96B8) - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  return sub_100161794( a1,  a2,  a3,  a4,  a5,  v5 + v12,  *(void *)(v5 + ((*(void *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t _s7MessageVwxx(uint64_t *a1)
{
  unint64_t v2 = a1[1];
  if (v2 >> 60 != 15) {
    sub_100135158(*a1, v2);
  }
  swift_release(a1[2]);
  return swift_errorRelease(a1[3]);
}

uint64_t _s7MessageVwcp(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v5 = *a2;
    sub_10013593C(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }

  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  swift_retain(v6);
  swift_errorRetain(v7);
  *(void *)(a1 + 24) = v7;
  return a1;
}

uint64_t *_s7MessageVwca(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *a2;
      sub_10013593C(*a2, a2[1]);
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_100135158(v7, v8);
      goto LABEL_8;
    }

    sub_100162298((uint64_t)a1);
    goto LABEL_6;
  }

  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  uint64_t v5 = *a2;
  sub_10013593C(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  uint64_t v9 = a1[2];
  uint64_t v10 = a2[2];
  a1[2] = v10;
  swift_retain(v10);
  swift_release(v9);
  uint64_t v11 = a1[3];
  uint64_t v12 = a2[3];
  swift_errorRetain(v12);
  a1[3] = v12;
  swift_errorRelease(v11);
  return a1;
}

uint64_t sub_100162298(uint64_t a1)
{
  return a1;
}

uint64_t *_s7MessageVwta(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_100135158(v6, v4);
      goto LABEL_6;
    }

    sub_100162298((uint64_t)a1);
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  uint64_t v7 = a1[2];
  a1[2] = a2[2];
  swift_release(v7);
  uint64_t v8 = a1[3];
  a1[3] = a2[3];
  swift_errorRelease(v8);
  return a1;
}

uint64_t _s7MessageVwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(swift_bridgeObjectRelease(*(void *)(v0 + 40), v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t _s7MessageVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 3sub_100129678(v0 + 2) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 3sub_100129678(v0 + 2) = 0;
    }
    if (a2) {
      *(void *)(result + swift_weakDestroy(v0 + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *_s7MessageVMa()
{
  return &_s7MessageVN;
}

uint64_t sub_100162414(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100162420()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

uint64_t sub_100162434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

  ;
}

uint64_t sub_10016245C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return NWConnection.debugDescription.getter(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100162470(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100135074(a1, v3, a3);
}

uint64_t sub_100162478@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_100135074(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)va);
}

uint64_t sub_100162488( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_bridgeObjectRelease(a15, a2);
}

uint64_t sub_100162490()
{
  return swift_task_dealloc(*(void *)(v0 + 112));
}

uint64_t sub_100162498(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_1001624AC()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t sub_1001624B4()
{
  return swift_task_dealloc(*(void *)(v0 + 128));
}

void sub_1001624BC()
{
  *(void *)(v0 - 96) = 0LL;
  *(void *)(v0 - 88) = 0xE000000000000000LL;
}

void sub_1001624D0(Swift::String a1)
{
}

void sub_1001624D8(Swift::String a1)
{
}

unint64_t sub_1001624E4()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1001624F8()
{
  return NSPersistentStoreCoordinator.replacePersistentStore(at:destinationOptions:withPersistentStoreFrom:sourceOptions:type:)();
}

uint64_t sub_100162518()
{
  return NSPersistentStoreCoordinator.destroyPersistentStore(at:type:options:)();
}

void sub_100162538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v37 = a6;
  uint64_t v39 = a3;
  uint64_t v40 = a5;
  uint64_t v41 = a2;
  Class ObjectType = (Class)swift_getObjectType(v7);
  uint64_t v11 = sub_1001640F8();
  uint64_t v38 = *(uint64_t **)(v11 - 8);
  uint64_t v12 = v38[8];
  __chkstk_darwin(v11);
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v14 = (char *)v32 - v13;
  uint64_t v15 = sub_100129274(&qword_1002B9D00);
  uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 64LL);
  __chkstk_darwin(v15);
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  sub_100163FD8(a1, (uint64_t)v32 - v17);
  if (sub_10012B4E8((uint64_t)v32 - v17, 1LL, v11) == 1)
  {
    swift_bridgeObjectRelease(a7, v18);
    swift_bridgeObjectRelease(a4, v19);
    sub_100164020((uint64_t)v32 - v17);
    type metadata accessor for ProcessExiter();
    sub_1001640DC((uint64_t)"Unable to locate old database URL. Exiting.");
  }

  uint64_t v33 = a7;
  uint64_t v34 = a4;
  uint64_t v35 = a1;
  uint64_t v20 = v38;
  uint64_t v21 = sub_1001640F0((uint64_t)v32 - v13, (uint64_t)v32 - v17);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v23 = (char *)v32 - v13;
  __chkstk_darwin(v22);
  sub_100163FD8(v41, (uint64_t)v32 - v17);
  if (sub_10012B4E8((uint64_t)v32 - v17, 1LL, v11) == 1)
  {
    swift_bridgeObjectRelease(v33, v24);
    swift_bridgeObjectRelease(v34, v25);
    sub_100164020((uint64_t)v32 - v17);
    type metadata accessor for ProcessExiter();
    sub_1001640DC((uint64_t)"Unable to locate new database URL. Exiting.");
  }

  uint64_t v26 = sub_1001640F0((uint64_t)v23, (uint64_t)v32 - v17);
  v32[1] = v32;
  __chkstk_darwin(v26);
  unint64_t v27 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v28 = sub_1001640F0((uint64_t)v32 - v27, (uint64_t)v14);
  __chkstk_darwin(v28);
  sub_1001640F0((uint64_t)v32 - v27, (uint64_t)v23);
  unint64_t v29 = (char *)objc_allocWithZone(ObjectType);
  sub_100163C18((uint64_t)v32 - v27, (uint64_t)v32 - v27, v39, v34, v40, v37, v33, v29);
  sub_100164124();
  sub_100164020(v35);
  uint64_t v30 = (void (*)(char *, uint64_t))v20[1];
  v30(v23, v11);
  v30(v14, v11);
  uint64_t v31 = sub_100164138();
  sub_1001640BC(v31, *v20);
  sub_10012CE58();
}

void InsecureDatabaseMigrator.__allocating_init(insecureDatabaseURL:secureDatabaseURL:persistentStoreCoordinatorProtocol:options:fileManager:bundleID:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void InsecureDatabaseMigrator.init(insecureDatabaseURL:secureDatabaseURL:persistentStoreCoordinatorProtocol:options:fileManager:bundleID:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_100162A20( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v22 = a8;
  uint64_t v16 = a3[3];
  uint64_t v15 = a3[4];
  uint64_t v17 = sub_100163BF0((uint64_t)a3, v16);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v20 + 16))(v19);
  v22(a1, a2, v19, a4, a5, a6, a7, v21, v16, v15);
  sub_100129678(a3);
  sub_10012CE58();
}

Swift::Void __swiftcall InsecureDatabaseMigrator.migrate()()
{
  uint64_t v75 = type metadata accessor for NSPersistentStore.StoreType(0LL);
  uint64_t v73 = *(uint64_t (**)(char *, uint64_t))(v75 - 8);
  __chkstk_darwin(v75);
  sub_100164150();
  uint64_t v71 = v1;
  sub_100164144();
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v67 - v3;
  uint64_t v79 = type metadata accessor for Logger(0LL);
  unint64_t v5 = *(void **)(v79 - 8);
  __chkstk_darwin(v79);
  sub_100164150();
  uint64_t v74 = v6;
  sub_100164144();
  __chkstk_darwin(v7);
  uint64_t v76 = (char *)&v67 - v8;
  sub_100164144();
  __chkstk_darwin(v9);
  uint64_t v72 = (uint64_t)&v67 - v10;
  sub_100164144();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v67 - v13;
  static GKLog.cache.getter(v12);
  uint64_t v15 = v0;
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter(v16);
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = &unk_1002B9000;
  uint64_t v78 = v15;
  if (v18)
  {
    uint64_t v20 = sub_10012CE30(12LL);
    unint64_t v77 = v5;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = sub_10012CE30(32LL);
    uint64_t v80 = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v23 = sub_1001640F8();
    unint64_t v24 = sub_100163EBC();
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
    uint64_t v27 = sub_100164118(v25, v26);
    uint64_t v28 = sub_100162498(v27);
    uint64_t v19 = (void *)&unk_1002B9000;
    uint64_t v15 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v28, v29);

    sub_100132324(v30, v31);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "About to migrate: %s to secure location", v21, 0xCu);
    sub_10016409C(v32, v33, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v22);
    sub_10012CE24((uint64_t)v21);

    uint64_t v34 = (void *)v77[1];
  }

  else
  {

    uint64_t v34 = (void *)v5[1];
  }

  unint64_t v77 = v34;
  ((void (*)(char *, uint64_t))v34)(v14, v79);
  uint64_t v35 = &v15[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator];
  uint64_t v36 = *(void *)&v15[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator + 24];
  uint64_t v37 = *(void *)&v15[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator + 32];
  sub_10012A960(&v15[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator], v36);
  uint64_t v38 = &v15[OBJC_IVAR___GKInsecureDatabaseMigrator_secureDatabaseURL];
  uint64_t v39 = *(void *)&v15[OBJC_IVAR___GKInsecureDatabaseMigrator_options];
  uint64_t v40 = &v15[v19[220]];
  static NSPersistentStore.StoreType.sqlite.getter();
  (*(void (**)(char *, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t))(v37 + 8))( v38,  v39,  v40,  v39,  v4,  v36,  v37);
  uint64_t v70 = v40;
  uint64_t v41 = (uint64_t (*)(char *, uint64_t))*((void *)v73 + 1);
  uint64_t v42 = v41(v4, v75);
  uint64_t v43 = v72;
  static GKLog.cache.getter(v42);
  os_log_type_t v44 = v15;
  Swift::String v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.debug.getter(v45);
  BOOL v47 = os_log_type_enabled(v45, v46);
  uint64_t v73 = v41;
  if (v47)
  {
    uint64_t v48 = (_DWORD *)sub_10012CE30(12LL);
    uint64_t v69 = sub_10012CE30(32LL);
    uint64_t v80 = v69;
    uint64_t v68 = v48;
    *uint64_t v48 = 136315138;
    uint64_t v67 = v48 + 1;
    uint64_t v49 = sub_1001640F8();
    unint64_t v50 = sub_100163EBC();
    uint64_t v51 = v70;
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v49, v50);
    uint64_t v54 = sub_100164118(v52, v53);
    uint64_t v55 = sub_100162498(v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v56);

    sub_100132324(v57, v58);
    uint64_t v59 = (uint64_t)v68;
    sub_1001640D0((void *)&_mh_execute_header, v45, v46, "About to destroy: %s");
    uint64_t v60 = v69;
    sub_10016409C(v61, v62, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v60);
    sub_10012CE24(v59);

    uint64_t v63 = v51;
    sub_1001640B0(v72);
  }

  else
  {

    sub_1001640B0(v43);
    uint64_t v63 = v70;
  }

  uint64_t v64 = v71;
  uint64_t v65 = *((void *)v35 + 3);
  uint64_t v66 = *((void *)v35 + 4);
  sub_10012A960(v35, v65);
  static NSPersistentStore.StoreType.sqlite.getter();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 16))(v63, v64, v39, v65, v66);
  sub_10016412C(v64);
  sub_100163168();
}

uint64_t sub_100163168()
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v112 = *(void *)(v2 - 8);
  uint64_t v113 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v103 - v6;
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v115 = *(uint8_t ***)(v8 - 8);
  uint64_t v9 = (uint8_t **)v115[8];
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v103 - (((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_t v114 = v0;
  uint64_t Path = URL.deletingLastPathComponent()(v10);
  uint64_t v13 = URL.pathExtension.getter(Path);
  BOOL v15 = v13 == 0x617461646367LL && v14 == 0xE600000000000000LL;
  uint64_t v108 = v5;
  uint64_t v109 = v1;
  if (v15)
  {
    id v19 = (id)swift_bridgeObjectRelease(0xE600000000000000LL, v14);
  }

  else
  {
    uint64_t v16 = v14;
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, 0x617461646367LL, 0xE600000000000000LL, 0LL);
    id v19 = (id)swift_bridgeObjectRelease(v16, v18);
    if ((v17 & 1) == 0) {
      goto LABEL_13;
    }
  }

  uint64_t v20 = static GKLog.cache.getter(v19);
  uint64_t v110 = &v103;
  __chkstk_darwin(v20);
  uint64_t v111 = v9;
  uint64_t v21 = (char *)&v103 - (((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = v115;
  uint64_t v23 = ((uint64_t (*)(char *, char *, uint64_t))v115[2])(v21, v11, v8);
  unint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  uint64_t v25 = v8;
  os_log_type_t v26 = static os_log_type_t.debug.getter(v24);
  if (os_log_type_enabled(v24, v26))
  {
    uint64_t v27 = swift_slowAlloc(12LL, -1LL);
    uint64_t v107 = v11;
    uint64_t v28 = (uint8_t *)v27;
    uint64_t v29 = (void *)swift_slowAlloc(32LL, -1LL);
    id v117 = v29;
    *(_DWORD *)uint64_t v28 = 136315138;
    uint64_t countAndFlagsBits = (uint64_t)(v28 + 4);
    unint64_t v30 = sub_100163EBC();
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v25, v30);
    unint64_t v33 = v32;
    uint64_t v116 = sub_100135074(v31, v32, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117);
    swift_bridgeObjectRelease(v33, v34);
    uint64_t v35 = v115[1];
    ((void (*)(char *, uint64_t))v35)(v21, v25);
    _os_log_impl((void *)&_mh_execute_header, v24, v26, "Removing old database folder: %s", v28, 0xCu);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    uint64_t v36 = v28;
    uint64_t v11 = v107;
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    uint64_t v35 = v22[1];
    ((void (*)(char *, uint64_t))v35)(v21, v25);
  }

  (*(void (**)(char *, uint64_t))(v112 + 8))(v7, v113);
  uint64_t v8 = v25;
  uint64_t v37 = *(void **)((char *)v114 + OBJC_IVAR___GKInsecureDatabaseMigrator_fileManager);
  object = URL.path(percentEncoded:)(1)._object;
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object, v40);
  id v117 = 0LL;
  LODWORD(object) = [v37 removeItemAtPath:v39 error:&v117];

  id v41 = v117;
  uint64_t v9 = v111;
  if (!(_DWORD)object)
  {
    id v65 = v117;
    _convertNSErrorToError(_:)(v41);

    swift_willThrow(v66);
    return ((uint64_t (*)(char *, uint64_t))v35)(v11, v25);
  }

  id v19 = v117;
LABEL_13:
  uint64_t v42 = __chkstk_darwin(v19);
  unint64_t v43 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  os_log_type_t v44 = v9;
  Swift::String v45 = (char *)&v103 - v43;
  URL.deletingLastPathComponent()(v42);
  Swift::String v46 = URL.path(percentEncoded:)(1);
  BOOL v47 = *(char **)((char *)v114 + OBJC_IVAR___GKInsecureDatabaseMigrator_fileManager);
  uint64_t countAndFlagsBits = v46._countAndFlagsBits;
  NSString v48 = String._bridgeToObjectiveC()();
  id v117 = 0LL;
  uint64_t v107 = v47;
  id v49 = [v47 contentsOfDirectoryAtPath:v48 error:&v117];

  id v50 = v117;
  if (v49)
  {
    uint64_t v111 = &v103;
    uint64_t v51 = v11;
    uint64_t v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, &type metadata for String);
    id v53 = v50;

    uint64_t v54 = *(void *)(v52 + 16);
    uint64_t v56 = swift_bridgeObjectRelease(v52, v55);
    uint64_t v110 = &v103;
    __chkstk_darwin(v56);
    uint64_t v57 = (char *)&v103 - v43;
    uint64_t v58 = v115;
    uint64_t v59 = v115[2];
    uint64_t v60 = ((uint64_t (*)(char *, char *, uint64_t))v59)(v57, v45, v8);
    if (v54)
    {
      uint64_t v61 = v58[1];
      ((void (*)(char *, uint64_t))v61)(v57, v8);
LABEL_16:
      swift_bridgeObjectRelease(v46._object, v62);
      uint64_t v63 = v51;
LABEL_17:
      ((void (*)(char *, uint64_t))v61)(v45, v8);
      return ((uint64_t (*)(char *, uint64_t))v61)(v63, v8);
    }

    uint64_t v71 = URL.lastPathComponent.getter(v60);
    uint64_t v73 = v72;
    uint64_t v74 = *(void *)((char *)v114 + OBJC_IVAR___GKInsecureDatabaseMigrator_bundleID);
    uint64_t v75 = *(void *)((char *)v114 + OBJC_IVAR___GKInsecureDatabaseMigrator_bundleID + 8);
    if (v71 == v74 && v72 == v75)
    {
      swift_bridgeObjectRelease(v72, v72);
      uint64_t v61 = v115[1];
      uint64_t v79 = ((uint64_t (*)(char *, uint64_t))v61)(v57, v8);
    }

    else
    {
      char v77 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v72, v74, v75, 0LL);
      swift_bridgeObjectRelease(v73, v78);
      uint64_t v61 = v115[1];
      uint64_t v79 = ((uint64_t (*)(char *, uint64_t))v61)(v57, v8);
      if ((v77 & 1) == 0) {
        goto LABEL_16;
      }
    }

    uint64_t v80 = static GKLog.cache.getter(v79);
    uint64_t v115 = &v103;
    __chkstk_darwin(v80);
    uint64_t v81 = v8;
    unint64_t v82 = (char *)&v103 - (((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v63 = v51;
    uint64_t v83 = v81;
    uint64_t v84 = ((uint64_t (*)(char *, char *))v59)(v82, v51);
    unint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
    os_log_type_t v86 = static os_log_type_t.debug.getter(v85);
    if (os_log_type_enabled(v85, v86))
    {
      os_log_t v114 = v85;
      uint64_t v87 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v105 = (void *)swift_slowAlloc(32LL, -1LL);
      id v117 = v105;
      unint64_t v104 = v87;
      *(_DWORD *)uint64_t v87 = 136315138;
      uint64_t v103 = v87 + 4;
      unint64_t v88 = sub_100163EBC();
      uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter(v83, v88);
      unint64_t v91 = v90;
      uint64_t v116 = sub_100135074(v89, v90, (uint64_t *)&v117);
      uint64_t v63 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117);
      swift_bridgeObjectRelease(v91, v92);
      ((void (*)(char *, uint64_t))v61)(v82, v83);
      unint64_t v85 = v114;
      os_log_type_t v93 = v86;
      uint64_t v94 = v104;
      _os_log_impl((void *)&_mh_execute_header, v114, v93, "Removing old bundle folder: %s", v104, 0xCu);
      uint64_t v95 = v105;
      swift_arrayDestroy(v105, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v95, -1LL, -1LL);
      swift_slowDealloc(v94, -1LL, -1LL);
    }

    else
    {
      ((void (*)(char *, uint64_t))v61)(v82, v83);
    }

    (*(void (**)(char *, uint64_t))(v112 + 8))(v108, v113);
    uint64_t v8 = v83;
    NSString v96 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v46._object, v97);
    id v117 = 0LL;
    unsigned int v98 = [v107 removeItemAtPath:v96 error:&v117];

    id v99 = v117;
    if (v98)
    {
      id v100 = v117;
    }

    else
    {
      id v101 = v117;
      _convertNSErrorToError(_:)(v99);

      swift_willThrow(v102);
    }

    goto LABEL_17;
  }

  id v67 = v117;
  swift_bridgeObjectRelease(v46._object, v68);
  _convertNSErrorToError(_:)(v50);

  swift_willThrow(v69);
  uint64_t v70 = v115[1];
  ((void (*)(char *, uint64_t))v70)((char *)&v103 - v43, v8);
  return ((uint64_t (*)(char *, uint64_t))v70)(v11, v8);
}

void InsecureDatabaseMigrator.init()()
{
}

uint64_t sub_100163A9C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v8 = sub_100135074(v6, v7, a3);
  uint64_t v9 = *a1 + 8;
  uint64_t v13 = v8;
  uint64_t v10 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
  uint64_t result = sub_100132324(v10, v11);
  *a1 = v9;
  return result;
}

id sub_100163B08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v15 = *(void *)(a9 - 8);
  __chkstk_darwin(a1);
  char v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v19 = (char *)objc_allocWithZone(v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, a9);
  id v20 = sub_100163D64(a1, a2, (uint64_t)v17, a4, a5, v22, v23, v19, a9, a10);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, a9);
  return v20;
}

uint64_t sub_100163BF0(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

id sub_100163C18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  Class ObjectType = (objc_class *)swift_getObjectType(a8);
  v26[3] = sub_100164060();
  v26[4] = &protocol witness table for NSPersistentStoreCoordinator;
  v26[0] = a3;
  uint64_t v15 = &a8[OBJC_IVAR___GKInsecureDatabaseMigrator_insecureDatabaseURL];
  uint64_t v16 = type metadata accessor for URL(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  Class v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v15, a1, v16);
  v18(&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_secureDatabaseURL], a2, v16);
  *(void *)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_fileManager] = a5;
  sub_10012D388((uint64_t)v26, (uint64_t)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator]);
  *(void *)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_options] = a4;
  id v19 = &a8[OBJC_IVAR___GKInsecureDatabaseMigrator_bundleID];
  *(void *)id v19 = a6;
  *((void *)v19 + 1) = a7;
  v25.receiver = a8;
  v25.Class super_class = ObjectType;
  id v20 = objc_msgSendSuper2(&v25, "init");
  sub_100129678(v26);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v21(a2, v16);
  v21(a1, v16);
  return v20;
}

id sub_100163D64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9, uint64_t a10)
{
  Class ObjectType = (objc_class *)swift_getObjectType(a8);
  v29[3] = a9;
  v29[4] = a10;
  uint64_t v17 = sub_10015848C(v29);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a9 - 8) + 32LL))(v17, a3, a9);
  Class v18 = &a8[OBJC_IVAR___GKInsecureDatabaseMigrator_insecureDatabaseURL];
  uint64_t v19 = type metadata accessor for URL(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v21(v18, a1, v19);
  v21(&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_secureDatabaseURL], a2, v19);
  *(void *)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_fileManager] = a5;
  sub_10012D388((uint64_t)v29, (uint64_t)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator]);
  *(void *)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_options] = a4;
  uint64_t v22 = &a8[OBJC_IVAR___GKInsecureDatabaseMigrator_bundleID];
  *(void *)uint64_t v22 = a6;
  *((void *)v22 + 1) = a7;
  v28.receiver = a8;
  v28.Class super_class = ObjectType;
  id v23 = objc_msgSendSuper2(&v28, "init");
  sub_100129678(v29);
  unint64_t v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v24(a2, v19);
  v24(a1, v19);
  return v23;
}

unint64_t sub_100163EBC()
{
  unint64_t result = qword_1002B96E8;
  if (!qword_1002B96E8)
  {
    uint64_t v1 = type metadata accessor for URL(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_1002B96E8);
  }

  return result;
}

uint64_t sub_100163EFC()
{
  return type metadata accessor for InsecureDatabaseMigrator(0LL);
}

uint64_t type metadata accessor for InsecureDatabaseMigrator(uint64_t a1)
{
  uint64_t result = qword_1002B9728;
  if (!qword_1002B9728) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InsecureDatabaseMigrator);
  }
  return result;
}

uint64_t sub_100163F3C(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = v4[0];
    uint64_t v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = "(";
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[5] = &unk_1001F4498;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100163FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B9D00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100164020(uint64_t a1)
{
  uint64_t v2 = sub_100129274(&qword_1002B9D00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100164060()
{
  unint64_t result = qword_1002B9738;
  if (!qword_1002B9738)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSPersistentStoreCoordinator);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B9738);
  }

  return result;
}

uint64_t sub_10016409C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(v3, 1LL, a3);
}

uint64_t sub_1001640A8()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1001640B0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 - 128))(a1, *(void *)(v1 - 112));
}

uint64_t sub_1001640BC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return swift_deallocPartialClassInstance( v3,  a1,  *(unsigned int *)((v2 & a2) + 0x30),  *(unsigned __int16 *)((v2 & a2) + 0x34));
}

void sub_1001640D0(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

void sub_1001640DC(uint64_t a1@<X8>)
{
}

uint64_t sub_1001640F0(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1001640F8()
{
  return type metadata accessor for URL(0LL);
}

BOOL sub_100164100(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100164110()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100164118(uint64_t a1, unint64_t a2)
{
  return sub_100135074(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_100164124()
{
  return sub_100164020(*(void *)(v0 - 88));
}

uint64_t sub_10016412C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 - 160))(a1, *(void *)(v1 - 144));
}

uint64_t sub_100164138()
{
  return swift_getObjectType(*(void *)(v0 - 112));
}

  ;
}

  ;
}

uint64_t sub_100164164()
{
  return 0x6C61626F6C67LL;
}

uint64_t sub_1001641B4()
{
  uint64_t v48 = v1;
  uint64_t v49 = v2;
  uint64_t v4 = v3;
  Class ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v5 = sub_1001640F8();
  Swift::String v45 = *(void **)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10016598C();
  unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF0LL;
  unint64_t v43 = (char *)(v8 - (v6 & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = v0;
  NSString v10 = String._bridgeToObjectiveC()();
  uint64_t v42 = v4;
  id v11 = [v4 containerURLForSecurityApplicationGroupIdentifier:v10];

  uint64_t v12 = sub_100129274(&qword_1002B9D00);
  __chkstk_darwin(v12);
  sub_100165858();
  if (v11)
  {
    __chkstk_darwin(v13);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v11);

    uint64_t v14 = (void (*)(NSString, char *, uint64_t))v45[4];
    v14(v10, (char *)v38 - v7, v5);
    sub_1001659B0((uint64_t)v10, 0LL);
    if (sub_10012B4E8((uint64_t)v10, 1LL, v5) != 1)
    {
      uint64_t v15 = v43;
      v14(v43, (char *)v10, v5);
      id v41 = (void (*)(char *, uint64_t, uint64_t))v14;
      uint64_t v16 = v42;
      *(void *)&v9[OBJC_IVAR___GKSecureFileLocator_fileManager] = v42;
      uint64_t v17 = &v9[OBJC_IVAR___GKSecureFileLocator_rootDirectory];
      NSString v39 = v9;
      Class v18 = (uint64_t (*)(char *, uint64_t, uint64_t))v45[2];
      uint64_t v19 = v18(v17, (uint64_t)v15, v5);
      uint64_t v40 = v38;
      __chkstk_darwin(v19);
      sub_10016598C();
      uint64_t v22 = v21 - (v20 & 0xFFFFFFFFFFFFFFF0LL);
      v38[2] = v38;
      __chkstk_darwin(v23);
      objc_super v25 = (char *)v38 - v24;
      v18((char *)v38 - v24, (uint64_t)v17, v5);
      uint64_t v26 = sub_10016590C(0x2F7972617262694CLL);
      v38[1] = v38;
      sub_100165950();
      __chkstk_darwin(v27);
      sub_1001296C0();
      uint64_t v30 = v29 - v28;
      (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))( v29 - v28,  enum case for URL.DirectoryHint.isDirectory(_:),  v26);
      sub_10012B89C();
      id v31 = v16;
      URL.appending<A>(path:directoryHint:)(&v47, v30);
      uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v30, v26);
      sub_1001659BC(v32, v33);
      uint64_t v34 = (void (*)(char *, uint64_t))v45[1];
      v34(v25, v5);
      v34(v15, v5);
      uint64_t v35 = v39;
      v41(&v39[OBJC_IVAR___GKSecureFileLocator_parentCachesDirectory], v22, v5);

      v46.receiver = v35;
      v46.Class super_class = ObjectType;
      id v36 = objc_msgSendSuper2(&v46, "init");

      return (uint64_t)v36;
    }
  }

  else
  {
    sub_1001659B0((uint64_t)v10, 1LL);
  }

  sub_100164020((uint64_t)v10);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x800000010024D7D0LL,  "GameDaemonCore/SecureFileLocator.swift",  38LL,  2LL,  78LL,  0);
  __break(1u);
  return result;
}

void sub_100164588()
{
  uint64_t v11 = v1 + OBJC_IVAR___GKSecureFileLocator_parentCachesDirectory;
  sub_1001640F8();
  sub_100165890();
  __chkstk_darwin(v12);
  sub_100165840();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v11, v0);
  swift_bridgeObjectRetain(v8);
  v13._uint64_t countAndFlagsBits = 47LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = v7;
  v14._object = v6;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 45LL;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = v5;
  v16._object = v4;
  String.append(_:)(v16);
  sub_10016590C(v9);
  sub_100165928();
  __chkstk_darwin(v17);
  sub_1001484F8();
  sub_100165918(v18, enum case for URL.DirectoryHint.isDirectory(_:));
  sub_10012B89C();
  sub_1001658F8();
  uint64_t v19 = sub_1001658CC(v6[1]);
  sub_1001659BC(v19, v20);
  sub_100165870();
  sub_10012CE58();
}

void sub_100164688()
{
  uint64_t v5 = sub_1001658CC(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_1001659BC(v5, v6);
  sub_100165870();
  sub_10012CE58();
}

id sub_100164760()
{
  uint64_t v27 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_1001640F8();
  sub_100165890();
  __chkstk_darwin(v9);
  sub_100165840();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v15 = v14;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v18 = v17;
  id v19 = v8;
  v27(v10, v12, v13, v15, v16, v18);

  swift_bridgeObjectRelease(v12, v20);
  swift_bridgeObjectRelease(v15, v21);
  swift_bridgeObjectRelease(v18, v22);
  URL._bridgeToObjectiveC()(v23);
  objc_super v25 = v24;
  sub_100165870();
  return v25;
}

void sub_100164854()
{
  uint64_t v40 = v3;
  uint64_t v42 = v4;
  id v36 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = sub_1001658EC(__stack_chk_guard);
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  __chkstk_darwin(v8);
  sub_100165858();
  uint64_t v9 = sub_1001640F8();
  sub_100165950();
  __chkstk_darwin(v10);
  sub_1001296C0();
  uint64_t v13 = v12 - v11;
  sub_100164688();
  uint64_t v14 = *(void **)(v0 + OBJC_IVAR___GKSecureFileLocator_fileManager);
  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR___GKSecureFileLocator_fileManager);
  uint64_t v16 = v15;
  id v43 = 0LL;
  LODWORD(v14) = [v14 createDirectoryAtURL:v15 withIntermediateDirectories:1 attributes:0 error:&v43];

  id v17 = v43;
  if ((_DWORD)v14)
  {
    id v43 = v36;
    uint64_t v44 = v40;
    uint64_t v18 = type metadata accessor for URL.DirectoryHint(0LL);
    sub_100165928();
    __chkstk_darwin(v19);
    sub_100165840();
    (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v7,  enum case for URL.DirectoryHint.notDirectory(_:),  v18);
    sub_10012B89C();
    id v20 = v17;
    URL.appending<A>(path:directoryHint:)(&v43, v7);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v18);
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v13, v9);
    uint64_t v21 = 0LL;
    uint64_t v22 = v42;
    uint64_t v23 = v9;
  }

  else
  {
    uint64_t v37 = v1;
    uint64_t v41 = v9;
    id v24 = v43;
    objc_super v25 = (_DWORD *)_convertNSErrorToError(_:)(v17);

    uint64_t v27 = swift_willThrow(v26);
    static GKLog.cache.getter(v27);
    sub_100165978();
    uint64_t v28 = sub_100165978();
    Logger.logObject.getter(v28);
    os_log_type_t v29 = sub_100158D38();
    if (os_log_type_enabled((os_log_t)v2, v29))
    {
      sub_10012CE30(12LL);
      uint64_t v30 = v13;
      id v31 = (void *)sub_100165880();
      *objc_super v25 = 138412290;
      sub_100165978();
      uint64_t v32 = (void *)_swift_stdlib_bridgeErrorToNSError(v25);
      id v43 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      *id v31 = v32;
      sub_1001658C4();
      sub_1001658C4();
      sub_1001658D8((void *)&_mh_execute_header, (os_log_s *)v2, v29, "Failed to create secure directory: %@");
      uint64_t v33 = sub_100129274(&qword_1002B8ED0);
      sub_10012CE88((uint64_t)v31, v34, v33);
      uint64_t v35 = (uint64_t)v31;
      uint64_t v13 = v30;
      sub_10012CE24(v35);
      sub_10012CE24((uint64_t)v25);
    }

    else
    {

      sub_1001658C4();
      sub_1001658C4();
    }

    uint64_t v23 = v41;
    sub_1001658C4();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v2, v39);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v13, v41);
    uint64_t v21 = 1LL;
    uint64_t v22 = v42;
  }

  sub_1001291F8(v22, v21, 1LL, v23);
  sub_10012CE58();
}

void sub_100164CE8()
{
}

void sub_100164E44()
{
  uint64_t v0 = sub_1001640F8();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_1001296C0();
  uint64_t v4 = v3 - v2;
  sub_100164588();
  sub_100164EEC();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  sub_10012CE58();
}

void sub_100164EEC()
{
  uint64_t v28 = v3;
  uint64_t v29 = v4;
  uint64_t v5 = v0;
  uint64_t v6 = sub_1001658EC(__stack_chk_guard);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100165960();
  URL._bridgeToObjectiveC()(v8);
  uint64_t v10 = v9;
  id v27 = 0LL;
  LODWORD(v5) = [v5 removeItemAtURL:v9 error:&v27];

  if ((_DWORD)v5)
  {
    id v11 = v27;
  }

  else
  {
    id v25 = v27;
    id v12 = v27;
    uint64_t v13 = (_DWORD *)_convertNSErrorToError(_:)(v25);

    uint64_t v15 = swift_willThrow(v14);
    static GKLog.cache.getter(v15);
    sub_1001659C4();
    uint64_t v16 = sub_1001659C4();
    Logger.logObject.getter(v16);
    os_log_type_t v17 = sub_100158D38();
    if (os_log_type_enabled(v1, v17))
    {
      sub_10012CE30(12LL);
      uint64_t v26 = v6;
      uint64_t v18 = (void *)sub_100165880();
      _DWORD *v13 = 138412290;
      sub_1001659C4();
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(v13);
      uint64_t v20 = sub_100165938(v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v21);
      void *v18 = v2;
      sub_100158F94();
      sub_100158F94();
      sub_1001658D8((void *)&_mh_execute_header, v1, v17, "Failed to remove item: %@");
      uint64_t v22 = sub_100129274(&qword_1002B8ED0);
      sub_10012CE88((uint64_t)v18, v23, v22);
      uint64_t v24 = (uint64_t)v18;
      uint64_t v6 = v26;
      sub_10012CE24(v24);
      sub_10012CE24((uint64_t)v13);

      sub_100158F94();
    }

    else
    {
      sub_100158F94();
      sub_100158F94();
      sub_100158F94();
    }

    (*(void (**)(os_log_s *, uint64_t))(v7 + 8))(v1, v6);
    sub_10012CE58();
  }

uint64_t sub_100165198()
{
  uint64_t v3 = v0 + OBJC_IVAR___GKSecureFileLocator_parentCachesDirectory;
  uint64_t v4 = sub_1001640F8();
  sub_100165950();
  __chkstk_darwin(v5);
  sub_100165960();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  sub_100165230();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
}

void sub_100165230()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v56 = v5;
  uint64_t v6 = sub_1001658EC(__stack_chk_guard);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1001484F8();
  URL._bridgeToObjectiveC()(v8);
  uint64_t v10 = v9;
  id v65 = 0LL;
  uint64_t v59 = v2;
  id v11 = [v2 contentsOfDirectoryAtURL:v9 includingPropertiesForKeys:0 options:0 error:&v65];

  id v12 = v65;
  if (v11)
  {
    uint64_t v13 = sub_1001640F8();
    uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v13);
    id v15 = v12;

    uint64_t v16 = sub_100129274(&qword_1002B9D00);
    uint64_t v54 = (uint64_t)&v54;
    __chkstk_darwin(v16);
    sub_100165858();
    uint64_t v17 = *(void *)(v14 + 16);
    uint64_t v55 = v14;
    if (v17)
    {
      uint64_t v18 = *(void *)(v13 - 8);
      uint64_t v19 = v14 + ((*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      uint64_t v20 = *(void *)(v18 + 16);
      uint64_t v62 = *(void *)(v18 + 72);
      uint64_t v63 = v20;
      swift_bridgeObjectRetain(v14);
      uint64_t v60 = v18;
      uint64_t v61 = v4;
      while (1)
      {
        sub_100165980((uint64_t)v11, v19);
        sub_1001659A4((uint64_t)v11, 0LL);
        uint64_t v21 = sub_10012B4E8((uint64_t)v11, 1LL, v13);
        if ((_DWORD)v21 == 1) {
          goto LABEL_25;
        }
        uint64_t v64 = &v54;
        __chkstk_darwin(v21);
        sub_10016598C();
        unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFF0LL;
        uint64_t v25 = v24 - (v22 & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v26 = (*(uint64_t (**)(uint64_t, id, uint64_t))(v18 + 32))(v25, v11, v13);
        if (v4) {
          break;
        }
        sub_100165998();
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v25, v13);
LABEL_19:
        v19 += v62;
        if (!--v17) {
          goto LABEL_24;
        }
      }

      uint64_t v27 = URL.isFileURL.getter(v26);
      char v28 = v27;
      __chkstk_darwin(v27);
      uint64_t v29 = (char *)&v54 - v23;
      uint64_t v30 = sub_100165980((uint64_t)&v54 - v23, v25);
      if ((v28 & 1) == 0)
      {
        uint64_t v18 = v60;
        sub_1001658E4((uint64_t)v29);
        uint64_t v4 = v61;
LABEL_18:
        sub_1001658E4(v25);
        goto LABEL_19;
      }

      uint64_t v57 = &v54;
      uint64_t v58 = &v54;
      __chkstk_darwin(v30);
      sub_10016598C();
      uint64_t v33 = v32 - (v31 & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v34 = URL.deletingPathExtension()();
      uint64_t v35 = URL.lastPathComponent.getter(v34);
      uint64_t v37 = v36;
      sub_1001658E4(v33);
      if (v35 == v56 && v37 == v61)
      {
        swift_bridgeObjectRelease(v37, v38);
        sub_1001658E4((uint64_t)v29);
      }

      else
      {
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v56, v61, 0LL);
        swift_bridgeObjectRelease(v37, v41);
        sub_1001658E4((uint64_t)v29);
        if ((v40 & 1) == 0) {
          goto LABEL_17;
        }
      }

      sub_100165998();
LABEL_17:
      uint64_t v18 = v60;
      uint64_t v4 = v61;
      goto LABEL_18;
    }

    swift_bridgeObjectRetain(v14);
LABEL_24:
    sub_1001659A4((uint64_t)v11, 1LL);
LABEL_25:
    swift_bridgeObjectRelease_n(v55, 2LL);
  }

  else
  {
    id v42 = v65;
    id v43 = (_DWORD *)_convertNSErrorToError(_:)(v12);

    uint64_t v45 = swift_willThrow(v44);
    static GKLog.cache.getter(v45);
    sub_10014864C();
    uint64_t v46 = sub_10014864C();
    Logger.logObject.getter(v46);
    os_log_type_t v47 = sub_100158D38();
    if (os_log_type_enabled(v1, v47))
    {
      sub_10012CE30(12LL);
      uint64_t v64 = (uint64_t *)sub_100165880();
      *id v43 = 138412290;
      sub_10014864C();
      uint64_t v48 = _swift_stdlib_bridgeErrorToNSError(v43);
      uint64_t v49 = sub_100165938(v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, v50);
      uint64_t v51 = (uint64_t)v64;
      uint64_t *v64 = v4;
      sub_100132428();
      sub_100132428();
      sub_1001658D8((void *)&_mh_execute_header, v1, v47, "Unable to retrieve contents of directory with error: %@");
      uint64_t v52 = sub_100129274(&qword_1002B8ED0);
      sub_10012CE88(v51, v53, v52);
      sub_10012CE24(v51);
      sub_10012CE24((uint64_t)v43);

      sub_100132428();
    }

    else
    {
      sub_100132428();
      sub_100132428();
      sub_100132428();
    }

    sub_1001658CC(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  }

  sub_10012CE58();
}

void SecureFileLocator.init()()
{
}

uint64_t sub_100165784()
{
  return type metadata accessor for SecureFileLocator(0LL);
}

uint64_t type metadata accessor for SecureFileLocator(uint64_t a1)
{
  uint64_t result = qword_1002B9780;
  if (!qword_1002B9780) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureFileLocator);
  }
  return result;
}

uint64_t sub_1001657C4(uint64_t a1)
{
  uint64_t v4 = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, &v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

  ;
}

  ;
}

uint64_t sub_100165870()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100165880()
{
  return swift_slowAlloc(8LL, -1LL);
}

  ;
}

void sub_1001658A4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 104) = a1;
}

uint64_t sub_1001658C4()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1001658CC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void sub_1001658D8(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_1001658E4(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1001658EC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 88) = a1;
  return type metadata accessor for Logger(0LL);
}

uint64_t sub_1001658F8()
{
  return URL.appending<A>(path:directoryHint:)(v1 - 96, v0);
}

uint64_t sub_10016590C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 88) = v1;
  return type metadata accessor for URL.DirectoryHint(0LL);
}

uint64_t sub_100165918(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

  ;
}

uint64_t sub_100165938(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

  ;
}

  ;
}

uint64_t sub_100165978()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100165980(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 120))(a1, a2, v2);
}

  ;
}

void sub_100165998()
{
}

uint64_t sub_1001659A4(uint64_t a1, uint64_t a2)
{
  return sub_1001291F8(a1, a2, 1LL, v2);
}

uint64_t sub_1001659B0(uint64_t a1, uint64_t a2)
{
  return sub_1001291F8(a1, a2, 1LL, v2);
}

uint64_t sub_1001659BC(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(*(void *)(v2 - 88), a2);
}

uint64_t sub_1001659C4()
{
  return swift_errorRetain(v0);
}

uint64_t sub_1001659CC(uint64_t a1, void *a2)
{
  if (a2) {
    return sub_10017BC0C(*(void *)(a1 + 32), a2);
  }
  else {
    return j__swift_continuation_throwingResume(*(void *)(a1 + 32));
  }
}

id PseudonymManager.init()()
{
  Class ObjectType = (objc_class *)swift_getObjectType(v0);
  objc_allocWithZone(&OBJC_CLASS___IDSService);
  uint64_t v2 = v0;
  id result = sub_1001662A8(0xD000000000000027LL, 0x800000010024D800LL);
  if (result)
  {
    *(void *)&v2[OBJC_IVAR___GKPseudonymManager_service] = result;
    id result = [objc_allocWithZone((Class)GKFireworksPseudonymManager) initWithService:result];
    if (result)
    {
      *(void *)&v2[OBJC_IVAR___GKPseudonymManager_fwManager] = result;

      v4.receiver = v2;
      v4.Class super_class = ObjectType;
      return objc_msgSendSuper2(&v4, "init");
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t PseudonymManager.fetchPseudonym()()
{
  *(void *)(v1 + 128) = v0;
  return sub_100132294((uint64_t)sub_100165B04);
}

uint64_t sub_100165B04()
{
  uint64_t v1 = *(void **)(v0[16] + OBJC_IVAR___GKPseudonymManager_fwManager);
  v0[17] = v1;
  v0[7] = v0 + 15;
  uint64_t v2 = sub_100158C8C((uint64_t)sub_100165B98);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v3 = v0 + 10;
  v3[1] = 0x40000000LL;
  v3[2] = sub_100165D4C;
  v3[3] = &unk_100275088;
  v3[4] = v2;
  [v1 provisionPseudonymIfNeeded:v3];
  return sub_100158DF8();
}

uint64_t sub_100165B98()
{
  *(void *)(v0 + 144) = v1;
  if (v1) {
    uint64_t v2 = sub_100165CE8;
  }
  else {
    uint64_t v2 = sub_100165BDC;
  }
  return sub_100144664((uint64_t)v2, 0LL, 0LL);
}

uint64_t sub_100165BDC()
{
  uint64_t v1 = *(void **)(v0 + 120);

  if (v1)
  {
    id v2 = [v1 URI];
    id v3 = [v2 prefixedURI];

    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v6 = v5;

    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
  }

  else
  {
    unint64_t v8 = sub_100166308();
    uint64_t v9 = sub_100158C54((uint64_t)&type metadata for PseudonymManagerError, v8);
    *(void *)uint64_t v10 = 0LL;
    *(_BYTE *)(v10 + 8) = 2;
    sub_10016667C();
    sub_100158C54((uint64_t)&type metadata for PseudonymManagerError, v8);
    *(void *)uint64_t v11 = v9;
    *(_BYTE *)(v11 + 8) = 0;
    sub_10016667C();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100165CE8(uint64_t a1)
{
  id v2 = *(void **)(v1 + 136);
  swift_willThrow(a1);

  uint64_t v3 = *(void *)(v1 + 144);
  unint64_t v4 = sub_100166308();
  sub_100158C54((uint64_t)&type metadata for PseudonymManagerError, v4);
  *(void *)uint64_t v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  sub_10016667C();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100165D4C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    return sub_10017BC0C(v3, a3);
  }
  id v6 = a2;
  return sub_10017BC80(v3, (uint64_t)a2);
}

uint64_t sub_100165DF0(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1002B97A4;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  void v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_100165E50;
  return PseudonymManager.fetchPseudonym()();
}

uint64_t sub_100165E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  id v6 = *(void **)v3;
  uint64_t v14 = v6;
  uint64_t v7 = (void *)v6[2];
  sub_100145134(v6[4], &v14);

  if (v4)
  {
    uint64_t v8 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    NSString v9 = 0LL;
    uint64_t v10 = (void *)v8;
  }

  else
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2, v11);
    uint64_t v8 = 0LL;
    uint64_t v10 = v9;
  }

  id v12 = (void (**)(void, void, void))v6[3];
  ((void (**)(void, NSString, uint64_t))v12)[2](v12, v9, v8);

  _Block_release(v12);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t PseudonymManager.revokePseudonym(_:)(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return sub_100132294((uint64_t)sub_100165F2C);
}

uint64_t sub_100165F2C()
{
  uint64_t v1 = *(void **)(v0[17] + OBJC_IVAR___GKPseudonymManager_fwManager);
  v0[18] = v1;
  id v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  v0[19] = v3;
  uint64_t v4 = sub_100158C8C((uint64_t)sub_100165FE4);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  v5[2] = sub_1001659CC;
  v5[3] = &unk_1002750A0;
  v5[4] = v4;
  [v2 revokePseudonym:v3 withCompletionHandler:v5];
  return sub_100158DF8();
}

uint64_t sub_100165FE4()
{
  *(void *)(v0 + 160) = v1;
  if (v1) {
    id v2 = sub_100166060;
  }
  else {
    id v2 = sub_100166028;
  }
  return sub_100144664((uint64_t)v2, 0LL, 0LL);
}

uint64_t sub_100166028()
{
  uint64_t v1 = *(void **)(v0 + 152);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100166060(uint64_t a1)
{
  id v2 = *(void **)(v1 + 152);
  uint64_t v3 = *(void *)(v1 + 160);
  uint64_t v4 = *(void **)(v1 + 144);
  swift_willThrow(a1);

  unint64_t v5 = sub_100166308();
  sub_100158C54((uint64_t)&type metadata for PseudonymManagerError, v5);
  *(void *)uint64_t v6 = v3;
  *(_BYTE *)(v6 + 8) = 1;
  sub_10016667C();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100166144(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_1002B97B4;
  a3;
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1001661D0;
  return PseudonymManager.revokePseudonym(_:)(v6, v8);
}

uint64_t sub_1001661D0()
{
  uint64_t v2 = *v1;
  uint64_t v9 = v2;
  uint64_t v3 = *(void *)(v2 + 32);
  uint64_t v4 = *(void **)(v2 + 16);
  sub_100145134(*(void *)(v2 + 40), &v9);

  swift_bridgeObjectRelease(v3, v5);
  uint64_t v6 = *(void *)(v2 + 24);
  if (v0)
  {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }

  else
  {
    (*(void (**)(void, void))(v6 + 16))(*(void *)(v2 + 24), 0LL);
  }

  _Block_release(*(const void **)(v2 + 24));
  return ((uint64_t (*)(void))v1[1])();
}

id sub_1001662A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2, v5);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v6 = [v2 initWithService:v4];

  return v6;
}

unint64_t sub_100166308()
{
  unint64_t result = qword_1002B97A8;
  if (!qword_1002B97A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4528, &type metadata for PseudonymManagerError);
    atomic_store(result, (unint64_t *)&qword_1002B97A8);
  }

  return result;
}

uint64_t type metadata accessor for PseudonymManager()
{
  return objc_opt_self(&OBJC_CLASS___GKPseudonymManager);
}

uint64_t initializeBufferWithCopyOfBuffer for PseudonymManagerError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(_BYTE *)(a2 + 8);
  sub_1001663A8(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_1001663A8(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return swift_errorRetain(result);
  }
  return result;
}

uint64_t destroy for PseudonymManagerError(uint64_t a1)
{
  return sub_1001663CC(*(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_1001663CC(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t assignWithCopy for PseudonymManagerError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(_BYTE *)(a2 + 8);
  sub_1001663A8(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_1001663CC(v5, v6);
  return a1;
}

uint64_t initializeWithTake for PseudonymManagerError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for PseudonymManagerError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_1001663CC(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PseudonymManagerError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PseudonymManagerError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100166504(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10016651C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    LOBYTE(asub_100129678(v0 + 2) = 2;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PseudonymManagerError()
{
  return &type metadata for PseudonymManagerError;
}

uint64_t sub_100166544()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100166578()
{
  uint64_t v2 = v0[2];
  unsigned int v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  unsigned __int8 v5 = (void *)swift_task_alloc(dword_1002B97E4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100166678;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1002B97E0 + dword_1002B97E0))(v2, v3, v4);
}

uint64_t sub_1001665E4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100166610()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  unsigned int v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1002B97F4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1001482C4;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1002B97F0 + dword_1002B97F0))(v2, v3);
}

uint64_t sub_10016667C()
{
  return swift_willThrow();
}

void sub_100166684(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  HIWORD(v155) = -4864;
  AnyHashable.init<A>(_:)(&v155);
  sub_10012CFE4(a1, &v175);
  sub_10012A92C((uint64_t)&v177);
  if (v176)
  {
    uint64_t v4 = sub_100129274(&qword_1002B9800);
    if ((sub_100135A08((uint64_t)&v155, (uint64_t)&v175, (uint64_t)&type metadata for Any + 8, v4) & 1) != 0)
    {
      uint64_t v5 = v155;
      uint64_t v6 = sub_10016C704();
      sub_10016C53C(v6, 0xE600000000000000LL, v7);
      if (v178)
      {
        if ((sub_100135A08((uint64_t)&v155, (uint64_t)&v177, (uint64_t)&type metadata for Any + 8, v4) & 1) != 0)
        {
          uint64_t v9 = sub_100168C8C(v155, v173);
          uint64_t v149 = v173[1];
          uint64_t v150 = v173[0];
          uint64_t v147 = v173[3];
          uint64_t v148 = v173[2];
          uint64_t v145 = v173[5];
          uint64_t v146 = v173[4];
          sub_100132324(v9, v10);
          goto LABEL_10;
        }
      }

      else
      {
        sub_10016C4F4(v8, &qword_1002B8E90);
      }

      uint64_t v149 = 0LL;
      uint64_t v150 = 0LL;
      uint64_t v147 = 0LL;
      uint64_t v148 = 0LL;
      uint64_t v145 = 0LL;
      uint64_t v146 = 0LL;
LABEL_10:
      uint64_t v11 = sub_10016C704();
      sub_10016C53C(v11 & 0xFFFFFFFFFFFFLL | 0x73000000000000LL, 0xE700000000000000LL, v12);
      if (v178)
      {
        uint64_t v14 = sub_100129274(&qword_1002B9808);
        if ((sub_10016C414(v14, v15, v16, v14, v17, v18, v19, v20, v141, v142, v143, v145, v146, v147, v148) & 1) != 0)
        {
          uint64_t v142 = v5;
          uint64_t v143 = a2;
          uint64_t v22 = v155;
          uint64_t v23 = *(void *)(v155 + 16);
          if (v23)
          {
            uint64_t v24 = v155 + 32;
            swift_bridgeObjectRetain(v155);
            uint64_t v25 = (char *)_swiftEmptyArrayStorage;
            do
            {
              sub_100129604(v24, (uint64_t)&v177);
              sub_100129604((uint64_t)&v177, (uint64_t)&v155);
              sub_100129678(&v177);
              uint64_t v26 = v175;
              if ((void)v175)
              {
                if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0) {
                  uint64_t v25 = sub_10016C68C(0LL, *((void *)v25 + 2) + 1LL);
                }
                unint64_t v28 = *((void *)v25 + 2);
                unint64_t v27 = *((void *)v25 + 3);
                if (v28 >= v27 >> 1) {
                  uint64_t v25 = sub_10016C68C((char *)(v27 > 1), v28 + 1);
                }
                *((void *)v25 + sub_100129678(v0 + 2) = v28 + 1;
                *(void *)&v25[8 * v28 + 32] = v26;
              }

              v24 += 32LL;
              --v23;
            }

            while (v23);
            uint64_t v29 = swift_bridgeObjectRelease_n(v22, 2LL);
          }

          else
          {
            uint64_t v29 = swift_bridgeObjectRelease(v155, v21);
            uint64_t v25 = (char *)_swiftEmptyArrayStorage;
          }

          uint64_t v151 = *((void *)v25 + 2);
          if (v151)
          {
            uint64_t v141 = v4;
            sub_10013A69C();
            uint64_t v31 = 0LL;
            uint64_t v154 = _swiftEmptyArrayStorage;
            do
            {
              uint64_t v32 = sub_100144D2C();
              uint64_t v33 = sub_100168C8C(v32, v174);
              uint64_t v34 = v174[0];
              uint64_t v35 = v174[1];
              uint64_t v36 = v174[2];
              uint64_t v37 = v174[3];
              uint64_t v38 = v174[4];
              uint64_t v39 = v174[5];
              sub_100144C2C(v33, v40);
              sub_10016BAFC();
              if (*((void *)&v175 + 1))
              {
                uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v154);
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_10016988C(0LL, v154[2] + 1LL, 1, (uint64_t)v154);
                  uint64_t v154 = (void *)isUniquelyReferenced_nonNull_native;
                }

                unint64_t v44 = v154[2];
                unint64_t v43 = v154[3];
                if (v44 >= v43 >> 1)
                {
                  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_10016988C( (char *)(v43 > 1),  v44 + 1,  1,  (uint64_t)v154);
                  uint64_t v154 = (void *)isUniquelyReferenced_nonNull_native;
                }

                v154[2] = v44 + 1;
                uint64_t v45 = &v154[6 * v44];
                v45[4] = v34;
                v45[5] = v35;
                v45[6] = v36;
                v45[7] = v37;
                v45[8] = v38;
                v45[9] = v39;
              }

              ++v31;
            }

            while (v151 != v31);
            uint64_t v29 = sub_100132324(isUniquelyReferenced_nonNull_native, v42);
            uint64_t v4 = v141;
          }

          else
          {
            uint64_t v154 = _swiftEmptyArrayStorage;
          }

          sub_100132324(v29, v30);
LABEL_39:
          sub_10016C53C(1701667175LL, 0xE400000000000000LL, &v177);
          if (v178)
          {
            if ((sub_100135A08((uint64_t)&v155, (uint64_t)&v177, (uint64_t)&type metadata for Any + 8, v4) & 1) != 0)
            {
              sub_10016C554(0x64496D616461LL, 0xE600000000000000LL, &v177);
              if (v178)
              {
                if ((sub_10016C414( v47,  v48,  v49,  (uint64_t)&type metadata for String,  v50,  v51,  v52,  v53,  v141,  v142,  v143,  v145,  v146,  v147,  v148) & 1) != 0)
                {
                  uint64_t v55 = *((void *)&v155 + 1);
                  uint64_t v54 = v155;
                  goto LABEL_77;
                }
              }

              else
              {
                sub_10016C4F4(v47, &qword_1002B8E90);
              }

              sub_10016C554(0x64496D616461LL, 0xE600000000000000LL, &v177);
              if (v178)
              {
                if ((sub_10016C414( v92,  v93,  v94,  (uint64_t)&type metadata for Int,  v95,  v96,  v97,  v98,  v141,  v142,  v143,  v145,  v146,  v147,  v148) & 1) != 0)
                {
                  *(void *)&__int128 v177 = v155;
                  uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
                  uint64_t v55 = v99;
                  goto LABEL_77;
                }
              }

              else
              {
                sub_10016C4F4(v92, &qword_1002B8E90);
              }

              uint64_t v54 = 0LL;
              uint64_t v55 = 0LL;
LABEL_77:
              sub_10016C554(25705LL, 0xE200000000000000LL, &v177);
              if (v178)
              {
                if ((sub_10016C414( v100,  v101,  v102,  (uint64_t)&type metadata for String,  v103,  v104,  v105,  v106,  v141,  v142,  v143,  v145,  v146,  v147,  v148) & 1) != 0)
                {
                  uint64_t v58 = *((void *)&v155 + 1);
                  uint64_t v57 = v155;
                  goto LABEL_89;
                }
              }

              else
              {
                sub_10016C4F4(v100, &qword_1002B8E90);
              }

              sub_10016C554(0x6449656C646E7562LL, 0xE800000000000000LL, &v177);
              if (v178)
              {
                int v114 = sub_10016C414( v107,  v108,  v109,  (uint64_t)&type metadata for String,  v110,  v111,  v112,  v113,  v141,  v142,  v143,  v145,  v146,  v147,  v148);
                if (v114) {
                  uint64_t v58 = *((void *)&v155 + 1);
                }
                else {
                  uint64_t v58 = 0LL;
                }
                if (v114) {
                  uint64_t v57 = v155;
                }
                else {
                  uint64_t v57 = 0LL;
                }
              }

              else
              {
                sub_10016C4F4(v107, &qword_1002B8E90);
                uint64_t v58 = 0LL;
                uint64_t v57 = 0LL;
              }

LABEL_89:
              sub_10016C554(0x6567616D69LL, 0xE500000000000000LL, &v177);
              if (v178)
              {
                uint64_t v122 = sub_10016C414( v115,  v116,  v117,  (uint64_t)&type metadata for String,  v118,  v119,  v120,  v121,  v141,  v142,  v143,  v145,  v146,  v147,  v148);
                if ((v122 & 1) != 0)
                {
                  uint64_t v56 = v4;
                  uint64_t v153 = v54;
                  uint64_t v59 = *((void *)&v155 + 1);
                  uint64_t v124 = v155;
                  uint64_t v125 = sub_100132768(v122, v123);
                  uint64_t v127 = v124;
                  uint64_t v54 = v153;
                  if (!v55) {
                    goto LABEL_105;
                  }
                  goto LABEL_101;
                }
              }

              else
              {
                sub_10016C4F4(v115, &qword_1002B8E90);
              }

              uint64_t v56 = v4;
              sub_10016C554(0x6C72556567616D69LL, 0xE800000000000000LL, &v177);
              uint64_t v130 = sub_100132768(v128, v129);
              if (v178)
              {
                uint64_t v125 = sub_10016C414( v130,  v131,  v132,  (uint64_t)&type metadata for String,  v133,  v134,  v135,  v136,  v141,  v142,  v143,  v145,  v146,  v147,  v148);
                uint64_t v127 = v155;
                if ((_DWORD)v125) {
                  uint64_t v59 = *((void *)&v155 + 1);
                }
                else {
                  uint64_t v59 = 0LL;
                }
                if (!(_DWORD)v125) {
                  uint64_t v127 = 0LL;
                }
                if (!v55) {
                  goto LABEL_105;
                }
              }

              else
              {
                sub_10016C4F4(v130, &qword_1002B8E90);
                uint64_t v59 = 0LL;
                uint64_t v127 = 0LL;
                if (!v55)
                {
LABEL_105:
                  sub_100144C2C(v125, v126);
                  swift_bridgeObjectRelease(v59, v137);
                  uint64_t v54 = 0LL;
                  goto LABEL_47;
                }
              }

LABEL_101:
              if (v58)
              {
                if (v59)
                {
                  uint64_t v144 = v127;
                }

                else
                {
                  uint64_t v139 = swift_bridgeObjectRelease(v55, v126);
                  sub_100144C2C(v139, v140);
                  uint64_t v54 = 0LL;
                  uint64_t v55 = 0LL;
                  uint64_t v57 = 0LL;
                  uint64_t v58 = 0LL;
                  uint64_t v144 = 0LL;
                }

LABEL_49:
                sub_10016C53C(0x676E656C6C616863LL, 0xE900000000000065LL, &v177);
                uint64_t v152 = v59;
                if (v178)
                {
                  uint64_t v61 = v55;
                  sub_10016C554(25705LL, 0xE200000000000000LL, &v177);
                  uint64_t v60 = sub_100132768(v62, v63);
                  if (v178)
                  {
                    if ((sub_10016C414( v60,  v64,  v65,  (uint64_t)&type metadata for String,  v66,  v67,  v68,  v69,  v141,  v142,  v144,  v145,  v146,  v147,  v148) & 1) != 0)
                    {
                      uint64_t v70 = *((void *)&v155 + 1);
                      uint64_t v71 = v155;
                      goto LABEL_57;
                    }

LABEL_56:
                    uint64_t v71 = 0LL;
                    uint64_t v70 = 0LL;
LABEL_57:
                    sub_10016C53C(0x6F6272656461656CLL, 0xEB00000000647261LL, &v177);
                    uint64_t v74 = sub_1001322A0(v72, v73);
                    if (v178)
                    {
                      sub_10016C53C(25705LL, 0xE200000000000000LL, &v177);
                      if (v178)
                      {
                        uint64_t v82 = sub_10016C414( v75,  v76,  v77,  (uint64_t)&type metadata for String,  v78,  v79,  v80,  v81,  v141,  v142,  v144,  v145,  v146,  v147,  v148);
                        if ((v82 & 1) != 0)
                        {
                          uint64_t v84 = *((void *)&v155 + 1);
                          uint64_t v85 = v155;
                          sub_10016C53C(1701667182LL, 0xE400000000000000LL, &v177);
                          uint64_t v88 = sub_1001322A0(v86, v87);
                          if (v178)
                          {
                            int v89 = sub_100135A08( (uint64_t)&v155,  (uint64_t)&v177,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String);
                            uint64_t v91 = *((void *)&v155 + 1);
                            uint64_t v90 = v155;
                            if (!v89)
                            {
                              uint64_t v90 = 0LL;
                              uint64_t v91 = 0LL;
                            }

                            goto LABEL_72;
                          }

                          sub_10016C4F4(v88, &qword_1002B8E90);
LABEL_71:
                          uint64_t v90 = 0LL;
                          uint64_t v91 = 0LL;
LABEL_72:
                          *(void *)&__int128 v155 = v150;
                          *((void *)&v155 + 1) = v149;
                          uint64_t v156 = v148;
                          uint64_t v157 = v147;
                          uint64_t v158 = v146;
                          uint64_t v159 = v145;
                          uint64_t v160 = v154;
                          uint64_t v161 = v54;
                          uint64_t v162 = v61;
                          uint64_t v163 = v57;
                          uint64_t v164 = v58;
                          uint64_t v165 = v144;
                          uint64_t v166 = v152;
                          uint64_t v167 = v71;
                          uint64_t v168 = v70;
                          uint64_t v169 = v85;
                          uint64_t v170 = v84;
                          uint64_t v171 = v90;
                          uint64_t v172 = v91;
                          AppMetadataNetworkFetcher.init(batchTask:)(&v155);
                          goto LABEL_73;
                        }

                        sub_1001322A0(v82, v83);
LABEL_70:
                        uint64_t v85 = 0LL;
                        uint64_t v84 = 0LL;
                        goto LABEL_71;
                      }

                      uint64_t v74 = sub_1001322A0(v75, v76);
                    }

                    sub_10016C4F4(v74, &qword_1002B8E90);
                    goto LABEL_70;
                  }
                }

                else
                {
                  uint64_t v61 = v55;
                }

                sub_10016C4F4(v60, &qword_1002B8E90);
                goto LABEL_56;
              }

              swift_bridgeObjectRelease(v55, v126);
              swift_bridgeObjectRelease(v59, v138);
              uint64_t v54 = 0LL;
              uint64_t v55 = 0LL;
              uint64_t v57 = 0LL;
LABEL_48:
              uint64_t v144 = 0LL;
              uint64_t v59 = 0LL;
              goto LABEL_49;
            }

            uint64_t v56 = v4;
          }

          else
          {
            uint64_t v56 = v4;
            sub_10016C4F4(v46, &qword_1002B8E90);
          }

          uint64_t v54 = 0LL;
          uint64_t v55 = 0LL;
LABEL_47:
          uint64_t v57 = 0LL;
          uint64_t v58 = 0LL;
          goto LABEL_48;
        }
      }

      else
      {
        sub_10016C4F4(v13, &qword_1002B8E90);
      }

      uint64_t v154 = 0LL;
      goto LABEL_39;
    }
  }

  else
  {
    sub_10015D718((uint64_t)&v175, &qword_1002B8E90);
  }

  sub_100166F38(&v155);
LABEL_73:
  sub_10016BAFC();
  sub_10016BAFC();
}

void sub_100166F38(_OWORD *a1)
{
  *a1 = xmmword_1001F3EA0;
  bzero(a1 + 1, 0x88uLL);
}

uint64_t sub_100166F4C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4449726579616C70LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449726579616C70LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5, a2);
    return 0LL;
  }

  if (a1 == 0x4143726579616C70LL && a2 == 0xEA00000000004449LL)
  {
    unint64_t v8 = 0xEA00000000004449LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4143726579616C70LL, 0xEA00000000004449LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8, a2);
    return 1LL;
  }

  if (a1 == 0x5255726174617661LL && a2 == 0xE90000000000004CLL)
  {
    swift_bridgeObjectRelease(0xE90000000000004CLL, a2);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x5255726174617661LL, 0xE90000000000004CLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2, v11);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1001670B0(char a1)
{
  if (!a1) {
    return 0x4449726579616C70LL;
  }
  if (a1 == 1) {
    return 0x4143726579616C70LL;
  }
  return 0x5255726174617661LL;
}

#error "100167138: call analysis failed (funcsize=10)"
void sub_100167144( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  int a10,  __int16 a11,  __int16 a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  sub_10016C4FC();
  a21 = v24;
  a22 = v25;
  unint64_t v27 = v26;
  unint64_t v28 = sub_100129274(&qword_1002B9860);
  sub_10016C5A4();
  __chkstk_darwin(v29);
  sub_10016C650();
  uint64_t v30 = sub_10016B624();
  sub_10016C58C( (uint64_t)&type metadata for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys,  v31,  v30);
  if (v22)
  {
    sub_10016C66C();
  }

  else
  {
    HIBYTE(a1sub_100129678(v0 + 2) = 0;
    uint64_t v32 = sub_10016C544((uint64_t)&a12 + 1);
    sub_10016C51C(v32, v33);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a12, v28);
    sub_10013A69C();
    uint64_t v34 = sub_10016C618();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v34, v35);
    sub_10016C4B8(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    sub_10013A69C();
    uint64_t v36 = sub_100129678(v27);
    uint64_t v38 = sub_100132324(v36, v37);
    uint64_t v40 = sub_10016C6B0(v38, v39);
    sub_100144C2C(v40, v41);
    sub_10016C600();
  }

  sub_10016C6F8();
  sub_10016C428();
}

uint64_t sub_10016729C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x44496D616461LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44496D616461LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5, a2);
    return 0LL;
  }

  if (a1 == 0x4449656C646E7562LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v8 = 0xE800000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C646E7562LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8, a2);
    return 1LL;
  }

  if (a1 == 0x4C52556567616D69LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL, a2);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4C52556567616D69LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2, v11);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1001673E8()
{
  return 3LL;
}

uint64_t sub_1001673F0()
{
  return 0LL;
}

uint64_t sub_1001673FC(char a1)
{
  if (!a1) {
    return 0x44496D616461LL;
  }
  if (a1 == 1) {
    return 0x4449656C646E7562LL;
  }
  return 0x4C52556567616D69LL;
}

#error "100167478: call analysis failed (funcsize=10)"
void sub_100167484( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  int a10,  char a11,  char a12,  char a13,  char a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  uint64_t (*v33)(void);
  uint64_t *v34;
  void *v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, char *, uint64_t);
  sub_10016C4FC();
  a23 = v27;
  a24 = v28;
  uint64_t v50 = v29;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v34 = v24;
  uint64_t v36 = v35;
  uint64_t v38 = sub_100129274(v37);
  sub_10016C5F0();
  __chkstk_darwin(v39);
  sub_1001296C0();
  uint64_t v42 = v41 - v40;
  sub_10012A960(v36, v36[3]);
  unint64_t v43 = v33();
  sub_10016C6EC(v31, v31, v43);
  unint64_t v44 = *v34;
  uint64_t v45 = v34[1];
  a14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v44, v45, &a14, v38);
  if (!v25)
  {
    uint64_t v46 = v34[2];
    uint64_t v47 = v34[3];
    a13 = 1;
    v50(v46, v47, &a13, v38);
    uint64_t v48 = v34[4];
    uint64_t v49 = v34[5];
    a12 = 2;
    v50(v48, v49, &a12, v38);
  }

  sub_10016C72C(v42, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  sub_10016C428();
}

void sub_100167594( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, __int16 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v24;
  a22 = v25;
  unint64_t v27 = v26;
  sub_100129274(&qword_1002B9848);
  sub_10016C5A4();
  __chkstk_darwin(v28);
  sub_10016C650();
  unint64_t v29 = sub_10016B5E8();
  sub_10016C58C((uint64_t)&type metadata for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys, v30, v29);
  if (v22)
  {
    sub_10016C66C();
  }

  else
  {
    HIBYTE(a1sub_100129678(v0 + 2) = 0;
    uint64_t v31 = sub_10016C544((uint64_t)&a12 + 1);
    sub_10016C51C(v31, v32);
    sub_10016C544((uint64_t)&a12);
    sub_10013A69C();
    uint64_t v33 = sub_10016C618();
    KeyedDecodingContainer.decode(_:forKey:)(v33, v34);
    sub_10016C4B8(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    sub_10013A69C();
    uint64_t v35 = sub_100129678(v27);
    uint64_t v37 = sub_100132324(v35, v36);
    uint64_t v39 = sub_10016C6B0(v37, v38);
    sub_100144C2C(v39, v40);
    sub_10016C600();
  }

  sub_10016C6F8();
  sub_10016C428();
}

void sub_1001676E0()
{
}

uint64_t sub_100167704(uint64_t a1, uint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease(0xE200000000000000LL, a2);
    char v6 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2, v5);
    char v6 = v4 ^ 1;
  }

  return v6 & 1;
}

Swift::Int sub_100167770()
{
  return Hasher._finalize()();
}

uint64_t sub_1001677B0()
{
  return 25705LL;
}

void sub_1001677BC()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_100129274(&qword_1002B9888);
  sub_10016C5A4();
  __chkstk_darwin(v9);
  sub_100165858();
  uint64_t v10 = v7[3];
  uint64_t v11 = v7[4];
  sub_10012A960(v7, v10);
  unint64_t v12 = sub_10016B660();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys,  &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys,  v12,  v10,  v11);
  KeyedEncodingContainer.encode(_:forKey:)(v5, v3, v13, v8);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v8);
  sub_10016C428();
}

uint64_t sub_100167878(uint64_t a1)
{
  uint64_t v5 = sub_100129274(&qword_1002B9878);
  sub_10016C5F0();
  __chkstk_darwin(v6);
  sub_1001484F8();
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  sub_10016C650();
  unint64_t v9 = sub_10016B660();
  uint64_t v10 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys,  &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys,  v9,  v7,  v8);
  if (!v2)
  {
    uint64_t v1 = KeyedDecodingContainer.decode(_:forKey:)(v10, v5);
    sub_10016C6A4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }

  sub_10016C66C();
  return v1;
}

void sub_100167950(uint64_t a1, char a2)
{
}

uint64_t sub_100167974(uint64_t a1, unint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000LL)
  {
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5, a2);
    return 0LL;
  }

  if (a1 == 1701667182 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL, a2);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1701667182LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2, v9);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100167A38()
{
  return 2LL;
}

Swift::Int sub_100167A40(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100167A84(char a1)
{
  if ((a1 & 1) != 0) {
    return 1701667182LL;
  }
  else {
    return 25705LL;
  }
}

void sub_100167AA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v25;
  a23 = v26;
  uint64_t v38 = v27;
  uint64_t v39 = v28;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = sub_100129274(&qword_1002B9930);
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  sub_1001484F8();
  sub_10012A960(v34, v34[3]);
  unint64_t v37 = sub_10016BB74();
  sub_10016C6EC( (uint64_t)&type metadata for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys,  (uint64_t)&type metadata for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys,  v37);
  a13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v32, v30, &a13, v35);
  if (!v23)
  {
    a12 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, v39, &a12, v35);
  }

  sub_10016C72C(v24, *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8));
  sub_10016C428();
}

uint64_t sub_100167B98()
{
  uint64_t v18 = v1;
  uint64_t v19 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = sub_100129274(&qword_1002B9920);
  sub_10016C5A4();
  __chkstk_darwin(v6);
  sub_100165858();
  uint64_t v7 = v4[3];
  uint64_t v8 = v4[4];
  sub_10012A960(v4, v7);
  unint64_t v9 = sub_10016BB74();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys,  &type metadata for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys,  v9,  v7,  v8);
  if (v0)
  {
    sub_10016C6E4();
  }

  else
  {
    HIBYTE(v17) = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v17 + 1, v5);
    sub_10016C51C(v8, v11);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v17, v5);
    uint64_t v13 = v12;
    sub_10016C52C();
    swift_bridgeObjectRetain(v13);
    sub_10016C6E4();
    uint64_t v15 = swift_bridgeObjectRelease(v13, v14);
    sub_100132858(v15, v16);
  }

  return v8;
}

uint64_t sub_100167CDC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x726579616C70LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726579616C70LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5, a2);
    return 0LL;
  }

  if (a1 == 0x73726579616C70LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v8 = 0xE700000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73726579616C70LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8, a2);
    return 1LL;
  }

  if (a1 == 1701667175 && a2 == 0xE400000000000000LL)
  {
    unint64_t v10 = 0xE400000000000000LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667175LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10, a2);
    return 2LL;
  }

  if (a1 == 0x676E656C6C616863LL && a2 == 0xE900000000000065LL)
  {
    unint64_t v12 = 0xE900000000000065LL;
    goto LABEL_32;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E656C6C616863LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12, a2);
    return 3LL;
  }

  if (a1 == 0x6F6272656461656CLL && a2 == 0xEB00000000647261LL)
  {
    swift_bridgeObjectRelease(0xEB00000000647261LL, a2);
    return 4LL;
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6272656461656CLL, 0xEB00000000647261LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2, v15);
    if ((v14 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_100167EF4()
{
  return 5LL;
}

void sub_100167EFC(unsigned __int8 a1)
{
}

uint64_t sub_100167F3C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100167F6C + 4 * byte_1001F4570[a1]))( 0x726579616C70LL,  0xE600000000000000LL);
}

uint64_t sub_100167F6C()
{
  return 0x73726579616C70LL;
}

uint64_t sub_100167F84()
{
  return 1701667175LL;
}

uint64_t sub_100167F94()
{
  return 0x676E656C6C616863LL;
}

uint64_t sub_100167FB0()
{
  return 0x6F6272656461656CLL;
}

void sub_100167FD0()
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_100129274(&qword_1002B98D0);
  sub_10016C5F0();
  __chkstk_darwin(v5);
  sub_1001296C0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = v3[3];
  uint64_t v10 = v3[4];
  sub_10012A960(v3, v9);
  unint64_t v11 = sub_10016B69C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys,  &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys,  v11,  v9,  v10);
  sub_10016C514();
  sub_10016C514();
  char v12 = 0;
  sub_10016B9E0();
  sub_10016C490();
  if (!v0)
  {
    sub_10016C514();
    sub_10016C514();
    sub_10016C698(1);
    sub_100129274(&qword_1002B98A8);
    sub_10016BA1C( &qword_1002B98E8,  (void (*)(void))sub_10016B9E0,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v13, &v12, v4);
    sub_10016C514();
    sub_10016C514();
    sub_10016C698(2);
    sub_10016BA84();
    sub_10016C490();
    sub_10016C514();
    sub_10016C514();
    sub_10016C698(3);
    sub_10016BAC0();
    sub_10016C490();
    sub_10016C514();
    sub_10016C514();
    sub_10016C698(4);
    sub_10016BB38();
    sub_10016C490();
  }

  sub_10016C72C(v8, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10016C6F8();
  sub_10016C428();
}

void sub_1001681F8()
{
  uint64_t v2 = v1;
  uint64_t v50 = v3;
  uint64_t v51 = sub_100129274(&qword_1002B9890);
  uint64_t v4 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  sub_1001296C0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = v2[3];
  uint64_t v9 = v2[4];
  sub_10012A960(v2, v8);
  unint64_t v10 = sub_10016B69C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys,  &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys,  v10,  v8,  v9);
  if (v0)
  {
    sub_100129678(v2);
  }

  else
  {
    uint64_t v47 = v2;
    uint64_t v48 = v4;
    sub_10016B6D8();
    sub_10016C5CC();
    uint64_t v45 = v7;
    uint64_t v11 = v57;
    uint64_t v12 = v59;
    sub_100129274(&qword_1002B98A8);
    LOBYTE(v54[0]) = 1;
    uint64_t v42 = v55;
    uint64_t v43 = v60;
    uint64_t v13 = v51;
    sub_100148150(v55, v56, v57, v58, v59, v60);
    sub_10016BA1C( &qword_1002B98B0,  (void (*)(void))sub_10016B6D8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_10016C5CC();
    uint64_t v44 = v59;
    uint64_t v33 = v58;
    uint64_t v34 = v57;
    uint64_t v32 = v56;
    uint64_t v14 = v55;
    LOBYTE(v54[0]) = 2;
    unint64_t v15 = sub_10016B748();
    sub_100144D2C();
    sub_10016C718();
    sub_10016C5CC();
    uint64_t v36 = v55;
    if (v15)
    {
      uint64_t v16 = sub_100144D78(v45, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
      sub_100144C2C(v16, v17);
      sub_10016C468();
      int v18 = 0;
      int v52 = 0;
    }

    else
    {
      uint64_t v14 = v59;
      uint64_t v11 = v60;
      LOBYTE(v54[0]) = 3;
      uint64_t v35 = v56;
      uint64_t v12 = v57;
      sub_10016B784(v55, v56, v57, v58, v59, v60);
      sub_10016B7C0();
      sub_10016C5CC();
      uint64_t v40 = v57;
      uint64_t v41 = v55;
      uint64_t v38 = v59;
      uint64_t v39 = v58;
      uint64_t v37 = v60;
      uint64_t v22 = v55;
      uint64_t v4 = v56;
      unint64_t v23 = sub_10016B7FC();
      swift_bridgeObjectRetain(v56);
      sub_10016C718();
      sub_10016C5CC();
      uint64_t v30 = v56;
      if (!v23)
      {
        sub_100144D78(v45, *(uint64_t (**)(uint64_t, uint64_t))(v48 + 8));
        uint64_t v49 = v75;
        uint64_t v46 = v76;
        uint64_t v31 = v77;
        uint64_t v53 = v74;
        v54[0] = v42;
        v54[1] = v32;
        v54[2] = v34;
        v54[3] = v33;
        v54[4] = v44;
        v54[5] = v43;
        v54[6] = v36;
        v54[7] = v41;
        v54[8] = v35;
        v54[9] = v40;
        v54[10] = v39;
        v54[11] = v38;
        v54[12] = v37;
        v54[13] = v22;
        v54[14] = v4;
        v54[15] = v74;
        v54[16] = v75;
        v54[17] = v76;
        v54[18] = v77;
        uint64_t v27 = sub_10016B838(v54);
        sub_100132858((uint64_t)v27, v28);
        sub_10016B714(v41, v35, v40, v39, v38, v37);
        swift_bridgeObjectRelease(v36, v29);
        sub_10016B714(v42, v32, v34, v33, v44, v43);
        sub_100129678(v47);
        uint64_t v55 = v42;
        uint64_t v56 = v32;
        uint64_t v57 = v34;
        uint64_t v58 = v33;
        uint64_t v59 = v44;
        uint64_t v60 = v43;
        uint64_t v61 = v36;
        uint64_t v62 = v41;
        uint64_t v63 = v35;
        uint64_t v64 = v40;
        uint64_t v65 = v39;
        uint64_t v66 = v38;
        uint64_t v67 = v37;
        uint64_t v68 = v22;
        uint64_t v69 = v30;
        uint64_t v70 = v53;
        uint64_t v71 = v49;
        uint64_t v72 = v46;
        uint64_t v73 = v31;
        sub_10016B924(&v55);
        memcpy(v50, v54, 0x98uLL);
        goto LABEL_4;
      }

      sub_100144D78(v45, *(uint64_t (**)(uint64_t, uint64_t))(v48 + 8));
      swift_bridgeObjectRelease(v56, v24);
      sub_10016B714(v55, v56, v57, v58, v59, v60);
      sub_10016C6D0(v25, v26);
      sub_10016C468();
      int v18 = 1;
      int v52 = 1;
    }

    sub_100129678(v47);
    sub_10016B714(v13, v12, v14, v11, v59, v4);
    sub_10016C6D0(v19, v20);
    if (v18) {
      sub_10016B714(v41, v35, v40, v39, v38, v37);
    }
    if (v52) {
      swift_bridgeObjectRelease(v30, v21);
    }
  }

uint64_t sub_100168748()
{
  return sub_1001670B0(*v0);
}

uint64_t sub_100168750@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100166F4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100168774(uint64_t a1)
{
  unint64_t v2 = sub_10016B624();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016879C(uint64_t a1)
{
  unint64_t v2 = sub_10016B624();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "1001687DC: call analysis failed (funcsize=16)"
void sub_100168804()
{
  unsigned __int8 *v0;
  sub_100167EFC(*v0);
}

uint64_t sub_10016881C()
{
  return sub_1001673FC(*v0);
}

uint64_t sub_100168824@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10016729C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100168848()
{
  return sub_1001673F0();
}

uint64_t sub_100168864@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1001673E8();
  *a1 = result;
  return result;
}

uint64_t sub_100168888(uint64_t a1)
{
  unint64_t v2 = sub_10016B5E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001688B0(uint64_t a1)
{
  unint64_t v2 = sub_10016B5E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "1001688F0: call analysis failed (funcsize=16)"
Swift::Int sub_100168924(uint64_t a1)
{
  void v2[9];
  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0LL);
  return Hasher._finalize()();
}

uint64_t sub_100168964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100167704(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10016898C()
{
  return sub_1001673F0();
}

uint64_t sub_1001689A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100129158();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1001689CC(uint64_t a1)
{
  unint64_t v2 = sub_10016B660();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001689F4(uint64_t a1)
{
  unint64_t v2 = sub_10016B660();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100168A1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100167878(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

void sub_100168A44()
{
}

Swift::Int sub_100168A5C()
{
  return sub_100167A40(*v0);
}

void sub_100168A64(uint64_t a1)
{
}

uint64_t sub_100168A6C()
{
  return sub_100167A84(*v0);
}

uint64_t sub_100168A74@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100167974(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100168A98@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100167A38();
  *a1 = result;
  return result;
}

uint64_t sub_100168ABC(uint64_t a1)
{
  unint64_t v2 = sub_10016BB74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100168AE4(uint64_t a1)
{
  unint64_t v2 = sub_10016BB74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100168B0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100167B98();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }

  return result;
}

#error "100168B48: call analysis failed (funcsize=7)"
uint64_t sub_100168B54()
{
  unsigned __int8 *v0;
  return sub_100167F3C(*v0);
}

uint64_t sub_100168B5C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100167CDC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100168B80@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100167EF4();
  *a1 = result;
  return result;
}

uint64_t sub_100168BA4(uint64_t a1)
{
  unint64_t v2 = sub_10016B69C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100168BCC(uint64_t a1)
{
  unint64_t v2 = sub_10016B69C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100168BF4(void *a1@<X8>)
{
  if (!v1) {
    memcpy(a1, __src, 0x98uLL);
  }
}

void sub_100168C3C()
{
}

uint64_t sub_100168C8C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!v16)
  {
    sub_10015D718((uint64_t)&v15, &qword_1002B8E90);
LABEL_5:
    sub_10012D0B0(0x6449726579616C70LL, 0xE800000000000000LL, a1, &v15);
    if (v16)
    {
      int v6 = swift_dynamicCast(&v17, &v15, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
      if (v6) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = 0LL;
      }
      if (v6) {
        uint64_t v5 = v17;
      }
      else {
        uint64_t v5 = 0LL;
      }
    }

    else
    {
      sub_10015D718((uint64_t)&v15, &qword_1002B8E90);
      uint64_t v4 = 0LL;
      uint64_t v5 = 0LL;
    }

    goto LABEL_13;
  }

  uint64_t v5 = v17;
  uint64_t v4 = v18;
LABEL_13:
  sub_10012D0B0(0x4143726579616C70LL, 0xEA00000000004449LL, a1, &v15);
  if (v16)
  {
    int v7 = swift_dynamicCast(&v17, &v15, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    if (v7) {
      uint64_t v8 = v17;
    }
    else {
      uint64_t v8 = 0LL;
    }
    if (v7) {
      uint64_t v9 = v18;
    }
    else {
      uint64_t v9 = 0LL;
    }
  }

  else
  {
    sub_10015D718((uint64_t)&v15, &qword_1002B8E90);
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
  }

  sub_10012D0B0(0x7255726174617661LL, 0xE90000000000006CLL, a1, &v15);
  if (!v16)
  {
    sub_10015D718((uint64_t)&v15, &qword_1002B8E90);
    uint64_t v12 = 0LL;
    uint64_t result = 0LL;
    if (v4) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

  int v10 = swift_dynamicCast(&v17, &v15, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  uint64_t v12 = v17;
  if (v10)
  {
    uint64_t result = v18;
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t result = 0LL;
  }

  if (!v4)
  {
LABEL_26:
    swift_bridgeObjectRelease(result, v11);
    swift_bridgeObjectRelease(v9, v14);
    uint64_t v5 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t result = 0LL;
  }

uint64_t sub_100168EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  return swift_task_switch(sub_100168ED4, 0LL, 0LL);
}

uint64_t sub_100168ED4()
{
  uint64_t v1 = *(void *)(v0 + 128);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = *(void *)(v0 + 120);
  *(void *)(v0 + 24) = v1;
  *(void *)(v0 + 3sub_100129678(v0 + 2) = 8222587LL;
  *(void *)(v0 + 40) = 0xE300000000000000LL;
  *(void *)(v0 + 48) = 3682865LL;
  *(void *)(v0 + 56) = 0xE300000000000000LL;
  unint64_t v2 = sub_10012B89C();
  *(void *)(v0 + 64) = sub_10016C55C(v0 + 32, v0 + 48);
  *(void *)(v0 + 80) = 8218747LL;
  *(void *)(v0 + 7sub_100129678(v0 + 2) = v3;
  *(void *)(v0 + 88) = 0xE300000000000000LL;
  *(void *)(v0 + 96) = 3682865LL;
  *(void *)(v0 + 104) = 0xE300000000000000LL;
  unint64_t v30 = v2;
  unint64_t v31 = v2;
  unint64_t v29 = v2;
  uint64_t v4 = sub_10016C55C(v0 + 80, v0 + 96);
  sub_10012B950(v4, v5);
  uint64_t v6 = sub_1001640F8();
  *(void *)(v0 + 15sub_100129678(v0 + 2) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v0 + 160) = v7;
  uint64_t v8 = sub_100158BAC(*(void *)(v7 + 64));
  *(void *)(v0 + 168) = v8;
  uint64_t v9 = sub_100129274(&qword_1002B9D00);
  uint64_t v10 = sub_100158BAC(*(void *)(*(void *)(v9 - 8) + 64LL));
  URL.init(string:)(v4);
  uint64_t v11 = sub_10012B4E8(v10, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    uint64_t v13 = *(void *)(v0 + 112);
    sub_100132768(v11, v12);
    sub_10015D718(v10, &qword_1002B9D00);
    swift_task_dealloc(v10);
    swift_task_dealloc(v8);
    sub_1001291F8(v13, 1LL, 1LL, v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 144);
    uint64_t v32 = *(void *)(v0 + 136);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v8, v10, v6);
    swift_task_dealloc(v10);
    id v16 =  objc_msgSend( (id)objc_opt_self(GKClientProxy),  "gameCenterClient",  &type metadata for String,  v29,  v30,  v31);
    *(void *)(v0 + 176) = v16;
    NSString v17 = String._bridgeToObjectiveC()();
    sub_100132768((uint64_t)v17, v18);
    id v19 = [v17 _gkSHA256Hash];

    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v22 = v21;

    sub_100144D2C();
    v23._uint64_t countAndFlagsBits = 95LL;
    v23._object = (void *)0xE100000000000000LL;
    String.append(_:)(v23);
    v24._uint64_t countAndFlagsBits = v20;
    v24._object = v22;
    String.append(_:)(v24);
    sub_100132768(v25, v26);
    *(void *)(v0 + 184) = v15;
    uint64_t v27 = (void *)swift_task_alloc(48LL);
    *(void *)(v0 + 19sub_100129678(v0 + 2) = v27;
    uint64_t v27[2] = v16;
    void v27[3] = v8;
    v27[4] = v32;
    v27[5] = v15;
    uint64_t v28 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 200) = v28;
    void *v28 = v0;
    v28[1] = sub_1001691C8;
    return withCheckedContinuation<A>(isolation:function:_:)( *(void *)(v0 + 112),  0LL,  0LL,  0xD000000000000028LL,  0x800000010024D8D0LL,  sub_10016A7F8,  v27,  v9);
  }

uint64_t sub_1001691C8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 192LL);
  uint64_t v2 = swift_task_dealloc(*(void *)(*(void *)v0 + 200LL));
  sub_10012B950(v2, v3);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10016922C, 0LL, 0LL);
}

uint64_t sub_10016922C()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 160);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100169280(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = a2;
  id v43 = sub_100169518(0LL, a2, 0LL);
  if (v43)
  {
    URL._bridgeToObjectiveC()(v11);
    uint64_t v42 = v12;
    uint64_t v41 = @"GKBulletins";
    NSString v40 = String._bridgeToObjectiveC()();
    uint64_t v13 = type metadata accessor for URL(0LL);
    uint64_t v39 = &v34;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v37 = v13;
    uint64_t v15 = *(void *)(v14 + 64);
    __chkstk_darwin(v13);
    id v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, uint64_t))(v14 + 16))(v16, a3);
    uint64_t v17 = sub_100129274(&qword_1002B9828);
    uint64_t v38 = &v34;
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v36 = a4;
    uint64_t v19 = *(void *)(v18 + 64);
    __chkstk_darwin(v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))( (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v17);
    uint64_t v20 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v35 = a5;
    uint64_t v21 = (v20 + 16) & ~v20;
    unint64_t v22 = (v15 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v23 = *(unsigned __int8 *)(v18 + 80);
    uint64_t v24 = (v23 + v22 + 16) & ~v23;
    uint64_t v25 = swift_allocObject(&unk_1002751D0, v24 + v19, v20 | v23 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v25 + v21, v16, v37);
    uint64_t v26 = (void *)(v25 + v22);
    uint64_t v27 = v35;
    *uint64_t v26 = v36;
    v26[1] = v27;
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))( v25 + v24,  (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v17);
    aBlock[4] = sub_10016A8D0;
    uint64_t v45 = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100169740;
    aBlock[3] = &unk_1002751E8;
    uint64_t v28 = _Block_copy(aBlock);
    uint64_t v29 = v45;
    swift_bridgeObjectRetain(v27);
    swift_release(v29);
    unint64_t v30 = v40;
    uint64_t v32 = v42;
    id v31 = v43;
    uint64_t v33 = v41;
    [v43 requestImageDataForURL:v42 subdirectory:v41 fileName:v40 handler:v28];
    _Block_release(v28);
  }

  else
  {
    __break(1u);
  }

id sub_100169518(void *a1, void *a2, void *a3)
{
  id v7 = [(id)swift_getObjCClassFromMetadata(v3) serviceWithTransport:a1 forClient:a2 credential:a3];

  return v7;
}

uint64_t sub_100169580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7 = (void *)objc_opt_self(&OBJC_CLASS___GKImageRestrictions);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  unsigned int v9 = [v7 isAuthorizedForGamesWithImageData:isa];

  if (v9
    && (id v10 = (void *)objc_opt_self(&OBJC_CLASS___NSData),
        URL._bridgeToObjectiveC()(v11),
        uint64_t v13 = v12,
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"GKBulletins"),
        uint64_t v16 = sub_10016AAA0((uint64_t)v13, v14, v15, a4, a5, v10),
        uint64_t v18 = v17,
        v13,
        v18))
  {
    uint64_t v19 = sub_100129274(&qword_1002B9D00);
    __chkstk_darwin(v19);
    uint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    URL.init(string:)(v16);
    swift_bridgeObjectRelease(v18, v22);
    uint64_t v23 = sub_100129274(&qword_1002B9828);
    uint64_t v24 = v21;
  }

  else
  {
    uint64_t v25 = sub_100129274(&qword_1002B9D00);
    __chkstk_darwin(v25);
    uint64_t v27 = (char *)&v30 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v28 = type metadata accessor for URL(0LL);
    sub_1001291F8((uint64_t)v27, 1LL, 1LL, v28);
    uint64_t v23 = sub_100129274(&qword_1002B9828);
    uint64_t v24 = v27;
  }

  return CheckedContinuation.resume(returning:)(v24, v23);
}

uint64_t sub_100169740(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(uint64_t, unint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  unint64_t v8 = v7;

  v4(v6, v8);
  sub_100135158(v6, v8);
  return swift_release(v3);
}

void sub_1001697B0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_10016C640();
    if (v7 != v8)
    {
      if (v6 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return;
      }

      sub_10016C630();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_100129274(&qword_1002B8380);
    uint64_t v12 = (char *)sub_10013A718(v11, 16 * v10);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + sub_100129678(v0 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 16);
  }

  else
  {
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v12 + 32;
  if ((a1 & 1) != 0)
  {
    uint64_t v15 = sub_10016A278((char *)(a4 + 32), v9, v14);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
    sub_10012B950((uint64_t)v15, v16);
  }

  else
  {
    sub_100169D3C(0LL, v9, (unint64_t)v14, a4);
  }

  sub_10013A774();
}

void sub_100169878(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

char *sub_10016988C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100129274(&qword_1002B9810);
    uint64_t v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_100129678(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v13 = v11 + 32;
  if ((v5 & 1) != 0)
  {
    sub_10016A330((char *)(a4 + 32), v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
    swift_bridgeObjectRelease(a4, v14);
  }

  else
  {
    sub_100169E30(0LL, v8, (unint64_t)v13, a4);
  }

  return v11;
}

char *sub_100169980(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100129274(&qword_1002B84A8);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_100129678(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v13 = v11 + 32;
  if ((v5 & 1) != 0)
  {
    sub_10016A3BC((char *)(a4 + 32), v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
    swift_bridgeObjectRelease(a4, v14);
  }

  else
  {
    sub_100169F2C(0LL, v8, (unint64_t)v13, a4);
  }

  return v11;
}

void sub_100169A6C(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_100169A88( char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), uint64_t (*a7)(uint64_t, uint64_t, void *))
{
  if ((a3 & 1) != 0)
  {
    sub_10016C640();
    if (v12 != v13)
    {
      if (v11 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return;
      }

      sub_10016C630();
    }
  }

  else
  {
    uint64_t v11 = a2;
  }

  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    uint64_t v16 = sub_100129274(a5);
    uint64_t v17 = (void *)sub_10013A718(v16, 8 * v15);
    size_t v18 = j__malloc_size(v17);
    v17[2] = v14;
    v17[3] = 2 * ((uint64_t)(v18 - 32) / 8);
  }

  else
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
  }

  uint64_t v19 = v17 + 4;
  if ((a1 & 1) != 0)
  {
    uint64_t v20 = a7(a4 + 32, v14, v19);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
    sub_10012B950(v20, v21);
  }

  else
  {
    a6(0LL, v14, v19, a4);
  }

void sub_100169B64(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_100169B80(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_100169B94(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    sub_10016C640();
    if (v10 != v11)
    {
      if (v9 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_23:
        sub_10013249C();
        uint64_t v27 = "Division by zero";
        uint64_t v28 = 16LL;
LABEL_25:
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v27,  v28,  2LL,  "Swift/IntegerTypes.swift",  24LL);
        __break(1u);
        return;
      }

      sub_10016C630();
    }
  }

  else
  {
    uint64_t v9 = a2;
  }

  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v14 = sub_100129274(a5);
  uint64_t v15 = *(void *)(((uint64_t (*)(void))a6)(0LL) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = (void *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  size_t v20 = j__malloc_size(v19);
  if (!v16) {
    goto LABEL_23;
  }
  if (v20 - v18 == 0x8000000000000000LL && v16 == -1)
  {
    sub_10013249C();
    uint64_t v27 = "Division results in an overflow";
    uint64_t v28 = 31LL;
    goto LABEL_25;
  }

  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(((uint64_t (*)(void))a6)(0LL) - 8) + 80LL);
  uint64_t v23 = (v22 + 32) & ~v22;
  unint64_t v24 = (unint64_t)v19 + v23;
  if ((a1 & 1) != 0)
  {
    uint64_t v25 = sub_10016A4A4(a4 + v23, v12, v24, a6);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
    sub_10012B950(v25, v26);
  }

  else
  {
    sub_10016A130(0LL, v12, v24, a4, (uint64_t (*)(void))a6);
  }

  sub_1001327B0();
}

uint64_t sub_100169D3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    char v11 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v12 = 51LL;
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4, v9);
    return v7;
  }

  char v11 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v12 = 49LL;
LABEL_11:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v11,  v12,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

uint64_t sub_100169E30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    char v11 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v12 = 51LL;
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 48 * a1 + 32;
  unint64_t v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4, v9);
    return v7;
  }

  char v11 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v12 = 49LL;
LABEL_11:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v11,  v12,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

uint64_t sub_100169F2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t v12 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v13 = 51LL;
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 8 * a1 + 32;
  unint64_t v8 = a3 + 8 * v4;
  if (v7 >= v8 || v7 + 8 * v4 <= a3)
  {
    sub_100129274(&qword_1002B9800);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4, v10);
    return v8;
  }

  uint64_t v12 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v13 = 49LL;
LABEL_11:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v12,  v13,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

char *sub_10016A040(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    char v11 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v12 = 51LL;
    goto LABEL_11;
  }

  unint64_t v6 = (char *)(a4 + 8 * a1 + 32);
  unint64_t v7 = &__dst[8 * v4];
  if (v6 >= v7 || &v6[8 * v4] <= __dst)
  {
    memcpy(__dst, v6, 8 * v4);
    swift_bridgeObjectRelease(a4, v9);
    return v7;
  }

  char v11 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v12 = 49LL;
LABEL_11:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v11,  v12,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

uint64_t sub_10016A130( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    sub_10013249C();
    sub_10016C4D4();
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    uint64_t v17 = swift_arrayInitWithCopy(a3);
    sub_10012B950(v17, v18);
    return v14;
  }

  sub_10013249C();
  sub_10016C4C4();
LABEL_11:
  uint64_t result = sub_100132790(v20, v21, v22, v23, v24, v25, v26);
  __break(1u);
  return result;
}

char *sub_10016A220(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10013249C();
    uint64_t result = (char *)sub_10016C450( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }

  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_10016C440(a3, result);
  }

  return result;
}

char *sub_10016A278(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10013249C();
    uint64_t result = (char *)sub_10016C450( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_10016C440(a3, result);
  }

  return result;
}

char *sub_10016A2D0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10013249C();
    uint64_t result = (char *)sub_10016C450( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }

  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_10016C440(a3, result);
  }

  return result;
}

char *sub_10016A330(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL);
    __break(1u);
  }

  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }

  return __src;
}

char *sub_10016A3BC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10013249C();
    uint64_t result = (char *)sub_10016C450( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_10016C440(a3, result);
  }

  return result;
}

char *sub_10016A414(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL);
    __break(1u);
  }

  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }

  return __src;
}

uint64_t sub_10016A498(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10016A4A4( a1,  a2,  a3,  (void (*)(void))type metadata accessor for MultiplayerActivityEventFilter.TrackedSession);
}

uint64_t sub_10016A4A4(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_10013249C();
    uint64_t result = sub_10016C450( (uint64_t)"Fatal error",  v13,  v14,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v15,  v16,  (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }

  else
  {
    sub_10016C6D8();
    if (v9 < v8
      || (uint64_t result = ((uint64_t (*)(void))a4)(0LL), v5 + *(void *)(*(void *)(result - 8) + 72LL) * v4 <= a3))
    {
      a4(0LL);
      uint64_t v12 = sub_10016C6BC();
      return swift_arrayInitWithTakeFrontToBack(v12);
    }

    else if (a3 != v5)
    {
      uint64_t v11 = sub_10016C6BC();
      return swift_arrayInitWithTakeBackToFront(v11);
    }
  }

  return result;
}

uint64_t sub_10016A568(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_10013249C();
    sub_10016C4D4();
  }

  else
  {
    unint64_t v3 = a1 + 32 * a2;
    if (a3 + 32 * a2 > a1)
    {
      BOOL v4 = v3 >= a3;
      BOOL v5 = v3 == a3;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_100129274(&qword_1002B9838);
      uint64_t v6 = sub_10016C578();
      return sub_10016C4E4(v6);
    }

    sub_10013249C();
    sub_10016C4C4();
  }

  uint64_t result = sub_100132790(v8, v9, v10, v11, v12, v13, v14);
  __break(1u);
  return result;
}

uint64_t sub_10016A60C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_10013249C();
    sub_10016C4D4();
  }

  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3) {
      return sub_10016C5C4(a3);
    }
    sub_10013249C();
    sub_10016C4C4();
  }

  uint64_t result = sub_100132790(v5, v6, v7, v8, v9, v10, v11);
  __break(1u);
  return result;
}

uint64_t sub_10016A6A4(uint64_t a1, uint64_t a2)
{
  return sub_10016A76C(a1, a2);
}

uint64_t sub_10016A6B0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_10013249C();
    sub_10016C4D4();
  }

  else
  {
    if (a3 + 40 * a2 <= a1 || a1 + 40 * a2 <= a3) {
      return sub_10016C5C4(a3);
    }
    sub_10013249C();
    sub_10016C4C4();
  }

  uint64_t result = sub_100132790(v5, v6, v7, v8, v9, v10, v11);
  __break(1u);
  return result;
}

uint64_t sub_10016A74C(uint64_t a1, uint64_t a2)
{
  return sub_10016A988(a1, a2);
}

uint64_t sub_10016A760(uint64_t a1, uint64_t a2)
{
  return sub_10016A76C(a1, a2);
}

uint64_t sub_10016A76C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10013249C();
    sub_10016C4D4();
  }

  else
  {
    sub_10016C5D4();
    if (!v6 && v5)
    {
      BOOL v5 = v4 >= v2;
      BOOL v6 = v4 == v2;
    }

    else
    {
      BOOL v5 = 0;
      BOOL v6 = 0;
    }

    if (v6 || !v5)
    {
      sub_100129274(v3);
      uint64_t v7 = sub_10016C578();
      return sub_10016C4E4(v7);
    }

    sub_10013249C();
    sub_10016C4C4();
  }

  uint64_t result = sub_100132790(v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

void sub_10016A7F8(uint64_t a1)
{
}

uint64_t sub_10016A804()
{
  uint64_t v1 = sub_1001640F8();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = sub_100129274(&qword_1002B9828);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 16) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v5 + 8), v12);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10016A8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_1001640F8() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100129274(&qword_1002B9828);
  return sub_100169580(a1, a2, v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8));
}

uint64_t sub_10016A95C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100129678(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10016A96C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10016A974(uint64_t a1, uint64_t a2)
{
  return sub_10016A988(a1, a2);
}

uint64_t sub_10016A988(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10013249C();
    sub_10016C4D4();
  }

  else
  {
    sub_10016C5D4();
    if (!v7 && v6)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      sub_100129640(0LL, v3, v4);
      uint64_t v8 = sub_10016C578();
      return sub_10016C4E4(v8);
    }

    sub_10013249C();
    sub_10016C4C4();
  }

  uint64_t result = sub_100132790(v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

void *sub_10016AA1C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10013249C();
    sub_10016C4D4();
  }

  else
  {
    sub_10016C674();
    if (!v8 && v7)
    {
      BOOL v7 = v6 >= v3;
      BOOL v8 = v6 == v3;
    }

    else
    {
      BOOL v7 = 0;
      BOOL v8 = 0;
    }

    if (v8 || !v7) {
      return sub_10016C5BC(v5, v4, 8 * v2);
    }
    sub_10013249C();
    sub_10016C4C4();
  }

  uint64_t result = (void *)sub_100132790(v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10016AAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3, v10);
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [a6 _gkImageCachePathForURL:a1 subdirectory:v9 filename:v11];

  if (!v12) {
    return 0LL;
  }
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

  return v13;
}

__n128 sub_10016AB6C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 3sub_100129678(v0 + 2) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for BulletinHelpers.BulletinRelationships.GameRelationship()
{
}

uint64_t sub_10016AB98(void *a1, uint64_t a2)
{
  return sub_10016C5B4(a1[5], v4);
}

void sub_10016ABC4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  sub_10013A69C();
  swift_bridgeObjectRetain(v5);
  sub_10013A774();
}

void sub_10016AC0C()
{
  void *v3 = *v2;
  uint64_t v4 = v2[1];
  v1[1] = v4;
  uint64_t v5 = swift_bridgeObjectRetain(v4);
  sub_1001322A0(v5, v6);
  v1[2] = v0[2];
  uint64_t v7 = v0[3];
  v1[3] = v7;
  uint64_t v8 = swift_bridgeObjectRetain(v7);
  sub_1001322A0(v8, v9);
  v1[4] = v0[4];
  uint64_t v10 = v0[5];
  v1[5] = v10;
  uint64_t v11 = swift_bridgeObjectRetain(v10);
  sub_10012B950(v11, v12);
  sub_10013A774();
}

void sub_10016AC80()
{
  uint64_t v3 = v2[1];
  uint64_t v5 = *(void *)(v4 + 8);
  void *v1 = *v2;
  v1[1] = v3;
  swift_bridgeObjectRelease(v5, v2);
  uint64_t v6 = v0[3];
  uint64_t v7 = v1[3];
  v1[2] = v0[2];
  v1[3] = v6;
  swift_bridgeObjectRelease(v7, v8);
  uint64_t v9 = v0[5];
  uint64_t v10 = v1[5];
  v1[4] = v0[4];
  v1[5] = v9;
  swift_bridgeObjectRelease(v10, v11);
  sub_100132514();
}

uint64_t sub_10016ACCC(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(sub_100158F14(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_100158F14(v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_100158F14(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10016AD0C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for BulletinHelpers.BulletinRelationships.PlayerRelationship()
{
}

void *sub_10016AD64(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_10016AD90(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8), a2);
}

void *sub_10016AD98(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4, v5);
  return a1;
}

void *sub_10016ADD8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4, a2);
  return a1;
}

uint64_t sub_10016AE08(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(sub_100158F14(v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_100158F14(v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_100158F14(v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10016AE48(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for BulletinHelpers.BulletinRelationships.ChallengeRelationship()
{
}

void type metadata accessor for BulletinHelpers()
{
}

uint64_t sub_10016AE9C(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  if (v3)
  {
    swift_bridgeObjectRelease(v3, a2);
    swift_bridgeObjectRelease(a1[3], v4);
    swift_bridgeObjectRelease(a1[5], v5);
  }

  swift_bridgeObjectRelease(a1[6], a2);
  uint64_t v7 = a1[8];
  if (v7)
  {
    swift_bridgeObjectRelease(v7, v6);
    swift_bridgeObjectRelease(a1[10], v8);
    swift_bridgeObjectRelease(a1[12], v9);
  }

  swift_bridgeObjectRelease(a1[14], v6);
  uint64_t result = a1[16];
  if (result)
  {
    swift_bridgeObjectRelease(result, v10);
    return swift_bridgeObjectRelease(a1[18], v12);
  }

  return result;
}

void *sub_10016AF1C(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  if (v4)
  {
    *a1 = *a2;
    a1[1] = v4;
    uint64_t v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    uint64_t v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
  }

  else
  {
    __int128 v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v7;
    *((_OWORD *)a1 + sub_100129678(v0 + 2) = *((_OWORD *)a2 + 2);
  }

  uint64_t v8 = a2[6];
  a1[6] = v8;
  uint64_t v9 = a2[8];
  swift_bridgeObjectRetain(v8);
  if (v9)
  {
    a1[7] = a2[7];
    a1[8] = v9;
    uint64_t v10 = a2[10];
    a1[9] = a2[9];
    a1[10] = v10;
    uint64_t v11 = a2[12];
    a1[11] = a2[11];
    a1[12] = v11;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
  }

  else
  {
    __int128 v12 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 9) = v12;
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  }

  uint64_t v13 = a2[14];
  a1[13] = a2[13];
  a1[14] = v13;
  uint64_t v14 = a2[16];
  swift_bridgeObjectRetain(v13);
  if (v14)
  {
    a1[15] = a2[15];
    a1[16] = v14;
    uint64_t v15 = a2[17];
    uint64_t v16 = a2[18];
    a1[17] = v15;
    a1[18] = v16;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v16);
  }

  else
  {
    __int128 v17 = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 17) = v17;
  }

  return a1;
}

void *sub_10016B040(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (v4)
  {
    if (v5)
    {
      *a1 = *a2;
      uint64_t v6 = a2[1];
      a1[1] = v6;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRelease(v4, v7);
      a1[2] = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v9 = a1[3];
      a1[3] = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v9, v10);
      a1[4] = a2[4];
      uint64_t v11 = a2[5];
      uint64_t v12 = a1[5];
      a1[5] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12, v13);
    }

    else
    {
      sub_10016B32C((uint64_t)a1);
      __int128 v18 = *((_OWORD *)a2 + 1);
      __int128 v17 = *((_OWORD *)a2 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v18;
      *((_OWORD *)a1 + sub_100129678(v0 + 2) = v17;
    }
  }

  else if (v5)
  {
    *a1 = *a2;
    uint64_t v14 = a2[1];
    a1[1] = v14;
    a1[2] = a2[2];
    uint64_t v15 = a2[3];
    a1[3] = v15;
    a1[4] = a2[4];
    uint64_t v16 = a2[5];
    a1[5] = v16;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
  }

  else
  {
    __int128 v19 = *(_OWORD *)a2;
    __int128 v20 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + sub_100129678(v0 + 2) = v20;
    *(_OWORD *)a1 = v19;
  }

  uint64_t v21 = a1[6];
  uint64_t v22 = a2[6];
  a1[6] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v21, v23);
  uint64_t v24 = a1 + 7;
  uint64_t v25 = a2 + 7;
  uint64_t v26 = a1[8];
  uint64_t v27 = a2[8];
  if (v26)
  {
    if (v27)
    {
      a1[7] = a2[7];
      uint64_t v28 = a2[8];
      a1[8] = v28;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRelease(v26, v29);
      a1[9] = a2[9];
      uint64_t v30 = a2[10];
      uint64_t v31 = a1[10];
      a1[10] = v30;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRelease(v31, v32);
      a1[11] = a2[11];
      uint64_t v33 = a2[12];
      uint64_t v34 = a1[12];
      a1[12] = v33;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRelease(v34, v35);
    }

    else
    {
      sub_10016B358((uint64_t)(a1 + 7));
      __int128 v40 = *(_OWORD *)(a2 + 9);
      __int128 v39 = *(_OWORD *)(a2 + 11);
      *uint64_t v24 = *v25;
      *(_OWORD *)(a1 + 9) = v40;
      *(_OWORD *)(a1 + 11) = v39;
    }
  }

  else if (v27)
  {
    a1[7] = a2[7];
    uint64_t v36 = a2[8];
    a1[8] = v36;
    a1[9] = a2[9];
    uint64_t v37 = a2[10];
    a1[10] = v37;
    a1[11] = a2[11];
    uint64_t v38 = a2[12];
    a1[12] = v38;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
  }

  else
  {
    __int128 v41 = *v25;
    __int128 v42 = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 11) = v42;
    *uint64_t v24 = v41;
  }

  a1[13] = a2[13];
  uint64_t v43 = a2[14];
  uint64_t v44 = a1[14];
  a1[14] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44, v45);
  uint64_t v46 = a1 + 15;
  uint64_t v47 = a2 + 15;
  uint64_t v48 = a1[16];
  uint64_t v49 = a2[16];
  if (v48)
  {
    if (v49)
    {
      a1[15] = a2[15];
      uint64_t v50 = a2[16];
      a1[16] = v50;
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRelease(v48, v51);
      a1[17] = a2[17];
      uint64_t v52 = a2[18];
      uint64_t v53 = a1[18];
      a1[18] = v52;
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRelease(v53, v54);
    }

    else
    {
      sub_10016B384((uint64_t)(a1 + 15));
      __int128 v57 = *(_OWORD *)(a2 + 17);
      *uint64_t v46 = *v47;
      *(_OWORD *)(a1 + 17) = v57;
    }
  }

  else if (v49)
  {
    a1[15] = a2[15];
    uint64_t v55 = a2[16];
    a1[16] = v55;
    a1[17] = a2[17];
    uint64_t v56 = a2[18];
    a1[18] = v56;
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v56);
  }

  else
  {
    __int128 v58 = *(_OWORD *)(a2 + 17);
    *uint64_t v46 = *v47;
    *(_OWORD *)(a1 + 17) = v58;
  }

  return a1;
}

uint64_t sub_10016B32C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10016B358(uint64_t a1)
{
  return a1;
}

uint64_t sub_10016B384(uint64_t a1)
{
  return a1;
}

void *sub_10016B3B0(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x98uLL);
}

uint64_t sub_10016B3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    if (v5)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      swift_bridgeObjectRelease(v4, a2);
      uint64_t v6 = *(void *)(a2 + 24);
      uint64_t v7 = *(void *)(a1 + 24);
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v6;
      swift_bridgeObjectRelease(v7, v8);
      uint64_t v9 = *(void *)(a2 + 40);
      uint64_t v10 = *(void *)(a1 + 40);
      *(void *)(a1 + 3sub_100129678(v0 + 2) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v9;
      swift_bridgeObjectRelease(v10, v11);
      goto LABEL_6;
    }

    sub_10016B32C(a1);
  }

  __int128 v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v12;
  *(_OWORD *)(a1 + 3sub_100129678(v0 + 2) = *(_OWORD *)(a2 + 32);
LABEL_6:
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v13, a2);
  uint64_t v15 = *(void *)(a1 + 64);
  if (v15)
  {
    uint64_t v16 = *(void *)(a2 + 64);
    if (v16)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v16;
      swift_bridgeObjectRelease(v15, v14);
      uint64_t v17 = *(void *)(a2 + 80);
      uint64_t v18 = *(void *)(a1 + 80);
      *(void *)(a1 + 7sub_100129678(v0 + 2) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v17;
      swift_bridgeObjectRelease(v18, v19);
      uint64_t v20 = *(void *)(a2 + 96);
      uint64_t v21 = *(void *)(a1 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v20;
      swift_bridgeObjectRelease(v21, v22);
      goto LABEL_11;
    }

    sub_10016B358(a1 + 56);
  }

  __int128 v23 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 7sub_100129678(v0 + 2) = v23;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
LABEL_11:
  uint64_t v24 = *(void *)(a2 + 112);
  uint64_t v25 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 11sub_100129678(v0 + 2) = v24;
  swift_bridgeObjectRelease(v25, v14);
  uint64_t v27 = *(void *)(a1 + 128);
  if (!v27)
  {
LABEL_15:
    __int128 v32 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v32;
    return a1;
  }

  uint64_t v28 = *(void *)(a2 + 128);
  if (!v28)
  {
    sub_10016B384(a1 + 120);
    goto LABEL_15;
  }

  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v28;
  swift_bridgeObjectRelease(v27, v26);
  uint64_t v29 = *(void *)(a2 + 144);
  uint64_t v30 = *(void *)(a1 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v29;
  swift_bridgeObjectRelease(v30, v31);
  return a1;
}

uint64_t sub_10016B504(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 152))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(swift_bridgeObjectRelease(*(void *)(v0 + 40), v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10016B558(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_100129678(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 15sub_100129678(v0 + 2) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 15sub_100129678(v0 + 2) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

void type metadata accessor for BulletinHelpers.BulletinRelationships()
{
}

void type metadata accessor for BulletinHelpers.BulletinRelationships.LeaderboardRelationship()
{
}

unint64_t sub_10016B5E8()
{
  unint64_t result = qword_1002B9850;
  if (!qword_1002B9850)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F4CCC,  &type metadata for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9850);
  }

  return result;
}

unint64_t sub_10016B624()
{
  unint64_t result = qword_1002B9868;
  if (!qword_1002B9868)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F4C7C,  &type metadata for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9868);
  }

  return result;
}

unint64_t sub_10016B660()
{
  unint64_t result = qword_1002B9880;
  if (!qword_1002B9880)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F4C2C,  &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9880);
  }

  return result;
}

unint64_t sub_10016B69C()
{
  unint64_t result = qword_1002B9898;
  if (!qword_1002B9898)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4BDC, &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9898);
  }

  return result;
}

unint64_t sub_10016B6D8()
{
  unint64_t result = qword_1002B98A0;
  if (!qword_1002B98A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4770, &unk_100275300);
    atomic_store(result, (unint64_t *)&qword_1002B98A0);
  }

  return result;
}

void sub_10016B714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    uint64_t v7 = swift_bridgeObjectRelease(a2, a2);
    sub_100132324(v7, v8);
    sub_10016C5B4(a6, v9);
  }

unint64_t sub_10016B748()
{
  unint64_t result = qword_1002B98B8;
  if (!qword_1002B98B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F47C0, &unk_100275278);
    atomic_store(result, (unint64_t *)&qword_1002B98B8);
  }

  return result;
}

uint64_t sub_10016B784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }

  return result;
}

unint64_t sub_10016B7C0()
{
  unint64_t result = qword_1002B98C0;
  if (!qword_1002B98C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4720, &unk_100275388);
    atomic_store(result, (unint64_t *)&qword_1002B98C0);
  }

  return result;
}

unint64_t sub_10016B7FC()
{
  unint64_t result = qword_1002B98C8;
  if (!qword_1002B98C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4680, &unk_1002754B8);
    atomic_store(result, (unint64_t *)&qword_1002B98C8);
  }

  return result;
}

uint64_t *sub_10016B838(uint64_t *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[12];
  uint64_t v9 = a1[14];
  uint64_t v10 = a1[15];
  uint64_t v13 = a1[17];
  uint64_t v14 = a1[16];
  uint64_t v12 = a1[18];
  sub_100148150(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  swift_bridgeObjectRetain(v2);
  sub_10016B784(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain(v9);
  sub_10016B8F4(v10, v14, v13, v12);
  return a1;
}

uint64_t sub_10016B8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a2);
  }

  return result;
}

uint64_t *sub_10016B924(uint64_t *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[12];
  uint64_t v9 = a1[14];
  uint64_t v10 = a1[15];
  uint64_t v15 = a1[17];
  uint64_t v16 = a1[16];
  uint64_t v14 = a1[18];
  sub_10016B714(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  swift_bridgeObjectRelease(v2, v11);
  sub_10016B714(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease(v9, v12);
  sub_1001480EC(v10, v16, v15, v14);
  return a1;
}

unint64_t sub_10016B9E0()
{
  unint64_t result = qword_1002B98D8;
  if (!qword_1002B98D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4748, &unk_100275300);
    atomic_store(result, (unint64_t *)&qword_1002B98D8);
  }

  return result;
}

uint64_t sub_10016BA1C(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_1001292F8(&qword_1002B98A8);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10016BA84()
{
  unint64_t result = qword_1002B98F8;
  if (!qword_1002B98F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4798, &unk_100275278);
    atomic_store(result, (unint64_t *)&qword_1002B98F8);
  }

  return result;
}

unint64_t sub_10016BAC0()
{
  unint64_t result = qword_1002B9908;
  if (!qword_1002B9908)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F46F8, &unk_100275388);
    atomic_store(result, (unint64_t *)&qword_1002B9908);
  }

  return result;
}

void sub_10016BAFC()
{
  uint64_t v3 = sub_100129274(v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL))(v0, v1, v3);
  sub_100132514();
}

unint64_t sub_10016BB38()
{
  unint64_t result = qword_1002B9918;
  if (!qword_1002B9918)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4658, &unk_1002754B8);
    atomic_store(result, (unint64_t *)&qword_1002B9918);
  }

  return result;
}

unint64_t sub_10016BB74()
{
  unint64_t result = qword_1002B9928;
  if (!qword_1002B9928)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F4B8C,  &type metadata for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9928);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = 1;
  }
  else {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10016BBFC + 4 * byte_1001F457A[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10016BC30 + 4 * byte_1001F4575[v4]))();
}

uint64_t sub_10016BC30(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016BC38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10016BC40LL);
  }
  return result;
}

uint64_t sub_10016BC4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10016BC54LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10016BC58(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016BC60(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys;
}

uint64_t getEnumTagSinglePayload for BulletinHelpers.BulletinRelationships.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for BulletinHelpers.BulletinRelationships.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = 1;
  }
  else {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10016BD50 + 4 * byte_1001F4584[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10016BD84 + 4 * byte_1001F457F[v4]))();
}

uint64_t sub_10016BD84(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016BD8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10016BD94LL);
  }
  return result;
}

uint64_t sub_10016BDA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10016BDA8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10016BDAC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016BDB4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys;
}

uint64_t getEnumTagSinglePayload for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys( unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10016BE64 + 4 * byte_1001F4589[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10016BE84 + 4 * byte_1001F458E[v4]))();
  }
}

_BYTE *sub_10016BE64(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10016BE84(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10016BE8C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10016BE94(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10016BE9C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10016BEA4(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_10016BEB0()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FairPlaySessionError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t _s14GameDaemonCore15BulletinHelpersO21BulletinRelationshipsV18PlayerRelationshipV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = 1;
  }
  else {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10016BFB4 + 4 * byte_1001F4598[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10016BFE8 + 4 * byte_1001F4593[v4]))();
}

uint64_t sub_10016BFE8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016BFF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10016BFF8LL);
  }
  return result;
}

uint64_t sub_10016C004(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10016C00CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10016C010(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016C018(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys;
}

unint64_t sub_10016C038()
{
  unint64_t result = qword_1002B9938;
  if (!qword_1002B9938)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F4884,  &type metadata for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9938);
  }

  return result;
}

unint64_t sub_10016C078()
{
  unint64_t result = qword_1002B9940;
  if (!qword_1002B9940)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F493C,  &type metadata for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9940);
  }

  return result;
}

unint64_t sub_10016C0B8()
{
  unint64_t result = qword_1002B9948;
  if (!qword_1002B9948)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F49F4,  &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9948);
  }

  return result;
}

unint64_t sub_10016C0F8()
{
  unint64_t result = qword_1002B9950;
  if (!qword_1002B9950)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4AAC, &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9950);
  }

  return result;
}

unint64_t sub_10016C138()
{
  unint64_t result = qword_1002B9958;
  if (!qword_1002B9958)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F4B64,  &type metadata for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9958);
  }

  return result;
}

unint64_t sub_10016C178()
{
  unint64_t result = qword_1002B9960;
  if (!qword_1002B9960)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F4AD4,  &type metadata for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9960);
  }

  return result;
}

unint64_t sub_10016C1B8()
{
  unint64_t result = qword_1002B9968;
  if (!qword_1002B9968)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F4AFC,  &type metadata for BulletinHelpers.BulletinRelationships.LeaderboardRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9968);
  }

  return result;
}

unint64_t sub_10016C1F8()
{
  unint64_t result = qword_1002B9970;
  if (!qword_1002B9970)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4A1C, &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9970);
  }

  return result;
}

unint64_t sub_10016C238()
{
  unint64_t result = qword_1002B9978;
  if (!qword_1002B9978)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4A44, &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9978);
  }

  return result;
}

unint64_t sub_10016C278()
{
  unint64_t result = qword_1002B9980;
  if (!qword_1002B9980)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F4964,  &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9980);
  }

  return result;
}

unint64_t sub_10016C2B8()
{
  unint64_t result = qword_1002B9988;
  if (!qword_1002B9988)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F498C,  &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9988);
  }

  return result;
}

unint64_t sub_10016C2F8()
{
  unint64_t result = qword_1002B9990;
  if (!qword_1002B9990)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F48AC,  &type metadata for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9990);
  }

  return result;
}

unint64_t sub_10016C338()
{
  unint64_t result = qword_1002B9998;
  if (!qword_1002B9998)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F48D4,  &type metadata for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9998);
  }

  return result;
}

unint64_t sub_10016C378()
{
  unint64_t result = qword_1002B99A0;
  if (!qword_1002B99A0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F47F4,  &type metadata for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B99A0);
  }

  return result;
}

unint64_t sub_10016C3B8()
{
  unint64_t result = qword_1002B99A8;
  if (!qword_1002B99A8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F481C,  &type metadata for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B99A8);
  }

  return result;
}

uint64_t sub_10016C414( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  return swift_dynamicCast(va, v16 - 240, v15 + 8, a4, 6LL);
}

  ;
}

void *sub_10016C440@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_10016C450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 55LL, 2LL, a7, 25LL);
}

void sub_10016C468()
{
}

uint64_t sub_10016C490()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v1 - 272, v1 - 273, v0);
}

uint64_t sub_10016C4A8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10016C4B8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

  ;
}

  ;
}

uint64_t sub_10016C4E4(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

void sub_10016C4F4(uint64_t a1, uint64_t *a2)
{
}

  ;
}

void sub_10016C514()
{
}

uint64_t sub_10016C51C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(v2 - 66) = 1;
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10016C52C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_10016C53C(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
}

uint64_t sub_10016C544(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

void sub_10016C554(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
}

uint64_t sub_10016C55C(uint64_t a1, uint64_t a2)
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(a1, a2, 0LL, 0LL, 0LL, 1LL, v2, v2);
}

uint64_t sub_10016C578()
{
  return v0;
}

uint64_t sub_10016C58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

  ;
}

uint64_t sub_10016C5B4(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a1, a2);
}

void *sub_10016C5BC(void *__dst, const void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

uint64_t sub_10016C5C4(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_10016C5CC()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

  ;
}

  ;
}

void sub_10016C600()
{
  *uint64_t v2 = *(void *)(v5 - 88);
  v2[1] = v3;
  v2[2] = *(void *)(v5 - 104);
  v2[3] = v0;
  void v2[4] = v4;
  v2[5] = v1;
}

uint64_t sub_10016C618()
{
  uint64_t result = v1 - 67;
  *(void *)(v1 - 96) = v0;
  return result;
}

  ;
}

  ;
}

void *sub_10016C650()
{
  return sub_10012A960(v0, v1);
}

uint64_t sub_10016C66C()
{
  return sub_100129678(v0);
}

  ;
}

char *sub_10016C68C(char *a1, int64_t a2)
{
  return sub_100169980(a1, a2, 1, v2);
}

void sub_10016C698(char a1@<W8>)
{
  *(_BYTE *)(v1 - 273) = a1;
}

uint64_t sub_10016C6A4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_10016C6B0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(*(void *)(v2 - 96), a2);
}

uint64_t sub_10016C6BC()
{
  return v0;
}

uint64_t sub_10016C6D0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(*(void *)(v2 + 56), a2);
}

  ;
}

uint64_t sub_10016C6E4()
{
  return sub_100129678(v0);
}

uint64_t sub_10016C6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a2, a3, v4, v3);
}

  ;
}

uint64_t sub_10016C704()
{
  return 0x726579616C70LL;
}

  ;
}

uint64_t sub_10016C72C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10016C734(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWEndpoint.Port(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unsigned int v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = sub_100129274(&qword_1002B9AA0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10016EFB0(a1, (uint64_t)v11);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v11, v2);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  uint64_t v12 = String.init<A>(reflecting:)(v6, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v12;
}

void sub_10016C878()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = sub_1001447C4();
  sub_10016C5F0();
  __chkstk_darwin(v5);
  sub_1001485F8();
  uint64_t v8 = v6 - v7;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v48 - v11;
  uint64_t v13 = v2[4];
  if (v13)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 2);
    if (Strong)
    {
      uint64_t v51 = v1;
      uint64_t v15 = v2[3];
      uint64_t v16 = Strong;
      uint64_t v17 = swift_retain(v13);
      LODWORD(v49) = static os_log_type_t.info.getter(v17);
      uint64_t v53 = 0LL;
      unint64_t v54 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(38LL);
      sub_10016F0C8((uint64_t)"Starting Listener: ");
      v52[0] = v2;
      sub_10016F1F8((uint64_t)v52, (uint64_t)&v53, v3);
      v18._uint64_t countAndFlagsBits = 0x6167656C6544202ELL;
      v18._object = (void *)0xEF203A7369206574LL;
      String.append(_:)(v18);
      uint64_t v50 = v16;
      v52[0] = v16;
      v52[1] = v15;
      uint64_t v19 = sub_100129274(&qword_1002B9630);
      uint64_t v20 = sub_10016F1F8((uint64_t)v52, (uint64_t)&v53, v19);
      uint64_t v21 = v53;
      unint64_t v22 = v54;
      static GKLog.match.getter(v20);
      uint64_t v23 = sub_100135A20(v22);
      uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
      os_log_type_t v25 = v49;
      if (os_log_type_enabled(v24, (os_log_type_t)v49))
      {
        uint64_t v48 = v21;
        uint64_t v26 = (uint8_t *)sub_10012CE30(12LL);
        uint64_t v27 = sub_10012CE30(32LL);
        uint64_t v49 = v4;
        uint64_t v28 = v27;
        uint64_t v53 = v27;
        *(_DWORD *)uint64_t v26 = 136315138;
        swift_bridgeObjectRetain(v22);
        uint64_t v29 = sub_100135074(v48, v22, &v53);
        uint64_t v30 = sub_10016F174(v29);
        sub_100144C60(v30, v31);
        sub_100135A44(v22);
        sub_10012CE90((void *)&_mh_execute_header, v24, v25, "Nearby - %s", v26);
        sub_10012CE88(v28, v32, (uint64_t)&type metadata for Any + 8);
        sub_10012CE24(v28);
        sub_10012CE24((uint64_t)v26);

        (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v49);
      }

      else
      {
        sub_100135A28(v22);

        (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v4);
      }

      swift_bridgeObjectRelease(v22, v33);
      uint64_t v45 = sub_10016F124();
      sub_10016F188(v45);
      swift_retain(v45);
      sub_10012CBD0((uint64_t)sub_10016ED78, v45);
      NWListener.stateUpdateHandler.setter(sub_10016ED78, v45);
      swift_release_n(v45, 2LL);
      uint64_t v46 = sub_10016F124();
      sub_10016F188(v46);
      sub_10012CF1C();
      sub_10012CBD0((uint64_t)sub_10016ED80, v46);
      NWListener.newConnectionHandler.setter(sub_10016ED80, v46);
      swift_release_n(v46, 2LL);
      sub_100129640(0LL, (unint64_t *)&qword_1002B7F58, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v47 = (void *)static OS_dispatch_queue.main.getter();
      NWListener.start(queue:)();

      swift_unknownObjectRelease(v50);
      swift_release(v13);
    }
  }

  else
  {
    uint64_t v34 = static os_log_type_t.info.getter(v10);
    uint64_t v35 = static GKLog.match.getter(v34);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = v34;
    if (sub_10016F080(v36))
    {
      uint64_t v38 = v4;
      __int128 v39 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v40 = sub_10012CE30(32LL);
      *(_DWORD *)__int128 v39 = 136315138;
      uint64_t v53 = v40;
      uint64_t v41 = sub_100135074(0xD000000000000037LL, 0x800000010024DA20LL, &v53);
      uint64_t v42 = sub_10016F174(v41);
      sub_10016F204(v42, v43);
      sub_10012CE90((void *)&_mh_execute_header, v36, v37, "Nearby - %s", v39);
      sub_10012CE88(v40, v44, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v40);
      sub_10012CE24((uint64_t)v39);

      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v8, v38);
    }

    else
    {

      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v8, v4);
    }
  }

  sub_10012CE58();
}

void sub_10016CC90()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = sub_1001447C4();
  sub_10016C5F0();
  __chkstk_darwin(v5);
  sub_1001296C0();
  uint64_t v8 = v7 - v6;
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  uint64_t v23 = 0LL;
  unint64_t v24 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(21LL);
  sub_10016F0C8((uint64_t)"Stopping listener: ");
  uint64_t v22 = (uint64_t)v0;
  _print_unlocked<A, B>(_:_:)(&v22, &v23, v3);
  uint64_t v12 = v23;
  unint64_t v11 = v24;
  sub_10016F1D8();
  uint64_t v13 = sub_100135A20(v11);
  uint64_t v14 = (os_log_s *)sub_10016F1C4(v13);
  os_log_type_t v15 = v10;
  if (os_log_type_enabled(v14, v10))
  {
    uint64_t v16 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v21 = v1;
    uint64_t v17 = sub_10012CE30(32LL);
    uint64_t v23 = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    swift_bridgeObjectRetain(v11);
    uint64_t v22 = sub_100135074(v12, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    sub_100135A44(v11);
    sub_10012CE90((void *)&_mh_execute_header, v14, v15, "Nearby - %s", v16);
    sub_10012CE88(v17, v18, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v17);
    sub_10012CE24((uint64_t)v16);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v8, v4);
  }

  else
  {

    sub_100135A28(v11);
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v8, v4);
  }

  swift_bridgeObjectRelease(v11, v19);
  if (!v2[4]) {
    goto LABEL_8;
  }
  sub_10012CF38();
  sub_10012CBD0(0LL, 0LL);
  NWListener.stateUpdateHandler.setter(0LL, 0LL);
  sub_10012CF14();
  if (!v2[4]) {
    goto LABEL_8;
  }
  sub_10012CF38();
  sub_10012CBD0(0LL, 0LL);
  NWListener.newConnectionHandler.setter(0LL, 0LL);
  sub_10012CF14();
  if (v2[4])
  {
    sub_10012CF38();
    NWListener.cancel()();
    sub_10012CF14();
    uint64_t v20 = v2[4];
  }

  else
  {
LABEL_8:
    uint64_t v20 = 0LL;
  }

  void v2[4] = 0LL;
  swift_release(v20);
  sub_10012CE58();
}

id sub_10016CEC8()
{
  uint64_t v53 = v2;
  uint64_t v54 = v3;
  uint64_t v4 = sub_1001447C4();
  sub_10016C5F0();
  __chkstk_darwin(v5);
  sub_1001485F8();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v50 - v10;
  id result = [(id)objc_opt_self(GKDevice) currentDevice];
  if (result)
  {
    uint64_t v13 = sub_10016EE18(result);
    if (v14)
    {
      uint64_t v15 = v13;
      uint64_t v16 = v14;
      uint64_t v17 = v0 + 5;
      sub_10016EFF8();
      uint64_t v18 = sub_10012D02C(101LL, 0xE100000000000000LL, v0[5]);
      if (v19)
      {
        uint64_t v20 = v18;
        uint64_t v21 = v19;
        sub_10016F088();
        sub_10016EFF8();
        uint64_t v22 = sub_10012D02C(104LL, 0xE100000000000000LL, *v17);
        if (v23)
        {
          uint64_t v24 = v23;
          uint64_t v50 = v22;
          sub_10016F088();
          sub_10016EFF8();
          uint64_t v25 = sub_10012D02C(28776LL, 0xE200000000000000LL, *v17);
          if (v26)
          {
            uint64_t v27 = v26;
            uint64_t v28 = v25;
            sub_10016F088();
            uint64_t v29 = sub_100129274(&qword_1002B9A80);
            uint64_t v30 = ((uint64_t (*)(uint64_t, uint64_t *))swift_initStackObject)(v29, &v51);
            *(_OWORD *)(v30 + swift_weakDestroy(v0 + 16) = xmmword_1001F3910;
            *(void *)(v30 + 3sub_100129678(v0 + 2) = 0x4449656369766564LL;
            *(void *)(v30 + 40) = 0xE800000000000000LL;
            *(void *)(v30 + 48) = v15;
            *(void *)(v30 + 56) = v16;
            *(void *)(v30 + 64) = 101LL;
            *(void *)(v30 + 7sub_100129678(v0 + 2) = 0xE100000000000000LL;
            *(void *)(v30 + 80) = v20;
            *(void *)(v30 + 88) = v21;
            *(void *)(v30 + 96) = 104LL;
            *(void *)(v30 + 104) = 0xE100000000000000LL;
            *(void *)(v30 + 11sub_100129678(v0 + 2) = v50;
            *(void *)(v30 + 120) = v24;
            *(void *)(v30 + 128) = 28776LL;
            *(void *)(v30 + 136) = 0xE200000000000000LL;
            *(void *)(v30 + 144) = v28;
            *(void *)(v30 + 15sub_100129678(v0 + 2) = v27;
            *(void *)(v30 + 160) = 0x4449726579616C70LL;
            *(void *)(v30 + 168) = 0xE800000000000000LL;
            uint64_t v31 = v0[9];
            *(void *)(v30 + 176) = v0[8];
            *(void *)(v30 + 184) = v31;
            swift_bridgeObjectRetain(v31);
            return (id)Dictionary.init(dictionaryLiteral:)( v30,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
          }

          sub_10016F088();
          swift_bridgeObjectRelease(v21, v43);
          uint64_t v42 = v24;
        }

        else
        {
          sub_10016F088();
          uint64_t v42 = v21;
        }

        swift_bridgeObjectRelease(v42, v41);
      }

      else
      {
        sub_10016F088();
      }

      uint64_t v44 = swift_bridgeObjectRelease(v16, v40);
      static os_log_type_t.info.getter(v44);
      sub_10016F1E8();
      uint64_t v45 = (os_log_s *)sub_100144FF8();
      if (sub_10016F060(v45))
      {
        uint64_t v46 = (uint8_t *)sub_10012CE30(12LL);
        uint64_t v47 = sub_10012CE30(32LL);
        v52[0] = v47;
        *(_DWORD *)uint64_t v46 = 136315138;
        uint64_t v48 = sub_100135074(0xD00000000000001ALL, 0x800000010024DAA0LL, v52);
        sub_10016F00C(v48);
        sub_10012CE90((void *)&_mh_execute_header, (os_log_s *)v0, (os_log_type_t)v16, "Nearby - %s", v46);
        sub_10012CE88(v47, v49, (uint64_t)&type metadata for Any + 8);
        sub_10012CE24(v47);
        sub_10012CE24((uint64_t)v46);
      }

      (*(void (**)(char *, uint64_t))(v1 + 8))(v11, v4);
    }

    else
    {
      os_log_type_t v32 = static os_log_type_t.info.getter(v13);
      uint64_t v33 = sub_10016F1D8();
      uint64_t v34 = (os_log_s *)sub_10016F1C4(v33);
      os_log_type_t v35 = v32;
      if (sub_10016F080(v34))
      {
        uint64_t v36 = (uint8_t *)sub_10012CE30(12LL);
        uint64_t v37 = sub_10012CE30(32LL);
        v52[0] = v37;
        *(_DWORD *)uint64_t v36 = 136315138;
        uint64_t v38 = sub_100135074(0xD00000000000001DLL, 0x800000010024DA80LL, v52);
        sub_10016F00C(v38);
        sub_10012CE90((void *)&_mh_execute_header, v34, v35, "Nearby - %s", v36);
        sub_10012CE88(v37, v39, (uint64_t)&type metadata for Any + 8);
        sub_10012CE24(v37);
        sub_10012CE24((uint64_t)v36);
      }

      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v8, v4);
    }

    return 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_10016D270()
{
  id result = [(id)objc_opt_self(GKDevice) currentDevice];
  if (result)
  {
    id result = (id)sub_10016EE18(result);
    if (v2)
    {
      uint64_t v3 = v2;
      id v10 = result;
      uint64_t v11 = v2;
      swift_bridgeObjectRetain(v2);
      v4._uint64_t countAndFlagsBits = 36LL;
      v4._object = (void *)0xE100000000000000LL;
      String.append(_:)(v4);
      swift_bridgeObjectRelease(v3, v5);
      uint64_t v7 = *(void *)(v0 + 64);
      uint64_t v6 = *(void **)(v0 + 72);
      swift_bridgeObjectRetain(v11);
      v8._uint64_t countAndFlagsBits = v7;
      v8._object = v6;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(v11, v9);
      return v10;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_10016D328()
{
  uint64_t v1 = v0;
  uint64_t v157 = *v0;
  sub_100129274(&qword_1002B9AA8);
  sub_10016F1A8();
  __chkstk_darwin(v2);
  sub_1001296C0();
  uint64_t v160 = (os_log_s *)(v4 - v3);
  uint64_t v5 = type metadata accessor for NWTXTRecord(0LL);
  uint64_t v161 = *(void *)(v5 - 8);
  sub_10016F1A8();
  __chkstk_darwin(v6);
  sub_1001485F8();
  uint64_t v159 = v7 - v8;
  __chkstk_darwin(v9);
  uint64_t v162 = (char *)&v151 - v10;
  uint64_t v11 = sub_1001447C4();
  uint64_t v163 = *(void (**)(char *, uint64_t))(v11 - 8);
  uint64_t v164 = v11;
  sub_10016F1A8();
  __chkstk_darwin(v12);
  sub_1001485F8();
  uint64_t v15 = v13 - v14;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v151 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v151 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v156 = (char *)&v151 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v158 = (char *)&v151 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v151 - v28;
  __chkstk_darwin(v27);
  type metadata accessor for NWEndpoint.Port(0LL);
  sub_10016F1A8();
  __chkstk_darwin(v30);
  sub_1001296C0();
  uint64_t v33 = v32 - v31;
  id v34 = sub_10016D270();
  if (!v35)
  {
    os_log_type_t v41 = static os_log_type_t.error.getter(v34);
    sub_10016F1E8();
    uint64_t v42 = (os_log_s *)sub_100144FF8();
    if (os_log_type_enabled(v42, v41))
    {
      uint64_t v43 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v44 = sub_10012CE30(32LL);
      uint64_t v167 = v44;
      *(_DWORD *)uint64_t v43 = 136315138;
      uint64_t v45 = sub_10016F104(0xD000000000000036LL, (uint64_t)"Cannot create bonjour listener without providing name.");
      uint64_t v46 = sub_10016F194(v45);
      sub_10016F204(v46, v47);
      sub_10012CE90((void *)&_mh_execute_header, v42, v41, "Nearby - %s", v43);
      sub_10012CE88(v44, v48, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v44);
      sub_10012CE24((uint64_t)v43);
    }

    sub_10016F168();
    v49(v15);
    goto LABEL_12;
  }

  uint64_t v36 = v35;
  id v154 = v34;
  uint64_t v155 = v5;
  type metadata accessor for NWParameters(0LL);
  uint64_t v37 = (os_log_s *)sub_100173320();
  uint64_t v38 = swift_retain(v37);
  static NWEndpoint.Port.any.getter(v38);
  uint64_t v39 = type metadata accessor for NWListener(0LL);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  uint64_t v40 = NWListener.init(using:on:)(v37, v33);
  uint64_t v152 = v37;
  v0[4] = v40;
  uint64_t v153 = (os_log_s *)v40;
  swift_retain(v40);
  sub_10012CF14();
  uint64_t v50 = (void *)objc_opt_self(&OBJC_CLASS___GKDevice);
  id v51 = [v50 currentDevice];
  if (v51)
  {
    uint64_t v52 = sub_10016EE18(v51);
    if (v53)
    {
      uint64_t v54 = v53;
      uint64_t v55 = v52;
      if (sub_10016CEC8())
      {
        uint64_t v57 = NWTXTRecord.init(_:)();
        os_log_type_t v58 = static os_log_type_t.info.getter(v57);
        sub_10016F070();
        _StringGuts.grow(_:)(39LL);
        sub_10016F1F0(v59, v60);
        uint64_t v167 = 0xD000000000000025LL;
        unint64_t v168 = 0x800000010024DC00LL;
        v61._uint64_t countAndFlagsBits = v55;
        v61._object = v54;
        String.append(_:)(v61);
        uint64_t v64 = sub_1001322A0(v62, v63);
        uint64_t v65 = v167;
        unint64_t v66 = v168;
        static GKLog.match.getter(v64);
        uint64_t v67 = sub_100135A20(v66);
        uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
        if (os_log_type_enabled(v68, v58))
        {
          uint64_t v69 = (uint8_t *)sub_10012CE30(12LL);
          uint64_t v70 = sub_10012CE30(32LL);
          uint64_t v167 = v70;
          *(_DWORD *)uint64_t v69 = 136315138;
          uint64_t v151 = v69 + 4;
          swift_bridgeObjectRetain(v66);
          uint64_t v71 = sub_100135074(v65, v66, &v167);
          uint64_t v72 = sub_10016F194(v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v72, v73);
          sub_100135A44(v66);
          sub_10012CE90((void *)&_mh_execute_header, v68, v58, "Nearby - %s", v69);
          sub_10012CE88(v70, v74, (uint64_t)&type metadata for Any + 8);
          sub_10012CE24(v70);
          sub_10012CE24((uint64_t)v69);
        }

        else
        {

          sub_100135A28(v66);
        }

        uint64_t v98 = (uint64_t (*)(char *, uint64_t))*((void *)v163 + 1);
        uint64_t v99 = v29;
        uint64_t v100 = v164;
        uint64_t v101 = v98(v99, v164);
        sub_1001322A0(v101, v102);
        uint64_t v103 = v153;
        uint64_t v104 = v161;
        uint64_t v105 = v159;
        (*(void (**)(uint64_t, char *, uint64_t))(v161 + 16))(v159, v162, v155);
        uint64_t v106 = v160;
        NWListener.Service.init(name:type:domain:txtRecord:)( v154,  v36,  0x5F2E64656D61675FLL,  0xEB00000000706374LL,  0LL,  0LL,  v105);
        uint64_t v107 = type metadata accessor for NWListener.Service(0LL);
        sub_1001291F8((uint64_t)v106, 0LL, 1LL, v107);
        NWListener.service.setter(v106);
        uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 2);
        if (Strong)
        {
          uint64_t v109 = Strong;
          uint64_t v163 = (void (*)(char *, uint64_t))v98;
          uint64_t v110 = v1[3];
          static os_log_type_t.info.getter(Strong);
          sub_10016F070();
          _StringGuts.grow(_:)(43LL);
          v111._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          v111._object = (void *)0x800000010024DC70LL;
          String.append(_:)(v111);
          uint64_t v165 = (uint64_t)v1;
          sub_10016F1CC((uint64_t)&v165, (uint64_t)&v167, v157);
          v112._uint64_t countAndFlagsBits = 0x6167656C6564202CLL;
          v112._object = (void *)0xEC000000203A6574LL;
          String.append(_:)(v112);
          uint64_t v165 = v109;
          uint64_t v166 = v110;
          uint64_t v113 = sub_100129274(&qword_1002B9630);
          sub_10016F1CC((uint64_t)&v165, (uint64_t)&v167, v113);
          uint64_t v115 = v167;
          unint64_t v114 = v168;
          uint64_t v116 = v158;
          sub_10016F1BC();
          uint64_t v117 = sub_100135A20(v114);
          uint64_t v118 = (os_log_s *)sub_10016F1B4(v117);
          if (sub_10016F060(v118))
          {
            uint64_t v119 = (uint8_t *)sub_10012CE30(12LL);
            uint64_t v120 = sub_10012CE30(32LL);
            uint64_t v167 = v120;
            *(_DWORD *)uint64_t v119 = 136315138;
            swift_bridgeObjectRetain(v114);
            uint64_t v165 = sub_100135074(v115, v114, &v167);
            uint64_t v104 = v161;
            sub_100144C60((uint64_t)&v165, (uint64_t)&v166);
            sub_100135A44(v114);
            sub_10012CE90( (void *)&_mh_execute_header,  v103,  (os_log_type_t)&protocol witness table for DefaultStringInterpolation,  "Nearby - %s",  v119);
            sub_10012CE88(v120, v121, (uint64_t)&type metadata for Any + 8);
            sub_10012CE24(v120);
            sub_10012CE24((uint64_t)v119);

            v163(v116, v164);
            sub_10016F0DC();
            uint64_t v122 = v153;
          }

          else
          {

            sub_100135A28(v114);
            sub_10016F144();
            sub_10016F0DC();
            uint64_t v122 = v103;
          }

          swift_release(v122);
          uint64_t v149 = swift_unknownObjectRelease(v109);
          sub_1001322A0(v149, v150);
        }

        else
        {
          os_log_type_t v123 = static os_log_type_t.error.getter(0LL);
          uint64_t v124 = v156;
          uint64_t v125 = sub_10016F1BC();
          uint64_t v126 = (os_log_s *)sub_10016F1B4(v125);
          if (sub_10016F134(v126))
          {
            uint64_t v127 = (uint8_t *)sub_10012CE30(12LL);
            uint64_t v128 = sub_10012CE30(32LL);
            uint64_t v163 = (void (*)(char *, uint64_t))v98;
            uint64_t v129 = v128;
            uint64_t v167 = v128;
            *(_DWORD *)uint64_t v127 = 136315138;
            uint64_t v130 = sub_10016F104(0xD000000000000030LL, (uint64_t)"Cannot setup PeerListener with a valid delegate.");
            sub_10016F044(v130);
            sub_10012CE90((void *)&_mh_execute_header, v106, v123, "Nearby - %s", v127);
            sub_10012CE88(v129, v131, (uint64_t)&type metadata for Any + 8);
            sub_10012CE24(v129);
            sub_10012CE24((uint64_t)v127);

            sub_10016F144();
          }

          else
          {

            v98(v124, v100);
          }

          sub_10016F0DC();
          swift_release(v103);
        }

        (*(void (**)(char *))(v104 + 8))(v162);
      }

      else
      {
        uint64_t v84 = sub_1001322A0(0LL, v56);
        uint64_t v86 = sub_100132858(v84, v85);
        uint64_t v87 = static os_log_type_t.error.getter(v86);
        uint64_t v88 = static GKLog.match.getter(v87);
        int v89 = (os_log_s *)Logger.logObject.getter(v88);
        BOOL v90 = sub_10016F134(v89);
        uint64_t v91 = v152;
        uint64_t v92 = v153;
        if (v90)
        {
          uint64_t v93 = (uint8_t *)sub_10012CE30(12LL);
          uint64_t v94 = sub_10012CE30(32LL);
          uint64_t v167 = v94;
          *(_DWORD *)uint64_t v93 = 136315138;
          uint64_t v95 = sub_100135074(0xD000000000000028LL, 0x800000010024DBD0LL, &v167);
          sub_10016F044(v95);
          sub_10012CE90((void *)&_mh_execute_header, v37, (os_log_type_t)v87, "Nearby - %s", v93);
          sub_10012CE88(v94, v96, (uint64_t)&type metadata for Any + 8);
          sub_10012CE24(v94);
          sub_10012CE24((uint64_t)v93);
        }

        sub_10016F168();
        v97(v22);
        swift_release(v91);
        swift_release(v92);
      }
    }

    else
    {
      uint64_t v75 = sub_100132858(v52, 0LL);
      os_log_type_t v76 = static os_log_type_t.error.getter(v75);
      sub_10016F070();
      _StringGuts.grow(_:)(42LL);
      sub_10016F1F0(v77, v78);
      uint64_t v167 = 0xD000000000000028LL;
      unint64_t v168 = 0x800000010024DBA0LL;
      id v79 = [v50 currentDevice];
      if (v79)
      {
        uint64_t v165 = (uint64_t)v79;
        uint64_t v80 = sub_100129640(0LL, &qword_1002B9AB0, &OBJC_CLASS___GKDevice_ptr);
        uint64_t v81 = String.init<A>(reflecting:)(&v165, v80);
        unint64_t v83 = v82;
      }

      else
      {
        unint64_t v83 = 0xE300000000000000LL;
        uint64_t v81 = 7104878LL;
      }

      uint64_t v132 = v152;
      unint64_t v133 = v83;
      String.append(_:)(*(Swift::String *)&v81);
      sub_10012B950(v134, v135);
      uint64_t v136 = v168;
      sub_10016F1D8();
      uint64_t v137 = sub_100135A20(v136);
      uint64_t v138 = (os_log_s *)sub_10016F1C4(v137);
      os_log_type_t v139 = v76;
      if (sub_10016F080(v138))
      {
        uint64_t v140 = (uint8_t *)sub_10012CE30(12LL);
        uint64_t v141 = sub_10012CE30(32LL);
        uint64_t v167 = v141;
        *(_DWORD *)uint64_t v140 = 136315138;
        uint64_t v142 = sub_1001296D0();
        uint64_t v144 = sub_10016F0E8(v142, v143, &v167);
        sub_10016F028(v144);
        sub_100135A44(v136);
        sub_10012CE90((void *)&_mh_execute_header, v138, v139, "Nearby - %s", v140);
        sub_10012CE88(v141, v145, (uint64_t)&type metadata for Any + 8);
        sub_10012CE24(v141);
        sub_10012CE24((uint64_t)v140);
      }

      else
      {

        sub_100135A28(v136);
      }

      sub_10016F168();
      v146(v19);
      swift_release(v132);
      uint64_t v147 = swift_release(v153);
      sub_10012B950(v147, v148);
    }

uint64_t sub_10016DED8(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for NWError(0LL);
  v2[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[13] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[14] = swift_task_alloc(v5);
  v2[15] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v2[16] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[17] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[18] = swift_task_alloc(v8);
  v2[19] = swift_task_alloc(v8);
  v2[20] = swift_task_alloc(v8);
  v2[21] = swift_task_alloc(v8);
  uint64_t v9 = sub_100129274(&qword_1002B9AA0);
  v2[22] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NWListener.State(0LL);
  v2[23] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[24] = v11;
  v2[25] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10016DFE4, 0LL, 0LL);
}

uint64_t sub_10016DFE4()
{
  uint64_t v7 = *(void *)(v2 + 88);
  unint64_t v8 = *(void *)(v7 + 32);
  *(void *)(v2 + 208) = v8;
  if (!v8) {
    goto LABEL_27;
  }
  unint64_t v4 = v2 + 56;
  uint64_t v3 = (uint8_t *)(v2 + 80);
  uint64_t v5 = *(void *)(v2 + 192);
  uint64_t v0 = *(os_log_s **)(v2 + 200);
  uint64_t v1 = *(uint8_t **)(v2 + 184);
  (*(void (**)(os_log_s *, void, uint8_t *))(v5 + 16))(v0, *(void *)(v2 + 80), v1);
  uint64_t v9 = sub_10012CF08();
  int v11 = v10(v9);
  if (v11 != enum case for NWListener.State.failed(_:))
  {
    if (v11 == enum case for NWListener.State.ready(_:))
    {
      uint64_t v30 = *(void *)(v2 + 176);
      uint64_t v31 = sub_10012CF1C();
      os_log_type_t v32 = static os_log_type_t.info.getter(v31);
      _StringGuts.grow(_:)(20LL);
      uint64_t v34 = swift_bridgeObjectRelease(0xE000000000000000LL, v33);
      uint64_t v95 = 0xD000000000000012LL;
      unint64_t v96 = 0x800000010024DB10LL;
      NWListener.port.getter(v34);
      uint64_t v35 = sub_10016C734(v30);
      uint64_t v37 = v36;
      sub_10016EF70(v30);
      v38._uint64_t countAndFlagsBits = v35;
      v38._object = v37;
      String.append(_:)(v38);
      uint64_t v40 = swift_bridgeObjectRelease(v37, v39);
      unint64_t v4 = 0x800000010024DB10LL;
      static GKLog.match.getter(v40);
      uint64_t v41 = sub_100135A20(0x800000010024DB10LL);
      uint64_t v6 = (os_log_s *)Logger.logObject.getter(v41);
      BOOL v42 = os_log_type_enabled(v6, v32);
      uint64_t v0 = *(os_log_s **)(v2 + 168);
      uint64_t v1 = *(uint8_t **)(v2 + 128);
      uint64_t v5 = *(void *)(v2 + 136);
      if (v42)
      {
        uint64_t v89 = *(void *)(v2 + 136);
        uint64_t v5 = sub_10012CE30(12LL);
        uint64_t v85 = v0;
        uint64_t v0 = (os_log_s *)sub_10012CE30(32LL);
        uint64_t v95 = (uint64_t)v0;
        unint64_t v82 = v1;
        uint64_t v1 = (uint8_t *)(v2 + 72);
        *(_DWORD *)uint64_t v5 = 136315138;
        swift_bridgeObjectRetain(0x800000010024DB10LL);
        *(void *)(v2 + 7sub_100129678(v0 + 2) = sub_100135074(0xD000000000000012LL, 0x800000010024DB10LL, &v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 72, v2 + 80);
        sub_100135A44(0x800000010024DB10LL);
        sub_10012CE90((void *)&_mh_execute_header, v6, v32, "Nearby - %s", (uint8_t *)v5);
        sub_10012CE88((uint64_t)v0, v43, (uint64_t)&type metadata for Any + 8);
        sub_10012CE24((uint64_t)v0);
        sub_10012CE24(v5);

        uint64_t v44 = (*(uint64_t (**)(os_log_s *, uint8_t *))(v89 + 8))(v85, v82);
      }

      else
      {

        sub_100135A28(0x800000010024DB10LL);
        uint64_t v65 = sub_10012CF08();
        uint64_t v44 = v67(v65, v66);
      }

      sub_100132858(v44, v45);
      unint64_t v68 = v8;
    }

    else
    {
      if (v11 != enum case for NWListener.State.cancelled(_:))
      {
        (*(void (**)(void, void))(*(void *)(v2 + 192) + 8LL))( *(void *)(v2 + 200),  *(void *)(v2 + 184));
        goto LABEL_27;
      }

      uint64_t v55 = sub_10012CF1C();
      uint64_t v56 = static os_log_type_t.info.getter(v55);
      os_log_type_t v57 = v56;
      uint64_t v58 = static GKLog.match.getter(v56);
      uint64_t v0 = (os_log_s *)Logger.logObject.getter(v58);
      uint64_t v5 = v57;
      BOOL v59 = os_log_type_enabled(v0, v57);
      uint64_t v6 = *(os_log_s **)(v2 + 136);
      uint64_t v1 = *(uint8_t **)(v2 + 144);
      uint64_t v3 = *(uint8_t **)(v2 + 128);
      if (v59)
      {
        uint64_t v94 = *(void *)(v2 + 128);
        uint64_t v91 = *(void *)(v2 + 144);
        uint64_t v1 = (uint8_t *)sub_10012CE30(12LL);
        uint64_t v60 = sub_10012CE30(32LL);
        uint64_t v95 = v60;
        uint64_t v87 = v6;
        *(_DWORD *)uint64_t v1 = 136315138;
        uint64_t v6 = (os_log_s *)(v1 + 12);
        uint64_t v3 = v1 + 4;
        *(void *)(v2 + 48) = sub_100135074(0xD000000000000025LL, 0x800000010024DAC0LL, &v95);
        sub_100144C60(v2 + 48, v2 + 56);
        sub_10012CE90((void *)&_mh_execute_header, v0, (os_log_type_t)v5, "Nearby - %s", v1);
        sub_10012CE88(v60, v61, (uint64_t)&type metadata for Any + 8);
        sub_10012CE24(v60);
        sub_10012CE24((uint64_t)v1);

        (*((void (**)(uint64_t, uint64_t))v87 + 1))(v91, v94);
      }

      else
      {

        (*((void (**)(uint8_t *, uint8_t *))v6 + 1))(v1, v3);
      }

      swift_release(v8);
      unint64_t v68 = *(void *)(v7 + 32);
      *(void *)(v7 + 3sub_100129678(v0 + 2) = 0LL;
    }

    swift_release(v68);
    goto LABEL_27;
  }

  uint64_t v12 = *(void *)(v2 + 200);
  uint64_t v14 = *(_DWORD **)(v2 + 112);
  uint64_t v13 = *(void *)(v2 + 120);
  uint64_t v16 = *(void *)(v2 + 96);
  uint64_t v15 = *(void *)(v2 + 104);
  (*(void (**)(uint64_t, void))(*(void *)(v2 + 192) + 96LL))(v12, *(void *)(v2 + 184));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v13, v12, v16);
  *uint64_t v14 = -65569;
  (*(void (**)(_DWORD *, void, uint64_t))(v15 + 104))(v14, enum case for NWError.dns(_:), v16);
  sub_10012CF1C();
  LOBYTE(v1sub_100129678(v0 + 2) = static NWError.== infix(_:_:)(v13, v14);
  uint64_t v17 = *(uint64_t (**)(_DWORD *, uint64_t))(v15 + 8);
  *(void *)(v2 + 2swift_weakDestroy(v0 + 16) = v17;
  uint64_t v18 = v17(v14, v16);
  uint64_t v5 = static os_log_type_t.info.getter(v18);
  uint64_t v6 = *(os_log_s **)(v2 + 120);
  uint64_t v19 = *(void *)(v2 + 96);
  if ((v12 & 1) != 0)
  {
    unint64_t v4 = *(void *)(v2 + 160);
    uint64_t v95 = 0LL;
    unint64_t v96 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(35LL);
    *(void *)(v2 + 3sub_100129678(v0 + 2) = 0LL;
    *(void *)(v2 + 40) = 0xE000000000000000LL;
    v20._uint64_t countAndFlagsBits = sub_10016F154();
    String.append(_:)(v20);
    _print_unlocked<A, B>(_:_:)(v6, v2 + 32, v19);
    v21._uint64_t countAndFlagsBits = 0x726174736572202CLL;
    v21._object = (void *)0xEC000000676E6974LL;
    String.append(_:)(v21);
    unint64_t v8 = *(void *)(v2 + 40);
    uint64_t v92 = *(void *)(v2 + 32);
    static GKLog.match.getter(v22);
    uint64_t v23 = sub_100135A20(v8);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    BOOL v25 = sub_10016F114(v24);
    uint64_t v0 = *(os_log_s **)(v2 + 160);
    uint64_t v1 = *(uint8_t **)(v2 + 128);
    uint64_t v3 = *(uint8_t **)(v2 + 136);
    if (v25)
    {
      uint64_t v88 = *(void *)(v2 + 160);
      uint64_t v84 = *(void *)(v2 + 136);
      uint64_t v3 = (uint8_t *)sub_10012CE30(12LL);
      unint64_t v4 = v2 + 72;
      uint64_t v26 = sub_10012CE30(32LL);
      uint64_t v95 = v26;
      uint64_t v81 = v1;
      uint64_t v1 = (uint8_t *)(v2 + 64);
      *(_DWORD *)uint64_t v3 = 136315138;
      uint64_t v0 = (os_log_s *)(v3 + 4);
      sub_1001296D0();
      *(void *)(v2 + 64) = sub_100135074(v92, v8, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 64, v2 + 72);
      sub_100135A44(v8);
      sub_10012CE90((void *)&_mh_execute_header, v6, (os_log_type_t)v5, "Nearby - %s", v3);
      sub_10012CE88(v26, v27, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24(v26);
      sub_10012CE24((uint64_t)v3);

      uint64_t v28 = (*(uint64_t (**)(uint64_t, uint8_t *))(v84 + 8))(v88, v81);
    }

    else
    {

      sub_100135A28(v8);
      uint64_t v62 = sub_10012CF08();
      uint64_t v28 = v64(v62, v63);
    }

    sub_10012B950(v28, v29);
    sub_10016F1E0();
    sub_10016D328();
    sub_10016C878();
  }

  else
  {
    uint64_t v93 = (uint64_t *)(v2 + 56);
    uint64_t v95 = 0LL;
    unint64_t v96 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(33LL);
    *(void *)(v2 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(v2 + 24) = 0xE000000000000000LL;
    v46._uint64_t countAndFlagsBits = sub_10016F154();
    String.append(_:)(v46);
    _print_unlocked<A, B>(_:_:)(v6, v2 + 16, v19);
    v47._uint64_t countAndFlagsBits = 0x6970706F7473202CLL;
    v47._object = (void *)0xEA0000000000676ELL;
    String.append(_:)(v47);
    unint64_t v4 = *(void *)(v2 + 16);
    unint64_t v8 = *(void *)(v2 + 24);
    sub_10016F1E8();
    sub_100135A20(v8);
    uint64_t v48 = (os_log_s *)sub_100144FF8();
    BOOL v49 = sub_10016F114(v48);
    uint64_t v0 = *(os_log_s **)(v2 + 152);
    uint64_t v1 = *(uint8_t **)(v2 + 128);
    uint64_t v3 = *(uint8_t **)(v2 + 136);
    if (v49)
    {
      uint64_t v90 = *(void *)(v2 + 128);
      uint64_t v86 = *(void *)(v2 + 152);
      uint64_t v0 = (os_log_s *)sub_10012CE30(12LL);
      unint64_t v83 = v3;
      uint64_t v3 = (uint8_t *)sub_10012CE30(32LL);
      uint64_t v95 = (uint64_t)v3;
      *(_DWORD *)uint64_t v0 = 136315138;
      uint64_t v1 = (uint8_t *)v0 + 4;
      uint64_t v50 = sub_1001296D0();
      *uint64_t v93 = sub_10016F0E8(v50, v51, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v93, v2 + 64);
      sub_100135A44(v8);
      sub_10012CE90((void *)&_mh_execute_header, v6, (os_log_type_t)v5, "Nearby - %s", (uint8_t *)v0);
      sub_10012CE88((uint64_t)v3, v52, (uint64_t)&type metadata for Any + 8);
      sub_10012CE24((uint64_t)v3);
      sub_10012CE24((uint64_t)v0);

      uint64_t v53 = (*((uint64_t (**)(uint64_t, uint64_t))v83 + 1))(v86, v90);
    }

    else
    {

      sub_100135A28(v8);
      uint64_t v69 = sub_10012CF08();
      uint64_t v53 = v71(v69, v70);
    }

    sub_10012B950(v53, v54);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(*(void *)(v2 + 88) + 16LL);
    *(void *)(v2 + 224) = Strong;
    if (Strong)
    {
      uint64_t v73 = *(void *)(v2 + 120);
      uint64_t v74 = *(void *)(v2 + 96);
      uint64_t v75 = *(void *)(v2 + 104);
      unint64_t v76 = sub_10012CDE0();
      uint64_t v77 = swift_allocError(v74, v76, 0LL, 0LL);
      *(void *)(v2 + 23sub_100129678(v0 + 2) = v77;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v78, v73, v74);
      id v79 = (void *)swift_task_alloc(dword_1002B8624);
      *(void *)(v2 + 240) = v79;
      *id v79 = v2;
      v79[1] = sub_10016E864;
      return sub_100140BD8(v77);
    }

    sub_10016F1E0();
  }

  sub_10016F0F4();
  sub_10012CF40();
LABEL_27:
  sub_10016F0B0();
  swift_task_dealloc(v0);
  swift_task_dealloc(v8);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10016E864()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  sub_10012CE48();
  swift_unknownObjectRelease(v2);
  swift_errorRelease(v1);
  return swift_task_switch(sub_10016E8B8, 0LL, 0LL);
}

uint64_t sub_10016E8B8()
{
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10016E940(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWListener.State(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v7);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a2 += 16LL;
  swift_beginAccess(a2, v18, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = type metadata accessor for TaskPriority(0LL);
    sub_1001291F8((uint64_t)v9, 1LL, 1LL, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(&v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8], a1, v4);
    uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v14 = (v13 + 40) & ~v13;
    uint64_t v15 = (char *)swift_allocObject(&unk_1002758B0, v14 + v6, v13 | 7);
    *((void *)v15 + sub_100129678(v0 + 2) = 0LL;
    *((void *)v15 + 3) = 0LL;
    *((void *)v15 + 4) = v11;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))( &v15[v14],  &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8],  v4);
    sub_100185858();
    return swift_release(v16);
  }

  return result;
}

uint64_t sub_10016EAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_1002B9A9C);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10016240C;
  return sub_10016DED8(a5);
}

uint64_t sub_10016EAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v4);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a2 += 16LL;
  swift_beginAccess(a2, v13, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = type metadata accessor for TaskPriority(0LL);
    sub_1001291F8((uint64_t)v6, 1LL, 1LL, v9);
    uint64_t v10 = (void *)swift_allocObject(&unk_100275888, 48LL, 7LL);
    void v10[2] = 0LL;
    v10[3] = 0LL;
    void v10[4] = v8;
    v10[5] = a1;
    swift_retain(a1);
    sub_100185924();
    return swift_release(v11);
  }

  return result;
}

uint64_t sub_10016EBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch(sub_10016EBFC, 0LL, 0LL);
}

uint64_t sub_10016EBFC()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(*(void *)(v0 + 24) + 16LL);
  *(void *)(v0 + 40) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc(dword_1002B85D4);
    *(void *)(v0 + 48) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10016EC78;
    return sub_100140F78(*(void *)(v0 + 32));
  }

  else
  {
    **(_BYTE **)(v0 + swift_weakDestroy(v0 + 16) = 1;
    return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10016EC78()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_10012CE48();
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_10016ECC0, 0LL, 0LL);
}

uint64_t sub_10016ECC0()
{
  **(_BYTE **)(v0 + swift_weakDestroy(v0 + 16) = *(void *)(v0 + 40) == 0LL;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_10016ECDC()
{
  return v0;
}

uint64_t sub_10016ED14()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t type metadata accessor for PeerListener()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCore12PeerListener);
}

uint64_t sub_10016ED54()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10016ED78(uint64_t a1)
{
  return sub_10016E940(a1, v1);
}

uint64_t sub_10016ED80(uint64_t a1)
{
  return sub_10016EAF4(a1, v1);
}

uint64_t sub_10016ED88()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10016EDB8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B9A74);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_10016F090(v1);
  return sub_10016EBE0(v2, v3, v4, v5, v6);
}

uint64_t sub_10016EE18(void *a1)
{
  id v2 = [a1 udid];

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  return sub_10012CF08();
}

uint64_t sub_10016EE80()
{
  uint64_t v1 = type metadata accessor for NWListener.State(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  sub_10012CF24();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v6 = sub_10012CF08();
  return swift_deallocObject(v6, v7, v5);
}

uint64_t sub_10016EEF4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B9A8C);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_10016F090(v1);
  return sub_10016EAA0(v2, v3, v4, v5, v6);
}

uint64_t sub_10016EF70(uint64_t a1)
{
  uint64_t v2 = sub_100129274(&qword_1002B9AA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10016EFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B9AA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016EFF8()
{
  return swift_beginAccess(v0, v1 - 120, 32LL, 0LL);
}

uint64_t sub_10016F00C(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 96, v1 - 88);
}

uint64_t sub_10016F028(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 160, v1 - 152);
}

uint64_t sub_10016F044(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 160, v1 - 152);
}

BOOL sub_10016F060(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_10016F070()
{
  *(void *)(v0 - 11sub_100129678(v0 + 2) = 0LL;
  *(void *)(v0 - 104) = 0xE000000000000000LL;
}

BOOL sub_10016F080(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10016F088()
{
  return swift_endAccess(v0 - 120);
}

uint64_t sub_10016F090(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10016F0B0()
{
  return swift_task_dealloc(*(void *)(v0 + 200));
}

void sub_10016F0C8(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v1);
}

uint64_t sub_10016F0DC()
{
  return swift_release(*(void *)(v0 - 264));
}

uint64_t sub_10016F0E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100135074(v4, v3, a3);
}

uint64_t sub_10016F0F4()
{
  return swift_release(*(void *)(v0 + 208));
}

uint64_t sub_10016F104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100135074(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)(v2 - 112));
}

BOOL sub_10016F114(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10016F124()
{
  return swift_allocObject(v0, 24LL, 7LL);
}

BOOL sub_10016F134(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10016F144()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 176))(v1, v0);
}

unint64_t sub_10016F154()
{
  return 0xD000000000000015LL;
}

  ;
}

uint64_t sub_10016F174(uint64_t a1)
{
  *(void *)(v1 - 11sub_100129678(v0 + 2) = a1;
  return v1 - 112;
}

uint64_t sub_10016F188(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_10016F194(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return v1 - 160;
}

  ;
}

uint64_t sub_10016F1B4(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

uint64_t sub_10016F1BC()
{
  return static GKLog.match.getter();
}

uint64_t sub_10016F1C4(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

uint64_t sub_10016F1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _print_unlocked<A, B>(_:_:)(a1, a2, a3);
}

uint64_t sub_10016F1D8()
{
  return static GKLog.match.getter();
}

void sub_10016F1E0()
{
}

uint64_t sub_10016F1E8()
{
  return static GKLog.match.getter();
}

uint64_t sub_10016F1F0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(*(void *)(v2 - 104), a2);
}

uint64_t sub_10016F1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _print_unlocked<A, B>(_:_:)(a1, a2, a3);
}

uint64_t sub_10016F204(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_10016F210(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 4Hasher.init(_seed:)(v2, 0LL) = a2;
  return swift_continuation_resume();
}

uint64_t sub_10016F220(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  sub_10017174C((uint64_t)&v4, *(void *)(*(void *)(a1 + 64) + 40LL));
  return swift_continuation_resume(a1);
}

uint64_t sub_10016F260(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 112);
  *(void *)(v1 + 11sub_100129678(v0 + 2) = a1;
  return swift_release(v2);
}

id sub_10016F270(uint64_t a1)
{
  v1[14] = 0LL;
  v1[15] = a1;
  v4.receiver = v1;
  v4.Class super_class = (Class)type metadata accessor for FairPlaySessionProvider();
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t sub_10016F2DC(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = sub_100129274(&qword_1002B8238);
  v3[7] = sub_100171990(v4);
  return sub_100144664((uint64_t)sub_10016F324, v2, 0LL);
}

uint64_t sub_10016F324()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = *(void *)(v1 + 112);
  v0[8] = v2;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)&async function pointer to Task.value.getter + 1);
    swift_retain(v2);
    uint64_t v4 = (void *)swift_task_alloc(v3);
    v0[9] = v4;
    unint64_t v5 = sub_1001715E0();
    uint64_t v6 = sub_100129274(&qword_1002B83B8);
    *uint64_t v4 = v0;
    v4[1] = sub_10016F554;
    uint64_t v7 = v0 + 3;
    uint64_t v8 = v2;
  }

  else
  {
    uint64_t v9 = v0[7];
    uint64_t v28 = v9;
    uint64_t v10 = (void *)v0[4];
    uint64_t v29 = (void *)v0[5];
    uint64_t v11 = sub_100158FCC();
    v0[11] = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    v0[12] = v12;
    uint64_t v13 = *(void *)(v12 + 64);
    uint64_t v14 = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    v0[13] = v14;
    Date.init()(v14);
    uint64_t v15 = type metadata accessor for TaskPriority(0LL);
    sub_1001291F8(v9, 1LL, 1LL, v15);
    uint64_t v16 = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v16, v14, v11);
    unint64_t v17 = sub_100171454();
    uint64_t v18 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v19 = (v18 + 48) & ~v18;
    unint64_t v20 = (v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    Swift::String v21 = (char *)swift_allocObject(&unk_1002758D8, v20 + 8, v18 | 7);
    *((void *)v21 + sub_100129678(v0 + 2) = v1;
    *((void *)v21 + 3) = v17;
    *((void *)v21 + 4) = v10;
    *((void *)v21 + 5) = v1;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(&v21[v19], v16, v11);
    *(void *)&v21[v20] = v29;
    sub_100144AFC();
    swift_retain_n(v1, 2LL);
    id v22 = v10;
    id v23 = v29;
    uint64_t v24 = sub_100170664(v28, (uint64_t)&unk_1002B9B18, (uint64_t)v21);
    v0[14] = v24;
    uint64_t v25 = swift_retain(v24);
    sub_10016F260(v25);
    uint64_t v26 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to Task.value.getter + 1));
    v0[15] = v26;
    unint64_t v5 = sub_1001715E0();
    uint64_t v6 = sub_100129274(&qword_1002B83B8);
    *uint64_t v26 = v0;
    v26[1] = sub_10016F5E8;
    uint64_t v7 = v0 + 2;
    uint64_t v8 = v24;
  }

  return Task.value.getter(v7, v8, v5, v6, &protocol self-conformance witness table for Error);
}

uint64_t sub_10016F554()
{
  *(void *)(v0 + 80) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_10016F688;
  }
  else {
    uint64_t v4 = sub_10016F5A8;
  }
  return sub_100158B10((uint64_t)v4, *(void *)(v0 + 48), 0LL);
}

uint64_t sub_10016F5A8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_100171A78();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10016F5E8()
{
  *(void *)(v0 + 128) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    uint64_t v4 = sub_10016F6C0;
  }
  else {
    uint64_t v4 = sub_10016F63C;
  }
  return sub_100158B10((uint64_t)v4, *(void *)(v0 + 48), 0LL);
}

uint64_t sub_10016F63C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1001324F4();
  sub_100171A78();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10016F688()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016F6C0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016F704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[46] = a6;
  v7[47] = a7;
  v7[44] = a4;
  v7[45] = a5;
  v7[43] = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[48] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[49] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[50] = swift_task_alloc(v10);
  v7[51] = swift_task_alloc(v10);
  v7[52] = swift_task_alloc(v10);
  uint64_t v11 = (void *)swift_task_alloc(dword_1002B9B2C);
  v7[53] = v11;
  *uint64_t v11 = v7;
  v11[1] = sub_10016F7D8;
  return sub_100170390((uint64_t)(v7 + 2));
}

uint64_t sub_10016F7D8()
{
  v0[54] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_10017024C, v0[45], 0LL);
  }
  uint64_t v6 = (void *)swift_task_alloc(dword_1002B9AEC);
  v0[55] = (uint64_t)v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10016F8B0;
  return sub_100170968((uint64_t)(v0 + 2), v0[44]);
}

uint64_t sub_10016F8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 440);
  *(void *)(v4 + 448) = a1;
  *(void *)(v4 + 456) = a2;
  *(void *)(v4 + 464) = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    uint64_t v7 = *(void *)(v4 + 360);
    *(_OWORD *)(v4 + 23sub_100129678(v0 + 2) = *(_OWORD *)(v4 + 16);
    sub_10013A2B0(v4 + 232, v6);
    *(_OWORD *)(v4 + 296) = *(_OWORD *)(v4 + 32);
    sub_10013A2B0(v4 + 296, v8);
    *(_OWORD *)(v4 + 280) = *(_OWORD *)(v4 + 48);
    sub_10013A2B0(v4 + 280, v9);
    unint64_t v10 = sub_1001702B0;
    uint64_t v11 = v7;
  }

  else
  {
    uint64_t v11 = *(void *)(v4 + 360);
    unint64_t v10 = sub_10016F9A4;
  }

  return sub_1001719D4((uint64_t)v10, v11, 0LL);
}

uint64_t sub_10016F9A4()
{
  uint64_t v2 = *(void *)(v0 + 448);
  uint64_t v1 = *(void *)(v0 + 456);
  id v3 = [objc_allocWithZone((Class)GKFairPlaySAPSession) init];
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  *(void *)(v0 + 47sub_100129678(v0 + 2) = v3;
  *(void *)(v0 + 480) = v4;
  swift_bridgeObjectRetain(v4);
  sub_10017161C(v5, v4, v3);
  sub_1001322A0(v6, v7);
  *(void *)(v0 + 320) = 0LL;
  id v8 = sub_100171660(v2, v1, v0 + 320, v3, (SEL *)&selRef_exchangeData_error_);
  uint64_t v9 = *(void **)(v0 + 320);
  if (v8)
  {
    unint64_t v10 = v8;
    uint64_t v11 = *(os_log_s **)(v0 + 416);
    id v12 = v9;
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v15 = v14;
    *(void *)(v0 + 488) = v13;
    *(void *)(v0 + 496) = v14;

    uint64_t v17 = static GKLog.daemon.getter(v16);
    Logger.logObject.getter(v17);
    os_log_type_t v18 = sub_100148620();
    if (os_log_type_enabled(v11, v18))
    {
      uint64_t v19 = (uint8_t *)sub_10012CE30(2LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v18, "MESCAL:did exchange initialize cert data", v19, 2u);
      sub_10012CE24((uint64_t)v19);
    }

    uint64_t v20 = *(void *)(v0 + 416);
    uint64_t v21 = *(void *)(v0 + 384);
    uint64_t v22 = *(void *)(v0 + 392);

    id v23 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    *(void *)(v0 + 504) = v23;
    v23(v20, v21);
    uint64_t v24 = (void *)swift_task_alloc(dword_1002B9AF4);
    *(void *)(v0 + 51sub_100129678(v0 + 2) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_10016FBE8;
    return sub_100170C9C(v0 + 16, *(void *)(v0 + 352), v13, v15);
  }

  else
  {
    id v26 = v9;
    sub_1001322A0((uint64_t)v26, v27);
    *(_OWORD *)(v0 + 136) = *(_OWORD *)(v0 + 32);
    sub_10013A2B0(v0 + 136, v28);
    *(_OWORD *)(v0 + 15sub_100129678(v0 + 2) = *(_OWORD *)(v0 + 48);
    sub_10013A2B0(v0 + 152, v29);
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v30);
    sub_100171A54();

    sub_10017196C();
    sub_100144838();
    sub_100144AFC();
    sub_100145104();
    uint64_t v31 = (uint64_t (*)(void))sub_100171AC8();
    return sub_1001719A4(v31);
  }

uint64_t sub_10016FBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 512);
  *(void *)(v4 + 520) = a1;
  *(void *)(v4 + 528) = a2;
  *(void *)(v4 + 536) = v2;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 360);
  swift_bridgeObjectRelease(*(void *)(v4 + 480), v7);
  uint64_t v9 = (_OWORD *)(v4 + 32);
  unint64_t v10 = (_OWORD *)(v4 + 48);
  if (v2)
  {
    *(_OWORD *)(v4 + 168) = *v9;
    sub_10013A2B0(v4 + 168, v8);
    *(_OWORD *)(v4 + 184) = *v10;
    sub_10013A2B0(v4 + 184, v11);
    id v12 = sub_100170314;
  }

  else
  {
    *(_OWORD *)(v4 + 200) = *v9;
    sub_10013A2B0(v4 + 200, v8);
    *(_OWORD *)(v4 + 2swift_weakDestroy(v0 + 16) = *v10;
    sub_10013A2B0(v4 + 216, v13);
    id v12 = sub_10016FCFC;
  }

  return sub_1001719D4((uint64_t)v12, v6, 0LL);
}

uint64_t sub_10016FCFC()
{
  uint64_t v1 = *(void *)(v0 + 528);
  uint64_t v2 = *(void *)(v0 + 520);
  id v3 = (void *)objc_opt_self(&OBJC_CLASS___NSDictionary);
  *(void *)(v0 + 31sub_100129678(v0 + 2) = 0LL;
  id v4 = sub_100171660(v2, v1, v0 + 312, v3, (SEL *)&selRef__gkDictionaryWithServerData_error_);
  uint64_t v5 = *(void **)(v0 + 312);
  if (!v4)
  {
    uint64_t v58 = *(void *)(v0 + 488);
    unint64_t v106 = *(void *)(v0 + 496);
    BOOL v59 = *(void **)(v0 + 472);
    id v60 = v5;
    _convertNSErrorToError(_:)(v5);
    sub_100171AE0();
    sub_100171A80();
    sub_1001719E8();
    uint64_t v61 = sub_100171ABC();
    sub_100135158(v61, v62);

    uint64_t v63 = v58;
    unint64_t v64 = v106;
LABEL_14:
    sub_100135158(v63, v64);
    sub_10016F260(0LL);
    sub_100171A80();
    sub_1001446D0();
    sub_100144838();
    sub_100145104();
    uint64_t v73 = *(uint64_t (**)(void))(v0 + 8);
    return v73();
  }

  uint64_t v6 = v4;
  uint64_t v7 = *(os_log_s **)(v0 + 408);
  uint64_t v8 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  id v9 = v5;

  uint64_t v11 = static GKLog.daemon.getter(v10);
  id v12 = v7;
  Logger.logObject.getter(v11);
  os_log_type_t v13 = sub_100148620();
  if (os_log_type_enabled(v7, v13))
  {
    uint64_t v14 = (uint8_t *)sub_10012CE30(2LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "MESCAL:got the setup data from the server", v14, 2u);
    sub_10012CE24((uint64_t)v14);
  }

  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
  uint64_t v16 = *(void *)(v0 + 408);
  uint64_t v17 = *(void *)(v0 + 384);

  v15(v16, v17);
  *(void *)(v0 + 264) = 0xD000000000000010LL;
  *(void *)(v0 + 27sub_100129678(v0 + 2) = 0x800000010024DD20LL;
  AnyHashable.init<A>(_:)(v0 + 264);
  sub_10012CFE4((uint64_t)v8, (_OWORD *)(v0 + 104));
  swift_bridgeObjectRelease(v8, v18);
  sub_10012A92C(v0 + 64);
  if (!*(void *)(v0 + 128))
  {
    sub_10013519C(v0 + 104, &qword_1002B8E90);
    goto LABEL_13;
  }

  if ((swift_dynamicCast(v0 + 248, v0 + 104, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_13:
    uint64_t v66 = *(void *)(v0 + 488);
    unint64_t v65 = *(void *)(v0 + 496);
    uint64_t v67 = *(void **)(v0 + 472);
    uint64_t v69 = *(void *)(v0 + 448);
    unint64_t v68 = *(void *)(v0 + 456);
    unint64_t v70 = sub_100171418();
    uint64_t v71 = sub_100158C54((uint64_t)&type metadata for FairPlaySessionError, v70);
    sub_100171A04(v71, v72);
    sub_100171AB0();
    sub_100135158(v66, v65);

    uint64_t v63 = v69;
    unint64_t v64 = v68;
    goto LABEL_14;
  }

  uint64_t v19 = Data.init(base64Encoded:options:)(*(void *)(v0 + 248), *(void *)(v0 + 256), 0LL);
  unint64_t v21 = v20;
  sub_1001322A0(v19, v20);
  Class isa = 0LL;
  if (v21 >> 60 != 15)
  {
    uint64_t v23 = sub_100171ABC();
    sub_10013593C(v23, v24);
    sub_100171ABC();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v25 = sub_100171ABC();
    sub_100135144(v25, v26);
  }

  uint64_t v105 = v19;
  uint64_t v27 = *(void **)(v0 + 472);
  *(void *)(v0 + 328) = 0LL;
  id v28 = [v27 exchangeData:isa error:v0 + 328];
  sub_100171AE0();
  id v29 = *(id *)(v0 + 328);
  if (!v8)
  {
    unint64_t v75 = *(void *)(v0 + 528);
    uint64_t v76 = *(void *)(v0 + 520);
    uint64_t v77 = *(void *)(v0 + 488);
    uint64_t v103 = *(void *)(v0 + 496);
    uint64_t v78 = *(void **)(v0 + 472);
    _convertNSErrorToError(_:)(v29);
    sub_100171AE0();
    sub_100171A80();
    sub_1001719E8();
    sub_100135158(v76, v75);

    sub_100171A28(v79, v80, v81, v82, v83, v84, v85, v86, v98, v99, v103, v105);
    uint64_t v63 = v77;
    unint64_t v64 = v104;
    goto LABEL_14;
  }

  uint64_t v30 = *(os_log_s **)(v0 + 400);
  uint64_t v31 = *(void **)(v0 + 376);
  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
  sub_100135158(v32, v33);

  double v34 = Date.timeIntervalSinceNow.getter();
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterDomainPlayerAuthentication);
  uint64_t v37 = v36;
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterPlayerAuthenticationDRMResponseTime);
  uint64_t v40 = v39;
  Class v41 = Date._bridgeToObjectiveC()().super.isa;
  sub_1001716BC(v35, v37, v38, v40, (uint64_t)v41, v31);

  uint64_t v43 = static GKLog.daemon.getter(v42);
  uint64_t v44 = v30;
  Logger.logObject.getter(v43);
  os_log_type_t v45 = sub_100148620();
  BOOL v46 = os_log_type_enabled(v30, v45);
  uint64_t v48 = *(void *)(v0 + 448);
  unint64_t v47 = *(void *)(v0 + 456);
  if (v46)
  {
    unint64_t v102 = *(void *)(v0 + 456);
    uint64_t v100 = *(void *)(v0 + 448);
    BOOL v49 = (uint8_t *)sub_10012CE30(12LL);
    *(_DWORD *)BOOL v49 = 134217984;
    *(double *)(v0 + 336) = -v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344);
    _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "MESCAL:did finish exchanging cert data after %f seconds",  v49,  0xCu);
    sub_10012CE24((uint64_t)v49);
    sub_1001719E8();
    sub_100171A54();
    sub_100135158(v100, v102);

    sub_100171A28(v50, v51, v52, v53, v54, v55, v56, v57, v98, v100, v102, v105);
  }

  else
  {
    sub_1001719E8();
    sub_100171A54();
    uint64_t v87 = sub_100135158(v48, v47);
    sub_100171A28(v87, v88, v89, v90, v91, v92, v93, v94, v98, v99, v101, v105);
  }

  uint64_t v95 = *(void *)(v0 + 472);
  uint64_t v96 = *(void *)(v0 + 400);
  uint64_t v97 = *(void **)(v0 + 344);
  (*(void (**)(uint64_t, void))(v0 + 504))(v96, *(void *)(v0 + 384));
  *uint64_t v97 = v95;
  sub_1001324F4();
  sub_1001446D0();
  swift_task_dealloc(v96);
  uint64_t v73 = *(uint64_t (**)(void))(v0 + 8);
  return v73();
}

uint64_t sub_10017024C()
{
  uint64_t v0 = (uint64_t (*)(void))sub_100171AC8();
  return sub_100171954(v0);
}

uint64_t sub_1001702B0()
{
  uint64_t v0 = (uint64_t (*)(void))sub_100171AC8();
  return sub_100171954(v0);
}

uint64_t sub_100170314()
{
  uint64_t v1 = (void *)v0[59];
  sub_100135158(v0[61], v0[62]);

  sub_100171AB0();
  sub_10017196C();
  sub_100144838();
  sub_100144AFC();
  sub_100145104();
  uint64_t v2 = (uint64_t (*)(void))sub_100171AC8();
  return sub_100171954(v2);
}

uint64_t sub_100170390(uint64_t a1)
{
  *(void *)(v2 + 168) = a1;
  *(void *)(v2 + 176) = v1;
  return sub_10014C550((uint64_t)sub_1001703A4, 0LL);
}

uint64_t sub_1001703A4()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = (void *)v0[22];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_100170438;
  uint64_t v3 = swift_continuation_init(v0 + 2, 0LL);
  v0[10] = _NSConcreteStackBlock;
  id v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  uint64_t v4[2] = sub_100171310;
  v4[3] = &unk_1002758F0;
  v4[4] = v3;
  [v2 getValuesWithCompletion:v4];
  return swift_continuation_await(v1);
}

uint64_t sub_100170438()
{
  return sub_100144664((uint64_t)sub_10017047C, 0LL, 0LL);
}

uint64_t sub_10017047C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  if (!v1) {
    goto LABEL_13;
  }
  strcpy((char *)(v0 + 152), "gk-sap-version");
  *(_BYTE *)(v0 + 167) = -18;
  sub_100171A48();
  sub_1001719F4();
  uint64_t v2 = sub_100148654();
  if (!*(void *)(v0 + 144)) {
    goto LABEL_9;
  }
  if ((sub_1001719C0(v2, v3, v4, (uint64_t)&type metadata for Int) & 1) == 0)
  {
LABEL_11:
    uint64_t v21 = v1;
LABEL_12:
    swift_bridgeObjectRelease(v21, v5);
    goto LABEL_13;
  }

  uint64_t v6 = *(void *)(v0 + 152);
  *(void *)(v0 + 15sub_100129678(v0 + 2) = 0xD000000000000015LL;
  *(void *)(v0 + 160) = 0x800000010024DD40LL;
  sub_100171A48();
  sub_1001719F4();
  uint64_t v7 = sub_100148654();
  if (!*(void *)(v0 + 144))
  {
LABEL_9:
    uint64_t v19 = v1;
    goto LABEL_10;
  }

  uint64_t v10 = *(void *)(v0 + 152);
  uint64_t v9 = *(void *)(v0 + 160);
  strcpy((char *)(v0 + 152), "gk-sap-setup");
  *(_BYTE *)(v0 + 165) = 0;
  *(_WORD *)(v0 + 166) = -5120;
  sub_100171A48();
  sub_1001719F4();
  swift_bridgeObjectRelease(v1, v11);
  uint64_t v12 = sub_100148654();
  if (*(void *)(v0 + 144))
  {
    if ((sub_1001719C0(v12, v3, v13, (uint64_t)&type metadata for String) & 1) != 0)
    {
      uint64_t v15 = *(void *)(v0 + 160);
      uint64_t v14 = *(void **)(v0 + 168);
      uint64_t v16 = *(void *)(v0 + 152);
      *(void *)(v0 + 80) = v6;
      *uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      v14[1] = v17;
      v14[2] = v10;
      void v14[3] = v9;
      void v14[4] = v16;
      v14[5] = v15;
      return sub_1001719A4(*(uint64_t (**)(void))(v0 + 8));
    }

    uint64_t v21 = v9;
    goto LABEL_12;
  }

  uint64_t v19 = v9;
LABEL_10:
  uint64_t v20 = swift_bridgeObjectRelease(v19, v3);
  sub_100171AA8(v20, &qword_1002B8E90);
LABEL_13:
  unint64_t v22 = sub_100171418();
  uint64_t v23 = sub_100158C54((uint64_t)&type metadata for FairPlaySessionError, v22);
  *unint64_t v24 = 0;
  swift_willThrow(v23);
  return sub_1001719A4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100170664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = sub_10012B4E8(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_10013519C(a1, &qword_1002B8238);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  unint64_t v16 = sub_1001715E0();
  if (v15 | v13)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    v19[2] = v13;
    v19[3] = v15;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, v16, a2, a3);
}

uint64_t sub_100170808(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[3] = a2;
  v4[4] = a4;
  uint64_t v4[2] = a1;
  void v4[5] = _Block_copy(aBlock);
  uint64_t v8 = dword_1002B9AE4;
  id v9 = a1;
  id v10 = a2;
  swift_retain(a4);
  uint64_t v11 = (void *)swift_task_alloc(v8);
  void v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_100170898;
  return sub_10016F2DC((uint64_t)v9, (uint64_t)v10);
}

uint64_t sub_100170898(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void **)v2;
  uint64_t v13 = v5;
  uint64_t v7 = (void *)v5[3];
  uint64_t v6 = v5[4];
  uint64_t v8 = (void *)v5[2];
  sub_100132600(&v13);
  swift_task_dealloc(v9);

  swift_release(v6);
  id v10 = (void (**)(void, void, void))v5[5];
  if (v3)
  {
    uint64_t v11 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v10)[2](v10, 0LL, v11);

    _Block_release(v10);
  }

  else
  {
    ((void (**)(void, void *, void))v10)[2](v5[5], a1, 0LL);
    _Block_release(v10);
  }

  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100170968(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_10014C550((uint64_t)sub_100170980, v2);
}

uint64_t sub_100170980()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for URLRequest(0LL);
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  *(void *)(v0 + 48) = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v5 = swift_task_alloc(v4);
  *(void *)(v0 + 56) = v5;
  uint64_t v6 = sub_100129274(&qword_1002B9D00);
  uint64_t v7 = sub_100171990(v6);
  URL.init(string:)(*(void *)(v1 + 16));
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = sub_100171A9C();
  uint64_t v12 = 0LL;
  if (sub_10012B4E8(v9, v10, v8) != 1)
  {
    URL._bridgeToObjectiveC()(v11);
    uint64_t v12 = v13;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  }

  uint64_t v14 = *(void **)(v0 + 24);
  sub_1001324F4();
  LOWORD(v29) = 0;
  id v15 =  objc_msgSend( v14,  "requestWithURL:playerID:authToken:pushToken:client:postData:includeUDID:includeAPNS:sapSession:",  v12,  0,  0,  0,  0,  0,  v29,  0);

  uint64_t v16 = sub_100129274(&qword_1002B9AF8);
  uint64_t v17 = sub_100171990(v16);
  uint64_t v18 = v17;
  if (v15)
  {
    uint64_t v19 = swift_task_alloc(v4);
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v15);

    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v20(v18, v19, v2);
    sub_1001659B0(v18, 0LL);
    sub_100144838();
    uint64_t v21 = sub_100171A9C();
    uint64_t v23 = sub_10012B4E8(v21, v22, v2);
    if ((_DWORD)v23 != 1)
    {
      v20(v5, v18, v2);
      sub_1001324F4();
      unint64_t v24 = (void *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
      *(void *)(v0 + 64) = v24;
      *unint64_t v24 = v0;
      v24[1] = sub_100170BAC;
      return NSURLSession.data(for:delegate:)(v5, 0LL);
    }
  }

  else
  {
    uint64_t v23 = sub_1001659B0(v17, 1LL);
  }

  sub_100171AA8(v23, &qword_1002B9AF8);
  sub_1001324F4();
  sub_1001446D0();
  unint64_t v26 = sub_100171418();
  uint64_t v27 = sub_100158C54((uint64_t)&type metadata for FairPlaySessionError, v26);
  sub_100171A04(v27, v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100170BAC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = (void *)*v4;
  uint64_t v8 = v13;
  sub_100132600(&v13);
  void v8[9] = v3;
  swift_task_dealloc(v9);
  uint64_t v10 = v8[4];
  if (v3)
  {
    uint64_t v11 = sub_100170C68;
  }

  else
  {

    v8[10] = a2;
    v8[11] = a1;
    uint64_t v11 = sub_100170C30;
  }

  return sub_100158B10((uint64_t)v11, v10, 0LL);
}

uint64_t sub_100170C30()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 88), *(void *)(v0 + 80));
}

uint64_t sub_100170C68()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100170C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  return sub_100144664((uint64_t)sub_100170D00, v4, 0LL);
}

uint64_t sub_100170D00()
{
  uint64_t v1 = *(void **)(v0 + 120);
  uint64_t v2 = sub_100129274(&qword_1002B9A80);
  uint64_t inited = swift_initStackObject(v2, v0 + 16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1001F4D70;
  *(void *)(inited + 3sub_100129678(v0 + 2) = 0x737265762D706173LL;
  *(void *)(inited + 40) = 0xEB000000006E6F69LL;
  uint64_t v4 = v1[1];
  *(void *)(inited + 48) = *v1;
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 64) = 0xD000000000000010LL;
  *(void *)(inited + 7sub_100129678(v0 + 2) = 0x800000010024DD20LL;
  swift_bridgeObjectRetain(v4);
  *(Swift::String *)(inited + 80) = Data.base64EncodedString(options:)(0LL);
  uint64_t v5 = sub_100171A88();
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)(v5, v6, v7, v8);
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  sub_100171A88();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9, v12);
  *(void *)(v0 + 11sub_100129678(v0 + 2) = 0LL;
  id v13 = [v10 dataWithPropertyList:isa format:100 options:0 error:v0 + 112];

  id v14 = *(id *)(v0 + 112);
  if (v13)
  {
    uint64_t v15 = *(void *)(v0 + 120);
    uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    unint64_t v18 = v17;

    *(void *)(v0 + 160) = v16;
    *(void *)(v0 + 168) = v18;
    uint64_t v19 = type metadata accessor for URLRequest(0LL);
    *(void *)(v0 + 176) = v19;
    uint64_t v20 = *(void *)(v19 - 8);
    *(void *)(v0 + 184) = v20;
    unint64_t v21 = (*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v22 = swift_task_alloc(v21);
    *(void *)(v0 + 19sub_100129678(v0 + 2) = v22;
    uint64_t v23 = sub_100129274(&qword_1002B9D00);
    uint64_t v24 = sub_100171990(v23);
    URL.init(string:)(*(void *)(v15 + 32));
    uint64_t v25 = type metadata accessor for URL(0LL);
    uint64_t v26 = sub_100171A9C();
    uint64_t v29 = 0LL;
    if (sub_10012B4E8(v26, v27, v25) != 1)
    {
      URL._bridgeToObjectiveC()(v28);
      uint64_t v29 = v30;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8LL))(v24, v25);
    }

    uint64_t v31 = *(void **)(v0 + 128);
    sub_1001324F4();
    id v32 = sub_100171360((uint64_t)v29, 0LL, 0LL, 0LL, 0LL, v16, v18, 0, 0, 0LL, v31);

    uint64_t v33 = sub_100129274(&qword_1002B9AF8);
    uint64_t v34 = sub_100171990(v33);
    uint64_t v35 = v34;
    if (v32)
    {
      uint64_t v36 = swift_task_alloc(v21);
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v32);

      uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
      v37(v35, v36, v19);
      sub_100171AE8(v35, 0LL);
      sub_100145104();
      uint64_t v38 = sub_100171A9C();
      uint64_t v40 = sub_10012B4E8(v38, v39, v19);
      if ((_DWORD)v40 != 1)
      {
        v37(v22, v35, v19);
        sub_1001324F4();
        Class v41 = (void *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
        *(void *)(v0 + 200) = v41;
        *Class v41 = v0;
        v41[1] = sub_1001710C4;
        return NSURLSession.data(for:delegate:)(v22, 0LL);
      }
    }

    else
    {
      uint64_t v40 = sub_100171AE8(v34, 1LL);
    }

    sub_100171AA8(v40, &qword_1002B9AF8);
    sub_1001324F4();
    swift_task_dealloc(v22);
    unint64_t v45 = sub_100171418();
    uint64_t v46 = sub_100158C54((uint64_t)&type metadata for FairPlaySessionError, v45);
    sub_100171A04(v46, v47);
    sub_100135158(v16, v18);
  }

  else
  {
    uint64_t v43 = v14;
    _convertNSErrorToError(_:)(v14);

    swift_willThrow(v44);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001710C4()
{
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v15 = v1;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v15 = (void *)*v1;
  uint64_t v10 = v15;
  sub_100132600(&v15);
  v10[26] = v0;
  swift_task_dealloc(v11);
  uint64_t v12 = v10[19];
  if (v0)
  {
    id v13 = sub_1001711FC;
  }

  else
  {

    v10[27] = v7;
    v10[28] = v9;
    id v13 = sub_100171190;
  }

  return swift_task_switch(v13, v12, 0LL);
}

uint64_t sub_100171190()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 224), *(void *)(v0 + 216));
}

uint64_t sub_1001711FC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100171264()
{
}

uint64_t sub_1001712AC()
{
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1001712D8()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FairPlaySessionProvider()
{
  return objc_opt_self(&OBJC_CLASS___GKFairPlaySessionProvider);
}

uint64_t sub_100171310(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2) {
    a2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  return sub_10016F220(v2, a2);
}

id sub_100171360( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10, void *a11)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  BYTE1(v20) = a9;
  LOBYTE(v20) = a8;
  id v18 =  objc_msgSend( a11,  "requestWithURL:playerID:authToken:pushToken:client:postData:includeUDID:includeAPNS:sapSession:",  a1,  a2,  a3,  a4,  a5,  isa,  v20,  a10);

  return v18;
}

unint64_t sub_100171418()
{
  unint64_t result = qword_1002B9B00;
  if (!qword_1002B9B00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4E70, &type metadata for FairPlaySessionError);
    atomic_store(result, &qword_1002B9B00);
  }

  return result;
}

unint64_t sub_100171454()
{
  unint64_t result = qword_1002B9B10;
  if (!qword_1002B9B10)
  {
    uint64_t v1 = type metadata accessor for FairPlaySessionProvider();
    unint64_t result = swift_getWitnessTable(&unk_1001F4DC8, v1);
    atomic_store(result, (unint64_t *)&qword_1002B9B10);
  }

  return result;
}

uint64_t sub_100171490()
{
  uint64_t v1 = sub_100158FCC();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  swift_release(*(void *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10017152C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100158FCC() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v12 = (void *)swift_task_alloc(dword_1002B9B0C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_100131C10;
  return sub_10016F704(a1, v6, v7, v8, v9, v10, v11);
}

unint64_t sub_1001715E0()
{
  unint64_t result = qword_1002B9B20;
  if (!qword_1002B9B20)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___GKFairPlaySAPSession);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_1002B9B20);
  }

  return result;
}

void sub_10017161C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setSAPVersion:v4];
}

id sub_100171660(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v9 = objc_msgSend(a4, *a5, isa, a3);

  return v9;
}

void sub_1001716BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v11);
  id v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4, v12);
  [a6 reportEvent:v10 type:v13 startTime:a5];
}

uint64_t sub_10017174C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B9B30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100171794()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1001717D0()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  unint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc(dword_1002B9B3C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100131C10;
  return ((uint64_t (*)(void *, void *, void *, uint64_t))((char *)&dword_1002B9B38 + dword_1002B9B38))( v2,  v3,  v5,  v4);
}

uint64_t storeEnumTagSinglePayload for FairPlaySessionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = 1;
  }
  else {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100171894 + 4 * byte_1001F4D85[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001718C8 + 4 * byte_1001F4D80[v4]))();
}

uint64_t sub_1001718C8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001718D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001718D8LL);
  }
  return result;
}

uint64_t sub_1001718E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001718ECLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1001718F0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001718F8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FairPlaySessionError()
{
  return &type metadata for FairPlaySessionError;
}

unint64_t sub_100171918()
{
  unint64_t result = qword_1002B9B48;
  if (!qword_1002B9B48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4E48, &type metadata for FairPlaySessionError);
    atomic_store(result, (unint64_t *)&qword_1002B9B48);
  }

  return result;
}

uint64_t sub_100171954(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10017196C()
{
  uint64_t v0 = sub_10016F260(0LL);
  return swift_willThrow(v0);
}

uint64_t sub_100171990(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_1001719A4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001719C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5, v4, v6 + 8, a4, 6LL);
}

uint64_t sub_1001719D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1001719E8()
{
  return sub_100135158(v1, v0);
}

void sub_1001719F4()
{
}

uint64_t sub_100171A04(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t sub_100171A14()
{
  return sub_100135158(*(void *)(v0 + 160), *(void *)(v0 + 168));
}

uint64_t sub_100171A28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_100135144(a12, v12);
}

uint64_t sub_100171A34()
{
  return (*(uint64_t (**)(void, void))(v0[6] + 8LL))(v0[7], v0[5]);
}

uint64_t sub_100171A48()
{
  return AnyHashable.init<A>(_:)(v0);
}

uint64_t sub_100171A54()
{
  return sub_100135158(v1, v0);
}

  ;
}

uint64_t sub_100171A78()
{
  return swift_task_dealloc(*(void *)(v0 + 56));
}

uint64_t sub_100171A80()
{
  return swift_willThrow();
}

uint64_t sub_100171A88()
{
  return v0;
}

uint64_t sub_100171A9C()
{
  return v0;
}

uint64_t sub_100171AA8(uint64_t a1, uint64_t *a2)
{
  return sub_10013519C(v2, a2);
}

uint64_t sub_100171AB0()
{
  return sub_100135158(v0, v1);
}

uint64_t sub_100171ABC()
{
  return v0;
}

uint64_t sub_100171AC8()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_100171AD4()
{
  return swift_release(*(void *)(v0 + 112));
}

void sub_100171AE0()
{
}

uint64_t sub_100171AE8(uint64_t a1, uint64_t a2)
{
  return sub_1001291F8(a1, a2, 1LL, v2);
}

void *sub_100171AF4(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v5)
  {
    while (1)
    {
      uint64_t v19 = _swiftEmptyArrayStorage;
      unint64_t result = sub_100137650(0LL, v5 & ~(v5 >> 63), 0);
      if (v5 < 0) {
        break;
      }
      uint64_t v7 = 0LL;
      uint64_t v8 = v19;
      while (v5 != v7)
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
        }
        else {
          id v9 = *(id *)(a1 + 8 * v7 + 32);
        }
        NSString v10 = v9;
        uint64_t v17 = v9;
        sub_100171EA0(&v17, &v18);
        if (v3)
        {

          swift_release(v8);
          return v8;
        }

        uint64_t v3 = 0LL;

        uint64_t v11 = v18;
        uint64_t v19 = v8;
        unint64_t v13 = v8[2];
        unint64_t v12 = v8[3];
        if (v13 >= v12 >> 1)
        {
          sub_100137650((void *)(v12 > 1), v13 + 1, 1);
          uint64_t v8 = v19;
        }

        ++v7;
        v8[2] = v13 + 1;
        v8[v13 + 4] = v11;
        if (v5 == v7)
        {

          return v8;
        }
      }

      __break(1u);
LABEL_16:
      if (a1 < 0) {
        uint64_t v14 = a1;
      }
      else {
        uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v14);
      swift_bridgeObjectRelease(a1, v15);
      if (!v5) {
        goto LABEL_20;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_20:

    return _swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t sub_100171C9C()
{
  unint64_t v0 = sub_10017256C();
  uint64_t v1 = swift_allocError(&type metadata for GameInstallDataFetcher.GameInstallDataFetchError, v0, 0LL, 0LL);
  return swift_willThrow(v1);
}

uint64_t sub_100171D4C(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 3sub_100129678(v0 + 2) = v1;
  return swift_task_switch(sub_100171D64, 0LL, 0LL);
}

uint64_t sub_100171D64()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B9BE4);
  *(void *)(v0 + 40) = v1;
  void *v1 = v0;
  v1[1] = sub_100171DC0;
  return sub_100172C5C(*(void *)(v0 + 24));
}

uint64_t sub_100171DC0(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v2 + 40);
  uint64_t v4 = *v2;
  *(void *)(v4 + 48) = a1;
  *(void *)(v4 + 56) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else {
    return swift_task_switch(sub_100171E34, 0LL, 0LL);
  }
}

uint64_t sub_100171E34()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (v1)
  {
    uint64_t v2 = v0 + 16;
    uint64_t v3 = sub_100171AF4(v1, *(id *)(v0 + 32));
    sub_100172684((uint64_t)v3, v4);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_100171EA0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  id v28 = a2;
  uint64_t v3 = *a1;
  uint64_t v4 = sub_100129274(&qword_1002B8608);
  uint64_t inited = swift_initStackObject(v4, v29);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1001F3380;
  *(void *)(inited + 3sub_100129678(v0 + 2) = 0x4449656C646E7562LL;
  *(void *)(inited + 40) = 0xE800000000000000LL;
  id v6 = [v3 bundleID];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = v9;
  *(void *)(inited + 7sub_100129678(v0 + 2) = &type metadata for String;
  *(void *)(inited + 80) = 0x44496D616461LL;
  *(void *)(inited + 88) = 0xE600000000000000LL;
  id v30 = [v3 storeItemID];
  *(void *)(inited + 96) = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  *(void *)(inited + 104) = v10;
  *(void *)(inited + 120) = &type metadata for String;
  strcpy((char *)(inited + 128), "datePurchased");
  *(_WORD *)(inited + 14sub_100129678(v0 + 2) = -4864;
  id v11 = [v3 datePurchased];
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = &v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v11);

  *(void *)(inited + 168) = v12;
  uint64_t v16 = sub_10015848C((void *)(inited + 144));
  (*(void (**)(void *, char *, uint64_t))(v13 + 32))(v16, v15, v12);
  *(void *)(inited + 176) = 0x6C6174736E497369LL;
  *(void *)(inited + 184) = 0xEB0000000064656CLL;
  id v17 = [v3 bundleID];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v20 = v19;

  id v21 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
  swift_bridgeObjectRetain(v20);
  id v22 = sub_1001723F4(v18, v20, 0);
  if (v2)
  {
    swift_errorRelease(v2);
    swift_bridgeObjectRelease(v20, v24);
    char v25 = 0;
  }

  else
  {
    uint64_t v26 = v22;
    swift_bridgeObjectRelease(v20, v23);
    if (v26)
    {

      char v25 = 1;
    }

    else
    {
      char v25 = 0;
    }
  }

  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &type metadata for Bool;
  *(_BYTE *)(inited + 19sub_100129678(v0 + 2) = v25;
  uint64_t result = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t *v28 = result;
  return result;
}

void sub_1001721BC()
{
}

uint64_t sub_1001721E8(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1) {
    a1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String);
  }
  v3[4] = a1;
  uint64_t v6 = dword_1002B9B8C;
  a3;
  uint64_t v7 = (void *)swift_task_alloc(v6);
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100172278;
  return sub_100171D4C(a1);
}

uint64_t sub_100172278(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void *)(*v2 + 32);
  uint64_t v6 = *(void *)(*v2 + 40);
  uint64_t v8 = *(void **)(*v2 + 16);
  uint64_t v9 = *v2;
  swift_task_dealloc(v6);

  swift_bridgeObjectRelease(v7, v10);
  if (v3)
  {
    a1 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    id v11 = (void *)a1;
  }

  else
  {
    if (a1)
    {
      sub_100129274(&qword_1002B9800);
      v12.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      sub_100172684((uint64_t)v12.super.isa, v13);
      a1 = 0LL;
    }

    id v11 = 0LL;
  }

  uint64_t v14 = *(void (***)(void, void, void))(v5 + 24);
  v14[2](v14, 0LL, a1);

  _Block_release(v14);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

id sub_10017236C()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for GameInstallDataFetcher();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for GameInstallDataFetcher()
{
  return objc_opt_self(&OBJC_CLASS___GKGameInstallDataFetcher);
}

id sub_1001723F4(uint64_t a1, uint64_t a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v7);
  id v13 = 0LL;
  id v8 = [v3 initWithBundleIdentifier:v6 allowPlaceholder:a3 & 1 error:&v13];

  id v9 = v13;
  if (v8)
  {
    id v10 = v13;
  }

  else
  {
    id v11 = v13;
    _convertNSErrorToError(_:)(v9);

    swift_willThrow();
  }

  return v8;
}

uint64_t sub_1001724CC()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100172500()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1002B9B94);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1001482C4;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1002B9B90 + dword_1002B9B90))(v2, v3, v4);
}

unint64_t sub_10017256C()
{
  unint64_t result = qword_1002B9BA0;
  if (!qword_1002B9BA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4FA4, &type metadata for GameInstallDataFetcher.GameInstallDataFetchError);
    atomic_store(result, (unint64_t *)&qword_1002B9BA0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for GameInstallDataFetcher.GameInstallDataFetchError( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001725E8 + 4 * byte_1001F4EB0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100172608 + 4 * byte_1001F4EB5[v4]))();
  }
}

_BYTE *sub_1001725E8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100172608(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100172610(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100172618(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100172620(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100172628(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GameInstallDataFetcher.GameInstallDataFetchError()
{
  return &type metadata for GameInstallDataFetcher.GameInstallDataFetchError;
}

unint64_t sub_100172648()
{
  unint64_t result = qword_1002B9BA8;
  if (!qword_1002B9BA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4F7C, &type metadata for GameInstallDataFetcher.GameInstallDataFetchError);
    atomic_store(result, (unint64_t *)&qword_1002B9BA8);
  }

  return result;
}

uint64_t sub_100172684(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

void *ArcadeStateMetricsFieldsProvider.fieldName.unsafeMutableAddressor()
{
  return &static ArcadeStateMetricsFieldsProvider.fieldName;
}

unint64_t static ArcadeStateMetricsFieldsProvider.fieldName.getter()
{
  return 0xD000000000000011LL;
}

void ArcadeStateMetricsFieldsProvider.addMetricsFields(into:using:)()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v3 = [(id)objc_opt_self(GKPreferences) shared];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 arcadeSubscriptionState];

    else {
      char v7 = (char)v5;
    }
    uint64_t v8 = static GKLog.daemon.getter(v6);
    id v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.info.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      *id v11 = 136315138;
      v12[1] = v0;
      __asm { BR              X10 }
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v2, v0);
    __asm { BR              X11 }
  }

  __break(1u);
  JUMPOUT(0x100172A18LL);
}

uint64_t sub_100172A38()
{
  return MetricsFieldsProvider.addTimeSensitiveMetricsFields(into:using:)();
}

uint64_t sub_100172A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = (void *)swift_task_alloc(async function pointer to MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)[1]);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v9;
  *id v9 = v4;
  v9[1] = sub_1001482C4;
  return MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)(a1, a2, a3, a4);
}

void sub_100172AC8()
{
}

uint64_t sub_100172ADC()
{
  uint64_t v0 = type metadata accessor for MetricsFieldExclusionRequest(0LL);
  sub_100172B4C(v0, qword_1002BF880);
  sub_100172B8C(v0, (uint64_t)qword_1002BF880);
  return MetricsFieldExclusionRequest.init(rawValue:)(0xD000000000000011LL, 0x800000010024DE90LL);
}

ValueMetadata *type metadata accessor for ArcadeStateMetricsFieldsProvider()
{
  return &type metadata for ArcadeStateMetricsFieldsProvider;
}

uint64_t *sub_100172B4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_100172B8C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

id sub_100172BA4(uint64_t a1)
{
  id v3 = [objc_allocWithZone(ASDPurchaseHistoryQuery) init];
  [v3 setAccountID:*(void *)(v1 + 16)];
  id v4 = sub_1001732BC((uint64_t)[v3 setIsHidden:0], "setIsFirstParty:");
  sub_1001732BC((uint64_t)v4, "setIsPreorder:");
  if (a1) {
    v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else {
    v5.super.Class isa = 0LL;
  }
  [v3 setBundleIDs:v5.super.isa];

  return v3;
}

uint64_t sub_100172C5C(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 3sub_100129678(v0 + 2) = v1;
  return swift_task_switch(sub_100172C74, 0LL, 0LL);
}

uint64_t sub_100172C74()
{
  uint64_t v1 = v0[4];
  id v2 = sub_100172BA4(v0[3]);
  v0[5] = (uint64_t)v2;
  uint64_t v3 = swift_task_alloc(32LL);
  v0[6] = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  id v4 = (uint64_t **)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = (uint64_t)v4;
  uint64_t v5 = sub_100129274(&qword_1002B9C78);
  *id v4 = v0;
  v4[1] = (uint64_t *)sub_100172D30;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD00000000000001DLL,  0x800000010024DF30LL,  sub_1001731AC,  v3,  v5);
}

uint64_t sub_100172D30()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    id v4 = sub_100172DD0;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 48));
    id v4 = sub_100172D9C;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100172D9C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_100172DD0()
{
  uint64_t v1 = *(void *)(v0 + 48);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100172E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100129274(&qword_1002B9C80);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = *(void **)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v6);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 16) & ~v10;
  uint64_t v12 = swift_allocObject(&unk_100275BB0, v11 + v8, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v12 + v11,  (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
  aBlock[4] = sub_100173218;
  uint64_t v15 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001730EC;
  aBlock[3] = &unk_100275BC8;
  uint64_t v13 = _Block_copy(aBlock);
  swift_release(v15);
  [v9 executeQuery:a3 withResultHandler:v13];
  _Block_release(v13);
}

uint64_t sub_100172F48(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v16 = a2;
    swift_errorRetain(a2);
    uint64_t v2 = sub_100129274(&qword_1002B9C80);
    return CheckedContinuation.resume(throwing:)(&v16, v2);
  }

  if (!a1)
  {
    uint64_t v13 = 0LL;
    goto LABEL_22;
  }

  uint64_t v16 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0) {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v14 = a1;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v14);
    uint64_t v5 = result;
    if (result) {
      goto LABEL_6;
    }
LABEL_21:
    swift_bridgeObjectRelease(a1, v6);
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_22;
  }

  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v5) {
    goto LABEL_21;
  }
LABEL_6:
  if (v5 < 1)
  {
    __break(1u);
    return result;
  }

  for (uint64_t i = 0LL; i != v5; ++i)
  {
    if ((a1 & 0xC000000000000001LL) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
    }
    else {
      id v8 = *(id *)(a1 + 8 * i + 32);
    }
    id v9 = v8;
    if ([v8 genreID] == (id)6014)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(6014LL);
      uint64_t v10 = v16[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
      specialized ContiguousArray._endMutation()(v11);
    }

    else
    {
    }
  }

  swift_bridgeObjectRelease(a1, v12);
  uint64_t v13 = v16;
LABEL_22:
  uint64_t v16 = v13;
  uint64_t v15 = sub_100129274(&qword_1002B9C80);
  return CheckedContinuation.resume(returning:)(&v16, v15);
}

uint64_t sub_1001730EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    unint64_t v7 = sub_100173280();
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }

  swift_retain(v5);
  id v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4, v9);
}

uint64_t sub_100173168()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for AppPurchaseHistoryFetcher()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCore25AppPurchaseHistoryFetcher);
}

void sub_1001731AC(uint64_t a1)
{
}

uint64_t sub_1001731B4()
{
  uint64_t v1 = sub_100129274(&qword_1002B9C80);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100173218(uint64_t a1, void *a2)
{
  return sub_100172F48(a1, a2);
}

uint64_t sub_100173268(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100129678(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100173278(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100173280()
{
  unint64_t result = qword_1002B9C88;
  if (!qword_1002B9C88)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ASDPurchaseHistoryApp);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B9C88);
  }

  return result;
}

id sub_1001732BC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 2);
}

uint64_t sub_1001732C8()
{
  uint64_t v0 = type metadata accessor for NWProtocolTLS.Options(0LL);
  sub_10012CF60(v0);
  uint64_t v1 = NWProtocolTLS.Options.init()();
  uint64_t v2 = (sec_protocol_options *)dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter();
  sec_protocol_options_set_peer_authentication_required(v2, 0);
  swift_unknownObjectRelease(v2);
  return sub_100173458(v1);
}

uint64_t sub_100173320()
{
  uint64_t v0 = (sec_identity *)sub_100173398();
  uint64_t v1 = type metadata accessor for NWProtocolTLS.Options(0LL);
  sub_10012CF60(v1);
  uint64_t v2 = NWProtocolTLS.Options.init()();
  uint64_t v3 = (sec_protocol_options *)dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter();
  sec_protocol_options_set_local_identity(v3, v0);
  swift_unknownObjectRelease(v3);
  uint64_t v4 = sub_100173458(v2);
  swift_unknownObjectRelease(v0);
  return v4;
}

uint64_t sub_100173398()
{
  NSString v0 = String._bridgeToObjectiveC()();
  SelfSignedIdentity = (__SecIdentity *)_CFHTTPServerCreateSelfSignedIdentity();
  if (SelfSignedIdentity)
  {
    uint64_t v2 = SelfSignedIdentity;
    sec_identity_t v3 = sec_identity_create(SelfSignedIdentity);
    if (v3)
    {
      sec_identity_t v4 = v3;

      return (uint64_t)v4;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003ALL,  0x800000010024DFC0LL,  "GameDaemonCore/PeerDiscoveryParameters.swift",  44LL,  2LL,  72LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100173458(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWProtocolTCP.Options(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t v3 = NWProtocolTCP.Options.init()();
  dispatch thunk of NWProtocolTCP.Options.enableKeepalive.setter(1LL);
  dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.setter(2LL);
  swift_retain(a1);
  swift_retain(v3);
  uint64_t v4 = NWParameters.__allocating_init(tls:tcp:)(a1, v3);
  swift_retain(v4);
  NWParameters.includePeerToPeer.setter(1LL);
  if (qword_1002B7EE0 != -1) {
    swift_once(&qword_1002B7EE0, sub_100148B08);
  }
  uint64_t v5 = qword_1002BF870;
  uint64_t v6 = type metadata accessor for NWProtocolFramer.Options(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t v7 = swift_retain(v5);
  uint64_t v8 = NWProtocolFramer.Options.init(definition:)(v7);
  uint64_t v9 = NWParameters.defaultProtocolStack.getter();
  swift_retain(v8);
  uint64_t v11 = (void (*)(_BYTE *, void))dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.modify(v17);
  uint64_t v12 = *v10;
  if ((unint64_t)*v10 >> 62
    && (v12 < 0 ? (uint64_t v14 = *v10) : (uint64_t v14 = v12 & 0xFFFFFFFFFFFFFF8LL),
        swift_bridgeObjectRetain(*v10),
        uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v14),
        uint64_t result = swift_bridgeObjectRelease(v12, v16),
        v15 < 0))
  {
    __break(1u);
  }

  else
  {
    sub_10015EA00(0LL, 0LL, v8);
    v11(v17, 0LL);
    swift_release(a1);
    swift_release(v4);
    swift_release(v3);
    swift_release(v8);
    swift_release(v9);
    return v4;
  }

  return result;
}

uint64_t sub_100173648()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___GKBulletinAttachment_identifier);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR___GKBulletinAttachment_identifier + 8));
  return v1;
}

uint64_t sub_100173708@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___GKBulletinAttachment_url;
  uint64_t v4 = sub_1001640F8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_10017376C()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView);
}

id sub_100173784(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = &v4[OBJC_IVAR___GKBulletinAttachment_identifier];
  *uint64_t v7 = a1;
  v7[1] = a2;
  uint64_t v8 = &v4[OBJC_IVAR___GKBulletinAttachment_url];
  uint64_t v9 = sub_1001640F8();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a3, v9);
  v4[OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView] = a4;
  v13.receiver = v4;
  v13.Class super_class = (Class)sub_100174068();
  id v11 = objc_msgSendSuper2(&v13, "init");
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a3, v9);
  return v11;
}

void sub_1001738D4(void *a1)
{
  uint64_t v2 = v1;
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  sub_1001747F0();

  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR___GKBulletinAttachment_url);
  uint64_t v7 = v6;
  NSString v8 = String._bridgeToObjectiveC()();
  sub_1001747F0();

  uint64_t v9 = *(unsigned __int8 *)(v2 + OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView);
  id v10 = sub_100174810();
  [a1 encodeBool:v9 forKey:v10];
}

id sub_100173A14(void *a1)
{
  uint64_t v3 = sub_100129640(0LL, &qword_1002B83F0, &OBJC_CLASS___NSString_ptr);
  NSString v4 = v1;
  uint64_t v5 = NSCoder.decodeObject<A>(of:forKey:)(v3, 0x696669746E656469LL, 0xEA00000000007265LL, v3);
  if (v5
    && (uint64_t v6 = (void *)v5,
        uint64_t v36 = 0LL,
        uint64_t v37 = 0LL,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(v5, &v36),
        v6,
        (uint64_t v7 = v37) != 0))
  {
    uint64_t v30 = v36;
    uint64_t v8 = sub_1001640F8();
    uint64_t v33 = *(void *)(v8 - 8);
    __chkstk_darwin(v8);
    sub_1001296C0();
    uint64_t v31 = (char *)(v10 - v9);
    uint64_t v11 = sub_100129274(&qword_1002B9D00);
    uint64_t v34 = &v29;
    uint64_t v12 = *(void *)(*(void *)(v11 - 8) + 64LL);
    __chkstk_darwin(v11);
    unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v14 = sub_100129640(0LL, &qword_1002B9D08, &OBJC_CLASS___NSURL_ptr);
    uint64_t v15 = NSCoder.decodeObject<A>(of:forKey:)(v14, 7107189LL, 0xE300000000000000LL, v14);
    if (v15
      && (uint64_t v16 = (void *)v15,
          id v32 = &v29,
          __chkstk_darwin(v15),
          sub_100174804((uint64_t)&v29 - v13, 1LL),
          uint64_t v17 = sub_100174624(&qword_1002B9D10, (uint64_t)&protocol conformance descriptor for URL),
          dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)( v16,  (char *)&v29 - v13,  v8,  v17),  v16,  sub_10012B4E8((uint64_t)&v29 - v13, 1LL, v8) != 1))
    {
      uint64_t v22 = v33;
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v23((char *)&v29 - v13, (char *)&v29 - v13, v8);
      sub_100174804((uint64_t)&v29 - v13, 0LL);
      if (sub_10012B4E8((uint64_t)&v29 - v13, 1LL, v8) != 1)
      {
        uint64_t v24 = v31;
        v23(v31, (char *)&v29 - v13, v8);
        char v25 = (void *)((char *)v4 + OBJC_IVAR___GKBulletinAttachment_identifier);
        *char v25 = v30;
        v25[1] = v7;
        (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))( (uint64_t)v4 + OBJC_IVAR___GKBulletinAttachment_url,  v24,  v8);
        NSString v26 = sub_100174810();
        unsigned __int8 v27 = [a1 decodeBoolForKey:v26];

        (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v8);
        *((_BYTE *)v4 + OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView) = v27;

        id v28 = (objc_class *)sub_100174068();
        v35.receiver = v4;
        v35.Class super_class = v28;
        id v20 = objc_msgSendSuper2(&v35, "init");

        return v20;
      }
    }

    else
    {
      sub_100174804((uint64_t)&v29 - v13, 1LL);
    }

    swift_bridgeObjectRelease(v7, v18);
    sub_100164020((uint64_t)&v29 - v13);
  }

  else
  {
  }

  uint64_t v19 = sub_100174068();
  swift_deallocPartialClassInstance( v4,  v19,  *(unsigned int *)((swift_isaMask & *v4) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v4) + 0x34LL));
  return 0LL;
}

void sub_100173D94()
{
}

uint64_t sub_100173DCC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5, a2);
    return 0LL;
  }

  if (a1 == 7107189 && a2 == 0xE300000000000000LL)
  {
    unint64_t v8 = 0xE300000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7107189LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8, a2);
    return 1LL;
  }

  if (a1 == 0xD00000000000001DLL && a2 == 0x800000010024E060LL)
  {
    swift_bridgeObjectRelease(0x800000010024E060LL, a2);
    return 2LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010024E060LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2, v10);
    if ((v9 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100173F14(char a1)
{
  if (!a1) {
    return 0x696669746E656469LL;
  }
  if (a1 == 1) {
    return 7107189LL;
  }
  return 0xD00000000000001DLL;
}

uint64_t sub_100173F6C()
{
  return sub_100173F14(*v0);
}

uint64_t sub_100173F74@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100173DCC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100173F98(uint64_t a1)
{
  unint64_t v2 = sub_1001745E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100173FC0(uint64_t a1)
{
  unint64_t v2 = sub_1001745E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

id sub_100173FE8()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)sub_100174068();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100174068()
{
  return type metadata accessor for BulletinAttachment(0LL);
}

uint64_t type metadata accessor for BulletinAttachment(uint64_t a1)
{
  uint64_t result = qword_1002B9CC0;
  if (!qword_1002B9CC0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BulletinAttachment);
  }
  return result;
}

uint64_t sub_1001740A8(uint64_t a1)
{
  v4[0] = &unk_1001F50F8;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    uint64_t v4[2] = &unk_1001F5110;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100174128(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100129274(&qword_1002B9CE8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1001296C0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_10012A960(a1, v10);
  unint64_t v12 = sub_1001745E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BulletinAttachment.CodingKeys,  &type metadata for BulletinAttachment.CodingKeys,  v12,  v10,  v11);
  uint64_t v13 = *(void *)(v3 + OBJC_IVAR___GKBulletinAttachment_identifier);
  uint64_t v14 = *(void *)(v3 + OBJC_IVAR___GKBulletinAttachment_identifier + 8);
  char v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v22, v5);
  if (!v2)
  {
    uint64_t v15 = v3 + OBJC_IVAR___GKBulletinAttachment_url;
    char v21 = 1;
    uint64_t v16 = type metadata accessor for URL(0LL);
    uint64_t v17 = sub_100174624((unint64_t *)&unk_1002B9CF0, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v21, v5, v16, v17);
    uint64_t v18 = *(unsigned __int8 *)(v3 + OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView);
    char v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v20, v5);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

id sub_1001742A4(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1001742E4(a1);
}

id sub_1001742E4(void *a1)
{
  uint64_t v28 = sub_100129274(&qword_1002B9CD0);
  __chkstk_darwin(v28);
  sub_1001296C0();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v29 = a1;
  uint64_t v9 = sub_10012A960(a1, v7);
  unint64_t v10 = sub_1001745E8();
  uint64_t v11 = v1;
  void v27[3] = v6;
  id v12 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BulletinAttachment.CodingKeys,  &type metadata for BulletinAttachment.CodingKeys,  v10,  v7,  v8);
  if (v2)
  {
    sub_100174834();

    uint64_t v15 = type metadata accessor for BulletinAttachment(0LL);
    swift_deallocPartialClassInstance( v11,  v15,  *(unsigned int *)((swift_isaMask & *v11) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v11) + 0x34LL));
  }

  else
  {
    char v31 = 0;
    uint64_t v13 = v28;
    uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v28);
    uint64_t v17 = v11;
    uint64_t v18 = (void *)((char *)v11 + OBJC_IVAR___GKBulletinAttachment_identifier);
    uint64_t *v18 = v14;
    v18[1] = v19;
    uint64_t v20 = type metadata accessor for URL(0LL);
    uint64_t v27[2] = v27;
    uint64_t v21 = *(void *)(v20 - 8);
    __chkstk_darwin(v20);
    sub_1001296C0();
    uint64_t v24 = v23 - v22;
    char v31 = 1;
    uint64_t v25 = sub_100174624(&qword_1002B9CE0, (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v20, &v31, v13, v20, v25);
    v27[1] = v21;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v21 + 32))(&v17[OBJC_IVAR___GKBulletinAttachment_url], v24, v20);
    char v31 = 2;
    v17[OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView] = KeyedDecodingContainer.decode(_:forKey:)( &v31,  v28) & 1;

    NSString v26 = (objc_class *)type metadata accessor for BulletinAttachment(0LL);
    v30.receiver = v17;
    v30.Class super_class = v26;
    id v12 = objc_msgSendSuper2(&v30, "init");
    sub_100174824();
    sub_100174834();
  }

  return v12;
}

id sub_1001745A0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = sub_1001742A4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1001745C8(void *a1)
{
  return sub_100174128(a1);
}

unint64_t sub_1001745E8()
{
  unint64_t result = qword_1002B9CD8;
  if (!qword_1002B9CD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F523C, &type metadata for BulletinAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9CD8);
  }

  return result;
}

uint64_t sub_100174624(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for URL(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BulletinAttachment.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = 1;
  }
  else {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001746B0 + 4 * byte_1001F50C5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001746E4 + 4 * asc_1001F50C0[v4]))();
}

uint64_t sub_1001746E4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001746EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001746F4LL);
  }
  return result;
}

uint64_t sub_100174700(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100174708LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10017470C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100174714(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BulletinAttachment.CodingKeys()
{
  return &type metadata for BulletinAttachment.CodingKeys;
}

unint64_t sub_100174734()
{
  unint64_t result = qword_1002B9D18;
  if (!qword_1002B9D18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5214, &type metadata for BulletinAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9D18);
  }

  return result;
}

unint64_t sub_100174774()
{
  unint64_t result = qword_1002B9D20;
  if (!qword_1002B9D20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5184, &type metadata for BulletinAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9D20);
  }

  return result;
}

unint64_t sub_1001747B4()
{
  unint64_t result = qword_1002B9D28;
  if (!qword_1002B9D28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F51AC, &type metadata for BulletinAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B9D28);
  }

  return result;
}

id sub_1001747F0()
{
  return objc_msgSend(v0, *(SEL *)(v3 + 1392), v1, v2);
}

uint64_t sub_100174804(uint64_t a1, uint64_t a2)
{
  return sub_1001291F8(a1, a2, 1LL, v2);
}

NSString sub_100174810()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100174824()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 8))(v1, *(void *)(v2 - 112));
}

uint64_t sub_100174834()
{
  return sub_100129678(*(void **)(v0 - 104));
}

uint64_t sub_10017483C()
{
  uint64_t v0 = sub_100129274(&qword_1002B8380);
  uint64_t inited = swift_initStackObject(v0, &v6);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1001F3E90;
  *(void *)(inited + 3sub_100129678(v0 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterCSTopic);
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterClientPerformanceTopic);
  *(void *)(inited + 56) = v3;
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterGCPerformanceTopic);
  *(void *)(inited + 7sub_100129678(v0 + 2) = v4;
  uint64_t result = sub_100135FB4(inited);
  qword_1002B9D30 = result;
  return result;
}

uint64_t sub_1001748CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100129274(&qword_1002B9DD0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v12[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline____lazy_storage___metricsPipeline;
  swift_beginAccess( v1 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline____lazy_storage___metricsPipeline,  v13,  0LL,  0LL);
  sub_100176D3C(v9, (uint64_t)v8);
  uint64_t v10 = type metadata accessor for MetricsPipeline(0LL);
  sub_100176CFC((uint64_t)v8);
  sub_100174A28(v1, a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v6, a1, v10);
  sub_1001291F8((uint64_t)v6, 0LL, 1LL, v10);
  swift_beginAccess(v9, v12, 33LL, 0LL);
  sub_100176D84((uint64_t)v6, v9);
  return swift_endAccess(v12);
}

uint64_t sub_100174A28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v91 = a2;
  uint64_t v79 = type metadata accessor for MetricsFieldExclusionRequest(0LL);
  uint64_t v82 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v4 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100129274(&qword_1002B9DF8);
  __chkstk_darwin(v5);
  uint64_t v81 = (uint64_t)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Bag(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = type metadata accessor for MetricsFieldsAggregator(0LL);
  uint64_t v92 = *(void *)(v80 - 8);
  uint64_t v11 = __chkstk_darwin(v80);
  uint64_t v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v79 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v83 = (char *)&v79 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v84 = (char *)&v79 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v85 = (char *)&v79 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v93 = (char *)&v79 - v24;
  __chkstk_darwin(v23);
  uint64_t v88 = (char *)&v79 - v25;
  NSString v26 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v86 = a1 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline_bag;
  uint64_t v87 = v26;
  ((void (*)(char *))v26)(v10);
  unsigned __int8 v27 = (void *)objc_opt_self(&OBJC_CLASS___ACAccountStore);
  id v28 = objc_msgSend(v27, "ams_sharedAccountStore");
  unint64_t v29 = sub_100176DCC();
  uint64_t v98 = (ValueMetadata *)v29;
  uint64_t v99 = &protocol witness table for ACAccountStore;
  v97[0] = v28;
  uint64_t v30 = v79;
  id v31 = [(id)objc_opt_self(NSBundle) mainBundle];
  uint64_t v90 = v10;
  id v32 = v10;
  uint64_t v33 = v16;
  MetricsFieldsAggregator.init(bag:accountProvider:bundle:)(v32, v97, v31);
  id v34 = objc_msgSend(v27, "ams_sharedAccountStore");
  unint64_t v95 = v29;
  uint64_t v96 = &protocol witness table for ACAccountStore;
  v94[0] = v34;
  uint64_t v35 = v81;
  uint64_t v89 = v7;
  uint64_t v36 = v7;
  uint64_t v37 = v80;
  sub_1001291F8(v81, 1LL, 1LL, v36);
  id v38 = [(id)objc_opt_self(AMSProcessInfo) currentProcess];
  double v39 = static AMSMetricsIdentifierFieldsProvider.metricsResetInterval.getter();
  uint64_t v40 = static AMSMetricsIdentifierFieldsProvider.metricsKeys.getter();
  uint64_t v98 = (ValueMetadata *)type metadata accessor for AMSMetricsIdentifierFieldsProvider(0LL);
  uint64_t v99 = &protocol witness table for AMSMetricsIdentifierFieldsProvider;
  sub_10015848C(v97);
  uint64_t v41 = AMSMetricsIdentifierFieldsProvider.init(accountProvider:process:bag:shouldMigrate:resetInterval:keys:activeITunesAccountRequired:)( v94,  v38,  v35,  0LL,  v40,  0LL,  v39);
  static MetricsFieldExclusionRequest.amsMetricsID.getter(v41);
  MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)(v97, v4);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v82 + 8);
  v42(v4, v30);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v92 + 8);
  v43(v13, v37);
  sub_100129678(v97);
  uint64_t v98 = (ValueMetadata *)type metadata accessor for GKDaemonHostAppFieldsProvider(0LL);
  uint64_t v99 = (void *)sub_1001295B4( &qword_1002B9E08,  type metadata accessor for GKDaemonHostAppFieldsProvider,  (uint64_t)&protocol conformance descriptor for GKDaemonHostAppFieldsProvider);
  uint64_t v44 = sub_10015848C(v97);
  uint64_t v45 = enum case for MetricsFieldsProviderCategory.timeSensitive(_:);
  uint64_t v46 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  unint64_t v47 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 104LL);
  LODWORD(v8sub_100129678(v0 + 2) = v45;
  v47(v44, v45, v46);
  if (qword_1002B7F18 != -1) {
    swift_once(&qword_1002B7F18, sub_100177438);
  }
  uint64_t v48 = sub_100172B8C(v30, (uint64_t)qword_1002BF8C0);
  BOOL v49 = v83;
  MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)(v97, v48);
  v43(v33, v37);
  sub_100129678(v97);
  uint64_t v98 = &type metadata for ArcadeStateMetricsFieldsProvider;
  uint64_t v99 = (void *)sub_100176E08();
  if (qword_1002B7F00 != -1) {
    swift_once(&qword_1002B7F00, sub_100172ADC);
  }
  uint64_t v50 = sub_100172B8C(v30, (uint64_t)qword_1002BF880);
  uint64_t v51 = v84;
  MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)(v97, v50);
  v43(v49, v37);
  uint64_t v52 = sub_100129678(v97);
  static MetricsFieldExclusionRequest.page.getter(v52);
  uint64_t v53 = v85;
  MetricsFieldsAggregator.removingOptOutProvider(forRequest:)(v4);
  v42(v4, v30);
  uint64_t v54 = ((uint64_t (*)(char *, uint64_t))v43)(v51, v37);
  static MetricsFieldExclusionRequest.app.getter(v54);
  uint64_t v55 = v93;
  MetricsFieldsAggregator.removingOptOutProvider(forRequest:)(v4);
  v42(v4, v30);
  v43(v53, v37);
  uint64_t v56 = type metadata accessor for MultiplayerActivityFieldsProvider(0LL);
  uint64_t v57 = swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
  v47( (void *)(v57 + OBJC_IVAR____TtC14GameDaemonCore33MultiplayerActivityFieldsProvider_category),  v82,  v46);
  uint64_t v98 = (ValueMetadata *)v56;
  uint64_t v99 = (void *)sub_1001295B4( &qword_1002B9E18,  type metadata accessor for MultiplayerActivityFieldsProvider,  (uint64_t)&unk_1001F5D88);
  v97[0] = v57;
  if (qword_1002B7F38 != -1) {
    swift_once(&qword_1002B7F38, sub_100188E7C);
  }
  uint64_t v58 = type metadata accessor for MetricsFieldInclusionRequest(0LL);
  uint64_t v59 = sub_100172B8C(v58, (uint64_t)qword_1002BF8E0);
  id v60 = v88;
  MetricsFieldsAggregator.addingOptInProvider(_:forRequest:)(v97, v59);
  v43(v55, v37);
  sub_100129678(v97);
  uint64_t v61 = sub_100129274(&qword_1002B9E20);
  uint64_t v62 = GKReporterCSTopic;
  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterCSTopic);
  uint64_t v65 = v64;
  uint64_t v66 = v90;
  uint64_t v85 = (char *)v43;
  uint64_t v68 = v86;
  uint64_t v67 = v87;
  uint64_t v69 = v37;
  uint64_t v70 = v89;
  v87(v90, v86, v89);
  uint64_t v71 = LowMemoryMetricsEventLinter.__allocating_init(defaultTopic:bag:rules:)(v63, v65, v66, _swiftEmptyArrayStorage);
  uint64_t v72 = type metadata accessor for AMSMetricsEventRecorder(0LL);
  v67(v66, v68, v70);
  uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
  uint64_t v75 = AMSMetricsEventRecorder.__allocating_init(bag:defaultTopic:)(v66, v73, v74);
  uint64_t v76 = type metadata accessor for StandardMetricsFieldsBuilder(0LL);
  uint64_t v77 = v93;
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v93, v60, v69);
  uint64_t v98 = (ValueMetadata *)v61;
  uint64_t v99 = (void *)sub_100176E44();
  v97[0] = v71;
  unint64_t v95 = v72;
  uint64_t v96 = &protocol witness table for AMSMetricsEventRecorder;
  v94[0] = v75;
  MetricsPipeline.init(builderType:aggregator:linter:recorder:)( v76,  &protocol witness table for StandardMetricsFieldsBuilder,  v77,  v97,  v94);
  return ((uint64_t (*)(char *, uint64_t))v85)(v60, v69);
}

id GKMetricsPipeline.__allocating_init(bag:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return GKMetricsPipeline.init(bag:)(a1);
}

id GKMetricsPipeline.init(bag:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v1);
  uint64_t v5 = type metadata accessor for Bag(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (uint64_t)v2 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline____lazy_storage___metricsPipeline;
  uint64_t v10 = type metadata accessor for MetricsPipeline(0LL);
  sub_1001291F8(v9, 1LL, 1LL, v10);
  id v11 = v2;
  uint64_t v12 = swift_unknownObjectRetain(a1);
  Bag.init(from:)(v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( (uint64_t)v11 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline_bag,  v8,  v5);

  v15.receiver = v11;
  v15.Class super_class = ObjectType;
  id v13 = objc_msgSendSuper2(&v15, "init");
  swift_unknownObjectRelease(a1);
  return v13;
}

uint64_t GKMetricsPipeline.processEvent(topic:shouldFlush:metricsFields:hostAppBundleId:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 56) = a6;
  *(void *)(v7 + 64) = v6;
  *(void *)(v7 + 40) = a4;
  *(void *)(v7 + 48) = a5;
  *(_BYTE *)(v7 + 128) = a3;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 3sub_100129678(v0 + 2) = a2;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  *(void *)(v7 + 7sub_100129678(v0 + 2) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v7 + 80) = v9;
  *(void *)(v7 + 88) = sub_1001446D8(v9);
  uint64_t v10 = type metadata accessor for MetricsData(0LL);
  *(void *)(v7 + 96) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v7 + 104) = v11;
  *(void *)(v7 + 11sub_100129678(v0 + 2) = sub_1001446D8(v11);
  sub_100132278();
  return sub_100144664(v12, v13, v14);
}

uint64_t sub_100175370()
{
  if (qword_1002B7F08 != -1) {
    swift_once(&qword_1002B7F08, sub_10017483C);
  }
  sub_10014C72C(*(void *)(v0 + 24), *(void *)(v0 + 32), qword_1002B9D30);
  if ((v1 & 1) != 0)
  {
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v2 = *(void *)(v0 + 40);
    uint64_t v4 = *(unsigned __int8 *)(v0 + 128);
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = sub_100129274(&qword_1002B9D50);
    uint64_t v7 = *(void *)(type metadata accessor for MetricsFieldInclusionRequest(0LL) - 8);
    uint64_t v8 = swift_allocObject( v6,  ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
         + *(void *)(v7 + 72),
           *(unsigned __int8 *)(v7 + 80) | 7LL);
    *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_1001F3480;
    uint64_t v9 = swift_bridgeObjectRetain(v2);
    static MetricsFieldInclusionRequest.pageFields.getter(v9);
    uint64_t v10 = sub_1001767C4(v8);
    swift_bridgeObjectRetain(v3);
    MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)( v5,  v3,  v4,  v2,  v10,  &_swiftEmptySetSingleton);
    uint64_t v11 = (void *)swift_task_alloc(dword_1002B9D5C);
    *(void *)(v0 + 120) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100175644;
    return sub_1001756B0(*(void *)(v0 + 112), *(void *)(v0 + 48), *(void *)(v0 + 56));
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 32);
    static GKLog.general.getter(v1);
    uint64_t v14 = swift_bridgeObjectRetain_n(v13, 2LL);
    objc_super v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter(v15);
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v19 = *(void *)(v0 + 80);
    uint64_t v18 = *(void *)(v0 + 88);
    unint64_t v20 = *(void *)(v0 + 32);
    if (v17)
    {
      uint64_t v26 = *(void *)(v0 + 24);
      uint64_t v28 = *(void *)(v0 + 72);
      uint64_t v21 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v27 = v18;
      uint64_t v22 = sub_10012CE30(32LL);
      uint64_t v29 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_bridgeObjectRetain(v20);
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_100135074(v26, v20, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      swift_bridgeObjectRelease_n(v20, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Topic %s is not an allowed topic", v21, 0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      sub_10012CE24(v22);
      sub_10012CE24((uint64_t)v21);

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v27, v28);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 32), 2LL);

      uint64_t v23 = sub_100144870();
      v25(v23, v24);
    }

    sub_100176EC4();
    sub_1001324F4();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100175644()
{
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_100175678()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001756B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[7] = a3;
  v4[8] = v3;
  void v4[5] = a1;
  void v4[6] = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  void v4[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for MetricsPipeline(0LL);
  v4[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[13] = v8;
  v4[14] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for LintedMetricsEvent(0LL);
  v4[15] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[16] = v10;
  v4[17] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for MetricsFieldsContext(0LL);
  v4[18] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[19] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[20] = swift_task_alloc(v13);
  v4[21] = swift_task_alloc(v13);
  v4[22] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for MainActor(0LL);
  v4[23] = static MainActor.shared.getter();
  uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor);
  v4[24] = v15;
  v4[25] = v16;
  return swift_task_switch(sub_1001757DC, v15, v16);
}

uint64_t sub_1001757DC()
{
  uint64_t v1 = v0[7];
  MetricsFieldsContext.init()();
  if (v1)
  {
    uint64_t v3 = v0[6];
    uint64_t v2 = v0[7];
    (*(void (**)(void, void, void))(v0[19] + 16LL))(v0[20], v0[22], v0[18]);
    v0[2] = v3;
    v0[3] = v2;
    if (qword_1002B7F10 != -1) {
      swift_once(&qword_1002B7F10, sub_100176F1C);
    }
    uint64_t v4 = v0[22];
    uint64_t v6 = v0[19];
    uint64_t v5 = v0[20];
    uint64_t v7 = v0[18];
    uint64_t v8 = sub_100129274(&qword_1002B9DF0);
    uint64_t v9 = sub_100172B8C(v8, (uint64_t)static GKDaemonHostAppFieldsProvider.HostAppKey);
    MetricsFieldsContext.addingValue<A>(_:forProperty:)(v0 + 2, v9, &type metadata for String);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v10(v5, v7);
    v10(v4, v7);
    uint64_t v11 = sub_100144870();
    v12(v11);
  }

  sub_1001748CC(v0[14]);
  unint64_t v13 = (void *)swift_task_alloc(async function pointer to MetricsPipeline.process(_:using:)[1]);
  v0[26] = v13;
  void *v13 = v0;
  v13[1] = sub_100175918;
  return MetricsPipeline.process(_:using:)(v0[17], v0[5], v0[22]);
}

uint64_t sub_100175918()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 208LL);
  *(void *)(*(void *)v1 + 216LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = sub_100144870();
  v5(v4);
  if (v0)
  {
    uint64_t v6 = v2[24];
    uint64_t v7 = v2[25];
    uint64_t v8 = sub_100175A1C;
  }

  else
  {
    (*(void (**)(void, void))(v2[16] + 8LL))(v2[17], v2[15]);
    uint64_t v6 = v2[24];
    uint64_t v7 = v2[25];
    uint64_t v8 = sub_1001759B0;
  }

  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_1001759B0()
{
  return sub_10012CEAC(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100175A1C()
{
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = swift_release(*(void *)(v0 + 184));
  static GKLog.general.getter(v5);
  swift_errorRetain(v4);
  uint64_t v6 = swift_errorRetain(v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v2 = *(void *)(v0 + 216);
    uint64_t v9 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v1 = (void *)sub_10012CE30(8LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    uint64_t v3 = v9 + 12;
    swift_errorRetain(v2);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(void *)(v0 + 3sub_100129678(v0 + 2) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
    void *v1 = v10;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to process metric event with error: %@", v9, 0xCu);
    uint64_t v11 = sub_100129274(&qword_1002B8ED0);
    swift_arrayDestroy(v1, 1LL, v11);
    sub_10012CE24((uint64_t)v1);
    sub_10012CE24((uint64_t)v9);
  }

  else
  {
    uint64_t v12 = *(void *)(v0 + 216);

    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  uint64_t v14 = *(void *)(v0 + 80);
  uint64_t v13 = *(void *)(v0 + 88);
  uint64_t v15 = *(void *)(v0 + 72);
  swift_errorRelease(*(void *)(v0 + 216));
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  sub_100176E88();
  sub_1001324F4();
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return sub_10012CEAC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100175C6C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *aBlock, void *a6)
{
  v6[2] = a6;
  v6[3] = _Block_copy(aBlock);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v14 = v13;
  uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  v6[4] = v15;
  if (a4)
  {
    a4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
    uint64_t v17 = v16;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  v6[5] = v17;
  v6[6] = v14;
  uint64_t v18 = dword_1002B9D4C;
  a6;
  uint64_t v19 = (void *)swift_task_alloc(v18);
  v6[7] = v19;
  *uint64_t v19 = v6;
  v19[1] = sub_100175D70;
  return GKMetricsPipeline.processEvent(topic:shouldFlush:metricsFields:hostAppBundleId:)( v12,  v14,  a2 & 1,  v15,  a4,  v17);
}

uint64_t sub_100175D70()
{
  uint64_t v2 = v1[6];
  uint64_t v3 = v1[4];
  uint64_t v5 = (void *)v1[2];
  uint64_t v4 = (void (**)(void))v1[3];
  sub_10012CE48();
  swift_bridgeObjectRelease(v3, v6);
  swift_bridgeObjectRelease(v2, v7);

  sub_10012B950(v8, v9);
  v4[2](v4);
  _Block_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GKMetricsPipeline.processMultiplayerActivityEvent(metricsFields:hostAppBundleId:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  uint64_t v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = type metadata accessor for MetricsData(0LL);
  void v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[7] = v6;
  v4[8] = sub_1001446D8(v6);
  sub_100132278();
  return sub_100144664(v7, v8, v9);
}

uint64_t sub_100175E34()
{
  uint64_t v1 = sub_100129274(&qword_1002B9D68);
  uint64_t v2 = type metadata accessor for MetricsFieldExclusionRequest(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1001F4D70;
  static MetricsFieldExclusionRequest.amsMetricsID.getter(v7);
  uint64_t v8 = v7 + v6 + v4;
  if (qword_1002B7F00 != -1) {
    swift_once(&qword_1002B7F00, sub_100172ADC);
  }
  uint64_t v9 = sub_100172B8C(v2, (uint64_t)qword_1002BF880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v8, v9, v2);
  if (*(void *)(v7 + 16))
  {
    uint64_t v10 = (void *)sub_10017652C(v7);
  }

  else
  {
    swift_setDeallocating(v7);
    sub_100176334((uint64_t (*)(void))&type metadata accessor for MetricsFieldExclusionRequest);
    uint64_t v10 = &_swiftEmptySetSingleton;
  }

  uint64_t v11 = v0[2];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterMultiplayerActivityTopic);
  uint64_t v14 = v13;
  uint64_t v15 = sub_100129274(&qword_1002B9D50);
  uint64_t v16 = type metadata accessor for MetricsFieldInclusionRequest(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v18 + 32) & ~v18;
  uint64_t v20 = swift_allocObject(v15, v19 + *(void *)(v17 + 72), v18 | 7);
  *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1001F3480;
  uint64_t v21 = v20 + v19;
  uint64_t v22 = qword_1002B7F38;
  swift_bridgeObjectRetain(v11);
  if (v22 != -1) {
    swift_once(&qword_1002B7F38, sub_100188E7C);
  }
  uint64_t v23 = sub_100172B8C(v16, (uint64_t)qword_1002BF8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v21, v23, v16);
  if (*(void *)(v20 + 16))
  {
    uint64_t v24 = (void *)sub_1001767C4(v20);
  }

  else
  {
    swift_setDeallocating(v20);
    sub_100176334((uint64_t (*)(void))&type metadata accessor for MetricsFieldInclusionRequest);
    uint64_t v24 = &_swiftEmptySetSingleton;
  }

  uint64_t v25 = v0[4];
  MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(v12, v14, 0LL, v0[2], v24, v10);
  uint64_t v26 = (void *)swift_task_alloc(dword_1002B9D5C);
  v0[9] = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_1001760AC;
  return sub_1001756B0(v0[8], v0[3], v25);
}

uint64_t sub_1001760AC()
{
  return sub_100144664(v0, v1, v2);
}

uint64_t sub_1001760E0()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100176188(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  uint64_t v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a1,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  v4[4] = v8;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v11 = v10;
  void v4[5] = v10;
  uint64_t v12 = dword_1002B9D64;
  a4;
  uint64_t v13 = (void *)swift_task_alloc(v12);
  void v4[6] = v13;
  void *v13 = v4;
  v13[1] = sub_100176250;
  return GKMetricsPipeline.processMultiplayerActivityEvent(metricsFields:hostAppBundleId:)(v8, v9, v11);
}

uint64_t sub_100176250()
{
  uint64_t v2 = v1[5];
  uint64_t v3 = (void (**)(void))v1[3];
  uint64_t v4 = (void *)v1[2];
  sub_10012CE48();
  uint64_t v6 = swift_bridgeObjectRelease(v2, v5);
  sub_10012B950(v6, v7);

  v3[2](v3);
  _Block_release(v3);
  return sub_10012CEAC(*(uint64_t (**)(void))(v0 + 8));
}

void GKMetricsPipeline.init()()
{
}

uint64_t sub_100176334(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0LL);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL);
  swift_arrayDestroy(v1 + ((v3 + 32) & ~v3), *(void *)(v1 + 16), v2);
  return swift_deallocClassInstance(v1, 32LL, 7LL);
}

Swift::Int sub_10017637C(Swift::Int result, uint64_t a2)
{
  Swift::Int v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (!v3)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
    goto LABEL_25;
  }

  sub_100129274(&qword_1002B84B0);
  uint64_t result = static _SetStorage.allocate(capacity:)(v3);
  uint64_t v4 = (void *)result;
  uint64_t v25 = *(void *)(v2 + 16);
  if (!v25)
  {
LABEL_25:
    sub_10012B950(result, a2);
    return (Swift::Int)v4;
  }

  unint64_t v5 = 0LL;
  Swift::Int v6 = result + 56;
  while (v5 < *(void *)(v2 + 16))
  {
    uint64_t v7 = (uint64_t *)(v2 + 32 + 16 * v5);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    Hasher.init(_seed:)(v26, v4[5]);
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(v26, v9, v8);
    uint64_t result = Hasher._finalize()();
    uint64_t v10 = -1LL << *((_BYTE *)v4 + 32);
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
    uint64_t v14 = 1LL << v11;
    if (((1LL << v11) & v13) != 0)
    {
      uint64_t v15 = v4[6];
      uint64_t v16 = (uint64_t *)(v15 + 16 * v11);
      a2 = v16[1];
      BOOL v17 = *v16 == v9 && a2 == v8;
      if (v17 || (uint64_t result = sub_100176EB4(*v16, a2), (result & 1) != 0))
      {
LABEL_11:
        uint64_t result = swift_bridgeObjectRelease(v8, a2);
        goto LABEL_22;
      }

      uint64_t v18 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v18;
        unint64_t v12 = v11 >> 6;
        uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
        uint64_t v14 = 1LL << v11;
        if ((v13 & (1LL << v11)) == 0) {
          break;
        }
        uint64_t v19 = (uint64_t *)(v15 + 16 * v11);
        a2 = v19[1];
        if (*v19 != v9 || a2 != v8)
        {
          uint64_t result = sub_100176EB4(*v19, a2);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_11;
      }
    }

    *(void *)(v6 + 8 * v1sub_100129678(v0 + 2) = v14 | v13;
    uint64_t v21 = (void *)(v4[6] + 16 * v11);
    *uint64_t v21 = v9;
    v21[1] = v8;
    uint64_t v22 = v4[2];
    BOOL v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_27;
    }
    uint64_t v4[2] = v24;
LABEL_22:
    if (++v5 == v25) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10017652C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricsFieldExclusionRequest(0LL);
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
    unint64_t v11 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }

  sub_100129274(&qword_1002B9DD8);
  uint64_t result = static _SetStorage.allocate(capacity:)(v9);
  unint64_t v11 = (void *)result;
  uint64_t v33 = *(void *)(a1 + 16);
  if (!v33)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1, v6);
    return (uint64_t)v11;
  }

  unint64_t v12 = 0LL;
  uint64_t v35 = result + 56;
  uint64_t v13 = *(unsigned __int8 *)(v36 + 80);
  uint64_t v31 = a1;
  uint64_t v32 = a1 + ((v13 + 32) & ~v13);
  while (v12 < *(void *)(a1 + 16))
  {
    uint64_t v14 = *(void *)(v36 + 72);
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
    v15(v8, v32 + v14 * v12, v2);
    uint64_t v16 = v11[5];
    uint64_t v17 = sub_1001295B4( &qword_1002B9DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest,  (uint64_t)&protocol conformance descriptor for MetricsFieldExclusionRequest);
    uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v2, v17);
    uint64_t v19 = -1LL << *((_BYTE *)v11 + 32);
    unint64_t v20 = v18 & ~v19;
    unint64_t v21 = v20 >> 6;
    uint64_t v22 = *(void *)(v35 + 8 * (v20 >> 6));
    uint64_t v23 = 1LL << v20;
    if (((1LL << v20) & v22) != 0)
    {
      unint64_t v34 = v12;
      uint64_t v24 = ~v19;
      while (1)
      {
        v15(v5, v11[6] + v20 * v14, v2);
        uint64_t v25 = sub_1001295B4( &qword_1002B9DE8,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest,  (uint64_t)&protocol conformance descriptor for MetricsFieldExclusionRequest);
        char v26 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v8, v2, v25);
        uint64_t v27 = *(void (**)(char *, uint64_t))(v36 + 8);
        v27(v5, v2);
        if ((v26 & 1) != 0) {
          break;
        }
        unint64_t v20 = (v20 + 1) & v24;
        unint64_t v21 = v20 >> 6;
        uint64_t v22 = *(void *)(v35 + 8 * (v20 >> 6));
        uint64_t v23 = 1LL << v20;
        if ((v22 & (1LL << v20)) == 0)
        {
          a1 = v31;
          unint64_t v12 = v34;
          goto LABEL_10;
        }
      }

      uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v8, v2);
      a1 = v31;
      unint64_t v12 = v34;
    }

    else
    {
LABEL_10:
      *(void *)(v35 + 8 * v21) = v23 | v22;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v36 + 32))(v11[6] + v20 * v14, v8, v2);
      uint64_t v28 = v11[2];
      BOOL v29 = __OFADD__(v28, 1LL);
      uint64_t v30 = v28 + 1;
      if (v29) {
        goto LABEL_18;
      }
      uint64_t v11[2] = v30;
    }

    if (++v12 == v33) {
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1001767C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricsFieldInclusionRequest(0LL);
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
    unint64_t v11 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }

  sub_100129274(&qword_1002B9E30);
  uint64_t result = static _SetStorage.allocate(capacity:)(v9);
  unint64_t v11 = (void *)result;
  uint64_t v33 = *(void *)(a1 + 16);
  if (!v33)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1, v6);
    return (uint64_t)v11;
  }

  unint64_t v12 = 0LL;
  uint64_t v35 = result + 56;
  uint64_t v13 = *(unsigned __int8 *)(v36 + 80);
  uint64_t v31 = a1;
  uint64_t v32 = a1 + ((v13 + 32) & ~v13);
  while (v12 < *(void *)(a1 + 16))
  {
    uint64_t v14 = *(void *)(v36 + 72);
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
    v15(v8, v32 + v14 * v12, v2);
    uint64_t v16 = v11[5];
    uint64_t v17 = sub_1001295B4( &qword_1002B9E38,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest,  (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
    uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v2, v17);
    uint64_t v19 = -1LL << *((_BYTE *)v11 + 32);
    unint64_t v20 = v18 & ~v19;
    unint64_t v21 = v20 >> 6;
    uint64_t v22 = *(void *)(v35 + 8 * (v20 >> 6));
    uint64_t v23 = 1LL << v20;
    if (((1LL << v20) & v22) != 0)
    {
      unint64_t v34 = v12;
      uint64_t v24 = ~v19;
      while (1)
      {
        v15(v5, v11[6] + v20 * v14, v2);
        uint64_t v25 = sub_1001295B4( (unint64_t *)&unk_1002B9E40,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest,  (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
        char v26 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v8, v2, v25);
        uint64_t v27 = *(void (**)(char *, uint64_t))(v36 + 8);
        v27(v5, v2);
        if ((v26 & 1) != 0) {
          break;
        }
        unint64_t v20 = (v20 + 1) & v24;
        unint64_t v21 = v20 >> 6;
        uint64_t v22 = *(void *)(v35 + 8 * (v20 >> 6));
        uint64_t v23 = 1LL << v20;
        if ((v22 & (1LL << v20)) == 0)
        {
          a1 = v31;
          unint64_t v12 = v34;
          goto LABEL_10;
        }
      }

      uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v8, v2);
      a1 = v31;
      unint64_t v12 = v34;
    }

    else
    {
LABEL_10:
      *(void *)(v35 + 8 * v21) = v23 | v22;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v36 + 32))(v11[6] + v20 * v14, v8, v2);
      uint64_t v28 = v11[2];
      BOOL v29 = __OFADD__(v28, 1LL);
      uint64_t v30 = v28 + 1;
      if (v29) {
        goto LABEL_18;
      }
      uint64_t v11[2] = v30;
    }

    if (++v12 == v33) {
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100176A5C()
{
  return type metadata accessor for GKMetricsPipeline(0LL);
}

uint64_t type metadata accessor for GKMetricsPipeline(uint64_t a1)
{
  uint64_t result = qword_1002B9D98;
  if (!qword_1002B9D98) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GKMetricsPipeline);
  }
  return result;
}

void sub_100176A9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Bag(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    sub_100176B24(319LL);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 2LL, v6, a1 + 80);
    }
  }

void sub_100176B24(uint64_t a1)
{
  if (!qword_1002B9DA8)
  {
    uint64_t v2 = type metadata accessor for MetricsPipeline(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1002B9DA8);
    }
  }

uint64_t sub_100176B78()
{
  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100176BB4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002B9DB4);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10016240C;
  uint64_t v2 = sub_100144870();
  return v3(v2);
}

uint64_t sub_100176C28()
{
  _Block_release(*(const void **)(v0 + 48));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100176C6C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(_BYTE *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v7 = *(void **)(v0 + 48);
  uint64_t v6 = *(void **)(v0 + 56);
  uint64_t v8 = (void *)swift_task_alloc(dword_1002B9DC4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_100161EBC;
  return ((uint64_t (*)(uint64_t, char, uint64_t, uint64_t, void *, void *))((char *)&dword_1002B9DC0
                                                                                  + dword_1002B9DC0))( v2,  v3,  v4,  v5,  v7,  v6);
}

uint64_t sub_100176CFC(uint64_t a1)
{
  uint64_t v2 = sub_100129274(&qword_1002B9DD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100176D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B9DD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100176D84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B9DD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100176DCC()
{
  unint64_t result = qword_1002B9E00;
  if (!qword_1002B9E00)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ACAccountStore);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B9E00);
  }

  return result;
}

unint64_t sub_100176E08()
{
  unint64_t result = qword_1002B9E10;
  if (!qword_1002B9E10)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ArcadeStateMetricsFieldsProvider,  &type metadata for ArcadeStateMetricsFieldsProvider);
    atomic_store(result, (unint64_t *)&qword_1002B9E10);
  }

  return result;
}

unint64_t sub_100176E44()
{
  unint64_t result = qword_1002B9E28;
  if (!qword_1002B9E28)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002B9E20);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LowMemoryMetricsEventLinter<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B9E28);
  }

  return result;
}

uint64_t sub_100176E88()
{
  return (*(uint64_t (**)(void, void))(v0[19] + 8LL))(v0[22], v0[18]);
}

uint64_t sub_100176EA8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_100176EB4(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_100176EC4()
{
  return swift_task_dealloc(*(void *)(v0 + 112));
}

uint64_t GKDaemonHostAppFieldsProvider.HostAppKey.unsafeMutableAddressor()
{
  if (qword_1002B7F10 != -1) {
    swift_once(&qword_1002B7F10, sub_100176F1C);
  }
  uint64_t v0 = sub_100129274(&qword_1002B9DF0);
  return sub_100172B8C(v0, (uint64_t)static GKDaemonHostAppFieldsProvider.HostAppKey);
}

uint64_t sub_100176F1C()
{
  uint64_t v0 = sub_100129274(&qword_1002B9DF0);
  sub_100172B4C(v0, static GKDaemonHostAppFieldsProvider.HostAppKey);
  sub_1001774AC();
  return MetricsFieldsContext.Property.init(_:)(0xD00000000000001ALL, 0x800000010024E1F0LL, &type metadata for String);
}

uint64_t static GKDaemonHostAppFieldsProvider.HostAppKey.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1002B7F10 != -1) {
    swift_once(&qword_1002B7F10, sub_100176F1C);
  }
  uint64_t v2 = sub_100129274(&qword_1002B9DF0);
  uint64_t v3 = sub_100172B8C(v2, (uint64_t)static GKDaemonHostAppFieldsProvider.HostAppKey);
  return sub_10017747C(a1, v3, v2, *(uint64_t (**)(void))(*(void *)(v2 - 8) + 16LL));
}

uint64_t GKDaemonHostAppFieldsProvider.category.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  return sub_10017747C(a1, v1, v3, *(uint64_t (**)(void))(*(void *)(v3 - 8) + 16LL));
}

uint64_t GKDaemonHostAppFieldsProvider.addMetricsFields(into:using:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_10012A960(a1, v2);
  uint64_t v4 = dispatch thunk of MetricsFieldsBuilder.allMetricsFields.getter(v2, v3);
  uint64_t v5 = sub_100177484();
  sub_10012D0B0(v5, v6, v4, v7);
  swift_bridgeObjectRelease(v4, v8);
  uint64_t v9 = v16;
  uint64_t result = sub_100149210((uint64_t)v15);
  if (!v9)
  {
    if (qword_1002B7F10 != -1) {
      swift_once(&qword_1002B7F10, sub_100176F1C);
    }
    uint64_t v11 = sub_100129274(&qword_1002B9DF0);
    uint64_t v12 = sub_100172B8C(v11, (uint64_t)static GKDaemonHostAppFieldsProvider.HostAppKey);
    uint64_t v16 = sub_100129274(&qword_1002B86F0);
    MetricsFieldsContext.subscript.getter(v15, v12, &type metadata for String);
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    sub_100163BF0((uint64_t)a1, v13);
    dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)( v15,  0x70704174736F68LL,  0xE700000000000000LL,  v13,  v14);
    return sub_100129678(v15);
  }

  return result;
}

uint64_t sub_100177160@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t sub_100177198(void *a1)
{
  return GKDaemonHostAppFieldsProvider.addMetricsFields(into:using:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for GKDaemonHostAppFieldsProvider(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t initializeWithCopy for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100177338);
}

uint64_t sub_100177338()
{
  uint64_t v2 = sub_10017749C();
  return sub_10012B4E8(v1, v0, v2);
}

uint64_t storeEnumTagSinglePayload for GKDaemonHostAppFieldsProvider( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10017736C);
}

uint64_t sub_10017736C()
{
  uint64_t v2 = sub_10017749C();
  return sub_1001291F8(v1, v0, v0, v2);
}

uint64_t type metadata accessor for GKDaemonHostAppFieldsProvider(uint64_t a1)
{
  uint64_t result = qword_1002B9EA8;
  if (!qword_1002B9EA8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GKDaemonHostAppFieldsProvider);
  }
  return result;
}

uint64_t sub_1001773D0(uint64_t a1)
{
  uint64_t result = type metadata accessor for MetricsFieldsProviderCategory(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100177438()
{
  uint64_t v0 = type metadata accessor for MetricsFieldExclusionRequest(0LL);
  sub_100172B4C(v0, qword_1002BF8C0);
  sub_1001774AC();
  uint64_t v1 = sub_100177484();
  return MetricsFieldExclusionRequest.init(rawValue:)(v1, v2);
}

uint64_t sub_10017747C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_100177484()
{
  return 0x70704174736F68LL;
}

uint64_t sub_10017749C()
{
  return type metadata accessor for MetricsFieldsProviderCategory(0LL);
}

uint64_t sub_1001774AC()
{
  return sub_100172B8C(v0, v1);
}

uint64_t sub_1001774B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    __int128 v4 = *(_OWORD *)(a1 + 16);
    v8[0] = *(_OWORD *)a1;
    v8[1] = v4;
    uint64_t v9 = *(void *)(a1 + 32);
    sub_100187A90();
    return swift_bridgeObjectRelease(a3, v5);
  }

  else
  {
    sub_10017A058(a1);
    sub_100156BE8();
    swift_bridgeObjectRelease(a3, v7);
    return sub_10017A058((uint64_t)v8);
  }

id sub_100177540()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for MatchReporter()) init];
  static MatchReporter.shared = (uint64_t)result;
  return result;
}

uint64_t *MatchReporter.shared.unsafeMutableAddressor()
{
  if (qword_1002B7F20 != -1) {
    swift_once(&qword_1002B7F20, sub_100177540);
  }
  return &static MatchReporter.shared;
}

id static MatchReporter.shared.getter()
{
  if (qword_1002B7F20 != -1) {
    swift_once(&qword_1002B7F20, sub_100177540);
  }
  return (id)static MatchReporter.shared;
}

id sub_100177600()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  *(void *)&v0[OBJC_IVAR___GKMatchReporter_matchRecording] = 0LL;
  uint64_t v2 = OBJC_IVAR___GKMatchReporter_matchQueue;
  sub_100129640(0LL, (unint64_t *)&qword_1002B7F58, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&ObjectType - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = v0;
  static DispatchQoS.unspecified.getter(v6);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&ObjectType - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_100179F90( (unint64_t *)&qword_1002B7F60,  v10,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v12 = v11;
  uint64_t v13 = sub_100129274(&qword_1002B7F68);
  sub_100179FCC((unint64_t *)&qword_1002B7F70, &qword_1002B7F68);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v13, v14, v7, v12);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&ObjectType - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v18 + 104))( v17,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  *(void *)&v1[v2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0x636552686374616DLL,  0xED0000726564726FLL,  v5,  v9,  v17,  0LL);

  v21.receiver = v6;
  v21.Class super_class = ObjectType;
  return objc_msgSendSuper2(&v21, "init");
}

uint64_t sub_100177830( uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  uint64_t v17 = sub_100129274(&qword_1002BA0C0);
  uint64_t inited = swift_initStackObject(v17, v37);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1001F3380;
  *(void *)(inited + 3sub_100129678(v0 + 2) = 0x707954746E657665LL;
  *(void *)(inited + 40) = 0xE900000000000065LL;
  uint64_t v35 = 0x686374616DLL;
  unint64_t v36 = 0xE500000000000000LL;
  AnyHashable.init<A>(_:)(&v35);
  *(void *)(inited + 88) = 0x707954686374616DLL;
  *(void *)(inited + 96) = 0xE900000000000065LL;
  uint64_t v35 = a1;
  unint64_t v36 = a2;
  swift_bridgeObjectRetain(a2);
  AnyHashable.init<A>(_:)(&v35);
  *(void *)(inited + 144) = 0x6579616C506E696DLL;
  *(void *)(inited + 15sub_100129678(v0 + 2) = 0xEA00000000007372LL;
  uint64_t v35 = (uint64_t)a3;
  sub_100129640(0LL, (unint64_t *)&qword_1002B82D0, &OBJC_CLASS___NSNumber_ptr);
  sub_10017A008();
  id v19 = a3;
  AnyHashable.init<A>(_:)(&v35);
  *(void *)(inited + 200) = 0x6579616C5078616DLL;
  *(void *)(inited + 208) = 0xEA00000000007372LL;
  uint64_t v35 = (uint64_t)a4;
  id v20 = a4;
  AnyHashable.init<A>(_:)(&v35);
  uint64_t v38 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for AnyHashable,  &protocol witness table for String);
  if (a6)
  {
    uint64_t v33 = a5;
    uint64_t v34 = a6;
    swift_bridgeObjectRetain(a6);
    AnyHashable.init<A>(_:)(&v33);
    sub_1001774B8((uint64_t)&v35, 0x7954746C75736572LL, 0xEA00000000006570LL);
  }

  if (a8)
  {
    uint64_t v33 = a7;
    uint64_t v34 = a8;
    swift_bridgeObjectRetain(a8);
    AnyHashable.init<A>(_:)(&v33);
    sub_1001774B8((uint64_t)&v35, 0x726553686374616DLL, 0xEB00000000726576LL);
  }

  if (a9)
  {
    uint64_t v33 = a9;
    id v21 = a9;
    AnyHashable.init<A>(_:)(&v33);
    sub_1001774B8((uint64_t)&v35, 0x727544686374616DLL, 0xED00006E6F697461LL);
  }

  if (a10)
  {
    uint64_t v33 = a10;
    id v22 = a10;
    AnyHashable.init<A>(_:)(&v33);
    sub_1001774B8((uint64_t)&v35, 0x61727544656D6167LL, 0xEC0000006E6F6974LL);
  }

  if (a11)
  {
    uint64_t v33 = a11;
    id v23 = a11;
    AnyHashable.init<A>(_:)(&v33);
    sub_1001774B8((uint64_t)&v35, 0xD000000000000010LL, 0x800000010024E390LL);
  }

  if (a12)
  {
    uint64_t v33 = a12;
    id v24 = a12;
    AnyHashable.init<A>(_:)(&v33);
    sub_1001774B8((uint64_t)&v35, 0xD00000000000001CLL, 0x800000010024E370LL);
  }

  uint64_t v25 = v38;
  sub_100185A44(v38);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease(v25, v28);
  return v27;
}

uint64_t sub_100177BE0()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___GKMatchReporter_matchRecording);
  *(void *)(v0 + OBJC_IVAR___GKMatchReporter_matchRecording) = 0LL;
  return swift_release(v1);
}

Swift::Void __swiftcall MatchReporter.recordMatchStart(type:minPlayers:maxPlayers:)( Swift::String type, NSNumber minPlayers, NSNumber maxPlayers)
{
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  sub_10017A1EC(OBJC_IVAR___GKMatchReporter_matchQueue);
  uint64_t v12 = sub_10012AAEC((uint64_t)&unk_100275DB8, 24LL);
  sub_10017A198(v12);
  uint64_t v13 = (void *)sub_10012AAEC((uint64_t)&unk_100275DE0, 56LL);
  void v13[2] = v3;
  v13[3] = v11;
  v13[4] = v9;
  v13[5] = v7;
  v13[6] = v5;
  sub_10017A1A8((uint64_t)sub_10012A550);
  uint64_t v14 = sub_10017A17C();
  uint64_t v15 = sub_10017A15C(v14);
  __chkstk_darwin(v15);
  sub_10017A108();
  swift_bridgeObjectRetain(v9);
  id v16 = v7;
  id v17 = v5;
  sub_10017A1D4();
  sub_10017A1C4();
  sub_10017A188();
  __chkstk_darwin(v18);
  sub_10017A124();
  sub_100179F90(&qword_1002B8F30, v19, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10017A1BC();
  sub_10017A1B4(&qword_1002B8F40);
  sub_10017A0D0(v20);
  sub_10017A0F0();
  sub_10017A1CC();
  sub_10017A14C();
  sub_10017A13C();
  sub_10017A170();
  sub_10012CF14();
  sub_10012CE58();
}

uint64_t sub_100177D4C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100177D70(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = a1 + 16;
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  uint64_t v11 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];

  if (!v11)
  {
    uint64_t v12 = (char *)swift_unknownObjectUnownedLoadStrong(v9);
    uint64_t v13 = type metadata accessor for MultiplayerRecording();
    swift_allocObject(v13, 120LL, 7LL);
    swift_bridgeObjectRetain(a3);
    uint64_t v14 = sub_100179E50(a2, a3, (uint64_t)a4, (uint64_t)a5);
    uint64_t v15 = *(void *)&v12[OBJC_IVAR___GKMatchReporter_matchRecording];
    *(void *)&v12[OBJC_IVAR___GKMatchReporter_matchRecording] = v14;

    swift_release(v15);
  }

uint64_t sub_100177E4C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_100177E84()
{
}

uint64_t sub_100177E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100129678(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100177EA4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

Swift::Void __swiftcall MatchReporter.recordMatchServer(type:)(Swift::String type)
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10017A1EC(OBJC_IVAR___GKMatchReporter_matchQueue);
  uint64_t v6 = sub_10012AAEC((uint64_t)&unk_100275DB8, 24LL);
  sub_10017A198(v6);
  uint64_t v7 = (void *)sub_10012AAEC((uint64_t)&unk_100275E30, 40LL);
  void v7[2] = v1;
  v7[3] = v5;
  void v7[4] = v3;
  sub_10017A1A8((uint64_t)sub_10012A550);
  uint64_t v8 = sub_10017A17C();
  uint64_t v9 = sub_10017A15C(v8);
  __chkstk_darwin(v9);
  sub_10017A108();
  swift_bridgeObjectRetain(v3);
  sub_10017A1D4();
  sub_10017A1C4();
  sub_10017A188();
  __chkstk_darwin(v10);
  sub_10017A124();
  sub_100179F90(&qword_1002B8F30, v11, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10017A1BC();
  sub_10017A1B4(&qword_1002B8F40);
  sub_10017A0D0(v12);
  sub_10017A0F0();
  sub_10017A1CC();
  sub_10017A14C();
  sub_10017A13C();
  sub_10017A170();
  sub_10012CF14();
  sub_10012CE58();
}

void sub_100178070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  uint64_t v6 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];
  if (v6)
  {
    id v9 = Strong;
    swift_retain(v6);

    uint64_t v7 = *(void *)(v6 + 96);
    *(void *)(v6 + 88) = a2;
    *(void *)(v6 + 96) = a3;
    swift_bridgeObjectRetain(a3);
    swift_release(v6);
    swift_bridgeObjectRelease(v7, v8);
  }

  else
  {
  }

uint64_t sub_1001780FC()
{
  return sub_100179950((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_100178108()
{
}

Swift::Void __swiftcall MatchReporter.recordActiveDevices(count:)(NSNumber count)
{
}

void sub_100178184(uint64_t a1, void *a2)
{
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  uint64_t v4 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];
  if (v4)
  {
    id v6 = Strong;
    swift_retain(v4);

    uint64_t v7 = *(char **)(v4 + 104);
    *(void *)(v4 + 104) = a2;
    id v5 = a2;
    swift_release(v4);
    uint64_t Strong = v7;
  }
}

void sub_1001781F4()
{
}

Swift::Void __swiftcall MatchReporter.recordSharePlayDevices(count:)(NSNumber count)
{
}

void sub_10017826C()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  id v9 = v8;
  uint64_t v10 = sub_10012AAEC((uint64_t)&unk_100275DB8, 24LL);
  swift_unknownObjectUnownedInit(v10 + 16, v7);
  uint64_t v11 = sub_10012AAEC(v6, 32LL);
  *(void *)(v11 + swift_unknownObjectUnownedDestroy(v0 + 16) = v10;
  *(void *)(v11 + 24) = v9;
  v18[4] = v4;
  v18[5] = v11;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256LL;
  void v18[2] = sub_10012A550;
  v18[3] = v2;
  _Block_copy(v18);
  uint64_t v12 = sub_10017A17C();
  uint64_t v13 = sub_10017A15C(v12);
  __chkstk_darwin(v13);
  sub_10017A108();
  id v14 = v9;
  sub_10017A1D4();
  sub_10017A1C4();
  sub_10017A188();
  __chkstk_darwin(v15);
  sub_10017A124();
  sub_100179F90(&qword_1002B8F30, v16, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10017A1BC();
  sub_10017A1B4(&qword_1002B8F40);
  sub_10017A0D0(v17);
  sub_10017A0F0();
  sub_10017A1CC();
  sub_10017A14C();
  sub_10017A13C();
  sub_10017A170();
  sub_10012CF14();
  sub_10012CE58();
}

void sub_1001783B4(uint64_t a1, void *a2)
{
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  uint64_t v4 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];
  if (v4)
  {
    id v6 = Strong;
    swift_retain(v4);

    uint64_t v7 = *(char **)(v4 + 112);
    *(void *)(v4 + 11sub_100129678(v0 + 2) = a2;
    id v5 = a2;
    swift_release(v4);
    uint64_t Strong = v7;
  }
}

uint64_t sub_100178424()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10017844C()
{
}

void MatchReporter.recordMatchComplete(matchType:result:completion:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  sub_10017A1EC(OBJC_IVAR___GKMatchReporter_matchQueue);
  uint64_t v13 = sub_10012AAEC((uint64_t)&unk_100275DB8, 24LL);
  sub_10017A198(v13);
  id v14 = (void *)sub_10012AAEC((uint64_t)&unk_100275F20, 72LL);
  v14[2] = v0;
  void v14[3] = v4;
  void v14[4] = v2;
  v14[5] = v12;
  v14[6] = v10;
  v14[7] = v8;
  v14[8] = v6;
  sub_10017A1A8((uint64_t)sub_10012A550);
  uint64_t v15 = sub_10017A17C();
  uint64_t v16 = sub_10017A15C(v15);
  __chkstk_darwin(v16);
  swift_bridgeObjectRetain(v6);
  swift_retain(v0);
  swift_retain(v2);
  swift_bridgeObjectRetain(v10);
  sub_10017A1D4();
  sub_10017A1C4();
  sub_10017A188();
  __chkstk_darwin(v17);
  sub_10017A124();
  sub_100179F90(&qword_1002B8F30, v18, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10017A1BC();
  sub_10017A1B4(&qword_1002B8F40);
  sub_10017A0D0(v19);
  sub_10017A0F0();
  sub_10017A1CC();
  sub_10017A14C();
  sub_10017A13C();
  sub_10017A170();
  sub_10012CF14();
  sub_10012CE58();
}

void sub_10017862C( uint64_t a1, void (*a2)(Class), uint64_t a3, uint64_t a4, unint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v100 = a7;
  uint64_t v101 = a6;
  uint64_t v102 = a3;
  uint64_t v103 = a2;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1 + 16;
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  uint64_t v16 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];

  if (!v16) {
    goto LABEL_4;
  }
  uint64_t v18 = a1 + 16;
  uint64_t v19 = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)&v19[OBJC_IVAR___GKMatchReporter_matchRecording];
  if (!v21)
  {

    uint64_t v14 = a1 + 16;
LABEL_9:
    Class v32 = (Class)swift_unknownObjectUnownedLoadStrong(v14);
    uint64_t v33 = *(uint64_t *)((char *)&v32->isa + OBJC_IVAR___GKMatchReporter_matchRecording);
    if (!v33)
    {
LABEL_52:

      return;
    }

    Class v99 = v32;
    swift_retain(v33);

    uint64_t v34 = v14;
    uint64_t v35 = *(void *)(v33 + 16);
    unint64_t v36 = *(void *)(v33 + 24);
    swift_bridgeObjectRetain(v36);
    swift_release(v33);
    uint64_t v37 = (objc_class *)swift_unknownObjectUnownedLoadStrong(v34);
    Class v99 = v37;
    uint64_t v39 = *(uint64_t *)((char *)&v37->isa + OBJC_IVAR___GKMatchReporter_matchRecording);
    if (v39)
    {
      swift_retain(*(Class *)((char *)&v37->isa + OBJC_IVAR___GKMatchReporter_matchRecording));

      Class v99 = (Class)*(id *)(v39 + 40);
      swift_release(v39);
      uint64_t v40 = (objc_class *)swift_unknownObjectUnownedLoadStrong(v34);
      uint64_t v42 = *(uint64_t *)((char *)&v40->isa + OBJC_IVAR___GKMatchReporter_matchRecording);
      Class isa = v40;
      if (!v42)
      {
        swift_bridgeObjectRelease(v36, v41);
LABEL_22:

LABEL_48:
        Class v32 = isa;
        goto LABEL_52;
      }

      swift_retain(v42);

      id v43 = *(id *)(v42 + 48);
      swift_release(v42);
      Class isa = (Class)swift_unknownObjectUnownedLoadStrong(v34);
      uint64_t v45 = *(uint64_t *)((char *)&isa->isa + OBJC_IVAR___GKMatchReporter_matchRecording);
      if (!v45)
      {
        swift_bridgeObjectRelease(v36, v44);

        goto LABEL_48;
      }

      uint64_t v97 = v43;
      swift_retain(v45);

      double v46 = *(double *)(v45 + 32);
      swift_release(v45);
      double Current = CFAbsoluteTimeGetCurrent();
      uint64_t v48 = swift_unknownObjectUnownedLoadStrong(v34);
      BOOL v49 = (void *)v48;
      uint64_t v50 = *(void *)(v48 + OBJC_IVAR___GKMatchReporter_matchRecording);
      if (v50)
      {
        swift_retain(*(void *)(v48 + OBJC_IVAR___GKMatchReporter_matchRecording));

        id v51 = [objc_allocWithZone(NSNumber) initWithDouble:Current - v46];
        BOOL v49 = *(void **)(v50 + 56);
        *(void *)(v50 + 56) = v51;
        swift_release(v50);
      }

      if (a5)
      {
        swift_bridgeObjectRetain(a5);
        swift_bridgeObjectRelease(v36, v52);
        unint64_t v36 = a5;
      }

      else
      {
        a4 = v35;
      }

      uint64_t v55 = (char *)swift_unknownObjectUnownedLoadStrong(v18);
      uint64_t v56 = v55;
      uint64_t v57 = *(void *)&v55[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v57)
      {
        swift_retain(*(void *)&v55[OBJC_IVAR___GKMatchReporter_matchRecording]);

        uint64_t v58 = *(void *)(v57 + 24);
        *(void *)(v57 + swift_unknownObjectUnownedDestroy(v0 + 16) = a4;
        *(void *)(v57 + 24) = v36;
        swift_bridgeObjectRetain(v36);
        swift_release(v57);
        swift_bridgeObjectRelease(v58, v59);
      }

      else
      {
      }

      id v60 = (void *)swift_unknownObjectUnownedLoadStrong(v18);
      uint64_t v61 = (char *)swift_unknownObjectUnownedLoadStrong(v18);
      uint64_t v62 = v61;
      uint64_t v63 = *(void *)&v61[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v63)
      {
        swift_retain(*(void *)&v61[OBJC_IVAR___GKMatchReporter_matchRecording]);

        uint64_t v64 = *(void **)(v63 + 88);
        Class isa = *(Class *)(v63 + 96);
        swift_bridgeObjectRetain(isa);
        swift_release(v63);
      }

      else
      {

        uint64_t v64 = 0LL;
        Class isa = 0LL;
      }

      uint64_t v65 = (char *)swift_unknownObjectUnownedLoadStrong(v18);
      uint64_t v66 = v65;
      uint64_t v67 = *(void *)&v65[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v67)
      {
        swift_retain(*(void *)&v65[OBJC_IVAR___GKMatchReporter_matchRecording]);

        uint64_t v68 = *(void **)(v67 + 56);
        id v69 = v68;
        swift_release(v67);
      }

      else
      {

        uint64_t v68 = 0LL;
      }

      uint64_t v70 = (char *)swift_unknownObjectUnownedLoadStrong(v18);
      uint64_t v71 = v70;
      uint64_t v72 = *(void *)&v70[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v72)
      {
        swift_retain(*(void *)&v70[OBJC_IVAR___GKMatchReporter_matchRecording]);

        uint64_t v73 = *(void **)(v72 + 104);
        id v74 = v73;
        swift_release(v72);
      }

      else
      {

        uint64_t v73 = 0LL;
      }

      uint64_t v75 = (char *)swift_unknownObjectUnownedLoadStrong(v18);
      uint64_t v76 = v75;
      uint64_t v77 = *(void *)&v75[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v77)
      {
        swift_retain(*(void *)&v75[OBJC_IVAR___GKMatchReporter_matchRecording]);

        uint64_t v78 = *(void **)(v77 + 112);
        id v79 = v78;
        swift_release(v77);
      }

      else
      {

        uint64_t v78 = 0LL;
      }

      uint64_t v80 = v64;
      Class v81 = isa;
      uint64_t v82 = v100;
      uint64_t v83 = sub_100177830(a4, v36, v99, v97, v101, v100, v80, (uint64_t)isa, v68, 0LL, v73, v78);

      swift_bridgeObjectRelease(v36, v84);
      swift_bridgeObjectRelease(v81, v85);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v83, v86);
      v103(isa);
      uint64_t v87 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(GKMetricsEventMatchFailed);
      uint64_t v89 = v88;
      if (!v82)
      {

        swift_bridgeObjectRelease(v89, v94);
        goto LABEL_48;
      }

      if (v87 == v101 && v88 == v82)
      {
        swift_bridgeObjectRelease(v88, v88);
        uint64_t v93 = v97;
      }

      else
      {
        char v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v101, v82, v87, v88, 0LL);
        swift_bridgeObjectRelease(v89, v92);
        uint64_t v93 = v97;
        if ((v91 & 1) == 0)
        {

          goto LABEL_22;
        }
      }

      unint64_t v95 = (void *)swift_unknownObjectUnownedLoadStrong(v18);
      sub_100177BE0();
    }

    else
    {
      swift_bridgeObjectRelease(v36, v38);
    }

    Class v32 = v99;
    goto LABEL_52;
  }

  swift_retain(*(void *)&v19[OBJC_IVAR___GKMatchReporter_matchRecording]);

  uint64_t v22 = *(void *)(v21 + 56);
  uint64_t v17 = swift_release(v21);
  uint64_t v14 = a1 + 16;
  if (!v22) {
    goto LABEL_9;
  }
LABEL_4:
  static GKLog.daemon.getter(v17);
  uint64_t v23 = swift_retain_n(a1, 2LL);
  id v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.info.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v101 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v105 = v101;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v27 = (char *)swift_unknownObjectUnownedLoadStrong(v14);
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)&v27[OBJC_IVAR___GKMatchReporter_matchRecording];
    if (v29)
    {
      swift_retain(*(void *)&v27[OBJC_IVAR___GKMatchReporter_matchRecording]);

      uint64_t v30 = *(void *)(v29 + 16);
      unint64_t v31 = *(void *)(v29 + 24);
      swift_bridgeObjectRetain(v31);
      swift_release(v29);
    }

    else
    {

      unint64_t v31 = 0xE700000000000000LL;
      uint64_t v30 = 0x6E776F6E6B6E55LL;
    }

    uint64_t v104 = sub_100135074(v30, v31, (uint64_t *)&v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
    swift_release_n(a1, 2LL);
    swift_bridgeObjectRelease(v31, v53);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Match record not found for matchType: %s", v26, 0xCu);
    uint64_t v54 = v101;
    swift_arrayDestroy(v101, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v103(0LL);
}

uint64_t sub_100178D38()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_100178D70()
{
}

Swift::Void __swiftcall MatchReporter.recordGameStart()()
{
  uint64_t v0 = sub_10012AAEC((uint64_t)&unk_100275DB8, 24LL);
  swift_unknownObjectUnownedInit(v0 + 16);
  sub_10017A1A8((uint64_t)sub_10012A550);
  uint64_t v1 = sub_10017A17C();
  uint64_t v2 = sub_10017A15C(v1);
  __chkstk_darwin(v2);
  sub_10017A108();
  sub_10017A1D4();
  sub_10017A1C4();
  sub_10017A188();
  __chkstk_darwin(v3);
  sub_10017A124();
  sub_100179F90(&qword_1002B8F30, v4, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10017A1BC();
  sub_10017A1B4(&qword_1002B8F40);
  sub_10017A0D0(v5);
  sub_10017A0F0();
  sub_10017A1CC();
  sub_10017A14C();
  sub_10017A13C();
  sub_10017A170();
  sub_10012CF14();
  sub_10012CE58();
}

void sub_100178F88(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  uint64_t v7 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];

  if (v7)
  {
    uint64_t v9 = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
    uint64_t v10 = *(void *)&v9[OBJC_IVAR___GKMatchReporter_matchRecording];
    if (v10)
    {
      id v23 = v9;
      swift_retain(v10);

      *(CFAbsoluteTime *)(v10 + 3sub_100129678(v0 + 2) = CFAbsoluteTimeGetCurrent();
      swift_release(v10);
    }

    else
    {
    }
  }

  else
  {
    static GKLog.daemon.getter(v8);
    uint64_t v11 = swift_retain_n(a1, 2LL);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.info.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v23 = (id)swift_slowAlloc(32LL, -1LL);
      id v25 = v23;
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v15 = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)&v15[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v17)
      {
        swift_retain(*(void *)&v15[OBJC_IVAR___GKMatchReporter_matchRecording]);

        uint64_t v19 = *(void *)(v17 + 16);
        unint64_t v18 = *(void *)(v17 + 24);
        swift_bridgeObjectRetain(v18);
        swift_release(v17);
      }

      else
      {

        unint64_t v18 = 0xE700000000000000LL;
        uint64_t v19 = 0x6E776F6E6B6E55LL;
      }

      uint64_t v24 = sub_100135074(v19, v18, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      swift_release_n(a1, 2LL);
      swift_bridgeObjectRelease(v18, v20);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Match record not found at start of game for matchType: %s",  v14,  0xCu);
      id v21 = v23;
      swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {

      swift_release_n(a1, 2LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

void sub_10017921C()
{
}

void MatchReporter.recordGameComplete(completion:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_10017A1EC(OBJC_IVAR___GKMatchReporter_matchQueue);
  uint64_t v5 = sub_10012AAEC((uint64_t)&unk_100275DB8, 24LL);
  sub_10017A198(v5);
  uint64_t v6 = (void *)sub_10012AAEC((uint64_t)&unk_100275F98, 40LL);
  void v6[2] = v0;
  v6[3] = v4;
  v6[4] = v2;
  sub_10017A1A8((uint64_t)sub_10012A550);
  uint64_t v7 = sub_10017A17C();
  uint64_t v8 = sub_10017A15C(v7);
  __chkstk_darwin(v8);
  sub_10017A108();
  swift_retain(v2);
  sub_10017A1D4();
  sub_10017A1C4();
  sub_10017A188();
  __chkstk_darwin(v9);
  sub_10017A124();
  sub_100179F90(&qword_1002B8F30, v10, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10017A1BC();
  sub_10017A1B4(&qword_1002B8F40);
  sub_10017A0D0(v11);
  sub_10017A0F0();
  sub_10017A1CC();
  sub_10017A14C();
  sub_10017A13C();
  sub_10017A170();
  sub_10012CF14();
  sub_10012CE58();
}

void sub_10017939C(uint64_t a1, void (*a2)(Class))
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1 + 16;
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong(v8);
  uint64_t v10 = *(void *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];

  if (v10)
  {
    uint64_t v12 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
    os_log_type_t v13 = v12;
    uint64_t v14 = *(void *)&v12[OBJC_IVAR___GKMatchReporter_matchRecording];
    if (v14)
    {
      swift_retain(*(void *)&v12[OBJC_IVAR___GKMatchReporter_matchRecording]);

      uint64_t v15 = *(void *)(v14 + 56);
      uint64_t v11 = swift_release(v14);
      if (v15)
      {
        uint64_t v16 = swift_unknownObjectUnownedLoadStrong(v8);
        uint64_t v17 = (char *)v16;
        uint64_t v18 = *(void *)(v16 + OBJC_IVAR___GKMatchReporter_matchRecording);
        if (v18)
        {
          swift_retain(*(void *)(v16 + OBJC_IVAR___GKMatchReporter_matchRecording));

          uint64_t v20 = *(void **)(v18 + 16);
          unint64_t v19 = *(void *)(v18 + 24);
          swift_bridgeObjectRetain(v19);
          swift_release(v18);
          uint64_t v21 = swift_unknownObjectUnownedLoadStrong(v8);
          uint64_t v17 = (char *)v21;
          uint64_t v23 = *(void *)(v21 + OBJC_IVAR___GKMatchReporter_matchRecording);
          if (v23)
          {
            swift_retain(*(void *)(v21 + OBJC_IVAR___GKMatchReporter_matchRecording));

            id v24 = *(id *)(v23 + 40);
            swift_release(v23);
            uint64_t v25 = swift_unknownObjectUnownedLoadStrong(v8);
            uint64_t v17 = (char *)v25;
            uint64_t v27 = *(void *)(v25 + OBJC_IVAR___GKMatchReporter_matchRecording);
            if (v27)
            {
              swift_retain(*(void *)(v25 + OBJC_IVAR___GKMatchReporter_matchRecording));

              id v28 = *(id *)(v27 + 48);
              swift_release(v27);
              uint64_t v17 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
              uint64_t v30 = *(void *)&v17[OBJC_IVAR___GKMatchReporter_matchRecording];
              if (v30)
              {
                uint64_t v92 = a2;
                swift_retain(v30);

                double v31 = *(double *)(v30 + 32);
                swift_release(v30);
                double Current = CFAbsoluteTimeGetCurrent();
                uint64_t v33 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                uint64_t v34 = *(void *)&v33[OBJC_IVAR___GKMatchReporter_matchRecording];
                id v91 = v20;
                if (v34)
                {
                  swift_retain(v34);

                  id v35 = [objc_allocWithZone(NSNumber) initWithDouble:Current - v31];
                  uint64_t v33 = *(char **)(v34 + 64);
                  *(void *)(v34 + 64) = v35;
                  swift_release(v34);
                }

                uint64_t v90 = swift_unknownObjectUnownedLoadStrong(v8);
                unint64_t v36 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                uint64_t v37 = v36;
                uint64_t v38 = *(void *)&v36[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v38)
                {
                  swift_retain(*(void *)&v36[OBJC_IVAR___GKMatchReporter_matchRecording]);

                  uint64_t v39 = *(void *)(v38 + 80);
                  uint64_t v89 = *(void **)(v38 + 72);
                  swift_bridgeObjectRetain(v39);
                  swift_release(v38);
                }

                else
                {

                  uint64_t v89 = 0LL;
                  uint64_t v39 = 0LL;
                }

                unint64_t v88 = v19;
                uint64_t v44 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                uint64_t v45 = v44;
                uint64_t v46 = *(void *)&v44[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v46)
                {
                  swift_retain(*(void *)&v44[OBJC_IVAR___GKMatchReporter_matchRecording]);

                  unint64_t v47 = *(void **)(v46 + 88);
                  uint64_t v86 = *(void *)(v46 + 96);
                  uint64_t v87 = v47;
                  swift_bridgeObjectRetain(v86);
                  swift_release(v46);
                }

                else
                {

                  uint64_t v86 = 0LL;
                  uint64_t v87 = 0LL;
                }

                uint64_t v48 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                BOOL v49 = v48;
                uint64_t v50 = *(void *)&v48[OBJC_IVAR___GKMatchReporter_matchRecording];
                uint64_t v93 = v28;
                if (v50)
                {
                  swift_retain(v50);

                  id v51 = *(void **)(v50 + 56);
                  id v52 = v51;
                  swift_release(v50);
                }

                else
                {

                  id v51 = 0LL;
                }

                uint64_t v53 = v24;
                uint64_t v54 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                uint64_t v55 = v54;
                uint64_t v56 = *(void *)&v54[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v56)
                {
                  swift_retain(*(void *)&v54[OBJC_IVAR___GKMatchReporter_matchRecording]);

                  uint64_t v57 = *(void **)(v56 + 64);
                  id v58 = v57;
                  swift_release(v56);
                }

                else
                {

                  uint64_t v57 = 0LL;
                }

                uint64_t v59 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                id v60 = v59;
                uint64_t v61 = *(void *)&v59[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v61)
                {
                  swift_retain(*(void *)&v59[OBJC_IVAR___GKMatchReporter_matchRecording]);

                  uint64_t v62 = *(void **)(v61 + 104);
                  id v63 = v62;
                  swift_release(v61);
                }

                else
                {

                  uint64_t v62 = 0LL;
                }

                uint64_t v64 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                uint64_t v65 = v64;
                uint64_t v66 = *(void *)&v64[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v66)
                {
                  swift_retain(*(void *)&v64[OBJC_IVAR___GKMatchReporter_matchRecording]);

                  uint64_t v67 = *(void **)(v66 + 112);
                  id v68 = v67;
                  swift_release(v66);
                }

                else
                {

                  uint64_t v67 = 0LL;
                }

                uint64_t v83 = v62;
                id v69 = v62;
                uint64_t v82 = v51;
                uint64_t v71 = (void *)v90;
                uint64_t v70 = (uint64_t)v91;
                id v91 = v51;
                unint64_t v72 = v88;
                id v85 = v53;
                uint64_t v73 = v53;
                uint64_t v74 = v86;
                uint64_t v75 = v39;
                uint64_t v76 = sub_100177830(v70, v88, v73, v93, v89, v39, v87, v86, v82, v57, v83, v67);

                swift_bridgeObjectRelease(v72, v77);
                swift_bridgeObjectRelease(v74, v78);
                swift_bridgeObjectRelease(v75, v79);
                Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v76, v81);
                v92(isa);

                goto LABEL_20;
              }

              swift_bridgeObjectRelease(v19, v29);
            }

            else
            {
              swift_bridgeObjectRelease(v19, v26);
            }
          }

          else
          {
            swift_bridgeObjectRelease(v19, v22);
          }
        }

        a2(0LL);
LABEL_20:
        uint64_t v93 = (void *)swift_unknownObjectUnownedLoadStrong(v8);
        sub_100177BE0();

        return;
      }
    }

    else
    {
    }
  }

  uint64_t v40 = static GKLog.daemon.getter(v11);
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.info.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    id v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Match record not found at finish gameplay.", v43, 2u);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  a2(0LL);
}

uint64_t sub_100179944()
{
  return sub_100179950((void (*)(void))&_swift_release);
}

uint64_t sub_100179950(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

void sub_100179984()
{
}

void static MatchReporter.onInviteReceived(bulletin:)()
{
  uint64_t v54 = v0;
  uint64_t v55 = v1;
  uint64_t v3 = v2;
  Class v4 = (Class)type metadata accessor for Logger(0LL);
  Class isa = v4[-1].isa;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = sub_10017A1DC(v6, "gameDescriptor");
  if (!v9)
  {
LABEL_11:
    static GKLog.daemon.getter(v9);
    id v30 = v3;
    double v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.info.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      Class v51 = v4;
      uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v50 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v33 = 138412290;
      id v52 = v30;
      id v34 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      uint64_t v35 = (uint64_t)v50;
      *uint64_t v50 = v30;

      Class v4 = v51;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "Not emitting MAF event for incomplete bulletin localPlayerID: %@",  v33,  0xCu);
      uint64_t v36 = sub_100129274(&qword_1002B8ED0);
      swift_arrayDestroy(v35, 1LL, v36);
      sub_10012CE24(v35);
      sub_10012CE24((uint64_t)v33);
    }

    else
    {

      double v31 = (os_log_s *)v30;
    }

    ((void (*)(char *, Class))isa[1].isa)(v8, v4);
    sub_10012CE58();
    return;
  }

  uint64_t v10 = v9;
  id v11 = [v9 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v13 = v12;

  uint64_t v15 = sub_100148698(v14, (SEL *)&selRef_receiverPlayerID);
  if (!v16)
  {
    uint64_t v28 = v13;
LABEL_10:
    id v9 = (id)swift_bridgeObjectRelease(v28, v16);
    goto LABEL_11;
  }

  uint64_t v17 = v15;
  uint64_t v18 = v16;
  unint64_t v19 = (objc_class *)sub_100148698(v15, (SEL *)&selRef_originatorPlayerID);
  if (!v20)
  {
    sub_1001322A0((uint64_t)v19, 0LL);
    uint64_t v28 = v18;
    goto LABEL_10;
  }

  uint64_t v21 = v20;
  Class v51 = v19;
  uint64_t v22 = sub_100148698((uint64_t)v19, (SEL *)&selRef_sessionID);
  if (!v23)
  {
    sub_1001322A0(v22, 0LL);
    swift_bridgeObjectRelease(v18, v29);
    uint64_t v28 = v21;
    goto LABEL_10;
  }

  uint64_t v24 = v23;
  uint64_t v25 = v22;
  uint64_t v26 = (uint64_t)sub_10017A1DC(v22, "isMessageBasedInvite");
  if ((v26 & 1) != 0)
  {
    uint64_t v27 = 2LL;
  }

  else
  {
    uint64_t v26 = (uint64_t)sub_10017A1DC(v26, "isSharePlayInvite");
    if ((v26 & 1) != 0)
    {
      uint64_t v27 = 4LL;
    }

    else
    {
      uint64_t v26 = (uint64_t)sub_10017A1DC(v26, "isNearbyInvite");
      uint64_t v27 = 3LL;
      if (!(_DWORD)v26) {
        uint64_t v27 = 1LL;
      }
    }
  }

  uint64_t v50 = (void *)v27;
  id v37 = sub_10017A1DC(v26, "serverHosted");
  id v38 = sub_10017A1DC((uint64_t)v37, "transportVersionToUse");
  uint64_t v39 = v38;
  if (v38)
  {
    id v40 = sub_10017A1DC((uint64_t)v38, "integerValue");
  }

  else
  {
    id v40 = 0LL;
  }

  ((void (*)(void))type metadata accessor for MultiplayerActivityReporter)(0LL);
  uint64_t v41 = ((uint64_t (*)(void *, id, uint64_t, uint64_t, Class, uint64_t, uint64_t, uint64_t, id, BOOL))static MultiplayerActivityReporter.makeInviteReceivedFields(approach:isHosted:localPlayerID:senderPlayerID:sessionID:transportVersion:))( v50,  v37,  v17,  v18,  v51,  v21,  v25,  v24,  v40,  v39 == 0LL);
  swift_bridgeObjectRelease(v24, v42);
  swift_bridgeObjectRelease(v21, v43);
  swift_bridgeObjectRelease(v18, v44);
  id v45 = [(id)objc_opt_self(GKAMPController) controller];
  NSString v46 = String._bridgeToObjectiveC()();
  sub_1001322A0((uint64_t)v46, v47);
  Class v51 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v41, v48);
  [v45 reportMultiplayerActivityEventWithHostAppBundleId:v46 metricsFields:v51];
}

uint64_t sub_100179E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 7sub_100129678(v0 + 2) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)(v4 + swift_unknownObjectUnownedDestroy(v0 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 40) = a3;
  *(void *)(v4 + 48) = a4;
  *(CFAbsoluteTime *)(v4 + 3sub_100129678(v0 + 2) = CFAbsoluteTimeGetCurrent();
  return v4;
}

uint64_t sub_100179E88(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(*(void *)(v2 + 80), v3);
  swift_bridgeObjectRelease(*(void *)(v2 + 96), v4);

  return v2;
}

uint64_t sub_100179EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100179E88(a1, a2);
  return swift_deallocClassInstance(v2, 120LL, 7LL);
}

void sub_100179F00(void (*a1)(void))
{
}

uint64_t type metadata accessor for MatchReporter()
{
  return objc_opt_self(&OBJC_CLASS___GKMatchReporter);
}

uint64_t type metadata accessor for MultiplayerRecording()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCoreP33_4AEC5DA5437D5D761880B6B27EADF34520MultiplayerRecording);
}

uint64_t sub_100179F5C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100179F80()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

void sub_100179F90(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_100132514();
}

void sub_100179FCC(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_1001292F8(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }

  sub_100132514();
}

unint64_t sub_10017A008()
{
  unint64_t result = qword_1002BA0C8;
  if (!qword_1002BA0C8)
  {
    uint64_t v1 = sub_100129640(255LL, (unint64_t *)&qword_1002B82D0, &OBJC_CLASS___NSNumber_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1002BA0C8);
  }

  return result;
}

uint64_t sub_10017A058(uint64_t a1)
{
  uint64_t v2 = sub_100129274(&qword_1002BA0D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10017A0D0(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v3, a1, v1, v2);
}

uint64_t sub_10017A0F0()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v2, v0);
}

uint64_t sub_10017A108()
{
  return swift_retain(v0);
}

  ;
}

uint64_t sub_10017A13C()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 8))(v1, *(void *)(v2 - 152));
}

uint64_t sub_10017A14C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10017A15C(uint64_t result)
{
  *(void *)(v1 - 15sub_100129678(v0 + 2) = result;
  return result;
}

uint64_t sub_10017A170()
{
  return swift_release(v0);
}

uint64_t sub_10017A17C()
{
  return type metadata accessor for DispatchQoS(0LL);
}

  ;
}

uint64_t sub_10017A198(uint64_t a1)
{
  return swift_unknownObjectUnownedInit(a1 + 16, v1);
}

void *sub_10017A1A8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 11sub_100129678(v0 + 2) = a1;
  *(void *)(v2 - 104) = v1;
  return _Block_copy((const void *)(v2 - 128));
}

void sub_10017A1B4(unint64_t *a1)
{
}

uint64_t sub_10017A1BC()
{
  return sub_100129274(v0);
}

uint64_t sub_10017A1C4()
{
  return type metadata accessor for DispatchWorkItemFlags(0LL);
}

void sub_10017A1CC()
{
}

uint64_t sub_10017A1D4()
{
  return static DispatchQoS.unspecified.getter();
}

id sub_10017A1DC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_10017A1E4()
{
  return swift_release(*(void *)(v0 + 16));
}

void sub_10017A1EC(uint64_t a1@<X8>)
{
  *(void *)(v2 - 144) = *(void *)(v1 + a1);
}

void sub_10017A21C(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v157 = a3;
  uint64_t v152 = type metadata accessor for InGameBannerData.BannerType(0LL);
  uint64_t v149 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v151 = (unint64_t *)((char *)&v137 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = type metadata accessor for InGameBannerData(0LL);
  uint64_t v155 = *(void *)(v5 - 8);
  uint64_t v156 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v153 = (os_log_s *)((char *)&v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v6);
  id v154 = (char *)&v137 - v8;
  uint64_t v158 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v158 - 8);
  uint64_t v10 = __chkstk_darwin(v158);
  uint64_t v12 = (uint8_t *)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v146 = (char *)&v137 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v150 = (char *)&v137 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v147 = (char *)&v137 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v148 = (uint8_t *)&v137 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (uint8_t *)&v137 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (uint8_t *)&v137 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v137 - v28;
  uint64_t v30 = static GKLog.daemon.getter(v27);
  double v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.info.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "LeaderboardBeatFriendScoreBulletin: loadBulletinsForPushNotification:",  v33,  2u);
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  id v34 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v35 = v158;
  v34(v29, v158);
  sub_100166684(a1, (uint64_t)v164);
  sub_10017B0F0((uint64_t)v164, (uint64_t)v165);
  uint64_t v36 = sub_100147F40((uint64_t)v165);
  if ((_DWORD)v36 == 1)
  {
    uint64_t v37 = static GKLog.daemon.getter(v36);
    id v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.info.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      id v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v40 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "LeaderboardBeatFriendScoreBulletin: failed to decode relationships.",  v40,  2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    uint64_t v41 = v26;
LABEL_28:
    v34((char *)v41, v35);
LABEL_29:
    uint64_t v66 = v157;
    goto LABEL_30;
  }

  uint64_t v42 = v167;
  uint64_t v43 = v168;
  uint64_t v44 = v169;
  uint64_t v143 = v170;
  uint64_t v144 = v166;
  uint64_t v145 = v171;
  uint64_t v159 = 0x656C746974LL;
  unint64_t v160 = 0xE500000000000000LL;
  AnyHashable.init<A>(_:)(&v159);
  sub_10012CFE4(a1, &v162);
  sub_10012A92C((uint64_t)v161);
  if (!v163)
  {
    sub_100147FA0(v164);
    uint64_t v61 = sub_100149210((uint64_t)&v162);
LABEL_25:
    uint64_t v62 = static GKLog.daemon.getter(v61);
    id v63 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v64 = static os_log_type_t.info.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "LeaderboardBeatFriendScoreBulletin: failed to get title or body.",  v65,  2u);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    uint64_t v41 = v12;
    goto LABEL_28;
  }

  if ((swift_dynamicCast(&v159, &v162, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    uint64_t v61 = (uint64_t)sub_100147FA0(v164);
    goto LABEL_25;
  }

  uint64_t v142 = v34;
  unint64_t v45 = v160;
  uint64_t v140 = v159;
  uint64_t v159 = 2036625250LL;
  unint64_t v160 = 0xE400000000000000LL;
  AnyHashable.init<A>(_:)(&v159);
  sub_10012CFE4(a1, &v162);
  sub_10012A92C((uint64_t)v161);
  if (!v163)
  {
    swift_bridgeObjectRelease(v45, v46);
    sub_100147FA0(v164);
    uint64_t v61 = sub_100149210((uint64_t)&v162);
LABEL_24:
    id v34 = v142;
    goto LABEL_25;
  }

  unint64_t v141 = v45;
  if ((swift_dynamicCast(&v159, &v162, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(v141, v47);
    uint64_t v61 = (uint64_t)sub_100147FA0(v164);
    goto LABEL_24;
  }

  unint64_t v48 = v160;
  id v34 = v142;
  if (!v42)
  {
    swift_bridgeObjectRelease(v160, v47);
    swift_bridgeObjectRelease(v141, v68);
    id v69 = sub_100147FA0(v164);
    uint64_t v70 = static GKLog.daemon.getter(v69);
    uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
    os_log_type_t v72 = static os_log_type_t.info.getter(v71);
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v71,  v72,  "LeaderboardBeatFriendScoreBulletin: failed to get game bundle identifier.",  v73,  2u);
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    uint64_t v41 = v23;
    goto LABEL_28;
  }

  uint64_t v49 = (uint8_t *)v159;
  swift_bridgeObjectRetain(v44);
  unint64_t v51 = v141;
  if (!v145)
  {
    swift_bridgeObjectRelease(v44, v50);
    swift_bridgeObjectRelease(v48, v74);
    swift_bridgeObjectRelease(v51, v75);
    uint64_t v76 = sub_100147FA0(v164);
    uint64_t v77 = v148;
    uint64_t v78 = static GKLog.daemon.getter(v76);
    uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
    os_log_type_t v80 = static os_log_type_t.info.getter(v79);
    if (os_log_type_enabled(v79, v80))
    {
      uint64_t v81 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v81 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v79,  v80,  "LeaderboardBeatFriendScoreBulletin: failed to get leaderboard identifier.",  v81,  2u);
      swift_slowDealloc(v81, -1LL, -1LL);
    }

    uint64_t v41 = v77;
    goto LABEL_28;
  }

  uint64_t v148 = v49;
  swift_bridgeObjectRetain(v145);
  uint64_t v52 = v144;
  uint64_t v138 = v44;
  uint64_t v139 = v43;
  unint64_t v137 = v48;
  if (v144)
  {
    int64_t v53 = *(void *)(v144 + 16);
    if (v53)
    {
      v161[0] = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v144);
      sub_1001375E4(0LL, v53, 0);
      uint64_t v54 = (void *)v161[0];
      uint64_t v55 = (uint64_t *)(v52 + 40);
      do
      {
        uint64_t v57 = *(v55 - 1);
        uint64_t v56 = *v55;
        v161[0] = (uint64_t)v54;
        unint64_t v59 = v54[2];
        unint64_t v58 = v54[3];
        swift_bridgeObjectRetain(v56);
        if (v59 >= v58 >> 1)
        {
          sub_1001375E4((char *)(v58 > 1), v59 + 1, 1);
          uint64_t v54 = (void *)v161[0];
        }

        v55 += 6;
        v54[2] = v59 + 1;
        id v60 = &v54[2 * v59];
        v60[4] = v57;
        uint64_t v60[5] = v56;
        --v53;
      }

      while (v53);
      sub_100147FA0(v164);
      swift_bridgeObjectRelease(v144, v82);
      uint64_t v35 = v158;
    }

    else
    {
      sub_100147FA0(v164);
      uint64_t v54 = _swiftEmptyArrayStorage;
    }
  }

  else
  {
    sub_100147FA0(v164);
    uint64_t v54 = 0LL;
  }

  uint64_t v84 = v155;
  uint64_t v83 = v156;
  id v85 = v153;
  uint64_t v86 = v154;
  uint64_t v87 = (void *)objc_opt_self(&OBJC_CLASS___GKClientProxy);
  uint64_t v88 = v138;
  id v89 = sub_10017B174(v139, v138, v87);
  if (!v89)
  {
    swift_bridgeObjectRelease(v145, v90);
    swift_bridgeObjectRelease(v137, v97);
    swift_bridgeObjectRelease(v141, v98);
    uint64_t v100 = swift_bridgeObjectRelease(v54, v99);
    uint64_t v101 = v147;
    static GKLog.daemon.getter(v100);
    uint64_t v102 = swift_bridgeObjectRetain(v88);
    uint64_t v103 = (os_log_s *)Logger.logObject.getter(v102);
    os_log_type_t v104 = static os_log_type_t.info.getter(v103);
    unint64_t v105 = v88;
    if (os_log_type_enabled(v103, v104))
    {
      unint64_t v106 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v107 = swift_slowAlloc(32LL, -1LL);
      v161[0] = v107;
      *(_DWORD *)unint64_t v106 = 136315138;
      swift_bridgeObjectRetain(v105);
      *(void *)&__int128 v162 = sub_100135074(v139, v105, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, (char *)&v162 + 8);
      swift_bridgeObjectRelease_n(v105, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v103,  v104,  "LeaderboardBeatFriendScoreBulletin: No client process found for game bundle identifier: %s.",  v106,  0xCu);
      swift_arrayDestroy(v107, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v107, -1LL, -1LL);
      swift_slowDealloc(v106, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v88, 2LL);
    }

    v142(v101, v35);
    goto LABEL_29;
  }

  id v91 = v89;
  swift_bridgeObjectRelease(v88, v90);
  uint64_t v93 = v151;
  unint64_t v94 = v141;
  if (!v54) {
    goto LABEL_48;
  }
  if (!v54[2])
  {
    swift_bridgeObjectRelease(v54, v92);
LABEL_48:
    uint64_t v108 = v145;
    *uint64_t v93 = v143;
    v93[1] = v108;
    uint64_t v96 = (unsigned int *)&enum case for InGameBannerData.BannerType.topPercentageOnLeaderboard(_:);
    goto LABEL_49;
  }

  uint64_t v95 = v145;
  *uint64_t v151 = v143;
  v93[1] = v95;
  v93[2] = v54;
  uint64_t v96 = (unsigned int *)&enum case for InGameBannerData.BannerType.youBeatFriendScore(_:);
LABEL_49:
  (*(void (**)(void *, void, uint64_t))(v149 + 104))(v93, *v96, v152);
  InGameBannerData.init(type:title:body:image:clipData:)( v93,  v140,  v94,  v148,  v137,  0LL,  0xF000000000000000LL,  0LL,  0xF000000000000000LL);
  uint64_t v109 = static InGameBannerData.encode(bannerData:)(v86);
  Swift::String v111 = v150;
  if (v110 >> 60 == 15)
  {
    Swift::String v112 = v146;
    uint64_t v113 = static GKLog.general.getter(v109);
    unint64_t v114 = (os_log_s *)Logger.logObject.getter(v113);
    os_log_type_t v115 = static os_log_type_t.error.getter(v114);
    if (os_log_type_enabled(v114, v115))
    {
      uint64_t v116 = v91;
      uint64_t v117 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v117 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v114,  v115,  "LeaderboardBeatFriendScoreBulletin: InGameBannerData could not be encoded",  v117,  2u);
      uint64_t v118 = v117;
      id v91 = v116;
      uint64_t v83 = v156;
      swift_slowDealloc(v118, -1LL, -1LL);
    }

    v142(v112, v35);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v86, v83);
  }

  else
  {
    unint64_t v119 = v110;
    uint64_t v158 = v109;
    static GKLog.daemon.getter(v109);
    uint64_t v120 = v83;
    uint64_t v121 = (*(uint64_t (**)(os_log_s *, char *, uint64_t))(v84 + 16))(v85, v86, v83);
    uint64_t v122 = v111;
    os_log_type_t v123 = (os_log_s *)Logger.logObject.getter(v121);
    os_log_type_t v124 = static os_log_type_t.info.getter(v123);
    uint64_t v153 = v123;
    if (os_log_type_enabled(v123, v124))
    {
      uint64_t v125 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v149 = swift_slowAlloc(32LL, -1LL);
      v161[0] = v149;
      *(_DWORD *)uint64_t v125 = 136315138;
      uint64_t v147 = (char *)(v125 + 4);
      uint64_t v148 = v125;
      uint64_t v126 = v151;
      InGameBannerData.type.getter();
      uint64_t v127 = String.init<A>(describing:)(v126, v152);
      unint64_t v129 = v128;
      *(void *)&__int128 v162 = sub_100135074(v127, v128, v161);
      uint64_t v120 = v156;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, (char *)&v162 + 8);
      swift_bridgeObjectRelease(v129, v130);
      uint64_t v131 = *(void (**)(os_log_s *, uint64_t))(v155 + 8);
      v131(v85, v120);
      uint64_t v132 = v153;
      os_log_type_t v133 = v124;
      uint64_t v134 = v148;
      _os_log_impl( (void *)&_mh_execute_header,  v153,  v133,  "LeaderboardBeatFriendScoreBulletin: Notifying client with banner %s.",  v148,  0xCu);
      uint64_t v135 = v149;
      swift_arrayDestroy(v149, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v135, -1LL, -1LL);
      uint64_t v86 = v154;
      swift_slowDealloc(v134, -1LL, -1LL);
    }

    else
    {
      uint64_t v131 = *(void (**)(os_log_s *, uint64_t))(v155 + 8);
      v131(v85, v120);
    }

    v142(v122, v35);
    uint64_t v136 = v158;
    sub_10017B1C0(v158, v119, v91);
    sub_100135144(v136, v119);

    v131((os_log_s *)v86, v120);
  }

  uint64_t v66 = v157;
LABEL_30:
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  ((void (**)(void, Class))v66)[2](v66, isa);

  _Block_release(v66);
}

id sub_10017AF00(uint64_t a1)
{
  if (a1)
  {
    v3.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1, v4);
  }

  else
  {
    v3.super.Class isa = 0LL;
  }

  v13.receiver = v1;
  v13.Class super_class = (Class)type metadata accessor for LeaderboardBeatFriendScoreBulletin();
  id v11 = sub_100148638((uint64_t)v13.super_class, "initWithPushNotification:", v5, v6, v7, v8, v9, v10, v13);

  if (v11) {
  return v11;
  }
}

id sub_10017AFE8()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for LeaderboardBeatFriendScoreBulletin();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_10017B038(void *a1)
{
  v11.receiver = v1;
  v11.Class super_class = (Class)type metadata accessor for LeaderboardBeatFriendScoreBulletin();
  id v9 = sub_100148638((uint64_t)v11.super_class, "initWithCoder:", v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id sub_10017B0A0()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for LeaderboardBeatFriendScoreBulletin();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LeaderboardBeatFriendScoreBulletin()
{
  return objc_opt_self(&OBJC_CLASS___GKLeaderboardBeatFriendScoreBulletin);
}

uint64_t sub_10017B0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B86D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017B138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2, a2);
    swift_bridgeObjectRelease(a4, v8);
    return swift_bridgeObjectRelease(a6, v9);
  }

  return result;
}

id sub_10017B174(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a3 clientForBundleID:v4];

  return v5;
}

void sub_10017B1C0(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 presentBannerWithNotification:isa];
}

void sub_10017B204(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static GKLog.general.getter(v6);
  uint64_t v9 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = v4;
    uint64_t v13 = a1;
    uint64_t v14 = (uint8_t *)v12;
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v18 = sub_100135074(v13, a2, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    sub_10012CE24(v15);
    sub_10012CE24((uint64_t)v14);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v17);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }

  exit(-1);
}

uint64_t type metadata accessor for ProcessExiter()
{
  return objc_opt_self(&OBJC_CLASS___GKProcessExiter);
}

uint64_t sub_10017B3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v24[0];
  uint64_t v22 = v24[1];
  int64_t v7 = v24[3];
  unint64_t v8 = v24[4];
  int64_t v25 = (unint64_t)(v24[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v8) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v12 = v11 | (v7 << 6);
  while (1)
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v12);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    _OWORD v23[2] = *v17;
    v23[3] = v19;
    v23[0] = a2;
    v23[1] = a3;
    unint64_t v20 = sub_10012B89C();
    swift_bridgeObjectRetain(v19);
    if ((StringProtocol.contains<A>(_:)(v23, &type metadata for String, &type metadata for String, v20, v20) & 1) != 0)
    {
      swift_bridgeObjectRelease(a3, v21);
      swift_release(v6);
      return v18;
    }

    uint64_t result = swift_bridgeObjectRelease(v19, v21);
    if (v8) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v13 >= v25) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v13);
    int64_t v15 = v7 + 1;
    if (!v14)
    {
      int64_t v15 = v7 + 2;
      if (v7 + 2 >= v25) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v22 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v7 + 3;
        if (v7 + 3 >= v25) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v22 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v7 + 4;
          if (v7 + 4 >= v25) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v22 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v7 + 5;
            if (v7 + 5 >= v25) {
              goto LABEL_23;
            }
            unint64_t v14 = *(void *)(v22 + 8 * v15);
            if (!v14)
            {
              int64_t v16 = v7 + 6;
              while (v16 < v25)
              {
                unint64_t v14 = *(void *)(v22 + 8 * v16++);
                if (v14)
                {
                  int64_t v15 = v16 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_10017B5F8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v32 = a1;
    }
    else {
      uint64_t v32 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v32);
    uint64_t v6 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_23:
    uint64_t v10 = 0LL;
    goto LABEL_24;
  }

  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v6) {
    goto LABEL_23;
  }
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    return result;
  }

  uint64_t v61 = a1;
  uint64_t v63 = a2;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  unint64_t v66 = a1 & 0xC000000000000001LL;
  uint64_t v64 = v6;
  do
  {
    if (v66) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a1);
    }
    else {
      id v11 = *(id *)(a1 + 8 * v9 + 32);
    }
    unint64_t v12 = v11;
    uint64_t v13 = sub_10017BB90(v11);
    if (v14)
    {
      uint64_t v15 = v13;
      uint64_t v16 = v14;
      swift_bridgeObjectRetain(v14);
      uint64_t v17 = swift_bridgeObjectRetain(v63);
      uint64_t v18 = sub_10017B3F8(v17, v15, v16);
      uint64_t v20 = v19;
      swift_bridgeObjectRelease(v63, v19);
      if (v20)
      {
        uint64_t v21 = sub_10012D02C(v18, v20, v63);
        uint64_t v23 = v22;
        uint64_t v24 = swift_bridgeObjectRelease(v20, v22);
        if (v23)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
          sub_1001881F0(v21, v23, v15, v16, isUniquelyReferenced_nonNull_native);

          sub_1001451E0(v27, v28);
          swift_bridgeObjectRelease(0x8000000000000000LL, v29);
        }

        else
        {
          sub_1001451E0(v24, v25);
        }

        a1 = v61;
      }

      else
      {

        sub_1001451E0(v30, v31);
      }

      uint64_t v6 = v64;
    }

    else
    {
    }

    ++v9;
  }

  while (v6 != v9);
LABEL_24:
  swift_bridgeObjectRelease(a1, v8);
  uint64_t v33 = sub_100129640(0LL, (unint64_t *)&qword_1002B8928, &OBJC_CLASS___CNContact_ptr);
  unint64_t v34 = sub_10017BB04();
  uint64_t v62 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v33, &type metadata for String, v34);
  uint64_t v35 = a3;
  if (a3 >> 62) {
    goto LABEL_49;
  }
  uint64_t v36 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v35 = swift_bridgeObjectRetain(a3);
  if (v36)
  {
    do
    {
      id v60 = v10;
      unint64_t v38 = 0LL;
      while (1)
      {
        if ((a3 & 0xC000000000000001LL) != 0)
        {
          uint64_t v35 = specialized _ArrayBuffer._getElementSlowPath(_:)(v38, a3);
        }

        else
        {
          if (v38 >= *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_48;
          }
          uint64_t v35 = (uint64_t)*(id *)(a3 + 32 + 8 * v38);
        }

        os_log_type_t v39 = (void *)v35;
        if (__OFADD__(v38++, 1LL)) {
          break;
        }
        id v41 = objc_msgSend((id)v35, "handles", v60);
        uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, &type metadata for String);

        uint64_t v43 = *(void *)(v42 + 16);
        if (v43)
        {
          swift_bridgeObjectRetain(v42);
          uint64_t v10 = (void *)(v42 + 40);
          while (1)
          {
            if (*(void *)(v5 + 16))
            {
              unint64_t v44 = *v10;
              swift_bridgeObjectRetain(*v10);
              swift_bridgeObjectRetain(v5);
              sub_10017BBF0();
              char v46 = v45;
              swift_bridgeObjectRelease(v5, v45);
              if ((v46 & 1) != 0)
              {
                sub_10017BC00();
                if (*(void *)(v5 + 16) && (unint64_t v50 = sub_10017BBF0(), (v51 & 1) != 0))
                {
                  uint64_t v52 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v50);
                  uint64_t v53 = *v52;
                  uint64_t v54 = v52[1];
                  swift_bridgeObjectRetain(v54);
                  swift_bridgeObjectRelease(v44, v55);
                  id v56 = v39;
                  char v57 = swift_isUniquelyReferenced_nonNull_native(v62);
                  sub_1001880E0(v53, v54, v56, v57);

                  unint64_t v49 = 0x8000000000000000LL;
                }

                else
                {

                  unint64_t v49 = v44;
                }

                goto LABEL_44;
              }

              swift_bridgeObjectRelease(v44, v47);
            }

            v10 += 2;
            if (!--v43)
            {

              uint64_t v35 = sub_10017BC00();
              goto LABEL_45;
            }
          }
        }

        unint64_t v49 = v42;
LABEL_44:
        uint64_t v35 = swift_bridgeObjectRelease(v49, v48);
LABEL_45:
        if (v38 == v36) {
          goto LABEL_46;
        }
      }

      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      if (v35 < 0) {
        uint64_t v59 = v35;
      }
      else {
        uint64_t v59 = v35 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v35);
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter(v59);
      uint64_t v36 = v35;
    }

    while (v35);
  }

unint64_t sub_10017BB04()
{
  unint64_t result = qword_1002BA130;
  if (!qword_1002BA130)
  {
    uint64_t v1 = sub_100129640(255LL, (unint64_t *)&qword_1002B8928, &OBJC_CLASS___CNContact_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1002BA130);
  }

  return result;
}

uint64_t sub_10017BB58@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0LL;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_10017BB90(void *a1)
{
  id v1 = [a1 handle];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

unint64_t sub_10017BBF0()
{
  return sub_10014A480(v0, v1);
}

uint64_t sub_10017BC00()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10017BC10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B83B8);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  *uint64_t v6 = a2;
  return swift_continuation_throwingResumeWithError(a1, v5);
}

uint64_t sub_10017BC60(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 4_swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.GKMetricsPipeline", 32LL, "init()", 6LL, 0LL) = a2;
  return swift_continuation_throwingResume();
}

uint64_t sub_10017BC70(uint64_t a1, uint64_t a2)
{
  return sub_10017BC8C(a1, a2, &qword_1002BA150);
}

uint64_t sub_10017BC80(uint64_t a1, uint64_t a2)
{
  return sub_10017BC8C(a1, a2, &qword_1002BA158);
}

uint64_t sub_10017BC8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = a2;
  sub_10014818C((uint64_t)&v5, *(void *)(*(void *)(a1 + 64) + 40LL), a3);
  return swift_continuation_throwingResume(a1);
}

uint64_t sub_10017BCCC(uint64_t a1)
{
  v2[30] = a1;
  v2[31] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[32] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[33] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[34] = swift_task_alloc(v5);
  v2[35] = swift_task_alloc(v5);
  return sub_100144664((uint64_t)sub_10017BD34, 0LL, 0LL);
}

uint64_t sub_10017BD34()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = (void *)v1[30];
  uint64_t v4 = sub_100129274(&qword_1002B8708);
  uint64_t v5 = swift_allocObject(v4, 64LL, 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectUnownedDestroy(v0 + 16) = xmmword_1001F3480;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 3sub_100129678(v0 + 2) = 0xD000000000000018LL;
  *(void *)(v5 + 40) = 0x800000010024E430LL;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v1[36] = isa;
  swift_bridgeObjectRelease(v5, v7);
  sub_100129B78();
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v8);
  uint64_t v11 = static OS_dispatch_queue.global(qos:)(v10);
  v1[37] = v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
  swift_task_dealloc(v10);
  v1[7] = v1 + 28;
  v1[2] = v1;
  v1[3] = sub_10017BECC;
  uint64_t v12 = swift_continuation_init(v2, 1LL);
  v1[10] = _NSConcreteStackBlock;
  v1 += 10;
  v1[1] = 0x40000000LL;
  v1[2] = sub_10017C318;
  v1[3] = &unk_100276050;
  v1[4] = v12;
  [v3 getValuesForKeys:isa queue:v11 completion:v1];
  return swift_continuation_await(v2);
}

uint64_t sub_10017BECC()
{
  void *v1 = *v0;
  uint64_t v3 = *(void *)(v2 + 48);
  *(void *)(v2 + 304) = v3;
  if (v3) {
    uint64_t v4 = sub_10017C0DC;
  }
  else {
    uint64_t v4 = sub_10017BF1C;
  }
  return sub_100144664((uint64_t)v4, 0LL, 0LL);
}

uint64_t sub_10017BF1C()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void **)(v0 + 288);

  if (v1)
  {
    *(void *)(v0 + 19sub_100129678(v0 + 2) = 0xD000000000000018LL;
    *(void *)(v0 + 200) = 0x800000010024E430LL;
    AnyHashable.init<A>(_:)(v0 + 192);
    sub_10012CFE4(v1, (_OWORD *)(v0 + 160));
    sub_10012B950(v4, v5);
    sub_10012A92C(v0 + 120);
    if (*(void *)(v0 + 184))
    {
      uint64_t v6 = sub_100129274(&qword_1002B8E80);
      uint64_t v3 = swift_dynamicCast(v0 + 232, v0 + 160, (char *)&type metadata for Any + 8, v6, 6LL);
      if ((v3 & 1) != 0)
      {
        if (*(void *)(*(void *)(v0 + 232) + 16LL))
        {
          uint64_t v8 = sub_10017C38C(*(void *)(v0 + 232));
          sub_10012B950(v8, v9);
          goto LABEL_11;
        }

        uint64_t v3 = sub_10012B950(v3, v7);
      }
    }

    else
    {
      uint64_t v3 = sub_100149210(v0 + 160);
    }
  }

  uint64_t v10 = static GKLog.daemon.getter(v3);
  uint64_t v8 = Logger.logObject.getter(v10);
  os_log_type_t v11 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled((os_log_t)v8, v11))
  {
    uint64_t v12 = (uint8_t *)sub_10012CE30(2LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  v11,  "Fetched empty list of trusted image domains. Allowing all.",  v12,  2u);
    sub_10012CE24((uint64_t)v12);
  }

  uint64_t v13 = *(void *)(v0 + 280);
  uint64_t v14 = *(void *)(v0 + 256);
  uint64_t v15 = *(void *)(v0 + 264);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  LOBYTE(swift_bridgeObjectRelease(0xE000000000000000LL, v8) = 1;
LABEL_11:
  uint64_t v16 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8 & 1);
}

uint64_t sub_10017C0DC(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 296);
  uint64_t v2 = *(void *)(v1 + 304);
  uint64_t v4 = *(void **)(v1 + 288);
  swift_willThrow(a1);

  static GKLog.daemon.getter(v5);
  swift_errorRetain(v2);
  uint64_t v6 = swift_errorRetain(v2);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(v1 + 304);
    uint64_t v20 = *(void *)(v1 + 264);
    uint64_t v21 = *(void *)(v1 + 256);
    uint64_t v22 = *(void *)(v1 + 272);
    uint64_t v10 = sub_10012CE30(22LL);
    os_log_type_t v11 = (void *)sub_10012CE30(8LL);
    uint64_t v12 = sub_10012CE30(32LL);
    uint64_t v23 = v12;
    *(_DWORD *)uint64_t v10 = 136315394;
    *(void *)(v1 + 2swift_unknownObjectUnownedDestroy(v0 + 16) = sub_100135074(0xD000000000000018LL, 0x800000010024E430LL, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 216, v1 + 224);
    *(_WORD *)(v10 + 1sub_100129678(v0 + 2) = 2112;
    swift_errorRetain(v9);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v1 + 208) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 208, v1 + 216);
    *os_log_type_t v11 = v13;
    sub_100158F94();
    sub_100158F94();
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Failed to fetch bag values for key: %s, error: %@. Allowing all.",  (uint8_t *)v10,  0x16u);
    uint64_t v14 = sub_100129274(&qword_1002B8ED0);
    swift_arrayDestroy(v11, 1LL, v14);
    sub_10012CE24((uint64_t)v11);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    sub_10012CE24(v12);
    sub_10012CE24(v10);

    sub_100158F94();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  }

  else
  {
    uint64_t v16 = *(void *)(v1 + 264);
    uint64_t v15 = *(void *)(v1 + 272);
    uint64_t v17 = *(void *)(v1 + 256);
    sub_100132428();
    sub_100132428();
    sub_100132428();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }

  uint64_t v18 = *(void *)(v1 + 272);
  swift_task_dealloc(*(void *)(v1 + 280));
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(1LL);
}

uint64_t sub_10017C318(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    return sub_10017BC10(v3, (uint64_t)a3);
  }
  if (a2) {
    a2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  return sub_10017BC8C(v3, a2, &qword_1002B9B30);
}

uint64_t sub_10017C38C(uint64_t a1)
{
  uint64_t v3 = sub_10017C634(v1);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain(a1);
      uint64_t v7 = v6 - 1;
      os_log_type_t v8 = (void *)(a1 + 40);
      do
      {
        uint64_t v9 = v7;
        uint64_t v6 = *(v8 - 1);
        uint64_t v10 = (void *)*v8;
        swift_bridgeObjectRetain(*v8);
        v11._uint64_t countAndFlagsBits = v6;
        v11._object = v10;
        LOBYTE(v6) = String.hasSuffix(_:)(v11);
        swift_bridgeObjectRelease(v10, v12);
        if ((v6 & 1) != 0) {
          break;
        }
        uint64_t v7 = v9 - 1;
        v8 += 2;
      }

      while (v9);
      uint64_t v3 = swift_bridgeObjectRelease(v5, v13);
    }

    sub_10012B950(v3, v4);
  }

  else
  {
    LOBYTE(v6) = 0;
  }

  return v6 & 1;
}

uint64_t sub_10017C4B4(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_1002BA14C;
  id v7 = a1;
  a3;
  os_log_type_t v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  *os_log_type_t v8 = v3;
  v8[1] = sub_10017C530;
  return sub_10017BCCC((uint64_t)v7);
}

uint64_t sub_10017C530(char a1)
{
  uint64_t v4 = (void (**)(void, void))v3[4];
  uint64_t v6 = (void *)v3[2];
  uint64_t v5 = (void *)v3[3];
  sub_10012CE48();

  v4[2](v4, a1 & 1);
  _Block_release(v4);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10017C594()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10017C5C8()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1002BA13C);
  *(void *)(v1 + swift_unknownObjectUnownedDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10012CDAC;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_1002BA138 + dword_1002BA138))(v2, v3, v4);
}

uint64_t sub_10017C634(void *a1)
{
  id v1 = [a1 host];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_10017C694(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v64 - v11;
  id v13 = [a1 _gkHasValidServerURLRequest];
  if ((_DWORD)v13)
  {
    sub_10017D040();
    id v14 = sub_10017CCBC(a1, a2);
    id v15 = [v3 bag];
    if (v15)
    {
      uint64_t v16 = v15;
      [v14 setBag:v15];
      id v17 =  [(id)objc_opt_self(AMSMetricsLoadURLEvent) shouldCollectMetricsPromiseForContext:v14];
      uint64_t v18 = swift_allocObject(&unk_100276078, 32LL, 7LL);
      *(void *)(v18 + swift_unknownObjectUnownedDestroy(v0 + 16) = v14;
      *(void *)(v18 + 24) = v3;
      aBlock[4] = (uint64_t)sub_10017D0A8;
      uint64_t v70 = v18;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_10017CF3C;
      aBlock[3] = (uint64_t)&unk_100276090;
      uint64_t v19 = _Block_copy(aBlock);
      uint64_t v20 = v70;
      id v21 = v14;
      id v22 = v3;
      swift_release(v20);
      [v17 addSuccessBlock:v19];
      _Block_release(v19);

      return;
    }

    uint64_t v38 = static GKLog.general.getter(0LL);
    os_log_type_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)sub_10012CE30(2LL);
      *(_WORD *)id v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Cannot report session event without a bag.", v41, 2u);
      sub_10012CE24((uint64_t)v41);
      uint64_t v42 = (os_log_s *)v14;
    }

    else
    {
      uint64_t v42 = v39;
      os_log_type_t v39 = (os_log_s *)v14;
    }

    uint64_t v36 = *(void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v37 = v12;
    goto LABEL_18;
  }

  static GKLog.daemon.getter(v13);
  id v23 = a1;
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  int v25 = static os_log_type_t.debug.getter(v24);
  if (os_log_type_enabled(v24, (os_log_type_t)v25))
  {
    int v66 = v25;
    uint64_t v26 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v65 = sub_10012CE30(32LL);
    aBlock[0] = v65;
    uint64_t v67 = v26;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v27 = sub_100129274(&qword_1002B9AF8);
    v64[4] = v64;
    uint64_t v28 = *(void *)(*(void *)(v27 - 8) + 64LL);
    __chkstk_darwin(v27);
    unint64_t v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v30 = (char *)v64 - v29;
    id v31 = [v23 currentRequest];
    uint64_t v32 = __chkstk_darwin(v31);
    uint64_t v68 = v6;
    if (v32)
    {
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v31);

      uint64_t v33 = type metadata accessor for URLRequest(0LL);
      unint64_t v34 = (char *)v64 - v29;
      uint64_t v35 = 0LL;
    }

    else
    {
      uint64_t v33 = type metadata accessor for URLRequest(0LL);
      unint64_t v34 = (char *)v64 - v29;
      uint64_t v35 = 1LL;
    }

    sub_1001291F8((uint64_t)v34, v35, 1LL, v33);
    sub_10017CFF8((uint64_t)v64 - v29, (uint64_t)v64 - v29);
    type metadata accessor for URLRequest(0LL);
    if (sub_10012B4E8((uint64_t)v64 - v29, 1LL, v33) == 1)
    {
      sub_10013519C((uint64_t)v64 - v29, &qword_1002B9AF8);
    }

    else
    {
      uint64_t v43 = sub_100129274(&qword_1002B9D00);
      v64[3] = v64;
      uint64_t v44 = *(void *)(*(void *)(v43 - 8) + 64LL);
      uint64_t v45 = __chkstk_darwin(v43);
      unint64_t v46 = (v44 + 15) & 0xFFFFFFFFFFFFFFF0LL;
      uint64_t v47 = (char *)v64 - v46;
      URLRequest.url.getter(v45);
      uint64_t v48 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8LL))(v30, v33);
      v64[2] = v64;
      __chkstk_darwin(v48);
      unint64_t v49 = (char *)v64 - v46;
      sub_100163FD8((uint64_t)v64 - v46, (uint64_t)v64 - v46);
      uint64_t v50 = type metadata accessor for URL(0LL);
      uint64_t v51 = sub_10012B4E8((uint64_t)v64 - v46, 1LL, v50);
      if ((_DWORD)v51 != 1)
      {
        v64[0] = v64;
        v64[1] = v64;
        uint64_t v55 = *(void *)(v50 - 8);
        __chkstk_darwin(v51);
        char v57 = (char *)v64 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v58 = (*(uint64_t (**)(char *, char *, uint64_t))(v55 + 32))(v57, v49, v50);
        uint64_t v53 = URL.absoluteString.getter(v58);
        unint64_t v52 = v59;
        (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v50);
        sub_10013519C((uint64_t)v47, &qword_1002B9D00);
        goto LABEL_20;
      }

      sub_10013519C((uint64_t)v64 - v46, &qword_1002B9D00);
    }

    unint64_t v52 = 0xE300000000000000LL;
    uint64_t v53 = 7104878LL;
LABEL_20:
    uint64_t v61 = v67;
    uint64_t v60 = v68;
    uint64_t v71 = sub_100135074(v53, v52, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);

    swift_bridgeObjectRelease(v52, v62);
    _os_log_impl( (void *)&_mh_execute_header,  v24,  (os_log_type_t)v66,  "GKAMPController ignoring request with URL: %s)",  v61,  0xCu);
    uint64_t v63 = v65;
    swift_arrayDestroy(v65, 1LL, (char *)&type metadata for Any + 8);
    sub_10012CE24(v63);
    sub_10012CE24((uint64_t)v61);

    uint64_t v36 = *(void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v37 = v10;
    uint64_t v54 = v60;
    goto LABEL_21;
  }

  uint64_t v36 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v37 = v10;
LABEL_18:
  uint64_t v54 = v6;
LABEL_21:
  v36(v37, v54);
}

id sub_10017CCBC(void *a1, void *a2)
{
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)) initWithTask:a1 metrics:a2];

  return v5;
}

void sub_10017CD14(void *a1, void *a2, uint64_t a3)
{
  if ([a1 BOOLValue])
  {
    id v5 = [(id)objc_opt_self(AMSMetricsLoadURLEvent) loadURLEventPromiseWithContext:a2];
    uint64_t v6 = swift_allocObject(&unk_1002760C8, 24LL, 7LL);
    swift_unknownObjectWeakInit(v6 + 16, a3);
    uint64_t v7 = swift_allocObject(&unk_1002760F0, 32LL, 7LL);
    *(void *)(v7 + swift_unknownObjectUnownedDestroy(v0 + 16) = v6;
    *(void *)(v7 + 24) = a2;
    v11[4] = sub_10017D118;
    uint64_t v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256LL;
    uint64_t v11[2] = sub_10017CF3C;
    void v11[3] = &unk_100276108;
    uint64_t v8 = _Block_copy(v11);
    uint64_t v9 = v12;
    id v10 = a2;
    swift_release(v9);
    [v5 addSuccessBlock:v8];
    _Block_release(v8);
  }

void sub_10017CE2C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0LL, 0LL);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = sub_10017D120(Strong);
    if (v7)
    {
      uint64_t v8 = v7;
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v8, v10);
      [a1 addPropertiesWithDictionary:isa];
    }
  }

  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetrics);
  id v12 = [a3 bag];
  id v13 = [v11 internalInstanceUsingBag:v12];
  swift_unknownObjectRelease(v12);
  [v13 enqueueEvent:a1];
}

void sub_10017CF40(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

uint64_t sub_10017CFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B9AF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10017D040()
{
  unint64_t result = qword_1002BA160;
  if (!qword_1002BA160)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSMetricsLoadURLContext);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002BA160);
  }

  return result;
}

uint64_t sub_10017D07C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10017D0A8(void *a1)
{
}

uint64_t sub_10017D0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100129678(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10017D0C0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10017D0C8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10017D0EC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10017D118(void *a1)
{
}

uint64_t sub_10017D120(void *a1)
{
  id v2 = [a1 metadata];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  return v3;
}

void sub_10017D19C()
{
}

void sub_10017D1BC(uint64_t a1)
{
}

uint64_t sub_10017D1F0()
{
  uint64_t v0 = sub_100129274(&qword_1002BA458);
  uint64_t result = swift_allocObject(v0, 17LL, 7LL);
  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  off_1002BA168 = (_UNKNOWN *)result;
  return result;
}

uint64_t sub_10017D224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType(v5);
  uint64_t v10 = sub_1001447C4();
  v70[0] = *(void *)(v10 - 8);
  v70[1] = v10;
  sub_10016F1A8();
  __chkstk_darwin(v11);
  sub_100185810();
  uint64_t v72 = v12;
  type metadata accessor for ModelConfiguration.CloudKitDatabase(0LL);
  sub_10016F1A8();
  __chkstk_darwin(v13);
  sub_100185810();
  uint64_t v75 = v14;
  uint64_t v15 = type metadata accessor for ModelConfiguration(0LL);
  uint64_t v78 = *(void *)(v15 - 8);
  uint64_t v79 = v15;
  sub_10016F1A8();
  __chkstk_darwin(v16);
  sub_100164150();
  uint64_t v71 = v17;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v73 = (char *)v70 - v20;
  __chkstk_darwin(v19);
  uint64_t v77 = (char *)v70 - v21;
  id v22 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  uint64_t v81 = v5;
  sub_10012CF1C();
  id v23 = [v22 defaultManager];
  uint64_t v24 = type metadata accessor for URL(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(void *)(v25 + 64);
  __chkstk_darwin(v24);
  unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v80 = (uint64_t)v70 - v27;
  uint64_t v28 = (void *)objc_opt_self(&OBJC_CLASS___GKClientProxy);
  id v82 = v23;
  id v29 = sub_1001848EC(a1, a2, a3, a4, 0xD000000000000011LL, 0x800000010024E600LL, (uint64_t)v23, v28);
  sub_100129274(&qword_1002B9D00);
  sub_10016F1A8();
  __chkstk_darwin(v30);
  sub_100148608();
  if (!v29)
  {
    sub_10018584C();
    sub_1001291F8(v54, v55, v56, v24);
    uint64_t v35 = v81;
    goto LABEL_7;
  }

  __chkstk_darwin(v31);
  uint64_t v32 = (char *)v70 - v27;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v29);

  uint64_t v33 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 32);
  v33(a4, v32, v24);
  sub_1001291F8(a4, 0LL, 1LL, v24);
  int v34 = sub_10012B4E8(a4, 1LL, v24);
  uint64_t v35 = v81;
  if (v34 == 1)
  {
LABEL_7:
    sub_100158E00();
    sub_10015D718(a4, &qword_1002B9D00);
    unint64_t v57 = sub_10018355C();
    sub_100158C54((uint64_t)&type metadata for AppMetadataCache.AppMetadataCacheError, v57);
    sub_1001857F0();

    uint64_t v58 = swift_getObjectType(v35);
    sub_1001857D0(v35, v58);
    return v25;
  }

  uint64_t v36 = v80;
  v33(v80, (char *)a4, v24);
  sub_10017D814();
  __chkstk_darwin(v37);
  uint64_t ObjectType = v25;
  uint64_t v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 16))( (char *)v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v36,  v24);
  os_log_type_t v39 = v75;
  static ModelConfiguration.CloudKitDatabase.none.getter(v38);
  os_log_type_t v40 = v77;
  ModelConfiguration.init(_:schema:url:allowsSave:cloudKitDatabase:)( 0LL,  0LL,  0LL,  (char *)v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL),  1LL,  v39);
  uint64_t v41 = swift_getObjectType(v35);
  uint64_t v42 = v78;
  uint64_t v43 = (uint64_t)v73;
  uint64_t v75 = *(void (**)(void, void, void))(v78 + 16);
  v75(v73, v40, v79);
  uint64_t v44 = v76;
  uint64_t v45 = AppMetadataCache.__allocating_init(configuration:)(v43);
  if (v44)
  {
    uint64_t v76 = v41;
    static GKLog.cache.getter(v45);
    sub_100185844();
    uint64_t v46 = sub_100185844();
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.error.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      unint64_t v49 = (uint8_t *)sub_10012CE30(12LL);
      uint64_t v50 = (void *)sub_10012CE30(8LL);
      *(_DWORD *)unint64_t v49 = 138412290;
      uint64_t v73 = (char *)(v49 + 4);
      sub_100185844();
      uint64_t v51 = _swift_stdlib_bridgeErrorToNSError(v44);
      uint64_t v83 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
      *uint64_t v50 = v51;
      sub_10018570C();
      sub_10018570C();
      sub_10012CE90( (void *)&_mh_execute_header,  v47,  v48,  "Failed to construct model container with error, deleting files: %@",  v49);
      uint64_t v52 = sub_100129274(&qword_1002B8ED0);
      sub_10012CE88((uint64_t)v50, v53, v52);
      sub_10012CE24((uint64_t)v50);
      sub_10012CE24((uint64_t)v49);
    }

    else
    {
      sub_10018570C();
      sub_10018570C();
    }

    uint64_t v60 = v70[0];

    uint64_t v61 = sub_10018579C(*(uint64_t (**)(uint64_t, uint64_t))(v60 + 8));
    uint64_t v62 = __chkstk_darwin(v61);
    uint64_t v63 = (char *)v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v64 = __chkstk_darwin(v62);
    int v66 = (char *)v70 - v65;
    uint64_t v67 = v77;
    uint64_t v68 = ModelConfiguration.url.getter(v64);
    URL.deletingLastPathComponent()(v68);
    sub_100185794((uint64_t)v66);
    sub_1001856AC();
    sub_100165230();
    sub_10018570C();
    sub_100185794((uint64_t)v63);
    uint64_t v35 = v81;
    sub_100158E00();
    uint64_t v69 = v71;
    v75(v71, v67, v79);
    uint64_t v25 = AppMetadataCache.__allocating_init(configuration:)(v69);

    sub_1001856EC();
    uint64_t v41 = v76;
  }

  else
  {
    uint64_t v25 = v45;
    sub_100158E00();

    sub_10018579C(*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8));
  }

  sub_100185794(v80);
  sub_1001857D0(v35, v41);
  return v25;
}

void sub_10017D814()
{
  if (qword_1002B7F30 != -1) {
    swift_once(&qword_1002B7F30, sub_10017D1F0);
  }
  uint64_t v0 = off_1002BA168;
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)off_1002BA168 + 136LL);
  uint64_t v2 = swift_retain(off_1002BA168);
  uint64_t v3 = (unsigned __int8 *)v1(v2);
  while (!__ldxr(v3))
  {
    if (!__stxr(1u, v3))
    {
      sub_10012CF14();
      sub_10017DB28();
      sub_10017DCEC();
      sub_10013A774();
      return;
    }
  }

  __clrex();
  swift_release(v0);
}

uint64_t AppMetadataCache.__allocating_init(configuration:)(uint64_t a1)
{
  uint64_t v3 = sub_100129274(&qword_1002B8E78);
  uint64_t v4 = swift_allocObject(v3, 48LL, 7LL);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001F3480;
  uint64_t v5 = sub_10018366C();
  sub_100185808((uint64_t)&unk_1002BA170);
  *(void *)(v4 + 3sub_100129678(v0 + 2) = v5;
  *(void *)(v4 + 40) = v6;
  unint64_t v7 = sub_10017DA40();
  uint64_t v8 = sub_100129274(&qword_1002B8FB0);
  uint64_t v9 = type metadata accessor for ModelConfiguration(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(v8, v12 + *(void *)(v10 + 72), v11 | 7);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001F3480;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13 + v12, a1, v9);
  uint64_t v14 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)( v4,  &type metadata for AppMetadataMigrationPlan,  v7,  v13);
  if (v1) {
    return sub_10018573C();
  }
  uint64_t v16 = v14;
  uint64_t v17 = type metadata accessor for AppMetadataCache();
  swift_allocObject(v17, 40LL, 7LL);
  AppMetadataCache.init(modelContainer:)(v16);
  uint64_t v19 = v18;
  sub_10018573C();
  return v19;
}

uint64_t type metadata accessor for AppMetadataSchemaV1.AppMetadata(uint64_t a1)
{
  return sub_1001835D4(a1, qword_1002BA218, (uint64_t)&nominal type descriptor for AppMetadataSchemaV1.AppMetadata);
}

unint64_t sub_10017DA40()
{
  unint64_t result = qword_1002BA178;
  if (!qword_1002BA178)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5850, &type metadata for AppMetadataMigrationPlan);
    atomic_store(result, (unint64_t *)&qword_1002BA178);
  }

  return result;
}

void sub_10017DB28()
{
  v23[1] = v5;
  type metadata accessor for ModelConfiguration.CloudKitDatabase(0LL);
  sub_10016F1A8();
  __chkstk_darwin(v6);
  sub_100148608();
  v23[0] = type metadata accessor for ModelConfiguration(0LL);
  uint64_t v7 = *(void *)(v23[0] - 8LL);
  __chkstk_darwin(v23[0]);
  sub_100165960();
  type metadata accessor for ModelConfiguration.GroupContainer(0LL);
  sub_1001857DC();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v23 - v12;
  static ModelConfiguration.GroupContainer.identifier(_:)(0xD00000000000001ALL, 0x800000010024D160LL);
  uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v0 + 16))(v11, v13, v3);
  static ModelConfiguration.CloudKitDatabase.none.getter(v14);
  ModelConfiguration.init(_:schema:isStoredInMemoryOnly:allowsSave:groupContainer:cloudKitDatabase:)( 0x646174654D707041LL,  0xEB00000000617461LL,  0LL,  0LL,  1LL,  v11,  v1);
  uint64_t v15 = sub_1001640F8();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_1001856D0();
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)v23 - v19;
  uint64_t v21 = ModelConfiguration.url.getter(v18);
  URL.deletingLastPathComponent()(v21);
  id v22 = *(void (**)(char *, uint64_t))(v16 + 8);
  v22(v20, v15);
  sub_1001856AC();
  sub_100165230();
  v22(v4, v15);
  (*(void (**)(uint64_t, void))(v7 + 8))(v2, v23[0]);
  sub_100144EBC((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_10012CE58();
}

void sub_10017DCEC()
{
  uint64_t v2 = v1;
  v49[2] = v3;
  type metadata accessor for Logger(0LL);
  sub_1001857DC();
  __chkstk_darwin(v4);
  sub_1001856D0();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (os_log_s *)((char *)v49 - v7);
  __chkstk_darwin(v6);
  uint64_t v10 = (os_log_s *)((char *)v49 - v9);
  type metadata accessor for NSPersistentStore.StoreType(0LL);
  sub_100185824();
  __chkstk_darwin(v11);
  sub_1001296C0();
  uint64_t v14 = v13 - v12;
  sub_100129640(0LL, (unint64_t *)&qword_1002B9738, &OBJC_CLASS___NSPersistentStoreCoordinator_ptr);
  static NSPersistentStore.StoreType.sqlite.getter();
  v49[1] = v2;
  uint64_t v15 = static NSPersistentStoreCoordinator.metadataForPersistentStore(type:at:options:)(v14, v2, 0LL);
  sub_100185784();
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSPersistentStoreModelVersionChecksumKey);
  sub_10012D0B0(v16, v17, v15, &v51);
  sub_1001322A0(v18, v19);
  swift_bridgeObjectRelease(v15, v20);
  if (v52)
  {
    int v21 = swift_dynamicCast(v50, &v51, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    if (v21) {
      uint64_t v22 = v50[0];
    }
    else {
      uint64_t v22 = 0LL;
    }
    if (v21) {
      uint64_t v23 = v50[1];
    }
    else {
      uint64_t v23 = 0LL;
    }
  }

  else
  {
    sub_10015D718((uint64_t)&v51, &qword_1002B8E90);
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
  }

  sub_100129640(0LL, &qword_1002BA450, &OBJC_CLASS___NSManagedObjectModel_ptr);
  uint64_t v24 = sub_100129274(&qword_1002B8E78);
  uint64_t v25 = swift_allocObject(v24, 48LL, 7LL);
  *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001F3480;
  uint64_t v26 = type metadata accessor for AppMetadataSchemaV1.AppMetadata(0LL);
  sub_1001802E0((uint64_t)&unk_1002BA170);
  *(void *)(v25 + 3sub_100129678(v0 + 2) = v26;
  *(void *)(v25 + 40) = v27;
  id v28 = [objc_allocWithZone(NSManagedObjectModel) init];
  id v29 = (void *)static NSManagedObjectModel.makeManagedObjectModel(for:mergedWith:)(v25, v28);
  swift_bridgeObjectRelease(v25, v30);

  if (!v29)
  {
    if (v23) {
      goto LABEL_21;
    }
    uint64_t v35 = 0LL;
LABEL_24:
    uint64_t v45 = v35;
    goto LABEL_25;
  }

  id v32 = [v29 versionChecksum];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v35 = v34;

  if (!v23) {
    goto LABEL_24;
  }
  if (!v35)
  {
LABEL_21:
    uint64_t v45 = v23;
LABEL_25:
    uint64_t v40 = swift_bridgeObjectRelease(v45, v31);
    goto LABEL_26;
  }

  if (v22 == v33 && v23 == v35)
  {
    swift_bridgeObjectRelease(v23, v31);
    goto LABEL_24;
  }

  uint64_t v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v33, v35, 0LL);
  swift_bridgeObjectRelease(v23, v38);
  uint64_t v40 = swift_bridgeObjectRelease(v35, v39);
  if ((v37 & 1) == 0)
  {
    uint64_t v41 = static GKLog.cache.getter(v40);
    Logger.logObject.getter(v41);
    os_log_type_t v42 = sub_100158D38();
    uint64_t v43 = v42;
    if (os_log_type_enabled(v10, v42))
    {
      uint64_t v37 = sub_10012CE30(2LL);
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  (os_log_type_t)v43,  "Deleting previous app metadata cache since it differs from the current schema.",  (uint8_t *)v37,  2u);
      sub_10012CE24(v37);
    }

    sub_100144EBC((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    sub_1001640F8();
    sub_10018576C();
    __chkstk_darwin(v44);
    sub_100185670();
    sub_100185648();

    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v37, v0);
    goto LABEL_29;
  }

uint64_t sub_10017E210()
{
  uint64_t v0 = sub_100129274(&qword_1002B8E78);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001F3480;
  uint64_t v2 = type metadata accessor for AppMetadataSchemaV1.AppMetadata(0LL);
  sub_1001802E0((uint64_t)&unk_1002BA170);
  *(void *)(v1 + 3sub_100129678(v0 + 2) = v2;
  *(void *)(v1 + 40) = v3;
  return v1;
}

char *AppMetadataCache.fetch(ids:type:ttl:)(uint64_t a1, int a2, double a3)
{
  uint64_t v6 = sub_100129274(&qword_1002BA180);
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v60 = v6;
  sub_10016F1A8();
  __chkstk_darwin(v7);
  sub_1001296C0();
  uint64_t v10 = v9 - v8;
  if (qword_1002B7F28 != -1) {
    swift_once(&qword_1002B7F28, AppMetadataNetworkFetcher.init(batchTask:));
  }
  uint64_t v11 = sub_100129274(&qword_1002BA188);
  uint64_t v58 = &v56;
  uint64_t v12 = *(void *)(*(void *)(v11 - 8) + 64LL);
  __chkstk_darwin(v11);
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v14 = sub_100129274(&qword_1002BA190);
  sub_10018584C();
  sub_1001291F8(v15, v16, v17, v14);
  uint64_t v18 = sub_10018366C();
  sub_100185808((uint64_t)&unk_1002BA170);
  uint64_t v20 = v19;
  uint64_t v21 = FetchDescriptor.init(predicate:sortBy:)((char *)&v56 - v13, _swiftEmptyArrayStorage, v18, v19);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v56 - v13;
  __chkstk_darwin(v22);
  *(&v56 - sub_100129678(v0 + 2) = a1;
  int v64 = a2;
  uint64_t v69 = (void *)v18;
  if ((a2 & 1) != 0) {
    uint64_t v24 = sub_100183598;
  }
  else {
    uint64_t v24 = sub_1001802B8;
  }
  Predicate.init(_:)(v24, &v56 - 4, 1LL, &v69);
  sub_1001291F8((uint64_t)v23, 0LL, 1LL, v14);
  FetchDescriptor.predicate.setter(v23, v60);
  type metadata accessor for AppMetadataCache();
  sub_1001802E0((uint64_t)&unk_1002BA198);
  sub_10018572C(v25);
  uint64_t v26 = v68;
  uint64_t v27 = dispatch thunk of ModelContext.fetch<A>(_:)(v10, v18, v20);
  if (v26)
  {
    sub_10018575C();
    sub_10012CF14();
    return (char *)v20;
  }

  uint64_t v28 = v27;
  uint64_t v29 = sub_10012CF14();
  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0) {
      uint64_t v54 = v28;
    }
    else {
      uint64_t v54 = v28 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v28);
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v54);
    uint64_t v29 = sub_100132454(v31, v55);
    if (v31) {
      goto LABEL_10;
    }
LABEL_30:
    sub_100132454(v29, v30);
    uint64_t v20 = _swiftEmptyArrayStorage;
LABEL_31:
    sub_10018575C();
    return (char *)v20;
  }

  uint64_t v31 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v31) {
    goto LABEL_30;
  }
LABEL_10:
  uint64_t v69 = _swiftEmptyArrayStorage;
  unint64_t result = sub_1001375C8(0LL, v31 & ~(v31 >> 63), 0);
  if ((v31 & 0x8000000000000000LL) == 0)
  {
    uint64_t v56 = 0LL;
    uint64_t v57 = v10;
    uint64_t v33 = 0LL;
    uint64_t v62 = v28;
    unint64_t v63 = v28 & 0xC000000000000001LL;
    double v34 = -a3;
    uint64_t v61 = v31;
    while (1)
    {
      if (v63) {
        specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v28);
      }
      else {
        swift_retain(*(void *)(v28 + 8 * v33 + 32));
      }
      uint64_t v20 = (void *)type metadata accessor for Date(0LL);
      uint64_t v68 = &v56;
      uint64_t v35 = *(void *)(*(v20 - 1) + 64LL);
      uint64_t v36 = __chkstk_darwin(v20);
      uint64_t v37 = (char *)&v56 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v38 = __chkstk_darwin(v36);
      uint64_t v40 = (char *)&v56 - v39;
      uint64_t v41 = Date.init()(v38);
      Date.addingTimeInterval(_:)(v41, v34);
      sub_100185714((uint64_t)v40);
      if ((v64 & 1) != 0)
      {
        uint64_t v42 = sub_10017E7AC();
        if (!v43)
        {
LABEL_25:
          unint64_t v52 = sub_10018355C();
          sub_100158C54((uint64_t)&type metadata for AppMetadataCache.AppMetadataCacheError, v52);
          sub_1001857F0();
          sub_100185714((uint64_t)v37);
          sub_1001857C8();
          swift_release(v69);
          swift_bridgeObjectRelease(v62, v53);
          (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v60);
          return (char *)v20;
        }
      }

      else
      {
        uint64_t v42 = sub_10017EA64();
        if (!v43) {
          goto LABEL_25;
        }
      }

      uint64_t v66 = v43;
      uint64_t v67 = v42;
      id v65 = sub_10017EDB8();
      __chkstk_darwin(v65);
      uint64_t v44 = (uint64_t *)((char *)&v56 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      sub_10017F0C8(v44);
      uint64_t v45 = Date.compare(_:)(v37);
      sub_100185714((uint64_t)v44);
      sub_100185714((uint64_t)v37);
      sub_1001857C8();
      uint64_t v20 = v69;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v69);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1001375C8(0LL, v20[2] + 1LL, 1);
        uint64_t v20 = v69;
      }

      unint64_t v49 = v20[2];
      unint64_t v48 = v20[3];
      if (v49 >= v48 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1001375C8((char *)(v48 > 1), v49 + 1, 1);
        uint64_t v20 = v69;
      }

      ++v33;
      _OWORD v20[2] = v49 + 1;
      uint64_t v50 = &v20[4 * v49];
      uint64_t v51 = v66;
      v50[4] = v67;
      v50[5] = v51;
      v50[6] = v65;
      *((_BYTE *)v50 + 56) = v45 == -1;
      uint64_t v28 = v62;
      if (v61 == v33)
      {
        sub_100132454(isUniquelyReferenced_nonNull_native, v47);
        goto LABEL_31;
      }
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10017E7AC()
{
  return sub_10017EA70((uint64_t)&unk_1001F58E0);
}

void sub_10017E7B8()
{
  uint64_t v35 = v3;
  uint64_t v36 = v4;
  uint64_t v6 = v5;
  uint64_t v37 = v7;
  uint64_t v9 = *v8;
  uint64_t v38 = sub_100129274(&qword_1002BA460);
  uint64_t v39 = *(void *)(v38 - 8);
  sub_10016F1A8();
  __chkstk_darwin(v10);
  sub_100148608();
  uint64_t v11 = sub_100129274(&qword_1002BA468);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1001296C0();
  uint64_t v15 = v14 - v13;
  sub_100129274(&qword_1002BA470);
  sub_100185824();
  __chkstk_darwin(v16);
  sub_1001296C0();
  uint64_t v19 = v18 - v17;
  sub_100184D80((uint64_t)&unk_1002BA478);
  uint64_t v21 = v20;
  static PredicateExpressions.build_Arg<A>(_:)(v9, v2, v20);
  uint64_t KeyPath = swift_getKeyPath(v6);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v19, KeyPath, v2, v21);
  sub_10014510C();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v19, v2);
  v40[2] = v35;
  uint64_t v23 = sub_100129274(&qword_1002BA480);
  sub_100184D80((uint64_t)&unk_1002BA488);
  uint64_t v25 = v24;
  sub_100184D80((uint64_t)&unk_1002BA490);
  static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)( v15,  v36,  v40,  v11,  v23,  &type metadata for String,  &type metadata for Bool,  v25,  v26);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
  uint64_t v27 = sub_100129274(&qword_1002BA498);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  sub_1001296C0();
  uint64_t v31 = v30 - v29;
  char v41 = 0;
  static PredicateExpressions.build_Arg<A>(_:)(&v41, &type metadata for Bool);
  v37[3] = sub_100129274(&qword_1002BA4A0);
  v37[4] = sub_100184A90();
  sub_10015848C(v37);
  sub_100184D80((uint64_t)&unk_1002BA510);
  uint64_t v33 = v32;
  sub_100184D80((uint64_t)&unk_1002BA518);
  static PredicateExpressions.build_NilCoalesce<A, B>(lhs:rhs:)(v0, v31, v38, v27, v33, v34);
  sub_100144EBC(v31, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
  sub_1001447E8(*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
  sub_10012CE58();
}

uint64_t sub_10017EA64()
{
  return sub_10017EA70((uint64_t)&unk_1001F5908);
}

uint64_t sub_10017EA70(uint64_t a1)
{
  uint64_t v10 = v1;
  uint64_t KeyPath = swift_getKeyPath(a1);
  sub_1001857FC((uint64_t)&unk_1002BA3A8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(a1);
  sub_1001857FC((uint64_t)&unk_1002BA170);
  uint64_t v7 = v6;
  sub_100184DF4((uint64_t)&unk_1002BA538);
  PersistentModel.getValue<A>(forKey:)(&v10, v5, v7, v8);
  sub_10014510C();
  return v10;
}

uint64_t sub_10017EB5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  swift_bridgeObjectRetain(v8);
  return sub_10017EBB0(v9, v8, a5, a6);
}

uint64_t sub_10017EBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath = swift_getKeyPath(a3);
  uint64_t v13 = v4;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  sub_1001802E0((uint64_t)&unk_1002BA3A8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v16,  KeyPath,  a4,  &v12,  (char *)&type metadata for () + 8,  v9);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(a2, v10);
}

void sub_10017EC6C()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_100129274(&qword_1002BA4D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100148608();
  uint64_t v18 = v2;
  uint64_t v7 = sub_100129274(&qword_1002BA4E8);
  static PredicateExpressions.build_Arg<A>(_:)(&v18, v7);
  uint64_t v8 = sub_100129274(&qword_1002BA500);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1001296C0();
  uint64_t v12 = v11 - v10;
  sub_100184D80((uint64_t)&unk_1002BA520);
  uint64_t v14 = v13;
  static PredicateExpressions.build_Arg<A>(_:)(v4, v8, v13);
  sub_100184D80((uint64_t)&unk_1002BA528);
  uint64_t v16 = v15;
  unint64_t v17 = sub_100184DB0();
  static PredicateExpressions.build_contains<A, B>(_:_:)( v0,  v12,  v5,  v8,  v16,  v14,  v17,  &protocol witness table for String);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  sub_1001447E8(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_10012CE58();
}

id sub_10017EDB8()
{
  uint64_t v0 = sub_100129274(&qword_1002BA1A8);
  __chkstk_darwin(v0);
  uint64_t v2 = &v37[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v3 = (int *)type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = &v37[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1001824B4(v2);
  if (sub_10012B4E8((uint64_t)v2, 1LL, (uint64_t)v3) == 1)
  {
    sub_10015D718((uint64_t)v2, &qword_1002BA1A8);
    return 0LL;
  }

  sub_100184E40((uint64_t)v2, (uint64_t)v5);
  uint64_t v6 = sub_10017E7AC();
  if (!v7)
  {
    sub_1001847E4((uint64_t)v5);
    return 0LL;
  }

  uint64_t v8 = (uint64_t *)&v5[v3[13]];
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = v8[5];
  uint64_t v43 = v8[4];
  uint64_t v44 = v9;
  uint64_t v12 = (void *)v8[6];
  uint64_t v13 = v8[7];
  uint64_t v14 = v8[9];
  uint64_t v41 = v8[8];
  uint64_t v42 = v12;
  uint64_t v15 = v8[10];
  uint64_t v16 = v8[11];
  uint64_t v17 = v8[13];
  uint64_t v39 = v8[12];
  uint64_t v40 = (_BYTE *)v15;
  uint64_t v45 = v7;
  uint64_t v46 = v6;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  Class v19 = Double._bridgeToObjectiveC()().super.super.isa;
  id v20 = objc_allocWithZone(&OBJC_CLASS___GKArtworkMetadata);
  sub_100130C8C(v44, v10, isa, v19, v43, v11, (uint64_t)v42, v13, v41, v14, (uint64_t)v40, v16, v39, v17);
  uint64_t v21 = *((void *)v5 + 1);
  uint64_t v41 = *(void *)v5;
  uint64_t v42 = v22;
  uint64_t v23 = *((void *)v5 + 2);
  uint64_t v24 = *((void *)v5 + 3);
  uint64_t v25 = *((void *)v5 + 5);
  uint64_t v43 = *((void *)v5 + 4);
  uint64_t v44 = v23;
  LODWORD(v23) = v5[48];
  int v38 = v5[49];
  LODWORD(v39) = v23;
  LOBYTE(v14) = v5[50];
  uint64_t v26 = (uint64_t)&v5[v3[11]];
  uint64_t v27 = *((void *)v5 + 7);
  uint64_t v28 = sub_100129274(&qword_1002B8168);
  uint64_t v40 = v37;
  __chkstk_darwin(v28);
  uint64_t v30 = &v37[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100184E84(v26, (uint64_t)v30, &qword_1002B8168);
  uint64_t v31 = (uint64_t *)&v5[v3[12]];
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  objc_allocWithZone(&OBJC_CLASS___GKAppMetadata);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v27);
  BYTE2(v36) = v14;
  BYTE1(v36) = v38;
  LOBYTE(v36) = v39;
  id v34 = sub_100183394(v41, v21, v46, v45, v44, v24, v43, v25, v42, v36, v27, (uint64_t)v30, v33, v32);
  sub_1001847E4((uint64_t)v5);
  return v34;
}

uint64_t sub_10017F0C8@<X0>(void *a1@<X8>)
{
  uint64_t v10 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F5930);
  sub_1001802E0((uint64_t)&unk_1002BA3A8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1001F5930);
  sub_1001802E0((uint64_t)&unk_1002BA170);
  uint64_t v7 = v6;
  sub_1001846EC((uint64_t)&qword_1002B8E58);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v7, v8);
  return swift_release(v5);
}

void AppMetadataCache.insert(metadatas:lastModifiedDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001447C4();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100185690();
  uint64_t v6 = sub_1001857BC();
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter(v7);
  uint64_t v36 = a1;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)sub_10012CE30(12LL);
    uint64_t v34 = v4;
    uint64_t v10 = sub_10012CE30(32LL);
    uint64_t v37 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v11 = sub_100129640(0LL, &qword_1002B8358, &OBJC_CLASS___GKAppMetadata_ptr);
    uint64_t v12 = sub_100144D9C();
    uint64_t v13 = Array.description.getter(v12, v11);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease(v36, v14);
    uint64_t v16 = v13;
    a1 = v36;
    uint64_t v17 = sub_100135074(v16, v15, &v37);
    uint64_t v18 = sub_1001857A8(v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v18, v19);
    swift_bridgeObjectRelease(v15, v20);
    sub_10017BC00();
    sub_10012CE90((void *)&_mh_execute_header, v7, v8, "Inserting valid metadatas: %s", v9);
    sub_10012CE88(v10, v21, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v10);
    sub_10012CE24((uint64_t)v9);

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v34);
  }

  else
  {
    sub_10017BC00();

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  }

  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v22 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_100144D9C();
    if (v22) {
      goto LABEL_6;
    }
LABEL_12:
    swift_bridgeObjectRelease(a1, v23);
    uint64_t v31 = type metadata accessor for AppMetadataCache();
    sub_1001802E0((uint64_t)&unk_1002BA198);
    ModelActor.modelContext.getter(v31, v32);
    dispatch thunk of ModelContext.save()();
    sub_10012CF14();
    sub_10016C428();
    return;
  }

  if (a1 < 0) {
    uint64_t v33 = a1;
  }
  else {
    uint64_t v33 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_100144D9C();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v33);
  if (!v22) {
    goto LABEL_12;
  }
LABEL_6:
  if (v22 >= 1)
  {
    uint64_t v24 = 0LL;
    unint64_t v25 = a1 & 0xC000000000000001LL;
    do
    {
      if (v25) {
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, a1);
      }
      else {
        id v26 = *(id *)(a1 + 8 * v24 + 32);
      }
      uint64_t v27 = v26;
      ++v24;
      type metadata accessor for AppMetadataCache();
      sub_1001802E0((uint64_t)&unk_1002BA198);
      sub_10018572C(v28);
      uint64_t v29 = sub_10017F4C0(a2);
      uint64_t v30 = sub_10018366C();
      sub_1001802E0((uint64_t)&unk_1002BA170);
      dispatch thunk of ModelContext.insert<A>(_:)(v29, v30);
      swift_release(v29);
      sub_1001857C8();

      a1 = v36;
    }

    while (v22 != v24);
    goto LABEL_12;
  }

  __break(1u);
}

void *sub_10017F4C0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v99 = a1;
  uint64_t v3 = sub_100129274(&qword_1002BA1A8);
  __chkstk_darwin(v3);
  uint64_t v100 = (uint64_t)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0LL);
  __chkstk_darwin(v98);
  uint64_t v6 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = [v1 artwork];
  id v8 = [v7 templateURL];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v96 = v10;
  uint64_t v97 = v9;

  id v11 = [v2 artwork];
  id v12 = [v11 width];

  [v12 doubleValue];
  uint64_t v14 = v13;

  id v15 = [v2 artwork];
  id v16 = [v15 height];

  [v16 doubleValue];
  uint64_t v18 = v17;

  uint64_t v19 = sub_1001849B0([v2 artwork], (SEL *)&selRef_textColor1);
  uint64_t v94 = v20;
  uint64_t v95 = v19;
  uint64_t v21 = sub_1001849B0([v2 artwork], (SEL *)&selRef_textColor2);
  uint64_t v92 = v22;
  uint64_t v93 = v21;
  uint64_t v23 = sub_1001849B0([v2 artwork], (SEL *)&selRef_textColor3);
  uint64_t v90 = v24;
  uint64_t v91 = v23;
  uint64_t v25 = sub_1001849B0([v2 artwork], (SEL *)&selRef_textColor4);
  uint64_t v88 = v26;
  uint64_t v89 = v25;
  uint64_t v27 = sub_1001849B0([v2 artwork], (SEL *)&selRef_backgroundColor);
  uint64_t v86 = v28;
  uint64_t v87 = v27;
  id v29 = [v2 bundleID];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v84 = v31;
  uint64_t v85 = v30;

  id v32 = [v2 name];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v82 = v34;
  uint64_t v83 = v33;

  id v35 = [v2 shortName];
  uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  uint64_t v80 = v36;

  unsigned __int8 v37 = [v2 supportsGameCenter];
  unsigned __int8 v38 = [v2 supportsArcade];
  unsigned __int8 v39 = [v2 supportsGameController];
  id v40 = [v2 deviceFamilies];
  uint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v40, &type metadata for String);

  id v42 = [v2 latestVersionReleaseDate];
  uint64_t v43 = sub_100129274(&qword_1002B8168);
  __chkstk_darwin(v43);
  uint64_t v45 = (char *)&v80 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v42)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v42);

    uint64_t v46 = type metadata accessor for Date(0LL);
    uint64_t v47 = (uint64_t)v45;
    uint64_t v48 = 0LL;
  }

  else
  {
    uint64_t v46 = type metadata accessor for Date(0LL);
    uint64_t v47 = (uint64_t)v45;
    uint64_t v48 = 1LL;
  }

  sub_1001291F8(v47, v48, 1LL, v46);
  uint64_t v49 = sub_100184A18(v2);
  uint64_t v51 = v50;
  uint64_t v52 = v84;
  *(void *)uint64_t v6 = v85;
  *((void *)v6 + 1) = v52;
  uint64_t v53 = v82;
  *((void *)v6 + sub_100129678(v0 + 2) = v83;
  *((void *)v6 + 3) = v53;
  uint64_t v54 = v80;
  *((void *)v6 + 4) = v81;
  *((void *)v6 + 5) = v54;
  v6[48] = v37;
  v6[49] = v38;
  v6[50] = v39;
  *((void *)v6 + 7) = v41;
  uint64_t v55 = v98;
  sub_10018471C((uint64_t)v45, (uint64_t)&v6[*(int *)(v98 + 44)]);
  uint64_t v56 = (uint64_t *)&v6[*(int *)(v55 + 48)];
  *uint64_t v56 = v49;
  v56[1] = v51;
  uint64_t v57 = &v6[*(int *)(v55 + 52)];
  uint64_t v58 = v96;
  *(void *)uint64_t v57 = v97;
  *((void *)v57 + 1) = v58;
  *((void *)v57 + sub_100129678(v0 + 2) = v14;
  *((void *)v57 + 3) = v18;
  uint64_t v59 = v94;
  *((void *)v57 + 4) = v95;
  *((void *)v57 + 5) = v59;
  uint64_t v60 = v92;
  *((void *)v57 + 6) = v93;
  *((void *)v57 + 7) = v60;
  uint64_t v61 = v90;
  *((void *)v57 + 8) = v91;
  *((void *)v57 + 9) = v61;
  uint64_t v62 = v88;
  *((void *)v57 + 10) = v89;
  *((void *)v57 + 11) = v62;
  uint64_t v63 = v86;
  *((void *)v57 + 1sub_100129678(v0 + 2) = v87;
  *((void *)v57 + 13) = v63;
  id v64 = [v2 adamID];
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
  uint64_t v67 = v66;

  id v68 = [v2 bundleID];
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
  uint64_t v71 = v70;

  uint64_t v72 = v100;
  sub_1001847A0((uint64_t)v6, v100);
  sub_1001291F8(v72, 0LL, 1LL, v55);
  uint64_t v73 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v73);
  uint64_t v75 = (char *)&v80 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, v99, v46);
  uint64_t v77 = type metadata accessor for AppMetadataSchemaV1.AppMetadata(0LL);
  swift_allocObject(v77, *(unsigned int *)(v77 + 48), *(unsigned __int16 *)(v77 + 52));
  uint64_t v78 = sub_1001827A8(v65, v67, v69, v71, v72, (uint64_t)v75);
  sub_1001847E4((uint64_t)v6);
  return v78;
}

void AppMetadataCache.insert(invalidIDs:type:lastModifiedDate:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v56 = a3;
  LODWORD(v6) = a2;
  sub_100129274(&qword_1002BA1A8);
  sub_10016F1A8();
  __chkstk_darwin(v8);
  sub_100164150();
  uint64_t v55 = v9;
  __chkstk_darwin(v10);
  uint64_t v57 = (uint64_t)&v50 - v11;
  uint64_t v12 = sub_1001447C4();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100185690();
  uint64_t v14 = sub_1001857BC();
  id v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.debug.getter(v15);
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v52 = v4;
  if (v17)
  {
    int v54 = v6;
    uint64_t v18 = sub_10012CE30(12LL);
    uint64_t v51 = v13;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = sub_10012CE30(32LL);
    uint64_t v58 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v50 = v19 + 4;
    uint64_t v21 = sub_100144D9C();
    uint64_t v22 = Array.description.getter(v21, &type metadata for String);
    uint64_t v53 = v12;
    uint64_t v23 = v22;
    unint64_t v6 = v24;
    swift_bridgeObjectRelease(a1, v24);
    uint64_t v25 = sub_100135074(v23, v6, &v58);
    uint64_t v26 = sub_1001857A8(v25);
    uint64_t v5 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v26, v27);
    unint64_t v28 = v6;
    LOBYTE(v6) = v54;
    swift_bridgeObjectRelease(v28, v29);
    sub_10017BC00();
    sub_10012CE90((void *)&_mh_execute_header, v15, v16, "Inserting invalid adamIDs: %s", v19);
    sub_10012CE88(v20, v30, (uint64_t)&type metadata for Any + 8);
    sub_10012CE24(v20);
    sub_10012CE24((uint64_t)v19);

    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v3, v53);
  }

  else
  {
    sub_10017BC00();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v3, v12);
  }

  uint64_t v31 = *(void *)(a1 + 16);
  if (v31)
  {
    int v54 = v6 & 1;
    uint64_t v53 = type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0LL);
    sub_100144D9C();
    uint64_t v51 = a1;
    id v32 = (uint64_t *)(a1 + 40);
    uint64_t v33 = v57;
    do
    {
      uint64_t v34 = *(v32 - 1);
      uint64_t v35 = *v32;
      sub_10018584C();
      sub_1001291F8(v36, v37, v38, v53);
      uint64_t v39 = qword_1002B7F28;
      swift_bridgeObjectRetain(v35);
      if (v39 != -1) {
        swift_once(&qword_1002B7F28, AppMetadataNetworkFetcher.init(batchTask:));
      }
      v32 += 2;
      uint64_t v40 = v33;
      uint64_t v41 = v55;
      sub_100184E84(v40, v55, &qword_1002BA1A8);
      uint64_t v42 = type metadata accessor for Date(0LL);
      __chkstk_darwin(v42);
      sub_100165960();
      (*(void (**)(void *, uint64_t))(v43 + 16))(v5, v56);
      uint64_t v44 = sub_10018366C();
      swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
      uint64_t v5 = sub_1001829CC(v34, v35, v54, v41, (uint64_t)v5);
      uint64_t v33 = v57;
      sub_10015D718(v57, &qword_1002BA1A8);
      uint64_t v45 = type metadata accessor for AppMetadataCache();
      sub_1001802E0((uint64_t)&unk_1002BA198);
      ModelActor.modelContext.getter(v45, v46);
      sub_1001802E0((uint64_t)&unk_1002BA170);
      dispatch thunk of ModelContext.insert<A>(_:)(v5, v44);
      sub_10012CF14();
      swift_release(v5);
      --v31;
    }

    while (v31);
    swift_bridgeObjectRelease(v51, v47);
  }

  uint64_t v48 = type metadata accessor for AppMetadataCache();
  sub_1001802E0((uint64_t)&unk_1002BA198);
  ModelActor.modelContext.getter(v48, v49);
  dispatch thunk of ModelContext.save()();
  sub_10012CF14();
  sub_10016C428();
}

uint64_t AppMetadataCache.deleteAll()()
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  uint64_t v2 = type metadata accessor for AppMetadataCache();
  *(void *)(v1 + 24) = v2;
  sub_1001802E0((uint64_t)&unk_1002BA1B8);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_10017FEC0, v4, v5);
}

uint64_t sub_10017FEC0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_1001802E0((uint64_t)&unk_1002BA198);
  uint64_t v3 = v2;
  ModelActor.modelContext.getter(v1, v2);
  if (qword_1002B7F28 != -1) {
    swift_once(&qword_1002B7F28, AppMetadataNetworkFetcher.init(batchTask:));
  }
  uint64_t v4 = type metadata accessor for AppMetadataSchemaV1.AppMetadata(0LL);
  uint64_t v5 = sub_100129274(&qword_1002BA188);
  uint64_t v6 = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100129274(&qword_1002BA190);
  sub_10018584C();
  sub_1001291F8(v7, v8, v9, v10);
  sub_1001802E0((uint64_t)&unk_1002BA170);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v4, v6, 1LL, v4, v11);
  sub_10015D718(v6, &qword_1002BA188);
  sub_10012CF14();
  ModelActor.modelContext.getter(*(void *)(v0 + 24), v3);
  dispatch thunk of ModelContext.save()();
  sub_10012CF14();
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018009C(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1002BA1B4;
  swift_retain(a2);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  void v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_1001800FC;
  return AppMetadataCache.deleteAll()();
}

uint64_t sub_1001800FC()
{
  uint64_t v2 = *(void *)(*v1 + 32);
  uint64_t v3 = *(void *)(*v1 + 16);
  uint64_t v4 = *v1;
  swift_task_dealloc(v2);
  swift_release(v3);
  uint64_t v5 = *(void *)(v4 + 24);
  if (v0)
  {
    uint64_t v6 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

  else
  {
    (*(void (**)(void, void))(v5 + 16))(*(void *)(v4 + 24), 0LL);
  }

  _Block_release(*(const void **)(v4 + 24));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void AppMetadataCache.__allocating_init(modelContainer:)(uint64_t a1)
{
}

uint64_t type metadata accessor for AppMetadataCache()
{
  return objc_opt_self(&OBJC_CLASS___GKAppMetadataCache);
}

void AppMetadataCache.init(modelContainer:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ModelContext(0LL);
  sub_10012CF60(v4);
  swift_retain(v1);
  uint64_t v5 = sub_10012CF1C();
  uint64_t v6 = ModelContext.init(_:)(v5);
  uint64_t v7 = type metadata accessor for DefaultSerialModelExecutor(0LL);
  sub_10012CF60(v7);
  uint64_t v8 = DefaultSerialModelExecutor.init(modelContext:)(v6);
  sub_1001802E0((uint64_t)&qword_1002B8FB8);
  v2[2] = v8;
  v2[3] = v9;
  void v2[4] = a1;
  sub_10012CF1C();
  sub_10014510C();
  v10.receiver = v2;
  v10.Class super_class = (Class)type metadata accessor for AppMetadataCache();
  objc_msgSendSuper2(&v10, "init");
  swift_release(a1);
  sub_10018571C();
}

void sub_1001802B8()
{
}

void sub_1001802E0(uint64_t a1)
{
  if (!sub_100158F00(a1))
  {
    uint64_t v4 = v3(v2);
    atomic_store(sub_100158C80(v4), v1);
  }

  sub_100132514();
}

void AppMetadataCache.init()(uint64_t a1, uint64_t a2)
{
}

uint64_t AppMetadataCache.deinit()
{
  return v0;
}

uint64_t AppMetadataCache.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t sub_100180380()
{
  uint64_t v0 = type metadata accessor for AppMetadataCache();
  sub_1001802E0((uint64_t)&unk_1002BA198);
  return ModelActor.unownedExecutor.getter(v0, v1);
}

char *sub_1001803C4(uint64_t a1, char a2, double a3)
{
  return AppMetadataCache.fetch(ids:type:ttl:)(a1, a2 & 1, a3);
}

void sub_1001803DC(uint64_t a1, uint64_t a2)
{
}

void sub_1001803F0(uint64_t a1, char a2, uint64_t a3)
{
}

uint64_t sub_100180408()
{
  uint64_t v0 = sub_100129274(&qword_1002B91B8);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001F3480;
  unint64_t v2 = sub_100184674();
  *(void *)(v1 + 3sub_100129678(v0 + 2) = &type metadata for AppMetadataSchemaV1;
  *(void *)(v1 + 40) = v2;
  return v1;
}

uint64_t sub_100180460(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6574616C706D6574LL && a2 == 0xEB000000004C5255LL)
  {
    unint64_t v5 = 0xEB000000004C5255LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574616C706D6574LL, 0xEB000000004C5255LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5, a2);
    return 0LL;
  }

  if (a1 == 0x6874646977LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v8 = 0xE500000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6874646977LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8, a2);
    return 1LL;
  }

  if (a1 == 0x746867696568LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v10 = 0xE600000000000000LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746867696568LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10, a2);
    return 2LL;
  }

  if (a1 == 0x6F6C6F4374786574LL && a2 == 0xEA00000000003172LL)
  {
    unint64_t v12 = 0xEA00000000003172LL;
    goto LABEL_32;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6C6F4374786574LL, 0xEA00000000003172LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12, a2);
    return 3LL;
  }

  unint64_t v13 = 0xEA00000000003272LL;
  if (a1 == 0x6F6C6F4374786574LL && a2 == 0xEA00000000003272LL)
  {
    unint64_t v15 = 0xEA00000000003272LL;
    goto LABEL_40;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6C6F4374786574LL, 0xEA00000000003272LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v15, v13);
    return 4LL;
  }

  unint64_t v16 = 0xEA00000000003372LL;
  if (a1 == 0x6F6C6F4374786574LL && a2 == 0xEA00000000003372LL)
  {
    unint64_t v18 = 0xEA00000000003372LL;
    goto LABEL_48;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6C6F4374786574LL, 0xEA00000000003372LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v18, v16);
    return 5LL;
  }

  unint64_t v19 = 0xEA00000000003472LL;
  if (a1 == 0x6F6C6F4374786574LL && a2 == 0xEA00000000003472LL)
  {
    unint64_t v21 = 0xEA00000000003472LL;
    goto LABEL_56;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6C6F4374786574LL, 0xEA00000000003472LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v21 = a2;
LABEL_56:
    swift_bridgeObjectRelease(v21, v19);
    return 6LL;
  }

  if (a1 == 0x756F72676B636162LL && a2 == 0xEF726F6C6F43646ELL)
  {
    swift_bridgeObjectRelease(0xEF726F6C6F43646ELL, v19);
    return 7LL;
  }

  else
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(0x756F72676B636162LL, 0xEF726F6C6F43646ELL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2, v24);
    if ((v23 & 1) != 0) {
      return 7LL;
    }
    else {
      return 8LL;
    }
  }

uint64_t sub_100180790()
{
  return 8LL;
}

uint64_t sub_100180798(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001807D4 + 4 * a1_3[a1]))( 0x6574616C706D6574LL,  0xEB000000004C5255LL);
}

uint64_t sub_1001807D4()
{
  return 0x6874646977LL;
}

uint64_t sub_1001807E8()
{
  return 0x746867696568LL;
}

uint64_t sub_1001807FC()
{
  return 0x6F6C6F4374786574LL;
}

uint64_t sub_100180818()
{
  return 0x6F6C6F4374786574LL;
}

uint64_t sub_100180838()
{
  return 0x6F6C6F4374786574LL;
}

uint64_t sub_100180858()
{
  return 0x6F6C6F4374786574LL;
}

uint64_t sub_100180878()
{
  return 0x756F72676B636162LL;
}

uint64_t sub_10018089C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100129274(&qword_1002BA568);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10012A960(a1, v9);
  unint64_t v11 = sub_1001853F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys,  &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys,  v11,  v9,  v10);
  double v12 = *v3;
  uint64_t v13 = *((void *)v3 + 1);
  char v35 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(void *)&v12, v13, &v35, v5);
  if (!v2)
  {
    double v14 = v3[2];
    char v34 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v34, v5, v14);
    double v15 = v3[3];
    char v33 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v33, v5, v15);
    uint64_t v16 = *((void *)v3 + 4);
    uint64_t v17 = *((void *)v3 + 5);
    char v32 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v32, v5);
    uint64_t v18 = *((void *)v3 + 6);
    uint64_t v19 = *((void *)v3 + 7);
    char v31 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v31, v5);
    uint64_t v20 = *((void *)v3 + 8);
    uint64_t v21 = *((void *)v3 + 9);
    char v30 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v30, v5);
    uint64_t v22 = *((void *)v3 + 10);
    uint64_t v23 = *((void *)v3 + 11);
    char v29 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v29, v5);
    uint64_t v24 = *((void *)v3 + 12);
    uint64_t v25 = *((void *)v3 + 13);
    char v28 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v28, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100180AA0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100129274(&qword_1002BA558);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10012A960(a1, v9);
  unint64_t v11 = sub_1001853F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys,  &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100129678(a1);
  }
  char v57 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v5);
  uint64_t v14 = v13;
  char v56 = 1;
  swift_bridgeObjectRetain(v13);
  KeyedDecodingContainer.decode(_:forKey:)(&v56, v5);
  uint64_t v16 = v15;
  char v55 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v55, v5);
  uint64_t v18 = v17;
  char v54 = 3;
  uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v5);
  uint64_t v46 = v12;
  char v53 = 4;
  uint64_t v49 = v19;
  swift_bridgeObjectRetain(v19);
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v53, v5);
  uint64_t v48 = v21;
  uint64_t v44 = v20;
  char v52 = 5;
  swift_bridgeObjectRetain(v21);
  uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v5);
  char v51 = 6;
  uint64_t v47 = v22;
  swift_bridgeObjectRetain(v22);
  uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v5);
  uint64_t v42 = v23;
  char v50 = 7;
  swift_bridgeObjectRetain(v23);
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v5);
  uint64_t v26 = v25;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v28 = v24;
  v27(v8, v5);
  swift_bridgeObjectRetain(v26);
  sub_100129678(a1);
  swift_bridgeObjectRelease(v26, v29);
  uint64_t v30 = v42;
  swift_bridgeObjectRelease(v42, v31);
  uint64_t v32 = v47;
  swift_bridgeObjectRelease(v47, v33);
  uint64_t v34 = v48;
  swift_bridgeObjectRelease(v48, v35);
  uint64_t v36 = v49;
  swift_bridgeObjectRelease(v49, v37);
  uint64_t result = swift_bridgeObjectRelease(v14, v38);
  *a2 = v46;
  a2[1] = v14;
  a2[2] = v16;
  a2[3] = v18;
  a2[4] = v45;
  a2[5] = v36;
  a2[6] = v44;
  a2[7] = v34;
  a2[8] = v43;
  a2[9] = v32;
  a2[10] = v41;
  a2[11] = v30;
  a2[12] = v28;
  a2[13] = v26;
  return result;
}

uint64_t sub_100180F08(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4449656C646E7562LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C646E7562LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5, a2);
    return 0LL;
  }

  if (a1 == 1701667182 && a2 == 0xE400000000000000LL)
  {
    unint64_t v8 = 0xE400000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8, a2);
    return 1LL;
  }

  if (a1 == 0x6D614E74726F6873LL && a2 == 0xE900000000000065LL)
  {
    unint64_t v10 = 0xE900000000000065LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E74726F6873LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10, a2);
    return 2LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v11 = 0x800000010024E620LL;
    if (a2 == 0x800000010024E620LL) {
      goto LABEL_29;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010024E620LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11, a2);
    return 3LL;
  }

  if (a1 == 0x7374726F70707573LL && a2 == 0xEE00656461637241LL)
  {
    unint64_t v13 = 0xEE00656461637241LL;
    goto LABEL_37;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7374726F70707573LL, 0xEE00656461637241LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13, a2);
    return 4LL;
  }

  if (a1 == 0xD000000000000016LL && a2 == 0x800000010024AF10LL)
  {
    unint64_t v14 = 0x800000010024AF10LL;
LABEL_43:
    swift_bridgeObjectRelease(v14, a2);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x800000010024AF10LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_43;
  }

  if (a1 == 0x6146656369766564LL && a2 == 0xEE007365696C696DLL)
  {
    unint64_t v16 = 0xEE007365696C696DLL;
    goto LABEL_51;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6146656369766564LL, 0xEE007365696C696DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
LABEL_51:
    swift_bridgeObjectRelease(v16, a2);
    return 6LL;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x800000010024E640LL)
  {
    unint64_t v17 = 0x800000010024E640LL;
LABEL_57:
    swift_bridgeObjectRelease(v17, a2);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010024E640LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
    goto LABEL_57;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v18 = 0x800000010024AF50LL;
    if (a2 == 0x800000010024AF50LL) {
      goto LABEL_62;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010024AF50LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
LABEL_62:
    swift_bridgeObjectRelease(v18, a2);
    return 8LL;
  }

  if (a1 == 0x6B726F77747261LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL, a2);
    return 9LL;
  }

  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B726F77747261LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2, v21);
    if ((v20 & 1) != 0) {
      return 9LL;
    }
    else {
      return 10LL;
    }
  }

uint64_t sub_100181320()
{
  return 10LL;
}

void sub_100181328(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_100185838(a1);
  Hasher._combine(_:)(v1);
  sub_10013A74C();
  sub_100185700();
}

uint64_t sub_100181358(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10018138C + 4 * byte_1001F5438[a1]))( 0x4449656C646E7562LL,  0xE800000000000000LL);
}

uint64_t sub_10018138C()
{
  return 1701667182LL;
}

uint64_t sub_10018139C()
{
  return 0x6D614E74726F6873LL;
}

unint64_t sub_1001813B8()
{
  return 0xD000000000000012LL;
}

unint64_t sub_100181450()
{
  return 0xD000000000000010LL;
}

uint64_t sub_10018146C()
{
  return 0x6B726F77747261LL;
}

uint64_t sub_100181484(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100129274(&qword_1002BA420);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v36[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10012A960(a1, v9);
  unint64_t v11 = sub_1001846B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys,  &type metadata for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v36[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v36, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    LOBYTE(v36[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v36, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    LOBYTE(v36[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v36, v5);
    uint64_t v18 = *((unsigned __int8 *)v3 + 48);
    LOBYTE(v36[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v36, v5);
    uint64_t v19 = *((unsigned __int8 *)v3 + 49);
    LOBYTE(v36[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v36, v5);
    uint64_t v20 = *((unsigned __int8 *)v3 + 50);
    LOBYTE(v36[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v36, v5);
    v36[0] = v3[7];
    char v43 = 6;
    uint64_t v21 = sub_100129274(&qword_1002B8E80);
    sub_100184DF4((uint64_t)&unk_1002BA428);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v36, &v43, v5, v21, v22);
    uint64_t v23 = (int *)type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0LL);
    uint64_t v24 = (uint64_t)v3 + v23[11];
    LOBYTE(v36[0]) = 7;
    type metadata accessor for Date(0LL);
    sub_1001846EC((uint64_t)&qword_1002B9110);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, v36, v5);
    uint64_t v25 = (uint64_t *)((char *)v3 + v23[12]);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    LOBYTE(v36[0]) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, v36, v5);
    uint64_t v28 = (uint64_t)v3 + v23[13];
    uint64_t v29 = *(void *)(v28 + 8);
    v36[0] = *(void *)v28;
    v36[1] = v29;
    __int128 v30 = *(_OWORD *)(v28 + 32);
    __int128 v37 = *(_OWORD *)(v28 + 16);
    __int128 v38 = v30;
    __int128 v31 = *(_OWORD *)(v28 + 64);
    __int128 v39 = *(_OWORD *)(v28 + 48);
    __int128 v40 = v31;
    __int128 v32 = *(_OWORD *)(v28 + 96);
    __int128 v41 = *(_OWORD *)(v28 + 80);
    __int128 v42 = v32;
    char v43 = 9;
    unint64_t v33 = sub_100184820();
    KeyedEncodingContainer.encode<A>(_:forKey:)( v36,  &v43,  v5,  &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork,  v33);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1001817A4(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = sub_100129274(&qword_1002BA400);
  uint64_t v5 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v39 = (int *)type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0LL);
  __chkstk_darwin(v39);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  sub_10012A960(a1, v11);
  unint64_t v12 = sub_1001846B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys,  &type metadata for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys,  v12,  v11,  v10);
  if (v2)
  {
    sub_100129678(a1);
  }

  else
  {
    uint64_t v13 = v5;
    uint64_t v37 = a2;
    LOBYTE(v40[0]) = 0;
    uint64_t v14 = v38;
    *(void *)uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)(v40, v38);
    *((void *)v9 + 1) = v15;
    LOBYTE(v40[0]) = 1;
    *((void *)v9 + sub_100129678(v0 + 2) = KeyedDecodingContainer.decode(_:forKey:)(v40, v14);
    *((void *)v9 + 3) = v16;
    LOBYTE(v40[0]) = 2;
    *((void *)v9 + 4) = KeyedDecodingContainer.decode(_:forKey:)(v40, v14);
    *((void *)v9 + 5) = v17;
    LOBYTE(v40[0]) = 3;
    v9[48] = KeyedDecodingContainer.decode(_:forKey:)(v40, v14) & 1;
    LOBYTE(v40[0]) = 4;
    v9[49] = KeyedDecodingContainer.decode(_:forKey:)(v40, v14) & 1;
    LOBYTE(v40[0]) = 5;
    v9[50] = KeyedDecodingContainer.decode(_:forKey:)(v40, v14) & 1;
    uint64_t v18 = sub_100129274(&qword_1002B8E80);
    char v47 = 6;
    sub_100184DF4((uint64_t)&unk_1002BA410);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, &v47, v14, v18, v19);
    *((void *)v9 + 7) = v40[0];
    uint64_t v20 = sub_100129274(&qword_1002B8168);
    uint64_t v36 = &v34;
    __chkstk_darwin(v20);
    uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v23 = type metadata accessor for Date(0LL);
    LOBYTE(v40[0]) = 7;
    sub_1001846EC((uint64_t)&qword_1002B8E58);
    uint64_t v35 = v22;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, v40, v14, v23, v24);
    sub_10018471C((uint64_t)v35, (uint64_t)&v9[v39[11]]);
    LOBYTE(v40[0]) = 8;
    uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v40, v14);
    uint64_t v26 = (uint64_t *)&v9[v39[12]];
    *uint64_t v26 = v25;
    v26[1] = v27;
    char v47 = 9;
    unint64_t v28 = sub_100184764();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork,  &v47,  v14,  &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork,  v28);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v38);
    uint64_t v29 = v40[1];
    __int128 v30 = &v9[v39[13]];
    *(void *)__int128 v30 = v40[0];
    *((void *)v30 + 1) = v29;
    __int128 v31 = v42;
    *((_OWORD *)v30 + 1) = v41;
    *((_OWORD *)v30 + sub_100129678(v0 + 2) = v31;
    __int128 v32 = v44;
    *((_OWORD *)v30 + 3) = v43;
    *((_OWORD *)v30 + 4) = v32;
    __int128 v33 = v46;
    *((_OWORD *)v30 + 5) = v45;
    *((_OWORD *)v30 + 6) = v33;
    sub_1001847A0((uint64_t)v9, v37);
    sub_100129678(a1);
    sub_1001847E4((uint64_t)v9);
  }

uint64_t sub_100181D3C()
{
  return sub_100180798(*v0);
}

uint64_t sub_100181D44@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100180460(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100181D68@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100180790();
  *a1 = result;
  return result;
}

uint64_t sub_100181D8C(uint64_t a1)
{
  unint64_t v2 = sub_1001853F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100181DB4(uint64_t a1)
{
  unint64_t v2 = sub_1001853F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100181DDC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_100180AA0(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x70uLL);
  }
  return result;
}

uint64_t sub_100181E24(void *a1)
{
  return sub_10018089C(a1);
}

void sub_100181E74()
{
}

void sub_100181E8C(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  sub_10013A74C();
  sub_100185700();
}

uint64_t sub_100181EC0()
{
  return sub_100181358(*v0);
}

uint64_t sub_100181EC8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100180F08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100181EEC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100181320();
  *a1 = result;
  return result;
}

uint64_t sub_100181F10(uint64_t a1)
{
  unint64_t v2 = sub_1001846B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100181F38(uint64_t a1)
{
  unint64_t v2 = sub_1001846B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100181F60(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_100181F74(void *a1)
{
  return sub_100181484(a1);
}

uint64_t sub_100181F88@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, _BYTE *a5@<X8>)
{
  uint64_t v9 = v19;
  uint64_t v10 = v20;
  sub_10012A960(v18, v19);
  uint64_t KeyPath = swift_getKeyPath(a4);
  v17[0] = a1;
  v17[1] = a2;
  uint64_t v12 = sub_100129274(&qword_1002B86F0);
  sub_100184DF4((uint64_t)&unk_1002BA3F0);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, v17, v12, v13, v9, v10);
  uint64_t v14 = swift_release(KeyPath);
  sub_1001322A0(v14, v15);
  uint64_t result = sub_100129678(v18);
  *a5 = 0;
  return result;
}

uint64_t sub_10018206C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath = swift_getKeyPath(a4);
  v11[0] = a2;
  v11[1] = a3;
  sub_100185808((uint64_t)&unk_1002BA170);
  uint64_t v8 = v7;
  sub_100184DF4((uint64_t)&unk_1002BA3F0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v11, v8, v9);
  return sub_100158E00();
}

uint64_t sub_100182120(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v10;
  uint64_t v4 = v11;
  sub_10012A960(v9, v10);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F5930);
  uint64_t v6 = type metadata accessor for Date(0LL);
  sub_1001846EC((uint64_t)&qword_1002B9110);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, a1, v6, v7, v3, v4);
  swift_release(KeyPath);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
  return sub_100129678(v9);
}

uint64_t sub_1001821E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return sub_100182268((uint64_t)v4);
}

uint64_t sub_100182268(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F5930);
  uint64_t v8 = v1;
  uint64_t v9 = a1;
  sub_1001802E0((uint64_t)&unk_1002BA3A8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v10,  KeyPath,  sub_100184614,  &v7,  (char *)&type metadata for () + 8,  v4);
  swift_release(KeyPath);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
}

uint64_t sub_10018232C(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F5930);
  sub_1001802E0((uint64_t)&unk_1002BA170);
  uint64_t v5 = v4;
  sub_1001846EC((uint64_t)&qword_1002B9110);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, a2, v5, v6);
  return swift_release(KeyPath);
}

uint64_t sub_1001823CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5 = v12;
  uint64_t v6 = v13;
  sub_10012A960(v11, v12);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F5958);
  uint64_t v8 = sub_100129274(&qword_1002BA1A8);
  unint64_t v9 = sub_100184590((uint64_t)&unk_1002BA3D0);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, a1, v8, v9, v5, v6);
  swift_release(KeyPath);
  sub_10015D718(a1, &qword_1002BA1A8);
  uint64_t result = sub_100129678(v11);
  *a3 = 0;
  return result;
}

uint64_t sub_1001824B4@<X0>(void *a1@<X8>)
{
  uint64_t v10 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F5958);
  sub_1001802E0((uint64_t)&unk_1002BA3A8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1001F5958);
  sub_1001802E0((uint64_t)&unk_1002BA170);
  uint64_t v7 = v6;
  unint64_t v8 = sub_100184590((uint64_t)&unk_1002BA3E0);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v7, v8);
  return swift_release(v5);
}

void sub_1001825BC(uint64_t a1)
{
  uint64_t v2 = sub_100129274(&qword_1002BA1A8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100184E84(a1, (uint64_t)v4, &qword_1002BA1A8);
  sub_100182640((uint64_t)v4);
}

void sub_100182640(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F5958);
  uint64_t v6 = v1;
  uint64_t v7 = a1;
  sub_1001802E0((uint64_t)&unk_1002BA3A8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_100184578,  &v5,  (char *)&type metadata for () + 8,  v4);
  swift_release(KeyPath);
  sub_10015D718(a1, &qword_1002BA1A8);
}

uint64_t sub_1001826F8(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F5958);
  sub_1001802E0((uint64_t)&unk_1002BA170);
  uint64_t v5 = v4;
  unint64_t v6 = sub_100184590((uint64_t)&unk_1002BA3D0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, a2, v5, v6);
  return swift_release(KeyPath);
}

void *sub_1001827A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v10 = *v6;
  uint64_t v11 = sub_100129274(&qword_1002BA1A8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v7[6] = sub_100129274(&qword_1002BA438);
  sub_1001802E0((uint64_t)&unk_1002BA170);
  uint64_t v15 = v14;
  v28[0] = v10;
  v28[1] = v10;
  void v28[2] = v14;
  v28[3] = v14;
  v7[7] = swift_getOpaqueTypeConformance2( v28,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10015848C(v7 + 3);
  uint64_t v16 = static PersistentModel.createBackingData<A>()(v10, v10, v15, v15);
  *((_WORD *)v7 + 8) = 257;
  *((_BYTE *)v7 + 18) = 1;
  ObservationRegistrar.init()(v16);
  sub_100181F88(a1, a2, (uint64_t)(v7 + 3), (uint64_t)&unk_1001F58E0, (_BYTE *)v7 + 16);
  sub_100181F88(v24, v25, (uint64_t)(v7 + 3), (uint64_t)&unk_1001F5908, (_BYTE *)v7 + 17);
  uint64_t v17 = v26;
  sub_100184E84(v26, (uint64_t)v13, &qword_1002BA1A8);
  sub_1001823CC((uint64_t)v13, (uint64_t)(v7 + 3), (_BYTE *)v7 + 18);
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v27, v18);
  sub_100182120((uint64_t)v21, (uint64_t)(v7 + 3));
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v18);
  sub_10015D718(v17, &qword_1002BA1A8);
  return v7;
}

void *sub_1001829CC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = v5;
  uint64_t v27 = a4;
  uint64_t v11 = *v5;
  uint64_t v12 = sub_100129274(&qword_1002BA1A8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[6] = sub_100129274(&qword_1002BA438);
  sub_1001802E0((uint64_t)&unk_1002BA170);
  uint64_t v16 = v15;
  v28[0] = v11;
  v28[1] = v11;
  void v28[2] = v15;
  v28[3] = v15;
  v6[7] = swift_getOpaqueTypeConformance2( v28,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10015848C(v6 + 3);
  uint64_t v17 = static PersistentModel.createBackingData<A>()(v11, v11, v16, v16);
  *((_WORD *)v6 + 8) = 257;
  *((_BYTE *)v6 + 18) = 1;
  ObservationRegistrar.init()(v17);
  if ((a3 & 1) != 0)
  {
    uint64_t v19 = &unk_1001F58E0;
    uint64_t v18 = v6 + 2;
  }

  else
  {
    uint64_t v18 = (char *)v6 + 17;
    uint64_t v19 = &unk_1001F5908;
  }

  sub_100181F88(a1, a2, (uint64_t)(v6 + 3), (uint64_t)v19, v18);
  uint64_t v20 = v27;
  sub_100184E84(v27, (uint64_t)v14, &qword_1002BA1A8);
  sub_1001823CC((uint64_t)v14, (uint64_t)(v6 + 3), (_BYTE *)v6 + 18);
  uint64_t v21 = type metadata accessor for Date(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, a5, v21);
  sub_100182120((uint64_t)v24, (uint64_t)(v6 + 3));
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a5, v21);
  sub_10015D718(v20, &qword_1002BA1A8);
  return v6;
}

uint64_t sub_100182BEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 24;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_10012D388(v3, a1);
}

uint64_t sub_100182C34(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + 24);
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_100129678(v3);
  sub_100156808(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t sub_100182C8C()
{
  uint64_t v0 = sub_100129274(&qword_1002B8E70);
  uint64_t v1 = *(void *)(type metadata accessor for Schema.PropertyMetadata(0LL) - 8);
  uint64_t v20 = swift_allocObject( v0,  ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
        + 4LL * *(void *)(v1 + 72),
          *(unsigned __int8 *)(v1 + 80) | 7LL);
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001F3380;
  uint64_t KeyPath = swift_getKeyPath(&unk_1001F58E0);
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  uint64_t v3 = sub_100129274(&qword_1002BA3C0);
  uint64_t v4 = *(void *)(type metadata accessor for Schema.Attribute.Option(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((v6 + 32) & ~v6) + v5;
  uint64_t v8 = v6 | 7;
  uint64_t v9 = swift_allocObject(v3, v7, v6 | 7);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001F3480;
  static Schema.Attribute.Option.unique.getter();
  uint64_t v10 = type metadata accessor for Schema.Attribute(0LL);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v11 = Schema.Attribute.init(_:originalName:hashModifier:)(v9, 0LL, 0LL, 0LL, 0LL);
  *((void *)&v22 + 1) = v10;
  sub_1001802E0((uint64_t)&unk_1002BA3C8);
  uint64_t v13 = v12;
  uint64_t v23 = v12;
  *(void *)&__int128 v21 = v11;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x44496D616461LL,  0xE600000000000000LL,  KeyPath,  &v24,  &v21);
  uint64_t v14 = swift_getKeyPath(&unk_1001F5908);
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  uint64_t v15 = swift_allocObject(v3, v7, v8);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001F3480;
  static Schema.Attribute.Option.unique.getter();
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v16 = Schema.Attribute.init(_:originalName:hashModifier:)(v15, 0LL, 0LL, 0LL, 0LL);
  *((void *)&v22 + 1) = v10;
  uint64_t v23 = v13;
  *(void *)&__int128 v21 = v16;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x4449656C646E7562LL,  0xE800000000000000LL,  v14,  &v24,  &v21);
  uint64_t v17 = swift_getKeyPath(&unk_1001F5930);
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  uint64_t v23 = 0LL;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x69646F4D7473616CLL,  0xEC00000064656966LL,  v17,  &v24,  &v21);
  uint64_t v18 = swift_getKeyPath(&unk_1001F5958);
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  uint64_t v23 = 0LL;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x7475626972747461LL,  0xEA00000000007365LL,  v18,  &v24,  &v21);
  return v20;
}

void *sub_100182F78(void *a1)
{
  return sub_100182FB0(a1);
}

void *sub_100182FB0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  v2[6] = sub_100129274(&qword_1002BA438);
  sub_1001802E0((uint64_t)&unk_1002BA170);
  uint64_t v6 = v5;
  *(void *)&__int128 v10 = v4;
  *((void *)&v10 + 1) = v4;
  uint64_t v11 = v5;
  uint64_t v12 = v5;
  v2[7] = swift_getOpaqueTypeConformance2( &v10,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10015848C(v2 + 3);
  uint64_t v7 = static PersistentModel.createBackingData<A>()(v4, v4, v6, v6);
  *((_WORD *)v2 + 8) = 257;
  *((_BYTE *)v2 + 18) = 1;
  ObservationRegistrar.init()(v7);
  *((_WORD *)v2 + 8) = 0;
  *((_BYTE *)v2 + 18) = 0;
  sub_10012D388((uint64_t)a1, (uint64_t)&v10);
  swift_beginAccess(v2 + 3, v9, 33LL, 0LL);
  sub_100129678(v2 + 3);
  sub_100156808(&v10, (uint64_t)(v2 + 3));
  swift_endAccess(v9);
  sub_100129678(a1);
  return v2;
}

uint64_t sub_1001830D4()
{
  uint64_t v1 = (char *)v0
     + OBJC_IVAR____TtCV14GameDaemonCoreP33_9DC203CAEB983F42B18FE72770C1F80719AppMetadataSchemaV111AppMetadata___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

Swift::Int sub_100183130()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  sub_1001802E0((uint64_t)&unk_1002BA3B0);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

void (*sub_1001831B4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_100182BEC((uint64_t)v3);
  return sub_100183200;
}

void sub_100183200(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    sub_10012D388(*a1, v2 + 40);
    sub_100182C34((__int128 *)(v2 + 40));
    sub_100129678((void *)v2);
  }

  else
  {
    sub_100182C34((__int128 *)*a1);
  }

  free((void *)v2);
}

Swift::Int sub_100183264()
{
  return sub_100183130();
}

uint64_t sub_100183284(uint64_t a1, uint64_t a2)
{
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_1001832E0(uint64_t a1)
{
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_10018333C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  sub_1001802E0((uint64_t)&unk_1002BA170);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

id sub_100183394( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v18);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4, v20);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6, v22);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a8, v24);
  v25.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a11, v26);
  uint64_t v27 = type metadata accessor for Date(0LL);
  Class isa = 0LL;
  if (sub_10012B4E8(a12, 1LL, v27) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8LL))(a12, v27);
  }

  if (a14)
  {
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a14, v30);
  }

  else
  {
    NSString v29 = 0LL;
  }

  LOWORD(v3sub_100129678(v0 + 3) = *(_WORD *)((_BYTE *)&a10 + 1) & 0x101;
  id v31 = objc_msgSend( v35,  "initWithBundleID:adamID:name:shortName:artwork:supportsGameCenter:supportsArcade:supportsGameController:device Families:latestVersionReleaseDate:genreDisplayName:",  v34,  v19,  v21,  v23,  a9,  a10 & 1,  v33,  v25.super.isa,  isa,  v29);

  return v31;
}

unint64_t sub_10018355C()
{
  unint64_t result = qword_1002BA1A0;
  if (!qword_1002BA1A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5810, &type metadata for AppMetadataCache.AppMetadataCacheError);
    atomic_store(result, (unint64_t *)&qword_1002BA1A0);
  }

  return result;
}

void sub_100183598()
{
}

uint64_t type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(uint64_t a1)
{
  return sub_1001835D4( a1,  (uint64_t *)&unk_1002BA330,  (uint64_t)&nominal type descriptor for AppMetadataSchemaV1.AppMetadata.Attributes);
}

uint64_t sub_1001835D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

void sub_100183604(uint64_t a1)
{
  *(void *)(a1 + 8) = v2;
}

void sub_100183640()
{
}

uint64_t sub_10018366C()
{
  return type metadata accessor for AppMetadataSchemaV1.AppMetadata(0LL);
}

uint64_t sub_100183674(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int8 + 64;
  uint64_t v4[2] = (char *)&value witness table for () + 64;
  void v4[3] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[4] = "(";
  uint64_t result = type metadata accessor for ObservationRegistrar(319LL);
  if (v3 <= 0x3F)
  {
    void v4[5] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1.AppMetadata._SwiftDataNoType()
{
  return &type metadata for AppMetadataSchemaV1.AppMetadata._SwiftDataNoType;
}

void *sub_10018371C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 3sub_100129678(v0 + 2) = a2[4];
    *(void *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *(_WORD *)(a1 + 49) = *(_WORD *)((char *)a2 + 49);
    uint64_t v10 = a2[7];
    uint64_t v11 = a3[11];
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (char *)a2 + v11;
    *(void *)(a1 + 56) = v10;
    uint64_t v14 = type metadata accessor for Date(0LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    if (sub_10012B4E8((uint64_t)v13, 1LL, v14))
    {
      uint64_t v15 = sub_100129274(&qword_1002B8168);
      memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
      sub_1001291F8((uint64_t)v12, 0LL, 1LL, v14);
    }

    uint64_t v17 = a3[12];
    uint64_t v18 = a3[13];
    NSString v19 = (void *)((char *)v4 + v17);
    uint64_t v20 = (uint64_t *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    *NSString v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = (char *)v4 + v18;
    uint64_t v23 = (uint64_t)a2 + v18;
    uint64_t v24 = *(void *)(v23 + 8);
    *(void *)uint64_t v22 = *(void *)v23;
    *((void *)v22 + 1) = v24;
    *((_OWORD *)v22 + 1) = *(_OWORD *)(v23 + 16);
    uint64_t v25 = *(void *)(v23 + 40);
    *((void *)v22 + 4) = *(void *)(v23 + 32);
    *((void *)v22 + 5) = v25;
    uint64_t v26 = *(void *)(v23 + 56);
    *((void *)v22 + 6) = *(void *)(v23 + 48);
    *((void *)v22 + 7) = v26;
    uint64_t v27 = *(void *)(v23 + 72);
    *((void *)v22 + 8) = *(void *)(v23 + 64);
    *((void *)v22 + 9) = v27;
    uint64_t v28 = *(void *)(v23 + 88);
    *((void *)v22 + 10) = *(void *)(v23 + 80);
    *((void *)v22 + 11) = v28;
    uint64_t v29 = *(void *)(v23 + 104);
    *((void *)v22 + 1sub_100129678(v0 + 2) = *(void *)(v23 + 96);
    *((void *)v22 + 1sub_100129678(v0 + 3) = v29;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
  }

  return v4;
}

uint64_t sub_1001838E4(void *a1, int *a2)
{
  uint64_t v7 = (uint64_t)a1 + a2[11];
  uint64_t v8 = type metadata accessor for Date(0LL);
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[12] + 8), v9);
  uint64_t v10 = (void *)((char *)a1 + a2[13]);
  swift_bridgeObjectRelease(v10[1], v11);
  swift_bridgeObjectRelease(v10[5], v12);
  swift_bridgeObjectRelease(v10[7], v13);
  swift_bridgeObjectRelease(v10[9], v14);
  swift_bridgeObjectRelease(v10[11], v15);
  return swift_bridgeObjectRelease(v10[13], v16);
}

uint64_t sub_1001839AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100129678(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = a3[11];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  *(void *)(a1 + 56) = v9;
  uint64_t v13 = type metadata accessor for Date(0LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  if (sub_10012B4E8((uint64_t)v12, 1LL, v13))
  {
    uint64_t v14 = sub_100129274(&qword_1002B8168);
    memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
    sub_1001291F8((uint64_t)v11, 0LL, 1LL, v13);
  }

  uint64_t v15 = a3[12];
  uint64_t v16 = a3[13];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a1 + v16;
  uint64_t v21 = a2 + v16;
  uint64_t v22 = *(void *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(void *)(v20 + 8) = v22;
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(v21 + 16);
  uint64_t v23 = *(void *)(v21 + 40);
  *(void *)(v20 + 3sub_100129678(v0 + 2) = *(void *)(v21 + 32);
  *(void *)(v20 + 40) = v23;
  uint64_t v24 = *(void *)(v21 + 56);
  *(void *)(v20 + 48) = *(void *)(v21 + 48);
  *(void *)(v20 + 56) = v24;
  uint64_t v25 = *(void *)(v21 + 72);
  *(void *)(v20 + 64) = *(void *)(v21 + 64);
  *(void *)(v20 + 7sub_100129678(v0 + 2) = v25;
  uint64_t v26 = *(void *)(v21 + 88);
  *(void *)(v20 + 80) = *(void *)(v21 + 80);
  *(void *)(v20 + 88) = v26;
  uint64_t v27 = *(void *)(v21 + 104);
  *(void *)(v20 + 96) = *(void *)(v21 + 96);
  *(void *)(v20 + 104) = v27;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  return a1;
}

uint64_t sub_100183B48(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10, v11);
  *(void *)(a1 + 3sub_100129678(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13, v14);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  uint64_t v15 = *(void *)(a2 + 56);
  uint64_t v16 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16, v17);
  uint64_t v18 = a3[11];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = type metadata accessor for Date(0LL);
  int v22 = sub_10012B4E8((uint64_t)v19, 1LL, v21);
  int v23 = sub_10012B4E8((uint64_t)v20, 1LL, v21);
  if (!v22)
  {
    uint64_t v24 = *(void *)(v21 - 8);
    if (!v23)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 24))(v19, v20, v21);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v24 + 8))(v19, v21);
    goto LABEL_6;
  }

  if (v23)
  {
LABEL_6:
    uint64_t v25 = sub_100129274(&qword_1002B8168);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v19, v20, v21);
  sub_1001291F8((uint64_t)v19, 0LL, 1LL, v21);
LABEL_7:
  uint64_t v26 = a3[12];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  *uint64_t v27 = *v28;
  uint64_t v29 = v28[1];
  uint64_t v30 = v27[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30, v31);
  uint64_t v32 = a3[13];
  uint64_t v33 = (void *)(a1 + v32);
  NSString v34 = (void *)(a2 + v32);
  *uint64_t v33 = *(void *)(a2 + v32);
  uint64_t v35 = *(void *)(a2 + v32 + 8);
  uint64_t v36 = *(void *)(a1 + v32 + 8);
  v33[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36, v37);
  uint64_t v33[2] = v34[2];
  v33[3] = v34[3];
  v33[4] = v34[4];
  uint64_t v38 = v34[5];
  uint64_t v39 = v33[5];
  v33[5] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39, v40);
  v33[6] = v34[6];
  uint64_t v41 = v34[7];
  uint64_t v42 = v33[7];
  v33[7] = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42, v43);
  v33[8] = v34[8];
  uint64_t v44 = v34[9];
  uint64_t v45 = v33[9];
  void v33[9] = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45, v46);
  v33[10] = v34[10];
  uint64_t v47 = v34[11];
  uint64_t v48 = v33[11];
  v33[11] = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48, v49);
  v33[12] = v34[12];
  uint64_t v50 = v34[13];
  uint64_t v51 = v33[13];
  v33[13] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51, v52);
  return a1;
}

uint64_t sub_100183DE4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v8 = a3[11];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 3sub_100129678(v0 + 2) = v7;
  uint64_t v11 = type metadata accessor for Date(0LL);
  if (sub_10012B4E8((uint64_t)v10, 1LL, v11))
  {
    uint64_t v12 = sub_100129274(&qword_1002B8168);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
    sub_1001291F8((uint64_t)v9, 0LL, 1LL, v11);
  }

  uint64_t v13 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  memcpy((void *)(a1 + v13), (const void *)(a2 + v13), 0x70uLL);
  return a1;
}

uint64_t sub_100183EDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7, a2);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9, v10);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_100129678(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v11;
  swift_bridgeObjectRelease(v12, v13);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  uint64_t v14 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease(v14, v15);
  uint64_t v16 = a3[11];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for Date(0LL);
  int v20 = sub_10012B4E8((uint64_t)v17, 1LL, v19);
  int v21 = sub_10012B4E8((uint64_t)v18, 1LL, v19);
  if (!v20)
  {
    uint64_t v23 = *(void *)(v19 - 8);
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(v23 + 40))(v17, v18, v19);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v23 + 8))(v17, v19);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v24 = sub_100129274(&qword_1002B8168);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
  sub_1001291F8((uint64_t)v17, 0LL, 1LL, v19);
LABEL_7:
  uint64_t v25 = a3[12];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  uint64_t v30 = v26[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30, v22);
  uint64_t v31 = a3[13];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  uint64_t v34 = *(void *)(v33 + 8);
  uint64_t v35 = *(void *)(a1 + v31 + 8);
  *(void *)uint64_t v32 = *(void *)v33;
  *(void *)(v32 + 8) = v34;
  swift_bridgeObjectRelease(v35, v36);
  *(_OWORD *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(v33 + 16);
  uint64_t v37 = *(void *)(v33 + 40);
  uint64_t v38 = *(void *)(v32 + 40);
  *(void *)(v32 + 3sub_100129678(v0 + 2) = *(void *)(v33 + 32);
  *(void *)(v32 + 40) = v37;
  swift_bridgeObjectRelease(v38, v39);
  uint64_t v40 = *(void *)(v33 + 56);
  uint64_t v41 = *(void *)(v32 + 56);
  *(void *)(v32 + 48) = *(void *)(v33 + 48);
  *(void *)(v32 + 56) = v40;
  swift_bridgeObjectRelease(v41, v42);
  uint64_t v43 = *(void *)(v33 + 72);
  uint64_t v44 = *(void *)(v32 + 72);
  *(void *)(v32 + 64) = *(void *)(v33 + 64);
  *(void *)(v32 + 7sub_100129678(v0 + 2) = v43;
  swift_bridgeObjectRelease(v44, v45);
  uint64_t v46 = *(void *)(v33 + 88);
  uint64_t v47 = *(void *)(v32 + 88);
  *(void *)(v32 + 80) = *(void *)(v33 + 80);
  *(void *)(v32 + 88) = v46;
  swift_bridgeObjectRelease(v47, v48);
  uint64_t v49 = *(void *)(v33 + 104);
  uint64_t v50 = *(void *)(v32 + 104);
  *(void *)(v32 + 96) = *(void *)(v33 + 96);
  *(void *)(v32 + 104) = v49;
  swift_bridgeObjectRelease(v50, v51);
  return a1;
}

uint64_t sub_1001840C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001840D4);
}

uint64_t sub_1001840D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(swift_bridgeObjectRelease(v0[23], v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100129274(&qword_1002B8168);
    return sub_10012B4E8(a1 + *(int *)(a3 + 44), a2, v8);
  }

uint64_t sub_10018414C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100184158);
}

void sub_100184158(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = (a2 - 1);
    sub_10013A774();
  }

  else
  {
    uint64_t v7 = sub_100129274(&qword_1002B8168);
    sub_1001291F8(a1 + *(int *)(a4 + 44), a2, a2, v7);
  }

void sub_1001841C0(uint64_t a1)
{
  v4[0] = &unk_1001F55B0;
  v4[1] = &unk_1001F55B0;
  uint64_t v4[2] = &unk_1001F55B0;
  void v4[3] = &unk_1001F55C8;
  v4[4] = &unk_1001F55C8;
  void v4[5] = &unk_1001F55C8;
  void v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100184268(319LL);
  if (v3 <= 0x3F)
  {
    void v4[7] = *(void *)(v2 - 8) + 64LL;
    v4[8] = &unk_1001F55E0;
    void v4[9] = &unk_1001F55F8;
    swift_initStructMetadata(a1, 256LL, 10LL, v4, a1 + 16);
  }

void sub_100184268(uint64_t a1)
{
  if (!qword_1002BA340)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1002BA340);
    }
  }

uint64_t storeEnumTagSinglePayload for AppMetadataCache.AppMetadataCacheError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001842FC + 4 * byte_1001F5442[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10018431C + 4 * byte_1001F5447[v4]))();
  }
}

_BYTE *sub_1001842FC(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10018431C(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_100184324(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10018432C(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_100184334(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10018433C(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataCache.AppMetadataCacheError()
{
  return &type metadata for AppMetadataCache.AppMetadataCacheError;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1()
{
  return &type metadata for AppMetadataSchemaV1;
}

ValueMetadata *type metadata accessor for AppMetadataMigrationPlan()
{
  return &type metadata for AppMetadataMigrationPlan;
}

unint64_t sub_10018437C()
{
  unint64_t result = qword_1002BA390;
  if (!qword_1002BA390)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F56DC, &type metadata for AppMetadataCache.AppMetadataCacheError);
    atomic_store(result, (unint64_t *)&qword_1002BA390);
  }

  return result;
}

void sub_1001843B8()
{
}

void sub_1001843E8()
{
}

void sub_100184418()
{
}

void sub_100184448()
{
}

void sub_100184478()
{
}

void sub_1001844A8(uint64_t *a1@<X8>)
{
  *a1 = sub_10017E7AC();
  a1[1] = v2;
  sub_100132514();
}

uint64_t sub_1001844CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10017EB5C(a1, a2, a3, a4, (uint64_t)&unk_1001F58E0, (uint64_t)sub_100184650);
}

void sub_1001844F0(uint64_t *a1@<X8>)
{
  *a1 = sub_10017EA64();
  a1[1] = v2;
  sub_100132514();
}

uint64_t sub_100184514(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10017EB5C(a1, a2, a3, a4, (uint64_t)&unk_1001F5908, (uint64_t)sub_10018462C);
}

void sub_100184538(void *a1@<X8>)
{
}

void sub_100184558(void *a1@<X8>)
{
}

uint64_t sub_100184578()
{
  return sub_1001826F8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_100184590(uint64_t a1)
{
  unint64_t result = sub_100158F00(a1);
  if (!result)
  {
    uint64_t v5 = v4;
    uint64_t v6 = v3;
    uint64_t v7 = sub_1001292F8(&qword_1002BA1A8);
    sub_1001802E0(v6);
    unint64_t result = swift_getWitnessTable(v5, v7);
    atomic_store(result, v1);
  }

  return result;
}

uint64_t sub_100184614()
{
  return sub_10018232C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10018462C()
{
  return sub_10018206C(v0[2], v0[3], v0[4], (uint64_t)&unk_1001F5908);
}

uint64_t sub_100184650()
{
  return sub_10018206C(v0[2], v0[3], v0[4], (uint64_t)&unk_1001F58E0);
}

unint64_t sub_100184674()
{
  unint64_t result = qword_1002BA3F8;
  if (!qword_1002BA3F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F566C, &type metadata for AppMetadataSchemaV1);
    atomic_store(result, (unint64_t *)&qword_1002BA3F8);
  }

  return result;
}

unint64_t sub_1001846B0()
{
  unint64_t result = qword_1002BA408;
  if (!qword_1002BA408)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F5A9C,  &type metadata for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002BA408);
  }

  return result;
}

void sub_1001846EC(uint64_t a1)
{
  if (!sub_100158F00(a1))
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    atomic_store(sub_100158C80(v2), v1);
  }

  sub_100132514();
}

uint64_t sub_10018471C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129274(&qword_1002B8168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100184764()
{
  unint64_t result = qword_1002BA418;
  if (!qword_1002BA418)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5A74, &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork);
    atomic_store(result, (unint64_t *)&qword_1002BA418);
  }

  return result;
}

uint64_t sub_1001847A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001847E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100184820()
{
  unint64_t result = qword_1002BA430;
  if (!qword_1002BA430)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5A4C, &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork);
    atomic_store(result, (unint64_t *)&qword_1002BA430);
  }

  return result;
}

uint64_t sub_10018485C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100184888()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1002BA444);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1001482C4;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1002BA440 + dword_1002BA440))(v2, v3);
}

id sub_1001848EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v13);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4, v15);
  NSString v16 = String._bridgeToObjectiveC()();
  sub_1001322A0((uint64_t)v16, v17);
  id v18 = [a8 gameCenterCacheDatabaseURLForPlayerID:v12 language:v14 name:v16 fileManager:a7];

  return v18;
}

uint64_t sub_1001849B0(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

uint64_t sub_100184A18(void *a1)
{
  id v1 = [a1 genreDisplayName];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_100184A78()
{
}

unint64_t sub_100184A90()
{
  unint64_t result = qword_1002BA4A8;
  if (!qword_1002BA4A8)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002BA4A0);
    sub_100184AFC();
    sub_100184D1C();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.NilCoalesce<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002BA4A8);
  }

  return result;
}

unint64_t sub_100184AFC()
{
  unint64_t result = qword_1002BA4B0;
  if (!qword_1002BA4B0)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002BA460);
    sub_100184B68();
    sub_100184BE4();
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>,  v1);
    atomic_store(result, (unint64_t *)&qword_1002BA4B0);
  }

  return result;
}

unint64_t sub_100184B68()
{
  unint64_t result = qword_1002BA4B8;
  if (!qword_1002BA4B8)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002BA468);
    sub_100184D80((uint64_t)&unk_1002BA4C0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002BA4B8);
  }

  return result;
}

unint64_t sub_100184BE4()
{
  unint64_t result = qword_1002BA4C8;
  if (!qword_1002BA4C8)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002BA480);
    sub_100184C68();
    sub_100184D80((uint64_t)&unk_1002BA4F8);
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for <> PredicateExpressions.SequenceContains<A, B>,  v1);
    atomic_store(result, (unint64_t *)&qword_1002BA4C8);
  }

  return result;
}

unint64_t sub_100184C68()
{
  unint64_t result = qword_1002BA4D0;
  if (!qword_1002BA4D0)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002BA4D8);
    sub_100184DF4((uint64_t)&unk_1002BA4E0);
    sub_100184DF4((uint64_t)&unk_1002BA4F0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002BA4D0);
  }

  return result;
}

unint64_t sub_100184D1C()
{
  unint64_t result = qword_1002BA508;
  if (!qword_1002BA508)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002BA498);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002BA508);
  }

  return result;
}

void sub_100184D80(uint64_t a1)
{
  if (!sub_100158F00(a1))
  {
    uint64_t v3 = sub_1001292F8(v2);
    atomic_store(sub_100158C80(v3), v1);
  }

  sub_100132514();
}

unint64_t sub_100184DB0()
{
  unint64_t result = qword_1002BA530;
  if (!qword_1002BA530)
  {
    uint64_t v1 = sub_1001292F8(&qword_1002BA4E8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002BA530);
  }

  return result;
}

void sub_100184DF4(uint64_t a1)
{
  if (!sub_100158F00(a1))
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_1001292F8(v2);
    atomic_store(swift_getWitnessTable(v4, v5), v1);
  }

  sub_10018571C();
}

uint64_t sub_100184E40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_100184E84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100129274(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_100132514();
}

uint64_t getEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = 1;
  }
  else {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_100184F98 + 4 * byte_1001F5451[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100184FCC + 4 * byte_1001F544C[v4]))();
}

uint64_t sub_100184FCC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100184FD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100184FDCLL);
  }
  return result;
}

uint64_t sub_100184FE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100184FF0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 9;
  return result;
}

uint64_t sub_100184FF4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100184FFC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys()
{
  return &type metadata for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys;
}

uint64_t destroy for AppMetadataSchemaV1.AppMetadata.Artwork(void *a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a1[13], v7);
}

uint64_t initializeWithCopy for AppMetadataSchemaV1.AppMetadata.Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100129678(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100129678(v0 + 2) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

void *assignWithCopy for AppMetadataSchemaV1.AppMetadata.Artwork(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v7 = a2[5];
  uint64_t v8 = a1[5];
  a1[5] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8, v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11, v12);
  a1[8] = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a1[9];
  a1[9] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14, v15);
  a1[10] = a2[10];
  uint64_t v16 = a2[11];
  uint64_t v17 = a1[11];
  a1[11] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17, v18);
  a1[12] = a2[12];
  uint64_t v19 = a2[13];
  uint64_t v20 = a1[13];
  a1[13] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20, v21);
  return a1;
}

void *initializeWithTake for AppMetadataSchemaV1.AppMetadata.Artwork(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t assignWithTake for AppMetadataSchemaV1.AppMetadata.Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5, a2);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_100129678(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7, v8);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease(v10, v11);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100129678(v0 + 2) = v12;
  swift_bridgeObjectRelease(v13, v14);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v15;
  swift_bridgeObjectRelease(v16, v17);
  uint64_t v18 = *(void *)(a2 + 104);
  uint64_t v19 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v18;
  swift_bridgeObjectRelease(v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Artwork(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 112))
    {
      LODWORD(swift_bridgeObjectRelease(v0[8], v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(swift_bridgeObjectRelease(v0[8], v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(swift_bridgeObjectRelease(v0[8], v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Artwork( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_100129678(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 11sub_100129678(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 11sub_100129678(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1.AppMetadata.Artwork()
{
  return &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork;
}

unint64_t sub_100185334()
{
  unint64_t result = qword_1002BA540;
  if (!qword_1002BA540)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F5A24,  &type metadata for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002BA540);
  }

  return result;
}

unint64_t sub_100185374()
{
  unint64_t result = qword_1002BA548;
  if (!qword_1002BA548)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F5994,  &type metadata for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002BA548);
  }

  return result;
}

unint64_t sub_1001853B4()
{
  unint64_t result = qword_1002BA550;
  if (!qword_1002BA550)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F59BC,  &type metadata for AppMetadataSchemaV1.AppMetadata.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002BA550);
  }

  return result;
}

unint64_t sub_1001853F0()
{
  unint64_t result = qword_1002BA560;
  if (!qword_1002BA560)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F5BA4,  &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002BA560);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = 1;
  }
  else {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_100185500 + 4 * byte_1001F545B[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100185534 + 4 * byte_1001F5456[v4]))();
}

uint64_t sub_100185534(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018553C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100185544LL);
  }
  return result;
}

uint64_t sub_100185550(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100185558LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_10018555C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100185564(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys()
{
  return &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys;
}

unint64_t sub_100185584()
{
  unint64_t result = qword_1002BA570;
  if (!qword_1002BA570)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F5B7C,  &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002BA570);
  }

  return result;
}

unint64_t sub_1001855C4()
{
  unint64_t result = qword_1002BA578;
  if (!qword_1002BA578)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F5AEC,  &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002BA578);
  }

  return result;
}

unint64_t sub_100185604()
{
  unint64_t result = qword_1002BA580;
  if (!qword_1002BA580)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F5B14,  &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002BA580);
  }

  return result;
}

void sub_100185648()
{
}

uint64_t sub_100185670()
{
  return URL.deletingLastPathComponent()();
}

uint64_t sub_100185690()
{
  return static GKLog.cache.getter();
}

  ;
}

  ;
}

uint64_t sub_1001856EC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 120) + 8LL))(v1, v0);
}

  ;
}

uint64_t sub_10018570C()
{
  return swift_errorRelease(v0);
}

uint64_t sub_100185714(uint64_t a1)
{
  return v2(a1, v1);
}

  ;
}

uint64_t sub_10018572C(uint64_t a1)
{
  return ModelActor.modelContext.getter(v1, a1);
}

uint64_t sub_10018573C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10018574C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, 31LL, a3, 6LL, 0LL);
}

uint64_t sub_10018575C()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 168) + 8LL))(v0, *(void *)(v1 - 160));
}

  ;
}

uint64_t sub_100185784()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100185794(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_10018579C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_1001857A8(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t sub_1001857BC()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_1001857C8()
{
  return swift_release(v0);
}

uint64_t sub_1001857D0(uint64_t a1, uint64_t a2)
{
  return swift_deallocPartialClassInstance(a1, a2, 40LL, 7LL);
}

  ;
}

uint64_t sub_1001857F0()
{
  return swift_willThrow();
}

void sub_1001857FC(uint64_t a1)
{
}

void sub_100185808(uint64_t a1)
{
}

  ;
}

  ;
}

void *sub_100185838(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, 0LL);
}

uint64_t sub_100185844()
{
  return swift_errorRetain(v0);
}

  ;
}

void sub_100185858()
{
  uint64_t v4 = sub_100188A14();
  uint64_t v5 = sub_100188A90(v4);
  if (v6)
  {
    sub_10013519C(v1, &qword_1002B8238);
    uint64_t v7 = 7168LL;
  }

  else
  {
    TaskPriority.rawValue.getter(v5);
    sub_1001889E4();
    uint64_t v7 = v3 | 0x1C00LL;
  }

  if (*(void *)(v0 + 16))
  {
    sub_1001327EC();
    sub_100132800();
    sub_1001326AC();
    sub_1001326BC();
  }

  else
  {
    uint64_t v1 = 0LL;
    uint64_t v3 = 0LL;
  }

  uint64_t v8 = sub_10012AAEC((uint64_t)&unk_100276688, 32LL);
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)(v8 + 24) = v0;
  if (v3 | v1)
  {
    v10[0] = 0LL;
    v10[1] = 0LL;
    uint64_t v9 = v10;
    void v10[2] = v1;
    v10[3] = v3;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  swift_task_create(v7, v9, (char *)&type metadata for () + 8, &unk_1002B8698, v8);
  sub_1001889FC();
}

void sub_100185924()
{
  uint64_t v4 = sub_100188A14();
  uint64_t v5 = sub_100188A90(v4);
  if (v6)
  {
    sub_10013519C(v1, &qword_1002B8238);
    uint64_t v7 = 7168LL;
  }

  else
  {
    TaskPriority.rawValue.getter(v5);
    sub_1001889E4();
    uint64_t v7 = v3 | 0x1C00LL;
  }

  if (*(void *)(v0 + 16))
  {
    sub_1001327EC();
    sub_100132800();
    sub_1001326AC();
    sub_1001326BC();
  }

  else
  {
    uint64_t v1 = 0LL;
    uint64_t v3 = 0LL;
  }

  uint64_t v8 = sub_10012AAEC((uint64_t)&unk_1002766B0, 32LL);
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)(v8 + 24) = v0;
  uint64_t v9 = sub_100129274(&qword_1002BA5F8);
  if (v3 | v1)
  {
    v11[0] = 0LL;
    v11[1] = 0LL;
    uint64_t v10 = v11;
    void v11[2] = v1;
    void v11[3] = v3;
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  swift_task_create(v7, v10, v9, &unk_1002BA5F0, v8);
  sub_1001889FC();
}

void sub_1001859F8(uint64_t a1, uint64_t a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
}

void sub_100185A44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100129274(&qword_1002BA5B8);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v33 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v32 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  int64_t v8 = 0LL;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    uint64_t v19 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    sub_10012A22C(*(void *)(a1 + 56) + 40 * v10, (uint64_t)v50);
    uint64_t v48 = v21;
    uint64_t v49 = v20;
    __int128 v45 = v50[0];
    __int128 v46 = v50[1];
    uint64_t v47 = v51;
    v36[0] = v21;
    v36[1] = v20;
    swift_bridgeObjectRetain(v20);
    swift_dynamicCast(&v37, v36, &type metadata for String, &type metadata for AnyHashable, 7LL);
    v34[0] = v45;
    v34[1] = v46;
    uint64_t v35 = v47;
    swift_dynamicCast(v40, v34, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, 7LL);
    __int128 v41 = v37;
    __int128 v42 = v38;
    uint64_t v43 = v39;
    sub_1001295F4(v40, v44);
    __int128 v37 = v41;
    __int128 v38 = v42;
    uint64_t v39 = v43;
    sub_1001295F4(v44, v34);
    sub_1001295F4(v34, &v41);
    Swift::Int v22 = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v23 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v24 = v22 & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~v7[v24 >> 6]) == 0)
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = v7[v25];
        if (v30 != -1)
        {
          unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_38;
        }
      }

      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

    unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~v7[v24 >> 6])) | v24 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_38:
    *(void *)((char *)v7 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
    uint64_t v31 = v3[6] + 40 * v26;
    *(_OWORD *)uint64_t v31 = v37;
    *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = v38;
    *(void *)(v31 + 3sub_100129678(v0 + 2) = v39;
    sub_1001295F4(&v41, (_OWORD *)(v3[7] + 32 * v26));
    ++v3[2];
    if (v6) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      goto LABEL_42;
    }
    if (v11 >= v32) {
      goto LABEL_40;
    }
    unint64_t v12 = *(void *)(v33 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      sub_100188A78();
      if (v14 == v15) {
        goto LABEL_40;
      }
      sub_100188A6C();
      if (!v12)
      {
        sub_100188A78();
        if (v14 == v15) {
          goto LABEL_40;
        }
        sub_100188A6C();
        if (!v12)
        {
          sub_100188A78();
          if (v14 == v15) {
            goto LABEL_40;
          }
          sub_100188A6C();
          if (!v12) {
            break;
          }
        }
      }
    }

uint64_t sub_100185E04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100129274(&qword_1002BA5B8);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v32 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v11 = v10 | (v9 << 6);
  while (1)
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v11);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    *(void *)&v42[0] = v18;
    *((void *)&v42[0] + 1) = v17;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    swift_dynamicCast(&v34, v42, &type metadata for String, &type metadata for AnyHashable, 7LL);
    v33[0] = v21;
    v33[1] = v20;
    swift_dynamicCast(v37, v33, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
    __int128 v38 = v34;
    __int128 v39 = v35;
    uint64_t v40 = v36;
    sub_1001295F4(v37, v41);
    __int128 v34 = v38;
    __int128 v35 = v39;
    uint64_t v36 = v40;
    sub_1001295F4(v41, v42);
    sub_1001295F4(v42, &v38);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v22 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~v7[v23 >> 6]) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = v7[v24];
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_34;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~v7[v23 >> 6])) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
    *(void *)((char *)v7 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    uint64_t v30 = v3[6] + 40 * v25;
    *(_OWORD *)uint64_t v30 = v34;
    *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = v35;
    *(void *)(v30 + 3sub_100129678(v0 + 2) = v36;
    uint64_t result = (uint64_t)sub_1001295F4(&v38, (_OWORD *)(v3[7] + 32 * v25));
    ++v3[2];
    if (v6) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      goto LABEL_38;
    }
    if (v12 >= v31) {
      goto LABEL_36;
    }
    unint64_t v13 = *(void *)(v32 + 8 * v12);
    int64_t v14 = v9 + 1;
    if (!v13)
    {
      int64_t v14 = v9 + 2;
      if (v9 + 2 >= v31) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v32 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v9 + 3;
        if (v9 + 3 >= v31) {
          goto LABEL_36;
        }
        unint64_t v13 = *(void *)(v32 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 4;
          if (v9 + 4 >= v31) {
            goto LABEL_36;
          }
          unint64_t v13 = *(void *)(v32 + 8 * v14);
          if (!v13) {
            break;
          }
        }
      }
    }

LABEL_39:
  __break(1u);
  return result;
}

const char *sub_1001861B8()
{
  return "gseui";
}

const char *sub_1001861CC()
{
  return "de7bbd8e";
}

void sub_1001861F0()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1001296C0();
  id v3 = [v0 defaultAction];
  if (v3)
  {
    uint64_t v4 = sub_100188314(v3);
    if (!v5)
    {
LABEL_9:
      sub_10012CE58();
      return;
    }

    uint64_t v6 = v4;
    uint64_t v7 = v5;
    uint64_t v8 = type metadata accessor for URL(0LL);
    v28[1] = v28;
    uint64_t v9 = *(void *)(v8 - 8);
    __chkstk_darwin(v8);
    sub_1001296C0();
    uint64_t v12 = v11 - v10;
    uint64_t v13 = sub_100129274(&qword_1002B9D00);
    __chkstk_darwin(v13);
    sub_1001296C0();
    uint64_t v16 = v15 - v14;
    URL.init(string:)(v6);
    swift_bridgeObjectRelease(v7, v17);
    if (sub_10012B4E8(v16, 1LL, v8) == 1)
    {
      sub_10013519C(v16, &qword_1002B9D00);
      goto LABEL_9;
    }

    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v12, v16, v8);
    uint64_t v19 = static GKLog.daemon.getter(v18);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.info.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "LeaderboardChallengeBulletin Notification handle default action",  v22,  2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    sub_100188A84(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    id v23 = [(id)objc_opt_self(GKApplicationWorkspace) defaultWorkspace];
    if (v23)
    {
      unint64_t v25 = v23;
      URL._bridgeToObjectiveC()(v24);
      unint64_t v27 = v26;
      [v25 openURL:v26];

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
      goto LABEL_9;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_100186478()
{
  v4.receiver = (id)swift_getObjCClassFromMetadata(v0);
  v4.Class super_class = (Class)&OBJC_METACLASS___GKLeaderboardChallengeBulletin;
  if (objc_msgSendSuper2(&v4, "shouldProcessNotification"))
  {
    v3[3] = &type metadata for GKFeatureFlags;
    v3[4] = sub_100188684();
    char v1 = isFeatureEnabled(_:)(v3);
    sub_100129678(v3);
  }

  else
  {
    char v1 = 0;
  }

  return v1 & 1;
}

void sub_10018651C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = _Block_copy(a3);
  uint64_t v11 = static GKLog.daemon.getter(v10);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "LeaderboardChallengeBulletin loadBulletinsForPushNotification:",  v14,  2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10018665C(a1);
  _Block_copy(a3);
  sub_100186BC0(a1, a2, (void (**)(void, void))a3);
  _Block_release(a3);
  _Block_release(a3);
}

uint64_t sub_10018665C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = swift_allocObject(&unk_1002765E8, 24LL, 7LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v39 = 116LL;
  uint64_t v40 = 0xE100000000000000LL;
  AnyHashable.init<A>(_:)(&v39);
  sub_10012CFE4(a1, v41);
  sub_10012A92C((uint64_t)v42);
  if (*(void *)&v41[24])
  {
  }

  else
  {
    sub_10013519C((uint64_t)v41, &qword_1002B8E90);
  }

  sub_100166684(a1, (uint64_t)&v39);
  sub_10014818C((uint64_t)&v39, (uint64_t)v41, &qword_1002B86D8);
  if (sub_100147F40((uint64_t)v41) != 1)
  {
    memcpy(v42, v41, sizeof(v42));
    sub_10014818C((uint64_t)&v42[104], (uint64_t)v43, &qword_1002B9900);
    sub_10014818C((uint64_t)v43, (uint64_t)&v44, &qword_1002B9900);
    uint64_t v7 = v45;
    if (v45)
    {
      uint64_t v8 = v44;
      sub_10013A1EC((uint64_t)v43);
      sub_100147FA0(&v39);
      uint64_t v9 = v8;
      uint64_t v10 = v7;
LABEL_12:
      uint64_t v11 = sub_100187AD0(v9, v10, 0x676E656C6C616863LL, 0xEB00000000644965LL);
      goto LABEL_14;
    }

    sub_100147FA0(&v39);
  }

  uint64_t v35 = 0x676E656C6C616863LL;
  unint64_t v36 = 0xEB00000000644965LL;
  AnyHashable.init<A>(_:)(&v35);
  sub_10012CFE4(a1, &v37);
  sub_10012A92C((uint64_t)v33);
  if (v38)
  {
    uint64_t v11 = swift_dynamicCast(&v35, &v37, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    if ((v11 & 1) == 0) {
      goto LABEL_14;
    }
    uint64_t v9 = v35;
    uint64_t v10 = v36;
    goto LABEL_12;
  }

  uint64_t v11 = sub_10013519C((uint64_t)&v37, &qword_1002B8E90);
LABEL_14:
  static GKLog.daemon.getter(v11);
  uint64_t v12 = swift_retain_n(v6, 2LL);
  os_log_type_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  uint64_t v14 = v5;
  os_log_type_t v15 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v15))
  {
    uint64_t v32 = v14;
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = v2;
    uint64_t v18 = v17;
    v33[0] = v17;
    uint64_t v30 = v3;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v29 = v16 + 4;
    swift_beginAccess(v6 + 16, &v37, 0LL, 0LL);
    uint64_t v19 = *(void *)(v6 + 16);
    uint64_t v20 = swift_bridgeObjectRetain(v19);
    uint64_t v21 = Dictionary.description.getter(v20, &type metadata for String, &type metadata for String);
    unint64_t v23 = v22;
    swift_bridgeObjectRelease(v19, v22);
    uint64_t v35 = sub_100135074(v21, v23, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    swift_release_n(v6, 2LL);
    swift_bridgeObjectRelease(v23, v24);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v15,  "LeaderboardChallengeBulletin notifyUIUpdate with userInfo:%s",  v16,  0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v31);
  }

  else
  {

    swift_release_n(v6, 2LL);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v2);
  }

  unint64_t v25 = (void *)objc_opt_self(&OBJC_CLASS___GKClientProxy);
  v33[4] = (uint64_t)sub_1001883A4;
  uint64_t v34 = v6;
  v33[0] = (uint64_t)_NSConcreteStackBlock;
  v33[1] = 1107296256LL;
  void v33[2] = (uint64_t)sub_100187728;
  v33[3] = (uint64_t)&unk_100276600;
  char v26 = _Block_copy(v33);
  uint64_t v27 = v34;
  swift_retain(v6);
  swift_release(v27);
  [v25 enumerateClientsUsingBlock:v26];
  _Block_release(v26);
  return swift_release(v6);
}

void sub_100186BC0(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v5 = sub_100129274(&qword_1002B8238);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  os_log_type_t v15 = (char *)&v57 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v57 - v16;
  uint64_t v18 = swift_allocObject(&unk_100276638, 24LL, 7LL);
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  _Block_copy(a3);
  sub_100166684(a1, (uint64_t)v68);
  sub_10014818C((uint64_t)v68, (uint64_t)v69, &qword_1002B86D8);
  uint64_t v19 = sub_100147F40((uint64_t)v69);
  if ((_DWORD)v19 == 1)
  {
    uint64_t v20 = v18;
    uint64_t v21 = static GKLog.daemon.getter(v19);
    unint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.info.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "LeaderboardChallengeBulletin parseLeaderboardChallengeBulletin failed to decode relationships",  v24,  2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class))a3)[2](a3, isa);

    uint64_t v26 = v20;
    goto LABEL_23;
  }

  uint64_t v61 = v18;
  memcpy(__dst, v69, sizeof(__dst));
  uint64_t v58 = v71;
  uint64_t v59 = v70;
  __int128 v74 = v72;
  __int128 v75 = v73;
  type metadata accessor for LeaderboardChallengeBulletin();
  uint64_t v27 = swift_bridgeObjectRetain(a1);
  BOOL v28 = sub_100187274(v27);
  if (v28)
  {
    uint64_t v60 = v28;
    uint64_t v62 = 0x656C746974LL;
    unint64_t v63 = 0xE500000000000000LL;
    AnyHashable.init<A>(_:)(&v62);
    sub_10012CFE4(a1, &v66);
    sub_10012A92C((uint64_t)&v64);
    if (v67)
    {
      if ((swift_dynamicCast(&v62, &v66, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
      {
LABEL_19:
        uint64_t v51 = (uint64_t)sub_100147FA0(v68);
        goto LABEL_20;
      }

      uint64_t v29 = v63;
      uint64_t v57 = v62;
      uint64_t v62 = 0x6567617373656DLL;
      unint64_t v63 = 0xE700000000000000LL;
      AnyHashable.init<A>(_:)(&v62);
      sub_10012CFE4(a1, &v66);
      sub_10012A92C((uint64_t)&v64);
      if (v67)
      {
        if ((swift_dynamicCast(&v62, &v66, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
        {
          uint64_t v32 = v62;
          uint64_t v33 = v63;
          uint64_t v34 = v60;
          -[objc_class setBulletinType:](v60, "setBulletinType:", 1600LL);
          sub_1001883C4(v57, v29, v34, (SEL *)&selRef_setTitle_);
          sub_1001883C4(v32, v33, v34, (SEL *)&selRef_setMessage_);
          unint64_t v36 = v58;
          uint64_t v35 = v59;
          if (v58)
          {
            id v37 = objc_allocWithZone((Class)&OBJC_CLASS___GKBulletinAction);
            swift_bridgeObjectRetain(v36);
            id v38 = [v37 init];
            [v38 setType:0];
            uint64_t v64 = 0LL;
            uint64_t v65 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(31LL);
            swift_bridgeObjectRelease(v65, v39);
            uint64_t v64 = 0xD00000000000001DLL;
            uint64_t v65 = 0x800000010024E6D0LL;
            v40._uint64_t countAndFlagsBits = v35;
            v40._object = v36;
            String.append(_:)(v40);
            swift_bridgeObjectRelease(v36, v41);
            sub_1001883C4(v64, v65, v38, (SEL *)&selRef_setInfo_);
            -[objc_class setDefaultAction:](v34, "setDefaultAction:", v38);
          }

          uint64_t v42 = type metadata accessor for TaskPriority(0LL);
          sub_1001291F8((uint64_t)v7, 1LL, 1LL, v42);
          uint64_t v43 = swift_allocObject(&unk_100276660, 208LL, 7LL);
          *(void *)(v43 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
          *(void *)(v43 + 24) = 0LL;
          memcpy((void *)(v43 + 32), __dst, 0x68uLL);
          *(void *)(v43 + 136) = v35;
          *(void *)(v43 + 144) = v36;
          *(_OWORD *)(v43 + 15sub_100129678(v0 + 2) = v74;
          *(_OWORD *)(v43 + 168) = v75;
          *(void *)(v43 + 184) = v34;
          *(void *)(v43 + 19sub_100129678(v0 + 2) = sub_1001481F4;
          uint64_t v26 = v61;
          *(void *)(v43 + 200) = v61;
          swift_retain(v26);
          sub_100185858();
          swift_release(v44);
          goto LABEL_23;
        }

        swift_bridgeObjectRelease(v29, v31);
        goto LABEL_19;
      }

      swift_bridgeObjectRelease(v29, v30);
    }

    sub_100147FA0(v68);
    uint64_t v51 = sub_10013519C((uint64_t)&v66, &qword_1002B8E90);
LABEL_20:
    uint64_t v26 = v61;
    uint64_t v52 = static GKLog.daemon.getter(v51);
    char v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = static os_log_type_t.info.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      char v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v55 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "LeaderboardChallengeBulletin parseLeaderboardChallengeBulletin failed to get title or message",  v55,  2u);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    Class v56 = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class))a3)[2](a3, v56);

    goto LABEL_23;
  }

  uint64_t v45 = sub_100147FA0(v68);
  uint64_t v46 = static GKLog.daemon.getter(v45);
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v48 = static os_log_type_t.info.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "LeaderboardChallengeBulletin parseLeaderboardChallengeBulletin failed to create bulletin",  v49,  2u);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  Class v50 = Array._bridgeToObjectiveC()().super.isa;
  ((void (**)(void, Class))a3)[2](a3, v50);

  uint64_t v26 = v61;
LABEL_23:
  swift_release(v26);
  _Block_release(a3);
}

objc_class *sub_100187274(uint64_t a1)
{
  if (a1)
  {
    v3.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_100188A4C((uint64_t)v3.super.isa, v4);
  }

  else
  {
    uint64_t v1 = 0LL;
  }

  [objc_allocWithZone(v2) initWithPushNotification:v1];
  sub_100148690();
  return v2;
}

uint64_t sub_1001872E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  return swift_task_switch(sub_100187304, 0LL, 0LL);
}

uint64_t sub_100187304()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v3 = *(void *)(v0 + 48);
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v5 = sub_100129274(&qword_1002B9D00);
    uint64_t v6 = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    *(void *)(v0 + 144) = v6;
    uint64_t v7 = (void *)swift_task_alloc(dword_1002B981C);
    *(void *)(v0 + 15sub_100129678(v0 + 2) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10018743C;
    return sub_100168EB4(v6, v3, v4, v2, v1);
  }

  else
  {
    uint64_t v9 = *(void (**)(uint64_t))(v0 + 128);
    uint64_t v10 = sub_100129274(&qword_1002B8708);
    uint64_t v11 = sub_10012AAEC(v10, 64LL);
    *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001F3480;
    uint64_t v12 = type metadata accessor for LeaderboardChallengeBulletin();
    sub_100188A40(v12);
    v9(v11);
    swift_bridgeObjectRelease(v11, v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10018743C()
{
  return swift_task_switch(sub_100187490, 0LL, 0LL);
}

uint64_t sub_100187490()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = type metadata accessor for URL(0LL);
  if (sub_10012B4E8(v1, 1LL, v2) == 1)
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    URL._bridgeToObjectiveC()(v3);
    uint64_t v4 = v5;
    sub_100188A84(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL));
    uint64_t v1 = *(void *)(v0 + 144);
  }

  uint64_t v6 = *(void **)(v0 + 120);
  swift_task_dealloc(v1);
  [v6 setGameIcon:v4];

  uint64_t v7 = *(void (**)(uint64_t))(v0 + 128);
  uint64_t v8 = sub_100129274(&qword_1002B8708);
  uint64_t v9 = sub_10012AAEC(v8, 64LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001F3480;
  uint64_t v10 = type metadata accessor for LeaderboardChallengeBulletin();
  sub_100188A40(v10);
  v7(v9);
  swift_bridgeObjectRelease(v9, v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100187570(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    sub_10018849C(a1);
    if (v5)
    {
      uint64_t v6 = v5;
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6, v8);
      id v9 = [v7 _gkSHA256Hash];

      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;

      if (v10 == 0xD00000000000002CLL && v12 == 0x800000010024E6A0LL)
      {
        swift_bridgeObjectRelease(0x800000010024E6A0LL, v13);
      }

      else
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, 0xD00000000000002CLL, 0x800000010024E6A0LL, 0LL);
        swift_bridgeObjectRelease(v12, v15);
        if ((v14 & 1) == 0) {
          return;
        }
      }

      uint64_t v16 = (uint64_t *)(a3 + 16);
      swift_beginAccess(v16, v21, 0LL, 0LL);
      uint64_t v17 = *v16;
      uint64_t v18 = swift_bridgeObjectRetain(v17);
      uint64_t v19 = sub_100185E04(v18);
      swift_bridgeObjectRelease(v17, v20);
      sub_10018841C(19LL, v19, a1);
    }
  }

void *sub_1001876A0(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_100188A4C((uint64_t)v2.super.isa, v3);
  }

  v12.receiver = v1;
  v12.Class super_class = (Class)type metadata accessor for LeaderboardChallengeBulletin();
  id v10 = sub_100148638((uint64_t)v12.super_class, "initWithPushNotification:", v4, v5, v6, v7, v8, v9, v12);
  sub_100148690();
  if (v1) {

  }
  return v1;
}

void sub_100187728(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void (**)(void *, uint64_t))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a2;
  v6(a2, a3);
  swift_release(v5);
}

id sub_1001877DC()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for LeaderboardChallengeBulletin();
  return objc_msgSendSuper2(&v2, "init");
}

void *sub_10018782C()
{
  v8.receiver = v0;
  v8.Class super_class = (Class)type metadata accessor for LeaderboardChallengeBulletin();
  sub_100148638((uint64_t)v8.super_class, "initWithCoder:", v1, v2, v3, v4, v5, v6, v8);
  sub_100148690();
  return v0;
}

id sub_100187890()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for LeaderboardChallengeBulletin();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LeaderboardChallengeBulletin()
{
  return objc_opt_self(&OBJC_CLASS___GKLeaderboardChallengeBulletin);
}

uint64_t sub_1001878E0(uint64_t a1, int *a2)
{
  id v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = swift_task_alloc(a2[1]);
  uint64_t v5 = (void *)sub_100132570(v4);
  void *v5 = v2;
  v5[1] = sub_100187940;
  return v7(a1);
}

uint64_t sub_100187940()
{
  return sub_10013224C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100187968()
{
  uint64_t v0 = sub_100188988();
  uint64_t v3 = sub_100187B28(v0, v1, v2);
  uint64_t v11 = sub_100188950(v3, v4, v5, v6, v7, v8, v9, v10, v14, v15);
  return sub_1001889AC(v11, v12);
}

uint64_t sub_1001879A0()
{
  uint64_t v0 = sub_100188960();
  uint64_t v4 = sub_100187C2C(v0, v1, v2, v3);
  uint64_t v12 = sub_100188950(v4, v5, v6, v7, v8, v9, v10, v11, v15, v16);
  return sub_10018893C(v12, v13);
}

uint64_t sub_1001879E0()
{
  uint64_t v0 = sub_100188988();
  uint64_t v3 = sub_100187D40(v0, v1, v2);
  uint64_t v11 = sub_100188950(v3, v4, v5, v6, v7, v8, v9, v10, v14, v15);
  return sub_1001889AC(v11, v12);
}

uint64_t sub_100187A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_100187E84(a1, a2, a3, a4, a5, v10);
  uint64_t v19 = sub_100188950(v11, v12, v13, v14, v15, v16, v17, v18, v22, v23);
  return swift_bridgeObjectRelease(v19, v20);
}

uint64_t sub_100187A90()
{
  uint64_t v0 = sub_100188960();
  uint64_t v4 = sub_100187FCC(v0, v1, v2, v3);
  uint64_t v12 = sub_100188950(v4, v5, v6, v7, v8, v9, v10, v11, v15, v16);
  return sub_10018893C(v12, v13);
}

uint64_t sub_100187AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = sub_100188950(v9, v10, v11, v12, v13, v14, v15, v16, v20, v21);
  return sub_10018893C(v17, v18);
}

uint64_t sub_100187B28(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v9 = sub_10014A454();
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  sub_100129274(&qword_1002B91B0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_10014A454();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
    __break(1u);
    return result;
  }

  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if ((v15 & 1) != 0)
  {
    uint64_t v19 = *(void *)(v18 + 56);
    uint64_t result = swift_release(*(void *)(v19 + 8 * v14));
    *(void *)(v19 + 8 * v14) = a1;
  }

  else
  {
    sub_10012A22C(a2, (uint64_t)v21);
    return sub_10014AAD8(v14, (uint64_t)v21, a1, v18);
  }

  return result;
}

uint64_t sub_100187C2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = sub_10014A480(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_100129274(&qword_1002B91A8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10014A480(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = *(void *)(v20 + 56);
    uint64_t result = swift_release(*(void *)(v21 + 8 * v16));
    *(void *)(v21 + 8 * vswift_unknownObjectWeakDestroy(v0 + 16) = a1;
  }

  else
  {
    sub_10014AB28(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }

  return result;
}

uint64_t sub_100187D40(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v3;
  unint64_t v13 = sub_10014A4D0();
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_100129274(&qword_1002B9198);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_10014A4D0();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = *(void *)(v22 + 56);
    uint64_t result = swift_release(*(void *)(v23 + 8 * v18));
    *(void *)(v23 + 8 * v18) = a1;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_10014AB4C(v18, (uint64_t)v11, a1, v22);
  }

  return result;
}

uint64_t sub_100187E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = *v6;
  unint64_t v15 = sub_10014A530(a2, a3, a4, a5);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v16 & 1) == 0;
  Swift::Int v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v20 = v15;
  char v21 = v16;
  sub_100129274(&qword_1002B8F80);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a6 & 1, v19)) {
    goto LABEL_5;
  }
  unint64_t v22 = sub_10014A530(a2, a3, a4, a5);
  if ((v21 & 1) != (v23 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for EntityCacheProvider.EntityCacheKey);
    __break(1u);
    return result;
  }

  unint64_t v20 = v22;
LABEL_5:
  uint64_t v24 = *v7;
  if ((v21 & 1) != 0)
  {
    uint64_t v25 = *(void *)(v24 + 56);
    uint64_t result = swift_unknownObjectRelease(*(void *)(v25 + 8 * v20));
    *(void *)(v25 + 8 * v20) = a1;
  }

  else
  {
    sub_10014AC1C(v20, a2, a3, a4, a5, a1, v24);
    swift_bridgeObjectRetain(a3);
    return swift_bridgeObjectRetain(a5);
  }

  return result;
}

uint64_t sub_100187FCC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = sub_10014A480(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_100129274(&qword_1002B9190);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10014A480(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if ((v17 & 1) != 0) {
    return sub_1001886FC(a1, *(void *)(v20 + 56) + 40 * v16);
  }
  sub_10014AC60(v16, a2, a3, a1, v20);
  return swift_bridgeObjectRetain(a3);
}

id sub_1001880E0(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v9 = *v4;
  sub_10014A5C0();
  sub_100188A58();
  if (v12)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v13 = v10;
  char v14 = v11;
  sub_100129274(&qword_1002BA5E0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v9)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_10014A5C0();
  if ((v14 & 1) != (v15 & 1))
  {
LABEL_9:
    unint64_t v20 = sub_1001886C0();
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
    __break(1u);
    return result;
  }

  unint64_t v13 = v16;
LABEL_5:
  char v17 = (void *)*v5;
  if ((v14 & 1) != 0)
  {
    unint64_t v18 = (uint64_t *)(v17[7] + 16 * v13);
    id result = (id)swift_bridgeObjectRelease(v18[1], v15);
    uint64_t *v18 = a1;
    v18[1] = a2;
  }

  else
  {
    sub_10014AC98(v13, (uint64_t)a3, a1, a2, v17);
    return a3;
  }

  return result;
}

void sub_1001881F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  Swift::Int v12 = *v5;
  sub_10014A480(a3, a4);
  sub_100188A58();
  if (v15)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v13;
  char v17 = v14;
  sub_100129274(&qword_1002BA5B0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v12)) {
    goto LABEL_5;
  }
  unint64_t v19 = sub_10014A480(a3, a4);
  if ((v17 & 1) != (v18 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v16 = v19;
LABEL_5:
  uint64_t v20 = *v6;
  if ((v17 & 1) != 0)
  {
    char v21 = (uint64_t *)(*(void *)(v20 + 56) + 16 * v16);
    swift_bridgeObjectRelease(v21[1], v18);
    *char v21 = a1;
    v21[1] = a2;
    sub_10012CE58();
  }

  else
  {
    sub_10014ACDC(v16, a3, a4, a1, a2, v20);
    swift_bridgeObjectRetain(a4);
  }

void sub_1001882FC(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_100188308(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t sub_100188314(void *a1)
{
  id v2 = [a1 info];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100188380(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(v2, 24LL, 7LL);
}

void sub_1001883A4(void *a1, uint64_t a2)
{
}

uint64_t sub_1001883AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100129678(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001883BC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1001883C4(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v7);
  objc_msgSend(a3, *a4, v8);
}

void sub_10018841C(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2, v6);
  [a3 refreshContentsForDataType:a1 userInfo:isa];
}

uint64_t sub_10018849C(void *a1)
{
  id v1 = [a1 originalBundleIdentifier];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_1001884FC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100188520()
{
  uint64_t v2 = *(void *)(v0 + 40);
  if (v2)
  {
    swift_bridgeObjectRelease(v2, v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 56), v3);
    swift_bridgeObjectRelease(*(void *)(v0 + 72), v4);
  }

  swift_bridgeObjectRelease(*(void *)(v0 + 80), v1);
  uint64_t v6 = *(void *)(v0 + 96);
  if (v6)
  {
    swift_bridgeObjectRelease(v6, v5);
    swift_bridgeObjectRelease(*(void *)(v0 + 112), v7);
    swift_bridgeObjectRelease(*(void *)(v0 + 128), v8);
  }

  swift_bridgeObjectRelease(*(void *)(v0 + 144), v5);
  uint64_t v10 = *(void *)(v0 + 160);
  if (v10)
  {
    swift_bridgeObjectRelease(v10, v9);
    swift_bridgeObjectRelease(*(void *)(v0 + 176), v11);
  }

  swift_release(*(void *)(v0 + 200));
  return swift_deallocObject(v0, 208LL, 7LL);
}

uint64_t sub_1001885B0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (uint64_t)(v1 + 4);
  uint64_t v7 = v1[23];
  uint64_t v8 = v1[24];
  uint64_t v9 = v1[25];
  uint64_t v10 = swift_task_alloc(dword_1002BA5C4);
  uint64_t v11 = (void *)sub_100132570(v10);
  *uint64_t v11 = v2;
  v11[1] = sub_100131C10;
  return sub_1001872E8(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10018863C()
{
  uint64_t v0 = swift_task_alloc(dword_1002BA5D4);
  uint64_t v1 = (void *)sub_100132570(v0);
  uint64_t v2 = sub_1001889C4(v1);
  return sub_10014C558(v2, v3, v4, v5);
}

unint64_t sub_100188684()
{
  unint64_t result = qword_1002BA5D8;
  if (!qword_1002BA5D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5CC0, &type metadata for GKFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_1002BA5D8);
  }

  return result;
}

unint64_t sub_1001886C0()
{
  unint64_t result = qword_1002B8928;
  if (!qword_1002B8928)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___CNContact);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B8928);
  }

  return result;
}

uint64_t sub_1001886FC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100188738(uint64_t a1, int *a2)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = sub_1001887A0;
  return v5(v2 + 32);
}

uint64_t sub_1001887A0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(_BYTE **)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  *uint64_t v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1001887F0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100188814()
{
  uint64_t v0 = swift_task_alloc(dword_1002BA5EC);
  uint64_t v1 = (void *)sub_100132570(v0);
  uint64_t v2 = sub_1001889C4(v1);
  return sub_10014C558(v2, v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for GKFeatureFlags(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(swift_bridgeObjectRelease(v0[23], v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10018889C + 4 * byte_1001F5C00[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001888BC + 4 * byte_1001F5C05[v4]))();
  }
}

_BYTE *sub_10018889C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1001888BC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001888C4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001888CC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001888D4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001888DC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GKFeatureFlags()
{
  return &type metadata for GKFeatureFlags;
}

unint64_t sub_1001888FC()
{
  unint64_t result = qword_1002BA600;
  if (!qword_1002BA600)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5C98, &type metadata for GKFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_1002BA600);
  }

  return result;
}

uint64_t sub_10018893C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a1, a2);
}

uint64_t sub_100188950( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *uint64_t v10 = a10;
  return result;
}

uint64_t sub_100188960()
{
  *uint64_t v0 = 0x8000000000000000LL;
  return v1;
}

uint64_t sub_100188988()
{
  *uint64_t v0 = 0x8000000000000000LL;
  return v1;
}

uint64_t sub_1001889AC(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a1, a2);
}

uint64_t sub_1001889BC()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_1001889C4(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1001889E4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

  ;
}

uint64_t sub_100188A14()
{
  return type metadata accessor for TaskPriority(0LL);
}

void sub_100188A28()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

id sub_100188A40(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  *(void *)(v1 + 3sub_100129678(v0 + 2) = v2;
  return v2;
}

uint64_t sub_100188A4C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2, a2);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100188A84@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100188A90(uint64_t a1)
{
  return sub_10012B4E8(v1, 1LL, a1);
}

void sub_100188AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  sub_1001291F8(v7, 1LL, 1LL, v8);
  uint64_t v9 = (void *)sub_10018A468((uint64_t)&unk_1002767E0);
  void v9[2] = 0LL;
  void v9[3] = 0LL;
  v9[4] = a1;
  v9[5] = a2;
  uint64_t v10 = (void *)sub_10018A468((uint64_t)&unk_100276808);
  void v10[2] = 0LL;
  v10[3] = 0LL;
  void v10[4] = &unk_1002BA7C0;
  v10[5] = v9;
  uint64_t v11 = sub_10018A0C0(v7, (uint64_t)&unk_1002BA7D0, (uint64_t)v10);
  swift_release(v11);
  sub_10013A774();
}

uint64_t sub_100188B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0LL);
  uint64_t v6 = v5;
  if (v4)
  {
    uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL);
    sub_10018A2FC(a1 + ((v7 + 32) & ~v7), a2);
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return sub_1001291F8(a2, v8, 1LL, v6);
}

uint64_t sub_100188BD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100129274(&qword_1002BA7E8);
  uint64_t result = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  if (!*(void *)(*v1 + 16))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  sub_100188B68(*v1, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0LL);
  uint64_t result = sub_10012B4E8((uint64_t)v6, 1LL, v8);
  if ((_DWORD)result != 1)
  {
    uint64_t result = sub_10018A3F0((uint64_t)v6, a1);
    if (*(void *)(v7 + 16)) {
      return sub_10015ED3C(0LL, 1LL);
    }
    goto LABEL_6;
  }

uint64_t sub_100188C9C(uint64_t a1)
{
  unint64_t v22 = &type metadata for String;
  uint64_t v20 = 0LL;
  unint64_t v21 = 0xE000000000000000LL;
  sub_100163BF0(a1, *(void *)(a1 + 24));
  uint64_t v3 = sub_10018A444((uint64_t)&v20, 0x65676175676E616CLL, 0xE800000000000000LL);
  uint64_t result = sub_10018A454(v3, v4, v5, v6, v7, v8, v9, v10, v20);
  if (!v1)
  {
    unint64_t v22 = &type metadata for String;
    uint64_t v20 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
    sub_100163BF0(a1, *(void *)(a1 + 24));
    uint64_t v12 = sub_10018A444((uint64_t)&v20, 0x6F724665726F7473LL, 0xEA0000000000746ELL);
    return sub_10018A454(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  }

  return result;
}

uint64_t sub_100188D68()
{
  uint64_t v1 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  sub_10014471C(v1);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100188DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)[1]);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100132138;
  return MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)(a1, a2, a3, a4);
}

uint64_t sub_100188E20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC14GameDaemonCore33MultiplayerActivityFieldsProvider_category;
  uint64_t v4 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_100188E68(uint64_t a1)
{
  return sub_100188C9C(a1);
}

uint64_t sub_100188E7C()
{
  uint64_t v0 = type metadata accessor for MetricsFieldInclusionRequest(0LL);
  sub_100172B4C(v0, qword_1002BF8E0);
  sub_100172B8C(v0, (uint64_t)qword_1002BF8E0);
  return MetricsFieldInclusionRequest.init(rawValue:)(0xD000000000000013LL, 0x800000010024E820LL);
}

uint64_t MultiplayerActivityEventFilter.trackedSessions.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions);
  sub_100144704(v0 + OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions, (uint64_t)v3, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t MultiplayerActivityEventFilter.trackedSessions.setter(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions);
  sub_100144704((uint64_t)v3, (uint64_t)v7, 1LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return swift_bridgeObjectRelease(v4, v5);
}

uint64_t (*MultiplayerActivityEventFilter.trackedSessions.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id MultiplayerActivityEventFilter.__allocating_init()()
{
  return [sub_10018A460() init];
}

id MultiplayerActivityEventFilter.init()()
{
  uint64_t v1 = v0;
  sub_10013A730();
  id result = [(id)objc_opt_self(GKPreferences) shared];
  if (result)
  {
    uint64_t v3 = result;
    [result multiplayerActivityFeedMaxSessionDuration];
    double v5 = v4;

    sub_10018A460();
    id v6 = MultiplayerActivityEventFilter.init(maxSessionDuration:maxTrackedSessionsCount:)(128LL, v5);
    uint64_t ObjectType = swift_getObjectType(v1);
    swift_deallocPartialClassInstance(v1, ObjectType, 40LL, 7LL);
    return v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id MultiplayerActivityEventFilter.__allocating_init(maxSessionDuration:maxTrackedSessionsCount:)( uint64_t a1, double a2)
{
  return MultiplayerActivityEventFilter.init(maxSessionDuration:maxTrackedSessionsCount:)(a1, a2);
}

id MultiplayerActivityEventFilter.init(maxSessionDuration:maxTrackedSessionsCount:)(uint64_t a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v26 = (objc_class *)sub_10013A730();
  uint64_t v5 = OBJC_IVAR___GKMultiplayerActivityEventFilter_serialQueue;
  sub_100129B78();
  type metadata accessor for DispatchQoS(0LL);
  sub_10018A434();
  __chkstk_darwin(v6);
  sub_1001296C0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = v2;
  static DispatchQoS.default.getter();
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_10018A434();
  __chkstk_darwin(v12);
  sub_1001296C0();
  uint64_t v15 = v14 - v13;
  BOOL v28 = _swiftEmptyArrayStorage;
  unint64_t v16 = sub_100129BB4();
  uint64_t v17 = sub_100129274(&qword_1002B7F68);
  unint64_t v18 = sub_1001292B4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v17, v18, v11, v16);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v19);
  sub_1001296C0();
  uint64_t v22 = v21 - v20;
  (*(void (**)(uint64_t, void))(v23 + 104))( v21 - v20,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  *(void *)&v3[v5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003FLL,  0x800000010024A790LL,  v9,  v15,  v22,  0LL);
  *(double *)&v10[OBJC_IVAR___GKMultiplayerActivityEventFilter_maxSessionDuration] = a2;
  *(void *)&v10[OBJC_IVAR___GKMultiplayerActivityEventFilter_maxTrackedSessionsCount] = a1;
  *(void *)&v10[OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions] = _swiftEmptyArrayStorage;

  v27.receiver = v10;
  v27.Class super_class = v26;
  return objc_msgSendSuper2(&v27, "init");
}

uint64_t MultiplayerActivityEventFilter.filterEvent(metricsFields:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 3sub_100129678(v0 + 2) = v1;
  return swift_task_switch(sub_1001892BC, 0LL, 0LL);
}

uint64_t sub_1001892BC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for MultiplayerActivityReporter(0LL);
  uint64_t v2 = static MultiplayerActivityReporter.extractSessionID(fields:)(v1);
  if (v3)
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3;
    uint64_t v7 = *(void *)(v0 + 24);
    uint64_t v6 = *(void *)(v0 + 32);
    uint64_t v8 = (void *)swift_task_alloc(48LL);
    _OWORD v8[2] = v6;
    v8[3] = v4;
    void v8[4] = v5;
    v8[5] = v7;
    uint64_t v9 = sub_100129274(&qword_1002BA630);
    OS_dispatch_queue.sync<A>(execute:)(sub_100189778, v8, v9);
    swift_bridgeObjectRelease(v5, v10);
    swift_task_dealloc(v8);
    uint64_t v11 = *(void *)(v0 + 16);
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
}

uint64_t sub_100189390@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v51 = a4;
  Class v56 = a5;
  uint64_t v9 = sub_100129274(&qword_1002BA7E8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0LL);
  uint64_t v12 = *(void *)(v52 - 8);
  uint64_t v13 = __chkstk_darwin(v52);
  Class v50 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (void *)((char *)v47 - v16);
  __chkstk_darwin(v15);
  uint64_t v48 = (uint64_t)v47 - v18;
  uint64_t v53 = a1;
  uint64_t v19 = (void *)(a1 + OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions);
  swift_beginAccess(v19, v55, 0LL, 0LL);
  uint64_t v49 = v19;
  uint64_t v20 = *v19;
  uint64_t v21 = *(void *)(*v19 + 16LL);
  if (v21)
  {
    v47[0] = v12;
    v47[1] = v5;
    uint64_t v22 = v20 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v23 = *(void *)(v12 + 72);
    swift_bridgeObjectRetain(v20);
    while (1)
    {
      sub_10018A2FC(v22, (uint64_t)v17);
      uint64_t v24 = v17[1];
      BOOL v25 = *v17 == a2 && v24 == a3;
      if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v24, a2, a3, 0LL) & 1) != 0) {
        break;
      }
      sub_10018A340((uint64_t)v17);
      v22 += v23;
      if (!--v21)
      {
        uint64_t v26 = 1LL;
        goto LABEL_11;
      }
    }

    sub_10018A3F0((uint64_t)v17, (uint64_t)v11);
    uint64_t v26 = 0LL;
LABEL_11:
    uint64_t v27 = v47[0];
  }

  else
  {
    swift_bridgeObjectRetain(*v19);
    uint64_t v26 = 1LL;
    uint64_t v27 = v12;
  }

  uint64_t v28 = v52;
  sub_1001291F8((uint64_t)v11, v26, 1LL, v52);
  swift_bridgeObjectRelease(v20, v29);
  if (sub_10012B4E8((uint64_t)v11, 1LL, v28) == 1)
  {
    sub_10018A37C((uint64_t)v11, &qword_1002BA7E8);
    uint64_t v30 = v50;
    uint64_t v31 = swift_bridgeObjectRetain(a3);
    static Date.now.getter(v31);
    *uint64_t v30 = a2;
    v30[1] = a3;
    uint64_t v32 = v49;
    swift_beginAccess(v49, v54, 33LL, 0LL);
    sub_10018A3A8();
    uint64_t v33 = *(void *)(*v32 + 16LL);
    sub_10014A228(v33);
    uint64_t v34 = *v32;
    *(void *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = v33 + 1;
    sub_10018A3F0( (uint64_t)v30,  v34 + ((*(unsigned __int8 *)(v27 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))
    + *(void *)(v27 + 72) * v33);
    uint64_t v35 = *v32;
    swift_endAccess(v54);
    if (*(void *)(v53 + OBJC_IVAR___GKMultiplayerActivityEventFilter_maxTrackedSessionsCount) < *(void *)(v35 + 16))
    {
      swift_beginAccess(v32, v54, 33LL, 0LL);
      sub_100188BD8((uint64_t)v30);
      swift_endAccess(v54);
      sub_10018A340((uint64_t)v30);
    }

    uint64_t v36 = v51;
    *Class v56 = v51;
    return swift_bridgeObjectRetain(v36);
  }

  else
  {
    uint64_t v38 = v48;
    sub_10018A3F0((uint64_t)v11, v48);
    uint64_t v39 = type metadata accessor for Date(0LL);
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v41 = *(void *)(v40 + 64);
    __chkstk_darwin(v39);
    uint64_t v42 = static Date.+ infix(_:_:)( v38 + *(int *)(v28 + 20),  *(double *)(v53 + OBJC_IVAR___GKMultiplayerActivityEventFilter_maxSessionDuration));
    uint64_t v43 = __chkstk_darwin(v42);
    uint64_t v44 = (char *)v47 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    static Date.now.getter(v43);
    LOBYTE(v41) = static Date.> infix(_:_:)(v44, v44);
    uint64_t v45 = *(void (**)(char *, uint64_t))(v40 + 8);
    v45(v44, v39);
    v45(v44, v39);
    uint64_t result = sub_10018A340(v38);
    uint64_t v46 = 0LL;
    if ((v41 & 1) != 0)
    {
      uint64_t result = swift_bridgeObjectRetain(v51);
      uint64_t v46 = result;
    }

    *Class v56 = v46;
  }

  return result;
}

uint64_t sub_100189778@<X0>(uint64_t *a1@<X8>)
{
  return sub_100189390(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_1001897FC(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a1,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  v3[4] = v6;
  uint64_t v7 = dword_1002BA62C;
  a3;
  uint64_t v8 = (void *)swift_task_alloc(v7);
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10018989C;
  return MultiplayerActivityEventFilter.filterEvent(metricsFields:)(v6);
}

uint64_t sub_10018989C(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v5 = *(void *)(*v1 + 32);
  uint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v6 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5, v8);

  if (a1)
  {
    v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1, v10);
  }

  else
  {
    v9.super.Class isa = 0LL;
  }

  uint64_t v11 = *(void (***)(void, void))(v3 + 24);
  ((void (**)(void, Class))v11)[2](v11, v9.super.isa);

  _Block_release(v11);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_100189958()
{
  return type metadata accessor for MultiplayerActivityFieldsProvider(0LL);
}

uint64_t type metadata accessor for MultiplayerActivityFieldsProvider(uint64_t a1)
{
  return sub_1001835D4(a1, qword_1002BA660, (uint64_t)&nominal type descriptor for MultiplayerActivityFieldsProvider);
}

uint64_t sub_100189974(uint64_t a1)
{
  uint64_t result = type metadata accessor for MetricsFieldsProviderCategory(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 1LL, &v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for MultiplayerActivityEventFilter()
{
  return objc_opt_self(&OBJC_CLASS___GKMultiplayerActivityEventFilter);
}

uint64_t *initializeBufferWithCopyOfBuffer for MultiplayerActivityEventFilter.TrackedSession( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Date(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t destroy for MultiplayerActivityEventFilter.TrackedSession(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *initializeWithCopy for MultiplayerActivityEventFilter.TrackedSession( void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for MultiplayerActivityEventFilter.TrackedSession(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24LL))(v10, v11, v12);
  return a1;
}

_OWORD *initializeWithTake for MultiplayerActivityEventFilter.TrackedSession( _OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void *assignWithTake for MultiplayerActivityEventFilter.TrackedSession(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7, a2);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiplayerActivityEventFilter.TrackedSession( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100189CDC);
}

uint64_t sub_100189CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(swift_bridgeObjectRelease(v0[23], v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return sub_10012B4E8(a1 + *(int *)(a3 + 20), a2, v8);
  }

uint64_t storeEnumTagSinglePayload for MultiplayerActivityEventFilter.TrackedSession( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100189D5C);
}

void sub_100189D5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = (a2 - 1);
    sub_10013A774();
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    sub_1001291F8(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }

uint64_t type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(uint64_t a1)
{
  return sub_1001835D4( a1,  qword_1002BA768,  (uint64_t)&nominal type descriptor for MultiplayerActivityEventFilter.TrackedSession);
}

uint64_t sub_100189DD4(uint64_t a1)
{
  v4[0] = &unk_1001F5D70;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100189E48()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100189E7C()
{
  uint64_t v2 = v0[2];
  unint64_t v3 = (void *)v0[3];
  unint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1002BA7AC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100131C10;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1002BA7A8 + dword_1002BA7A8))(v2, v3, v4);
}

uint64_t sub_100189EE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  unint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *unint64_t v4 = v3;
  v4[1] = sub_1001321AC;
  return v6();
}

uint64_t sub_100189F40()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  unint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1002BA7BC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1001321AC;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1002BA7B8 + dword_1002BA7B8))(v2, v3, v4);
}

uint64_t sub_100189FB8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_1001321AC;
  return v7();
}

uint64_t sub_10018A010()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10018A03C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1002BA7CC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1001321AC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1002BA7C8 + dword_1002BA7C8))( a1,  v4,  v5,  v6);
}

uint64_t sub_10018A0C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = sub_10012B4E8(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_10018A37C(a1, &qword_1002B8238);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = swift_allocObject(&unk_100276830, 32LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v15 | v13)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    v19[2] = v13;
    v19[3] = v15;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1002BA7E0, v16);
}

uint64_t sub_10018A204(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100187940;
  return v6(a1);
}

uint64_t sub_10018A268()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10018A28C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1002BA7DC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100132138;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002BA7D8 + dword_1002BA7D8))(a1, v4);
}

uint64_t sub_10018A2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018A340(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10018A37C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100129274(a2);
  sub_10014471C(v3);
  return a1;
}

void sub_10018A3A8()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *uint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100169B80(0, *(void *)(v1 + 16) + 1LL, 1, v1);
    *uint64_t v0 = v3;
  }

uint64_t sub_10018A3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

  ;
}

uint64_t sub_10018A444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)(a1, a2, a3, v3, v4);
}

uint64_t sub_10018A454( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100129678(&a9);
}

id sub_10018A460()
{
  return objc_allocWithZone(v0);
}

uint64_t sub_10018A468(uint64_t a1)
{
  return swift_allocObject(a1, 48LL, 7LL);
}

char *GKGameModeListener.__allocating_init(handler:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return GKGameModeListener.init(handler:)(a1, a2);
}

char *GKGameModeListener.init(handler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v56 = a2;
  uint64_t v53 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  uint64_t v55 = type metadata accessor for Logger(0LL);
  uint64_t v52 = *(void *)(v55 - 8);
  uint64_t v4 = __chkstk_darwin(v55);
  uint64_t v51 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v51 - v6;
  *(_DWORD *)&v2[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken] = -1;
  uint64_t v8 = OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationQueue;
  sub_100129B78();
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  sub_1001296C0();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = v2;
  static DispatchQoS.default.getter();
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v14);
  sub_1001296C0();
  uint64_t v17 = v16 - v15;
  aBlock[0] = _swiftEmptyArrayStorage;
  unint64_t v18 = sub_100129BB4();
  uint64_t v19 = sub_100129274(&qword_1002B7F68);
  unint64_t v20 = sub_1001292B4();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v14, v18);
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v21);
  sub_1001296C0();
  uint64_t v24 = v23 - v22;
  (*(void (**)(uint64_t, void))(v25 + 104))( v23 - v22,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  uint64_t v26 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000029LL,  0x800000010024A7D0LL,  v12,  v17,  v24,  0LL);
  *(void *)&v3[v8] = v26;
  uint64_t v27 = static GKLog.daemon.getter(v26);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.info.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)sub_10018B18C();
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "GKGameModeListener: Initializing", v30, 2u);
    sub_10012CE24((uint64_t)v30);
  }

  uint64_t v31 = *(void (**)(char *, uint64_t))(v52 + 8);
  uint64_t v32 = v55;
  v31(v7, v55);
  uint64_t v33 = &v13[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeChangedHandler];
  uint64_t v34 = v56;
  *(void *)uint64_t v33 = v53;
  *((void *)v33 + 1) = v34;
  swift_retain(v34);

  v60.receiver = v13;
  v60.Class super_class = ObjectType;
  uint64_t v35 = (char *)objc_msgSendSuper2(&v60, "init");
  int out_token = -1;
  uint64_t v36 = *(void **)&v35[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationQueue];
  uint64_t v37 = swift_allocObject(&unk_100276880, 24LL, 7LL);
  swift_unknownObjectWeakInit(v37 + 16, v35);
  aBlock[4] = sub_10018AB40;
  uint64_t v58 = v37;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10018AEB4;
  aBlock[3] = &unk_100276898;
  uint64_t v38 = _Block_copy(aBlock);
  uint64_t v39 = v58;
  uint64_t v40 = v35;
  uint64_t v41 = v36;
  swift_release(v39);
  uint32_t v42 = notify_register_dispatch("com.apple.system.console_mode_changed", &out_token, v41, v38);
  _Block_release(v38);

  if (v42 || (int v49 = out_token, out_token == -1))
  {
    uint64_t v44 = v51;
    uint64_t v45 = static GKLog.daemon.getter(v43);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v48 = 67109120;
      LODWORD(aBlock[0]) = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4);
      _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "GKGameModeListener: Failed to register for game mode changed notification, status: %u",  v48,  8u);
      sub_10012CE24((uint64_t)v48);
    }

    swift_release(v34);

    v31(v44, v32);
  }

  else
  {

    swift_release(v34);
    *(_DWORD *)&v40[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken] = v49;
  }

  return v40;
}

uint64_t sub_10018A948()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10018A96C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v21[-v8 - 8];
  a2 += 16LL;
  swift_beginAccess(a2, v21, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    uint64_t v12 = static GKLog.daemon.getter(Strong);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.info.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "GKGameModeListener: Received game mode changed notification",  v15,  2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    sub_10018AB48();
  }

  else
  {
    uint64_t v16 = static GKLog.daemon.getter(0LL);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "GKGameModeListener: Received game mode changed notification after event stream was deallocated name",  v19,  2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }

void sub_10018AB40(uint64_t a1)
{
}

uint64_t sub_10018AB48()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v6 = &v32[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = &v32[-v8];
  __chkstk_darwin(v7);
  uint64_t v11 = &v32[-v10];
  uint64_t v12 = OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken;
  BOOL is_valid_token = notify_is_valid_token(*(_DWORD *)(v1
                                                   + OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken));
  if (is_valid_token)
  {
    uint64_t state64 = 0LL;
    uint64_t state = notify_get_state(*(_DWORD *)(v1 + v12), &state64);
    if ((_DWORD)state)
    {
      int v15 = state;
      uint64_t v16 = static GKLog.daemon.getter(state);
      uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v19 = 67109120;
        int v36 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "GKGameModeListener: notify_get_state() failed with error %u",  v19,  8u);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v9, v2);
    }

    else
    {
      uint64_t v25 = state64;
      uint64_t v26 = static GKLog.daemon.getter(state);
      uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
      os_log_type_t v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        BOOL v33 = v25 != 0;
        uint64_t v29 = swift_slowAlloc(18LL, -1LL);
        *(_DWORD *)uint64_t v29 = 134218240;
        swift_beginAccess(&state64, &v36, 0LL, 0LL);
        uint64_t v34 = state64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &state64);
        *(_WORD *)(v29 + 1sub_100129678(v0 + 2) = 1024;
        LODWORD(v34) = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 4);
        _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "GKGameModeListener: Game Mode Status is now %lld, calling game mode changed handler with isActive=%{BOOL}d",  (uint8_t *)v29,  0x12u);
        swift_slowDealloc(v29, -1LL, -1LL);
      }

      (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v11, v2);
      uint64_t v30 = *(void (**)(BOOL))(v1
                                        + OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeChangedHandler);
      uint64_t v31 = *(void *)(v1 + OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeChangedHandler + 8);
      swift_retain(v31);
      v30(v25 != 0);
      return swift_release(v31);
    }
  }

  else
  {
    uint64_t v21 = static GKLog.daemon.getter(is_valid_token);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "GKGameModeListener: Invalid game mode changed notify token",  v24,  2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
  }

uint64_t sub_10018AEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_10018AEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100129678(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10018AF00(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id GKGameModeListener.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1001296C0();
  uint64_t v7 = v6 - v5;
  uint64_t v9 = static GKLog.daemon.getter(v8);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)sub_10018B18C();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "GKGameModeListener: Deallocating", v12, 2u);
    sub_10012CE24((uint64_t)v12);
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v13 = OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken;
  int v14 = *(_DWORD *)&v1[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken];
  if (v14 != -1)
  {
    notify_cancel(v14);
    *(_DWORD *)&v1[v13] = -1;
  }

  v16.receiver = v1;
  v16.Class super_class = ObjectType;
  return objc_msgSendSuper2(&v16, "dealloc");
}

void GKGameModeListener.init()()
{
}

uint64_t sub_10018B110(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t type metadata accessor for GKGameModeListener()
{
  return objc_opt_self(&OBJC_CLASS____TtC14GameDaemonCore18GKGameModeListener);
}

uint64_t sub_10018B154()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10018B178(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16LL))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_10018B18C()
{
  return swift_slowAlloc(2LL, -1LL);
}

void *sub_10018B198(void *result)
{
  *uint64_t result = ++qword_1002BF860;
  return result;
}

uint64_t sub_10018B1B4( mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, void *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v30 = 1;
  uint64_t v31 = a4;
  int v32 = 16777472;
  int v33 = a5;
  NDR_record_t v34 = NDR_record;
  int v17 = *a3;
  int v35 = a2;
  int v36 = v17;
  int v37 = a5;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B000000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  uint64_t v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v19)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v20 = 4294966988LL;
      }

      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v20 = 4294966996LL;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            int v21 = v33;
            if (v33 == v47)
            {
              uint64_t v20 = 0LL;
              int v22 = *(_DWORD *)&v34.mig_vers;
              *a3 = v38;
              __int128 v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              __int128 v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              __int128 v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              __int128 v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              int v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v20 = 4294966996LL;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port) {
              uint64_t v20 = 4294966996LL;
            }
            else {
              uint64_t v20 = HIDWORD(v31);
            }
          }
        }

        else
        {
          uint64_t v20 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v20 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v20;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v20;
}

uint64_t sub_10018B40C(mach_port_t a1, unsigned int a2, __int128 *a3)
{
  __int128 v4 = a3[5];
  __int128 v19 = a3[4];
  __int128 v20 = v4;
  __int128 v5 = a3[7];
  __int128 v21 = a3[6];
  __int128 v22 = v5;
  __int128 v6 = a3[1];
  __int128 v15 = *a3;
  __int128 v16 = v6;
  __int128 v7 = a3[3];
  __int128 v17 = a3[2];
  NDR_record_t v13 = NDR_record;
  unsigned int v14 = a2;
  __int128 v18 = v7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B100000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }

  if ((_DWORD)v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }

  if (msg.msgh_id == 71)
  {
    uint64_t v10 = 4294966988LL;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }

  if (msg.msgh_id != 1301)
  {
    uint64_t v10 = 4294966995LL;
    goto LABEL_17;
  }

  uint64_t v10 = 4294966996LL;
  if ((msg.msgh_bits & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (msg.msgh_size != 36) {
    goto LABEL_17;
  }
  if (msg.msgh_remote_port) {
    goto LABEL_17;
  }
  uint64_t v10 = v14;
  if (v14) {
    goto LABEL_17;
  }
  return v10;
}

uint64_t sub_10018B598( mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, void *a9, _DWORD *a10)
{
  int v18 = 1;
  uint64_t v19 = a6;
  int v20 = 16777472;
  int v21 = a7;
  NDR_record_t v22 = NDR_record;
  *(_DWORD *)__int128 v23 = a2;
  *(_DWORD *)&void v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  int v24 = a7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B200000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v13)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v14 = 4294966988LL;
      }

      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v14 = 4294966996LL;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            int v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              uint64_t v14 = 0LL;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v14 = 4294966996LL;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port) {
              uint64_t v14 = 4294966996LL;
            }
            else {
              uint64_t v14 = HIDWORD(v19);
            }
          }
        }

        else
        {
          uint64_t v14 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v14 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v14;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v14;
}

uint64_t sub_10018B784(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B300000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }

    if (msg.msgh_id == 71)
    {
      uint64_t v12 = 4294966988LL;
    }

    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v12 = v18;
            if (!v18)
            {
              int v15 = v20;
              *a2 = v19;
              *a3 = v15;
              int v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }

            goto LABEL_23;
          }
        }

        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v13 = 1;
          }
          else {
            BOOL v13 = v18 == 0;
          }
          if (v13) {
            uint64_t v12 = 4294966996LL;
          }
          else {
            uint64_t v12 = v18;
          }
          goto LABEL_23;
        }
      }

      uint64_t v12 = 4294966996LL;
    }

    else
    {
      uint64_t v12 = 4294966995LL;
    }

void sub_10018B8FC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) - 1224239923 * ((-2 - ((a1 | 0xAACC30C4) + (~(_DWORD)a1 | 0x5533CF3B))) ^ 0xA78032EC);
  __asm { BR              X11 }

uint64_t sub_10018BA20()
{
  if (v0 < 0) {
    int v0 = -v0;
  }
  if (v2 >= 0) {
    unsigned int v4 = v2;
  }
  else {
    unsigned int v4 = -v2;
  }
}

uint64_t sub_10018BA6C()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((177 * (v1 < 0x83)) ^ (v0 + 829))) - 12LL))();
}

void sub_10018BA90()
{
  *(_DWORD *)(v1 + sub_10012CFE4(v1, v0) = 1966800080;
}

void sub_10018C8FC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) ^ (1225351577 * ((-2 - ((a1 | 0x21ABC784) + (~(_DWORD)a1 | 0xDE54387B))) ^ 0xFDCEE06D));
  __asm { BR              X10 }

uint64_t sub_10018C9CC@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  unsigned int v12 = 1755732067 * (&a4 ^ 0xDEC6BDDB);
  a7 = &STACK[0x708F6A420CBDE163];
  a8 = v12 ^ 0x1576EF19;
  a4 = &STACK[0x3F8123127DDA1A64];
  a5 = v11;
  a6 = (v10 - 179) ^ v12;
  uint64_t v13 = (*(uint64_t (**)(unint64_t **))(a1 + 8LL * (v10 - 184)))(&a4);
  return ((uint64_t (*)(uint64_t))(*(void *)(v9
                                                      + 8LL
                                                      * (((*(_DWORD *)(v11 - 0x27E11828102FB971LL) == v8) * (v10 + 1585)) ^ v10))
                                          - 4LL))(v13);
}

uint64_t sub_10018CA84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return ((uint64_t (*)(void))(*(void *)(v12 + 8LL * (((a11 == v11) * (((v13 - 1) | 1) - 386)) ^ (v13 + 870))) - 8LL))();
}

uint64_t sub_10018CAD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  *(_BYTE *)(v11 + (v14 + v13)) = *(_BYTE *)(a9 + (v14 + v13)) ^ 0x2C;
  return ((uint64_t (*)(void))(*(void *)(v16
                                        + 8LL
                                        * ((15 * (((v12 + 1441020162) & 0xAA1BC397 ^ (v13 + 400)) + v14 >= (a11 ^ v15))) ^ v12))
                            - 8LL))();
}

void sub_10018CB38(_DWORD *a1@<X8>)
{
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(*(void *)(v3 + 24) - 0x335EB1051722DFECLL) = v1;
  *(_DWORD *)(v4 - 0x7785963AF3444772LL) = v2;
  *(_DWORD *)uint64_t v3 = *a1;
}

void sub_10018CBA0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 3804331 * (((a1 | 0x51A664) - (a1 & 0x51A664)) ^ 0x7E848392);
  __asm { BR              X9 }

uint64_t sub_10018CC6C@<X0>( _DWORD *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, int a8)
{
  unsigned int v14 = 1759421093
      * ((2 * ((&a5 ^ 0x852F369) & 0x163ED650) - (&a5 ^ 0x852F369) + 1774266795) ^ 0xD2EE6A96);
  int v17 = *a1 - v12 + *(_DWORD *)(v8 - 0x27E11828102FB979LL) - 282547543;
  a8 = v13 - v14 + 977;
  a5 = v17 - v14 + 1616045007;
  a6 = v14 + 1583842651;
  a7 = v8;
  uint64_t v15 = (*(uint64_t (**)(int *))(a2 + 8LL * (v13 - 333)))(&a5);
  return ((uint64_t (*)(uint64_t))(*(void *)(v11 + 8LL * ((1474 * (*v9 == v10)) ^ v13))
                                          - ((v13 + 2034994670) & 0x86B471F7)
                                          + 394LL))(v15);
}

uint64_t sub_10018CD6C()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((*(void *)(v0 + 8) == 0x48247A308694277ELL) * ((v1 + 26) ^ 0x227)) ^ v1))
}

uint64_t sub_10018CDB8()
{
}

void sub_10018CE1C()
{
  *int v0 = -2084203482;
}

uint64_t sub_10018D09C(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 - 235795823 * ((a1 + 1658036232 - 2 * (a1 & 0x62D3A008)) ^ 0xF67EE951) - 424;
  int v2 = *(_DWORD *)(*(void *)(a1 + 8) - 0x1F589EA4AC42BDE5LL);
  int v4 = v2 - 1966800080;
  BOOL v3 = v2 - 1966800080 < 0;
  int v5 = 1966800080 - v2;
  if (!v3) {
    int v5 = v4;
  }
  BOOL v6 = (v1 ^ 0x7AFFDEDC ^ v5) - 1117065228 + ((2 * v5) & 0xF5FFBFFA) - 946524146 >= v1 + 2147483358;
  return ((uint64_t (*)(void))(*((void *)*(&off_10027AEF0 + v1 - 177) + ((v6 | (16 * v6)) ^ v1) - 1) - 8LL))();
}

uint64_t sub_10018D1A0()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1782 * (*(_DWORD *)(*v2 + 4LL * v4) != v0)) ^ v3)) - 4LL))();
}

uint64_t sub_10018D1D0@<X0>(int a1@<W8>)
{
  int v4 = (v1 - 681) | 0x101;
  BOOL v5 = a1 + v3 - 946524333 >= (v4 + 2147483358);
  return ((uint64_t (*)(void))(*(void *)(*(void *)(v2 + 8LL * (v4 - 177)) - 8LL + 8LL * ((v5 | (16 * v5)) ^ v4)) - 8LL))();
}

uint64_t sub_10018D228(uint64_t result)
{
  *(_DWORD *)(result + 4) = 49961323;
  return result;
}

uint64_t sub_10018D238()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL * ((1433 * (((v3 ^ v0) & 0x80000000) != ((v2 + 86) | 0x20) - 304)) ^ v2))
                            - 4LL))();
}

uint64_t sub_10018D280()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * (((((v2 << (v3 + 31)) & v1) != v5) * v6) ^ v4)) - 4LL))();
}

uint64_t sub_10018D2AC@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(result + 4) = (a2 << (((v2 - 55) & 0xCF) + 60)) + v3 - 174040244;
  return result;
}

void sub_10018D2E4(uint64_t a1)
{
  int v1 = 1178560073 * ((-2 - ((a1 | 0x5A50E64C) + (~(_DWORD)a1 | 0xA5AF19B3))) ^ 0x1F3B61D1);
  int v2 = *(_DWORD *)(a1 + 40) ^ v1;
  if (*(void *)(a1 + 48) | *(void *)(a1 + 64)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) + v1 == 2014182718;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  __asm { BR              X8 }

uint64_t sub_10018D444()
{
  BOOL v4 = v1[1] == 0xC8F409392290867LL || (v1[7] | v1[4]) == 0LL;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((56 * v4) ^ v0)) - ((v0 + 772) ^ 0x390LL)))();
}

uint64_t sub_10018D4A4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, int a7@<W8>, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *(void *)(v11 + 72);
  *(_DWORD *)(v9 - 0xC8F40939229086swift_allocObject(v1, 40LL, 7LL) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8LL * ((62 * (v13 != 0x1F589EA4AC42BDE9LL)) ^ a7)))( a1,  v13,  a7 ^ 0x39Eu,  a2,  a3,  a4,  a5,  a6,  a8,  a9,  v10);
}

uint64_t sub_10018D54C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 8LL * (int)(((((38 * (v10 ^ 0xB9)) ^ 0xFFFFFFD4) + v10 + 790) * (v8 == 0)) ^ (v10 - 56))) - 4LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

uint64_t sub_10018D590@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v20 = a1 - 633;
  int v21 = ((v19 - 1956630864 - 2 * ((v19 - 144) & 0x8B602F40)) ^ 0x31F45722) * v13;
  *(void *)(v19 - 128) = v16;
  *(void *)(v19 - 120) = v18;
  *(_DWORD *)(v19 - 140) = a1 - v21 + 867;
  *(_DWORD *)(v19 - 136) = v14 + v21 - 225694159 + a1 - 633;
  uint64_t v22 = v11;
  BOOL v25 = v12 == 0;
  (*(void (**)(uint64_t))(v11 + 8LL * (a1 ^ 0x387)))(v19 - 144);
  *(_DWORD *)(v19 - 128) = (v20 + 242) ^ (628203409 * ((v19 + 69161144 - 2 * ((v19 - 144) & 0x41F5148)) ^ 0x86975D7B));
  *(void *)(v19 - 144) = v15;
  *(void *)(v19 - 136) = a10;
  ((void (*)(uint64_t))(*(void *)(v22 + 8LL * (v20 ^ 0x114)) - 4LL))(v19 - 144);
  *(_DWORD *)(v19 - 128) = v20
                         + 1374699841 * ((((v19 - 144) | 0xD1E85911) - ((v19 - 144) & 0xD1E85911)) ^ 0xBC1C4118)
                         + 916;
  *(void *)(v19 - 144) = a9;
  *(void *)(v19 - 136) = a10;
  *(void *)(v19 - 120) = a11;
  *(void *)(v19 - 11sub_100129678(v0 + 2) = a5;
  *(void *)(v19 - 104) = v15;
  uint64_t v23 = ((uint64_t (*)(uint64_t))(*(void *)(v22 + 8LL * (v20 ^ 0x1A3)) - 4LL))(v19 - 144);
  return (*(uint64_t (**)(uint64_t))(v17 + 8LL * (((((v20 + 727) | 0x268) ^ ((v20 ^ 0x741) + 3)) * v25) ^ v20)))(v23);
}

uint64_t sub_10018D870()
{
  int v6 = 535753261 * ((v5 - 144) ^ 0xAF40E2F);
  *(void *)(v5 - 120) = v3;
  *(_DWORD *)(v5 - 128) = v4 - v6 - 1345;
  *(_DWORD *)(v5 - 144) = (v1 - 262623407 + (v4 ^ 0x6DC)) ^ v6;
  *(void *)(v5 - 136) = v8;
  uint64_t result = ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * (v4 ^ 0x6A2)) - 8LL))(v5 - 144);
  *int v10 = v9;
  *int v0 = 2084229119;
  return result;
}

uint64_t sub_10018D9BC(_DWORD *a1)
{
  unsigned int v1 = 1224239923 * (((a1 | 0x8C9528F6) - (_DWORD)a1 + (a1 & 0x736AD709)) ^ 0x7E26D521);
  unsigned int v2 = a1[4] - v1;
  int v3 = *a1 ^ v1;
  unsigned int v5 = v3 - 1352176489;
  BOOL v4 = v3 - 1352176489 < 0;
  LODWORD(v6) = 1352176489 - v3;
  if (v4) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = v5;
  }
  BOOL v7 = v6 != ((2 * (_DWORD)v6) & 0xD48E6B50);
  return (*((uint64_t (**)(void))*(&off_10027AEF0 + (int)(v2 ^ 0x1F3)) + (int)((v7 | (32 * v7)) ^ v2) - 1))();
}

void sub_10018DA6C(int a1@<W8>)
{
  **(_DWORD **)(v1 - 0x1F589EA4AC42BDE1LL) = (v2 - 364431960) ^ 0x2CAB1580;
  *(_DWORD *)(v1 - 0x1F589EA4AC42BDE5LL) = a1 + 1;
}

void sub_10018DAC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __asm { BR              X8 }

uint64_t sub_10018DB40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  a16 = 108757529 * ((&a15 + 70320331 - 2 * (&a15 & 0x43100CB)) ^ 0xE4AD62E0) - 504207030;
  uint64_t v17 = sub_1001CF8B4(&a15);
  return ((uint64_t (*)(uint64_t))(*(void *)(v16 + 8LL * ((2013 * (a15 == 2084229119)) ^ 0x265u)) - 12LL))(v17);
}

uint64_t sub_10018DBE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, int a16, unsigned int a17)
{
  a17 = 854 - 460628867 * ((((2 * &a15) | 0xF5C7D9FC) - &a15 + 85725954) ^ 0xB6756E83);
  a15 = &STACK[0x49EB7E5E2EA5C90D];
  sub_1001A8490((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 8LL * ((363 * (a16 == 2084229119)) ^ v17)) - 12LL))( v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26);
}

uint64_t sub_10018DC70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, unsigned int a18, uint64_t a19)
{
  unsigned int v27 = 1178560073 * ((((2 * &a15) | 0x52165FC6) - &a15 - 688599011) ^ 0x939F5781);
  a18 = v27 ^ 0x3E5;
  a16 = v27 + 804878199 * v25 + 1740498123;
  a17 = a13;
  sub_1001A23C4(&a15);
  unsigned int v28 = 1178560073 * ((&a15 & 0x147230E4 | ~(&a15 | 0x147230E4)) ^ 0x5119B779);
  a18 = v28 ^ 0x3E5;
  a17 = a13;
  a16 = v28 + 804878199 * v24 + 1740498123;
  sub_1001A23C4(&a15);
  unsigned int v29 = 1178560073 * (&a15 ^ 0xBA947862);
  a16 = v29 + 292;
  a19 = v22;
  a18 = ((v23 ^ 0x4F7FFFD6) - 4727314 + ((2 * v23) & 0x9EFFFFAC)) ^ v29;
  a17 = a13;
  sub_1001B9C6C(&a15);
  unsigned int v30 = 1178560073 * ((&a15 - 1989463651 - 2 * (&a15 & 0x896B319D)) ^ 0x33FF49FF);
  a17 = a13;
  a19 = v20;
  a16 = v30 + 292;
  a18 = v30 ^ ((v21 ^ 0xEF3FDFED) + 1610087895 + ((2 * v21) & 0xDE7FBFDA));
  sub_1001B9C6C(&a15);
  int v31 = *v19;
  a17 = a13;
  a16 = v29 + 804878199 * v31 + 1740498123;
  a18 = v29 ^ 0x3E5;
  uint64_t v32 = sub_1001A23C4(&a15);
  return ((uint64_t (*)(uint64_t))(*(void *)(v26 + 8LL * ((1563 * (a15 == 2084229119)) ^ 0x162u)) - 12LL))(v32);
}

uint64_t sub_10018DF20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, uint64_t a16, unsigned int a17, unsigned int a18, unsigned int a19, int a20)
{
  unsigned int v23 = 460628867 * (((&a15 | 0x444BEFE9) + (~&a15 | 0xBBB41016)) ^ 0x8DD6D95);
  a15 = &STACK[0x27D4077E41C0C6C8];
  a16 = a13;
  a18 = v23 + v21 - 2024873437;
  a19 = 274310066 - v23;
  a17 = v23 + 1658269492;
  uint64_t v24 = sub_1001CFD20((uint64_t)&a15);
}

uint64_t sub_10018DFE4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, unsigned int a15, unint64_t *a16, unint64_t *a17, unint64_t *a18, unsigned int a19)
{
  a19 = (v19 - 81) ^ (1225351577 * ((&a15 & 0x700A8397 | ~(&a15 | 0x700A8397)) ^ 0xAC6FA47E));
  a16 = a14;
  a17 = &STACK[0x7785963AF3444786];
  a18 = &STACK[0x335EB1051722E004];
  ((void (*)(unsigned int *))((char *)*(&off_10027AEF0 + (v19 ^ 0x1E9)) - 12))(&a15);
  a15 = (v19 - 80) ^ (1374699841 * (&a15 ^ 0x6DF41809));
  a16 = &STACK[0x18E41690234F4F55];
  a17 = a14;
  ((void (*)(unsigned int *))*(&off_10027AEF0 + (int)(v19 - 300)))(&a15);
  a16 = a14;
  a15 = (v19 - 69) ^ (1755732067
                    * ((((2 * (&a15 ^ 0x1D0430E2)) | 0x9439548E)
  uint64_t v21 = sub_1001A3BA0((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(void *)(v20
                                                      + 8LL
                                                      * ((1839 * ((_DWORD)a17 == 2 * (v19 ^ 0x12F) + 2084228709)) ^ v19))
                                          - 12LL))(v21);
}

uint64_t sub_10018E178( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
}

uint64_t sub_10018E1C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  BOOL v15 = (((((v12 - 829) | 0x446) - 756) ^ 0xFDF3E29C) & (2 * ((a12 ^ v13) - ((2 * (a12 ^ v13)) & 0x35134EC) + 27826806)) ^ 0x151206C)
      + (((a12 ^ v13) - ((2 * (a12 ^ v13)) & 0x35134EC) + 27826806) ^ 0xFF516BC9)
      + 930545525 != 913371444;
  return (*(uint64_t (**)(void))(v14 + 8LL * ((v15 | (2 * v15)) ^ v12)))();
}

uint64_t sub_10018E25C()
{
}

uint64_t sub_10018E2C0(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((((((unint64_t)(v1 - v2) < 0x20) ^ (a1 + 2)) & 1)
                                          * (((a1 - 201) | 0xD0) ^ 0x5D3)) ^ a1))
                            - 8LL))();
}

uint64_t sub_10018E310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                                     + 8LL
                                                     * ((((a5 + v6 - 1519378149) & 0xE284F7F ^ 0x78F) * (v5 > 0x1F)) ^ a5))
                                         - 4LL))(0LL);
}

uint64_t sub_10018E354(uint64_t a1, int a2)
{
  uint64_t v11 = v6 + v5 + v8 + (a2 ^ (v7 + 995));
  __int128 v12 = *(_OWORD *)(v2 + v11 - 15);
  __int128 v13 = *(_OWORD *)(v2 + v11 - 31);
  uint64_t v14 = v9 + v11;
  *(_OWORD *)(v14 - 15) = v12;
  *(_OWORD *)(v14 - 31) = v13;
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((79 * ((v4 & 0xFFFFFFE0) == 32)) ^ (v3 + a2 + 807))) - 8LL))();
}

void sub_10018E3B0()
{
}

uint64_t sub_10018E3BC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((((2 * a6) ^ 0xC17) * (v6 == a1)) ^ a6))
                            - ((a6 - 260) | 0x80u)
                            + 1413LL))();
}

uint64_t sub_10018E3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v8 = ((v5 + ((a5 + 1214353071) | 0x406008B) - 72) & v6) != 0;
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((v8 | (v8 << 6)) ^ a5)) - 4LL))();
}

uint64_t sub_10018E43C(int a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(v9 - 7 + (v8 + v7 + v6 - a1 + 1557)) = *(void *)(v4
                                                                             - 7
                                                                             + (v8 + v7 + v6 - a1 + 1557));
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
}

void sub_10018E4A8()
{
}

uint64_t sub_10018E4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v9 + 8LL * ((29 * ((((v7 - v5 - 877) ^ (v8 + 1582) ^ (v6 == a5)) & 1) == 0)) ^ v7)))();
}

uint64_t sub_10018E4EC(uint64_t a1, int a2, int a3)
{
  *(_BYTE *)(v6 + (a3 - 913371445)) = *(_BYTE *)(v4 + (a3 - 913371445));
}

uint64_t sub_10018E538@<X0>(int a1@<W3>, int a2@<W8>)
{
  int v5 = (a1 - 1187865068) & 0x46CD616B;
  *uint64_t v4 = a2;
  uint64_t v11 = v8;
  unsigned int v10 = v5
      + (((v9 | 0x3211D2A2) - v9 + (v9 & 0xCDEE2D58)) ^ 0x38E5DC8D) * v3
      + 977;
  v2(v9);
  unsigned int v10 = v5 + 259 + ((v9 + 581886662 - 2 * (v9 & 0x22AEE2C6)) ^ 0x285AECE9) * v3 + 718;
  uint64_t v11 = v7;
  v2(v9);
  return 0LL;
}

uint64_t sub_10018E63C(uint64_t a1)
{
  int v1 = 1374699841 * ((((2 * a1) | 0x4FD35BAC) - a1 + 1477857834) ^ 0xCA1DB5DF);
  int v2 = *(_DWORD *)a1 ^ v1;
  int v3 = *(_DWORD *)(a1 + 16) + v1;
  if (v3 < 0) {
    int v3 = -v3;
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 8) - 0x1F589EA4AC42BDE5LL);
  unsigned int v6 = v4 - 1966800080;
  BOOL v5 = v4 - 1966800080 < 0;
  unsigned int v7 = 1966800080 - v4;
  if (!v5) {
    unsigned int v7 = v6;
  }
  return ((uint64_t (*)(void))(*((void *)*(&off_10027AEF0 + v2 - 95)
                              + (((8 * (v3 >> 5 < v7)) | (16 * (v3 >> 5 < v7))) ^ v2)
                              - 1)
                            - 12LL))();
}

uint64_t sub_10018E6F0@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  unsigned int v4 = ((*(_DWORD *)(*(void *)(v2 - 0x1F589EA4AC42BDE1LL) + 4LL * v3) ^ 0xC6EC2028) >> a2) ^ 0x18ED06CC;
  unsigned int v5 = ((v4 & 0x92200000 | 0x6D95DF71) - (v4 & 0x49055940 | 0x926A208E) - 1838538610) ^ v4 & 0xDB255941;
  *(_DWORD *)(result + 4) = ((v5 & 0x9C0AE040 ^ 0x880A204C) + (v5 ^ 0x75B0DF31) - ((v5 ^ 0x75B0DF31) & 0x9C0AE04C)) ^ 0xCBF416DC;
  return result;
}

uint64_t sub_10018E7A4(uint64_t result)
{
  *(_DWORD *)(result + 4) = 1339815632;
  return result;
}

void sub_10018E7B4(uint64_t a1)
{
  int v1 = 1374699841 * ((a1 - 1542394297 - 2 * (a1 & 0xA410EE47)) ^ 0xC9E4F64E);
  __asm { BR              X13 }

uint64_t sub_10018E868@<X0>(int a1@<W8>)
{
  unsigned int v5 = 1755732067 * ((-432722614 - (v7 | 0xE6352D4A) + (v7 | 0x19CAD2B5)) ^ 0xC70C6F6E);
  uint64_t v8 = v2;
  v7[0] = (v3 - ((v4 + a1 + 782147618) & 0x56CA4A2C) - 1028360358) ^ v5;
  v7[1] = (a1 - 325) ^ v5;
  return ((uint64_t (*)(_DWORD *))(*(void *)(v1 + 8LL * (a1 ^ 0x42D)) - 12LL))(v7);
}

void sub_10018E9C4(uint64_t a1)
{
  __asm { BR              X8 }

uint64_t sub_10018EA48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *))(v66 + 14120))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  2337622372LL,  a9,  &a66,  a11,  &STACK[0x3EA9131FAE911000]);
}

uint64_t sub_10018EB58()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((2 * (v1 == v3 + v0 - 487911584)) | (4 * (v1 == v3 + v0 - 487911584)) | v0))
                            - ((v0 + 2061907623) & 0x8519CDF5)
                            + 1437LL))();
}

uint64_t sub_10018EBAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  return ((uint64_t (*)(void))(*(void *)(v17
                                        + 8LL
                                        * (int)(((((v18 - 510884205) & 0xFFFFFFFC) - a16 != (v16 ^ 0x5CC) - 510884313)
                                               * ((v16 + 1989858250) & 0x896526F9 ^ 0x6B)) ^ v16))
                            - 12LL))();
}

uint64_t sub_10018EC10@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  BOOL v17 = a13 - v15 != 1219120379 || v13 == ((a1 - 64) | 0x2C0) + 754912867;
  return (*(uint64_t (**)(void))(v14 + 8LL * ((742 * (((a1 - 64) ^ v17) & 1)) ^ a1)))();
}

uint64_t sub_10018EC6C@<X0>( int a1@<W7>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v17 = a2 - 264;
  int v18 = a2 - 264 - v15 + 1241;
  int v19 = a1 + a2 - 264 + 1232;
  unsigned int v20 = (v17 ^ (v15 + 103)) + a14 + 169496557;
  int v21 = (v20 < (v18 ^ 0x71381218u)) ^ ((v16 + 1388617041) < 0x713816C1);
  BOOL v22 = v20 < v16 + 1388617041;
  if (v21) {
    BOOL v22 = (v16 + 1388617041) < 0x713816C1;
  }
  return ((uint64_t (*)(void))(*(void *)(v14 + 8LL * ((107 * !v22) ^ v19)) - 8LL))();
}

uint64_t sub_10018EE1C()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL * ((452 * (*(_DWORD *)(v1 + 48LL * (v2 - 1469433710) + 36) == v2)) ^ v0))
}

uint64_t sub_10018EE74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v21 = 628203409 * ((((v20 - 152) | 0x81E41E6B) - ((v20 - 152) & 0x81E41E6B)) ^ 0x36C1258);
  *(void *)(v20 - 144) = a12;
  *(void *)(v20 - 15sub_100129678(v0 + 2) = a14;
  *(void *)(v20 - 128) = a15;
  *(void *)(v20 - 11sub_100129678(v0 + 2) = a17;
  *(_DWORD *)(v20 - 136) = v18 - v21 + 1563;
  *(_DWORD *)(v20 - 13sub_100129678(v0 + 2) = v19 - v21 + ((v18 + 433) ^ 0x3A46EC4B);
  *(void *)(v20 - 104) = a13;
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(a7 + 8LL * (int)(v18 & 0xE2896C7A)))(v20 - 152);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8LL
                                            * ((1376
                                              * (*(_DWORD *)(v20 - 120) == ((v18 - 17107132) & 0x75AFBF57) + 126884090)) ^ v18)))(v22);
}

uint64_t sub_10018EF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9
                                                                                                  + 8LL * (((*(_DWORD *)(v7 + 48LL * (v8 + 868188557 + ((v6 + 1610620390) | 0x14AA9705))) == 73805598) * ((v6 ^ 0x273) - 57)) ^ v6)))( a1,  a2,  a3,  a4,  a5,  a6,  v10);
}

uint64_t sub_10018EFDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  if ((v8 - 1550691361) <= 0x10 && ((1 << (v8 - 33)) & 0x12105) != 0) {
    __asm { BR              X10 }
  }

  return v9 ^ 0x83C59421;
}

void sub_10018F67C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 44) - 1224239923 * (((a1 | 0x1FD8AEE4) - a1 + (a1 & 0xE027511B)) ^ 0xED6B5333);
  __asm { BR              X13 }

uint64_t sub_10018F780()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v0 ^ 0x5D3 ^ (93 * (v1 != 0x1AA260A0)))) - 8LL))();
}

uint64_t sub_10018F7E4()
{
  BOOL v11 = v3 > v5;
  uint64_t v12 = (v7 - 659196916);
  *(_BYTE *)(v10 + v1sub_100129678(v0 + 2) = *(_BYTE *)(*(void *)(v8 + 8LL * (v1 ^ 0x671)) + (v12 & 0xF) - 12) ^ *(_BYTE *)(v0 + v12) ^ (23 * (v12 & 0xF)) ^ *(_BYTE *)(*(void *)(v8 + 8LL * (v1 ^ 0x6E6)) + (v12 & 0xF) - 12) ^ *(_BYTE *)(*(void *)(v8 + 8LL * (v1 ^ 0x669)) + (v12 & 0xF) - 11);
  if (v11 == v7 - 1081844341 < ((v1 + 799652800) & 0xD0563FFF) + v2) {
    BOOL v11 = v7 - 1081844341 < v4;
  }
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((v11 * v6) ^ v1)) - 8LL))();
}

uint64_t sub_10018F8B4()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((222
                                * (((v0 - 8) ^ ((v1 ^ (v0 - 1152) ^ 0x555596A9)
                                                               - 65624
                                                               + ((2 * v1) & 0x9FEFEFFC ^ 0x1544C140) == 1341585318)) & 1)) ^ v0)))();
}

uint64_t sub_10018F928@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((81
                                          * (v2 + a1 - 1341650942 < (((v1 & 0x5FB4769D ^ 0x65E) + 921) ^ (12 * (v1 & 0x5FB4769D ^ 0x65Eu))))) ^ v1 & 0x5FB4769Du))
                            - 8LL))();
}

uint64_t sub_10018F9A8(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v6
                                                      + 8LL
                                                      * ((((((a2 + a6 - 16) < 0xFFFFFFF0) ^ (((a3 - 16) ^ 0xA7) + 1)) & 1)
                                                        * (((a3 + 752) ^ 0x1FE) + 1246)) ^ (a3 + 752)))
                                          - 12LL))(a1);
}

uint64_t sub_10018F9F0@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W8>)
{
  uint64_t v10 = (v7 + a3 + a1) + v9;
  uint64_t v11 = ((_BYTE)v7 + (_BYTE)a3 + (_BYTE)a1) & 0xF;
  uint64_t v12 = v11 - v10;
  unint64_t v13 = v11 - v10 + v4;
  uint64_t v14 = (v5 | v11) - v10;
  BOOL v15 = v13 >= 0x10 && v3 - v9 >= (unint64_t)(a2 + 801) - 1486;
  unint64_t v16 = v14 + (((a2 - 697) | 0x3E0u) ^ 0x3E7LL);
  int v19 = !v15 || v16 < 0x10 || (unint64_t)(v12 + v6) < 0x10;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((510 * v19) ^ a2)) - 12LL))();
}

uint64_t sub_10018FA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (a7 ^ (810 * (v7 > 0xF))))
                            - ((a7 + 1745444873) & 0x97F69BBD)
                            + 409LL))();
}

uint64_t sub_10018FAA8@<X0>( int a1@<W1>, int a2@<W6>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52)
{
  *(_DWORD *)(v59 - 120) = v56 + 12;
  v64.val[1].i64[0] = (((a2 + 100) | 0x25) + (_BYTE)v56) & 0xF;
  v64.val[1].i64[1] = ((_BYTE)v56 + 6) & 0xF;
  v64.val[2].i64[0] = ((_BYTE)v56 + 5) & 0xF;
  v64.val[2].i64[1] = ((_BYTE)v56 + 4) & 0xF;
  v64.val[3].i64[0] = ((_BYTE)v56 + 3) & 0xF;
  v64.val[3].i64[1] = ((_BYTE)v56 + 2) & 0xF;
  v60.i64[0] = 0x7979797979797979LL;
  v60.i64[1] = 0x7979797979797979LL;
  v64.val[0].i64[0] = ((_BYTE)v58 + (_BYTE)a3 + (_BYTE)a1) & 0xF;
  v64.val[0].i64[1] = ((_BYTE)v56 + 8) & 0xF;
  v61.i64[0] = vqtbl4q_s8(v64, (int8x16_t)xmmword_1001F5E20).u64[0];
  v65.val[0].i64[1] = v56 & 0xF;
  v65.val[1].i64[1] = ((_BYTE)v56 + 14) & 0xF;
  v65.val[2].i64[1] = *(_DWORD *)(v59 - 120) & 0xF;
  v65.val[3].i64[1] = ((_BYTE)v56 + 10) & 0xF;
  v65.val[0].i64[0] = ((_BYTE)v56 + 1) & 0xF;
  v65.val[1].i64[0] = ((_BYTE)v56 - 1) & 0xF;
  v65.val[2].i64[0] = ((_BYTE)v56 + 13) & 0xF;
  v65.val[3].i64[0] = ((_BYTE)v56 + 11) & 0xF;
  v61.i64[1] = vqtbl4q_s8(v65, (int8x16_t)xmmword_1001F5E20).u64[0];
  int8x16_t v62 = vrev64q_s8(vmulq_s8(v61, v60));
  *(int8x16_t *)(a50 - 15 + (v58 + a3 + a1)) = veorq_s8( veorq_s8( veorq_s8( *(int8x16_t *)(v53 + v64.val[0].i64[0] - 15),  *(int8x16_t *)(v52 - 15 + (v58 + a3 + a1))),  veorq_s8( *(int8x16_t *)(v64.val[0].i64[0] + v54 - 12),  *(int8x16_t *)(v55 + v64.val[0].i64[0] - 15))),  vextq_s8(v62, v62, 8uLL));
  return ((uint64_t (*)(void))(*(void *)(a52
                                        + 8LL
                                        * ((195
                                          * (((((a2 - 924) | 0x125) ^ 0x2F7 ^ ((v57 & 0xFFFFFFF0) == 16)) & 1) == 0)) ^ ((a2 - 924) | 0x125)))
                            - 8LL))();
}

void sub_10018FC24()
{
}

uint64_t sub_10018FC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
}

uint64_t sub_10018FC7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v9
                                        + 8LL
                                        * ((((((v8 & 8) == 0) ^ (a8 + 122)) & 1)
                                          * (((a8 - 191) | 0x160) + 697)) ^ a8))
                            - 12LL))();
}

uint64_t sub_10018FCCC@<X0>( int a1@<W1>, int a2@<W5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52)
{
  *(_DWORD *)(v62 - 13sub_100129678(v0 + 2) = v57;
  unsigned int v63 = v57 & 0xFFFFFFF8;
  *(void *)(v62 - 128) = v61 - 7;
  *(void *)(v62 - 120) = v52 - 7;
  *(_DWORD *)(v62 - 136) = v63;
  char v64 = v58 + v59 + a3;
  uint64_t v65 = (v59 + a3 + a1 - v60);
  v67.val[0].i64[0] = ((_BYTE)v59 + (_BYTE)a3 + (_BYTE)a1 - (_BYTE)v60) & 0xF;
  v67.val[0].i64[1] = (v64 + 8 - (_BYTE)v60) & 0xF;
  v67.val[1].i64[0] = (v56 - (_BYTE)v60 + ((a2 + 10) ^ 8)) & 0xF;
  v67.val[1].i64[1] = (v64 + 6 - (_BYTE)v60) & 0xF;
  v67.val[2].i64[0] = (v64 + 5 - (_BYTE)v60) & 0xF;
  v67.val[2].i64[1] = (v64 + 4 - (_BYTE)v60) & 0xF;
  v67.val[3].i64[0] = (v64 + 3 - (_BYTE)v60) & 0xF;
  v67.val[3].i64[1] = (v64 + 2 - (_BYTE)v60) & 0xF;
  *(int8x8_t *)(*(void *)(v62 - 128) + v65) = veor_s8( veor_s8( veor_s8( *(int8x8_t *)(v53 + (v65 & 0xF) - 7),  *(int8x8_t *)(*(void *)(v62 - 120) + v65)),  veor_s8( *(int8x8_t *)((v65 & 0xF) + v54 - 4),  *(int8x8_t *)(v55 + (v65 & 0xF) - 7))),  vrev64_s8( vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8( v67,  (int8x16_t)xmmword_1001F5E30),  (int8x8_t)0x7979797979797979LL)));
  return ((uint64_t (*)(__n128))(*(void *)(a52 + 8LL * ((1530 * (8 - v63 == -v60)) ^ a2)) - 4LL))((__n128)xmmword_1001F5E30);
}

void sub_10018FE08()
{
}

uint64_t sub_10018FE14( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v23
                                                      + 8LL
                                                      * (((((*(_DWORD *)(v24 - 132) == *(_DWORD *)(v24 - 136)) ^ (a2 + 72)) & 1)
                                                        * ((a2 + 565) ^ 0x108)) ^ a2))
                                          - 12LL))(a23);
}

uint64_t sub_10018FE5C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v12 = (a5 - 1341585319);
  *(_BYTE *)(v11 + v1sub_100129678(v0 + 2) = *(_BYTE *)(v7 + (v12 & 0xF)) ^ *(_BYTE *)(v5 + v12) ^ *(_BYTE *)(v9 + (v12 & 0xF)) ^ *(_BYTE *)(((a4 + 902415387) & 0xCA3639F7) + (unint64_t)(v12 & 0xF) + v8 - 500) ^ (121 * (v12 & 0xF));
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((983 * (a5 - 1 == v6)) ^ (a4 + 508))) - 8LL))();
}

uint64_t sub_10018FEE4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
  uint64_t v51 = *(void *)(a1 + 24);
  *(int8x16_t *)(v50 - 11sub_100129678(v0 + 2) = veorq_s8( *(int8x16_t *)(*(void *)(a1 + 16) - 0xAA58417147CEA7FLL),  (int8x16_t)xmmword_1001F5E40);
  if (v49) {
    BOOL v52 = v51 == 0xCDF342D76DC35A7LL;
  }
  else {
    BOOL v52 = 1;
  }
  int v53 = !v52;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 + 8LL * (int)((1321 * v53) ^ a6)) - (((_DWORD)a6 - 28) ^ 0x47Fu) + 1436LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  ((_DWORD)a6 - 28) ^ 0x47Fu,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48);
}

uint64_t sub_10018FF60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48)
{
  int v50 = (4 * v48) ^ 0x7F8;
  BOOL v52 = ((BYTE4(a24) + ((v50 - 116) | 0x84) + 105) & 0xF) != 0 || HIDWORD(a24) == 2006439667;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 + 8LL * ((44 * v52) ^ v48)) - 8LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  (v50 + 908) | 0x184u,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48);
}

uint64_t sub_10018FFB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, int a25, int a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57)
{
  return ((uint64_t (*)(void))(*(void *)(v57
                                        + 8LL
                                        * (a26 ^ (22
                                                * (((2 * (a25 - ((2 * a57) & 0x27F03100) - 1671413363)) & 0xEAF71DFE ^ 0x22F01100)
                                                 + ((a25 - ((2 * a57) & 0x27F03100) - 1671413363) ^ 0xE683967F)
                                                 + 1071544838 != 895092997))))
                            - 12LL))();
}

uint64_t sub_100190088(int a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * ((118
                                * (a1 + v2 + 176451840 + ((v1 - 1650) | 0x80) - 452 < (((v1 - 1623) | 0x284) ^ 0x3EC))) ^ v1)))();
}

uint64_t sub_100190104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * ((1008 * ((a7 & 0xFFFFFFF0) != ((a6 + 2107332153) & 0x8264AF7F ^ 0xF57B887E))) ^ a6))
                            - 8LL))();
}

uint64_t sub_100190154(int a1, uint64_t a2, int a3)
{
  uint64_t v10 = (a1 + v7 + v6);
  unint64_t v11 = v10 + v9 + 1;
  uint64_t v12 = (((a3 - 1658) | 0x2E0) - 981) & (a1 + v7);
  uint64_t v13 = v12 - v10;
  unint64_t v14 = v5 + v13;
  uint64_t v15 = ((a3 - 1658) ^ 0x295u) + v12 - 912;
  unint64_t v16 = v5 + v15;
  unint64_t v17 = v4 + v13;
  unint64_t v18 = v4 + v15;
  unint64_t v19 = v3 + v13;
  unint64_t v20 = v3 + v15;
  BOOL v22 = v16 > v9 && v14 < v11;
  if (v18 > v9 && v17 < v11) {
    BOOL v22 = 1;
  }
  int v25 = v20 > v9 && v19 < v11 || v22;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((244 * v25) ^ a3)) - 12LL))();
}

uint64_t sub_1001901E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v7
                                                                       + 8LL
                                                                       * (int)(((((a6 + 1750977517) & 0x97A232BD) + 1340)
                                                                              * (v6 > 0xF)) ^ a6))
                                                           - (((a6 - 718) | 0x308u) ^ 0x3C3LL)))( a1,  a2,  0LL);
}

uint64_t sub_100190238( int a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  v71.val[1].i64[0] = ((_BYTE)a2 + 7) & 0xF;
  v71.val[1].i64[1] = ((_BYTE)a2 + 6) & 0xF;
  v71.val[2].i64[0] = ((_BYTE)a2 + 5) & 0xF;
  v71.val[2].i64[1] = ((_BYTE)a2 + 4) & 0xF;
  v71.val[3].i64[0] = ((_BYTE)a2 + 3) & 0xF;
  v71.val[3].i64[1] = ((_BYTE)a2 + 2) & 0xF;
  v72.val[0].i64[0] = ((_BYTE)a2 + 1) & 0xF;
  v72.val[0].i64[1] = a2 & 0xF;
  v72.val[1].i64[0] = ((_BYTE)a2 - 1) & 0xF;
  v72.val[1].i64[1] = (a2 + 14) & 0xF;
  unsigned int v64 = a1 + v62 + v61;
  v72.val[2].i64[0] = (a2 + 13) & 0xF;
  v72.val[2].i64[1] = ((_BYTE)a2 + 12) & 0xF;
  v72.val[3].i64[0] = ((_BYTE)a2 + 11) & 0xF;
  v72.val[3].i64[1] = ((_BYTE)a2 + 10) & 0xF;
  v65.i64[0] = 0x505050505050505LL;
  v65.i64[1] = 0x505050505050505LL;
  v66.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v66.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  v71.val[0].i64[0] = v64 & 0xF;
  v71.val[0].i64[1] = ((_BYTE)a2 + 8) & 0xF;
  v67.i64[0] = vqtbl4q_s8(v71, (int8x16_t)xmmword_1001F5E20).u64[0];
  v67.i64[1] = vqtbl4q_s8(v72, (int8x16_t)xmmword_1001F5E20).u64[0];
  int8x16_t v68 = vrev64q_s8( veorq_s8( veorq_s8(*(int8x16_t *)(v63 - 15 + v64), *(int8x16_t *)(v59 + v71.val[0].i64[0] - 15)),  veorq_s8(*(int8x16_t *)(v58 + v71.val[0].i64[0] - 15), *(int8x16_t *)(v57 + v71.val[0].i64[0] - 15))));
  int8x16_t v69 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v68, v68, 8uLL), v66), vmulq_s8(v67, v65)));
  *(int8x16_t *)(v63 - 15 + v64) = vextq_s8(v69, v69, 8uLL);
  return ((uint64_t (*)(void))(*(void *)(a57 + 8LL * ((1783 * ((v60 & 0xFFFFFFF0) == 16)) ^ a4))
                            - ((a4 - 843) | 0x148u)
                            + 452LL))();
}

void sub_1001903A0()
{
}

uint64_t sub_1001903AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,unsigned __int8 *a55,unsigned int a56,uint64_t a57)
{
  int v62 = (4 * v59) ^ 0x1B4;
  *(_DWORD *)(v61 - 120) = v62;
  int v63 = v59;
  uint64_t v64 = *(void *)(v60 + 8LL * (v59 - 145));
  uint64_t v65 = *(void *)(v60 + 8LL * (v63 ^ 0xCD)) - 8LL;
  uint64_t v66 = *(void *)(v60 + 8LL * (v63 ^ 0xD4)) - 8LL;
  int v67 = *(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC359ALL) ^ 0x49LL));
  int v68 = *(unsigned __int8 *)(v65 + (*v58 ^ (v62 - 51))) ^ 0x23;
  HIDWORD(v70) = v67 ^ 2;
  LODWORD(v70) = (v67 ^ 0x55555555) << 24;
  unsigned __int8 v69 = v70 >> 26;
  int v71 = ((*(unsigned __int8 *)(v64 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC35A5LL) ^ 0xD7LL)) ^ 0xB2) << 8) | (v68 << 24);
  uint64_t v72 = *(void *)(v60 + 8LL * (v63 ^ 0xF)) - 8LL;
  int v73 = *(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC359BLL) ^ 0xB8LL));
  int v74 = *(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC359ELL) ^ 0x6BLL));
  HIDWORD(v70) = v74 ^ 2;
  LODWORD(v70) = (v74 ^ 0x55555555) << 24;
  LOBYTE(v67) = *(_BYTE *)(v64 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC3599LL) ^ 0x2ELL));
  int v75 = ((v70 >> 26) ^ 0x53) << 16;
  int v76 = *(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC35A6LL) ^ 0x47LL));
  HIDWORD(v70) = v76 ^ 2;
  LODWORD(v70) = (v76 ^ 0x55555555) << 24;
  LODWORD(v66) = *(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC35A2LL) ^ 0xCBLL));
  int v78 = ((v69 ^ 0xFB) << 16) | ((v73 ^ 0x9B) << 24) | ((v67 ^ 0x77) << 8);
  HIDWORD(v70) = v66 ^ 2;
  LODWORD(v70) = (v66 ^ 0x55555555) << 24;
  LOBYTE(v66) = *(_BYTE *)(v72 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC359CLL) ^ 0xB5LL));
  unsigned int v79 = ((*(_BYTE *)(v72 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC35A0LL) ^ 0xA9LL)) - 92) | ((*(unsigned __int8 *)(v64 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC35A1LL) ^ 0x30LL)) ^ 0x87) << 8)) & 0xFF00FFFF | (((v70 >> 26) ^ 0xBA) << 16) | ((*(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC35A3LL) ^ 0x35LL)) ^ 0xEC) << 24);
  int v80 = v75 | ((*(unsigned __int8 *)(v64 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC359DLL) ^ 0x77LL)) ^ 0x7D) << 8) | ((*(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC359FLL) ^ 0xBFLL)) ^ 0xF5) << 24);
  LOBYTE(v7sub_100129678(v0 + 2) = *(_BYTE *)(v72 + (*(unsigned __int8 *)(v57 - 0xCDF342D76DC3598LL) ^ 0x36LL)) - 92;
  uint64_t v81 = *(void *)(v60 + 8LL * (v63 + 66)) - 4LL;
  uint64_t v82 = v69 ^ 0x61u;
  uint64_t v83 = *(void *)(v60 + 8LL * (v63 ^ 0x3C)) - 8LL;
  LODWORD(v65) = *(_DWORD *)(v81 + 4LL * (v72 ^ 0xFDu)) ^ 0xBC62319C ^ *(_DWORD *)(v83 + 4 * v82);
  *(_DWORD *)(v61 - 15sub_100129678(v0 + 2) = v63;
  uint64_t v84 = *(void *)(v60 + 8LL * (v63 - 106));
  int v85 = (v65 + 851036389 + (~(2 * v65) | 0x9A8C6E37)) ^ *(_DWORD *)(v84 + 4LL * (v73 ^ 0xEu));
  uint64_t v86 = *(void *)(v60 + 8LL * (v63 ^ 0xF5)) - 4LL;
  HIDWORD(v496) = v77;
  LODWORD(v496) = v78 & 0xFFFFFF00 | v72 ^ 0x2A;
  unsigned int v87 = v80 & 0xFFFFFF00 | (v66 - 92) ^ 0xA8;
  unsigned int v406 = *(_DWORD *)(v86 + 4LL * (v67 ^ 0x4Fu)) ^ v77 ^ (v85 - ((2 * v85) & 0xDBCAA252) - 303738583);
  int v88 = v406 ^ v79 ^ 0x4D;
  int v89 = v406 ^ v79;
  *(_DWORD *)(v61 - 200) = v406 ^ v79;
  *(_DWORD *)(v61 - 128) = v88 ^ v87;
  unsigned __int8 v392 = v406 ^ v79 ^ 0x4D;
  int v90 = v88 ^ v87 ^ (v496
  int v409 = BYTE1(v90);
  int v420 = BYTE2(v90);
  unsigned int v91 = *(_DWORD *)(v86 + 4LL * (BYTE1(v90) ^ 0xF1u)) ^ *(_DWORD *)(v83 + 4LL * (BYTE2(v90) ^ 0x78u)) ^ 0xAF1725DB;
  int v424 = v90;
  unsigned int v92 = (v91 - ((2 * v91) & 0xFD208ADC) - 24099474) ^ *(_DWORD *)(v81 + 4LL * (v90 ^ 0x9Du));
  *(_DWORD *)(v61 - 224) = (v90 ^ 0xF231261D) >> 24;
  int v93 = v406 ^ *(_DWORD *)(v84 + 4LL * (((v90 ^ 0xF231261D) >> 24) ^ 0x65)) ^ (v92 - ((2 * v92) & 0x657391C8) + 851036388);
  unint64_t v495 = __PAIR64__(v79, v87);
  int v94 = v93 ^ 0x74AC4282;
  *(_DWORD *)(v61 - 176) = v93;
  int v95 = v93 ^ 0x74AC4282 ^ (v87 - 2 * (v87 & 0x74AC42A2 ^ ((v66 - 92) ^ 0xA8) & 0x20) + 1957446274);
  unsigned int v96 = v95 ^ v90 ^ 0xF231261D;
  *(_DWORD *)(v61 - 184) = v95;
  int v440 = BYTE2(v96);
  int v436 = BYTE1(v96);
  unsigned int v97 = *(_DWORD *)(v83 + 4LL * (BYTE2(v96) ^ 0x2Eu)) ^ *(_DWORD *)(v86 + 4LL * (BYTE1(v96) ^ 0x9Bu)) ^ 0xAF1725DB;
  int v508 = v93 ^ 0x82 ^ (v87 - 2 * (v87 & 0xA2 ^ ((v66 - 92) ^ 0xA8) & 0x20) - 126) ^ v90 ^ 0x1D;
  unsigned int v98 = (v97 - ((2 * v97) & 0xFD208ADC) - 24099474) ^ *(_DWORD *)(v81 + 4LL * (v508 ^ 0xD2u));
  unsigned int v99 = v98 + 851036389 + (~(2 * v98) | 0x9A8C6E37);
  unsigned int v100 = v96 ^ 0xF713C5DC;
  *(_DWORD *)(v61 - 23sub_100129678(v0 + 2) = HIBYTE(v96);
  int v101 = v99 ^ *(_DWORD *)(v84 + 4LL * (HIBYTE(v96) ^ 0x69));
  int v102 = v101 ^ v88 ^ 0x2575236;
  *(_DWORD *)(v61 - 168) = v101 ^ v88;
  int v470 = v102 ^ v95;
  unsigned int v103 = ((v470 ^ 0x98D15FDC) - 2 * ((v470 ^ 0x98D15FDC) & 0x3B46497 ^ v470 & 2) - 2085329771) ^ v96 ^ 0xF713C5DC;
  unsigned int v104 = v103 ^ 0x9547167F;
  int v476 = ((v103 ^ 0x9547167F) >> 16);
  int v497 = ((unsigned __int16)(v103 ^ 0x167F) >> 8);
  unsigned int v105 = *(_DWORD *)(v83 + 4LL * (v476 ^ 0x89u)) ^ *(_DWORD *)(v86 + 4LL * (v497 ^ 0x3Au)) ^ 0xAF1725DB;
  int v481 = v103;
  unsigned int v106 = (v105 - ((2 * v105) & 0xFD208ADC) - 24099474) ^ *(_DWORD *)(v81 + 4LL * (v103 ^ 0xE4u));
  v104 >>= 24;
  *(_DWORD *)(v61 - 240) = v104;
  int v107 = (v106 - ((2 * v106) & 0x657391C8) + 851036388) ^ *(_DWORD *)(v84 + 4LL * (v104 ^ 0x1D));
  unsigned int v449 = v101 ^ v93;
  int v503 = (v107 - ((2 * v107) & 0x2DB661D6) - 1764019989) ^ v101 ^ v93;
  unsigned __int8 v513 = ((unsigned __int16)((v107 - ((2 * v107) & 0x61D6) + 12523) ^ v101 ^ v93) >> 8) ^ 0x30;
  unsigned int v506 = v503 ^ 0x96DB30EB ^ v101 ^ v88;
  unsigned int v108 = ((v506 ^ 0xFE25CD6D) - 2 * ((v506 ^ 0xFD839AAA) & 8 ^ (v506 ^ 0xFE25CD6D) & 0x3B4649D) - 2085329771) ^ v100;
  *(_DWORD *)(v61 - 248) = ((unsigned __int16)(((v506 ^ 0xCD6D)
                                                               - 2 * ((v506 ^ 0x9AAA) & 8 ^ (v506 ^ 0xCD6D) & 0x649D)
                                                               + 25749) ^ v100) >> 8);
  int v109 = *(_DWORD *)(v86
                   + 4LL
                   * (((unsigned __int16)(((v506 ^ 0xCD6D)
                                                          - 2 * ((v506 ^ 0x9AAA) & 8 ^ (v506 ^ 0xCD6D) & 0x649D)
                                                          + 25749) ^ v100) >> 8) ^ 0x6Fu));
  *(_DWORD *)(v61 - 256) = BYTE2(v108);
  unsigned int v110 = (v89 ^ 0xBAF72DE4) - ((2 * (v89 ^ 0xBAF72DE4)) & 0xE9588504);
  LODWORD(v7sub_100129678(v0 + 2) = v109 ^ *(_DWORD *)(v83 + 4LL * (BYTE2(v108) ^ 0xA8u)) ^ 0xAF1725DB;
  LODWORD(v7sub_100129678(v0 + 2) = (v72 - ((2 * v72) & 0x657391C8) + 851036388) ^ *(_DWORD *)(v84 + 4LL * (HIBYTE(v108) ^ 0x85));
  int v499 = (((v506 ^ 0x6D) - 2 * ((v506 ^ 0xAA) & 8 ^ (v506 ^ 0x6D) & 0x9D) - 107) ^ v100);
  LODWORD(v7sub_100129678(v0 + 2) = (v72 - ((2 * v72) & 0xFD208ADC) - 24099474) ^ *(_DWORD *)(v81 + 4LL * (v499 ^ 0x25u));
  int v111 = (v72 - ((2 * v72) & 0x7140FF3E) - 1197441121) ^ v102;
  unsigned int v491 = v506 ^ 0xFD839AAA ^ v470;
  *(_DWORD *)(v61 - 13sub_100129678(v0 + 2) = v491 ^ v111;
  int v112 = v111;
  *(_DWORD *)(v61 - 19sub_100129678(v0 + 2) = v111;
  unsigned int v113 = v491 ^ v111 ^ 0xC4098B88;
  LOBYTE(v111) = v108 ^ v113;
  unsigned int v114 = v113;
  __int16 v377 = v113;
  unsigned int v115 = v108 ^ v113 ^ 0xB62FF9FD;
  unsigned int v418 = HIBYTE(v115);
  int v400 = BYTE2(v115);
  int v116 = *(_DWORD *)(v84 + 4LL * (HIBYTE(v115) ^ 0x1D)) ^ *(_DWORD *)(v83 + 4LL * (BYTE2(v115) ^ 0x89u)) ^ 0x704BBC16;
  int v404 = BYTE1(v115);
  LODWORD(v65) = (v116 - ((2 * v116) & 0xDBCAA252) - 303738583) ^ *(_DWORD *)(v86 + 4LL * (BYTE1(v115) ^ 0x3Au));
  int v487 = v111;
  uint64_t v117 = v81;
  LODWORD(v66) = *(_DWORD *)(v81 + 4LL * (v111 ^ 0x66u));
  LODWORD(v7sub_100129678(v0 + 2) = v503 ^ 0x96DB30EB ^ v72;
  *(_DWORD *)(v61 - 208) = v72;
  LODWORD(v66) = v72 ^ v66 ^ (v65 - ((2 * v65) & 0xFD208ADC) - 24099474);
  unsigned __int8 v414 = BYTE2(v112) ^ 0x16;
  LODWORD(v7sub_100129678(v0 + 2) = v66 ^ v112 ^ 0x7C166C11;
  int v118 = v66;
  *(_DWORD *)(v61 - 160) = v66;
  int v119 = v72;
  unsigned int v514 = (v108 ^ v72) >> 24;
  int v479 = (v108 ^ v72);
  LODWORD(v66) = *(_DWORD *)(v81 + 4LL * (v479 ^ 0x31u)) ^ *(_DWORD *)(v84 + 4LL * (v514 ^ 0x9B));
  unsigned int v457 = ((v108 ^ v72) >> 8) ^ 0x86839A;
  int v460 = ((unsigned __int16)(v108 ^ v72) >> 8) ^ 0x9A;
  int v120 = ((v66 ^ 0xCC298D8A) - 2 * ((v66 ^ 0xCC298D8A) & 0x6DE55139 ^ v66 & 0x10) - 303738583) ^ *(_DWORD *)(v86 + 4LL * (((unsigned __int16)(v108 ^ v72) >> 8) ^ 0xA0u));
  int v121 = v108 ^ v72 ^ 0xB82AE127;
  int v462 = ((v108 ^ v72) >> 16);
  unsigned int v122 = (v120 - ((2 * v120) & 0x85E4E9E4) + 1123185906) ^ *(_DWORD *)(v83 + 4LL * (v462 ^ 0xAu));
  LODWORD(v65) = (v122 - ((2 * v122) & 0x972C8A06) + 1268139267) ^ v118;
  *(_DWORD *)(v61 - 136) = v65;
  int v123 = v65 ^ 0xB615DFA9;
  int v428 = v65 ^ 0xB615DFA9 ^ v72;
  __int16 v395 = v65 ^ 0xDFA9;
  unsigned int v467 = v72 ^ v114;
  LODWORD(v65) = v72 ^ v114 ^ 0x630E4ACF;
  *(_DWORD *)(v61 - 140) = v65;
  unsigned int v415 = ((v428 ^ 0x5A137D54) - ((2 * (v428 ^ 0x5A137D54)) & 0xACCFFED6) + 1449656171) ^ v65;
  unsigned int v124 = ((v415 ^ 0xC0889743) - 2 * ((v415 ^ 0x47174F43) & 2 ^ (v415 ^ 0xC0889743) & 0x3EA97B8F) + 1051294605) ^ v121;
  unsigned int v125 = v124 ^ 0x479AB031;
  int v501 = ((unsigned __int16)(v124 ^ 0xB031) >> 8);
  int v485 = (((v415 ^ 0x43) - 2 * ((v415 ^ 0x43) & 2 ^ (v415 ^ 0x43) & 0x8F) - 115) ^ v121);
  int v126 = *(_DWORD *)(v86 + 4LL * (v501 ^ 0x3Au)) ^ *(_DWORD *)(v81 + 4LL * (v485 ^ 0xAAu)) ^ 0x13751447;
  unsigned int v127 = (v126 - ((2 * v126) & 0x85E4E9E4) + 1123185906) ^ *(_DWORD *)(v83 + 4LL * (BYTE2(v125) ^ 0x89u));
  LODWORD(v81) = (v127 - ((2 * v127) & 0x657391C8) + 851036388) ^ *(_DWORD *)(v84 + 4LL * (HIBYTE(v125) ^ 0x1D));
  unsigned int v128 = ((v81 ^ v119 ^ 0xA6C48CD5) - 2 * ((v81 ^ v119 ^ 0xA6C48CD5) & 0x3EA97B8F ^ (v81 ^ v119) & 2) + 1051294605) ^ v121;
  unsigned int v129 = HIBYTE(v128);
  int v130 = BYTE1(v128);
  unsigned int v131 = v110 + 1957446274;
  int v132 = *(_DWORD *)(v86 + 4LL * (BYTE1(v128) ^ 0x6Fu)) ^ *(_DWORD *)(v84 + 4LL * (HIBYTE(v128) ^ 5));
  int v465 = v128;
  unsigned int v133 = ((v132 ^ 0xDF5C99CD) - 2 * ((v132 ^ 0xDF5C99CD) & 0x7E90457E ^ v132 & 0x10) - 24099474) ^ *(_DWORD *)(v117 + 4LL * (v128 ^ 0x25u));
  unsigned int v134 = v133 - ((2 * v133) & 0x85E4E9E4);
  int v135 = v123 ^ v81;
  int v136 = BYTE2(v128);
  unsigned int v137 = v123 ^ v81 ^ *(_DWORD *)(v83 + 4LL * (BYTE2(v128) ^ 0xA8u)) ^ (v134 + 1123185906);
  unsigned int v138 = v415 ^ 0x47174F43 ^ v137 ^ v128;
  LODWORD(v65) = v415 ^ 0x47174F43 ^ v137;
  *(_DWORD *)(v61 - 2swift_unknownObjectWeakDestroy(v0 + 16) = v65;
  int v489 = BYTE1(v138);
  LODWORD(v86) = *(_DWORD *)(v86 + 4LL * (BYTE1(v138) ^ 0x44u));
  unsigned int v389 = HIBYTE(v138);
  LODWORD(v84) = *(_DWORD *)(v84 + 4LL * (HIBYTE(v138) ^ 0x47));
  int v139 = v94 ^ v131;
  int v383 = v415 ^ 0x43 ^ v137 ^ v128;
  int v140 = ((v84 ^ v86 ^ 0xDF5C99CD) - 2 * ((v84 ^ v86 ^ 0xDF5C99CD) & 0x7E90457E ^ (v84 ^ v86) & 0x10) - 24099474) ^ *(_DWORD *)(v117 + 4LL * (v383 ^ 0xD5u));
  int v373 = BYTE2(v138);
  unsigned int v141 = (v140 - ((2 * v140) & 0x85E4E9E4) + 1123185906) ^ *(_DWORD *)(v83 + 4LL * (BYTE2(v138) ^ 0xCBu));
  HIDWORD(v494) = v137 ^ 0xF48B2BE4 ^ (v141 - ((2 * v141) & 0xE8F80C9A) + 1954285133);
  int v375 = v137 ^ v81 ^ v72;
  LODWORD(v494) = v375 ^ 0x9C9FB24A ^ (HIDWORD(v494) - ((2 * HIDWORD(v494)) & 0x707AFABC) - 1203929762);
  HIDWORD(v49sub_100129678(v0 + 3) = v65 ^ 0x4018996 ^ v494;
  LODWORD(v49sub_100129678(v0 + 3) = (HIDWORD(v493) - ((2 * HIDWORD(v493)) & 0xF931A3C4) - 57093662) ^ v138;
  LODWORD(v8sub_100129678(v0 + 3) = *(_DWORD *)(v61 - 152);
  uint64_t v142 = (uint64_t)*(&off_10027AEF0 + (int)(v83 ^ 0x1E));
  unsigned int v143 = (((v135 ^ 0x1B9155BDu) >> 16)
        - 1702444604
        + ((2 * ((v135 ^ 0x1B9155BDu) >> 16) + 88) & 0x32E ^ 0xF67F7BFF)) ^ *(_DWORD *)(v142 + 4LL * (((v135 ^ 0x1B9155BDu) >> 16) ^ 0x2Du));
  int v144 = ((v136 ^ 0x89) - 1702444605 - ((2 * (v136 ^ 0x89) + 160207960) & 0x980872E)) ^ *(_DWORD *)(v142
                                                                                                  + 4LL * (v136 ^ 0xA4u));
  uint64_t v145 = (uint64_t)*(&off_10027AEF0 + (int)v83 + 15);
  LODWORD(v66) = (v143 - ((2 * v143) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(v135) ^ 0x47u));
  unsigned int v370 = v415 ^ 0x47174F43 ^ v81 ^ v72;
  uint64_t v146 = (char *)*(&off_10027AEF0 + (int)v83 - 35) - 12;
  uint64_t v147 = (char *)*(&off_10027AEF0 + (int)v83 - 15) - 8;
  int v148 = *(_DWORD *)&v147[4 * (v415 ^ 0x43 ^ (v81 ^ v72) ^ 0x53)];
  unsigned int v149 = (v144 - ((2 * v144) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * (v129 ^ 0xCC)];
  unsigned int v150 = *(_DWORD *)(v142 + 4LL * (BYTE2(v370) ^ 0xAAu)) ^ *(_DWORD *)&v146[4 * (HIBYTE(v370) ^ 0x3E)] ^ ((BYTE2(v370) ^ 0x87) - 1702444604 + ((2 * (BYTE2(v370) ^ 0x87) + 88) & 0x32E ^ 0xF67F7BFF)) ^ (181304767 * v148 - ((362609534 * v148 - 1984923634) & 0x9CB13CBC) - 1825514907);
  LODWORD(v8sub_100129678(v0 + 3) = *(_DWORD *)&v147[4 * ((v81 ^ v72) ^ 0x74)];
  LODWORD(v8sub_100129678(v0 + 3) = ((~(362609534 * v83 + 162560014) | 0xDB5F0339) + 181304767 * v83 + 1462286955) ^ *(_DWORD *)(v145 + 4LL * (((unsigned __int16)(v81 ^ v72) >> 8) ^ 0x5Au));
  int v484 = v83 - ((2 * v83) & 0x9CB13CBC);
  unsigned int v474 = ((v81 ^ v72) >> 24) ^ 0xB2;
  int v442 = ((v81 ^ v72) >> 16);
  unsigned int v472 = (v442 ^ 0x4C) - 1702444604 + ((2 * (v442 ^ 0x4C) + 88) & 0x32E ^ 0xF67F7BFF);
  unsigned int v455 = v149 - ((2 * v149) & 0x24A0FCC6);
  unsigned int v452 = v150 - ((2 * v150) & 0x24A0FCC6);
  HIDWORD(v498) = (v66 - ((2 * v66) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * ((v135 ^ 0x1B9155BDu) >> 24)] ^ (181304767 * *(_DWORD *)&v147[4 * (v135 ^ 0x7D)] - 992461817);
  unsigned int v151 = *(_DWORD *)(v142 + 4LL * (((v139 ^ 0xE9B45E6C) >> 16) ^ 0xF5u)) ^ ((((v139 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                           - 1702444604
                                                                                           + ((2
  unsigned int v152 = *(_DWORD *)(v61 - 184) ^ 0x31676F78;
  LODWORD(v65) = *(_DWORD *)(v142 + 4LL * (BYTE2(v152) ^ 0x7Bu)) ^ ((BYTE2(v152) ^ 0x56)
                                                                  - 1702444604
                                                                  + ((2 * (BYTE2(v152) ^ 0x56) + 88) & 0x32E ^ 0xF67F7BFF));
  int v153 = (v65 - ((2 * v65) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * HIBYTE(v152)];
  LODWORD(v65) = *(_DWORD *)(v142 + 4LL * (v440 ^ 0x34u)) ^ ((v440 ^ 0x19)
                                                           - 1702444604
                                                           + ((2 * (v440 ^ 0x19) + 88) & 0x32E ^ 0xF67F7BFF));
  int v154 = (v65 - 1840218525 + (~(2 * v65) | 0xDB5F0339) + 1) ^ *(_DWORD *)(v145 + 4LL * (v436 ^ 5u));
  int v437 = v153 - ((2 * v153) & 0x24A0FCC6);
  int v441 = v154 - ((2 * v154) & 0x9CB13CBC);
  int v155 = *(_DWORD *)&v147[4 * (*(_DWORD *)(v61 - 176) ^ 0xDF)];
  unsigned int v156 = *(_DWORD *)(v61 - 176) ^ 0x5A18571F;
  unsigned int v157 = *(_DWORD *)&v146[4 * HIBYTE(v156)] ^ ((BYTE2(v156) ^ 0xC1)
                                             - 1702444604
                                             + ((2 * (BYTE2(v156) ^ 0xC1) + 88) & 0x32E ^ 0xF67F7BFF)) ^ *(_DWORD *)(v142 + 4LL * (BYTE2(v156) ^ 0xECu)) ^ (181304767 * v155 - ((362609534 * v155 - 1984923634) & 0x9CB13CBC) - 1825514907);
  unsigned int v434 = v157 - ((2 * v157) & 0x24A0FCC6);
  unsigned int v158 = *(_DWORD *)&v146[4 * ((v139 ^ 0xE9B45E6C) >> 24)] ^ (v151 - ((2 * v151) & 0x9CB13CBC) - 833053090);
  unsigned int v431 = v158 - ((2 * v158) & 0x24A0FCC6);
  __int16 v387 = v428 ^ 0x8EA4;
  LODWORD(v8sub_100129678(v0 + 3) = v428 ^ 0x35C48CD5;
  int v159 = v415 ^ 0x25889743;
  unsigned int v429 = HIBYTE(v415) ^ 0x52;
  int v160 = *(_DWORD *)(v142 + 4LL * (BYTE2(v125) ^ 0xDEu)) ^ ((BYTE2(v125) ^ 0xF3)
                                                          - 1702444605
                                                          - ((2 * (BYTE2(v125) ^ 0xF3) + 160207960) & 0x980872E));
  int v161 = *(_DWORD *)(v142 + 4LL * (BYTE2(v83) ^ 0xFEu)) ^ ((BYTE2(v83) ^ 0xD3)
                                                         - 1702444605
                                                         - ((2 * (BYTE2(v83) ^ 0xD3) + 160207960) & 0x980872E));
  LODWORD(v7sub_100129678(v0 + 2) = *(_DWORD *)&v147[4 * (v415 ^ 0x86)];
  unsigned int v162 = (v160 - ((2 * v160) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * (HIBYTE(v125) ^ 0x36)];
  LODWORD(v65) = BYTE2(*(_DWORD *)(v61 - 136));
  LODWORD(v117) = *(_DWORD *)(v142 + 4LL * (v65 ^ 0x39)) ^ ((v65 ^ 0x14)
                                                                        - 1702444605
                                                                        - ((2 * (v65 ^ 0x14) + 160207960) & 0x980872E));
  LODWORD(v117) = (v117 - ((2 * v117) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (HIBYTE(v395) ^ 0x8Bu));
  unsigned int v416 = v162 - ((2 * v162) & 0x24A0FCC6);
  int v422 = v117 - ((2 * v117) & 0x9CB13CBC);
  int v163 = *(_DWORD *)(v145 + 4LL * (BYTE1(v159) ^ 0x20u)) ^ ((BYTE2(v159) ^ 0xD7)
                                                          - 1702444604
                                                          + ((2 * (BYTE2(v159) ^ 0xD7) + 88) & 0x32E ^ 0xF67F7BFF)) ^ *(_DWORD *)(v142 + 4LL * (BYTE2(v159) ^ 0xFAu)) ^ (181304767 * v72 - ((362609534 * v72 + 162560014) & 0x24A0FCC6) + 1462286954);
  LODWORD(v8sub_100129678(v0 + 3) = (v161 - ((2 * v161) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * BYTE3(v83)] ^ (181304767 * *(_DWORD *)&v147[4 * (v387 ^ 0x99)] - 992461817);
  unsigned int v368 = v395 ^ 0xA3;
  int v396 = v83 - ((2 * v83) & 0x24A0FCC6);
  int v399 = v163 - ((2 * v163) & 0x9CB13CBC);
  int v164 = *(_DWORD *)(v61 - 128);
  unsigned int v379 = BYTE1(v164) ^ 0xF5;
  unsigned int v380 = v406 ^ 0x2BEAE26B;
  LODWORD(v8sub_100129678(v0 + 3) = *(_DWORD *)(v142 + 4LL * (((v406 ^ 0x2BEAE26B) >> 16) ^ 0xECu)) ^ ((((v406 ^ 0x2BEAE26B) >> 16) ^ 0xC1) - 1702444605 - ((2 * (((v406 ^ 0x2BEAE26B) >> 16) ^ 0xC1) + 160207960) & 0x980872E)) ^ (181304767 * *(_DWORD *)&v147[4 * (v406 ^ 0x1E)] - 992461817);
  LODWORD(v8sub_100129678(v0 + 3) = (v83 - ((2 * v83) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(v406) ^ 8u));
  int v165 = *(_DWORD *)(v142 + 4LL * (v420 ^ 0xE6u)) ^ ((v420 ^ 0xCB)
                                                   - 1702444605
                                                   - ((2 * (v420 ^ 0xCB) + 160207960) & 0x980872E));
  LODWORD(v66) = *(_DWORD *)&v147[4 * (v392 ^ 0x55)];
  int v421 = v83 - ((2 * v83) & 0x9CB13CBC);
  int v166 = *(_DWORD *)(v145 + 4LL * (v409 ^ 0x9Bu));
  int v371 = BYTE2(v164);
  unsigned int v410 = (BYTE2(v164) ^ 0xA7) - 1702444604 + ((2 * (BYTE2(v164) ^ 0xA7) + 88) & 0x32E ^ 0xF67F7BFF);
  int v167 = (v165 - ((2 * v165) & 0x24A0FCC6) - 1840218525) ^ v166 ^ (181304767 * *(_DWORD *)&v147[4 * (v424 ^ 0xEE)]
                                                                 - 992461817);
  unsigned int v168 = *(_DWORD *)(v61 - 200);
  int v407 = v167 - 833053090 + (~(2 * v167) | 0x634EC343);
  int v169 = (181304767 * v66 - ((362609534 * v66 - 1984923634) & 0x9CB13CBC) - 1825514907) ^ ((BYTE2(v168) ^ 0xBA)
                                                                                         - 1702444605
                                                                                         - ((2 * (BYTE2(v168) ^ 0xBA)
                                                                                           + 160207960) & 0x980872E)) ^ *(_DWORD *)&v146[4 * (HIBYTE(v168) ^ 0x2F)] ^ *(_DWORD *)(v142 + 4LL * (BYTE2(v168) ^ 0x97u));
  int v393 = v169 - ((2 * v169) & 0x24A0FCC6);
  int v170 = BYTE2(*(_DWORD *)(v61 - 132));
  unsigned int v171 = *(_DWORD *)(v142 + 4LL * (v170 ^ 0xD1u)) ^ ((v170 ^ 0xFC)
                                                   - 1702444604
                                                   + ((2 * (v170 ^ 0xFC) + 88) & 0x32E ^ 0xF67F7BFF));
  unsigned int v172 = *(_DWORD *)(v61 - 208);
  LODWORD(v8sub_100129678(v0 + 3) = *(_DWORD *)(v142 + 4LL * (BYTE2(v172) ^ 0x56u)) ^ ((BYTE2(v172) ^ 0x7B)
                                                                  - 1702444605
                                                                  - ((2 * (BYTE2(v172) ^ 0x7B) + 160207960) & 0x980872E));
  int v173 = *(_DWORD *)&v147[4 * (*(_DWORD *)(v61 - 192) ^ 0xFB)];
  int v174 = (v171 - ((2 * v171) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (HIBYTE(v377) ^ 0xB9u)) ^ (181304767 * *(_DWORD *)&v147[4 * (v377 ^ 0x8E)] - 992461817);
  LODWORD(v7sub_100129678(v0 + 2) = (181304767 * v173 - ((362609534 * v173 + 162560014) & 0x24A0FCC6) + 1462286954) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 192)) ^ 0xEFu));
  HIDWORD(v376) = v174 - ((2 * v174) & 0x9CB13CBC);
  LODWORD(v369) = v72 - ((2 * v72) & 0x9CB13CBC);
  int v175 = (v83 - ((2 * v83) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * (HIBYTE(v172) ^ 0xD9)] ^ (181304767 * *(_DWORD *)&v147[4 * (v172 ^ 0x79)] - 992461817);
  LODWORD(v66) = *(_DWORD *)(v142 + 4LL * (v400 ^ 0x86u)) ^ ((v400 ^ 0xAB)
                                                           - 1702444605
                                                           - ((2 * (v400 ^ 0xAB) + 160207960) & 0x980872E));
  LODWORD(v66) = (v66 - ((2 * v66) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * v418];
  int v401 = v175 - ((2 * v175) & 0x24A0FCC6);
  int v411 = v414;
  int v425 = (v411 ^ 0x65) - 1702444605 - ((2 * (v411 ^ 0x65) + 160207960) & 0x980872E);
  unsigned int v176 = *(_DWORD *)(v142 + 4LL * (v373 ^ 0x8Bu)) ^ ((v373 ^ 0xA6)
                                                   - 1702444604
                                                   + ((2 * (v373 ^ 0xA6) + 88) & 0x32E ^ 0xF67F7BFF));
  int v177 = *(_DWORD *)(v61 - 216);
  unsigned int v178 = *(_DWORD *)(v142 + 4LL * (BYTE2(v137) ^ 0xE8u)) ^ ((BYTE2(v137) ^ 0xC5)
                                                          - 1702444604
                                                          + ((2 * (BYTE2(v137) ^ 0xC5) + 88) & 0x32E ^ 0xF67F7BFF));
  unsigned int v365 = BYTE1(v370) ^ 0x8E;
  LODWORD(v8sub_100129678(v0 + 3) = (181304767 * *(_DWORD *)&v147[4 * (v137 ^ 0xCA)] - 992461817) ^ *(_DWORD *)&v146[4 * (HIBYTE(v137) ^ 0x8E)] ^ (v178 - ((2 * v178) & 0x9CB13CBC) - 833053090);
  unsigned int v374 = v375 ^ 0x44039AAA;
  unsigned int v179 = (181304767 * *(_DWORD *)&v147[4 * (v375 ^ 0xDB)] - 992461817) ^ (((v375 ^ 0x44039AAAu) >> 16)
                                                                                         - 1702444604
                                                                                         + ((2
  unsigned int v364 = BYTE1(v137) ^ 0x16;
  HIDWORD(v369) = v83 - ((2 * v83) & 0x24A0FCC6);
  LODWORD(v8sub_100129678(v0 + 3) = (v179 - ((2 * v179) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(v375) ^ 0xC0u));
  unsigned int v180 = *(_DWORD *)&v146[4 * (v389 ^ 0x22)] ^ (181304767 * *(_DWORD *)&v147[4 * (v383 ^ 0xFE)] - 992461817) ^ (v176 - ((2 * v176) & 0x9CB13CBC) - 833053090);
  int v390 = v83 - ((2 * v83) & 0x9CB13CBC);
  unsigned int v384 = v180 - ((2 * v180) & 0x24A0FCC6);
  int v181 = *(_DWORD *)&v147[4 * (v449 ^ 0xEC)];
  LODWORD(v8sub_100129678(v0 + 3) = *(_DWORD *)(v142 + 4LL * (v476 ^ 0x32u)) ^ ((v476 ^ 0x1F)
                                                           - 1702444604
                                                           + ((2 * (v476 ^ 0x1F) + 88) & 0x32E ^ 0xF67F7BFF));
  int v182 = *(_DWORD *)&v147[4 * (*(_DWORD *)(v61 - 168) ^ 0xE6)];
  unsigned int v183 = *(_DWORD *)&v146[4 * (HIBYTE(v449) ^ 0xCA)] ^ ((BYTE2(v449) ^ 0x2F)
                                                      - 1702444604
                                                      + ((2 * (BYTE2(v449) ^ 0x2F) + 88) & 0x32E ^ 0xF67F7BFF)) ^ *(_DWORD *)(v142 + 4LL * (BYTE2(v449) ^ 2u)) ^ (181304767 * v181 - ((362609534 * v181 - 1984923634) & 0x9CB13CBC) - 1825514907);
  LODWORD(v8sub_100129678(v0 + 3) = (v83 - ((2 * v83) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (v497 ^ 0x8Cu)) ^ (181304767 * *(_DWORD *)&v147[4 * (v481 ^ 0xD9)] - 992461817);
  LODWORD(v65) = *(_DWORD *)(v61 - 168) ^ 0x49A657C7;
  unsigned int v184 = *(_DWORD *)&v146[4 * BYTE3(v65)] ^ ((BYTE2(v65) ^ 0x35)
                                           - 1702444604
                                           + ((2 * (BYTE2(v65) ^ 0x35) + 88) & 0x32E ^ 0xF67F7BFF)) ^ *(_DWORD *)(v142 + 4LL * (BYTE2(v65) ^ 0x18u)) ^ (181304767 * v182 - ((362609534 * v182 - 1984923634) & 0x9CB13CBC) - 1825514907);
  int v185 = *(_DWORD *)(v142 + 4LL * (((v470 ^ 0xA62C49A3) >> 16) ^ 0x2Du)) ^ (((v470 ^ 0xA62C49A3) >> 16)
                                                                                           - 1702444605
                                                                                           - ((2
  LODWORD(v498) = (v183 - ((2 * v183) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(v449) ^ 0x2Eu));
  int v482 = v83 - ((2 * v83) & 0x9CB13CBC);
  unsigned int v186 = (v185 - ((2 * v185) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * ((v470 ^ 0xA62C49A3) >> 24)] ^ (181304767 * *(_DWORD *)&v147[4 * (v470 ^ 0x33)] - 992461817);
  unsigned int v450 = BYTE1(v470) ^ 0xC9;
  unsigned int v477 = v184 - ((2 * v184) & 0x24A0FCC6);
  unsigned int v471 = v186 - ((2 * v186) & 0x24A0FCC6);
  LODWORD(v8sub_100129678(v0 + 3) = *(_DWORD *)(v142 + 4LL * (v462 ^ 0xC1u)) ^ ((v462 ^ 0xEC)
                                                           - 1702444605
                                                           - ((2 * (v462 ^ 0xEC) + 160207960) & 0x980872E));
  int v187 = (v83 - ((2 * v83) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145
                                                                   + 4LL * ((v460 - ((2 * v457) & 0x166) + 179) ^ 0x54)) ^ (181304767 * *(_DWORD *)&v147[4 * (v479 ^ 0xE2)] - 992461817);
  LODWORD(v8sub_100129678(v0 + 3) = *(_DWORD *)&v147[4 * (*(_DWORD *)(v61 - 140) ^ 0x7C)];
  LODWORD(v8sub_100129678(v0 + 3) = (181304767 * v83 - ((362609534 * v83 - 1984923634) & 0x9CB13CBC) - 1825514907) ^ *(_DWORD *)&v146[4 * (HIBYTE(v467) ^ 0xE5)];
  int v480 = v187 - ((2 * v187) & 0x9CB13CBC);
  LODWORD(v376) = v83 - ((2 * v83) & 0x24A0FCC6);
  unsigned int v463 = v119 ^ 0xEEA2BFA8;
  int v188 = *(_DWORD *)(v142 + 4LL * (BYTE2(v463) ^ 0x86u)) ^ ((BYTE2(v463) ^ 0xAB)
                                                          - 1702444605
                                                          - ((2 * (BYTE2(v463) ^ 0xAB) + 160207960) & 0x980872E));
  int v189 = (181304767 * *(_DWORD *)&v147[4 * (v119 ^ 0x68)] - 992461817) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(v119) ^ 0x55u)) ^ (v188 - ((2 * v188) & 0x24A0FCC6) - 1840218525);
  unsigned int v446 = *(_DWORD *)(v61 - 160) ^ 0x231B9DB5;
  int v461 = (BYTE2(v446) ^ 0xC1) - 1702444605 - ((2 * (BYTE2(v446) ^ 0xC1) + 160207960) & 0x980872E);
  LODWORD(v36sub_100129678(v0 + 2) = v189 - ((2 * v189) & 0x9CB13CBC);
  LODWORD(v65) = BYTE2(v467);
  int v458 = (BYTE2(v467) ^ 0x6B) - 1702444605 - ((2 * (BYTE2(v467) ^ 0x6B) + 160207960) & 0x980872E);
  int v190 = *(_DWORD *)(v61 - 184);
  unsigned int v191 = v503 ^ 0x779FFFF;
  LODWORD(v81) = *(_DWORD *)&v147[4 * (v499 ^ 0x74)];
  LODWORD(v117) = *(_DWORD *)&v147[4 * (~(_BYTE)v503 ^ 0x39)];
  int v192 = 181304767 * *(_DWORD *)&v147[4 * (v465 ^ 0x60)] - 992461817;
  int v504 = 181304767 * *(_DWORD *)&v147[4 * (v508 ^ 0xFB)] - 992461817;
  LODWORD(v378) = 181304767 * *(_DWORD *)&v147[4 * (v190 ^ 0xB8)] - 992461817;
  int v500 = 181304767 * *(_DWORD *)&v147[4 * (v139 ^ 0xAC)] - 992461817;
  int v466 = 181304767 * *(_DWORD *)&v147[4 * v368] - 992461817;
  int v468 = 181304767 * *(_DWORD *)&v147[4 * (v485 ^ 0xF0)] - 992461817;
  int v509 = 181304767 * *(_DWORD *)&v147[4 * (*(_DWORD *)(v61 - 128) ^ 0x57)] - 992461817;
  HIDWORD(v367) = 181304767 * *(_DWORD *)&v147[4 * (v487 ^ 0xC0)] - 992461817;
  LODWORD(v361) = 181304767 * *(_DWORD *)&v147[4 * (v177 ^ 0x78)] - 992461817;
  HIDWORD(v361) = v192;
  HIDWORD(v36sub_100129678(v0 + 2) = 181304767 * *(_DWORD *)&v147[4 * (*(_DWORD *)(v61 - 160) ^ 0x75)] - 992461817;
  LODWORD(v36sub_100129678(v0 + 3) = 181304767 * v117 - 992461817;
  int v193 = (181304767 * v81 - ((362609534 * v81 - 1984923634) & 0x9CB13CBC) - 1825514907) ^ *(_DWORD *)&v146[4 * (HIBYTE(v108) ^ 0x7B)];
  LODWORD(v8sub_100129678(v0 + 3) = *(_DWORD *)(v142 + 4LL * (BYTE2(v491) ^ 0x8Fu)) ^ ((BYTE2(v491) ^ 0xA2)
                                                                  - 1702444604
                                                                  + ((2 * (BYTE2(v491) ^ 0xA2) + 88) & 0x32E ^ 0xF67F7BFF)) ^ (181304767 * *(_DWORD *)&v147[4 * (v491 ^ 0x34)] - 992461817);
  LODWORD(v8sub_100129678(v0 + 3) = (v83 - ((2 * v83) & 0x24A0FCC6) - 1840218525) ^ *(_DWORD *)(v145 + 4LL * (BYTE1(v491) ^ 0x61u));
  unsigned int v194 = *(_DWORD *)(v142 + 4LL * (BYTE2(v191) ^ 0x3Cu)) ^ ((BYTE2(v191) ^ 0x11)
                                                          - 1702444604
                                                          + ((2 * (BYTE2(v191) ^ 0x11) + 88) & 0x32E ^ 0xF67F7BFF));
  LODWORD(v84) = (181304767 * *(_DWORD *)&v147[4 * (v506 ^ 0x2A)] - 992461817) ^ ((BYTE2(v506) ^ 0x37)
                                                                                                 - 1702444604
                                                                                                 + ((2 * (BYTE2(v506) ^ 0x37) + 88) & 0x32E ^ 0xF67F7BFF)) ^ *(_DWORD *)(v142 + 4LL * (BYTE2(v506) ^ 0x1Au));
  int v195 = v193 - ((2 * v193) & 0x24A0FCC6);
  int v196 = (v84 - ((2 * v84) & 0x9CB13CBC) - 833053090) ^ *(_DWORD *)&v146[4 * (HIBYTE(v506) ^ 0xF9)];
  HIDWORD(v360) = *(_DWORD *)(v142 + 4LL * (v442 ^ 0x61u));
  int v511 = *(_DWORD *)(v142 + 4LL * (v371 ^ 0x8Au));
  int v443 = *(_DWORD *)(v142 + 4LL * (v411 ^ 0x48u));
  LODWORD(v84) = v501 ^ 0x1A;
  LODWORD(v360) = *(_DWORD *)(v142 + 4LL * (BYTE2(v177) ^ 0xA2u));
  int v412 = *(_DWORD *)(v142 + 4LL * (BYTE2(v446) ^ 0xECu));
  LODWORD(v37sub_100129678(v0 + 2) = *(_DWORD *)(v142 + 4LL * (v65 ^ 0x46));
  LODWORD(v7sub_100129678(v0 + 2) = *(_DWORD *)(v61 - 256);
  *(_DWORD *)(v61 - 256) = *(_DWORD *)(v142 + 4LL * (v72 ^ 0x1A));
  LODWORD(v65) = ((v108 >> 15) & 0x58 ^ 0x48) + (v72 ^ 0x4C64A1B);
  HIDWORD(v359) = *(_DWORD *)(v145 + 4LL * (v130 ^ 0xB0u));
  int v445 = *(_DWORD *)(v145 + 4LL * v365);
  *(_DWORD *)(v61 - 184) = *(_DWORD *)(v145 + 4LL * (BYTE1(v190) ^ 0x85u));
  HIDWORD(v366) = v65 - ((2 * v65) & 0x980872E) - 1782548585;
  int v502 = *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 176)) ^ 0xBDu));
  *(_DWORD *)(v61 - 176) = *(_DWORD *)(v145 + 4LL * (BYTE1(v139) ^ 0xB4u));
  LODWORD(v366) = *(_DWORD *)(v145 + 4LL * v84);
  LODWORD(v359) = *(_DWORD *)(v145 + 4LL * (HIBYTE(v387) ^ 0x14u));
  int v510 = *(_DWORD *)(v145 + 4LL * v379);
  *(_DWORD *)(v61 - 200) = *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 200)) ^ 0xD6u));
  int v426 = *(_DWORD *)(v145 + 4LL * (v404 ^ 0xEEu));
  int v388 = *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 208)) ^ 0xD7u));
  unsigned int v197 = *(_DWORD *)(v61 - 216);
  LODWORD(v367) = *(_DWORD *)(v145 + 4LL * (BYTE1(v197) ^ 0x76u));
  int v198 = *(_DWORD *)(v145 + 4LL * v364);
  HIDWORD(v358) = *(_DWORD *)(v145 + 4LL * (v489 ^ 0xBEu));
  *(_DWORD *)(v61 - 168) = *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 168)) ^ 0xB9u));
  *(_DWORD *)(v61 - 208) = *(_DWORD *)(v145 + 4LL * v450);
  int v199 = v83 - ((2 * v83) & 0x9CB13CBC);
  int v451 = *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 160)) ^ 0x77u));
  HIDWORD(v36sub_100129678(v0 + 3) = *(_DWORD *)(v145 + 4LL * (BYTE1(*(_DWORD *)(v61 - 140)) ^ 0x64u));
  *(_DWORD *)(v61 - 160) = *(_DWORD *)(v145 + 4LL * (*(_DWORD *)(v61 - 248) ^ 0x84u));
  *(_DWORD *)(v61 - 248) = *(_DWORD *)(v145 + 4LL * (BYTE1(v506) ^ 0x2Eu));
  LODWORD(v8sub_100129678(v0 + 3) = *(_DWORD *)(v145 + 4LL * (v513 ^ 0xC8u));
  LODWORD(v358) = *(_DWORD *)&v146[4 * v474];
  unsigned int v475 = v455 - 1840218525;
  unsigned int v456 = v452 - 1840218525;
  *(_DWORD *)(v61 - 2swift_unknownObjectWeakDestroy(v0 + 16) = *(_DWORD *)&v146[4 * (*(_DWORD *)(v61 - 232) ^ 7)];
  int v512 = v437 - 1840218525;
  HIDWORD(v378) = v434 - 1840218525;
  unsigned int v507 = v431 - 1840218525;
  int v453 = *(_DWORD *)&v146[4 * (HIBYTE(*(_DWORD *)(v61 - 136)) ^ 0x5A)];
  LODWORD(v357) = v416 - 1840218525;
  HIDWORD(v356) = v396 - 1840218525;
  HIDWORD(v357) = *(_DWORD *)&v146[4 * v429];
  int v397 = *(_DWORD *)&v146[4 * (HIBYTE(*(_DWORD *)(v61 - 128)) ^ 0xB8)];
  *(_DWORD *)(v61 - 23sub_100129678(v0 + 2) = *(_DWORD *)&v146[4 * HIBYTE(v380)];
  int v394 = v393 - 1840218525;
  int v438 = v66 - ((2 * v66) & 0x24A0FCC6) - 1840218525;
  int v430 = v401 - 1840218525;
  int v200 = HIDWORD(v369) - 1840218525;
  LODWORD(v356) = v384 - 1840218525;
  unsigned int v417 = v477 - 1840218525;
  unsigned int v405 = v471 - 1840218525;
  int v385 = v376 - 1840218525;
  int v432 = v195 - 1840218525;
  int v435 = v196 - ((2 * v196) & 0x24A0FCC6) - 1840218525;
  *(_DWORD *)(v61 - 224) = *(_DWORD *)&v146[4 * (*(_DWORD *)(v61 - 224) ^ 0x4B)];
  int v381 = *(_DWORD *)&v146[4 * (HIBYTE(*(_DWORD *)(v61 - 132)) ^ 0x3D)];
  LODWORD(v376) = *(_DWORD *)&v146[4 * (HIBYTE(*(_DWORD *)(v61 - 192)) ^ 0xE8)];
  int v201 = *(_DWORD *)&v146[4 * (HIBYTE(v197) ^ 0xA6)];
  int v202 = *(_DWORD *)&v146[4 * HIBYTE(v374)];
  int v402 = *(_DWORD *)&v146[4 * (*(_DWORD *)(v61 - 240) ^ 0xAA)];
  int v203 = *(_DWORD *)&v146[4 * HIBYTE(v446)];
  int v447 = *(_DWORD *)&v146[4 * (v514 ^ 0x38)];
  *(_DWORD *)(v61 - 19sub_100129678(v0 + 2) = *(_DWORD *)&v146[4 * HIBYTE(v463)];
  HIDWORD(v37sub_100129678(v0 + 2) = *(_DWORD *)&v146[4 * (HIBYTE(v491) ^ 0xCF)];
  HIDWORD(v369) = *(_DWORD *)&v146[4 * HIBYTE(v191)];
  int v204 = v484 - 833053090;
  int v515 = v441 - 833053090;
  *(_DWORD *)(v61 - 240) = v421 - 833053090;
  int v205 = v482 - 833053090;
  int v206 = v480 - 833053090;
  int v207 = v199 - 833053090;
  int v208 = (v83 ^ (v194 - ((2 * v194) & 0x24A0FCC6) - 1840218525))
       - ((2 * (v83 ^ (v194 - ((2 * v194) & 0x24A0FCC6) - 1840218525))) & 0x9CB13CBC)
       - 833053090;
  int v209 = HIDWORD(v498) ^ v498 ^ 0x6285F181;
  LODWORD(v86) = v200 ^ v198 ^ v209;
  LODWORD(v117) = *(_DWORD *)(v61 - 152);
  v210 = (char *)*(&off_10027AEF0 + (int)v117 - 72) - 8;
  v211 = (char *)*(&off_10027AEF0 + (int)(v117 ^ 0xF4)) - 8;
  uint64_t v212 = (uint64_t)*(&off_10027AEF0 + (int)v117 - 119);
  uint64_t v213 = (uint64_t)*(&off_10027AEF0 + (int)v117 - 89);
  unsigned int v214 = (*(unsigned __int8 *)(v213 + (*(unsigned __int8 *)(v61 - 109) ^ 0x41LL)) ^ 0x2B) & 0xFF00FFFF | (((v210[*(unsigned __int8 *)(v61 - 111) ^ 0x40LL] + 103) ^ 0x5A) << 16) | ((*(unsigned __int8 *)(v212 + (*(unsigned __int8 *)(v61 - 110) ^ 0xBBLL)) ^ 0x43) << 8) | ((v211[*(unsigned __int8 *)(v61 - 112) ^ 0x1ELL] ^ (*(unsigned __int8 *)(v61 - 112) - ((2 * *(unsigned __int8 *)(v61 - 112)) & 0xC4) + 98) ^ 0x84) << 24);
  uint64_t v488 = v212;
  v490 = v211;
  uint64_t v486 = v213;
  unsigned int v215 = (*(unsigned __int8 *)(v213 + (*(unsigned __int8 *)(v61 - 105) ^ 0xE4LL)) ^ 0x1D) & 0xFF00FFFF | ((v211[*(unsigned __int8 *)(v61 - 108) ^ 0x3ELL] ^ (*(unsigned __int8 *)(v61 - 108) - ((2 * *(unsigned __int8 *)(v61 - 108)) & 0xC4) + 98) ^ 0xFFFFFFE1) << 24) | (((v210[*(unsigned __int8 *)(v61 - 107) ^ 0x27LL] + 103) ^ 0x96) << 16) | ((*(unsigned __int8 *)(v212 + (*(unsigned __int8 *)(v61 - 106) ^ 9LL)) ^ 0x46) << 8);
  v492 = v210;
  unsigned int v216 = (*(unsigned __int8 *)(v213 + (*(unsigned __int8 *)(v61 - 101) ^ 0xF2LL)) ^ 0xA4) & 0xFF00FFFF | ((v211[*(unsigned __int8 *)(v61 - 104) ^ 0xD3LL] ^ (*(unsigned __int8 *)(v61 - 104) - ((2 * *(unsigned __int8 *)(v61 - 104)) & 0xC4) + 98) ^ 0xE0) << 24) | ((*(unsigned __int8 *)(v212 + (*(unsigned __int8 *)(v61 - 102) ^ 0xBELL)) ^ 0xE1) << 8) & 0xFF00FFFF | (((v210[*(unsigned __int8 *)(v61 - 103) ^ 0xE9LL] + 103) ^ 0x8A) << 16);
  int v217 = v86 ^ 0x2497E332;
  if ((v86 & 0x80) != 0) {
    int v218 = -128;
  }
  else {
    int v218 = 128;
  }
  *(_DWORD *)(v61 - 128) = (*(unsigned __int8 *)(v213 + (*(unsigned __int8 *)(v61 - 97) ^ 0x74LL)) ^ 0x8C | (((v210[*(unsigned __int8 *)(v61 - 99) ^ 0xF3LL] + 103) ^ 2) << 16) | ((*(unsigned __int8 *)(v212 + (*(unsigned __int8 *)(v61 - 98) ^ 0x20LL)) ^ 0xA9) << 8) | ((v211[*(unsigned __int8 *)(v61 - 100) ^ 0xF3LL] ^ (*(unsigned __int8 *)(v61 - 100) - ((2 * *(unsigned __int8 *)(v61 - 100)) & 0xC4) + 98) ^ 0x85) << 24)) ^ 0x2A25BCAA;
  *(_DWORD *)(v61 - 13sub_100129678(v0 + 2) = v214 ^ 0xE8D83CFD;
  *(_DWORD *)(v61 - 140) = v215 ^ 0xCFFC024C;
  *(_DWORD *)(v61 - 136) = v216 ^ 0xC0073BBE;
  HIDWORD(v48sub_100129678(v0 + 3) = v356 ^ HIDWORD(v358);
  LODWORD(v48sub_100129678(v0 + 3) = v201 ^ ((BYTE2(v177) ^ 0x8F) - 1702444605 - ((2 * (BYTE2(v177) ^ 0x8F) + 160207960) & 0x980872E)) ^ v367 ^ v360 ^ v361;
  HIDWORD(v478) = (v390 - 833053090) ^ v202;
  LODWORD(v478) = HIDWORD(v361) ^ HIDWORD(v359) ^ v475;
  HIDWORD(v47sub_100129678(v0 + 3) = v456 ^ v445;
  LODWORD(v47sub_100129678(v0 + 3) = v358 ^ v472 ^ HIDWORD(v360) ^ v204;
  HIDWORD(v469) = HIDWORD(v356) ^ v359;
  LODWORD(v469) = v357 ^ v366 ^ v468;
  HIDWORD(v464) = (v422 - 833053090) ^ v453 ^ v466;
  LODWORD(v464) = (v399 - 833053090) ^ HIDWORD(v357);
  HIDWORD(v459) = v451 ^ v461 ^ v203 ^ v412 ^ HIDWORD(v362);
  LODWORD(v459) = HIDWORD(v363) ^ v458 ^ v372 ^ v385;
  HIDWORD(v454) = (v362 - 833053090) ^ *(_DWORD *)(v61 - 192);
  LODWORD(v454) = v206 ^ v447;
  HIDWORD(v448) = v430 ^ v388;
  LODWORD(v448) = v376 ^ v425 ^ v443 ^ (v369 - 833053090);
  HIDWORD(v444) = (HIDWORD(v376) - 833053090) ^ v381;
  LODWORD(v444) = HIDWORD(v367) ^ v426 ^ v438;
  HIDWORD(v439) = v363 ^ HIDWORD(v369) ^ v208;
  LODWORD(v439) = v435 ^ *(_DWORD *)(v61 - 248);
  HIDWORD(v43sub_100129678(v0 + 3) = v207 ^ HIDWORD(v372);
  LODWORD(v43sub_100129678(v0 + 3) = *(_DWORD *)(v61 - 160) ^ HIDWORD(v366) ^ *(_DWORD *)(v61 - 256) ^ v432;
  HIDWORD(v427) = v205 ^ v402;
  LODWORD(v427) = *(_DWORD *)(v61 - 168) ^ v417;
  HIDWORD(v42sub_100129678(v0 + 3) = v405 ^ *(_DWORD *)(v61 - 208);
  LODWORD(v42sub_100129678(v0 + 3) = HIDWORD(v378) ^ v502;
  HIDWORD(v419) = v512 ^ *(_DWORD *)(v61 - 184) ^ v378;
  LODWORD(v419) = v500 ^ *(_DWORD *)(v61 - 176) ^ v507;
  HIDWORD(v41sub_100129678(v0 + 3) = v504 ^ *(_DWORD *)(v61 - 216) ^ v515;
  LODWORD(v41sub_100129678(v0 + 3) = v394 ^ *(_DWORD *)(v61 - 200);
  HIDWORD(v408) = v510 ^ v410 ^ v397 ^ v511 ^ v509;
  LODWORD(v408) = (v407 + 1) ^ *(_DWORD *)(v61 - 224);
  HIDWORD(v40sub_100129678(v0 + 3) = *(_DWORD *)(v61 - 240) ^ *(_DWORD *)(v61 - 232);
  LODWORD(v40sub_100129678(v0 + 3) = (v218 + v217) ^ v209;
  int v219 = *(_DWORD *)(v61 - 120);
  uint64_t v382 = 76 * (v219 ^ 0x3F7u);
  HIDWORD(v398) = v382 ^ 0xFFFFFA5A;
  LODWORD(v398) = v219 ^ 0x386;
  HIDWORD(v391) = v219 ^ 0x3E3;
  LODWORD(v391) = v219 ^ 0x33F;
  HIDWORD(v386) = v219 ^ 0x3CF;
  LODWORD(v386) = v219 ^ 0x3F3;
  *(void *)(v61 - 176) = 13LL;
  unsigned __int8 v220 = v210[a55[13] ^ 0xF3LL] + 103;
  uint64_t v221 = (v382 ^ 0xFFFFFA5A) & 0xDB695B74 ^ 0xDB695B75;
  *(void *)(v61 - 15sub_100129678(v0 + 2) = v221;
  int v222 = (v220 ^ 2) << 16;
  uint64_t v223 = a55[v221] ^ 0x57LL;
  *(void *)(v61 - 160) = 10LL;
  uint64_t v224 = a55[10] ^ 0xB6LL;
  int v225 = ((v210[v223] + 103) ^ 0xF6) << 16;
  *(void *)(v61 - 19sub_100129678(v0 + 2) = 4LL;
  int v226 = (*(unsigned __int8 *)(v488 + v224) ^ 0xCC) << 8;
  uint64_t v227 = a55[4];
  LODWORD(v224) = v211[v227 ^ 0x9A];
  *(void *)(v61 - 224) = 7LL;
  uint64_t v228 = a55[7] ^ 0xD6LL;
  *(void *)(v61 - 2swift_unknownObjectWeakDestroy(v0 + 16) = 2LL;
  LODWORD(v227) = *(unsigned __int8 *)(v486 + v228) ^ 0x4E | ((v224 ^ ((_DWORD)v227
                                                                                   - ((2 * (_DWORD)v227) & 0xC4)
                                                                                   + 98) ^ 0xFFFFFFCF) << 24);
  LODWORD(v228) = *(unsigned __int8 *)(v488 + a55[2]) ^ 0xDE;
  *(void *)(v61 - 184) = 3LL;
  int v229 = *(unsigned __int8 *)(v486 + (a55[3] ^ 0x74LL));
  *(void *)(v61 - 168) = 12LL;
  int v230 = v225 | ((_DWORD)v228 << 8) | v229 ^ 0x8C;
  int v231 = v211[a55[12] ^ 0x6ELL] ^ (a55[12] - ((2 * a55[12]) & 0xC4) + 98) ^ 0x51;
  *(void *)(v61 - 208) = 0LL;
  int v232 = v222 | (v231 << 24);
  uint64_t v233 = *a55;
  LODWORD(v228) = v211[v233 ^ 0x15];
  *(void *)(v61 - 256) = 8LL;
  unsigned int v234 = v230 | ((v228 ^ ((_DWORD)v233 - ((2 * (_DWORD)v233) & 0xC4) + 98) ^ 0xAE) << 24);
  LODWORD(v228) = v211[a55[8] ^ 0x46LL] ^ (a55[8] - ((2 * a55[8]) & 0xC4) + 98) ^ 0xFFFFFFE7;
  *(void *)(v61 - 200) = 14LL;
  int v235 = v226 | ((_DWORD)v228 << 24);
  int v236 = v232 | ((*(unsigned __int8 *)(v488 + (a55[14] ^ 0xD5LL)) ^ 0x56) << 8);
  LOBYTE(v228) = v492[a55[5] ^ 0x9DLL];
  *(void *)(v61 - 248) = 11LL;
  *(void *)(v61 - 240) = 5LL;
  uint64_t v237 = a55[6] ^ 0xA4LL;
  unsigned int v238 = (*(unsigned __int8 *)(v486 + (a55[11] ^ 0xC2LL)) ^ 0xA9 | v235) & 0xFF00FFFF | (((v492[a55[9] ^ 0x3ELL] + 103) ^ 0xDF) << 16);
  *(void *)(v61 - 23sub_100129678(v0 + 2) = 15LL;
  int v239 = *(unsigned __int8 *)(v488 + v237);
  LODWORD(v237) = *(unsigned __int8 *)(v486 + (a55[15] ^ 0x47LL)) ^ 0x8C | v236;
  int v505 = v227 & 0xFF00FFFF | (((v228 + 103) ^ 0xF7) << 16) | ((v239 ^ 6) << 8);
  LODWORD(v227) = *(_DWORD *)(v61 - 120);
  uint64_t v240 = (uint64_t)*(&off_10027AEF0 + (int)v227 - 943);
  unsigned int v241 = *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v505 ^ v494) >> 8) ^ 0x21u)) ^ ((((unsigned __int16)(v505 ^ v494) >> 8) ^ 0x4C) - 1892627349 - ((2 * (((v505 ^ v494) >> 8) ^ 0xB71C4C)) & 0xD6));
  int v242 = v241 - 1992286388 - ((2 * v241) & 0x12803E98);
  v243 = (char *)*(&off_10027AEF0 + (int)v398) - 8;
  unsigned int v244 = v234 ^ HIDWORD(v494) ^ 0x730032AA;
  int v245 = v242 ^ *(_DWORD *)&v243[4 * ((v234 ^ BYTE4(v494)) ^ 0xAA)];
  unsigned int v246 = *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v493 ^ v237) >> 8) ^ 0xDDu)) ^ ((((unsigned __int16)(v493 ^ v237) >> 8) ^ 0xB0) - 1892627349 - ((2 * (((v493 ^ v237) >> 8) ^ 0xAA68B0)) & 0xD6));
  v247 = (char *)*(&off_10027AEF0 + (int)v227 - 905) - 8;
  int v248 = *(_DWORD *)&v247[4 * (((v238 ^ HIDWORD(v493)) >> 16) ^ 0x68)];
  HIDWORD(v250) = v248 ^ 0x518;
  LODWORD(v250) = v248 ^ 0x50165000;
  int v249 = v250 >> 12;
  int v251 = *(_DWORD *)&v247[4 * ((v234 ^ HIDWORD(v494)) >> 16)];
  HIDWORD(v250) = v251 ^ 0x518;
  LODWORD(v250) = v251 ^ 0x50165000;
  int v252 = v250 >> 12;
  int v253 = v245 - 1262737048 - ((2 * v245) & 0x697852D0);
  v254 = (char *)*(&off_10027AEF0 + (int)v227 - 870) - 8;
  int v255 = *(_DWORD *)&v247[4 * (((v493 ^ v237) >> 16) ^ 0x68)];
  HIDWORD(v250) = v255 ^ 0x518;
  LODWORD(v250) = v255 ^ 0x50165000;
  int v256 = (v246 - 1262737048 - ((2 * v246) & 0x697852D0)) ^ *(_DWORD *)&v254[4
                                                                          * (((v505 ^ v494) >> 24) ^ 0xB7)] ^ v252;
  LODWORD(v227) = *(_DWORD *)&v243[4 * ((v505 ^ v494) ^ 0xFB)] ^ ((unsigned __int16)(v238 ^ WORD2(v493)) >> 8) ^ *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v238 ^ WORD2(v493)) >> 8) ^ 0x23u)) ^ 0x670D369 ^ (v250 >> 12);
  int v257 = *(_DWORD *)&v247[4 * (((v505 ^ v494) >> 16) ^ 0x1C)];
  HIDWORD(v250) = v257 ^ 0x518;
  LODWORD(v250) = v257 ^ 0x50165000;
  int v258 = *(_DWORD *)&v254[4 * (((v238 ^ HIDWORD(v493)) >> 24) ^ 0xF6)] ^ (BYTE1(v244) - 1892627349 - ((v244 >> 7) & 0xD6)) ^ ((v250 >> 12) - 1262737048 - ((2 * (v250 >> 12)) & 0x697852D0)) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v244) ^ 0x6Du));
  LODWORD(v23sub_100129678(v0 + 3) = v256 - 1992286388 - ((2 * v256) & 0x12803E98);
  int v259 = v356 ^ HIDWORD(v358) ^ *(_DWORD *)&v254[4 * (((v493 ^ v237) >> 24) ^ 0xAA)] ^ v249 ^ v253;
  unsigned int v260 = v483 ^ *(_DWORD *)&v243[4 * ((v493 ^ v237) ^ 0xAD)] ^ (v258
                                                                               - 1992286388
                                                                               - ((2 * v258) & 0x12803E98));
  unsigned int v261 = HIDWORD(v478) ^ *(_DWORD *)&v243[4 * ((v238 ^ BYTE4(v493)) ^ 0x5F)] ^ v233;
  unsigned int v262 = v403 ^ *(_DWORD *)&v254[4 * HIBYTE(v244)] ^ (v227 - 1262737048 - ((2 * v227) & 0x697852D0));
  LODWORD(v228) = *(_DWORD *)&v247[4 * ((v259 ^ 0xF9388C2F) >> 16)];
  HIDWORD(v250) = v228 ^ 0x518;
  LODWORD(v250) = v228 ^ 0x50165000;
  int v263 = v250 >> 12;
  LODWORD(v228) = *(_DWORD *)&v247[4 * (BYTE2(v260) ^ 0x70)];
  HIDWORD(v250) = v228 ^ 0x518;
  LODWORD(v250) = v228 ^ 0x50165000;
  LODWORD(v228) = v250 >> 12;
  int v264 = *(_DWORD *)&v247[4 * (BYTE2(v261) ^ 0x66)];
  HIDWORD(v250) = v264 ^ 0x518;
  LODWORD(v250) = v264 ^ 0x50165000;
  LODWORD(v227) = (v250 >> 12) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v262) ^ 5u)) ^ ((BYTE1(v262) ^ 0x68)
                                                                               - 1892627349
                                                                               - 2
                                                                               * (((v262 >> 8) ^ 0x42BD68) & 0x7B ^ (v262 >> 8) & 0x10));
  LODWORD(v23sub_100129678(v0 + 3) = (v263 - 1992286388 - ((2 * v263) & 0x12803E98)) ^ *(_DWORD *)&v243[4
                                                                                   * ((BYTE4(v478) ^ v243[4 * ((v238 ^ BYTE4(v493)) ^ 0x5F)] ^ v233) ^ 0xB6)];
  LODWORD(v227) = (v227 - 1992286388 - ((2 * v227) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v259 ^ 0x61)];
  LODWORD(v237) = (((unsigned __int16)(v259 ^ 0x8C2F) >> 8)
                 - 1892627348
                 + (~((v259 ^ 0xF9388C2F) >> 7) | 0xFFFFFF29)) ^ 0xD678EAEF ^ *(_DWORD *)(v240
                                                                                        + 4LL
                                                                                        * (((unsigned __int16)(v259 ^ 0x8C2F) >> 8) ^ 0x6Du));
  int v265 = *(_DWORD *)&v254[4 * (HIBYTE(v261) ^ 0x43)] ^ 0x16A672D6;
  LODWORD(v237) = v237 + v265 - 2 * (v237 & v265);
  int v266 = *(_DWORD *)&v247[4 * (BYTE2(v262) ^ 0xBD)];
  HIDWORD(v250) = v266 ^ 0x518;
  LODWORD(v250) = v266 ^ 0x50165000;
  int v267 = *(_DWORD *)&v254[4 * ((v259 ^ 0xF9388C2F) >> 24)] ^ (v228 - 1262737048 - ((2 * v228) & 0x697852D0));
  int v268 = (v267 - 1992286388 - ((2 * v267) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v262 ^ 0xAB)];
  unsigned int v269 = *(_DWORD *)&v254[4 * (HIBYTE(v262) ^ 0x42)] ^ HIDWORD(v498) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v260) ^ 0x16u)) ^ ((BYTE1(v260) ^ 0x7B) - 1892627349 - 2 * (((v260 >> 8) ^ 0x89707B) & 0x6F ^ (v260 >> 8) & 4)) ^ (v233 - 1262737048 - ((2 * v233) & 0x697852D0));
  LOBYTE(v244) = BYTE1(v261) ^ 0x54;
  unsigned int v270 = v478 ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v261) ^ 0x39u)) ^ (v268 - 1892627349 - ((2 * v268) & 0x1E6198D6));
  unsigned int v271 = v473 ^ *(_DWORD *)&v243[4 * (v260 ^ 0x55)] ^ ((v237 ^ (v250 >> 12))
                                                                      - 1992286388
                                                                      - ((2 * (v237 ^ (v250 >> 12))) & 0x12803E98));
  int v272 = *(_DWORD *)&v247[4 * (BYTE2(v271) ^ 0x79)];
  int v273 = HIDWORD(v473) ^ *(_DWORD *)&v254[4 * (HIBYTE(v260) ^ 0x89)] ^ (v227 - 1262737048 - ((2 * v227) & 0x697852D0));
  HIDWORD(v250) = v272 ^ 0x518;
  LODWORD(v250) = v272 ^ 0x50165000;
  BYTE1(v260) = ((unsigned __int16)(WORD2(v473) ^ *(_WORD *)&v254[4 * (HIBYTE(v260) ^ 0x89)] ^ (v227
                                                                                              + 10600
                                                                                              - ((2 * v227) & 0x52D0))) >> 8) ^ 0x68;
  LODWORD(v228) = ((v250 >> 12) - 1262737048 - ((2 * (v250 >> 12)) & 0x697852D0)) ^ *(_DWORD *)&v254[4 * ((v273 ^ 0x2261685Eu) >> 24)];
  LODWORD(v227) = ((BYTE1(v271) ^ 0xD0) - 1892627349 - 2 * (((v271 >> 8) ^ 0x679D0) & 0x6F ^ (v271 >> 8) & 4)) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v271) ^ 0xBDu));
  LODWORD(v227) = (v227 - 1992286388 - ((2 * v227) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v269 ^ 0x76)];
  LODWORD(v237) = ((BYTE1(v270) ^ 0xEC) - 1892627349 - ((2 * ((v270 >> 8) ^ 0xE5FEC)) & 0xD6)) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v270) ^ 0x81u));
  int v274 = *(_DWORD *)&v247[4 * (BYTE2(v270) ^ 0x5F)];
  HIDWORD(v250) = v274 ^ 0x518;
  LODWORD(v250) = v274 ^ 0x50165000;
  int v275 = v250 >> 12;
  HIDWORD(v250) = *(_DWORD *)&v243[4 * (v273 ^ 0x5E)] ^ 0x605738C4;
  LODWORD(v250) = HIDWORD(v250);
  LODWORD(v237) = (v250 >> 28) ^ __ROR4__( *(_DWORD *)&v254[4 * (HIBYTE(v271) ^ 6)] ^ 0x7462B151 ^ (v237 - 1262737048 - ((2 * v237) & 0x697852D0)),  28);
  int v276 = (v275 - 1262737048 - ((2 * v275) & 0x697852D0)) ^ *(_DWORD *)&v254[4 * (HIBYTE(v269) ^ 0xD2)];
  int v277 = (v276 - 1992286388 - ((2 * v276) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v271 ^ 0x4C)];
  LODWORD(v23sub_100129678(v0 + 3) = *(_DWORD *)&v247[4 * (BYTE2(v273) ^ 0x1B)];
  HIDWORD(v250) = v233 ^ 0x518;
  LODWORD(v250) = v233 ^ 0x50165000;
  LODWORD(v23sub_100129678(v0 + 3) = v250 >> 12;
  int v278 = v228 - 1992286388 - ((2 * v228) & 0x12803E98);
  int v279 = BYTE1(v269) ^ 0xC0;
  int v280 = v279 - 1892627349 - 2 * (((v269 >> 8) ^ 0xD2CCC0) & 0x6F ^ (v269 >> 8) & 4);
  int v281 = *(_DWORD *)&v247[4 * (BYTE2(v269) ^ 0xCC)];
  HIDWORD(v250) = v281 ^ 0x518;
  LODWORD(v250) = v281 ^ 0x50165000;
  int v282 = HIDWORD(v356) ^ v359 ^ (v250 >> 12) ^ __ROR4__(v237 ^ 0x78071371, 4);
  LODWORD(v228) = v469 ^ *(_DWORD *)&v254[4 * (HIBYTE(v270) ^ 0xE)] ^ v233 ^ (v227
                                                                            - 1262737048
                                                                            - ((2 * v227) & 0x697852D0));
  LODWORD(v227) = BYTE1(v260);
  unsigned int v283 = HIDWORD(v464) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v260) ^ 0x6Du)) ^ (v277 - 1892627349 - ((2 * v277) & 0x1E6198D6));
  unsigned int v284 = v464 ^ v280 ^ *(_DWORD *)&v243[4 * ((v270 ^ v244) ^ 0xCA)] ^ *(_DWORD *)(v240
                                                                                                 + 4LL * (v279 ^ 0x6Du)) ^ v278;
  LODWORD(v227) = v227 ^ 0x4552953C ^ v283;
  int v285 = *(_DWORD *)&v247[4 * BYTE2(v227)];
  HIDWORD(v250) = v285 ^ 0x518;
  LODWORD(v250) = v285 ^ 0x50165000;
  int v286 = v250 >> 12;
  int v287 = *(_DWORD *)&v247[4 * ((v282 ^ 0x99FEE750) >> 16)];
  HIDWORD(v250) = v287 ^ 0x518;
  LODWORD(v250) = v287 ^ 0x50165000;
  int v288 = BYTE1(v228) ^ 0x29;
  LODWORD(v23sub_100129678(v0 + 3) = v288 - 1892627349 - ((2 * ((v228 >> 8) ^ 0xA73B29)) & 0xD6);
  LODWORD(v221) = (BYTE1(v227) - 1892627349 - ((v227 >> 7) & 0xD6)) ^ *(_DWORD *)&v243[4 * (v228 ^ 0x72)] ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v227) ^ 0x6Du)) ^ ((v250 >> 12) - 1992286388 - ((2 * (v250 >> 12)) & 0x12803E98));
  int v289 = *(_DWORD *)&v247[4 * (BYTE2(v284) ^ 2)];
  HIDWORD(v250) = v289 ^ 0x518;
  LODWORD(v250) = v289 ^ 0x50165000;
  int v290 = *(_DWORD *)&v254[4 * (BYTE3(v228) ^ 0xA7)] ^ (v250 >> 12);
  LODWORD(v228) = *(_DWORD *)&v247[4 * (BYTE2(v228) ^ 0x3B)];
  HIDWORD(v250) = v228 ^ 0x518;
  LODWORD(v250) = v228 ^ 0x50165000;
  LODWORD(v227) = *(_DWORD *)&v243[4 * v227] ^ v290 ^ 0x3DFC3624;
  LODWORD(v237) = HIDWORD(v459) ^ ((BYTE1(v284) ^ 0xD9) - 1892627349 - ((2 * ((v284 >> 8) ^ 0x9802D9)) & 0xD6)) ^ *(_DWORD *)&v243[4 * (v282 ^ 0x1E)] ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v284) ^ 0xB4u)) ^ (v250 >> 12) ^ *(_DWORD *)&v254[4 * (HIBYTE(v283) ^ 0x61)];
  unsigned int v291 = v459 ^ *(_DWORD *)&v254[4 * (HIBYTE(v284) ^ 0x98)] ^ (v221 - 1262737048 - ((2 * v221) & 0x697852D0));
  unsigned int v292 = HIDWORD(v454) ^ *(_DWORD *)&v243[4 * (v284 ^ 0x3D)] ^ v233 ^ *(_DWORD *)&v254[4 * ((v282 ^ 0x99FEE750) >> 24)] ^ *(_DWORD *)(v240 + 4LL * (v288 ^ 0x6Du)) ^ v286;
  unsigned int v293 = v454 ^ *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v282 ^ 0xE750) >> 8) ^ 0x6Du)) ^ (v227 - 1892627349 - ((2 * v227) & 0x1E6198D6));
  LODWORD(v221) = *(_DWORD *)&v247[4 * (BYTE2(v237) ^ 0x12)];
  HIDWORD(v250) = v221 ^ 0x518;
  LODWORD(v250) = v221 ^ 0x50165000;
  LODWORD(v221) = v250 >> 12;
  LODWORD(v227) = *(_DWORD *)&v247[4 * (BYTE2(v292) ^ 0x14)];
  HIDWORD(v250) = v227 ^ 0x518;
  LODWORD(v250) = v227 ^ 0x50165000;
  int v294 = BYTE1(v292) ^ 0xC9;
  LODWORD(v228) = v294 - 1892627348 + ~(2 * (((v292 >> 8) ^ 0xE814C9) & 0x7B ^ (v292 >> 8) & 0x10));
  unsigned int v295 = v237 ^ 0xF7684EB9;
  LODWORD(v227) = *(_DWORD *)&v243[4 * ((v293 ^ ((unsigned __int16)(v282 ^ 0xE750) >> 8)) ^ 0x41)] ^ (((unsigned __int16)(v237 ^ 0x4EB9) >> 8) - 1892627349 - (((v237 ^ 0xF7684EB9) >> 7) & 0xD6)) ^ *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v237 ^ 0x4EB9) >> 8) ^ 0x6Du)) ^ ((v250 >> 12) - 1992286388 - ((2 * (v250 >> 12)) & 0x12803E98));
  LODWORD(v237) = *(_DWORD *)&v247[4 * (BYTE2(v293) ^ 0x81)];
  HIDWORD(v250) = v237 ^ 0x518;
  LODWORD(v250) = v237 ^ 0x50165000;
  LODWORD(v237) = ((v250 >> 12) - 1262737048 - ((2 * (v250 >> 12)) & 0x697852D0)) ^ *(_DWORD *)&v254[4 * HIBYTE(v295)];
  LODWORD(v237) = (v237 - 1992286388 - ((2 * v237) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v292 ^ 0x21)];
  LODWORD(v221) = ((BYTE1(v293) ^ 0xA0) - 1892627349 - 2 * (((v293 >> 8) ^ 0x6881A0) & 0x7B ^ (v293 >> 8) & 0x10)) ^ (v221 - 1992286388 - ((2 * v221) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v291 ^ 0xFC)] ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v293) ^ 0xCDu));
  unsigned int v296 = *(_DWORD *)&v247[4 * (BYTE2(v291) ^ 0xC6)];
  LODWORD(v250) = __ROR4__((v296 >> 12) ^ 0x268DC47, 17) ^ 0xEE910136;
  HIDWORD(v250) = v250;
  int v297 = (v250 >> 15) + (v296 << 20);
  unsigned int v298 = HIDWORD(v448) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v291) ^ 0x75u)) ^ (v237 - 1892627349 - ((2 * v237) & 0x1E6198D6));
  unsigned int v299 = v448 ^ *(_DWORD *)&v254[4 * (HIBYTE(v292) ^ 0xE8)] ^ (v221 - 1262737048 - ((2 * v221) & 0x697852D0));
  int v300 = HIDWORD(v444) ^ *(_DWORD *)&v254[4 * (HIBYTE(v291) ^ 0x5A)] ^ (v227 - 1262737048 - ((2 * v227) & 0x697852D0));
  unsigned int v301 = v444 ^ v228 ^ *(_DWORD *)&v254[4 * (HIBYTE(v293) ^ 0x68)] ^ *(_DWORD *)&v243[4 * v295] ^ *(_DWORD *)(v240 + 4LL * (v294 ^ 0x6Du)) ^ v297;
  LODWORD(v221) = ((BYTE1(v298) ^ 0x9D) - 1892627349 - ((2 * ((v298 >> 8) ^ 0xC2489D)) & 0xD6)) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v298) ^ 0xF0u));
  unsigned int v302 = *(_DWORD *)&v247[4 * (BYTE2(v299) ^ 0x8F)];
  LODWORD(v237) = *(_DWORD *)&v247[4 * ((v300 ^ 0xCFB8D782) >> 16)];
  HIDWORD(v250) = v237 ^ 0x518;
  LODWORD(v250) = v237 ^ 0x50165000;
  LODWORD(v221) = *(_DWORD *)&v243[4 * (v301 ^ 0xAE)] ^ (v302 << 20) ^ (v302 >> 12) ^ 0x51850165 ^ (v221 - 1992286388 - ((2 * v221) & 0x12803E98));
  LODWORD(v227) = ((v250 >> 12) - 1992286388 - ((2 * (v250 >> 12)) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * ((v298 ^ BYTE1(v291)) ^ 0x3F)];
  LODWORD(v228) = v221 - 1262737048 - ((2 * v221) & 0x697852D0);
  int v303 = v227 - 1262737048 - ((2 * v227) & 0x697852D0);
  LODWORD(v221) = ((v299 >> 8) ^ 0xC78FD9) & 0x6F ^ (v299 >> 8) & 4;
  LODWORD(v227) = BYTE1(v299) ^ 0xD9;
  LODWORD(v237) = *(_DWORD *)&v247[4 * (BYTE2(v298) ^ 0x48)];
  HIDWORD(v250) = v237 ^ 0x518;
  LODWORD(v250) = v237 ^ 0x50165000;
  int v304 = *(_DWORD *)&v247[4 * (BYTE2(v301) ^ 0xF7)];
  LODWORD(v237) = ((BYTE1(v301) ^ 0x56) - 1892627349 - ((2 * ((v301 >> 8) ^ 0x4AF756)) & 0xD6)) ^ *(_DWORD *)&v243[4 * (v300 ^ 0xCC)] ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v301) ^ 0x3Bu)) ^ ((v250 >> 12) - 1992286388 - ((2 * (v250 >> 12)) & 0x12803E98));
  HIDWORD(v250) = v304 ^ 0x518;
  LODWORD(v250) = v304 ^ 0x50165000;
  unsigned int v305 = HIDWORD(v439) ^ (((unsigned __int16)(v300 ^ 0xD782) >> 8)
                        - 1892627349
                        - (((v300 ^ 0xCFB8D782) >> 7) & 0xD6)) ^ *(_DWORD *)&v243[4 * (v299 ^ 0x50)] ^ *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v300 ^ 0xD782) >> 8) ^ 0x6Du)) ^ *(_DWORD *)&v254[4 * (HIBYTE(v298) ^ 0xC2)] ^ (v250 >> 12);
  unsigned int v306 = v439 ^ *(_DWORD *)&v254[4 * (HIBYTE(v299) ^ 0xC7)] ^ (v237 - 1262737048 - ((2 * v237) & 0x697852D0));
  unsigned int v307 = v207 ^ HIDWORD(v372) ^ *(_DWORD *)&v254[4 * ((v300 ^ 0xCFB8D782) >> 24)] ^ v228;
  unsigned int v308 = v433 ^ (v227 - 1892627349 - 2 * v221) ^ *(_DWORD *)(v240 + 4LL * (v227 ^ 0x6D)) ^ *(_DWORD *)&v254[4 * (HIBYTE(v301) ^ 0x4A)] ^ v303;
  LODWORD(v237) = *(_DWORD *)&v247[4 * (BYTE2(v306) ^ 0xE6)];
  HIDWORD(v250) = v237 ^ 0x518;
  LODWORD(v250) = v237 ^ 0x50165000;
  LODWORD(v237) = v250 >> 12;
  LODWORD(v23sub_100129678(v0 + 3) = *(_DWORD *)&v247[4 * (BYTE2(v307) ^ 0x1C)];
  unsigned int v309 = (((unsigned __int16)(v308 ^ 0xCCA2) >> 8) - 1892627349 - (((v308 ^ 0x33C8CCA2) >> 7) & 0xD6)) ^ *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v308 ^ 0xCCA2) >> 8) ^ 0x6Du));
  HIDWORD(v250) = v233 ^ 0x518;
  LODWORD(v250) = v233 ^ 0x50165000;
  LODWORD(v221) = (v250 >> 12) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v306) ^ 0xD9u)) ^ ((BYTE1(v306) ^ 0xB4)
                                                                                  - 1892627349
                                                                                  - ((2 * ((v306 >> 8) ^ 0x4FE6B4)) & 0xD6));
  LODWORD(v221) = (v221 - 1992286388 - ((2 * v221) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v305 ^ 0xCE)];
  int v310 = (v309 - 1992286388 - ((2 * v309) & 0x12803E98)) ^ *(_DWORD *)&v243[4
                                                                          * ((v207 ^ BYTE4(v372) ^ v254[4 * ((v300 ^ 0xCFB8D782) >> 24)] ^ v228) ^ 0x3A)];
  LODWORD(v237) = *(_DWORD *)&v243[4 * (v308 ^ 0xA2)] ^ (((unsigned __int16)(v305 ^ 0x22CE) >> 8)
                                                                        - 1892627349
                                                                        - (((v305 ^ 0x24CF22CE) >> 7) & 0xD6)) ^ *(_DWORD *)(v240 + 4LL * (((unsigned __int16)(v305 ^ 0x22CE) >> 8) ^ 0x6Du)) ^ (v237 - 1992286388 - ((2 * v237) & 0x12803E98));
  int v311 = *(_DWORD *)&v243[4 * (v306 ^ 0x96)];
  HIDWORD(v250) = v311 ^ 0x9401F4C;
  LODWORD(v250) = v311 ^ 0x80000000;
  HIDWORD(v250) = (v250 >> 29) ^ 0x6615DA09;
  LODWORD(v250) = HIDWORD(v250);
  int v312 = (v250 >> 3) - 1892627349 - ((2 * (v250 >> 3)) & 0x1E6198D6);
  int v313 = v310 - 1262737048 - ((2 * v310) & 0x697852D0);
  LODWORD(v227) = *(_DWORD *)&v247[4 * ((v305 ^ 0x24CF22CE) >> 16)];
  HIDWORD(v250) = v227 ^ 0x518;
  LODWORD(v250) = v227 ^ 0x50165000;
  LODWORD(v227) = v250 >> 12;
  int v314 = *(_DWORD *)&v247[4 * ((v308 ^ 0x33C8CCA2) >> 16)];
  HIDWORD(v250) = v314 ^ 0x518;
  LODWORD(v250) = v314 ^ 0x50165000;
  unsigned int v315 = HIDWORD(v427) ^ *(_DWORD *)&v254[4 * (HIBYTE(v308) ^ 0x17)] ^ (v221 - 1262737048 - ((2 * v221) & 0x697852D0));
  LODWORD(v228) = BYTE1(v307);
  LODWORD(v221) = v312 ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v307) ^ 0xD1u)) ^ (v250 >> 12);
  unsigned int v316 = HIDWORD(v423) ^ *(_DWORD *)&v254[4 * (HIBYTE(v307) ^ 0x1B)] ^ (v237 - 1262737048 - ((2 * v237) & 0x697852D0));
  LODWORD(v237) = *(_DWORD *)&v247[4 * (BYTE2(v316) ^ 0x7E)];
  HIDWORD(v250) = v237 ^ 0x518;
  LODWORD(v250) = v237 ^ 0x50165000;
  LODWORD(v237) = v250 >> 12;
  int v317 = *(_DWORD *)&v254[4 * HIBYTE(v305)];
  unsigned int v318 = v427 ^ *(_DWORD *)&v254[4 * (HIBYTE(v306) ^ 0x4F)] ^ v227 ^ v313;
  LODWORD(v227) = v317 ^ v498;
  int v319 = *(_DWORD *)&v247[4 * (BYTE2(v318) ^ 1)];
  unsigned int v320 = v227 ^ (v221 - 1262737048 - ((2 * v221) & 0x697852D0));
  HIDWORD(v250) = v319 ^ 0x518;
  LODWORD(v250) = v319 ^ 0x50165000;
  LODWORD(v221) = ((v250 >> 12) - 1992286388 - ((2 * (v250 >> 12)) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v315 ^ 0xC6)];
  LODWORD(v227) = ((BYTE1(v315) ^ 0x71) - 1892627348 + (~(2 * ((v315 >> 8) ^ 0xF25B71)) | 0xFFFFFF29)) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v315) ^ 0x1Cu));
  LODWORD(v227) = (v227 - 1262737048 - ((2 * v227) & 0x697852D0)) ^ *(_DWORD *)&v254[4 * (HIBYTE(v318) ^ 0x1F)];
  int v321 = *(_DWORD *)&v247[4 * (BYTE2(v315) ^ 0x5B)];
  HIDWORD(v250) = v321 ^ 0x518;
  LODWORD(v250) = v321 ^ 0x50165000;
  int v322 = v250 >> 12;
  unsigned int v323 = v228 ^ 0x73F4E0AF ^ v320;
  LODWORD(v23sub_100129678(v0 + 3) = *(_DWORD *)&v247[4 * BYTE2(v323)];
  HIDWORD(v250) = v233 ^ 0x518;
  LODWORD(v250) = v233 ^ 0x50165000;
  LODWORD(v23sub_100129678(v0 + 3) = v250 >> 12;
  HIDWORD(v250) = v237 ^ ((BYTE1(v318) ^ 0x81) - 1892627349 - ((2 * ((v318 >> 8) ^ 0x1F0181)) & 0xD6)) ^ 0xD678EAEF ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v318) ^ 0xECu));
  LODWORD(v250) = HIDWORD(v250);
  LODWORD(v250) = (v250 >> 11) ^ __ROR4__(*(_DWORD *)&v254[4 * (HIBYTE(v315) ^ 0xF2)] ^ 0x16A672D6, 11) ^ 0xD490839A;
  HIDWORD(v250) = v250;
  unsigned int v324 = HIDWORD(v378) ^ v502 ^ *(_DWORD *)&v243[4 * (v318 ^ 0xB8)] ^ ((BYTE1(v316) ^ 0xAA)
                                                                                      - 1892627349
                                                                                      - 2
                                                                                      * ((BYTE1(v316) ^ 0xAA) & 0x7F ^ (v316 >> 8) & 0x14)) ^ *(_DWORD *)&v254[4 * (HIBYTE(v320) ^ 0x57)] ^ v322 ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v316) ^ 0xC7u));
  LODWORD(v228) = HIDWORD(v419) ^ *(_DWORD *)&v254[4 * (HIBYTE(v316) ^ 0x96)] ^ (BYTE1(v323)
                                                                               - 1892627349
                                                                               - ((v323 >> 7) & 0xD6)) ^ *(_DWORD *)(v240 + 4LL * (BYTE1(v323) ^ 0x6Du)) ^ (v221 - 1262737048 - ((2 * v221) & 0x697852D0));
  LODWORD(v221) = v419 ^ *(_DWORD *)&v243[4 * (v316 ^ 0x88)] ^ v233 ^ (v227
                                                                                      - 1992286388
                                                                                      - ((2 * v227) & 0x12803E98));
  unsigned int v325 = HIDWORD(v413) ^ *(_DWORD *)&v243[4 * v323] ^ ((v250 >> 21)
                                                                      - 1992286388
                                                                      - ((2 * (v250 >> 21)) & 0x12803E98));
  LODWORD(v227) = *(_DWORD *)&v247[4 * (BYTE2(v324) ^ 0x17)];
  HIDWORD(v250) = v227 ^ 0x518;
  LODWORD(v250) = v227 ^ 0x50165000;
  LODWORD(v227) = v250 >> 12;
  BYTE2(v237) = BYTE2(v221) ^ 0x4A;
  LODWORD(v23sub_100129678(v0 + 3) = *(_DWORD *)(v240 + 4LL * (BYTE1(v228) ^ 0x96u)) ^ ((BYTE1(v228) ^ 0xFB)
                                                                   - 1892627349
                                                                   - ((2 * ((v228 >> 8) ^ 0x3EA2FB)) & 0xD6));
  int v326 = *(_DWORD *)&v247[4 * (BYTE2(v228) ^ 0xA2)];
  HIDWORD(v250) = v326 ^ 0x518;
  LODWORD(v250) = v326 ^ 0x50165000;
  LODWORD(v23sub_100129678(v0 + 3) = (v233 - 1992286388 - ((2 * v233) & 0x12803E98)) ^ *(_DWORD *)&v243[4 * (v221 ^ 0x75)];
  int v327 = (((unsigned __int16)(v221 ^ 0xF075) >> 8)
        - 1892627349
        - (((v221 ^ 0xB54AF075) >> 7) & 0xD6)) ^ (v250 >> 12) ^ *(_DWORD *)(v240
                                                                                        + 4LL
                                                                                        * (((unsigned __int16)(v221 ^ 0xF075) >> 8) ^ 0x6Du));
  int v328 = (v327 - 1262737048 - ((2 * v327) & 0x697852D0)) ^ *(_DWORD *)&v254[4 * (HIBYTE(v325) ^ 0xED)];
  LODWORD(v221) = *(_DWORD *)&v254[4 * (BYTE3(v221) ^ 0x91)];
  int v329 = *(_DWORD *)&v254[4 * (BYTE3(v228) ^ 0x3E)];
  int v330 = *(_DWORD *)&v254[4 * (HIBYTE(v324) ^ 0xFA)];
  LODWORD(v254) = v325 ^ 0xC9AF1D8F;
  int v331 = ((unsigned __int16)(v325 ^ 0x1D8F) >> 8);
  unsigned int v332 = v331 - 1892627349 - ((v254 >> 7) & 0xD6);
  int v333 = *(_DWORD *)&v243[4 * v254];
  LODWORD(v228) = *(_DWORD *)&v243[4 * (v228 ^ 0x9A)];
  LODWORD(v24sub_100129678(v0 + 3) = *(_DWORD *)&v243[4 * (v324 ^ 0x4B)];
  unsigned int v334 = *(_DWORD *)&v247[4 * BYTE2(v254)];
  LODWORD(v237) = *(_DWORD *)&v247[4 * BYTE2(v237)];
  HIDWORD(v250) = v237 ^ 0x518;
  LODWORD(v250) = v237 ^ 0x50165000;
  LODWORD(v254) = (v324 >> 8) ^ 0xFA17F6;
  int v335 = BYTE1(v324) ^ 0xF6;
  LODWORD(v247) = *(_DWORD *)(v240 + 4LL * (v335 ^ 0x6Du));
  int v336 = v335 - 1892627349 - ((2 * (_DWORD)v254) & 0xD6);
  LODWORD(v254) = v413 ^ v228 ^ v227 ^ v221 ^ v332 ^ *(_DWORD *)(v240 + 4LL * (v331 ^ 0x6Du));
  unsigned int v337 = HIDWORD(v408) ^ v336 ^ v329 ^ v247 ^ v333 ^ (v250 >> 12);
  LODWORD(v221) = v408 ^ v243 ^ (v328 - 1992286388 - ((2 * v328) & 0x12803E98));
  unsigned int v338 = HIDWORD(v403) ^ v330 ^ (v334 >> 12) ^ (v334 << 20) ^ (v233 - 1262737048 - ((2 * v233) & 0x697852D0));
  uint64_t v339 = (uint64_t)*(&off_10027AEF0 + SHIDWORD(v391));
  v340 = (char *)*(&off_10027AEF0 + (int)v391) - 8;
  BYTE1(v237) = ((unsigned __int16)(v408 ^ (unsigned __int16)v243 ^ (v328 + 8012 - ((2 * v328) & 0x3E98))) >> 8) ^ 0x6F;
  int v341 = *(_DWORD *)(v61 - 120);
  uint64_t v342 = (uint64_t)*(&off_10027AEF0 + v341 - 878);
  int v343 = *(_DWORD *)&v340[4
                        * (((unsigned __int16)(WORD2(v403) ^ v330 ^ (v334 >> 12) ^ (v233 + 10600 - ((2 * v233) & 0x52D0))) >> 8) ^ 0x22)] ^ *(_DWORD *)(v339 + 4LL * ((v408 ^ v243 ^ (v328 + 76 - ((2 * v328) & 0x98))) ^ 7u));
  unsigned int v344 = *(_DWORD *)(v339 + 4LL * (v254 ^ 0xF8u)) ^ 0xB10C5C5D ^ *(_DWORD *)(v342
                                                                                            + 4LL
                                                                                            * (BYTE2(v221) ^ 0x2Au));
  v345 = (char *)*(&off_10027AEF0 + v341 - 922) - 8;
  LODWORD(v24sub_100129678(v0 + 3) = *(_DWORD *)&v345[4 * (BYTE3(v221) ^ 0xEF)] ^ *(_DWORD *)&v340[4 * (BYTE1(v254) ^ 0x47)];
  LODWORD(v221) = ((v343 ^ 0xC2CB0714) - 1099519680 - 2 * ((v343 ^ 0xC2CB0714) & 0x3E76A94B ^ v343 & 0xB)) ^ *(_DWORD *)&v345[4 * (HIBYTE(v337) ^ 0x9F)];
  int v346 = (v344 - 1099519680 - ((2 * v344) & 0x7CED5280)) ^ *(_DWORD *)&v345[4 * (HIBYTE(v338) ^ 0xCC)];
  LODWORD(v237) = *(_DWORD *)(v342 + 4LL * (BYTE2(v338) ^ 0x39u)) ^ 0x73C75B49 ^ *(_DWORD *)&v340[4 * BYTE1(v237)];
  LODWORD(v340) = (v346 - ((2 * v346) & 0xB5B97174) - 623068998) ^ *(_DWORD *)&v340[4 * (BYTE1(v337) ^ 0x93)];
  LODWORD(v237) = (v237 - 1099519680 - ((2 * v237) & 0x7CED5280)) ^ *(_DWORD *)&v345[4
                                                                                   * ((v254 >> 24) ^ 0xC)];
  LODWORD(v240) = *(_DWORD *)(v342 + 4LL * (BYTE2(v337) ^ 0x7Eu));
  LODWORD(v237) = (v237 + 404209582 - ((2 * v237) & 0x302F7F5C)) ^ *(_DWORD *)(v339
                                                                             + 4LL * (v337 ^ 0x3Eu));
  int v347 = *(_DWORD *)(v339 + 4LL * (v338 ^ 0xBEu));
  LODWORD(v221) = *(_DWORD *)(v342 + 4LL * (BYTE2(v254) ^ 0x77u)) ^ (v221 - 1457789965 - ((2 * v221) & 0x5237C7E6));
  unsigned int v348 = *(_DWORD *)(v61 - 140) ^ HIDWORD(v495) ^ (v237 - ((2 * v237) & 0x9AFD019C) + 1300136142);
  uint64_t v349 = *(_DWORD *)(v61 - 136) ^ v495 ^ ((_DWORD)v221 - ((2 * (_DWORD)v221) & 0x850B7278) + 1116059964);
  LODWORD(v254) = *(_DWORD *)(v61 - 132) ^ HIDWORD(v496) ^ ((_DWORD)v340 - ((2 * (_DWORD)v340) & 0xD4B57CFE) + 1784331903);
  v350 = (char *)*(&off_10027AEF0 + v341 - 844) - 4;
  a55[*(void *)(v61 - 256)] = v350[BYTE3(v349) ^ 0xD7LL] ^ 0xB9;
  v351 = (char *)*(&off_10027AEF0 + SHIDWORD(v386)) - 8;
  a55[*(void *)(v61 - 224)] = (v351[v348 ^ 0xC7LL] - 108) ^ 0x5F;
  v352 = (char *)*(&off_10027AEF0 + v341 - 821) - 12;
  LODWORD(v221) = v352[BYTE1(v348) ^ 0x13LL];
  HIDWORD(v250) = v221 ^ 0xA;
  LODWORD(v250) = (v221 ^ 0x80) << 24;
  a55[6] = (v250 >> 30) ^ 0x40;
  LODWORD(v221) = v352[BYTE1(v254)];
  HIDWORD(v250) = v221 ^ 0xA;
  LODWORD(v250) = (v221 ^ 0x80) << 24;
  a55[*(void *)(v61 - 216)] = (v250 >> 30) ^ 0x7E;
  v353 = (char *)*(&off_10027AEF0 + (int)v386) - 4;
  a55[9] = v353[BYTE2(v349) ^ 0xFBLL] ^ 0x54;
  LODWORD(v221) = ((v243 ^ 0x64AA11FA)
                 - 1457789965
                 - 2 * ((v243 ^ 0x64AA11FA) & 0x291BE3F7 ^ v243 & 4)) ^ v240;
  LODWORD(v221) = (v221 + 404209582 - ((2 * v221) & 0x302F7F5C)) ^ v347;
  LODWORD(v221) = *(_DWORD *)(v61 - 128) ^ v496 ^ (v221 - ((2 * v221) & 0x514E7D16) - 1465434485);
  a55[*(void *)(v61 - 176)] = v353[BYTE2(v221) ^ 0xB8LL] ^ 0x87;
  a55[*(void *)(v61 - 248)] = (v351[v349 ^ 0x1BLL] - 108) ^ 0x7D;
  a55[*(void *)(v61 - 240)] = v353[BYTE2(v348) ^ 3LL] ^ 0xF9;
  a55[*(void *)(v61 - 192)] = v350[HIBYTE(v348) ^ 0x6DLL] ^ 0x41;
  LODWORD(v24sub_100129678(v0 + 3) = v352[BYTE1(v349) ^ 0x92LL];
  HIDWORD(v250) = v243 ^ 0xA;
  LODWORD(v250) = (v243 ^ 0x80) << 24;
  a55[*(void *)(v61 - 160)] = (v250 >> 30) ^ 0xD2;
  uint64_t v354 = *(void *)(v61 - 208);
  a55[v354] = v350[(v254 >> 24) ^ 0x53LL] ^ 0xAD;
  a55[*(void *)(v61 - 184)] = (v351[v254 ^ 0x95LL] - 108) ^ 0xAF;
  a55[*(void *)(v61 - 232)] = (v351[v221 ^ 0x64LL] - 108) ^ 0x27;
  a55[*(void *)(v61 - 168)] = v350[BYTE3(v221) ^ 0x6ELL] ^ 0x3B;
  LODWORD(v221) = v352[BYTE1(v221) ^ 0x1FLL];
  HIDWORD(v250) = v221 ^ 0xA;
  LODWORD(v250) = (v221 ^ 0x80) << 24;
  a55[*(void *)(v61 - 200)] = (v250 >> 30) ^ 0x58;
  a55[*(void *)(v61 - 152)] = v353[BYTE2(v254) ^ 0xC8LL] ^ 0xD6;
  return ((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(a57 + 8LL * ((1647 * ((((_DWORD)v354 - 613852284 - 2 * (((_DWORD)v354 + 16) & 0x5B695B7C)) ^ 0xDB695B74) < a56)) ^ (v341 - 493))) - 8LL))( 190LL,  v353,  1304LL,  184LL,  v352,  v351,  2837177331LL,  v349,  v356,  v357,  v358,  v359,  v360,  v361,  v362,  v363,  v366,  v367,  v369,  v372,  v376,  v378,  a23,  a24,  v382,  v386,  v391,  v398,  v403,  v408,  v413,  v419,  v423,  v427,  v433,  v439,  v444,  v448,  v454,  v459,  v464,  v469,  v473,  v478,  v483,  v486,  v488,  v490,  v492,
           v493,
           v494,
           v495,
           v496,
           v498);
}

void sub_100194A74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,int a59,int a60,int a61)
{
  *(_DWORD *)(v61 - 128) = a58 ^ 0x739565A7;
  *(_DWORD *)(v61 - 136) = a60 ^ 0xF9DCD893;
  *(_DWORD *)(v61 - 13sub_100129678(v0 + 2) = a61 ^ 0x1E4C7787;
  *(_DWORD *)(v61 - 140) = a59 ^ 0xB4221FD2;
  JUMPOUT(0x100192DB4LL);
}

uint64_t sub_100194AC8(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_100194B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v7
                                                                                + 8LL
                                                                                * ((420
                                                                                  * ((v6 & 8) != ((a6 - 565) | 0x23C)
                                                                                               - 572)) ^ a6))
                                                                    - ((a6 - 565) ^ 8LL)))( a1,  a2,  a3,  (a2 - a3));
}

uint64_t sub_100194B54( int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  *(_DWORD *)(v65 - 120) = v60;
  unsigned int v66 = ((a7 - 24) ^ 0xFFFFFDDC) & v60;
  int v67 = -a3;
  *(_DWORD *)(v65 - 128) = v66;
  char v68 = a1 + v63 + v61;
  uint64_t v69 = (v67 + a1 + v63 + v62);
  v71.val[0].i64[0] = ((_BYTE)v67 + (_BYTE)a1 + (_BYTE)v63 + (_BYTE)v62) & 0xF;
  v71.val[0].i64[1] = ((_BYTE)v67 + v68 - 55) & 0xF;
  v71.val[1].i64[0] = ((_BYTE)v67 + v68 + (_BYTE)a7 - 52) & 0xF;
  v71.val[1].i64[1] = ((_BYTE)v67 + v68 - 57) & 0xF;
  v71.val[2].i64[0] = ((_BYTE)v67 + v68 - 58) & 0xF;
  v71.val[2].i64[1] = ((_BYTE)v67 + v68 - 59) & 0xF;
  v71.val[3].i64[0] = ((_BYTE)v67 + v68 - 60) & 0xF;
  v71.val[3].i64[1] = ((_BYTE)v67 + v68 - 61) & 0xF;
  *(int8x8_t *)(v64 - 7 + v69) = vrev64_s8( veor_s8( veor_s8( vrev64_s8( veor_s8( veor_s8(*(int8x8_t *)(v64 - 7 + v69), *(int8x8_t *)(v59 + (v69 & 0xF) - 7)),  veor_s8( *(int8x8_t *)(v58 + (v69 & 0xF) - 7),  *(int8x8_t *)(v57 + (v69 & 0xF) - 7)))),  (int8x8_t)0x2C2C2C2C2C2C2C2CLL),  vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8(v71, (int8x16_t)xmmword_1001F5E30),  (int8x8_t)0x505050505050505LL)));
  return ((uint64_t (*)(__n128))(*(void *)(a57
                                                     + 8LL
                                                     * (((8 * (v67 != 8 - v66)) | (16 * (v67 != 8 - v66))) ^ (a7 - 24)))
                                         - 4LL))((__n128)xmmword_1001F5E30);
}

void sub_100194C90()
{
}

uint64_t sub_100194CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v5
                                                                                         + 8LL
                                                                                         * ((1021
                                                                                           * (((*(_DWORD *)(v6 - 120) == *(_DWORD *)(v6 - 128)) ^ ((v4 | 0xC0) - 1)) & 1)) ^ (v4 | 0xC0)))
                                                                             - 8LL))( a1,  a2,  a3,  a4,  (v4 | 0xC0u) + 540);
}

uint64_t sub_100194CF8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v11 = (a4 - 895093447);
  *(_BYTE *)(v10 + v11) ^= *(_BYTE *)(v8 + (v11 & 0xF)) ^ *(_BYTE *)(v7 + (v11 & 0xF)) ^ *(_BYTE *)(v6 + (v11 & 0xF)) ^ (5 * (v11 & 0xF)) ^ 0x2C;
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((968 * (a4 - 1 != v5)) ^ (a5 - 540))) - 8LL))();
}

void sub_100194D60()
{
  if (v0 == 1708175236) {
    int v1 = 2084229119;
  }
  else {
    int v1 = -2084203481;
  }
  *(_DWORD *)(v2 + 40) = v1;
}

void sub_100194DC4(_DWORD *a1)
{
  unsigned int v1 = *a1 + 1755732067 * (((a1 | 0xFD508F6) - (_DWORD)a1 + (a1 & 0xF02AF709)) ^ 0xD113B52D);
  __asm { BR              X15 }

uint64_t sub_100194EC4()
{
  if (v2 > ((v3 - 26) ^ 0x13C70864u) != v0 - 151127389 < -331810957) {
    BOOL v4 = v2 > ((v3 - 26) ^ 0x13C70864u);
  }
  else {
    BOOL v4 = v0 - 151127389 < (int)(v2 + 1815672691);
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v1 + 8LL * ((!v4 * (((v3 - 26) ^ 0x12) - 232)) ^ (v3 - 26)))
                                          - 86 * ((v3 - 26) ^ 0xEBu)
                                          + 250LL))(0x6E9FC7186F6532B7LL);
}

uint64_t sub_100194FE4(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  unint64_t v15 = a1 - 0x6E9FC7186F6532B7LL + (v9 ^ 0xC6EC2028) + v12 * (unint64_t)(*(_DWORD *)(*v11 + 4LL * a3) ^ v9);
  *(_DWORD *)(v13 + 4 * v14) = v15 + v9 - (((_DWORD)v15 << (((8 * a4) ^ 0xF8) + 25)) & 0x8DD84050);
  uint64_t v16 = ((v15 >> ((a4 - 113) ^ 0xB1u)) ^ 0x7FBFDFB8FFE57FB7LL) + v5 + (v8 & (2 * (v15 >> ((a4 - 113) ^ 0xB1u))));
  BOOL v17 = a3 + 472274735 < a5;
  if (a2 > 0x63D9A8D1 != a3 + 472274735 < v7) {
    BOOL v17 = a2 > 0x63D9A8D1;
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v6 + 8LL * (a4 ^ (!v17 * v10))) - 12LL))(v16);
}

uint64_t sub_1001950DC(uint64_t a1)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * (((((a1 == 0x6E9FC7186F6532B7LL) ^ (v2 - 14)) & 1)
                                          * ((v2 ^ 0x27) + 1014)) ^ v2))
                            - 8LL))();
}

uint64_t sub_100195134@<X0>(int a1@<W8>)
{
  int v4 = a1 - 74;
  BOOL v5 = v3 > 0x1187755D;
  if (v5 == v1 - 113406510 < a1 - 294090772) {
    BOOL v5 = v1 - 113406510 < (int)((v4 ^ 0x6E7888CE) + v3);
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((21 * v5) ^ v4)) - 4LL))();
}

uint64_t sub_100195204(uint64_t a1, int a2, uint64_t a3, char a4, int a5, unsigned int a6, uint64_t a7, int a8)
{
  unint64_t v15 = a1 - 0x6E9FC7186F6532B7LL + (*(_DWORD *)(v12 + 4 * v13) ^ v9);
  *(_DWORD *)(v12 + 4 * v1sub_100129678(v0 + 3) = v15 + v9 - ((2 * v15) & 0x8DD84050);
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * (((((v15 >> ((a4 ^ (2 * v11)) - 98)) ^ (((v11 + a5) & a6) + a7))
                                           + v10
                                           + ((2 * (v15 >> ((a4 ^ (2 * v11)) - 98))) & a8) != v14)
                                          * a2) ^ v11))
                            - 8LL))();
}

uint64_t sub_100195298()
{
  signed int v4 = v0 + 1674286674 + ((v2 + 1158867726) & 0xBAED177F);
  int v5 = *v3 + 1674288482;
  BOOL v6 = v4 < 1493604914;
  BOOL v7 = v4 > v5;
  if (v5 < 1493604914 != v6) {
    BOOL v7 = v6;
  }
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((53 * !v7) ^ v2)) - 12LL))();
}

void sub_100195314()
{
  _DWORD *v1 = v0;
}

void sub_100195338(uint64_t a1)
{
  __asm { BR              X8 }

uint64_t sub_1001953C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  a13 = 108757529
  uint64_t v17 = sub_1001CF8B4(&a12);
  return ((uint64_t (*)(uint64_t))(*(void *)(v16 + 8LL * ((1677 * (a12 == v13)) ^ v15)) - (v14 ^ 0x26E54880)))(v17);
}

uint64_t sub_100195444( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, int a13, unsigned int a14)
{
  a14 = 854
      - 460628867
      * ((((2 * (&a12 ^ 0x326B2B15)) | 0xB22CC208) - (&a12 ^ 0x326B2B15) + 652844796) ^ 0xA7EBC86C);
  a12 = &STACK[0x49EB7E5E2EA5C8FD];
  sub_1001A8490((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15
                                                                                          + 8LL
                                                                                          * ((23
                                                                                            * (a13 == ((v14 - 302) ^ 0x12E))) ^ 0x2ADu))
                                                                              - 4LL))( v16,  v17,  v18,  v19,  v20);
}

uint64_t sub_1001954E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15)
{
  unsigned int v20 = 1178560073 * (&a12 ^ 0xBA947862);
  a14 = a11;
  a13 = v20 + 804878199 * v15 + 137 * (v18 ^ 0x12B) + 1740497438;
  a15 = (v18 + 695) ^ v20;
  uint64_t v21 = (*(uint64_t (**)(int *))(v17 + 8LL * (int)(v18 - 186)))(&a12);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19 + 8LL * ((102 * (a12 == v16)) ^ v18)) - 8LL))(v21);
}

uint64_t sub_100195594( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, uint64_t a13, unsigned int a14, unsigned int a15, unsigned int a16, int a17)
{
  unsigned int v21 = ((818135048 - (&a12 | 0x30C3C008) + (&a12 | 0xCF3C3FF7)) ^ 0x83AABD8A) * v20;
  a14 = v21 - 763814170;
  a15 = v21 + v18 - 2024873385;
  a16 = 274310066 - v21;
  a12 = &STACK[0x27D4077E41C0C6A0];
  a13 = a11;
  uint64_t v22 = sub_1001CFD20((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL * (((a17 == v17) * (((v18 - 293) | 0x2A4) ^ 0x4A2)) ^ v18))
                                          - 8LL))(v22);
}

uint64_t sub_10019565C()
{
  unsigned int v10 = (v3 + 100) ^ (1374699841
                    * ((&v10 + 1878396432 - 2 * (&v10 & 0x6FF60E10)) ^ 0x2021619));
  uint64_t v12 = &STACK[0x18E41690234F4EB1];
  int v13 = v7;
  (*(void (**)(unsigned int *))(v2 + 8LL * (v3 ^ 0x198u)))(&v10);
  unsigned int v10 = (v3 + 111) ^ (1755732067
                    * (((&v10 | 0x414B933F) - &v10 + (&v10 & 0xBEB46CC0)) ^ 0x9F8D2EE4));
  uint64_t v12 = v7;
  sub_1001A3BA0((uint64_t)&v10);
  if ((_DWORD)v13 == v1 + v3 + 383 - 685) {
    int v5 = v8;
  }
  else {
    int v5 = (int)v13;
  }
  unsigned int v11 = v3 + ((2 * (&v10 & 0x11E9380) - &v10 + 2128702589) ^ 0x74156252) * v4 + 1029;
  uint64_t v12 = v7;
  v0(&v10);
  unsigned int v11 = v3 + 383 + ((((2 * &v10) | 0x72A8ABE4) - &v10 - 961828338) ^ 0x33A05BDD) * v4 + 646;
  uint64_t v12 = v9;
  v0(&v10);
  return v5 ^ v1;
}

void sub_100195814(uint64_t a1)
{
  __asm { BR              X8 }

uint64_t sub_100195854()
{
  return 4294925273LL;
}

void sub_10019589C(uint64_t a1)
{
  int v1 = 1178560073 * ((-2 - ((a1 | 0x20C3A6CC) + (~(_DWORD)a1 | 0xDF3C5933))) ^ 0x65A82151);
  __asm { BR              X9 }

_DWORD *sub_10019593C(_DWORD *result)
{
  *uint64_t result = 596636585;
  return result;
}

void sub_100195C8C(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    BOOL v2 = *(void *)(a1 + 8) == 0x27D4077E41C0C6A0LL;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = v2;
  int v1 = *(_DWORD *)(a1 + 16) ^ (1755732067 * ((2 * (a1 & 0x47DE7202) - a1 - 1205760515) ^ 0x66E73026));
  __asm { BR              X8 }

void sub_100195DB8()
{
  *(_DWORD *)(v1 + 36) = v0 - 4;
}

uint64_t sub_100195DC0()
{
  LODWORD(STACK[0x43C]) = v0;
  STACK[0x270] = (unint64_t)&STACK[0x8C0F0A4F49AC496];
  *(void *)(v4 - 19sub_100129678(v0 + 2) = &STACK[0x8C0F0A4F49AC496];
  *(_BYTE *)(v4 - 200) = (-85 * ((v4 + 56 - 2 * ((v4 + 56) & 0x14) + 20) ^ 0xE2)) ^ 0x55;
  *(_DWORD *)(v4 - 184) = 3804331 * ((v4 - 200 - 2 * ((v4 - 200) & 0x54A65C14) + 1420188692) ^ 0x2A7379E2) + v2 - 401;
  STACK[0x268] = (unint64_t)&STACK[0x589C7105EC0C842A];
  *(void *)(v4 - 176) = &STACK[0x589C7105EC0C842A];
  int v5 = (uint64_t (*)(uint64_t))(*(void *)(v1 + 8LL * (v2 ^ 0x4D6)) - 12LL);
  STACK[0x260] = (unint64_t)v5;
  uint64_t v6 = v5(v4 - 200);
  int v7 = *(_DWORD *)(v4 - 180);
  LODWORD(STACK[0x48C]) = v7;
  return ((uint64_t (*)(uint64_t))(*(void *)(v3 + 8LL * ((664 * (v7 == ((v2 - 407) ^ 0x7C3ACCE9))) ^ v2))
                                          - ((v2 - 1065) | 0x113u)
                                          + 403LL))(v6);
}

uint64_t sub_100195EBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, int a33, int a34, unint64_t *a35, uint64_t a36, int a37, int a38, __int128 a39, unint64_t a40, char *a41, unint64_t *a42, uint64_t a43, unint64_t a44, unint64_t *a45, int a46, int a47, uint64_t a48, uint64_t a49, int a50,int a51,int a52,int a53,unint64_t *a54,int a55,int a56,unint64_t *a57,int32x4_t a58,int32x4_t a59,uint64_t a60,uint64_t a61,unint64_t a62,int a63)
{
  a43 = v78;
  STACK[0x378] = 0LL;
  a35 = &STACK[0xC8F409392290EA3];
  STACK[0x3B8] = (unint64_t)&STACK[0x5BFD90C18C6567FE];
  STACK[0x3B0] = (unint64_t)&STACK[0x139154EEB432D04];
  STACK[0x3A8] = (unint64_t)&STACK[0x30CF5C205D591FA0];
  STACK[0x3A0] = (unint64_t)&STACK[0x3EA9131FAE911518];
  a68 = &STACK[0x5A178A95705CD018];
  a67 = &STACK[0x5640F59D98E4336F];
  a66 = &STACK[0x5A178A95705CCF60];
  a65 = &STACK[0x5640F59D98E4332F];
  a45 = &STACK[0x1A8FA111108FB8BE];
  a57 = &STACK[0xC8F409392290E7F];
  STACK[0x280] = (unint64_t)&STACK[0x5A178A95705CD0B0];
  STACK[0x278] = (unint64_t)&STACK[0x5640F59D98E4339F];
  a54 = &STACK[0x6C482493D26ECAD9];
  STACK[0x230] = (unint64_t)&STACK[0x6C482493D26ECA79];
  STACK[0x248] = (unint64_t)&STACK[0x31BC703A95C2A634];
  STACK[0x240] = (unint64_t)&STACK[0x781B11C067844416];
  a42 = &STACK[0x18E41690234F5501];
  int v81 = *v77 - v74;
  STACK[0x200] = (unint64_t)v77;
  int v82 = v77[8] ^ v74;
  a74 = ((unint64_t)&STACK[0x580] ^ 0xE777E3DBFF5FEB7FLL)
      + 0x39FB9D3DBFAB75FDLL
      + ((2LL * (void)&STACK[0x580]) & 0xCEEFC7B7FEBFD6F0LL);
  a44 = ((unint64_t)&STACK[0x5E8] ^ 0xDF6ED69F7EBFEF37LL)
      + 0x7FBFEFFFAD67FDFFLL
      + ((2LL * (void)&STACK[0x5E8]) & 0xBEDDAD3EFD7FDE60LL);
  a52 = 2 * v82;
  LODWORD(STACK[0x294]) = (v82 ^ 0x9AB28778) + 2008284791 + ((2 * v82) & 0xBDFCA3BA ^ 0x8898A10A);
  a40 = ((unint64_t)&STACK[0x590] ^ 0x67FCFEFF7C7DEF7FLL)
      - 0x7080900800007FLL
      + ((2LL * (void)&STACK[0x590]) & 0xCFF9FDFEF8FBDEF0LL);
  a62 = ((unint64_t)&STACK[0x448] ^ 0x5EFDEFEEDBE3F773LL)
      - 0x142004C098200073LL
      + ((2LL * (void)&STACK[0x448]) & 0xBDFBDFDDB7C7EEE0LL);
  *(int32x4_t *)&STACK[0x360] = vdupq_n_s32(0x7FFFFFFEu);
  a39 = xmmword_1001F5E50;
  a59 = vdupq_n_s32(0x7C3ACFFFu);
  uint64_t v83 = (v75 - 295) | 0x88u;
  STACK[0x2B0] = (unint64_t)&STACK[0x444] % 0x25 + v83 - 232;
  a38 = v81;
  LODWORD(STACK[0x23C]) = v81 - 1389506296;
  a53 = v82;
  LODWORD(STACK[0x238]) = v82 ^ 0x444CD6A5;
  STACK[0x208] = (unint64_t)&a9 - 0x616CC1BE8C72DDC2LL;
  a73 = (char *)&a9 - 0x616CC1BE8C72E22CLL;
  a41 = (char *)&a9 - 0x616CC1BE8C72E17BLL;
  int v84 = STACK[0x43C];
  a51 = LODWORD(STACK[0x43C]) ^ 0x2EE;
  LODWORD(STACK[0x22C]) = v84 ^ 0x3CB;
  LODWORD(STACK[0x228]) = v84 ^ 0xBE2EE1E6;
  LODWORD(STACK[0x224]) = v84 + 1954188012;
  a63 = 1538184505;
  int v85 = 137 * (v84 ^ 0x308);
  LODWORD(STACK[0x2A8]) = v84 ^ 0x3A5;
  LODWORD(STACK[0x2AC]) = v85;
  LODWORD(STACK[0x2A4]) = v85 ^ 0x19A;
  STACK[0x428] = v79 | 0x1AA4E40F087B15E7LL;
  STACK[0x420] = v79 ^ 0x18FE8F3A1BF3175FLL;
  STACK[0x418] = v79 ^ 0x18FE8F3A1BF3175FLL | 0x72F351FF41AF8471LL;
  unint64_t v86 = 1178560073 * ((((2 * v79) | 0x867BA291EAC5F388LL) - v79 + 0x3CC22EB70A9D063CLL) ^ 0xD8C181A04FF681A6LL);
  STACK[0x410] = v86;
  STACK[0x408] = v86 + 3351784209u;
  LODWORD(STACK[0x3F4]) = v84 - 1755162399;
  *(int32x4_t *)&STACK[0x340] = vdupq_n_s32(0x4C58C47Cu);
  *(int32x4_t *)&STACK[0x350] = vdupq_n_s32(0x1316311Fu);
  *(int32x4_t *)&STACK[0x320] = vdupq_n_s32(0x14BC0663u);
  *(int32x4_t *)&STACK[0x330] = vdupq_n_s32(0x262C623Eu);
  uint64_t v87 = 1374699841 * ((2 * (v79 & 0x3A7A47C7450DF978LL) - v79 + 0x4585B838BAF20681LL) ^ 0x4B892634D7061E88LL);
  LODWORD(STACK[0x314]) = v84 - 1943997006;
  a72 = v84 ^ 0x1DB;
  a71 = v84 ^ 0x752u;
  LODWORD(STACK[0x304]) = v84 + 1385094435;
  STACK[0x218] = v84 ^ 0x76Eu;
  a64 = v84 - 1912658780;
  a58 = vdupq_n_s32(0xF8759FFE);
  a56 = v84 - 1359038096;
  a70 = v84 ^ 0x33E;
  a36 = v84 ^ 0x75Au;
  a34 = v84 ^ 0x33C;
  LODWORD(STACK[0x2D0]) = 1104223507;
  STACK[0x430] = 0x616CC1BE8C72E4D2LL;
  a37 = 1221740162;
  STACK[0x318] = v87;
  STACK[0x308] = v87 + 30333862;
  LODWORD(STACK[0x3F0]) = v84 ^ 0x324;
  a55 = v84 + 572697704;
  a47 = v84 ^ 0x723;
  LODWORD(STACK[0x2D4]) = 101847460;
  LODWORD(STACK[0x300]) = 701983352;
  int v88 = (char *)&STACK[0x6B0] + STACK[0x430] + (v83 + 1458) - 0x616CC1BE8C72E4B2LL;
  LODWORD(STACK[0x4EC]) = v80;
  STACK[0x5F0] = (unint64_t)(v88 - 1706);
  int v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76
                                                                     + 8LL
                                                                     * (int)(((*((_DWORD *)*(&off_10027AEF0
                                                                                           + (int)(v83 ^ 0x33))
                                                                               - 2) != 0)
                                                                            * (v83 + 243)) ^ v83));
  STACK[0x2E8] = (unint64_t)*(&off_10027AEF0 + (int)(v83 ^ 0x42));
  STACK[0x380] = (unint64_t)*(&off_10027AEF0 + (int)(v83 ^ 0x78)) - 8;
  STACK[0x2E0] = (unint64_t)*(&off_10027AEF0 + (int)(v83 ^ 0xD6));
  return v89(a1, a2, a3, 2210763814LL);
}

uint64_t sub_10019663C()
{
  unint64_t v5 = ((97 * (v0 ^ 0x77u)) ^ ((v0 ^ 0x38Bu) - 3220LL)) + v1;
  STACK[0x430] = v5;
  STACK[0x530] = v5;
  LODWORD(STACK[0x48C]) = v4;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((232 * (STACK[0x4D8] == 0)) ^ v0)) - 4LL))();
}

uint64_t sub_1001966A0()
{
  int v5 = 535753261 * ((v4 - 463337055 - 2 * ((v4 - 200) & 0xE4620A69)) ^ 0xEE960446);
  *(void *)(v4 - 160) = STACK[0x2B8];
  *(void *)(v4 - 200) = STACK[0x240];
  int v6 = LODWORD(STACK[0x23C]) ^ v5;
  *(_DWORD *)(v4 - 168) = v0 - v5 + (((v1 + 35) | 0x103) ^ 0xC2C6D08F);
  *(_DWORD *)(v4 - 176) = v6;
  *(_DWORD *)(v4 - 19sub_100129678(v0 + 2) = v1 - v5 - 7;
  *(void *)(v4 - 184) = STACK[0x248];
  uint64_t v7 = ((uint64_t (*)(uint64_t))(*(void *)(v3 + 8LL * (int)(v1 & 0x82606C0C)) - 12LL))(v4 - 200);
  int v8 = *(_DWORD *)(v4 - 172);
  LODWORD(STACK[0x48C]) = v8;
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * ((1767 * (v8 == v1 + 2084228634)) ^ v1)))(v7);
}

uint64_t sub_10019678C()
{
  LODWORD(STACK[0x300]) = STACK[0x47C];
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((9 * (v0 ^ 3)) | (2
                                                 * (((((9 * (v0 ^ 3) - 532) ^ 0xFFFFFD16) + 9 * (v0 ^ 3) - 238) & v1) != 1662039774)))))();
}

uint64_t sub_1001967D4()
{
  STACK[0x400] = v2;
  STACK[0x258] = v0;
  int v7 = (v5 ^ 0x6B9) * v1;
  STACK[0x5B0] = 0LL;
  int v8 = 235795823 * ((v6 + 1049346070 - 2 * ((v6 - 200) & 0x3E8BC0DE)) ^ 0xAA268987);
  *(_DWORD *)(v6 - 200) = v8 ^ 0x7FC2082E;
  unint64_t v9 = STACK[0x278];
  *(void *)(v6 - 19sub_100129678(v0 + 2) = 0x9466003216229CDLL;
  *(void *)(v6 - 184) = v9;
  *(void *)(v6 - 176) = STACK[0x280];
  *(_DWORD *)(v6 - 164) = v5 - v8 - 257;
  unsigned int v10 = (uint64_t (*)(uint64_t))(*(void *)(v4 + 8LL * (v5 - 1671)) - 4LL);
  STACK[0x288] = (unint64_t)v10;
  uint64_t v11 = v10(v6 - 200);
  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8LL
                                            * (((*(_DWORD *)(v6 - 168) == ((v5 + 605312083) & 0xDBEBA7B3) + 2084228430)
                                              * (v7 ^ 0x30C)) ^ v5)))(v11);
}

uint64_t sub_1001968CC()
{
  STACK[0x2C8] = v3;
  BOOL v4 = LODWORD(STACK[0x56C]) - 510886257 < ((v2 - 291477362) & 0x115F94F7 ^ 0xFFFFF7C8);
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * (((((v2 ^ 0xA2) * v0) ^ v4) & 1 | (8
                                                                                  * ((((v2 ^ 0xA2) * v0) ^ v4) & 1))) ^ v2)))();
}

uint64_t sub_100196930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = v5 - ((((v3 + 1296124852) & 0xB2BEB56D ^ 0x319090D) + 2 * v5) & 0x35134EC) - 483057402;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4
                                                                                          + 8LL
                                                                                          * ((316
                                                                                            * (((2 * v6) & 0xFDF3E37E ^ 0x151206C)
                                                                                             + (v6 ^ 0xFF516BC9)
                                                                                             + 930545525 != 913371444)) ^ (v3 - 724)))
                                                                              - 8LL))( a1,  a2,  a3,  2210763814LL,  913371444LL);
}

uint64_t sub_1001971A4()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (v2 ^ (109 * ((v1 + v0 + 17174081) < 8))))
                            - ((v2 - 1041) | 0x420u)
                            + 1076LL))();
}

uint64_t sub_100197200@<X0>(uint64_t a1@<X8>)
{
}

uint64_t sub_100197238()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((((v0 < 0x20) ^ (2 * (v1 ^ 0xFD) + 51)) & 1)
                                          * ((19 * ((2 * (v1 ^ 0x6FD)) ^ 0x5AB)) ^ 0x342)) ^ (2 * (v1 ^ 0x6FD))))
                            - 12LL))();
}

uint64_t sub_10019729C@<X0>(uint64_t a1@<X8>)
{
  unsigned int v7 = v4 + 17173301 + v3 + v5;
  uint64_t v8 = v1 + v7;
  __int128 v9 = *(_OWORD *)(v8 - 31);
  uint64_t v10 = a1 + v7;
  *(_OWORD *)(v10 - 15) = *(_OWORD *)(v8 - 15);
  *(_OWORD *)(v10 - 31) = v9;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((1035 * ((v2 & 0xFFFFFFE0) == 32)) ^ (v5 - 345))) - 12LL))();
}

void sub_1001972F8()
{
}

uint64_t sub_100197304()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL * ((197 * ((((v2 + 356) ^ 0x107 ^ (v0 == v1)) & 1) == 0)) ^ (v2 + 356)))
                            - ((v2 - 156898124) & 0x95A134B ^ 0x307LL)))();
}

uint64_t sub_10019735C(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((234
                                          * ((v1 & 0x18) != ((a1 - 2000436585) & 0x773C3B0B ^ (a1 + 1136179407) & 0xBC4743DD ^ 0x11E))) ^ a1))
                            - 12LL))();
}

uint64_t sub_1001973C0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 - 7 + (v4 + 17173301 + v3 + 779 - v5)) = *(void *)(v1
                                                                                  - 7
                                                                                  + (v4
                                                                                                 + 17173301
                                                                                                 + v3
                                                                                                 + 779
                                                                                                 - v5));
}

void sub_100197430()
{
}

uint64_t sub_100197438()
{
}

uint64_t sub_100197488@<X0>(int a1@<W4>, int a2@<W5>, int a3@<W6>, uint64_t a4@<X8>)
{
  *(_BYTE *)(a4 + (v5 + asub_10012CBAC((uint64_t)(v0 + 2)) = *(_BYTE *)(v4 + (v5 + a2));
  return (*(uint64_t (**)(void))(v7 + 8LL * (((v5 - 1 == a1) * a3) ^ (v6 + 543))))();
}

uint64_t sub_1001974B8()
{
  int v2 = *(uint64_t (**)(void))(v1 + 8LL * ((1501 * (STACK[0x5B0] != 0)) ^ (v0 + 88)));
  STACK[0x2D8] = (unint64_t)*(&off_10027AEF0 + (v0 ^ 0x311));
  return v2();
}

uint64_t sub_100197508()
{
  uint64_t v5 = v0();
  LODWORD(STACK[0x4EC]) = v3;
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8LL * (int)((((v1 + 977197808) & 0xC5C122BD ^ 0x3B6) * v4) ^ (v1 + 658))))(v5);
}

uint64_t sub_100197558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LODWORD(STACK[0x538]) = 2;
  STACK[0x578] = 0LL;
  LODWORD(STACK[0x60C]) = 0;
  LODWORD(STACK[0x49C]) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                                + 8LL
                                                                                * ((97
                                                                                  * ((v5 & 2) == ((41
                                                                                                 * (((v4 - 161) | 0x84) ^ 0x8F)) ^ 0x30B))) ^ v4)))( a1,  a2,  a3,  a4,  2084229119LL);
}

uint64_t sub_1001975C0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59)
{
  LODWORD(STACK[0x390]) = 0;
  STACK[0x398] = 0LL;
  STACK[0x298] = v59 + 598;
  uint64_t v61 = (a7 + 1384) | 0x1Bu;
  LODWORD(STACK[0x5CC]) = a59;
  unint64_t v62 = STACK[0x430];
  int v63 = (char *)&STACK[0x6B0] + STACK[0x430] + v61 - 0x616CC1BE8C72E4B2LL;
  STACK[0x2C0] = STACK[0x430] + 4144;
  STACK[0x530] = v62 + 4144;
  STACK[0x210] = (unint64_t)(v63 + 865);
  *(void *)(v63 + 865) = 0x6370646600LL;
  v63[873] = 1;
  STACK[0x430] = STACK[0x4C0];
  STACK[0x3C0] = (unint64_t)&STACK[0x6B0]
               + v62
  STACK[0x3D8] = (unint64_t)(v63 + 874);
  uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v60
                                                                                                + 8LL
                                                                                                * (int)((((_DWORD)v61 == 1567) * (v61 - 1258)) ^ v61));
  STACK[0x3D0] = (unint64_t)*(&off_10027AEF0 + (int)v61 - 1341);
  STACK[0x400] = (unint64_t)*(&off_10027AEF0 + (int)(v61 ^ 0x697));
  STACK[0x3F8] = (unint64_t)*(&off_10027AEF0 + (int)(v61 ^ 0x651)) - 4;
  return v64(a1, a2, a3, a4, a5, a6, 359058754LL);
}

uint64_t sub_1001975E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  LODWORD(STACK[0x4EC]) = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v6
                                                                                        + 8LL
                                                                                        * (int)((((v5 + 977197808) & 0xC5C122BD ^ 0x3B6)
                                                                                               * v8) ^ (v5 + 658))))( a1,  a2,  a3,  a4,  a5,  LODWORD(STACK[0x43C]));
}

void sub_100197668()
{
  STACK[0x378] = v0;
  JUMPOUT(0x100196594LL);
}

uint64_t sub_100197674( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50)
{
  *(_DWORD *)(v55 + 360) = 1662039775;
  uint64_t v57 = ((uint64_t (*)(uint64_t, uint64_t, unint64_t *, unint64_t, void, uint64_t, unint64_t *, unint64_t *))*(&off_10027AEF0 + (v50 ^ 0x342)))( v53,  2LL,  &STACK[0x538],  STACK[0x5F0],  (v54 - 510884208),  v51,  &STACK[0x578],  &STACK[0x60C]);
  int v59 = ((2 * v57) & 0x75CEF95E) + (v57 ^ 0x3AE77CAF);
  if (v59 == 1256684722)
  {
    LODWORD(STACK[0x4EC]) = -2084203321;
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v52
                                                                                  + 8LL
                                                                                  * (((STACK[0x578] != 0)
                                                                                    * (((LODWORD(STACK[0x43C]) + 337) ^ 0x54F)
                                                                                     + 371)) ^ (LODWORD(STACK[0x43C])
                                                                                              + 337))))( v57,  STACK[0x578],  v58,  2210763814LL);
  }

  else
  {
    int v60 = STACK[0x43C];
    if (v59 == 988249263)
    {
      STACK[0x398] = STACK[0x578];
      LODWORD(STACK[0x390]) = STACK[0x60C];
      JUMPOUT(0x100197754LL);
    }

    int v62 = 1178560073 * ((2 * ((v56 - 200) & 0x36413638) - (v56 - 200) + 1237240260) ^ 0xF32AB1A6);
    *(_DWORD *)(v56 - 200) = v62 + v59 - ((2 * v59 - 1976498526) & 0xF8759FFE) + 1095979856;
    *(_DWORD *)(v56 - 196) = v60 - v62 + 44;
    *(void *)(v56 - 19sub_100129678(v0 + 2) = a50;
    int v63 = v60;
    uint64_t v64 = sub_1001CE708((_DWORD *)(v56 - 200));
    return (*(uint64_t (**)(uint64_t))(v52
                                              + 8LL
                                              * (((STACK[0x578] != 0) * (((v63 + 337) ^ 0x54F) + 371)) ^ (v63 + 337))))(v64);
  }

uint64_t sub_100197888()
{
  LODWORD(STACK[0x3E8]) = v1;
  int v5 = v0 - 788;
  int v6 = v0 - 2073668071;
  STACK[0x698] = 0xAB98D4823290645DLL;
  LODWORD(STACK[0x444]) = **(_DWORD **)(v3 + 8LL * ((v0 - 788) ^ 0x3D7)) - 519546008;
  int v7 = *(unsigned int **)(v3 + 8LL * ((v0 - 788) ^ 0x319));
  STACK[0x3E0] = (unint64_t)v7;
  uint64_t v8 = *v7;
  int v9 = (v0 - 2073668071) ^ 0x52;
  unint64_t v10 = 1755732067 * ((v4 + 0x46E7E25FCDDEFFCDLL - 2 * ((v4 - 200) & 0x46E7E25FCDDF0095LL)) ^ 0x9B4C45601319BD4ELL);
  *(_DWORD *)(v4 - 176) = v9 + 1755732067 * ((v4 - 841023539 - 2 * ((v4 - 200) & 0xCDDF0095)) ^ 0x1319BD4E);
  int v11 = v6 ^ (1755732067 * ((v4 - 841023539 - 2 * ((v4 - 200) & 0xCDDF0095)) ^ 0x1319BD4E));
  *(_DWORD *)(v4 - 196) = v11 ^ 0x5B;
  *(_DWORD *)(v4 - 160) = (v5 - 1689052281) ^ (1755732067
                                             * ((v4 - 841023539 - 2 * ((v4 - 200) & 0xCDDF0095)) ^ 0x1319BD4E));
  *(void *)(v4 - 19sub_100129678(v0 + 2) = v10 + 2068980119;
  *(void *)(v4 - 168) = v8 + v10;
  *(_DWORD *)(v4 - 184) = v11;
  *(_DWORD *)(v4 - 180) = -1755732067 * ((v4 - 841023539 - 2 * ((v4 - 200) & 0xCDDF0095)) ^ 0x1319BD4E);
  uint64_t v12 = ((uint64_t (*)(uint64_t))STACK[0x380])(v4 - 200);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * *(int *)(v4 - 200)) - 8LL))(v12);
}

uint64_t sub_1001979AC()
{
  STACK[0x3C8] = v0;
  STACK[0x430] = ((uint64_t (*)(unint64_t))STACK[0x3D0])(STACK[0x2B0]);
  int v5 = (*(uint64_t (**)(void))(v3 + 8LL * SLODWORD(STACK[0x2A8])))();
  unsigned int v6 = v5 + 640442942 - ((v5 << LODWORD(STACK[0x2A4])) & v1);
  *uint64_t v4 = v6;
  int v7 = STACK[0x2AC];
  unsigned int v8 = ((v6 >> 30) + 640442942 + (~(v6 >> 30 << ((LODWORD(STACK[0x2AC]) + 100) & 0x5A ^ 0x5B)) | 0xFFFFFFFB) + 1) ^ v6;
  v4[1] = 1812433253 * v8 - ((2 - 670100790 * v8) & v1) + 640442943;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 8LL * v7) - 8LL))( 1992328292LL,  2302638938LL,  347LL,  1812433253LL,  3624866506LL);
}

void sub_100197A8C()
{
}

uint64_t sub_100197A9C@<X0>(unsigned int a1@<W6>, uint64_t a2@<X7>, char a3@<W8>)
{
  unsigned int v8 = (_BYTE *)(a2 + (v5 - 1236742231));
  unint64_t v10 = 1788641691 * (v9 ^ HIWORD(v9));
  char v11 = *(_BYTE *)(*(void *)(v7 + 8LL * (v4 - 1406)) + (v10 >> 24) - 4) ^ ((v3 ^ a1) >> a3) ^ *(_BYTE *)(*(void *)(v7 + 8LL * ((v4 - 1411) ^ 0xD9)) + (v10 >> 24) - 9) ^ *(_BYTE *)(*(void *)(v7 + 8LL * (v4 - 1407)) + (v10 >> 24) - 7) ^ v10 ^ (127 * BYTE3(v10));
  *unsigned int v8 = v11;
  return (*(uint64_t (**)(void))(v6 + 8LL * ((474 * (v5 - (v11 != 0) == 1236742230)) ^ (v4 - 1411))))();
}

void sub_1001987CC()
{
}

uint64_t sub_1001987D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  STACK[0x4A8] = v57;
  STACK[0x4C0] = STACK[0x430];
  STACK[0x628] = *(void *)(v59 + 8LL * v58);
  unint64_t v60 = STACK[0x398];
  STACK[0x530] = (v58 + 707) + STACK[0x2C0] - 667;
  STACK[0x450] = v60;
  if (v60) {
    BOOL v61 = a57 == 0;
  }
  else {
    BOOL v61 = 1;
  }
  int v62 = !v61;
  return (*(uint64_t (**)(uint64_t))(v59 + 8LL * ((459 * v62) ^ (v58 + 1041))))(3058756118LL);
}

uint64_t sub_100198898(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 7 * (v2 ^ 0x4FEu);
  uint64_t v6 = (char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E943LL;
  *(_DWORD *)uint64_t v6 = 27443181;
  *((void *)v6 + 1) = 0LL;
  *((_DWORD *)v6 + 4) = 1927479029;
  *((_DWORD *)v6 + 6) = 510884208;
  *((void *)v6 + 4) = 0LL;
  *(_DWORD *)((char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E91BLL) = 510884208;
  STACK[0x508] = (unint64_t)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E91BLL;
  *(unint64_t *)((char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E913LL) = 0LL;
  STACK[0x480] = (unint64_t)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E913LL;
  *(_DWORD *)((char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E90BLL) = 510884208;
  STACK[0x490] = (unint64_t)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E90BLL;
  *(unint64_t *)((char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E903LL) = 0LL;
  STACK[0x5C0] = (unint64_t)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E903LL;
  *(_DWORD *)((char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E8FBLL) = 510884208;
  STACK[0x4A0] = (unint64_t)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E8FBLL;
  *(unint64_t *)((char *)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E8F3LL) = 0LL;
  STACK[0x570] = (unint64_t)&STACK[0x6B0] + a2 + v5 - 0x616CC1BE8C72E8F3LL;
  v6[88] = 99;
  *(_DWORD *)uint64_t v4 = 27443181;
  *(_OWORD *)(v4 + 4) = 0u;
  *(_DWORD *)(v4 + 20) = 0;
  *(_DWORD *)(v4 + 24) = 510884208;
  *(_DWORD *)(v4 + 28) = 2012221280;
  STACK[0x2F8] = v4 + 28;
  *(_DWORD *)(v4 + 23sub_100129678(v0 + 2) = 2012221280;
  STACK[0x2F0] = v4 + 232;
  *(_OWORD *)(v4 + 436) = 0u;
  *(_OWORD *)(v4 + 45sub_100129678(v0 + 2) = 0u;
  *(void *)(v4 + 468) = 0LL;
  strcpy((char *)(v4 + 1128), ",,,,,,,,,,,,,,,,,,,,");
  *(_BYTE *)(v4 + 1149) = 0;
  *(_WORD *)(v4 + 1150) = 0;
  *(void *)(v4 + 115sub_100129678(v0 + 2) = 0LL;
  *(void *)(v4 + 1160) = 0LL;
  *(_OWORD *)(v4 + 1168) = 0u;
  *(_OWORD *)(v4 + 1184) = 0u;
  return ((uint64_t (*)(__n128))(*(void *)(v3
                                                     + 8LL
                                                     * (int)((95
}

uint64_t sub_100198A0C@<X0>(uint64_t (*a1)(void)@<X8>)
{
  STACK[0x390] = v2;
  STACK[0x2C0] = v2 - 112;
  STACK[0x530] = v2 - 112;
  STACK[0x430] = *(void *)(v3 + 8LL * (v1 - 647)) - 8LL;
  return a1();
}

uint64_t sub_100198A38(int a1, __n128 a2)
{
  *(_DWORD *)(v6 + 1424) = 1380206569;
  *(_DWORD *)(v6 + 1428) = 1998989808;
  memset((void *)(v6 + 1432), 44, 20);
  *(__n128 *)(v6 + 145sub_100129678(v0 + 2) = a2;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (((((v2 + a1) & v3 ^ 0x60LL) == 16) * v4) ^ v2)) - 8LL))();
}

void sub_100198AA0()
{
}

uint64_t sub_100198AA8@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a66 = a7;
  a67 = v69;
  STACK[0x2C0] = a2;
  memset((void *)(v69 + 1516), 44, 20);
  *(void *)(a8 + 96) = v69;
  *(_DWORD *)(v69 + 476) = 987573669;
  STACK[0x3E0] = *(void *)(v68 + 8 * a9) + ((a9 + 1219) ^ 0xFFFFFFFFFFFFFB1BLL);
  unint64_t v70 = STACK[0x530];
  int8x16x4_t v71 = (char *)&a10 + STACK[0x530] - 0x616CC1BE8C72DE02LL;
  STACK[0x390] = STACK[0x530];
  STACK[0x388] = v70 + 432;
  STACK[0x430] = (unint64_t)v71;
  STACK[0x250] = (unint64_t)(v71 + 392);
  STACK[0x3F8] = STACK[0x450];
  a65 = a8;
  STACK[0x398] = a8;
  STACK[0x530] = STACK[0x388];
  LODWORD(STACK[0x514]) = 1550691389;
  LODWORD(STACK[0x3D8]) = -1431498932;
  LODWORD(STACK[0x400]) = -1733672041;
  LODWORD(STACK[0x440]) = 510884208;
  STACK[0x560] = 0LL;
  LODWORD(STACK[0x54C]) = 1730004587;
  *(_DWORD *)STACK[0x430] = 734832852;
  LODWORD(STACK[0x3C0]) = -1450701265;
  LODWORD(STACK[0x3C8]) = 1757648360;
  LODWORD(STACK[0x3E8]) = v67;
  return ((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 + 8LL * (int)((a9 + 310) ^ 0x6DA)) - (a9 + 1279) + 1307LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,  a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60);
}

uint64_t sub_100198C78()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((((v1 - 732) | 0x528) - 1851) * (v0 == 43950352)) ^ v1))
                            - ((v1 + 993128672) & 0xC4CE0FFD)
                            + 1521LL))();
}

uint64_t sub_100198CD0()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((((((v0 - 1515) | 0x4C) ^ 0xFFFFFE30) & (v1 - 510884205))
                                           - LODWORD(STACK[0x3E8]) == -510884208)
                                          * ((20 * (v0 ^ 0x77C)) ^ 0x127)) ^ v0))
                            - 4LL))();
}

uint64_t sub_100198D34()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((((v1 + 851) ^ 0x502) * (v0 == 734832852)) ^ v1)) - 4LL))();
}

uint64_t sub_100198D70()
{
  BOOL v5 = v1 == 734832852 || LODWORD(STACK[0x54C]) - v2 != 1219120379;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((29 * v5) ^ v0)) - ((155 * (v0 ^ 0x1CF)) ^ 0x4CEu) + 1307LL))();
}

uint64_t sub_100198DCC()
{
  int v4 = (_DWORD *)STACK[0x430];
  *int v4 = v0 + (v1 ^ 0x4CE) - 1312;
  BOOL v5 = &v4[6 * (v0 - 734832853)];
  int v6 = v5[2];
  STACK[0x3F8] = *((void *)v5 + 2);
  LODWORD(STACK[0x54C]) = v5[6];
  int v7 = *(_DWORD *)(v3 + 48LL * (v6 - 43950353) + 36);
}

uint64_t sub_100198EA0()
{
  unsigned int v3 = LODWORD(STACK[0x54C]) + ((v0 + 1275556929) & 0xB3F887D1 ^ 0xE57C3862);
  int v4 = (v1 + 774276973 < ((v0 + 734818785) & 0xD4338977) + 1285160839) ^ (v3 < 0x4C9A00DD);
  BOOL v5 = v3 < v1 + 774276973;
  if (v4) {
    BOOL v5 = v1 + 774276973 < ((v0 + 734818785) & 0xD4338977) + 1285160839;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1011 * !v5) ^ v0)) - 12LL))();
}

uint64_t sub_100198F40@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * ((35
                                * (*(_DWORD *)(v4
                                             + 48LL
}

uint64_t sub_100198FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v10 = v5 == a5 && v7 != 281 * (v6 ^ 0x55A) + 43948385;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (int)((773 * v10) ^ v6)) - (v6 ^ 0x551LL)))();
}

uint64_t sub_100199014()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((((*(_DWORD *)(v3 + 48LL * (v1 - 43950353) + 40) & 8) == 375 * (v0 ^ 0x7AA) - 1875)
                                * (((v0 ^ 0x7AA) + 774) ^ 0x312)) ^ v0)))();
}

uint64_t sub_10019906C@<X0>(int a1@<W2>, int a2@<W8>)
{
  int v5 = *(_DWORD *)(v4 + 48LL * v2 + 36);
  BOOL v7 = v5 - 1777622420 > ((a2 - 502) ^ a2 ^ 0xFC ^ 0x18AA418E) || v5 - 1777622420 < SLODWORD(STACK[0x400]);
  int v8 = !v7;
  if (v5 == 43950352) {
    int v8 = 1;
  }
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((v8 * a1) ^ a2)) - 8LL))();
}

uint64_t sub_1001990D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9 = v5 - 1031;
  if (v6) {
    int v10 = a5;
  }
  else {
    int v10 = v7;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (((v10 == a5) * (19 * (v9 ^ 0x17F) + 848)) ^ v9)) - 4LL))();
}

void sub_100199914()
{
}

uint64_t sub_100199924()
{
  STACK[0x530] = STACK[0x390];
  return ((uint64_t (*)(void))STACK[0x3E0])();
}

uint64_t sub_100199934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((590 * (v6 == a5 + a6 - 755 - 24)) ^ (a6 - 767))) - 4LL))();
}

void sub_100199964(int a1@<W8>)
{
  int v2 = (unint64_t *)STACK[0x480];
  STACK[0x398] = STACK[0x2F8];
  STACK[0x3F8] = *v2;
  STACK[0x3E0] = ((((a1 + 871536606) & 0xCC0D6ABD) - 967961297) & 0x39B1ECFF) + *(void *)(v1 + 8LL * a1) - 1255LL;
  JUMPOUT(0x100198B54LL);
}

uint64_t sub_100199A28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(a67 + 1560) = *(void *)STACK[0x570];
  *(_DWORD *)(a67 + 155sub_100129678(v0 + 2) = *(_DWORD *)STACK[0x4A0];
  *(void *)(*(void *)(a65 + 96) + 488LL) = *(void *)(a65 + 8);
  *(_DWORD *)(*(void *)(a65 + 96) + 48_swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.GKGameModeListener", 33LL, "init()", 6LL, 0LL) = *(_DWORD *)a65;
  *(_BYTE *)(a72 + STACK[0x2C0] + a66) = ((a73 - 124) ^ 0xBA) * (a73 - 107);
  return (*(uint64_t (**)(void))(v73 + 8LL * (a71 ^ 0x1C0)))();
}

void sub_100199AC8()
{
}

uint64_t sub_100199AD4@<X0>(uint64_t a1@<X8>)
{
  STACK[0x580] = a1 + 104;
  uint64_t v4 = (uint64_t (*)(void))STACK[0x628];
  STACK[0x2C0] = v2 - 112;
  STACK[0x530] = v2 - 112;
  STACK[0x430] = *(void *)(v3 + 8LL * (int)(((v1 + 2081289126) & 0x83F20B0B) - 647)) - 8LL;
  return v4();
}

uint64_t sub_100199B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((a6 - 168) ^ (11 * (v6 == a5)))) - STACK[0x218] + 1113))();
}

uint64_t sub_100199B48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  unint64_t v59 = STACK[0x218];
  unsigned int v60 = (STACK[0x218] - 97) | 3;
  STACK[0x518] = 0LL;
  LODWORD(STACK[0x53C]) = 510884208;
  STACK[0x460] = 0LL;
  LODWORD(STACK[0x4FC]) = 510884208;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58
                                                                                          + 8LL
                                                                                          * (int)(v60 | (8 * ((*(_BYTE *)(a58 - 0x248771FDFB9E9BA5LL) - *((_BYTE *)*(&off_10027AEF0 + (int)(v59 ^ 0x4DB)) - 4)) == 241))))
                                                                              - (v60 ^ 0x40FLL)))( 37LL,  433LL,  204LL,  682LL,  2488117716LL);
}

uint64_t sub_100199C08()
{
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (v0 ^ ((v1 != 1) * v3))) - (((((v0 - 487) | v4) ^ v2) * v7) ^ v6)))();
}

void sub_100199C38()
{
}

uint64_t sub_100199C44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v70
                                                               + 8LL * ((((3 * a69) ^ 0xF6) * (v69 != a5)) ^ (a6 - 333)))
                                                   - 8LL))( 911LL,  328LL);
}

uint64_t sub_100199C94(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * (int)((((((((v1 + 362241336) & 0xEA68A3FF) + 308) ^ v3) & (2 * v5))
                                                + (v5 ^ v2) == v2)
                                               * a1) ^ (v1 + 362241336) & 0xEA68A3FF))
                            - 8LL))();
}

uint64_t sub_100199D18@<X0>(unsigned int a1@<W1>, int a2@<W6>, uint64_t a3@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((((v3 - 158) ^ a2) * (a3 == 19)) ^ v3)) - (v3 ^ a1) + 467LL))();
}

uint64_t sub_100199D54(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v11
                                        + 8LL
                                        * ((((*(_BYTE *)(a6 + v10)
                                                             - *(_BYTE *)(*(void *)(v9 + 8LL * ((v8 ^ 0x2E0) - 556))
                                                                        - 8LL)) != 241)
                                          * (((((v8 ^ 0x2E0) + a5) & a7 ^ a8) * a1) ^ 0x241)) ^ ((v8 ^ 0x2E0) - 45)))
                            - 12LL))();
}

uint64_t sub_100199E00(uint64_t a1, uint64_t a2, char a3, int a4)
{
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
}

void sub_100199E30()
{
}

uint64_t sub_100199E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ((uint64_t (*)(void))(*(void *)(v9
                                        + 8LL
                                        * (int)((148
                                               * ((*(_BYTE *)(a6 + v8)
                                                                  - *(_BYTE *)(*(void *)(v7
                                                                                         + 8LL
                                                                                         * (int)(((v6 + 577740950) & 0xDD905FFF)
                                                                                               - 551))
                                                                             - 12LL)) != 241)) ^ (((v6 + 577740950) & 0xDD905FFF)
                                                                                                + 333)))
                            - 12LL))();
}

uint64_t sub_100199F18(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4 + 8LL * (((v3 == ((v2 ^ a2) - 40)) * (19 * (v2 ^ a2) - 239)) ^ v2)))();
}

void sub_100199F44()
{
}

uint64_t sub_100199F50()
{
  int v2 = (((v0 - 408) | 0x384) - 895) | 0x420;
  uint64_t v3 = ((uint64_t (*)(uint64_t))STACK[0x3D0])(1576LL);
  STACK[0x4E0] = v3;
  return (*(uint64_t (**)(void))(v1 + 8LL * (((v3 != 0) * (v2 - 1051)) ^ v2)))();
}

uint64_t sub_100199FF4()
{
  int v3 = (v2 - 371482832) & 0x16245FFA;
  int v4 = (v3 ^ 0x343) * v0;
  uint64_t v5 = ((uint64_t (*)(uint64_t))STACK[0x3D0])(1576LL);
  STACK[0x640] = v5;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (((v4 - 770) * (v5 != 0)) | v3)) - 12LL))();
}

uint64_t sub_10019A054()
{
}

uint64_t sub_10019A0B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v67 = 235795823 * ((v66 - 200) ^ 0x94AD4959);
  *(_DWORD *)(v66 - 200) = v67 ^ 0x7FC2082B;
  *(_DWORD *)(v66 - 164) = v64 - v67 + 861;
  *(void *)(v66 - 184) = a63;
  *(void *)(v66 - 176) = a64;
  *(void *)(v66 - 19sub_100129678(v0 + 2) = 0x9466003216229CDLL;
  uint64_t v68 = ((uint64_t (*)(uint64_t))STACK[0x288])(v66 - 200);
  return ((uint64_t (*)(uint64_t))(*(void *)(v65
                                                      + 8LL
                                                      * ((186
}

uint64_t sub_10019A184@<X0>(int a1@<W8>)
{
  BOOL v4 = v2 == v1 + ((a1 - 1194) ^ 0xBA) - 588;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((v4 | (2 * v4)) ^ (a1 - 207))) - 12LL))();
}

uint64_t sub_10019A1C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v68 = 235795823 * ((((v67 - 200) | 0xFD09330A) - ((v67 - 200) & 0xFD09330A)) ^ 0x69A47A53);
  *(_DWORD *)(v67 - 164) = v65 - v68 + 861;
  *(void *)(v67 - 176) = a64;
  *(_DWORD *)(v67 - 200) = v68 ^ 0x7FC20829;
  *(void *)(v67 - 19sub_100129678(v0 + 2) = v64;
  *(void *)(v67 - 184) = a63;
  uint64_t v69 = ((uint64_t (*)(uint64_t))STACK[0x288])(v67 - 200);
  return ((uint64_t (*)(uint64_t))(*(void *)(v66
                                                      + 8LL
                                                      * (((((3 * (v65 ^ 0xD1)) ^ (*(_DWORD *)(v67 - 168) == 2084229119)) & 1)
                                                        * ((3 * (v65 ^ 0x2D1)) ^ 0x16D)) ^ v65))
                                          - 4LL))(v69);
}

uint64_t sub_10019A2B4@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((v3 == v1 + a1 - 170 - 588) * ((a1 - 287) ^ 0x595)) ^ a1)) - 4LL))();
}

uint64_t sub_10019A300( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int v71 = ((v65 & 0xD1AFCDE0 | ~(v65 | 0xD1AFCDE0)) ^ 0xBAFD7B46) * v69;
  *(void *)(v70 - 184) = a63;
  *(void *)(v70 - 176) = a64;
  *(void *)(v70 - 19sub_100129678(v0 + 2) = v64;
  *(_DWORD *)(v70 - 200) = v71 ^ 0x7FC2082B;
  *(_DWORD *)(v70 - 164) = v66 - v71 + 861;
  uint64_t v72 = ((uint64_t (*)(uint64_t))STACK[0x288])(v70 - 200);
  return ((uint64_t (*)(uint64_t))(*(void *)(v67
                                                      + 8LL
                                                      * ((186 * (*(_DWORD *)(v70 - 168) != (v66 ^ 0x39B ^ (v68 - 471)))) ^ v66))
                                          - 4LL))(v72);
}

uint64_t sub_10019A3B4@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  unsigned int v64 = ((1424150546 - (v57 | 0x54E2D012) + (v57 | 0xAB1D2FED)) ^ 0x3FB066B4) * v61;
  *(_DWORD *)(v63 - 200) = a1 ^ v64;
  *(_DWORD *)(v63 - 164) = v59 - v64 + 978;
  *(void *)(v63 - 19sub_100129678(v0 + 2) = v55;
  *(void *)(v63 - 184) = a54;
  *(void *)(v63 - 176) = a55;
  uint64_t v65 = v56(v63 - 200);
  int v66 = *(_DWORD *)(v63 - 168);
  STACK[0x468] = v62;
  return ((uint64_t (*)(uint64_t))(*(void *)(v58
                                                      + 8LL * ((1802 * (v66 == v60 + 3 * (v59 ^ 0x1C0) - 69)) ^ v59))
                                          - (((v59 ^ 0x1C0u) + 756) ^ 0x303LL)))(v65);
}

void sub_10019A480()
{
}

uint64_t sub_10019A51C()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * (((((v0 - 272) | 0x308) + 1221) * (LODWORD(STACK[0x4EC]) != v2)) ^ v0)))();
}

uint64_t sub_10019A610()
{
  STACK[0x468] = v2;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((670 * (STACK[0x460] != 0)) ^ (19 * (v0 ^ 0x1FE) + 376))) - 8LL))();
}

uint64_t sub_10019B004()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1824 * (STACK[0x518] != 0)) ^ (v0 - 613))) - 8LL))();
}

uint64_t sub_10019B034()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((1036 * (STACK[0x4E0] != 0)) ^ (v0 + 100))))();
}

uint64_t sub_10019B068()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((242 * (STACK[0x640] == 0)) ^ (v0 + 336))))();
}

uint64_t sub_10019B094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5
                                                                                 + 8LL
                                                                                 * ((1165
                                                                                   * (v4 == ((v3 - 342403862) & 0x1468AC2F)
                                                                                          + 2084228058)) ^ (v3 - 168)))
                                                                     - 12LL))( a1,  a2,  a3,  2210763814LL);
}

uint64_t sub_10019B0EC()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1824 * (STACK[0x518] != 0)) ^ (v0 - 613))) - 8LL))();
}

uint64_t sub_10019B114()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((1036 * (STACK[0x4E0] != 0)) ^ (v0 + 100))))();
}

uint64_t sub_10019B140()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((242 * (STACK[0x640] == 0)) ^ (v0 + 336))))();
}

uint64_t sub_10019B164()
{
  uint64_t v3 = ((uint64_t (*)(void))STACK[0x2D8])();
  return ((uint64_t (*)(uint64_t))(*(void *)(v2
                                                      + 8LL
                                                      * ((1165 * (v1 == ((v0 - 342403862) & 0x1468AC2F) + 2084228058)) ^ (v0 - 168)))
                                          - 12LL))(v3);
}

uint64_t sub_10019B1C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52)
{
  LODWORD(STACK[0x5CC]) = 1538184225;
  LODWORD(STACK[0x618]) = 128;
  int v56 = 1178560073 * ((((v55 - 200) | 0xC385703) - (v55 - 200) + ((v55 - 200) & 0xF3C7A8F8)) ^ 0xB6AC2F61);
  *(_DWORD *)(v55 - 160) = (v53 - 901) ^ v56;
  *(_DWORD *)(v55 - 176) = 2014182846 - v56;
  *(void *)(v55 - 168) = 0LL;
  *(void *)(v55 - 15sub_100129678(v0 + 2) = 0LL;
  *(void *)(v55 - 144) = a46;
  *(void *)(v55 - 184) = v52 + 0x1F589EA4AC42C079LL;
  *(void *)(v55 - 19sub_100129678(v0 + 2) = a52;
  *(void *)(v55 - 136) = v52;
  *(void *)(v55 - 128) = v52 + 0x1F589EA4AC42C189LL;
  uint64_t v57 = ((uint64_t (*)(uint64_t))STACK[0x430])(v55 - 200);
  return (*(uint64_t (**)(uint64_t))(v54
                                            + 8LL
                                            * (v53
                                             + ((*(_DWORD *)(v55 - 200) == ((v53 - 585294074) & 0x22E2DFDF)
                                                                                          + 2084229119
                                                                                          + ((v53 + 1331204048) & 0x30A76CCF)
                                                                                          - 976) << 9))))(v57);
}

uint64_t sub_10019B2F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = v1 + 127 - a1;
  int8x16_t v5 = vrev64q_s8(*(int8x16_t *)(v4 - 15));
  int8x16_t v6 = vextq_s8(v5, v5, 8uLL);
  int8x16_t v7 = vrev64q_s8(*(int8x16_t *)(v4 - 31));
  int8x16_t v8 = vextq_s8(v7, v7, 8uLL);
  unint64_t v9 = STACK[0x298] + 127 - a1;
  v10.i64[0] = 0x5858585858585858LL;
  v10.i64[1] = 0x5858585858585858LL;
  int8x16_t v11 = vmvnq_s8(vandq_s8(vaddq_s8(v6, v6), v10));
  int8x16_t v12 = vmvnq_s8(vandq_s8(vaddq_s8(v8, v8), v10));
  v10.i64[0] = 0x2D2D2D2D2D2D2D2DLL;
  v10.i64[1] = 0x2D2D2D2D2D2D2D2DLL;
  int8x16_t v13 = vrev64q_s8(vaddq_s8(vaddq_s8(v6, v10), v11));
  *(int8x16_t *)(v9 - 15) = vextq_s8(v13, v13, 8uLL);
  int8x16_t v14 = vrev64q_s8(vaddq_s8(vaddq_s8(v8, v10), v12));
  *(int8x16_t *)(v9 - 31) = vextq_s8(v14, v14, 8uLL);
  LODWORD(v9) = a1 + ((v2 - 220232230) & 0xD207D69) == 1129;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((4 * (_DWORD)v9) | (8 * (_DWORD)v9)) ^ v2)) - 12LL))();
}

uint64_t sub_10019B3A8()
{
  LODWORD(STACK[0x4EC]) = v1;
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * (((((v0 - 8) ^ ((*(_DWORD *)(STACK[0x2C8] + 360)
                                                                              - 1662039775) < 0xFFFFFFFE)) & 1)
                                * (((v0 - 1032) ^ 0x30A) - 730)) ^ v0)))();
}

uint64_t sub_10019B3F0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>)
{
  unint64_t v10 = STACK[0x390];
  int8x16_t v11 = (char *)&STACK[0x6B0] + STACK[0x390] - 0x616CC1BE8C72E4B2LL;
  STACK[0x528] = (unint64_t)(v11 - 1824);
  STACK[0x3F8] = (unint64_t)(v11 - 1596);
  LODWORD(STACK[0x59C]) = 1675009439;
  STACK[0x530] = v10 + 178 * (a9 ^ 0x30Fu) - 904;
  STACK[0x620] = 0LL;
  LODWORD(STACK[0x4D0]) = 510884208;
  int8x16_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 8LL * ((a9 + 167) ^ (1932 * (v11 != (char *)1576)))) - 4LL);
  STACK[0x400] = (unint64_t)(v11 - 1824);
  return v12(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10019B564()
{
  *(_DWORD *)(v3 - 200) = v1
                        + 628203409 * (((v3 - 200) & 0x8F7154F5 | ~((v3 - 200) | 0x8F7154F5)) ^ 0xF206A739)
                        - 231789502;
  AppMetadataNetworkFetcher.init(batchTask:)(v3 - 200);
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(v2
                                     + 8LL
  return v4();
}

uint64_t sub_10019B614(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2
                                                              + 8LL
                                                              * ((1776
                                                                * (*(void *)(v3 + 8LL * ((v1 ^ 0x1DF) - 731))
                                                                 - 12LL
                                                                 - ((((v1 ^ 0x1DF) - 189) ^ 0x7BDu)
                                                                  + a1
                                                                  + (unint64_t)(((v1 ^ 0x1DF) - 189) | 0xA1u))
                                                                 + 2274 > 0x1F)) ^ v1 ^ 0x1DF)))( 3576839688LL,  718126875LL,  580LL);
}

uint64_t sub_10019B6A4@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v9 = ((v5 + a1) & a2 ^ a3) - v4;
  int8x16_t v10 = vrev64q_s8(*(int8x16_t *)(a4 + v9 - 15));
  int8x16_t v11 = vextq_s8(v10, v10, 8uLL);
  int8x16_t v12 = vrev64q_s8(*(int8x16_t *)(a4 + v9 - 31));
  int8x16_t v13 = vextq_s8(v12, v12, 8uLL);
  uint64_t v14 = v8 + v9;
  v15.i64[0] = 0x5858585858585858LL;
  v15.i64[1] = 0x5858585858585858LL;
  v16.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v16.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  int8x16_t v17 = vrev64q_s8(vaddq_s8(vsubq_s8(v11, vandq_s8(vaddq_s8(v11, v11), v15)), v16));
  *(int8x16_t *)(v14 - 15) = vextq_s8(v17, v17, 8uLL);
  int8x16_t v18 = vrev64q_s8(vaddq_s8(vsubq_s8(v13, vandq_s8(vaddq_s8(v13, v13), v15)), v16));
  *(int8x16_t *)(v14 - 31) = vextq_s8(v18, v18, 8uLL);
  return (*(uint64_t (**)(void))(v7 + 8LL * (((v4 == 288) * v6) ^ v5)))();
}

uint64_t sub_10019B730@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = (v2 - 320);
  int8x8_t v8 = vrev64_s8(*(int8x8_t *)(a1 + v7 - 7));
  *(int8x8_t *)(v4 - 7 + v7) = vrev64_s8(vadd_s8(vsub_s8(v8, vand_s8(vadd_s8(v8, v8), v5)), v6));
  return (*(uint64_t (**)(void))(v3 + 8LL * ((448 * (v1 & 1)) ^ (v1 - 16))))();
}

uint64_t sub_10019B798@<X0>(int a1@<W3>, uint64_t a2@<X8>)
{
  *(_BYTE *)(v7 + (v3 + v4)) = v2
                                           - 108
                                           + *(_BYTE *)(a2 + (v3 + v4))
  return (*(uint64_t (**)(void))(v6 + 8LL * (((v3 - 1 != a1) * v5) ^ v2)))();
}

uint64_t sub_10019B7D8()
{
  STACK[0x550] = v3;
  *(void *)(v0 - 208) = 0xD3D3D3D3D3D3D3D3LL;
  *(void *)(v0 - 200) = 0x2C2C2C2C2A2C2C3ELL;
  int v6 = ((2 * ((v5 - 200) & 0x4BBEC6C8) - (v5 - 200) - 1270793930) ^ 0x20EC706F) * v4;
  *(_DWORD *)(v5 - 196) = v6 - 807439497;
  *(_DWORD *)(v5 - 19sub_100129678(v0 + 2) = v1 - v6 + 1064655780;
  AppMetadataNetworkFetcher.init(batchTask:)(v5 - 200);
  LODWORD(STACK[0x478]) = 510884544;
  uint64_t v7 = ((uint64_t (*)(uint64_t))STACK[0x3D0])(336LL);
  STACK[0x4B8] = v7;
  return (*(uint64_t (**)(void))(v2 + 8LL * (((((v1 + 124) ^ (v7 == 0)) & 1) * (v1 - 874)) ^ v1)))();
}

uint64_t sub_10019B89C(unint64_t a1)
{
  STACK[0x530] = STACK[0x390] + ((2 * (v1 + 33)) ^ 0x4E2u) - 1074;
  STACK[0x458] = a1;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((v1 + 33) ^ (1483 * (v3 > a1)))) - 12LL))();
}

uint64_t sub_10019B934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8)
{
  *(_BYTE *)(a1 + (v12 + a8)) = *(_BYTE *)(v10 + ((v12 + a8) & 0xFLL)) ^ *(_BYTE *)(v14
                                                                                                + (v12 + a8)) ^ ((v11 ^ a6) - 28) ^ *(_BYTE *)(v8 + ((v12 + a8) & 0xFLL)) ^ *(_BYTE *)(((v12 + a8) & 0xFLL) + v9 + 2) ^ (((v12 + a8) & 0xF) * a7);
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * ((1529 * ((v12 + 1 + a8) < 0x150)) ^ v11)) - 12LL))();
}

uint64_t sub_10019B99C@<X0>( uint64_t a1@<X0>, int a2@<W2>, int a3@<W3>, char a4@<W4>, char a5@<W6>, int a6@<W8>)
{
  uint64_t v12 = (a6 + 710 + v9 + a2);
  *(_BYTE *)(a1 + v1sub_100129678(v0 + 2) = *(_BYTE *)(v11 + v12) ^ *(_BYTE *)(v8 + (v12 & 0xF)) ^ *(_BYTE *)(v6 + (v12 & 0xF)) ^ *(_BYTE *)((v12 & 0xF) + v7 + 2) ^ ((v12 & 0xF) * a5) ^ a4;
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((50 * (v9 - 1 != a3)) ^ a6)) - 12LL))();
}

uint64_t sub_10019BA00@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, int8x16_t a37)
{
  __int128 v41 = (int8x16_t *)((char *)&STACK[0x6B0] + v38 + (a8 ^ 0x9E933E41738D190CLL));
  *__int128 v41 = veorq_s8(*v39, a37);
  STACK[0x648] = (v37 ^ 0x59Du) + STACK[0x648] - 949;
  STACK[0x650] = a1;
  STACK[0x658] = a1;
  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 + 8LL * (v37 ^ (159 * (v41 == (int8x16_t *)a1)))) - 4LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

uint64_t sub_10019BA7C@<X0>( unsigned __int8 *a1@<X0>, char a2@<W4>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v58 = (unsigned __int8 *)&STACK[0x19B0] + a3;
  *uint64_t v58 = *a1;
  *(void *)(v58 + 1) = *(void *)(a1 + 1);
  *(_DWORD *)(v58 + 9) = *(_DWORD *)(a1 + 9);
  *(_WORD *)(v58 + 1sub_100129678(v0 + 3) = *(_WORD *)(a1 + 13);
  v58[15] = a1[15];
  uint64_t v59 = *((void *)a1 + 1);
  *((void *)v58 + sub_100129678(v0 + 2) = *(void *)a1;
  *((void *)v58 + sub_100129678(v0 + 3) = v59;
  int v60 = (v54 - 1276394614) & 0x4C143FBC;
  uint64_t v61 = *(void *)(v56 + 8LL * (v54 - 871)) - 12LL;
  uint64_t v62 = *(void *)(v56 + 8LL * (v54 - 971)) - 12LL;
  uint64_t v63 = *(void *)(v56 + 8LL * (v54 ^ 0x370));
  int v64 = *(unsigned __int8 *)(v63 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 14) ^ 0x86LL));
  unsigned __int8 v65 = v64 ^ 0x67 ^ (v64 << ((((v54 - 118) & 0xBC) - 24) & 0xFC));
  LOBYTE(v64) = *(_BYTE *)(v63 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 10) ^ 0xCBLL));
  uint64_t v66 = *(void *)(v56 + 8LL * (v54 - 902)) - 4LL;
  unsigned int v67 = *(unsigned __int8 *)(v66 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 1) ^ 0x1ALL));
  int v68 = ((((v67 ^ 0x87) + (v67 & 0xD5 ^ 0x7A) + 1) ^ v67 & 0xDF) >> 4) ^ (v67 >> 1);
  int v69 = ((v58[3] ^ 0xB8) + *(_BYTE *)(v61 + (v58[3] ^ 0x54LL)) - 76) | (((v67 ^ ((v68 ^ a2) - 2 * ((v68 ^ a2) & 0x26 ^ v68 & 2) + 36)) ^ 0x60) << 16);
  LODWORD(v59) = (((*(unsigned __int8 *)(v62 + (v58[8] ^ 0x65LL)) + (v58[8] ^ 0x34) - 59) ^ 0xF5) << 24) | (((v64 ^ (16 * v64)) ^ 0xAB) << 8) | ((v58[11] ^ 0x3E) + *(_BYTE *)(v61 + (v58[11] ^ 0xD2LL)) - 76);
  LOBYTE(v67) = *(_BYTE *)(v63 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 6) ^ 0x2ELL));
  unsigned int v70 = *(_BYTE *)(v66 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 13) ^ 0x5BLL)) ^ 0x52;
  int v71 = ((v58[7] ^ 0x90) + *(_BYTE *)(v61 + (v58[7] ^ 0x7CLL)) - 76) | ((((v58[4] ^ 0x13)
  int v72 = *(unsigned __int8 *)(v66 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 13) ^ 0x5BLL)) ^ 0x52 ^ (v70 >> 4) ^ (v70 >> 1);
  int v73 = (unsigned __int16)(v65 << 8) | ((v72 - ((2 * v72) & 0x2E) + 23) << 16);
  LOBYTE(v7sub_100129678(v0 + 2) = *(_BYTE *)(v66 + (*((unsigned __int8 *)&STACK[0x19B0] + a3 + 5) ^ 0xEDLL));
  int v74 = ((v72 ^ 0x52) >> 4) ^ ((v72 ^ 0x52) >> 1);
  uint64_t v325 = v66;
  uint64_t v327 = v62;
  uint64_t v328 = v61;
  LODWORD(v59) = v59 & 0xFF00FFFF | (((*(_BYTE *)(v66 + (v58[9] ^ 0x38LL)) ^ ((*(_BYTE *)(v66 + (v58[9] ^ 0x38LL)) ^ 0x52) >> 4) ^ ((*(_BYTE *)(v66 + (v58[9] ^ 0x38LL)) ^ 0x52) >> 1)) ^ 0xF9) << 16);
  uint64_t v326 = v63;
  unsigned int v75 = v69 & 0xFFFF00FF | (((*(unsigned __int8 *)(v62 + (*v58 ^ 0x81LL)) + (*v58 ^ 0xD0) - 59) ^ 0x3C) << 24) | (((*(_BYTE *)(v63 + (v58[2] ^ 0x22LL)) ^ (16 * *(_BYTE *)(v63 + (v58[2] ^ 0x22LL)))) ^ 0x99) << 8);
  LODWORD(STACK[0x3E8]) = (v73 & 0xFFFFFF00 | ((((v58[12] ^ 0x13) + *(unsigned __int8 *)(v62 + (v58[12] ^ 0x42LL)) - 59) ^ 0xE6) << 24) | (*(_BYTE *)(v61 + (v58[15] ^ 0x38LL)) + (v58[15] ^ 0xD4) - 76)) ^ 0x881F266E;
  LODWORD(STACK[0x3C0]) = v75 ^ 0x6B1FA472;
  LODWORD(STACK[0x2C0]) = (v71 & 0xFF00FFFF | ((v72 ^ 0x6C ^ (v74
                                                                                              - ((2 * v74) & 0x22)
                                                                                              + 17)) << 16)) ^ 0x9D0B1E0;
  unint64_t v76 = STACK[0x650];
  LODWORD(STACK[0x3C8]) = v59 ^ 0xDCF9E3EC;
  unsigned int v323 = (_BYTE *)STACK[0x658];
  unint64_t v324 = v76;
  STACK[0x3E0] = 14LL;
  unsigned int v77 = (unsigned __int8 *)v76;
  uint64_t v78 = v63;
  LODWORD(v58) = *(unsigned __int8 *)(v63 + (*(unsigned __int8 *)(v76 + 14) ^ 0xD9LL));
  STACK[0x2F0] = 4LL;
  LODWORD(v335) = (v60 - 1479) | 0x280;
  HIDWORD(a1sub_100129678(v0 + 2) = (v60 - 39426023) & 0x25993DB;
  uint64_t v79 = *(unsigned __int8 *)(v76 + 4);
  int v80 = (((v335 + 124) ^ HIDWORD(a12) ^ (16 * (_DWORD)v58))
       - ((2 * ((v335 + 124) ^ HIDWORD(a12) ^ (16 * (_DWORD)v58))) & 0xFFFFFFA0)
       + 84) ^ v58;
  LOBYTE(v76) = *(_BYTE *)(v62 + (v79 ^ 0xE6));
  STACK[0x430] = 15LL;
  int v81 = v77[15];
  unsigned __int8 v82 = v76 + (v79 ^ 0xB7) - 59;
  if ((v81 & 0x20) != 0) {
    int v83 = -32;
  }
  else {
    int v83 = 32;
  }
  int v341 = *(unsigned __int8 *)(v61 + ((v83 + v81) ^ 0xDDLL)) + ((v83 + v81) ^ v57);
  STACK[0x3D8] = 6LL;
  int v84 = *(unsigned __int8 *)(v63 + (v77[6] ^ 0x51LL));
  STACK[0x388] = 12LL;
  STACK[0x288] = 0LL;
  HIDWORD(v85) = v84 ^ (((16 * v84) ^ 0x40) - ((2 * ((16 * v84) ^ 0x40)) & 0xFFFFFFBF) + 84) ^ 0x3F;
  LODWORD(v85) = BYTE4(v85) & 0xF8;
  unint64_t v86 = ((v85 >> 3) | ((unint64_t)(v82 ^ 0xE5u) << 13)) ^ 0x58F620A6;
  int v87 = (v86 >> 21) | ((_DWORD)v86 << 11);
  int v339 = *(unsigned __int8 *)(v62 + (v77[12] ^ 0xF7) - 2 * ((v77[12] ^ 0xF7) & 0xAEu) + 174) - (v77[12] ^ 0xF7);
  uint64_t v88 = *v77;
  int v89 = v88 ^ 0x76;
  LODWORD(v88) = *(unsigned __int8 *)(v62 + (v88 ^ 0xD8));
  STACK[0x390] = 3LL;
  uint64_t v90 = v77[3];
  int v91 = v88 + v89 - 2 * v89;
  STACK[0x398] = 8LL;
  int v338 = (v90 ^ 0xFFFFFFBB) + *(unsigned __int8 *)(v61 + (v90 ^ 0x57));
  LOBYTE(v88) = (v77[8] ^ 0xA7) + *(_BYTE *)(v62 + (v77[8] ^ 0xF6LL));
  char v336 = v88 - ((2 * v88 + 10) & 0x4E);
  STACK[0x2F8] = 7LL;
  LOBYTE(v89) = (v77[7] ^ 0xE9) + *(_BYTE *)(v61 + (v77[7] ^ 5LL));
  STACK[0x210] = 13LL;
  int v92 = *(unsigned __int8 *)(v325 + (v77[13] ^ 0x12LL));
  unsigned int v93 = v92 ^ ((((v92 ^ 0x52u) >> 3) & 4 ^ v92 & 0xA4 | ((v92 ^ 0x52u) >> 3) & 0xFFFFFFFB ^ (v92 ^ 0x52) & 0x5A) >> 1);
  LOBYTE(v9sub_100129678(v0 + 2) = *(_BYTE *)(v325 + (v77[5] ^ 0x9CLL));
  LODWORD(v90) = ((v92 ^ 0x52) >> 4) ^ ((v92 ^ 0x52) >> 1);
  int v94 = (v89 - 76) | ((v92 ^ 0xE6 ^ (v90 - ((2 * v90) & 0x22) + 17)) << 16);
  int v95 = *(unsigned __int8 *)(v325 + (v77[9] ^ 0x76LL));
  LOBYTE(v90) = ~(v95 & 8) + 2 * (v95 & 8);
  unsigned int v96 = (v95 ^ 0x52u) >> 3;
  char v97 = v90 + 16;
  char v98 = 14 - v90;
  LODWORD(STACK[0x250]) = -1605674332;
  int v99 = v95 ^ ((((v96 + v97 - 15) ^ (v95 ^ 0x52) & 0xF7) & 0xFE) >> 1);
  unsigned int v100 = *(_BYTE *)(v325 + (v77[1] ^ 0xCFLL)) ^ 0x52;
  int v101 = *(unsigned __int8 *)(v325 + (v77[1] ^ 0xCFLL)) ^ 0x52 ^ (v100 >> 4) ^ (v100 >> 1);
  char v102 = *(_BYTE *)(v63 + (v77[10] ^ 0xFBLL));
  uint64_t v103 = *(void *)(v56 + 8LL * (v60 ^ 0x7DF)) - 4LL;
  LODWORD(v33sub_100129678(v0 + 3) = (v102 ^ (16 * v102)) ^ 0xAD;
  int v104 = *(_DWORD *)(v103 + 4LL * ((v102 ^ (16 * v102)) ^ 0x22u));
  HIDWORD(v105) = v104 ^ 0xE4F2;
  LODWORD(v105) = v104 ^ 0x44A30000;
  uint64_t v106 = *(void *)(v56 + 8LL * (v60 ^ 0x78E)) - 4LL;
  int v107 = *(_DWORD *)(v106 + 4LL * (v93 ^ 0x27));
  LODWORD(a28) = v60;
  LODWORD(v33sub_100129678(v0 + 2) = v91 - 60;
  uint64_t v108 = *(void *)(v56 + 8LL * (v60 - 1730)) - 12LL;
  int v109 = (v105 >> 16) ^ *(_DWORD *)(v108 + 4LL * ((v91 - 60) ^ 0xF9u)) ^ (16 * (v107 ^ 0x1F91C58E)
                                                                                         + 1352758830
                                                                                         - ((32 * (v107 ^ 0x1F91C58E)) & 0xA142EC40));
  HIDWORD(v33sub_100129678(v0 + 2) = v94 ^ v87;
  unsigned int v110 = v94 ^ v87 ^ 0xDD03A24B;
  uint64_t v111 = *(void *)(v56 + 8LL * (v60 ^ 0x7C9));
  unsigned int v112 = *(_DWORD *)(v111 + 4LL * ((v94 ^ v87) ^ 0x78u)) ^ v107 ^ (v109
                                                                                  + 265010019
                                                                                  - ((2 * v109) & 0x1F9776C6));
  HIDWORD(v335) = v80;
  int v113 = *(_DWORD *)(v103 + 4LL * (v80 ^ 0x71u));
  HIDWORD(v105) = v113 ^ 0xE4F2;
  LODWORD(v105) = v113 ^ 0x44A30000;
  HIDWORD(v33sub_100129678(v0 + 3) = v101;
  int v114 = *(_DWORD *)(v106 + 4LL * (v101 ^ 0xBFu)) ^ 0x1F91C58E;
  int v115 = (v105 >> 16) ^ (16 * v114 + 1352758830 - ((32 * v114) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * HIBYTE(v110));
  HIDWORD(v331) = (*(_BYTE *)(v61 + (v77[11] ^ 0x12LL)) + (v77[11] ^ 0xFE) - 76);
  int v116 = *(_DWORD *)(v111 + 4LL * (HIDWORD(v331) ^ 0xB9u)) ^ v114 ^ (v115 + 265010019 - ((2 * v115) & 0x1F9776C6));
  unsigned int v117 = *(unsigned __int8 *)(v78 + (v77[2] ^ 0x26LL)) ^ 0xFFFFFFEC;
  LODWORD(v331) = v117 ^ (16 * v117);
  int v118 = *(_DWORD *)(v103 + 4LL * (v331 ^ 0xFBu));
  HIDWORD(v105) = v118 ^ 0xE4F2;
  LODWORD(v105) = v118 ^ 0x44A30000;
  int v119 = *(_DWORD *)(v106 + 4LL * BYTE2(v110)) ^ 0x1F91C58E;
  LODWORD(v330) = (v336 - 20);
  int v120 = (v105 >> 16) ^ *(_DWORD *)(v108 + 4LL * (v330 ^ 0x40)) ^ (16 * v119
                                                                               + 1352758830
                                                                               - ((32 * v119) & 0xA142EC40));
  HIDWORD(v330) = v341 - 76;
  unsigned int v121 = *(_DWORD *)(v111 + 4LL * ((v341 - 76) ^ 0xEBu)) ^ v119 ^ (v120
                                                                                  + 265010019
                                                                                  - ((2 * v120) & 0x1F9776C6));
  unint64_t v334 = __PAIR64__(v93, v99);
  int v122 = *(_DWORD *)(v106 + 4LL * (v99 ^ 0x2Eu)) ^ 0x1F91C58E;
  int v123 = *(_DWORD *)(v103 + 4LL * (BYTE1(v87) ^ 0x31u));
  HIDWORD(v105) = v123 ^ 0xE4F2;
  LODWORD(v105) = v123 ^ 0x44A30000;
  HIDWORD(v329) = v339 - 60;
  int v124 = (v105 >> 16) ^ *(_DWORD *)(v108 + 4LL * ((v339 - 60) ^ 0xF7u)) ^ (16 * v122
                                                                                          + 1352758830
                                                                                          - ((32 * v122) & 0xA142EC40));
  LODWORD(v329) = v338 - 76;
  unsigned int v125 = *(_DWORD *)(v111 + 4LL * ((v338 - 76) ^ 0x33u)) ^ v122 ^ (v124
                                                                                  + 265010019
                                                                                  - ((2 * v124) & 0x1F9776C6));
  int v126 = *(_DWORD *)(v103 + 4LL * (BYTE1(v121) ^ 0xF4u));
  HIDWORD(v105) = v126 ^ 0xE4F2;
  LODWORD(v105) = v126 ^ 0x44A30000;
  int v127 = *(_DWORD *)(v106 + 4LL * (BYTE2(v125) ^ 0xBBu)) ^ 0x1F91C58E;
  unsigned __int8 v128 = BYTE1(v116) ^ 0xAD;
  unsigned int v129 = v127 ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v112) ^ 0x48)) ^ *(_DWORD *)(v111
                                                                            + 4LL * (v116 ^ 0xDBu)) ^ (16 * v127 + 1352758830 - ((32 * v127) & 0xA142EC40)) ^ (v105 >> 16);
  int v130 = *(_DWORD *)(v106 + 4LL * (BYTE2(v112) ^ 0x7Du));
  int v131 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v125 ^ 0x22E) >> 8));
  HIDWORD(v105) = v131 ^ 0xE4F2;
  LODWORD(v105) = v131 ^ 0x44A30000;
  int v132 = (16 * (v130 ^ 0x1F91C58E) + 1352758830 - ((32 * (v130 ^ 0x1F91C58E)) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * ((v116 ^ 0xF15ADDBu) >> 24)) ^ (v105 >> 16);
  unsigned int v133 = *(_DWORD *)(v111 + 4LL * (v121 ^ 0x80u)) ^ v130 ^ (v132 + 265010019 - ((2 * v132) & 0x1F9776C6));
  int v134 = *(_DWORD *)(v106 + 4LL * (BYTE2(v116) ^ 0xD6u)) ^ 0x1F91C58E;
  int v135 = *(_DWORD *)(v103 + 4LL * (BYTE1(v112) ^ 0x23u));
  HIDWORD(v105) = v135 ^ 0xE4F2;
  LODWORD(v105) = v135 ^ 0x44A30000;
  unsigned int v136 = (16 * v134 + 1352758830 - ((32 * v134) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v121) ^ 0x19));
  int v137 = *(_DWORD *)(v103 + 4LL * v128);
  unsigned int v138 = *(_DWORD *)(v111 + 4LL * (v125 ^ 0x2Eu)) ^ v134 ^ (v105 >> 16) ^ (v136
                                                                                          + 265010019
                                                                                          - ((2 * v136) & 0x1F9776C6));
  HIDWORD(v105) = v137 ^ 0xE4F2;
  LODWORD(v105) = v137 ^ 0x44A30000;
  int v139 = *(_DWORD *)(v106 + 4LL * (BYTE2(v121) ^ 0x32u));
  int v140 = (v105 >> 16) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v125) ^ 0xBD)) ^ (16 * (v139 ^ 0x1F91C58E)
                                                                         + 1352758830
                                                                         - ((32 * (v139 ^ 0x1F91C58E)) & 0xA142EC40));
  int v141 = v139 ^ *(_DWORD *)(v111 + 4LL * (v112 ^ 0x2Eu)) ^ 0x6E58134A ^ (v140
                                                                                        + 265010019
                                                                                        - ((2 * v140) & 0x1F9776C6));
  unsigned int v142 = v141
       - ((2 * v141) & 0x5F186BF6)
       + 797718011
       - ((2 * (v141 - ((2 * v141) & 0x5F186BF6) + 797718011)) & 0x9ADF7E94)
       + 1299169098;
  int v143 = *(_DWORD *)(v106 + 4LL * (BYTE2(v142) ^ 0xACu));
  BYTE2(v125) = BYTE2(v138) ^ 0xEB;
  int v144 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v138 ^ 0xDFF9) >> 8));
  unsigned int v145 = (16 * (v143 ^ 0x1F91C58E) + 1352758830 - ((32 * (v143 ^ 0x1F91C58E)) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v129) ^ 0x99)) ^ (((v144 ^ 0x44A3E4F2u) >> (v129 & 0x10) >> (v129 & 0x10 ^ 0x10)) + ((v144 << 16) ^ 0xE4F20000));
  unsigned int v146 = *(_DWORD *)(v111 + 4LL * (v133 ^ 0x57u)) ^ v143 ^ (v145 + 265010019 - ((2 * v145) & 0x1F9776C6));
  LOWORD(v135) = v129 ^ 0x6F43;
  int v147 = *(_DWORD *)(v106 + 4LL * ((v129 ^ 0x70916F43) >> 16)) ^ 0x1F91C58E;
  int v148 = *(_DWORD *)(v103 + 4LL * (BYTE1(v142) ^ 0x2Cu));
  HIDWORD(v105) = v148 ^ 0xE4F2;
  LODWORD(v105) = v148 ^ 0x44A30000;
  int v149 = (16 * v147 + 1352758830 - ((32 * v147) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v133) ^ 0x54)) ^ (v105 >> 16);
  int v150 = *(_DWORD *)(v108 + 4LL * (HIBYTE(v138) ^ 5));
  HIDWORD(v105) = v150 ^ 0x22E;
  LODWORD(v105) = v150 ^ 0x50A17400;
  int v151 = v105 >> 10;
  int v152 = *(_DWORD *)(v111 + 4LL * (v138 ^ 0xF9u)) ^ v147;
  int v153 = *(_DWORD *)(v103 + 4LL * BYTE1(v135));
  HIDWORD(v105) = v153 ^ 0xE4F2;
  LODWORD(v105) = v153 ^ 0x44A30000;
  unsigned int v154 = v152 ^ (v149 + 265010019 - ((2 * v149) & 0x1F9776C6));
  int v155 = *(_DWORD *)(v106 + 4LL * (BYTE2(v133) ^ 0xA4u)) ^ 0x1F91C58E;
  int v156 = v151 ^ 0x25EB099C;
  unsigned int v157 = (v151 ^ 0x25EB099Cu) >> 22;
  int v158 = (v156 << 10) ^ (16 * v155) ^ v157;
  int v159 = *(_DWORD *)(v111 + 4LL * (v142 ^ 0x79u)) ^ v155 ^ (v105 >> 16);
  int v160 = *(_DWORD *)(v103 + 4LL * (BYTE1(v133) ^ 8u));
  HIDWORD(v105) = v160 ^ 0xE4F2;
  LODWORD(v105) = v160 ^ 0x44A30000;
  int v161 = v159 ^ (v158 + 265010019 - 2 * (v158 & 0xFCBBB6B ^ v157 & 8));
  int v162 = *(_DWORD *)(v106 + 4LL * BYTE2(v125)) ^ 0x1F91C58E;
  int v163 = (v105 >> 16) ^ (16 * v162 + 1352758830 - ((32 * v162) & 0xA142EC40)) ^ *(_DWORD *)(v108
                                                                                          + 4LL * (HIBYTE(v142) ^ 0xA4));
  unsigned int v164 = *(_DWORD *)(v111 + 4LL * (v135 ^ 0x33u)) ^ v162 ^ (v163 + 265010019 - ((2 * v163) & 0x1F9776C6));
  int v165 = *(_DWORD *)(v106 + 4LL * (BYTE2(v164) ^ 0x62u)) ^ 0x1F91C58E;
  unsigned int v166 = (16 * v165 + 1352758830 - ((32 * v165) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v146) ^ 0xC2));
  unsigned __int8 v167 = BYTE2(v161) ^ 0xF7;
  int v168 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v161 ^ 0xE4A6) >> 8));
  HIDWORD(v105) = v168 ^ 0xE4F2;
  LODWORD(v105) = v168 ^ 0x44A30000;
  unsigned int v169 = *(_DWORD *)(v111 + 4LL * (v154 ^ 0x68u)) ^ v165 ^ (v105 >> 16) ^ (v166
                                                                                          + 265010019
                                                                                          - ((2 * v166) & 0x1F9776C6));
  int v170 = *(_DWORD *)(v106 + 4LL * (BYTE2(v146) ^ 0xCAu)) ^ 0x1F91C58E;
  int v171 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v164 ^ 0x2957) >> 8));
  HIDWORD(v105) = v171 ^ 0xE4F2;
  LODWORD(v105) = v171 ^ 0x44A30000;
  int v172 = (16 * v170 + 1352758830 - ((32 * v170) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v154) ^ 0xCE)) ^ (v105 >> 16);
  unsigned int v173 = *(_DWORD *)(v111 + 4LL * (v161 ^ 0x15u)) ^ v170 ^ (v172 + 265010019 - ((2 * v172) & 0x1F9776C6));
  int v174 = *(_DWORD *)(v106 + 4LL * (BYTE2(v154) ^ 0x60u)) ^ 0x1F91C58E;
  int v175 = *(_DWORD *)(v103 + 4LL * (BYTE1(v146) ^ 0x5Eu));
  HIDWORD(v105) = v175 ^ 0xE4F2;
  LODWORD(v105) = v175 ^ 0x44A30000;
  int v176 = (16 * v174 + 1352758830 - ((32 * v174) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * ((v161 ^ 0xF1F7E4A6) >> 24)) ^ (v105 >> 16);
  int v177 = *(_DWORD *)(v111 + 4LL * (v164 ^ 0x57u)) ^ v174 ^ (v176 + 265010019 - ((2 * v176) & 0x1F9776C6));
  if ((v154 & 0x1000) != 0) {
    int v178 = -16;
  }
  else {
    int v178 = 16;
  }
  int v179 = (BYTE1(v154) ^ 0xC) + v178;
  int v180 = *(_DWORD *)(v106 + 4LL * v167) ^ 0x1F91C58E;
  unsigned int v181 = *(_DWORD *)(v103 + 4LL * (v179 ^ 0x83u));
  unsigned int v182 = *(_DWORD *)(v108 + 4LL * (HIBYTE(v164) ^ 0xA1)) ^ HIWORD(v181) ^ (16 * v180
                                                                         + 1352758830
                                                                         - ((32 * v180) & 0xA142EC40));
  int v183 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v177 ^ 0x8D48) >> 8));
  unsigned int v184 = *(_DWORD *)(v111 + 4LL * (v146 ^ 0xEDu)) ^ v180 ^ ((v182 ^ (v181 << 16) ^ 0xE4F244A3)
                                                                           + 265010019
                                                                           - 2
                                                                           * ((v182 ^ (v181 << 16) ^ 0xE4F244A3) & 0xFCBBB6B ^ v182 & 8));
  HIDWORD(v185) = v183 ^ 0xE4F2;
  LODWORD(v185) = v183 ^ 0x44A30000;
  int v186 = *(_DWORD *)(v106 + 4LL * ((v184 ^ 0xEFBC3B44) >> 16)) ^ 0x1F91C58E;
  int v187 = (v185 >> 16) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v169) ^ 0xCC)) ^ (16 * v186
                                                                         + 1352758830
                                                                         - ((32 * v186) & 0xA142EC40));
  int v188 = *(_DWORD *)(v111 + 4LL * (v173 ^ 0xA9u)) ^ v186 ^ (v187 + 265010019 - ((2 * v187) & 0x1F9776C6));
  int v189 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v184 ^ 0x3B44) >> 8));
  HIDWORD(v185) = v189 ^ 0xE4F2;
  LODWORD(v185) = v189 ^ 0x44A30000;
  LOWORD(v186) = v169 ^ 0xD583;
  int v190 = *(_DWORD *)(v106 + 4LL * (((v169 ^ 0x255FD583) >> 16) ^ 0xC3u)) ^ 0x1F91C58E;
  int v191 = (v185 >> 16) ^ *(_DWORD *)(v108 + 4LL * HIBYTE(v173)) ^ (16 * v190 + 1352758830 - ((32 * v190) & 0xA142EC40));
  unsigned int v192 = *(_DWORD *)(v111 + 4LL * (v177 ^ 0x48u)) ^ v190 ^ (v191 + 265010019 - ((2 * v191) & 0x1F9776C6));
  int v193 = *(_DWORD *)(v106 + 4LL * ((v173 ^ 0xE93411A9) >> 16)) ^ 0x1F91C58E;
  int v194 = *(_DWORD *)(v103 + 4LL * BYTE1(v186));
  HIDWORD(v185) = v194 ^ 0xE4F2;
  LODWORD(v185) = v194 ^ 0x44A30000;
  int v195 = (16 * v193 + 1352758831 + ~((32 * v193) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * ((v177 ^ 0x807D8D48) >> 24)) ^ (v185 >> 16);
  int v196 = *(_DWORD *)(v111 + 4LL * (v184 ^ 0x77u)) ^ v193 ^ (v195 + 265010019 - ((2 * v195) & 0x1F9776C6));
  int v197 = *(_DWORD *)(v106 + 4LL * (BYTE2(v177) ^ 0xBEu)) ^ 0x1F91C58E;
  int v198 = *(_DWORD *)(v103 + 4LL * (BYTE1(v173) ^ 0x82u));
  HIDWORD(v185) = v198 ^ 0xE4F2;
  LODWORD(v185) = v198 ^ 0x44A30000;
  int v199 = (v185 >> 16) ^ *(_DWORD *)(v108 + 4LL * ((v184 ^ 0xEFBC3B44) >> 24)) ^ (16 * v197
                                                                               + 1352758830
                                                                               - ((32 * v197) & 0xA142EC40));
  unsigned int v200 = *(_DWORD *)(v111 + 4LL * v186) ^ v197 ^ (v199 + 265010019 - ((2 * v199) & 0x1F9776C6));
  int v201 = *(_DWORD *)(v106 + 4LL * ((v200 ^ 0x950DA39D) >> 16)) ^ 0x1F91C58E;
  unsigned int v202 = (16 * v201 + 1352758830 - ((32 * v201) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * ((v188 ^ 0x11521BCAu) >> 24));
  int v203 = *(_DWORD *)(v103 + 4LL * (BYTE1(v196) ^ 0x89u));
  HIDWORD(v185) = v203 ^ 0xE4F2;
  LODWORD(v185) = v203 ^ 0x44A30000;
  unsigned __int8 v204 = BYTE1(v192) ^ 0xD1;
  int v205 = *(_DWORD *)(v111 + 4LL * (v192 ^ 0x88u)) ^ v201 ^ (v185 >> 16) ^ 0x71C9D6C4 ^ (v202 + 265010019 - ((2 * v202) & 0x1F9776C6));
  int v206 = *(_DWORD *)(v106 + 4LL * ((v188 ^ 0x11521BCAu) >> 16));
  unsigned int v207 = v205 - ((2 * v205) & 0x4D3D61A4);
  int v208 = *(_DWORD *)(v103 + 4LL * (BYTE1(v200) ^ 0x30u));
  HIDWORD(v185) = v208 ^ 0xE4F2;
  LODWORD(v185) = v208 ^ 0x44A30000;
  int v209 = (16 * (v206 ^ 0x1F91C58E) + 1352758830 - ((32 * (v206 ^ 0x1F91C58E)) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v192) ^ 0xDF)) ^ (v185 >> 16);
  unsigned int v210 = *(_DWORD *)(v111 + 4LL * (v196 ^ 0x43u)) ^ v206 ^ (v209 + 265010019 - ((2 * v209) & 0x1F9776C6));
  int v211 = *(_DWORD *)(v106 + 4LL * (BYTE2(v192) ^ 0xA7u)) ^ 0x1F91C58E;
  int v212 = *(_DWORD *)(v103 + 4LL * (BYTE1(v188) ^ 0x88u));
  HIDWORD(v185) = v212 ^ 0xE4F2;
  LODWORD(v185) = v212 ^ 0x44A30000;
  int v213 = (16 * v211 + 1352758830 - ((32 * v211) & 0xA142EC40)) ^ *(_DWORD *)(v108
                                                                           + 4LL
                                                                           * ((((v196 ^ 0x7A851A70u) >> 24) ^ -((v196 ^ 0x7A851A70u) >> 24) ^ ((((v196 ^ 0x7A851A70u) >> 24) ^ 0xFFFFFF16) + 234))
                                                                            + 233)) ^ (v185 >> 16);
  int v214 = *(_DWORD *)(v111 + 4LL * (v200 ^ 0x9Du)) ^ v211;
  int v215 = *(_DWORD *)(v106 + 4LL * ((v196 ^ 0x7A851A70u) >> 16));
  int v216 = v214 ^ (v213 + 265010019 - ((2 * v213) & 0x1F9776C6));
  int v217 = *(_DWORD *)(v103 + 4LL * v204);
  HIDWORD(v185) = v217 ^ 0xE4F2;
  LODWORD(v185) = v217 ^ 0x44A30000;
  int v218 = (v185 >> 16) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v200) ^ 0x7C)) ^ (16 * (v215 ^ 0x1F91C58E)
                                                                         + 1352758830
                                                                         - ((32 * (v215 ^ 0x1F91C58E)) & 0xA142EC40));
  int v219 = *(_DWORD *)(v111 + 4LL * (v188 ^ 0xF9u)) ^ v215 ^ (v218 + 265010019 - ((2 * v218) & 0x1F9776C6));
  int v220 = *(_DWORD *)(v106 + 4LL * (BYTE2(v219) ^ 0x16u));
  int v221 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v216 ^ 0xDE69) >> 8));
  HIDWORD(v185) = v221 ^ 0xE4F2;
  LODWORD(v185) = v221 ^ 0x44A30000;
  v207 -= 1499549486;
  int v222 = (v185 >> 16) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v207) ^ 0xCF)) ^ (16 * (v220 ^ 0x1F91C58E)
                                                                         + 1352758830
                                                                         - ((32 * (v220 ^ 0x1F91C58E)) & 0xA142EC40));
  int v223 = *(_DWORD *)(v103 + 4LL * (BYTE1(v219) ^ 0xFAu));
  unsigned int v224 = *(_DWORD *)(v111 + 4LL * (v210 ^ 0x5Du)) ^ v220 ^ (v222 + 265010019 - ((2 * v222) & 0x1F9776C6));
  HIDWORD(v185) = v223 ^ 0xE4F2;
  LODWORD(v185) = v223 ^ 0x44A30000;
  int v225 = *(_DWORD *)(v106 + 4LL * (BYTE2(v207) ^ 0xF4u)) ^ 0x1F91C58E;
  unsigned int v226 = v225 ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v210) ^ 0xC2)) ^ *(_DWORD *)(v111
                                                                            + 4LL * (v216 ^ 0x69u)) ^ (16 * v225 + 1352758830 - ((32 * v225) & 0xA142EC40)) ^ ((v185 >> 16) + 265010019 - ((2 * (v185 >> 16)) & 0x1F9776C6));
  int v227 = *(_DWORD *)(v106 + 4LL * (BYTE2(v210) ^ 0x6Bu)) ^ 0x1F91C58E;
  int v228 = *(_DWORD *)(v103 + 4LL * (BYTE1(v207) ^ 0xDBu));
  HIDWORD(v185) = v228 ^ 0xE4F2;
  LODWORD(v185) = v228 ^ 0x44A30000;
  int v229 = (16 * v227 + 1352758830 - ((32 * v227) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * ((v216 ^ 0x5FEEDE69u) >> 24)) ^ (v185 >> 16);
  int v230 = *(_DWORD *)(v111
                   + 4LL
  int v231 = *(_DWORD *)(v106 + 4LL * (BYTE2(v216) ^ 0x2Du)) ^ 0x1F91C58E;
  int v232 = *(_DWORD *)(v103 + 4LL * (BYTE1(v210) ^ 0x1Au));
  HIDWORD(v185) = v232 ^ 0xE4F2;
  LODWORD(v185) = v232 ^ 0x44A30000;
  int v233 = (v185 >> 16) ^ *(_DWORD *)(v108
                                  + 4LL
  unsigned int v234 = *(_DWORD *)(v111 + 4LL * (v207 ^ 0x89u)) ^ v231 ^ (v233 + 265010019 - ((2 * v233) & 0x1F9776C6));
  int v235 = *(_DWORD *)(v106 + 4LL * ((v234 ^ 0x59A5F4B7) >> 16)) ^ 0x1F91C58E;
  int v236 = *(_DWORD *)(v103 + 4LL * ((unsigned __int16)(v230 ^ 0x872B) >> 8));
  HIDWORD(v185) = v236 ^ 0xE4F2;
  LODWORD(v185) = v236 ^ 0x44A30000;
  int v237 = (16 * v235 + 1352758830 - ((32 * v235) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v224) ^ 0xCD)) ^ (v185 >> 16);
  int v238 = *(_DWORD *)(v111 + 4LL * (v226 ^ 0xEEu)) ^ v235 ^ (v237 + 265010019 - ((2 * v237) & 0x1F9776C6));
  int v239 = *(_DWORD *)(v106 + 4LL * (BYTE2(v224) ^ 0xB4u)) ^ 0x1F91C58E;
  int v240 = *(_DWORD *)(v103 + 4LL * (BYTE1(v234) ^ 0x67u));
  HIDWORD(v185) = v240 ^ 0xE4F2;
  LODWORD(v185) = v240 ^ 0x44A30000;
  int v241 = v239 ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v226) ^ 0xD6)) ^ *(_DWORD *)(v111
                                                                            + 4LL * (v230 ^ 0x18u)) ^ (16 * v239 + 1352758830 - ((32 * v239) & 0xA142EC40)) ^ ((v185 >> 16) + 265010019 - ((2 * (v185 >> 16)) & 0x1F9776C6));
  int v242 = *(_DWORD *)(v106 + 4LL * (BYTE2(v226) ^ 0x56u)) ^ 0x1F91C58E;
  int v243 = *(_DWORD *)(v103 + 4LL * (BYTE1(v224) ^ 0x7Eu));
  HIDWORD(v185) = v243 ^ 0xE4F2;
  LODWORD(v185) = v243 ^ 0x44A30000;
  int v244 = *(_DWORD *)(v108 + 4LL * ((v230 ^ 0x911B872B) >> 24)) ^ v242 ^ 0x6D41727E ^ (16 * v242
                                                                                    + 1352758830
                                                                                    - ((32 * v242) & 0xA142EC40)) ^ (v185 >> 16);
  int v245 = *(_DWORD *)(v106 + 4LL * (BYTE2(v230) ^ 0xD8u)) ^ 0x1F91C58E;
  int v246 = *(_DWORD *)(v103 + 4LL * (BYTE1(v226) ^ 0xE4u));
  HIDWORD(v185) = v246 ^ 0xE4F2;
  LODWORD(v185) = v246 ^ 0x44A30000;
  int v247 = (v185 >> 16) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v234) ^ 0xB0)) ^ (16 * v245
                                                                         + 1352758830
                                                                         - ((32 * v245) & 0xA142EC40));
  unsigned int v248 = *(_DWORD *)(v111 + 4LL * (v224 ^ 0x28u)) ^ v245 ^ (v247 + 265010019 - ((2 * v247) & 0x1F9776C6));
  int v249 = *(_DWORD *)(v103 + 4LL * (BYTE1(v248) ^ 0x66u));
  HIDWORD(v185) = v249 ^ 0xE4F2;
  LODWORD(v185) = v249 ^ 0x44A30000;
  int v250 = v185 >> 16;
  HIDWORD(v185) = *(_DWORD *)(v111 + 4LL * (v234 ^ 0xB7u)) ^ 0x13431FD9;
  LODWORD(v185) = HIDWORD(v185);
  int v251 = v185 >> 21;
  LODWORD(v185) = __ROR4__(v244, 21);
  int v252 = v241 ^ 0x177CD9D9;
  unsigned __int8 v253 = v241;
  int v254 = *(_DWORD *)(v106 + 4LL * (BYTE2(v238) ^ 0x74u)) ^ 0x1F91C58E;
  unsigned int v255 = *(_DWORD *)(v108 + 4LL * ((v241 ^ 0x177CD9D9u) >> 24)) ^ 0x6D41727E ^ v254 ^ v250 ^ (16 * v254
                                                                                            + 1352758830
                                                                                            - ((32 * v254) & 0xA142EC40));
  LODWORD(v185) = v251 ^ v185 ^ 0x549BF9D9;
  HIDWORD(v185) = v185;
  int v256 = v185 >> 11;
  int v257 = *(_DWORD *)(v111 + 4LL * ((v185 >> 11) ^ 0xEFu));
  int v258 = v255 & 0x200 | 0xD185D72;
  if ((v255 & 0x200 & (v257 ^ 0xFCBBB63)) != 0) {
    int v258 = 439401188 - v258;
  }
  unsigned int v259 = ((v257 ^ 0x13431FD9) - 219700594 + v258) ^ v255 & 0xFFFFFDFF;
  int v260 = *(_DWORD *)(v106 + 4LL * BYTE2(v252)) ^ 0x1F91C58E;
  int v261 = *(_DWORD *)(v103 + 4LL * (((unsigned __int16)(v238 ^ 0x3D47) >> 8) ^ 0x93u));
  HIDWORD(v26sub_100129678(v0 + 2) = v261 ^ 0xE4F2;
  LODWORD(v26sub_100129678(v0 + 2) = v261 ^ 0x44A30000;
  unsigned int v263 = (16 * v260 + 1352758830 - ((32 * v260) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * ((v256 ^ 0x1EA133EFu) >> 24));
  unsigned int v264 = *(_DWORD *)(v111 + 4LL * (v248 ^ 0xDu)) ^ v260 ^ (v262 >> 16) ^ (v263
                                                                                         + 265010019
                                                                                         - ((2 * v263) & 0x1F9776C6));
  int v265 = *(_DWORD *)(v108 + 4LL * ((v238 ^ 0xD4B73D47) >> 24));
  int v266 = *(_DWORD *)(v106 + 4LL * (BYTE2(v256) ^ 0x62u)) ^ 0x1F91C58E;
  int v267 = *(_DWORD *)(v103 + 4LL * BYTE1(v252));
  HIDWORD(v26sub_100129678(v0 + 2) = v267 ^ 0xE4F2;
  LODWORD(v26sub_100129678(v0 + 2) = v267 ^ 0x44A30000;
  int v268 = (16 * v266 + 1352758830 - ((32 * v266) & 0xA142EC40)) ^ *(_DWORD *)(v108 + 4LL * (HIBYTE(v248) ^ 0x32)) ^ (v262 >> 16);
  int v269 = *(_DWORD *)(v111 + 4LL * (v238 ^ 0x74u)) ^ v266 ^ (v268 + 265010019 - ((2 * v268) & 0x1F9776C6));
  unsigned int v270 = (char *)*(&off_10027AEF0 + (v60 ^ 0x748)) - 8;
  unsigned int v271 = (char *)*(&off_10027AEF0 + v60 - 1636) - 8;
  unsigned int v272 = *(_DWORD *)&v271[4 * ((v259 ^ 0xF137909F) >> 16)] ^ 0x6C1C7C95;
  LODWORD(v337) = v272 ^ ((HIBYTE(v264) ^ 0x9FD52929) - 83749015 + *(_DWORD *)&v270[4 * (HIBYTE(v264) ^ 0xB4)]) ^ (v272 >> 2) ^ (v272 >> 4);
  int v273 = (v337 & 0x1000000 ^ 0xFFE9CFFA) + 2 * (v337 & 0x1000000);
  uint64_t v274 = (uint64_t)*(&off_10027AEF0 + (v60 ^ 0x763));
  int v275 = *(_DWORD *)(v274 + 4LL * (v269 ^ 0x9Eu));
  int v276 = *(_DWORD *)(v106 + 4LL * (BYTE2(v248) ^ 0x72u));
  int v277 = *(_DWORD *)(v103 + 4LL * (BYTE1(v256) ^ 0xA0u));
  v276 ^= 0x1F91C58Eu;
  HIDWORD(v26sub_100129678(v0 + 2) = v277 ^ 0xE4F2;
  LODWORD(v26sub_100129678(v0 + 2) = v277 ^ 0x44A30000;
  int v278 = (v262 >> 16) ^ v265 ^ (16 * v276 + 1352758830 - ((32 * v276) & 0xA142EC40));
  int v279 = *(_DWORD *)(v111 + 4LL * (v253 ^ 0xEAu)) ^ v276 ^ (v278 + 265010019 - ((2 * v278) & 0x1F9776C6));
  unsigned int v280 = *(_DWORD *)&v271[4 * (BYTE2(v279) ^ 0x99)] ^ 0x6C1C7C95;
  unsigned int v281 = ((v264 ^ 0x7B)
        - 1356832173
        + ((2 * (((v264 ^ 0x7B) + 112) & 0x1E6 ^ (v264 | 0x7FFFFFFB))) ^ 0x60412009)) ^ v280 ^ ((((v259 ^ 0xF137909F) >> 24) ^ 0x9FD52929) - 83749015 + *(_DWORD *)&v270[4 * (((v259 ^ 0xF137909F) >> 24) ^ 0xB4)]) ^ (v280 >> 2) ^ *(_DWORD *)(v274 + 4LL * (v264 ^ 0x79u)) ^ (v280 >> 4);
  uint64_t v282 = v279 ^ 0x6792B6A6u;
  int v283 = *(_DWORD *)&v270[4 * (BYTE3(v282) ^ 0xB4)];
  unsigned __int8 v284 = v269 ^ 0x9C;
  unsigned int v285 = (v269 ^ 0x250E7C9Cu) >> 24;
  HIDWORD(v340) = *(_DWORD *)&v270[4 * (v285 ^ 0xB4)];
  int v286 = (char *)*(&off_10027AEF0 + (int)a28 - 1788) - 8;
  unsigned int v287 = *(_DWORD *)&v286[4 * ((unsigned __int16)(v269 ^ 0x7C9C) >> 8)] ^ 0xCBF94518;
  int v288 = *(_DWORD *)&v271[4 * (BYTE2(v269) ^ 5)];
  LODWORD(v340) = *(_DWORD *)&v271[4 * ((v264 ^ 0xBC37B) >> 16)];
  int v289 = *(_DWORD *)&v286[4 * ((unsigned __int16)(v264 ^ 0xC37B) >> 8)];
  int v290 = *(_DWORD *)&v286[4 * BYTE1(v282)];
  int v291 = *(_DWORD *)&v286[4 * (BYTE1(v259) ^ 0x5E)];
  int v292 = *(_DWORD *)(v274 + 4LL * (v259 ^ 0x9Du));
  HIDWORD(v337) = *(_DWORD *)(v274 + 4LL * (v279 ^ 0xA4u));
  uint64_t v293 = ((v281 ^ v287 ^ (1515496080 * v287)) + 164671944 - ((2 * (v281 ^ v287 ^ (1515496080 * v287))) & 0x13A16390)) ^ LODWORD(STACK[0x2C0]);
  uint64_t v294 = v293 ^ 0x5244C6B3;
  unsigned int v295 = (char *)*(&off_10027AEF0 + (int)a28 - 1786) - 12;
  v323[5] = v295[BYTE2(v294) ^ 0x5ELL] ^ BYTE2(v294) ^ 0x8A ^ ((BYTE2(v294) ^ 0x8A)
                                                             - ((2 * (BYTE2(v294) ^ 0x8A) + 110) & 0x74)
                                                             - 79) ^ 0xB9;
  unsigned int v296 = v288 ^ 0x6C1C7C95 ^ ((BYTE3(v282) ^ 0x9FD52929) - 83749015 + v283) ^ ((v288 ^ 0x6C1C7C95u) >> 2) ^ ((v288 ^ 0x6C1C7C95u) >> 4) ^ v289 ^ 0xCBF94518 ^ v292 ^ (1515496080 * (v289 ^ 0xCBF94518)) ^ ((v259 ^ 0x9F) - 1356832173 + ((2 * (v259 ^ 0x9F) + 224) & 0x3C4 ^ 0x9FBEDFFF));
  unsigned int v297 = (v296 + 1797235826 - ((2 * v296) & 0xD63F4992) + 87) ^ LODWORD(STACK[0x3C0]);
  unsigned int v298 = v297 ^ 0x22A932A6;
  uint64_t v299 = (BYTE1(v298) | 0x88) ^ (v298 >> 8) & 0x88;
  int v300 = (char *)*(&off_10027AEF0 + (int)(a28 ^ 0x766)) - 8;
  v323[2] = (((unsigned __int16)(v297 ^ 0x32A6) >> 8) | 0x88) ^ ((unsigned __int16)(v297 ^ 0x32A6) >> 8) & 0x88 ^ 0x35 ^ ((v300[v299 ^ 0x14] ^ 0x5D) + ((2 * v300[v299 ^ 0x14]) | 0xDF) - 111);
  uint64_t v301 = (uint64_t)*(&off_10027AEF0 + (int)a28 - 1641);
  LODWORD(v299) = *(unsigned __int8 *)(v301 + (BYTE3(v293) ^ 0xEFLL));
  HIDWORD(v26sub_100129678(v0 + 2) = v299 ^ 0xE;
  LODWORD(v26sub_100129678(v0 + 2) = (v299 ^ 0xC0) << 24;
  v323[STACK[0x2F0]] = (v262 >> 29) ^ 0x83;
  int v302 = v273 + 891289328;
  if (((v273 + 1454086) & (v275 ^ 0x32000000)) != 0) {
    int v302 = 888381156 - v273;
  }
  int v303 = v337 & 0xFEFFFFFF ^ (1515496080 * (v290 ^ 0xCBF94518)) ^ ((v275 ^ (v284
                                                                          - 1356832173
                                                                          + ((2 * v284 + 224) & 0x3C4 ^ 0x9FBEDFFF)))
                                                                 - 889835242
                                                                 + v302);
  uint64_t v304 = v290 ^ 0xCBF94518 ^ LODWORD(STACK[0x3C8]) ^ (v303 - 587603030 - ((2 * v303) & 0xB9F3C754));
  uint64_t v305 = v290 ^ 0x18u ^ LOBYTE(STACK[0x3C8]) ^ (v303 - 86 - ((2 * v303) & 0x54)) ^ 0x28LL;
  unsigned int v306 = (char *)*(&off_10027AEF0 + (int)(a28 ^ 0x773)) - 4;
  v323[11] = v306[v305] & 0xFB ^ 0x52 ^ ((v306[v305] | 0xFB) + 24);
  LODWORD(v305) = *(unsigned __int8 *)(v301 + (HIBYTE(v297) ^ 0xF9LL));
  HIDWORD(v307) = v305 ^ 0xE;
  LODWORD(v307) = (v305 ^ 0xC0) << 24;
  unint64_t v308 = STACK[0x288];
  v323[STACK[0x288]] = (v307 >> 29) ^ 0xFB;
  v323[1] = BYTE2(v298) ^ 0x61 ^ ((BYTE2(v298) ^ 0x61) - ((2 * (BYTE2(v298) ^ 0x61) + 110) & 0x74) - 79) ^ 0xB8 ^ v295[BYTE2(v298) ^ 0xB5LL];
  unsigned int v309 = (v285 ^ 0x9FD52929) - 83749015 + HIDWORD(v340);
  int v310 = v340 ^ 0x6C1C7C95 ^ ((v340 ^ 0x6C1C7C95) >> 4) ^ ((v340 ^ 0x6C1C7C95) >> 2);
  int v311 = (v310 & 0x80000 ^ 0x23FFF5B2) + 2 * (v310 & 0x80000);
  BOOL v312 = ((v311 - 603977138) & v309) == 0;
  int v313 = v311 - 59408528;
  int v314 = 1148545748 - v311;
  if (v312) {
    int v314 = v313;
  }
  unsigned int v315 = HIDWORD(v337) ^ (v282 + 2096205936) ^ (((v309 - 544568610 + v314) ^ v310 & 0xFFF7FFFF ^ (1515496080 * (v291 ^ 0xCBF94518)))
                                                               + 841929186
                                                               - 2
                                                               * (((v309 - 544568610 + v314) ^ v310 & 0xFFF7FFFF ^ (1515496080 * (v291 ^ 0xCBF94518))) & 0x322ED1EA ^ ((v309 - 544568610 + v314) ^ v310 & 0xFFF7FFFF) & 8));
  unsigned int v316 = v291 ^ LODWORD(STACK[0x3E8]) ^ (v315 - 2011224482 - ((2 * v315) & 0x103E4CBC));
  v323[STACK[0x210]] = v295[(BYTE2(v316) ^ 0x62) + 213 + ((v316 >> 15) & 0x1A8 ^ 0xFFFFFF7F)] ^ BYTE2(v316) ^ ((BYTE2(v316) ^ 0x62) - ((2 * (BYTE2(v316) ^ 0x62) + 110) & 0x74) - 79) ^ 0xE4;
  int v317 = *(unsigned __int8 *)(v301 + (HIBYTE(v316) ^ 0x31LL));
  HIDWORD(v318) = v317 ^ 0xE;
  LODWORD(v318) = (v317 ^ 0xC0) << 24;
  v323[STACK[0x388]] = (v318 >> 29) ^ 0x50;
  unsigned int v319 = ((v304 ^ 0xCFDDD967) >> 16) ^ 0xFFFFFF94;
  v323[9] = v319 ^ (v319 - ((2 * v319 + 110) & 0x74) - 79) ^ v295[((v304 ^ 0xCFDDD967) >> 16) ^ 0x40LL] ^ 0xC;
  unsigned int v320 = (((v316 ^ 0x94CCD737) >> 4) & 0xF0 | ((unsigned __int16)(v316 ^ 0xD737) >> 12)) ^ 0xE6;
  v323[STACK[0x3E0]] = v300[((v320 >> 4) & 0xFFFFFF0F | (16 * (v320 & 0xF))) ^ 0xAELL] ^ (((v320 >> 4) & 0xF | (16 * (v320 & 0xF)))
                                                                                        - ((2
                                                                                          * ((v320 >> 4) & 0xF | (16 * (v320 & 0xF)))) & 0xBB)
                                                                                        + 93) ^ 0x2B;
  v323[10] = (((unsigned __int16)(v304 ^ 0xD967) >> 8) - (((v304 ^ 0xCFDDD967) >> 7) & 0xBA) + 93) ^ 0xDB ^ v300[((unsigned __int16)(v304 ^ 0xD967) >> 8) ^ 0xA0LL];
  v323[STACK[0x3D8]] = (BYTE1(v294) - ((v294 >> 7) & 0xBA) + 93) ^ v300[BYTE1(v294) ^ 0x75LL] ^ 0x80;
  v323[STACK[0x390]] = v306[v297 ^ 0x95LL] ^ 0xEC;
  v323[STACK[0x2F8]] = v306[v293 ^ 0x7FLL] ^ 0x7D;
  v323[STACK[0x430]] = v306[v316 ^ 0x98LL] ^ 0xD2;
  int v321 = *(unsigned __int8 *)(v301 + (BYTE3(v304) ^ 0x49LL));
  HIDWORD(v318) = v321 ^ 0xE;
  LODWORD(v318) = (v321 ^ 0xC0) << 24;
  v323[STACK[0x398]] = (v318 >> 29) ^ 0x2E;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 8LL * (int)((55 * ((((_DWORD)v308 - 1605674316 - 2 * (((_DWORD)v308 + 16) & 0x204B5AAD ^ STACK[0x250] & 9)) ^ 0xA04B5AA0) < 0x150)) ^ a28)))( v319 - ((2 * v319 + 110) & 0x74) - 79,  v293,  v301,  230LL,  v282,  3422111000LL,  v304,  v294,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  v323,  v324,  v325,  v326,  v327,  v328,  v329,  v330,  v331,  v332,  v333,  v334,  v335,  v337,  v340,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  2LL,  a42,  a43,  a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           5LL,
           11LL,
           a54);
}

void sub_10019DE68( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, unsigned __int8 a24, int a25, int a26, unsigned __int8 a27, __int16 a28, char a29, int a30, int a31, int a32, int a33, unsigned __int8 a34, int a35, int a36, char a37, __int16 a38, char a39)
{
  LODWORD(STACK[0x3C0]) = (a24 | ((a31 ^ 0xC) << 24) | (unsigned __int16)(((14 * (a37 ^ 0x57) - 45) ^ a29) << 8) | ((a34 ^ 0x92) << 16)) ^ 0xF39F77A9;
  LODWORD(STACK[0x2C0]) = a32 ^ 0xE51C54B;
  LODWORD(STACK[0x3C8]) = ((a33 << 8) | (a26 << 24) | ((a35 ^ 0x57) << 16) | a30) ^ 0xF527C915;
  LODWORD(STACK[0x3E8]) = ((((a36 ^ 0x8C) << 16) + ((a25 ^ 0x1A) << 24)) | a27 | ((a39 ^ a4) << 8)) ^ 0x9B8E8FCF;
  JUMPOUT(0x10019BE18LL);
}

uint64_t sub_10019DF5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W8>)
{
  STACK[0x530] = v4 - 16;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5
                                                                                 + 8LL
                                                                                 * ((1985
                                                                                   * (((((a4 ^ 0x250) + 168) | 0x108) ^ 0x7C3ACCF4) == -2084203482)) ^ a4 ^ 0x250))
                                                                     - (((a4 ^ 0x250u) - 33) ^ 0x136LL)))( a1,  a2,  a3,  2210763814LL);
}

uint64_t sub_10019DF80()
{
  uint64_t v3 = ((uint64_t (*)(uint64_t))STACK[0x2D8])(v2);
  LODWORD(STACK[0x4EC]) = -2084203477;
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8LL * (((STACK[0x578] != 0) * (((v0 + 337) ^ 0x54F) + 371)) ^ (v0 + 337))))(v3);
}

uint64_t sub_10019DFE4@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  int v3 = (a2 - 706971845) & 0x2A23857B;
  uint64_t v4 = ((uint64_t (*)(void, uint64_t, void))STACK[0x2E8])( *(unsigned int *)STACK[0x2E0],  a1,  LODWORD(STACK[0x60C]));
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8LL
                                            * (((((v3 - 272) | 0x308) + 1221) * (LODWORD(STACK[0x4EC]) != 2084229119)) ^ v3)))(v4);
}

uint64_t sub_10019E110()
{
  LODWORD(STACK[0x668]) = -2084203477;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1401 * (STACK[0x550] != 0)) ^ (v0 - 47))) - 4LL))();
}

uint64_t sub_10019E150( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, unsigned int a18)
{
  unint64_t v19 = STACK[0x458];
  STACK[0x648] -= 32LL;
  *(_BYTE *)(v19 + 335) = *(_BYTE *)(a14 + 335) ^ 0xCD ^ *((_BYTE *)*(&off_10027AEF0 + (int)(a18 - 583)) + 7) ^ *((_BYTE *)*(&off_10027AEF0 + (int)(a18 - 761)) + ((a18 - 1911787346) & 0x11F38FD5) - 912) ^ *((_BYTE *)*(&off_10027AEF0 + (a18 ^ 0x3C2)) + 18) ^ 0x2C;
  return (*(uint64_t (**)(void))(v18 + 8LL * a18))();
}

void sub_10019E224()
{
}

uint64_t sub_10019E22C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  STACK[0x530] -= 16LL;
  return (*(uint64_t (**)(void))(v5 + 8LL * (((v4 ^ 0x386) * a4) ^ v4 ^ 0x506)))();
}

uint64_t sub_10019E25C()
{
  int v3 = (_BYTE *)STACK[0x4B8];
  int v4 = 1316140812 - ((1 << ((v1 ^ 0x7E) - 116)) & 0x1CE56E16);
  v0[12] = (HIBYTE(v4) ^ 0x4E) - 2 * ((HIBYTE(v4) ^ 0x4E) & 0x2D ^ HIBYTE(v4) & 1) + 44;
  v0[13] = (BYTE2(v4) ^ 0x72) - ((2 * (BYTE2(v4) ^ 0x72)) & 0x58) + 44;
  v0[14] = (BYTE1(v4) ^ 0xB7) - ((2 * (BYTE1(v4) ^ 0xB7)) & 0x58) + 44;
  v0[15] = v4 ^ 0x27;
  v3[16] ^= *v0 ^ 0x2C;
  v3[17] ^= v0[1] ^ 0x2C;
  v3[18] ^= v0[2] ^ 0x2C;
  v3[19] ^= v0[3] ^ 0x2C;
  v3[20] ^= v0[4] ^ 0x2C;
  v3[21] ^= v0[5] ^ 0x2C;
  v3[22] ^= v0[6] ^ 0x2C;
  v3[23] ^= v0[7] ^ 0x2C;
  v3[24] ^= v0[8] ^ 0x2C;
  v3[25] ^= v0[9] ^ 0x2C;
  v3[26] ^= v0[10] ^ 0x2C;
  v3[27] ^= v0[11] ^ 0x2C;
  v3[28] ^= v0[12] ^ 0x2C;
  v3[29] ^= v0[13] ^ 0x2C;
  v3[30] ^= v0[14] ^ 0x2C;
  v3[31] ^= v0[15] ^ 0x2C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 8LL * (v1 - 295))
                                                                                       - 8LL))( 1254LL,  1438LL,  380LL,  894LL,  484797974LL,  1316140811LL);
}

void sub_10019E480()
{
}

uint64_t sub_10019E488()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * (((LODWORD(STACK[0x478]) != ((13 * ((v0 + 1398) ^ v1)) ^ 0x1E737905)) * (v0 + 899)) ^ (v0 + 1398))))();
}

uint64_t sub_10019E4F8@<X0>( int a1@<W0>, unsigned int a2@<W1>, unint64_t a3@<X2>, unsigned int a4@<W8>)
{
}

uint64_t sub_10019E53C()
{
  return (*(uint64_t (**)(void))(v5 + 8LL * (((v4 != (((v1 ^ v3) * v2) ^ v0)) * (v1 - 499)) ^ v1)))();
}

uint64_t sub_10019E568( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
  LODWORD(STACK[0x478]) = 510884208;
  unint64_t v41 = STACK[0x4B8];
  STACK[0x590] = 335LL;
  *(_BYTE *)(v41 + 335) = (a39 ^ 0xBA) * (a39 + 17);
  return ((uint64_t (*)(void))(*(void *)(v40
                                        + 8LL
}

void sub_10019EAAC()
{
}

uint64_t sub_10019EAB4()
{
  unsigned int v3 = v0 & 0xBBD5F7FB;
  uint64_t v4 = ((uint64_t (*)(void))STACK[0x2D8])();
  LODWORD(STACK[0x668]) = v1;
  return ((uint64_t (*)(uint64_t))(*(void *)(v2
                                                      + 8LL
}

uint64_t sub_10019EAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = STACK[0x400];
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 8LL * (v3 - 736)) - 8LL);
  unint64_t v7 = STACK[0x258];
  STACK[0x3E8] = STACK[0x258] + 2353;
  STACK[0x3E0] = v5 + 49;
  STACK[0x3D8] = v7 + 2333;
  STACK[0x3D0] = v5 + 29;
  STACK[0x3C8] = v7 + 2313;
  STACK[0x3C0] = v5 + 9;
  return v6(a1, 207LL, a3, 2210763814LL, 13LL);
}

uint64_t sub_10019EB48()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1401 * (STACK[0x550] != 0)) ^ (v0 - 47))) - 4LL))();
}

uint64_t sub_10019EB78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v10 = (v8 & 1) == ((a8 - 771) | 0x130) - 312;
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * (((32 * v10) | (v10 << 7)) ^ (a8 - 197))) - 8LL))();
}

uint64_t sub_10019EBB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unint64_t v9 = STACK[0x620];
  unint64_t v10 = (LODWORD(STACK[0x4D0]) - 510884208);
  STACK[0x5E8] = v10;
  return (*(uint64_t (**)(unint64_t))(v8
                                                     + 8LL
                                                     * (((4 * ((_DWORD)v10 != ((a8 + 780) ^ 0x617))) | (8 * ((_DWORD)v10 != ((a8 + 780) ^ 0x617)))) ^ (a8 + 780))))(v9);
}

uint64_t sub_10019F038@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  unint64_t v6 = v3 - 1;
  STACK[0x5E8] = v6;
  *(_BYTE *)(a1 + v6) = ((v2 - 54) ^ v4) * (v2 - 37);
  return (*(uint64_t (**)(void))(v5
                              + 8LL
                              * (((4 * (((a2 - 12) ^ (STACK[0x5E8] == 0)) & 1)) & 0xF7 | (8 * (((a2 - 12) ^ (STACK[0x5E8] == 0)) & 1))) ^ a2)))();
}

uint64_t sub_10019F084()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1401 * (STACK[0x550] != 0)) ^ (v0 - 47))) - 4LL))();
}

void sub_10019F0C4()
{
}

uint64_t sub_10019F130( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47)
{
  int v51 = 460628867 * ((((2 * (v50 - 200)) | 0xBD03A752) - (v50 - 200) + 561917015) ^ 0x921751D4);
  *(void *)(v50 - 144) = 0LL;
  *(void *)(v50 - 200) = 0LL;
  *(void *)(v50 - 19sub_100129678(v0 + 2) = a16;
  *(void *)(v50 - 168) = a47;
  *(void *)(v50 - 160) = a44;
  *(void *)(v50 - 176) = v47;
  *(_DWORD *)(v50 - 184) = v51 + v48 + 187;
  *(_DWORD *)(v50 - 15sub_100129678(v0 + 2) = v51 + 1675009439;
  uint64_t v52 = ((uint64_t (*)(uint64_t))((char *)*(&off_10027AEF0 + (int)(v48 & 0xB68052C3)) - 4))(v50 - 200);
  int v53 = *(_DWORD *)(v50 - 136);
  LODWORD(STACK[0x66C]) = v53;
  return ((uint64_t (*)(uint64_t))(*(void *)(v49 + 8LL
                                                            * (((v53 != 2084229119) * ((v48 + 465) ^ 0x36A)) ^ v48))
                                          - ((v48 + 629547553) & 0xDA79DFAF ^ 0x307LL)))(v52);
}

void sub_10019F23C()
{
}

void sub_10019F2C8()
{
}

void sub_10019F368()
{
  LODWORD(STACK[0x660]) = v0;
  JUMPOUT(0x10019F300LL);
}

void sub_10019F548()
{
  STACK[0x4C8] = (LODWORD(STACK[0x43C]) ^ 0xFFFFFFFFFFFFFCFFLL) + *(void *)(v0 + 8LL * (LODWORD(STACK[0x43C]) - 744));
  JUMPOUT(0x10019F994LL);
}

uint64_t sub_10019F99C@<X0>(unint64_t a1@<X8>)
{
  STACK[0x670] = v6;
  LODWORD(STACK[0x67C]) = v1;
  int v7 = *(_DWORD *)(v6 - 0x8FD385F8C7F98D9LL);
  STACK[0x5F8] = a1;
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((25
                                          * (v1
                                           + 1881030174
                                           + ((v2 - 173) ^ (2 * v7) & 0x76 ^ 0x4E8)
}

uint64_t sub_10019FA20()
{
  int v6 = v1 - 2147442171;
  else {
    int v7 = 64;
  }
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((227
}

uint64_t sub_10019FAFC(int a1)
{
  int v6 = v3 + v2;
  int v7 = v3 + v2 - 2147442171;
  else {
    int v8 = 64;
  }
  BOOL v9 = __CFADD__(v7, v4 + 2147441670 + a1 + v1 - 637 + v8);
  return (*(uint64_t (**)(void))(v5
                              + 8LL
                              * ((((v1 - 62) ^ v9) & 1 | (8 * (((v1 - 62) ^ v9) & 1))) ^ v1)))();
}

uint64_t sub_10019FB64@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (((v4
                                           - a1
                                           + v2
                                           - 0x8FD385F8C7F9B11LL
                                           + (unint64_t)(250 * ((v1 - 319) ^ 0x330u)) > 0xF)
                                          * ((2 * (v1 - 319)) ^ 0x3EB)) ^ (v1 - 319)))
                            - 4LL))();
}

uint64_t sub_10019FBC8@<X0>(unsigned int a1@<W2>, _OWORD *a2@<X8>)
{
  *(_OWORD *)(v3 + v2 + (((v5 ^ 0x702) - 1137199488) & 0x43C84B39 ^ a1)) = *a2;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((21 * (((v4 + 1) & 0x1FFFFFFF0LL) == 16)) ^ v5 ^ 0x702)) - 8LL))();
}

void sub_10019FC38()
{
}

uint64_t sub_10019FC44()
{
  BOOL v3 = (v0 + 1028670412) > 0x4D32A773;
  if (v0 + 1028670412 < ((v1 + 425310993) & 0xE6A6433B ^ 0x4D32A478)) {
    BOOL v3 = 1;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((529 * v3) ^ v1)) - (((v1 - 1197) | 0x10Eu) ^ 0x11BLL)))();
}

uint64_t sub_10019FC50(unsigned int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
}

uint64_t sub_10019FCA0@<X0>(int a1@<W2>, unint64_t a2@<X5>, int a3@<W6>, uint64_t a4@<X8>)
{
  *(_BYTE *)(v6 + (a1 + v5 + 736)) = *(_BYTE *)(a4 + ((v4 - 497) ^ a2) + v7);
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((((v9 + v5 + 1) > 0x3F) * a3) ^ v4)) - 4LL))();
}

uint64_t sub_10019FCEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  LODWORD(STACK[0x504]) = v10;
  STACK[0x540] = *(void *)(v13 + 8LL * v11);
  STACK[0x680] = v16;
  STACK[0x688] = v9;
  unint64_t v17 = STACK[0x530];
  uint64_t v18 = (char *)&a9 + STACK[0x530] - 0x616CC1BE8C72DE02LL;
  STACK[0x690] = (unint64_t)v18;
  STACK[0x530] = v17 + 320;
  int v19 = *(_DWORD *)(v16 - 0x8FD385F8C7F98D5LL);
  LODWORD(STACK[0x638]) = v19;
  int v20 = *(_DWORD *)(v16 - 0x8FD385F8C7F98D1LL);
  LODWORD(STACK[0x524]) = v20;
  int v21 = *(_DWORD *)(v16 - 0x8FD385F8C7F98CDLL);
  LODWORD(STACK[0x634]) = v21;
  int v22 = *(_DWORD *)(v16 - 0x8FD385F8C7F98C9LL);
  LODWORD(STACK[0x4B0]) = v22;
  int v23 = *(unsigned __int8 *)(v16 - 0x8FD385F8C7F98BDLL) ^ 0xF3;
  if (v23 == 2)
  {
    LODWORD(STACK[0x4D4]) = *(_DWORD *)(v16 - 0x8FD385F8C7F98C5LL);
    JUMPOUT(0x1001A0630LL);
  }

  if (v23 == 1)
  {
    LODWORD(STACK[0x598]) = v14;
    BOOL v25 = v9 < STACK[0x208] + v17 && (unint64_t)v18 < v9 + 64;
    return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * (((((a8 - 587) | 0x22) ^ 0x37) * v25) ^ (a8 - 149))) - 4LL))();
  }

  else
  {
    int v27 = (*(_DWORD *)(v16 - 0x8FD385F8C7F98D5LL) ^ v12) + (v19 ^ v12);
    *(_DWORD *)(v16 - 0x8FD385F8C7F98D5LL) = v27 + v12 - (v15 & (2 * v27));
    int v28 = (*(_DWORD *)(v16 - 0x8FD385F8C7F98D1LL) ^ v12) + (v20 ^ v12);
    *(_DWORD *)(v16 - 0x8FD385F8C7F98D1LL) = v28 + v12 - (v15 & (2 * v28));
    int v29 = (*(_DWORD *)(v16 - 0x8FD385F8C7F98CDLL) ^ v12) + (v21 ^ v12);
    *(_DWORD *)(v16 - 0x8FD385F8C7F98CDLL) = v29 + v12 - (v15 & (2 * v29));
    int v30 = (*(_DWORD *)(v16 - 0x8FD385F8C7F98C9LL) ^ v12) + (v22 ^ v12);
    *(_DWORD *)(v16 - 0x8FD385F8C7F98C9LL) = v30 + v12 - (v15 & (2 * v30));
    STACK[0x530] = v17;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))STACK[0x540])( 759LL,  207LL,  338LL,  a4,  a5,  44LL,  3722269372LL);
  }

void sub_10019FD20()
{
}

void sub_10019FD44()
{
}

uint64_t sub_10019FE48()
{
}

uint64_t sub_10019FE94()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((110 * ((v0 ^ 0x14u) > 7)) ^ v1)) - 4LL))();
}

uint64_t sub_10019FEC0()
{
  *(void *)(v4 + v1 - 0x8FD385F8C7F991CLL) = v5;
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (int)((14 * (((((v2 + 1072395062) & 0xC0148F3E) - 1524) & v0) != 8LL)) ^ (((v2 + 1072395062) & 0xC0148F3E) - 10)))
                            - ((((v2 + 1072395062) & 0xC0148F3E) - 1318719093) & 0x4E9A0BFF)
                            + 947LL))();
}

uint64_t sub_10019FF4C()
{
  *(void *)(v2 + swift_bridgeObjectRelease(v0[23], v4) = v6;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((14 * (v3 != v4)) ^ v1)) - v0 + 947))();
}

uint64_t sub_10019FF78()
{
}

uint64_t sub_10019FFBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  STACK[0x540] = ((v10 - 1930841152) & 0x73164F3F ^ 0xFFFFFFFFFFFFFCF7LL) + *(void *)(v11 + 8LL * v10);
  STACK[0x680] = v13;
  STACK[0x688] = v9;
  unint64_t v14 = STACK[0x530];
  int v15 = (char *)&a9 + STACK[0x530] - 0x616CC1BE8C72DE02LL;
  STACK[0x690] = (unint64_t)v15;
  STACK[0x530] = v14 + 320;
  LODWORD(STACK[0x638]) = *(_DWORD *)(v13 - 0x8FD385F8C7F98D5LL);
  LODWORD(STACK[0x524]) = *(_DWORD *)(v13 - 0x8FD385F8C7F98D1LL);
  LODWORD(STACK[0x634]) = *(_DWORD *)(v13 - 0x8FD385F8C7F98CDLL);
  LODWORD(STACK[0x4B0]) = *(_DWORD *)(v13 - 0x8FD385F8C7F98C9LL);
  int v16 = *(unsigned __int8 *)(v13 - 0x8FD385F8C7F98BDLL) ^ 0xF3;
  if (v16 == 2) {
    JUMPOUT(0x1001A0600LL);
  }
  if (v16 != 1) {
    JUMPOUT(0x1001A0B48LL);
  }
  LODWORD(STACK[0x598]) = v12;
  BOOL v18 = v9 < STACK[0x208] + v14 && (unint64_t)v15 < v9 + 64;
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * (((((a8 - 587) | 0x22) ^ 0x37) * v18) ^ (a8 - 149))) - 4LL))();
}

uint64_t sub_10019FFEC@<X0>(char a1@<W5>, uint64_t a2@<X8>)
{
  *(_BYTE *)(v2 + a2 - 823850539) = a1;
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1167 * ((((v3 - 1179) | 0x342u) ^ 0xFFFFFFFFCEE50A24LL) + a2 < 0x40)) ^ ((v3 - 1179) | 0x342)))
                            - 4LL))();
}

void sub_1001A003C()
{
}

uint64_t sub_1001A0044( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,int a51)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 + 8LL * ((61 * (((a8 - 729) ^ 0x3A51960D ^ a51 & a7) == 978424863)) ^ (a8 + 915))) - 4LL))( a1,  a2,  3316542448LL,  a4,  572697704LL,  a6,  315LL,  115LL);
}

uint64_t sub_1001A00B4@<X0>( int a1@<W2>, int a2@<W4>, char a3@<W5>, int a4@<W6>, char a5@<W7>, uint64_t a6@<X8>)
{
  uint64_t v16 = (v10 + a1);
  *(_BYTE *)(v15 + v16 + 36) = ((v16 & 0xF) * a5) ^ *(_BYTE *)(v14 + v16) ^ *(_BYTE *)(v7 + (v16 & 0xF)) ^ *(_BYTE *)((v16 & 0xF) + a6 + 1) ^ *(_BYTE *)(v6 + (v16 & 0xF)) ^ a3;
  return ((uint64_t (*)(void))(*(void *)(v12
                                        + 8LL
                                        * (((v10 + (v9 ^ a4) - 780 == (((v9 ^ a4) - 729) ^ v8 ^ ((v9 ^ a4) + a2) & v13))
                                          * v11) ^ ((v9 ^ a4) + 915)))
                            - 4LL))();
}

void sub_1001A0134()
{
}

uint64_t sub_1001A0184( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v9 = (a8 - 711) | 0x403;
  int v10 = STACK[0x504];
  LODWORD(STACK[0x4B4]) = ((83 * (v9 ^ 0x451)) ^ 0x762) + LODWORD(STACK[0x504]);
  unsigned int v11 = LODWORD(STACK[0x67C]) - 472368406;
  BOOL v12 = v10 - 849556567 > v11;
  return (*(uint64_t (**)(void))(v8 + 8LL * ((228 * v12) ^ v9)))();
}

void sub_1001A0224()
{
}

uint64_t sub_1001A02C8@<X0>(int a1@<W2>, unsigned int a2@<W3>, int a3@<W8>)
{
  BOOL v9 = v4 < v5;
  *(_BYTE *)(v8 - 0x8FD385F8C7F991DLL + (v3 - 596842673)) = *(_BYTE *)(STACK[0x5F8]
                                                                                   + (a3 - 643683112));
  unsigned int v10 = a1 + a3 + 1;
  int v11 = v9 ^ (v10 < a2);
  BOOL v12 = v10 < v4;
  if (!v11) {
    BOOL v9 = v12;
  }
  return (*(uint64_t (**)(BOOL))(v7 + 8LL * ((v6 - 16) | (16 * v9))))(v12);
}

void sub_1001A0358()
{
}

uint64_t sub_1001A0368()
{
  int v4 = 628203409 * ((2 * ((v3 - 200) & 0x25866240) - (v3 - 200) - 629563969) ^ 0x58F1918C);
  *(void *)(v3 - 200) = v2;
  *(_DWORD *)(v3 - 19sub_100129678(v0 + 2) = v4 + v1 - 126;
  *(_DWORD *)(v3 - 188) = v0 - v4 - 163342436;
  uint64_t v5 = sub_1001A2A8C(v3 - 200);
  return ((uint64_t (*)(uint64_t))STACK[0x4C8])(v5);
}

uint64_t sub_1001A03F0@<X0>(int a1@<W7>, int a2@<W8>, uint64_t a3)
{
  unint64_t v6 = STACK[0x5F8] + ((((_DWORD)v3 + 751) | 9) ^ 0xD9A22FD3) + a2;
  unint64_t v7 = STACK[0x670];
  STACK[0x540] = *(void *)(v4 + 8 * v3);
  STACK[0x680] = v7;
  STACK[0x688] = v6;
  unint64_t v8 = STACK[0x530];
  BOOL v9 = (char *)&a3 + STACK[0x530] - 0x616CC1BE8C72DE02LL;
  STACK[0x690] = (unint64_t)v9;
  STACK[0x530] = v8 + 320;
  LODWORD(STACK[0x638]) = *(_DWORD *)(v7 - 0x8FD385F8C7F98D5LL);
  LODWORD(STACK[0x524]) = *(_DWORD *)(v7 - 0x8FD385F8C7F98D1LL);
  LODWORD(STACK[0x634]) = *(_DWORD *)(v7 - 0x8FD385F8C7F98CDLL);
  LODWORD(STACK[0x4B0]) = *(_DWORD *)(v7 - 0x8FD385F8C7F98C9LL);
  int v10 = *(unsigned __int8 *)(v7 - 0x8FD385F8C7F98BDLL) ^ 0xF3;
  if (v10 == 2) {
    JUMPOUT(0x1001A0600LL);
  }
  if (v10 != 1) {
    JUMPOUT(0x1001A0B48LL);
  }
  LODWORD(STACK[0x598]) = v5;
  BOOL v12 = v6 < STACK[0x208] + v8 && (unint64_t)v9 < v6 + 64;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (((((a1 - 587) | 0x22) ^ 0x37) * v12) ^ (a1 - 149))) - 4LL))();
}

void sub_1001A0430()
{
}

uint64_t sub_1001A056C@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  unsigned int v8 = (*(unsigned __int8 *)(v2 + (v4 + a1)) ^ 0x2C) & 0xFFFF00FF | ((v3 ^ 0xCE ^ *(_BYTE *)(v2 + (v4 + a1 + 1))) << 8) | ((*(unsigned __int8 *)(v2 + (v4 + a1 + 2)) ^ 0x2C) << 16) | ((*(unsigned __int8 *)(v2 + (v4 + a1 + 3)) ^ 0x2C) << 24);
  *(_DWORD *)(a2 + ((v4 + a1) & 0xFFFFFFFC)) = v8 + v7 - (v5 & (2 * v8));
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((577 * ((v4 + 4 + a1) < 0x40)) ^ v3)) - 4LL))();
}

uint64_t sub_1001A067C@<X0>(int a1@<W1>, int a2@<W4>, uint64_t a3@<X8>)
{
  int v11 = *(_DWORD *)(a3 + 4LL * (v7 + v5 - 3));
  int v12 = *(_DWORD *)(a3 + 4LL * (v7 + v5 - 8));
  HIDWORD(v1sub_100129678(v0 + 3) = *(_DWORD *)(a3 + 4LL * ((((v3 ^ v6) * a2) ^ (v7 - 211)) + v5)) ^ *(_DWORD *)(a3 + 4LL * (v7 + v5 - 14)) ^ ((v12 ^ v11) + v10 - (v8 & (2 * (v12 ^ v11)))) ^ v10;
  LODWORD(v1sub_100129678(v0 + 3) = *(_DWORD *)(a3 + 4LL * ((((v3 ^ v6) * a2) ^ (v7 - 211)) + v5)) ^ *(_DWORD *)(a3 + 4LL * (v7 + v5 - 14)) ^ ((v12 ^ v11) + v10 - (v8 & (2 * (v12 ^ v11))));
  *(_DWORD *)(a3 + 4LL * (v4 + v7)) = (v13 >> 31) + v10 - (v8 & (2 * (v13 >> 31)));
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((((v4 + 1 + v7) < 0x50) * a1) ^ v3)) - 12LL))();
}

uint64_t sub_1001A070C()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * v0) - 8LL))();
}

void sub_1001A0818()
{
}

uint64_t sub_1001A0830( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v10
}

void sub_1001A08E4()
{
}

uint64_t sub_1001A0904( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((22 * ((a2 + 1 + a8) > 0x3B)) ^ v8)) - 4LL))();
}

uint64_t sub_1001A09CC( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
}

uint64_t sub_1001A0AA0()
{
  LODWORD(STACK[0x638]) = v0;
  LODWORD(STACK[0x524]) = v4;
  LODWORD(STACK[0x634]) = v2;
  LODWORD(STACK[0x4B0]) = v3;
  LODWORD(STACK[0x598]) = v8 + 80;
  unint64_t v9 = STACK[0x680];
  int v10 = *(_DWORD *)(STACK[0x680] - 0x8FD385F8C7F98C5LL);
  LODWORD(STACK[0x4D4]) = v1;
  int v11 = (v10 ^ v7) + ((v7 + v5 - 1090) ^ v1);
  *(_DWORD *)(v9 - 0x8FD385F8C7F98C5LL) = v11 + v7 - (v6 & (2 * v11));
  unint64_t v12 = STACK[0x530];
  int v13 = (*(_DWORD *)(v9 - 0x8FD385F8C7F98D5LL) ^ v7) + (v0 ^ v7);
  *(_DWORD *)(v9 - 0x8FD385F8C7F98D5LL) = v13 + v7 - ((2 * v13) & 0x9CC831C);
  int v14 = (*(_DWORD *)(v9 - 0x8FD385F8C7F98D1LL) ^ v7) + (v4 ^ v7);
  *(_DWORD *)(v9 - 0x8FD385F8C7F98D1LL) = v14 + v7 - ((2 * v14) & 0x9CC831C);
  int v15 = (*(_DWORD *)(v9 - 0x8FD385F8C7F98CDLL) ^ v7) + (v2 ^ v7);
  *(_DWORD *)(v9 - 0x8FD385F8C7F98CDLL) = v15 + v7 - ((2 * v15) & 0x9CC831C);
  int v16 = (*(_DWORD *)(v9 - 0x8FD385F8C7F98C9LL) ^ v7) + (v3 ^ v7);
  *(_DWORD *)(v9 - 0x8FD385F8C7F98C9LL) = v16 + v7 - ((2 * v16) & 0x9CC831C);
  STACK[0x530] = v12 - 320;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))STACK[0x540])( 759LL,  207LL,  338LL,  2210763814LL,  13LL,  44LL,  3722269372LL);
}

uint64_t sub_1001A0B50@<X0>( int a1@<W7>, int32x4_t *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, int8x16_t a47, int32x4_t a48)
{
  int8x16x4_t v74 = vld4q_s8(v48);
  v51.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v51.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  uint8x16_t v52 = (uint8x16_t)veorq_s8(v74.val[0], v51);
  uint16x8_t v53 = vmovl_high_u8(v52);
  int8x16_t v54 = (int8x16_t)vmovl_high_u16(v53);
  uint16x8_t v55 = vmovl_u8(*(uint8x8_t *)v52.i8);
  int8x16_t v56 = (int8x16_t)vmovl_high_u16(v55);
  uint8x16_t v57 = (uint8x16_t)veorq_s8(v74.val[1], v51);
  uint16x8_t v58 = vmovl_u8(*(uint8x8_t *)v57.i8);
  uint16x8_t v59 = vmovl_high_u8(v57);
  int8x16_t v60 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v58.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v55.i8));
  int8x16_t v61 = vorrq_s8((int8x16_t)vshll_high_n_u16(v58, 8uLL), v56);
  int8x16_t v62 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v59.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v53.i8));
  int8x16_t v63 = vorrq_s8((int8x16_t)vshll_high_n_u16(v59, 8uLL), v54);
  uint8x16_t v64 = (uint8x16_t)veorq_s8(v74.val[2], v51);
  _Q17 = (int8x16_t)vmovl_high_u8(v64);
  _Q16 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v64.i8);
  int8x16_t v67 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL);
  __asm { SHLL2           V16.4S, V16.8H, #0x10 }

  int8x16_t v72 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL);
  __asm { SHLL2           V17.4S, V17.8H, #0x10 }

  v74.val[0] = veorq_s8(v74.val[3], v51);
  v74.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v74.val[0].i8);
  v74.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v74.val[0]);
  v74.val[2] = vorrq_s8( vorrq_s8(v60, v67),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v74.val[1].i8), 0x18uLL));
  v74.val[1] = vorrq_s8( vorrq_s8(v61, _Q16),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v74.val[1]), 0x18uLL));
  v74.val[3] = vorrq_s8( vorrq_s8(v62, v72),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v74.val[0].i8), 0x18uLL));
  v74.val[0] = vorrq_s8( vorrq_s8(v63, _Q17),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v74.val[0]), 0x18uLL));
  a2[2] = vaddq_s32( vsubq_s32( (int32x4_t)v74.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v74.val[3], (int32x4_t)v74.val[3]), a47)),  a48);
  a2[3] = vaddq_s32( vsubq_s32( (int32x4_t)v74.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v74.val[0], (int32x4_t)v74.val[0]), a47)),  a48);
  *a2 = vaddq_s32( vsubq_s32( (int32x4_t)v74.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v74.val[2], (int32x4_t)v74.val[2]), a47)),  a48);
  a2[1] = vaddq_s32( vsubq_s32( (int32x4_t)v74.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v74.val[1], (int32x4_t)v74.val[1]), a47)),  a48);
  return ((uint64_t (*)(void))(*(void *)(v50
                                        + 8LL
                                        * (((16 * ((a1 + 1200216607) < 0x10)) | (32
}

uint64_t sub_1001A0D80(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
}

uint64_t sub_1001A0E54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v9
                                                                        + 8LL
                                                                        * (((a7 + 1 + a8) < 0x30) | v8))
                                                            - 12LL))( a5,  a5,  v10 + 48);
}

uint64_t sub_1001A0F14( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v9
                                        + 8LL
}

void sub_1001A0FF4()
{
  LODWORD(STACK[0x638]) = v0;
  LODWORD(STACK[0x634]) = v1;
  LODWORD(STACK[0x524]) = v3;
  LODWORD(STACK[0x4B0]) = v2;
  LODWORD(STACK[0x598]) = v4 + 64;
  JUMPOUT(0x1001A1044LL);
}

uint64_t sub_1001A1120( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  unint64_t v60 = STACK[0x5E0];
  int v61 = *(unsigned __int8 *)(STACK[0x5E0] - 0x8FD385F8C7F98BDLL) ^ 0xF3;
  if (v61 == 2) {
    return ((uint64_t (*)(void))(*(void *)(v59
  }
                                          + 8LL
                                          * ((30 * (*(_DWORD *)(v60 - 0x8FD385F8C7F98C1LL) != 2113300787)) ^ (a8 - 318)))
                              - (((a8 - 681) | 0x209u) ^ 0x267LL)))();
  if (v61 == 1) {
    return ((uint64_t (*)(void))(*(void *)(v59
  }
                                          + 8LL
                                          * (((*(_DWORD *)(v60 - 0x8FD385F8C7F98C1LL) != 2113300787)
                                            * (((a8 + 589) | 0xA0) - 548)) ^ (a8 + 744)))
                              - 4LL))();
  STACK[0x448] = 91LL;
  *(_BYTE *)(v60 - 0x8FD385F8C7F98C2LL) = (a59 ^ 0xBA) * (a59 + 17);
  return ((uint64_t (*)(void))(*(void *)(v59
                                        + 8LL
                                        * ((1069 * (STACK[0x448] == (((17 * (a8 ^ 0x324) - 276) | 0x100u) ^ 0x30BLL))) ^ (17 * (a8 ^ 0x324))))
                            - 8LL))();
}

void sub_1001A1A20()
{
}

uint64_t sub_1001A1A28()
{
  return ((uint64_t (*)(void))STACK[0x600])();
}

uint64_t sub_1001A1A58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  *(_DWORD *)(v10 + 5sub_100129678(v0 + 2) = ((((LODWORD(STACK[0x664]) ^ v11) + (v8 ^ v11)) % 0x2710) ^ 0x5DFFDD7D)
                        - 292623373
                        + (((((LODWORD(STACK[0x664]) ^ v11) + (v8 ^ v11)) % 0x2710) << ((a8 + 32) ^ 0x2A)) & 0x3AFA);
  int v12 = STACK[0x66C];
  LODWORD(STACK[0x4EC]) = STACK[0x66C];
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((1936 * (v12 == v11)) ^ (a8 - 224))) - 8LL))();
}

uint64_t sub_1001A1AE8@<X0>(int a1@<W8>)
{
  *int v2 = STACK[0x49C];
  v2[85] = STACK[0x5CC];
  v2[86] = STACK[0x55C];
  v2[87] = STACK[0x61C];
  v2[88] = STACK[0x5AC];
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * (((STACK[0x578] != 0) * (((41 * (a1 ^ 0x238) + 337) ^ 0x54F) + 371)) ^ (41 * (a1 ^ 0x238) + 337))))();
}

uint64_t sub_1001A1B4C( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  STACK[0x530] -= 1616LL;
  LODWORD(STACK[0x4EC]) = a4 + 162;
  return (*(uint64_t (**)(void))(v8 + 8LL * (((STACK[0x578] != 0) * (((a8 + 337) ^ 0x54F) + 371)) ^ (a8 + 337))))();
}

uint64_t sub_1001A1B98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v8 + 8LL * (((STACK[0x578] != 0) * (((a8 + 337) ^ 0x54F) + 371)) ^ (a8 + 337))))();
}

uint64_t sub_1001A1BC4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(STACK[0x48C]) = a4 - 22;
  return sub_1001A22A8();
}

uint64_t sub_1001A1D4C()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((125 * ((((v2 ^ 0x63C) - 781) & v0) != 1662039774)) ^ v2)) - 4LL))();
}

uint64_t sub_1001A1D84@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  LODWORD(STACK[0x48C]) = v2 - 22;
  unint64_t v4 = STACK[0x5A0];
  BOOL v5 = LODWORD(STACK[0x58C]) == 0;
  STACK[0x4F0] = LODWORD(STACK[0x58C]);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v3
                                                              + 8LL
                                                              * ((v5 * (((a2 + 510) | 0x40) ^ 0x50D)) ^ (a2 - 633))))( a1,  v4);
}

uint64_t sub_1001A1DC8(uint64_t a1, uint64_t a2)
{
  int v6 = v2 + 598;
  ((void (*)(void, uint64_t, void))STACK[0x2E8])(*(unsigned int *)STACK[0x2E0], a2, 0LL);
  uint64_t v7 = LODWORD(STACK[0x48C]);
  unint64_t v8 = 1755732067 * ((2 * (v4 & 0x4FB84E09DB840A10LL) - v4 + 0x3047B1F6247BF5EELL) ^ 0xEDEC16C9FABD4835LL);
  *(void *)(v5 - 19sub_100129678(v0 + 2) = v8 + 2210763813u;
  *(void *)(v5 - 168) = v7 + v8;
  *(_DWORD *)(v5 - 196) = (v6 + 418080657) & 0xFFFBEAB2 ^ v8;
  *(_DWORD *)(v5 - 160) = (v6 - 1689052281) ^ v8;
  *(_DWORD *)(v5 - 184) = (v6 + 418080657) ^ v8;
  *(_DWORD *)(v5 - 180) = -1755732067 * ((2 * (v4 & 0xDB840A10) - v4 + 612103662) ^ 0xFABD4835);
  *(_DWORD *)(v5 - 176) = ((v6 + 418080657) ^ 0x85) + v8;
  uint64_t v9 = ((uint64_t (*)(uint64_t))STACK[0x380])(v5 - 200);
  uint64_t v10 = *(uint64_t (**)(uint64_t))(v3 + 8LL * *(int *)(v5 - 200));
  LODWORD(STACK[0x300]) = 701983352;
  return v10(v9);
}

uint64_t sub_1001A2168()
{
  int v3 = *(_DWORD *)(v1 + 56);
  *(_DWORD *)(v1 + 56) = v0 - 294 + v3 - 484;
  uint64_t v4 = *(uint64_t (**)(void))(v2 + 8LL * ((1620 * ((v3 - 1372200257) < 0xFFFFFFFA)) ^ (v0 - 294)));
  LODWORD(STACK[0x300]) = 701983352;
  return v4();
}

uint64_t sub_1001A21B8()
{
  *(_DWORD *)(v1 - 200) = (v0 + 2138962875) ^ (535753261
                                             * ((v1 + 1163127509 - 2 * ((v1 - 200) & 0x4553EB9D)) ^ 0x4FA7E5B2));
  sub_1001CF7B0((_DWORD *)(v1 - 200));
  *(void *)(v1 - 176) = STACK[0x268];
  *(_DWORD *)(v1 - 184) = 3804331 * ((((v1 - 200) | 0x2E413280) - (v1 - 200) + ((v1 - 200) & 0xD1BECD78)) ^ 0x50941776)
                        + v0
                        + 311;
  *(void *)(v1 - 19sub_100129678(v0 + 2) = STACK[0x270];
  *(_BYTE *)(v1 - 200) = (-85 * ((((v1 + 56) | 0x80) - (v1 + 56) + ((v1 + 56) & 0x78)) ^ 0x76)) ^ 0x56;
  ((void (*)(uint64_t))STACK[0x260])(v1 - 200);
  LODWORD(STACK[0x300]) = 701983352;
  return sub_1001A22A8();
}

uint64_t sub_1001A22A8()
{
}

void sub_1001A22F0(int a1@<W8>)
{
  int v3 = a1 - 407;
  ((void (*)(void, uint64_t, void))STACK[0x2E8])( *(unsigned int *)STACK[0x2E0],  v1,  (LODWORD(STACK[0x300]) - 701983352 + a1 - 407 - 790));
  *(_DWORD *)(v2 - 200) = (v3 + 2138962570) ^ (535753261
                                             * ((((v2 - 200) | 0x6983BC26) - ((v2 - 200) & 0x6983BC26)) ^ 0x6377B209));
  sub_1001CF7B0((_DWORD *)(v2 - 200));
  JUMPOUT(0x1001A237CLL);
}

void sub_1001A23C4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (1178560073 * ((2 * (a1 & 0x878F6F35) - a1 + 2020643018) ^ 0xC2E4E8A8));
  __asm { BR              X11 }

uint64_t sub_1001A24AC@<X0>( uint64_t a1@<X8>, uint64_t a2, unsigned int a3, int a4, unint64_t *a5, uint64_t a6, unsigned int a7)
{
  int v11 = v8 ^ v7;
  unsigned int v12 = 3804331 * ((-1461682303 - (&a3 | 0xA8E07F81) + (&a3 | 0x571F807E)) ^ 0x29CAA588);
  a3 = v12 + 282547555;
  a4 = v12 + v8 - 614;
  a5 = &STACK[0x48247A308694277E];
  a6 = v9;
  a7 = v12 - 1461728294;
  uint64_t v13 = (*(uint64_t (**)(unsigned int *))(a1 + 8LL * (v8 - 994)))(&a3);
  return ((uint64_t (*)(uint64_t))(*(void *)(v10
                                                      + 8LL
                                                      * (((*(_DWORD *)(v9 - 0x27E11828102FB971LL) == 2084229119)
                                                        * (v11 - 647)) ^ v8))
                                          - 8LL))(v13);
}

void sub_1001A2588(_DWORD *a1@<X8>)
{
  unsigned int v4 = 423793223 * (v1[1] - v2) - ((847586446 * (v1[1] - v2) + 1023904614) & 0x9CE56E16) + 1828093118;
  _BYTE *v5 = ((v4 >> ((v3 - 31) & 0xED ^ 0xFD)) ^ 0x4E)
      - 2 * (((v4 >> ((v3 - 31) & 0xED ^ 0xFD)) ^ 0x4E) & 0x2D ^ (v4 >> ((v3 - 31) & 0xED ^ 0xFD)) & 1)
      + 44;
  v5[1] = (BYTE2(v4) ^ 0x72) - ((2 * (BYTE2(v4) ^ 0x72)) & 0x58) + 44;
  v5[2] = (BYTE1(v4) ^ 0xB7) - ((2 * (BYTE1(v4) ^ 0xB7)) & 0x58) + 44;
  v5[3] = v4 ^ 0x27;
  _DWORD *v1 = *a1;
}

void sub_1001A2694(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (235795823 * ((-127693918 - (a1 | 0xF8638BA2) + (a1 | 0x79C745D)) ^ 0x93313D04));
  __asm { BR              X10 }

uint64_t sub_1001A2760(uint64_t a1)
{
  int v5 = *(_DWORD *)(*(void *)(a1 + 8) + v4) == (((v3 ^ 0x64) - 1470) ^ (v1 + 298));
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((8 * v5) | (v5 << 6)) ^ v3)) - 8LL))();
}

uint64_t sub_1001A279C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  unsigned int v6 = v2 + 1374699841 * (&v4 ^ 0x6DF41809) + 137;
  return sub_1001A2B9C((uint64_t)&v4);
}

void sub_1001A2900(uint64_t a1)
{
  unint64_t v2 = (unint64_t)&v3[qword_1002BB2D8 ^ qword_1002BB2E0];
  qword_1002BB2E0 = (1126174607 * v2) ^ 0x245AECB3A987CA56LL;
  qword_1002BB2D8 = 1126174607 * (v2 ^ 0x245AECB3A987CA56LL);
  ((void (*)(char *, void (*)()))*(&off_10027AEF0
                                            + ((-113 * ((-113 * v2) ^ qword_1002BB2D8)) ^ byte_1001FD030[byte_1001F91B0[(-113 * ((-113 * v2) ^ qword_1002BB2D8))] ^ 0x85])
                                            + 84))( (char *)*(&off_10027AEF0 + ((-113 * ((qword_1002BB2D8 - qword_1002BB2E0) ^ 0x56)) ^ byte_1001FCF30[byte_1001F90B0[(-113 * ((qword_1002BB2D8 - qword_1002BB2E0) ^ 0x56))] ^ 0x6A])
            + 55)
  - 12,
    sub_1001CF1BC);
  __asm { BR              X10 }

uint64_t sub_1001A2A24@<X0>(unsigned int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * ((1818
                                * (((a1 ^ (*(void *)(*(void *)(v2 + 8LL * (a1 ^ 0x3DB)) - 4LL) == 0LL)) & 1) == 0)) ^ a1)))();
}

uint64_t sub_1001A2A5C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (a1 ^ 0x3D3u)))(v1);
}

  ;
}

uint64_t sub_1001A2A8C(uint64_t a1)
{
  int v1 = 628203409 * (((a1 | 0xC21FEC2B) - (a1 & 0xC21FEC2B)) ^ 0x4097E018);
  int v2 = *(_DWORD *)(a1 + 8) - v1;
  unsigned int v3 = v1 + *(_DWORD *)(a1 + 12) - 103152451;
  int v4 = (*(_DWORD *)(*(void *)a1 - 0x8FD385F8C7F98D9LL) ^ 0xA20257AB) + v3;
  unsigned int v5 = v4 - 1576904789 + (~(2 * v4) | 0xBBFB50A9) + 1;
  *(_DWORD *)(*(void *)a1 - 0x8FD385F8C7F98D9LL) = v5;
}

void sub_1001A2B54(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x8FD385F8C7F98DDLL) = (*(_DWORD *)(a1 - 0x8FD385F8C7F98DDLL) ^ 0x7299FD1B)
                                        + 1922694427
                                        - ((2 * (*(_DWORD *)(a1 - 0x8FD385F8C7F98DDLL) ^ 0x7299FD1B) + 2) & 0xE533FA36)
                                        + 1;
}

uint64_t sub_1001A2B9C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 1374699841 * ((((2 * a1) | 0x340440B2) - a1 + 1711136679) ^ 0xF7F63850);
  return ((uint64_t (*)(void))(*((void *)*(&off_10027AEF0 + (v1 ^ 0x1C3))
                              + (((*(void *)a1 == *(void *)(a1 + 8)) * ((v1 + 3) ^ 0x1B3)) ^ v1)
                              - 1)
                            - 8LL))();
}

uint64_t sub_1001A2C18@<X0>(uint64_t a1@<X8>)
{
  int v4 = *(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL);
  int v5 = v4 - 1966800080;
  if (v4 - 1966800080 < 0) {
    int v5 = 1966800080 - v4;
  }
  *(_DWORD *)(v1 - 0x1F589EA4AC42BDE5LL) = v4;
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
                                        * ((((v5 ^ 0x3FECDBCA)
                                           - 583062400
                                           + ((v5 << ((29 * (v3 ^ 0xB9)) ^ 0xB2)) & 0x7FD9B794) != 489424970)
                                          * (347 * (v3 ^ 0x1B2) - 429)) ^ v3))
                            - 8LL))();
}

uint64_t sub_1001A2CC4@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*(void *)(v3 - 0x1F589EA4AC42BDE1LL) + 4LL * (v5 - 489424971)) = *(_DWORD *)(*(void *)(v4 - 0x1F589EA4AC42BDE1LL)
                                                                                           + 4LL * (v5 - 489424971));
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (((v5 - 1 == v1) * ((87 * (v2 ^ 0x569)) ^ 0x210)) ^ v2)) - 12LL))();
}

void sub_1001A2D34()
{
}

void sub_1001A2D40(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (1374699841 * ((((2 * (_DWORD)a1) | 0x97E9331C) - (_DWORD)a1 + 873162354) ^ 0xA6008187));
  __asm { BR              X10 }

uint64_t sub_1001A2E20@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  unsigned int v12 = 1755732067 * ((((2 * &a4) | 0x816F4332) - &a4 - 1085776281) ^ 0x9E711C42);
  a6 = (v11 - 105) ^ v12;
  a7 = &STACK[0x708F6A420CBDE15B];
  a8 = v12 ^ 0x161247E9;
  a4 = &STACK[0x3F8123127DDA1A6C];
  a5 = v10;
  uint64_t v13 = (*(uint64_t (**)(unint64_t **))(a1 + 8LL * (v11 - 110)))(&a4);
  return (*(uint64_t (**)(uint64_t))(v9
                                            + 8LL
                                            * (((*(_DWORD *)(v10 - 0x27E11828102FB971LL) != v8)
                                              * (v11 + ((v11 - 259) | 0x182) - 568)) ^ v11)))(v13);
}

uint64_t sub_1001A2F00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return (*(uint64_t (**)(void))(v11 + 8LL * (int)(((a10 != v10 - 4) * (((v12 - 851080683) ^ 0xCD458A49) - 389)) ^ v12)))();
}

void sub_1001A2F38(_DWORD *a1@<X8>)
{
  *a1 = v2;
  *(_DWORD *)(v1 + 4) = -2084203318;
}

void sub_1001A2FEC()
{
  v0[1] = 108757529
  sub_1001CF8B4(v0);
  __asm { BR              X8 }

uint64_t sub_1001A30DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, int a17, unsigned int a18)
{
  a16 = &STACK[0x49EB7E5E2EA5C915];
  a18 = 854
      - 460628867 * ((851217541 - (&a16 | 0x32BC8C85) + (&a16 | 0xCD43737A)) ^ 0x81D5F107);
  sub_1001A8490((uint64_t)&a16);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 - 1690371238 + *(void *)(v20 + 8LL * ((1742 * (a17 == 2084229119)) ^ v19))))( v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  a9);
}

uint64_t sub_1001A3188( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, unsigned int a20, uint64_t a21)
{
  unsigned int v27 = 1178560073 * ((&a17 & 0xF177A641 | ~(&a17 | 0xF177A641)) ^ 0xB41C21DC);
  a19 = a15;
  a20 = v27 ^ 0x3E5;
  a18 = v27 + 804878199 * v25 + 1740498123;
  sub_1001A23C4((uint64_t)&a17);
  unsigned int v28 = 1178560073 * ((&a17 - 30129850 - 2 * (&a17 & 0xFE344146)) ^ 0x44A03924);
  a20 = v28 ^ 0x3E5;
  a19 = a15;
  a18 = v28 + 804878199 * v24 + 1740498123;
  sub_1001A23C4((uint64_t)&a17);
  unsigned int v29 = 1178560073
      * (((&a17 ^ 0xC8EAEDAE) & 0x7FE834FE | ~(&a17 ^ 0xC8EAEDAE | 0x7FE834FE)) ^ 0xF2695ECD);
  a18 = v29 + 292;
  a19 = a15;
  a20 = v29 ^ ((v23 ^ 0xDFFFDDDC) + 1865940968 + ((2 * v23) & 0xBFFFBBB8));
  a21 = a10;
  sub_1001B9C6C(&a17);
  unsigned int v30 = 1178560073 * (&a17 ^ 0xBA947862);
  a18 = v30 + 292;
  a20 = v30 ^ ((v22 ^ 0xFFBFDFD7) + 1333263853 + ((2 * v22) & 0xFF7FBFAE));
  a19 = a15;
  a21 = a11;
  sub_1001B9C6C(&a17);
  unsigned int v31 = 1178560073
      * ((-1714998320 - (&a17 | 0x99C733D0) + (&a17 | 0x6638CC2F)) ^ 0xDCACB44D);
  a19 = a15;
  a20 = v31 ^ ((a13 ^ 0x4F7FFDFD) - 4726841 + ((2 * a13) & 0x9EFFFBFA));
  a21 = v21;
  a18 = v31 + 292;
  uint64_t v32 = sub_1001B9C6C(&a17);
  return ((uint64_t (*)(uint64_t))(*(void *)(v26 + 8LL * ((1649 * (a17 == 2084229119)) ^ 0x36Bu)) - 12LL))(v32);
}

uint64_t sub_1001A3464( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, uint64_t a17, unsigned int a18, unsigned int a19, unsigned int a20, int a21)
{
  unsigned int v24 = 460628867
      * (((&a16 | 0x53DCC1F3) - &a16 + (&a16 & 0xAC233E08)) ^ 0x1F4A438E);
  a16 = &STACK[0x27D4077E41C0C6C0];
  a17 = a14;
  a18 = v24 - 1954399632;
  a19 = v24 + v21 - 2024873958;
  a20 = 274310066 - v24;
  uint64_t v25 = sub_1001CFD20((uint64_t)&a16);
  return ((uint64_t (*)(uint64_t))(*(void *)(v23 + 8LL * (((a21 == v22) * (v21 + 1172)) ^ v21)) - 12LL))(v25);
}

uint64_t sub_1001A3520()
{
  int v12 = &STACK[0x18E41690234F4EB9];
  uint64_t v13 = v7;
  unsigned int v10 = (v2 - 473) ^ (1374699841
                    * ((-1810256295 - (&v10 | 0x9419AE59) + (&v10 | 0x6BE651A6)) ^ 0x61249AF));
  ((void (*)(unsigned int *))*(&off_10027AEF0 + v2 - 693))(&v10);
  int v12 = v7;
  unsigned int v10 = (v2 - 462) ^ (1755732067 * (((&v10 | 0x20BFA5DD) - (&v10 & 0x20BFA5DD)) ^ 0xFE791806));
  sub_1001A3BA0((uint64_t)&v10);
  if ((_DWORD)v13 == v3 + v4 - 493) {
    int v5 = v9;
  }
  else {
    int v5 = (int)v13;
  }
  int v12 = v7;
  unsigned int v11 = v2 + (((&v10 | 0x63B7244C) - (&v10 & 0x63B7244C)) ^ 0x69432A63) * v1 + 456;
  v0(&v10);
  int v12 = v8;
  unsigned int v11 = v4
      + ((1845353981 - (&v10 | 0x6DFDDDFD) + (&v10 | 0x92022202)) ^ 0x98F62C2D) * v1
      + 838;
  v0(&v10);
  return v5 ^ 0x7C3ACFFFu;
}

void sub_1001A36F0(uint64_t a1)
{
  int v1 = 235795823 * (((a1 | 0x1A7DF74B) - (a1 | 0xE58208B4) - 444462924) ^ 0x8ED0BE12);
  int v2 = *(_DWORD *)(a1 + 40) ^ v1;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 56);
  int v5 = *(_DWORD *)(a1 + 64) - v1;
  int v6 = (*(_DWORD *)a1 ^ v1) - ((2 * (*(_DWORD *)a1 ^ v1) + 386188576) & 0x16332056);
  unsigned int v7 = 1374699841 * ((&v8 & 0xD57671FD | ~(&v8 | 0xD57671FD)) ^ 0x477D960B);
  uint64_t v14 = *(void *)(a1 + 8);
  int v9 = v7 ^ (v2 + 1695026847);
  int v15 = 950032007 * v5 - v7 + 688127838;
  int v13 = (v6 - 2036600133) ^ v7;
  uint64_t v10 = v4;
  uint64_t v12 = v3;
  uint64_t v8 = v4;
  sub_1001CF2F0((uint64_t)&v8);
  __asm { BR              X8 }

uint64_t sub_1001A38AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unint64_t *a11, char a12, unsigned int a13, uint64_t a14, int a15)
{
  char v23 = *(_BYTE *)(v16 + 24);
  int v24 = 794482241 * v21 + 1270960347;
  unsigned int v25 = v24 ^ 0xBEEE7F75;
  int v26 = (v24 << (5 * ((v22 - 64) & 0xD6 ^ 0xAB) - 92)) & 0x7DDCFEEA;
  unsigned int v27 = 1759421093 * (((&a10 | 0x3A5775E8) - (&a10 & 0x3A5775E8)) ^ 0x892AC5BC);
  a15 = v22 - v27 - 3;
  a14 = v19;
  a11 = &STACK[0x3B9673EEDC6940C6];
  a13 = v27 + v25 + 1802881968 + v26;
  a12 = (v23 - v20 - 52) ^ (-91 * (((&a10 | 0xE8) - (&a10 & 0xE8)) ^ 0xBC));
  uint64_t v28 = (*(uint64_t (**)(int *))(v15 + 8LL * (v22 ^ 0x2FE)))(&a10);
  return ((uint64_t (*)(uint64_t))(*(void *)(v18 + 8LL * ((102 * (a10 != v17)) ^ v22)) - 4LL))(v28);
}

uint64_t sub_1001A39D4()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v0 ^ (1871 * ((v1 - 75341170) < 0xFFFFFFFE))))
                            - ((121 * (v0 ^ 0x3D7) - 1065683550) & 0x3F850AF1)
                            + 745LL))();
}

uint64_t sub_1001A3A2C@<X0>(uint64_t a1@<X8>, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  a5 = a1;
  a6 = a2;
  a3 = (v9 - 351) ^ (1374699841
                   * ((&a3 - 1361229690 - 2 * ((unint64_t)&a3 & 0xAEDD4886)) ^ 0xC329508F));
  uint64_t v10 = (*(uint64_t (**)(int *))(v6 + 8LL * (v9 ^ 0x247u)))(&a3);
  return ((uint64_t (*)(uint64_t))(*(void *)(v8
                                                      + 8LL
                                                      * (((a4 == v7 + v9 - 148 - 605) * ((v9 - 148) ^ 0x3BE)) ^ v9))
                                          - 4LL))(v10);
}

void sub_1001A3AC8(uint64_t a1@<X8>)
{
  *(void *)(*(void *)(v1 + 48) - 0x27D4077E41C0C6A_swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.GKGameModeListener", 33LL, "init()", 6LL, 0LL) = a1;
  *(_DWORD *)(v1 + 68) = 2084229119;
}

uint64_t sub_1001A3BA0(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (1755732067 * ((a1 & 0xECFD530 | ~(a1 | 0xECFD530)) ^ 0x2FF69714));
  return (*((uint64_t (**)(void))*(&off_10027AEF0 + v1 - 301)
          + ((1584 * (*(void *)(a1 + 8) != 0x27E11828102FB989LL)) ^ v1)
          - 1))();
}

uint64_t sub_1001A3C2C()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((59 * (*(_DWORD *)(v2 - 0x27E11828102FB971LL) == 2084229119)) ^ v0)))();
}

uint64_t sub_1001A3C68()
{
  unsigned int v3 = *(_DWORD *)(v2 - 0x27E11828102FB979LL) - 1725854611;
  unsigned int v4 = *(_DWORD *)(v2 - 0x27E11828102FB97DLL) - 2111635616;
  BOOL v5 = v4 < 0xAC874A85;
  BOOL v6 = v3 < v4;
  if (v3 < 0xAC874A85 != v5) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v1 + 8LL * ((709 * v6) ^ v0)))();
}

uint64_t sub_1001A3CF0@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *uint64_t v2 = a2;
  *(_DWORD *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = -2084203318;
  return result;
}

void sub_1001A3D04(uint64_t a1, uint64_t a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = !v2;
  __asm { BR              X8 }

uint64_t sub_1001A3D7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, unsigned int a15)
{
  uint64_t v17 = sub_1001CF8B4(&a14);
  return (*(uint64_t (**)(uint64_t))(v16 + 8LL * ((949 * (a14 == 2084229119)) ^ v15)))(v17);
}

uint64_t sub_1001A3E10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, int a15, unsigned int a16)
{
  a14 = &STACK[0x49EB7E5E2EA5C905];
  a16 = 854 - 460628867 * (((&a14 | 0x9646C919) + (~&a14 | 0x69B936E6)) ^ 0xDAD04B65);
  sub_1001A8490((uint64_t)&a14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16
                                                                                                  + 8LL * ((211 * (a15 != (v17 ^ 0x56A9AAEC))) ^ 0x47Du)))( v18,  v19,  v20,  v21,  v22,  v23,  v24);
}

uint64_t sub_1001A3EC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, unsigned int a16, uint64_t a17)
{
  a16 = v21 + 1224239923 * ((&a14 & 0x2EDB128E | ~(&a14 | 0x2EDB128E)) ^ 0x239710A6) + 1545;
  a15 = a12;
  a17 = v17;
  uint64_t v22 = ((uint64_t (*)(int *))(*(void *)(v20 + 8LL * (v21 - 137)) - 8LL))(&a14);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL
                                                      * (((a14 == v18) * (((v21 + 1115793816) | 0x142800AC) ^ 0x56A9ACBD)) ^ v21))
                                          - 8LL))(v22);
}

uint64_t sub_1001A3F80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, uint64_t a15, unsigned int a16, unsigned int a17, unsigned int a18, int a19)
{
  unsigned int v24 = 460628867
      * (((&a14 ^ 0x7470E57E) + 2038877446 - 2 * ((&a14 ^ 0x7470E57E) & 0x7986CD06)) ^ 0x4160AA05);
  a14 = &STACK[0x27D4077E41C0C6B0];
  a15 = a12;
  a18 = 274310066 - v24;
  a16 = v24 - 370372623;
  a17 = v24 + v22 - 2024873251;
  uint64_t v25 = sub_1001CFD20((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t))(*(void *)(v21
                                                      + 8LL * (((a19 == v19) * (v20 + (v22 ^ (v23 + 516)) + 336)) ^ v22))
}

uint64_t sub_1001A405C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unint64_t *a16)
{
  a14 = (v16 - 282) ^ (1374699841
                     * ((2 * ((&a14 ^ 0x8D621A2D) & 0x1E6AC938)
  a15 = &STACK[0x18E41690234F4F65];
  a16 = a11;
  int v20 = *(void (**)(unsigned int *))(v19 + 8LL * (int)(v16 - 502));
  v20(&a14);
  a14 = (v16 - 282) ^ (1374699841
                     * ((&a14 + 2091475848 - 2 * (&a14 & 0x7CA96388)) ^ 0x115D7B81));
  a15 = &STACK[0x18E41690234F4F69];
  a16 = a11;
  v20(&a14);
  a15 = a11;
  a14 = (v16 - 271) ^ (1755732067 * ((&a14 & 0x36E44DFF | ~(&a14 | 0x36E44DFF)) ^ 0x17DD0FDB));
  uint64_t v21 = sub_1001A3BA0((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t))(*(void *)(v18 + 8LL * ((76 * ((_DWORD)a16 == v17)) ^ v16))
                                          - ((v16 - 675698623) & 0x56A9FFFE)
                                          + 1453959908LL))(v21);
}

uint64_t sub_1001A41D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  return ((uint64_t (*)(void))(v15 - (v16 + v14) + *(void *)(v18 + 8LL * ((1094 * (a14 == v17)) ^ v16))))();
}

uint64_t sub_1001A41FC()
{
  int v5 = v2 ^ v0;
  void *v1 = ((v2 ^ v0) + 630269203) ^ v9;
  unsigned int v11 = 535753261 * (((v10 | 0x8B130A1B) - (v10 & 0x8B130A1B)) ^ 0x81E70434)
      - 1453958585
      + (v2 ^ v0);
  uint64_t v12 = v7;
  v4(v10);
  uint64_t v12 = v8;
  unsigned int v11 = 535753261 * ((-257335632 - (v10 | 0xF0A95EB0) + (v10 | 0xF56A14F)) ^ 0x5A2AF60)
      - 1453958585
      + v5;
  v4(v10);
  return v3 ^ 0x7C3ACFFFu;
}

void sub_1001A4318(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) ^ (1755732067 * (((a1 | 0x83D72B3C) - (a1 & 0x83D72B3C)) ^ 0x5D1196E7));
  uint64_t v3 = *(void *)(a1 + 8);
  v2[0] = v1
        + 628203409
  sub_1001C1AC0((uint64_t)v2);
  __asm { BR              X9 }

uint64_t sub_1001A4450@<X0>(uint64_t a1@<X8>)
{
  unsigned int v5 = (((v4 ^ v3) >> 4) & 0xFF7FBFE ^ 0x2B65250) + (((v4 ^ v3) >> 5) ^ 0x5EA0D4D7) - 1742869756;
  int v6 = (v1 > 0x7E616FC) ^ (v5 < 0xF819E903);
  BOOL v7 = v5 < v1 - 132519677;
  if (v6) {
    BOOL v7 = v1 > 0x7E616FC;
  }
  return (*(uint64_t (**)(void))(a1
                              + 8LL
                              * (((((v2 ^ 0x3F2) + 322) ^ 0x404 ^ (((v2 ^ 0x3F2) + 322) | 0x6A)) * v7) ^ v2 ^ 0x3F2)))();
}

uint64_t sub_1001A44F0@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (v2 ^ (195 * ((v1 & 0x1F) == 0x16)))) - 8LL))();
}

uint64_t sub_1001A4538@<X0>(uint64_t a1@<X8>)
{
  int v6 = v1 - 107169793;
  if (*v4 + 180683568 < 0) {
    int v6 = -1181436931 - v1;
  }
  *int v4 = *v4 - 1503180286 + v6;
  int v7 = v2 + 1843515721;
  BOOL v8 = v7 < -1914318006;
  **(_DWORD **)(v5 - 0x1F589EA4AC42BDE1LL) = *(_DWORD *)(*(void *)(v5 - 0x1F589EA4AC42BDE1LL) + 4LL
                                                                                                * (v1 - 1610350079));
  if (v7 >= -1914318006) {
    BOOL v8 = v7 > 233165643;
  }
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((44 * !v8) ^ v3)) - 267 * (v3 ^ 0x30Eu) + 797LL))();
}

void sub_1001A4634()
{
}

void sub_1001A463C()
{
  *int v0 = 1966800080;
}

uint64_t sub_1001A4894(uint64_t a1)
{
  int v1 = 1759421093 * ((~(_DWORD)a1 & 0xA201450D | a1 & 0x5DFEBAF2) ^ 0x117CF559);
  int v2 = *(_DWORD *)(a1 + 8) - v1;
  unsigned int v3 = *((_DWORD *)*(&off_10027AEF0 + (v2 ^ 0x1B5)) + 84);
  unsigned int v4 = (*(_DWORD *)(a1 + 16) ^ v1) + 854324997;
  if (v4 < 0x8F6C2382 != v3 > 0x7093DC7D) {
    BOOL v5 = v3 > 0x7093DC7D;
  }
  else {
    BOOL v5 = v3 - 1888738430 > v4;
  }
  return (*((uint64_t (**)(void))*(&off_10027AEF0 + (v2 & 0x5B7480F1)) + ((191 * !v5) ^ v2) - 1))();
}

uint64_t sub_1001A4978()
{
  int v4 = 934 * (v2 ^ 0x17C);
  unsigned int v5 = v1 + 926143831;
  BOOL v6 = v5 < (((v4 ^ 0x7F3) - 1816920085) ^ (2 * (v4 ^ 0x7F3u)));
  BOOL v7 = v3 - 1816919596 < v5;
  if (v3 > 0x6C4BFE2B != v6) {
    BOOL v7 = v6;
  }
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * (!v7 | v4)) - 8LL))();
}

uint64_t sub_1001A4A00(uint64_t a1)
{
  unsigned int v5 = *(_DWORD *)(v3 + 340);
  unsigned int v6 = (*(_DWORD *)(a1 + 4) ^ v1) + 1453046543;
  if (v6 < 0x733EA400 != v5 > ((v4 - 360246287) & 0x1578E7FF ^ 0x8CC15A81)) {
    BOOL v7 = v5 > ((v4 - 360246287) & 0x1578E7FF ^ 0x8CC15A81);
  }
  else {
    BOOL v7 = v5 + 1933485056 > v6;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((44 * !v7) ^ v4)) - 4LL))();
}

uint64_t sub_1001A4A90()
{
  unsigned int v4 = v2 - 1196043032;
  BOOL v5 = v4 < 0xD558BDD9;
  BOOL v6 = v3 - 715604519 < v4;
  if (v3 > 0x2AA74226 == v5) {
    BOOL v5 = v6;
  }
  return (*(uint64_t (**)(void))(v0 + 8LL * (v1 ^ (1369 * !v5))))();
}

uint64_t sub_1001A4AF4(_DWORD *a1)
{
  int v5 = *a1 ^ v1;
  unsigned int v6 = *(_DWORD *)(v4 + 352);
  else {
    BOOL v7 = v6 - 1568686394 > v5 + 1735514754;
  }
  return (*(uint64_t (**)(void))(v2 + 8LL * ((198 * !v7) ^ v3)))();
}

uint64_t sub_1001A4B60@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  else {
    BOOL v4 = v2 + 736171951 < v3 - 254594197;
  }
  if (v4) {
    int v5 = a2;
  }
  else {
    int v5 = a2 + 1;
  }
  *(_DWORD *)(result + 1sub_100129678(v0 + 2) = v5;
  return result;
}

void sub_1001A4BB4(uint64_t a1)
{
  __asm { BR              X9 }

uint64_t sub_1001A4BF0()
{
  return 4294925273LL;
}

uint64_t sub_1001A4BFC@<X0>(uint64_t a1@<X8>)
{
  return 0LL;
}

void sub_1001A4C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4) {
    BOOL v5 = a5 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = !v5;
  __asm { BR              X8 }

uint64_t sub_1001A4C88( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, unsigned int a18)
{
  *a4 = 0LL;
  *a5 = 0;
  a18 = 108757529
  uint64_t v21 = sub_1001CF8B4(&a17);
  return (*(uint64_t (**)(uint64_t))(v19 + 8LL * ((1208 * (a17 == v20)) ^ v18)))(v21);
}

uint64_t sub_1001A4D14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unsigned int a18, unsigned int a19, int a20)
{
  unsigned int v22 = 1759421093 * ((2 * (&a17 & 0x43114A58) - &a17 - 1125206624) ^ 0xF9305F4);
  a20 = v22 ^ 0x5C802CB3;
  LODWORD(a17) = v22 ^ 0x3B0DE444;
  HIDWORD(a17) = v22 ^ 0x1CA2E939;
  a18 = v22 + 382;
  ((void (*)(unint64_t **))(*(void *)(v21 + 576) - 8LL))(&a17);
  a17 = &STACK[0x49EB7E5E2EA5C925];
  a19 = 854 - 460628867 * ((2 * (&a17 & 0x4542B498) - &a17 + 985484129) ^ 0x762BC91C);
  sub_1001A8490((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8LL * ((249 * (a18 == 2084229119)) ^ 0x271u)))( v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  a9,  a10);
}

uint64_t sub_1001A4E2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, unsigned int a20, uint64_t a21)
{
  unsigned int v26 = 1178560073 * ((2 * (&a17 & 0x1E626340) - &a17 + 1637719231) ^ 0xDB09E4DD);
  a18 = v26 + 804878199 * v23 + 1740498123;
  a20 = v26 ^ 0x3E5;
  a19 = a16;
  (*(void (**)(int *))(v25 + 928))(&a17);
  unsigned int v27 = 1178560073 * ((2 * (&a17 & 0x767B7528) - &a17 - 1987802416) ^ 0x3310F2B2);
  a18 = v27 + 292;
  a20 = ((v22 ^ 0x5F3FDDDF) - 268959771 + ((2 * v22) & 0xBE7FBBBF)) ^ v27;
  a19 = a16;
  a21 = v21;
  uint64_t v28 = (*(uint64_t (**)(int *))(v25 + 448))(&a17);
  return ((uint64_t (*)(uint64_t))(*(void *)(v24 + 8LL * ((1662 * (a17 == 2084229119)) ^ 0x2FFu)) - 12LL))(v28);
}

uint64_t sub_1001A4F94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, uint64_t a18, int a19, int a20, int a21, int a22)
{
  if (a12 >= 0x5DC22130) {
    int v25 = 274310065;
  }
  else {
    int v25 = 274310066;
  }
  int v26 = 460628867 * ((&a17 + 1990631928 - 2 * ((unint64_t)&a17 & 0x76A6A1F8)) ^ 0x3A302385);
  a21 = v25 - v26;
  a17 = &STACK[0x27D4077E41C0C6C0];
  a18 = a16;
  a19 = v26 - 1185536072;
  a20 = v26 + v22 - 2024873850;
  uint64_t v27 = sub_1001CFD20((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t))(*(void *)(v23 + 8LL * ((466 * (a22 == v24)) ^ v22))
                                          - ((v22 + 593496192) & 0x6F1)
                                          + 613LL))(v27);
}

uint64_t sub_1001A5074( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v14
                                                                        + 8LL
                                                                        * ((((v13 + 771) ^ 0x790) * (a12 < v12)) ^ (v13 + 771)))
                                                            - 4LL))( a1,  a2,  a3);
}

uint64_t sub_1001A5104@<X0>( uint64_t a1@<X8>, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, _BYTE *a6, int a7, char a8, uint64_t a9, uint64_t a10, unsigned int a11, char *a12, _BYTE *a13, uint64_t a14, unsigned int a15)
{
  unsigned int v22 = v16;
  int v23 = v15 - 245;
  a12 = &a8 + a1;
  a13 = a6;
  v20(&a11);
  a12 = a6;
  a13 = v22;
  a14 = v18;
  a15 = (v23 - 892) ^ (1225351577
                     * (((&a11 | 0x5CB85DA2) - &a11 + (&a11 & 0xA347A258)) ^ 0x7F2285B4));
  ((void (*)(unsigned int *))(*(void *)(v21 + 8LL * (v23 - 1282)) - 12LL))(&a11);
  a11 = (v23 - 891) ^ (1374699841
                     * (((&a11 | 0xDC81876C) - &a11 + (&a11 & 0x237E7890)) ^ 0xB1759F65));
  a13 = a6;
  a12 = a3;
  v20(&a11);
  a12 = a6;
  a11 = (v23 - 880) ^ (1755732067
                     * ((2 * (&a11 & 0x24AA4D50) - &a11 + 1532342955) ^ 0x85930F70));
  uint64_t v24 = sub_1001A3BA0((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL
                                                      * (int)((((_DWORD)a13 == 2084229119)
                                                             * ((((v23 ^ 0x536) + 1218) ^ 0xFFFFF9D9)
                                                              + 13 * (v23 ^ 0x536))) ^ v23))
                                          - 4LL))(v24);
}

uint64_t sub_1001A52E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL
                                              * ((496 * (((a14 == v16) ^ (v14 - 110)) & 1)) ^ v14))
}

uint64_t sub_1001A5324@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * (int)(((a6 != v7) * ((((a1 & 0xE602BD7D) + 525) | 0x80) ^ 0x7C8)) | a1 & 0xE602BD7D))
                            - ((a1 & 0xE602BD7D)
                             - 526)
                            + 763LL))();
}

uint64_t sub_1001A5370@<X0>(int a1@<W8>)
{
  BOOL v5 = (*(uint64_t (**)(void))(v4 + 8LL * (v1 ^ 0x778)))(a1 ^ v3) != 0;
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((v5 * ((13 * (v1 ^ 0x7A1)) ^ (v1 - 365744092) & 0x15CCCAC3 ^ 0x79)) ^ v1))
                            - 8LL))();
}

uint64_t sub_1001A53E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v16 = v13 + 651 + (a13 ^ v15) - (((19 * (v13 ^ 0x2E3)) ^ 0x35133DF) & (2 * (a13 ^ v15))) + 27825513;
  BOOL v17 = ((2 * v16) & 0xFDF3E37E ^ 0x151206C) + (v16 ^ 0xFF516BC9) + 930545525 != 913371444;
  return ((uint64_t (*)(void))(*(void *)(v14 + 8LL * (((2 * v17) | (4 * v17)) ^ v13)) - 8LL))();
}

uint64_t sub_1001A547C(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5
                                                               + 8LL
                                                               * (((4
                                                                  * ((((v2 + v1 + 17174081) < 8) ^ (v4 - 50)) & 1)) & 0xF7 | (8 * ((((v2 + v1 + 17174081) < 8) ^ (v4 - 50)) & 1))) ^ v4))
                                                   - (v4 - 1795787388)
                                                   + 2499181743LL))( a1,  v3);
}

uint64_t sub_1001A54F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(a4
                                                   + *(void *)(v8
                                                               + 8LL
                                                               * ((1325
                                                                 * ((((unint64_t)(v6 - a1) < 0x20) ^ (a6 | 0xAA)) & 1)) ^ (a6 | 0xAA)))
                                                   - (a5
                                                    + (a6 | 0xAAu)
                                                    - 314)
                                                   + 4))( a1,  v7);
}

uint64_t sub_1001A553C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * (((v6 >= (((a6 ^ 0x344) + 47) ^ 0x13Eu))
                                          * ((a5 + (a6 ^ 0x344) + 386) ^ (a5 + 616))) ^ a6 ^ 0x344))
                            - 4LL))();
}

uint64_t sub_1001A5580(uint64_t a1, int a2)
{
  uint64_t v8 = (v6 + v3);
  __int128 v9 = *(_OWORD *)(v2 + v8 - 15);
  __int128 v10 = *(_OWORD *)(v2 + v8 - 31);
  uint64_t v11 = a1 + v8;
  *(_OWORD *)(v11 - 15) = v9;
  *(_OWORD *)(v11 - 31) = v10;
  LODWORD(v11) = ((a2 + 303762157) & 0x58EE7EFF) - 1668 != (v5 & 0xFFFFFFE0);
  return (*(uint64_t (**)(void))(v7 + 8LL * (int)((v11 | (8 * v11)) ^ (v4 + a2 + 197))))();
}

uint64_t sub_1001A55EC(uint64_t a1)
{
  void *v3 = a1;
  *uint64_t v7 = v2;
  int v5 = 5 * (v1 ^ 0x570);
  uint64_t v13 = v9;
  unsigned int v12 = (v1 ^ 0x7F2)
  v8(v11);
  uint64_t v13 = v10;
  unsigned int v12 = v5
      + 535753261
  v8(v11);
  return v4 ^ 0x7C3ACFFFu;
}

void sub_1001A58A4(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    BOOL v1 = *(_DWORD *)(a1 + 20) - 1759421093 * (a1 ^ 0xB37DB054) == 711215909;
  }
  else {
    BOOL v1 = 1;
  }
  char v2 = v1;
  __asm { BR              X9 }

uint64_t sub_1001A5948@<X0>(int a1@<W8>)
{
  int v3 = a1 | 0x110;
  int v4 = (*(uint64_t (**)(uint64_t))(v1 + 8LL * ((a1 | 0x110) ^ 0x5B7)))(32LL) == 0;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((16 * v4) | (v4 << 7)) ^ v3))
                            - (647 * (v3 ^ 0x557u)
}

uint64_t sub_1001A59C0()
{
}

uint64_t sub_1001A5A18@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v11 = v2 - 711215910;
  int v12 = v2 - 1;
  int v13 = *(unsigned __int8 *)(v6 + v11);
  if (v13 == 44) {
    __asm { BR              X11 }
  }

  if (v13 == 172)
  {
    int v14 = 2084229119;
    uint64_t v15 = *(void *)(v4 + 8);
    int v16 = *(unsigned __int8 *)(v4 + 16) ^ v5;
    *(void *)uint64_t result = v6;
    *(_DWORD *)(result + 8) = v7;
    *(_DWORD *)(result + 1sub_100129678(v0 + 2) = v12;
    if (v16 == 54) {
      int v17 = -807069058;
    }
    else {
      int v17 = -807069057;
    }
    *(_DWORD *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 325434904;
    *(_DWORD *)(result + 20) = v17;
    *(_DWORD *)(result + 24) = 2084229119;
    *(void *)(v15 - 0x3B9673EEDC6940C6LL) = a2;
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void))(v8 + 8LL * (v9 ^ 0x222)))();
    int v14 = -2084203482;
  }

  *(_DWORD *)uint64_t v4 = v14;
  return result;
}

void sub_1001A5AFC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

uint64_t sub_1001A5B70@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8LL * ((944 * (((2LL * (a6 - 510884208)) & 0x1EF6F776ELL) + ((a6 - 510884208) ^ 0x473FDBF5F7B7BBB7LL) - 0x473FDBF544A5893BLL == 3004314236LL)) ^ 0x1BBu))
                                                                                       - 8LL))( a1,  a2,  a3,  a4,  a5,  3830081139LL);
}

uint64_t sub_1001A5C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12 = *(unsigned __int8 *)(v9 + v10 - 0x70045B2604D2BAE7LL) - *(unsigned __int8 *)(v8 + v10 - 0x70045B2604D2BAE7LL);
  return ((uint64_t (*)(uint64_t))(a6
                                          - ((v6 - 321192303) & 0xF76F66FB)
                                          + *(void *)(v11
                                                      + 8LL
                                                      * ((1100
                                                        * (((2 * v12) & 0xDFEDFFFE) + (v12 ^ (v7 + 443)) == ((v6 + 205) ^ v7))) ^ v6))))(4294925278LL);
}

uint64_t sub_1001A5C90()
{
  BOOL v5 = v1 < v0;
  if (v5 == v3 - 0x70045B2551C0886ALL < v0) {
    BOOL v5 = v3 - 0x70045B2551C0886ALL < v1;
  }
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((((v2 - 1388841933) & 0x52C80AFF ^ 0x35E) * !v5) ^ v2)) - 8LL))();
}

uint64_t sub_1001A5D04@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v2
                                                      + 8LL
                                                      * (int)(((((v1 ^ 0x106) - 464886637) ^ 0xE44A60A8)
                                                             * (a1 == 510884217)) ^ v1))
                                          - 8LL))(4294925278LL);
}

uint64_t sub_1001A5D5C()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * (((((2 * (*v0 - 42)) & 0xFFEB8FD6) + ((*v0 - 42) ^ 0xFFF5C7EB) == -669717)
                                * ((v1 ^ 0xF5) + 1157)) ^ v1)))();
}

uint64_t sub_1001A5DB8()
{
  int v5 = ((v3 - 232) | 0x1D) + *(unsigned __int8 *)(v2 + 1) - 419;
  return (*(uint64_t (**)(void))(v4 + 8LL * ((1998 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v3)))();
}

uint64_t sub_1001A5E04()
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 2) - 72)))
}

uint64_t sub_1001A5E4C()
{
  return (*(uint64_t (**)(void))(v5
                              + 8LL
                              * ((1911
}

uint64_t sub_1001A5E94()
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * ((614
                                * ((((v3 - 909622249) & 0x3637BB1D ^ (v1 - 267)) & (2
}

uint64_t sub_1001A5EF0()
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * ((1007
}

uint64_t sub_1001A5F40()
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * (int)((((v1 & (2 * (*(unsigned __int8 *)(v2 + 6) - 1)))
}

uint64_t sub_1001A5F94()
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * ((1014
}

uint64_t sub_1001A6000()
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * (((((5 * (v3 ^ 0xE9)) ^ ((v1 & (2 * (*(unsigned __int8 *)(v2 + 8) - 4)))
}

uint64_t sub_1001A6058(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(v4 + 96) + 1428LL) = 1998989824;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1737
                                          * (*(_DWORD *)(a2 + 4) == ((v3 + 277556864) & 0xEF74D19D)
                                                                  + (v3 ^ 0x186 ^ (v2 + 293)))) ^ v3))
                            - 8LL))();
}

uint64_t sub_1001A60C0(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1992
                                          * ((v3 & (2 * (**(unsigned __int8 **)(a2 + 8) - 42)))
}

uint64_t sub_1001A6104()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1642
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 1) - 134)))
}

uint64_t sub_1001A614C()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1997
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 2) - 72)))
}

uint64_t sub_1001A619C()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1886
                                          * (((v1 + (v2 ^ 0x2B) - 310) & (2 * (*(unsigned __int8 *)(v3 + 3) - 134)))
}

uint64_t sub_1001A61E0()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((662
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 4) - 247)))
}

uint64_t sub_1001A621C()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((2012
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 5) - 13)))
                                           + ((*(unsigned __int8 *)(v3 + 5) - 13) ^ v0) == v0
                                                                                         + ((v2 - 285) | 0x100)
                                                                                         + 54
                                                                                         - 310)) ^ v2))
                            - 8LL))();
}

uint64_t sub_1001A6264(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((29
                                          * (((a1 + 9) ^ (((v2 + 31 * (a1 ^ 0x10A) - 310) & (2 * (*(unsigned __int8 *)(v3 + 6) - 1)))
}

uint64_t sub_1001A62BC()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1425
                                          * ((((*(unsigned __int8 *)(v3 + 7) - 1) << ((v2 | 0x14) ^ 0x1C)) & v1)
}

uint64_t sub_1001A630C()
{
  int v6 = (v1 & (2 * (*(unsigned __int8 *)(v3 + 8) - 5))) + ((*(unsigned __int8 *)(v3 + 8) - 5) ^ v0) == (((v2 + 21) | 4) ^ v4);
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (((4 * v6) | (v6 << 7)) ^ v2)) - 8LL))();
}

uint64_t sub_1001A634C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(v4 + 96) + 1428LL) = 1998989828;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((482 * (*(_DWORD *)(a2 + 4) == ((((v3 - 253) | 0x116) + 67) ^ v2))) ^ (v3 - 30)))
                            - 8LL))();
}

uint64_t sub_1001A63A4(uint64_t a1, uint64_t a2)
{
  int v6 = **(unsigned __int8 **)(a2 + 8) - 42;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * (int)((((v3 & (2 * v6)) + (v6 ^ v2) == v2)
                                               * ((v4 + 594269128) & 0xDC942BEF ^ 0x7EA)) ^ v4))
                            - 8LL))();
}

uint64_t sub_1001A63F8()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((226
                                          * (((v1 + (v2 ^ 0x1D8) - 238) & (2 * (*(unsigned __int8 *)(v3 + 1) - 134)))
}

uint64_t sub_1001A643C()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((827
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 2) - 72)))
                                           + ((*(unsigned __int8 *)(v3 + 2) - 72) ^ v0) == v0
                                                                                         + ((v2 - 140) | 0x44)
                                                                                         - 238)) ^ v2))
                            - 8LL))();
}

uint64_t sub_1001A6484()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1110
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 3) - 134)))
}

uint64_t sub_1001A64C8()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 4) - 247)))
                                           + ((*(unsigned __int8 *)(v3 + 4) - 247) ^ v0) == v0)
                                          * ((v2 - 72) ^ 0x7E7)) ^ v2))
                            - 8LL))();
}

uint64_t sub_1001A6504()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1516
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 5) - 13)))
}

uint64_t sub_1001A6554()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 6) - 1)))
                                           + ((*(unsigned __int8 *)(v3 + 6) - 1) ^ v0) == v0)
                                          * (((v2 - 148) | 0x4C) ^ 0x98)) ^ v2))
                            - 8LL))();
}

uint64_t sub_1001A6598()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1580
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 7) - 1)))
}

uint64_t sub_1001A65D8()
{
  unsigned int v5 = ((((v2 - 130104887) & 0x7C13DFF) - 17) ^ 0xFFFFFF1B) + *(unsigned __int8 *)(v3 + 8);
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((2024 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v2)) - 8LL))();
}

uint64_t sub_1001A6630@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, int a26)
{
  int v30 = v26 + 122;
  *(_DWORD *)(*(void *)(v27 + 96) + 1428LL) = 1998989840;
  int v34 = (v26 - 255) | 0x60B;
  int v31 = 1178560073 * ((v29 + 32226232 - 2 * ((v29 - 120) & 0x1EBBC30)) ^ 0xBB7FC452);
  *(void *)(v29 - 11sub_100129678(v0 + 2) = &STACK[0x8FD385F8C7F9999];
  *(_DWORD *)(v29 - 104) = v26 + 122 - v31 - 1882357841;
  *(_DWORD *)(v29 - 120) = ((a1 - 3) ^ 0x3694542D) - v31;
  uint64_t v32 = sub_1001AC7F8(v29 - 120);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v28
                                                               + 8LL
                                                               * ((1798
                                                                 * (*(_DWORD *)v27
                                                                  + 514164839
                                                                  + ((2 * a26) & 0x58 ^ 0x50)
                                                                  + (v34 ^ a26 & 0x3F ^ 0xDFB7B14C) < 0xFFFFFFC0)) ^ v30))
                                                   - 4LL))( v32,  2231582437LL);
}

uint64_t sub_1001A6824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, char a8)
{
  unsigned int v13 = v10 + 541608085;
  if (v13 <= 0x40) {
    unsigned int v13 = 64;
  }
  return ((uint64_t (*)(void))(*(void *)(v11
                                        + 8LL
                                        * ((237
}

uint64_t sub_1001A68A0(int a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  int v11 = v6 + v5;
  int v12 = v11 + a1;
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
                                        * ((1012
                                          * (a5 - v11 < v9 + v8 + v12 + ((v7 - 62131972) & 0xE7FE6F7F ^ 0x3BFDD110))) ^ v7))
                            - 12LL))();
}

uint64_t sub_1001A6904( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, char a25)
{
  return ((uint64_t (*)(void))(*(void *)(v27
                                        + 8LL
                                        * ((13
}

uint64_t sub_1001A6960@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  v9.i64[0] = 0x5858585858585858LL;
  v9.i64[1] = 0x5858585858585858LL;
  v10.i64[0] = 0x2D2D2D2D2D2D2D2DLL;
  v10.i64[1] = 0x2D2D2D2D2D2D2D2DLL;
  *(int8x16_t *)(v4 + (((7 * (v3 ^ (v8 - 63))) ^ 0xFFFFFE0ELL) & (a2 + v2))) = vaddq_s8( vaddq_s8(*v6, v10),  vmvnq_s8( vandq_s8( vaddq_s8(*v6, *v6),  v9)));
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * (((2 * (((v5 + 1) & 0x1FFFFFFF0LL) == 16)) | ((((v5 + 1) & 0x1FFFFFFF0LL) == 16) << 6)) ^ (a1 + v3 + 51)))
                            - 8LL))();
}

void sub_1001A69E4()
{
}

uint64_t sub_1001A69F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6
                                                                                 + 8LL
                                                                                 * ((((v7 + a4 - 1403052429) & 0x6F56793E ^ 0x65C)
                                                                                   * (v4 == v5)) ^ a4))
                                                                     - 8LL))( a1,  a2,  a3,  4081637913LL);
}

uint64_t sub_1001A6A44@<X0>( int a1@<W3>, int a2@<W7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20)
{
  *(&a20 + (a3 + v20)) = *(_BYTE *)(v21 + v23 - 2063384859)
                                     + ~((((a2 + v22 - 10) | 0x1C) + 58) & (2 * *(_BYTE *)(v21 + v23 - 2063384859)))
                                     + 45;
  return (*(uint64_t (**)(void))(v24
                              + 8LL
                              * ((2 * ((a1 + a3 + 896) < 0x40)) | (8
                                                                               * ((a1 + a3 + 896) < 0x40)) | (a2 + v22 + 1509))))();
}

uint64_t sub_1001A6AB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, int32x4_t a37, int32x4_t a38, int32x4_t a39, int32x4_t a40)
{
  int v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))(v42 + 8LL * v40);
  __n128 v50 = (__n128)vdupq_n_s32(0xF8759FFE);
  v51.n128_u64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v51.n128_u64[1] = 0x2C2C2C2C2C2C2C2CLL;
  __n128 v52 = (__n128)vdupq_n_s32(0x7C3ACFFFu);
  HIDWORD(v10sub_100129678(v0 + 3) = v45 ^ (v45 - 591);
  LODWORD(v10sub_100129678(v0 + 3) = ((HIDWORD(v103) - 592) | 0x90) ^ (v47 - 151);
  uint64_t v104 = v48 - 16;
  uint64_t v53 = (v43 - 2);
  v54.n128_u64[0] = 0x5858585858585858LL;
  v54.n128_u64[1] = 0x5858585858585858LL;
  HIDWORD(a19) = HIDWORD(a33);
  uint64_t v55 = HIDWORD(a34);
  int v56 = BYTE4(a36) ^ 0xF3;
  if (v56 == 2)
  {
    int8x16x4_t v106 = vld4q_s8((const char *)&a24 + 4);
    uint8x16_t v86 = (uint8x16_t)veorq_s8(v106.val[0], (int8x16_t)v51);
    uint16x8_t v87 = vmovl_u8(*(uint8x8_t *)v86.i8);
    uint16x8_t v88 = vmovl_high_u8(v86);
    uint8x16_t v89 = (uint8x16_t)veorq_s8(v106.val[1], (int8x16_t)v51);
    _Q21 = vmovl_u8(*(uint8x8_t *)v89.i8);
    _Q20 = vmovl_high_u8(v89);
    __asm
    {
      SHLL2           V22.4S, V20.8H, #0x10
      SHLL2           V23.4S, V21.8H, #0x10
    }

    uint8x16_t v94 = (uint8x16_t)veorq_s8(v106.val[2], (int8x16_t)v51);
    uint16x8_t v95 = vmovl_high_u8(v94);
    uint16x8_t v96 = vmovl_u8(*(uint8x8_t *)v94.i8);
    v106.val[0] = veorq_s8(v106.val[3], (int8x16_t)v51);
    v106.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v106.val[0]);
    v106.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v106.val[1]);
    v106.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v106.val[0].i8);
    v106.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v106.val[0]);
    v106.val[0] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v96.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v87.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v106.val[0].i8));
    v106.val[3] = vorrq_s8( vorrq_s8( vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v96, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v87), 0x18uLL)),  v106.val[3]);
    v106.val[1] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v95.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v88.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v106.val[1].i8));
    v106.val[2] = vorrq_s8( vorrq_s8( vorrq_s8(_Q22, (int8x16_t)vshll_high_n_u16(v95, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v88), 0x18uLL)),  v106.val[2]);
    a39 = vaddq_s32( vsubq_s32( (int32x4_t)v106.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v106.val[1], (int32x4_t)v106.val[1]), (int8x16_t)v50)),  (int32x4_t)v52);
    a40 = vaddq_s32( vsubq_s32( (int32x4_t)v106.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v106.val[2], (int32x4_t)v106.val[2]), (int8x16_t)v50)),  (int32x4_t)v52);
    a37 = vaddq_s32( vsubq_s32( (int32x4_t)v106.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v106.val[0], (int32x4_t)v106.val[0]), (int8x16_t)v50)),  (int32x4_t)v52);
    a38 = vaddq_s32( vsubq_s32( (int32x4_t)v106.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v106.val[3], (int32x4_t)v106.val[3]), (int8x16_t)v50)),  (int32x4_t)v52);
    char v97 = (_DWORD *)&a37 + v46 + 409666514;
    int v98 = *(v97 - 8) ^ *(v97 - 3);
    unsigned int v99 = *(v97 - 16) ^ *(v97 - 14) ^ (v98 + v47 - ((2 * v98) & 0xF8759FFE));
    HIDWORD(v100) = v103 ^ v99;
    LODWORD(v100) = v99;
    *char v97 = (v100 >> 31) + v47 - ((2 * (v100 >> 31)) & 0xF8759FFE);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42
                                                                                   + 8LL
                                                                                   * ((35 * (v48 == 409666451)) ^ HIDWORD(v103)))
                                                                       - 4LL))( v55,  82198926LL,  v53,  88LL);
  }

  else if (v56 == 1)
  {
    HIDWORD(v10sub_100129678(v0 + 2) = a35;
    int8x16x4_t v105 = vld4q_s8((const char *)&a24 + 4);
    int v57 = a8 + v45 + 23;
    uint8x16_t v58 = (uint8x16_t)veorq_s8(v105.val[0], (int8x16_t)v51);
    uint16x8_t v59 = vmovl_high_u8(v58);
    int8x16_t v60 = (int8x16_t)vmovl_high_u16(v59);
    uint16x8_t v61 = vmovl_u8(*(uint8x8_t *)v58.i8);
    int8x16_t v62 = (int8x16_t)vmovl_high_u16(v61);
    uint8x16_t v63 = (uint8x16_t)veorq_s8(v105.val[1], (int8x16_t)v51);
    uint16x8_t v64 = vmovl_u8(*(uint8x8_t *)v63.i8);
    uint16x8_t v65 = vmovl_high_u8(v63);
    int8x16_t v66 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v64.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v61.i8));
    int8x16_t v67 = vorrq_s8((int8x16_t)vshll_high_n_u16(v64, 8uLL), v62);
    int8x16_t v68 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v65.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v59.i8));
    int8x16_t v69 = vorrq_s8((int8x16_t)vshll_high_n_u16(v65, 8uLL), v60);
    uint8x16_t v70 = (uint8x16_t)veorq_s8(v105.val[2], (int8x16_t)v51);
    _Q21 = (int8x16_t)vmovl_high_u8(v70);
    _Q20 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v70.i8);
    int8x16_t v73 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL);
    __asm { SHLL2           V20.4S, V20.8H, #0x10 }

    int8x16_t v78 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL);
    __asm { SHLL2           V21.4S, V21.8H, #0x10 }

    v105.val[0] = veorq_s8(v105.val[3], (int8x16_t)v51);
    v105.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v105.val[0].i8);
    v105.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v105.val[0]);
    v105.val[2] = vorrq_s8( vorrq_s8(v66, v73),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v105.val[1].i8), 0x18uLL));
    v105.val[1] = vorrq_s8( vorrq_s8(v67, _Q20),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v105.val[1]), 0x18uLL));
    v105.val[3] = vorrq_s8( vorrq_s8(v68, v78),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v105.val[0].i8), 0x18uLL));
    v105.val[0] = vorrq_s8( vorrq_s8(v69, _Q21),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v105.val[0]), 0x18uLL));
    a39 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[3], (int32x4_t)v105.val[3]), (int8x16_t)v50)),  (int32x4_t)v52);
    a40 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[0], (int32x4_t)v105.val[0]), (int8x16_t)v50)),  (int32x4_t)v52);
    a37 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[2], (int32x4_t)v105.val[2]), (int8x16_t)v50)),  (int32x4_t)v52);
    a38 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[1], (int32x4_t)v105.val[1]), (int8x16_t)v50)),  (int32x4_t)v52);
    uint64_t v79 = (char *)*(&off_10027AEF0 + a8 + v45 - 218) - 8;
    int v80 = (char *)*(&off_10027AEF0 + a8 + v45 - 60) - 4;
    int v81 = (HIDWORD(a33) ^ v43)
        - 1985391769
        + ((HIDWORD(a34) ^ v43) & (a34 ^ v43) | (a34 ^ 0x7B19BE71) & (a35 ^ v43))
        + *(_DWORD *)&v80[4 * v104 + 4 * v46]
        + (a37.i32[(v79[v104 + v46] - 77)] ^ v47);
    uint64_t v82 = (uint64_t)*(&off_10027AEF0 + (v57 ^ 0x125));
    unsigned int v83 = (v81 + v43 - (v44 & (2 * v81))) ^ v43;
    int v84 = ((v83 << (*(_BYTE *)(v82 + v104 + v46) - 119)) | (v83 >> (119 - *(_BYTE *)(v82 + v104 + v46)))) + (a34 ^ v43);
    LODWORD(v101) = BYTE4(a36) ^ 0xFFFFFFF3;
    HIDWORD(v101) = ((((v40 + 36) | 0x101) + 1141007077) | 0xA0480253) + 2138649058;
    LODWORD(v10sub_100129678(v0 + 2) = HIDWORD(a12) + 1646319728;
    return ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t, void, void, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 + 8LL * (v57 ^ 0x17)) - 12LL))( HIDWORD(a34),  2309575527LL,  v53,  88LL,  v84 + v43 - (v44 & (2 * v84)),  -(*(_BYTE *)(v82 + v48 - 16 + v46) - 119),  v79,  v80,  a9,  a10,  a11,  a12,  a13,  v41,  a15,  v101,  v102,  v49,  a19,  a34,  v103,  v48 - 16,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36);
  }

  else
  {
    HIDWORD(a3sub_100129678(v0 + 3) = 2 * (HIDWORD(a33) ^ v43) + v43 - (v44 & (4 * (HIDWORD(a33) ^ v43)));
    LODWORD(a34) = 2 * (a34 ^ v43) + v43 - (v44 & (4 * (a34 ^ v43)));
    HIDWORD(a34) = 2 * (HIDWORD(a34) ^ v43) + v43 - (v44 & (4 * (HIDWORD(a34) ^ v43)));
    LODWORD(a35) = 2 * (a35 ^ v43) + v43 - (v44 & (4 * (a35 ^ v43)));
    return v49(v55, 82198926LL, v53, 88LL, v50, v51, v52, v54);
  }

uint64_t sub_1001A7640( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, int a16, unsigned int a17, unsigned int a18)
{
  unsigned int v20 = (((2 * (v19 ^ (v19 - 282)) - 692) | 0x63) ^ 0xE8C6D461) + a14;
  BOOL v21 = v20 < 0x63C3985D;
  BOOL v22 = v20 > a18;
  if (a18 < a17 != v21) {
    BOOL v23 = v21;
  }
  else {
    BOOL v23 = v22;
  }
  return ((uint64_t (*)(void))(*(void *)(v18 + 8LL * ((234 * !v23) ^ (a8 + v19 + 109))) - 4LL))();
}

uint64_t sub_1001A76DC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ((uint64_t (*)(uint64_t))(a7
                                          + *(void *)(v9
                                                      + 8LL
                                                      * (int)(((((v8 + 869965852) & 0xCC255FBA) + 746)
                                                             * (v7 + a2 + 63 >= (v7 + a2))) ^ v8))
}

uint64_t sub_1001A7734( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return ((uint64_t (*)(void))(*(void *)(v16
                                        + 8LL
                                        * ((89
                                          * (a13
                                           + v14
}

uint64_t sub_1001A777C@<X0>(char a1@<W0>, int a2@<W1>, char a3@<W3>, int a4@<W7>, int a5@<W8>)
{
  *(_BYTE *)(v7 + v6) = *(_BYTE *)(v8 + (v5 + a2))
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((a5 + a4) | (32 * (v6 != 63)))) - 12LL))();
}

uint64_t sub_1001A77C8@<X0>(int a1@<W1>, int a2@<W7>, int a3@<W8>, int8x16_t a4@<Q1>, int8x16_t a5@<Q3>)
{
  int8x16_t v11 = *(int8x16_t *)(v7 + v5 + (a3 ^ (v9 - 52) ^ (a1 - 12)));
  *uint64_t v6 = vaddq_s8(vsubq_s8(v11, vandq_s8(vaddq_s8(v11, v11), a5)), a4);
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (v10 ^ (a3 + a2))) - 12LL))();
}

uint64_t sub_1001A7828( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  BOOL v16 = v13 - 2014252619 < (a13 + 21689059);
  return ((uint64_t (*)(void))(*(void *)(v14 + 8LL * ((127 * !v16) ^ v15)) - 8LL))();
}

uint64_t sub_1001A78A8( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, int a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, int a35)
{
  int v38 = (a1 - 1768) ^ (v36 + 103);
  int v39 = 628203409 * ((((v37 - 120) | 0x9A7BC63F) + (~(v37 - 120) | 0x658439C0)) ^ 0x18F3CA0D);
  *(void *)(v37 - 120) = a10;
  *(_DWORD *)(v37 - 11sub_100129678(v0 + 2) = v39 + a1 - 1268;
  *(_DWORD *)(v37 - 108) = a13 - v39 + 75709270;
  uint64_t v40 = sub_1001A2A8C(v37 - 120);
  uint64_t v41 = a35 & (v38 ^ (v36 - 55));
  *(&a26 + (v41 ^ 0x2B)) = -84;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v35
                                                               + 8LL * ((19 * ((v41 ^ 0x2B) > 0x37)) ^ a1))
                                                   - 12LL))( v40,  82198926LL);
}

uint64_t sub_1001A79A8@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  return ((uint64_t (*)(void))(*(void *)(v15
                                        + 8LL
                                        * ((1568 * (a1 != ((a15 - 109) | 0x40) + ((a15 - 88) ^ 0xFFFFFF92))) | a15))
                            - 8LL))();
}

uint64_t sub_1001A79E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
                                        * ((197
                                          * ((v8 ^ (v11 - 12) ^ (v11 + v9 - 108)) >= a8
                                                                                                 + v11
                                                                                                 + v9
                                                                                                 - 108
                                                                                                 - 260)) ^ v9))
                            - 8LL))();
}

uint64_t sub_1001A7A24@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  *(void *)(&a18 + v18 - 181227650sub_100129678(v0 + 3) = 0x2C2C2C2C2C2C2C2CLL;
  return (*(uint64_t (**)(void))(v21 + 8LL * ((((v19 & 0x38) == 8LL) * (a1 - v22 + 25)) ^ (v20 - 65))))();
}

uint64_t sub_1001A7A74@<X0>(int a1@<W7>, int a2@<W8>, double a3@<D0>)
{
  double *v3 = a3;
  return (*(uint64_t (**)(void))(v6 + 8LL * (((v5 == 0) * v4) ^ (a1 + a2 - 65))))();
}

uint64_t sub_1001A7A9C()
{
}

void sub_1001A7AE8()
{
}

uint64_t sub_1001A7AF4@<X0>( int a1@<W1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  BOOL v27 = v20 < v23;
  *(&a19 + ((v26 + 333) ^ v21) + asub_100129678(v0 + 2) = *(_BYTE *)(v24 + (v19 + a1))
  unsigned int v28 = v19 + 1 + v22;
  int v29 = v27 ^ (v28 < v23);
  BOOL v30 = v28 < v20;
  if (!v29) {
    BOOL v27 = v30;
  }
  return ((uint64_t (*)(void))(*(void *)(v25 + 8LL * ((127 * !v27) ^ v26)) - 8LL))();
}

uint64_t sub_1001A7B6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v9
}

uint64_t sub_1001A7BB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v11 = v8;
  unint64_t v12 = v8 - 0x1504F8B91LL + ((v9 - 25532694) & 0xE5CFFE7B);
  if (v12 <= 0x38) {
    unint64_t v12 = 56LL;
  }
  BOOL v13 = v12 - v11 + (v9 - a8 - 9) - 2017804644LL < 8;
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * (((4 * v13) | (32 * v13)) ^ v9)) - 8LL))();
}

uint64_t sub_1001A7C28@<X0>( int a1@<W7>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  *(void *)(&a19 + v20 - 181227650sub_100129678(v0 + 3) = 0x2C2C2C2C2C2C2C2CLL;
  return ((uint64_t (*)(void))(*(void *)(v21 + 8LL * ((1834 * ((v19 & 0xFFFFFFFFFFFFFFF8LL) == 8)) ^ (a1 + a2 + 577)))
}

void sub_1001A7C84()
{
}

uint64_t sub_1001A7C8C@<X0>( int a1@<W7>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  *(&a19 + v19 - 181227650sub_100129678(v0 + 3) = 44;
  return ((uint64_t (*)(void))(*(void *)(v20
                                        + 8LL
}

uint64_t sub_1001A7CE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
}

void sub_1001A7D2C()
{
}

uint64_t sub_1001A81B4@<X0>( uint64_t a1@<X1>, char a2@<W7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32)
{
  uint64_t v36 = (v34 + a3);
  unsigned int v37 = *(_DWORD *)(&a20 + v36 + 72);
  *(_BYTE *)(a1 + (v36 + sub_10012CBAC((uint64_t)(v0 + 2)) = (BYTE1(v37) ^ 0x41) - ((v37 >> 7) & 0x58) + 44;
  *(_BYTE *)(a1 + (v36 + 1)) = (BYTE2(v37) ^ 0xE6) - ((2 * (BYTE2(v37) ^ 0xE6)) & 0x58) + 44;
  *(_BYTE *)(a1 + (v36 + 3)) = v37 ^ 0xA2;
  *(_BYTE *)(a1 + v36) = (HIBYTE(v37) ^ 0x84)
                       - (((HIBYTE(v37) ^ 0xFFFFFF84) & 0x2D ^ HIBYTE(v37) & 1) << (v33 - a2 - 94))
                       + 44;
  BOOL v38 = v34 - 898184734 < (a32 - 1219943765);
  if (v34 - 898184734 < v32 != a32 - 1219943765 < v32) {
    BOOL v38 = a32 - 1219943765 < v32;
  }
  return ((uint64_t (*)(void))(*(void *)(v35 + 8LL * ((957 * !v38) ^ v33)) - 8LL))();
}

void sub_1001A8364()
{
}

  ;
}

uint64_t sub_1001A83B0(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))((char *)*(&off_1002768F0
                                                    + ((2039 * (*(_DWORD *)(a2 + 4) == 510884221)) ^ 0xB4u))
                                          - 8))(4294925278LL);
}

uint64_t sub_1001A83F8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)(*(void *)(a2 + 96) + 468LL) = *(_BYTE *)(*(void *)(a1 + 8) + 12LL);
  return ((uint64_t (*)(void))(*(void *)(v2 + 1792) - 8LL))(0LL);
}

uint64_t sub_1001A8454@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + (v7 + v5)) = *(_BYTE *)(v4 + (v7 + v5));
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (((v3 + v7 - 181 != v2) * v6) ^ v3)) - 8LL))(0LL);
}

void sub_1001A8490(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12) + 460628867 * ((a1 & 0x73B15F3F | ~(a1 | 0x73B15F3F)) ^ 0xC0D822BD);
  uint64_t v2 = *((void *)*(&off_10027AEF0 + v1 - 742)
       + ((1302 * (((uint64_t (*)(uint64_t))*(&off_10027AEF0 + (v1 ^ 0x3B4)))(32LL) != 0)) ^ v1)
       - 1)
     - 4LL;
  __asm { BR              X8 }

uint64_t sub_1001A8524(uint64_t result)
{
  uint64_t v2 = *v1;
  *(void *)uint64_t result = 0LL;
  *(void *)(result + 8) = 0x2A644B252A644B25LL;
  *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0xCFE51A7D1365BE18LL;
  *(_DWORD *)(result + 24) = 2084229119;
  *(void *)(v2 - 0x49EB7E5E2EA5C8EDLL) = result + 0x27E11828102FB989LL;
  *((_DWORD *)v1 + sub_100129678(v0 + 2) = 2084229119;
  return result;
}

uint64_t sub_1001A85A4(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))((char *)*(&off_1002768F0
                                                    + ((255 * (*(_DWORD *)(a2 + 4) != 510884221)) ^ 0x469u))
                                          - 4))(4294925278LL);
}

uint64_t sub_1001A85F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)(*(void *)(a2 + 96) + 448LL) = *(_BYTE *)(*(void *)(a1 + 8) + 12LL);
  return ((uint64_t (*)(void))(*(void *)(v2 + 14720) - 4LL))(0LL);
}

void sub_1001A8660()
{
}

void sub_1001A8668(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 1755732067 * ((a1 & 0xB853BF30 | ~(a1 | 0xB853BF30)) ^ 0x996AFD14);
  uint64_t v2 = *(void *)a1;
  ((void (*)(char *, void (*)()))*(&off_10027AEF0 + v1 - 713))( (char *)*(&off_10027AEF0 + v1 - 828) - 12,  sub_1001CF1BC);
  __asm { BR              X11 }

uint64_t sub_1001A8738@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * (((*(void *)(*(void *)(v2 + 8LL * (a1 - 156)) - 4LL) != 0LL) * (a1 ^ 0x3A9)) ^ a1)))();
}

uint64_t sub_1001A8768()
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (v0 ^ 0x1D0)))(v1);
}

  ;
}

uint64_t sub_1001A8798(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = qword_1002BB2D8 - qword_1002BB288 - (void)&v8;
  qword_1002BB288 = 1126174607 * v2 + 0x3E7C7A387475100ALL;
  qword_1002BB2D8 = 1126174607 * (v2 ^ 0x245AECB3A987CA56LL);
  int v3 = *(_DWORD *)(a2 + 4);
  unsigned __int8 v4 = -113 * ((qword_1002BB2D8 - (-113 * v2 + 10)) ^ 0x56);
  int v5 = (char *)*(&off_10027AEF0 + (v4 ^ byte_100205190[byte_100200DF0[v4] ^ 0x64]) - 13) - 8;
  if (v3 == 510884211) {
    __asm { BR              X17 }
  }

  if (v3 == 510884218)
  {
    int v6 = **(unsigned __int8 **)(a2 + 8) - 9;
    __asm { BR              X1 }
  }

  return 4294925278LL;
}

void sub_1001A8E98(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) + 535753261 * ((2 * (a1 & 0x5E99CC2A) - a1 - 1587137579) ^ 0xAB923DFA);
  if (*(_DWORD *)(*(void *)a1 - 0x1F589EA4AC42BDE5LL) - 1966800080 >= 0) {
    unsigned int v3 = *(_DWORD *)(*(void *)a1 - 0x1F589EA4AC42BDE5LL) - 1966800080;
  }
  else {
    unsigned int v3 = 1966800080 - *(_DWORD *)(*(void *)a1 - 0x1F589EA4AC42BDE5LL);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL) - 1966800080 >= 0) {
    unsigned int v4 = *(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL) - 1966800080;
  }
  else {
    unsigned int v4 = 1966800080 - *(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL);
  }
  uint64_t v7 = *(void *)a1;
  v6[1] = (460628867 * ((((2 * v6) | 0x5B38C61C) - v6 + 1382259954) ^ 0xE10AE173)) ^ (v1 + 1381);
  sub_1001AE554((uint64_t)v6);
  if (v3 >= v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = v3;
  }
  __asm { BR              X13 }

uint64_t sub_1001A9034()
{
  BOOL v5 = v3 - 1170470429 > 1324634664 || v3 - 1170470429 < v2 - 822848983;
}

uint64_t sub_1001A9098()
{
  uint64_t v13 = 4LL * (v8 + v6);
  int v14 = v1 + v9 + (*(_DWORD *)(*(void *)(v12 - 0x1F589EA4AC42BDE1LL) + v13) ^ v10);
  *(_DWORD *)(*(void *)(v11 - 0x1F589EA4AC42BDE1LL) + v1sub_100129678(v0 + 3) = v10
                                                             + ((v4 + 1095) | 0x20)
                                                             + v14
                                                             - (v7 & (2 * v14))
                                                             - 1249;
  int v15 = v8 + 1 + v2;
  BOOL v17 = v15 > v3 || v15 < v5;
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((434 * v17) ^ (v4 + 1110))) - 4LL))();
}

uint64_t sub_1001A9160( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  BOOL v14 = v12 - 837711157 > ((v11 + 25) ^ 0x62C9D7EA) || v12 - 837711157 < a10 - 490089711;
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((383 * v14) ^ v11)) - 4LL))();
}

uint64_t sub_1001A91B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v21 = 4LL * (v17 + v15);
  int v22 = v11 + v18 + (*(_DWORD *)(*(void *)(a10 - 0x1F589EA4AC42BDE1LL) + v21) ^ v19);
  *(_DWORD *)(*(void *)(v20 - 0x1F589EA4AC42BDE1LL) + v21) = v22 + v19 - (v16 & (2 * v22));
  int v23 = v17 + 1 + v12;
  BOOL v25 = v23 > a7 + 422 || v23 < v13;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v10 + 8LL * ((27 * v25) ^ ((v14 - 89) | 0x40))) - 4LL))( 1829022718LL,  602LL);
}

uint64_t sub_1001A92A0(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((241 * (v4 == (a3 ^ 0x200u) + 0x43EA25656BEABF68LL)) ^ a3))
}

void sub_1001A92E4()
{
  *(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL) = (((v1 + v0) * (v3 - 1941172939)) ^ 0xFD3EFFF0)
                                         + 2013002976
                                         + ((2 * (v1 + v0) * (v3 - 1941172939)) & 0xFA7DFFE0);
}

void sub_1001A9504(uint64_t a1)
{
  int v1 = 1759421093 * (a1 ^ 0xB37DB054);
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 8) - 0x27E11828102FB97DLL) + 406293348;
  unsigned int v3 = *(_DWORD *)a1 + v1 - 823970654;
  int v4 = (v3 < 0x429BD689) ^ (v2 < 0x429BD689);
  BOOL v5 = v2 < v3;
  if (v4) {
    BOOL v5 = v3 < 0x429BD689;
  }
  __asm { BR              X11 }

uint64_t sub_1001A9600()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((37 * ((*(_BYTE *)(v1 - 0x27E11828102FB975LL) & 1) == 0)) ^ v0))
                            - ((v0 - 389) | 0x41)
                            + 1593LL))();
}

void sub_1001A9644()
{
  *(_DWORD *)(v0 - 0x27E11828102FB971LL) = -2084203477;
}

uint64_t sub_1001A9CB4(_DWORD *a1)
{
  unsigned int v2 = 1755732067
     * ((2 * ((a1 ^ 0xFDCA5AD1) & 0x4699B354) - (a1 ^ 0xFDCA5AD1) - 1184478037) ^ 0x9A6AABA1);
  unsigned int v3 = a1[8] - v2;
  int v4 = a1[2] ^ v2;
  int v8 = v3
  uint64_t result = AppMetadataNetworkFetcher.init(batchTask:)(&v8);
  if (v4 > 1778828267)
  {
    if (v4 == 2064040939)
    {
      unsigned int v6 = 3;
    }

    else
    {
      if (v4 != 1778828268) {
        goto LABEL_11;
      }
      unsigned int v6 = 1;
    }

void sub_1001AA31C(uint64_t a1, uint64_t a2)
{
  **(_DWORD **)(a1 + 96) = *(_DWORD *)(a2 + 16);
  unsigned int v3 = 1178560073 * ((((2 * &v5) | 0xC4B5652C) - &v5 + 497372522) ^ 0x58CECAF4);
  unsigned int v5 = 1091580572 - v3;
  unsigned int v7 = -1882357464 - v3;
  unsigned int v6 = &STACK[0x8FD385F8C7F9B61];
  sub_1001AC7F8((uint64_t)&v5);
  __asm { BR              X9 }

uint64_t sub_1001AA4CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12 = v9 + 681065514;
  if (v12 <= 0x40) {
    unsigned int v12 = 64;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 8LL * ((1144 * ((_DWORD)a3 - v8 - v10 + v12 > 0xE)) ^ 0x170u)) - 4LL))( 368LL,  a2,  a3,  a4,  a5,  a6,  2897804937LL,  a8);
}

uint64_t sub_1001AA53C(uint64_t a1, uint64_t a2, int a3)
{
  int v9 = v4 + v3;
  int v10 = v9 + v5;
  return (*(uint64_t (**)(void))(v8 + 8LL * ((165 * (((a3 - v9 < (v7 + v10)) ^ 0xCF) & 1)) ^ 0x641)))();
}

uint64_t sub_1001AA5A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(void))(v17
                              + 8LL
                              * ((122
                                * (a14 + v18 - 220 + (unint64_t)(v14 + ((409 * (v16 ^ 0x638)) ^ (v15 - 840))) < ((v16 + 567567531) & 0x17DF ^ 0x2D6uLL))) ^ v16)))();
}

uint64_t sub_1001AA608@<X0>(int a1@<W8>)
{
  v7.i64[0] = 0x5858585858585858LL;
  v7.i64[1] = 0x5858585858585858LL;
  v8.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v8.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  *(int8x16_t *)(v4 + (a1 + v1)) = vaddq_s8(vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v7)), v8);
  return (*(uint64_t (**)(uint64_t))(v5
                                            + 8LL * ((1278 * (((v3 + 1) & 0x1FFFFFFF0LL) - (v2 - 343) == -351)) ^ v2)))(v2 - 343 - 351LL);
}

void sub_1001AA67C()
{
}

uint64_t sub_1001AA684()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (int)((((v2 - 357) ^ 0x15) * (v0 != v1)) ^ v2)) - (v2 ^ 0x16BLL)))();
}

uint64_t sub_1001AA6C0@<X0>( uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v18 = *(unsigned __int8 *)(a13 + v16 - 15767775);
  uint64_t v19 = (a5 + v13);
  uint64_t v20 = (2 * v18) & 0x58;
  *(_BYTE *)(v17 - 220 + v19) = v18 - ((2 * v18) & 0x58) + 44;
  uint64_t v21 = (uint64_t (*)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 8LL * ((1444 * ((a3 + a5 + 49) < 0x40)) ^ (v14 - 860))) - 4LL);
  return v21(1444LL, v21, v19, v20, a1, a2, a3, a4);
}

void sub_1001AA744()
{
}

uint64_t sub_1001AA74C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int32x4_t a31, int32x4_t a32, int32x4_t a33, int32x4_t a34)
{
  uint64_t v42 = (uint64_t (*)(__n128, __n128, __n128, __n128))(*(void *)(v36 + 8LL * v34) - 4LL);
  HIDWORD(v99) = HIDWORD(a13) - 1349941253;
  int v43 = (const char *)(v41 - 220);
  v44.n128_u64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v44.n128_u64[1] = 0x2C2C2C2C2C2C2C2CLL;
  __n128 v45 = (__n128)vdupq_n_s32(0xF8759FFE);
  HIDWORD(v10sub_100129678(v0 + 3) = v37 - 1395;
  __n128 v46 = (__n128)vdupq_n_s32(0x7C3ACFFFu);
  a23 = v35 - 16;
  LODWORD(v99) = 1987952631;
  LODWORD(a15) = 1952979334;
  v47.n128_u64[0] = 0x5858585858585858LL;
  v47.n128_u64[1] = 0x5858585858585858LL;
  uint64_t v48 = *(unsigned int *)(v41 - 148);
  int v49 = *(_DWORD *)(v41 - 144);
  HIDWORD(a21) = *(_DWORD *)(v41 - 148);
  LODWORD(v10sub_100129678(v0 + 3) = v49;
  unsigned int v51 = *(_DWORD *)(v41 - 140);
  unsigned int v50 = *(_DWORD *)(v41 - 136);
  int v52 = *(_BYTE *)(v41 - 124) ^ 0xF3;
  HIDWORD(a17) = *(unsigned __int8 *)(v41 - 124) ^ 0xFFFFFFF3;
  if (v52 == 2)
  {
    unint64_t v101 = __PAIR64__(v50, v51);
    uint64_t v102 = v42;
    int v78 = a6 + a5 + 288;
    uint64_t v79 = *(unsigned int *)(v41 - 132);
    int8x16x4_t v105 = vld4q_s8(v43);
    HIDWORD(a15) = *(_DWORD *)(v41 - 132);
    uint8x16_t v80 = (uint8x16_t)veorq_s8(v105.val[0], (int8x16_t)v44);
    uint16x8_t v81 = vmovl_u8(*(uint8x8_t *)v80.i8);
    uint16x8_t v82 = vmovl_high_u8(v80);
    uint8x16_t v83 = (uint8x16_t)veorq_s8(v105.val[1], (int8x16_t)v44);
    _Q21 = vmovl_u8(*(uint8x8_t *)v83.i8);
    _Q20 = vmovl_high_u8(v83);
    __asm
    {
      SHLL2           V22.4S, V20.8H, #0x10
      SHLL2           V23.4S, V21.8H, #0x10
    }

    uint8x16_t v88 = (uint8x16_t)veorq_s8(v105.val[2], (int8x16_t)v44);
    uint16x8_t v89 = vmovl_high_u8(v88);
    uint16x8_t v90 = vmovl_u8(*(uint8x8_t *)v88.i8);
    v105.val[0] = veorq_s8(v105.val[3], (int8x16_t)v44);
    v105.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v105.val[0]);
    v105.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v105.val[1]);
    v105.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v105.val[0].i8);
    v105.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v105.val[0]);
    v105.val[0] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v90.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v81.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v105.val[0].i8));
    v105.val[3] = vorrq_s8( vorrq_s8( vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v90, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v81), 0x18uLL)),  v105.val[3]);
    v105.val[1] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v89.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v105.val[1].i8));
    v105.val[2] = vorrq_s8( vorrq_s8( vorrq_s8(_Q22, (int8x16_t)vshll_high_n_u16(v89, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v82), 0x18uLL)),  v105.val[2]);
    a33 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[1], (int32x4_t)v105.val[1]), (int8x16_t)v45)),  (int32x4_t)v46);
    a34 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[2], (int32x4_t)v105.val[2]), (int8x16_t)v45)),  (int32x4_t)v46);
    a31 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[0], (int32x4_t)v105.val[0]), (int8x16_t)v45)),  (int32x4_t)v46);
    a32 = vaddq_s32( vsubq_s32( (int32x4_t)v105.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v105.val[3], (int32x4_t)v105.val[3]), (int8x16_t)v45)),  (int32x4_t)v46);
    int v91 = (_DWORD *)&a31 + v40 + 1255353507;
    int v92 = *(v91 - 8) ^ *(v91 - 3);
    uint64_t v93 = *(v91 - 16);
    int v94 = v93 ^ *(v91 - 14) ^ (v92 + v37 - ((2 * v92) & 0xF8759FFE));
    HIDWORD(v96) = (15 * (v78 ^ 0x474)) ^ HIDWORD(v103) ^ v94;
    LODWORD(v96) = v94;
    int v95 = v96 >> 31;
    uint64_t v97 = (2 * v95) & 0xF8759FFE;
    *int v91 = v95 + v37 - v97;
    int v98 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8LL * ((346 * (v35 == 1255353444)) ^ v78));
    return v98( 1255353508LL,  v79,  v98,  a23,  v97,  v93,  v48,  4168458238LL,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  v99,  v101,  v102,  a21,  v103,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30);
  }

  else if (v52 == 1)
  {
    unint64_t v100 = __PAIR64__(v50, v51);
    int8x16x4_t v104 = vld4q_s8(v43);
    uint64_t v53 = a5 ^ (a5 - 359);
    uint8x16_t v54 = (uint8x16_t)veorq_s8(v104.val[0], (int8x16_t)v44);
    uint16x8_t v55 = vmovl_high_u8(v54);
    int8x16_t v56 = (int8x16_t)vmovl_high_u16(v55);
    uint16x8_t v57 = vmovl_u8(*(uint8x8_t *)v54.i8);
    int8x16_t v58 = (int8x16_t)vmovl_high_u16(v57);
    uint8x16_t v59 = (uint8x16_t)veorq_s8(v104.val[1], (int8x16_t)v44);
    uint16x8_t v60 = vmovl_u8(*(uint8x8_t *)v59.i8);
    uint16x8_t v61 = vmovl_high_u8(v59);
    int8x16_t v62 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v60.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v57.i8));
    int8x16_t v63 = vorrq_s8((int8x16_t)vshll_high_n_u16(v60, 8uLL), v58);
    int8x16_t v64 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v61.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v55.i8));
    int8x16_t v65 = vorrq_s8((int8x16_t)vshll_high_n_u16(v61, 8uLL), v56);
    uint8x16_t v66 = (uint8x16_t)veorq_s8(v104.val[2], (int8x16_t)v44);
    _Q21 = (int8x16_t)vmovl_high_u8(v66);
    _Q20 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v66.i8);
    int8x16_t v69 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL);
    __asm { SHLL2           V20.4S, V20.8H, #0x10 }

    int8x16_t v74 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL);
    __asm { SHLL2           V21.4S, V21.8H, #0x10 }

    v104.val[0] = veorq_s8(v104.val[3], (int8x16_t)v44);
    v104.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v104.val[0].i8);
    v104.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v104.val[0]);
    v104.val[2] = vorrq_s8( vorrq_s8(v62, v69),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v104.val[1].i8), 0x18uLL));
    v104.val[1] = vorrq_s8( vorrq_s8(v63, _Q20),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v104.val[1]), 0x18uLL));
    v104.val[3] = vorrq_s8( vorrq_s8(v64, v74),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v104.val[0].i8), 0x18uLL));
    v104.val[0] = vorrq_s8( vorrq_s8(v65, _Q21),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v104.val[0]), 0x18uLL));
    a33 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[3], (int32x4_t)v104.val[3]), (int8x16_t)v45)),  (int32x4_t)v46);
    a34 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[0], (int32x4_t)v104.val[0]), (int8x16_t)v45)),  (int32x4_t)v46);
    a31 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[2], (int32x4_t)v104.val[2]), (int8x16_t)v45)),  (int32x4_t)v46);
    a32 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[1], (int32x4_t)v104.val[1]), (int8x16_t)v45)),  (int32x4_t)v46);
    uint64_t v75 = (uint64_t)*(&off_10027AEF0 + (int)(v53 ^ 0x1FF));
    unint64_t v76 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t (**)(int, int, int, int, int, int, int, int, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 + 8LL * (int)((905 * (a23 + 1 != v35)) ^ v53)) - 8LL);
    return v76( (char *)*(&off_10027AEF0 + (int)(v53 & 0x898F82D0)) - 4,  v75,  v53,  1255353507LL,  v76,  -(*(_BYTE *)(v75 + a23 + v40) - 119),  a31.i32[(*((_BYTE *)*(&off_10027AEF0 + (int)v53 - 455) + a23 + v40 - 8) - 77)] ^ v37,  &off_10027AEF0,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  v99,  v100,  v42,  a21,  v103,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30);
  }

  else
  {
    *(_DWORD *)(v41 - 148) = (v48 ^ v39)
                           + (HIDWORD(a21) ^ v39)
                           + v39
                           - (v38 & (2 * ((v48 ^ v39) + (HIDWORD(a21) ^ v39))));
    *(_DWORD *)(v41 - 144) = 2 * (v49 ^ v39) + v39 - (v38 & (4 * (v49 ^ v39)));
    *(_DWORD *)(v41 - 140) = 2 * (v51 ^ v39) + v39 - (v38 & (4 * (v51 ^ v39)));
    *(_DWORD *)(v41 - 136) = 2 * (v50 ^ v39) + v39 - (v38 & (4 * (v50 ^ v39)));
    return v42(v44, v45, v46, v47);
  }

uint64_t sub_1001AB28C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, int a18, unsigned int a19)
{
  else {
    BOOL v20 = a16 - 1338265783 > a19;
  }
  return ((uint64_t (*)(BOOL))(*(void *)(v19
                                                   + 8LL
}

uint64_t sub_1001AB31C( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18)
{
  return ((uint64_t (*)(void))(*(void *)(v19
                                        + 8LL
                                        * (((a6 + (a18 & 0x74785BBE) + 1266)
}

uint64_t sub_1001AB35C( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  return ((uint64_t (*)(void))(*(void *)(v17
                                        + 8LL
                                        * ((44
}

uint64_t sub_1001AB3AC@<X0>( int a1@<W2>, int a2@<W4>, int a3@<W5>, int a4@<W7>, int a5@<W8>, int8x16_t a6@<Q0>, int8x16_t a7@<Q3>)
{
  int8x16_t v11 = *(int8x16_t *)(v10 + v7 + ((a5 - a2 + 57) ^ (a4 - 9)));
  *int8x16_t v8 = vaddq_s8(vsubq_s8(v11, vandq_s8(vaddq_s8(v11, v11), a7)), a6);
  return (*(uint64_t (**)(void))(v9 + 8LL * (a1 ^ (a3 + a5 - 34))))();
}

uint64_t sub_1001AB40C@<X0>(int a1@<W4>, int a2@<W5>, int a3@<W7>, int a4@<W8>)
{
  char v11 = *(_BYTE *)(v10 + a3 + v4 + 3 * (a4 ^ (a1 - 17)) - 57);
  *(_BYTE *)(v5 + v7) = v11 - (v6 & (2 * v11)) + 44;
  return (*(uint64_t (**)(void))(v9 + 8LL * (((v7 == 63) * v8) ^ (a2 + a4 - 78))))();
}

uint64_t sub_1001AB464( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  unsigned int v17 = (v15 ^ 0x2F3) + v14 + 925777986;
  int v18 = ((a14 + 914102628) < 0x381ED951) ^ (v17 < 0x381ED951);
  BOOL v19 = v17 < a14 + 914102628;
  if (v18) {
    BOOL v19 = (a14 + 914102628) < 0x381ED951;
  }
  return (*(uint64_t (**)(uint64_t))(v16 + 8LL * ((!v19 | (8 * !v19)) ^ v15)))(925777986LL);
}

uint64_t sub_1001AB4CC( uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v16 = 628203409 * ((((v15 - 120) | 0x434F6F97) - ((v15 - 120) & 0x434F6F97)) ^ 0xC1C763A4);
  uint64_t v17 = a5 + (a2 ^ 0x14Fu) - 383;
  *(void *)(v15 - 120) = a11;
  *(_DWORD *)(v15 - 11sub_100129678(v0 + 2) = v16 + a2 + 605;
  *(_DWORD *)(v15 - 108) = a14 - v16 + 75709270;
  uint64_t v18 = sub_1001A2A8C(v15 - 120);
  uint64_t v19 = *(_DWORD *)(v15 - 152) & 0x3F;
  *(_BYTE *)(v15 - 220 + (v19 ^ 0x2B)) = -84;
}

uint64_t sub_1001AB5DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, int a23)
{
  return ((uint64_t (*)(void))(*(void *)(v24
                                        + 8LL
                                        * ((1551 * (((v23 == 63) ^ (51 * (a23 ^ 0x7C))) & 1)) ^ a23))
                            + 1954028466LL
                            - v25))();
}

uint64_t sub_1001AB62C()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v1 ^ (101 * ((v0 ^ 0x14u) > 7))))
                            + 1954028466LL
                            - (v1 - 49)
                            - ((v1 - 9186) & 0x74783BFE)
                            + 872))();
}

uint64_t sub_1001AB688()
{
  *(void *)(v4 - 220 + v0 + 1) = 0x2C2C2C2C2C2C2C2CLL;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((((v1 & 0x38) == 8LL) * (((v2 - 830) | 0x155) + 1649)) ^ v2)) - 8LL))();
}

uint64_t sub_1001AB6D4(double a1)
{
  *int v2 = a1;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (((v4 == 0) * v3) ^ v1)) - 8LL))();
}

uint64_t sub_1001AB6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * ((742 * (((v7 == v6) ^ (((v5 + 127) & 0xB7) + 1)) & 1)) ^ v5))
                            + 1954028466LL
                            - (v5 ^ (a5 - 237))))();
}

void sub_1001AB75C()
{
}

uint64_t sub_1001AB774@<X0>(int a1@<W0>, int a2@<W7>, int a3@<W8>)
{
  BOOL v10 = v3 < v6;
  *(_BYTE *)(v9 - 220 + ((v5 - 659) ^ 0xACB8FE89) + asub_100129678(v0 + 3) = *(_BYTE *)(v8 + (v4 + a2))
  unsigned int v11 = a1 + v4 + 49;
  int v12 = v10 ^ (v11 < v6);
  BOOL v13 = v11 < v3;
  if (!v12) {
    BOOL v10 = v13;
  }
  return (*(uint64_t (**)(void))(v7 + 8LL * ((!v10 | (8 * !v10)) ^ v5)))();
}

uint64_t sub_1001AB7F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W5>, int a4@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v4
                                                                        + 8LL
                                                                        * ((((a4 - 1342510085) < 0x38)
                                                                          * (a3 + v5 - 538)) ^ (a3 + v5 + 630)))
                                                            - 12LL))( a1,  a2,  -1342510085LL);
}

uint64_t sub_1001AB834@<X0>(uint64_t a1@<X2>, unsigned int a2@<W8>)
{
  uint64_t v4 = a1 + a2;
  else {
    uint64_t v5 = 56LL;
  }
  BOOL v6 = v5 - a2 + (unint64_t)(((v2 + 1060) ^ 0x5EDu) + 2) + 1342509379 < 8;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((v6 | (2 * v6)) ^ (v2 + 1060))) - 4LL))();
}

uint64_t sub_1001AB88C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(void *)(v5 - 220 + a2 + a1) = 0x2C2C2C2C2C2C2C2CLL;
  int v6 = ((6 * (v2 ^ 0x21Bu)) ^ 0x52ALL) == (v3 & 0xFFFFFFFFFFFFFFF8LL);
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((2 * v6) | (v6 << 10) | v2)) - 12LL))();
}

uint64_t sub_1001AB8EC@<X0>(int a1@<W5>, uint64_t a2@<X8>)
{
  *(_BYTE *)(v5 - 220 + a2 + swift_bridgeObjectRelease(*(void *)(v0 + 40), v3) = 44;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL
}

uint64_t sub_1001AB930()
{
}

void sub_1001AB974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v6 = *(unsigned __int8 *)(v5 - 124) ^ 0xF3;
  if (v6 == 1)
  {
    unsigned int v13 = *(_DWORD *)(v5 - 156);
    unsigned int v12 = *(_DWORD *)(v5 - 152);
    *(_BYTE *)(v5 - 164) = (a5 ^ (a5 - 1) ^ (8 * v12) ^ 0x5B) - ((2 * (a5 ^ (a5 - 1) ^ (8 * v12) ^ 0x5B)) & 0x50) + 44;
    *(_BYTE *)(v5 - 16sub_100129678(v0 + 3) = ((v12 >> 5) ^ 0xBD) - ((2 * ((v12 >> 5) ^ 0xBD)) & 0x58) + 44;
    *(_BYTE *)(v5 - 16sub_100129678(v0 + 2) = ((v12 >> 13) ^ 0x12) - ((v12 >> 12) & 0x58) + 44;
    HIDWORD(v14) = v13 ^ 0x1B;
    LODWORD(v14) = v12 ^ 0xA0000000;
    *(_BYTE *)(v5 - 161) = ((v12 >> 21) ^ 0x10) - ((v12 >> 20) & 0x58) + 44;
    *(_BYTE *)(v5 - 160) = (v14 >> 29) - ((2 * (v14 >> 29)) & 0x58) + 44;
    *(_BYTE *)(v5 - 159) = ((v13 >> 5) ^ 0xE8) - 2 * (((v13 >> 5) ^ 0xE8) & 0x2D ^ ((v13 & 0x20) != 0)) + 44;
    *(_BYTE *)(v5 - 158) = ((v13 >> 13) ^ 0xCF) - ((2 * ((v13 >> 13) ^ 0xCF)) & 0x58) + 44;
    unsigned int v15 = v13 >> 21;
    unsigned int v16 = (v13 >> 21) ^ 0xFFFFFF94;
    char v17 = v16 & 0x2E ^ v15 & 2;
    char v10 = v16 + 44;
    char v11 = 2 * v17;
  }

  else
  {
    if (v6 != 2) {
      goto LABEL_6;
    }
    unsigned int v7 = *(_DWORD *)(v5 - 156);
    unsigned int v8 = *(_DWORD *)(v5 - 152);
    HIDWORD(v9) = v7 ^ 0x1B;
    LODWORD(v9) = v8 ^ 0xA0000000;
    *(_BYTE *)(v5 - 164) = ((v7 >> 21) ^ 0x94) - 2 * (((v7 >> 21) ^ 0x94) & 0x2D ^ ((v7 & 0x200000) != 0)) + 44;
    *(_BYTE *)(v5 - 16sub_100129678(v0 + 3) = ((7 * (a5 ^ (a5 - 35)) - 52) ^ (v7 >> 13))
                         - ((2 * ((7 * (a5 ^ (a5 - 35)) - 52) ^ (v7 >> 13))) & 0x58)
                         + 44;
    *(_BYTE *)(v5 - 16sub_100129678(v0 + 2) = ((v7 >> 5) ^ 0xE8) - ((2 * ((v7 >> 5) ^ 0xE8)) & 0x58) + 44;
    *(_BYTE *)(v5 - 161) = (v9 >> 29) - ((2 * (v9 >> 29)) & 0x58) + 44;
    *(_BYTE *)(v5 - 160) = ((v8 >> 21) ^ 0x10) - ((v8 >> 20) & 0x58) + 44;
    *(_BYTE *)(v5 - 159) = ((v8 >> 13) ^ 0x12) - ((v8 >> 12) & 0x58) + 44;
    *(_BYTE *)(v5 - 158) = ((v8 >> 5) ^ 0xBD) - ((2 * ((v8 >> 5) ^ 0xBD)) & 0x58) + 44;
    LOBYTE(swift_bridgeObjectRelease(0xE000000000000000LL, v8) = (8 * v8) ^ 0x58;
    char v10 = v8 + 44;
    char v11 = (2 * v8) & 0x50;
  }

  *(_BYTE *)(v5 - 157) = v10 - v11;
LABEL_6:
  JUMPOUT(0x1001AA758LL);
}

uint64_t sub_1001ABDE0@<X0>(char a1@<W4>, uint64_t a2@<X5>, int a3@<W8>)
{
  unsigned int v8 = *(_DWORD *)(v7 - 220 + ((v5 + a3) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a2 + (v5 + a3 + 1)) = (BYTE2(v8) ^ 0xE6) - ((2 * (BYTE2(v8) ^ 0xE6)) & 0x58) + 44;
  *(_BYTE *)(a2 + (v5 + a3 + sub_10012CBAC((uint64_t)(v0 + 2)) = (BYTE1(v8) ^ 0x41) - ((v8 >> 7) & 0x58) + 44;
  *(_BYTE *)(a2 + (v5 + a3 + 3)) = v8 ^ 0xA2;
  *(_BYTE *)(a2 + (v5 + a3)) = (HIBYTE(v8) ^ 0x84)
                                           - (((HIBYTE(v8) ^ 0xFFFFFF84) & 0x2D ^ HIBYTE(v8) & 1) << ((a1 + v4 - 9) ^ 0xB7))
                                           + 44;
  unsigned int v9 = *(_DWORD *)(v7 - 128) - 538398878;
  if (v5 + 1438212499 < v3 != v9 < v3) {
    BOOL v10 = v9 < v3;
  }
  else {
    BOOL v10 = v5 + 1438212499 < v9;
  }
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((28 * !v10) ^ v4)) - 4LL))();
}

void sub_1001ABF90()
{
}

uint64_t sub_1001ABF98()
{
  return 0LL;
}

void sub_1001ABFD8(_DWORD *a1)
{
  unsigned int v1 = *a1 + 108757529 * ((2 * (a1 & 0x5EAB9BD4) - (_DWORD)a1 - 1588304853) ^ 0x41C80600);
  __asm { BR              X14 }

uint64_t sub_1001AC09C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * (int)((503
                                     * (((*(_DWORD *)(*(void *)(a1 + 8) + v4) == (v1 & 0xEDF1C6FB) - 650 + v2) ^ ((v1 & 0xFB) + 4)) & 1)) ^ v1 & 0xEDF1C6FB)))();
}

uint64_t sub_1001AC0E4()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * (((((v2 ^ 0x6B3 ^ ((v3 - 1966800080) * (v0 - 1966800080) < 0)) & 1) == 0)
                                * ((v2 - 371) ^ 0x2ED)) ^ v2)))();
}

uint64_t sub_1001AC130@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v2;
  uint64_t v7 = a1;
  unsigned int v8 = v3 + 1225351577 * (&v5 ^ 0x239AD816) - 205;
  uint64_t v5 = v2;
  return (*(uint64_t (**)(uint64_t *))(v1 + 8LL * (v3 ^ 0x251)))(&v5);
}

uint64_t sub_1001AC244(_DWORD *a1, uint64_t a2)
{
  BOOL v2 = (*a1 + *(_DWORD *)(a2 + 4) + 1771861809) < 0xC9;
  return ((uint64_t (*)(void))((char *)*(&off_1002768F0 + (((16 * v2) | (32 * v2)) ^ 0x55Au)) - 8))();
}

uint64_t sub_1001AC290@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((761 * (((v1 == 510884208) ^ 0xA7) & 1)) ^ 0x489u)) - 4LL))();
}

uint64_t sub_1001AC2E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = (v4 - 1063) | 0x409;
  *(_BYTE *)(a1 + (v3 - 2012221280) + 4) = (**(_BYTE **)(a2 + 8) ^ 0x55)
                                                       + ((2 * **(_BYTE **)(a2 + 8)) & 0xAA)
                                                       - 84;
  unsigned int v6 = *(_DWORD *)(a2 + 4) - 2121735845;
  BOOL v7 = ((v5 + 209) ^ 0x9FFC5F96) < v6;
  if (v6 < 0x9FFC5ACB) {
    BOOL v7 = 1;
  }
  return ((uint64_t (*)(void))(*(void *)(a3 + 8LL * ((46 * v7) ^ v5)) - 4LL))();
}

void sub_1001AC39C()
{
}

uint64_t sub_1001AC3A4()
{
  return 4294925278LL;
}

uint64_t sub_1001AC3AC(_DWORD *a1)
{
  *((_BYTE *)a1 + (v3 ^ (v2 + 1843)) + v1 + 1086145835) = 1;
  *a1 = v1;
  return 0LL;
}

void sub_1001AC3DC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1001AC42C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(*(void *)(a2 + 96) + 24LL) = v3;
  int v4 = *(_DWORD *)(a1 + 4) - ((2 * *(_DWORD *)(a1 + 4) + 51973408) & 0x35134EC) - 483057402;
  return (*(uint64_t (**)(void))(v2
                                           + 8LL
                                           * ((411
                                             * (((2 * v4) & 0xFDF3E37E ^ 0x151206C) + (v4 ^ 0xFF516BC9) + 930545525 != 913371444)) ^ 0x4FFu)))(0LL);
}

uint64_t sub_1001AC4D4()
{
}

uint64_t sub_1001AC534(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

uint64_t sub_1001AC574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (a5 ^ (212 * (v6 > 0x1F))))
                            - (((a5 + 1761435781) & 0x97029EAD)
                             + 823764863)
                            + 823765028LL))();
}

uint64_t sub_1001AC5C8@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v9 = v8 + v7 + v6 + 1276;
  uint64_t v10 = v4 + v9;
  __int128 v11 = *(_OWORD *)(v10 - 31);
  uint64_t v12 = a3 + v9;
  *(_OWORD *)(v12 - 15) = *(_OWORD *)(v10 - 15);
  *(_OWORD *)(v12 - 31) = v11;
}

void sub_1001AC648()
{
}

uint64_t sub_1001AC654(uint64_t a1, int a2, int a3, int a4)
{
}

uint64_t sub_1001AC688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
}

uint64_t sub_1001AC6C4@<X0>(int a1@<W3>, uint64_t a2@<X8>)
{
  int v9 = 33 * (a1 ^ 0xA8);
  int v10 = v6 + v5 + v7;
  int v11 = -v8;
  uint64_t v12 = v10 - v8 + ((v9 - 1846506150) & 0x6E0F76FCu);
  *(void *)(a2 - 7 + v1sub_100129678(v0 + 2) = *(void *)(v3 - 7 + v12);
  return (*(uint64_t (**)(void))(v2 + 8LL * (v9 | (8 * (((v9 ^ 0xFFFFFF5D) & v4) + v11 != 8)))))();
}

uint64_t sub_1001AC738(int a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(a3 + (v6 + v8 + v5)) = *(void *)(v7 + (v6 + v8 + v5));
  return (*(uint64_t (**)(void))(v4 + 8LL * (a1 | (8 * (a4 + v8 != 8)))))();
}

uint64_t sub_1001AC764(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v4 + 8LL * ((((v6 - 1052) ^ (v6 - 1049)) * (v5 == a4)) | v6)))(0LL);
}

  ;
}

uint64_t sub_1001AC794@<X0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(_BYTE *)(a3 + a1 - 1737136481 + ((a2 + 538443557) | 0x1101A824u)) = *(_BYTE *)(v5
                                                                                 + a1
                                                                                 - 1737136481
                                                                                 + ((a2 + 538443557) | 0x1101A824u));
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((58 * (a1 - 1 != v4)) ^ (a2 - 10))) - 8LL))(0LL);
}

void sub_1001AC7F0()
{
}

uint64_t sub_1001AC7F8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  __int16 v2 = *(_DWORD *)result + 26185 * ((2 * (result & 0x1A68) - result - 6761) ^ 0x9DF5);
  int v3 = (v2 & 0x1FF ^ 0xCB) - ((2 * (v2 & 0x1FF ^ 0xCB)) & 0x2F2) - 1760785031;
  *(_DWORD *)(v1 - 0x8FD385F8C7F98BDLL) = ((v3 & 0x200056A ^ 0x28000448)
                                         + (v3 ^ 0x426133B3)
                                         - ((v3 ^ 0x426133B3) & 0x5020156A)) ^ 0x4CB2AA06;
  *(void *)(v1 - 0x8FD385F8C7F98DDLL) = 0xA20257AB7299FD1BLL;
  *(_DWORD *)(v1 - 0x8FD385F8C7F98C1LL) = 2113300787;
  int v4 = v2 ^ 0x9E;
  if (v4 == 1)
  {
    int v5 = 2113300803;
    goto LABEL_5;
  }

  if (v4 == 2)
  {
    *(_DWORD *)(v1 - 0x8FD385F8C7F98C5LL) = 1194631294;
    int v5 = 2113300807;
LABEL_5:
    *(void *)(v1 - 0x8FD385F8C7F98D5LL) = 0x6B2BEA07E3A3628FLL;
    *(void *)(v1 - 0x8FD385F8C7F98CDLL) = 0x94D415F81C5C9D70LL;
    *(_DWORD *)(v1 - 0x8FD385F8C7F98C1LL) = v5;
  }

  *(_DWORD *)(result + 4) = -1020681075;
  return result;
}

void sub_1001AC998(uint64_t a1)
{
  int v1 = 535753261 * (((a1 | 0xB4CC401E) - a1 + (a1 & 0x4B33BFE1)) ^ 0xBE384E31);
  int v2 = *(_DWORD *)(a1 + 8) ^ v1;
  int v3 = *(_DWORD *)(a1 + 24) - v1;
  int v4 = *(_DWORD *)(*(void *)(a1 + 16) - 0x1F589EA4AC42BDE5LL);
  int v6 = v4 - 1966800080;
  BOOL v5 = v4 - 1966800080 < 0;
  int v7 = 1966800080 - v4;
  if (!v5) {
    int v7 = v6;
  }
  __asm { BR              X13 }

uint64_t sub_1001ACA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3
                                                                                 + 8LL
                                                                                 * ((((((v5 ^ 0x3A5) - 646) | 0x11) ^ 0x436)
                                                                                   * (v4 == 1117964708)) ^ v5 ^ 0x3A5))
                                                                     - 12LL))( a1,  a2,  a3,  1903137887LL);
}

uint64_t sub_1001ACAAC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 28) = a4;
  return result;
}

uint64_t sub_1001ACAB8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(v1
                                                                                       + 8LL
                                                                                       * (int)((((v3 + 234386186) & 0xF2078C2E)
                                                                                              + 199) ^ 0x759 ^ (v3 + 234386186) & 0xF2078C2E)))( a1,  418990867LL,  (v3 + 234386186) & 0xF2078C2E,  ((v3 + 234386186) & 0xF2078C2E) + 199,  3337363496LL,  v2);
}

uint64_t sub_1001ACB40@<X0>(void *a1@<X0>, int a2@<W3>, int a3@<W4>, int a4@<W5>, int a5@<W8>)
{
  *(_BYTE *)(*a1 + (a4 + a5)) = ((a3 ^ v7) >> v8) - (((a3 ^ v7) >> v8 << ((a2 + 26) ^ 0xEE)) & 0x58) + 44;
  return (*(uint64_t (**)(void))(v5 + 8LL * ((449 * (a4 + 173 * (a2 ^ 0x4D3) - 1039 == v6)) ^ a2)))();
}

uint64_t sub_1001ACBAC(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8LL * (((v4 == 24) * ((a3 + 199) ^ 0x759)) ^ a3)))(a1, a2);
}

uint64_t sub_1001ACBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v8 = v3 > v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v4
                                                                                        + 8LL
                                                                                        * (int)((((a3 - 1357991727) & 0x50F14FF5 ^ 0x62B)
                                                                                               * v8) ^ a3)))( a1,  a2,  a3,  ((_DWORD)a3 - 1357991727) & 0x50F14FF5,  3337363496LL,  v5);
}

uint64_t sub_1001ACC50@<X0>(void *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W8>)
{
  return sub_1001ACB40(a1, (a3 + 1458891473) & 0xA90B15F5, *(_DWORD *)(*v5 + 4LL * (a2 - 418990867)), v4, a4);
}

void sub_1001ACC94(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 - 108757529 * ((-2 - ((a1 | 0x1E625E8E) + (~(_DWORD)a1 | 0xE19DA171))) ^ 0x101C35A);
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(v2 - 0x1F589EA4AC42BDE5LL);
  unsigned int v5 = (460628867
      * ((((2 * (v4 ^ 0x40000CF6)) | 0x846CAAD6) - (v4 ^ 0x40000CF6) + 1036626581) ^ 0xCEA0DBE0)) ^ (v1 + 836);
  uint64_t v6 = v2;
  sub_1001AE554((uint64_t)v4);
  __asm { BR              X9 }

uint64_t sub_1001ACDDC@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
}

uint64_t sub_1001ACE44@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
                                        * (((((v2 - 1121) | 0x432) ^ 0x58B)
}

uint64_t sub_1001ACEF0@<X0>(int a1@<W1>, int a2@<W4>, uint64_t a3@<X8>)
{
  int v10 = a1 - 1;
  unsigned int v11 = *(_DWORD *)(*(void *)(v9 - 0x1F589EA4AC42BDE1LL) + 4LL * (a1 + v7)) ^ v5;
  *(_DWORD *)(*(void *)(v9 - 0x1F589EA4AC42BDE1LL) + 4LL * (v3 + v4)) = ((v11 >> (32 - v6)) | a2 ^ v5)
                                                                        + v5
                                                                        - (((v8 - 143) ^ 0x8DD843F3) & (2 * ((v11 >> (32 - v6)) | a2 ^ v5)));
  return ((uint64_t (*)(void))(*(void *)(a3 + 8LL * (int)((83 * ((v10 + v7) >> 31)) ^ v8)) - 4LL))();
}

void sub_1001ACF8C()
{
}

uint64_t sub_1001ACF94@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8LL
                              * ((((v4 ^ 0x5C9EFAAB) - 269662211 + ((v3 ^ 0xB93DF137) & v1) - 1284260521 < ((v2 - 870) ^ 0x7FFFFD76u))
                                * (((v2 - 999) | 0x472) ^ 0x669)) ^ v2)))();
}

uint64_t sub_1001AD014@<X0>(uint64_t a1@<X8>)
{
  int v6 = 49 * (v4 ^ 0x665);
  *(_DWORD *)(*(void *)(v5 - 0x1F589EA4AC42BDE1LL) + 4LL * (int)((v6 ^ 0xB4108C77) + v1 + vsub_10012CBAC((uint64_t)(v0 + 2)) = *(_DWORD *)(*(void *)(v5 - 0x1F589EA4AC42BDE1LL) + 4LL * ((v6 ^ 0x766 ^ (v3 + 648)) + v2));
  return (*(uint64_t (**)(uint64_t))(a1 + 8LL * ((917 * ((v2 + v3) < 0x7FFFFFFF)) ^ v6)))(0x7FFFFFFFLL);
}

void sub_1001AD090()
{
}

uint64_t sub_1001AD098@<X0>(int a1@<W4>, uint64_t a2@<X8>)
{
  *(_DWORD *)(*(void *)(v5 - 0x1F589EA4AC42BDE1LL) + 4LL * ((((v3 - 721) | 0x20) ^ (v2 - 14)) + v4)) = a1;
  return ((uint64_t (*)(void))(*(void *)(a2 + 8LL * (int)((74 * ((-v2 - v4) >> 31)) ^ v3)) - 4LL))();
}

uint64_t sub_1001AD0EC@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*v3 + 4LL * (v1 + v5 + v4 - 689 - 243)) = v2;
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (((v1 + v5 - 2 >= 0) * v6) ^ v4)) - 4LL))();
}

void sub_1001AD128()
{
  BOOL v7 = *(_DWORD *)(*v4 + 4LL * (v0 + v2)) == v3;
  *int v6 = (v0 - v7 + (((v5 + 406) | 0x13) ^ (v2 - 616))) * v1 - 1941172939 * (v0 - v7) + 1163112590;
}

void sub_1001AD2B8(uint64_t a1)
{
  __asm { BR              X8 }

void sub_1001AD3E4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v11 = *(unsigned __int8 **)(a3 + 8LL * (a4 ^ (a4 - 113)));
  int v12 = ((((a4 + 577) ^ 0x78B570DC) - 673021178) & 0x281D7BBB) - 283;
  BOOL v14 = ((**(unsigned __int8 **)(a7 + 80) - (*v11 ^ 0x2C)) ^ 0xFFF5C7EB)
      + ((v12 - v7 + 314) ^ 0x4E4A0D63)
      + ((2 * (**(unsigned __int8 **)(a7 + 80) - (*v11 ^ 0x2C))) & 0xFFEB8FD6) != v9
     || v10 == 101386941;
  __asm { BR              X15 }

void sub_1001AE554(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) ^ (460628867 * (((a1 | 0x4A5B5FFB) - (a1 & 0x4A5B5FFB)) ^ 0x6CDDD86));
  uint64_t v3 = *(void *)(a1 + 8);
  v2[0] = v1 + 628203409 * (((~v2 & 0xDF090424) - (~v2 | 0xDF090425)) ^ 0x5D810816) - 1179;
  sub_1001C1AC0((uint64_t)v2);
  __asm { BR              X9 }

void sub_1001AE658()
{
  *int v0 = v1 | 1;
}

void sub_1001AE6D8(uint64_t a1)
{
  int v1 = 1178560073 * ((-2 - ((a1 | 0xAE85A791) + (~(_DWORD)a1 | 0x517A586E))) ^ 0xEBEE200C);
  __asm { BR              X9 }

uint64_t sub_1001AE794@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8LL
                              * (((v2 != ((v1 - 426338658) & 0x196968FC) + 911095750) * (((v1 - 209) | 0x8A) + 1664)) ^ v1)))();
}

uint64_t sub_1001AE800@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * (v1 + 1261)) - 12LL))();
}

uint64_t sub_1001AE908@<X0>(int a1@<W6>, int a2@<W7>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(void))(a3 + 8LL * (((v5 == v6 + 101 + v3) * ((v6 + a1) & a2 ^ v4)) ^ v6)))();
}

uint64_t sub_1001AE934@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8LL * ((1588 * (v1 != ((v2 + 1636511417) & 0x9E74D0FF ^ 0xCA))) ^ v2)))();
}

uint64_t sub_1001AE970@<X0>(uint64_t a1@<X0>, int a2@<W4>, uint64_t a3@<X8>)
{
  int v7 = v3 + v4;
  int v8 = v4 + 1;
  *(_DWORD *)(*(void *)(v5 - 0x1F589EA4AC42BDE1LL) + 4LL * (v7 + v6 - 71 - 20sub_10012CBAC((uint64_t)(v0 + 2)) = a2;
  *(_DWORD *)(v5 - 0x1F589EA4AC42BDE5LL) = v8;
  int v10 = v8 + v3;
  if (v8 + v3 < 0) {
    int v10 = -v10;
  }
  int v9 = (v6 - 253) | 0xC8;
  return ((uint64_t (*)(uint64_t))(*(void *)(a3
                                                      + 8LL
                                                      * ((1518
                                                        * ((int)((v10 ^ 0xF77EFFFC)
                                                               + ((v10 << (v9 ^ 0xDD)) & 0xEEFDFFF8)
                                                               + 2109471956
                                                               + (v9 ^ 0x16 ^ (v3 + 181))) >= 0)) ^ v9))
                                          - ((v9 + 296) | 0x2Au)
                                          + 550LL))(a1);
}

uint64_t sub_1001AEA64@<X0>(int a1@<W3>, int a2@<W4>, unsigned int a3@<W5>, uint64_t a4@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a4
                                        + 8LL
                                        * (((((*(_DWORD *)(*v5 + 4LL * a3) == (((a2 - 62) | a1) ^ (v4 + 204))) ^ (a2 + 1)) & 1)
                                          * v6) ^ a2))
                            - 8LL))();
}

void sub_1001AEAA4()
{
}

uint64_t sub_1001AEAB0(uint64_t result)
{
  *(_DWORD *)(result + 24) = -286580747;
  return result;
}

void sub_1001AEAF4()
{
  unint64_t v0 = (unint64_t)&v2[qword_1002BB488 + qword_1002BB2D8];
  qword_1002BB488 = 1126174607 * v0 - 0x245AECB3A987CA56LL;
  qword_1002BB2D8 = 1126174607 * (v0 ^ 0x245AECB3A987CA56LL);
  *(_DWORD *)*(&off_10027AEF0
  uint64_t v1 = ((uint64_t (*)(uint64_t))*(&off_10027AEF0
                                         + ((-113
  *(void *)*(&off_10027AEF0
  __asm { BR              X8 }

uint64_t sub_1001AEC98()
{
  unint64_t v7 = (v2 - 152) | 0x824D808DE34FF0FFLL;
  uint64_t v3 = **(unsigned int **)(v1 + 144);
  uint64_t v4 = 1755732067 * ((0x7DB27F721CB00F00LL - ((v2 - 152) | 0x7DB27F721CB00F00LL) + v7) ^ 0x5FE627B23D894D24LL);
  *(_DWORD *)(v2 - 11sub_100129678(v0 + 2) = v4 ^ 0x9B531E92;
  STACK[0x5B8] = v4 + 2068980119;
  *(_DWORD *)(v2 - 13sub_100129678(v0 + 2) = -1755732067 * ((481300224 - ((v2 - 152) | 0x1CB00F00) + v7) ^ 0x3D894D24);
  *(_DWORD *)(v2 - 128) = v4 + 652669833;
  *(_DWORD *)(v2 - 148) = v4 ^ 0x26E6F3E2;
  *(_DWORD *)(v2 - 136) = v4 ^ 0x26E6F3D6;
  STACK[0x5A0] = v3 + v4;
  uint64_t v5 = ((uint64_t (*)(uint64_t))(*(void *)(v1 + 1024) - 8LL))(v2 - 152);
  return ((uint64_t (*)(uint64_t))(*(void *)(v0 + 8LL * *(int *)(v2 - 152)) - 8LL))(v5);
}

uint64_t sub_1001AEF50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  int v35 = v32 + v28 + 841;
  a12(a11);
  int v36 = v34();
  unsigned int v37 = v35 + 640442942 + v36 - (v30 & (2 * v36)) - 840;
  *int v29 = v37;
  int v38 = 1812433253 * (((v37 >> 30) + 640442942 - 4 * (v37 >> 31)) ^ v37);
  v29[1] = v33 + v38 - (((v38 + 1) << ((v35 - 65) ^ 6)) & v30);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 + 8LL * v35) - 12LL))( 1880LL,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28);
}

void sub_1001AF004()
{
}

uint64_t sub_1001AF010( double a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int8x16_t a15, int32x4_t a16, int8x16_t a17, int8x16_t a18, int8x16_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  int8x16_t v30 = (int8x16_t)vld1q_dup_f32((const float *)v27);
  v31.i64[0] = 0x8000000080000000LL;
  v31.i64[1] = 0x8000000080000000LL;
  a2.i64[0] = *(void *)(v27 + 4);
  a2.i32[2] = *(_DWORD *)(v27 + 12);
  int8x16_t v32 = vextq_s8(v30, a2, 0xCuLL);
  int8x16_t v33 = a2;
  v33.i32[3] = *(_DWORD *)(v27 + 16);
  int32x4_t v34 = (int32x4_t)veorq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v33, a19), vandq_s8(v32, v31)), 1uLL),  a18);
  v35.i32[0] = *(_DWORD *)(v28 + 4 * (*(_DWORD *)(v27 + 4) & 1LL));
  v35.i32[1] = *(_DWORD *)(v28 + 4 * (*(_DWORD *)(v27 + 8) & 1LL));
  v35.i32[2] = *(_DWORD *)(v28 + 4 * (*(_DWORD *)(v27 + 12) & 1LL));
  v35.i32[3] = *(_DWORD *)(v28 + 4LL * (v33.i8[12] & 1));
  *(int8x16_t *)uint64_t v27 = veorq_s8( veorq_s8(veorq_s8(*(int8x16_t *)(v27 + 1588), v35), a15),  (int8x16_t)vaddq_s32( vsubq_s32(v34, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v34, v34), a17)),  a16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 14072))(2191224413LL, a27);
}

uint64_t sub_1001AF7EC(int a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned int v13 = (unsigned int *)(v9 + 4 * v6);
  uint64_t v14 = ((v4 - 582) ^ a4) + v6;
  int v15 = *(_DWORD *)(v9 + 4 * v14);
  unsigned int v16 = v8 ^ ((v15 & 0x7FFFFFFE | v5 & 0x80000000) >> 1);
  unsigned int *v13 = v13[397] ^ a1 ^ *(_DWORD *)(v10 + 4LL * (v15 & 1)) ^ (v16 + v7 - (v11 & (2 * v16)));
  return (*(uint64_t (**)(void))(v12 + 8LL * (((16 * (v14 == 227)) | ((v14 == 227) << 6)) ^ v4)))();
}

uint64_t sub_1001AF858@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>, int8x16_t a4@<Q1>, int8x16_t a5@<Q4>, int8x16_t a6@<Q5>, int8x16_t a7@<Q6>, int32x4_t a8@<Q7>)
{
  unsigned int v13 = (const float *)(v8 + 908);
  int8x16_t v14 = (int8x16_t)vld1q_dup_f32(v13);
  a4.i64[0] = *(void *)(v8 + 912);
  a4.i32[2] = *(_DWORD *)(v8 + 920);
  int8x16_t v15 = vextq_s8(v14, a4, 0xCuLL);
  int8x16_t v16 = a4;
  v16.i32[3] = *(_DWORD *)(v8 + 4 * (419 * (a3 ^ 0x2EDu) - 607LL));
  int32x4_t v17 = (int32x4_t)veorq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v16, a5), vandq_s8(v15, v11)), 1uLL),  a6);
  v18.i32[0] = *(_DWORD *)(v9 + 4 * (*(_DWORD *)(v8 + 912) & 1LL));
  v18.i32[1] = *(_DWORD *)(v9 + 4 * (*(_DWORD *)(v8 + 916) & 1LL));
  v18.i32[2] = *(_DWORD *)(v9 + 4 * (*(_DWORD *)(v8 + 920) & 1LL));
  v18.i32[3] = *(_DWORD *)(v9 + 4LL * (v16.i8[12] & 1));
  *(int8x16_t *)(v8 + 908) = veorq_s8( veorq_s8(veorq_s8(*(int8x16_t *)v8, v18), v12),  (int8x16_t)vaddq_s32( vsubq_s32(v17, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v17, v17), a7)),  a8));
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 8LL * a3) - 12LL))( a1,  a2,  749LL,  419LL);
}

void sub_1001AF920()
{
}

uint64_t sub_1001AF92C( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, int a42, unsigned int a43)
{
  unsigned int v49 = v44 ^ ((*v45 & 0x7FFFFFFE | v45[623] & 0x80000000) >> 1);
  v45[623] = v45[396] ^ a1 ^ *(_DWORD *)(v46 + 4 * (*v45 & 1LL)) ^ (((v43 - 272631367) & 0xDDF9FFCD)
                                                                  + v49
                                                                  - (v47 & (2 * v49))
                                                                  + 1483892081);
  return ((uint64_t (*)(void))(*(void *)(v48 + 8LL * ((52 * (a43 > 0x26F)) ^ v43)) - 4LL))();
}

uint64_t sub_1001AF9B4@<X0>( _DWORD *a1@<X1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, _DWORD *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t (*a32)(uint64_t))
{
  *a1 = 519546009;
  unint64_t v34 = 1178560073 * ((v33 - 0x7B5B504B8856665ALL - 2 * ((v33 - 152) & 0x84A4AFB477A99A3ELL)) ^ 0x9F58FF5CCD3DE25CLL);
  STACK[0x5C0] = (*a25 - 708109874) - v34;
  *(_DWORD *)(v33 - 148) = ((a2 + 53627184) ^ 0x23)
                         + 1178560073 * ((v33 + 2007603622 - 2 * ((v33 - 152) & 0x77A99A3E)) ^ 0xCD3DE25C);
  *(_DWORD *)(v33 - 144) = a2
                         + 53627184
                         + 1178560073 * ((v33 + 2007603622 - 2 * ((v33 - 152) & 0x77A99A3E)) ^ 0xCD3DE25C);
  STACK[0x5A8] = v34 + 1360870245;
  *(_DWORD *)(v33 - 128) = 1178560073 * ((v33 + 2007603622 - 2 * ((v33 - 152) & 0x77A99A3E)) ^ 0xCD3DE25C) + 1;
  *(_DWORD *)(v33 - 124) = (a2 + 53627184) & 0xD6FC6F9B ^ (1178560073
                                                         * ((v33 + 2007603622 - 2 * ((v33 - 152) & 0x77A99A3E)) ^ 0xCD3DE25C));
  *(_DWORD *)(v33 - 120) = 1178560073 * ((v33 + 2007603622 - 2 * ((v33 - 152) & 0x77A99A3E)) ^ 0xCD3DE25C)
                         + a2
                         - 1430154380;
  uint64_t v35 = a32(v33 - 152);
  return ((uint64_t (*)(uint64_t))(*(void *)(v32 + 8LL * *(int *)(v33 - 152)) - 4LL))(v35);
}

uint64_t sub_1001AFABC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int *a31, void *a32, unint64_t a33)
{
  if (v34 >= v36) {
    int v37 = *a31 + 1;
  }
  else {
    int v37 = 2068980119;
  }
  *a31 = v37;
  int v38 = (((v33 >> (a24 ^ 0x84)) ^ 0x4C58C) + 640442942 - ((2 * ((v33 >> (a24 ^ 0x84)) ^ 0x4C58C)) & 0x18C47C)) ^ v33;
  unsigned int v39 = (((v38 << 7) & 0x9D2C5680 ^ v38) << 15) & 0xEFC60000 ^ (v38 << 7) & 0x9D2C5680 ^ v38;
  *(_DWORD *)(*a32 + a33) ^= v39 ^ (v39 >> 18);
  return (*(uint64_t (**)(void))(v35 + 8LL * ((1931 * (a33 > 0x1FB)) ^ 0xE9)))();
}

void sub_1001AFBA8()
{
}

void sub_1001AFBBC()
{
  _DWORD *v1 = v0;
}

void sub_1001B61C4(uint64_t a1)
{
  int v2 = 3804331 * (((a1 | 0xD29CC998) - (a1 | 0x2D633667) + 761476711) ^ 0xAC49EC6E);
  int v3 = *(_DWORD *)(a1 + 4);
  int v4 = *(_DWORD *)a1 ^ v2;
  unsigned int v5 = 1178560073 * ((&v37 - 1847688801 - 2 * (&v37 & 0x91DE819F)) ^ 0x2B4AF9FD);
  int v6 = *(_DWORD *)(a1 + 8) ^ v2;
  unint64_t v18 = 3804331
      * (((a1 | 0xF8BBF308D29CC998LL) - (a1 | 0x7440CF72D633667LL) + 0x7440CF72D633667LL) ^ 0x3712930CAC49EC6ELL);
  int v7 = v3 + v2;
  int v39 = v4 - v5 - 1882357516;
  unsigned int v37 = 1091580572 - v5;
  int v23 = &STACK[0x8FD385F8C7F9B71];
  int v38 = &STACK[0x8FD385F8C7F9B71];
  sub_1001AC7F8((uint64_t)&v37);
  int v14 = v7 + 619917585;
  int v13 = 1470973143;
  int v17 = v7 - 773459420;
  int v12 = v7 + 747582266;
  int v11 = v7 - 747903107;
  void v10[2] = (char *)&v10[-217161609] + 1;
  v10[1] = &v35 - 1553;
  int v19 = v4 ^ 0xB7;
  int v29 = (v4 - 2116255094) & 0x7E237FE1 ^ 0x309;
  int v30 = (v4 - 2116255094) & 0x7E237FE1;
  int v28 = v4 ^ 6;
  int v16 = v4 + 2084248459;
  uint64_t v27 = (v4 + 2084248459);
  uint64_t v15 = v27;
  int v26 = v4;
  int32x4_t v21 = vdupq_n_s32(0x7C3ACFFFu);
  int32x4_t v22 = vdupq_n_s32(0xF8759FFE);
  uint64_t v20 = a1;
  uint64_t v24 = *(void *)(a1 + 32);
  uint64_t v8 = (char *)*(&off_10027AEF0 + v4 + 60) - 8;
  uint64_t v25 = *(void *)&v8[8 * v4] - 4LL;
  unsigned int v9 = ((3 * (v4 ^ 0xB7) - 325) | 0x2B1) + v6 - ((2 * v6 + 1385914200) & 0x9CE56E16) - 138386494;
  char v31 = (HIBYTE(v9) ^ 0x4E) - 2 * ((HIBYTE(v9) ^ 0x4E) & 0x2D ^ HIBYTE(v9) & 1) + 44;
  char v32 = (BYTE2(v9) ^ 0x72) - ((2 * (BYTE2(v9) ^ 0x72)) & 0x58) + 44;
  char v33 = (BYTE1(v9) ^ 0xB7) - ((2 * (BYTE1(v9) ^ 0xB7)) & 0x58) + 44;
  char v34 = v9 ^ 0x27;
  __asm { BR              X14 }

uint64_t sub_1001B659C(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11 = v9 + a1;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 8LL * (int)(((((v6 + 648) | 0x108) + (v6 ^ 0xFFFFFFAA)) * ((a3 - v7 - v8 + v11 + 2203) > 0xE)) ^ v6))
                                                                                                - 8LL))( 3400227375LL,  2149711875LL,  3725342001LL,  2145253218LL,  a5,  a6,  569625295LL);
}

uint64_t sub_1001B6630(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v10 = v4 ^ 0x539;
  int v11 = v4 ^ 0x20F;
  unsigned int v12 = v6 + v5 + a2;
  if (v12 <= 0x40) {
    int v13 = 64;
  }
  else {
    int v13 = v12;
  }
  BOOL v14 = !__CFADD__(v12 - 1, v8 + v7 + ((((v10 - 919) | 0x400) + a4) ^ v11) + v13);
  return (*(uint64_t (**)(void))(v9 + 8LL * ((2 * v14) | (4 * v14) | v10)))();
}

uint64_t sub_1001B66A0@<X0>( uint64_t a1@<X5>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, arg29_1001B66A0 a29)
{
  *(_OWORD *)(a1 + (((v29 - 514) ^ 0xFFFFFE7BLL) & (a2 + v31))) = *(_OWORD *)&a29.arr[4];
  return ((uint64_t (*)(void))(*(void *)(v32 + 8LL * ((38 * (((v30 + 1) & 0x1FFFFFFF0LL) == 16)) ^ v29)) - 4LL))();
}

void sub_1001B66FC()
{
}

uint64_t sub_1001B6708@<X0>(int a1@<W0>, uint64_t a2@<X5>, uint64_t a3@<X7>, int a4@<W8>)
{
  int v8 = 3 * (v4 ^ 0x2B2);
  *(_BYTE *)(a2 + (v8 ^ (a1 + 212)) + v6) = v5;
  *(_BYTE *)(a2 + (a4 - 894739921)) = *(_BYTE *)(a3
                                                             + (((v8 - 161) ^ 0xFFFFFFCBLL) & 0x100000001LL));
  return (*(uint64_t (**)(void))(v7 + 8LL * (v8 ^ 0x626)))();
}

uint64_t sub_1001B7998@<X0>(uint64_t a1@<X5>, uint64_t a2@<X7>, int a3@<W8>)
{
  *(_BYTE *)(a1 + (v6 + a3 + 1)) = *(_BYTE *)(a2 + (v5 - 569625293));
  return (*(uint64_t (**)(void))(v7 + 8LL * (((((v3 - 197) | 0x24) + 1085) * ((v4 & 0xFFFFFFFC) == 569625292)) ^ v3)))();
}

uint64_t sub_1001B79EC@<X0>( uint64_t a1@<X5>, uint64_t a2@<X7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t (*a23)(uint64_t))
{
  *(_BYTE *)(a1 + (a3 + v24 - 50)) = *(_BYTE *)(a2 + (v23 - 569625292));
  int v26 = 628203409 * ((2 * ((v25 - 168) & 0xADFAC20) - (v25 - 168) + 1965052895) ^ 0xF7A85FEC);
  *(void *)(v25 - 168) = a21;
  *(_DWORD *)(v25 - 160) = v26 + v24 + 601;
  *(_DWORD *)(v25 - 156) = 103152455 - v26;
  uint64_t v27 = sub_1001A2A8C(v25 - 168);
  return a23(v27);
}

uint64_t sub_1001B7A80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13)
{
  BOOL v16 = a13 < 0x5F494700;
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * ((v16 * ((v14 + 1376) ^ 0x772)) ^ v14)) - 4LL))();
}

uint64_t sub_1001B7AF4@<X0>( int a1@<W0>, unsigned int a2@<W1>, char a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W8>)
{
  BOOL v14 = a2 < v12;
  char v15 = *(_BYTE *)(a7 + v11 + v8 + (v9 ^ a4) - 1823);
  *(_BYTE *)(a6 + (a8 + v10)) = v15 - (a3 & (2 * v15)) + 44;
  unsigned int v16 = v8 + 1 + a1;
  int v17 = v14 ^ (v16 < v12);
  BOOL v18 = v16 < a2;
  if (!v17) {
    BOOL v14 = v18;
  }
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * ((v14 * a5) ^ v9)) - 4LL))();
}

uint64_t sub_1001B7B60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  int v30 = 628203409 * ((~((v29 - 168) | 0xF78B7D49) + ((v29 - 168) & 0xF78B7D49)) ^ 0x8AFC8E85);
  *(void *)(v29 - 168) = a27;
  *(_DWORD *)(v29 - 160) = v30 + v28 - 1170;
  *(_DWORD *)(v29 - 156) = a13 - v30;
  uint64_t v31 = sub_1001A2A8C(v29 - 168);
  uint64_t v32 = STACK[0x298] & 0x3F;
  *((_BYTE *)&STACK[0x254] + (v32 ^ 0x2B)) = -84;
  return ((uint64_t (*)(uint64_t))(*(void *)(v27
                                                      + 8LL
                                                      * ((((v32 ^ 0x2B) > 0x37)
                                                        * (v28 - 1771 + ((v28 - 1758510882) & 0x68D0BF3F) - 1849)) ^ v28))
                                          - 8LL))(v31);
}

uint64_t sub_1001B7C6C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8LL * (((a1 == ((v1 - 1831) ^ 0x29)) * (v1 ^ 0x774)) ^ v1)))( 34LL,  731LL);
}

uint64_t sub_1001B7CB0()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((28
}

uint64_t sub_1001B7D08@<X0>(unsigned int a1@<W8>, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + a1 + 259 * (v4 & 0x3651AF77 ^ 0x701u)) = v6;
  return (*(uint64_t (**)(void))(v5 + 8LL * ((63 * ((v3 & 0x38) == 8LL)) ^ v4 & 0x3651AF77u)))();
}

uint64_t sub_1001B7D5C@<X0>(unsigned int a1@<W8>)
{
  *(void *)(v3 + a1) = v5;
  return (*(uint64_t (**)(void))(v4 + 8LL * ((63 * (v2 == 0)) ^ v1)))();
}

uint64_t sub_1001B7D84@<X0>(int a1@<W8>)
{
}

uint64_t sub_1001B7DC4(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_BYTE *)(v6 + v10 + a6 - 1) = v9;
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * (((v6 + v10 >= (v7 ^ a1 ^ v8)) * a2) ^ (v7 + 1173))) - 4LL))();
}

void sub_1001B7DFC()
{
}

uint64_t sub_1001B7E0C()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL * ((15 * (v0 - 1737293467 < ((v2 + 498780042) & 0xE2453CFB) - 1154)) ^ (v2 + 479))))();
}

uint64_t sub_1001B7E68@<X0>(int a1@<W8>)
{
  uint64_t v4 = v1;
  unint64_t v5 = v1 + v2;
  if (v5 <= 0x38) {
    unint64_t v5 = 56LL;
  }
  BOOL v6 = v5 - v4 + (a1 ^ 0x715u) + 1737292524 < 8;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((2 * v6) | (4 * v6)) ^ a1)) - 26 * (a1 ^ 0x4B8u) + 48LL))();
}

uint64_t sub_1001B7ED4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(a11 + v1sub_100129678(v0 + 3) = v15;
  return ((uint64_t (*)(void))(*(void *)(v14
                                        + 8LL * ((((v12 & 0xFFFFFFFFFFFFFFF8LL) == 8) * ((v11 + 269) ^ 0x4AB)) ^ v11))
                            - 4LL))();
}

uint64_t sub_1001B7F14()
{
  void *v1 = v5;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (((v3 == 0) * v2) ^ v0)) - 4LL))();
}

uint64_t sub_1001B7F38()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((((v2 - 1160) ^ 0x2E8) * (v0 == v1)) ^ v2)) - (v2 ^ 0x488u) + 48LL))();
}

uint64_t sub_1001B7F74@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + v5 + a1 - 1) = v4;
  return (*(uint64_t (**)(void))(v6 + 8LL * ((((unint64_t)(a2 + v5) < 0x38) * v3) ^ (v2 + 479))))();
}

void sub_1001B7FA0()
{
  int v1 = LOBYTE(STACK[0x2B4]) ^ 0xF3;
  if (v1 == 1)
  {
    unsigned int v7 = STACK[0x298];
    unsigned int v8 = STACK[0x294];
    char v9 = ((LODWORD(STACK[0x298]) >> (v0 - 47)) ^ 0xBD)
       - 2 * (((LODWORD(STACK[0x298]) >> (v0 - 47)) ^ 0xBD) & 0x2E ^ (LODWORD(STACK[0x298]) >> (v0 - 47)) & 2);
    LOBYTE(STACK[0x28C]) = ((8 * LOBYTE(STACK[0x298])) ^ 0x58) - ((2 * ((8 * LOBYTE(STACK[0x298])) ^ 0x58)) & 0x55) + 44;
    LOBYTE(STACK[0x28D]) = v9 + 44;
    LOBYTE(STACK[0x28E]) = ((v7 >> 13) ^ 0x12) + (~(v7 >> 12) | 0xA7) + 45;
    LOBYTE(STACK[0x28F]) = ((v7 >> 21) ^ 0x10) + (~(v7 >> 20) | 0xA7) + 45;
    HIDWORD(v10) = v8 ^ 0x1B;
    LODWORD(v10) = v7 ^ 0xA0000000;
    LOBYTE(STACK[0x290]) = (v10 >> 29) - ((2 * (v10 >> 29)) & 0x58) + 44;
    LOBYTE(STACK[0x291]) = ((v8 >> 5) ^ 0xE8) - 2 * (((v8 >> 5) ^ 0xE8) & 0x2D ^ ((v8 & 0x20) != 0)) + 44;
    LOBYTE(STACK[0x292]) = ((v8 >> 13) ^ 0xCF) - ((2 * ((v8 >> 13) ^ 0xCF)) & 0x58) + 44;
    unsigned int v11 = (v8 >> 21) ^ 0xFFFFFF94;
    int v12 = v11 & 0x2D;
    char v5 = v11 + 44;
    unsigned int v6 = 2 * (v12 ^ (v8 >> 21) & 1);
  }

  else
  {
    if (v1 != 2) {
      goto LABEL_6;
    }
    unsigned int v6 = STACK[0x298];
    char v2 = ((LODWORD(STACK[0x294]) >> 5) ^ 0xE8)
       - 2 * (((LODWORD(STACK[0x294]) >> 5) ^ 0xE8) & 0x2D ^ ((STACK[0x294] & 0x20) != 0));
    HIDWORD(swift_bridgeObjectRelease(*(void *)(v0 + 40), v3) = LODWORD(STACK[0x294]) ^ 0x1B;
    LODWORD(swift_bridgeObjectRelease(*(void *)(v0 + 40), v3) = LODWORD(STACK[0x298]) ^ 0xA0000000;
    int v4 = LODWORD(STACK[0x294]) >> 13;
    LOBYTE(STACK[0x28C]) = ((LODWORD(STACK[0x294]) >> 21) ^ 0x94)
                         - 2
                         * (((LODWORD(STACK[0x294]) >> 21) ^ 0x94) & 0x2F ^ (LODWORD(STACK[0x294]) >> 21) & ((v0 ^ 0x56) - 95))
                         + 44;
    LOBYTE(STACK[0x28D]) = (v4 ^ 0xCF) - ((2 * (v4 ^ 0xCF)) & 0x58) + 44;
    LOBYTE(STACK[0x28E]) = v2 + 44;
    LOBYTE(STACK[0x28F]) = (v3 >> 29) + (~(2 * (v3 >> 29)) | 0xA7) + 45;
    LOBYTE(STACK[0x290]) = ((v6 >> 21) ^ 0x10) + (~(v6 >> 20) | 0xA7) + 45;
    LOBYTE(STACK[0x291]) = ((v6 >> 13) ^ 0x12) - ((v6 >> 12) & 0x58) + 44;
    LOBYTE(STACK[0x292]) = ((v6 >> 5) ^ 0xBD) - 2 * (((v6 >> 5) ^ 0xBD) & 0x2E ^ (v6 >> 5) & 2) + 44;
    LOBYTE(v6) = (8 * v6) ^ 0x58;
    char v5 = v6 + 44;
    LOBYTE(v6) = (2 * v6) & 0x50;
  }

  LOBYTE(STACK[0x293]) = v5 - v6;
LABEL_6:
  JUMPOUT(0x1001B6808LL);
}

uint64_t sub_1001B8200( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
  if (a32 == 2) {
    return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v37
  }
                                                                 + 8LL
                                                                 * (((LODWORD(STACK[0x2B0]) != 2113300787)
                                                                   * ((v38 ^ 0xB5) - 117)) ^ (v38 + 77)))
                                                     - 8LL))( a1,  a15);
  if (a32 == 1) {
    return ((uint64_t (*)(uint64_t))(*(void *)(v37
  }
                                                        + 8LL
                                                        * (((LODWORD(STACK[0x2B0]) != 2113300787) * ((v38 ^ 0xB5) + 583)) ^ (v38 + 77)))
                                            - 8LL))(a15);
  unint64_t v40 = ((unint64_t)&a37 ^ 0x65FFEFEFF72EFF7DLL)
      - 0x40A404C4D326A97DLL
      + (((void)&a37 << ((v38 - 8) ^ 0x2Du)) & 0xCBFFDFDFEE5DFEF0LL);
  LOBYTE(STACK[0x2AF]) = (v40 ^ (((v38 - 8) ^ 0x18) - 122)) * (v40 + 17);
  return ((uint64_t (*)(uint64_t))(*(void *)(v37 + 8LL * (v38 + 504)) - 8LL))(a15);
}

void sub_1001B853C()
{
}

uint64_t sub_1001B8544@<X0>(int a1@<W8>)
{
  uint64_t v3 = *(void *)(v8 + 16);
  uint64_t v4 = *(void *)(v8 + 40);
  char v5 = (void *)(v1 - 184);
  memset((void *)(v1 - 184), 44, 16);
  int v6 = 235795823 * (((v1 - 168) & 0xEF9CDC89 | ~((v1 - 168) | 0xEF9CDC89)) ^ 0x84CE6A2F);
  v5[7] = v1 + 0x1F962A9297594D31LL;
  *(_DWORD *)(v1 - 13sub_100129678(v0 + 2) = (a1 + 1662) ^ v6;
  *(_DWORD *)(v1 - 160) = v6 + 100576593;
  v5[2] = v3;
  v5[4] = &v9;
  v5[5] = v4;
  uint64_t result = ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * (a1 - 43)) - 4LL))(v1 - 168);
  *(_DWORD *)(v8 + 1sub_100129678(v0 + 2) = *(_DWORD *)(v1 - 136);
  return result;
}

void sub_1001B863C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

uint64_t sub_1001B869C()
{
  return 4294925278LL;
}

void sub_1001B8844(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) - 1225351577 * ((-2 - ((a1 | 0x64CFEAB8) + (~(_DWORD)a1 | 0x9B301547))) ^ 0xB8AACD51);
  __asm { BR              X13 }

uint64_t sub_1001B89C4@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, char a26, uint64_t a27, char a28, uint64_t a29, char a30, uint64_t a31, char a32, uint64_t a33, char a34, uint64_t a35, char a36)
{
  int8x16_t v56 = &a26 + v36;
  uint16x8_t v55 = &a20 + v36;
  uint8x16_t v54 = &a36 + v36;
  uint64_t v53 = &a32 + v36;
  int v52 = &a28 + v36;
  unsigned int v51 = &a34 + v36;
  uint64_t v42 = &a30 + v36;
  uint64_t v43 = *a1;
  uint64_t v44 = *(void *)(*a1 - 0x19A1466F6B33264LL);
  uint64_t v45 = a1[5];
  uint16x8_t v57 = &a24 + v36;
  uint64_t v58 = v38;
  uint64_t v59 = a1[4];
  *(void *)(v41 - 144) = *a1;
  *(void *)(v41 - 136) = a2;
  *(_DWORD *)(v41 - 11sub_100129678(v0 + 2) = v40
                         + 357
                         + 1224239923
                         * ((2 * (((v41 - 144) ^ 0xA8FDC33E) & 0x7EE300AA) - ((v41 - 144) ^ 0xA8FDC33E) + 18677589) ^ 0x5B52C1BC);
  *(void *)(v41 - 104) = v44;
  *(void *)(v41 - 128) = &a24 + v36;
  *(void *)(v41 - 120) = v45;
  uint64_t v46 = &a24 + v36;
  int v47 = *(void (**)(uint64_t))(v37 + 8LL * (v40 - 267));
  v47(v41 - 144);
  *(void *)(v41 - 120) = v46;
  *(void *)(v41 - 11sub_100129678(v0 + 2) = v43;
  *(_DWORD *)(v41 - 144) = (v40 + 322) ^ (1225351577
                                        * ((((v41 - 144) | 0x5239BC64) - ((v41 - 144) & 0x5239BC64)) ^ 0x71A36472));
  *(void *)(v41 - 136) = v45;
  *(void *)(v41 - 128) = v42;
  ((void (*)(uint64_t))((char *)*(&off_10027AEF0 + (v40 ^ 0x1EE)) - 4))(v41 - 144);
  *(_DWORD *)(v41 - 11sub_100129678(v0 + 2) = v40
                         + 357
                         + 1224239923
                         * ((((v41 - 144) | 0x595B079F) - (v41 - 144) + ((v41 - 144) & 0xA6A4F860)) ^ 0xABE8FA48);
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  *(void *)(v41 - 128) = v56;
  *(void *)(v41 - 120) = v45;
  *(void *)(v41 - 104) = v57;
  v47(v41 - 144);
  *(void *)(v41 - 104) = v56;
  *(void *)(v41 - 128) = v55;
  *(void *)(v41 - 120) = v45;
  *(_DWORD *)(v41 - 11sub_100129678(v0 + 2) = v40
                         + 357
                         + 1224239923 * (((v41 - 144) & 0x3BB37F04 | ~((v41 - 144) | 0x3BB37F04)) ^ 0x36FF7D2C);
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  v47(v41 - 144);
  *(void *)(v41 - 104) = v55;
  *(_DWORD *)(v41 - 11sub_100129678(v0 + 2) = v40
                         + 357
                         + 1224239923
                         * ((((v41 - 144) ^ 0x37A6533F) - 153833405 - 2 * (((v41 - 144) ^ 0x37A6533F) & 0xF6D4B043)) ^ 0x33C11EAB);
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  *(void *)(v41 - 128) = v54;
  *(void *)(v41 - 120) = v45;
  v47(v41 - 144);
  *(void *)(v41 - 104) = v54;
  *(_DWORD *)(v41 - 11sub_100129678(v0 + 2) = v40 + 357 + 1224239923 * ((v41 - 144) ^ 0xF2B3FDD7);
  *(void *)(v41 - 128) = v53;
  *(void *)(v41 - 120) = v45;
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  v47(v41 - 144);
  *(void *)(v41 - 128) = v52;
  *(void *)(v41 - 120) = v45;
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  *(_DWORD *)(v41 - 11sub_100129678(v0 + 2) = v40
                         + 357
                         + 1224239923
                         * (((((v41 - 144) | 0x64E59E14) ^ 0xFFFFFFFE) - (~(v41 - 144) | 0x9B1A61EB)) ^ 0x69A99C3C);
  *(void *)(v41 - 104) = v53;
  v47(v41 - 144);
  *(_DWORD *)(v41 - 11sub_100129678(v0 + 2) = v40
                         + 357
                         + 1224239923 * ((((v41 - 144) | 0x86AC62B3) + (~(v41 - 144) | 0x79539D4C)) ^ 0x741F9F65);
  *(void *)(v41 - 128) = v51;
  *(void *)(v41 - 120) = v45;
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  *(void *)(v41 - 104) = v52;
  v47(v41 - 144);
  *(void *)(v41 - 104) = v51;
  *(_DWORD *)(v41 - 11sub_100129678(v0 + 2) = v40
                         + 357
                         + 1224239923 * ((((v41 - 144) | 0xBB11C9DF) + (~(v41 - 144) | 0x44EE3620)) ^ 0x49A23409);
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 136) = v42;
  *(void *)(v41 - 128) = v42;
  *(void *)(v41 - 120) = v45;
  v47(v41 - 144);
  uint64_t v48 = *(void *)(v43 - 0x19A1466F6B3326CLL);
  *(_DWORD *)(v41 - 128) = v40
                         + 1374699841
                         * ((1834202156
                           - ((v41 - 144) ^ 0xF8ADEB70 | 0x6D53B42C)
                           + ((v41 - 144) ^ 0xF8ADEB70 | 0x92AC4BD3)) ^ 0x7F5B8AA)
                         + 76;
  *(void *)(v41 - 144) = v48;
  *(void *)(v41 - 136) = v58;
  sub_1001A2B9C(v41 - 144);
  *(void *)(v41 - 136) = v59;
  *(_DWORD *)(v41 - 144) = v40 + 235795823 * ((v41 - 144) ^ 0x94AD4959) + 354;
  uint64_t v49 = sub_10018D09C(v41 - 144);
  return (*(uint64_t (**)(uint64_t))(v39
                                            + 8LL
                                            * ((862
                                              * (((v40 + 864960363) & 0xCC71BFED)
                                               + *(_DWORD *)(v41 - 140)
                                               - 49961326
                                               - 190 >= ((v40 - 387928426) & 0x171F56FEu) + 2147481859)) ^ v40)))(v49);
}

uint64_t sub_1001B8EC8()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
}

uint64_t sub_1001B8F14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void (*a23)(uint64_t), uint64_t a24)
{
  *(_DWORD *)(v30 - 144) = (v26 + 489) ^ (1225351577
                                        * (((((v30 - 144) | 0xBD376AEC) ^ 0xFFFFFFFE) - (~(v30 - 144) | 0x42C89513)) ^ 0x61524D05));
  *(void *)(v30 - 136) = v28;
  *(void *)(v30 - 128) = v25;
  *(void *)(v30 - 120) = v25;
  *(void *)(v30 - 11sub_100129678(v0 + 2) = v29;
  a23(v30 - 144);
  int v31 = 1374699841 * ((((v30 - 144) | 0xFFB46DA3) + (~(v30 - 144) | 0x4B925C)) ^ 0x924075AB);
  *(_DWORD *)(v30 - 128) = -49961326 - v31 + v24 + 2;
  *(_DWORD *)(v30 - 144) = (v26 + 15) ^ v31;
  *(void *)(v30 - 136) = a24;
  uint64_t v32 = sub_10018E63C(v30 - 144);
  return (*(uint64_t (**)(uint64_t))(v27
                                            + 8LL
                                            * ((1615 * (*(_DWORD *)(v30 - 140) != ((277 * (v26 ^ 0xC3)) ^ 0x4FDBF5EF))) ^ v26)))(v32);
}

uint64_t sub_1001B9024()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
}

uint64_t sub_1001B9068()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((81 * (v2 + v4 < ((((v0 + 740083811) & 0xD3E337D9) - 153) ^ (v1 + 958)))) ^ v0))
                            - 4LL))();
}

uint64_t sub_1001B90B0()
{
  *(void *)(v3 - 136) = v2;
  *(_DWORD *)(v3 - 128) = -1374699841
                        * ((((v3 - 144) | 0x951DA954) - (v3 - 144) + ((v3 - 144) & 0x6AE256A8)) ^ 0xF8E9B15D);
  *(_DWORD *)(v3 - 144) = (v0 - 624) ^ (1374699841
                                      * ((((v3 - 144) | 0x951DA954) - (v3 - 144) + ((v3 - 144) & 0x6AE256A8)) ^ 0xF8E9B15D));
  uint64_t v4 = sub_10018E63C(v3 - 144);
  BOOL v5 = *(_DWORD *)(v3 - 140) == v0 + 1339814801;
}

uint64_t sub_1001B920C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  int v29 = (v25 + 136) | 4;
  int v30 = 1374699841 * ((v28 + 1172267476 - 2 * ((v28 - 144) & 0x45DF6264)) ^ 0x282B7A6D);
  *(void *)(v28 - 136) = a24;
  *(_DWORD *)(v28 - 128) = (v29 ^ (v27 - 923)) + v24 - v30;
  *(_DWORD *)(v28 - 144) = (v29 - 917) ^ v30;
  uint64_t v31 = sub_10018E63C(v28 - 144);
  return (*(uint64_t (**)(uint64_t))(v26 + 8LL * ((30 * (*(_DWORD *)(v28 - 140) != 1339815632)) ^ v29)))(v31);
}

uint64_t sub_1001B9320( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t (*a21)(uint64_t), uint64_t a22, void (*a23)(uint64_t), uint64_t a24, uint64_t a25)
{
  int v32 = v26 ^ 0x4A4;
  *(void *)(v31 - 120) = v27;
  *(void *)(v31 - 11sub_100129678(v0 + 2) = a25;
  *(void *)(v31 - 136) = v29;
  *(void *)(v31 - 128) = v27;
  *(_DWORD *)(v31 - 144) = (v32 + 489) ^ (1225351577
                                        * ((2 * ((v31 - 144) & 0x3AF06C48) - (v31 - 144) - 988834896) ^ 0xE6954BA6));
  a23(v31 - 144);
  *(void *)(v31 - 128) = v27;
  *(void *)(v31 - 120) = v29;
  *(void *)(v31 - 104) = v27;
  *(_DWORD *)(v31 - 11sub_100129678(v0 + 2) = v32
                         + 1224239923
                         * ((((2 * ((v31 - 144) ^ 0xEBD82A09)) | 0xFC0EC0A8) - ((v31 - 144) ^ 0xEBD82A09) - 2114412628) ^ 0x676CB78A)
                         + 524;
  *(void *)(v31 - 144) = a25;
  *(void *)(v31 - 136) = a15;
  uint64_t v33 = a21(v31 - 144);
  return (*(uint64_t (**)(uint64_t))(v28
                                            + 8LL
}

uint64_t sub_1001B9B14()
{
  int v5 = 1224239923 * ((2 * ((v4 - 144) & 0x4145D028) - (v4 - 144) - 1095094320) ^ 0x4C09D207);
  *(_DWORD *)(v4 - 144) = v5 ^ 0x5098936A;
  *(void *)(v4 - 136) = v8;
  *(_DWORD *)(v4 - 128) = v5 + v0 - 1401;
  sub_10018D9BC((_DWORD *)(v4 - 144));
  *(void *)(v4 - 144) = v3;
  *(void *)(v4 - 136) = v8;
  *(void *)(v4 - 104) = v1;
  *(void *)(v4 - 128) = v1;
  *(void *)(v4 - 120) = v2;
  *(_DWORD *)(v4 - 11sub_100129678(v0 + 2) = v0 + 1224239923 * (((v4 - 144) & 0x73F71CDE | ~((v4 - 144) | 0x73F71CDE)) ^ 0x7EBB1EF6) - 1072;
  v9(v4 - 144);
  *(void *)(v4 - 144) = v1;
  *(void *)(v4 - 136) = v7;
  *(_DWORD *)(v4 - 128) = v0
                        - 957
                        + 1374699841 * ((2 * ((v4 - 144) & 0x37738180) - (v4 - 144) - 930316676) ^ 0xA5786675)
                        - 396;
  return sub_1001A2B9C(v4 - 144);
}

void sub_1001B9C6C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 1178560073 * (a1 ^ 0xBA947862);
  __asm { BR              X11 }

uint64_t sub_1001B9D28()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * (int)((((73 * (v0 ^ 0x120) + 874) ^ ((v0 ^ 0x460) + 926832539) & 0xC8C1A7A7) * (v1 != 0)) ^ v0 ^ 0x460)))();
}

uint64_t sub_1001B9D84()
{
  BOOL v6 = (*(_DWORD *)(v2 + 16) ^ v0) - 1329061381 > 0xFFFFFFBE
    || (*(_DWORD *)(v3 - 0x27E11828102FB975LL) & (v1 - 1158)) == 15 * (v1 ^ 0x482) - 75;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((99 * v6) ^ v1)) - 8LL))();
}

uint64_t sub_1001B9E04@<X0>( uint64_t (*a1)(unsigned int *)@<X8>, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v12 = v8 - 1084;
  int v13 = v8 - 867;
  unsigned int v14 = 3804331
      * (((&a3 | 0x6A071CCA) - &a3 + (&a3 & 0x95F8E330)) ^ 0x14D2393C);
  a7 = v14 - 1468329462;
  a5 = v7;
  a6 = v9;
  a3 = v11 + v14 + ((2 * v12) ^ 0xC19F770D);
  a4 = v14 + v12 + 357;
  uint64_t v15 = a1(&a3);
  return (*(uint64_t (**)(uint64_t))(v10
                                            + 8LL
                                            * ((352 * (*(_DWORD *)(v9 - 0x27E11828102FB971LL) == v13 + 2084228827)) ^ v12)))(v15);
}

uint64_t sub_1001B9EC4()
{
  int v3 = v1
     - (((v1 << ((73 * (v2 ^ 0x92)) ^ 0x25)) + 1636844664) & ((((v2 ^ 0xB8) + 82) | 0x308) ^ 0x69A1F4C8))
     - 442950180;
  return (*(uint64_t (**)(void))(v0
                              + 8LL
                              * ((101
                                * (((2 * v3) & 0xDFDFCDFE ^ 0x4981C540) + (v3 ^ 0xDB3F1D5F) + 1069416411 == 799925978)) ^ v2 ^ 0xB8)))();
}

uint64_t sub_1001B9F78()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((1224
}

uint64_t sub_1001B9FF0(uint64_t a1, int a2)
{
}

uint64_t sub_1001BA020(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * ((2 * ((((a3 - 86065026) ^ (v3 < a3 - 1368)) & 1) == 0)) & 0xFB | (4
                                                                                                 * (((a3 + 126) ^ ~(v3 < a3 - 1368)) & 1)) | a3)))();
}

uint64_t sub_1001BA064()
{
  unsigned int v8 = v3 + v2 + (v5 & 0x5213B2D) + v4;
  v9.i64[0] = 0x5858585858585858LL;
  v9.i64[1] = 0x5858585858585858LL;
  v10.i64[0] = 0x2D2D2D2D2D2D2D2DLL;
  v10.i64[1] = 0x2D2D2D2D2D2D2D2DLL;
  uint64_t v11 = v6 + v8;
  int8x16_t v12 = vrev64q_s8(*(int8x16_t *)(v11 - 15));
  int8x16_t v13 = vextq_s8(v12, v12, 8uLL);
  int8x16_t v14 = vrev64q_s8(*(int8x16_t *)(v11 - 31));
  int8x16_t v15 = vextq_s8(v14, v14, 8uLL);
  uint64_t v16 = v0 + v8;
  int8x16_t v17 = vrev64q_s8(vaddq_s8(vaddq_s8(v13, v10), vmvnq_s8(vandq_s8(vaddq_s8(v13, v13), v9))));
  *(int8x16_t *)(v16 - 15) = vextq_s8(v17, v17, 8uLL);
  int8x16_t v18 = vrev64q_s8(vaddq_s8(vaddq_s8(v15, v10), vmvnq_s8(vandq_s8(vaddq_s8(v15, v15), v9))));
  *(int8x16_t *)(v16 - 31) = vextq_s8(v18, v18, 8uLL);
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
}

void sub_1001BA110()
{
}

void sub_1001BA11C()
{
  *uint64_t v0 = -2084203482;
}

void sub_1001BA5D0(unint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 44) - 1755732067 * (((a1 | 0xCC66703E) - (a1 | 0x33998FC1) + 865701825) ^ 0x12A0CDE5);
  unsigned int v30 = *(_DWORD *)(a1 + 16) + 1755732067 * (((a1 | 0xCC66703E) - (a1 | 0x33998FC1) + 865701825) ^ 0x12A0CDE5);
  unsigned int v3 = 1178560073 * (&v39 ^ 0xBA947862);
  int v4 = *(_DWORD *)(a1 + 36);
  unint64_t v22 = 1755732067
      * (((a1 | 0xDEEEE61CC66703ELL) - (a1 | 0xF211119E33998FC1LL) - 0xDEEEE61CC66703FLL) ^ 0xD045495E12A0CDE5LL);
  int v5 = v4 + 1755732067 * (((a1 | 0xCC66703E) - (a1 | 0x33998FC1) + 865701825) ^ 0x12A0CDE5);
  int v41 = v2 - v3 - 1882357543;
  unsigned int v39 = 1091580572 - v3;
  uint64_t v27 = &STACK[0x8FD385F8C7F9A19];
  int v40 = &STACK[0x8FD385F8C7F9A19];
  sub_1001AC7F8((uint64_t)&v39);
  unsigned int v6 = v30;
  unsigned int v7 = v2;
  unsigned int v8 = (void *)a1;
  int8x16_t v9 = (char *)*(&off_10027AEF0 + (int)(v2 ^ 0x3F)) - 8;
  unsigned int v10 = v2 + 787;
  unint64_t v28 = *(void *)&v9[8 * v2] + ((v2 + 787) ^ 0xFFFFFFFFFFFFFC96LL);
  int v21 = v5 + 720768139;
  int v20 = -1969781505;
  int v19 = v5 - 1553812726;
  int v15 = v5 - 1945963912;
  int v14 = v5 - 1501265201;
  void v12[2] = (char *)&v12[-218196510] + 4;
  v12[1] = &v37 - 740;
  uint64_t v11 = 13 * (v2 ^ 0xDA);
  int v16 = v11;
  int v18 = v11 ^ 0x32F;
  v2 ^= 0x412u;
  int v32 = v2 ^ 0x46F;
  int v31 = v2 ^ 0x48D;
  int v13 = v7 ^ 0x42;
  uint64_t v17 = v11;
  int v23 = v8;
  unsigned int v29 = v7;
  int32x4_t v24 = vdupq_n_s32(0x7C3ACFFFu);
  int32x4_t v25 = vdupq_n_s32(0xF8759FFE);
  uint64_t v26 = *v8;
  LODWORD(v11) = v6 - 432844524 + (~((v6 << (v10 ^ 0x63)) + 796996624) | 0x631A91E9);
  char v33 = (BYTE3(v11) ^ 0x4E) - 2 * ((BYTE3(v11) ^ 0x4E) & 0x2D ^ BYTE3(v11) & 1) + 44;
  char v34 = (BYTE2(v11) ^ 0x72) - ((2 * (BYTE2(v11) ^ 0x72)) & 0x58) + 44;
  char v35 = (BYTE1(v11) ^ 0xB7) - ((2 * (BYTE1(v11) ^ 0xB7)) & 0x58) + 44;
  char v36 = (v6 + 20 + (~(((_BYTE)v6 << (v10 ^ 0x63)) + 16) | 0xE9)) ^ 0x27;
  __asm { BR              X13 }

uint64_t sub_1001BA9C0@<X0>(int a1@<W2>, uint64_t a2@<X4>, uint64_t a3@<X6>, int a4@<W8>)
{
  int v9 = (a4 ^ 0x68F) - 1178;
  *(_BYTE *)(a2 + (v9 ^ 0x801168u) + v6) = v5;
  *(_BYTE *)(a2 + (v7 + v4 + 77)) = *(_BYTE *)(a3
                                                           + ((((v9 - 1676278740) & 0x63E9FACF) + 4294967216LL) & 0x100000001LL));
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((1565 * ((a1 + 353013566) < 4)) ^ v9)) - 12LL))();
}

uint64_t sub_1001BBB2C@<X0>(uint64_t a1@<X4>, uint64_t a2@<X6>, int a3@<W8>)
{
  *(_BYTE *)(a1 + (v5 + 78)) = *(_BYTE *)(a2 + (v4 - 353013621));
  BOOL v7 = (((a3 + 257326348) & 0xF0A981EF ^ 0xFFFFFFB3) & v3) == 353013620;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * (((4 * v7) | (8 * v7)) ^ a3)) - 12LL))();
}

uint64_t sub_1001BBB98@<X0>( uint64_t a1@<X4>, uint64_t a2@<X6>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t (*a23)(uint64_t))
{
  int v27 = a3 - 260;
  *(_BYTE *)(a1 + (v23 + v25 + v27)) = *(_BYTE *)(a2 + (v24 - 353013620));
  int v28 = 628203409 * ((((v26 - 168) | 0x76F58F42) - (v26 - 168) + ((v26 - 168) & 0x890A70B8)) ^ 0xF47D8371);
  *(void *)(v26 - 168) = a22;
  *(_DWORD *)(v26 - 160) = v28 + v27 + 574;
  *(_DWORD *)(v26 - 156) = 103152455 - v28;
  uint64_t v29 = sub_1001A2A8C(v26 - 168);
  return a23(v29);
}

uint64_t sub_1001BBC28@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7)
{
  BOOL v9 = a7 < 0xEBA46AEC;
  if (v9 == a1 - 443844632 < ((v7 + 1389342787) & 0xAD304BFF) - 341546351) {
    BOOL v9 = a1 - 443844632 < a7;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((35 * !v9) ^ v7)) - 4LL))();
}

uint64_t sub_1001BBCA8@<X0>( unsigned int a1@<W0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W8>)
{
  BOOL v14 = a1 < v10;
  *(_BYTE *)(a5 + (v8 + a4)) = *(_BYTE *)(a7 + (a8 + v11))
  unsigned int v15 = a8 + 1 + v12;
  int v16 = v14 ^ (v15 < v10);
  BOOL v17 = v15 < a1;
  if (!v16) {
    BOOL v14 = v17;
  }
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * ((!v14 * a2) | v9)) - 4LL))();
}

uint64_t sub_1001BBD18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, unsigned int a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, int a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
  uint64_t v58 = (a8 - 1656376668) & 0x62BA4F29;
  uint64_t v52 = (a8 - 27) | 0xFu;
  int v53 = 628203409 * ((((v51 - 168) | 0x6CCBA224) - ((v51 - 168) & 0x6CCBA224)) ^ 0xEE43AE17);
  *(void *)(v51 - 168) = a27;
  *(_DWORD *)(v51 - 160) = v53 + a8 + 562;
  *(_DWORD *)(v51 - 156) = a13 - v53;
  uint64_t v54 = sub_1001A2A8C(v51 - 168);
  uint64_t v55 = a50 & 0x3F;
  *(&a41 + (v55 ^ 0x2B)) = -84;
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v50
                                                                                + 8LL
                                                                                * ((274
                                                                                  * ((v55 ^ 0x2B) > 0x37)) ^ a8))
                                                                    - ((v52 + 478) ^ v58)))( v54,  a30,  3941953732LL,  72LL);
}

uint64_t sub_1001BBE24@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (((((v1 + 607) | 0x30) - 904) * (a1 == 63)) ^ v1)))(42LL);
}

uint64_t sub_1001BBE5C()
{
  int v3 = ((((v1 - 1576807513) & 0x5DFC27EF) - 59) ^ v0) >= ((v1 + 1389584563) & 0xAD2C9FFD ^ 0x561);
  return (*(uint64_t (**)(void))(v2 + 8LL * (((8 * v3) | (v3 << 6)) ^ v1)))();
}

uint64_t sub_1001BBEC4@<X0>(unsigned int a1@<W8>, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + (v4 - 644) + (unint64_t)a1) = v6;
  return (*(uint64_t (**)(void))(v5 + 8LL * ((638 * ((v3 & 0x38) == 8LL)) ^ v4)))();
}

uint64_t sub_1001BBF00@<X0>(void *a1@<X8>)
{
  *a1 = v5;
  return (*(uint64_t (**)(void))(v4 + 8LL * (((v2 == 0) * v3) ^ v1)))();
}

uint64_t sub_1001BBF20()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((((v2 == v0) ^ (v1 + 118)) & 1 | (16
}

uint64_t sub_1001BBF5C(int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  *(_BYTE *)(v5 + v8 + a5 - 1) = v7;
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
}

void sub_1001BBF98()
{
}

uint64_t sub_1001BBFB4()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL * ((14 * (v0 - 1745572328 < ((v2 - 64409680) & 0x3D6D6BF ^ 0x687u))) ^ (v2 + 758))))();
}

uint64_t sub_1001BC018()
{
  uint64_t v4 = v0;
  unint64_t v5 = v0 + v2;
  if (v5 <= 0x38) {
    unint64_t v5 = 56LL;
  }
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((((v1 - 98) ^ 0x624) * (v5 - v4 + 1745572328 < 8)) ^ v1)) - 12LL))();
}

uint64_t sub_1001BC070@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + v5) = v9;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((((v4 & 0xFFFFFFFFFFFFFFF8LL) == 8) * v7) ^ a1))
                            - 31 * (a1 ^ v6)
                            + 833LL))();
}

void sub_1001BC0B4()
{
}

uint64_t sub_1001BC0BC()
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
}

uint64_t sub_1001BC108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_BYTE *)(v6 + v8 + a5 - 1) = v7;
  return (*(uint64_t (**)(void))(v9
                              + 8LL
                              * (((4 * ((unint64_t)(v6 + v8) < 0x38)) | (((unint64_t)(v6 + v8) < 0x38) << 10)) ^ (v5 + 758))))();
}

void sub_1001BC138()
{
}

uint64_t sub_1001BC378( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, int a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,int a56)
{
  if (a31 == 2) {
    return (*(uint64_t (**)(void))(v56 + 8LL * ((2011 * (a56 != ((a2 + 944) ^ 0x7DF66ACC))) ^ (a2 + 944))))();
  }
  if (a31 == 1) {
    return (*(uint64_t (**)(uint64_t))(v56 + 8LL * ((1635 * (a56 != 2113300787)) ^ (a2 + 944))))(a14);
  }
  uint64_t v58 = (a2 - 79) | 0x3C2u;
  unint64_t v59 = ((v58 + 0x77D6F9B5FF792A3BLL) ^ (unint64_t)&a35)
      + ((2LL * (void)&a35) & 0xEFADF36BFEF25BF0LL)
      - 0x2244101001081FFDLL;
  a55 = ((9 * (((a2 - 79) | 0xC2) ^ 0xC7) - 115) ^ v59) * (v59 + 17);
  return ((uint64_t (*)(uint64_t))(*(void *)(v56 + 8LL * (int)v58) - 8LL))(a14);
}

void sub_1001BC6BC()
{
}

uint64_t sub_1001BC6C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, __int128 a38)
{
  uint64_t v43 = *(void *)(a20 + 24);
  memset((char *)&a38 + 4, 44, sizeof(__int128));
  int v44 = 235795823 * ((2 * ((v41 - 168) & 0x1ABDAF30) - (v41 - 168) + 1698844877) ^ 0xF1EF1994);
  *(void *)(v41 - 128) = &STACK[0x1F962A9297594ED5];
  *(_DWORD *)(v41 - 13sub_100129678(v0 + 2) = (v40 + 1669) ^ v44;
  *(void *)(v41 - 15sub_100129678(v0 + 2) = &a36;
  *(void *)(v41 - 144) = v43;
  *(void *)(v41 - 168) = v41 - 184;
  *(_DWORD *)(v41 - 160) = v44 + 100576593;
  uint64_t v45 = ((uint64_t (*)(uint64_t))(*(void *)(v42 + 8LL * (int)(v40 - 36)) - 4LL))(v41 - 168);
  return ((uint64_t (*)(uint64_t))(*(void *)(v38
                                                      + 8LL
}

uint64_t sub_1001BC7DC()
{
  uint64_t v7 = v0 + 1;
  BOOL v9 = (((v4 - 1492) | 0x42) ^ 0x77DBF7A0 ^ v6) - 1455428195 + ((2 * v6) & 0xEFB7EFDE) == 555476364 && v7 != v3 + 16;
  return (*(uint64_t (**)(void))(v2 + 8LL * ((11 * v9) ^ v4)))();
}

uint64_t sub_1001BC868@<X0>(int a1@<W8>)
{
  unint64_t v5 = ((((v4 - 168) | 0x6FA34C23DE3CBB8CLL) - ((v4 - 168) | 0x905CB3DC21C34473LL) - 0x6FA34C23DE3CBB8DLL) ^ 0x6713F6DD4A91F2D5LL)
     * v2;
  *(void *)(v4 - 136) = v5 + 555476364;
  *(_DWORD *)(v4 - 128) = ((((v4 - 168) | 0xDE3CBB8C) - ((v4 - 168) | 0x21C34473) + 566445171) ^ 0x4A91F2D5) * v2
                        + a1
                        - 269611775
                        - 61;
  *(void *)(v4 - 160) = v1 - v5;
  *(_DWORD *)(v4 - 15sub_100129678(v0 + 2) = (a1 - 269611775) ^ (((((v4 - 168) | 0xDE3CBB8C) - ((v4 - 168) | 0x21C34473) + 566445171) ^ 0x4A91F2D5)
                                            * v2);
  *(_DWORD *)(v4 - 148) = ((((v4 - 168) | 0xDE3CBB8C) - ((v4 - 168) | 0x21C34473) + 566445171) ^ 0x4A91F2D5) * v2;
  *(_DWORD *)(v4 - 144) = a1
                        - ((((v4 - 168) | 0xDE3CBB8C) - ((v4 - 168) | 0x21C34473) + 566445171) ^ 0x4A91F2D5) * v2
                        + 2104632311;
  *(_DWORD *)(v4 - 168) = ((a1 - 269611775) | 0x2D) ^ (((((v4 - 168) | 0xDE3CBB8C)
                                                       - ((v4 - 168) | 0x21C34473)
                                                       + 566445171) ^ 0x4A91F2D5)
                                                     * v2);
  uint64_t v6 = ((uint64_t (*)(uint64_t))((char *)*(&off_10027AEF0 + a1 + 66) - 8))(v4 - 168);
  return ((uint64_t (*)(uint64_t))(*(void *)(v3 + 8LL * *(int *)(v4 - 124)) - 12LL))(v6);
}

void sub_1001BC948()
{
  *(_DWORD *)(v0 + 3sub_100129678(v0 + 2) = 2084229119;
}

void sub_1001BC994(uint64_t a1)
{
  int v1 = 1225351577 * (((a1 | 0xD0007703) - a1 + (a1 & 0x2FFF88FC)) ^ 0xF39AAF15);
  __asm { BR              X11 }

uint64_t sub_1001BCA48@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((957 * (*v1 != (((a1 + 295) | 0x48) ^ 0x1CF))) ^ a1)) - 8LL))();
}

uint64_t sub_1001BCA94@<X0>(int a1@<W8>)
{
  int v5 = (a1 - 18) | 0x181;
  uint64_t v6 = v3(*v4);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * ((61 * (*v1 != 0)) ^ v5)) - 4LL))(v6);
}

uint64_t sub_1001BCACC()
{
  uint64_t result = v2(*v3);
  _DWORD *v1 = 0;
  *(_DWORD *)uint64_t v0 = 0;
  *(void *)(v0 + 344) = 0LL;
  *(void *)(v0 + 35sub_100129678(v0 + 2) = 0LL;
  *(_DWORD *)(v0 + 360) = 1662039773;
  *(_DWORD *)(v0 + 56) = 1372200252;
  return result;
}

uint64_t sub_1001BCB0C()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((61 * (*v1 != 0)) ^ v0)) - 4LL))();
}

void sub_1001BCB30(uint64_t a1)
{
  int v1 = 1759421093 * (((a1 | 0x9EBEB665) - a1 + (a1 & 0x6141499A)) ^ 0x2DC30631);
  __asm { BR              X14 }

uint64_t sub_1001BCBE8@<X0>(uint64_t a1@<X8>)
{
  unsigned int v5 = 1755732067 * ((((2 * v7) | 0x8125F018) - v7 + 1064110068) ^ 0x1E5445D7);
  uint64_t v8 = v1;
  v7[0] = (1030116817 - v2 - (((v3 ^ 0x556) - v4 + 604134538) & 0x56CA4A2C)) ^ v5;
  v7[1] = (v3 + 359) ^ v5;
  return ((uint64_t (*)(_DWORD *))(*(void *)(a1 + 8LL * (v3 - 367)) - 12LL))(v7);
}

void sub_1001BCD54(uint64_t a1, uint64_t a2)
{
  __asm { BR              X8 }

uint64_t sub_1001BCDE0(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((865 * (**(_BYTE **)(a2 + 8) == 0)) ^ 0xD4u)) - 4LL))();
}

uint64_t sub_1001BCE28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  *(void *)(*(void *)(a17 + 96) + 504LL) = v19 + 1;
  *(_DWORD *)(*(void *)(a17 + 96) + 496LL) = a19 - 1;
  int v23 = 1178560073 * ((v22 - 1120536645 - 2 * ((v22 - 152) & 0xBD35F853)) ^ 0x7A18031);
  *(void *)(v22 - 144) = v22 + 0x8FD385F8C7F9821LL;
  *(_DWORD *)(v22 - 136) = v20 - v23 - 1882357664;
  int v24 = (v20 + 348) | 0x400;
  *(_DWORD *)(v22 - 15sub_100129678(v0 + 2) = 1091580572 - v23;
  int v25 = v20 + 535;
  int v29 = v20;
  uint64_t v26 = sub_1001AC7F8(v22 - 152);
  BOOL v27 = a19
      - 2120448428
      + (v24 ^ 0x672 ^ (v25 ^ 0x2A9) & (2 * *(_DWORD *)(v22 - 184)))
      + (*(_DWORD *)(v22 - 184) & 0x3F ^ 0x5FEFFFD0u) < 0xFFFFFFC0;
  return (*(uint64_t (**)(uint64_t))(v21 + 8LL * (((8 * v27) | (16 * v27)) ^ v29)))(v26);
}

uint64_t sub_1001BD018( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17 = (a4 + 704901120) & 0xD5FC0FEE;
  unsigned int v18 = v13 + v17 - 1609564872;
  if (v18 <= 0x40) {
    unsigned int v18 = 64;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 + 8LL * ((1860 * ((_DWORD)a7 - v14 - v15 + v18 > 0xE)) ^ a4)) - 4LL))( v17,  2685402424LL,  64LL,  4221429509LL,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13);
}

uint64_t sub_1001BD0A4(int a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v12 = v8 + v7;
  unsigned int v13 = a2 + v12 + 718;
  if (v13 <= 0x40) {
    unsigned int v13 = a3;
  }
  BOOL v14 = a7 - v12 < v10 + v9 + ((a1 + 876) ^ (a7 - 358) ^ (4 * a1) ^ 0xC6C) + v13;
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * (v14 | (16 * v14) | a1)) - 4LL))();
}

uint64_t sub_1001BD0FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return ((uint64_t (*)(void))(*(void *)(v21
                                        + 8LL
                                        * ((((((v20 + 1474202282) ^ (~a19
                                                                   + v22
                                                                   - 252
                                                                   + (unint64_t)(v19 + 717) < 0x10)) & 1) == 0)
                                          * ((v20 - 282) ^ 0x639)) | v20))
                            - 12LL))();
}

uint64_t sub_1001BD154@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, int a7@<W8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v19.i64[0] = 0x5858585858585858LL;
  v19.i64[1] = 0x5858585858585858LL;
  v20.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v20.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  *(int8x16_t *)(v14 + (a7 + v1sub_10012CBAC((uint64_t)(v0 + 2)) = vaddq_s8(vsubq_s8(*v17, vandq_s8(vaddq_s8(*v17, *v17), v19)), v20);
  uint64_t v21 = (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 8LL * (int)((((((v13 + v15 - 1593) & 0x1FFFFFFF0LL) == 16) ^ ((v16 & 0xCF) - 7)) & 1 | ((((((v13 + v15 - 1593) & 0x1FFFFFFF0LL) == 16) ^ ((v16 & 0xCF) - 7)) & 1) << 6)) ^ ((v16 & 0xA8216ECF) - 63))) - 4LL);
  return v21((v16 & 0xA8216ECF) - 7, v21, a1, a2, a3, a4, a5, a6, a8, a9, a10, a11, a12);
}

void sub_1001BD1E4()
{
}

uint64_t sub_1001BD1F0(int a1)
{
}

uint64_t sub_1001BD230( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, int32x4_t a35, int32x4_t a36, int32x4_t a37, int32x4_t a38)
{
  int v47 = (uint64_t (*)(__n128, __n128, __n128, __n128))(*(void *)(v43 + 8LL * v38) - 12LL);
  HIDWORD(v99) = HIDWORD(a18) + 1436991572;
  LODWORD(v99) = 1947875781;
  uint64_t v48 = (const char *)(v46 - 252);
  __n128 v49 = (__n128)vdupq_n_s32(0xF8759FFE);
  __n128 v50 = (__n128)vdupq_n_s32(0x7C3ACFFFu);
  v51.n128_u64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v51.n128_u64[1] = 0x2C2C2C2C2C2C2C2CLL;
  HIDWORD(a28) = 1041;
  a27 = (v45 - 66) ^ 0xC3;
  a29 = v42 - 16;
  uint64_t v52 = (v44 - 2);
  v53.n128_u64[0] = 0x5858585858585858LL;
  v53.n128_u64[1] = 0x5858585858585858LL;
  unsigned int v55 = *(_DWORD *)(v46 - 180);
  unsigned int v54 = *(_DWORD *)(v46 - 176);
  unsigned int v56 = *(_DWORD *)(v46 - 172);
  unsigned int v57 = *(_DWORD *)(v46 - 168);
  HIDWORD(asub_10013CDB0(v0 + 22) = *(unsigned __int8 *)(v46 - 156) ^ 0xFFFFFFF3;
  int v58 = *(_BYTE *)(v46 - 156) ^ 0xF3;
  if (v58 == 2)
  {
    unint64_t v100 = __PAIR64__(v54, v55);
    unint64_t v101 = __PAIR64__(v57, v56);
    uint64_t v102 = v47;
    int8x16x4_t v104 = vld4q_s8(v48);
    HIDWORD(a20) = *(_DWORD *)(v46 - 164);
    uint8x16_t v81 = (uint8x16_t)veorq_s8(v104.val[0], (int8x16_t)v51);
    uint16x8_t v82 = vmovl_u8(*(uint8x8_t *)v81.i8);
    uint16x8_t v83 = vmovl_high_u8(v81);
    uint8x16_t v84 = (uint8x16_t)veorq_s8(v104.val[1], (int8x16_t)v51);
    _Q21 = vmovl_u8(*(uint8x8_t *)v84.i8);
    _Q20 = vmovl_high_u8(v84);
    __asm
    {
      SHLL2           V22.4S, V20.8H, #0x10
      SHLL2           V23.4S, V21.8H, #0x10
    }

    uint8x16_t v89 = (uint8x16_t)veorq_s8(v104.val[2], (int8x16_t)v51);
    uint16x8_t v90 = vmovl_high_u8(v89);
    uint16x8_t v91 = vmovl_u8(*(uint8x8_t *)v89.i8);
    v104.val[0] = veorq_s8(v104.val[3], (int8x16_t)v51);
    v104.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v104.val[0]);
    v104.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v104.val[1]);
    v104.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v104.val[0].i8);
    v104.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v104.val[0]);
    v104.val[0] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v91.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v104.val[0].i8));
    v104.val[3] = vorrq_s8( vorrq_s8( vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v91, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v82), 0x18uLL)),  v104.val[3]);
    v104.val[1] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v90.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v83.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v104.val[1].i8));
    v104.val[2] = vorrq_s8( vorrq_s8( vorrq_s8(_Q22, (int8x16_t)vshll_high_n_u16(v90, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v83), 0x18uLL)),  v104.val[2]);
    a37 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[1], (int32x4_t)v104.val[1]), (int8x16_t)v49)),  (int32x4_t)v50);
    a38 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[2], (int32x4_t)v104.val[2]), (int8x16_t)v49)),  (int32x4_t)v50);
    a35 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[0], (int32x4_t)v104.val[0]), (int8x16_t)v49)),  (int32x4_t)v50);
    a36 = vaddq_s32( vsubq_s32( (int32x4_t)v104.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v104.val[3], (int32x4_t)v104.val[3]), (int8x16_t)v49)),  (int32x4_t)v50);
    int v92 = (_DWORD *)&a35 + v45 + 1453518696;
    int v93 = *(v92 - 8) ^ *((_DWORD *)&a35 + a27 + 1453518696);
    uint64_t v94 = *(v92 - 16);
    int v95 = v94 ^ *(v92 - 14) ^ (v93 + v40 - (v39 & (2 * v93)));
    HIDWORD(v97) = v95 ^ v40;
    LODWORD(v97) = v95;
    int v96 = v97 >> 31;
    uint64_t v98 = v39 & (2 * v96);
    _DWORD *v92 = v96 + v40 - v98;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 + 8LL * ((533 * (v42 == 1453518633)) ^ HIDWORD(a28))) - 12LL))( v98,  v94,  v52,  a4,  82198926LL,  a6,  v55,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  v99,  v100,  v101,  v102,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34);
  }

  else if (v58 == 1)
  {
    int8x16x4_t v103 = vld4q_s8(v48);
    uint8x16_t v59 = (uint8x16_t)veorq_s8(v103.val[0], (int8x16_t)v51);
    uint16x8_t v60 = vmovl_high_u8(v59);
    int8x16_t v61 = (int8x16_t)vmovl_high_u16(v60);
    uint16x8_t v62 = vmovl_u8(*(uint8x8_t *)v59.i8);
    int8x16_t v63 = (int8x16_t)vmovl_high_u16(v62);
    uint8x16_t v64 = (uint8x16_t)veorq_s8(v103.val[1], (int8x16_t)v51);
    uint16x8_t v65 = vmovl_u8(*(uint8x8_t *)v64.i8);
    uint16x8_t v66 = vmovl_high_u8(v64);
    int8x16_t v67 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v65.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v62.i8));
    int8x16_t v68 = vorrq_s8((int8x16_t)vshll_high_n_u16(v65, 8uLL), v63);
    int8x16_t v69 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v66.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v60.i8));
    int8x16_t v70 = vorrq_s8((int8x16_t)vshll_high_n_u16(v66, 8uLL), v61);
    uint8x16_t v71 = (uint8x16_t)veorq_s8(v103.val[2], (int8x16_t)v51);
    _Q21 = (int8x16_t)vmovl_high_u8(v71);
    _Q20 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v71.i8);
    int8x16_t v74 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL);
    __asm { SHLL2           V20.4S, V20.8H, #0x10 }

    int8x16_t v79 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL);
    __asm { SHLL2           V21.4S, V21.8H, #0x10 }

    v103.val[0] = veorq_s8(v103.val[3], (int8x16_t)v51);
    v103.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v103.val[0].i8);
    v103.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v103.val[0]);
    v103.val[2] = vorrq_s8( vorrq_s8(v67, v74),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v103.val[1].i8), 0x18uLL));
    v103.val[1] = vorrq_s8( vorrq_s8(v68, _Q20),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v103.val[1]), 0x18uLL));
    v103.val[3] = vorrq_s8( vorrq_s8(v69, v79),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v103.val[0].i8), 0x18uLL));
    v103.val[0] = vorrq_s8( vorrq_s8(v70, _Q21),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v103.val[0]), 0x18uLL));
    a37 = vaddq_s32( vsubq_s32( (int32x4_t)v103.val[3],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v103.val[3], (int32x4_t)v103.val[3]), (int8x16_t)v49)),  (int32x4_t)v50);
    a38 = vaddq_s32( vsubq_s32( (int32x4_t)v103.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v103.val[0], (int32x4_t)v103.val[0]), (int8x16_t)v49)),  (int32x4_t)v50);
    a35 = vaddq_s32( vsubq_s32( (int32x4_t)v103.val[2],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v103.val[2], (int32x4_t)v103.val[2]), (int8x16_t)v49)),  (int32x4_t)v50);
    a36 = vaddq_s32( vsubq_s32( (int32x4_t)v103.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v103.val[1], (int32x4_t)v103.val[1]), (int8x16_t)v49)),  (int32x4_t)v50);
    return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t, void, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 + 8LL * ((2 * (a29 + 1 != v42)) ^ 0x35C)) - 8LL))( byte_100202E90,  860LL,  v52,  -(byte_100202E90[a29 + v45] - 119),  1303395975LL,  2065284721LL,  v57,  v54,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  v99,  __PAIR64__(v54, v55),  __PAIR64__(v57, v56),  v47,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34);
  }

  else
  {
    *(_DWORD *)(v46 - 180) = 2 * (v55 ^ v44) + v44 - (v41 & (4 * (v55 ^ v44)));
    *(_DWORD *)(v46 - 176) = 2 * (v54 ^ v44) + v44 - (v41 & (4 * (v54 ^ v44)));
    *(_DWORD *)(v46 - 17sub_100129678(v0 + 2) = 2 * (v56 ^ v44) + v44 - (v41 & (4 * (v56 ^ v44)));
    *(_DWORD *)(v46 - 168) = 2 * (v57 ^ v44) + v44 - (v41 & (4 * (v57 ^ v44)));
    a31 = 0LL;
    return v47(v49, v50, v51, v53);
  }

uint64_t sub_1001BDE00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, uint64_t a22, unsigned int a23, unsigned int a24)
{
  if (a24 < a23 != a21 + 1716752696 < ((v24 + 1303396432) ^ 0x741A3824u)) {
    BOOL v26 = a21 + 1716752696 < ((v24 + 1303396432) ^ 0x741A3824u);
  }
  else {
    BOOL v26 = a21 + 1716752696 > a24;
  }
  return (*(uint64_t (**)(void))(v25 + 8LL * ((1311 * !v26) ^ (v24 + 1303396151))))();
}

uint64_t sub_1001BDE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8
                                                     + 8LL
                                                     * (int)(((((v6 + 8) ^ (a5 - 152)) + v5 < v5 + a5)
                                                            * ((v6 - 1102064172) & 0xF3FFE9DB ^ (v7 + 8))) | v6)))( 88LL,  1298LL);
}

uint64_t sub_1001BDEE8( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return (*(uint64_t (**)(void))(v22
                              + 8LL
}

uint64_t sub_1001BDF34@<X0>(int a1@<W3>, int a2@<W4>, int a3@<W8>, int8x16_t a4@<Q2>, int8x16_t a5@<Q3>)
{
  *int v6 = vaddq_s8( vsubq_s8( *(int8x16_t *)(v7 + (v5 + a2)),  vandq_s8( vaddq_s8(*(int8x16_t *)(v7 + (v5 + a2)), *(int8x16_t *)(v7 + (v5 + a2))),  a5)),  a4);
  return (*(uint64_t (**)(void))(v8 + 8LL * (a3 + a1 + 230)))();
}

uint64_t sub_1001BDF8C@<X0>(char a1@<W0>, int a2@<W1>, int a3@<W3>, int a4@<W4>, int a5@<W8>)
{
  char v10 = *(_BYTE *)(v8 + a4 + v5 + ((a5 + a3) | 0x40u) - 88);
  *(_BYTE *)(v7 + v6) = v10 - (a1 & (2 * v10)) + 44;
  return (*(uint64_t (**)(void))(v9 + 8LL * (((v6 != 63) * a2) ^ (a5 + a3 + 252))))();
}

uint64_t sub_1001BDFDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  BOOL v22 = v19 - 947801381 < (a19 - 1227562441);
  return ((uint64_t (*)(void))(*(void *)(v21 + 8LL * ((112 * v22) ^ v20)) - 4LL))();
}

uint64_t sub_1001BE050( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v22 = 628203409 * ((~((v21 - 152) | 0xCDC17F34) + ((v21 - 152) & 0xCDC17F34)) ^ 0xB0B68CF8);
  int v26 = (a2 ^ (v19 + 27)) - v19;
  *(_DWORD *)(v21 - 144) = v22 + a2 + 592;
  *(_DWORD *)(v21 - 140) = a19 - v22 - 407731758;
  *(void *)(v21 - 15sub_100129678(v0 + 2) = a15;
  uint64_t v23 = sub_1001A2A8C(v21 - 152);
  uint64_t v24 = *(_DWORD *)(v21 - 184) & 0x3F;
  *(_BYTE *)(v21 - 252 + (v24 ^ 0x2B)) = -84;
  return ((uint64_t (*)(uint64_t))(*(void *)(v20
}

uint64_t sub_1001BE148()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((((v1 - 1303592576) | 0x30011) + 1303395975 + ((v1 + 129) | 0x50A) - 1384)
                                          * (v0 == 63)) ^ (v1 + 787)))
                            - 12LL))();
}

uint64_t sub_1001BE1A0()
{
  BOOL v4 = ((((v1 - 1419) | 0x234) - 544) ^ v0) >= (((v1 - 1337017339) | 0x2010001) ^ (v2 + 8));
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((4 * v4) | (16 * v4)) ^ v1)) - 12LL))();
}

uint64_t sub_1001BE1F4()
{
  *(void *)(v4 - 252 + v0 + 1) = 0x2C2C2C2C2C2C2C2CLL;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((124 * ((v1 & 0x38) == 8LL)) ^ v2))
}

uint64_t sub_1001BE23C(double a1)
{
  double *v3 = a1;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((124 * (v4 == 0)) ^ v2)) - v1 + 800))();
}

uint64_t sub_1001BE268(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (v1 ^ (1699 * (v3 != v2))))
                            + 2991571333LL
                            - ((v1 - a1 - 302859025) | 0x120D4001u)))();
}

void sub_1001BE2B4()
{
}

uint64_t sub_1001BE2C4@<X0>(int a1@<W0>, int a2@<W4>, int a3@<W8>)
{
  *(_BYTE *)(v10 - 252 + (a3 + v5)) = *(_BYTE *)(v7 + (v3 + a2))
  unsigned int v11 = v3 + 1 + a1;
  int v12 = (v4 < v6) ^ (v11 < v6);
  BOOL v13 = v11 < v4;
  if (v12) {
    BOOL v13 = v4 < v6;
  }
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((112 * v13) ^ v8)) - 4LL))();
}

uint64_t sub_1001BE344@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((114 * ((v1 + 1303397644 + a1 - 1567199949) > 0x37)) ^ (v1 + 1303396388))))();
}

uint64_t sub_1001BE384@<X0>(int a1@<W0>, unsigned int a2@<W8>)
{
  uint64_t v4 = a2;
  unint64_t v5 = a2 - 1567198255LL;
  if (v5 <= 0x38) {
    unint64_t v5 = 56LL;
  }
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * (int)((((v2 - a1 - 1071220769) & 0x8D89C72A ^ 0x68B) * (v5 - v4 + 1567198256 > 7)) ^ v2)))();
}

uint64_t sub_1001BE3F4()
{
  *(void *)(v2 - 1567198255 + v4 - 252 + (v1 - 1370) - 455) = 0x2C2C2C2C2C2C2C2CLL;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((26 * ((v0 & 0xFFFFFFFFFFFFFFF8LL) == 8)) ^ v1)) - 8LL))();
}

uint64_t sub_1001BE44C(double a1)
{
  *uint64_t v2 = a1;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (((v4 == 0) * v3) ^ v1)) - 8LL))();
}

uint64_t sub_1001BE470(int a1)
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
}

void sub_1001BE4C8()
{
  int v2 = *(unsigned __int8 *)(v1 - 156) ^ 0xF3;
  if (v2 == 1)
  {
    char v3 = v0 ^ (v0 - 84);
    char v6 = 88;
    unsigned int v9 = *(_DWORD *)(v1 - 188);
    unsigned int v8 = *(_DWORD *)(v1 - 184);
    *(_BYTE *)(v1 - 196) = v3 + ((8 * v8) ^ 0x58) + (~(2 * ((8 * v8) ^ 0x58)) | 0xAF) - 127;
    *(_BYTE *)(v1 - 195) = ((v8 >> 5) ^ 0xBD) - ((2 * ((v8 >> 5) ^ 0xBD)) & 0x58) + 44;
    *(_BYTE *)(v1 - 194) = ((v8 >> 13) ^ 0x12) + (~(v8 >> 12) | 0xA7) + 45;
    *(_BYTE *)(v1 - 19sub_100129678(v0 + 3) = ((v8 >> 21) ^ 0x10) + (~(v8 >> 20) | 0xA7) + 45;
    HIDWORD(v10) = v9 ^ 0x1B;
    LODWORD(v10) = v8 ^ 0xA0000000;
    *(_BYTE *)(v1 - 19sub_100129678(v0 + 2) = (v10 >> 29) - ((2 * (v10 >> 29)) & 0x58) + 44;
    *(_BYTE *)(v1 - 191) = ((v9 >> 5) ^ 0xE8) - 2 * (((v9 >> 5) ^ 0xE8) & 0x2E ^ (v9 >> 5) & 2) + 44;
    *(_BYTE *)(v1 - 190) = ((v9 >> 13) ^ 0xCF) - ((2 * ((v9 >> 13) ^ 0xCF)) & 0x58) + 44;
    unsigned int v7 = (v9 >> 21) ^ 0xFFFFFF94;
  }

  else
  {
    if (v2 != 2) {
      goto LABEL_6;
    }
    char v3 = 7 * (v0 ^ (v0 - 44));
    unsigned int v4 = *(_DWORD *)(v1 - 188);
    unsigned int v7 = *(_DWORD *)(v1 - 184);
    *(_BYTE *)(v1 - 196) = v3 + ((v4 >> 21) ^ 0x94) - 2 * (((v4 >> 21) ^ 0x94) & 0x2F ^ (v4 >> 21) & 3) + 0x80;
    *(_BYTE *)(v1 - 195) = ((v4 >> 13) ^ 0xCF) - ((2 * ((v4 >> 13) ^ 0xCF)) & 0x58) + 44;
    *(_BYTE *)(v1 - 194) = ((v4 >> 5) ^ 0xE8) + ~(2 * (((v4 >> 5) ^ 0xFFFFFFE8) & 0x2F ^ (v4 >> 5) & 3)) + 45;
    HIDWORD(v5) = v4 ^ 0x1B;
    LODWORD(v5) = v7 ^ 0xA0000000;
    *(_BYTE *)(v1 - 19sub_100129678(v0 + 3) = (v5 >> 29) - ((2 * (v5 >> 29)) & 0x58) + 44;
    *(_BYTE *)(v1 - 19sub_100129678(v0 + 2) = ((v7 >> 21) ^ 0x10) - ((v7 >> 20) & 0x58) + 44;
    *(_BYTE *)(v1 - 191) = ((v7 >> 13) ^ 0x12) - ((v7 >> 12) & 0x58) + 44;
    *(_BYTE *)(v1 - 190) = ((v7 >> 5) ^ 0xBD) - ((2 * ((v7 >> 5) ^ 0xBD)) & 0x58) + 44;
    char v6 = 80;
    LOBYTE(v7) = (8 * v7) ^ 0x58;
  }

  *(_BYTE *)(v1 - 189) = ((v0 + v3 + 84) ^ 0xBD) + v7 - (v6 & (2 * v7));
LABEL_6:
  JUMPOUT(0x1001BD2C8LL);
}

uint64_t sub_1001BE9AC@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  unsigned int v7 = *(_DWORD *)(v6 - 252 + ((v4 + a2) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a1 + (v4 + a2 + 1)) = (BYTE2(v7) ^ 0xE6) - ((2 * (BYTE2(v7) ^ 0xE6)) & 0x58) + 44;
  *(_BYTE *)(a1 + (v4 + a2 + sub_10012CBAC((uint64_t)(v0 + 2)) = (BYTE1(v7) ^ 0x41) - ((v7 >> 7) & 0x58) + 44;
  *(_BYTE *)(a1 + (v4 + asub_10012CBAC((uint64_t)(v0 + 2)) = (HIBYTE(v7) ^ 0x84)
                                           - (((HIBYTE(v7) ^ 0xFFFFFF84) & 0x2D ^ HIBYTE(v7) & 1) << (((v3 - 118) ^ 0x90) & 0xB7))
                                           + 44;
  *(_BYTE *)(a1 + (v4 + a2 + 3)) = v7 ^ 0xA2;
  unsigned int v8 = *(_DWORD *)(v6 - 160) + 31723343;
  BOOL v9 = v8 < v2;
  BOOL v10 = v4 + 649959231 < v8;
  if (v4 + 649959231 < v2 != v9) {
    BOOL v11 = v9;
  }
  else {
    BOOL v11 = v10;
  }
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (v3 + 16 * v11)) - 8LL))();
}

void sub_1001BEB74()
{
}

uint64_t sub_1001BEB7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
  *(_DWORD *)(&a35 + a31) = 1917787284;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 + 8LL * ((v35 - 410) | 0xC1)) - 4LL))( 1917787284LL,  89778891LL,  4881474LL,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26);
}

uint64_t sub_1001BEC3C(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_1001BEC9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, int a33)
{
  int v36 = a6 + v33 + 621;
  unsigned int v37 = ((((a6 + v33 + 8) | 0x81) + 229) ^ 0xD8FBB181) + v35;
  BOOL v38 = a33 - 1873714420 < v37;
  return (*(uint64_t (**)(void))(v34 + 8LL * (((8 * v38) | (16 * v38)) ^ v36)))();
}

uint64_t sub_1001BEEA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v20 = 628203409 * ((v19 + 2099313430 - 2 * ((v19 - 152) & 0x7D20FBAE)) ^ 0xFFA8F79D);
  *(_DWORD *)(v19 - 136) = v15 - v20 + 1278;
  *(_DWORD *)(v19 - 13sub_100129678(v0 + 2) = v18 - v20 + (((v15 ^ (v13 - 378)) - 2013844737) ^ (v15 + 315));
  *(void *)(v19 - 15sub_100129678(v0 + 2) = a12;
  *(void *)(v19 - 144) = a10;
  *(void *)(v19 - 128) = a13;
  *(void *)(v19 - 11sub_100129678(v0 + 2) = v14;
  *(void *)(v19 - 104) = a11;
  ((void (*)(uint64_t))*(&off_10027AEF0 + v15 - 286))(v19 - 152);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17
                                                              + 8LL * ((1770 * (*(_DWORD *)(v19 - 120) == v16)) ^ v15)))( 1917787284LL,  89778891LL,  4881474LL);
}

uint64_t sub_1001BEF8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 8LL * (int)(((*(_DWORD *)(v12 + 48LL * (v10 + v8)) != 271613653) * ((v9 + 1588057822) & 0xA15827E6 ^ 0x1A5)) ^ v9)) - 12LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

uint64_t sub_1001BEFEC@<X0>(int a1@<W5>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v4 + 8LL * ((536 * ((a2 ^ 0xEE226DAC ^ (v2 - a1 - 366)) == v3 - 288390869)) | v2)))();
}

uint64_t sub_1001BF034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * ((27
                                          * ((v7 & 0xFFFFFFFFFFFFFFFuLL) - 1 < (unint64_t)((a6 + v6 + 181) ^ 0x19u)
                                                                             - 210)) ^ (a6 + v6 + 1929)))
                            - 12LL))();
}

uint64_t sub_1001BF074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4
                                                                                          + 8LL
                                                                                          * ((25
                                                                                            * (((*v5 - 1917787284 < (v3 - 189)) ^ v3) & 1)) ^ v3))
                                                                              - 4LL))( a1,  a2,  a3,  2210763809LL,  2991571333LL);
}

uint64_t sub_1001BF0D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, int a33)
{
  uint64_t v43 = &v42[6 * v35];
  _OWORD v43[2] = v39;
  v43[3] = v36;
  *((void *)v43 + sub_100129678(v0 + 2) = v37;
  v43[6] = a33;
  *uint64_t v42 = v34 + 1;
  return ((uint64_t (*)(void))(*(void *)(v40
                                        + 8LL
                                        * ((857
                                          * (*(_DWORD *)(v41 + 48LL * v38 + 32) + 2057704756 < ((v33 - 76) | 0x20)
                                                                                             + ((v33 - 2113847373) | 0x304E8111u)
                                                                                             - 844087855)) ^ (v33 + 7)))
                            - 4LL))();
}

uint64_t sub_1001BF164@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 + 8LL * (int)(((v26 + (((a9 - 1) | 0x10A) ^ 0x17B) != 2084229328) * (a6 + (((a9 - 1) | 0x10A) ^ (v25 - 342)) + 1145)) ^ ((a9 - 1) | 0x10A))) - 12LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25);
}

uint64_t sub_1001BF3C0(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  BOOL v11 = v7 == a2 && *v9 == a1 + a6 + ((v6 - 1291848958) & 0xFF4FCDBD) + 1318 - 1342;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((v11 | (4 * v11)) ^ v6)) - 4LL))();
}

void sub_1001BF414()
{
}

uint64_t sub_1001BF438()
{
  return v0 ^ v1;
}

void sub_1001BF480(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 1224239923 * ((a1 & 0x9A8552A9 | ~(a1 | 0x9A8552A9)) ^ 0x97C95081);
  __asm { BR              X10 }

uint64_t sub_1001BF538()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * (int)(((((v0 - 1416) ^ 0x5EE) + ((v0 + 924016966) & 0xC8EC9EB9) - 2932)
                                               * (v2 == 0)) ^ (v0 - 1416)))
                            - 12LL))();
}

uint64_t sub_1001BF58C@<X0>(uint64_t (*a1)(_DWORD *)@<X8>)
{
  unsigned int v4 = 3804331 * ((2 * (v6 & 0x2B756E88) - v6 - 729116298) ^ 0xAA5FB480);
  unsigned int v9 = v4 - 1465113146;
  uint64_t v7 = 0x48247A308694277ELL;
  uint64_t v8 = v3;
  v6[0] = v4 + 282547551;
  v6[1] = v4 + v1 - 1281;
  uint64_t result = a1(v6);
  *uint64_t v2 = *(_DWORD *)(v3 - 0x27E11828102FB971LL);
  return result;
}

void sub_1001BFB88()
{
  v0[1] = 108757529 * ((v0 & 0xA7DA3C6 | ~(v0 | 0xA7DA3C6)) ^ 0x151E3E12) - 504207030;
  sub_1001CF8B4(v0);
  __asm { BR              X8 }

uint64_t sub_1001BFC5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unsigned int a18, unsigned int a19, int a20)
{
  unsigned int v23 = 1759421093 * ((((2 * &a17) | 0x27E0DDBE) - &a17 - 334524127) ^ 0xA08DDE8B);
  LODWORD(a17) = v23 ^ 0x3B0DE444;
  HIDWORD(a17) = v23 ^ 0x1CA2E939;
  a20 = v23 ^ 0x5C802CB3;
  a18 = v23 + 382;
  ((void (*)(unint64_t **))(*(void *)(v22 + 576) - 8LL))(&a17);
  LODWORD(a9) = a19;
  a19 = 854 - 460628867 * ((2 * (&a17 & 0x6D5E5A90) - &a17 - 1834900113) ^ 0xDE372712);
  a17 = &STACK[0x49EB7E5E2EA5C90D];
  sub_1001A8490((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 + 8LL * ((218 * (a18 == (v20 ^ 0x4620972C) + 907688591)) ^ v20)) - 4LL))( v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  a9,  a10);
}

uint64_t sub_1001BFD8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20, unsigned int a21, uint64_t a22)
{
  unsigned int v27 = 1178560073 * ((&a18 & 0xF7FDE8F6 | ~(&a18 | 0xF7FDE8F6)) ^ 0xB2966F6B);
  a19 = v27 + 804878199 * v24 + 1740498123;
  a20 = a14;
  a21 = v27 ^ 0x3E5;
  (*(void (**)(int *))(v26 + 928))(&a18);
  unsigned int v28 = 1178560073 * ((2 * (&a18 & 0x2A659790) - &a18 + 1436182632) ^ 0xEF0E100A);
  a22 = v22;
  a20 = a14;
  a21 = v28 ^ ((v23 ^ 0x4FFFFFE5) - 13115937 + ((2 * v23) & 0x9FFFFFCA));
  a19 = v28 + 292;
  uint64_t v29 = *(void (**)(int *))(v26 + 448);
  v29(&a18);
  unsigned int v30 = 1178560073
      * (((&a18 | 0xF00BCE5A) - &a18 + (&a18 & 0xFF431A0)) ^ 0x4A9FB638);
  a22 = a12;
  a20 = a14;
  a19 = v30 + 292;
  a21 = v30 ^ ((a11 ^ 0xFF37FDCD) + 1342169079 + ((2 * a11) & 0xFE6FFB9A));
  uint64_t v31 = ((uint64_t (*)(int *))v29)(&a18);
  return (*(uint64_t (**)(uint64_t))(v25 + 8LL * ((1643 * (a18 == 2084229119)) ^ 0xAEu)))(v31);
}

uint64_t sub_1001BFF58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, uint64_t a18, unsigned int a19, unsigned int a20, unsigned int a21, int a22)
{
  else {
    int v25 = 274310066;
  }
  unsigned int v26 = 460628867 * (&a17 ^ 0x4C96827D);
  a19 = v26 - 21481792;
  a20 = v26 + v24 - 2024873257;
  a17 = &STACK[0x27D4077E41C0C6B8];
  a18 = a13;
  a21 = v25 - v26;
  uint64_t v27 = sub_1001CFD20((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t))(v23
                                            + 8LL
                                            * (((a22 == v22 + v24 + 670 - 844) * (((v24 + 362) | 0x44) ^ 0x6D8)) ^ v24)))(v27);
}

uint64_t sub_1001C0030()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (v2 ^ (1563 * (v0 < v1))))
                            - (((_WORD)v2 - 14688) & 0x7FF)
                            + 480LL))();
}

uint64_t sub_1001C00BC@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, unsigned int a11, char *a12, _BYTE *a13, uint64_t a14, unsigned int a15)
{
  a11 = (v16 - 442) ^ (((2 * (&a11 & 0x4D616598) - &a11 - 1298228633) ^ 0xDF6A826E) * v15);
  unsigned int v23 = (v16 + 1987476659) & 0x81EC;
  a12 = &a10 + a1;
  a13 = a5;
  v20(&a11);
  a15 = (v23 - 91) ^ (1225351577 * ((&a11 & 0xCCC3A33D | ~(&a11 | 0xCCC3A33D)) ^ 0x10A684D4));
  a13 = v22;
  a14 = v18;
  a12 = a5;
  ((void (*)(unsigned int *))(*(void *)(v21 + 8LL * (v23 ^ 0x1E7)) - 12LL))(&a11);
  a12 = v17;
  a13 = a5;
  a11 = (v23 - 90) ^ (((&a11 & 0x960CB73F | ~(&a11 | 0x960CB73F)) ^ 0x40750C9) * v15);
  v20(&a11);
  a12 = a5;
  a11 = (v23 - 79) ^ (1755732067 * (&a11 ^ 0xDEC6BDDB));
  uint64_t v24 = sub_1001A3BA0((uint64_t)&a11);
}

uint64_t sub_1001C0254( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  return ((uint64_t (*)(void))(*(void *)(v18 + 8LL * (((v17 + 38 * (v16 ^ 0x1C3) - 77) * (a15 == v15)) ^ v16)) - 4LL))();
}

uint64_t sub_1001C028C@<X0>( int a1@<W8>, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
}

uint64_t sub_1001C02D0@<X0>(int a1@<W8>)
{
  unsigned int v3 = v1 - ((((a1 - 1742) | 0x82) ^ 0xF6B3A1FE) & (2 * v1)) + 2069483688;
  int v4 = ((2 * v3) & 0xFD73EF18 ^ 0xF433A110) + (v3 ^ 0x85E02724) + 905968768 != 884601868;
  return (*(uint64_t (**)(void))(v2 + 8LL * ((v4 | (v4 << 6)) ^ (a1 - 1517))))();
}

uint64_t sub_1001C035C(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((15
                                          * (a1
                                           + v2
                                           + ((v1 - 680724756) & 0x6EB39D76 ^ (v1 - 1545886668) & 0x5C245FBF ^ 0x47669805u) < 8)) ^ (v1 + 773)))
                            - 8LL))();
}

uint64_t sub_1001C03E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return ((uint64_t (*)(void))(*(void *)(v13
                                        + 8LL
}

uint64_t sub_1001C0414(uint64_t a1, int a2)
{
}

uint64_t sub_1001C0460( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int v17 = a1 + v15 + 21366899;
  uint64_t v18 = v12 + v17;
  __int128 v19 = *(_OWORD *)(v18 - 31);
  uint64_t v20 = a11 + v17;
  *(_OWORD *)(v20 - 15) = *(_OWORD *)(v18 - 15);
  *(_OWORD *)(v20 - 31) = v19;
}

void sub_1001C04D0()
{
}

uint64_t sub_1001C04DC()
{
}

uint64_t sub_1001C0514()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (int)(((((v2 + 1109430725) | 0x4000030) + v0 + ((v2 + 1488764029) & 0xA743470F))
                                               * ((v1 & 0x18) == 0)) ^ v2))
                            - 4LL))();
}

uint64_t sub_1001C056C( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = v13 - v15 + ((a2 - 1531) ^ v12);
  *(void *)(a11 - 7 + v17) = *(void *)(v11 - 7 + v17);
  return ((uint64_t (*)(void))(*(void *)(v16 + 8LL
                                              * ((440 * ((((a2 - 88) ^ 0xFFFFF948) & v14) - v15 != 8)) ^ (a2 - 88)))
                            - 12LL))();
}

uint64_t sub_1001C05D0(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  *(void *)(a2 + (v5 + a5 + a3)) = *(void *)(a1 + (v5 + a5 + a3));
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (((v7 + a5 != 8) * a4) ^ v6)) - 12LL))();
}

uint64_t sub_1001C0604()
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * (((((v0 == v2) ^ (v1 + 52)) & 1) * (((v1 - 133) | 0x26) ^ 0xFF)) ^ v1)))();
}

uint64_t sub_1001C0658@<X0>(int a1@<W6>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_BYTE *)(a5 + ((58 * (v9 ^ (a1 + 1282))) ^ (v7 + 95)) + swift_bridgeObjectRelease(0xE000000000000000LL, v8) = *(_BYTE *)(v6
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((11 * (v8 - 1 == a2)) ^ (v5 + v9 + 2117))) - 4LL))();
}

uint64_t sub_1001C06AC()
{
  unsigned int v7 = v0 + 535753261 * (v6 ^ 0xAF40E2F) + 1157;
  uint64_t v8 = v4;
  v3(v6);
  unsigned int v7 = v0
     + 430
  uint64_t v8 = v5;
  v3(v6);
  return v1 ^ 0x7C3ACFFFu;
}

void sub_1001C0790(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 1374699841 * ((a1 + 2125213654 - 2 * (a1 & 0x7EAC2FD6)) ^ 0x135837DF);
  int v2 = *(unint64_t **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unint64_t **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(v3 - 0x19A1466F6B33264LL);
  unsigned int v11 = v1 + 1224239923 * (((&v7 | 0xAEE383C9) - (&v7 & 0xAEE383C9)) ^ 0x5C507E1E) - 517;
  uint64_t v7 = v3;
  uint64_t v8 = v4;
  int v9 = &STACK[0x1F589EA4AC42BE09];
  uint64_t v10 = v5;
  ((void (*)(uint64_t *))*(&off_10027AEF0 + v1 - 1141))(&v7);
  uint64_t v6 = *(void *)(v3 - 0x19A1466F6B3326CLL);
  LODWORD(v9) = v1
  uint64_t v7 = v6;
  uint64_t v8 = &STACK[0x1F589EA4AC42BE19];
  sub_1001A2B9C((uint64_t)&v7);
  uint64_t v8 = v2;
  LODWORD(v7) = v1
              + 235795823
  sub_10018D09C((uint64_t)&v7);
  __asm { BR              X8 }

uint64_t sub_1001C09C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t), uint64_t a11)
{
  *(void *)(v18 - 104) = v13;
  *(void *)(v18 - 144) = v14;
  *(void *)(v18 - 136) = a11;
  *(_DWORD *)(v18 - 11sub_100129678(v0 + 2) = v16
                         + 1224239923 * (((~(v18 - 144) & 0x674EBBD0) - (~(v18 - 144) | 0x674EBBD1)) ^ 0x95FD4606)
                         - 434;
  int v19 = (v16 - 958) | 0x411;
  *(void *)(v18 - 128) = v13;
  *(void *)(v18 - 120) = v15;
  uint64_t v20 = a10(v18 - 144);
  BOOL v21 = v11 + v17 + 1232 < (v19 ^ 0x7FFFFB2Eu);
  return ((uint64_t (*)(uint64_t))(*(void *)(v12 + 8LL * ((v21 | (4 * v21)) ^ v19)) - 8LL))(v20);
}

uint64_t sub_1001C0A68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(_DWORD *)(v19 - 144) = (v17 - 469) ^ (1225351577
                                        * ((~((v19 - 144) | 0x95A6E94B) + ((v19 - 144) & 0x95A6E94B)) ^ 0x49C3CEA2));
  *(void *)(v19 - 120) = v14;
  *(void *)(v19 - 11sub_100129678(v0 + 2) = v15;
  *(void *)(v19 - 136) = v16;
  *(void *)(v19 - 128) = v14;
  ((void (*)(uint64_t))((char *)*(&off_10027AEF0 + (v17 ^ 0x4F7)) - 4))(v19 - 144);
  int v20 = 1374699841 * ((v19 + 730915874 - 2 * ((v19 - 144) & 0x2B90E4B2)) ^ 0x4664FCBB);
  *(_DWORD *)(v19 - 128) = v12 - v20 + v17 + 83 + v18;
  *(void *)(v19 - 136) = a12;
  *(_DWORD *)(v19 - 144) = (v17 - 943) ^ v20;
  uint64_t v21 = sub_10018E63C(v19 - 144);
  return (*(uint64_t (**)(uint64_t))(v13 + 8LL * ((248 * (*(_DWORD *)(v19 - 140) != 1339815632)) ^ v17)))(v21);
}

uint64_t sub_1001C0B68()
{
  BOOL v4 = v0 + v3 + 1232 < (v2 ^ 0x7FFFFB2Eu);
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((v4 | (4 * v4)) ^ v2)) - 8LL))();
}

uint64_t sub_1001C0BA4()
{
  uint64_t v5 = *(void *)(v8 + 24);
  int v6 = 1224239923 * ((((v4 - 144) | 0x8E15D0D9) - (v4 - 144) + ((v4 - 144) & 0x71EA2F20)) ^ 0x7CA62D0E);
  *(_DWORD *)(v4 - 144) = v6 ^ 0x5098936A;
  *(_DWORD *)(v4 - 128) = v6 + v2 - 846;
  *(void *)(v4 - 136) = v10;
  sub_10018D9BC((_DWORD *)(v4 - 144));
  *(_DWORD *)(v4 - 11sub_100129678(v0 + 2) = v2 + 1224239923 * (((v4 - 144) & 0x62925DD | ~((v4 - 144) | 0x62925DD)) ^ 0xB6527F5) - 517;
  *(void *)(v4 - 104) = v0;
  *(void *)(v4 - 128) = v0;
  *(void *)(v4 - 120) = v3;
  *(void *)(v4 - 144) = v1;
  *(void *)(v4 - 136) = v10;
  v9(v4 - 144);
  *(_DWORD *)(v4 - 128) = v2
                        + 1374699841 * ((2 * ((v4 - 144) & 0x4C9CEF60) - (v4 - 144) - 1285353317) ^ 0xDE970892)
                        - 798;
  *(void *)(v4 - 144) = v0;
  *(void *)(v4 - 136) = v5;
  return sub_1001A2B9C(v4 - 144);
}

void sub_1001C0CE8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) + 108757529 * (((a1 | 0xFA9FB8B3) - (a1 & 0xFA9FB8B3)) ^ 0x1A03DA98);
  __asm { BR              X9 }

uint64_t sub_1001C0DC8@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  unsigned int v12 = 1755732067
      * (((&a4 | 0xA1ED4A11) - &a4 + (&a4 & 0x5E12B5E8)) ^ 0x7F2BF7CA);
  a6 = (v11 + 111) ^ v12;
  a8 = v12 ^ 0x15A025D5;
  a4 = &STACK[0x3F8123127DDA1A64];
  a5 = v10;
  a7 = &STACK[0x708F6A420CBDE163];
  uint64_t v13 = (*(uint64_t (**)(unint64_t **))(a1 + 8LL * (v11 + 106)))(&a4);
  return (*(uint64_t (**)(uint64_t))(v9
                                            + 8LL
                                            * (((*(_DWORD *)(v10 - 0x27E11828102FB971LL) == v8)
                                              * ((v11 + 731) ^ 0x698 ^ ((v11 + 145) | 0x428))) ^ v11)))(v13);
}

uint64_t sub_1001C0EB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return (*(uint64_t (**)(void))(v12
                              + 8LL
                              * ((((a11 ^ (v11 - 1082) ^ ((v13 ^ 0x48Du) + 661)) > 0x14) * ((2 * (v13 ^ 0x48D)) ^ 0x332)) ^ v13)))();
}

void sub_1001C0EF0(_DWORD *a1@<X8>)
{
  *a1 = v2 + 164;
  _DWORD *v1 = *a1;
}

void sub_1001C1300(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1001C1364()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((11 * (v1 != 510884208)) ^ 0x443u)) - 8LL))();
}

uint64_t sub_1001C1390@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = (__PAIR64__(v3, **(unsigned __int8 **)(a2 + 8)) - 1) >> 32;
  *(_DWORD *)(*(void *)(a1 + 96) + 80_swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.GKGameModeListener", 33LL, "init()", 6LL, 0LL) = 1587865124;
  *(_DWORD *)(*(void *)(a1 + 96) + 804LL) = 1966800080;
  *(void *)(*(void *)(a1 + 96) + 808LL) = *(void *)(a1 + 96) + 816LL;
  uint64_t v5 = *(void *)(a1 + 96) + 0x1F589EA4AC42C109LL;
  uint64_t v6 = *(void *)(a2 + 8) + (*(_DWORD *)(a2 + 4) - v4);
  unsigned int v7 = 1178560073
     * (((&v9 | 0x33FBA1D0) - &v9 + (&v9 & 0xCC045E28)) ^ 0x896FD9B2);
  unsigned int v13 = v7 + v4 + 400211714;
  uint64_t v10 = v6;
  uint64_t v11 = v5;
  unsigned int v9 = v7 + 558;
  ((void (*)(unsigned int *))(*(void *)(a3 + 296) - 4LL))(&v9);
  return v12 ^ 0x1114442Bu;
}

void sub_1001C14D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X8 }

uint64_t sub_1001C1548(uint64_t a1, int a2)
{
  if (a1) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  int v4 = v3;
  return (*(uint64_t (**)(void))(v2 + 8LL * ((16 * v4) | 0x28Au)))();
}

uint64_t sub_1001C1580( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  a14 = 108757529 * ((&a13 & 0x2A42C21B | ~(&a13 | 0x2A42C21B)) ^ 0x35215FCF) - 504207030;
  uint64_t v15 = sub_1001CF8B4(&a13);
  return (*(uint64_t (**)(uint64_t))(v14 + 8LL * ((1718 * (a13 == 2084229119)) ^ 0x29Au)))(v15);
}

uint64_t sub_1001C161C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, int a14, unsigned int a15)
{
  a13 = &STACK[0x49EB7E5E2EA5C905];
  a15 = v17 - 460628867 * (((&a13 | 0xE74F0FCA) - (&a13 & 0xE74F0FCA)) ^ 0xABD98DB7) + 188;
  sub_1001A8490((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16
                                                                                         + 8LL
                                                                                         * ((81
                                                                                           * (a14 == v15 + v17 + v17 + 844 - 2176)) ^ v17)))( v18,  v19,  v20,  v21,  v22,  v23);
}

uint64_t sub_1001C16B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, unsigned int a16, uint64_t a17)
{
  unsigned int v23 = 1178560073 * (((&a13 | 0xBA707601) + (~&a13 | 0x458F89FE)) ^ 0xE40E62);
  a16 = (((2 * v18) & 0xBF6FFBAE) + 1870651373 + ((((v22 - 1567712071) & 0x1FFA) - 541590723) ^ v18)) ^ v23;
  a14 = v23 + v22 - 1218;
  a17 = v17;
  a15 = a12;
  uint64_t v24 = (*(uint64_t (**)(int *))(v20 + 8LL * (v22 ^ 0x5DEu)))(&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v21 + 8LL * (v22 ^ (8 * (a13 == v19)))) - 4LL))(v24);
}

uint64_t sub_1001C1784( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, unsigned int a15, unsigned int a16, unsigned int a17, int a18)
{
  unsigned int v21 = 460628867
      * (((&a13 | 0xAC92F452) - &a13 + (&a13 & 0x536D0BA8)) ^ 0xE004762F);
  a13 = &STACK[0x27D4077E41C0C6A8];
  a14 = a12;
  a15 = v21 - 1921313249;
  a16 = v21 + v20 - 2024874593;
  a17 = 274310066 - v21;
  uint64_t v22 = sub_1001CFD20((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL
                                                      * (((a18 == ((v20 + 845365685) & 0xAFE ^ (v18 - 666)))
                                                        * (((v20 - 452) | 0x194) - 760)) ^ v20))
                                          - 4LL))(v22);
}

uint64_t sub_1001C1864( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, unsigned int a14, unint64_t *a15, uint64_t a16)
{
  a14 = (v16 - 1060) ^ (1374699841
                      * (((&a14 | 0xB23EA5EF) + (~&a14 | 0x4DC15A10)) ^ 0xDFCABDE7));
  a15 = &STACK[0x18E41690234F4F59];
  a16 = a10;
  uint64_t v20 = (*(uint64_t (**)(unsigned int *))(v18 + 8LL * (int)(v16 & 0xA18D98B7)))(&a14);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19 + 8LL * (((a12 == v17) * (v16 - 1363)) ^ v16)) - 8LL))(v20);
}

uint64_t sub_1001C190C()
{
  uint64_t v13 = v7;
  uint64_t v14 = 0x335F4D7B17DD4E17LL;
  unsigned int v15 = v3
      - 108757529 * ((&v10 & 0x46C0678E | ~(&v10 | 0x46C0678E)) ^ 0x59A3FA5A)
      + v5
      + 842;
  uint64_t v12 = v0;
  (*(void (**)(unsigned int *))(v4 + 8LL * (v3 + v5 + 178)))(&v10);
  uint64_t v12 = v7;
  unsigned int v10 = (v3 + v5 + 413) ^ (1755732067
                         * (((&v10 ^ 0x49B1FB56) & 0xF0AC0744 | ~(&v10 ^ 0x49B1FB56 | 0xF0AC0744)) ^ 0x9824BE36));
  sub_1001A3BA0((uint64_t)&v10);
  uint64_t v12 = v7;
  unsigned int v11 = v3
      + v5
  v1(&v10);
  uint64_t v12 = v9;
  unsigned int v11 = 6 * (v5 ^ 0xC35E9C56) + 535753261 * (&v10 ^ 0xAF40E2F) + 665;
  v1(&v10);
  return v8 ^ v2;
}

uint64_t sub_1001C1AC0(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)(a1 + 8) - 0x1F589EA4AC42BDE5LL);
  int v4 = v1 - 1966800080;
  BOOL v3 = v1 - 1966800080 < 0;
  int v5 = 1966800080 - v1;
  if (!v3) {
    int v5 = v4;
  }
  int v2 = (*(_DWORD *)a1 - 628203409 * (a1 ^ 0x82880C33)) ^ 0x25;
  return (*((uint64_t (**)(void))*(&off_10027AEF0 + (v2 ^ 0x111))
          + ((674
            * (v2 + (v5 ^ 0xB6C56BFB) + ((2 * v5) & 0x6D8AD7F6) + 1539292190 + ((v2 - 29) ^ 0xED7AD7C1) < 36 * (v2 ^ 0x168u) + 2147483323)) ^ v2)
          - 1))();
}

uint64_t sub_1001C1BD0(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6
                              + 8LL
                              * (((((a4 ^ v6) ^ (*(_DWORD *)(*v7 + 4LL * a5) == a3)) & 1) * v6) ^ a4)))();
}

void sub_1001C1C04()
{
}

uint64_t sub_1001C1C0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *(_DWORD *)(result + 4) = a7;
  return result;
}

void sub_1001C1C14(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) ^ (3804331 * ((2 * (a1 & 0x520CC9FF) - a1 - 1376569856) ^ 0xD32613F6));
  uint64_t v2 = *(void *)a1;
  ((void (*)(char *, void (*)()))*(&off_10027AEF0 + (v1 ^ 0x280)))( (char *)*(&off_10027AEF0 + (v1 ^ 0x20D)) - 12,  sub_1001CF1BC);
  __asm { BR              X10 }

uint64_t sub_1001C1CD4()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * (((*(void *)(*(void *)(v1 + 8LL * (v2 ^ 0x2A1)) - 4LL) == 0LL)
                                          * ((v2 + 306) ^ 0x260)) ^ v2))
                            - 12LL))();
}

  ;
}

uint64_t sub_1001C1D1C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (a1 ^ 0x301)))(v1);
}

void sub_1001C1D3C(uint64_t a1)
{
  BOOL v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0x1F589EA4AC42BDE5LL) != 1966800080
    && *(_DWORD *)(*(void *)(a1 + 16) - 0x1F589EA4AC42BDE5LL) != 1966800080;
  int v1 = *(_DWORD *)a1 - 1225351577 * ((-1557536513 - (a1 | 0xA329E0FF) + (a1 | 0x5CD61F00)) ^ 0x7F4CC716);
  __asm { BR              X12 }

uint64_t sub_1001C1E50@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL * ((443 * (v2 + a1 - 133 >= (((v3 ^ 0x64D) + 706) ^ 0x7FFFFCC4u))) ^ v3))
                            - 4LL))();
}

uint64_t sub_1001C1E90(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v2 + 8LL * (v4 ^ (464 * (v3 < 1)))) - 8LL))( 1501478978LL,  a2,  v4 ^ 0x4A4u);
}

uint64_t sub_1001C1EF0( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  BOOL v18 = v14 > v17;
  *(_DWORD *)(a12 + 4LL * (v15 + 48 + a1 - 1501479273)) = v13;
  int v19 = a1 + 1741774330;
  uint64_t v20 = (a1 + 1);
  int v21 = v18 ^ (v19 < 1095769659);
  BOOL v22 = v19 < v16;
  if (!v21) {
    BOOL v18 = v22;
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v12 + 8LL * ((497 * !v18) ^ v15)) - 8LL))(v20);
}

uint64_t sub_1001C1F64()
{
}

uint64_t sub_1001C1FA0()
{
}

uint64_t sub_1001C1FFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return ((uint64_t (*)(void))(*(void *)(v12
                                        + 8LL
                                        * ((662
                                          * (*(_DWORD *)(a12
                                                       + 4LL
}

uint64_t sub_1001C2044()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((((v1 + 734) ^ 0x4AF ^ (v1 - 641262045) & 0x2638E7BB)
}

uint64_t sub_1001C2094@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((662
                                          * (*(_DWORD *)(a1
                                                       + 4LL
}

uint64_t sub_1001C20D8()
{
  *(_DWORD *)(v2 - 1swift_unknownObjectWeakDestroy(v0 + 16) = (v1 - 219) ^ (460628867
                                      * ((((v2 - 120) | 0x4AD97D05) - (v2 - 120) + ((v2 - 120) & 0xB52682F8)) ^ 0x64FFF78));
  *(void *)(v2 - 11sub_100129678(v0 + 2) = v4;
  sub_1001AE554(v2 - 120);
  *(void *)(v2 - 11sub_100129678(v0 + 2) = v5;
  *(_DWORD *)(v2 - 1swift_unknownObjectWeakDestroy(v0 + 16) = (v1 - 219) ^ (460628867
                                      * ((2 * ((v2 - 120) & 0x3DE95DA0) - (v2 - 120) - 1038704038) ^ 0x8E802027));
  sub_1001AE554(v2 - 120);
  *(_DWORD *)(v2 - 104) = v1
                        + 1374699841 * ((((v2 - 120) | 0x312B6D0F) - ((v2 - 120) & 0x312B6D0F)) ^ 0x5CDF7506)
                        - 1287;
  *(void *)(v2 - 120) = v0;
  *(void *)(v2 - 11sub_100129678(v0 + 2) = v5;
  return sub_1001A2B9C(v2 - 120);
}

void sub_1001C24F4(uint64_t a1)
{
  uint64_t v2 = qword_1002BB2D8 - qword_1002BB280 - (void)&v3;
  qword_1002BB280 = 1126174607 * v2 + 0x245AECB3A987CA56LL;
  qword_1002BB2D8 = 1126174607 * (v2 ^ 0x245AECB3A987CA56LL);
  ((void (*)(char *, void (*)()))*(&off_10027AEF0
                                            + ((-113
                                                                             * ((qword_1002BB2D8 + qword_1002BB280) ^ 0x56)) ^ byte_1001F92B0[byte_100205090[(-113 * ((qword_1002BB2D8 + qword_1002BB280) ^ 0x56))] ^ 0xAF])
                                            + 13))( (char *)*(&off_10027AEF0 + ((-113 * ((qword_1002BB2D8 - qword_1002BB280) ^ 0x56)) ^ byte_100205190[byte_100200DF0[(-113 * ((qword_1002BB2D8 - qword_1002BB280) ^ 0x56))] ^ 0x59])
            - 130)
  - 12,
    sub_1001CF1BC);
  __asm { BR              X11 }

uint64_t sub_1001C2614()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * ((306 * (*(void *)(*(void *)(v2 + 1544) - 4LL) == 0LL)) ^ v0)))();
}

  ;
}

uint64_t sub_1001C265C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (a1 - 782)))(v1);
}

void sub_1001C2678(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (1225351577
            * ((-1431559688 - (a1 ^ 0x637B64C4 | 0xAAAC21F8) + (a1 ^ 0x637B64C4 | 0x5553DE07)) ^ 0x15B262D5));
  __asm { BR              X15 }

uint64_t sub_1001C27A4@<X0>(int a1@<W8>)
{
  int v4 = v1 + a1;
  if (v4 >= 0) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = -v4;
  }
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((((v2 + 931) ^ (v2 - 298)) * (v5 < 0x83)) ^ v2)) - 8LL))();
}

uint64_t sub_1001C27D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, _DWORD *a26)
{
  *a26 = -957603800;
  BOOL v28 = a7 <= 0x54D0F385 && (int)(a7 + 724503674) < 724503675;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 + 8LL * ((v28 * (v26 + 43)) ^ (v26 - 477)))
                                                            - 8LL))( a1,  1422979973LL,  2871987322LL);
}

void sub_1001C28A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + swift_bridgeObjectRelease(v0[23], v4) = v3;
}

void sub_1001C34E0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (1178560073 * ((((2 * a1) | 0xD7F3130A) - a1 + 335967867) ^ 0x516DF1E7));
  __asm { BR              X14 }

uint64_t sub_1001C3614@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v14 = v11 > 0x10343D6A;
  *(_DWORD *)(a9 + 4LL * (v9 + a1)) = *(_DWORD *)(*(void *)(v12 - 0x1F589EA4AC42BDE1LL) + 4LL * (v9 + a1));
  if (v14 == v9 + 1244718163 < -271859051) {
    BOOL v14 = v9 + 1244718163 < (int)(v11 + 1875624597);
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v13 + 8LL * ((v14 * (47 * (v10 ^ 0x259) + 914)) ^ v10)) - 12LL))(4023108245LL);
}

uint64_t sub_1001C36BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  BOOL v17 = v13 + 1749279240 > 232702026 || v13 + 1749279240 < a13 - 1914781621;
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * ((v17 * ((v14 + 201) ^ 0x408)) ^ v14)) - 12LL))();
}

uint64_t sub_1001C3728@<X0>( int a1@<W1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(_DWORD *)(a10 + 4LL * (v10 + asub_10012CBAC((uint64_t)(v0 + 2)) = a1;
  int v16 = (v11 ^ 0x759 ^ (v12 + 1046)) + v10;
  BOOL v18 = v16 > v13 || v16 < v14;
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * ((31 * v18) ^ v11)) - 12LL))();
}

uint64_t sub_1001C3770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7
                                                                                          + 8LL
                                                                                          * (((v6 - 1038) * (v5 == 0)) ^ v6))
                                                                              - 227 * (v6 ^ 0x413u)
                                                                              + 904LL))( a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_1001C37AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, int a12, int a13, uint64_t a14)
{
  int v17 = 1374699841 * ((2 * ((v16 - 128) & 0x77A324F0) - (v16 - 128) - 2007180533) ^ 0xE5A8C302);
  *(void *)(v16 - 120) = a14;
  *(_DWORD *)(v16 - 128) = v15 - v17 + 488;
  *(_DWORD *)(v16 - 124) = v17 + ((a13 << 6) & 0xF777DB40) + ((32 * a13) ^ 0x7BBBEDBD) - 319504385;
  sub_10018E7B4(v16 - 128);
  return (*(uint64_t (**)(void))(v14 + 8LL * ((1241 * (*a10 - 1966800081 < ((v15 - 796) | 0x85u) + 2147483402)) ^ v15)))();
}

uint64_t sub_1001C3884( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v17 - 11sub_100129678(v0 + 2) = v15
                         + 1374699841
                         * ((-1520606683 - ((v17 - 128) | 0xA55D6225) + ((v17 - 128) | 0x5AA29DDA)) ^ 0x375685D3)
                         - 473;
  *(void *)(v17 - 128) = a14;
  *(void *)(v17 - 120) = &STACK[0x1F589EA4AC42BE29];
  sub_1001A2B9C(v17 - 128);
  *(_DWORD *)(v17 - 11sub_100129678(v0 + 2) = v15 + ((((v17 - 128) | 0xDD321A35) + (~(v17 - 128) | 0x22CDE5CA)) ^ 0x67A66256) * v16 - 113;
  *(void *)(v17 - 104) = a13;
  *(void *)(v17 - 120) = a14;
  uint64_t v18 = ((uint64_t (*)(uint64_t))*(&off_10027AEF0 + v15 - 843))(v17 - 128);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8LL
                                            * ((43
                                              * (*(_DWORD *)(v17 - 128)
                                               + ((((v15 - 177687949) & 0xA974AB7) - 1520777354) ^ (v15 - 663)) < 0xC32E9F1C)) ^ v15)))(v18);
}

uint64_t sub_1001C39B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  if (v18 + a16 + 1 >= 0) {
    int v19 = v18 + a16 + 1;
  }
  else {
    int v19 = ~(v18 + a16);
  }
  return ((uint64_t (*)(void))(*(void *)(v17
                                        + 8LL
                                        * (int)((999
                                               * (((v19 ^ 0xFDFBFDDF)
                                                 + (v16 ^ 0x773EFE04)
                                                 + ((2 * v19) & 0xFBF7FBBE)
                                                 + v18) >> 31)) ^ v16 ^ 0x504))
                            - (((v16 ^ 0x504) - 841241334) & 0x32244F4F ^ (35 * (v16 ^ 0xF2u)) ^ 0x2B6LL)))();
}

uint64_t sub_1001C3A70(uint64_t a1, int a2, uint64_t a3, int a4, int a5, unsigned int a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL
                                        * (((*(_DWORD *)(v8 + 4LL * a6) != ((a5 + v9) & a2 ^ (a8 + 571))) * a4) ^ a5))
                            - 8LL))();
}

void sub_1001C3AA0()
{
}

uint64_t sub_1001C3AAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v21 = 227 * (v17 ^ 0x441);
  int v22 = 1759421093
      * ((~((v20 - 128) ^ 0xEC288126 | 0x638D1C10) + (((v20 - 128) ^ 0xEC288126) & 0x638D1C10)) ^ 0xC327D29D);
  *(_DWORD *)(v20 - 11sub_100129678(v0 + 2) = v17 - v22 + 167;
  *(_DWORD *)(v20 - 128) = v14 - v22 + v21 - 586865161;
  *(void *)(v20 - 120) = v19;
  sub_1001BCB30(v20 - 128);
  *(void *)(v20 - 104) = a13;
  *(void *)(v20 - 120) = a14;
  *(_DWORD *)(v20 - 11sub_100129678(v0 + 2) = v21 + ((~((v20 - 128) | 0x7B656A90) + ((v20 - 128) & 0x7B656A90)) ^ 0x3E0EED0D) * v18 - 113;
  uint64_t v23 = v16(v20 - 128);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8LL
                                            * (((*(_DWORD *)(v20 - 128) - 1520777354 + 49 * (v21 ^ 0x389u) + 109 < 0xC32E9F1C)
                                              * (((v21 - 902) | 0xB1) ^ 0x9C)) ^ v21)))(v23);
}

uint64_t sub_1001C3BE8()
{
  *(_DWORD *)(v6 - 11sub_100129678(v0 + 2) = v0 + (((~(v6 - 128) & 0x5B413A9E) - (~(v6 - 128) | 0x5B413A9F)) ^ 0xE1D542FD) * v4 + 612;
  *(void *)(v6 - 104) = v3;
  *(void *)(v6 - 120) = v5;
  uint64_t v7 = v2(v6 - 128);
  return ((uint64_t (*)(uint64_t))(*(void *)(v1
                                                      + 8LL
                                                      * (((*(_DWORD *)(v6 - 128) > 0x5AA53727u) * (v0 + 1864)) ^ v0))
                                          - 12LL))(v7);
}

uint64_t sub_1001C3C70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(_DWORD *)(v17 - 128) = v13
                         - 108757529 * ((((2 * (v17 - 128)) | 0x4F74FB78) - (v17 - 128) - 666533308) ^ 0xC7261F97)
                         + 557;
  *(void *)(v17 - 120) = a13;
  *(void *)(v17 - 11sub_100129678(v0 + 2) = v16;
  uint64_t v18 = ((uint64_t (*)(uint64_t))((char *)*(&off_10027AEF0 + (v13 ^ 0xB)) - 8))(v17 - 128);
  return ((uint64_t (*)(uint64_t))(*(void *)(v14
                                                      + 8LL * (((((v13 + 905) | 5) - 1082) * (v15 == 888932153)) ^ v13))
                                          - 94 * (v13 ^ 0xB5u)
                                          + 176LL))(v18);
}

uint64_t sub_1001C3D2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v19 - 11sub_100129678(v0 + 2) = v14 + ((v19 - 1097351608 - 2 * ((v19 - 128) & 0xBE97BEC8)) ^ 0x403C6AA) * v17 + 607;
  *(void *)(v19 - 120) = a14;
  *(void *)(v19 - 104) = v18;
  uint64_t v20 = v16(v19 - 128);
  return ((uint64_t (*)(uint64_t))(*(void *)(v15
                                                      + 8LL
                                                      * ((1273
}

uint64_t sub_1001C3DBC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(v7 + 32);
  *(_DWORD *)(v4 - 11sub_100129678(v0 + 2) = a3 + 1374699841 * ((((v4 - 128) | 0xF444FDE1) + (~(v4 - 128) | 0xBBB021E)) ^ 0x99B0E5E9) - 152;
  *(void *)(v4 - 128) = v3;
  *(void *)(v4 - 120) = v5;
  return sub_1001A2B9C(v4 - 128);
}

void sub_1001C400C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16)
     - 460628867 * (((a1 ^ 0x68759CF4 | 0x87CE5E15) - ((a1 ^ 0x68759CF4) & 0x87CE5E15)) ^ 0xA32D409C);
  __asm { BR              X10 }

uint64_t sub_1001C414C()
{
  BOOL v5 = *(_DWORD *)(v2 + 48) - v0 == ((167 * (v1 ^ 0x747)) ^ 0x63D69CEA)
    || (*(void *)(v2 + 32) | *(void *)(v2 + 56)) == 0LL;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((62 * v5) ^ v1)) - 8LL))();
}

uint64_t sub_1001C41A8()
{
  BOOL v4 = v1[5] != 0x1A8FA111108FB322LL && (*v1 | v1[3]) != 0LL;
  return (*(uint64_t (**)(void))(v2 + 8LL * ((v4 * (v0 - 488)) ^ v0)))();
}

uint64_t sub_1001C41F0@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 + 8LL * ((((((v17 - 369) ^ (v16 == 0)) & 1) == 0) * (((v17 + 275) | 0xC4) - 921)) ^ (v17 + 800))) - 4LL))( a7 - 0xD9A2EFA0D5B2BA6LL,  1178560073LL,  a1,  a2,  a3,  a4,  a5,  a6,  v18,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a7 - 0xD9A2EFA0D5B2876LL);
}

uint64_t sub_1001C430C@<X0>( int a1@<W1>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  unsigned int v31 = (v22 + 390272035) & 0xE8BCEE5A;
  int v32 = ((((v30 - 144) | 0xA1543A50) - (v30 - 144) + ((v30 - 144) & 0x5EABC5A8)) ^ 0x1BC04232) * a1;
  *(_DWORD *)(v30 - 140) = v22 - v32 + 845;
  *(_DWORD *)(v30 - 136) = v23 + v32 + (v31 ^ 0x6C389C7);
  *(void *)(v30 - 128) = v20;
  *(void *)(v30 - 120) = v29;
  uint64_t v47 = a2 + v21;
  (*(void (**)(uint64_t))(v24 + 8LL * (v22 ^ 0x3FD)))(v30 - 144);
  HIDWORD(a10) = 3 * (v31 ^ 0x6ED);
  uint64_t v48 = v25;
  *(_DWORD *)(v30 - 128) = (v31 - 1051) ^ (628203409
                                         * ((((2 * (v30 - 144)) | 0xD665260C) - (v30 - 144) + 349007098) ^ 0x69BA9F35));
  *(void *)(v30 - 144) = a19;
  *(void *)(v30 - 136) = a20;
  int v33 = (void (*)(uint64_t))(*(void *)(v24 + 8LL * (int)(v31 - 1569)) - 4LL);
  v33(v30 - 144);
  HIDWORD(a7) = v31 - 1023;
  *(void *)(v30 - 120) = a19;
  *(void *)(v30 - 11sub_100129678(v0 + 2) = v27;
  *(_DWORD *)(v30 - 128) = (v31 - 1023) ^ (1178560073
                                         * ((((v30 - 144) | 0x21D009AC) - (v30 - 144) + ((v30 - 144) & 0xDE2FF650)) ^ 0x9B4471CE));
  *(void *)(v30 - 144) = a20;
  *(void *)(v30 - 136) = v29;
  uint64_t v45 = (void (*)(uint64_t))((char *)*(&off_10027AEF0 + (int)(v31 - 1438)) - 12);
  uint64_t v46 = v29;
  v45(v30 - 144);
  LODWORD(a8) = v31 - 894;
  *(_DWORD *)(v30 - 11sub_100129678(v0 + 2) = v31 - 894 + 1224239923 * ((v30 + 1260386870 - 2 * ((v30 - 144) & 0x4B1FFAC6)) ^ 0xB9AC0711);
  *(void *)(v30 - 144) = a20;
  *(void *)(v30 - 136) = v27;
  *(void *)(v30 - 104) = v25;
  *(void *)(v30 - 128) = v27;
  *(void *)(v30 - 120) = a19;
  int v34 = (void (*)(uint64_t))*(&off_10027AEF0 + (int)(v31 - 1518));
  v34(v30 - 144);
  HIDWORD(a4) = v31 - 779;
  *(_DWORD *)(v30 - 120) = v31 - 779 + 1225351577 * ((v30 - 144) ^ 0x239AD816);
  *(void *)(v30 - 11sub_100129678(v0 + 2) = a12;
  *(void *)(v30 - 104) = a19;
  *(void *)(v30 - 144) = a20;
  *(void *)(v30 - 136) = v27;
  *(void *)(v30 - 128) = v27;
  int v35 = (void (*)(uint64_t))((char *)*(&off_10027AEF0 + (int)(v31 ^ 0x67C)) - 12);
  v35(v30 - 144);
  *(void *)(v30 - 144) = a15;
  *(void *)(v30 - 136) = a20;
  *(_DWORD *)(v30 - 128) = (v31 - 1051) ^ (628203409
                                         * (((v30 - 144) & 0xDBC4E177 | ~((v30 - 144) | 0xDBC4E177)) ^ 0xA6B312BB));
  v33(v30 - 144);
  *(_DWORD *)(v30 - 128) = (v31 - 1023) ^ (1178560073
                                         * ((-2
                                           - (((v30 - 144) ^ 0x9C01100 | 0x56112CF5)
                                            + ((v30 - 144) ^ 0x4002CC4 | 0xA9EED30A))) ^ 0x48ABBA59));
  *(void *)(v30 - 120) = a15;
  *(void *)(v30 - 11sub_100129678(v0 + 2) = v28;
  *(void *)(v30 - 144) = a20;
  *(void *)(v30 - 136) = v46;
  v45(v30 - 144);
  *(void *)(v30 - 144) = a20;
  *(void *)(v30 - 136) = v28;
  *(void *)(v30 - 104) = v48;
  *(void *)(v30 - 128) = v28;
  *(void *)(v30 - 120) = a15;
  *(_DWORD *)(v30 - 11sub_100129678(v0 + 2) = v31
                         - 894
                         + 1224239923 * ((2 * ((v30 - 144) & 0x10151408) - (v30 - 144) - 269816843) ^ 0x1D591622);
  v34(v30 - 144);
  *(void *)(v30 - 136) = v28;
  *(void *)(v30 - 128) = v28;
  *(_DWORD *)(v30 - 120) = v31
                         - 779
                         + 1225351577 * ((2 * ((v30 - 144) & 0x7DE927C0) - (v30 - 144) - 2112432067) ^ 0xA18C002B);
  *(void *)(v30 - 11sub_100129678(v0 + 2) = a13;
  *(void *)(v30 - 104) = a15;
  *(void *)(v30 - 144) = a20;
  v35(v30 - 144);
  *(void *)(v30 - 136) = v28;
  *(void *)(v30 - 128) = v27;
  *(_DWORD *)(v30 - 144) = v31
                         - 108757529
                         * ((((2 * ((v30 - 144) ^ 0x139270AD)) | 0xB81B59F6) - ((v30 - 144) ^ 0x139270AD) + 603083525) ^ 0x2F03BE7D)
                         - 870;
  ((void (*)(uint64_t))((char *)*(&off_10027AEF0 + (int)(v31 - 1422)) - 8))(v30 - 144);
  *(void *)(v30 - 136) = v28;
  *(_DWORD *)(v30 - 140) = (v31 - 107) ^ (460628867
                                        * ((-1606058528 - ((v30 - 144) | 0xA0457DE0) + ((v30 - 144) | 0x5FBA821F)) ^ 0x132C0062));
  sub_1001AE554(v30 - 144);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, char *, uint64_t, void, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 + 8LL * (int)((203 * (*(_DWORD *)(v30 - 144) < (HIDWORD(a10) ^ 0x73B3F33Eu))) ^ v31)) - ((v31 + 1790706611) & 0x9543F7F7 ^ 0x1FDLL)))( v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  a3,  a4,  v45,  v46,  a7,  a8,  (char *)*(&off_10027AEF0 + (int)(v31 - 1515)) - 12,  a10,  (v31 + 1790706611) & 0x9543F7F7,  v34,  a13,  v47,  a15,  a16,  a17);
}

uint64_t sub_1001C4884( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t), uint64_t a16, uint64_t a17, void (*a18)(uint64_t), uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  *(_DWORD *)(v36 - 144) = (v32 - 217) ^ (235795823
                                        * (((((v36 - 144) | 0x98136FF2) ^ 0xFFFFFFFE) - (~(v36 - 144) | 0x67EC900D)) ^ 0xF341D954));
  *(void *)(v36 - 136) = v35;
  *(void *)(v36 - 128) = v34;
  v31(v36 - 144);
  *(_DWORD *)(v36 - 11sub_100129678(v0 + 2) = v32
                         + 215
                         + 1224239923
                         * ((((v36 - 144) ^ 0xF9BB0CB1 | 0x15437DFD) - (((v36 - 144) ^ 0xF9BB0CB1) & 0x15437DFD)) ^ 0x1E4B8C9B);
  *(void *)(v36 - 104) = a31;
  *(void *)(v36 - 128) = v35;
  *(void *)(v36 - 120) = v34;
  *(void *)(v36 - 144) = a26;
  *(void *)(v36 - 136) = v35;
  a18(v36 - 144);
  *(_DWORD *)(v36 - 11sub_100129678(v0 + 2) = v32
                         + 215
                         + 1224239923 * ((((v36 - 144) | 0x639614A3) + (~(v36 - 144) | 0x9C69EB5C)) ^ 0x9125E975);
  *(void *)(v36 - 104) = v35;
  *(void *)(v36 - 144) = a26;
  *(void *)(v36 - 136) = a20;
  *(void *)(v36 - 128) = v35;
  *(void *)(v36 - 120) = v34;
  a18(v36 - 144);
  *(void *)(v36 - 136) = v35;
  *(void *)(v36 - 128) = a25;
  *(_DWORD *)(v36 - 144) = (v32 + 426522516) ^ (235795823
                                              * (((v36 - 144) & 0x4B6C9771 | ~((v36 - 144) | 0x4B6C9771)) ^ 0x203E21D7));
  sub_1001CF96C(v36 - 144);
  *(_DWORD *)(v36 - 144) = (v32 - 217) ^ (235795823
                                        * ((((v36 - 144) ^ 0xE1EEABAC) & 0xD6C0ADF9 | ~((v36 - 144) ^ 0xE1EEABAC | 0xD6C0ADF9)) ^ 0x5C7CB0F3));
  *(void *)(v36 - 136) = v35;
  *(void *)(v36 - 128) = a27;
  a15(v36 - 144);
  *(_DWORD *)(v36 - 128) = v32
                         + 1374699841 * ((2 * ((v36 - 144) & 0xB04ADC0) - (v36 - 144) + 1962627641) ^ 0x190F4A30)
                         - 66;
  *(void *)(v36 - 144) = v35;
  *(void *)(v36 - 136) = a27;
  uint64_t v37 = sub_1001A2B9C(v36 - 144);
  return ((uint64_t (*)(uint64_t))(*(void *)(v33 + 8LL
                                                            * ((((v32 ^ 0x21D) - 994) * (a24 == 0)) | (v32 + 1371)))
                                          - ((250 * (v32 ^ 0x1F1u)) ^ 0x3E4LL)))(v37);
}

uint64_t sub_1001C4AF8()
{
  int v4 = 535753261 * ((v3 + 1435357870 - 2 * ((v3 - 144) & 0x558DD33E)) ^ 0x5F79DD11);
  *(_DWORD *)(v3 - 128) = v0 - v4 - 685;
  *(void *)(v3 - 120) = v2;
  *(void *)(v3 - 136) = v6;
  *(_DWORD *)(v3 - 144) = (v8 + 76549659 + (v0 ^ 0x21D)) ^ v4;
  uint64_t result = ((uint64_t (*)(uint64_t))((char *)*(&off_10027AEF0 + v0 - 778) - 8))(v3 - 144);
  *(_DWORD *)(v7 - 0x1A8FA111108FB322LL) = v8;
  *(_DWORD *)(v1 + 64) = 2084229119;
  return result;
}

uint64_t sub_1001C4C74(uint64_t a1)
{
  int v1 = 535753261 * ((a1 - 1922189914 - 2 * (a1 & 0x8D6DB5A6)) ^ 0x8799BB89);
  int v2 = *(_DWORD *)(a1 + 16) + v1;
  int v3 = *(_DWORD *)a1 ^ v1;
  int v4 = *(_DWORD *)(*(void *)(a1 + 24) - 0x1F589EA4AC42BDE5LL);
  unsigned int v6 = v4 - 1966800080;
  BOOL v5 = v4 - 1966800080 < 0;
  unsigned int v7 = 1966800080 - v4;
  if (v5) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = v6;
  }
  return ((uint64_t (*)(void))(*((void *)*(&off_10027AEF0 + v2 - 203)
                              + ((1290 * ((v3 - 1751559471) >= 4 * (unint64_t)v8)) ^ v2)
                              - 1)
                            - 4LL))();
}

uint64_t sub_1001C4D34(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2
                                                               + 8LL
                                                               * ((81 * (((v1 == 1751559471) ^ v3) & 1)) ^ v3))
                                                   - 4LL))( a1,  1779124031LL);
}

uint64_t sub_1001C4D6C()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((595 * (45 * (v1 ^ 0x13C) == 315)) ^ v1 ^ 0x439)) - 8LL))();
}

uint64_t sub_1001C4DF4@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W8>)
{
  *(_BYTE *)(*(void *)(a1 + 8) + (((a2 + 965) | 2) ^ (a5 + 1281)) + a4) = (a3 ^ v7) >> v8;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (a2 ^ (844 * (a4 - 1 != v6)))) - 4LL))();
}

uint64_t sub_1001C4E44()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((595 * (v1 + 8 == 45 * (v2 ^ 0x505) - 283)) ^ v2)) - 8LL))();
}

uint64_t sub_1001C4E80(uint64_t a1)
{
  BOOL v7 = v4 + 1333274437 > 1274283598 || v4 + 1333274437 < v3;
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 + 8LL * (v5 ^ (7 * v7)))
                                                                    - 7 * (v5 ^ 0x52Fu)
                                                                    + 307LL))( a1,  7 * (v5 ^ 0x52Fu),  3337363496LL,  v1);
}

uint64_t sub_1001C4EDC@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  return sub_1001C4DF4(a1, v5 - 967, *(_DWORD *)(*v3 + 4LL * (v4 - 2088493125 + v5 - 967)), v2, a2);
}

uint64_t sub_1001C4F08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 3sub_100129678(v0 + 2) = a2;
  return result;
}

void sub_1001C4F10(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36) ^ (235795823
                             * ((-2 - ((a1 ^ 0x29040430 | 0x96E8ABCB) + (a1 ^ 0x10C0A082 | 0x69175434))) ^ 0x52961214));
  __asm { BR              X1 }

uint64_t sub_1001C505C()
{
  return ((uint64_t (*)(void, uint64_t))(*(void *)(v2 + 8LL * (v0 ^ (15 * (v1 == 0x324CCD1C)))) - 8LL))( (v0 - 448601949) & 0x1ABD1F2F ^ 0x2862ABBBu,  70853752LL);
}

uint64_t sub_1001C50C0@<X0>(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  BOOL v12 = v9 > a1;
  *(_BYTE *)(a3 + (a2 - 708537swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52)) = *(_BYTE *)(v3 + (a2 - 70853752)) ^ *(_BYTE *)(v5 + (((_BYTE)a2 - 120) & 0xF)) ^ *(_BYTE *)(v6 + (((_BYTE)a2 - 120) & 0xF)) ^ *(_BYTE *)(v4 + ((a2 - 70853752) & 0xFLL)) ^ (97 * ((a2 - 120) & 0xF)) ^ 0x2C;
  unsigned int v13 = ((v7 - 45) ^ 0xD36429DF) + a2;
  int v14 = v12 ^ (v13 < v8);
  BOOL v15 = v13 < v10;
  if (!v14) {
    BOOL v12 = v15;
  }
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * ((15 * !v12) ^ v7)) - 8LL))();
}

uint64_t sub_1001C515C(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (int)(((((a1 - 80) | 0x20) ^ (a1 + 242689694) & 0xF188D5FB ^ 0x478)
                                               * (((2 * v2) & 0xF5F4FBBC ^ v1) + (v2 ^ 0x48B6B0C2) - 1209018398 != 854218176)) | a1))
                            - 8LL))();
}

uint64_t sub_1001C51D8(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * (((((97 * (a5 ^ 0x1F1) + 1502) | 0x12) - 401)
}

uint64_t sub_1001C5234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * (((a6 + v7 - 16 < (a7 ^ 0xFFFFFF32)) * (((a7 + 1392) | 0x80) ^ 0x69A)) | a7))
                            - 8LL))();
}

uint64_t sub_1001C5274@<X0>(int a1@<W2>, int a2@<W3>, int a3@<W5>, int a4@<W6>, uint64_t a5@<X8>)
{
  int v10 = a4 ^ 0x28;
  int v11 = (a4 ^ 0x670) - 1188;
  uint64_t v12 = (a2 + a1 + a3) + a5;
  uint64_t v13 = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)a3) & 0xF;
  unint64_t v14 = v13 + v7 - v12;
  unint64_t v15 = (v13 | v8) - v12;
  unint64_t v16 = (v13 | v6) - v12;
  BOOL v20 = (unint64_t)(v5 - a5) > 0xF && v14 > 0xF && v15 > 0xF && v16 > 0xF;
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * (((v11 ^ 0x218) * v20) ^ v10)) - 8LL))();
}

uint64_t sub_1001C52EC(unsigned int a1)
{
  uint64_t v5 = (uint64_t (*)(void))(*(void *)(v2
                                     + 8LL
                                     * (((a1 < ((322 * (v1 ^ 0x20D)) ^ 0x3D6u)) * ((13 * (v1 ^ 0x230)) ^ 0x33E)) ^ v1))
                         - 4LL);
  *(_DWORD *)(v3 - 1swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  return v5();
}

uint64_t sub_1001C5340@<X0>( int a1@<W0>, int a2@<W2>, int a3@<W3>, int a4@<W5>, int a5@<W6>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41)
{
  v54.val[1].i64[0] = (v46 + 13) & 0xF;
  v54.val[1].i64[1] = (v46 + 12) & 0xF;
  v54.val[2].i64[0] = (v46 + 11) & 0xF;
  v54.val[2].i64[1] = (v46 + 10) & 0xF;
  v54.val[3].i64[0] = (v46 + 9) & 0xF;
  v54.val[3].i64[1] = (v46 + 8) & 0xF;
  v55.val[0].i64[0] = (v46 + 7) & 0xF;
  v55.val[0].i64[1] = (v46 + 6) & 0xF;
  v55.val[1].i64[0] = (v46 + 5) & 0xF;
  v55.val[1].i64[1] = (v46 + 4) & 0xF;
  v55.val[2].i64[0] = (*(_DWORD *)(v45 - 116) + 3) & 0xF;
  v55.val[2].i64[1] = (*(_DWORD *)(v45 - 116) + 2) & 0xF;
  v55.val[3].i64[0] = (*(_DWORD *)(v45 - 116) + 1) & 0xF;
  v55.val[3].i64[1] = *(_DWORD *)(v45 - 116) & 0xF;
  unsigned int v47 = a3 + a2 + a4;
  v48.i64[0] = 0x6161616161616161LL;
  v48.i64[1] = 0x6161616161616161LL;
  v49.i64[0] = 0x2C2C2C2C2C2C2C2CLL;
  v49.i64[1] = 0x2C2C2C2C2C2C2C2CLL;
  v54.val[0].i64[0] = v47 & 0xF;
  v54.val[0].i64[1] = (v46 + 14) & 0xF;
  v50.i64[0] = vqtbl4q_s8(v54, (int8x16_t)xmmword_1001F5E20).u64[0];
  v50.i64[1] = vqtbl4q_s8(v55, (int8x16_t)xmmword_1001F5E20).u64[0];
  int8x16_t v51 = vrev64q_s8( veorq_s8( veorq_s8(*(int8x16_t *)(v41 - 15 + v47), *(int8x16_t *)(v43 + v54.val[0].i64[0] - 15)),  veorq_s8(*(int8x16_t *)(v44 + v54.val[0].i64[0] - 15), *(int8x16_t *)(v42 + v54.val[0].i64[0] - 15))));
  int8x16_t v52 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v51, v51, 8uLL), v49), vmulq_s8(v50, v48)));
  *(int8x16_t *)(a6 - 15 + v47) = vextq_s8(v52, v52, 8uLL);
  return ((uint64_t (*)(void))(*(void *)(a41 + 8LL * ((1156 * ((a1 & 0xFFFFFFF0) == 16)) ^ a5))
                            - ((a5 + 634) | 8u)
                            + 1444LL))();
}

void sub_1001C54BC()
{
}

uint64_t sub_1001C54C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
}

uint64_t sub_1001C5514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v7
                                                      + 8LL
}

uint64_t sub_1001C5564@<X0>( int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41)
{
  *(_DWORD *)(v48 - 168) = v41;
  *(_DWORD *)(v48 - 160) = a1;
  *(void *)(v48 - 136) = a6 - 7;
  *(void *)(v48 - 128) = v42 - 7;
  *(_DWORD *)(v48 - 176) = a1 & 0xFFFFFFF8;
  *(_DWORD *)(v48 - 144) = 8 - (a1 & 0xFFFFFFF8);
  int v50 = -a5;
  int v51 = a2 + a4 + a3;
  *(_DWORD *)(v48 - 15sub_100129678(v0 + 2) = v51 + 8;
  uint64_t v52 = v49 + v50 + (((_DWORD)v47 - 226996179) & 0xD87ADFF ^ (v46 + 397));
  v54.val[0].i64[0] = ((_BYTE)v49 + (_BYTE)v50 + ((v47 + 45) ^ (v46 - 115))) & 0xF;
  v54.val[0].i64[1] = ((_BYTE)v51 + 14 + (_BYTE)v50) & 0xF;
  v54.val[1].i64[0] = ((_BYTE)v51 + 13 + (_BYTE)v50) & 0xF;
  v54.val[1].i64[1] = ((_BYTE)v51 + 12 + (_BYTE)v50) & 0xF;
  v54.val[2].i64[0] = ((_BYTE)v51 + 11 + (_BYTE)v50) & 0xF;
  v54.val[2].i64[1] = ((_BYTE)v51 + 10 + (_BYTE)v50) & 0xF;
  v54.val[3].i64[0] = ((_BYTE)v51 + 9 + (_BYTE)v50) & 0xF;
  v54.val[3].i64[1] = (*(_DWORD *)(v48 - 152) + (_BYTE)v50) & 0xF;
  *(int8x8_t *)(*(void *)(v48 - 136) + v5sub_100129678(v0 + 2) = vrev64_s8( veor_s8( veor_s8( vrev64_s8( veor_s8( veor_s8( *(int8x8_t *)(*(void *)(v48 - 128) + v52),  *(int8x8_t *)(v44 + (v52 & 0xF) - 7)),  veor_s8( *(int8x8_t *)(v45 + (v52 & 0xF) - 7),  *(int8x8_t *)(v43 + (v52 & 0xF) - 7)))),  (int8x8_t)0x2C2C2C2C2C2C2C2CLL),  vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8( v54,  (int8x16_t)xmmword_1001F5E30),  (int8x8_t)0x6161616161616161LL)));
  return ((uint64_t (*)(uint64_t, __n128))(*(void *)(a41
                                                              + 8LL
                                                              * (int)((15 * (*(_DWORD *)(v48 - 144) == v50)) ^ v47))
                                                  - 12LL))( v47,  (__n128)xmmword_1001F5E30);
}

void sub_1001C56DC()
{
}

uint64_t sub_1001C56E8()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * (((((v0 ^ 0x741) - 393) ^ 0x172)
                                          * (*(_DWORD *)(v2 - 160) == *(_DWORD *)(v2 - 176))) ^ v0))
                            - 4LL))();
}

uint64_t sub_1001C5728@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  uint64_t v11 = (a1 + v7);
  *(_BYTE *)(a2 + v11) = *(_BYTE *)(v2 + v11) ^ *(_BYTE *)(v4 + (v11 & 0xF)) ^ *(_BYTE *)(v5 + (v11 & 0xF)) ^ *(_BYTE *)(v3 + (v11 & 0xF)) ^ ((v11 & 0xF) * v8) ^ 0x2C;
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((1458 * ((v9 ^ 0x39B) + a1 - 1322 == v6)) ^ (v9 - 1479))) - 8LL))();
}

uint64_t sub_1001C5794@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  uint64_t v39 = *(void *)(v36 + 24);
  *(int8x16_t *)(v38 - 11sub_100129678(v0 + 2) = veorq_s8( *(int8x16_t *)(*(void *)(v36 + 40) - 0x1F962A9297594DE9LL),  (int8x16_t)xmmword_1001F5E60);
  if (a9) {
    BOOL v40 = v39 == 0xCDF342D76DC35A7LL;
  }
  else {
    BOOL v40 = 1;
  }
  int v41 = !v40;
  LODWORD(a1sub_100129678(v0 + 2) = v35 << (((a7 - 37) | 0x80) ^ 0x85);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 + 8LL * (int)((v41 * (a7 - 1237)) | a7)) - 4LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35);
}

uint64_t sub_1001C581C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  int v36 = (a11 & 0xEF6AF36E) + (v34 ^ 0xF7B579B7);
  int v37 = ((a11 & 0x6E) + (v34 ^ 0xB7) + 9) & 0xF;
  BOOL v39 = v36 == -139101769
     || v37 != (((_DWORD)a7 + 411720821) & 0xE7759EE5) + (((_DWORD)a7 - 1282037050) & 0x4C6A53F7) - 1131;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 8LL * ((127 * v39) ^ ((int)a7 + 142))))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34);
}

uint64_t sub_1001C58AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, int a43, int a44)
{
  return ((uint64_t (*)(void))(*(void *)(v44
                                        + 8LL
                                        * (a44 ^ (1327
                                                * ((((a10 - (a12 & 0x429E29E6) - 1689229390) << ((a44 + 60) ^ 0xC1)) & 0x9FBDFF56 ^ 0x29C2946)
                                                 + ((a10 - (a12 & 0x429E29E6) - 1689229390) ^ 0xEE91EB58)
                                                 - 1074809906 != 265204601))))
                            - 12LL))();
}

uint64_t sub_1001C5984(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
}

uint64_t sub_1001C5A00(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
}

uint64_t sub_1001C5A3C@<X0>(int a1@<W0>, int a2@<W5>, unint64_t a3@<X8>)
{
  uint64_t v9 = (a1 + v6 + v7);
  unint64_t v10 = v9 + a3 + 1;
  uint64_t v11 = ((_BYTE)a1 + (_BYTE)v6 + (_BYTE)v7) & 0xF;
  unint64_t v12 = v4 + v11 - v9;
  unint64_t v13 = v11 + v4 + 1;
  unint64_t v14 = v11 - v9 + v5 + 2;
  unint64_t v15 = v5 + v11 + ((857 * (a2 ^ 0x1E1u)) ^ 0x6B1LL);
  uint64_t v16 = v11 + v3;
  unint64_t v17 = v16 - v9 + 4;
  unint64_t v18 = v16 + 5;
  BOOL v20 = v13 > a3 && v12 < v10;
  int v22 = v14 < v10 && v15 > a3 || v20;
  if (v18 <= a3 || v17 >= v10) {
    int v24 = v22;
  }
  else {
    int v24 = 1;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((1928 * (v24 ^ 1)) ^ a2)) - 12LL))();
}

uint64_t sub_1001C5ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v7
                                                                       + 8LL
                                                                       * ((775
                                                                         * (((((((a6 ^ 0x33) - 1759214131) & 0x68DB7FFB)
                                                                             - 1571) ^ (v6 < 0x10)) & 1) == 0)) ^ a6 ^ 0x33))
                                                           - 4LL))( a1,  a2,  0LL);
}

uint64_t sub_1001C5B30@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W3>, uint64_t a4@<X8>)
{
  v16.val[1].i64[0] = ((_BYTE)a2 + 12) & 0xF;
  v16.val[1].i64[1] = ((_BYTE)a2 + 11) & 0xF;
  v16.val[2].i64[0] = ((_BYTE)a2 + 10) & 0xF;
  v16.val[2].i64[1] = ((_BYTE)a2 + 9) & 0xF;
  v16.val[3].i64[0] = ((_BYTE)a2 + 8) & 0xF;
  v16.val[3].i64[1] = ((_BYTE)a2 + 7) & 0xF;
  unsigned int v11 = a1 + v8 + v9;
  v12.i64[0] = 0x7777777777777777LL;
  v12.i64[1] = 0x7777777777777777LL;
  v16.val[0].i64[0] = v11 & 0xF;
  v16.val[0].i64[1] = ((_BYTE)a2 + 13) & 0xF;
  v13.i64[0] = vqtbl4q_s8(v16, (int8x16_t)xmmword_1001F5E20).u64[0];
  v17.val[0].i64[1] = ((_BYTE)a2 + 5) & 0xF;
  v17.val[1].i64[1] = ((_BYTE)a2 + 3) & 0xF;
  v17.val[2].i64[1] = (a2 + 1) & 0xF;
  v17.val[3].i64[1] = ((_BYTE)a2 - 1) & 0xF;
  v17.val[0].i64[0] = ((_BYTE)a2 + 6) & 0xF;
  v17.val[1].i64[0] = ((_BYTE)a2 + 4) & 0xF;
  v17.val[2].i64[0] = (a2 + 2) & 0xF;
  v17.val[3].i64[0] = a2 & 0xF;
  v13.i64[1] = vqtbl4q_s8(v17, (int8x16_t)xmmword_1001F5E20).u64[0];
  int8x16_t v14 = vrev64q_s8(vmulq_s8(v13, v12));
  *(int8x16_t *)(a4 - 15 + v11) = veorq_s8( veorq_s8( veorq_s8( veorq_s8( *(int8x16_t *)(v5 + v16.val[0].i64[0] - 15),  *(int8x16_t *)(a4 - 15 + v11)),  *(int8x16_t *)(v16.val[0].i64[0] + v6 - 13)),  *(int8x16_t *)(v4 + v16.val[0].i64[0] + ((a3 - 242) ^ 0x80LL) - 15)),  vextq_s8(v14, v14, 8uLL));
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((1916 * ((v7 & 0xFFFFFFF0) == 16)) ^ a3)) - 4LL))();
}

void sub_1001C5C80()
{
}

uint64_t sub_1001C5C8C@<X0>( unsigned __int8 *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  int v41 = v36 ^ 0x555;
  uint64_t v42 = (char *)*(&off_10027AEF0 + (v36 ^ 0x373u)) - 12;
  HIDWORD(v4sub_100129678(v0 + 3) = v42[*(unsigned __int8 *)(v38 - 0xCDF342D76DC35A6LL) ^ 0x85LL];
  LODWORD(v4sub_100129678(v0 + 3) = (HIDWORD(v43) ^ 0x40) << 24;
  int v44 = ((v43 >> 30) ^ 0x9F) << 16;
  uint64_t v45 = (char *)*(&off_10027AEF0 + (v36 & 0x6DDCF466)) - 12;
  int v46 = v45[*(unsigned __int8 *)(v38 - 0xCDF342D76DC359CLL) ^ 0xBFLL];
  *(_DWORD *)(v40 - 128) = v39;
  HIDWORD(v4sub_100129678(v0 + 3) = v36 ^ 0x555 ^ v46 ^ 0xE;
  LODWORD(v4sub_100129678(v0 + 3) = (v46 ^ 0xC0) << 24;
  LOBYTE(v46) = v43 >> 28;
  HIDWORD(v4sub_100129678(v0 + 3) = v42[*(unsigned __int8 *)(v38 - 0xCDF342D76DC35A2LL) ^ 0x6FLL];
  LODWORD(v4sub_100129678(v0 + 3) = (HIDWORD(v43) ^ 0x40) << 24;
  uint64_t v47 = (char *)*(&off_10027AEF0 + v36 - 885) - 4;
  uint64_t v48 = (char *)*(&off_10027AEF0 + (v36 ^ 0x343u)) - 8;
  char v49 = v48[*(unsigned __int8 *)(v38 - 0xCDF342D76DC359BLL) ^ 0xD8LL];
  int v50 = (((v43 >> 30) ^ 0x68) << 16) | ((v47[*(unsigned __int8 *)(v38
                                                                                                  - 0xCDF342D76DC35A1LL) ^ 0xDFLL] ^ 0xDB) << 8);
  int v51 = v45[*(unsigned __int8 *)(v38 - 0xCDF342D76DC3598LL) ^ 0xBCLL];
  HIDWORD(v4sub_100129678(v0 + 3) = v51 ^ 0xC;
  LODWORD(v4sub_100129678(v0 + 3) = (v51 ^ 0xC0) << 24;
  LOBYTE(v51) = v43 >> 28;
  uint64_t v52 = v51 ^ 0x68LL;
  int v53 = v50 | ((v48[*(unsigned __int8 *)(v38 - 0xCDF342D76DC35A3LL) ^ 0xAFLL] ^ 0x9A) << 24);
  int v54 = v45[*(unsigned __int8 *)(v38 - 0xCDF342D76DC35A0LL) ^ 0x98LL];
  HIDWORD(v4sub_100129678(v0 + 3) = v54 ^ 0xC;
  LODWORD(v4sub_100129678(v0 + 3) = (v54 ^ 0xC0) << 24;
  unsigned int v55 = v53 & 0xFFFFFF00 | (v43 >> 28);
  LODWORD(v45) = v45[*(unsigned __int8 *)(v38 - 0xCDF342D76DC35A4LL) ^ 0xD0LL];
  HIDWORD(v4sub_100129678(v0 + 3) = v45 ^ 0xC;
  LODWORD(v4sub_100129678(v0 + 3) = (v45 ^ 0xC0) << 24;
  LOBYTE(v45) = (v43 >> 28) ^ 0x3C;
  HIDWORD(v4sub_100129678(v0 + 3) = v42[*(unsigned __int8 *)(v38 - 0xCDF342D76DC359ALL) ^ 0xB6LL];
  LODWORD(v4sub_100129678(v0 + 3) = (HIDWORD(v43) ^ 0x40) << 24;
  unsigned int v56 = v44 & 0xFFFFFF00 | ((v47[*(unsigned __int8 *)(v38 - 0xCDF342D76DC35A5LL) ^ 0x49LL] ^ 0x51) << 8) | ((v48[*v37 ^ 0xFELL] ^ 0x43) << 24) | v45;
  uint64_t v57 = (v43 >> 30) ^ 0x21LL;
  HIDWORD(v4sub_100129678(v0 + 3) = v42[*(unsigned __int8 *)(v38 - 0xCDF342D76DC359ELL) ^ 0xC8LL];
  LODWORD(v4sub_100129678(v0 + 3) = (HIDWORD(v43) ^ 0x40) << 24;
  unint64_t v58 = (((v47[*(unsigned __int8 *)(v38 - 0xCDF342D76DC3599LL) ^ 0xC7LL] ^ 0x1ALL) << 8) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v49 ^ 0x4Au) << 24) | (v57 << 16) | v52) ^ 0x75F49EF4;
  uint64_t v59 = ((unsigned __int16)((((v47[*(unsigned __int8 *)(v38 - 0xCDF342D76DC3599LL) ^ 0xC7LL] ^ 0x1A) << 8) | v52) ^ 0x9EF4) >> 8);
  unsigned int v60 = v46 | ((v47[*(unsigned __int8 *)(v38 - 0xCDF342D76DC359DLL) ^ 0xB7LL] ^ 0xFA) << 8) & 0xFF00FFFF | (((v43 >> 30) ^ 0x37) << 16) | ((v48[*(unsigned __int8 *)(v38 - 0xCDF342D76DC359FLL) ^ 0x18LL] ^ 5) << 24);
  int v61 = v59 - ((2 * (v58 >> 8)) & 0x4A);
  uint64_t v62 = v59 ^ 0xF5;
  int8x16_t v63 = (char *)*(&off_10027AEF0 + v36 - 778) - 4;
  LODWORD(v5sub_100129678(v0 + 2) = (v61 - 1884897499) ^ *(_DWORD *)&v63[4 * v62];
  uint8x16_t v64 = (char *)*(&off_10027AEF0 + (v36 & 0x5047D46F)) - 4;
  int v65 = *(_DWORD *)&v64[4 * (v49 ^ 0x55)];
  HIDWORD(v4sub_100129678(v0 + 3) = v65 ^ 1;
  LODWORD(v4sub_100129678(v0 + 3) = v65 ^ 0xC677F524;
  int v66 = v57 ^ 0xDD;
  int8x16_t v67 = (char *)*(&off_10027AEF0 + (v36 & 0x4705288E)) - 12;
  int v68 = (v43 >> 2) ^ *(_DWORD *)&v67[4 * v66] ^ (v52 - ((2 * v52) & 0x72B72C40) - 1185180128);
  int v69 = v68 - ((2 * v68) & 0x8CC156CA);
  int8x16_t v70 = (char *)*(&off_10027AEF0 + (v36 ^ 0x35Eu)) - 12;
  unsigned int v274 = v56;
  int v71 = *(_DWORD *)&v70[4 * (v51 ^ 0xD9)] ^ v56 ^ (v69 + 1180740453);
  unsigned int v275 = v55;
  unsigned int v272 = v60;
  int v270 = v71 ^ v55 ^ 0x2789BBD4;
  int v72 = v60 ^ 0xE6 ^ v270;
  LODWORD(v45) = *(_DWORD *)&v64[4 * (((v72 ^ v58) >> 24) ^ 0x21)];
  HIDWORD(v4sub_100129678(v0 + 3) = v45 ^ 1;
  LODWORD(v4sub_100129678(v0 + 3) = v45 ^ 0xC677F524;
  LODWORD(v45) = ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x8CC156CA) + 1180740453) ^ *(_DWORD *)&v70[4
                                                                                             * ((v72 ^ v58) ^ 0xDE)];
  int v268 = v72 ^ v58;
  int v271 = v71;
  unsigned int v267 = *(_DWORD *)&v63[4 * (((unsigned __int16)(v72 ^ v58) >> 8) ^ 0x1E)] ^ *(_DWORD *)&v67[4 * (((v72 ^ v58) >> 16) ^ 0x8F)] ^ v71 ^ ((((unsigned __int16)(v72 ^ v58) >> 8) ^ 0xEB) - ((2 * (((v72 ^ v58) >> 8) ^ 0x4BA6EB)) & 0x4A) - 1884897499) ^ ((_DWORD)v45 - ((2 * (_DWORD)v45) & 0x72B72C40) - 1185180128);
  int v73 = v267 ^ 0x76E748E2 ^ v71 ^ v55;
  int v273 = v58;
  int v74 = *(_DWORD *)&v64[4 * (((v73 ^ v58) >> 24) ^ 0xA2)];
  HIDWORD(v4sub_100129678(v0 + 3) = v74 ^ 1;
  LODWORD(v4sub_100129678(v0 + 3) = v74 ^ 0xC677F524;
  unsigned int v75 = v73 ^ v58 ^ 0xC84590C6;
  int v76 = *(_DWORD *)&v63[4 * (BYTE1(v75) ^ 0xF5)] ^ *(_DWORD *)&v67[4
                                                                 * (((v73 ^ v58) >> 16) ^ 0x6C)] ^ (BYTE1(v75) - (((v73 ^ v58) >> 7) & 0x4A) - 1884897499) ^ ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x72B72C40) - 1185180128);
  HIDWORD(v265) = v267 ^ 0x76E748E2 ^ *(_DWORD *)&v70[4 * ((v73 ^ v58) ^ 0x83)] ^ (v76
                                                                                                  - ((2 * v76) & 0x8CC156CA)
                                                                                                  + 1180740453);
  LODWORD(v266) = v73 ^ v58;
  unsigned int v77 = HIDWORD(v265) ^ 0x2789BBD4 ^ v73 ^ 0x8EDEEA78;
  int v269 = v72;
  HIDWORD(v266) = v73;
  HIDWORD(v264) = v73 ^ v72;
  LODWORD(v265) = HIDWORD(v265) ^ 0x2789BBD4 ^ v73;
  int v78 = v77 ^ v73 ^ v72;
  int v79 = *(_DWORD *)&v64[4 * (((v78 ^ v75) >> 24) ^ 0x67)];
  HIDWORD(v4sub_100129678(v0 + 3) = v79 ^ 1;
  LODWORD(v4sub_100129678(v0 + 3) = v79 ^ 0xC677F524;
  int v80 = (v43 >> 2) ^ *(_DWORD *)&v63[4 * (((unsigned __int16)(v78 ^ v75) >> 8) ^ 0x97)] ^ ((((unsigned __int16)(v78 ^ v75) >> 8) ^ 0x62) - ((2 * (((v78 ^ v75) >> 8) ^ 0xD8B62)) & 0x4A) - 1884897499);
  unsigned int v81 = (v80 - ((2 * v80) & 0x8CC156CA) + 1180740453) ^ *(_DWORD *)&v70[4 * ((v78 ^ v75) ^ 0xE1)];
  int v82 = HIDWORD(v265) ^ 0x2789BBD4 ^ *(_DWORD *)&v67[4 * (((v78 ^ v75 ^ 0x2142BA5) >> 16) ^ 0xB6)] ^ (v81 - ((2 * v81) & 0x72B72C40) - 1185180128);
  HIDWORD(v26sub_100129678(v0 + 3) = v78 ^ v75;
  LODWORD(v264) = v78;
  HIDWORD(v26sub_100129678(v0 + 2) = v82 ^ v77;
  int v83 = v82 ^ v77 ^ 0x307C325C;
  LODWORD(v26sub_100129678(v0 + 2) = v83 ^ v78 ^ 0x5EF1BA37;
  LODWORD(v45) = *(_DWORD *)&v64[4 * (((v262 ^ v78 ^ v75) >> 24) ^ 0xA4)];
  HIDWORD(v4sub_100129678(v0 + 3) = v45 ^ 1;
  LODWORD(v4sub_100129678(v0 + 3) = v45 ^ 0xC677F524;
  LODWORD(v45) = ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x8CC156CA) + 1180740453) ^ *(_DWORD *)&v70[4
                                                                                             * ((v262 ^ v78 ^ v75) ^ 0x18)];
  unsigned int v84 = v262 ^ v78 ^ v75 ^ 0xCEE37B5D;
  HIDWORD(v261) = v262 ^ v78 ^ v75;
  LODWORD(v26sub_100129678(v0 + 3) = v82;
  unsigned int v85 = *(_DWORD *)&v67[4 * (BYTE6(v261) ^ 0xCA)] ^ *(_DWORD *)&v63[4 * (BYTE1(v84) ^ 0xF5)] ^ v82 ^ (BYTE1(v84) - ((v84 >> 7) & 0x4A) - 1884897499) ^ 0x9D307044 ^ ((_DWORD)v45 - ((2 * (_DWORD)v45) & 0x72B72C40) - 1185180128);
  LODWORD(v45) = v85 ^ ((v78 ^ 0x5EF1BA37) - ((2 * (v78 ^ 0x5EF1BA37)) & 0x3A60E088) - 1657769916);
  int v86 = *(_DWORD *)&v64[4 * (((v45 ^ v84) >> 24) ^ 0x70)];
  HIDWORD(v4sub_100129678(v0 + 3) = v86 ^ 1;
  LODWORD(v4sub_100129678(v0 + 3) = v86 ^ 0xC677F524;
  int v87 = ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x72B72C40) - 1185180128) ^ *(_DWORD *)&v67[4
                                                                                    * (((v45 ^ v84 ^ 0xF3443494) >> 16) ^ 0xE4)];
  unsigned int v88 = (v87 - ((2 * v87) & 0x8CC156CA) + 1180740453) ^ *(_DWORD *)&v70[4
                                                                      * ((v85 ^ ((v78 ^ 0x37)
                                                                                                - ((2 * (v78 ^ 0x37)) & 0x88)
                                                                                                + 68) ^ v84) ^ 0x91)];
  LODWORD(v260) = v45 ^ v84;
  unsigned int v89 = v45 ^ v84 ^ 0x1A89BBD4;
  int v90 = (v88 - ((2 * v88) & 0x1F4D7E4A) - 1884897499) ^ *(_DWORD *)&v63[4 * (BYTE1(v89) ^ 0xF5)];
  LODWORD(v58) = v85 ^ BYTE1(v89) ^ (v90 - ((2 * v90) & 0x3A60E088) - 1657769916);
  HIDWORD(v260) = (_DWORD)v45;
  LODWORD(v261) = v85;
  LODWORD(v259) = v85 ^ (v83 - ((2 * v83) & 0x3A60E088) - 1657769916);
  HIDWORD(v258) = v58 ^ v259;
  int v91 = v58 ^ v259 ^ 0xE6F58988;
  unsigned int v92 = v91 ^ v45 ^ v89;
  int v93 = *(_DWORD *)&v64[4 * (HIBYTE(v92) ^ 0x43)];
  HIDWORD(v4sub_100129678(v0 + 3) = v93 ^ 1;
  LODWORD(v4sub_100129678(v0 + 3) = v93 ^ 0xC677F524;
  int v94 = *(_DWORD *)&v63[4 * (((unsigned __int16)(v92 ^ 0x7ABE) >> 8) ^ 0xF5)] ^ *(_DWORD *)&v67[4 * (((v92 ^ 0x4D501F31) >> 16) ^ 0xE2)] ^ (((unsigned __int16)(v92 ^ 0x7ABE) >> 8) - (((v92 ^ 0x299B7ABE) >> 7) & 0x4A) - 1884897499) ^ ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x72B72C40) - 1185180128);
  HIDWORD(v259) = v58;
  unsigned int v95 = v58 ^ *(_DWORD *)&v70[4 * (v92 ^ 0xFB)] ^ (v94 + 1180740453 + (~(2 * v94) | 0x733EA935) + 1);
  HIDWORD(v256) = v95 ^ v91;
  int v96 = v95 ^ v91 ^ 0x5BF36347;
  LODWORD(v258) = v91 ^ v45;
  LODWORD(v256) = v96 ^ v91 ^ v45;
  unsigned int v97 = v256 ^ 0x2745D0FF ^ v92 ^ 0x299B7ABE;
  unsigned int v98 = (((unsigned __int16)(v97 ^ 0x6B2B) >> 8) - (((v97 ^ 0x3DCC6B2B) >> 7) & 0x4A) - 1884897499) ^ *(_DWORD *)&v63[4 * (((unsigned __int16)(v97 ^ 0x6B2B) >> 8) ^ 0xF5)];
  unsigned int v99 = (v98 - ((2 * v98) & 0x8CC156CA) + 1180740453) ^ *(_DWORD *)&v70[4 * (v97 ^ 0x6E)];
  HIDWORD(v255) = v97;
  int v100 = *(_DWORD *)&v64[4 * (HIBYTE(v97) ^ 0x57)];
  HIDWORD(v4sub_100129678(v0 + 3) = v100 ^ 1;
  LODWORD(v4sub_100129678(v0 + 3) = v100 ^ 0xC677F524;
  unint64_t v257 = __PAIR64__(v92, v95);
  LODWORD(v255) = (v43 >> 2) ^ *(_DWORD *)&v67[4 * (((v97 ^ 0x516EF336) >> 16) ^ 0x8B)] ^ v95 ^ (v99 - ((2 * v99) & 0x72B72C40) - 1185180128);
  HIDWORD(v254) = v255 ^ 0x930000ED ^ v96;
  LODWORD(v254) = HIDWORD(v254) ^ 0x8D06EA22 ^ v256 ^ 0x2745D0FF;
  unsigned int v101 = v254 ^ v97 ^ 0x3DCC6B2B;
  int v102 = *(_DWORD *)&v64[4 * (HIBYTE(v101) ^ 0x39)];
  HIDWORD(v4sub_100129678(v0 + 3) = v102 ^ 1;
  LODWORD(v4sub_100129678(v0 + 3) = v102 ^ 0xC677F524;
  HIDWORD(v25sub_100129678(v0 + 3) = v101;
  LODWORD(v47) = *(_DWORD *)&v70[4 * (v101 ^ 4)] ^ *(_DWORD *)&v63[4
                                                                                  * (((unsigned __int16)(v101 ^ 0xAA41) >> 8) ^ 0xF5)] ^ 0xC9C61440 ^ (v43 >> 2);
  int v103 = *(_DWORD *)&v67[4 * (((v101 ^ 0x9289BB39) >> 16) ^ 0x7E)] ^ v255 ^ 0x930000ED ^ ((unsigned __int16)(v101 ^ 0xAA41) >> 8) ^ 0x72CEE8C0 ^ ((_DWORD)v47 - ((2 * (_DWORD)v47) & 0x72B72C40) - 1185180128);
  LODWORD(v45) = v103 ^ ((v256 ^ 0x2745D0FF) - ((2 * (v256 ^ 0x2745D0FF)) & 0xE59DD180) + 1926162624);
  unsigned int v104 = v45 ^ v101 ^ 0x53DEAA41;
  LODWORD(v64) = *(_DWORD *)&v64[4 * (HIBYTE(v104) ^ 0x44)];
  HIDWORD(v4sub_100129678(v0 + 3) = v64 ^ 1;
  LODWORD(v4sub_100129678(v0 + 3) = v64 ^ 0xC677F524;
  LODWORD(v47) = (HIDWORD(v254) ^ 0x8D06EA22) + 1926162624 + (~(2 * (HIDWORD(v254) ^ 0x8D06EA22)) | 0x1A622E7F);
  LODWORD(v6sub_100129678(v0 + 2) = *(_DWORD *)&v63[4 * (BYTE1(v104) ^ 0xFD)] ^ *(_DWORD *)&v70[4
                                                                           * ((v103 ^ (~(_BYTE)v256 - ((2 * ~(_BYTE)v256) & 0x80) - 64) ^ v101 ^ 0x41) ^ 0xC4)] ^ ((BYTE1(v104) ^ 8) - ((v104 >> 7) & 0x4A) - 1884897499) ^ ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x8CC156CA) + 1180740453);
  HIDWORD(v25sub_100129678(v0 + 2) = v104 ^ 0xD67EF71D;
  LODWORD(v6sub_100129678(v0 + 2) = (v62 - ((2 * v62) & 0x72B72C40) - 1185180128) ^ *(_DWORD *)&v67[4 * (BYTE2(v104) ^ 0x16)];
  int8x16x4_t v105 = (char *)*(&off_10027AEF0 + v36 - 855) - 4;
  int8x16x4_t v106 = (char *)*(&off_10027AEF0 + (v36 ^ 0x38Du)) - 8;
  int v107 = v106[*(unsigned __int8 *)(v40 - 109) ^ 0xA5LL];
  HIDWORD(v4sub_100129678(v0 + 3) = v107 ^ 0x19;
  LODWORD(v4sub_100129678(v0 + 3) = (v107 ^ 0x80) << 24;
  uint64_t v108 = (uint64_t)*(&off_10027AEF0 + v36 - 879);
  int v250 = v106;
  LODWORD(v6sub_100129678(v0 + 3) = (v106[*(unsigned __int8 *)(v40 - 97) ^ 0x7BLL] ^ 0xE6) & 0xFFFF00FF | ((((*(_BYTE *)(v40 - 98) ^ 0xD0) + v105[*(unsigned __int8 *)(v40 - 98) ^ 0xDFLL] - 91) ^ 0xE4) << 8) | ((*(unsigned __int8 *)(v108 + (*(unsigned __int8 *)(v40 - 99) ^ 0xAALL)) ^ 0x54) << 16);
  int v251 = v105;
  uint64_t v249 = (uint64_t)*(&off_10027AEF0 + (v36 ^ 0x3FEu));
  LODWORD(v48) = (((((v43 >> 30) ^ 0xDB) >> 2) | (((v43 >> 30) ^ 0xDB) << 6)) | ((*(unsigned __int8 *)(v108 + (*(unsigned __int8 *)(v40 - 111) ^ 0x7ALL)) ^ 0x37) << 16) | ((*(unsigned __int8 *)(v249 + (*(unsigned __int8 *)(v40 - 112) ^ 0x78LL)) ^ 0xFFFFFF87) << 24) | (((v105[*(unsigned __int8 *)(v40 - 110) ^ 0x5DLL] + (*(_BYTE *)(v40 - 110) ^ 0x52) - 91) ^ 0x5D) << 8)) ^ 0x7B4BA366;
  unsigned int v109 = ((v106[*(unsigned __int8 *)(v40 - 101) ^ 0x60LL] ^ 0x52) & 0xFFFF00FF | ((*(unsigned __int8 *)(v108 + (*(unsigned __int8 *)(v40 - 103) ^ 5LL)) ^ 0x66) << 16) | (((v105[*(unsigned __int8 *)(v40 - 102) ^ 4LL] + (*(_BYTE *)(v40 - 102) ^ 0xB) - 91) ^ 0x33) << 8) | ((*(unsigned __int8 *)(v249 + (*(unsigned __int8 *)(v40 - 104) ^ 0x1CLL)) ^ 0x72) << 24)) ^ 0xA2056723;
  LODWORD(v105) = ((v106[*(unsigned __int8 *)(v40 - 105) ^ 0x28LL] ^ 0x93) & 0xFFFF00FF | ((((*(_BYTE *)(v40 - 106) ^ 0xAC) + v105[*(unsigned __int8 *)(v40 - 106) ^ 0xA3LL] - 91) ^ 0xF6) << 8) | ((*(unsigned __int8 *)(v249 + (*(unsigned __int8 *)(v40 - 108) ^ 0xB2LL)) ^ 0x85) << 24) | ((*(unsigned __int8 *)(v108 + (*(unsigned __int8 *)(v40 - 107) ^ 0x27LL)) ^ 2) << 16)) ^ 0x443698E3;
  unsigned int v110 = (v63 | ((*(unsigned __int8 *)(v249 + (*(unsigned __int8 *)(v40 - 100) ^ 0x45LL)) ^ 0xBD) << 24)) ^ 0x95B199F6;
  HIDWORD(v248) = *(_DWORD *)(v40 - 128) + 139101769;
  int v111 = v62 - ((2 * v62) & 0xE59DD180) + 1926162624;
  HIDWORD(v247) = v41 + 1314018074;
  LODWORD(v247) = v41 ^ 0x69E;
  LODWORD(v246) = v103 ^ ((_DWORD)v47 + 1);
  HIDWORD(v246) = v41 ^ 0x688;
  HIDWORD(v245) = v41 ^ 0x665;
  LODWORD(v25sub_100129678(v0 + 3) = v103;
  LODWORD(v245) = v111 ^ v103;
  *(_DWORD *)(v40 - 1swift_unknownObjectWeakDestroy(v0 + 16) = v41;
  HIDWORD(a6) = v41 ^ 0x67D;
  LODWORD(v25sub_100129678(v0 + 2) = v45 ^ 0x626A2240;
  LODWORD(v248) = ((_DWORD)v47 + 1) ^ 0x3DC8BA5D ^ v111;
  HIDWORD(a4) = v248 ^ v45 ^ 0x626A2240;
  uint64_t v112 = ((v41 + 1314018074) & 0xB1ADA6B7 ^ 0xFFFFFF7C) & 0x97726CFE ^ 0x97726CFF;
  *(void *)(v40 - 208) = v112;
  uint64_t v113 = a1[v112];
  *(void *)(v40 - 168) = 12LL;
  int v114 = v106[v113 ^ 0x41];
  uint64_t v115 = a1[12] ^ 0x60LL;
  *(void *)(v40 - 160) = 8LL;
  *(void *)(v40 - 128) = 1LL;
  LODWORD(v70) = *(unsigned __int8 *)(v249 + v115) ^ 6;
  int v116 = *(unsigned __int8 *)(v249 + (a1[8] ^ 0xC1LL)) ^ 0xB2;
  LODWORD(v115) = *(unsigned __int8 *)(v108 + (a1[1] ^ 0x66LL)) ^ 0xDB;
  *(void *)(v40 - 136) = 15LL;
  uint64_t v117 = a1[15] ^ 0xE9LL;
  *(void *)(v40 - 15sub_100129678(v0 + 2) = 11LL;
  int v118 = (_DWORD)v115 << 16;
  LODWORD(v115) = v106[v117] ^ 0x44;
  LODWORD(v117) = v115 | ((_DWORD)v70 << 24);
  LODWORD(v70) = v106[a1[11] ^ 0xC3LL];
  *(void *)(v40 - 176) = 0LL;
  int v119 = v118 | ((*(unsigned __int8 *)(v249 + (*a1 ^ 0x30LL)) ^ 0x36) << 24);
  unsigned int v120 = v70 ^ 0x8E | (v116 << 24);
  *(void *)(v40 - 144) = 2LL;
  unsigned int v121 = v119 & 0xFFFF00FF | (((v251[a1[2] ^ 0xC0LL] + (a1[2] ^ 0xCF) - 91) ^ 0xF9) << 8);
  *(void *)(v40 - 2swift_unknownObjectWeakDestroy(v0 + 16) = 4LL;
  v114 ^= 0x94u;
  LODWORD(v70) = v114 | ((*(unsigned __int8 *)(v249 + (a1[4] ^ 0xFCLL)) ^ 0x88888888) << 24);
  *(void *)(v40 - 240) = 5LL;
  *(void *)(v40 - 23sub_100129678(v0 + 2) = 9LL;
  int v122 = v120 | ((*(unsigned __int8 *)(v108 + (a1[9] ^ 0x5DLL)) ^ 8) << 16);
  *(void *)(v40 - 19sub_100129678(v0 + 2) = 10LL;
  unsigned int v123 = v122 & 0xFFFF00FF | (((v251[a1[10] ^ 0xD5LL] + (a1[10] ^ 0xDA) - 91) ^ 0xCF) << 8);
  *(void *)(v40 - 184) = 14LL;
  int v124 = (v251[a1[14] ^ 0xE4LL] + (a1[14] ^ 0xEB) + 37) << 8;
  *(void *)(v40 - 224) = 3LL;
  int v125 = v106[a1[3] ^ 0xDCLL] ^ 0x50 | v121;
  *(_DWORD *)(v40 - 196) = -1754108674;
  *(void *)(v40 - 248) = 13LL;
  LODWORD(v117) = v124 | ((*(unsigned __int8 *)(v108 + (a1[13] ^ 0x92LL)) ^ 0x35) << 16) | v117;
  *(void *)(v40 - 256) = 6LL;
  LODWORD(v58) = v123 - ((2 * v123) & 0x3779BD34) + 465362586;
  unsigned int v126 = ((*(unsigned __int8 *)(v108 + (a1[5] ^ 0xA9LL)) ^ 0xE6) << 16) | (((v251[a1[6] ^ 0x4FLL]
                                                                                            + (a1[6] ^ 0x40)
                                                                                            - 91) ^ 0xB7) << 8) | v70;
  unsigned int v127 = v48 ^ v274 ^ (v125 - ((2 * v125) & 0x85E434BE) - 1024320929);
  unsigned int v128 = v105 ^ v275 ^ (v126 - 2 * (v126 & 0x7D8F215E ^ v114 & 4) - 40951462);
  unsigned int v129 = v110 ^ v273 ^ (v117 + 738730064 + ~(2 * (v117 & 0x2C08205F ^ v115 & 0x10)));
  LODWORD(v115) = v109 ^ v272 ^ v58;
  int v130 = (char *)*(&off_10027AEF0 + (v41 ^ 0x688u)) - 8;
  LODWORD(v105) = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0x3F)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v105;
  LODWORD(v4sub_100129678(v0 + 3) = v105 ^ 0x5E9AE946;
  int v131 = (char *)*(&off_10027AEF0 + (v41 ^ 0x69Eu)) - 8;
  int v132 = (v43 >> 1) ^ *(_DWORD *)&v131[4 * (BYTE2(v129) ^ 0x34)] ^ ((BYTE2(v129) ^ 0x68)
                                                                  - 1957579816
                                                                  - ((2 * (HIWORD(v129) ^ 0xB768)) & 0x1B0));
  uint64_t v133 = (uint64_t)*(&off_10027AEF0 + *(_DWORD *)(v40 - 116) - 1713);
  LODWORD(v47) = *(_DWORD *)(v133 + 4LL * ((v109 ^ v272 ^ v58) ^ 0xC6u)) ^ ((BYTE2(v127) ^ 0xD5)
                                                                                           - 1957579816
                                                                                           - ((2
                                                                                             * (HIWORD(v127) ^ 0x6CD5)) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (BYTE2(v127) ^ 0x89)] ^ (((v109 ^ v272 ^ v58) ^ 0xAB) - 1935464733 + ((2 * ((v109 ^ v272 ^ v58) ^ 0xAB) + 254) & 0xC6 ^ 0xDDF77FFF));
  LODWORD(v58) = *(_DWORD *)&v130[4 * (HIBYTE(v128) ^ 0xC8)];
  LODWORD(v70) = *(_DWORD *)&v131[4 * (BYTE2(v128) ^ 0x8C)] ^ *(_DWORD *)(v133 + 4LL * (v129 ^ 0xB6u)) ^ ((v129 ^ 0xDB) - 1935464733 + ((2 * (v129 ^ 0xDB) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ ((BYTE2(v128) ^ 0xD0) - 1957579816 - 2 * ((HIWORD(v128) ^ 0xC8D0) & 0xDF ^ HIWORD(v128) & 7));
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v58;
  LODWORD(v4sub_100129678(v0 + 3) = v58 ^ 0x5E9AE946;
  LODWORD(v117) = (_DWORD)v70 + 2001785091 - ((2 * (_DWORD)v70) & 0xEEA1A206);
  LODWORD(v70) = v132 + 2001785091 - ((2 * v132) & 0xEEA1A206);
  int v134 = ((BYTE2(v115) ^ 0xAD) - 1957579816 - ((2 * (WORD1(v115) ^ 0x3FAD)) & 0x1B0)) ^ *(_DWORD *)(v133
                                                                                                  + 4LL * (v127 ^ 0x1Cu)) ^ ((v127 ^ 0x71) - 1935464733 + ((2 * (v127 ^ 0x71) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)&v131[4 * (BYTE2(v115) ^ 0xF1)] ^ (v43 >> 1);
  int v135 = *(_DWORD *)&v130[4 * (HIBYTE(v127) ^ 0x6C)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v135;
  LODWORD(v4sub_100129678(v0 + 3) = v135 ^ 0x5E9AE946;
  int v136 = v43 >> 1;
  unsigned int v137 = v134 + 2001785091 - ((2 * v134) & 0xEEA1A206);
  unsigned int v138 = (v128 ^ 0x10) - 1935464733 + ((2 * (v128 ^ 0x10) + 254) & 0xC6 ^ 0xDDF77FFF);
  int v139 = *(_DWORD *)&v130[4 * (HIBYTE(v129) ^ 0xB7)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v139;
  LODWORD(v4sub_100129678(v0 + 3) = v139 ^ 0x5E9AE946;
  int v140 = (char *)*(&off_10027AEF0 + *(_DWORD *)(v40 - 116) - 1527) - 4;
  unsigned int v141 = *(_DWORD *)&v140[4 * (BYTE1(v127) ^ 0xDE)] ^ v269 ^ *(_DWORD *)(v133 + 4LL * (v128 ^ 0x7Du)) ^ v70;
  int v142 = ((_DWORD)v47 + 2001785091 - ((2 * (_DWORD)v47) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4 * (BYTE1(v128) ^ 0x2F)] ^ (v43 >> 1);
  LODWORD(v70) = v142 - ((2 * v142) & 0x9E06EF50);
  LODWORD(v115) = *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0x29)] ^ v271 ^ v136;
  LOWORD(v136) = v141 ^ v138;
  LODWORD(v115) = v115 ^ v117;
  unsigned int v143 = *(_DWORD *)&v140[4 * (BYTE1(v129) ^ 0x66)] ^ v270 ^ v137;
  LODWORD(v47) = *(_DWORD *)&v130[4 * ((v141 ^ ~v138) >> 24)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v47;
  LODWORD(v4sub_100129678(v0 + 3) = v47 ^ 0x5E9AE946;
  LODWORD(v117) = v43 >> 1;
  int v144 = (v140[4 * (BYTE1(v129) ^ 0x66)] ^ v270 ^ v137);
  LODWORD(v47) = (v141 ^ v138) >> 16;
  int v145 = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0x91)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v145;
  LODWORD(v4sub_100129678(v0 + 3) = v145 ^ 0x5E9AE946;
  int v146 = v43 >> 1;
  int v147 = *(_DWORD *)&v130[4 * (HIBYTE(v143) ^ 0xA3)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v147;
  LODWORD(v4sub_100129678(v0 + 3) = v147 ^ 0x5E9AE946;
  int v148 = v146 ^ *(_DWORD *)&v131[4 * (BYTE2(v143) ^ 0xF0)] ^ ((BYTE2(v143) ^ 0xAC)
                                                            - 1957579816
                                                            - 2 * ((HIWORD(v143) ^ 0xA3AC) & 0xDA ^ HIWORD(v143) & 2));
  LODWORD(v47) = (v43 >> 1) ^ *(_DWORD *)&v131[4 * (v47 ^ 0x15)] ^ *(_DWORD *)(v133
                                                                                              + 4LL
                                                                                              * (v115 ^ 0x7Bu)) ^ ((v47 ^ 0x49) - 1957579816 - 2 * ((v47 ^ 0xFF49) & 0xDE ^ v47 & 6)) ^ ((v115 ^ 0x16) - 1935464733 + ((2 * (v115 ^ 0x16) + 254) & 0xC6 ^ 0xDDF77FFF));
  unsigned int v149 = (_DWORD)v47 + 2001785091 - ((2 * (_DWORD)v47) & 0xEEA1A206);
  LODWORD(v70) = ((_DWORD)v70 - 821856344) ^ v268;
  unsigned int v150 = (v148 + 2001785091 - ((2 * v148) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4 * (BYTE1(v136) ^ 0x2C)];
  LODWORD(v47) = v117 ^ *(_DWORD *)(v133 + 4LL * (v144 ^ 3u)) ^ ((v144 ^ 0x6E)
                                                               - 1935464733
                                                               + ((2 * (v144 ^ 0x6E) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)&v131[4 * (BYTE2(v70) ^ 0x66)] ^ ((BYTE2(v70) ^ 0x3A) - 1957579816 - 2 * (((v70 >> 16) ^ 0xA13A) & 0xDC ^ (v70 >> 16) & 4));
  LODWORD(v117) = *(_DWORD *)&v131[4 * (BYTE2(v115) ^ 0x2E)] ^ ((BYTE2(v115) ^ 0x72)
                                                              - 1957579816
                                                              - ((2 * (WORD1(v115) ^ 0x9172)) & 0x1B0));
  int v151 = *(_DWORD *)&v130[4 * ((v70 >> 24) ^ 0xA1)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v151;
  LODWORD(v4sub_100129678(v0 + 3) = v151 ^ 0x5E9AE946;
  unsigned int v152 = ((v136 ^ 0xFC) - 1935464733 + ((2 * (v136 ^ 0xFC) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)&v140[4 * (BYTE1(v143) ^ 0xBD)] ^ *(_DWORD *)(v133 + 4LL * (v136 ^ 0x91u));
  int v153 = *(_DWORD *)&v140[4 * (BYTE1(v70) ^ 0xEC)];
  int v154 = *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0x57)];
  LODWORD(v115) = v152 ^ (v117 + 2001785091 - ((2 * v117) & 0xEEA1A206));
  int v155 = v70;
  LODWORD(v70) = v115 ^ (v43 >> 1);
  LODWORD(v115) = ((v155 ^ 0xE5) - 1726037377) ^ v267 ^ *(_DWORD *)(v133 + 4LL * (v155 ^ 0x88u)) ^ (v150
                                                                                                  - 209427357
                                                                                                  - ((2 * v150) & 0xE708C8C6));
  unsigned int v156 = v154 ^ HIDWORD(v264) ^ ((_DWORD)v47 + 2001785091 - ((2 * (_DWORD)v47) & 0xEEA1A206));
  LODWORD(v117) = ((_DWORD)v70 - ((2 * (_DWORD)v70) & 0x83177384) + 1099676098) ^ v266;
  unsigned int v157 = v153 ^ HIDWORD(v266) ^ v149;
  int v158 = *(_DWORD *)&v130[4 * (BYTE3(v117) ^ 0xAC)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v158;
  LODWORD(v4sub_100129678(v0 + 3) = v158 ^ 0x5E9AE946;
  LODWORD(v47) = ((v157 ^ 0xA1)
                - 1935464733
                + ((2 * (v157 ^ 0xA1) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133
                                                                                                + 4LL
                                                                                                * (v157 ^ 0xCCu));
  int v159 = *(_DWORD *)&v131[4 * (BYTE2(v115) ^ 0xDB)] ^ ((BYTE2(v115) ^ 0x87)
                                                     - 1957579816
                                                     - 2 * ((BYTE2(v115) ^ 0x87) & 0xF8 ^ WORD1(v115) & 0x20)) ^ (v43 >> 1);
  LODWORD(v47) = ((_DWORD)v47 + 2001785091 - ((2 * (_DWORD)v47) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4
                                                                                                * (BYTE1(v115) ^ 0xDE)];
  LODWORD(v70) = ((v115 ^ 0x9E)
                - 1935464733
                + ((2 * (v115 ^ 0x9E) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133
                                                                                                + 4LL
                                                                                                * (v115 ^ 0xF3u));
  int v160 = (_DWORD)v47 - 1957579816 - ((2 * (_DWORD)v47) & 0x16A367B0);
  unsigned int v161 = (v159 + 2001785091 - ((2 * v159) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4 * (BYTE1(v157) ^ 0x57)];
  LODWORD(v47) = *(_DWORD *)&v130[4 * (HIBYTE(v156) ^ 0x37)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v47;
  LODWORD(v4sub_100129678(v0 + 3) = v47 ^ 0x5E9AE946;
  LODWORD(v47) = v43 >> 1;
  int v162 = ((v156 ^ 0x740CBC3A) >> 16);
  unsigned int v163 = v162 - 1957579816 - (((v156 ^ 0x740CBC3A) >> 15) & 0x1B0);
  LODWORD(v115) = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0x3A)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v115;
  LODWORD(v4sub_100129678(v0 + 3) = v115 ^ 0x5E9AE946;
  LODWORD(v115) = *(_DWORD *)&v140[4 * ((unsigned __int16)(v156 ^ 0xBC3A) >> 8)] ^ BYTE2(v157) ^ *(_DWORD *)&v131[4 * (BYTE2(v157) ^ 0xF6)] ^ (v43 >> 1);
  LODWORD(v115) = ((v117 ^ 0xD2) - 1726037377) ^ HIDWORD(v265) ^ *(_DWORD *)(v133
                                                                                            + 4LL
                                                                                            * (v117 ^ 0xBFu)) ^ ((v115 ^ 0xFC016271) - 209427357 - 2 * ((v115 ^ 0xFC016271) & 0x73846467 ^ v115 & 4));
  unsigned int v164 = ((v156 ^ 0x3A) - 1726037377) ^ HIDWORD(v263) ^ *(_DWORD *)(v133
                                                                                   + 4LL
                                                                                   * (v156 ^ 0x57u)) ^ (v161 - 209427357 - ((2 * v161) & 0xE708C8C6));
  int v165 = *(_DWORD *)&v130[4 * (HIBYTE(v157) ^ 0x7C)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v165;
  LODWORD(v4sub_100129678(v0 + 3) = v165 ^ 0x5E9AE946;
  LODWORD(v47) = *(_DWORD *)&v131[4 * (BYTE2(v117) ^ 0xD)] ^ v264 ^ BYTE2(v117) ^ v47 ^ v160;
  unsigned int v166 = *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0x59)] ^ v265 ^ v163 ^ *(_DWORD *)&v131[4 * (v162 ^ 0x5C)] ^ (v43 >> 1) ^ ((_DWORD)v70 + 2001785091 - ((2 * (_DWORD)v70) & 0xEEA1A206));
  unsigned int v167 = v47 ^ 0xFA64A592;
  unsigned int v168 = ((v47 ^ 0x92) - 1935464733 + ((2 * (v47 ^ 0xFA64A592) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133 + 4LL * (v47 ^ 0xFFu));
  LODWORD(v70) = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0x5B)];
  LODWORD(v117) = v168 + 2001785091 - ((2 * v168) & 0xEEA1A206);
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v70;
  LODWORD(v4sub_100129678(v0 + 3) = v70 ^ 0x5E9AE946;
  int v169 = v43 >> 1;
  int v170 = *(_DWORD *)&v130[4 * (HIBYTE(v164) ^ 0x28)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v170;
  LODWORD(v4sub_100129678(v0 + 3) = v170 ^ 0x5E9AE946;
  LODWORD(v70) = v43 >> 1;
  LODWORD(v47) = *(_DWORD *)&v130[4 * ((v47 >> 24) ^ 0xB9)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v47;
  LODWORD(v4sub_100129678(v0 + 3) = v47 ^ 0x5E9AE946;
  LODWORD(v47) = v43 >> 1;
  unsigned int v171 = v169 ^ *(_DWORD *)(v133 + 4LL * (v164 ^ 0x1Fu)) ^ ((v164 ^ 0x72)
                                                                           - 1935464733
                                                                           + ((2 * (v164 ^ 0x72) + 254) & 0xC6 ^ 0xDDF77FFF));
  int v172 = *(_DWORD *)&v130[4 * (HIBYTE(v166) ^ 0xB4)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v172;
  LODWORD(v4sub_100129678(v0 + 3) = v172 ^ 0x5E9AE946;
  LODWORD(v47) = v47 ^ *(_DWORD *)(v133 + 4LL * (v166 ^ 0x8Bu)) ^ ((v166 ^ 0xE6)
                                                                                                - 1935464733
  int v173 = BYTE2(v115) ^ 0x95;
  unsigned int v174 = v173 - 1957579816 - ((2 * (WORD1(v115) ^ 0x5B95)) & 0x1B0);
  LODWORD(v6sub_100129678(v0 + 3) = v115;
  unsigned int v175 = (v115 ^ 0xF4) - 1935464733 + ((2 * (v115 ^ 0xF4) + 254) & 0xC6 ^ 0xDDF77FFF);
  unsigned int v176 = ((BYTE2(v164) ^ 0x14) - 1957579816 - ((2 * (HIWORD(v164) ^ 0x2814)) & 0x1B0)) ^ v262 ^ *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0x1F)] ^ ((_DWORD)v47 + 2001785091 - ((2 * (_DWORD)v47) & 0xEEA1A206)) ^ *(_DWORD *)&v131[4 * (BYTE2(v164) ^ 0x48)];
  LODWORD(v115) = *(_DWORD *)&v140[4 * BYTE1(v167)] ^ v82 ^ ((BYTE2(v166) ^ 0x59)
                                                           - 1957579816
                                                           - ((2 * (HIWORD(v166) ^ 0xB459)) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (BYTE2(v166) ^ 5)] ^ (v171 + 2001785091 - ((2 * v171) & 0xEEA1A206));
  unsigned int v177 = (BYTE2(v167) - 1957579816 - ((v167 >> 15) & 0x1B0)) ^ HIDWORD(v262) ^ ((v43 >> 1)
                                                                              + 2001785091
                                                                              - ((2 * (v43 >> 1)) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4 * (BYTE1(v164) ^ 0x12)] ^ *(_DWORD *)(v133 + 4LL * (v63 ^ 0x99)) ^ v175 ^ *(_DWORD *)&v131[4 * (BYTE2(v167) ^ 0x5C)];
  LODWORD(v117) = *(_DWORD *)&v140[4 * (BYTE1(v166) ^ 0x34)] ^ HIDWORD(v261) ^ *(_DWORD *)&v131[4 * (v173 ^ 0x5C)] ^ v174 ^ v117 ^ v70;
  LODWORD(v6sub_100129678(v0 + 3) = *(_DWORD *)&v130[4 * (BYTE3(v117) ^ 0xEB)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v63;
  LODWORD(v4sub_100129678(v0 + 3) = v63 ^ 0x5E9AE946;
  int v178 = (v43 >> 1) + 2001785091 - ((2 * (v43 >> 1)) & 0xEEA1A206);
  int v179 = ((BYTE2(v177) ^ 0x81) - 1957579816 - ((2 * (HIWORD(v177) ^ 0x1481)) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (BYTE2(v177) ^ 0xDD)];
  LODWORD(v47) = ((v177 ^ 0x51)
                - 1935464733
                + ((2 * (v177 ^ 0x51) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133
                                                                                                + 4LL
                                                                                                * (v177 ^ 0x3Cu));
  int v180 = *(_DWORD *)&v131[4 * (BYTE2(v176) ^ 0xDB)] ^ ((BYTE2(v176) ^ 0x87)
                                                     - 1957579816
                                                     - ((2 * (HIWORD(v176) ^ 0x7787)) & 0x1B0));
  LODWORD(v58) = *(_DWORD *)&v130[4 * (HIBYTE(v177) ^ 0x14)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v58;
  LODWORD(v4sub_100129678(v0 + 3) = v58 ^ 0x5E9AE946;
  int v181 = v43 >> 1;
  LODWORD(v58) = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0x9A)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v58;
  LODWORD(v4sub_100129678(v0 + 3) = v58 ^ 0x5E9AE946;
  LODWORD(v6sub_100129678(v0 + 3) = *(_DWORD *)&v131[4 * (((v117 ^ 0xA87CE98B) >> 16) ^ 0x5C)] ^ ((v117 ^ 0xA87CE98B) >> 16) ^ ((_DWORD)v47 - 1957579816 - ((2 * (_DWORD)v47) & 0x16A367B0));
  int v182 = ((v117 ^ 0x8B) - 1935464733 + ((2 * (v117 ^ 0xA87CE98B) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)&v140[4 * (BYTE1(v176) ^ 0xDE)] ^ *(_DWORD *)(v133 + 4LL * (v117 ^ 0xE6u)) ^ (v179 + 2001785091 - ((2 * v179) & 0xEEA1A206)) ^ (v43 >> 1);
  LODWORD(v58) = *(_DWORD *)&v130[4 * (HIBYTE(v176) ^ 0x77)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v58;
  LODWORD(v4sub_100129678(v0 + 3) = v58 ^ 0x5E9AE946;
  int v183 = *(_DWORD *)&v140[4 * (BYTE1(v177) ^ 0x34)] ^ v260 ^ ((BYTE2(v115) ^ 0xE9)
                                                            - 1957579816
                                                            - ((2 * (WORD1(v115) ^ 0x9AE9)) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (BYTE2(v115) ^ 0xB5)] ^ ((v176 ^ 0x9E) - 1935464733 + ((2 * (v176 ^ 0x9E) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ v178 ^ *(_DWORD *)(v133 + 4LL * (v176 ^ 0xF3u));
  LODWORD(v106) = *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0xB)] ^ v259 ^ v181 ^ ((v115 ^ 0xA8)
                                                                           - 1935464733
                                                                           + ((2 * (v115 ^ 0xA8) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133 + 4LL * (v115 ^ 0xC5u)) ^ (v180 + 2001785091 - ((2 * v180) & 0xEEA1A206));
  LODWORD(v115) = *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0x2D)] ^ HIDWORD(v260) ^ (v43 >> 1) ^ ((_DWORD)v63
                                                                                           + 2001785091
                                                                                           - ((2 * (_DWORD)v63) & 0xEEA1A206));
  LODWORD(v6sub_100129678(v0 + 3) = ((v106 ^ 0x2E0E654A) >> 16);
  LODWORD(v47) = *(_DWORD *)&v130[4 * ((v106 >> 24) ^ 0x6D)];
  LODWORD(v70) = (_DWORD)v63 - 1957579816 - (((v106 ^ 0x2E0E654A) >> 15) & 0x1B0);
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v47;
  LODWORD(v4sub_100129678(v0 + 3) = v47 ^ 0x5E9AE946;
  int v184 = v43 >> 1;
  LODWORD(v117) = (v182 - 1657769916 - ((2 * v182) & 0x3A60E088)) ^ v261;
  int v185 = *(_DWORD *)&v131[4 * (v63 ^ 0x5C)];
  LODWORD(v6sub_100129678(v0 + 3) = *(_DWORD *)&v130[4 * (BYTE3(v117) ^ 0xFD)];
  unsigned int v186 = v185 ^ (~(_DWORD)v63 << 31) ^ (v63 >> 1) ^ v70;
  LODWORD(v6sub_100129678(v0 + 3) = ((v106 ^ 0x4A)
                - 1935464733
                + ((2 * (v106 ^ 0x2E0E654A) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133 + 4LL * (v106 ^ 0x27u));
  LODWORD(v70) = (v186 ^ 0x2F4D74A3) + 2001785091 - 2 * ((v186 ^ 0x2F4D74A3) & 0x7750D10F ^ v186 & 0xC);
  int v187 = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0xAE)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v187;
  LODWORD(v4sub_100129678(v0 + 3) = v187 ^ 0x5E9AE946;
  int v188 = (v43 >> 1) ^ *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0xA4)] ^ ((_DWORD)v63
                                                                  + 2001785091
                                                                  - ((2 * (_DWORD)v63) & 0xEEA1A206));
  int v189 = v188 - 1957579816 - ((2 * v188) & 0x16A367B0);
  unsigned int v190 = *(_DWORD *)&v131[4 * (BYTE2(v115) ^ 0x3A)] ^ v184 ^ *(_DWORD *)(v133 + 4LL * (v117 ^ 0x4Du)) ^ ((BYTE2(v115) ^ 0x66) - 1957579816 - ((2 * (WORD1(v115) ^ 0xAE66)) & 0x1B0)) ^ ((v117 ^ 0x20) - 1935464733 + ((2 * (v117 ^ 0x20) + 254) & 0xC6 ^ 0xDDF77FFF));
  unsigned int v191 = ((v115 ^ 0xB3)
        + 275747715
        + ((2 * (v115 ^ 0xB3) + 254) & 0xFFFFFE07 ^ 0xDDDE7FFF)) ^ *(_DWORD *)&v140[4 * (BYTE1(v106) ^ 0x65)];
  LODWORD(v47) = (v191 - 209427357 - ((2 * v191) & 0xE708C8C6)) ^ *(_DWORD *)(v133
                                                                            + 4LL * (v115 ^ 0xDEu));
  unsigned int v192 = *(_DWORD *)&v131[4 * (BYTE2(v117) ^ 0x40)] ^ ((BYTE2(v117) ^ 0x1C)
                                                     - 1957579816
                                                     - 2 * ((WORD1(v117) ^ 0xFD1C) & 0xDA ^ WORD1(v117) & 2));
  LODWORD(v117) = v192 ^ v47 ^ 0x431D28D3;
  LODWORD(v47) = v47 ^ 0x6500C283;
  int v193 = v192 ^ 0xD9E215AF ^ -(v192 ^ 0xD9E215AF) ^ (v117 + (_DWORD)v47 + 1);
  LODWORD(v117) = *(_DWORD *)&v130[4 * ((v183 ^ 0x3F162902u) >> 24)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v117;
  LODWORD(v4sub_100129678(v0 + 3) = v117 ^ 0x5E9AE946;
  unsigned int v194 = ((v183 ^ 0x3F162902u) >> 16) ^ v258 ^ *(_DWORD *)&v131[4
                                                                                             * (((v183 ^ 0x3F162902u) >> 16) ^ 0x5C)] ^ v189;
  LODWORD(v6sub_100129678(v0 + 3) = *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0x7C)];
  LODWORD(v117) = (v43 >> 1) ^ HIDWORD(v257) ^ (v193 + (_DWORD)v47);
  LODWORD(v115) = *(_DWORD *)&v140[4 * (BYTE1(v183) ^ 0xCB)] ^ HIDWORD(v258) ^ (v190
                                                                              + 2001785091
                                                                              - ((2 * v190) & 0xEEA1A206));
  unsigned int v195 = v63 ^ HIDWORD(v259) ^ ((v183 ^ 2)
                                            - 1935464733
                                            + ((2 * (v183 ^ 0x3F162902) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133 + 4LL * (v183 ^ 0x6Fu)) ^ v70;
  int v196 = ((BYTE2(v195) ^ 0xE9) - 1957579816 - ((2 * (HIWORD(v195) ^ 0xB8E9)) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (BYTE2(v195) ^ 0xB5)];
  unsigned int v197 = v196 + 2001785091 - ((2 * v196) & 0xEEA1A206);
  LODWORD(v6sub_100129678(v0 + 3) = *(_DWORD *)&v130[4 * (HIBYTE(v194) ^ 0x9D)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v63;
  LODWORD(v4sub_100129678(v0 + 3) = v63 ^ 0x5E9AE946;
  LODWORD(v6sub_100129678(v0 + 3) = v43 >> 1;
  int v198 = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0x61)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v198;
  LODWORD(v4sub_100129678(v0 + 3) = v198 ^ 0x5E9AE946;
  int v199 = *(_DWORD *)(v133 + 4LL * (v195 ^ 0xC5u)) ^ *(_DWORD *)&v131[4 * (BYTE2(v194) ^ 0x28)] ^ ((v195 ^ 0xA8) - 1935464734 - ((2 * (v195 ^ 0xA8) + 842892542) & 0x220880C6)) ^ ((BYTE2(v194) ^ 0x74) - 1957579816 - ((2 * (HIWORD(v194) ^ 0x9D74)) & 0x1B0)) ^ (v43 >> 1);
  LODWORD(v6sub_100129678(v0 + 3) = v63 ^ ((BYTE2(v117) ^ 0xE6) - 1957579816 - ((2 * (WORD1(v117) ^ 0xB0E6)) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (BYTE2(v117) ^ 0xBA)];
  int v200 = *(_DWORD *)&v130[4 * (HIBYTE(v195) ^ 0xB8)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v200;
  LODWORD(v4sub_100129678(v0 + 3) = v200 ^ 0x5E9AE946;
  int v201 = v115;
  unsigned int v202 = (v115 ^ 0x85) - 1935464733 + ((2 * (v115 ^ 0x85) + 254) & 0xC6 ^ 0xDDF77FFF);
  LODWORD(v106) = ((BYTE2(v115) ^ 8) - 1957579816 - 2 * ((WORD1(v115) ^ 0x6108) & 0xDA ^ WORD1(v115) & 2)) ^ *(_DWORD *)&v131[4 * (BYTE2(v115) ^ 0x54)] ^ *(_DWORD *)(v133 + 4LL * (v117 ^ 0x29u)) ^ ((v117 ^ 0x44) - 1935464733 + ((2 * (v117 ^ 0x44) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ (v43 >> 1);
  unsigned int v203 = *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0xDD)] ^ HIDWORD(v256) ^ (v199 + 2001785091 - ((2 * v199) & 0xEEA1A206));
  int v204 = *(_DWORD *)&v130[4 * (BYTE3(v117) ^ 0xB0)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v204;
  LODWORD(v4sub_100129678(v0 + 3) = v204 ^ 0x5E9AE946;
  LODWORD(v47) = *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0x8F)];
  LODWORD(v115) = *(_DWORD *)&v140[4 * (BYTE1(v194) ^ 0xBD)] ^ v257 ^ ((_DWORD)v106
                                                                     + 2001785091
                                                                     - ((2 * (_DWORD)v106) & 0xEEA1A206));
  unsigned int v205 = v47 ^ v97 ^ *(_DWORD *)(v133 + 4LL * (v194 ^ 0xB4u)) ^ ((v194 ^ 0xD9)
                                                                                              - 1935464733
                                                                                              + ((2
  unsigned int v206 = v202 ^ v256 ^ *(_DWORD *)(v133 + 4LL * (v201 ^ 0xE8u)) ^ *(_DWORD *)&v140[4 * (BYTE1(v195) ^ 0x2D)] ^ ((_DWORD)v63 + 2001785091 - ((2 * (_DWORD)v63) & 0xEEA1A206));
  LODWORD(v106) = *(_DWORD *)&v130[4 * (HIBYTE(v205) ^ 0x18)];
  int v207 = ((BYTE2(v206) ^ 0x66) - 1957579816 - 2 * ((HIWORD(v206) ^ 0xAE66) & 0xD9 ^ HIWORD(v206) & 1)) ^ *(_DWORD *)&v131[4 * (BYTE2(v206) ^ 0x3A)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v106;
  LODWORD(v4sub_100129678(v0 + 3) = v106 ^ 0x5E9AE946;
  LODWORD(v117) = ((v43 >> 1) - 1957579816 - ((2 * (v43 >> 1)) & 0x16A367B0)) ^ *(_DWORD *)&v131[4
                                                                                               * (BYTE2(v115) ^ 0x40)];
  LODWORD(v47) = *(_DWORD *)&v130[4 * (BYTE3(v115) ^ 0xEF)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v47;
  LODWORD(v4sub_100129678(v0 + 3) = v47 ^ 0x5E9AE946;
  LODWORD(v6sub_100129678(v0 + 3) = (v43 >> 1) ^ *(_DWORD *)(v133 + 4LL * (v205 ^ 0x90u)) ^ ((v205 ^ 0xFD)
                                                                                         - 1935464733
                                                                                         + ((2
  LODWORD(v58) = v207 + 2001785091 - ((2 * v207) & 0xEEA1A206);
  unsigned int v208 = (_DWORD)v63 + 2001785091 - ((2 * (_DWORD)v63) & 0xEEA1A206);
  LODWORD(v6sub_100129678(v0 + 3) = *(_DWORD *)(v133 + 4LL * (v203 ^ 0x27u)) ^ ((v203 ^ 0x4A)
                                                                            - 1935464733
                                                                            + ((2 * (v203 ^ 0x4A) + 254) & 0xC6 ^ 0xDDF77FFF));
  LODWORD(v106) = *(_DWORD *)&v130[4 * (HIBYTE(v206) ^ 0xAE)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v106;
  LODWORD(v4sub_100129678(v0 + 3) = v106 ^ 0x5E9AE946;
  LODWORD(v6sub_100129678(v0 + 3) = (v43 >> 1) ^ *(_DWORD *)&v131[4 * (BYTE2(v205) ^ 0xF)] ^ ((_DWORD)v63
                                                                         - 1957579816
                                                                         - ((2 * (_DWORD)v63) & 0x16A367B0));
  int v209 = *(_DWORD *)&v130[4 * (HIBYTE(v203) ^ 0xDC)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v209;
  LODWORD(v4sub_100129678(v0 + 3) = v209 ^ 0x5E9AE946;
  int v210 = ((BYTE2(v203) ^ 0xE) - 1957579816 - ((2 * (HIWORD(v203) ^ 0xDC0E)) & 0x1B0)) ^ v255 ^ *(_DWORD *)&v140[4 * (BYTE1(v206) ^ 0x7C)] ^ *(_DWORD *)&v131[4 * (BYTE2(v203) ^ 0x52)] ^ v208;
  LODWORD(v47) = v206;
  unsigned int v211 = (v206 ^ 0xB3) - 1935464733 + ((2 * (v206 ^ 0xB3) + 254) & 0xC6 ^ 0xDDF77FFF);
  unsigned int v212 = *(_DWORD *)&v140[4 * (BYTE1(v205) ^ 0x1B)] ^ HIDWORD(v254) ^ *(_DWORD *)(v133
                                                                                + 4LL * (v115 ^ 0x4Du)) ^ ((v115 ^ 0x20) - 1935464733 + ((2 * (v115 ^ 0x20) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ (v43 >> 1) ^ v58;
  LODWORD(v117) = v211 ^ HIDWORD(v253) ^ *(_DWORD *)&v140[4 * (BYTE1(v203) ^ 0x65)] ^ *(_DWORD *)(v133
                                                                                                + 4LL
                                                                                                * (v47 ^ 0xDE)) ^ (v117 + 2001785091 - ((2 * v117) & 0xEEA1A206));
  unsigned int v213 = (_DWORD)v63 + 2001785091 - ((2 * (_DWORD)v63) & 0xEEA1A206);
  LODWORD(v6sub_100129678(v0 + 3) = *(_DWORD *)&v140[4 * (BYTE1(v115) ^ 0xA4)];
  LODWORD(v115) = v117 ^ BYTE2(v115);
  LODWORD(v106) = *(_DWORD *)&v130[4 * ((v115 ^ 0x7641388B) >> 24)];
  LODWORD(v70) = v63 ^ v254 ^ v213;
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v106;
  LODWORD(v4sub_100129678(v0 + 3) = v106 ^ 0x5E9AE946;
  int v214 = v43 >> 1;
  int v215 = *(_DWORD *)&v130[4 * ((v210 ^ 0xF7E9CFA8) >> 24)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v215;
  LODWORD(v4sub_100129678(v0 + 3) = v215 ^ 0x5E9AE946;
  int v216 = v43 >> 1;
  unsigned int v217 = (((v115 ^ 0x7641388B) >> 16)
        - 1957579816
        - (((v115 ^ 0x7641388B) >> 15) & 0x1B0)) ^ *(_DWORD *)&v131[4
                                                                                * (((v115 ^ 0x7641388B) >> 16) ^ 0x5C)];
  int v218 = *(_DWORD *)&v130[4 * ((v70 >> 24) ^ 0xE7)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~v218;
  LODWORD(v4sub_100129678(v0 + 3) = v218 ^ 0x5E9AE946;
  int v219 = v43 >> 1;
  unsigned int v220 = v214 ^ *(_DWORD *)(v133 + 4LL * ((v70 ^ BYTE2(v205)) ^ 0x18u)) ^ (((v210 ^ 0xF7E9CFA8) >> 16) - 1957579816 - (((v210 ^ 0xF7E9CFA8) >> 15) & 0x1B0)) ^ *(_DWORD *)&v131[4 * (((v210 ^ 0xF7E9CFA8) >> 16) ^ 0x5C)] ^ (((v70 ^ BYTE2(v205)) ^ 0x75) - 1935464734 - ((2 * ((v70 ^ BYTE2(v205)) ^ 0x75) + 842892542) & 0x220880C6));
  unsigned int v221 = (v220 + 2001785091 - ((2 * v220) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4 * (BYTE1(v212) ^ 0xEC)];
  LODWORD(v115) = v216 ^ *(_DWORD *)&v131[4 * (BYTE2(v212) ^ 0xA7)] ^ ((BYTE2(v212) ^ 0xFB)
                                                                     - 1957579816
                                                                     - ((2 * (HIWORD(v212) ^ 0x57FB)) & 0x1B0)) ^ ((v115 ^ 0x8B) - 1935464733 + ((2 * (v115 ^ 0x7641388B) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ *(_DWORD *)(v133 + 4LL * (v115 ^ 0xE6u));
  LODWORD(v6sub_100129678(v0 + 3) = *(_DWORD *)&v130[4 * (HIBYTE(v212) ^ 0x57)];
  HIDWORD(v4sub_100129678(v0 + 3) = ~(_DWORD)v63;
  LODWORD(v4sub_100129678(v0 + 3) = v63 ^ 0x5E9AE946;
  LODWORD(v115) = (v115 + 2001785091 - ((2 * v115) & 0xEEA1A206)) ^ *(_DWORD *)&v140[4 * (BYTE1(v70) ^ 0x6D)];
  LODWORD(v106) = *(_DWORD *)&v140[4 * (BYTE1(v210) ^ 0x2D)];
  LODWORD(v6sub_100129678(v0 + 3) = ((v210 ^ 0xA8) - 1935464733 + ((2 * (v210 ^ 0xF7E9CFA8) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ ((BYTE2(v70) ^ 0x31) - 1957579816 - ((2 * ((v70 >> 16) ^ 0xE731)) & 0x1B0)) ^ *(_DWORD *)(v133 + 4LL * (v210 ^ 0xC5u)) ^ *(_DWORD *)&v131[4 * (BYTE2(v70) ^ 0x6D)] ^ (v43 >> 1);
  LODWORD(v140) = v246 ^ *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0xDA)] ^ ((_DWORD)v63
                                                                     + 2001785091
                                                                     - ((2 * (_DWORD)v63) & 0xEEA1A206));
  LODWORD(v115) = (v115 + 1926162624 - ((2 * v115) & 0xE59DD180)) ^ v253;
  LODWORD(v131) = (v221 - 129892452 - ((2 * v221) & 0xF083FF38)) ^ HIDWORD(v252);
  unsigned int v222 = v106 ^ v252 ^ ((v212 ^ 0x2F)
                                    - 1935464733
                                    + ((2 * (v212 ^ 0x2F) + 254) & 0xC6 ^ 0xDDF77FFF)) ^ v219 ^ *(_DWORD *)(v133 + 4LL * (v212 ^ 0x42u)) ^ (v217 + 2001785091 - ((2 * v217) & 0xEEA1A206));
  BYTE2(v130) = BYTE2(v140) ^ 0x8C;
  int v223 = *(_DWORD *)(v40 - 116);
  unsigned int v224 = (char *)*(&off_10027AEF0 + v223 - 1674) - 8;
  uint64_t v225 = (uint64_t)*(&off_10027AEF0 + HIDWORD(v245));
  unsigned int v226 = (char *)*(&off_10027AEF0 + v223 - 1709) - 8;
  int v227 = (*(_DWORD *)&v226[4 * (BYTE2(v115) ^ 0x9E)] - 1484953747) ^ (*(_DWORD *)&v224[4
                                                                                     * (v222 ^ 0xC9)]
                                                                    - 1974578392);
  int v228 = *(_DWORD *)&v224[4 * (v140 ^ 0xC8)];
  LODWORD(v117) = (*(_DWORD *)&v226[4 * (BYTE2(v222) ^ 0x38)] - 1484953747) ^ (*(_DWORD *)(v225
                                                                                         + 4LL
  int v229 = *(_DWORD *)&v224[4 * (v115 ^ 0xA2)];
  unsigned int v230 = v131 ^ 0x351D74B9;
  LODWORD(v13sub_100129678(v0 + 3) = *(_DWORD *)&v224[4 * (v131 ^ 0xB9)];
  uint64_t v231 = *(unsigned int *)(v225 + 4LL * (BYTE3(v115) ^ 0xE7));
  LODWORD(v224) = *(_DWORD *)(v225 + 4LL * (HIBYTE(v222) ^ 0xB8));
  LODWORD(v225) = *(_DWORD *)(v225 + 4LL * ((v131 >> 24) ^ 0x65));
  LODWORD(v131) = v117 ^ (v229 - 1974578392);
  int v232 = (char *)*(&off_10027AEF0 + v223 - 1699) - 4;
  LODWORD(v140) = (v227 - 455301054 - ((2 * v227) & 0xC9B95084)) ^ *(_DWORD *)&v232[4 * (BYTE1(v140) ^ 0x61)] ^ (v225 - 1695168745);
  uint64_t v233 = *(unsigned int *)&v232[4 * (BYTE1(v222) ^ 0xE9)];
  int v234 = *(_DWORD *)&v226[4 * BYTE2(v130)];
  unsigned int v235 = *(_DWORD *)&v232[4 * BYTE1(v230)] ^ v248 ^ ((_DWORD)v131 - 455301054 - ((2 * (_DWORD)v131) & 0xC9B95084));
  LODWORD(v140) = HIDWORD(a4) ^ HIDWORD(v252) ^ ((_DWORD)v140 - 129892452 - ((2 * (_DWORD)v140) & 0xF083FF38));
  uint64_t v236 = *(_DWORD *)&v232[4 * (BYTE1(v115) ^ 0xA0)] ^ HIDWORD(a4) ^ (v228
                                                                   - ((2 * v228 + 345810512) & 0xC9B95084)
                                                                   + 1865087850) ^ ((_DWORD)v224 - 1695168745) ^ (*(_DWORD *)&v226[4 * BYTE2(v230)] - 1484953747);
  int v237 = (char *)*(&off_10027AEF0 + v223 - 1571) - 8;
  a1[*(void *)(v40 - 256)] = v237[BYTE1(v235) ^ 0x99LL] ^ 0xAC;
  int v238 = (char *)*(&off_10027AEF0 + v223 - 1697) - 12;
  a1[*(void *)(v40 - 248)] = (v238[BYTE2(v140) ^ 0xADLL] - 22) ^ 0xC5;
  int v239 = (char *)*(&off_10027AEF0 + v223 - 1555) - 12;
  a1[*(void *)(v40 - 208)] = v239[v235 ^ 0xFCLL] ^ 0xD4;
  a1[*(void *)(v40 - 232)] = (v238[BYTE2(v236) ^ 0x8CLL] - 22) ^ 0x47;
  int v240 = (char *)*(&off_10027AEF0 + HIDWORD(a6)) - 8;
  a1[*(void *)(v40 - 216)] = (v240[HIBYTE(v235) ^ 0xDELL] - 16) ^ 0x1B;
  a1[*(void *)(v40 - 240)] = ((v238[BYTE2(v235) ^ 0x15LL] + ((v238[BYTE2(v235) ^ 0x15LL] - 22) ^ 0xDA) - 21) ^ 0xFE)
                             + v238[BYTE2(v235) ^ 0x15LL]
                             - 22;
  uint64_t v241 = v245 ^ v233;
  uint64_t v242 = v241 ^ (v234 - 1484953747) ^ ((_DWORD)v133 - 1974578392) ^ ((_DWORD)v231
                                                                                 - ((2 * (_DWORD)v231 + 904629806) & 0xC9B95084)
                                                                                 + 2144497497);
  a1[*(void *)(v40 - 224)] = v239[v242 ^ 5LL] ^ 0x26;
  a1[*(void *)(v40 - 168)] = (v240[(v140 >> 24) ^ 0x4ELL] - 16) ^ 0xE6;
  a1[*(void *)(v40 - 160)] = (v240[BYTE3(v236) ^ 0x9CLL] - 16) ^ 0xB8;
  uint64_t v243 = *(void *)(v40 - 176);
  a1[v243] = (v240[BYTE3(v242) ^ 0x67LL] - 16) ^ 0x91;
  a1[*(void *)(v40 - 152)] = v239[v236 ^ 0xF2LL] ^ 0x2C;
  a1[*(void *)(v40 - 192)] = v237[BYTE1(v236) ^ 0x1ELL] ^ 0xF;
  a1[*(void *)(v40 - 144)] = v237[BYTE1(v242) ^ 0x33LL] ^ 0x16;
  a1[*(void *)(v40 - 184)] = v237[BYTE1(v140) ^ 0xBCLL] ^ 0xD8;
  a1[*(void *)(v40 - 136)] = v239[v140 ^ 0x9FLL] ^ 0xD4;
  a1[*(void *)(v40 - 128)] = (v238[BYTE2(v242) ^ 0xDLL] - 22) ^ 0x8E;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a36 + 8LL * ((483 * ((((_DWORD)v243 - 1754108658 - 2 * (((_DWORD)v243 + 16) & 0x17726CFF ^ *(_DWORD *)(v40 - 196) & 1)) ^ 0x97726CFE) >= HIDWORD(v248))) ^ (v223 - 488))) - 4LL))( v242,  v236,  v241,  3384365188LL,  v239,  v231,  2320388904LL,  v233,  a2,  a3,  a4,  a1,  a6,  v245,  v246,  v247,  v248,  v249,  v108,  v250,  v251,  v252,  v253,  v254,  v255,  v256,  v257,  v258,  v259,  v260,  v261,  v262,  v263,  v264,  v265,  v266);
}

void sub_1001C8C78()
{
}

uint64_t sub_1001C8CAC(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_1001C8CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)(v8
                                                                                        + 8LL
                                                                                        * (a7 ^ (961 * ((v7 & 8) == 0))))
                                                                            - ((389 * (a7 ^ 0x1D5u)) ^ 0x79DLL)))( a1,  a2,  a3,  (a2 - a3),  a7 ^ 0x762u);
}

uint64_t sub_1001C8D28@<X0>( int a1@<W0>, int a2@<W2>, int a3@<W5>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39)
{
  *(_DWORD *)(v46 - 1swift_unknownObjectWeakDestroy(v0 + 16) = v47;
  int v48 = (a3 - 54827018) & 0x34497FF;
  *(_DWORD *)(v46 - 128) = v42;
  int v49 = (v48 - 1943) & v42;
  int v50 = -a2;
  *(_DWORD *)(v46 - 136) = v49;
  *(_DWORD *)(v46 - 144) = v48 - 1406;
  uint64_t v51 = (v50 + a1 + v44 + v45);
  v53.val[0].i64[0] = ((_BYTE)v50 + (_BYTE)a1 + (_BYTE)v44 + (_BYTE)v45) & 0xF;
  v53.val[0].i64[1] = ((_BYTE)v50 + v43 + (_BYTE)a1 + (_BYTE)v44 - 107) & 0xF;
  v53.val[1].i64[0] = ((_BYTE)v50 + v43 + (_BYTE)a1 + (_BYTE)v44 - 108) & 0xF;
  v53.val[1].i64[1] = ((_BYTE)v50 + v43 + (_BYTE)a1 + (_BYTE)v44 - 109) & 0xF;
  v53.val[2].i64[0] = ((_BYTE)v50 + v43 + (_BYTE)a1 + (_BYTE)v44 - 110) & 0xF;
  v53.val[2].i64[1] = ((_BYTE)v50 + v43 + (_BYTE)a1 + (_BYTE)v44 - 111) & 0xF;
  v53.val[3].i64[0] = ((_BYTE)v50 + v43 + (_BYTE)a1 + (_BYTE)v44 - 112) & 0xF;
  v53.val[3].i64[1] = ((_BYTE)v50 + (_BYTE)a1 + (_BYTE)v44 + v43 + (_BYTE)a3 - 10) & 0xF;
  *(int8x8_t *)(a4 - 7 + v51) = veor_s8( veor_s8( veor_s8(*(int8x8_t *)(v40 + (v51 & 0xF) - 7), *(int8x8_t *)(a4 - 7 + v51)),  veor_s8(*(int8x8_t *)((v51 & 0xF) + v41 - 5), *(int8x8_t *)((v51 & 0xF) + v39 - 3))),  vrev64_s8( vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8(v53, (int8x16_t)xmmword_1001F5E30),  (int8x8_t)0x7777777777777777LL)));
  return ((uint64_t (*)(__n128))(*(void *)(a39 + 8LL * ((22 * (v50 != 8 - v49)) ^ v48)) - 8LL))((__n128)xmmword_1001F5E30);
}

void sub_1001C8E74()
{
}

uint64_t sub_1001C8E9C()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * (int)(((*(_DWORD *)(v1 - 144)
                                                + 1185
                                                + ((*(_DWORD *)(v1 - 144) + 1185) ^ 0xFFFFFF74))
                                               * (*(_DWORD *)(v1 - 128) == *(_DWORD *)(v1 - 136))) ^ *(_DWORD *)(v1 - 144)))
                            - 4LL))();
}

uint64_t sub_1001C8ED8@<X0>(int a1@<W3>, int a2@<W4>, uint64_t a3@<X8>)
{
  uint64_t v8 = (a1 - 265206530);
  *(_BYTE *)(a3 + v8) ^= *(_BYTE *)(v5 + (v8 & 0xF)) ^ *(_BYTE *)((v8 & 0xF) + v6 + 2) ^ *(_BYTE *)((v8 & 0xF) + v4 + 4) ^ (119 * (v8 & 0xF));
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((221 * (a1 - 1 == v3)) ^ (a2 - 1625))) - 12LL))();
}

void sub_1001C8F44()
{
  if (v0 == 112234441) {
    int v1 = 2084229119;
  }
  else {
    int v1 = -2084203481;
  }
  *(_DWORD *)(v2 + 3sub_100129678(v0 + 2) = v1;
}

void sub_1001C8FA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2) {
    BOOL v8 = a3 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  int v12 = !v8 && a6 != 0 && a7 != 0 && a8 != 0;
  __asm { BR              X8 }

uint64_t sub_1001C9034( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, unsigned int a22)
{
  *a6 = 0LL;
  *a7 = 0;
  a22 = 108757529 * (((&a21 | 0x956C4C34) - (&a21 & 0x956C4C34)) ^ 0x75F02E1F) - 504207030;
  uint64_t v25 = sub_1001CF8B4(&a21);
  return ((uint64_t (*)(uint64_t))(*(void *)(v23 + 8LL * ((1813 * (a21 == v24)) ^ v22)) - 8LL))(v25);
}

uint64_t sub_1001C90C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, unint64_t *a21, unsigned int a22, unsigned int a23, int a24)
{
  unsigned int v25 = 1759421093 * ((-260476592 - (&a21 | 0xF0797150) + (&a21 | 0xF868EAF)) ^ 0xBCFB3EFB);
  LODWORD(a21) = v25 ^ 0x3B0DE444;
  HIDWORD(a21) = v25 ^ 0x1CA2E939;
  a24 = v25 ^ 0x5C802CB3;
  a22 = v25 + 382;
  sub_1001A4894((uint64_t)&a21);
  HIDWORD(a11) = a23;
  a23 = 854
      - 460628867
      * (((&a21 | 0xCD1B7496) - &a21 + (&a21 & 0x32E48B68)) ^ 0x818DF6EB);
  a21 = &STACK[0x49EB7E5E2EA5C925];
  sub_1001A8490((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 + 8LL * ((406 * (a22 != 2084229119)) ^ 0xFBu)) - 8LL))( v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  a9,  a10,  a11,  a12,  a13,  a14);
}

uint64_t sub_1001C9210( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, int a22, uint64_t a23, unsigned int a24, uint64_t a25)
{
  unsigned int v32 = 1178560073 * (&a21 ^ 0xBA947862);
  a23 = a16;
  a24 = (v25 - 73) ^ v32;
  a22 = v32 + 804878199 * v31 + 1740498123;
  uint64_t v33 = (void (*)(int *))*(&off_10027AEF0 + (int)(v25 - 954));
  v33(&a21);
  a23 = a16;
  a25 = v30;
  a24 = v25
  ((void (*)(int *))((char *)*(&off_10027AEF0 + (v25 ^ 0x431)) - 8))(&a21);
  unsigned int v34 = 1178560073 * ((&a21 - 256234305 - 2 * (&a21 & 0xF0BA2CBF)) ^ 0x4A2E54DD);
  a24 = (v25 - 73) ^ v34;
  a23 = a16;
  a22 = v34 + 804878199 * v29 + 1740498123;
  v33(&a21);
  unsigned int v35 = 1178560073 * ((1273442814 - (&a21 | 0x4BE731FE) + (&a21 | 0xB418CE01)) ^ 0xE8CB663);
  a23 = a16;
  a22 = v35 + v25 - 778;
  a24 = (((2 * v28) & 0xBEFFBBD8) - 273154088 + (v28 ^ 0x5F7FDC81 ^ (((v25 - 1050) | 0x420) - 711))) ^ v35;
  a25 = v27;
  uint64_t v36 = ((uint64_t (*)(int *))*(&off_10027AEF0 + (int)(v25 - 1014)))(&a21);
  return ((uint64_t (*)(uint64_t))(*(void *)(v26 + 8LL * ((26 * (a21 != 2084229119)) ^ v25)) - 8LL))(v36);
}

uint64_t sub_1001C9424( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12, unsigned int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, unint64_t *a23, uint64_t a24, unsigned int a25, unsigned int a26, unsigned int a27, int a28)
{
  if (a13 >= 0x5DC22130) {
    int v31 = 274310065;
  }
  else {
    int v31 = 274310066;
  }
  unsigned int v32 = 460628867 * ((2 * (&a23 & 0x420AA0F0) - &a23 + 1039490828) ^ 0x7163DD71);
  a23 = &STACK[0x27D4077E41C0C6E8];
  a24 = a18;
  a25 = v32 - 463518139;
  a26 = v32 + a10 - 2024874159;
  a27 = v31 - v32;
  uint64_t v33 = sub_1001CFD20((uint64_t)&a23);
  return ((uint64_t (*)(uint64_t))(*(void *)(v28
                                                      + 8LL * ((886 * (a28 == v30 + ((a10 + 94) | 0x64) - 1270)) ^ a10))
                                          - (v29 ^ 0x165)))(v33);
}

uint64_t sub_1001C9530( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, unint64_t *a24, unint64_t *a25, unsigned int a26)
{
  a23 = a19;
  a24 = &STACK[0x7785963AF34447C6];
  a25 = &STACK[0x335EB1051722E02C];
  a26 = (v26 - 869) ^ (1225351577
                     * (((&a22 | 0xC4A46F41) - (&a22 & 0xC4A46F41)) ^ 0xE73EB757));
  uint64_t v29 = ((uint64_t (*)(char *))((char *)*(&off_10027AEF0 + v26 - 1259) - 12))(&a22);
  return (*(uint64_t (**)(uint64_t))(v27 + 8LL * (((((v26 - 1141) | 0x70) + 487) * (a12 < v28)) ^ v26)))(v29);
}

uint64_t sub_1001C9620( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _BYTE *a18, uint64_t a19, int a20, char a21, unsigned int a22, char *a23, _BYTE *a24)
{
  a22 = (v24 - 868) ^ (1374699841
                     * (((&a22 | 0x3D62B3F9) - (&a22 & 0x3D62B3F9)) ^ 0x5096ABF0));
  a23 = &a21 + v29;
  a24 = a18;
  v28(&a22);
  a22 = ((v24 ^ 0x407) + 161) ^ (1374699841
                               * (((&a22 ^ 0xF12FB018 | 0xF7130791)
  a23 = v27;
  a24 = a18;
  v28(&a22);
  unsigned int v30 = 2 * &a22;
  a22 = ((v24 ^ 0x407) + 161) ^ (1374699841 * (((v30 | 0x6C375C36) - &a22 - 907783707) ^ 0x5BEFB612));
  a23 = v25;
  a24 = a18;
  v28(&a22);
  a22 = ((v24 ^ 0x407) + 172) ^ (1755732067 * (((v30 | 0x580604F2) - &a22 + 1409088903) ^ 0x72C5BFA2));
  a23 = a18;
  uint64_t v31 = sub_1001A3BA0((uint64_t)&a22);
  return ((uint64_t (*)(uint64_t))(*(void *)(v26
                                                      + 8LL
                                                      * ((((_DWORD)a24 == 2084229119) * (v24 ^ 0x6D6)) ^ v24 ^ 0x407))
                                          - 8LL))(v31);
}

uint64_t sub_1001C97C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  return ((uint64_t (*)(void))(*(void *)(v20 + 8LL * ((1331 * (a20 == v22)) ^ v21)) - ((v21 - 241) | 0xF0u) + 232LL))();
}

uint64_t sub_1001C9800@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, int a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  *a7 = ~a9;
  return ((uint64_t (*)(void))(*(void *)(v14 + 8LL * ((a14 == v15 + ((a1 - 208) | 0x414) - 1076) | a1))
}

uint64_t sub_1001C9850()
{
  BOOL v4 = ((uint64_t (*)(void))*(&off_10027AEF0 + (v1 ^ 0x13)))(v0 ^ v3) == 0;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((287 * ((v4 ^ ((v1 ^ 0xC5) + 1)) & 1)) ^ v1))
                            - ((v1 - 41) | 0x600u)
                            + 1728LL))();
}

uint64_t sub_1001C98B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20)
{
  int v23 = (a20 ^ v22) - ((2 * (a20 ^ v22)) & 0x35134EC) + 27826806;
  return ((uint64_t (*)(void))(*(void *)(v21
                                        + 8LL
                                        * ((477
                                          * (((v20 ^ 0xFDF3E5B6) & (2 * v23) ^ 0x151206C)
                                           + ((v20 - 1495) ^ v23 ^ 0xFF516B38)
                                           + 930545525 != 913371444)) ^ v20))
                            - 8LL))();
}

uint64_t sub_1001C9944(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v4
                                                      + 8LL
                                                      * ((352 * (v2 + v1 + (v3 ^ 0x960F705u) - 140174220 > 7)) ^ v3 ^ 0x69B))
                                          - 8LL))(a1);
}

uint64_t sub_1001C99AC(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((249 * (v2 - a1 < ((a2 - v3 - 1242) ^ (413 * (a2 ^ 0x264u)) ^ 0x960F53AuLL))) ^ a2))
                            - 4LL))();
}

uint64_t sub_1001C99FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(uint64_t, void))(*(void *)(v10
                                                              + 8LL
                                                              * ((465
                                                                * (v8 >= ((a7 - v7 - 1866) ^ (v9 + 647)))) ^ a7))
                                                  - (a7 - 213)
                                                  + 1018LL))( a1,  0LL);
}

uint64_t sub_1001C9A38(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v13 = a6 + v9 + v10 + 614;
  uint64_t v14 = v6 + v13;
  __int128 v15 = *(_OWORD *)(v14 - 31);
  uint64_t v16 = a1 + v13;
  *(_OWORD *)(v16 - 15) = *(_OWORD *)(v14 - 15);
  *(_OWORD *)(v16 - 31) = v15;
}

void sub_1001C9AA0()
{
}

uint64_t sub_1001C9AAC(uint64_t a1)
{
  *int v7 = a1;
  *int v8 = v2;
  int v5 = v1 + 124;
  unsigned int v12 = v1
      + 835
  uint64_t v13 = v10;
  v3(v11);
  unsigned int v12 = v5
      + 535753261
  uint64_t v13 = v9;
  v3(v11);
  return v4 ^ 0x7C3ACFFFu;
}

void sub_1001C9D80(uint64_t a1)
{
  int v1 = (*(_DWORD *)(a1 + 16) ^ (628203409 * ((1303688841 - (a1 | 0x4DB4B689) + (a1 | 0xB24B4976)) ^ 0x30C34545))) - 143;
  __asm { BR              X4 }

uint64_t sub_1001C9F14(uint64_t a1, int a2, unsigned int a3, int a4)
{
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((960 * (a4 + ((v4 - 416) | a2) != 447)) ^ (v4 + 79)))
                            - ((v4 + 79) ^ a3)
                            + 1088LL))();
}

uint64_t sub_1001C9F80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  *(_DWORD *)(a12 - 0x19A1466F6B3325CLL) = 2109425940 - v18;
  int v25 = 1224239923 * ((v24 + 256431370 - 2 * ((v24 - 136) & 0xF48D592)) ^ 0xFDFB2845);
  *(_DWORD *)(v24 - 136) = v25 ^ 0x5098936A;
  *(_DWORD *)(v24 - 120) = v25 + v19 - 713;
  *(void *)(v24 - 128) = v20;
  sub_10018D9BC((_DWORD *)(v24 - 136));
  int v26 = 1759421093 * (((v24 - 136) & 0x4EC92FE | ~((v24 - 136) | 0x4EC92FE)) ^ 0x486EDD55);
  *(void *)(v24 - 128) = v20;
  *(_DWORD *)(v24 - 136) = ((v22 << 6) & 0x7606F740) - v26 + ((32 * v22) ^ 0x3B037BBB) - 688016128;
  *(_DWORD *)(v24 - 120) = v19 - v26 + 160;
  sub_1001BCB30(v24 - 136);
  *(_DWORD *)(v24 - 120) = v19
                         + 1374699841 * ((((v24 - 136) | 0xC69197A2) - ((v24 - 136) & 0xC69197A2)) ^ 0xAB658FAB)
                         - 665;
  *(void *)(v24 - 128) = &STACK[0x1F589EA4AC42BE39];
  *(void *)(v24 - 136) = a18;
  sub_1001A2B9C(v24 - 136);
  *(_DWORD *)(v24 - 120) = v19
                         + 1178560073 * (((v24 - 136) & 0xC3F300DC | ~((v24 - 136) | 0xC3F300DC)) ^ 0x86988741)
                         - 305;
  *(void *)(v24 - 11sub_100129678(v0 + 2) = v20;
  *(void *)(v24 - 128) = a18;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(v23 + 8LL * (v19 ^ 0x40D)))(v24 - 136);
  return ((uint64_t (*)(uint64_t))(*(void *)(v21
                                                      + 8LL
                                                      * ((217
                                                        * (*(_DWORD *)(v24 - 136) <= (((v19 - 972) | 2) ^ 0x5AA537A5u))) ^ v19))
                                          - 12LL))(v27);
}

uint64_t sub_1001CA1B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  *(_DWORD *)(v15 - 120) = v14
                         + 1374699841
                         * ((((v15 - 136) | 0x729EA90D) - (v15 - 136) + ((v15 - 136) & 0x8D6156F0)) ^ 0x1F6AB104)
                         + 305;
  *(void *)(v15 - 136) = v13;
  *(void *)(v15 - 128) = a10;
  uint64_t v16 = sub_1001A2B9C(v15 - 136);
  return ((uint64_t (*)(uint64_t))(*(void *)(v12 + 8LL * ((60 * (a12 < v14 - 129)) ^ v14)) - 12LL))(v16);
}

uint64_t sub_1001CA254( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t), uint64_t a18)
{
  *(_DWORD *)(v21 - 120) = v20 + 1374699841 * ((v21 - 136) ^ 0x6DF41809) - 124;
  *(void *)(v21 - 136) = a18;
  *(void *)(v21 - 128) = a16;
  sub_1001A2B9C(v21 - 136);
  int v22 = 1759421093 * (((v21 - 136) & 0x91FB6DD7 | ~((v21 - 136) | 0x91FB6DD7)) ^ 0xDD79227C);
  *(void *)(v21 - 128) = v18;
  *(_DWORD *)(v21 - 120) = v20 - v22 + 701;
  *(_DWORD *)(v21 - 136) = 302067900 - v22;
  sub_1001BCB30(v21 - 136);
  *(void *)(v21 - 128) = a18;
  *(void *)(v21 - 11sub_100129678(v0 + 2) = v18;
  *(_DWORD *)(v21 - 120) = v20 + 1178560073 * ((v21 + 1967052084 - 2 * ((v21 - 136) & 0x753ED5BC)) ^ 0xCFAAADDE) + 236;
  uint64_t v23 = a17(v21 - 136);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL
                                                      * (int)(((((v20 - 52) ^ (*(_DWORD *)(v21 - 136) > 0x5AA53727u)) & 1)
                                                             * (((v20 + 551344256) & 0xDF2327D7) - 546)) ^ (v20 + 257)))
                                          - 4LL))(v23);
}

uint64_t sub_1001CA408( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return ((uint64_t (*)(void))(*(void *)(v11
                                        + 8LL
                                        * ((23
                                          * (((2 * a10) & 0xBCFDF774)
                                           + (a10 ^ ((v10 - 447) | 0x312) ^ 0x5E7EF860)
                                           - 262658
                                           - 1585117626 > 0x7FFFFFFD)) ^ v10))
                            - 4LL))();
}

  ;
}

void sub_1001CB018(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (1755732067 * ((a1 - 2 * (a1 & 0x7A08EF3) + 127962867) ^ 0xD9663328));
  __asm { BR              X9 }

uint64_t sub_1001CB0A8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8LL
                              * (((*(_DWORD *)(v2 - 0x27E11828102FB971LL) == 2084229119) * ((v1 + 372) ^ 0x52F)) ^ v1)))();
}

uint64_t sub_1001CB0EC@<X0>(uint64_t a1@<X8>)
{
  unsigned int v3 = *(_DWORD *)(v2 - 0x27E11828102FB979LL) - 1925760358;
  unsigned int v4 = *(_DWORD *)(v2 - 0x27E11828102FB97DLL) + 1983425364 + 187 * (v1 ^ 0x251);
  BOOL v5 = v3 < 0xA09CF8AA;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 0xA09CF8AA) {
    BOOL v6 = v5;
  }
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((56 * v6) ^ v1)) - 8LL))();
}