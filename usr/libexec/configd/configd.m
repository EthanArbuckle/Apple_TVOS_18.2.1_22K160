void sub_1000017AC(CFTypeRef cf)
{
  CFRelease(cf);
}

os_log_t sub_1000017F0()
{
  os_log_t result = (os_log_t)qword_100079A20;
  if (!qword_100079A20)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
    qword_100079A20 = (uint64_t)result;
  }

  return result;
}

void start(int a1, char *const *a2)
{
  *(_OWORD *)&context.version = xmmword_100071880;
  *(_OWORD *)&context.retain = *(_OWORD *)algn_100071890;
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))sub_100002514;
  uint64_t v75 = 0LL;
  v71 = *a2;
  qword_1000799A8 = (uint64_t)CFSetCreateMutable(0LL, 0LL, &kCFTypeSetCallBacks);
  v74 = 0LL;
  int v73 = 0;
  qword_1000799B0 = (uint64_t)CFSetCreateMutable(0LL, 0LL, &kCFTypeSetCallBacks);
  int v72 = 1;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v4 = getopt_long(a1, a2, "bB:dt:vV:", (const option *)&off_1000718A8, 0LL);
        if (v4 <= 97) {
          break;
        }
        if (v4 <= 117)
        {
          switch(v4)
          {
            case 'b':
              int v72 = 0;
              break;
            case 'd':
              int v73 = 1;
              break;
            case 't':
              v74 = optarg;
              break;
            default:
              goto LABEL_27;
          }
        }

        else
        {
          if (v4 != 118) {
            goto LABEL_27;
          }
          byte_1000799A0 = 1;
        }
      }

      if (v4 != 66) {
        break;
      }
      CFStringRef v6 = CFStringCreateWithCString(0LL, optarg, 0);
      v7 = (__CFSet *)qword_1000799A8;
LABEL_11:
      CFSetSetValue(v7, v6);
      CFRelease(v6);
    }

    if (v4 != 86)
    {
      if (v4 != -1) {
LABEL_27:
      }
        sub_100002568();
      if (getuid())
      {
        fprintf(__stderrp, "%s: permission denied.\n", v71);
        exit(77);
      }

      vproc_swap_integer(0LL, 5LL, 0LL, &v75);
      uint64_t v8 = v75;
      if (v73 || v75)
      {
        v10 = v74;
        if (v74 || !v73) {
          goto LABEL_37;
        }
        _sc_log = 0;
      }

      else
      {
        signal(15, (void (__cdecl *)(int))sub_100002758);
        pid_t v9 = fork();
        v10 = v74;
        if (v9 == -1) {
          goto LABEL_26;
        }
        if (v9)
        {
          wait4(v9, v80, 0, 0LL);
          if ((v80[0] & 0x7F) != 0) {
            fprintf(__stderrp, "*** configd (daemon) failed to start, received signal=%d\n");
          }
          else {
            fprintf(__stderrp, "*** configd (daemon) failed to start, exit status=%d\n");
          }
          fflush(__stderrp);
          exit(70);
        }

        signal(15, 0LL);
        if (setsid() == -1)
        {
LABEL_26:
          v11 = __stderrp;
          v12 = __error();
          v13 = strerror(*v12);
          fprintf(v11, "configd: fork() failed: %s\n", v13);
          exit(1);
        }

        chdir("/");
        uint64_t v8 = v75;
LABEL_37:
        if (!v10 && !v8)
        {
          int v14 = getdtablesize();
          if (v14 >= 1)
          {
            unsigned int v15 = v14 + 1;
            do
            {
              close(v15 - 2);
              --v15;
            }

            while (v15 > 1);
          }

          int v16 = open("/dev/null", 2, 0LL);
          if (v16 != -1)
          {
            int v17 = v16;
            dup2(v16, 0);
            int v18 = open("/var/log/configd.log", 9, 0LL);
            if (v18 == -1)
            {
              int v19 = v17;
            }

            else
            {
              int v19 = v18;
              if (v17 >= 1) {
                close(v17);
              }
            }

            dup2(v19, 1);
            dup2(v19, 2);
            if (v19 >= 3) {
              close(v19);
            }
          }
        }
      }

      if (setiopolicy_np(9, 0, 1) == -1)
      {
        v20 = (os_log_s *)qword_100079A20;
        if (!qword_100079A20)
        {
          v20 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_100079A20 = (uint64_t)v20;
        }

        uint64_t v21 = _SC_syslog_os_log_mapping(3LL);
        if (__SC_log_enabled(3LL, v20, v21))
        {
          __int128 v94 = 0u;
          __int128 v95 = 0u;
          __int128 v92 = 0u;
          __int128 v93 = 0u;
          __int128 v90 = 0u;
          __int128 v91 = 0u;
          __int128 v88 = 0u;
          __int128 v89 = 0u;
          __int128 v86 = 0u;
          __int128 v87 = 0u;
          __int128 v84 = 0u;
          __int128 v85 = 0u;
          __int128 v83 = 0u;
          __int128 v81 = 0u;
          __int128 v82 = 0u;
          *(_OWORD *)v80 = 0u;
          unsigned int v22 = (_sc_log > 0) | 2;
          uint64_t v23 = os_log_type_enabled(v20, (os_log_type_t)v21) ? v22 : 2LL;
          v24 = __error();
          v25 = strerror(*v24);
          LODWORD(v96.__sigaction_u.__sa_handler) = 136315138;
          *(void (__cdecl **)(int, __siginfo *, void *))((char *)&v96.__sigaction_u.__sa_sigaction + 4) = (void (__cdecl *)(int, __siginfo *, void *))v25;
          v26 = (int *)_os_log_send_and_compose_impl( v23,  0LL,  v80,  256LL,  &_mh_execute_header,  v20,  v21,  "setiopolicy_np() failed: %s",  (const char *)&v96);
          __SC_log_send2(3LL, v20, v21, 0LL, v26);
          if (v26 != v80) {
            free(v26);
          }
        }
      }

      v96.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_100002650;
      *(void *)&v96.sa_mask = 0x200000000LL;
      if (sigaction(1, &v96, 0LL) == -1)
      {
        v27 = (os_log_s *)qword_100079A20;
        if (!qword_100079A20)
        {
          v27 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_100079A20 = (uint64_t)v27;
        }

        uint64_t v28 = _SC_syslog_os_log_mapping(3LL);
        if (__SC_log_enabled(3LL, v27, v28))
        {
          __int128 v94 = 0u;
          __int128 v95 = 0u;
          __int128 v92 = 0u;
          __int128 v93 = 0u;
          __int128 v90 = 0u;
          __int128 v91 = 0u;
          __int128 v88 = 0u;
          __int128 v89 = 0u;
          __int128 v86 = 0u;
          __int128 v87 = 0u;
          __int128 v84 = 0u;
          __int128 v85 = 0u;
          __int128 v83 = 0u;
          __int128 v81 = 0u;
          __int128 v82 = 0u;
          *(_OWORD *)v80 = 0u;
          unsigned int v29 = (_sc_log > 0) | 2;
          uint64_t v30 = os_log_type_enabled(v27, (os_log_type_t)v28) ? v29 : 2LL;
          v31 = __error();
          v32 = strerror(*v31);
          integer_t port_info = 136315138;
          v79 = v32;
          v33 = (int *)_os_log_send_and_compose_impl( v30,  0LL,  v80,  256LL,  &_mh_execute_header,  v27,  v28,  "sigaction(SIGHUP, ...) failed: %s",  (const char *)&port_info);
          __SC_log_send2(3LL, v27, v28, 0LL, v33);
          if (v33 != v80) {
            free(v33);
          }
        }
      }

      if (sigaction(13, &v96, 0LL) == -1)
      {
        v34 = (os_log_s *)qword_100079A20;
        if (!qword_100079A20)
        {
          v34 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_100079A20 = (uint64_t)v34;
        }

        uint64_t v35 = _SC_syslog_os_log_mapping(3LL);
        if (__SC_log_enabled(3LL, v34, v35))
        {
          __int128 v94 = 0u;
          __int128 v95 = 0u;
          __int128 v92 = 0u;
          __int128 v93 = 0u;
          __int128 v90 = 0u;
          __int128 v91 = 0u;
          __int128 v88 = 0u;
          __int128 v89 = 0u;
          __int128 v86 = 0u;
          __int128 v87 = 0u;
          __int128 v84 = 0u;
          __int128 v85 = 0u;
          __int128 v83 = 0u;
          __int128 v81 = 0u;
          __int128 v82 = 0u;
          *(_OWORD *)v80 = 0u;
          unsigned int v36 = (_sc_log > 0) | 2;
          uint64_t v37 = os_log_type_enabled(v34, (os_log_type_t)v35) ? v36 : 2LL;
          v38 = __error();
          v39 = strerror(*v38);
          integer_t port_info = 136315138;
          v79 = v39;
          v40 = (int *)_os_log_send_and_compose_impl( v37,  0LL,  v80,  256LL,  &_mh_execute_header,  v34,  v35,  "sigaction(SIGPIPE, ...) failed: %s",  (const char *)&port_info);
          __SC_log_send2(3LL, v34, v35, 0LL, v40);
          if (v40 != v80) {
            free(v40);
          }
        }
      }

      if (sigaction(15, &v96, 0LL) == -1)
      {
        v41 = (os_log_s *)qword_100079A20;
        if (!qword_100079A20)
        {
          v41 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_100079A20 = (uint64_t)v41;
        }

        uint64_t v42 = _SC_syslog_os_log_mapping(3LL);
        if (__SC_log_enabled(3LL, v41, v42))
        {
          __int128 v94 = 0u;
          __int128 v95 = 0u;
          __int128 v92 = 0u;
          __int128 v93 = 0u;
          __int128 v90 = 0u;
          __int128 v91 = 0u;
          __int128 v88 = 0u;
          __int128 v89 = 0u;
          __int128 v86 = 0u;
          __int128 v87 = 0u;
          __int128 v84 = 0u;
          __int128 v85 = 0u;
          __int128 v83 = 0u;
          __int128 v81 = 0u;
          __int128 v82 = 0u;
          *(_OWORD *)v80 = 0u;
          unsigned int v43 = (_sc_log > 0) | 2;
          uint64_t v44 = os_log_type_enabled(v41, (os_log_type_t)v42) ? v43 : 2LL;
          v45 = __error();
          v46 = strerror(*v45);
          integer_t port_info = 136315138;
          v79 = v46;
          v47 = (int *)_os_log_send_and_compose_impl( v44,  0LL,  v80,  256LL,  &_mh_execute_header,  v41,  v42,  "sigaction(SIGTERM, ...) failed: %s",  (const char *)&port_info);
          __SC_log_send2(3LL, v41, v42, 0LL, v47);
          if (v47 != v80) {
            free(v47);
          }
        }
      }

      if (sigaction(2, &v96, 0LL) == -1)
      {
        v48 = (os_log_s *)qword_100079A20;
        if (!qword_100079A20)
        {
          v48 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_100079A20 = (uint64_t)v48;
        }

        uint64_t v49 = _SC_syslog_os_log_mapping(3LL);
        if (__SC_log_enabled(3LL, v48, v49))
        {
          __int128 v94 = 0u;
          __int128 v95 = 0u;
          __int128 v92 = 0u;
          __int128 v93 = 0u;
          __int128 v90 = 0u;
          __int128 v91 = 0u;
          __int128 v88 = 0u;
          __int128 v89 = 0u;
          __int128 v86 = 0u;
          __int128 v87 = 0u;
          __int128 v84 = 0u;
          __int128 v85 = 0u;
          __int128 v83 = 0u;
          __int128 v81 = 0u;
          __int128 v82 = 0u;
          *(_OWORD *)v80 = 0u;
          unsigned int v50 = (_sc_log > 0) | 2;
          uint64_t v51 = os_log_type_enabled(v48, (os_log_type_t)v49) ? v50 : 2LL;
          v52 = __error();
          v53 = strerror(*v52);
          integer_t port_info = 136315138;
          v79 = v53;
          v54 = (int *)_os_log_send_and_compose_impl( v51,  0LL,  v80,  256LL,  &_mh_execute_header,  v48,  v49,  "sigaction(SIGINT, ...) failed: %s",  (const char *)&port_info);
          __SC_log_send2(3LL, v48, v49, 0LL, v54);
          if (v54 != v80) {
            free(v54);
          }
        }
      }

      qword_100079A28 = (uint64_t)CFMachPortCreate(0LL, (CFMachPortCallBack)sub_1000026FC, &context, 0LL);
      integer_t port_info = 1;
      mach_port_t v55 = mach_task_self_;
      mach_port_name_t Port = CFMachPortGetPort((CFMachPortRef)qword_100079A28);
      if (mach_port_set_attributes(v55, Port, 1, &port_info, 1u)) {
        perror("mach_port_set_attributes");
      }
      RunLoopSource = CFMachPortCreateRunLoopSource(0LL, (CFMachPortRef)qword_100079A28, 0LL);
      Current = CFRunLoopGetCurrent();
      CFRunLoopAddSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
      CFRelease(RunLoopSource);
      if (v10) {
        goto LABEL_111;
      }
      _SCDynamicStoreSetSessionWatchLimit(0LL);
      if (qword_100079A38 != -1) {
        dispatch_once(&qword_100079A38, &stru_100071908);
      }
      if (byte_100079A30)
      {
        v59 = SCPreferencesCreate(0LL, @"configd", @"com.apple.configd.SCDynamicStoreServerDebug.plist");
        if (v59)
        {
          v60 = v59;
          Value = (const __CFBoolean *)SCPreferencesGetValue(v59, @"ShouldLogPath");
          CFTypeID TypeID = CFBooleanGetTypeID();
          if (Value && CFGetTypeID(Value) == TypeID) {
            byte_1000799E8 = CFBooleanGetValue(Value);
          }
          CFRelease(v60);
        }
      }

      sub_1000036B8();
      if (&_wd_endpoint_register)
      {
        wd_endpoint_register("com.apple.SystemConfiguration.configd.watchdog");
        uint64_t v63 = sub_1000035D8();
        uint64_t v64 = wd_endpoint_add_queue(v63);
        wd_endpoint_activate(v64);
      }

      if (!v73 && !v75)
      {
        pid_t v65 = getppid();
        kill(v65, 15);
      }

      if (v72) {
LABEL_111:
      }
        sub_100004398(v10);
      v66 = (os_log_s *)qword_100079A20;
      if (!qword_100079A20)
      {
        v66 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
        qword_100079A20 = (uint64_t)v66;
      }

      uint64_t v67 = _SC_syslog_os_log_mapping(7LL);
      if (__SC_log_enabled(7LL, v66, v67))
      {
        __int128 v94 = 0u;
        __int128 v95 = 0u;
        __int128 v92 = 0u;
        __int128 v93 = 0u;
        __int128 v90 = 0u;
        __int128 v91 = 0u;
        __int128 v88 = 0u;
        __int128 v89 = 0u;
        __int128 v86 = 0u;
        __int128 v87 = 0u;
        __int128 v84 = 0u;
        __int128 v85 = 0u;
        __int128 v83 = 0u;
        __int128 v81 = 0u;
        __int128 v82 = 0u;
        *(_OWORD *)v80 = 0u;
        unsigned int v68 = (_sc_log > 0) | 2;
        if (os_log_type_enabled(v66, (os_log_type_t)v67)) {
          uint64_t v69 = v68;
        }
        else {
          uint64_t v69 = 2LL;
        }
        v77[0] = 0;
        v70 = (int *)_os_log_send_and_compose_impl( v69,  0LL,  v80,  256LL,  &_mh_execute_header,  v66,  v67,  "starting main/plugin CFRunLoop",  v77,  2);
        __SC_log_send2(7LL, v66, v67, 0LL, v70);
        if (v70 != v80) {
          free(v70);
        }
      }

      CFRunLoopRun();
      exit(0);
    }

    v5 = optarg;
    if (strcmp(optarg, "com.apple.SystemConfiguration"))
    {
      CFStringRef v6 = CFStringCreateWithCString(0LL, v5, 0);
      v7 = (__CFSet *)qword_1000799B0;
      goto LABEL_11;
    }

    _sc_verbose = 1;
  }
}

CFStringRef sub_100002514()
{
  return CFStringCreateWithFormat(0LL, 0LL, @"<SIGTERM MP>");
}

void sub_100002568()
{
}

uint64_t sub_100002650(uint64_t result)
{
  if ((_DWORD)result == 15 || (_DWORD)result == 2)
  {
    if (!qword_100079A28) {
      _exit(0);
    }
    if (_sc_log >= 1) {
      _sc_log = 2;
    }
    uint64_t Port = CFMachPortGetPort((CFMachPortRef)qword_100079A28);
    return _SC_sendMachMessage(Port, 0LL);
  }

  return result;
}

CFIndex sub_1000026FC()
{
  int v1 = 0;
  CFIndex result = sub_100003DA4(&v1);
  if (!(_DWORD)result) {
    exit(v1);
  }
  return result;
}

void sub_100002758()
{
}

void sub_10000277C(id a1)
{
  byte_100079A30 = os_variant_has_internal_content("com.apple.SystemConfiguration");
}

void sub_1000027D4()
{
  qword_1000799B8 = (uint64_t)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  qword_1000799C0 = (uint64_t)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  qword_1000799C8 = (uint64_t)CFSetCreateMutable(0LL, 0LL, &kCFTypeSetCallBacks);
  qword_1000799D0 = (uint64_t)CFSetCreateMutable(0LL, 0LL, &kCFTypeSetCallBacks);
  qword_1000799D8 = (uint64_t)CFSetCreateMutable(0LL, 0LL, &kCFTypeSetCallBacks);
  v10 = @"com.apple.security.on-demand-install-capable";
  CFArrayRef v0 = CFArrayCreate(0LL, (const void **)&v10, 1LL, &kCFTypeArrayCallBacks);
  keys[0] = @"read-deny";
  keys[1] = @"read-deny-background";
  values[0] = v0;
  values[1] = kCFBooleanTrue;
  v10 = @"com.apple.developer.device-information.user-assigned-device-name";
  CFArrayRef v1 = CFArrayCreate(0LL, (const void **)&v10, 1LL, &kCFTypeArrayCallBacks);
  keys[2] = @"read-allow";
  keys[3] = @"read-allow-system";
  values[2] = v1;
  values[3] = kCFBooleanTrue;
  CFDictionaryRef v2 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)values,  4LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v1) {
    CFRelease(v1);
  }
  CFRelease(v0);
  ComputerName = (__CFString *)SCDynamicStoreKeyCreateComputerName(0LL);
  sub_100003078(ComputerName, v2);
  CFRelease(ComputerName);
  HostNames = (__CFString *)SCDynamicStoreKeyCreateHostNames(0LL);
  sub_100003078(HostNames, v2);
  CFRelease(HostNames);
  CFRelease(v2);
  if (qword_100079A48 != -1) {
    dispatch_once(&qword_100079A48, &stru_100071948);
  }
  if (byte_100079A40)
  {
    CFDictionaryRef v5 = sub_10000340C(@"com.apple.SCDynamicStore.test.read-deny1.entitlement", @"read-deny");
    sub_100003078(@"com.apple.SCDynamicStore.test.read-deny1.key", v5);
    CFRelease(v5);
    CFDictionaryRef v6 = sub_10000340C(@"com.apple.SCDynamicStore.test.read-deny2.entitlement", @"read-deny");
    sub_100003078(@"com.apple.SCDynamicStore.test.read-deny2.key", v6);
    CFRelease(v6);
    CFDictionaryRef v7 = sub_10000340C(@"com.apple.SCDynamicStore.test.read-allow1.entitlement", @"read-allow");
    sub_100003078(@"com.apple.SCDynamicStore.test.read-allow1.key", v7);
    CFRelease(v7);
    CFDictionaryRef v8 = sub_10000340C(@"com.apple.SCDynamicStore.test.read-allow2.entitlement", @"read-allow");
    sub_100003078(@"com.apple.SCDynamicStore.test.read-allow2.key", v8);
    CFRelease(v8);
    keys[0] = @"write-protect";
    CFDictionaryRef v9 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)&kCFBooleanTrue,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    sub_100003078(@"com.apple.SCDynamicStore.test.write-protect1.key", v9);
    sub_100003078(@"com.apple.SCDynamicStore.test.write-protect2.key", v9);
    CFRelease(v9);
  }

void sub_100002B1C(const void *a1, const void *a2)
{
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000799B8, a2);
  if (Value) {
    MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
  }
  else {
    MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  CFDictionaryRef v6 = MutableCopy;
  CFDictionaryRef v7 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"watchers");
  CFDictionaryRef v8 = (const __CFArray *)CFDictionaryGetValue(v6, @"watcherRefs");
  if (v7)
  {
    CFDictionaryRef v9 = v8;
    Mutable = CFArrayCreateMutableCopy(0LL, 0LL, v7);
    CFMutableArrayRef v11 = CFArrayCreateMutableCopy(0LL, 0LL, v9);
  }

  else
  {
    Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    CFMutableArrayRef v11 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  }

  v12 = v11;
  v18.length = CFArrayGetCount(Mutable);
  v18.location = 0LL;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(Mutable, v18, a1);
  if (FirstIndexOfValue == -1)
  {
    CFArrayAppendValue(Mutable, a1);
    int valuePtr = 1;
    CFNumberRef v16 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
    CFArrayAppendValue(v12, v16);
  }

  else
  {
    CFIndex v14 = FirstIndexOfValue;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v12, FirstIndexOfValue);
    CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
    ++valuePtr;
    CFNumberRef v16 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
    CFArraySetValueAtIndex(v12, v14, v16);
  }

  CFRelease(v16);
  CFDictionarySetValue(v6, @"watchers", Mutable);
  CFRelease(Mutable);
  CFDictionarySetValue(v6, @"watcherRefs", v12);
  CFRelease(v12);
  CFDictionarySetValue((CFMutableDictionaryRef)qword_1000799B8, a2, v6);
  CFRelease(v6);
}

void sub_100002D48(const void *a1, const void *a2)
{
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000799B8, a2);
  if (Value)
  {
    CFDictionaryRef v5 = Value;
    if (CFDictionaryContainsKey(Value, @"watchers"))
    {
      MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v5);
      CFDictionaryRef v7 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"watchers");
      CFDictionaryRef v8 = CFArrayCreateMutableCopy(0LL, 0LL, v7);
      CFDictionaryRef v9 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"watcherRefs");
      CFMutableArrayRef v10 = CFArrayCreateMutableCopy(0LL, 0LL, v9);
      v17.length = CFArrayGetCount(v8);
      v17.location = 0LL;
      CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v8, v17, a1);
      if (FirstIndexOfValue == -1)
      {
        CFRelease(MutableCopy);
        CFRelease(v8);
        CFRelease(v10);
      }

      else
      {
        CFIndex v12 = FirstIndexOfValue;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v10, FirstIndexOfValue);
        CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
        int v14 = valuePtr--;
        if (v14 < 2)
        {
          CFArrayRemoveValueAtIndex(v8, v12);
          CFArrayRemoveValueAtIndex(v10, v12);
        }

        else
        {
          CFNumberRef v15 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
          CFArraySetValueAtIndex(v10, v12, v15);
          CFRelease(v15);
        }

        if (CFArrayGetCount(v8) < 1)
        {
          CFDictionaryRemoveValue(MutableCopy, @"watchers");
          CFDictionaryRemoveValue(MutableCopy, @"watcherRefs");
        }

        else
        {
          CFDictionarySetValue(MutableCopy, @"watchers", v8);
          CFDictionarySetValue(MutableCopy, @"watcherRefs", v10);
        }

        CFRelease(v8);
        CFRelease(v10);
        if (CFDictionaryGetCount(MutableCopy) < 1) {
          CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1000799B8, a2);
        }
        else {
          CFDictionarySetValue((CFMutableDictionaryRef)qword_1000799B8, a2, MutableCopy);
        }
        CFRelease(MutableCopy);
      }
    }
  }

void *sub_100002FAC(void *key)
{
  value = 0LL;
  CFDictionaryRef v7 = 0LL;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1000799B8, key, (const void **)&value)
    && (v1 = value, CFTypeID TypeID = CFDictionaryGetTypeID(), v1)
    && CFGetTypeID(v1) == TypeID
    && CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"access-controls", (const void **)&v7)
    && (v3 = v7, CFTypeID v4 = CFDictionaryGetTypeID(), v3)
    && CFGetTypeID(v3) == v4)
  {
    return v7;
  }

  else
  {
    return 0LL;
  }

void sub_100003078(void *key, const void *a2)
{
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000799B8, key);
  if (Value) {
    MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
  }
  else {
    MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  CFDictionaryRef v6 = MutableCopy;
  CFDictionarySetValue(MutableCopy, @"access-controls", a2);
  CFDictionarySetValue((CFMutableDictionaryRef)qword_1000799B8, key, v6);
  CFRelease(v6);
}

void sub_10000313C()
{
  if (qword_1000799E0)
  {
    CFIndex Count = CFSetGetCount((CFSetRef)qword_1000799E0);
    uint64_t v1 = Count;
    if (Count >= 65)
    {
      CFDictionaryRef v2 = (const void **)CFAllocatorAllocate(0LL, 8 * Count, 0LL);
      CFSetGetValues((CFSetRef)qword_1000799E0, v2);
      goto LABEL_5;
    }

    CFDictionaryRef v2 = (const void **)values;
    CFSetGetValues((CFSetRef)qword_1000799E0, (const void **)values);
    if (v1 >= 1)
    {
      while (1)
      {
LABEL_5:
        CFNumberGetValue((CFNumberRef)v2[v1 - 1], kCFNumberIntType, &valuePtr);
        uint64_t v3 = sub_1000059A4(valuePtr);
        if (!v3) {
          sub_100061834();
        }
        CFTypeID v4 = *(_DWORD **)(v3 + 56);
        int v5 = v4[12];
        if (v5 != 2) {
          goto LABEL_13;
        }
        if (v4[46]) {
          break;
        }
LABEL_21:
        if (v1-- <= 1)
        {
          goto LABEL_25;
        }
      }

      CFDictionaryRef v6 = sub_1000017F0();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v11 = v4[10];
        int v12 = v4[46];
        *(_DWORD *)buf = 67109376;
        int v18 = v11;
        __int16 v19 = 1024;
        int v20 = v12;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "-->port : %5u : port = %u", buf, 0xEu);
      }

      _SC_sendMachMessage(v4[46], i);
      int v5 = v4[12];
LABEL_13:
      if (v5 == 3 && (v4[48] & 0x80000000) == 0)
      {
        CFDictionaryRef v8 = sub_1000017F0();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          int v13 = v4[10];
          int v14 = v4[48];
          int v15 = v4[49];
          *(_DWORD *)buf = 67109632;
          int v18 = v13;
          __int16 v19 = 1024;
          int v20 = v14;
          __int16 v21 = 1024;
          int v22 = v15;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "-->fd   : %5u : fd = %d, msgid = %d",  buf,  0x14u);
        }

        ssize_t v9 = write(v4[48], v4 + 49, 4uLL);
        if (v9 != 4 && (v9 != -1 || *__error() != 35)) {
          v4[48] = -1;
        }
      }

      goto LABEL_21;
    }

LABEL_25:
    CFRelease((CFTypeRef)qword_1000799E0);
    qword_1000799E0 = 0LL;
  }

        v32 = sub_10000E124();
        v33 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v32, v33))
        {
          v34 = _os_log_pack_size(12LL);
          uint64_t v35 = (char *)&v63 - ((__chkstk_darwin(v34) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          unsigned int v36 = __error();
          uint64_t v37 = _os_log_pack_fill(v35, v34, *v36, &_mh_execute_header, "Can't find interface for %@");
          *(_DWORD *)uint64_t v37 = 138412290;
          *(void *)(v37 + 4) = a1;
          __SC_log_send(5LL, v32, v33, v35);
        }

        uint64_t v23 = v3;
        goto LABEL_28;
      }

      CFRelease(v5);
    }

    else
    {
      CFDictionaryRef v7 = v5;
    }

    CFRelease(v7);
    goto LABEL_25;
  }

  v24 = sub_10000E124();
  v25 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v24, v25))
  {
    v26 = _os_log_pack_size(12LL);
    v27 = (char *)&v63 - ((__chkstk_darwin(v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v28 = __error();
    unsigned int v29 = _os_log_pack_fill(v27, v26, *v28, &_mh_execute_header, "SCPreferencesCreate() failed, %s", v63);
    uint64_t v30 = SCError();
    v31 = SCErrorString(v30);
    *(_DWORD *)unsigned int v29 = 136315138;
    *(void *)(v29 + 4) = v31;
    __SC_log_send(5LL, v24, v25, v27);
  }

        ++v5;
        v6 += *(int *)(v3 + 72);
      }

      while (v5 < *a2);
    }
  }

  return result;
}

  __int128 v94 = v13;
  CFDictionarySetValue(v11, kSCDynamicStorePropSetupLastUpdated, v13);
  sigaction v96 = v11;
  CFDictionarySetValue((CFMutableDictionaryRef)qword_100079FA8, kSCDynamicStoreDomainSetup, v11);
  if (qword_100079FB0)
  {
    unsigned int v43 = (__CFDictionary *)qword_100079FA8;
    v114 = CFArrayGetCount((CFArrayRef)qword_100079FB0);
    if (v114 >= 1)
    {
      uint64_t v44 = 0LL;
      v113 = kSCValNetInterfaceTypeEthernet;
      v112 = kSCEntNetIPv4;
      v101 = (__CFString *)kSCPropNetIPv4ConfigMethod;
      v100 = (__CFString *)kSCValNetIPv4ConfigMethodDHCP;
      v111 = kSCEntNetIPv6;
      v99 = (__CFString *)kSCPropNetIPv6ConfigMethod;
      v98 = (__CFString *)kSCValNetIPv6ConfigMethodAutomatic;
      v110 = kSCEntNetInterface;
      v109 = (__CFString *)kSCPropNetInterfaceDeviceName;
      v108 = kSCPropNetInterfaceHardware;
      v107 = kSCPropNetInterfaceType;
      v105 = kCFBooleanTrue;
      v104 = kSCEntNetProxies;
      v103 = (__CFString *)kSCPropNetProxiesExceptionsList;
      v102 = kSCPropNetProxiesFTPPassive;
      v115 = (const __CFString *)kSCPropNetServicePrimaryRank;
      v106 = kSCPropUserDefinedName;
      do
      {
        ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex((CFArrayRef)qword_100079FB0, v44);
        LocalizedDisplayName = SCNetworkInterfaceGetLocalizedDisplayName(ValueAtIndex);
        v47 = @"Preconfigured";
        if (LocalizedDisplayName) {
          v47 = LocalizedDisplayName;
        }
        v116 = v47;
        BSDName = (__CFString *)SCNetworkInterfaceGetBSDName(ValueAtIndex);
        InterfaceType = SCNetworkInterfaceGetInterfaceType(ValueAtIndex);
        if (InterfaceType) {
          unsigned int v50 = InterfaceType;
        }
        else {
          unsigned int v50 = v113;
        }
        uint64_t v51 = (const __CFString *)_SC_copyInterfaceUUID(BSDName);
        v52 = v112;
        NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainSetup, v51, v112);
        TemplateOverrides = (CFDictionaryRef)__SCNetworkInterfaceGetTemplateOverrides(ValueAtIndex, v52);
        mach_port_t v55 = CFDictionaryGetTypeID();
        if (!TemplateOverrides || CFGetTypeID(TemplateOverrides) != v55)
        {
          TemplateOverrides = (CFDictionaryRef)qword_100079FB8;
          if (!qword_100079FB8)
          {
            keys = v101;
            values = v100;
            TemplateOverrides = CFDictionaryCreate( 0LL,  (const void **)&keys,  (const void **)&values,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
            qword_100079FB8 = (uint64_t)TemplateOverrides;
          }
        }

        CFDictionarySetValue(v43, NetworkServiceEntity, TemplateOverrides);
        if (NetworkServiceEntity) {
          CFRelease(NetworkServiceEntity);
        }
        v56 = v111;
        v57 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainSetup, v51, v111);
        v58 = (CFDictionaryRef)__SCNetworkInterfaceGetTemplateOverrides(ValueAtIndex, v56);
        v59 = CFDictionaryGetTypeID();
        if (!v58 || CFGetTypeID(v58) != v59)
        {
          v58 = (CFDictionaryRef)qword_100079FC0;
          if (!qword_100079FC0)
          {
            keys = v99;
            values = v98;
            v58 = CFDictionaryCreate( 0LL,  (const void **)&keys,  (const void **)&values,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
            qword_100079FC0 = (uint64_t)v58;
          }
        }

        CFDictionarySetValue(v43, v57, v58);
        if (v57) {
          CFRelease(v57);
        }
        v60 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainSetup, v51, v110);
        keys = v109;
        v124 = v108;
        v125 = @"HiddenConfiguration";
        v126 = v107;
        v61 = (__CFString *)v106;
        v127 = v106;
        values = BSDName;
        v119 = (CFNumberRef)v50;
        v120 = v105;
        v121 = v50;
        v62 = (__CFString *)v116;
        v122 = v116;
        uint64_t v63 = CFDictionaryCreate( 0LL,  (const void **)&keys,  (const void **)&values,  5LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        CFDictionarySetValue(v43, v60, v63);
        if (v60) {
          CFRelease(v60);
        }
        if (v63) {
          CFRelease(v63);
        }
        uint64_t v64 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainSetup, v51, v104);
        keys = v103;
        v124 = v102;
        pid_t v65 = (const void *)qword_100079FC8;
        if (!qword_100079FC8)
        {
          *(_OWORD *)v128 = *(_OWORD *)&off_100073180;
          int valuePtr = 1;
          v66 = CFArrayCreate(0LL, (const void **)v128, 2LL, &kCFTypeArrayCallBacks);
          values = v66;
          uint64_t v67 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
          v119 = v67;
          qword_100079FC8 = (uint64_t)CFDictionaryCreate( 0LL,  (const void **)&keys,  (const void **)&values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          CFRelease(v66);
          CFRelease(v67);
          pid_t v65 = (const void *)qword_100079FC8;
          v62 = (__CFString *)v116;
        }

        CFDictionarySetValue(v43, v64, v65);
        if (v64) {
          CFRelease(v64);
        }
        unsigned int v68 = (const __CFNumber *)__SCNetworkInterfaceGetTemplateOverrides(ValueAtIndex, v115);
        uint64_t v69 = CFStringGetTypeID();
        if (v68)
        {
          if (CFGetTypeID(v68) == v69) {
            v70 = v68;
          }
          else {
            v70 = 0LL;
          }
        }

        else
        {
          v70 = 0LL;
        }

        v71 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainSetup, v51, 0LL);
        keys = v61;
        values = v62;
        if (v70)
        {
          v124 = v115;
          v119 = v70;
          int v72 = 2LL;
        }

        else
        {
          int v72 = 1LL;
        }

        int v73 = CFDictionaryCreate( 0LL,  (const void **)&keys,  (const void **)&values,  v72,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        CFDictionarySetValue(v43, v71, v73);
        if (v71) {
          CFRelease(v71);
        }
        if (v73) {
          CFRelease(v73);
        }
        if (v51) {
          CFRelease(v51);
        }
        ++v44;
      }

      while (v114 != v44);
    }
  }

  CFDictionaryApplyFunction((CFDictionaryRef)qword_100079FA8, (CFDictionaryApplierFunction)sub_10005D340, 0LL);
  v74 = CFArrayGetCount((CFArrayRef)qword_100079F98);
  if (v74 >= 1)
  {
    uint64_t v75 = v74;
    for (uint64_t i = 0LL; i != v75; ++i)
    {
      v77 = CFArrayGetValueAtIndex((CFArrayRef)qword_100079F98, i);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_100079FA8, v77);
    }
  }

  if (!SCDynamicStoreSetMultiple(v97, (CFDictionaryRef)qword_100079FA8, (CFArrayRef)qword_100079FA0, 0LL))
  {
    v78 = sub_100058E78();
    v79 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v78, v79))
    {
      v80 = _os_log_pack_size(12LL);
      __int128 v81 = (char *)&v94 - ((__chkstk_darwin(v80) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __int128 v82 = __error();
      __int128 v83 = _os_log_pack_fill( v81,  v80,  *v82,  &_mh_execute_header,  "SCDynamicStoreSetMultiple() failed: %s",  v94);
      __int128 v84 = SCError();
      __int128 v85 = SCErrorString(v84);
      *(_DWORD *)__int128 v83 = 136315138;
      *(void *)(v83 + 4) = v85;
      __SC_log_send(5LL, v78, v79, v81);
    }
  }

  CFRelease((CFTypeRef)qword_100079F90);
  CFRelease((CFTypeRef)qword_100079FA8);
  CFRelease((CFTypeRef)qword_100079F98);
  CFRelease((CFTypeRef)qword_100079FA0);
  if (v96) {
    CFRelease(v96);
  }
  __int128 v86 = v95;
  if (v94) {
    CFRelease(v94);
  }
  if (v86) {
    CFRelease(v86);
  }
}

void sub_1000033B4(id a1)
{
  byte_100079A40 = os_variant_has_internal_content("com.apple.SystemConfiguration");
}

CFDictionaryRef sub_10000340C(void *a1, void *a2)
{
  keys = a2;
  values = a1;
  CFTypeRef cf = CFArrayCreate(0LL, (const void **)&values, 1LL, &kCFTypeArrayCallBacks);
  CFDictionaryRef v2 = CFDictionaryCreate( 0LL,  (const void **)&keys,  &cf,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFRelease(cf);
  return v2;
}

void sub_1000034AC(mach_port_context_t a1, uint64_t a2, uint64_t a3)
{
  switch(a2)
  {
    case 13LL:
      sub_1000063CC(a1);
      break;
    case 8LL:
      sub_10000625C(a1);
      break;
    case 2LL:
      if (dispatch_mach_mig_demux(a1, &off_100071968, 1LL, a3))
      {
        sub_10000313C();
      }

      else
      {
        msg = (mach_msg_header_t *)dispatch_mach_msg_get_msg(a3, 0LL);
        mach_msg_destroy(msg);
      }

      break;
  }

uint64_t sub_1000035D8()
{
  if (qword_100079A50 != -1) {
    dispatch_once(&qword_100079A50, &stru_100071990);
  }
  return qword_100079A58;
}

void sub_10000364C(id a1)
{
  qword_100079A58 = (uint64_t)dispatch_workloop_create_inactive("configd/SCDynamicStore");
  dispatch_set_qos_class_fallback();
  dispatch_activate((dispatch_object_t)qword_100079A58);
}

uint64_t sub_1000036B8()
{
  kern_return_t v2;
  kern_return_t v4;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  const char *v19;
  const char *v20[2];
  HIDWORD(v20[0]) = 0;
  CFArrayRef v0 = getenv("SCD_SERVER");
  if (v0) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = "com.apple.SystemConfiguration.configd";
  }
  CFDictionaryRef v2 = bootstrap_check_in(bootstrap_port, v1, (mach_port_t *)v20 + 1);
  if (v2)
  {
    if (v2 == 1103)
    {
      int v5 = sub_1000017F0();
      CFDictionaryRef v6 = _SC_syslog_os_log_mapping(3LL);
      int v11 = _os_log_pack_size(12LL);
      CFDictionaryRef v8 = (char *)v20 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v12 = *__error();
      CFMutableArrayRef v10 = _os_log_pack_fill(v8, v11, v12, &_mh_execute_header, "'%s' server already active");
    }

    else
    {
      CFTypeID v4 = v2;
      if (v2 != 1100)
      {
        int v13 = sub_1000017F0();
        int v14 = _SC_syslog_os_log_mapping(3LL);
        if (__SC_log_enabled(3LL, v13, v14))
        {
          int v15 = _os_log_pack_size(22LL);
          CFNumberRef v16 = (char *)v20 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
          CFRange v17 = __error();
          int v18 = _os_log_pack_fill( v16,  v15,  *v17,  &_mh_execute_header,  "server_init bootstrap_check_in(..., '%s', ...) failed: %s",  v20[0],  v20[1]);
          __int16 v19 = bootstrap_strerror(v4);
          *(_DWORD *)int v18 = 136315394;
          *(void *)(v18 + 4) = v1;
          *(_WORD *)(v18 + 12) = 2080;
          *(void *)(v18 + 14) = v19;
          __SC_log_send(3LL, v13, v14, v16);
        }

LABEL_15:
        exit(69);
      }

      int v5 = sub_1000017F0();
      CFDictionaryRef v6 = _SC_syslog_os_log_mapping(3LL);
      CFDictionaryRef v7 = _os_log_pack_size(12LL);
      CFDictionaryRef v8 = (char *)v20 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      ssize_t v9 = *__error();
      CFMutableArrayRef v10 = _os_log_pack_fill(v8, v7, v9, &_mh_execute_header, "'%s' server already starting");
    }

    *(_DWORD *)CFMutableArrayRef v10 = 136315138;
    *(void *)(v10 + 4) = v1;
    __SC_log_send(3LL, v5, v6, v8);
    goto LABEL_15;
  }

  sub_1000027D4();
  return sub_1000061BC(HIDWORD(v20[0]));
}

  int v13 = 0LL;
LABEL_16:
  v14[0] = 67109888;
  v14[1] = v10;
  int v15 = 2048;
  CFNumberRef v16 = Count;
  CFRange v17 = 2048;
  int v18 = v12;
  __int16 v19 = 2048;
  int v20 = v13;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "set m   : %5u : %ld set, %ld remove, %ld notify",  (uint8_t *)v14,  0x26u);
  if (a2) {
LABEL_3:
  }
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)sub_10000AC48, a1);
LABEL_4:
  if (a3)
  {
    v21.length = CFArrayGetCount(a3);
    v21.location = 0LL;
    CFArrayApplyFunction(a3, v21, (CFArrayApplierFunction)sub_10000AD1C, a1);
  }

  if (a4)
  {
    v22.length = CFArrayGetCount(a4);
    v22.location = 0LL;
    CFArrayApplyFunction(a4, v22, (CFArrayApplierFunction)sub_10000ADCC, a1);
  }

  sub_10000921C();
  return 0LL;
}

  CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)sub_100012EA0, Mutable);
LABEL_16:
  if (v28) {
    freeifaddrs(v28);
  }
  CFRelease(Mutable);
  CFRelease(v5);
}

  CFRelease(v0);
  CFRelease(Mutable);
}

  if (qword_100079E48)
  {
    SCDynamicStoreSetDispatchQueue((SCDynamicStoreRef)qword_100079E48, 0LL);
    CFRelease((CFTypeRef)qword_100079E48);
    qword_100079E48 = 0LL;
  }

uint64_t sub_100003964(uint64_t result)
{
  if (*(_BYTE *)(result + 8))
  {
    uint64_t v1 = (void *)result;
    if (*(void *)(result + 16))
    {
      os_log_t v2 = sub_1000017F0();
      uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
      if (__SC_log_enabled(7LL, v2, v3))
      {
        uint64_t v4 = _os_log_pack_size(12LL);
        int v5 = (char *)&v9 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFDictionaryRef v6 = __error();
        uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "calling load() for %@");
        CFStringRef Identifier = CFBundleGetIdentifier((CFBundleRef)*v1);
        *(_DWORD *)uint64_t v7 = 138412290;
        *(void *)(v7 + 4) = Identifier;
        __SC_log_send(7LL, v2, v3, v5);
      }

      return ((uint64_t (*)(void, void))v1[2])(*v1, *((unsigned __int8 *)v1 + 12));
    }
  }

  return result;
}

void sub_100003A98(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(void *)(a1 + 24))
    {
      os_log_t v2 = CFBundleCopyBundleURL(*(CFBundleRef *)a1);
      if (v2)
      {
        uint64_t v3 = v2;
        int v4 = CFURLGetFileSystemRepresentation(v2, 1u, v16, 1024LL);
        CFRelease(v3);
        if (v4)
        {
          int v5 = strrchr((const char *)v16, 47);
          CFDictionaryRef v6 = v5 ? v5 + 1 : (const char *)v16;
          size_t v7 = strlen(v6);
          if (v7 >= 9
            && !strcmp(&v6[v7 - 7], ".bundle")
            && (unint64_t)__strlcpy_chk(v17, v6, 256LL, 256LL) <= 0x100)
          {
            v17[strlen(v17) - 7] = 0;
            os_log_t v8 = sub_1000017F0();
            uint64_t v9 = _SC_syslog_os_log_mapping(7LL);
            if (__SC_log_enabled(7LL, v8, v9))
            {
              uint64_t v10 = _os_log_pack_size(12LL);
              int v11 = &v16[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
              int v12 = __error();
              uint64_t v13 = _os_log_pack_fill(v11, v10, *v12, &_mh_execute_header, "calling start() for %@");
              CFStringRef Identifier = CFBundleGetIdentifier(*(CFBundleRef *)a1);
              *(_DWORD *)uint64_t v13 = 138412290;
              *(void *)(v13 + 4) = Identifier;
              __SC_log_send(7LL, v8, v9, v11);
            }

            (*(void (**)(char *, UInt8 *))(a1 + 24))(v17, v16);
          }
        }
      }
    }
  }

uint64_t sub_100003C78(uint64_t result)
{
  if (*(_BYTE *)(result + 8))
  {
    uint64_t v1 = result;
    if (*(void *)(result + 32))
    {
      os_log_t v2 = sub_1000017F0();
      uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
      if (__SC_log_enabled(7LL, v2, v3))
      {
        uint64_t v4 = _os_log_pack_size(12LL);
        int v5 = (char *)&v9 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFDictionaryRef v6 = __error();
        uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "calling prime() for %@");
        CFStringRef Identifier = CFBundleGetIdentifier(*(CFBundleRef *)v1);
        *(_DWORD *)uint64_t v7 = 138412290;
        *(void *)(v7 + 4) = Identifier;
        __SC_log_send(7LL, v2, v3, v5);
      }

      return (*(uint64_t (**)(void))(v1 + 32))();
    }
  }

  return result;
}

CFIndex sub_100003DA4(_DWORD *a1)
{
  CFIndex result = CFArrayGetCount((CFArrayRef)qword_100079A60);
  if (result)
  {
    if (!qword_100079A68)
    {
      os_log_t v3 = sub_1000017F0();
      uint64_t v4 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v3, v4))
      {
        uint64_t v5 = _os_log_pack_size(12LL);
        CFDictionaryRef v6 = (char *)&v10 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v7 = __error();
        uint64_t v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "starting server shutdown (%f)", v10);
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)uint64_t v8 = 134217984;
        *(CFAbsoluteTime *)(v8 + 4) = Current;
        __SC_log_send(6LL, v3, v4, v6);
      }

      qword_100079A68 = (uint64_t)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      sub_100003F00();
    }

    return 1LL;
  }

  else
  {
    *a1 = 0;
  }

  return result;
}

void sub_100003F00()
{
  os_log_t v0 = sub_1000017F0();
  uint64_t v1 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v0, v1))
  {
    uint64_t v2 = _os_log_pack_size(2LL);
    os_log_t v3 = (char *)&v16 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v4 = __error();
    *(_WORD *)_os_log_pack_fill(v3, v2, *v4, &_mh_execute_header, "calling bundle stop() functions") = 0;
    __SC_log_send(7LL, v0, v1, v3);
  }

  uint64_t v5 = (const __CFArray *)qword_100079A60;
  v17.length = CFArrayGetCount((CFArrayRef)qword_100079A60);
  v17.location = 0LL;
  CFArrayApplyFunction(v5, v17, (CFArrayApplierFunction)sub_100004FB8, 0LL);
  if (!CFDictionaryGetCount((CFDictionaryRef)qword_100079A68))
  {
    os_log_t v9 = sub_1000017F0();
    uint64_t v10 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v9, v10))
    {
      uint64_t v11 = _os_log_pack_size(12LL);
      int v12 = (char *)&v16 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v13 = __error();
      uint64_t v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "server shutdown complete (%f)", v16);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)uint64_t v14 = 134217984;
      *(CFAbsoluteTime *)(v14 + 4) = Current;
      __SC_log_send(6LL, v9, v10, v12);
    }

    exit(0);
  }

  CFAbsoluteTime v6 = CFAbsoluteTimeGetCurrent();
  uint64_t v7 = CFRunLoopTimerCreate(0LL, v6 + 15.0, 0.0, 0LL, 0LL, (CFRunLoopTimerCallBack)sub_1000050B4, 0LL);
  uint64_t v8 = CFRunLoopGetCurrent();
  CFRunLoopAddTimer(v8, v7, kCFRunLoopDefaultMode);
  CFRelease(v7);
}

CFMutableArrayRef sub_10000413C(const __CFDictionary *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, 0LL);
  uint64_t v2 = 0LL;
  *(void *)&__int128 v3 = 138412290LL;
  __int128 v19 = v3;
  do
  {
    uint64_t v4 = *(const __CFString **)((char *)&off_1000719B0 + v2);
    Value = CFDictionaryGetValue(a1, v4);
    if (Value)
    {
      CFAbsoluteTime v6 = Value;
      if (CFSetContainsValue((CFSetRef)qword_1000799A8, v4)
        || (CFStringRef v13 = sub_1000042F8(v4)) != 0LL
        && (CFStringRef v14 = v13, v15 = CFSetContainsValue((CFSetRef)qword_1000799A8, v13), CFRelease(v14), v15))
      {
        os_log_t v7 = sub_1000017F0();
        uint64_t v8 = _SC_syslog_os_log_mapping(6LL);
        if (__SC_log_enabled(6LL, v7, v8))
        {
          uint64_t v9 = _os_log_pack_size(12LL);
          uint64_t v10 = (char *)&v17 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v11 = __error();
          uint64_t v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "skipped %@ (excluded)");
          *(_DWORD *)uint64_t v12 = v19;
          *(void *)(v12 + 4) = v4;
          __SC_log_send(6LL, v7, v8, v10);
        }
      }

      else
      {
        CFArrayAppendValue(Mutable, v6);
      }
    }

    v2 += 8LL;
  }

  while (v2 != 80);
  return Mutable;
}

CFStringRef sub_1000042F8(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  v5.location = 0LL;
  v5.length = Length;
  if (!CFStringFindWithOptions(a1, @".", v5, 4uLL, &result)) {
    return 0LL;
  }
  v6.length = Length - (result.length + result.location);
  result.location += result.length;
  v6.location = result.location;
  result.length = v6.length;
  return CFStringCreateWithSubstring(0LL, a1, v6);
}

void sub_100004398(const char *a1)
{
  uint64_t context = 0LL;
  _SCDPluginExecInit();
  uint64_t v2 = sub_100004738(a1);
  qword_100079A60 = (uint64_t)sub_10000413C(v2);
  CFRelease(v2);
  os_log_t v3 = sub_1000017F0();
  uint64_t v4 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v3, v4))
  {
    uint64_t v5 = _os_log_pack_size(2LL);
    CFRange v6 = (char *)&context - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v7 = __error();
    *(_WORD *)_os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "loading bundles") = 0;
    __SC_log_send(7LL, v3, v4, v6);
  }

  uint64_t v8 = (const __CFArray *)qword_100079A60;
  v28.length = CFArrayGetCount((CFArrayRef)qword_100079A60);
  v28.location = 0LL;
  CFArrayApplyFunction(v8, v28, (CFArrayApplierFunction)sub_1000049C4, &context);
  os_log_t v9 = sub_1000017F0();
  uint64_t v10 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v9, v10))
  {
    uint64_t v11 = _os_log_pack_size(2LL);
    uint64_t v12 = (char *)&context - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFStringRef v13 = __error();
    *(_WORD *)_os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "calling bundle load() functions") = 0;
    __SC_log_send(7LL, v9, v10, v12);
  }

  CFStringRef v14 = (const __CFArray *)qword_100079A60;
  v29.length = CFArrayGetCount((CFArrayRef)qword_100079A60);
  v29.location = 0LL;
  CFArrayApplyFunction(v14, v29, (CFArrayApplierFunction)sub_100003964, 0LL);
  if (context)
  {
    os_log_t v15 = sub_1000017F0();
    uint64_t v16 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v15, v16))
    {
      uint64_t v17 = _os_log_pack_size(2LL);
      int v18 = (char *)&context - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __int128 v19 = __error();
      *(_WORD *)_os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "calling bundle start() functions") = 0;
      __SC_log_send(7LL, v15, v16, v18);
    }

    int v20 = (const __CFArray *)qword_100079A60;
    v30.length = CFArrayGetCount((CFArrayRef)qword_100079A60);
    v30.location = 0LL;
    CFArrayApplyFunction(v20, v30, (CFArrayApplierFunction)sub_100003A98, 0LL);
    os_log_t v21 = sub_1000017F0();
    uint64_t v22 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v21, v22))
    {
      uint64_t v23 = _os_log_pack_size(2LL);
      v24 = (char *)&context - ((__chkstk_darwin(v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v25 = __error();
      *(_WORD *)_os_log_pack_fill(v24, v23, *v25, &_mh_execute_header, "calling bundle prime() functions") = 0;
      __SC_log_send(7LL, v21, v22, v24);
    }

    v26 = (const __CFArray *)qword_100079A60;
    v31.length = CFArrayGetCount((CFArrayRef)qword_100079A60);
    v31.location = 0LL;
    CFArrayApplyFunction(v26, v31, (CFArrayApplierFunction)sub_100003C78, 0LL);
  }

__CFDictionary *sub_100004738(const char *a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
  if (a1)
  {
    size_t v3 = strlen(a1);
    uint64_t v4 = CFURLCreateFromFileSystemRepresentation(0LL, (const UInt8 *)a1, v3, 1u);
    uint64_t v5 = CFBundleCreate(0LL, v4);
    if (v5)
    {
      CFRange v6 = v5;
      sub_100005514(Mutable, v5, 1);
      CFRelease(v6);
    }

    CFRelease(v4);
  }

  else
  {
    sysdir_search_path_enumeration_state started = sysdir_start_search_path_enumeration(SYSDIR_DIRECTORY_LIBRARY, SYSDIR_DOMAIN_MASK_SYSTEM);
    sysdir_search_path_enumeration_state next_search_path_enumeration = sysdir_get_next_search_path_enumeration(started, v26);
    if (next_search_path_enumeration)
    {
      sysdir_search_path_enumeration_state v10 = next_search_path_enumeration;
      *(void *)&__int128 v9 = 136315138LL;
      __int128 v25 = v9;
      do
      {
        __strlcat_chk(v26, "/SystemConfiguration", 1024LL, 1024LL);
        os_log_t v11 = sub_1000017F0();
        uint64_t v12 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v11, v12))
        {
          uint64_t v13 = _os_log_pack_size(12LL);
          CFStringRef v14 = &v26[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL) - 16];
          os_log_t v15 = __error();
          uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "searching for plugins in %s",  (const char *)v25);
          *(_DWORD *)uint64_t v16 = v25;
          *(void *)(v16 + 4) = v26;
          __SC_log_send(7LL, v11, v12, v14);
        }

        size_t v17 = strlen(v26);
        int v18 = CFURLCreateFromFileSystemRepresentation(0LL, (const UInt8 *)v26, v17, 1u);
        BundlesFromDirectory = CFBundleCreateBundlesFromDirectory(0LL, v18, @".bundle");
        CFRelease(v18);
        if (BundlesFromDirectory)
        {
          CFIndex Count = CFArrayGetCount(BundlesFromDirectory);
          if (Count >= 1)
          {
            CFIndex v21 = Count;
            for (CFIndex i = 0LL; i != v21; ++i)
            {
              ValueAtIndex = (__CFBundle *)CFArrayGetValueAtIndex(BundlesFromDirectory, i);
              sub_100005514(Mutable, ValueAtIndex, 0);
              sub_1000017AC(ValueAtIndex);
            }
          }

          CFRelease(BundlesFromDirectory);
        }

        sysdir_search_path_enumeration_state v10 = sysdir_get_next_search_path_enumeration(v10, v26);
      }

      while (v10);
    }
  }

  return Mutable;
}

void sub_1000049C4(uint64_t a1, void *a2)
{
  CFStringRef Identifier = CFBundleGetIdentifier(*(CFBundleRef *)a1);
  CFStringRef v5 = sub_1000042F8(Identifier);
  if (!*(_BYTE *)(a1 + 10) && !*(_BYTE *)(a1 + 11))
  {
    os_log_t v22 = sub_1000017F0();
    uint64_t v23 = _SC_syslog_os_log_mapping(6LL);
    uint64_t v24 = _os_log_pack_size(12LL);
    __int128 v25 = (char *)&error - ((((uint64_t (*)(void))__chkstk_darwin)() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    v26 = __error();
    uint64_t v27 = _os_log_pack_fill(v25, v24, *v26, &_mh_execute_header, "skipped %@ (disabled)");
    *(_DWORD *)uint64_t v27 = 138412290;
    *(void *)(v27 + 4) = Identifier;
    uint64_t v28 = 6LL;
    goto LABEL_31;
  }

  if (!*(_BYTE *)(a1 + 12))
  {
    int v6 = CFSetContainsValue((CFSetRef)qword_1000799B0, Identifier);
    *(_BYTE *)(a1 + 12) = v6;
    if (!v6 && v5 != 0LL) {
      *(_BYTE *)(a1 + 12) = CFSetContainsValue((CFSetRef)qword_1000799B0, v5);
    }
  }

  if (*(_BYTE *)(a1 + 9))
  {
    os_log_t v8 = sub_1000017F0();
    uint64_t v9 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v8, v9))
    {
      uint64_t v10 = _os_log_pack_size(12LL);
      os_log_t v11 = (char *)&error - ((__chkstk_darwin(v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v12 = __error();
      uint64_t v13 = _os_log_pack_fill(v11, v10, *v12, &_mh_execute_header, "adding  %@");
      *(_DWORD *)uint64_t v13 = 138412290;
      *(void *)(v13 + 4) = Identifier;
      __SC_log_send(6LL, v8, v9, v11);
    }

    uint64_t v14 = 0LL;
    while (!CFEqual(Identifier, *(CFTypeRef *)((char *)&off_100071A00 + v14)))
    {
      v14 += 40LL;
      if (v14 == 240)
      {
        if (*(void *)(a1 + 16)) {
          goto LABEL_25;
        }
        goto LABEL_22;
      }
    }

    uint64_t v21 = *(void *)((char *)&off_100071A00 + v14 + 8);
    *(void *)(a1 + 16) = v21;
    *(void *)(a1 + 24) = 0LL;
    *(void *)(a1 + 32) = *(void *)((char *)&off_100071A00 + v14 + 24);
    *(void *)(a1 + 40) = 0LL;
    if (v21) {
      goto LABEL_25;
    }
LABEL_22:
    if (*(void *)(a1 + 24) || *(void *)(a1 + 32) || *(void *)(a1 + 40)) {
      goto LABEL_25;
    }
    os_log_t v22 = sub_1000017F0();
    uint64_t v23 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v22, v23))
    {
      uint64_t v45 = _os_log_pack_size(12LL);
      __int128 v25 = (char *)&error - ((__chkstk_darwin(v45) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v46 = __error();
      uint64_t v47 = _os_log_pack_fill(v25, v45, *v46, &_mh_execute_header, "%@ add failed");
      *(_DWORD *)uint64_t v47 = 138412290;
      *(void *)(v47 + 4) = Identifier;
      uint64_t v28 = 5LL;
LABEL_31:
      __SC_log_send(v28, v22, v23, v25);
    }
  }

  else
  {
    CFErrorRef error = 0LL;
    os_log_t v15 = sub_1000017F0();
    uint64_t v16 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v15, v16))
    {
      uint64_t v17 = _os_log_pack_size(12LL);
      int v18 = (char *)&error - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __int128 v19 = __error();
      uint64_t v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "loading %@", error);
      *(_DWORD *)uint64_t v20 = 138412290;
      *(void *)(v20 + 4) = Identifier;
      __SC_log_send(6LL, v15, v16, v18);
    }

    if (CFBundleLoadExecutableAndReturnError(*(CFBundleRef *)a1, &error))
    {
      *(void *)(a1 + 16) = sub_1000058E0(*(__CFBundle **)a1, @"load", (uint64_t)v5);
      *(void *)(a1 + 24) = sub_1000058E0(*(__CFBundle **)a1, @"start", (uint64_t)v5);
      *(void *)(a1 + 32) = sub_1000058E0(*(__CFBundle **)a1, @"prime", (uint64_t)v5);
      *(void *)(a1 + 40) = sub_1000058E0(*(__CFBundle **)a1, @"stop", (uint64_t)v5);
LABEL_25:
      *(_BYTE *)(a1 + 8) = 1;
      ++*a2;
      goto LABEL_26;
    }

    os_log_t v29 = sub_1000017F0();
    uint64_t v30 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v29, v30))
    {
      uint64_t v31 = _os_log_pack_size(12LL);
      v32 = (char *)&error - ((__chkstk_darwin(v31) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v33 = __error();
      uint64_t v34 = _os_log_pack_fill(v32, v31, *v33, &_mh_execute_header, "%@ load failed");
      *(_DWORD *)uint64_t v34 = 138412290;
      *(void *)(v34 + 4) = Identifier;
      __SC_log_send(5LL, v29, v30, v32);
    }

    uint64_t v35 = CFErrorCopyUserInfo(error);
    if (v35)
    {
      unsigned int v36 = v35;
      Value = CFDictionaryGetValue(v35, @"NSDebugDescription");
      if (Value)
      {
        v38 = Value;
        os_log_t v39 = sub_1000017F0();
        uint64_t v40 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v39, v40))
        {
          uint64_t v41 = _os_log_pack_size(12LL);
          uint64_t v42 = (char *)&error - ((__chkstk_darwin(v41) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          unsigned int v43 = __error();
          uint64_t v44 = _os_log_pack_fill(v42, v41, *v43, &_mh_execute_header, "%@");
          *(_DWORD *)uint64_t v44 = 138412290;
          *(void *)(v44 + 4) = v38;
          __SC_log_send(5LL, v39, v40, v42);
        }
      }

      CFRelease(v36);
    }

    CFRelease(error);
  }

LABEL_26:
  if (v5) {
    CFRelease(v5);
  }
}

  uint64_t v24 = sub_10002E39C();
  __int128 v25 = _SC_syslog_os_log_mapping(5LL);
  CFRange result = __SC_log_enabled(5LL, v24, v25);
  if ((_DWORD)result)
  {
    v26 = _os_log_pack_size(54LL);
    uint64_t v27 = (char *)&v33 - ((__chkstk_darwin(v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v28 = __error();
    os_log_t v29 = _os_log_pack_fill( v27,  v26,  *v28,  &_mh_execute_header,  "%s[%d] SetInterfaceAdvisory(%s) = %s (%u) reason='%s'",  v33,  v34,  v35,  v36,  v37,  v38);
    uint64_t v30 = context[4];
    uint64_t v31 = *((_DWORD *)context + 6);
    v32 = "";
    if (v9) {
      v32 = v9;
    }
    *(_DWORD *)os_log_t v29 = 136316418;
    *(void *)(v29 + 4) = v30;
    *(_WORD *)(v29 + 12) = 1024;
    *(_DWORD *)(v29 + 14) = v31;
    *(_WORD *)(v29 + 18) = 2080;
    *(void *)(v29 + 20) = v8;
    *(_WORD *)(v29 + 28) = 2080;
    *(void *)(v29 + 30) = v12;
    *(_WORD *)(v29 + 38) = 1024;
    *(_DWORD *)(v29 + 40) = v11;
    *(_WORD *)(v29 + 44) = 2080;
    *(void *)(v29 + 46) = v32;
    __SC_log_send(5LL, v24, v25, v27);
    return 0LL;
  }

  return result;
}

        if (++v18 == Count) {
          goto LABEL_58;
        }
      }
    }

    v215 = 0;
    v225 = 0;
    v229 = 0;
    uint64_t v17 = 0;
LABEL_58:
    LODWORD(v228) = v17;
    v32 = v224;
    v33 = v227;
    if (v227)
    {
      uint64_t v34 = CFArrayGetCount(v227);
      if (v34 >= 1)
      {
        unsigned int v36 = v34;
        uint64_t v37 = 0LL;
        *(void *)&uint64_t v35 = 138412290LL;
        v226 = v35;
        do
        {
          v38 = CFArrayGetValueAtIndex(v33, v37);
          if (byte_100079C94 == 1)
          {
            os_log_t v39 = (os_log_t)qword_100079C78;
            if (!qword_100079C78)
            {
              os_log_t v39 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
              qword_100079C78 = (uint64_t)v39;
            }

            uint64_t v40 = _SC_syslog_os_log_mapping(7LL);
            if (__SC_log_enabled(7LL, v39, v40))
            {
              uint64_t v41 = _os_log_pack_size(12LL);
              uint64_t v42 = (char *)&v213 - ((__chkstk_darwin(v41) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              unsigned int v43 = __error();
              uint64_t v44 = v41;
              p_base_props = &QoSMarkingController__classData.base_props;
              uint64_t v45 = _os_log_pack_fill(v42, v44, *v43, &_mh_execute_header, "Interface rank changed %@");
              *(_DWORD *)uint64_t v45 = v226;
              *(void *)(v45 + 4) = v38;
              v46 = v42;
              v32 = v224;
              __SC_log_send(7LL, v39, v40, v46);
              v33 = v227;
            }
          }

          sub_100034E24(v32, v38);
          ++v37;
        }

        while (v36 != v37);
      }
    }

    uint64_t v47 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    v48 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(v47, (const void *)qword_100079CC0);
    CFArrayAppendValue(v47, p_base_props[410]);
    CFArrayAppendValue(v47, (const void *)qword_100079CC8);
    uint64_t v49 = CFArrayGetCount(v32);
    if (v49 >= 1)
    {
      unsigned int v50 = v49;
      for (CFIndex i = 0LL; i != v50; ++i)
      {
        v52 = (const __CFString *)CFArrayGetValueAtIndex(v32, i);
        sub_100032964(v52, v47);
        sub_100032AE8(v52, v47);
      }
    }

    for (j = 0LL; j != 40; j += 8LL)
    {
      NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  kSCDynamicStoreDomainSetup,  kSCCompAnyRegex,  **(CFStringRef **)((char *)&off_1000729E8 + j));
      sub_100030F28(v48, NetworkServiceEntity);
      CFRelease(NetworkServiceEntity);
    }

    mach_port_t v55 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetVPN);
    sub_100030F28(v48, v55);
    CFRelease(v55);
    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  kSCCompAnyRegex,  kSCEntNetLink);
    sub_100030F28(v48, NetworkInterfaceEntity);
    CFRelease(NetworkInterfaceEntity);
    v57 = SCDynamicStoreCopyMultiple(v216, v47, v48);
    if (v47) {
      CFRelease(v47);
    }
    if (v48) {
      CFRelease(v48);
    }
    if (!v57) {
      sub_100061D10();
    }
    v58 = (const __CFDictionary *)sub_100037C50(v57, (const void *)qword_100079CC0);
    if (v58)
    {
      v59 = v58;
      LODWORD(valuePtr[0]) = 0;
      Value = (const __CFArray *)CFDictionaryGetValue(v58, kSCPropNetServiceOrder);
      CFTypeID TypeID = CFArrayGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID) {
          v62 = Value;
        }
        else {
          v62 = 0LL;
        }
        v218 = v62;
      }

      else
      {
        v218 = 0LL;
      }

      uint64_t v63 = (const __CFNumber *)CFDictionaryGetValue(v59, kSCPropNetPPPOverridePrimary);
      uint64_t v64 = CFNumberGetTypeID();
      if (v63 && CFGetTypeID(v63) == v64)
      {
        CFNumberGetValue(v63, kCFNumberIntType, valuePtr);
        pid_t v65 = LODWORD(valuePtr[0]) != 0;
      }

      else
      {
        pid_t v65 = 0;
      }

      dword_100079D48 = v65;
      if (v218)
      {
        if (byte_100079C94 == 1)
        {
          v66 = (os_log_t)qword_100079C78;
          if (!qword_100079C78)
          {
            v66 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_100079C78 = (uint64_t)v66;
          }

          uint64_t v67 = _SC_syslog_os_log_mapping(7LL);
          if (__SC_log_enabled(7LL, v66, v67))
          {
            unsigned int v68 = _os_log_pack_size(12LL);
            uint64_t v69 = (char *)&v213 - ((__chkstk_darwin(v68) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            v70 = __error();
            v71 = _os_log_pack_fill(v69, v68, *v70, &_mh_execute_header, "service_order %@ ");
            *(_DWORD *)v71 = 138412290;
            *(void *)(v71 + 4) = v218;
            __SC_log_send(7LL, v66, v67, v69);
          }
        }
      }

      else
      {
        v218 = 0LL;
      }
    }

    else
    {
      v218 = 0LL;
      dword_100079D48 = 0;
    }

    v223 = CFArrayGetCount(v224);
    if (v223 < 1)
    {
      LODWORD(v227) = 0;
      *(_DWORD *)v221 = 0;
    }

    else
    {
      *(_DWORD *)v221 = 0;
      LODWORD(v227) = 0;
      int v72 = 0LL;
      v219 = kSCEntNetDNS;
      v220 = kSCEntNetIPv4;
      int v73 = &off_100072940;
      v217 = kSCEntNetIPv6;
      v222 = v237;
      *(void *)&v221[4] = v236;
      do
      {
        *(void *)&v226 = v72;
        v74 = (__CFString *)CFArrayGetValueAtIndex(v224, v72);
        uint64_t v75 = (const __CFDictionary *)sub_1000350BC(v57, v74, 0LL);
        v76 = (const __CFDictionary *)sub_1000383EC(v57, v74, 0LL);
        v77 = 0LL;
        v78 = (sub_100037CFC(v74, v75, v76, v57) != 0) << 30;
        do
        {
          v79 = off_100072A10[v77];
          v80 = *(const __CFString **)v73[v77];
          __int128 v81 = sub_1000350BC(v57, v74, v80);
          __int128 v82 = sub_1000383EC(v57, v74, v80);
          __int128 v83 = ((uint64_t (*)(__CFString *, const void *, const void *, CFDictionaryRef))v79)( v74,  v81,  v82,  v57);
          __int128 v84 = 1 << v77;
          if (!v83) {
            __int128 v84 = 0;
          }
          v78 |= v84;
          ++v77;
        }

        while (v77 != 5);
        __int128 v85 = 0LL;
        __int128 v86 = 0;
        do
        {
          __int128 v87 = *(CFStringRef **)((char *)&off_100072968 + v85);
          __int128 v88 = (const __CFDictionary *)sub_1000350BC(v57, v74, *v87);
          if (v88)
          {
            __int128 v89 = v73;
            __int128 v90 = *(const void ***)((char *)&off_100072968 + v85 + 8);
            __int128 v91 = CFDictionaryGetValue(v88, *v90);
            __int128 v92 = CFNumberGetTypeID();
            if (v91 && CFGetTypeID(v91) == v92)
            {
              __int128 v93 = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
              CFDictionaryAddValue(v93, *v90, v91);
            }

            else
            {
              __int128 v93 = 0LL;
            }

            int v73 = v89;
          }

          else
          {
            CFNumberGetTypeID();
            __int128 v93 = 0LL;
          }

          if (v93) {
            CFRelease(v93);
          }
          v85 += 16LL;
        }

        while (v85 != 48);
        if (v86) {
          v78 |= 0x40u;
        }
        if (v222 && CFSetContainsValue(v222, v74)) {
          v78 |= 1u;
        }
        __int128 v94 = (int)v228;
        __int128 v95 = (int)v227;
        if (*(void *)&v221[4] && CFSetContainsValue(*(CFSetRef *)&v221[4], v74))
        {
          v78 |= 2u;
          sigaction v96 = sub_1000350BC(v57, v74, v219);
          v97 = v225;
          if (v96) {
            v97 = 1;
          }
          v225 = v97;
        }

        if ((v78 & 0x40000000) != 0)
        {
          v229 = 1;
        }

        else
        {
          if ((v78 & 1) != 0) {
            __int128 v95 = 1;
          }
          v98 = v229;
          if ((v78 & 1) != 0) {
            v98 = 1;
          }
          v229 = v98;
          if ((v78 & 1) != 0) {
            __int128 v94 = 1;
          }
          if ((v78 & 2) != 0)
          {
            __int128 v95 = 1;
            v225 = 1;
            v229 = 1;
            __int128 v94 = 1;
          }
        }

        if ((v78 & 4) != 0)
        {
          if (qword_100079CD8)
          {
            v99 = CFEqual((CFTypeRef)qword_100079CD8, v74);
            v100 = *(_DWORD *)v221;
            if (v99) {
              v100 = 1;
            }
            *(_DWORD *)v221 = v100;
          }

          v225 = 1;
          __int128 v94 = 1;
        }

        if ((v78 & 8) != 0) {
          __int128 v95 = 1;
        }
        if ((v78 & 0x10) != 0) {
          __int128 v94 = 1;
        }
        if ((v78 & 0x40) != 0 && (sub_10002E790(v74, v220) || sub_10002E790(v74, v217))) {
          __int128 v94 = 1;
        }
        LODWORD(v227) = v95;
        LODWORD(v228) = v94;
        int v72 = v226 + 1;
      }

      while ((void)v226 + 1LL != v223);
    }

    v101 = CFDictionaryGetCount((CFDictionaryRef)qword_100079CA0);
    v102 = (const __CFSet *)sub_10002D6E8((unsigned int *)qword_100079C80);
    v103 = sub_10002D788((_DWORD *)qword_100079C80, v101);
    qword_100079C80 = (uint64_t)v103;
    v222 = v102;
    if (v229)
    {
      if (qword_100079D00) {
        sub_10003514C((CFTypeRef *)qword_100079D00);
      }
      qword_100079D00 = (uint64_t)sub_100035200(2, v218);
      sub_1000352FC((int *)qword_100079D00, (uint64_t)"IPv4");
      if (qword_100079D08) {
        sub_10003514C((CFTypeRef *)qword_100079D08);
      }
      qword_100079D08 = (uint64_t)sub_100035200(30, v218);
      sub_1000352FC((int *)qword_100079D08, (uint64_t)"IPv6");
      v103 = (_DWORD *)qword_100079C80;
    }

    else if (!(_DWORD)v228)
    {
      v128 = 0;
      v126 = 0;
      v124 = (int)v227;
      v127 = *(_DWORD *)v221;
      goto LABEL_204;
    }

    if (v103) {
      *((void *)v103 + 1) = 0LL;
    }
    v104 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      v104 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v104;
    }

    v105 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v104, v105))
    {
      v106 = _os_log_pack_size(2LL);
      v107 = (char *)&v213 - ((__chkstk_darwin(v106) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v108 = __error();
      *(_WORD *)_os_log_pack_fill(v107, v106, *v108, &_mh_execute_header, "electing IPv4 primary") = 0;
      __SC_log_send(7LL, v104, v105, v107);
      v102 = v222;
    }

    valuePtr[0] = 0LL;
    if (qword_100079D08) {
      v109 = qword_100079D08 + 16;
    }
    else {
      v109 = 0LL;
    }
    v110 = sub_100035680((int *)qword_100079D00, v109, qword_100079C80, 2LL, valuePtr, (uint64_t)v57, v237);
    v111 = (uint64_t)v110;
    if (v110) {
      v112 = *(const void **)v110;
    }
    else {
      v112 = 0LL;
    }
    sub_1000360C4((CFTypeRef *)&qword_100079D10, v112, (uint64_t)"IPv4");
    sub_10002E9EC((const void *)qword_100079D10, (char *)valuePtr[0], (uint64_t)&Mutable);
    v113 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      v113 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v113;
    }

    v114 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v113, v114))
    {
      v115 = _os_log_pack_size(2LL);
      v116 = (char *)&v213 - ((__chkstk_darwin(v115) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v117 = __error();
      *(_WORD *)_os_log_pack_fill(v116, v115, *v117, &_mh_execute_header, "electing IPv6 primary") = 0;
      __SC_log_send(7LL, v113, v114, v116);
    }

    valuePtr[0] = 0LL;
    v118 = sub_100035680((int *)qword_100079D08, v111, qword_100079C80, 30LL, valuePtr, (uint64_t)v57, v236);
    if (v118) {
      v119 = *(const void **)v118;
    }
    else {
      v119 = 0LL;
    }
    sub_1000360C4((CFTypeRef *)&qword_100079D18, v119, (uint64_t)"IPv6");
    sub_100036418((const void *)qword_100079D18, (uint64_t)valuePtr[0], (uint64_t)&Mutable);
    if (qword_100079C80) {
      sub_10002D928((_DWORD *)qword_100079C80);
    }
    if (qword_100079D10 && qword_100079D18)
    {
      v120 = sub_100036930((const __CFDictionary *)qword_100079D20, (void *)qword_100079D10, kSCEntNetDNS);
      if (v120 <= sub_100036930( (const __CFDictionary *)qword_100079D28,  (void *)qword_100079D18,  kSCEntNetDNS)) {
        v121 = (const void *)qword_100079D10;
      }
      else {
        v121 = (const void *)qword_100079D18;
      }
      v122 = sub_100036930((const __CFDictionary *)qword_100079D20, (void *)qword_100079D10, kSCEntNetProxies);
      if (v122 <= sub_100036930( (const __CFDictionary *)qword_100079D28,  (void *)qword_100079D18,  kSCEntNetProxies)) {
        v123 = (const void *)qword_100079D10;
      }
      else {
        v123 = (const void *)qword_100079D18;
      }
    }

    else
    {
      if (qword_100079D18) {
        v123 = (const void *)qword_100079D18;
      }
      else {
        v123 = (const void *)qword_100079D10;
      }
      v121 = v123;
    }

    v124 = (int)v227;
    v125 = sub_1000360C4((CFTypeRef *)&qword_100079CD8, v121, (uint64_t)"DNS");
    if (v125) {
      v126 = 1;
    }
    else {
      v126 = (int)v228;
    }
    v127 = *(_DWORD *)v221;
    if (v125) {
      v127 = 1;
    }
    v128 = v126 != 0;
    if (!v124 && v126 && G_supplemental_proxies_follow_dns)
    {
      v124 = CFBooleanGetValue((CFBooleanRef)G_supplemental_proxies_follow_dns) != 0;
      v128 = 1;
    }

void sub_100004FB8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  context.version = 0LL;
  context.info = v1;
  context.retain = (const void *(__cdecl *)(const void *))&_CFRetain;
  context.release = (void (__cdecl *)(const void *))&_CFRelease;
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))sub_100005294;
  context.equal = (Boolean (__cdecl *)(const void *, const void *))&_CFEqual;
  context.hash = (CFHashCode (__cdecl *)(const void *))&CFHash;
  context.schedule = 0LL;
  context.cancel = 0LL;
  context.perform = (void (__cdecl *)(void *))sub_100005300;
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(void *)(a1 + 40))
    {
      size_t v3 = CFRunLoopSourceCreate(0LL, 0LL, &context);
      CFAbsoluteTime Current = CFRunLoopGetCurrent();
      CFRunLoopAddSource(Current, v3, kCFRunLoopDefaultMode);
      CFDictionaryAddValue((CFMutableDictionaryRef)qword_100079A68, *(const void **)a1, v3);
      (*(void (**)(__CFRunLoopSource *))(a1 + 40))(v3);
      CFRelease(v3);
    }
  }

void sub_1000050B4()
{
  os_log_t v0 = sub_1000017F0();
  uint64_t v1 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v0, v1))
  {
    uint64_t v2 = _os_log_pack_size(2LL);
    size_t v3 = (char *)&v15 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v4 = __error();
    *(_WORD *)_os_log_pack_fill( v3,  v2,  *v4,  &_mh_execute_header,  "server shutdown was delayed, unresponsive plugins:") = 0;
    __SC_log_send(6LL, v0, v1, v3);
  }

  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_100079A68);
  uint64_t v16 = (const void **)CFAllocatorAllocate(0LL, 8 * Count, 0LL);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_100079A68, v16, 0LL);
  if (Count >= 1)
  {
    *(void *)&__int128 v6 = 138412290LL;
    __int128 v17 = v6;
    os_log_t v7 = (CFBundleRef *)v16;
    do
    {
      CFStringRef Identifier = CFBundleGetIdentifier(*v7);
      os_log_t v9 = sub_1000017F0();
      uint64_t v10 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v9, v10))
      {
        uint64_t v11 = _os_log_pack_size(12LL);
        uint64_t v12 = (char *)&v15 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v13 = __error();
        uint64_t v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "** %@");
        *(_DWORD *)uint64_t v14 = v17;
        *(void *)(v14 + 4) = Identifier;
        __SC_log_send(5LL, v9, v10, v12);
      }

      ++v7;
      --Count;
    }

    while (Count);
  }

  CFAllocatorDeallocate(0LL, v16);
  exit(0);
}

CFStringRef sub_100005294(__CFBundle *a1)
{
  CFStringRef Identifier = CFBundleGetIdentifier(a1);
  return CFStringCreateWithFormat(0LL, 0LL, @"<stopRLS %p> {bundleID = %@}", a1, Identifier);
}

__CFRunLoopSource *sub_100005300(__CFBundle *a1)
{
  CFStringRef Identifier = CFBundleGetIdentifier(a1);
  os_log_t v3 = sub_1000017F0();
  uint64_t v4 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v3, v4))
  {
    uint64_t v5 = _os_log_pack_size(22LL);
    __int128 v6 = (char *)&v18 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v7 = __error();
    uint64_t v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "** %@ complete (%f)");
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)uint64_t v8 = 138412546;
    *(void *)(v8 + 4) = Identifier;
    *(_WORD *)(v8 + 12) = 2048;
    *(CFAbsoluteTime *)(v8 + 14) = Current;
    __SC_log_send(6LL, v3, v4, v6);
  }

  CFRange result = (__CFRunLoopSource *)CFDictionaryGetValue((CFDictionaryRef)qword_100079A68, a1);
  if (result)
  {
    CFRunLoopSourceInvalidate(result);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_100079A68, a1);
    CFRange result = (__CFRunLoopSource *)CFDictionaryGetCount((CFDictionaryRef)qword_100079A68);
    if (!result)
    {
      os_log_t v11 = sub_1000017F0();
      uint64_t v12 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v11, v12))
      {
        uint64_t v13 = _os_log_pack_size(12LL);
        uint64_t v14 = (char *)&v18 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v15 = __error();
        uint64_t v16 = _os_log_pack_fill(v14, v13, *v15, &_mh_execute_header, "server shutdown complete (%f)", v18);
        CFAbsoluteTime v17 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)uint64_t v16 = 134217984;
        *(CFAbsoluteTime *)(v16 + 4) = v17;
        __SC_log_send(6LL, v11, v12, v14);
      }

      exit(0);
    }
  }

  return result;
}

uint64_t sub_100005514(__CFDictionary *a1, CFBundleRef bundle, char a3)
{
  CFStringRef Identifier = CFBundleGetIdentifier(bundle);
  if (!Identifier)
  {
    os_log_t v24 = sub_1000017F0();
    uint64_t v25 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v24, v25);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v26 = _os_log_pack_size(22LL);
    uint64_t v21 = (char *)&v35 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v27 = __error();
    uint64_t v28 = _os_log_pack_fill(v21, v26, *v27, &_mh_execute_header, "%s: ignoring %@ (no bundle ID)");
    *(_DWORD *)uint64_t v28 = 136315394;
    *(void *)(v28 + 4) = "addPlugin";
    *(_WORD *)(v28 + 12) = 2112;
    *(void *)(v28 + 14) = bundle;
    os_log_t v29 = v24;
    uint64_t v30 = v25;
    return __SC_log_send(5LL, v29, v30, v21);
  }

  CFStringRef v7 = Identifier;
  if (CFEqual(Identifier, @"com.apple.SystemConfiguration.InterfaceNamer"))
  {
LABEL_3:
    uint64_t v8 = CFAllocatorAllocate(0LL, 48LL, 0LL);
    *(void *)uint64_t v8 = CFRetain(bundle);
    v8[4] = 0;
    *((_BYTE *)v8 + 10) = 1;
    *((_BYTE *)v8 + 11) = a3;
    *((_BYTE *)v8 + 12) = 0;
    *((_OWORD *)v8 + 1) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    InfoDictionary = CFBundleGetInfoDictionary(bundle);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (InfoDictionary && CFGetTypeID(InfoDictionary) == TypeID)
    {
      Value = (const __CFBoolean *)CFDictionaryGetValue(InfoDictionary, @"Builtin");
      CFTypeID v12 = CFBooleanGetTypeID();
      if (Value && CFGetTypeID(Value) == v12) {
        *((_BYTE *)v8 + 9) = CFBooleanGetValue(Value);
      }
      uint64_t v13 = (const __CFBoolean *)CFDictionaryGetValue(InfoDictionary, @"Enabled");
      CFTypeID v14 = CFBooleanGetTypeID();
      if (v13 && CFGetTypeID(v13) == v14) {
        *((_BYTE *)v8 + 10) = CFBooleanGetValue(v13);
      }
      uint64_t v15 = (const __CFBoolean *)CFDictionaryGetValue(InfoDictionary, @"Verbose");
      CFTypeID v16 = CFBooleanGetTypeID();
      if (v15)
      {
        if (CFGetTypeID(v15) == v16) {
          *((_BYTE *)v8 + 12) = CFBooleanGetValue(v15);
        }
      }
    }

    CFDictionaryAddValue(a1, v7, v8);
    os_log_t v17 = sub_1000017F0();
    uint64_t v18 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v17, v18);
    if ((_DWORD)result)
    {
      uint64_t v20 = _os_log_pack_size(22LL);
      uint64_t v21 = (char *)&v35 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v22 = *__error();
      uint64_t v23 = _os_log_pack_fill(v21, v20, v22, &_mh_execute_header, "%s: %@");
LABEL_24:
      *(_DWORD *)uint64_t v23 = 136315394;
      *(void *)(v23 + 4) = "addPlugin";
      *(_WORD *)(v23 + 12) = 2112;
      *(void *)(v23 + 14) = v7;
      os_log_t v29 = v17;
      uint64_t v30 = v18;
      return __SC_log_send(5LL, v29, v30, v21);
    }
  }

  else
  {
    uint64_t v31 = 1LL;
    while (v31 != 10)
    {
      if (CFEqual(v7, *((CFTypeRef *)&off_1000719B0 + v31++)))
      {
        break;
      }
    }

    os_log_t v17 = sub_1000017F0();
    uint64_t v18 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v17, v18);
    if ((_DWORD)result)
    {
      uint64_t v33 = _os_log_pack_size(22LL);
      uint64_t v21 = (char *)&v35 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v34 = *__error();
      uint64_t v23 = _os_log_pack_fill(v21, v33, v34, &_mh_execute_header, "%s: %@ not in allow list, ignoring");
      goto LABEL_24;
    }
  }

  return result;
}

void *sub_1000058E0(__CFBundle *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t result = CFBundleGetFunctionPointerForName(a1, a2);
  if (!result)
  {
    if (a3)
    {
      CFStringRef v7 = CFStringCreateWithFormat(0LL, 0LL, @"%@_%@", a2, a3);
      FunctionPointerForName = CFBundleGetFunctionPointerForName(a1, v7);
      CFRelease(v7);
      return FunctionPointerForName;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000059A4(int a1)
{
  uint64_t v6 = 0LL;
  CFStringRef v7 = &v6;
  uint64_t v8 = 0x2000000000LL;
  if (!a1) {
    sub_10006185C();
  }
  if (qword_100079A80 != -1) {
    dispatch_once(&qword_100079A80, &stru_100071BA0);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100005A98;
  block[3] = &unk_100071AF8;
  block[4] = &v6;
  int v5 = a1;
  dispatch_sync((dispatch_queue_t)qword_100079A88, block);
  uint64_t v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

const void *sub_100005A98(uint64_t a1)
{
  uint64_t result = CFDictionaryGetValue((CFDictionaryRef)qword_100079A70, (const void *)*(unsigned int *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_100005B04(const __CFNumber *a1)
{
  return sub_1000059A4(v2);
}

uint64_t sub_100005B5C(uint64_t a1)
{
  int v1 = atoi(v3);
  return sub_1000059A4(v1);
}

uint64_t sub_100005BBC(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1000035D8();
  uint64_t f = dispatch_mach_create_f("configd/SCDynamicStore", v4, a1, sub_1000034AC);
  *(void *)(a1 + 24) = f;
  if (!a2)
  {
    dispatch_mach_notify_no_senders();
    uint64_t f = *(void *)(a1 + 24);
  }

  dispatch_set_qos_class_fallback(f, 9LL);
  return dispatch_mach_connect(*(void *)(a1 + 24), *(unsigned int *)(a1 + 16), 0LL, 0LL);
}

uint64_t sub_100005C5C(int a1, __int128 *a2)
{
  uint64_t v8 = 0LL;
  os_log_t v9 = &v8;
  uint64_t v10 = 0x2000000000LL;
  uint64_t v11 = 0LL;
  if (qword_100079A80 != -1) {
    dispatch_once(&qword_100079A80, &stru_100071BA0);
  }
  block[1] = 0x40000000LL;
  __int128 v4 = a2[1];
  __int128 v14 = *a2;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100005D78;
  block[3] = &unk_100071B20;
  int v13 = a1;
  block[4] = &v8;
  __int128 v15 = v4;
  dispatch_sync((dispatch_queue_t)qword_100079A88, block);
  uint64_t v5 = v9[3];
  if (v5)
  {
    sub_100005BBC(v5, 0);
    uint64_t v6 = v9[3];
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  _Block_object_dispose(&v8, 8);
  return v6;
}

void sub_100005D78(uint64_t a1)
{
  if (!CFDictionaryContainsKey((CFDictionaryRef)qword_100079A70, (const void *)*(unsigned int *)(a1 + 40)))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sub_100005E64(0);
    int v2 = *(unsigned int **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    if (v2)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)qword_100079A70, (const void *)v2[4], v2);
      uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      __int128 v4 = *(_OWORD *)(a1 + 60);
      *(_OWORD *)(v3 + 68) = *(_OWORD *)(a1 + 44);
      *(_OWORD *)(v3 + 84) = v4;
      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      __int128 v6 = *(_OWORD *)(v5 + 84);
      *(_OWORD *)v7.val = *(_OWORD *)(v5 + 68);
      *(_OWORD *)&v7.val[4] = v6;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 64LL) = audit_token_to_euid(&v7);
      CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    }
  }

mach_port_context_t sub_100005E64(mach_port_name_t a1)
{
  kern_return_t v3;
  __int128 v4;
  mach_error_t v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  kern_return_t inserted;
  mach_error_t v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  __int128 v25;
  char *v26;
  mach_port_name_t name;
  mach_port_options_t options;
  if (qword_100079A90 != -1) {
    dispatch_once(&qword_100079A90, &stru_100071BE0);
  }
  mach_port_context_t Instance = _CFRuntimeCreateInstance(0LL, qword_100079A98, 120LL, 0LL);
  if (Instance)
  {
    if (a1)
    {
LABEL_5:
      *(_DWORD *)(Instance + 64) = 1;
      *(void *)(Instance + 104) = 0LL;
      *(_DWORD *)(Instance + 16) = a1;
      return Instance;
    }

    *(void *)&options.flags = 1LL;
    options.reserved[0] = 0LL;
    options.reserved[1] = 0LL;
    name = 0;
    uint64_t v3 = mach_port_construct(mach_task_self_, &options, Instance, &name);
    if (v3)
    {
      uint64_t v5 = v3;
      *(void *)&__int128 v4 = 136315138LL;
      uint64_t v25 = v4;
      while (1)
      {
        uint64_t v26 = 0LL;
        __int128 v6 = sub_1000017F0();
        audit_token_t v7 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v6, v7))
        {
          uint64_t v8 = _os_log_pack_size(12LL);
          os_log_t v9 = (char *)&v25 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v10 = __error();
          uint64_t v11 = _os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "could not allocate mach port: %s",  (const char *)v25);
          CFTypeID v12 = mach_error_string(v5);
          *(_DWORD *)uint64_t v11 = v25;
          *(void *)(v11 + 4) = v12;
          __SC_log_send(5LL, v6, v7, v9);
        }

        if (v5 == 6 || v5 == 3)
        {
          sleep(1u);
        }

        else
        {
          int v13 = mach_error_string(v5);
          asprintf(&v26, "Could not allocate mach port: %s", v13);
          if (v26) {
            __int128 v14 = v26;
          }
          else {
            __int128 v14 = "Could not allocate new session (mach) port";
          }
          _SC_crash(v14, 0LL, 0LL);
          if (v26) {
            free(v26);
          }
          CFRelease((CFTypeRef)Instance);
        }

        if (v5 != 6 && v5 != 3) {
          break;
        }
        *(void *)&options.flags = 1LL;
        options.reserved[0] = 0LL;
        options.reserved[1] = 0LL;
        uint64_t v5 = mach_port_construct(mach_task_self_, &options, Instance, &name);
        if (!v5) {
          goto LABEL_22;
        }
      }
    }

    else
    {
LABEL_22:
      inserted = mach_port_insert_right(mach_task_self_, name, name, 0x14u);
      if (!inserted)
      {
        a1 = name;
        goto LABEL_5;
      }

      CFTypeID v16 = inserted;
      os_log_t v17 = sub_1000017F0();
      uint64_t v18 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v17, v18))
      {
        __int128 v19 = _os_log_pack_size(12LL);
        uint64_t v20 = (char *)&v25 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v21 = __error();
        uint64_t v22 = _os_log_pack_fill( v20,  v19,  *v21,  &_mh_execute_header,  "mach_port_insert_right() failed: %s",  (const char *)v25);
        uint64_t v23 = mach_error_string(v16);
        *(_DWORD *)uint64_t v22 = 136315138;
        *(void *)(v22 + 4) = v23;
        __SC_log_send(3LL, v17, v18, v20);
      }

      CFRelease((CFTypeRef)Instance);
    }

    return 0LL;
  }

  return Instance;
}

uint64_t sub_1000061BC(mach_port_name_t a1)
{
  qword_100079A78 = sub_100005E64(a1);
  sub_100005BBC(qword_100079A78, 1);
  if (qword_100079A80 != -1) {
    dispatch_once(&qword_100079A80, &stru_100071BA0);
  }
  os_state_add_handler(qword_100079A88, &stru_100071C80);
  return qword_100079A78;
}

void sub_10000625C(mach_port_context_t a1)
{
  mach_port_name_t v2 = *(_DWORD *)(a1 + 16);
  uint64_t v3 = sub_1000017F0();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_100061884(v2, v3);
  }
  sub_100008F78((uint64_t *)(a1 + 56));
  mach_port_destruct(mach_task_self_, v2, 0, a1);
  __int128 v4 = *(const void **)(a1 + 104);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 104) = 0LL;
  }

  if (qword_100079A80 != -1) {
    dispatch_once(&qword_100079A80, &stru_100071BA0);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  v5[2] = sub_100006378;
  v5[3] = &unk_100071B40;
  mach_port_name_t v6 = v2;
  dispatch_sync((dispatch_queue_t)qword_100079A88, v5);
}

void sub_100006378(uint64_t a1)
{
}

void sub_1000063CC(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    dispatch_mach_cancel();
    dispatch_release(*(dispatch_object_t *)(a1 + 24));
    *(void *)(a1 + 24) = 0LL;
  }

void sub_100006434(uint64_t a1)
{
  if (qword_100079A80 != -1) {
    dispatch_once(&qword_100079A80, &stru_100071BA0);
  }
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000LL;
  v2[2] = sub_1000064EC;
  v2[3] = &unk_100071B60;
  v2[4] = a1;
  dispatch_sync((dispatch_queue_t)qword_100079A88, v2);
}

uint64_t sub_1000064EC(uint64_t a1)
{
  uint64_t context = *(void *)(a1 + 32);
  int v4 = 0;
  SCPrint(1LL, context, @"Current sessions :\n");
  CFDictionaryApplyFunction((CFDictionaryRef)qword_100079A70, (CFDictionaryApplierFunction)sub_100006584, &context);
  return SCPrint(1LL, *(void *)(a1 + 32), @"\n");
}

uint64_t sub_100006584(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *a3;
  ++*((_DWORD *)a3 + 2);
  SCPrint(1LL, v5, @"  %d : port = 0x%x");
  SCPrint(1LL, *a3, @", name = %@");
  if (*(void *)(a2 + 32)) {
    SCPrint(1LL, *a3, @"\n    changedKeys = %@");
  }
  if (*(void *)(a2 + 48)) {
    SCPrint(1LL, *a3, @"\n    sessionKeys = %@");
  }
  return SCPrint(1LL, *a3, @"\n");
}

BOOL sub_10000666C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 64) == 0;
}

uint64_t sub_1000066BC(uint64_t a1, void *a2, const __CFDictionary *a3)
{
  __int128 v6 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)atoken.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&atoken.val[4] = v6;
  pid_t v7 = audit_token_to_pid(&atoken);
  if (v7 == getpid()) {
    return 0LL;
  }
  if (a3 || (uint64_t result = (uint64_t)sub_100002FAC(a2), (a3 = (const __CFDictionary *)result) != 0LL))
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a3, @"read-deny");
    if (Value && sub_1000069C4(a1, Value))
    {
      os_log_t v10 = sub_1000017F0();
      uint64_t v11 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v10, v11))
      {
        uint64_t v12 = _os_log_pack_size(32LL);
        int v13 = (char *)&atoken - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __int128 v14 = __error();
        uint64_t v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%s(%@): %@ has deny entitlement");
        *(_DWORD *)uint64_t v15 = 136315650;
        *(void *)(v15 + 4) = "checkReadAccess";
        *(_WORD *)(v15 + 12) = 2112;
        *(void *)(v15 + 14) = a2;
        *(_WORD *)(v15 + 22) = 2112;
        *(void *)(v15 + 24) = a1;
        __SC_log_send(6LL, v10, v11, v13);
      }

      return 1003LL;
    }

    else
    {
      CFDictionaryContainsKey(a3, @"read-deny-background");
      uint64_t result = (uint64_t)CFDictionaryGetValue(a3, @"read-allow");
      if (result)
      {
        if (sub_1000069C4(a1, (CFArrayRef)result))
        {
          os_log_t v16 = sub_1000017F0();
          uint64_t v17 = _SC_syslog_os_log_mapping(6LL);
          uint64_t result = __SC_log_enabled(6LL, v16, v17);
          if ((_DWORD)result)
          {
            uint64_t v18 = _os_log_pack_size(32LL);
            __int128 v19 = (char *)&atoken - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v20 = __error();
            uint64_t v21 = _os_log_pack_fill( v19,  v18,  *v20,  &_mh_execute_header,  "%s(%@): %@ has allow entitlement");
            *(_DWORD *)uint64_t v21 = 136315650;
            *(void *)(v21 + 4) = "checkReadAccess";
            *(_WORD *)(v21 + 12) = 2112;
            *(void *)(v21 + 14) = a2;
            *(_WORD *)(v21 + 22) = 2112;
            *(void *)(v21 + 24) = a1;
            __SC_log_send(6LL, v16, v17, v19);
            return 0LL;
          }
        }

        else
        {
          CFDictionaryContainsKey(a3, @"read-allow-system");
          int v22 = sub_100006A98(a1, @"com.apple.SystemConfiguration.SCDynamicStore-read-no-fault");
          if (CFDictionaryContainsKey(a3, @"read-allow-platform") && sub_100006B38(a1))
          {
            if (v22) {
              return 0LL;
            }
            else {
              return 10100LL;
            }
          }

          else if (v22)
          {
            return 1003LL;
          }

          else
          {
            return 10003LL;
          }
        }
      }
    }
  }

  return result;
}

BOOL sub_1000069C4(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v5 = Count;
  ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0LL);
  if (sub_100007664(a1, ValueAtIndex)) {
    return 1LL;
  }
  CFIndex v8 = 1LL;
  do
  {
    CFIndex v9 = v8;
    if (v5 == v8) {
      break;
    }
    os_log_t v10 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v8);
    uint64_t v11 = sub_100007664(a1, v10);
    CFIndex v8 = v9 + 1;
  }

  while (!v11);
  return v9 < v5;
}

uint64_t sub_100006A98(uint64_t a1, const __CFString *a2)
{
  mach_port_name_t v2 = sub_100007664(a1, a2);
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (v2 && CFGetTypeID(v2) == TypeID) {
    return CFBooleanGetValue(v2);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100006B38(uint64_t a1)
{
  mach_port_name_t v2 = *(const __CFBoolean **)(a1 + 120);
  if (v2) {
    return CFBooleanGetValue(v2);
  }
  __int128 v4 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)token.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&token.val[4] = v4;
  CFIndex v5 = SecTaskCreateWithAuditToken(0LL, &token);
  if (!v5)
  {
    BOOL v8 = 1;
    goto LABEL_7;
  }

  __int128 v6 = v5;
  uint32_t CodeSignStatus = SecTaskGetCodeSignStatus(v5);
  CFRelease(v6);
  BOOL v8 = (CodeSignStatus & 0x4000000) == 0;
  if ((CodeSignStatus & 0x4000000) == 0)
  {
LABEL_7:
    CFIndex v9 = &kCFBooleanFalse;
    goto LABEL_8;
  }

  CFIndex v9 = &kCFBooleanTrue;
LABEL_8:
  *(CFBooleanRef *)(a1 + 120) = *v9;
  os_log_t v10 = sub_1000017F0();
  uint64_t v11 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v10, v11))
  {
    uint64_t v12 = _os_log_pack_size(32LL);
    int v13 = (char *)&token - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __int128 v14 = __error();
    uint64_t v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%s: %@ is%s a platform binary");
    os_log_t v16 = "";
    *(void *)(v15 + 4) = "sessionIsPlatformBinary";
    *(_DWORD *)uint64_t v15 = 136315650;
    if (v8) {
      os_log_t v16 = " NOT";
    }
    *(_WORD *)(v15 + 12) = 2112;
    *(void *)(v15 + 14) = a1;
    *(_WORD *)(v15 + 22) = 2080;
    *(void *)(v15 + 24) = v16;
    __SC_log_send(7LL, v10, v11, v13);
  }

  if (v8) {
    return 0LL;
  }
  sub_100007968(a1 + 68);
  return 1LL;
}

uint64_t sub_100006D2C(uint64_t a1, __CFString *key)
{
  __int128 v4 = (const __CFDictionary *)sub_100002FAC(key);
  if (v4 && CFDictionaryContainsKey(v4, @"write-protect"))
  {
    if (!sub_100006F2C(a1, key))
    {
      else {
        return 10002LL;
      }
    }

    return 0LL;
  }

  __int128 v6 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)atoken.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&atoken.val[4] = v6;
  pid_t v7 = audit_token_to_pid(&atoken);
  if (v7 == getpid()) {
    return 0LL;
  }
  if (*(_DWORD *)(a1 + 64))
  {
    else {
      return 1003LL;
    }
  }

  else
  {
    uint64_t result = CFStringHasPrefix(key, kSCDynamicStoreDomainSetup);
    if ((_DWORD)result)
    {
      os_log_t v8 = sub_1000017F0();
      uint64_t v9 = _SC_syslog_os_log_mapping(5LL);
      uint64_t result = __SC_log_enabled(5LL, v8, v9);
      if ((_DWORD)result)
      {
        os_log_t v10 = (_OWORD *)(a1 + 68);
        uint64_t v11 = _os_log_pack_size(18LL);
        uint64_t v12 = (char *)&atoken - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v13 = __error();
        uint64_t v14 = _os_log_pack_fill( v12,  v11,  *v13,  &_mh_execute_header,  "*** Non-configd pid %d modifying %@ ***");
        __int128 v15 = v10[1];
        *(_OWORD *)atoken.val = *v10;
        *(_OWORD *)&atoken.val[4] = v15;
        pid_t v16 = audit_token_to_pid(&atoken);
        *(_DWORD *)uint64_t v14 = 67109378;
        *(_DWORD *)(v14 + 4) = v16;
        *(_WORD *)(v14 + 8) = 2112;
        *(void *)(v14 + 10) = key;
        __SC_log_send(5LL, v8, v9, v12);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100006F2C(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = sub_100007664(a1, @"com.apple.SystemConfiguration.SCDynamicStore-write-access");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (v3 && CFGetTypeID(v3) == TypeID)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(v3, @"keys");
    CFTypeID v6 = CFArrayGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == v6)
      {
        v15.length = CFArrayGetCount(Value);
        v15.location = 0LL;
        if (CFArrayContainsValue(Value, v15, a2)) {
          return 1LL;
        }
      }
    }

    os_log_t v8 = (const __CFArray *)CFDictionaryGetValue(v3, @"patterns");
    CFTypeID v9 = CFArrayGetTypeID();
    if (v8)
    {
      if (CFGetTypeID(v8) == v9)
      {
        CFIndex Count = CFArrayGetCount(v8);
        if (Count >= 1)
        {
          CFIndex v11 = Count;
          CFIndex v12 = 0LL;
          while (1)
          {
            ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v8, v12);
            CFTypeID v14 = CFStringGetTypeID();
            if (ValueAtIndex)
            {
            }

            if (v11 == ++v12) {
              return 0LL;
            }
          }

          return 1LL;
        }
      }
    }
  }

  return 0LL;
}

void sub_1000070A4(id a1)
{
  qword_100079A70 = (uint64_t)CFDictionaryCreateMutable(0LL, 0LL, 0LL, &kCFTypeDictionaryValueCallBacks);
  qword_100079A88 = (uint64_t)dispatch_queue_create("SCDynamicStore/sessions", 0LL);
}

void sub_100007120(id a1)
{
  qword_100079A98 = _CFRuntimeRegisterClass(&unk_100071C00);
}

void sub_100007178(void *a1)
{
  mach_port_name_t v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  __int128 v4 = (const void *)a1[6];
  if (v4) {
    CFRelease(v4);
  }
}

__CFString *sub_100007210(uint64_t a1)
{
  mach_port_name_t v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<serverSession %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0LL, @"port = 0x%x (%u)", *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 16));
  if (*(void *)(a1 + 40)) {
    CFStringAppendFormat(Mutable, 0LL, @", name = %@", *(void *)(a1 + 40));
  }
  CFStringAppendFormat(Mutable, 0LL, @"}");
  return Mutable;
}

os_state_data_s *__cdecl sub_1000072E4(id a1, os_state_hints_s *a2)
{
  v24[0] = 0LL;
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_100079A70);
  if (Count > 249)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryApplyFunction((CFDictionaryRef)qword_100079A70, (CFDictionaryApplierFunction)sub_1000075A4, Mutable);
  }

  else
  {
    CFMutableArrayRef Mutable = (void *)CFStringCreateWithFormat(0LL, 0LL, @"n = %ld", Count);
  }

  int v4 = _SCSerialize(Mutable, v24, 0LL, 0LL);
  CFRelease(Mutable);
  if (v4) {
    BOOL v5 = v24[0] == 0LL;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    int64_t v6 = 0LL;
    size_t v7 = 200LL;
  }

  else
  {
    CFIndex Length = CFDataGetLength(v24[0]);
    size_t v7 = Length + 200;
    if ((unint64_t)(Length + 200) > 0x8000)
    {
      os_log_t v9 = sub_1000017F0();
      uint64_t v10 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v9, v10))
      {
        uint64_t v11 = _os_log_pack_size(22LL);
        CFIndex v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v13 = __error();
        uint64_t v14 = _os_log_pack_fill( v12,  v11,  *v13,  &_mh_execute_header,  "SCDynamicStore/sessions : state data too large (%zu > %zu)",  (size_t)v24[0],  (size_t)v24[1]);
        *(_DWORD *)uint64_t v14 = 134218240;
        *(void *)(v14 + 4) = v7;
        *(_WORD *)(v14 + 12) = 2048;
        *(void *)(v14 + 14) = 0x8000LL;
        __SC_log_send(3LL, v9, v10, v12);
      }

LABEL_19:
      pid_t v16 = 0LL;
      goto LABEL_20;
    }

    int64_t v6 = Length;
  }

  CFRange v15 = (os_state_data_s *)calloc(1uLL, v7);
  if (!v15)
  {
    os_log_t v18 = sub_1000017F0();
    uint64_t v19 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v18, v19))
    {
      uint64_t v20 = _os_log_pack_size(2LL);
      uint64_t v21 = (char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v22 = __error();
      *(_WORD *)_os_log_pack_fill( v21,  v20,  *v22,  &_mh_execute_header,  "SCDynamicStore/sessions: could not allocate state data") = 0;
      __SC_log_send(3LL, v18, v19, v21);
    }

    goto LABEL_19;
  }

  pid_t v16 = v15;
  v15->var0 = 1;
  v15->var1.var1 = v6;
  __strlcpy_chk(v15->var3, "SCDynamicStore/sessions", 64LL, 64LL);
  if (v6 >= 1)
  {
    BytePtr = CFDataGetBytePtr(v24[0]);
    memcpy(v16->var4, BytePtr, v6);
  }

  *a6 = v15;
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  return 0LL;
}

LABEL_20:
  if (v24[0]) {
    CFRelease(v24[0]);
  }
  return v16;
}

void sub_1000075A4(int a1, uint64_t a2, CFDictionaryRef theDict)
{
  int v4 = *(const void **)(a2 + 40);
  if (v4)
  {
    if (CFDictionaryGetValueIfPresent(theDict, v4, (const void **)&value)
      && CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr))
    {
      int v6 = valuePtr + 1;
    }

    else
    {
      int v6 = 1;
    }

    int valuePtr = v6;
    value = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(theDict, *(const void **)(a2 + 40), value);
    CFRelease(value);
  }

CFNullRef sub_100007664(uint64_t a1, const __CFString *key)
{
  int v4 = *(const __CFDictionary **)(a1 + 104);
  if (v4)
  {
    Value = (const __CFNull *)CFDictionaryGetValue(v4, key);
    if (Value)
    {
      if (Value == kCFNull) {
        return 0LL;
      }
      else {
        return Value;
      }
    }
  }

  __int128 v7 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)token.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&token.val[4] = v7;
  os_log_t v8 = SecTaskCreateWithAuditToken(0LL, &token);
  if (v8)
  {
    os_log_t v9 = v8;
    *(void *)token.val = 0LL;
    CFTypeRef v6 = SecTaskCopyValueForEntitlement(v8, key, (CFErrorRef *)&token);
    if (!v6 && *(void *)token.val)
    {
      CFIndex Code = CFErrorGetCode(*(CFErrorRef *)token.val);
      CFErrorDomain Domain = CFErrorGetDomain(*(CFErrorRef *)token.val);
      if (!CFEqual(Domain, kCFErrorDomainMach) || Code != -536870911 && Code != -536870160)
      {
        os_log_t v12 = sub_1000017F0();
        uint64_t v13 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v12, v13))
        {
          uint64_t v14 = _os_log_pack_size(32LL);
          CFRange v15 = (char *)&token - ((__chkstk_darwin(v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          pid_t v16 = __error();
          uint64_t v17 = _os_log_pack_fill( v15,  v14,  *v16,  &_mh_execute_header,  "SecTaskCopyValueForEntitlement(,%@,) failed, error = %@ : %@");
          uint64_t v18 = *(void *)token.val;
          uint64_t v19 = *(void *)(a1 + 40);
          *(_DWORD *)uint64_t v17 = 138412802;
          *(void *)(v17 + 4) = key;
          *(_WORD *)(v17 + 12) = 2112;
          *(void *)(v17 + 14) = v18;
          *(_WORD *)(v17 + 22) = 2112;
          *(void *)(v17 + 24) = v19;
          __SC_log_send(5LL, v12, v13, v15);
        }
      }

      CFRelease(*(CFTypeRef *)token.val);
    }

    CFMutableArrayRef Mutable = *(__CFDictionary **)(a1 + 104);
    if (Mutable)
    {
      if (v6)
      {
LABEL_17:
        CFDictionarySetValue(Mutable, key, v6);
        CFRelease(v6);
LABEL_23:
        CFRelease(v9);
        return (const __CFNull *)v6;
      }
    }

    else
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      *(void *)(a1 + 104) = Mutable;
      if (v6) {
        goto LABEL_17;
      }
    }

    CFDictionarySetValue(Mutable, key, kCFNull);
    goto LABEL_23;
  }

  os_log_t v21 = sub_1000017F0();
  uint64_t v22 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v21, v22))
  {
    uint64_t v23 = _os_log_pack_size(12LL);
    os_log_t v24 = (char *)&token - ((__chkstk_darwin(v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v25 = __error();
    uint64_t v26 = _os_log_pack_fill( v24,  v23,  *v25,  &_mh_execute_header,  "SecTaskCreateWithAuditToken() failed: %@");
    uint64_t v27 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t v26 = 138412290;
    *(void *)(v26 + 4) = v27;
    __SC_log_send(5LL, v21, v22, v24);
  }

  return 0LL;
}

uint64_t sub_100007968(uint64_t result)
{
  if (byte_1000799E8)
  {
    int v1 = (audit_token_t *)result;
    bzero(v9, 0x1000uLL);
    uint64_t result = proc_pidpath_audittoken(v1, v9, 0x1000u);
    if ((int)result >= 1)
    {
      os_log_t v2 = sub_1000017F0();
      uint64_t v3 = _SC_syslog_os_log_mapping(5LL);
      uint64_t result = __SC_log_enabled(5LL, v2, v3);
      if ((_DWORD)result)
      {
        uint64_t v4 = _os_log_pack_size(22LL);
        BOOL v5 = (char *)&v9[-1] - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFTypeRef v6 = __error();
        uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%s:%s", v8, v9[0]);
        *(_DWORD *)uint64_t v7 = 136315394;
        *(void *)(v7 + 4) = "SC_PLATFORM_BINARY_PATH";
        *(_WORD *)(v7 + 12) = 2080;
        *(void *)(v7 + 14) = v9;
        return __SC_log_send(5LL, v2, v3, v5);
      }
    }
  }

  return result;
}

CFArrayRef sub_100007AD8(__CFString *a1)
{
  os_log_t v2 = sub_100007BA8(a1);
  if (v2) {
    goto LABEL_4;
  }
  uint64_t v3 = sub_100007C38(a1);
  if (v3)
  {
    os_log_t v2 = v3;
    ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v3, 0LL);
    BytePtr = (regex_t *)CFDataGetBytePtr(ValueAtIndex);
    regfree(BytePtr);
LABEL_4:
    v8.location = 0LL;
    v8.length = 2LL;
    CFArrayReplaceValues(v2, v8, 0LL, 0LL);
    CFArrayRef Copy = CFArrayCreateCopy(0LL, v2);
    CFRelease(v2);
    return Copy;
  }

  return 0LL;
}

CFMutableArrayRef sub_100007BA8(void *key)
{
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)qword_1000799C0, key);
  if (Value) {
    return CFArrayCreateMutableCopy(0LL, 0LL, Value);
  }
  else {
    return 0LL;
  }
}

__CFArray *sub_100007C38(const __CFString *a1)
{
  CFTypeRef cf = 0LL;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  uint64_t v3 = CFDataCreateMutable(0LL, 32LL);
  CFDataSetLength(v3, 32LL);
  if (sub_1000088A4(a1, v3, &cf))
  {
    CFArrayAppendValue(Mutable, v3);
    CFArrayRef v4 = CFArrayCreate(0LL, 0LL, 0LL, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
    context[0] = Mutable;
    context[1] = v3;
    BOOL v5 = (const __CFDictionary *)qword_1000799B8;
    CFTypeRef v6 = CFGetAllocator((CFTypeRef)qword_1000799B8);
    CFArrayRef Copy = CFDictionaryCreateCopy(v6, v5);
    CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)sub_100008C2C, context);
    CFRelease(Copy);
    CFRelease(v3);
  }

  else
  {
    CFRelease(cf);
    CFRelease(v3);
    CFRelease(Mutable);
    return 0LL;
  }

  return Mutable;
}

uint64_t sub_100007D7C(__CFString *a1, const __CFString *a2)
{
  CFArrayRef v4 = sub_100007BA8(a1);
  BOOL v5 = v4;
  if (!v4)
  {
    uint64_t v7 = sub_100007C38(a1);
    if (!v7) {
      return 0LL;
    }
    goto LABEL_6;
  }

  CFIndex Count = CFArrayGetCount(v4);
  uint64_t v7 = v5;
  if (Count < 3 || (v12.length = Count - 2, v12.location = 2LL, uint64_t v7 = v5, !CFArrayContainsValue(v5, v12, a2)))
  {
LABEL_6:
    ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v7, 0LL);
    uint64_t v8 = sub_100007E74(a2, ValueAtIndex);
    if (!v5)
    {
      BytePtr = (regex_t *)CFDataGetBytePtr(ValueAtIndex);
      regfree(BytePtr);
    }

    BOOL v5 = v7;
    goto LABEL_9;
  }

  uint64_t v8 = 1LL;
LABEL_9:
  CFRelease(v5);
  return v8;
}

uint64_t sub_100007E74(const __CFString *a1, const __CFData *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
  CFIndex v6 = MaximumSizeForEncoding + 1;
  if (MaximumSizeForEncoding < 256) {
    uint64_t v7 = v25;
  }
  else {
    uint64_t v7 = (char *)CFAllocatorAllocate(0LL, v6, 0LL);
  }
  if (_SC_cfstring_to_cstring(a1, v7, v6, 1536LL))
  {
    BytePtr = CFDataGetBytePtr(a2);
    int v9 = regexec((const regex_t *)BytePtr, v7, 0LL, 0LL, 0);
    uint64_t v10 = 0LL;
    if (v9 == 1) {
      goto LABEL_11;
    }
    if (!v9)
    {
      uint64_t v10 = 1LL;
      goto LABEL_11;
    }

    regerror(v9, (const regex_t *)BytePtr, v24, 0x100uLL);
    os_log_t v17 = sub_1000017F0();
    uint64_t v18 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v17, v18))
    {
      uint64_t v19 = _os_log_pack_size(12LL);
      uint64_t v20 = &v24[-((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
      os_log_t v21 = __error();
      uint64_t v22 = _os_log_pack_fill(v20, v19, *v21, &_mh_execute_header, "regexec() failed: %s", v23);
      *(_DWORD *)uint64_t v22 = 136315138;
      *(void *)(v22 + 4) = v24;
      __SC_log_send(6LL, v17, v18, v20);
    }
  }

  else
  {
    os_log_t v11 = sub_1000017F0();
    uint64_t v12 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v11, v12))
    {
      uint64_t v13 = _os_log_pack_size(2LL);
      uint64_t v14 = &v24[-((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
      CFRange v15 = __error();
      *(_WORD *)_os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "could not convert store key to C string") = 0;
      __SC_log_send(6LL, v11, v12, v14);
    }
  }

  uint64_t v10 = 0LL;
LABEL_11:
  if (v7 != v25) {
    CFAllocatorDeallocate(0LL, v7);
  }
  return v10;
}

__CFArray *sub_1000080EC(__CFString *a1, const void *a2)
{
  CFArrayRef v4 = sub_100007BA8(a1);
  if (v4 || (uint64_t result = sub_100007C38(a1), (v4 = result) != 0LL))
  {
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v4, 1LL);
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0LL, 0LL, ValueAtIndex);
    CFArrayAppendValue(MutableCopy, a2);
    CFArraySetValueAtIndex(v4, 1LL, MutableCopy);
    CFRelease(MutableCopy);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1000799C0, a1, v4);
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 3)
    {
      CFIndex v9 = Count;
      for (CFIndex i = 2LL; i != v9; ++i)
      {
        os_log_t v11 = CFArrayGetValueAtIndex(v4, i);
        sub_100002B1C(a2, v11);
      }
    }

    CFRelease(v4);
    return (__CFArray *)1;
  }

  return result;
}

void sub_100008204(void *a1, const void *a2)
{
  CFArrayRef v4 = sub_100007BA8(a1);
  if (!v4) {
    sub_1000618F8();
  }
  BOOL v5 = v4;
  CFIndex Count = CFArrayGetCount(v4);
  if (Count > 2)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 2LL; i != v7; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
      sub_100002D48(a2, ValueAtIndex);
    }
  }

  uint64_t v10 = (const __CFArray *)CFArrayGetValueAtIndex(v5, 1LL);
  CFIndex v11 = CFArrayGetCount(v10);
  if (v11 < 2)
  {
    CFRange v15 = (const __CFData *)CFArrayGetValueAtIndex(v5, 0LL);
    BytePtr = (regex_t *)CFDataGetBytePtr(v15);
    regfree(BytePtr);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1000799C0, a1);
  }

  else
  {
    CFIndex v12 = v11;
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0LL, 0LL, v10);
    v17.location = 0LL;
    v17.length = v12;
    CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(MutableCopy, v17, a2);
    CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
    CFArraySetValueAtIndex(v5, 1LL, MutableCopy);
    CFRelease(MutableCopy);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1000799C0, a1, v5);
  }

  CFRelease(v5);
}

void sub_100008360(void *a1)
{
  os_log_t v2 = (const __CFDictionary *)qword_1000799C0;
  uint64_t v3 = CFGetAllocator((CFTypeRef)qword_1000799C0);
  CFArrayRef Copy = CFDictionaryCreateCopy(v3, v2);
  CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)sub_1000083E4, a1);
  CFRelease(Copy);
}

void sub_1000083E4(const void *a1, const __CFArray *a2, CFStringRef theString)
{
  CFIndex Length = CFStringGetLength(theString);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
  CFIndex v8 = MaximumSizeForEncoding + 1;
  if (MaximumSizeForEncoding < 256) {
    CFIndex v9 = v32;
  }
  else {
    CFIndex v9 = (char *)CFAllocatorAllocate(0LL, v8, 0LL);
  }
  if (_SC_cfstring_to_cstring(theString, v9, v8, 1536LL))
  {
    ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(a2, 0LL);
    BytePtr = CFDataGetBytePtr(ValueAtIndex);
    int v12 = regexec((const regex_t *)BytePtr, v9, 0LL, 0LL, 0);
    if (v12 != 1)
    {
      if (v12)
      {
        regerror(v12, (const regex_t *)BytePtr, v31, 0x100uLL);
        os_log_t v24 = sub_1000017F0();
        uint64_t v25 = _SC_syslog_os_log_mapping(6LL);
        if (__SC_log_enabled(6LL, v24, v25))
        {
          uint64_t v26 = _os_log_pack_size(12LL);
          uint64_t v27 = &v31[-((__chkstk_darwin(v26) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
          uint64_t v28 = __error();
          uint64_t v29 = _os_log_pack_fill(v27, v26, *v28, &_mh_execute_header, "%s", v30);
          *(_DWORD *)uint64_t v29 = 136315138;
          *(void *)(v29 + 4) = v31;
          __SC_log_send(6LL, v24, v25, v27);
        }
      }

      else
      {
        uint64_t v13 = (const __CFArray *)CFArrayGetValueAtIndex(a2, 1LL);
        CFIndex Count = CFArrayGetCount(v13);
        if (Count >= 1)
        {
          CFIndex v15 = Count;
          for (CFIndex i = 0LL; i != v15; ++i)
          {
            CFRange v17 = CFArrayGetValueAtIndex(v13, i);
            sub_100002B1C(v17, theString);
          }
        }

        MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0LL, 0LL, a2);
        CFArrayAppendValue(MutableCopy, theString);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_1000799C0, a1, MutableCopy);
        CFRelease(MutableCopy);
      }
    }
  }

  else
  {
    os_log_t v19 = sub_1000017F0();
    uint64_t v20 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v19, v20))
    {
      uint64_t v21 = _os_log_pack_size(2LL);
      uint64_t v22 = &v31[-((__chkstk_darwin(v21) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
      uint64_t v23 = __error();
      *(_WORD *)_os_log_pack_fill( v22,  v21,  *v23,  &_mh_execute_header,  "could not convert store key to C string") = 0;
      __SC_log_send(6LL, v19, v20, v22);
    }
  }

  if (v9 != v32) {
    CFAllocatorDeallocate(0LL, v9);
  }
}

void sub_1000086DC(void *a1)
{
  os_log_t v2 = (const __CFDictionary *)qword_1000799C0;
  uint64_t v3 = CFGetAllocator((CFTypeRef)qword_1000799C0);
  CFArrayRef Copy = CFDictionaryCreateCopy(v3, v2);
  CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)sub_100008760, a1);
  CFRelease(Copy);
}

void sub_100008760(const void *a1, CFArrayRef theArray, const void *a3)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 3)
  {
    v15.length = Count - 2;
    v15.location = 2LL;
    CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(theArray, v15, a3);
    if (FirstIndexOfValue != -1)
    {
      CFIndex v8 = FirstIndexOfValue;
      MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0LL, 0LL, theArray);
      CFArrayRemoveValueAtIndex(MutableCopy, v8);
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(MutableCopy, 1LL);
      CFIndex v11 = CFArrayGetCount(ValueAtIndex);
      if (v11 >= 1)
      {
        CFIndex v12 = v11;
        for (CFIndex i = 0LL; i != v12; ++i)
        {
          uint64_t v14 = CFArrayGetValueAtIndex(ValueAtIndex, i);
          sub_100002D48(v14, a3);
        }
      }

      CFDictionarySetValue((CFMutableDictionaryRef)qword_1000799C0, a1, MutableCopy);
      CFRelease(MutableCopy);
    }
  }

uint64_t sub_1000088A4(const __CFString *a1, const __CFData *a2, void *a3)
{
  BOOL v5 = a1;
  CFIndex v31 = 0LL;
  if (!CFStringGetLength(a1))
  {
    os_log_t v6 = sub_1000017F0();
    uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v6, v7))
    {
      uint64_t v8 = _os_log_pack_size(2LL);
      CFIndex v9 = (char *)&v30 - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v10 = __error();
      *(_WORD *)_os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "empty regex pattern") = 0;
      __SC_log_send(5LL, v6, v7, v9);
    }
  }

  int HasPrefix = CFStringHasPrefix(v5, @"^");
  if (!CFStringHasSuffix(v5, @"$") || CFStringHasSuffix(v5, @"\\$"))
  {
    CFIndex v12 = "";
    if (!HasPrefix) {
      CFIndex v12 = "^";
    }
    uint64_t v13 = "$";
    goto LABEL_9;
  }

  if (!HasPrefix)
  {
    uint64_t v13 = "";
    CFIndex v12 = "^";
LABEL_9:
    BOOL v5 = CFStringCreateWithFormat(0LL, 0LL, @"%s%@%s", v12, v5, v13);
    int v14 = 1;
    goto LABEL_10;
  }

  int v14 = 0;
LABEL_10:
  v34.length = CFStringGetLength(v5);
  v34.location = 0LL;
  if (CFStringGetBytes(v5, v34, 0x600u, 0, 0, 0LL, 0LL, &v31) <= 0)
  {
    os_log_t v18 = sub_1000017F0();
    uint64_t v19 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v18, v19))
    {
      uint64_t v20 = _os_log_pack_size(12LL);
      uint64_t v21 = (char *)&v30 - ((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v22 = __error();
      uint64_t v23 = _os_log_pack_fill( v21,  v20,  *v22,  &_mh_execute_header,  "could not get buffer length for %@");
      *(_DWORD *)uint64_t v23 = 138412290;
      *(void *)(v23 + 4) = v5;
      __SC_log_send(5LL, v18, v19, v21);
    }

    CFIndex v16 = 256LL;
    CFIndex v31 = 256LL;
  }

  else
  {
    uint64_t v15 = v31;
    CFIndex v16 = ++v31;
    if (v15 >= 256)
    {
      CFRange v17 = (char *)CFAllocatorAllocate(0LL, v15 + 1, 0LL);
      CFIndex v16 = v31;
      goto LABEL_17;
    }
  }

  CFRange v17 = v33;
LABEL_17:
  uint64_t v24 = _SC_cfstring_to_cstring(v5, v17, v16, 1536LL);
  if (v14) {
    CFRelease(v5);
  }
  if (v24)
  {
    BytePtr = (regex_t *)CFDataGetBytePtr(a2);
    uint64_t v26 = 1LL;
    int v27 = regcomp(BytePtr, v17, 1);
    if (!v27) {
      goto LABEL_24;
    }
    regerror(v27, BytePtr, v32, 0x100uLL);
    uint64_t v28 = (void *)CFStringCreateWithCString(0LL, v32, 0x600u);
  }

  else
  {
    uint64_t v28 = (void *)CFRetain(@"could not convert pattern to regex string");
  }

  uint64_t v26 = 0LL;
  *a3 = v28;
LABEL_24:
  if (v17 != v33) {
    CFAllocatorDeallocate(0LL, v17);
  }
  return v26;
}

void sub_100008C2C(const __CFString *a1, CFDictionaryRef theDict, __CFArray **a3)
{
  CFArrayRef v4 = *a3;
  BOOL v5 = a3[1];
  if (CFDictionaryContainsKey(theDict, @"data"))
  {
  }

uint64_t sub_100008CE4( int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, int *a6, int *a7, __int128 *a8)
{
  CFIndex v31 = 0LL;
  v32 = 0LL;
  *a6 = 0;
  *a7 = 0;
  if (_SCUnserializeString(&v32, 0LL, a2, a3))
  {
    if (!a4) {
      goto LABEL_7;
    }
  }

  else
  {
    *a7 = 1001;
    if (!a4) {
      goto LABEL_7;
    }
  }

  if (a5 && !_SCUnserialize(&v31, 0LL, a4, a5))
  {
LABEL_23:
    int v24 = 1001;
    goto LABEL_24;
  }

LABEL_7:
  if (*a7) {
    goto LABEL_25;
  }
  int v14 = v32;
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v14
    || CFGetTypeID(v14) != TypeID
    || (CFTypeRef Value = v31) != 0LL
    && ((CFTypeID v17 = CFDictionaryGetTypeID(), CFGetTypeID(Value) != v17)
     || (CFTypeRef Value = CFDictionaryGetValue(v31, kSCDynamicStoreUseSessionKeys)) != 0LL
     && (CFTypeID v18 = CFBooleanGetTypeID(), CFGetTypeID(Value) != v18)))
  {
    int v24 = 1002;
LABEL_24:
    *a7 = v24;
    goto LABEL_25;
  }

  __int128 v19 = a8[1];
  v33[0] = *a8;
  v33[1] = v19;
  uint64_t v20 = sub_100005C5C(a1, v33);
  if (!v20)
  {
    os_log_t v25 = sub_1000017F0();
    uint64_t v26 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v25, v26))
    {
      uint64_t v27 = _os_log_pack_size(2LL);
      uint64_t v28 = (char *)&v31 - ((__chkstk_darwin(v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v29 = __error();
      *(_WORD *)_os_log_pack_fill(v28, v27, *v29, &_mh_execute_header, "session is already open") = 0;
      __SC_log_send(5LL, v25, v26, v28);
    }

    goto LABEL_23;
  }

  uint64_t v21 = v20;
  *a6 = *(_DWORD *)(v20 + 16);
  uint64_t v22 = sub_1000017F0();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
    sub_100061920(a6, (uint64_t *)&v32, v22);
  }
  uint64_t Private = __SCDynamicStoreCreatePrivate(0LL, v32, 0LL, 0LL);
  *(void *)(v21 + 56) = Private;
  *a7 = 0;
  *(_DWORD *)(Private + 40) = *a6;
  if (Value) {
    *(_BYTE *)(Private + 44) = CFBooleanGetValue((CFBooleanRef)Value);
  }
  *(void *)(v21 + 40) = v32;
LABEL_25:
  if (v31) {
    CFRelease(v31);
  }
  return 0LL;
}

  if (*a8)
  {
    int v14 = 0LL;
    goto LABEL_32;
  }

  uint64_t v15 = cf;
  if (cf && (CFTypeID TypeID = CFArrayGetTypeID(), CFGetTypeID(v15) != TypeID)
    || (CFTypeID v17 = v32) != 0LL && (v18 = CFArrayGetTypeID(), CFGetTypeID(v17) != v18))
  {
    int v14 = 0LL;
    uint64_t v27 = 1002;
    goto LABEL_31;
  }

  __int128 v19 = sub_1000059A4(a1);
  if (!v19)
  {
    int v14 = 0LL;
    uint64_t v27 = 2001;
    goto LABEL_31;
  }

  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 + 56);
  uint64_t v22 = (const __CFArray *)v32;
  uint64_t v23 = (const __CFArray *)cf;
  int v24 = sub_1000017F0();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v29 = *(_DWORD *)(v21 + 40);
    if (v23) {
      CFIndex Count = CFArrayGetCount(v23);
    }
    else {
      CFIndex Count = 0LL;
    }
    if (v22) {
      CFIndex v31 = CFArrayGetCount(v22);
    }
    else {
      CFIndex v31 = 0LL;
    }
    LODWORD(context) = 67109632;
    HIDWORD(context) = v29;
    *(_WORD *)uint64_t v35 = 2048;
    *(void *)&v35[2] = Count;
    *(_WORD *)&v35[10] = 2048;
    *(void *)&v35[12] = v31;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "copy m  : %5u : %ld keys, %ld patterns",  (uint8_t *)&context,  0x1Cu);
  }

  uint64_t context = 0LL;
  *(void *)uint64_t v35 = v21;
  *(void *)&v35[8] = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v23)
  {
    v36.length = CFArrayGetCount(v23);
    v36.location = 0LL;
    CFArrayApplyFunction(v23, v36, (CFArrayApplierFunction)sub_10000A3F4, &context);
  }

  if (v22)
  {
    v37.length = CFArrayGetCount(v22);
    v37.location = 0LL;
    CFArrayApplyFunction(v22, v37, (CFArrayApplierFunction)sub_10000A50C, &context);
  }

  int v14 = context;
  os_log_t v25 = *(const __CFDictionary **)&v35[8];
  if (*(void *)&v35[8])
  {
    if (context && CFDictionaryGetCount(*(CFDictionaryRef *)&v35[8]) >= 1)
    {
      uint64_t context = (const __CFDictionary *)v20;
      *(void *)uint64_t v35 = CFDictionaryCreateMutableCopy(0LL, 0LL, v25);
      CFDictionaryApplyFunction(v14, (CFDictionaryApplierFunction)sub_10000A31C, &context);
      CFRelease(v25);
      os_log_t v25 = *(const __CFDictionary **)v35;
    }

    uint64_t v26 = _SCSerialize(v25, 0LL, a6, &context);
    *a7 = (_DWORD)context;
    CFRelease(v25);
    if (!v26)
    {
LABEL_28:
      uint64_t v27 = 1001;
LABEL_31:
      *a8 = v27;
    }
  }

  if (!a6) {
    goto LABEL_10;
  }
LABEL_8:
  if (a7 && !_SCUnserialize(&v41, 0LL, a6, a7))
  {
    os_log_t v25 = 1001;
    goto LABEL_27;
  }

  if (*a6) {
    goto LABEL_20;
  }
  uint64_t v10 = cf;
  if (cf && (CFTypeID TypeID = CFArrayGetTypeID(), CFGetTypeID(v10) != TypeID)
    || (CFIndex v12 = v17) != 0LL && (v13 = CFArrayGetTypeID(), CFGetTypeID(v12) != v13))
  {
    uint64_t v15 = 1002;
  }

  else
  {
    int v14 = sub_1000059A4(a1);
    if (v14) {
      uint64_t v15 = sub_10000BA80(*(void *)(v14 + 56), (const __CFArray *)cf, (const __CFArray *)v17);
    }
    else {
      uint64_t v15 = 2001;
    }
  }

  CFIndex v11 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-%@", v9, v6));
  internalAgentName = v5->_internalAgentName;
  v5->_internalAgentName = (NSString *)v11;

  v5->_internalAgentSubType = (unint64_t)[v7 unsignedIntegerValue];
  v5->_internalAgentType = 2LL;
  objc_storeStrong((id *)&v5->agentDescription, v5->_internalAgentName);
  agentDescription = v5->agentDescription;
  v20.receiver = v5;
  v20.super_class = (Class)&OBJC_CLASS___DNSAgent;
  int v14 = -[ConfigAgent createUUIDForName:](&v20, "createUUIDForName:", agentDescription);
  uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
  agentUUID = v5->agentUUID;
  v5->agentUUID = (NSUUID *)v15;

  if (!v5->agentUUID)
  {
    CFTypeID v17 = objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    CFTypeID v18 = v5->agentUUID;
    v5->agentUUID = (NSUUID *)v17;
  }

LABEL_10:
  return v5;
}

uint64_t sub_100008F78(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = sub_1000017F0();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_1000619AC(v2, v3);
  }
  sub_100009118(*a1, 0);
  sub_100009118(*a1, 1);
  sub_10000C70C((_DWORD *)*a1);
  uint64_t v4 = sub_1000059A4(*(_DWORD *)(v2 + 40));
  BOOL v5 = *(const __CFArray **)(v4 + 48);
  if (v5)
  {
    CFIndex Count = CFArrayGetCount(v5);
    CFStringRef v7 = CFStringCreateWithFormat(0LL, 0LL, @"%u", *(unsigned int *)(v2 + 40));
    CFStringRef v8 = v7;
    if (Count < 1)
    {
      CFRelease(v7);
    }

    else
    {
      int v9 = 0;
      for (CFIndex i = 0LL; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 48), i);
        CFTypeRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000799B8, ValueAtIndex);
        if (Value)
        {
          uint64_t v13 = CFDictionaryGetValue(Value, @"session");
          if (v13)
          {
            if (CFEqual(v8, v13))
            {
              int v9 = 1;
              sub_10000B190(*a1, ValueAtIndex, 1);
            }
          }
        }
      }

      CFRelease(v8);
      if (v9) {
        sub_10000921C();
      }
    }
  }

  *(_DWORD *)(v2 + 40) = 0;
  CFRelease((CFTypeRef)*a1);
  *a1 = 0LL;
  return 0LL;
}

void sub_100009118(uint64_t a1, int a2)
{
  uint64_t v2 = 176LL;
  if (!a2) {
    uint64_t v2 = 168LL;
  }
  uint64_t v3 = *(const __CFArray **)(a1 + v2);
  if (v3)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + v2));
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      CFArrayRef Copy = CFArrayCreateCopy(0LL, v3);
      for (CFIndex i = 0LL; i != v7; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(Copy, i);
        sub_10000BF48(a1, ValueAtIndex, a2, 1);
      }

      CFRelease(Copy);
    }
  }

uint64_t sub_10000921C()
{
  CFIndex Count = CFSetGetCount((CFSetRef)qword_1000799C8);
  if (!Count) {
    goto LABEL_27;
  }
  uint64_t v1 = Count;
  if (Count < 33)
  {
    uint64_t v2 = (const void **)values;
    CFSetGetValues((CFSetRef)qword_1000799C8, (const void **)values);
    if (v1 < 1) {
      goto LABEL_26;
    }
  }

  else
  {
    uint64_t v2 = (const void **)CFAllocatorAllocate(0LL, 8 * Count, 0LL);
    CFSetGetValues((CFSetRef)qword_1000799C8, v2);
  }

  uint64_t v23 = v2;
  do
  {
    uint64_t v3 = v2[v1 - 1];
    CFTypeRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000799B8, v3);
    if (Value)
    {
      BOOL v5 = Value;
      if (CFDictionaryContainsKey(Value, @"watchers"))
      {
        os_log_t v6 = (const __CFArray *)CFDictionaryGetValue(v5, @"watchers");
        uint64_t v7 = CFArrayGetCount(v6);
        if (v7)
        {
          CFIndex v8 = v7;
          if (v7 < 33)
          {
            int v9 = (const void **)v24;
            v27.location = 0LL;
            v27.length = v7;
            CFArrayGetValues(v6, v27, (const void **)v24);
            if (v8 < 1) {
              continue;
            }
          }

          else
          {
            int v9 = (const void **)CFAllocatorAllocate(0LL, 8 * v7, 0LL);
            v26.location = 0LL;
            v26.length = v8;
            CFArrayGetValues(v6, v26, v9);
          }

          CFIndex v10 = v8 - 1;
          do
          {
            CFIndex v11 = (const __CFNumber *)v9[v10];
            uint64_t v12 = sub_100005B04(v11);
            CFMutableArrayRef Mutable = *(const __CFArray **)(v12 + 32);
            if (!Mutable)
            {
              CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
              *(void *)(v12 + 32) = Mutable;
            }

            v28.length = CFArrayGetCount(Mutable);
            v28.location = 0LL;
            if (!CFArrayContainsValue(Mutable, v28, v3)) {
              CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 32), v3);
            }
            int v14 = (__CFSet *)qword_1000799E0;
            if (!qword_1000799E0)
            {
              int v14 = CFSetCreateMutable(0LL, 0LL, &kCFTypeSetCallBacks);
              qword_1000799E0 = (uint64_t)v14;
            }

            CFSetAddValue(v14, v11);
            unint64_t v15 = v10-- + 1;
          }

          while (v15 > 1);
          uint64_t v2 = v23;
        }
      }
    }
  }

  while (v1-- > 1);
LABEL_26:
  CFSetRemoveAllValues((CFMutableSetRef)qword_1000799C8);
LABEL_27:
  CFIndex v17 = CFSetGetCount((CFSetRef)qword_1000799D0);
  if (v17)
  {
    uint64_t v18 = v17;
    if (v17 >= 33)
    {
      __int128 v19 = (const void **)CFAllocatorAllocate(0LL, 8 * v17, 0LL);
      CFSetGetValues((CFSetRef)qword_1000799D0, v19);
      goto LABEL_31;
    }

    __int128 v19 = (const void **)values;
    CFSetGetValues((CFSetRef)qword_1000799D0, (const void **)values);
    if (v18 >= 1)
    {
LABEL_31:
      uint64_t v20 = v18 - 1;
      do
      {
        sub_1000086DC((void *)v19[v20]);
        unint64_t v21 = v20-- + 1;
      }

      while (v21 > 1);
    }

    CFSetRemoveAllValues((CFMutableSetRef)qword_1000799D0);
  }

  CFSetApplyFunction((CFSetRef)qword_1000799D8, (CFSetApplierFunction)sub_100009544, 0LL);
  CFSetRemoveAllValues((CFMutableSetRef)qword_1000799D8);
  return 0LL;
}

void sub_100009544(const __CFString *a1)
{
  CFRange v2 = CFStringFind(a1, @":", 0LL);
  v10.location = 0LL;
  v10.length = v2.location;
  CFStringRef v3 = CFStringCreateWithSubstring(0LL, a1, v10);
  v11.length = CFStringGetLength(a1) - (v2.location + v2.length);
  v11.location = v2.location + v2.length;
  CFStringRef v4 = CFStringCreateWithSubstring(0LL, a1, v11);
  uint64_t v5 = sub_100005B5C((uint64_t)v3);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(const __CFArray **)(v5 + 48);
    v9.length = CFArrayGetCount(v7);
    v9.location = 0LL;
    CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v7, v9, v4);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v6 + 48), FirstIndexOfValue);
      if (!CFArrayGetCount(*(CFArrayRef *)(v6 + 48)))
      {
        CFRelease(*(CFTypeRef *)(v6 + 48));
        *(void *)(v6 + 48) = 0LL;
      }
    }
  }

  CFRelease(v3);
  CFRelease(v4);
}

uint64_t sub_100009658(uint64_t a1, __CFString *a2, int a3, CFArrayRef *a4)
{
  CFIndex v8 = sub_1000017F0();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v11 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buuint64_t f = 67109634;
    int v22 = v11;
    if (a3) {
      uint64_t v12 = "pattern";
    }
    else {
      uint64_t v12 = "key";
    }
    __int16 v23 = 2080;
    int v24 = v12;
    __int16 v25 = 2112;
    CFRange v26 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "list    : %5u : %s : %@", buf, 0x1Cu);
    if (a3) {
      goto LABEL_3;
    }
  }

  else if (a3)
  {
LABEL_3:
    CFArrayRef v9 = sub_100007AD8(a2);
    *a4 = v9;
    if (v9) {
      return 0LL;
    }
    else {
      return 1001LL;
    }
  }

  uint64_t Count = CFDictionaryGetCount((CFDictionaryRef)qword_1000799B8);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, Count, &kCFTypeArrayCallBacks);
  if (Count >= 1)
  {
    if ((unint64_t)Count < 0x41)
    {
      CFIndex v16 = (const void **)&v20;
      unint64_t v15 = (const void **)buf;
    }

    else
    {
      unint64_t v15 = (const void **)CFAllocatorAllocate(0LL, 8 * Count, 0LL);
      CFIndex v16 = (const void **)CFAllocatorAllocate(0LL, 8 * Count, 0LL);
    }

    CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_1000799B8, v15, v16);
    for (uint64_t i = 0LL; i != Count; ++i)
    {
      uint64_t v18 = (const __CFString *)v15[i];
      __int128 v19 = (const __CFDictionary *)v16[i];
      if ((!CFStringGetLength(a2) || CFStringHasPrefix(v18, a2)) && CFDictionaryContainsKey(v19, @"data")) {
        CFArrayAppendValue(Mutable, v18);
      }
    }

    if (v15 != (const void **)buf)
    {
      CFAllocatorDeallocate(0LL, v15);
      CFAllocatorDeallocate(0LL, v16);
    }
  }

  *a4 = CFArrayCreateCopy(0LL, Mutable);
  CFRelease(Mutable);
  return 0LL;
}

uint64_t sub_100009894(int a1, uint64_t a2, unsigned int a3, int a4, void *a5, _DWORD *a6, int *a7)
{
  CFTypeRef cf = 0LL;
  *a5 = 0LL;
  *a6 = 0;
  CFTypeRef v12 = cf;
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v12 || CFGetTypeID(v12) != TypeID)
  {
    int v18 = 1002;
    goto LABEL_9;
  }

  uint64_t v14 = sub_1000059A4(a1);
  if (!v14)
  {
    int v18 = 2001;
    goto LABEL_9;
  }

  int v15 = sub_100009658(*(void *)(v14 + 56), (__CFString *)cf, a4 != 0, &v20);
  *a7 = v15;
  if (!v15)
  {
    CFArrayRef v16 = v20;
    int v17 = _SCSerialize(v20, 0LL, a5, &v21);
    *a6 = v21;
    CFRelease(v16);
    if (!v17)
    {
LABEL_7:
      int v18 = 1001;
LABEL_9:
      *a7 = v18;
    }
  }

  if (cf) {
    CFRelease(cf);
  }
  return 0LL;
}

uint64_t sub_1000099D8(uint64_t a1, void *a2, const void *a3)
{
  uint64_t v6 = sub_1000017F0();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_100061A24(a1, (uint64_t)a2, v6);
  }
  uint64_t v7 = sub_100009D38(a1, a2, 0LL, &cf, 1);
  if ((_DWORD)v7 == 1004)
  {
    uint64_t v8 = sub_10000A5F8(a1, a2, a3, 1);
    sub_10000921C();
  }

  else
  {
    uint64_t v8 = v7;
    if (!(_DWORD)v7)
    {
      CFRelease(cf);
      return 1005LL;
    }
  }

  return v8;
}

uint64_t sub_100009AB8(int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, _DWORD *a6, int *a7)
{
  CFTypeRef v17 = 0LL;
  CFTypeRef cf = 0LL;
  *a6 = 0;
  *a7 = 0;
  if (_SCUnserializeData(&v17, a4, a5))
  {
    if (*a7) {
      goto LABEL_13;
    }
    CFTypeRef v11 = cf;
    CFTypeID TypeID = CFStringGetTypeID();
    if (v11 && CFGetTypeID(v11) == TypeID)
    {
      uint64_t v13 = sub_1000059A4(a1);
      if (v13)
      {
        uint64_t v14 = v13;
        int v15 = sub_100006D2C(v13, (__CFString *)cf);
        if (!v15) {
          int v15 = sub_1000099D8(*(void *)(v14 + 56), (void *)cf, v17);
        }
      }

      else
      {
        int v15 = 2001;
      }
    }

    else
    {
      int v15 = 1002;
    }
  }

  else
  {
    int v15 = 1001;
  }

  *a7 = v15;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  return 0LL;
}

uint64_t sub_100009BE8(int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, _DWORD *a6, int *a7)
{
  CFTypeRef cf = 0LL;
  CFTypeRef v21 = 0LL;
  *a6 = 0;
  *a7 = 0;
  if (!_SCUnserializeData(&v21, a4, a5))
  {
    int v16 = 1001;
LABEL_12:
    *a7 = v16;
    goto LABEL_13;
  }

  if (*a7) {
    goto LABEL_13;
  }
  CFTypeRef v11 = cf;
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v11 || CFGetTypeID(v11) != TypeID)
  {
    int v16 = 1002;
    goto LABEL_12;
  }

  uint64_t v13 = sub_1000059A4(a1);
  if (!v13)
  {
    int v16 = 2001;
    goto LABEL_12;
  }

  uint64_t v14 = v13;
  int v15 = sub_100006D2C(v13, (__CFString *)cf);
  if (v15)
  {
    *a7 = v15;
  }

  else
  {
    uint64_t v18 = *(void *)(v14 + 56);
    char v19 = *(_BYTE *)(v18 + 44);
    *(_BYTE *)(v18 + 44) = 1;
    *a7 = sub_1000099D8(v18, (void *)cf, v21);
    *(_BYTE *)(v18 + 44) = v19;
  }

LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  return 0LL;
}

  if (HIDWORD(v23)) {
    IOObjectRelease(HIDWORD(v23));
  }
  return v15;
}

  uint64_t v14 = SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  kSCDynamicStoreDomainSetup,  *(CFStringRef *)a1,  kSCEntNetCommCenter);
  if (CFDictionaryContainsKey(a2, v14)) {
    int v15 = 262145;
  }
  else {
    int v15 = 0;
  }
  CFRelease(v14);
  *(_DWORD *)(a1 + 56) = v15 | v13;
  if (Value)
  {
    CFStringGetCString((CFStringRef)Value, buffer, 128LL, 0x600u);
    _SC_string_to_sockaddr(buffer, 0LL, a1 + 76, 28LL);
    CFRelease(Value);
  }

  else
  {
    *(void *)(a1 + 84) = 0LL;
    *(void *)(a1 + 76) = 0LL;
    *(_DWORD *)(a1 + 100) = 0;
    *(void *)(a1 + 92) = 0LL;
  }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController floatingDNSAgentList](self, "floatingDNSAgentList"));
    -[AgentController deleteAgentList:list:](self, "deleteAgentList:list:", v13, v32);

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController floatingDNSAgentList](self, "floatingDNSAgentList"));
    int v15 = (void *)objc_claimAutoreleasedReturnValue( -[AgentController getAgentList:agentType:agentSubType:]( self,  "getAgentList:agentType:agentSubType:",  v14,  2LL,  4LL));

    if (v4->var3 && v4->var2)
    {
      int v16 = 0LL;
      do
      {
        CFTypeRef v17 = v4->var2[v16];
        if (v17)
        {
          if (*(void *)v17)
          {
            uint64_t v18 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:"));
            if (v18)
            {
              char v19 = (void *)v18;
              CFArrayRef v20 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController floatingDNSAgentList](self, "floatingDNSAgentList"));
              CFTypeRef v21 = objc_claimAutoreleasedReturnValue([v20 objectForKey:v19]);

              if (v21)
              {
                [v15 removeObject:v19];

                char v19 = (void *)v21;
              }

              else
              {
                -[AgentController spawnFloatingAgent:entity:agentSubType:addPolicyOfType:publishData:]( self,  "spawnFloatingAgent:entity:agentSubType:addPolicyOfType:publishData:",  objc_opt_class(&OBJC_CLASS___DNSAgent),  v19,  4LL,  6LL,  0LL);
              }
            }
          }
        }

        ++v16;
      }

      while (v16 < v4->var3);
    }

    int v22 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController floatingDNSAgentList](self, "floatingDNSAgentList"));
    -[AgentController deleteAgentList:list:](self, "deleteAgentList:list:", v22, v15);

    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController floatingDNSAgentList](self, "floatingDNSAgentList"));
    int v24 = (void *)objc_claimAutoreleasedReturnValue( -[AgentController getAgentList:agentType:agentSubType:]( self,  "getAgentList:agentType:agentSubType:",  v23,  2LL,  5LL));

    if (v4->var5 && v4->var4)
    {
      __int16 v25 = 0LL;
      do
      {
        CFRange v26 = v4->var4[v25];
        if (v26)
        {
          if (*(void *)v26)
          {
            CFRange v27 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:"));
            if (v27)
            {
              CFRange v28 = (void *)v27;
              uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController floatingDNSAgentList](self, "floatingDNSAgentList"));
              uint64_t v30 = objc_claimAutoreleasedReturnValue([v29 objectForKey:v28]);

              if (v30)
              {
                [v24 removeObject:v28];

                CFRange v28 = (void *)v30;
              }

              else
              {
                -[AgentController spawnFloatingAgent:entity:agentSubType:addPolicyOfType:publishData:]( self,  "spawnFloatingAgent:entity:agentSubType:addPolicyOfType:publishData:",  objc_opt_class(&OBJC_CLASS___DNSAgent),  v28,  5LL,  6LL,  0LL);
              }
            }
          }
        }

        ++v25;
      }

      while (v25 < v4->var5);
    }

    CFIndex v31 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController floatingDNSAgentList](self, "floatingDNSAgentList"));
    -[AgentController deleteAgentList:list:](self, "deleteAgentList:list:", v31, v24);
  }

  -[AgentController freeResolverList:](self, "freeResolverList:", v4);
}

uint64_t sub_100009D38(uint64_t a1, void *key, void *a3, const void **a4, int a5)
{
  if (!a3)
  {
    CFRange v10 = sub_1000017F0();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v15 = "*copy  ";
      int v16 = *(_DWORD *)(a1 + 40);
      int v17 = 136315650;
      if (!a5) {
        int v15 = "copy   ";
      }
      uint64_t v18 = v15;
      __int16 v19 = 1024;
      int v20 = v16;
      __int16 v21 = 2112;
      int v22 = key;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s : %5u : %@", (uint8_t *)&v17, 0x1Cu);
    }
  }

  CFTypeRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000799B8, key);
  if (!Value) {
    return 1004LL;
  }
  CFTypeRef v12 = Value;
  if (!CFDictionaryGetValueIfPresent(Value, @"data", a4)) {
    return 1004LL;
  }
  CFRetain(*a4);
  if (!a3) {
    return 0LL;
  }
  uint64_t v13 = CFDictionaryGetValue(v12, @"access-controls");
  uint64_t result = 0LL;
  *a3 = v13;
  return result;
}

uint64_t sub_100009E94(int a1, uint64_t a2, unsigned int a3, void *a4, _DWORD *a5, _DWORD *a6, int *a7)
{
  CFTypeRef cf = 0LL;
  *a4 = 0LL;
  *a5 = 0;
  *a6 = 0;
  if (_SCUnserializeString(&cf, 0LL, a2, a3))
  {
    CFTypeRef v11 = cf;
    CFTypeID TypeID = CFStringGetTypeID();
    if (v11 && CFGetTypeID(v11) == TypeID)
    {
      uint64_t v13 = sub_1000059A4(a1);
      if (v13)
      {
        uint64_t v14 = v13;
        int v15 = sub_1000066BC(v13, (void *)cf, 0LL);
        int v16 = v15;
        if (v15 == 10100 || !v15)
        {
          int v17 = sub_100009D38(*(void *)(v14 + 56), (void *)cf, 0LL, &v21, 0);
          *a7 = v17;
          if (v17) {
            goto LABEL_14;
          }
          int v18 = _SCSerializeData(v21, a4, &v22);
          __int16 v19 = v21;
          *a5 = v22;
          CFRelease(v19);
          if (!v18) {
            int v16 = 1001;
          }
        }
      }

      else
      {
        int v16 = 2001;
      }
    }

    else
    {
      int v16 = 1002;
    }
  }

  else
  {
    int v16 = 1001;
  }

  *a7 = v16;
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  return 0LL;
}

uint64_t sub_100009FF4( int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, void *a6, _DWORD *a7, int *a8)
{
  CFTypeRef v32 = 0LL;
  CFTypeRef cf = 0LL;
  *a6 = 0LL;
  *a7 = 0;
  *a8 = 0;
  if (a2 && a3 && !_SCUnserialize(&cf, 0LL, a2, a3))
  {
    *a8 = 1001;
    if (!a4) {
      goto LABEL_7;
    }
  }

  else if (!a4)
  {
    goto LABEL_7;
  }

  if (a5 && !_SCUnserialize(&v32, 0LL, a4, a5))
  {
    uint64_t v14 = 0LL;
    goto LABEL_28;
  }

LABEL_32:
  if (cf) {
    CFRelease(cf);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v14) {
    CFRelease(v14);
  }
  return 0LL;
}

void sub_10000A31C(void *a1, const __CFDictionary *a2, uint64_t a3)
{
  int v5 = sub_1000066BC(*(void *)a3, a1, a2);
  if (v5 == 10100 || v5 == 0)
  {
    uint64_t v7 = sub_1000017F0();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_100061AD4();
    }
  }

  else
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 8), a1);
  }

void sub_10000A3F4(void *a1, uint64_t a2)
{
  uint64_t v8 = 0LL;
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1
    && CFGetTypeID(a1) == TypeID
    && !sub_100009D38(*(void *)(a2 + 8), a1, &v8, (const void **)&value, 1))
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 16), a1, value);
    CFRelease(value);
    int v5 = v8;
    if (v8)
    {
      CFMutableArrayRef Mutable = *(__CFDictionary **)a2;
      if (!*(void *)a2)
      {
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        *(void *)a2 = Mutable;
        int v5 = v8;
      }

      CFDictionarySetValue(Mutable, a1, v5);
    }

    else
    {
      uint64_t v7 = sub_1000017F0();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
        sub_100061B44();
      }
    }
  }

void sub_10000A50C(__CFString *a1, uint64_t *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID && !sub_100009658(a2[1], a1, 1, &theArray))
  {
    int v5 = theArray;
    v7.length = CFArrayGetCount(theArray);
    v7.location = 0LL;
    CFArrayApplyFunction(v5, v7, (CFArrayApplierFunction)sub_10000A3F4, a2);
    CFRelease(theArray);
  }

void sub_10000A5CC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

uint64_t sub_10000A5F8(uint64_t a1, void *a2, const void *a3, int a4)
{
  uint64_t v8 = sub_1000017F0();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    __int16 v23 = "*set ";
    int v24 = *(unsigned __int8 *)(a1 + 44);
    int v25 = *(_DWORD *)(a1 + 40);
    if (!a4) {
      __int16 v23 = "set  ";
    }
    *(void *)&value[4] = v23;
    __int16 v28 = 2080;
    int v26 = "  ";
    *(_DWORD *)value = 136315906;
    if (v24) {
      int v26 = "t ";
    }
    int v29 = v26;
    __int16 v30 = 1024;
    int v31 = v25;
    __int16 v32 = 2112;
    uint64_t v33 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s%s : %5u : %@", value, 0x26u);
  }

  CFArrayRef v9 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000799B8, a2);
  if (v9) {
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, v9);
  }
  else {
    MutableCFArrayRef Copy = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  CFTypeRef v11 = MutableCopy;
  int v12 = CFDictionaryContainsKey(MutableCopy, @"data");
  CFDictionarySetValue(v11, @"data", a3);
  CFStringRef v13 = CFStringCreateWithFormat(0LL, 0LL, @"%u", *(unsigned int *)(a1 + 40));
  CFStringRef v14 = v13;
  if (*(_BYTE *)(a1 + 44))
  {
    if (v12)
    {
      CFTypeRef v15 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000799B8, a2);
      if (!CFDictionaryGetValueIfPresent(v15, @"session", (const void **)value)
        || !CFEqual(v14, *(CFTypeRef *)value))
      {
        CFRelease(v14);
        CFRelease(v11);
        uint64_t v16 = 1005LL;
        if (!a4) {
          goto LABEL_28;
        }
        return v16;
      }

LABEL_21:
      CFRelease(v14);
      CFDictionarySetValue((CFMutableDictionaryRef)qword_1000799B8, a2, v11);
      CFRelease(v11);
      if (v12) {
        goto LABEL_27;
      }
      goto LABEL_24;
    }

    uint64_t v18 = sub_1000059A4(*(_DWORD *)(a1 + 40));
    uint64_t v19 = v18;
    uint64_t v20 = *(const __CFArray **)(v18 + 48);
    if (!v20) {
      goto LABEL_18;
    }
    v34.length = CFArrayGetCount(*(CFArrayRef *)(v18 + 48));
    v34.location = 0LL;
    if (CFArrayContainsValue(v20, v34, a2))
    {
LABEL_20:
      CFDictionarySetValue(v11, @"session", v14);
      goto LABEL_21;
    }

    CFMutableArrayRef Mutable = *(__CFArray **)(v19 + 48);
    if (!Mutable)
    {
LABEL_18:
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      *(void *)(v19 + 48) = Mutable;
    }

    CFArrayAppendValue(Mutable, a2);
    goto LABEL_20;
  }

  if (v12)
  {
    if (CFDictionaryGetValueIfPresent(v11, @"session", (const void **)value)
      && !CFEqual(v14, *(CFTypeRef *)value))
    {
      CFDictionaryRemoveValue(v11, @"session");
      CFStringRef v17 = CFStringCreateWithFormat(0LL, 0LL, @"%@:%@", *(void *)value, a2);
      CFSetAddValue((CFMutableSetRef)qword_1000799D8, v17);
      CFRelease(v17);
    }

    goto LABEL_21;
  }

  CFRelease(v13);
  CFDictionarySetValue((CFMutableDictionaryRef)qword_1000799B8, a2, v11);
  CFRelease(v11);
LABEL_24:
  if (CFSetContainsValue((CFSetRef)qword_1000799D0, a2)) {
    CFSetRemoveValue((CFMutableSetRef)qword_1000799D0, a2);
  }
  else {
    sub_100008360(a2);
  }
LABEL_27:
  CFSetAddValue((CFMutableSetRef)qword_1000799C8, a2);
  uint64_t v16 = 0LL;
  if (!a4) {
LABEL_28:
  }
    sub_10000921C();
  return v16;
}

    __int16 v23 = CFNumberCreate(0LL, kCFNumberSInt32Type, (char *)&v33 + 4);
    CFDictionarySetValue(context[6], v14, v23);
    CFRelease(v23);
LABEL_22:
    sub_10002B3F8(v14);
    sub_10002B530(v14);
    if (qword_100079C48 && qword_100079C50) {
      dispatch_async((dispatch_queue_t)qword_100079C48, (dispatch_block_t)qword_100079C50);
    }
    CFRelease(v14);
    goto LABEL_26;
  }

  if (v11)
  {
    context[6] = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFStringRef v14 = (__CFString *)CFStringCreateWithCString(0LL, v8, 0x8000100u);
    goto LABEL_21;
  }

      CFRelease(v17);
      sub_100054240((int)v24);
      if ((_DWORD)v24)
      {
        if (v19)
        {
          sub_1000545E0((const __CFDate *)v19);
LABEL_31:
          int v29 = v19;
          goto LABEL_69;
        }
      }

      else
      {
        sub_1000544A8();
        if (v19) {
          goto LABEL_31;
        }
      }

      goto LABEL_70;
    }

uint64_t sub_10000A980( int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, _DWORD *a7, int *a8)
{
  CFTypeRef cf = 0LL;
  CFTypeRef v19 = 0LL;
  *a7 = 0;
  *a8 = 0;
  if (_SCUnserializeData(&v19, a4, a5))
  {
    if (*a8) {
      goto LABEL_13;
    }
    CFTypeRef v12 = cf;
    CFTypeID TypeID = CFStringGetTypeID();
    if (v12 && CFGetTypeID(v12) == TypeID)
    {
      uint64_t v14 = sub_1000059A4(a1);
      if (v14)
      {
        uint64_t v15 = v14;
        int v16 = sub_100006D2C(v14, (__CFString *)cf);
        if (!v16) {
          int v16 = sub_10000A5F8(*(void *)(v15 + 56), (void *)cf, v19, 0);
        }
      }

      else
      {
        int v16 = 2001;
      }
    }

    else
    {
      int v16 = 1002;
    }
  }

  else
  {
    int v16 = 1001;
  }

  *a8 = v16;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  return 0LL;
}

uint64_t sub_10000AAB4(_DWORD *a1, const __CFDictionary *a2, const __CFArray *a3, const __CFArray *a4)
{
  uint64_t v8 = sub_1000017F0();
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  int v10 = a1[10];
  if (!a2)
  {
    CFIndex Count = 0LL;
    if (a3) {
      goto LABEL_11;
    }
LABEL_14:
    CFIndex v12 = 0LL;
    if (a4) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }

  CFIndex Count = CFDictionaryGetCount(a2);
  if (!a3) {
    goto LABEL_14;
  }
LABEL_11:
  CFIndex v12 = CFArrayGetCount(a3);
  if (a4)
  {
LABEL_12:
    CFIndex v13 = CFArrayGetCount(a4);
    goto LABEL_16;
  }

CFTypeID sub_10000AC48(void *a1, const void *a2, uint64_t a3)
{
  CFTypeID result = CFStringGetTypeID();
  if (a1)
  {
    CFTypeID v7 = result;
    CFTypeID result = CFGetTypeID(a1);
    if (result == v7)
    {
      CFTypeID result = CFDataGetTypeID();
      if (a2)
      {
        CFTypeID v8 = result;
        CFTypeID result = CFGetTypeID(a2);
        if (result == v8) {
          return sub_10000A5F8(a3, a1, a2, 1);
        }
      }
    }
  }

  return result;
}

CFTypeID sub_10000AD1C(const void *a1, uint64_t a2)
{
  CFTypeID result = CFStringGetTypeID();
  if (a1)
  {
    CFTypeID v5 = result;
    CFTypeID result = CFGetTypeID(a1);
    if (result == v5) {
      return sub_10000B190(a2, a1, 1);
    }
  }

  return result;
}

CFTypeID sub_10000ADCC(void *a1, uint64_t a2)
{
  CFTypeID result = CFStringGetTypeID();
  if (a1)
  {
    CFTypeID v5 = result;
    CFTypeID result = CFGetTypeID(a1);
    if (result == v5) {
      return sub_10000B48C(a2, a1, 1);
    }
  }

  return result;
}

uint64_t sub_10000AE7C( int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, int *a8)
{
  CFTypeRef v41 = 0LL;
  CFDictionaryRef theDict = 0LL;
  CFTypeRef cf = 0LL;
  *a8 = 0;
  if (a2 && a3 && !_SCUnserialize(&theDict, 0LL, a2, a3))
  {
    *a8 = 1001;
    if (!a4) {
      goto LABEL_7;
    }
  }

  else if (!a4)
  {
    goto LABEL_7;
  }

  if (a5 && !_SCUnserialize(&cf, 0LL, a4, a5))
  {
    *a8 = 1001;
    if (!a6) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }

LABEL_10:
  if (*a8) {
    goto LABEL_28;
  }
  CFDictionaryRef v14 = theDict;
  if (theDict && (CFTypeID TypeID = CFDictionaryGetTypeID(), CFGetTypeID(v14) != TypeID)
    || (CFTypeRef v16 = cf) != 0LL && (v17 = CFArrayGetTypeID(), CFGetTypeID(v16) != v17)
    || (CFTypeRef v18 = v41) != 0LL && (v19 = CFArrayGetTypeID(), CFGetTypeID(v18) != v19))
  {
    int v25 = 1002;
LABEL_27:
    *a8 = v25;
    goto LABEL_28;
  }

  uint64_t v20 = sub_1000059A4(a1);
  if (!v20)
  {
    int v25 = 2001;
    goto LABEL_27;
  }

  uint64_t v21 = v20;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    uint64_t v23 = Count;
    if (Count < 33)
    {
      int v24 = (const void **)keys;
      CFDictionaryGetKeysAndValues(theDict, (const void **)keys, 0LL);
      if (v23 < 1) {
        goto LABEL_47;
      }
    }

    else
    {
      int v24 = (const void **)CFAllocatorAllocate(0LL, 8 * Count, 0LL);
      CFDictionaryGetKeysAndValues(theDict, v24, 0LL);
    }

    uint64_t v27 = 0LL;
    do
    {
      int v28 = sub_100006D2C(v21, (__CFString *)v24[v27]);
      if (v28) {
        BOOL v29 = 1;
      }
      else {
        BOOL v29 = v23 - 1 == v27;
      }
      ++v27;
    }

    while (!v29);
    int v30 = v28;
    if (v30)
    {
      *a8 = v30;
      goto LABEL_28;
    }
  }

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

    __int16 v15 = sub_10000E124();
    CFTypeRef v16 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v15, v16))
    {
      CFTypeID v17 = _os_log_pack_size(22LL);
      CFTypeRef v18 = (char *)&v21 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFTypeID v19 = __error();
      uint64_t v20 = _os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "Update interface configuration: %@: %@");
      *(_DWORD *)uint64_t v20 = 138412546;
      *(void *)(v20 + 4) = key;
      *(_WORD *)(v20 + 12) = 2112;
      *(void *)(v20 + 14) = a2;
      __SC_log_send(7LL, v15, v16, v18);
    }

    CFTypeID result = SCDynamicStoreSetValue((SCDynamicStoreRef)qword_1000799F8, key, a2);
    goto LABEL_13;
  }

  CFTypeID result = CFDictionaryGetCount((CFDictionaryRef)a2);
  if (result > 0) {
    goto LABEL_10;
  }
LABEL_13:
  byte_1000799F0 = 1;
  return result;
}

  if (!v9)
  {
LABEL_11:
    CFArrayRef v9 = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceUnit");
    CFRetain(v9);
    uint64_t v20 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      uint64_t v20 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v20;
    }

    uint64_t v21 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v20, v21))
    {
      CFRange v22 = _os_log_pack_size(12LL);
      uint64_t v23 = (char *)&v117 - ((__chkstk_darwin(v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v24 = __error();
      int v25 = _os_log_pack_fill( v23,  v22,  *v24,  &_mh_execute_header,  "Interface assigned unit %@ (updating database w/new interface)");
      *(_DWORD *)int v25 = 138412290;
      *(void *)(v25 + 4) = v9;
      __SC_log_send(6LL, v20, v21, v23);
    }
  }

  int v26 = (const __CFArray *)qword_100079B40;
  if (qword_100079B40)
  {
    v127.length = CFArrayGetCount((CFArrayRef)qword_100079B40);
    v127.location = 0LL;
    CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v26, v127, ValueAtIndex);
    if (FirstIndexOfValue != -1) {
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_100079B40, FirstIndexOfValue);
    }
  }

  int v10 = 1;
LABEL_19:
  int v28 = 2;
  while (1)
  {
    if (v28 != 2) {
      usleep(0xC350u);
    }
    BOOL v29 = sub_10001CE20(a1, v10, v9);
    int v30 = v29;
    if (v29) {
      break;
    }
    CFIndex v32 = v28-- != 0;
    if (!v10 || !v32)
    {
      if (v10) {
        sub_10001C7C0(a1, v9);
      }
      goto LABEL_36;
    }
  }

  IOInterfaceUnit = (const void *)_SCNetworkInterfaceGetIOInterfaceUnit(v29);
  if (!_SCNetworkInterfaceIsEphemeral(v30) && !CFEqual(v9, IOInterfaceUnit))
  {
    CFRange v34 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      CFRange v34 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v34;
    }

    int v35 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v34, v35))
    {
      CFIndex v36 = _os_log_pack_size(32LL);
      CFIndex v37 = (char *)&v117 - ((__chkstk_darwin(v36) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFIndex v38 = __error();
      os_log_t v39 = _os_log_pack_fill( v37,  v36,  *v38,  &_mh_execute_header,  "interface prefix %@ assigned unit %@ instead of %@");
      *(_DWORD *)os_log_t v39 = 138412802;
      *(void *)(v39 + 4) = IOInterfaceNamePrefix;
      *(_WORD *)(v39 + 12) = 2112;
      *(void *)(v39 + 14) = IOInterfaceUnit;
      *(_WORD *)(v39 + 22) = 2112;
      *(void *)(v39 + 24) = v9;
      __SC_log_send(6LL, v34, v35, v37);
    }
  }

  CFIndex v12 = (const __CFDictionary *)sub_10002E790(key, kSCEntNetIPv4);
  if (v12)
  {
    CFIndex v13 = sub_10002E66C(v12);
    if (v13)
    {
      int v10 = v13;
      goto LABEL_15;
    }
  }

  CFDictionaryRef v14 = kSCEntNetIPv6;
  __int16 v15 = (const __CFDictionary *)sub_10002E790(key, kSCEntNetIPv6);
  if (v15)
  {
    int v10 = sub_10002E66C(v15);
    if (!v10) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  int v10 = 0LL;
LABEL_16:
  sub_10003BFCC(key, v8);
  CFTypeRef v16 = sub_10003879C(key, v14, v8);
  CFTypeID v17 = v16;
  if (v10)
  {
    if ((_DWORD)v16)
    {
      BOOLean = 0LL;
      if (v11)
      {
        CFTypeRef v18 = 2;
      }

      else
      {
        CFTypeRef v18 = 1;
        if (a2)
        {
          if (CFDictionaryGetValueIfPresent(a2, kSCPropNetIPv6PerformPLATDiscovery, (const void **)&BOOLean))
          {
            CFTypeID v19 = BOOLean;
            CFTypeID TypeID = CFBooleanGetTypeID();
            if (v19)
            {
              if (CFGetTypeID(v19) == TypeID && CFBooleanGetValue(BOOLean)) {
                CFTypeRef v18 = 0;
              }
            }
          }
        }
      }

      sub_100034D5C(v18, v10);
    }

    CFRelease(v10);
  }

  if (v11) {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_100079D28, key);
  }
  else {
    CFRelease(v8);
  }
  return v17;
}

LABEL_47:
  if (cf && (CFIndex v31 = CFArrayGetCount((CFArrayRef)cf), v31 >= 1))
  {
    CFIndex v32 = v31;
    CFIndex v33 = 0LL;
    while (1)
    {
      ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf, v33);
      int v35 = sub_100006D2C(v21, ValueAtIndex);
      if (v35) {
        break;
      }
      if (v32 == ++v33) {
        goto LABEL_52;
      }
    }
  }

  else
  {
LABEL_52:
    if (!v41 || (CFIndex v36 = CFArrayGetCount((CFArrayRef)v41), v36 < 1))
    {
LABEL_57:
      sub_10000AAB4(*(_DWORD **)(v21 + 56), theDict, (const __CFArray *)cf, (const __CFArray *)v41);
      *a8 = 0;
      goto LABEL_28;
    }

    CFIndex v37 = v36;
    CFIndex v38 = 0LL;
    while (1)
    {
      os_log_t v39 = (__CFString *)CFArrayGetValueAtIndex((CFArrayRef)v41, v38);
      int v35 = sub_100006D2C(v21, v39);
      if (v35) {
        break;
      }
      if (v37 == ++v38) {
        goto LABEL_57;
      }
    }
  }

  *a8 = v35;
LABEL_28:
  if (theDict) {
    CFRelease(theDict);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v41) {
    CFRelease(v41);
  }
  return 0LL;
}

    uint64_t v75 = 0;
LABEL_48:
    CFTypeRef Value = (const __CFArray *)CFDictionaryGetValue(v10, v7);
    if (Value) {
      MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0LL, 0LL, Value);
    }
    else {
      MutableCFArrayRef Copy = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    }
    os_log_t v39 = MutableCopy;
    uint64_t v6 = v71;
    uint64_t v40 = CFNumberCreate(0LL, kCFNumberIntType, &v75);
    CFArrayAppendValue(v39, v40);
    CFRelease(v40);
    CFDictionarySetValue(v10, v7, v39);
    CFRelease(v39);
    uint64_t v75 = v77[0];
    CFTypeRef v41 = (const __CFArray *)CFDictionaryGetValue(v10, v72);
    a2 = v69;
    if (v41) {
      uint64_t v42 = CFArrayCreateMutableCopy(0LL, 0LL, v41);
    }
    else {
      uint64_t v42 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    }
    unsigned int v43 = v42;
    uint64_t v44 = CFNumberCreate(0LL, kCFNumberIntType, &v75);
    CFArrayAppendValue(v43, v44);
    CFRelease(v44);
    CFDictionarySetValue(v10, v72, v43);
    CFRelease(v43);
    if ((a1->ifa_flags & 0x10) == 0) {
      goto LABEL_66;
    }
    ifa_dstaddr = (uint64_t)a1->ifa_dstaddr;
    if (!ifa_dstaddr) {
      goto LABEL_66;
    }
    v46 = *(unsigned __int8 *)(ifa_dstaddr + 8);
    if (v46 == 255)
    {
      uint64_t v47 = *(_BYTE *)(ifa_dstaddr + 9);
      if ((v47 & 0xF0) != 0x30 && (v47 & 0xF) == 2)
      {
LABEL_62:
        v48 = *(unsigned __int16 *)(ifa_dstaddr + 10);
        if (*(_WORD *)(ifa_dstaddr + 10))
        {
          *(_WORD *)(ifa_dstaddr + 10) = 0;
          if (!*(_DWORD *)(ifa_dstaddr + 24)) {
            *(_DWORD *)(ifa_dstaddr + 24) = __rev16(v48);
          }
        }
      }
    }

    else if (v46 == 254 && (*(_BYTE *)(ifa_dstaddr + 9) & 0xC0) == 0x80)
    {
      goto LABEL_62;
    }

    sub_100013E6C(v10, v62, ifa_dstaddr);
LABEL_66:
    CFDictionarySetValue(v73, NetworkInterfaceEntity, v10);
    CFRelease(v10);
    CFRelease(NetworkInterfaceEntity);
LABEL_67:
    a1 = a1->ifa_next;
  }

  while (a1);
  if (a2)
  {
LABEL_69:
    if (!v64)
    {
      uint64_t v49 = CFStringCreateWithCString(0LL, a2, 0);
      unsigned int v50 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0LL, kSCDynamicStoreDomainState, v49, kSCEntNetIPv6);
      CFRelease(v49);
      uint64_t v51 = v73;
      v52 = sub_100013CFC(v50, Mutable, v73);
      CFDictionarySetValue(v51, v50, v52);
      CFRelease(v52);
      CFRelease(v50);
    }
  }

            sub_10002288C(v30, v32);
            LODWORD(value) = v55;
            int v35 = (const __CFArray *)CFDictionaryGetValue(v30, kSCPropNetDNSSupplementalMatchDomains);
            CFIndex v36 = CFArrayGetTypeID();
            if (v35)
            {
              if (CFGetTypeID(v35) == v36)
              {
                v56 = CFArrayGetCount(v35);
                if (v56)
                {
                  CFTypeRef cf = (const __CFArray *)CFDictionaryGetValue(v30, kSCPropNetDNSSupplementalMatchOrders);
                  if (!cf || (CFIndex v37 = CFArrayGetTypeID(), CFGetTypeID(cf) == v37) && v56 == CFArrayGetCount(cf))
                  {
                    CFIndex v38 = (const __CFArray *)CFDictionaryGetValue(v30, kSCPropNetDNSServerAddresses);
                    os_log_t v39 = CFArrayGetTypeID();
                    if (v38)
                    {
                      if (CFGetTypeID(v38) == v39)
                      {
                        uint64_t v40 = CFArrayGetCount(v38);
                        if (v56 >= 1)
                        {
                          if (v40)
                          {
                            CFTypeRef v41 = 0LL;
                            theDicta = v30;
                            while (2)
                            {
                              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v35, v41);
                              unsigned int v43 = CFStringGetTypeID();
                              if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v43) {
                                goto LABEL_71;
                              }
                              uint64_t v44 = CFDictionaryCreateMutableCopy(0LL, 0LL, theDicta);
                              if (CFStringGetLength(ValueAtIndex) < 1) {
                                CFDictionaryRemoveValue(v44, kSCPropNetDNSDomainName);
                              }
                              else {
                                CFDictionarySetValue(v44, kSCPropNetDNSDomainName, ValueAtIndex);
                              }
                              if (cf)
                              {
                                uint64_t v45 = CFArrayGetValueAtIndex(cf, v41);
                                v46 = CFNumberGetTypeID();
                                if (v45 && CFGetTypeID(v45) == v46)
                                {
                                  CFDictionarySetValue(v44, kSCPropNetDNSSearchOrder, v45);
                                  goto LABEL_70;
                                }
                              }

                              else
                              {
                                CFNumberGetTypeID();
                              }

                              if (!CFDictionaryContainsKey(v44, kSCPropNetDNSSearchOrder))
                              {
                                uint64_t v47 = CFNumberCreate(0LL, kCFNumberIntType, &value);
                                CFDictionarySetValue(v44, kSCPropNetDNSSearchOrder, v47);
                                CFRelease(v47);
                                LODWORD(value) = (_DWORD)value + 1;
                              }

      v56 = 0;
LABEL_48:
      if (available) {
        CFRelease(available);
      }
      if (current) {
        CFRelease(current);
      }
      if ((v56 & 1) == 0) {
        CFRelease(v7);
      }
      return;
    }

    CFTypeRef v41 = (os_log_t)qword_100079F10;
    if (!qword_100079F10)
    {
      CFTypeRef v41 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_100079F10 = (uint64_t)v41;
    }

    uint64_t v42 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v41, v42))
    {
      unsigned int v43 = _os_log_pack_size(12LL);
      uint64_t v44 = (char *)&current - ((__chkstk_darwin(v43) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v45 = __error();
      v46 = _os_log_pack_fill(v44, v43, *v45, &_mh_execute_header, "no media options for %@");
      *(_DWORD *)v46 = 138412290;
      *(void *)(v46 + 4) = v6;
      __SC_log_send(6LL, v41, v42, v44);
    }
  }

  else
  {
    int v35 = (os_log_t)qword_100079F10;
    if (!qword_100079F10)
    {
      int v35 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_100079F10 = (uint64_t)v35;
    }

    CFIndex v36 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v35, v36))
    {
      CFIndex v37 = _os_log_pack_size(12LL);
      CFIndex v38 = (char *)&current - ((__chkstk_darwin(v37) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v39 = __error();
      uint64_t v40 = _os_log_pack_fill(v38, v37, *v39, &_mh_execute_header, "no BSD interface name for %@");
      *(_DWORD *)uint64_t v40 = 138412290;
      *(void *)(v40 + 4) = a1;
      __SC_log_send(6LL, v35, v36, v38);
    }

    _SCErrorSet(1002LL);
  }

uint64_t sub_10000B190(uint64_t a1, const void *a2, int a3)
{
  uint64_t v6 = sub_1000017F0();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v14 = "*remove";
    int v15 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buuint64_t f = 136315650;
    if (!a3) {
      CFDictionaryRef v14 = "remove ";
    }
    CFTypeID v17 = v14;
    __int16 v18 = 1024;
    int v19 = v15;
    __int16 v20 = 2112;
    uint64_t v21 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s : %5u : %@", buf, 0x1Cu);
  }

  CFTypeRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000799B8, a2);
  if (!Value) {
    return 1004LL;
  }
  CFTypeID v8 = Value;
  if (!CFDictionaryContainsKey(Value, @"data")) {
    return 1004LL;
  }
  MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, v8);
  CFSetAddValue((CFMutableSetRef)qword_1000799C8, a2);
  CFSetAddValue((CFMutableSetRef)qword_1000799D0, a2);
  int v10 = CFDictionaryGetValue(MutableCopy, @"session");
  if (v10)
  {
    CFTypeRef v11 = v10;
    CFDictionaryRemoveValue(MutableCopy, @"session");
    CFStringRef v12 = CFStringCreateWithFormat(0LL, 0LL, @"%@:%@", v11, a2);
    CFSetAddValue((CFMutableSetRef)qword_1000799D8, v12);
    CFRelease(v12);
  }

  CFDictionaryRemoveValue(MutableCopy, @"data");
  if (CFDictionaryGetCount(MutableCopy) < 1) {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1000799B8, a2);
  }
  else {
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1000799B8, a2, MutableCopy);
  }
  CFRelease(MutableCopy);
  if (!a3) {
    sub_10000921C();
  }
  return 0LL;
}

uint64_t sub_10000B398(int a1, uint64_t a2, unsigned int a3, int *a4)
{
  CFTypeRef cf = 0LL;
  if (_SCUnserializeString(&cf, 0LL, a2, a3))
  {
    CFTypeRef v6 = cf;
    CFTypeID TypeID = CFStringGetTypeID();
    if (v6 && CFGetTypeID(v6) == TypeID)
    {
      uint64_t v8 = sub_1000059A4(a1);
      if (v8)
      {
        uint64_t v9 = v8;
        int v10 = sub_100006D2C(v8, (__CFString *)cf);
        if (!v10) {
          int v10 = sub_10000B190(*(void *)(v9 + 56), cf, 0);
        }
      }

      else
      {
        int v10 = 2001;
      }
    }

    else
    {
      int v10 = 1002;
    }
  }

  else
  {
    int v10 = 1001;
  }

  *a4 = v10;
  if (cf) {
    CFRelease(cf);
  }
  return 0LL;
}

uint64_t sub_10000B48C(uint64_t a1, void *a2, int a3)
{
  CFTypeRef v6 = sub_1000017F0();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = "*notify";
    int v10 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)CFTypeRef cf = 136315650;
    if (!a3) {
      uint64_t v9 = "notify ";
    }
    *(void *)&cf[4] = v9;
    __int16 v12 = 1024;
    int v13 = v10;
    __int16 v14 = 2112;
    int v15 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s : %5u : %@", cf, 0x1Cu);
  }

  CFTypeRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_1000799B8, a2);
  if (Value && CFDictionaryGetValueIfPresent(Value, @"data", (const void **)cf))
  {
    sub_10000A5F8(a1, a2, *(const void **)cf, 1);
    if (!a3) {
      goto LABEL_7;
    }
  }

  else
  {
    _SCSerialize(kCFBooleanTrue, cf, 0LL, 0LL);
    sub_10000A5F8(a1, a2, *(const void **)cf, 1);
    sub_10000B190(a1, a2, 1);
    CFRelease(*(CFTypeRef *)cf);
    if (!a3) {
LABEL_7:
    }
      sub_10000921C();
  }

  return 0LL;
}

uint64_t sub_10000B608(int a1, uint64_t a2, unsigned int a3, int *a4)
{
  CFTypeRef cf = 0LL;
  if (_SCUnserializeString(&cf, 0LL, a2, a3))
  {
    CFTypeRef v6 = cf;
    CFTypeID TypeID = CFStringGetTypeID();
    if (v6 && CFGetTypeID(v6) == TypeID)
    {
      uint64_t v8 = sub_1000059A4(a1);
      if (v8)
      {
        uint64_t v9 = v8;
        int v10 = sub_100006D2C(v8, (__CFString *)cf);
        if (!v10)
        {
          sub_10000B48C(*(void *)(v9 + 56), (void *)cf, 0);
          int v10 = 0;
        }
      }

      else
      {
        int v10 = 2001;
      }
    }

    else
    {
      int v10 = 1002;
    }
  }

  else
  {
    int v10 = 1001;
  }

  *a4 = v10;
  if (cf) {
    CFRelease(cf);
  }
  return 0LL;
}

uint64_t sub_10000B700(void *a1, __CFString *a2, int a3, int a4)
{
  uint64_t v8 = sub_1000017F0();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v15 = "*watch+";
    int v16 = *((_DWORD *)a1 + 10);
    if (!a4) {
      int v15 = "watch+ ";
    }
    int v18 = 136315906;
    int v19 = v15;
    __int16 v20 = 1024;
    int v21 = v16;
    if (a3) {
      CFTypeID v17 = "pattern";
    }
    else {
      CFTypeID v17 = "key";
    }
    __int16 v22 = 2080;
    uint64_t v23 = v17;
    __int16 v24 = 2112;
    int v25 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s : %5u : %s : %@", (uint8_t *)&v18, 0x26u);
  }

  CFNumberRef v9 = CFNumberCreate(0LL, kCFNumberIntType, a1 + 5);
  if (a3)
  {
    CFTypeRef v11 = (const __CFArray *)a1[22];
    int v10 = (__CFArray **)(a1 + 22);
    uint64_t v12 = sub_10000B894(v11, a2);
    if ((_DWORD)v12) {
      goto LABEL_9;
    }
    if (!sub_1000080EC(a2, v9))
    {
      uint64_t v12 = 1002LL;
      goto LABEL_9;
    }
  }

  else
  {
    int v13 = (const __CFArray *)a1[21];
    int v10 = (__CFArray **)(a1 + 21);
    uint64_t v12 = sub_10000B894(v13, a2);
    if ((_DWORD)v12) {
      goto LABEL_9;
    }
    sub_100002B1C(v9, a2);
  }

  sub_10000B914(v10, a2);
  uint64_t v12 = 0LL;
LABEL_9:
  if (v9) {
    CFRelease(v9);
  }
  return v12;
}

uint64_t sub_10000B894(const __CFArray *a1, const void *a2)
{
  if (a1 && (v5.length = CFArrayGetCount(a1), v5.location = 0LL, CFArrayContainsValue(a1, v5, a2))) {
    return 1005LL;
  }
  else {
    return 0LL;
  }
}

void sub_10000B914(__CFArray **a1, void *value)
{
  CFMutableArrayRef Mutable = *a1;
  if (!Mutable)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    *a1 = Mutable;
  }

  CFArrayAppendValue(Mutable, value);
}

uint64_t sub_10000B988(int a1, uint64_t a2, unsigned int a3, int a4, int *a5)
{
  CFTypeRef cf = 0LL;
  if (_SCUnserializeString(&cf, 0LL, a2, a3))
  {
    CFTypeRef v8 = cf;
    CFTypeID TypeID = CFStringGetTypeID();
    if (v8 && CFGetTypeID(v8) == TypeID)
    {
      uint64_t v10 = sub_1000059A4(a1);
      if (v10) {
        int v11 = sub_10000B700(*(void **)(v10 + 56), (__CFString *)cf, a4 != 0, 0);
      }
      else {
        int v11 = 2001;
      }
    }

    else
    {
      int v11 = 1002;
    }
  }

  else
  {
    int v11 = 1001;
  }

  *a5 = v11;
  if (cf) {
    CFRelease(cf);
  }
  return 0LL;
}

uint64_t sub_10000BA80(uint64_t a1, const __CFArray *a2, const __CFArray *a3)
{
  CFTypeRef v6 = sub_1000017F0();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v16 = *(_DWORD *)(a1 + 40);
    if (a2)
    {
      CFIndex Count = CFArrayGetCount(a2);
      if (a3) {
        goto LABEL_17;
      }
    }

    else
    {
      CFIndex Count = 0LL;
      if (a3)
      {
LABEL_17:
        CFIndex v18 = CFArrayGetCount(a3);
LABEL_20:
        LODWORD(v19) = 67109632;
        HIDWORD(v19) = v16;
        *(_WORD *)CFTypeRef cf = 2048;
        *(void *)&cf[2] = Count;
        *(_WORD *)&cf[10] = 2048;
        *(void *)&_BYTE cf[12] = v18;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "watch   : %5u : %ld keys, %ld patterns",  (uint8_t *)&v19,  0x1Cu);
        goto LABEL_2;
      }
    }

    CFIndex v18 = 0LL;
    goto LABEL_20;
  }

LABEL_2:
  unsigned int v21 = 0;
  uint64_t v19 = a1;
  *(void *)CFTypeRef cf = 0LL;
  *(void *)&cf[8] = a2;
  cf[16] = 0;
  CFTypeID v7 = *(const __CFArray **)(a1 + 168);
  if (v7)
  {
    *(void *)CFTypeRef cf = CFArrayCreateCopy(0LL, v7);
    CFTypeRef v8 = *(const void **)(a1 + 168);
    CFNumberRef v9 = CFGetAllocator(v8);
    CFArrayRef Copy = CFArrayCreateCopy(v9, (CFArrayRef)v8);
    v22.length = CFArrayGetCount(Copy);
    v22.location = 0LL;
    CFArrayApplyFunction(Copy, v22, (CFArrayApplierFunction)sub_10000BCA8, &v19);
    CFRelease(Copy);
  }

  if (a2)
  {
    v23.length = CFArrayGetCount(a2);
    v23.location = 0LL;
    CFArrayApplyFunction(a2, v23, (CFArrayApplierFunction)sub_10000BD4C, &v19);
  }

  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
  *(void *)CFTypeRef cf = 0LL;
  *(void *)&cf[8] = a3;
  cf[16] = 1;
  int v11 = *(const __CFArray **)(a1 + 176);
  if (v11)
  {
    *(void *)CFTypeRef cf = CFArrayCreateCopy(0LL, v11);
    uint64_t v12 = *(const void **)(a1 + 176);
    int v13 = CFGetAllocator(v12);
    __int16 v14 = CFArrayCreateCopy(v13, (CFArrayRef)v12);
    v24.length = CFArrayGetCount(v14);
    v24.location = 0LL;
    CFArrayApplyFunction(v14, v24, (CFArrayApplierFunction)sub_10000BCA8, &v19);
    CFRelease(v14);
  }

  if (a3)
  {
    v25.length = CFArrayGetCount(a3);
    v25.location = 0LL;
    CFArrayApplyFunction(a3, v25, (CFArrayApplierFunction)sub_10000BD4C, &v19);
  }

  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
  return v21;
}

uint64_t sub_10000BCA8(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 28))
  {
    CFStringRef v3 = (void *)result;
    CFStringRef v4 = *(const __CFArray **)(a2 + 16);
    if (!v4
      || (v5.length = CFArrayGetCount(*(CFArrayRef *)(a2 + 16)),
          v5.location = 0LL,
          CFTypeID result = CFArrayContainsValue(v4, v5, v3),
          !(_DWORD)result))
    {
      CFTypeID result = sub_10000BF48(*(void *)a2, v3, *(unsigned __int8 *)(a2 + 24), 1);
      *(_DWORD *)(a2 + 28) = result;
    }
  }

  return result;
}

uint64_t sub_10000BD4C(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 28))
  {
    CFStringRef v3 = (__CFString *)result;
    CFStringRef v4 = *(const __CFArray **)(a2 + 8);
    if (!v4
      || (v5.length = CFArrayGetCount(*(CFArrayRef *)(a2 + 8)),
          v5.location = 0LL,
          CFTypeID result = CFArrayContainsValue(v4, v5, v3),
          !(_DWORD)result))
    {
      CFTypeID result = sub_10000B700(*(void **)a2, v3, *(unsigned __int8 *)(a2 + 24), 1);
      *(_DWORD *)(a2 + 28) = result;
    }
  }

  return result;
}

uint64_t sub_10000BDF0(int a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, int *a6)
{
  CFTypeRef v17 = 0LL;
  CFTypeRef cf = 0LL;
  *a6 = 0;
  if (a2 && a3 && !_SCUnserialize(&cf, 0LL, a2, a3))
  {
    *a6 = 1001;
    if (!a4) {
      goto LABEL_7;
    }
  }

  else if (!a4)
  {
    goto LABEL_7;
  }

  if (a5 && !_SCUnserialize(&v17, 0LL, a4, a5))
  {
    int v15 = 1001;
    goto LABEL_19;
  }

uint64_t sub_10000BF48(uint64_t a1, void *a2, int a3, int a4)
{
  CFTypeRef v8 = sub_1000017F0();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v11 = "*watch-";
    int v12 = *(_DWORD *)(a1 + 40);
    if (!a4) {
      int v11 = "watch- ";
    }
    int v14 = 136315906;
    int v15 = v11;
    __int16 v16 = 1024;
    int v17 = v12;
    if (a3) {
      CFTypeID v13 = "pattern";
    }
    else {
      CFTypeID v13 = "key";
    }
    __int16 v18 = 2080;
    uint64_t v19 = v13;
    __int16 v20 = 2112;
    unsigned int v21 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s : %5u : %s : %@", (uint8_t *)&v14, 0x26u);
    if (a3) {
      goto LABEL_3;
    }
  }

  else if (a3)
  {
LABEL_3:
    uint64_t result = sub_10000C0C8(*(const __CFArray **)(a1 + 176), a2);
    if ((_DWORD)result) {
      return result;
    }
    CFNumberRef v10 = CFNumberCreate(0LL, kCFNumberIntType, (const void *)(a1 + 40));
    sub_100008204(a2, v10);
    goto LABEL_13;
  }

  uint64_t result = sub_10000C0C8(*(const __CFArray **)(a1 + 168), a2);
  if ((_DWORD)result) {
    return result;
  }
  CFNumberRef v10 = CFNumberCreate(0LL, kCFNumberIntType, (const void *)(a1 + 40));
  sub_100002D48(v10, a2);
LABEL_13:
  CFRelease(v10);
  return 0LL;
}

uint64_t sub_10000C0C8(const __CFArray *a1, const void *a2)
{
  if (!a1) {
    return 1004LL;
  }
  v6.length = CFArrayGetCount(a1);
  v6.location = 0LL;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(a1, v6, a2);
  if (FirstIndexOfValue == -1) {
    return 1004LL;
  }
  CFArrayRemoveValueAtIndex(a1, FirstIndexOfValue);
  return 0LL;
}

uint64_t sub_10000C158(int a1, uint64_t a2, unsigned int a3, int a4, int *a5)
{
  CFTypeRef cf = 0LL;
  if (_SCUnserializeString(&cf, 0LL, a2, a3))
  {
    CFTypeRef v8 = cf;
    CFTypeID TypeID = CFStringGetTypeID();
    if (v8 && CFGetTypeID(v8) == TypeID)
    {
      uint64_t v10 = sub_1000059A4(a1);
      if (v10) {
        int v11 = sub_10000BF48(*(void *)(v10 + 56), (void *)cf, a4 != 0, 0);
      }
      else {
        int v11 = 2001;
      }
    }

    else
    {
      int v11 = 1002;
    }
  }

  else
  {
    int v11 = 1001;
  }

  *a5 = v11;
  if (cf) {
    CFRelease(cf);
  }
  return 0LL;
}

uint64_t sub_10000C250(uint64_t a1, CFArrayRef *a2)
{
  uint64_t v3 = sub_1000059A4(*(_DWORD *)(a1 + 40));
  CFStringRef v4 = *(const __CFArray **)(v3 + 32);
  if (v4)
  {
    *a2 = v4;
    *(void *)(v3 + 32) = 0LL;
  }

  else
  {
    *a2 = CFArrayCreate(0LL, 0LL, 0LL, &kCFTypeArrayCallBacks);
  }

  return 0LL;
}

uint64_t sub_10000C2DC(int a1, void *a2, _DWORD *a3, int *a4)
{
  uint64_t v7 = sub_1000059A4(a1);
  *a2 = 0LL;
  *a3 = 0;
  if (!v7)
  {
    int v10 = 2001;
    goto LABEL_5;
  }

  sub_10000C250(*(void *)(v7 + 56), &v12);
  *a4 = 0;
  CFArrayRef v8 = v12;
  int v9 = _SCSerialize(v12, 0LL, a2, &v13);
  *a3 = v13;
  CFRelease(v8);
  if (!v9)
  {
    int v10 = 1001;
LABEL_5:
    *a4 = v10;
  }

  return 0LL;
}

uint64_t sub_10000C3A0(uint64_t a1, int a2, int a3)
{
  if (*(_DWORD *)(a1 + 48)) {
    return 2003LL;
  }
  uint64_t result = 1002LL;
  if (!a2 && a3)
  {
    int v6 = *(_DWORD *)(a1 + 40);
    CFRange v5 = (const void *)(a1 + 40);
    if (*(void *)(sub_1000059A4(v6) + 32))
    {
      if (!qword_1000799E0) {
        qword_1000799E0 = (uint64_t)CFSetCreateMutable(0LL, 0LL, &kCFTypeSetCallBacks);
      }
      CFNumberRef v7 = CFNumberCreate(0LL, kCFNumberIntType, v5);
      CFSetAddValue((CFMutableSetRef)qword_1000799E0, v7);
      CFRelease(v7);
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_10000C470(int a1, mach_port_name_t a2, int a3, _DWORD *a4)
{
  uint64_t v7 = sub_1000059A4(a1);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 56);
    int v9 = sub_10000C3A0(v8, a3, a2);
    *a4 = v9;
    if (!v9)
    {
      *(_DWORD *)(v8 + 48) = 2;
      *(_DWORD *)(v8 + 184) = a2;
      return 0LL;
    }
  }

  else
  {
    *a4 = 2001;
  }

  if (a2) {
    mach_port_deallocate(mach_task_self_, a2);
  }
  return 0LL;
}

uint64_t sub_10000C528(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48)) {
    return 2003LL;
  }
  CFRange v2 = (const void *)(a1 + 40);
  if (*(void *)(sub_1000059A4(*(_DWORD *)(a1 + 40)) + 32))
  {
    if (!qword_1000799E0) {
      qword_1000799E0 = (uint64_t)CFSetCreateMutable(0LL, 0LL, &kCFTypeSetCallBacks);
    }
    CFNumberRef v3 = CFNumberCreate(0LL, kCFNumberIntType, v2);
    CFSetAddValue((CFMutableSetRef)qword_1000799E0, v3);
    CFRelease(v3);
  }

  return 0LL;
}

uint64_t sub_10000C5EC(int a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v7 = sub_1000059A4(a1);
  int v8 = fileport_makefd(a2);
  mach_port_deallocate(mach_task_self_, a2);
  if (v8 < 0)
  {
    *a4 = *__error();
    return 0LL;
  }

  int v9 = fcntl(v8, 3, 0LL);
  if (v9 == -1 || fcntl(v8, 4, v9 | 4u) == -1)
  {
    int v12 = *__error();
LABEL_8:
    *a4 = v12;
    goto LABEL_9;
  }

  if (!v7)
  {
    int v12 = 2001;
    goto LABEL_8;
  }

  int v10 = *(_DWORD **)(v7 + 56);
  int v11 = sub_10000C528((uint64_t)v10);
  *a4 = v11;
  if (v11)
  {
LABEL_9:
    close(v8);
    return 0LL;
  }

  v10[12] = 3;
  v10[48] = v8;
  v10[49] = a3;
  return 0LL;
}

uint64_t sub_10000C70C(_DWORD *a1)
{
  mach_port_name_t v2 = a1[46];
  if (v2)
  {
    mach_port_deallocate(mach_task_self_, v2);
    a1[46] = 0;
  }

  int v3 = a1[48];
  if (v3 != -1)
  {
    close(v3);
    a1[48] = -1;
  }

  if (qword_1000799E0)
  {
    CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberIntType, a1 + 10);
    CFSetRemoveValue((CFMutableSetRef)qword_1000799E0, v4);
    CFRelease(v4);
    if (!CFSetGetCount((CFSetRef)qword_1000799E0))
    {
      CFRelease((CFTypeRef)qword_1000799E0);
      qword_1000799E0 = 0LL;
    }
  }

  a1[12] = 0;
  return 0LL;
}

uint64_t sub_10000C7F0(int a1, int *a2)
{
  uint64_t v3 = sub_1000059A4(a1);
  if (v3)
  {
    sub_10000C70C(*(_DWORD **)(v3 + 56));
    int v4 = 0;
  }

  else
  {
    int v4 = 2001;
  }

  *a2 = v4;
  return 0LL;
}

uint64_t sub_10000C864()
{
  int v0 = open("/var/tmp/configd-state", 3585, 420LL);
  if (v0 == -1) {
    return 1001LL;
  }
  uint64_t v1 = fdopen(v0, "w");
  if (!v1) {
    return 1001LL;
  }
  mach_port_name_t v2 = v1;
  SCPrint(1LL, v1, @"Main [plug-in] thread :\n\n");
  CFRunLoopGetCurrent();
  SCPrint(1LL, v2, @"%@\n");
  sub_100006434((uint64_t)v2);
  fclose(v2);
  unlink("/var/tmp/configd-store.plist");
  int v3 = open("/var/tmp/configd-store.plist", 3585, 420LL);
  if (v3 == -1) {
    return 1001LL;
  }
  int v4 = v3;
  CFDictionaryRef v5 = sub_10000CBA0((const __CFDictionary *)qword_1000799B8);
  Data = CFPropertyListCreateData(0LL, v5, kCFPropertyListXMLFormat_v1_0, 0LL, 0LL);
  CFRelease(v5);
  if (!Data)
  {
    os_log_t v15 = sub_1000017F0();
    uint64_t v16 = _SC_syslog_os_log_mapping(5LL);
    if (!__SC_log_enabled(5LL, v15, v16))
    {
LABEL_12:
      close(v4);
      return 1001LL;
    }

LABEL_11:
    uint64_t v17 = _os_log_pack_size(2LL);
    __int16 v18 = (char *)&v20 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v19 = *__error();
    *(_WORD *)_os_log_pack_fill(v18, v17, v19, &_mh_execute_header, "CFPropertyListCreateData() failed") = 0;
    __SC_log_send(5LL, v15, v16, v18);
    goto LABEL_12;
  }

  BytePtr = CFDataGetBytePtr(Data);
  size_t Length = CFDataGetLength(Data);
  write(v4, BytePtr, Length);
  close(v4);
  CFRelease(Data);
  unlink("/var/tmp/configd-pattern.plist");
  int v9 = open("/var/tmp/configd-pattern.plist", 3585, 420LL);
  if (v9 != -1)
  {
    int v4 = v9;
    int v10 = CFPropertyListCreateData(0LL, (CFPropertyListRef)qword_1000799C0, kCFPropertyListXMLFormat_v1_0, 0LL, 0LL);
    if (v10)
    {
      int v11 = v10;
      int v12 = CFDataGetBytePtr(v10);
      size_t v13 = CFDataGetLength(v11);
      write(v4, v12, v13);
      close(v4);
      CFRelease(v11);
      return 0LL;
    }

    os_log_t v15 = sub_1000017F0();
    uint64_t v16 = _SC_syslog_os_log_mapping(5LL);
    goto LABEL_11;
  }

  return 1001LL;
}

    int v11 = 0LL;
    goto LABEL_12;
  }

  int v8 = (unsigned int *)sub_100030AC8(v4);
  if (!v8) {
    goto LABEL_11;
  }
  int v9 = sub_100031EF0(v8);
LABEL_8:
  int v11 = v9;
  CFTypeRef Value = CFDictionaryGetValue(v4, @"Service");
  if (Value) {
    CFStringAppendFormat(v11, 0LL, @"\n<Service> = %@", Value);
  }
  int v4 = (const __CFDictionary *)v11;
LABEL_12:
  size_t v13 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    size_t v13 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v13;
  }

  int v14 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v13, v14))
  {
    if (v4) {
      os_log_t v15 = (const __CFString *)v4;
    }
    else {
      os_log_t v15 = @"<none>";
    }
    uint64_t v16 = _os_log_pack_size(42LL);
    uint64_t v17 = (char *)&v20 - ((__chkstk_darwin(v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __int16 v18 = __error();
    uint64_t v19 = _os_log_pack_fill(v17, v16, *v18, &_mh_execute_header, "serviceID %@ %@ %@ value = %@");
    *(_DWORD *)uint64_t v19 = 138413058;
    *(void *)(v19 + 4) = a1;
    *(_WORD *)(v19 + 12) = 2112;
    *(void *)(v19 + 14) = a3;
    *(_WORD *)(v19 + 22) = 2112;
    *(void *)(v19 + 24) = cf1;
    *(_WORD *)(v19 + 32) = 2112;
    *(void *)(v19 + 34) = v15;
    __SC_log_send(7LL, v13, v14, v17);
  }

  if (v11) {
    CFRelease(v11);
  }
}

CFDictionaryRef sub_10000CBA0(const __CFDictionary *a1)
{
  uint64_t Count = CFDictionaryGetCount(a1);
  CFIndex v3 = Count;
  if (Count <= 0) {
    return CFDictionaryCreate(0LL, v29, v28, Count, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  if ((unint64_t)Count < 0x65)
  {
    int v4 = v29;
    int v6 = v28;
    CFDictionaryRef v5 = (const void **)&v27;
  }

  else
  {
    int v4 = (const void **)CFAllocatorAllocate(0LL, 8 * Count, 0LL);
    CFDictionaryRef v5 = (const void **)CFAllocatorAllocate(0LL, 8 * v3, 0LL);
    int v6 = (const void **)CFAllocatorAllocate(0LL, 8 * v3, 0LL);
  }

  bzero(v6, 8 * v3);
  CFDictionaryGetKeysAndValues(a1, v4, v5);
  uint64_t v8 = 0LL;
  *(void *)&__int128 v9 = 138412290LL;
  __int128 v24 = v9;
  int v10 = v4;
  do
  {
    CFTypeRef Value = CFDictionaryGetValue((CFDictionaryRef)v5[v8], @"data");
    if (Value)
    {
      int v12 = Value;
      v6[v8] = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)v5[v8]);
      if (_SCUnserialize(&v26, v12, 0LL, 0LL))
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v6[v8], @"data", v26);
        CFRelease(v26);
      }

      else
      {
        os_log_t v13 = sub_1000017F0();
        uint64_t v14 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v13, v14))
        {
          os_log_t v15 = v10;
          uint64_t v16 = _os_log_pack_size(12LL);
          CFRange v25 = &v24;
          uint64_t v17 = (char *)&v24 - ((__chkstk_darwin(v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __int16 v18 = __error();
          uint64_t v19 = v16;
          int v10 = v15;
          uint64_t v20 = _os_log_pack_fill(v17, v19, *v18, &_mh_execute_header, "_SCUnserialize() failed, key=%@");
          unsigned int v21 = v15[v8];
          *(_DWORD *)uint64_t v20 = v24;
          *(void *)(v20 + 4) = v21;
          __SC_log_send(5LL, v13, v14, v17);
        }
      }
    }

    else
    {
      v6[v8] = CFRetain(v5[v8]);
    }

    ++v8;
  }

  while (v3 != v8);
  CFDictionaryRef v7 = CFDictionaryCreate(0LL, v10, v6, v3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v22 = 0LL;
  do
    CFRelease(v6[v22++]);
  while (v3 != v22);
  if (v10 != v29)
  {
    CFAllocatorDeallocate(0LL, v10);
    CFAllocatorDeallocate(0LL, v5);
    CFAllocatorDeallocate(0LL, v6);
  }

  return v7;
}

uint64_t sub_10000CE8C(int a1, _DWORD *a2)
{
  uint64_t v3 = sub_1000059A4(a1);
  if (!v3) {
    return 2001LL;
  }
  if (!sub_10000666C(v3)) {
    return 1003LL;
  }
  int v4 = sub_10000C864();
  uint64_t result = 0LL;
  *a2 = v4;
  return result;
}

uint64_t sub_10000CF0C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  else {
    return 0LL;
  }
}

uint64_t sub_10000CF88(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v3 = -304;
    goto LABEL_12;
  }

  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    int v3 = -300;
    goto LABEL_12;
  }

  if (*(_DWORD *)(result + 76) || *(_DWORD *)(result + 80) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_13;
  }

  int v4 = (int *)(a2 + 28);
  *(void *)(a2 + 32) = 0x11000000000000LL;
  int v5 = *(_DWORD *)(result + 12);
  uint64_t v6 = *(void *)(result + 28);
  unsigned int v7 = *(_DWORD *)(result + 40);
  uint64_t v8 = *(void *)(result + 44);
  unsigned int v9 = *(_DWORD *)(result + 56);
  __int128 v10 = *(_OWORD *)(result + 112);
  v11[0] = *(_OWORD *)(result + 96);
  v11[1] = v10;
  uint64_t result = sub_100008CE4(v5, v6, v7, v8, v9, v4, (int *)(a2 + 48), v11);
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 40) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 52;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }

  *(_DWORD *)(a2 + 32) = result;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_10000D0E8(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }

  if (*(_BYTE *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    int v3 = -300;
    goto LABEL_9;
  }

  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t result = sub_100009894( *(_DWORD *)(result + 12),  *(void *)(result + 28),  *(_DWORD *)(result + 40),  *(_DWORD *)(result + 56),  (void *)(a2 + 28),  (_DWORD *)(a2 + 52),  (int *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }

  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10000D204(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }

  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }

  uint64_t result = sub_100009AB8( *(_DWORD *)(result + 12),  *(void *)(result + 28),  v3,  *(void *)(result + 44),  v4,  (_DWORD *)(a2 + 36),  (int *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }

LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

    os_log_t v15 = 0LL;
    goto LABEL_13;
  }

  uint64_t v14 = IOIteratorNext(HIDWORD(v23));
  os_log_t v15 = v14;
  if (!(_DWORD)v14)
  {
    uint64_t v16 = sub_100015FB8();
    uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v16, v17))
    {
      __int16 v18 = _os_log_pack_size(22LL);
      uint64_t v19 = (char *)&v23 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v20 = __error();
      unsigned int v21 = _os_log_pack_fill( v19,  v18,  *v20,  &_mh_execute_header,  "%s: no such matching entryID 0x%llx",  v23,  v24);
      *(_DWORD *)unsigned int v21 = 136315394;
      *(void *)(v21 + 4) = "getRegistryEntryWithID";
      *(_WORD *)(v21 + 12) = 2048;
      *(void *)(v21 + 14) = a1;
      int v11 = v16;
      int v12 = v17;
      os_log_t v13 = v19;
      goto LABEL_11;
    }

    goto LABEL_12;
  }

uint64_t sub_10000D30C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }

  if (*(_BYTE *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    int v3 = -300;
    goto LABEL_9;
  }

  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t result = sub_100009E94( *(_DWORD *)(result + 12),  *(void *)(result + 28),  *(_DWORD *)(result + 40),  (void *)(a2 + 28),  (_DWORD *)(a2 + 52),  (_DWORD *)(a2 + 56),  (int *)(a2 + 60));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }

  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 64;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10000D428(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 80)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }

  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }

  uint64_t result = sub_10000A980( *(_DWORD *)(result + 12),  *(void *)(result + 28),  v3,  *(void *)(result + 44),  v4,  *(unsigned int *)(result + 76),  (_DWORD *)(a2 + 36),  (int *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }

uint64_t sub_10000D534(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }

  if (*(_BYTE *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }

  uint64_t result = sub_10000B398(*(_DWORD *)(result + 12), *(void *)(result + 28), v3, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }

uint64_t sub_10000D618(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }

  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }

  uint64_t result = sub_100009BE8( *(_DWORD *)(result + 12),  *(void *)(result + 28),  v3,  *(void *)(result + 44),  v4,  (_DWORD *)(a2 + 36),  (int *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }

uint64_t sub_10000D720(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }

  if (*(_BYTE *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }

  uint64_t result = sub_10000B608(*(_DWORD *)(result + 12), *(void *)(result + 28), v3, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }

uint64_t sub_10000D804(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v3 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_12;
  }

  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    int v3 = -300;
    goto LABEL_11;
  }

  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t result = sub_100009FF4( *(_DWORD *)(result + 12),  *(void *)(result + 28),  *(_DWORD *)(result + 40),  *(void *)(result + 44),  *(_DWORD *)(result + 56),  (void *)(a2 + 28),  (_DWORD *)(a2 + 52),  (int *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_12:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }

  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10000D940(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 96)
  {
    int v7 = -304;
LABEL_13:
    *(_DWORD *)(a2 + 32) = v7;
    NDR_record_t v6 = NDR_record;
    goto LABEL_14;
  }

  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_BYTE *)(result + 71) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 84))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 88))
    || (unsigned int v5 = *(_DWORD *)(result + 72), v5 != *(_DWORD *)(result + 92)))
  {
    int v7 = -300;
    goto LABEL_13;
  }

  uint64_t result = sub_10000AE7C( *(_DWORD *)(result + 12),  *(void *)(result + 28),  v3,  *(void *)(result + 44),  v4,  *(void *)(result + 60),  v5,  (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v6 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }

LABEL_14:
  *(NDR_record_t *)(a2 + 24) = v6;
  return result;
}

  if (!qword_100079EA0) {
    return;
  }
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController policySession](self, "policySession"));
  [v20 removePolicyWithID:qword_100079EA0];

  unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController policySession](self, "policySession"));
  uint64_t v22 = [v21 apply];

  if ((v22 & 1) != 0)
  {
    qword_100079EA0 = 0LL;
    CFRange v23 = sub_10002E39C();
    __int128 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    __int128 v24 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v10, v24))
    {
      unsigned int v50 = 0u;
      uint64_t v51 = 0u;
      v48 = 0u;
      uint64_t v49 = 0u;
      v46 = 0u;
      uint64_t v47 = 0u;
      uint64_t v44 = 0u;
      uint64_t v45 = 0u;
      uint64_t v42 = 0u;
      unsigned int v43 = 0u;
      uint64_t v40 = 0u;
      CFTypeRef v41 = 0u;
      CFIndex v38 = 0u;
      os_log_t v39 = 0u;
      CFIndex v36 = 0u;
      CFIndex v37 = 0u;
      CFRange v25 = (_sc_log > 0) | 2;
      if (os_log_type_enabled(v10, (os_log_type_t)v24)) {
        int v26 = v25;
      }
      else {
        int v26 = 2LL;
      }
      v35[0] = 0;
      uint64_t v27 = (__int128 *)_os_log_send_and_compose_impl( v26,  0LL,  &v36,  256LL,  &_mh_execute_header,  v10,  v24,  "Removed the [.onion] drop policy",  v35,  2);
      int v28 = 6LL;
      goto LABEL_26;
    }
  }

  else
  {
    BOOL v29 = sub_10002E39C();
    __int128 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    __int128 v24 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v10, v24))
    {
      unsigned int v50 = 0u;
      uint64_t v51 = 0u;
      v48 = 0u;
      uint64_t v49 = 0u;
      v46 = 0u;
      uint64_t v47 = 0u;
      uint64_t v44 = 0u;
      uint64_t v45 = 0u;
      uint64_t v42 = 0u;
      unsigned int v43 = 0u;
      uint64_t v40 = 0u;
      CFTypeRef v41 = 0u;
      CFIndex v38 = 0u;
      os_log_t v39 = 0u;
      CFIndex v36 = 0u;
      CFIndex v37 = 0u;
      int v30 = (_sc_log > 0) | 2;
      if (os_log_type_enabled(v10, (os_log_type_t)v24)) {
        CFIndex v31 = v30;
      }
      else {
        CFIndex v31 = 2LL;
      }
      v35[0] = 0;
      uint64_t v27 = (__int128 *)_os_log_send_and_compose_impl( v31,  0LL,  &v36,  256LL,  &_mh_execute_header,  v10,  v24,  "Could not remove the [.onion] drop policy",  v35,  2);
      int v28 = 5LL;
LABEL_26:
      __SC_log_send2(v28, v10, v24, 0LL, v27);
      if (v27 != &v36) {
        free(v27);
      }
    }
  }

      free((void *)v9);
      goto LABEL_15;
    }
  }

  int v11 = sub_100058E78();
  int v12 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v11, v12))
  {
    os_log_t v13 = _os_log_pack_size(12LL);
    uint64_t v14 = (char *)&v32 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v15 = __error();
    uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "CategoryManager[ActivateValue]: no session %p",  v32);
    *(_DWORD *)uint64_t v16 = 134217984;
    *(void *)(v16 + 4) = a1;
    __SC_log_send(5LL, v11, v12, v14);
  }

  return 22LL;
}

uint64_t sub_10000DA64(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }

  if (*(_BYTE *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }

  uint64_t result = sub_10000B988( *(_DWORD *)(result + 12),  *(void *)(result + 28),  v3,  *(_DWORD *)(result + 56),  (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }

uint64_t sub_10000DB4C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }

  if (*(_BYTE *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }

  uint64_t result = sub_10000C158( *(_DWORD *)(result + 12),  *(void *)(result + 28),  v3,  *(_DWORD *)(result + 56),  (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }

_DWORD *sub_10000DC34(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }

  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t result = (_DWORD *)sub_10000C2DC(result[3], (void *)(a2 + 28), (_DWORD *)(a2 + 52), (int *)(a2 + 56));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }

  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10000DD10(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 52)
  {
    int v4 = -304;
LABEL_8:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v3 = NDR_record;
    goto LABEL_9;
  }

  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    int v4 = -300;
    goto LABEL_8;
  }

  uint64_t result = sub_10000C470( *(_DWORD *)(result + 12),  *(_DWORD *)(result + 28),  *(_DWORD *)(result + 48),  (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v3 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }

LABEL_9:
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

  if ((v8 & 4) != 0 && v7 <= 0x5D)
  {
    int v7 = __strlcat_chk(v66, "DNS,", 99LL, 100LL);
    v8 &= ~4uLL;
  }

  if ((v8 & 0x40) != 0 && v7 <= 0x5A)
  {
    int v7 = __strlcat_chk(v66, "CLAT46,", 99LL, 100LL);
    v8 &= ~0x40uLL;
  }

  if ((v8 & 8) != 0 && v7 <= 0x55)
  {
    int v7 = __strlcat_chk(v66, "NOT-IN-LIST,", 99LL, 100LL);
    v8 &= ~8uLL;
  }

  if ((v8 & 0x10) != 0 && v7 < 0x58)
  {
    int v7 = __strlcat_chk(v66, "SIGNATURE,", 99LL, 100LL);
    v8 &= ~0x10uLL;
  }

  if ((v8 & 0x20) != 0 && v7 < 0x54)
  {
    int v7 = __strlcat_chk(v66, "NOT-IN-IFLIST,", 99LL, 100LL);
    v8 &= ~0x20uLL;
  }

  if (v8)
  {
    if (v7 >= 0x57)
    {
      int v7 = __strlcpy_chk(v66, "(", 99LL, 100LL);
      uint64_t v8 = v5;
    }

    v7 += snprintf(&v66[v7], 99 - v7, ",%p", (const void *)v8);
  }

  if (v7) {
    v66[v7 - 1] = 41;
  }
LABEL_31:
  ifname = nwi_ifstate_get_ifname(a1);
  reachability_flags = nwi_ifstate_get_reachability_flags(a1);
  int v11 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    int v11 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v11;
  }

  int v12 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v11, v12))
  {
    os_log_t v13 = _os_log_pack_size(32LL);
    uint64_t v14 = (char *)&v63 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v15 = __error();
    uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  " %7s : flags      : %p %s",  v63,  v64,  v65);
    *(_DWORD *)uint64_t v16 = 136315650;
    *(void *)(v16 + 4) = ifname;
    *(_WORD *)(v16 + 12) = 2048;
    *(void *)(v16 + 14) = v4;
    *(_WORD *)(v16 + 22) = 2080;
    *(void *)(v16 + 24) = v66;
    __SC_log_send(6LL, v11, v12, v14);
  }

  uint64_t v17 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    uint64_t v17 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v17;
  }

  __int16 v18 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v17, v18))
  {
    uint64_t v19 = _os_log_pack_size(12LL);
    uint64_t v20 = (char *)&v63 - ((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    unsigned int v21 = __error();
    uint64_t v22 = _os_log_pack_fill(v20, v19, *v21, &_mh_execute_header, "           address    : %s", v63);
    *(_DWORD *)uint64_t v22 = 136315138;
    *(void *)(v22 + 4) = v67;
    __SC_log_send(6LL, v17, v18, v20);
  }

  vpn_server = nwi_ifstate_get_vpn_server(a1);
  if (vpn_server)
  {
    _SC_sockaddr_to_string(vpn_server, (char *)&v64 + 2, 46LL);
    __int128 v24 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      __int128 v24 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v24;
    }

    CFRange v25 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v24, v25))
    {
      int v26 = _os_log_pack_size(12LL);
      uint64_t v27 = (char *)&v63 - ((__chkstk_darwin(v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v28 = __error();
      BOOL v29 = _os_log_pack_fill(v27, v26, *v28, &_mh_execute_header, "           VPN server : %s", v63);
      *(_DWORD *)BOOL v29 = 136315138;
      *(void *)(v29 + 4) = (char *)&v64 + 2;
      __SC_log_send(6LL, v24, v25, v27);
    }
  }

  sub_10003FDC8(reachability_flags, (char *)&v64 + 2);
  int v30 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    int v30 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v30;
  }

  CFIndex v31 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v30, v31))
  {
    CFIndex v32 = _os_log_pack_size(12LL);
    CFIndex v33 = (char *)&v63 - ((__chkstk_darwin(v32) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFRange v34 = __error();
    int v35 = _os_log_pack_fill(v33, v32, *v34, &_mh_execute_header, "           reach      : %s", v63);
    *(_DWORD *)int v35 = 136315138;
    *(void *)(v35 + 4) = (char *)&v64 + 2;
    __SC_log_send(6LL, v30, v31, v33);
  }

  HIDWORD(v63) = 0;
  CFIndex v36 = *(_DWORD *)(a1 + 28);
  if (HIBYTE(v36) > 4u) {
    CFIndex v37 = "???";
  }
  else {
    CFIndex v37 = off_100072C58[SHIBYTE(v36)];
  }
  CFIndex v38 = (os_log_t)qword_100079C78;
  if ((v36 & 0xFFFFFF) == 0xFFFFFF)
  {
    if (!qword_100079C78)
    {
      CFIndex v38 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v38;
    }

    os_log_t v39 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v38, v39))
    {
      uint64_t v40 = _os_log_pack_size(18LL);
      CFTypeRef v41 = (char *)&v63 - ((__chkstk_darwin(v40) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v42 = __error();
      unsigned int v43 = _os_log_pack_fill( v41,  v40,  *v42,  &_mh_execute_header,  "           rank       : 0x%08x (%s, Last)",  (_DWORD)v63,  v64);
      *(_DWORD *)unsigned int v43 = 67109378;
      *(_DWORD *)(v43 + 4) = v36;
      *(_WORD *)(v43 + 8) = 2080;
      *(void *)(v43 + 10) = v37;
LABEL_62:
      __SC_log_send(6LL, v38, v39, v41);
    }
  }

  else
  {
    if (!qword_100079C78)
    {
      CFIndex v38 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v38;
    }

    os_log_t v39 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v38, v39))
    {
      uint64_t v44 = _os_log_pack_size(24LL);
      CFTypeRef v41 = (char *)&v63 - ((__chkstk_darwin(v44) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v45 = __error();
      v46 = _os_log_pack_fill( v41,  v44,  *v45,  &_mh_execute_header,  "           rank       : 0x%08x (%s, %u)",  (_DWORD)v63,  v64,  (_DWORD)v65);
      *(_DWORD *)v46 = 67109634;
      *(_DWORD *)(v46 + 4) = v36;
      *(_WORD *)(v46 + 8) = 2080;
      *(void *)(v46 + 10) = v37;
      *(_WORD *)(v46 + 18) = 1024;
      *(_DWORD *)(v46 + 20) = v36 & 0xFFFFFF;
      goto LABEL_62;
    }
  }

  signature = (const UInt8 *)nwi_ifstate_get_signature(a1, 0LL, (char *)&v63 + 4);
  if (signature)
  {
    v48 = CFDataCreate(0LL, signature, SHIDWORD(v63));
    uint64_t v49 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      uint64_t v49 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v49;
    }

    unsigned int v50 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v49, v50))
    {
      uint64_t v51 = _os_log_pack_size(12LL);
      v52 = (char *)&v63 - ((__chkstk_darwin(v51) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v53 = __error();
      v54 = _os_log_pack_fill(v52, v51, *v53, &_mh_execute_header, "           signature  : %@");
      *(_DWORD *)v54 = 138412290;
      *(void *)(v54 + 4) = v48;
      __SC_log_send(6LL, v49, v50, v52);
    }

    CFRelease(v48);
  }

  generation = nwi_ifstate_get_generation(a1);
  v56 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    v56 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v56;
  }

  v57 = _SC_syslog_os_log_mapping(6LL);
  uint64_t result = __SC_log_enabled(6LL, v56, v57);
  if ((_DWORD)result)
  {
    v59 = _os_log_pack_size(12LL);
    v60 = (char *)&v63 - ((__chkstk_darwin(v59) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    v61 = __error();
    v62 = _os_log_pack_fill(v60, v59, *v61, &_mh_execute_header, "           generation : %llu", v63);
    *(_DWORD *)v62 = 134217984;
    *(void *)(v62 + 4) = generation;
    return __SC_log_send(6LL, v56, v57, v60);
  }

  return result;
}

_DWORD *sub_10000DDEC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }

  else
  {
    uint64_t result = (_DWORD *)sub_10000C7F0(result[3], (int *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    NDR_record_t v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }

  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10000DE98(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }

  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }

  uint64_t result = sub_10000BDF0( *(_DWORD *)(result + 12),  *(void *)(result + 28),  v3,  *(void *)(result + 44),  v4,  (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }

uint64_t sub_10000DF9C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 52)
  {
    int v4 = -304;
LABEL_8:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v3 = NDR_record;
    goto LABEL_9;
  }

  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    int v4 = -300;
    goto LABEL_8;
  }

  uint64_t result = sub_10000C5EC( *(_DWORD *)(result + 12),  *(unsigned int *)(result + 28),  *(_DWORD *)(result + 48),  (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v3 = NDR_record;
  if (!(_DWORD)result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }

_DWORD *sub_10000E078(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }

  else
  {
    uint64_t result = (_DWORD *)sub_10000CE8C(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    NDR_record_t v3 = NDR_record;
    if (!(_DWORD)result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }

  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

os_log_t sub_10000E124()
{
  os_log_t result = (os_log_t)qword_100079AA0;
  if (!qword_100079AA0)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    qword_100079AA0 = (uint64_t)result;
  }

  return result;
}

void sub_10000E194(uint64_t a1, uint64_t a2)
{
  if (qword_100079AB8 && CFArrayGetCount((CFArrayRef)qword_100079AB8) <= 99)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFStringRef v5 = CFStringCreateWithFormat(0LL, 0LL, @"%12.8f: %s %s", *(void *)&Current, a1, a2);
    if (qword_100079AB8)
    {
      if (CFArrayGetCount((CFArrayRef)qword_100079AB8) <= 99)
      {
        CFArrayAppendValue((CFMutableArrayRef)qword_100079AB8, v5);
        byte_100079AC0 = 1;
      }
    }

    CFRelease(v5);
  }

uint64_t sub_10000E288(int a1)
{
  uint64_t v1 = socket(a1, 2, 0);
  if ((_DWORD)v1 == -1)
  {
    os_log_t v2 = (os_log_t)qword_100079AA0;
    if (!qword_100079AA0)
    {
      os_log_t v2 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_100079AA0 = (uint64_t)v2;
    }

    uint64_t v3 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v2, v3))
    {
      uint64_t v4 = _os_log_pack_size(12LL);
      CFStringRef v5 = (char *)&v11 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v6 = __error();
      uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "socket() failed: %s", v11);
      uint64_t v8 = __error();
      unsigned int v9 = strerror(*v8);
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v7 + 4) = v9;
      __SC_log_send(3LL, v2, v3, v5);
    }
  }

  return v1;
}

void sub_10000E3D8(const char *a1)
{
  if (a1)
  {
    xpc_object_t v2 = xpc_array_create(0LL, 0LL);
    xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, a1);
    network_config_check_interface_settings(v2);
    xpc_release(v2);
  }

  else
  {
    network_config_check_interface_settings(0LL);
  }

void sub_10000E480()
{
}

void sub_10000E4D4(id a1)
{
}

void sub_10000E518()
{
  os_log_t v0 = (os_log_t)qword_100079AA0;
  if (!qword_100079AA0)
  {
    os_log_t v0 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    qword_100079AA0 = (uint64_t)v0;
  }

  uint64_t v1 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v0, v1))
  {
    uint64_t v2 = _os_log_pack_size(2LL);
    uint64_t v3 = (char *)&v6 - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v4 = __error();
    *(_WORD *)_os_log_pack_fill(v3, v2, *v4, &_mh_execute_header, "prime() called") = 0;
    __SC_log_send(7LL, v0, v1, v3);
  }

  _SCDynamicStoreCacheOpen(qword_1000799F8);
  qword_100079AB8 = (uint64_t)CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  sub_10000F430((uint64_t)"prime", 1);
  _SCDynamicStoreCacheCommitChanges(qword_1000799F8);
  _SCDynamicStoreCacheClose(qword_1000799F8);
  byte_1000799F0 = 1;
  sub_10000F668();
  if (qword_100079AB8 && byte_100079AC0)
  {
    SCDynamicStoreSetValue(0LL, @"Plugin:KernelEventMonitor", (CFPropertyListRef)qword_100079AB8);
    byte_100079AC0 = 0;
  }

  dispatch_resume((dispatch_object_t)qword_100079AB0);
  dispatch_time_t v5 = dispatch_time(0LL, 6000000000LL);
  dispatch_after_f(v5, (dispatch_queue_t)qword_100079AA8, 0LL, (dispatch_function_t)sub_10000F7B8);
}

void sub_10000E6E8(__CFBundle *a1, int a2)
{
  if (a2) {
    byte_100079A00 = 1;
  }
  os_log_t v3 = (os_log_t)qword_100079AA0;
  if (!qword_100079AA0)
  {
    os_log_t v3 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    qword_100079AA0 = (uint64_t)v3;
  }

  uint64_t v4 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v3, v4))
  {
    uint64_t v5 = _os_log_pack_size(2LL);
    uint64_t v6 = (char *)&v49[-1] - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v7 = __error();
    *(_WORD *)_os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "load() called") = 0;
    __SC_log_send(7LL, v3, v4, v6);
  }

  os_log_t v8 = (os_log_t)qword_100079AA0;
  if (!qword_100079AA0)
  {
    os_log_t v8 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    qword_100079AA0 = (uint64_t)v8;
  }

  uint64_t v9 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v8, v9))
  {
    uint64_t v10 = _os_log_pack_size(12LL);
    int v11 = (char *)&v49[-1] - ((__chkstk_darwin(v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    int v12 = __error();
    uint64_t v13 = _os_log_pack_fill(v11, v10, *v12, &_mh_execute_header, "  bundle ID = %@");
    CFStringRef Identifier = CFBundleGetIdentifier(a1);
    *(_DWORD *)uint64_t v13 = 138412290;
    *(void *)(v13 + 4) = Identifier;
    __SC_log_send(7LL, v8, v9, v11);
  }

  if (sub_10000EE88())
  {
    int v15 = socket(32, 3, 1);
    if (v15 == -1)
    {
      os_log_t v28 = (os_log_t)qword_100079AA0;
      if (!qword_100079AA0)
      {
        os_log_t v28 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        qword_100079AA0 = (uint64_t)v28;
      }

      uint64_t v29 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v28, v29))
      {
        uint64_t v30 = _os_log_pack_size(12LL);
        CFIndex v31 = (char *)&v49[-1] - ((__chkstk_darwin(v30) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFIndex v32 = __error();
        uint64_t v33 = _os_log_pack_fill( v31,  v30,  *v32,  &_mh_execute_header,  "could not open event socket, socket() failed: %s",  v48);
        CFRange v34 = __error();
        int v35 = strerror(*v34);
        *(_DWORD *)uint64_t v33 = 136315138;
        *(void *)(v33 + 4) = v35;
        __SC_log_send(3LL, v28, v29, v31);
      }

      goto LABEL_38;
    }

    int v16 = v15;
    uint64_t v54 = 0x100000001LL;
    int v55 = 0;
    if (ioctl(v15, 0x800C6502uLL, &v54))
    {
      os_log_t v17 = (os_log_t)qword_100079AA0;
      if (!qword_100079AA0)
      {
        os_log_t v17 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        qword_100079AA0 = (uint64_t)v17;
      }

      uint64_t v18 = _SC_syslog_os_log_mapping(3LL);
      uint64_t v19 = _os_log_pack_size(12LL);
      uint64_t v20 = (char *)&v49[-1] - ((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v21 = *__error();
      uint64_t v22 = _os_log_pack_fill( v20,  v19,  v21,  &_mh_execute_header,  "could not establish event filter, ioctl() failed: %s");
    }

    else
    {
      int v53 = 1;
      if (ioctl(v16, 0x8004667EuLL, &v53))
      {
        os_log_t v17 = (os_log_t)qword_100079AA0;
        if (!qword_100079AA0)
        {
          os_log_t v17 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          qword_100079AA0 = (uint64_t)v17;
        }

        uint64_t v18 = _SC_syslog_os_log_mapping(3LL);
        uint64_t v36 = _os_log_pack_size(12LL);
        uint64_t v20 = (char *)&v49[-1] - ((__chkstk_darwin(v36) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v37 = *__error();
        uint64_t v22 = _os_log_pack_fill(v20, v36, v37, &_mh_execute_header, "could not set non-blocking io, ioctl() failed: %s");
      }

      else
      {
        int v53 = 0x40000;
        if (!setsockopt(v16, 0xFFFF, 4098, &v53, 4u))
        {
          qword_100079AA8 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.KernelEventMonitor", 0LL);
          qword_100079AB0 = (uint64_t)dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_read,  v16,  0LL,  (dispatch_queue_t)qword_100079AA8);
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 0x40000000LL;
          handler[2] = sub_10000EFE8;
          handler[3] = &unk_1000721B0;
          int v52 = v16;
          dispatch_source_set_cancel_handler((dispatch_source_t)qword_100079AB0, handler);
          v49[0] = _NSConcreteStackBlock;
          v49[1] = 0x40000000LL;
          v49[2] = sub_10000F030;
          v49[3] = &unk_1000721D0;
          int v50 = v16;
          dispatch_source_set_event_handler((dispatch_source_t)qword_100079AB0, v49);
          return;
        }

        os_log_t v17 = (os_log_t)qword_100079AA0;
        if (!qword_100079AA0)
        {
          os_log_t v17 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          qword_100079AA0 = (uint64_t)v17;
        }

        uint64_t v18 = _SC_syslog_os_log_mapping(3LL);
        uint64_t v38 = _os_log_pack_size(12LL);
        uint64_t v20 = (char *)&v49[-1] - ((__chkstk_darwin(v38) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v39 = *__error();
        uint64_t v22 = _os_log_pack_fill( v20,  v38,  v39,  &_mh_execute_header,  "could not set socket receive buffer, setsockopt() failed: %s");
      }
    }

    uint64_t v40 = v22;
    CFTypeRef v41 = __error();
    uint64_t v42 = strerror(*v41);
    *(_DWORD *)uint64_t v40 = 136315138;
    *(void *)(v40 + 4) = v42;
    __SC_log_send(3LL, v17, v18, v20);
LABEL_37:
    close(v16);
LABEL_38:
    os_log_t v43 = (os_log_t)qword_100079AA0;
    if (!qword_100079AA0)
    {
      os_log_t v43 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_100079AA0 = (uint64_t)v43;
    }

    uint64_t v44 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v43, v44))
    {
      uint64_t v45 = _os_log_pack_size(2LL);
      v46 = (char *)&v49[-1] - ((__chkstk_darwin(v45) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v47 = __error();
      *(_WORD *)_os_log_pack_fill(v46, v45, *v47, &_mh_execute_header, "kernel event monitor disabled") = 0;
      __SC_log_send(3LL, v43, v44, v46);
    }

    CFRelease((CFTypeRef)qword_1000799F8);
    return;
  }

  os_log_t v23 = (os_log_t)qword_100079AA0;
  if (!qword_100079AA0)
  {
    os_log_t v23 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    qword_100079AA0 = (uint64_t)v23;
  }

  uint64_t v24 = _SC_syslog_os_log_mapping(3LL);
  if (__SC_log_enabled(3LL, v23, v24))
  {
    uint64_t v25 = _os_log_pack_size(2LL);
    int v26 = (char *)&v49[-1] - ((__chkstk_darwin(v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v27 = __error();
    *(_WORD *)_os_log_pack_fill(v26, v25, *v27, &_mh_execute_header, "kernel event monitor disabled") = 0;
    __SC_log_send(3LL, v23, v24, v26);
  }

uint64_t sub_10000EE88()
{
  qword_1000799F8 = (uint64_t)SCDynamicStoreCreate(0LL, @"Kernel Event Monitor plug-in", 0LL, 0LL);
  if (qword_1000799F8) {
    return 1LL;
  }
  os_log_t v1 = (os_log_t)qword_100079AA0;
  if (!qword_100079AA0)
  {
    os_log_t v1 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    qword_100079AA0 = (uint64_t)v1;
  }

  uint64_t v2 = _SC_syslog_os_log_mapping(3LL);
  uint64_t result = __SC_log_enabled(3LL, v1, v2);
  if ((_DWORD)result)
  {
    uint64_t v3 = _os_log_pack_size(12LL);
    uint64_t v4 = (char *)&v9 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v5 = __error();
    uint64_t v6 = _os_log_pack_fill(v4, v3, *v5, &_mh_execute_header, "SCDynamicStoreCreate() failed: %s", v9);
    int v7 = SCError();
    os_log_t v8 = SCErrorString(v7);
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v6 + 4) = v8;
    __SC_log_send(3LL, v1, v2, v4);
    return 0LL;
  }

  return result;
}

uint64_t sub_10000EFE8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void sub_10000F030(uint64_t a1)
{
  if (!sub_10000F160(*(_DWORD *)(a1 + 32)))
  {
    os_log_t v1 = (os_log_t)qword_100079AA0;
    if (!qword_100079AA0)
    {
      os_log_t v1 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_100079AA0 = (uint64_t)v1;
    }

    uint64_t v2 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v1, v2))
    {
      uint64_t v3 = _os_log_pack_size(2LL);
      uint64_t v4 = (char *)&v6 - ((__chkstk_darwin(v3) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v5 = __error();
      *(_WORD *)_os_log_pack_fill(v4, v3, *v5, &_mh_execute_header, "kernel event monitor disabled") = 0;
      __SC_log_send(3LL, v1, v2, v4);
    }

    dispatch_source_cancel((dispatch_source_t)qword_100079AB0);
  }

uint64_t sub_10000F160(int a1)
{
  ssize_t v1 = recv(a1, v21, 0x400uLL, 0);
  if (v1 == -1)
  {
    os_log_t v6 = (os_log_t)qword_100079AA0;
    if (!qword_100079AA0)
    {
      os_log_t v6 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_100079AA0 = (uint64_t)v6;
    }

    uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v6, v7);
    if ((_DWORD)result)
    {
      uint64_t v9 = _os_log_pack_size(12LL);
      uint64_t v10 = &v21[-((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
      int v11 = __error();
      uint64_t v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "recv() failed: %s", v20);
      uint64_t v13 = __error();
      uint64_t v14 = strerror(*v13);
      *(_DWORD *)uint64_t v12 = 136315138;
      *(void *)(v12 + 4) = v14;
      __SC_log_send(5LL, v6, v7, v10);
      return 0LL;
    }
  }

  else
  {
    uint64_t v2 = v1;
    _SCDynamicStoreCacheOpen(qword_1000799F8);
    if (v2 >= 1)
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = v21;
      while (1)
      {
        uint64_t v5 = v3 + *(unsigned int *)&v21[v3];
        if (v5 > v2) {
          break;
        }
        if (*((_DWORD *)v4 + 1) == 1 && *((_DWORD *)v4 + 2) == 1)
        {
          sub_10000F8D8(v4);
          uint64_t v5 = v3 + *(unsigned int *)&v21[v3];
        }

        uint64_t v4 = &v21[v5];
        uint64_t v3 = v5;
        if (v5 >= v2) {
          goto LABEL_18;
        }
      }

      os_log_t v15 = (os_log_t)qword_100079AA0;
      if (!qword_100079AA0)
      {
        os_log_t v15 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        qword_100079AA0 = (uint64_t)v15;
      }

      uint64_t v16 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v15, v16))
      {
        uint64_t v17 = _os_log_pack_size(2LL);
        uint64_t v18 = &v21[-((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
        uint64_t v19 = __error();
        *(_WORD *)_os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "missed SYSPROTO_EVENT event, buffer not big enough") = 0;
        __SC_log_send(5LL, v15, v16, v18);
      }
    }

LABEL_18:
    _SCDynamicStoreCacheCommitChanges(qword_1000799F8);
    _SCDynamicStoreCacheClose(qword_1000799F8);
    sub_10000F668();
    uint64_t result = 1LL;
    if (qword_100079AB8)
    {
      if (byte_100079AC0)
      {
        SCDynamicStoreSetValue(0LL, @"Plugin:KernelEventMonitor", (CFPropertyListRef)qword_100079AB8);
        byte_100079AC0 = 0;
        return 1LL;
      }
    }
  }

  return result;
}

          __SC_log_send(5LL, v16, v17, v19);
          goto LABEL_19;
        }

    uint64_t v19 = CFNumberCreate(0LL, kCFNumberSInt32Type, (char *)&v28 + 4);
    CFDictionarySetValue(context[5], v18, v19);
    CFRelease(v19);
LABEL_19:
    sub_10002B3F8(v18);
    if (qword_100079C48 && qword_100079C50) {
      dispatch_async((dispatch_queue_t)qword_100079C48, (dispatch_block_t)qword_100079C50);
    }
    sub_10002B4B0(v18);
    CFRelease(v18);
    goto LABEL_23;
  }

  if (v15)
  {
    context[5] = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint64_t v18 = (__CFString *)CFStringCreateWithCString(0LL, v13, 0x8000100u);
    goto LABEL_18;
  }

    *((void *)MutableBytePtr + 2) = a3;
    return v14;
  }

  xpc_release(v7);
LABEL_9:
  pid = xpc_connection_get_pid(a2);
  if (qword_100079EB0 != -1) {
    dispatch_once(&qword_100079EB0, &stru_100072F48);
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 0x40000000LL;
  v16[2] = sub_10005254C;
  v16[3] = &unk_100072FA8;
  uint64_t v17 = pid;
  dispatch_sync((dispatch_queue_t)qword_100079EC0, v16);
  return 0LL;
}

void sub_10000F430(uint64_t a1, int a2)
{
  uint64_t v21 = 0LL;
  if (getifaddrs(&v21) == -1)
  {
    int v11 = __error();
    uint64_t v12 = strerror(*v11);
    sub_10000E194((uint64_t)"getifaddrs", (uint64_t)v12);
    os_log_t v13 = (os_log_t)qword_100079AA0;
    if (!qword_100079AA0)
    {
      os_log_t v13 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_100079AA0 = (uint64_t)v13;
    }

    uint64_t v14 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v13, v14))
    {
      uint64_t v15 = _os_log_pack_size(12LL);
      uint64_t v16 = (char *)&v21 - ((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v17 = __error();
      uint64_t v18 = _os_log_pack_fill( v16,  v15,  *v17,  &_mh_execute_header,  "getifaddrs() failed: %s",  (const char *)v21);
      uint64_t v19 = __error();
      uint64_t v20 = strerror(*v19);
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v18 + 4) = v20;
      __SC_log_send(5LL, v13, v14, v16);
    }
  }

  else
  {
    uint64_t v4 = sub_100011A18();
    uint64_t v5 = v21;
    if (v21)
    {
      int v6 = 0;
      do
      {
        ifa_addr = v5->ifa_addr;
        if (ifa_addr && ifa_addr->sa_family == 18)
        {
          ifa_data = (unsigned __int8 *)v5->ifa_data;
          BOOL v9 = !ifa_data || *ifa_data != 254;
          if (sub_100011CAC(v4, v5->ifa_name))
          {
            sub_10000E194(a1, (uint64_t)v5->ifa_name);
            char v10 = !v9;
            if (a2) {
              char v10 = 1;
            }
            if ((v10 & 1) == 0) {
              sub_10000E3D8(v5->ifa_name);
            }
            int v6 = 1;
          }
        }

        uint64_t v5 = v5->ifa_next;
      }

      while (v5);
      if (v6) {
        sub_100011B5C(v4);
      }
    }

    CFRelease(v4);
    if (a2)
    {
      sub_1000128B4(v21, 0LL);
      sub_10001354C(v21, 0LL);
    }

    freeifaddrs(v21);
  }

  if (a2) {
    network_config_check_interface_settings(0LL);
  }
}

void sub_10000F668()
{
  if (byte_1000799F0)
  {
    uint32_t v0 = notify_post("com.apple.system.config.network_change");
    if (v0)
    {
      uint32_t v1 = v0;
      os_log_t v2 = (os_log_t)qword_100079AA0;
      if (!qword_100079AA0)
      {
        os_log_t v2 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        qword_100079AA0 = (uint64_t)v2;
      }

      uint64_t v3 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v2, v3))
      {
        uint64_t v4 = _os_log_pack_size(8LL);
        uint64_t v5 = (char *)&v8 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v6 = __error();
        uint64_t v7 = (_DWORD *)_os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "notify_post() failed: error=%u",  v8);
        _DWORD *v7 = 67109120;
        v7[1] = v1;
        __SC_log_send(5LL, v2, v3, v5);
      }
    }

    byte_1000799F0 = 0;
  }

void sub_10000F7B8()
{
  if (qword_100079AB8 && byte_100079AC0)
  {
    SCDynamicStoreSetValue(0LL, @"Plugin:KernelEventMonitor", (CFPropertyListRef)qword_100079AB8);
    byte_100079AC0 = 0;
  }

  if (dword_100079AC4 > 19)
  {
    if (qword_100079AB8)
    {
      CFRelease((CFTypeRef)qword_100079AB8);
      qword_100079AB8 = 0LL;
    }
  }

  else
  {
    dispatch_time_t v0 = dispatch_time(0LL, 6000000000LL);
    dispatch_after_f(v0, (dispatch_queue_t)qword_100079AA8, 0LL, (dispatch_function_t)sub_10000F7B8);
  }

void sub_10000F8D8(const char *a1)
{
  unint64_t v2 = *(unsigned int *)a1 - 24LL;
  switch(*((_DWORD *)a1 + 3))
  {
    case 1:
      switch(*((_DWORD *)a1 + 5))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          if (v2 < 0x34) {
            goto LABEL_121;
          }
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v3 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v3 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v3;
          }

          uint64_t v4 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v3, v4))
          {
            uint64_t v5 = _os_log_pack_size(18LL);
            int v6 = (char *)&v120 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v7 = __error();
            uint64_t v8 = _os_log_pack_fill( v6,  v5,  *v7,  &_mh_execute_header,  "Process IPv4 address change: %s: %u",  v120,  (_DWORD)__str);
            unsigned int v9 = *((_DWORD *)a1 + 5);
            *(_DWORD *)uint64_t v8 = 136315394;
            *(void *)(v8 + 4) = &__str;
            *(_WORD *)(v8 + 12) = 1024;
            *(_DWORD *)(v8 + 14) = v9;
            __SC_log_send(6LL, v3, v4, v6);
          }

          sub_1000128B4(0LL, (const char *)&__str);
          goto LABEL_76;
        case 7:
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v56 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v56 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v56;
          }

          uint64_t v57 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v56, v57))
          {
            uint64_t v58 = _os_log_pack_size(12LL);
            v59 = (char *)&v120 - ((__chkstk_darwin(v58) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            v60 = __error();
            uint64_t v61 = _os_log_pack_fill( v59,  v58,  *v60,  &_mh_execute_header,  "Process ARP collision: %s",  v120);
            *(_DWORD *)uint64_t v61 = 136315138;
            *(void *)(v61 + 4) = &__str;
            __SC_log_send(6LL, v56, v57, v59);
          }

          sub_100013100((char *)&__str, *((_DWORD *)a1 + 12), *((unsigned __int8 *)a1 + 52), (uint64_t)(a1 + 53));
          break;
        case 9:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v62 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v62 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v62;
          }

          uint64_t v63 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v62, v63))
          {
            uint64_t v64 = _os_log_pack_size(12LL);
            pid_t v65 = (char *)&v120 - ((__chkstk_darwin(v64) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            v66 = __error();
            uint64_t v67 = _os_log_pack_fill( v65,  v64,  *v66,  &_mh_execute_header,  "Process router ARP failure: %s",  v120);
            *(_DWORD *)uint64_t v67 = 136315138;
            *(void *)(v67 + 4) = &__str;
            __SC_log_send(6LL, v62, v63, v65);
          }

          sub_100013324((char *)&__str);
          break;
        case 0xA:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v68 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v68 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v68;
          }

          uint64_t v69 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v68, v69))
          {
            uint64_t v70 = _os_log_pack_size(12LL);
            v71 = (char *)&v120 - ((__chkstk_darwin(v70) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            int v72 = __error();
            uint64_t v73 = _os_log_pack_fill( v71,  v70,  *v72,  &_mh_execute_header,  "Process router ARP alive: %s",  v120);
            *(_DWORD *)uint64_t v73 = 136315138;
            *(void *)(v73 + 4) = &__str;
            __SC_log_send(6LL, v68, v69, v71);
          }

          sub_1000134F4((char *)&__str);
          break;
        default:
          return;
      }

      return;
    case 2:
      switch(*((_DWORD *)a1 + 5))
      {
        case 9:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v74 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v74 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v74;
          }

          uint64_t v75 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v74, v75))
          {
            uint64_t v76 = _os_log_pack_size(12LL);
            v77 = (char *)&v120 - ((__chkstk_darwin(v76) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            v78 = __error();
            uint64_t v79 = _os_log_pack_fill( v77,  v76,  *v78,  &_mh_execute_header,  "Process interface attach: %s",  v120);
            *(_DWORD *)uint64_t v79 = 136315138;
            *(void *)(v79 + 4) = &__str;
            __SC_log_send(6LL, v74, v75, v77);
          }

          sub_100011DF8((char *)&__str);
          break;
        case 0xA:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v80 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v80 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v80;
          }

          uint64_t v81 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v80, v81))
          {
            uint64_t v82 = _os_log_pack_size(12LL);
            __int128 v83 = (char *)&v120 - ((__chkstk_darwin(v82) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __int128 v84 = __error();
            uint64_t v85 = _os_log_pack_fill( v83,  v82,  *v84,  &_mh_execute_header,  "Process interface detaching: %s",  v120);
            *(_DWORD *)uint64_t v85 = 136315138;
            *(void *)(v85 + 4) = &__str;
            __SC_log_send(6LL, v80, v81, v83);
          }

          sub_1000115A8((const char *)&__str);
          break;
        case 0xB:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v86 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v86 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v86;
          }

          uint64_t v87 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v86, v87))
          {
            uint64_t v88 = _os_log_pack_size(12LL);
            __int128 v89 = (char *)&v120 - ((__chkstk_darwin(v88) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __int128 v90 = __error();
            uint64_t v91 = _os_log_pack_fill( v89,  v88,  *v90,  &_mh_execute_header,  "Process interface detach: %s",  v120);
            *(_DWORD *)uint64_t v91 = 136315138;
            *(void *)(v91 + 4) = &__str;
            __SC_log_send(6LL, v86, v87, v89);
          }

          sub_100011E98((const char *)&__str);
          break;
        case 0xC:
        case 0xD:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v10 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v10 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v10;
          }

          uint64_t v11 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v10, v11))
          {
            uint64_t v12 = _os_log_pack_size(22LL);
            os_log_t v13 = (char *)&v120 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v14 = __error();
            uint64_t v15 = _os_log_pack_fill( v13,  v12,  *v14,  &_mh_execute_header,  "Process interface link %s: %s",  v120,  __str);
            if (*((_DWORD *)a1 + 5) == 13) {
              uint64_t v16 = "up";
            }
            else {
              uint64_t v16 = "down";
            }
            *(_DWORD *)uint64_t v15 = 136315394;
            *(void *)(v15 + 4) = v16;
            *(_WORD *)(v15 + 12) = 2080;
            *(void *)(v15 + 14) = &__str;
            __SC_log_send(6LL, v10, v11, v13);
          }

          sub_100011744((char *)&__str, 0, 0);
          break;
        case 0xE:
        case 0xF:
          if (v2 < 0x20) {
            goto LABEL_121;
          }
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v47 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v47 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v47;
          }

          uint64_t v48 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v47, v48))
          {
            uint64_t v49 = _os_log_pack_size(34LL);
            int v50 = (char *)&v120 - ((__chkstk_darwin(v49) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v51 = __error();
            uint64_t v52 = _os_log_pack_fill( v50,  v49,  *v51,  &_mh_execute_header,  "Process protocol %s: %s (pf=%u, n=%u)",  v120,  __str,  v122,  v123);
            int v53 = "detach";
            unsigned int v54 = *((_DWORD *)a1 + 12);
            unsigned int v55 = *((_DWORD *)a1 + 13);
            if (*((_DWORD *)a1 + 5) == 14) {
              int v53 = "attach";
            }
            *(_DWORD *)uint64_t v52 = 136315906;
            *(void *)(v52 + 4) = v53;
            *(_WORD *)(v52 + 12) = 2080;
            *(void *)(v52 + 14) = &__str;
            *(_WORD *)(v52 + 22) = 1024;
            *(_DWORD *)(v52 + 24) = v54;
            *(_WORD *)(v52 + 28) = 1024;
            *(_DWORD *)(v52 + 3sub_10000F430((uint64_t)__str, 0) = v55;
            __SC_log_send(6LL, v47, v48, v50);
          }

          break;
        case 0x12:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v92 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v92 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v92;
          }

          uint64_t v93 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v92, v93))
          {
            uint64_t v94 = _os_log_pack_size(12LL);
            __int128 v95 = (char *)&v120 - ((__chkstk_darwin(v94) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            sigaction v96 = __error();
            uint64_t v97 = _os_log_pack_fill( v95,  v94,  *v96,  &_mh_execute_header,  "Process interface idle: %s",  v120);
            *(_DWORD *)uint64_t v97 = 136315138;
            *(void *)(v97 + 4) = &__str;
            __SC_log_send(6LL, v92, v93, v95);
          }

          sub_1000120D4((const char *)&__str);
          break;
        case 0x14:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v98 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v98 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v98;
          }

          uint64_t v99 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v98, v99))
          {
            uint64_t v100 = _os_log_pack_size(18LL);
            v101 = (char *)&v120 - ((__chkstk_darwin(v100) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            v102 = __error();
            uint64_t v103 = _os_log_pack_fill( v101,  v100,  *v102,  &_mh_execute_header,  "Process interface quality: %s (q=%d)",  v120,  (_DWORD)__str);
            unsigned int v104 = *((_DWORD *)a1 + 12);
            *(_DWORD *)uint64_t v103 = 136315394;
            *(void *)(v103 + 4) = &__str;
            *(_WORD *)(v103 + 12) = 1024;
            *(_DWORD *)(v103 + 14) = v104;
            __SC_log_send(6LL, v98, v99, v101);
          }

          sub_100011020((char *)&__str, *((_DWORD *)a1 + 12));
          break;
        case 0x18:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v105 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v105 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v105;
          }

          uint64_t v106 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v105, v106))
          {
            uint64_t v107 = _os_log_pack_size(12LL);
            v108 = (char *)&v120 - ((__chkstk_darwin(v107) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            v109 = __error();
            uint64_t v110 = _os_log_pack_fill( v108,  v107,  *v109,  &_mh_execute_header,  "Process interface link issues: %s",  v120);
            *(_DWORD *)uint64_t v110 = 136315138;
            *(void *)(v110 + 4) = &__str;
            __SC_log_send(6LL, v105, v106, v108);
          }

          uint64_t v112 = *((void *)a1 + 10);
          v111 = (unsigned int *)(a1 + 80);
          if (v112 ^ qword_100079AC8 | v111[2] ^ dword_100079AD0) {
            CFIndex v113 = 12LL;
          }
          else {
            CFIndex v113 = 0LL;
          }
          sub_100011344( (char *)&__str,  *((void *)v111 - 1),  (const UInt8 *)v111 - 32,  20LL,  (const UInt8 *)v111,  v113);
          break;
        case 0x19:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v114 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v114 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v114;
          }

          uint64_t v115 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v114, v115))
          {
            uint64_t v116 = _os_log_pack_size(12LL);
            v117 = (char *)&v120 - ((__chkstk_darwin(v116) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            v118 = __error();
            uint64_t v119 = _os_log_pack_fill( v117,  v116,  *v118,  &_mh_execute_header,  "Process interface delegation change: %s",  v120);
            *(_DWORD *)uint64_t v119 = 136315138;
            *(void *)(v119 + 4) = &__str;
            __SC_log_send(6LL, v114, v115, v117);
          }

          sub_100011F60((char *)&__str);
          break;
        default:
          return;
      }

      return;
    case 6:
      unsigned int v17 = *((_DWORD *)a1 + 5);
      if (v17 - 1 >= 5)
      {
        if (v17 == 7)
        {
          if (v2 < 0xA8) {
            goto LABEL_121;
          }
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v41 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v41 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v41;
          }

          uint64_t v42 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v41, v42))
          {
            uint64_t v43 = _os_log_pack_size(12LL);
            uint64_t v44 = (char *)&v120 - ((__chkstk_darwin(v43) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v45 = __error();
            uint64_t v46 = _os_log_pack_fill( v44,  v43,  *v45,  &_mh_execute_header,  "Process NAT64 prefix request: %s",  v120);
            *(_DWORD *)uint64_t v46 = 136315138;
            *(void *)(v46 + 4) = &__str;
            __SC_log_send(6LL, v41, v42, v44);
          }

          sub_100014414((char *)&__str);
        }
      }

      else
      {
        if (v2 < 0xA8) {
          goto LABEL_121;
        }
        snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
        os_log_t v18 = (os_log_t)qword_100079AA0;
        if (!qword_100079AA0)
        {
          os_log_t v18 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          qword_100079AA0 = (uint64_t)v18;
        }

        uint64_t v19 = _SC_syslog_os_log_mapping(6LL);
        if (__SC_log_enabled(6LL, v18, v19))
        {
          uint64_t v20 = _os_log_pack_size(18LL);
          uint64_t v21 = (char *)&v120 - ((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v22 = __error();
          uint64_t v23 = _os_log_pack_fill( v21,  v20,  *v22,  &_mh_execute_header,  "Process IPv6 address change: %s: %u",  v120,  (_DWORD)__str);
          unsigned int v24 = *((_DWORD *)a1 + 5);
          *(_DWORD *)uint64_t v23 = 136315394;
          *(void *)(v23 + 4) = &__str;
          *(_WORD *)(v23 + 12) = 1024;
          *(_DWORD *)(v23 + 14) = v24;
          __SC_log_send(6LL, v18, v19, v21);
        }

        sub_10001354C(0LL, (const char *)&__str);
        int v25 = *((_DWORD *)a1 + 5);
        if (v25 == 1)
        {
          if ((a1[164] & 4) != 0)
          {
            sub_1000142A0((char *)&__str, a1 + 56, 6, (uint64_t)(a1 + 184));
LABEL_76:
            int v25 = *((_DWORD *)a1 + 5);
          }

          else
          {
            int v25 = 1;
          }
        }

        if (v25 != 3)
        {
          if (qword_100079AB8) {
            sub_100011910((char *)&__str);
          }
        }
      }

      return;
    case 7:
      unsigned int v26 = *((_DWORD *)a1 + 5);
      if (v26 - 6 < 3)
      {
        if (v2 >= 0x2C)
        {
          snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          os_log_t v27 = (os_log_t)qword_100079AA0;
          if (!qword_100079AA0)
          {
            os_log_t v27 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
            qword_100079AA0 = (uint64_t)v27;
          }

          uint64_t v28 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v27, v28))
          {
            uint64_t v29 = _os_log_pack_size(18LL);
            uint64_t v30 = (char *)&v120 - ((__chkstk_darwin(v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            CFIndex v31 = __error();
            uint64_t v32 = _os_log_pack_fill( v30,  v29,  *v31,  &_mh_execute_header,  "Process ND6 address change: %s: %u",  v120,  (_DWORD)__str);
            unsigned int v33 = *((_DWORD *)a1 + 5);
            *(_DWORD *)uint64_t v32 = 136315394;
            *(void *)(v32 + 4) = &__str;
            *(_WORD *)(v32 + 12) = 1024;
            *(_DWORD *)(v32 + 14) = v33;
            __SC_log_send(6LL, v27, v28, v30);
          }

          sub_10001354C(0LL, (const char *)&__str);
          return;
        }

LABEL_121:
        sub_100010CD0((uint64_t)a1);
        return;
      }

      if (v26 != 9) {
        return;
      }
      if (v2 < 0x2C) {
        goto LABEL_121;
      }
      snprintf((char *)&__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
      os_log_t v34 = (os_log_t)qword_100079AA0;
      if (!qword_100079AA0)
      {
        os_log_t v34 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        qword_100079AA0 = (uint64_t)v34;
      }

      uint64_t v35 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v34, v35))
      {
        uint64_t v36 = _os_log_pack_size(18LL);
        uint64_t v37 = (char *)&v120 - ((__chkstk_darwin(v36) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v38 = __error();
        uint64_t v39 = _os_log_pack_fill( v37,  v36,  *v38,  &_mh_execute_header,  "Process IPv6 router expired: %s: %u",  v120,  (_DWORD)__str);
        unsigned int v40 = *((_DWORD *)a1 + 5);
        *(_DWORD *)uint64_t v39 = 136315394;
        *(void *)(v39 + 4) = &__str;
        *(_WORD *)(v39 + 12) = 1024;
        *(_DWORD *)(v39 + 14) = v40;
        __SC_log_send(6LL, v34, v35, v37);
      }

      sub_100014578((char *)&__str);
      return;
    default:
      return;
  }

uint64_t sub_100010CD0(uint64_t result)
{
  if (byte_100079A00)
  {
    uint32_t v1 = (int *)result;
    os_log_t v2 = (os_log_t)qword_100079AA0;
    if (!qword_100079AA0)
    {
      os_log_t v2 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_100079AA0 = (uint64_t)v2;
    }

    uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v2, v3))
    {
      uint64_t v4 = _os_log_pack_size(12LL);
      uint64_t v5 = (char *)&v30 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v6 = __error();
      uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%@ event:");
      *(_DWORD *)uint64_t v7 = 138412290;
      *(void *)(v7 + 4) = @"Error processing (Apple network subclass)";
      __SC_log_send(7LL, v2, v3, v5);
    }

    os_log_t v8 = (os_log_t)qword_100079AA0;
    if (!qword_100079AA0)
    {
      os_log_t v8 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      qword_100079AA0 = (uint64_t)v8;
    }

    uint64_t v9 = _SC_syslog_os_log_mapping(7LL);
    uint64_t result = __SC_log_enabled(7LL, v8, v9);
    if ((_DWORD)result)
    {
      uint64_t v11 = _os_log_pack_size(38LL);
      uint64_t v12 = (char *)&v30 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v13 = __error();
      uint64_t v14 = _os_log_pack_fill( v12,  v11,  *v13,  &_mh_execute_header,  "  Event size=%u, id=%u, vendor=%u, class=%u, subclass=%u, code=%u",  (_DWORD)v30,  DWORD2(v30),  v31,  v32,  v33,  v34);
      int v15 = *v1;
      int v16 = v1[1];
      int v17 = v1[2];
      int v18 = v1[3];
      int v19 = v1[4];
      int v20 = v1[5];
      *(_DWORD *)uint64_t v14 = 67110400;
      *(_DWORD *)(v14 + 4) = v15;
      *(_WORD *)(v14 + 8) = 1024;
      *(_DWORD *)(v14 + 1sub_10000F430((uint64_t)__str, 0) = v19;
      *(_WORD *)(v14 + 14) = 1024;
      *(_DWORD *)(v14 + 16) = v16;
      *(_WORD *)(v14 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = 1024;
      *(_DWORD *)(v14 + 22) = v17;
      *(_WORD *)(v14 + 26) = 1024;
      *(_DWORD *)(v14 + 28) = v18;
      *(_WORD *)(v14 + 32) = 1024;
      *(_DWORD *)(v14 + 34) = v20;
      uint64_t result = __SC_log_send(7LL, v8, v9, v12);
    }

    if (*v1 >= 0x19)
    {
      int v21 = 0;
      uint64_t v22 = 6LL;
      *(void *)&__int128 v10 = 67109376LL;
      __int128 v30 = v10;
      do
      {
        os_log_t v23 = (os_log_t)qword_100079AA0;
        if (!qword_100079AA0)
        {
          os_log_t v23 = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          qword_100079AA0 = (uint64_t)v23;
        }

        uint64_t v24 = _SC_syslog_os_log_mapping(7LL);
        uint64_t result = __SC_log_enabled(7LL, v23, v24);
        if ((_DWORD)result)
        {
          uint64_t v25 = _os_log_pack_size(14LL);
          unsigned int v26 = (char *)&v30 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
          os_log_t v27 = __error();
          uint64_t v28 = _os_log_pack_fill( v26,  v25,  *v27,  &_mh_execute_header,  "  Event data[%2d] = %08x",  (_DWORD)v30,  DWORD2(v30));
          int v29 = v1[v22];
          *(_DWORD *)uint64_t v28 = v30;
          *(_DWORD *)(v28 + 4) = v21;
          *(_WORD *)(v28 + 8) = 1024;
          *(_DWORD *)(v28 + 1sub_10000F430((uint64_t)__str, 0) = v29;
          uint64_t result = __SC_log_send(7LL, v23, v24, v26);
        }

        ++v22;
        ++v21;
      }

      while ((v22 * 4) < *v1);
    }
  }

  return result;
}

void sub_100011020(char *cStr, int a2)
{
  HIDWORD(v21) = a2;
  uint64_t v4 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v4,  kSCEntNetLinkQuality);
  int v6 = sub_1000112C8(NetworkInterfaceEntity);
  uint64_t v7 = v6;
  if (a2 == -1)
  {
    CFDictionaryRemoveValue(v6, kSCPropNetLinkQuality);
  }

  else
  {
    CFNumberRef v8 = CFNumberCreate(0LL, kCFNumberIntType, (char *)&v21 + 4);
    CFDictionarySetValue(v7, kSCPropNetLinkQuality, v8);
    CFRelease(v8);
  }

  CFIndex Count = CFDictionaryGetCount(v7);
  os_log_t v10 = sub_10000E124();
  uint64_t v11 = _SC_syslog_os_log_mapping(7LL);
  int v12 = __SC_log_enabled(7LL, v10, v11);
  if (Count < 1)
  {
    if (v12)
    {
      uint64_t v17 = _os_log_pack_size(12LL);
      int v18 = (char *)&v21 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v19 = __error();
      uint64_t v20 = _os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "Update interface link quality: %s: <unknown>",  v21);
      *(_DWORD *)uint64_t v20 = 136315138;
      *(void *)(v20 + 4) = cStr;
      __SC_log_send(7LL, v10, v11, v18);
    }

    SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity);
  }

  else
  {
    if (v12)
    {
      uint64_t v13 = _os_log_pack_size(22LL);
      uint64_t v14 = (char *)&v21 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v15 = __error();
      uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "Update interface link quality: %s: %@");
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)(v16 + 4) = cStr;
      *(_WORD *)(v16 + 12) = 2112;
      *(void *)(v16 + 14) = v7;
      __SC_log_send(7LL, v10, v11, v14);
    }

    SCDynamicStoreSetValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity, v7);
  }

  CFRelease(v4);
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v7);
}

CFMutableDictionaryRef sub_1000112C8(CFStringRef key)
{
  uint32_t v1 = (const __CFDictionary *)SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_1000799F8, key);
  CFMutableDictionaryRef v2 = sub_1000122B8(v1);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

void sub_100011344( char *cStr, unint64_t a2, const UInt8 *a3, CFIndex a4, const UInt8 *a5, CFIndex a6)
{
  int v12 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v12,  kSCEntNetLinkIssues);
  uint64_t v14 = sub_1000112C8(NetworkInterfaceEntity);
  CFDataRef v15 = CFDataCreate(0LL, a3, a4);
  CFDictionarySetValue(v14, kSCPropNetLinkIssuesModuleID, v15);
  CFRelease(v15);
  if (a6)
  {
    CFDataRef v16 = CFDataCreate(0LL, a5, a6);
    CFDictionarySetValue(v14, kSCPropNetLinkIssuesInfo, v16);
    CFRelease(v16);
  }

  else
  {
    CFDictionaryRemoveValue(v14, kSCPropNetLinkIssuesInfo);
  }

  CFDateRef v17 = CFDateCreate(0LL, (double)a2);
  CFDictionarySetValue(v14, kSCPropNetLinkIssuesTimeStamp, v17);
  CFRelease(v17);
  os_log_t v18 = sub_10000E124();
  uint64_t v19 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v18, v19))
  {
    uint64_t v20 = _os_log_pack_size(22LL);
    int v21 = (char *)&v24 - ((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v22 = __error();
    uint64_t v23 = _os_log_pack_fill(v21, v20, *v22, &_mh_execute_header, "Update interface link issues: %s: %@");
    *(_DWORD *)uint64_t v23 = 136315394;
    *(void *)(v23 + 4) = cStr;
    *(_WORD *)(v23 + 12) = 2112;
    *(void *)(v23 + 14) = v14;
    __SC_log_send(7LL, v18, v19, v21);
  }

  SCDynamicStoreSetValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity, v14);
  CFRelease(v12);
  CFRelease(v14);
  CFRelease(NetworkInterfaceEntity);
}

void sub_1000115A8(const char *a1)
{
  os_log_t v2 = sub_10000E124();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(12LL);
    uint64_t v5 = (char *)&v11 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    int v6 = __error();
    uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "Detach interface: %s", v11);
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = a1;
    __SC_log_send(7LL, v2, v3, v5);
  }

  CFNumberRef v8 = CFStringCreateWithCString(0LL, a1, 0x8000100u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v8,  kSCEntNetLink);
  os_log_t v10 = sub_1000112C8(NetworkInterfaceEntity);
  CFDictionarySetValue(v10, kSCPropNetLinkDetaching, kCFBooleanTrue);
  SCDynamicStoreSetValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity, v10);
  CFRelease(v8);
  CFRelease(v10);
  CFRelease(NetworkInterfaceEntity);
}

void sub_100011744(char *cStr, int a2, int a3)
{
  int v6 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  sub_1000117D4(cStr, v6, a2, a3);
  CFRelease(v6);
}

uint64_t sub_1000117D4(char *a1, const __CFString *a2, int a3, int a4)
{
  uint64_t result = sub_10000E288(2);
  if ((_DWORD)result != -1)
  {
    int v9 = result;
    memset(v13, 0, 44);
    __strlcpy_chk(v13, a1, 16LL, 16LL);
    CFBooleanRef v10 = 0LL;
    if (ioctl(v9, 0xC02C6948uLL, v13) != -1 && LODWORD(v13[2]))
    {
      if ((BYTE8(v13[1]) & 1) != 0)
      {
        if ((BYTE8(v13[1]) & 2) != 0) {
          uint64_t v11 = &kCFBooleanTrue;
        }
        else {
          uint64_t v11 = &kCFBooleanFalse;
        }
        CFBooleanRef v10 = *v11;
        if (*v11 && !CFBooleanGetValue(*v11))
        {
          int v12 = 0LL;
          goto LABEL_12;
        }
      }

      else
      {
        CFBooleanRef v10 = 0LL;
      }
    }

    int v12 = sub_1000146DC(a1);
LABEL_12:
    sub_100012370((uint64_t)a1, a2, v10, a3, v12, a4);
    return close(v9);
  }

  return result;
}

void sub_100011910(char *cStr)
{
  os_log_t v2 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v2,  kSCEntNetLink);
  CFPropertyListRef v4 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity);
  if (v4) {
    goto LABEL_4;
  }
  sub_1000117D4(cStr, v2, 0, 0);
  CFPropertyListRef v5 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity);
  if (v5)
  {
    CFPropertyListRef v4 = v5;
    sub_10000E194((uint64_t)"added missing link status", (uint64_t)cStr);
LABEL_4:
    CFRelease(v4);
  }

  CFRelease(v2);
  CFRelease(NetworkInterfaceEntity);
}

CFMutableArrayRef sub_100011A18()
{
  NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(0LL, kSCDynamicStoreDomainState);
  CFPropertyListRef v1 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterface);
  CFRelease(NetworkInterface);
  if (v1)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v1) == TypeID
      && (CFTypeRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v1, kSCPropNetInterfaces),
          CFTypeID v4 = CFArrayGetTypeID(),
          Value)
      && CFGetTypeID(Value) == v4)
    {
      MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0LL, 0LL, Value);
      CFRelease(v1);
      if (MutableCopy) {
        return MutableCopy;
      }
    }

    else
    {
      CFRelease(v1);
    }
  }

  return CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
}

void sub_100011B5C(const void *a1)
{
  int v9 = a1;
  NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(0LL, kSCDynamicStoreDomainState);
  CFPropertyListRef v3 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterface);
  if (!v3) {
    goto LABEL_5;
  }
  CFTypeID v4 = v3;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(v4) != TypeID)
  {
    CFRelease(v4);
LABEL_5:
    CFDictionaryRef v8 = CFDictionaryCreate( 0LL,  (const void **)&kSCPropNetInterfaces,  &v9,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    SCDynamicStoreSetValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterface, v8);
    CFDictionaryRef v7 = v8;
    goto LABEL_6;
  }

  MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)v4);
  CFRelease(v4);
  CFDictionarySetValue(MutableCopy, kSCPropNetInterfaces, a1);
  SCDynamicStoreSetValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterface, MutableCopy);
  CFDictionaryRef v7 = MutableCopy;
LABEL_6:
  CFRelease(v7);
  CFRelease(NetworkInterface);
}

uint64_t sub_100011CAC(const __CFArray *a1, char *a2)
{
  CFStringRef v4 = CFStringCreateWithCString(0LL, a2, 0x8000100u);
  v12.length = CFArrayGetCount(a1);
  v12.location = 0LL;
  if (CFArrayContainsValue(a1, v12, v4))
  {
    sub_100011744(a2, 0, 1);
    uint64_t v5 = 0LL;
  }

  else
  {
    CFArrayAppendValue(a1, v4);
    sub_100011744(a2, 1, 0);
    int v6 = sub_10000E288(2);
    if (v6 == -1)
    {
      sub_100011020(a2, -1);
    }

    else
    {
      int v7 = v6;
      *(_OWORD *)__str = 0u;
      __int128 v11 = 0u;
      snprintf(__str, 0x10uLL, "%s", a2);
      if (ioctl(v7, 0xC020698AuLL, __str) == -1) {
        int v8 = -1;
      }
      else {
        int v8 = v11;
      }
      sub_100011020(a2, v8);
      close(v7);
    }

    uint64_t v5 = 1LL;
  }

  CFRelease(v4);
  return v5;
}

void sub_100011DF8(char *a1)
{
  CFMutableArrayRef v2 = sub_100011A18();
  if (sub_100011CAC(v2, a1))
  {
    sub_10000E194((uint64_t)"link_add", (uint64_t)a1);
    sub_100011B5C(v2);
    if (strncmp(a1, "pktap", 5uLL)) {
      sub_10000E3D8(a1);
    }
  }

  CFRelease(v2);
}

void sub_100011E98(const char *a1)
{
  CFMutableArrayRef v2 = sub_100011A18();
  CFStringRef v3 = CFStringCreateWithCString(0LL, a1, 0x8000100u);
  v5.length = CFArrayGetCount(v2);
  v5.location = 0LL;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v2, v5, v3);
  CFRelease(v3);
  if (FirstIndexOfValue != -1)
  {
    CFArrayRemoveValueAtIndex(v2, FirstIndexOfValue);
    sub_1000126A8(a1);
    sub_100011B5C(v2);
  }

  CFRelease(v2);
}

void sub_100011F60(char *cStr)
{
  CFMutableArrayRef v2 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v2,  kSCEntNetInterfaceDelegation);
  os_log_t v4 = sub_10000E124();
  uint64_t v5 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v4, v5))
  {
    uint64_t v6 = _os_log_pack_size(12LL);
    int v7 = (char *)&v10 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    int v8 = __error();
    uint64_t v9 = _os_log_pack_fill(v7, v6, *v8, &_mh_execute_header, "Post interface delegation change: %s", v10);
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v9 + 4) = cStr;
    __SC_log_send(7LL, v4, v5, v7);
  }

  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v2);
}

void sub_1000120D4(const char *a1)
{
  int v2 = sub_10000E288(2);
  if (v2 != -1)
  {
    int v3 = v2;
    *(_OWORD *)__str = 0u;
    __int128 v15 = 0u;
    snprintf(__str, 0x10uLL, "%s", a1);
    int v4 = ioctl(v3, 0xC0206989uLL, __str);
    int v5 = v15;
    close(v3);
    if (v4 != -1 && !v5)
    {
      uint64_t v6 = CFStringCreateWithCString(0LL, a1, 0x8000100u);
      NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v6,  kSCEntNetIdleRoute);
      os_log_t v8 = sub_10000E124();
      uint64_t v9 = _SC_syslog_os_log_mapping(7LL);
      if (__SC_log_enabled(7LL, v8, v9))
      {
        uint64_t v10 = _os_log_pack_size(12LL);
        __int128 v11 = &__str[-((__chkstk_darwin(v10) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        CFRange v12 = __error();
        uint64_t v13 = _os_log_pack_fill( v11,  v10,  *v12,  &_mh_execute_header,  "Post interface idle: %s",  *(const char **)__str);
        *(_DWORD *)uint64_t v13 = 136315138;
        *(void *)(v13 + 4) = a1;
        __SC_log_send(7LL, v8, v9, v11);
      }

      SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity);
      CFRelease(NetworkInterfaceEntity);
      CFRelease(v6);
    }
  }

CFMutableDictionaryRef sub_1000122B8(const __CFDictionary *a1)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID) {
    return CFDictionaryCreateMutableCopy(0LL, 0LL, a1);
  }
  else {
    return CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
}

void sub_100012370(uint64_t a1, CFStringRef ifname, const void *a3, int a4, const void *a5, int a6)
{
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  ifname,  kSCEntNetLink);
  CFPropertyListRef v12 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity);
  if (v12)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v12) != TypeID)
    {
      CFRelease(v12);
      CFPropertyListRef v12 = 0LL;
    }
  }

  uint64_t v14 = sub_1000122B8((const __CFDictionary *)v12);
  __int128 v15 = v14;
  if (!a3)
  {
    CFDictionaryRemoveValue(v14, kSCPropNetLinkActive);
    if (!a4) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  CFDictionarySetValue(v14, kSCPropNetLinkActive, a3);
  if (a4) {
LABEL_6:
  }
    CFDictionaryRemoveValue(v15, kSCPropNetLinkDetaching);
LABEL_7:
  if (a5 && CFBooleanGetValue((CFBooleanRef)a5)) {
    CFDictionarySetValue(v15, kSCPropNetLinkExpensive, a5);
  }
  else {
    CFDictionaryRemoveValue(v15, kSCPropNetLinkExpensive);
  }
  if (CFDictionaryGetCount(v15) < 1)
  {
    if (!a6 || v12)
    {
      os_log_t v22 = sub_10000E124();
      uint64_t v23 = _SC_syslog_os_log_mapping(7LL);
      if (__SC_log_enabled(7LL, v22, v23))
      {
        uint64_t v24 = _os_log_pack_size(12LL);
        uint64_t v25 = (char *)&v28 - ((__chkstk_darwin(v24) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        unsigned int v26 = __error();
        uint64_t v27 = _os_log_pack_fill( v25,  v24,  *v26,  &_mh_execute_header,  "Update interface link status: %s: <removed>",  v28);
        *(_DWORD *)uint64_t v27 = 136315138;
        *(void *)(v27 + 4) = a1;
        __SC_log_send(7LL, v22, v23, v25);
      }

      SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity);
    }
  }

  else if (!a6 || !v12 || !CFEqual(v12, v15))
  {
    os_log_t v16 = sub_10000E124();
    uint64_t v17 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v16, v17))
    {
      uint64_t v18 = _os_log_pack_size(22LL);
      uint64_t v19 = (char *)&v28 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v20 = __error();
      uint64_t v21 = _os_log_pack_fill(v19, v18, *v20, &_mh_execute_header, "Update interface link status: %s: %@");
      *(_DWORD *)uint64_t v21 = 136315394;
      *(void *)(v21 + 4) = a1;
      *(_WORD *)(v21 + 12) = 2112;
      *(void *)(v21 + 14) = v15;
      __SC_log_send(7LL, v16, v17, v19);
    }

    SCDynamicStoreSetValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity, v15);
  }

  CFRelease(NetworkInterfaceEntity);
  CFRelease(v15);
  if (v12) {
    CFRelease(v12);
  }
}

void sub_1000126A8(const char *a1)
{
  os_log_t v2 = sub_10000E124();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(12LL);
    int v5 = (char *)&v13 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "Remove interface: %s", v13);
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = a1;
    __SC_log_send(7LL, v2, v3, v5);
  }

  os_log_t v8 = CFStringCreateWithCString(0LL, a1, 0x8000100u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v8,  kSCEntNetLink);
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  uint64_t v10 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0LL, kSCDynamicStoreDomainState, v8, kSCEntNetNAT64);
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_1000799F8, v10);
  CFRelease(v10);
  __int128 v11 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0LL, kSCDynamicStoreDomainState, v8, kSCEntNetLinkQuality);
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_1000799F8, v11);
  CFRelease(v11);
  CFPropertyListRef v12 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0LL, kSCDynamicStoreDomainState, v8, kSCEntNetLinkIssues);
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_1000799F8, v12);
  CFRelease(v12);
  CFRelease(v8);
}

void sub_1000128B4(ifaddrs *a1, const char *a2)
{
  uint64_t v28 = 0LL;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int v5 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!a1)
  {
    if (getifaddrs(&v28) == -1)
    {
      os_log_t v16 = sub_10000E124();
      uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v16, v17))
      {
        uint64_t v18 = _os_log_pack_size(12LL);
        uint64_t v19 = (char *)&v24 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v20 = __error();
        uint64_t v21 = _os_log_pack_fill(v19, v18, *v20, &_mh_execute_header, "getifaddrs() failed: %s", v24);
        os_log_t v22 = __error();
        uint64_t v23 = strerror(*v22);
        *(_DWORD *)uint64_t v21 = 136315138;
        *(void *)(v21 + 4) = v23;
        __SC_log_send(5LL, v16, v17, v19);
      }

      goto LABEL_16;
    }

    a1 = v28;
    if (!v28)
    {
      int v25 = 0;
      if (a2) {
        goto LABEL_13;
      }
      goto LABEL_15;
    }
  }

  int v25 = 0;
  CFStringRef v27 = kSCPropNetIPv4DestAddresses;
  CFStringRef v26 = kSCPropNetIPv4BroadcastAddresses;
  do
  {
    if (a1->ifa_addr->sa_family != 2) {
      goto LABEL_11;
    }
    ifa_name = a1->ifa_name;
    if (a2)
    {
      if (strncmp(a2, a1->ifa_name, 0x10uLL)) {
        goto LABEL_11;
      }
      int v25 = 1;
    }

    uint64_t v7 = CFStringCreateWithCString(0LL, ifa_name, 0);
    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v7,  kSCEntNetIPv4);
    CFRelease(v7);
    uint64_t v9 = sub_100012C48(NetworkInterfaceEntity, Mutable, v5);
    sub_100012DB8(v9, kSCPropNetIPv4Addresses, (unsigned __int8 *)&a1->ifa_addr->sa_data[2]);
    uint64_t v10 = (unsigned __int8 *)&a1->ifa_dstaddr->sa_data[2];
    if ((a1->ifa_flags & 0x10) != 0)
    {
      __int128 v11 = v9;
      CFStringRef v12 = v27;
    }

    else
    {
      sub_100012DB8(v9, v26, v10);
      uint64_t v10 = (unsigned __int8 *)&a1->ifa_netmask->sa_data[2];
      __int128 v11 = v9;
      CFStringRef v12 = kSCPropNetIPv4SubnetMasks;
    }

    sub_100012DB8(v11, v12, v10);
    CFDictionarySetValue(v5, NetworkInterfaceEntity, v9);
    CFRelease(v9);
    CFRelease(NetworkInterfaceEntity);
LABEL_11:
    a1 = a1->ifa_next;
  }

  while (a1);
  if (a2)
  {
LABEL_13:
    if (!v25)
    {
      uint64_t v13 = CFStringCreateWithCString(0LL, a2, 0);
      uint64_t v14 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0LL, kSCDynamicStoreDomainState, v13, kSCEntNetIPv4);
      CFRelease(v13);
      CFMutableDictionaryRef v15 = sub_100012C48(v14, Mutable, v5);
      CFDictionarySetValue(v5, v14, v15);
      CFRelease(v15);
      CFRelease(v14);
    }
  }

CFMutableDictionaryRef sub_100012C48(const __CFString *key, __CFDictionary *a2, CFDictionaryRef theDict)
{
  CFDictionaryRef theDicta = 0LL;
  if (CFDictionaryGetValueIfPresent(theDict, key, (const void **)&theDicta))
  {
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, theDicta);
    if (!MutableCopy) {
      return CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
  }

  else
  {
    uint64_t v6 = (const __CFDictionary *)SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_1000799F8, key);
    CFDictionaryRef theDicta = v6;
    if (!v6) {
      return CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    CFDictionarySetValue(a2, key, v6);
    MutableCFArrayRef Copy = theDicta;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (MutableCopy)
    {
      if (CFGetTypeID(MutableCopy) == TypeID)
      {
        MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, theDicta);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv4Addresses);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv4SubnetMasks);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv4DestAddresses);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv4BroadcastAddresses);
      }

      else
      {
        MutableCFArrayRef Copy = 0LL;
      }
    }

    CFRelease(theDicta);
    if (!MutableCopy) {
      return CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
  }

  return MutableCopy;
}

void sub_100012DB8(const __CFDictionary *a1, const void *a2, unsigned __int8 *a3)
{
  CFTypeRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (Value) {
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0LL, 0LL, Value);
  }
  else {
    MutableCFArrayRef Copy = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  }
  os_log_t v8 = MutableCopy;
  CFStringRef v9 = CFStringCreateWithFormat(0LL, 0LL, @"%d.%d.%d.%d", *a3, a3[1], a3[2], a3[3]);
  CFArrayAppendValue(v8, v9);
  CFRelease(v9);
  CFDictionarySetValue(a1, a2, v8);
  CFRelease(v8);
}

uint64_t sub_100012EA0(const __CFString *key, const void *a2, CFDictionaryRef theDict)
{
  CFTypeRef Value = CFDictionaryGetValue(theDict, key);
  if (Value)
  {
    uint64_t result = CFEqual(Value, a2);
    if ((_DWORD)result) {
      return result;
    }
    if (CFDictionaryGetCount((CFDictionaryRef)a2) < 1)
    {
      CFPropertyListRef v7 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_1000799F8, key);
      if (v7)
      {
        os_log_t v8 = v7;
        os_log_t v9 = sub_10000E124();
        uint64_t v10 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v9, v10))
        {
          uint64_t v11 = _os_log_pack_size(12LL);
          CFStringRef v12 = (char *)&v21 - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v13 = __error();
          uint64_t v14 = _os_log_pack_fill( v12,  v11,  *v13,  &_mh_execute_header,  "Update interface configuration: %@: <removed>");
          *(_DWORD *)uint64_t v14 = 138412290;
          *(void *)(v14 + 4) = key;
          __SC_log_send(7LL, v9, v10, v12);
        }

        CFRelease(v8);
      }

      uint64_t result = SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_1000799F8, key);
      goto LABEL_13;
    }

void sub_100013100(char *cStr, int a2, int a3, uint64_t a4)
{
  CFPropertyListRef v7 = CFStringCreateWithCString(0LL, cStr, 0x600u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v7,  kSCEntNetIPv4ARPCollision);
  MutableCFArrayRef Copy = CFStringCreateMutableCopy(0LL, 0LL, NetworkInterfaceEntity);
  CFStringAppendFormat(MutableCopy, 0LL, @"/%d.%d.%d.%d", a2, BYTE1(a2), BYTE2(a2), HIBYTE(a2));
  if (a3 >= 1)
  {
    uint64_t v10 = 0LL;
    do
    {
      if (v10) {
        uint64_t v11 = ":";
      }
      else {
        uint64_t v11 = "/";
      }
      CFStringAppendFormat(MutableCopy, 0LL, @"%s%02x", v11, *(unsigned __int8 *)(a4 + v10++));
    }

    while (a3 != v10);
  }

  os_log_t v12 = sub_10000E124();
  uint64_t v13 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v12, v13))
  {
    uint64_t v14 = _os_log_pack_size(12LL);
    os_log_t v15 = (char *)&v18 - ((__chkstk_darwin(v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v16 = __error();
    uint64_t v17 = _os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "Post ARP collision: %@");
    *(_DWORD *)uint64_t v17 = 138412290;
    *(void *)(v17 + 4) = MutableCopy;
    __SC_log_send(7LL, v12, v13, v15);
  }

  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_1000799F8, MutableCopy);
  CFRelease(MutableCopy);
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v7);
}

void sub_100013324(char *a1)
{
}

void sub_10001337C(char *cStr, uint64_t a2, const __CFString *a3)
{
  int v5 = CFStringCreateWithCString(0LL, cStr, 0x600u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0LL, kSCDynamicStoreDomainState, v5, a3);
  CFRelease(v5);
  os_log_t v7 = sub_10000E124();
  uint64_t v8 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v7, v8))
  {
    uint64_t v9 = _os_log_pack_size(22LL);
    uint64_t v10 = (char *)&v13 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v11 = __error();
    uint64_t v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "Post %s: %@");
    *(_DWORD *)uint64_t v12 = 136315394;
    *(void *)(v12 + 4) = a2;
    *(_WORD *)(v12 + 12) = 2112;
    *(void *)(v12 + 14) = NetworkInterfaceEntity;
    __SC_log_send(7LL, v7, v8, v10);
  }

  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

void sub_1000134F4(char *a1)
{
}

void sub_10001354C(ifaddrs *a1, const char *a2)
{
  os_log_t v74 = 0LL;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v73 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!a1)
  {
    if (getifaddrs(&v74) == -1)
    {
      os_log_t v53 = sub_10000E124();
      uint64_t v54 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v53, v54))
      {
        uint64_t v55 = _os_log_pack_size(12LL);
        os_log_t v56 = (char *)&v61 - ((__chkstk_darwin(v55) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v57 = __error();
        uint64_t v58 = _os_log_pack_fill( v56,  v55,  *v57,  &_mh_execute_header,  "getifaddrs() failed: %s",  (const char *)v61);
        v59 = __error();
        v60 = strerror(*v59);
        *(_DWORD *)uint64_t v58 = 136315138;
        *(void *)(v58 + 4) = v60;
        __SC_log_send(5LL, v53, v54, v56);
      }

      int v6 = -1;
      goto LABEL_72;
    }

    a1 = v74;
    if (!v74)
    {
      int v64 = 0;
      int v6 = -1;
      if (a2) {
        goto LABEL_69;
      }
      goto LABEL_71;
    }
  }

  int v64 = 0;
  CFStringRef v67 = kSCEntNetIPv6;
  CFStringRef v68 = kSCDynamicStoreDomainState;
  CFStringRef v65 = kSCPropNetIPv6Addresses;
  v66 = v77;
  CFStringRef v5 = kSCPropNetIPv6PrefixLength;
  CFStringRef v72 = kSCPropNetIPv6Flags;
  CFStringRef v62 = kSCPropNetIPv6DestAddresses;
  int v6 = -1;
  *(void *)&__int128 v4 = 136315138LL;
  __int128 v61 = v4;
  uint64_t v69 = a2;
  do
  {
    if (a1->ifa_addr->sa_family != 30) {
      goto LABEL_67;
    }
    if (a2)
    {
      if (strncmp(a2, a1->ifa_name, 0x10uLL)) {
        goto LABEL_67;
      }
      int v64 = 1;
    }

    if (v6 == -1)
    {
      int v6 = sub_10000E288(30);
      if (v6 == -1) {
        goto LABEL_72;
      }
    }

    os_log_t v7 = v5;
    uint64_t v8 = CFStringCreateWithCString(0LL, a1->ifa_name, 0);
    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0LL, v68, v8, v67);
    CFRelease(v8);
    uint64_t v10 = sub_100013CFC(NetworkInterfaceEntity, Mutable, v73);
    uint64_t ifa_addr = (uint64_t)a1->ifa_addr;
    int v12 = *(unsigned __int8 *)(ifa_addr + 8);
    if (v12 == 255)
    {
      if ((*(_BYTE *)(ifa_addr + 9) & 0xF0) != 0x30 && (*(_BYTE *)(ifa_addr + 9) & 0xF) == 2)
      {
LABEL_18:
        unsigned int v14 = *(unsigned __int16 *)(ifa_addr + 10);
        if (*(_WORD *)(ifa_addr + 10))
        {
          *(_WORD *)(ifa_addr + 1sub_10000F430((uint64_t)__str, 0) = 0;
          if (!*(_DWORD *)(ifa_addr + 24)) {
            *(_DWORD *)(ifa_addr + 24) = __rev16(v14);
          }
        }
      }
    }

    else if (v12 == 254 && (*(_BYTE *)(ifa_addr + 9) & 0xC0) == 0x80)
    {
      goto LABEL_18;
    }

    __int128 v76 = 0u;
    memset(v77, 0, sizeof(v77));
    __strlcpy_chk(&v76, a1->ifa_name, 16LL, 16LL);
    __int128 v15 = *(_OWORD *)(ifa_addr + 12);
    uint64_t v16 = v66;
    _OWORD *v66 = *(_OWORD *)ifa_addr;
    *(_OWORD *)((char *)v16 + 12) = v15;
    int v71 = v6;
    if (ioctl(v6, 0xC1206949uLL, &v76) == -1)
    {
      os_log_t v17 = sub_10000E124();
      uint64_t v18 = *__error() == 49 ? 7LL : 5LL;
      uint64_t v19 = _SC_syslog_os_log_mapping(v18);
      uint64_t v20 = *__error() == 49 ? 7LL : 5LL;
      if (__SC_log_enabled(v20, v17, v19))
      {
        uint64_t v21 = _os_log_pack_size(12LL);
        uint64_t v63 = &v61;
        os_log_t v22 = (char *)&v61 - ((__chkstk_darwin(v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v23 = __error();
        uint64_t v24 = _os_log_pack_fill( v22,  v21,  *v23,  &_mh_execute_header,  "ioctl() failed: %s",  (const char *)v61);
        int v25 = __error();
        CFStringRef v26 = strerror(*v25);
        *(_DWORD *)uint64_t v24 = v61;
        *(void *)(v24 + 4) = v26;
        if (*__error() == 49) {
          uint64_t v27 = 7LL;
        }
        else {
          uint64_t v27 = 5LL;
        }
        __SC_log_send(v27, v17, v19, v22);
      }
    }

    sub_100013E6C(v10, v65, ifa_addr);
    uint64_t v28 = 0LL;
    int v29 = 0;
    ifa_netmask = a1->ifa_netmask;
    int v31 = &ifa_netmask->sa_data[6];
    CFStringRef v5 = v7;
    while (v31[v28] == 255)
    {
      ++v28;
      v29 += 8;
      if (v28 == 16)
      {
        int v75 = 128;
        goto LABEL_48;
      }
    }

    int v75 = v29;
    int v32 = 0;
    unsigned int v33 = v31[v28];
    while (1)
    {
      int v34 = v32 + 7;
      if (((v33 >> (v32 + 7)) & 1) == 0) {
        break;
      }
      if (--v32 == -7)
      {
        int v75 = v29 + 7;
LABEL_44:
        uint64_t v35 = &ifa_netmask->sa_data[7];
        while (v28 != 15)
        {
          if (v35[v28++]) {
            goto LABEL_47;
          }
        }

        goto LABEL_48;
      }
    }

    int v75 = v29 - v32;
    while (((v33 >> v34) & 1) == 0)
    {
      if (!--v34) {
        goto LABEL_44;
      }
    }

LABEL_71:
  CFDictionaryApplyFunction(v73, (CFDictionaryApplierFunction)sub_100014038, Mutable);
LABEL_72:
  if (v74) {
    freeifaddrs(v74);
  }
  if (v6 != -1) {
    close(v6);
  }
  CFRelease(Mutable);
  CFRelease(v73);
}

CFMutableDictionaryRef sub_100013CFC(const __CFString *key, __CFDictionary *a2, CFDictionaryRef theDict)
{
  CFDictionaryRef theDicta = 0LL;
  if (CFDictionaryGetValueIfPresent(theDict, key, (const void **)&theDicta))
  {
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, theDicta);
    if (!MutableCopy) {
      return CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
  }

  else
  {
    int v6 = (const __CFDictionary *)SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_1000799F8, key);
    CFDictionaryRef theDicta = v6;
    if (!v6) {
      return CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    CFDictionarySetValue(a2, key, v6);
    MutableCFArrayRef Copy = theDicta;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (MutableCopy)
    {
      if (CFGetTypeID(MutableCopy) == TypeID)
      {
        MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, theDicta);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv6Addresses);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv6DestAddresses);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv6Flags);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv6PrefixLength);
      }

      else
      {
        MutableCFArrayRef Copy = 0LL;
      }
    }

    CFRelease(theDicta);
    if (!MutableCopy) {
      return CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
  }

  return MutableCopy;
}

void sub_100013E6C(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFTypeRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (Value) {
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0LL, 0LL, Value);
  }
  else {
    MutableCFArrayRef Copy = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  }
  uint64_t v8 = MutableCopy;
  if (!inet_ntop(30, (const void *)(a3 + 8), v19, 0x2Eu))
  {
    os_log_t v9 = sub_10000E124();
    uint64_t v10 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v9, v10))
    {
      uint64_t v11 = _os_log_pack_size(12LL);
      int v12 = &v19[-((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 6];
      uint64_t v13 = __error();
      uint64_t v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "inet_ntop() failed: %s", v18);
      __int128 v15 = __error();
      uint64_t v16 = strerror(*v15);
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = v16;
      __SC_log_send(6LL, v9, v10, v12);
    }

    v19[0] = 0;
  }

  CFStringRef v17 = CFStringCreateWithFormat(0LL, 0LL, @"%s", v19);
  CFArrayAppendValue(v8, v17);
  CFRelease(v17);
  CFDictionarySetValue(a1, a2, v8);
  CFRelease(v8);
}

uint64_t sub_100014038(const __CFString *key, const void *a2, CFDictionaryRef theDict)
{
  uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, key);
  uint64_t v6 = result;
  if (result && (uint64_t result = CFEqual((CFTypeRef)result, a2), (_DWORD)result))
  {
    if (!a2)
    {
LABEL_10:
      if (v6)
      {
        CFPropertyListRef v13 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_1000799F8, key);
        if (v13)
        {
          uint64_t v14 = v13;
          os_log_t v15 = sub_10000E124();
          uint64_t v16 = _SC_syslog_os_log_mapping(7LL);
          if (__SC_log_enabled(7LL, v15, v16))
          {
            uint64_t v17 = _os_log_pack_size(12LL);
            uint64_t v18 = (char *)&v21 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v19 = __error();
            uint64_t v20 = _os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "Update interface configuration: %@: <removed>");
            *(_DWORD *)uint64_t v20 = 138412290;
            *(void *)(v20 + 4) = key;
            __SC_log_send(7LL, v15, v16, v18);
          }

          CFRelease(v14);
        }

        return SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_1000799F8, key);
      }

      return result;
    }
  }

  else
  {
    byte_1000799F0 = 1;
    if (!a2) {
      goto LABEL_10;
    }
  }

  uint64_t result = CFDictionaryGetCount((CFDictionaryRef)a2);
  if (result < 1) {
    goto LABEL_10;
  }
  os_log_t v7 = sub_10000E124();
  uint64_t v8 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v7, v8))
  {
    uint64_t v9 = _os_log_pack_size(22LL);
    uint64_t v10 = (char *)&v21 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v11 = __error();
    uint64_t v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "Update interface configuration: %@: %@");
    *(_DWORD *)uint64_t v12 = 138412546;
    *(void *)(v12 + 4) = key;
    *(_WORD *)(v12 + 12) = 2112;
    *(void *)(v12 + 14) = a2;
    __SC_log_send(7LL, v7, v8, v10);
  }

  return SCDynamicStoreSetValue((SCDynamicStoreRef)qword_1000799F8, key, a2);
}

void sub_1000142A0(char *cStr, const void *a2, int a3, uint64_t a4)
{
  os_log_t v7 = CFStringCreateWithCString(0LL, cStr, 0x600u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v7,  @"IPv6DuplicatedAddress");
  v12[0] = 0;
  inet_ntop(30, a2, v12, 0x2Eu);
  MutableCFArrayRef Copy = CFStringCreateMutableCopy(0LL, 0LL, NetworkInterfaceEntity);
  CFStringAppendFormat(MutableCopy, 0LL, @"/%s", v12);
  if (a3 >= 1)
  {
    uint64_t v10 = 0LL;
    do
    {
      if (v10) {
        uint64_t v11 = ":";
      }
      else {
        uint64_t v11 = "/";
      }
      CFStringAppendFormat(MutableCopy, 0LL, @"%s%02x", v11, *(unsigned __int8 *)(a4 + v10++));
    }

    while (a3 != v10);
  }

  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_1000799F8, MutableCopy);
  CFRelease(MutableCopy);
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v7);
}

void sub_100014414(char *cStr)
{
  CFPropertyListRef v1 = CFStringCreateWithCString(0LL, cStr, 0x600u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v1,  kSCEntNetNAT64PrefixRequest);
  CFRelease(v1);
  os_log_t v3 = sub_10000E124();
  uint64_t v4 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v3, v4))
  {
    uint64_t v5 = _os_log_pack_size(12LL);
    uint64_t v6 = (char *)&v9 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v7 = __error();
    uint64_t v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "Post NAT64 prefix request: %@");
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v8 + 4) = NetworkInterfaceEntity;
    __SC_log_send(7LL, v3, v4, v6);
  }

  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

void sub_100014578(char *cStr)
{
  CFPropertyListRef v1 = CFStringCreateWithCString(0LL, cStr, 0x600u);
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v1,  kSCEntNetIPv6RouterExpired);
  CFRelease(v1);
  os_log_t v3 = sub_10000E124();
  uint64_t v4 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v3, v4))
  {
    uint64_t v5 = _os_log_pack_size(12LL);
    uint64_t v6 = (char *)&v9 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v7 = __error();
    uint64_t v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "Post IPv6 Router Expired: %@");
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v8 + 4) = NetworkInterfaceEntity;
    __SC_log_send(7LL, v3, v4, v6);
  }

  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_1000799F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

CFBooleanRef sub_1000146DC(char *cStr)
{
  CFStringRef v2 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  os_log_t v3 = (const __SCNetworkInterface *)_SCNetworkInterfaceCreateWithBSDName(0LL, v2, 0LL);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_100014814(v3);
    else {
      int v6 = 0;
    }
    CFRelease(v4);
    if (v5)
    {
      int v7 = sub_10000E288(2);
      if (v7 != -1)
      {
        int v8 = v7;
        int Value = CFBooleanGetValue(v5);
        int v10 = sub_100014C4C(v8, (uint64_t)cStr, Value != 0);
        close(v8);
        if (v6)
        {
          if (Value && !v10) {
            sub_100014E94(v2);
          }
        }
      }
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  CFRelease(v2);
  return v5;
}

CFBooleanRef sub_100014814(const __SCNetworkInterface *Interface)
{
  do
  {
    CFPropertyListRef v1 = Interface;
    Interface = SCNetworkInterfaceGetInterface(Interface);
  }

  while (Interface);
  BSDName = SCNetworkInterfaceGetBSDName(v1);
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(v1);
  if (CFEqual(InterfaceType, kSCNetworkInterfaceTypeIEEE80211)) {
    BOOL v6 = BSDName == 0LL;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6 || !CFStringHasPrefix(BSDName, @"en"))
  {
    CFStringRef v22 = SCNetworkInterfaceGetInterfaceType(v1);
    if (CFEqual(v22, kSCNetworkInterfaceTypeWWAN)) {
      return kCFBooleanTrue;
    }
    else {
      return 0LL;
    }
  }

  CFBooleanRef v2 = kCFBooleanFalse;
  int v7 = CFStringCreateWithFormat( 0LL,  0LL,  @"%@%@/%@/%@/%@/%@",  &stru_100073D90,  kSCDynamicStoreDomainSetup,  kSCCompNetwork,  @"Override",  @"InterfaceType",  kSCNetworkInterfaceTypeIEEE80211);
  CFPropertyListRef v8 = SCDynamicStoreCopyValue(0LL, v7);
  CFRelease(v7);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v8) {
    goto LABEL_17;
  }
  if (CFGetTypeID(v8) != TypeID) {
    goto LABEL_16;
  }
  int Value = CFDictionaryGetValue((CFDictionaryRef)v8, @"Expiration");
  CFTypeID v11 = CFDateGetTypeID();
  if (!Value
    || CFGetTypeID(Value) != v11
    || (CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent(),
        CFPropertyListRef v13 = CFDateCreate(0LL, Current),
        CFComparisonResult v14 = CFDateCompare(v13, (CFDateRef)Value, 0LL),
        CFRelease(v13),
        v14 != kCFCompareLessThan)
    || (uint64_t v23 = CFDictionaryGetValue((CFDictionaryRef)v8, @"Cost"), v24 = CFStringGetTypeID(), !v23)
    || CFGetTypeID(v23) != v24)
  {
LABEL_16:
    CFRelease(v8);
    goto LABEL_17;
  }

  int v25 = CFEqual(v23, @"Expensive");
  if (!v25)
  {
    int v26 = CFEqual(v23, @"Inexpensive");
    CFRelease(v8);
    if (v26) {
      goto LABEL_28;
    }
LABEL_17:
    os_log_t v15 = sub_10000E124();
    uint64_t v16 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v15, v16))
    {
      uint64_t v17 = _os_log_pack_size(12LL);
      uint64_t v18 = (char *)&v35 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v19 = __error();
      uint64_t v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "%@: Wi-Fi is expensive");
      CFStringRef v21 = SCNetworkInterfaceGetBSDName(v1);
      *(_DWORD *)uint64_t v20 = 138412290;
      *(void *)(v20 + 4) = v21;
      __SC_log_send(5LL, v15, v16, v18);
    }

    return kCFBooleanTrue;
  }

  CFRelease(v8);
LABEL_28:
  os_log_t v27 = sub_10000E124();
  uint64_t v28 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v27, v28))
  {
    uint64_t v29 = _os_log_pack_size(22LL);
    __int128 v30 = (char *)&v35 - ((__chkstk_darwin(v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    int v31 = __error();
    uint64_t v32 = _os_log_pack_fill(v30, v29, *v31, &_mh_execute_header, "%@: Wi-Fi using %sexpensive override");
    CFStringRef v33 = SCNetworkInterfaceGetBSDName(v1);
    int v34 = "";
    if (!v25) {
      int v34 = "in";
    }
    *(_DWORD *)uint64_t v32 = 138412546;
    *(void *)(v32 + 4) = v33;
    *(_WORD *)(v32 + 12) = 2080;
    *(void *)(v32 + 14) = v34;
    __SC_log_send(5LL, v27, v28, v30);
  }

  if (v25) {
    return kCFBooleanTrue;
  }
  return v2;
}

uint64_t sub_100014C4C(int a1, uint64_t a2, int a3)
{
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __strlcpy_chk(&v19, a2, 16LL, 16LL);
  uint64_t v6 = ioctl(a1, 0xC02069A0uLL, &v19);
  if ((_DWORD)v6 == -1 && *__error() != 1)
  {
    os_log_t v7 = sub_10000E124();
    uint64_t v8 = _SC_syslog_os_log_mapping(3LL);
    uint64_t v13 = _os_log_pack_size(22LL);
    int v10 = (char *)&v19 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v14 = *__error();
    uint64_t v12 = _os_log_pack_fill(v10, v13, v14, &_mh_execute_header, "%s: ioctl(SIOCGIFEXPENSIVE) failed: %s");
LABEL_10:
    uint64_t v15 = v12;
    uint64_t v16 = __error();
    uint64_t v17 = strerror(*v16);
    *(_DWORD *)uint64_t v15 = 136315394;
    *(void *)(v15 + 4) = a2;
    *(_WORD *)(v15 + 12) = 2080;
    *(void *)(v15 + 14) = v17;
    __SC_log_send(3LL, v7, v8, v10);
    return 0xFFFFFFFFLL;
  }

  if ((_DWORD)v20 != a3)
  {
    LODWORD(vsnprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = a3;
    uint64_t v6 = ioctl(a1, 0xC02069A1uLL, &v19);
    if ((_DWORD)v6 == -1)
    {
      if (*__error() == 1) {
        return 0xFFFFFFFFLL;
      }
      os_log_t v7 = sub_10000E124();
      uint64_t v8 = _SC_syslog_os_log_mapping(3LL);
      uint64_t v9 = _os_log_pack_size(22LL);
      int v10 = (char *)&v19 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v11 = *__error();
      uint64_t v12 = _os_log_pack_fill(v10, v9, v11, &_mh_execute_header, "%s: ioctl(SIOCSIFEXPENSIVE) failed: %s");
      goto LABEL_10;
    }
  }

  return v6;
}

void sub_100014E94(const void *a1)
{
  CFBooleanRef v2 = SCPreferencesCreate(0LL, @"KernelEventMonitor", 0LL);
  if (v2)
  {
    os_log_t v3 = v2;
    uint64_t v4 = SCNetworkSetCopyCurrent(v2);
    if (!v4) {
      goto LABEL_25;
    }
    uint64_t v5 = v4;
    uint64_t v6 = SCNetworkSetCopyServices(v4);
    if (v6)
    {
      os_log_t v7 = v6;
      CFIndex Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        CFIndex v9 = Count;
        CFIndex v10 = 0LL;
        while (1)
        {
          ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v7, v10);
          if (SCNetworkServiceGetEnabled(ValueAtIndex))
          {
            Interface = SCNetworkServiceGetInterface(ValueAtIndex);
            if (Interface)
            {
              uint64_t v13 = Interface;
              CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
              if (BSDName)
              {
                if (CFEqual(BSDName, a1)) {
                  break;
                }
              }
            }
          }

          if (v9 == ++v10)
          {
            uint64_t v13 = 0LL;
            goto LABEL_12;
          }
        }

        CFRetain(v13);
LABEL_12:
        CFRelease(v5);
        CFRelease(v7);
        if (v13)
        {
          EnableLowDataModeint Value = (const __CFNumber *)__SCNetworkInterfaceGetEnableLowDataModeValue(v13);
          if (EnableLowDataModeValue)
          {
            HIDWORD(v63) = 0;
            CFNumberGetValue(EnableLowDataModeValue, kCFNumberIntType, (char *)&v63 + 4);
            os_log_t v16 = sub_10000E124();
            uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
            if (!__SC_log_enabled(5LL, v16, v17))
            {
LABEL_19:
              CFRelease(v3);
              uint64_t v23 = v13;
LABEL_28:
              CFRelease(v23);
              return;
            }

            uint64_t v18 = _os_log_pack_size(22LL);
            __int128 v19 = (char *)&v63 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __int128 v20 = __error();
            uint64_t v21 = _os_log_pack_fill( v19,  v18,  *v20,  &_mh_execute_header,  "EnableLowDataModeValue(%@) is %s, skipping");
            CFStringRef v22 = "true";
            if (!HIDWORD(v63)) {
              CFStringRef v22 = "false";
            }
            *(_DWORD *)uint64_t v21 = 138412546;
            *(void *)(v21 + 4) = a1;
            *(_WORD *)(v21 + 12) = 2080;
            *(void *)(v21 + 14) = v22;
          }

          else
          {
            if (SCNetworkInterfaceSetEnableLowDataMode(v13, 1LL))
            {
              if (SCPreferencesCommitChanges(v3))
              {
                int v38 = SCPreferencesApplyChanges(v3);
                os_log_t v16 = sub_10000E124();
                uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
                int v39 = __SC_log_enabled(5LL, v16, v17);
                if (v38)
                {
                  if (!v39) {
                    goto LABEL_19;
                  }
                  uint64_t v40 = _os_log_pack_size(12LL);
                  __int128 v19 = (char *)&v63 - ((__chkstk_darwin(v40) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  os_log_t v41 = __error();
                  uint64_t v42 = _os_log_pack_fill( v19,  v40,  *v41,  &_mh_execute_header,  "SCNetworkInterfaceSetEnableLowDataModeValue(%@) success");
                  *(_DWORD *)uint64_t v42 = 138412290;
                  *(void *)(v42 + 4) = a1;
                  goto LABEL_18;
                }

                if (!v39) {
                  goto LABEL_19;
                }
                uint64_t v58 = _os_log_pack_size(12LL);
                uint64_t v51 = (char *)&v63 - ((__chkstk_darwin(v58) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                v59 = __error();
                uint64_t v60 = _os_log_pack_fill( v51,  v58,  *v59,  &_mh_execute_header,  "SCPreferencesApplyChanges failed, %s",  v63);
                int v61 = SCError();
                CFStringRef v62 = SCErrorString(v61);
                *(_DWORD *)uint64_t v60 = 136315138;
                *(void *)(v60 + 4) = v62;
                os_log_t v56 = v16;
                uint64_t v57 = v17;
              }

              else
              {
                os_log_t v48 = sub_10000E124();
                uint64_t v49 = _SC_syslog_os_log_mapping(5LL);
                uint64_t v50 = _os_log_pack_size(12LL);
                uint64_t v51 = (char *)&v63 - ((__chkstk_darwin(v50) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                CFMutableDictionaryRef v52 = __error();
                uint64_t v53 = _os_log_pack_fill( v51,  v50,  *v52,  &_mh_execute_header,  "SCPreferencesCommitChanges failed, %s",  v63);
                int v54 = SCError();
                uint64_t v55 = SCErrorString(v54);
                *(_DWORD *)uint64_t v53 = 136315138;
                *(void *)(v53 + 4) = v55;
                os_log_t v56 = v48;
                uint64_t v57 = v49;
              }

              __SC_log_send(5LL, v56, v57, v51);
              goto LABEL_19;
            }

            os_log_t v16 = sub_10000E124();
            uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
            uint64_t v43 = _os_log_pack_size(22LL);
            __int128 v19 = (char *)&v63 - ((__chkstk_darwin(v43) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            CFNumberRef v44 = __error();
            uint64_t v45 = _os_log_pack_fill( v19,  v43,  *v44,  &_mh_execute_header,  "SCNetworkInterfaceSetEnableLowDataModeValue(%@) failed, %s");
            int v46 = SCError();
            char v47 = SCErrorString(v46);
            *(_DWORD *)uint64_t v45 = 138412546;
            *(void *)(v45 + 4) = a1;
            *(_WORD *)(v45 + 12) = 2080;
            *(void *)(v45 + 14) = v47;
          }

uint64_t sub_1000154D8(uint64_t a1, uint64_t a2)
{
  return _SCControlPrefsCreate("com.apple.InterfaceNamer.control.plist", a1, a2);
}

uint64_t sub_10001552C(uint64_t a1)
{
  if (a1) {
    return _SCControlPrefsGetBoolean();
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000155A4(uint64_t a1)
{
  if (a1) {
    return _SCControlPrefsGetBoolean();
  }
  else {
    return 0LL;
  }
}

uint64_t NetworkInterfaceGetReservedRange(uint64_t a1, _DWORD *a2)
{
  uint64_t IOInterfaceNamePrefix = _SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
  if (IOInterfaceNamePrefix)
  {
    uint64_t v5 = IOInterfaceNamePrefix;
    uint64_t IORegistryEntryID = _SCNetworkInterfaceGetIORegistryEntryID(a1);
    io_registry_entry_t v7 = sub_100015800(IORegistryEntryID);
    uint64_t v8 = CFStringCreateWithFormat(0LL, 0LL, @"network-interface-unit-%@", v5);
    CFIndex v9 = (const __CFData *)IORegistryEntrySearchCFProperty(v7, "IOService", v8, 0LL, 3u);
    CFTypeID TypeID = CFDataGetTypeID();
    if (v9 && CFGetTypeID(v9) == TypeID)
    {
      uint64_t v11 = sub_100015A40(v9, a2);
      if (!v7) {
        goto LABEL_8;
      }
    }

    else
    {
      uint64_t v11 = 0LL;
      if (!v7)
      {
LABEL_8:
        if (v9) {
          CFRelease(v9);
        }
        if (v8) {
          CFRelease(v8);
        }
        return v11;
      }
    }

    IOObjectRelease(v7);
    goto LABEL_8;
  }

  os_log_t v12 = sub_100015FB8();
  uint64_t v13 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v12, v13))
  {
    uint64_t v14 = _os_log_pack_size(22LL);
    uint64_t v15 = (char *)&v19 - ((__chkstk_darwin(v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v16 = __error();
    uint64_t v17 = _os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "%s: %@ has no prefix");
    *(_DWORD *)uint64_t v17 = 136315394;
    *(void *)(v17 + 4) = "NetworkInterfaceGetReservedRange";
    *(_WORD *)(v17 + 12) = 2112;
    *(void *)(v17 + 14) = a1;
    __SC_log_send(5LL, v12, v13, v15);
  }

  return 0LL;
}

uint64_t sub_100015800(uint64_t a1)
{
  kern_return_t MatchingServices;
  BOOL v4;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  os_log_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  HIDWORD(v23) = 0;
  CFBooleanRef v2 = IORegistryEntryIDMatching(a1);
  MatchingServices = IOServiceGetMatchingServices(kIOMainPortDefault, v2, (io_iterator_t *)&v23 + 1);
  if (MatchingServices) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = HIDWORD(v23) == 0;
  }
  if (v4)
  {
    uint64_t v5 = sub_100015FB8();
    uint64_t v6 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v5, v6))
    {
      io_registry_entry_t v7 = _os_log_pack_size(28LL);
      uint64_t v8 = (char *)&v23 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFIndex v9 = __error();
      CFIndex v10 = _os_log_pack_fill( v8,  v7,  *v9,  &_mh_execute_header,  "%s: can't find entry 0x%llx, %d",  v23,  v24,  v25);
      *(_DWORD *)CFIndex v10 = 136315650;
      *(void *)(v10 + 4) = "getRegistryEntryWithID";
      *(_WORD *)(v10 + 12) = 2048;
      *(void *)(v10 + 14) = a1;
      *(_WORD *)(v10 + 22) = 1024;
      *(_DWORD *)(v10 + 24) = MatchingServices;
      uint64_t v11 = v5;
      os_log_t v12 = v6;
      uint64_t v13 = v8;
LABEL_11:
      __SC_log_send(5LL, v11, v12, v13);
    }

uint64_t sub_100015A40(const __CFData *a1, _DWORD *a2)
{
  unsigned int Length = CFDataGetLength(a1);
  unsigned int v5 = Length;
  if (Length < 4 || (Length & 3) != 0)
  {
    os_log_t v19 = sub_100015FB8();
    uint64_t v10 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = __SC_log_enabled(3LL, v19, v10);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v20 = _os_log_pack_size(18LL);
    uint64_t v13 = (char *)&v23 - ((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v21 = __error();
    uint64_t v22 = _os_log_pack_fill(v13, v20, *v21, &_mh_execute_header, "%s: bad length %u", v23, v24);
    *(_DWORD *)uint64_t v22 = 136315394;
    *(void *)(v22 + 4) = "IFUnitRangeInitWithData";
    *(_WORD *)(v22 + 12) = 1024;
    *(_DWORD *)(v22 + 14) = v5;
    os_log_t v18 = v19;
    goto LABEL_12;
  }

  unsigned int v6 = Length >> 2;
  *(void *)a2 = 0LL;
  BytePtr = CFDataGetBytePtr(a1);
  if (v6 >= 2) {
    int v8 = 2;
  }
  else {
    int v8 = v6;
  }
  memmove(a2, BytePtr, (4 * v8));
  if (v5 < 8)
  {
    a2[1] = *a2;
  }

  else if (a2[1] < *a2)
  {
    os_log_t v9 = sub_100015FB8();
    uint64_t v10 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = __SC_log_enabled(3LL, v9, v10);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v12 = _os_log_pack_size(24LL);
    uint64_t v13 = (char *)&v23 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v14 = __error();
    uint64_t v15 = _os_log_pack_fill( v13,  v12,  *v14,  &_mh_execute_header,  "%s: unit end %u < start %u",  v23,  v24,  v25);
    int v17 = *a2;
    int v16 = a2[1];
    *(_DWORD *)uint64_t v15 = 136315650;
    *(void *)(v15 + 4) = "IFUnitRangeInitWithData";
    *(_WORD *)(v15 + 12) = 1024;
    *(_DWORD *)(v15 + 14) = v16;
    *(_WORD *)(v15 + 18) = 1024;
    *(_DWORD *)(v15 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v17;
    os_log_t v18 = v9;
LABEL_12:
    __SC_log_send(3LL, v18, v10, v13);
    return 0LL;
  }

  return 1LL;
}

uint64_t NetworkInterfacePrefixGetReservedUnits(void *key)
{
  kern_return_t v5;
  kern_return_t v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  _DWORD *v12;
  io_registry_entry_t v13;
  unsigned int v14;
  char v15;
  CFTypeRef CFProperty;
  const void *v17;
  CFTypeID TypeID;
  __CFDictionary *Mutable;
  int v23;
  io_iterator_t iterator;
  void *value;
  iterator = 0;
  if (qword_100079AD8 && CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_100079AD8, key, (const void **)&value))
  {
    CFBooleanRef v2 = 0LL;
    int v3 = 0;
    uint64_t v4 = value;
    goto LABEL_26;
  }

  CFBooleanRef v2 = CFStringCreateWithFormat(0LL, 0LL, @"network-interface-unit-%@", key);
  unsigned int v5 = IORegistryCreateIterator(kIOMainPortDefault, "IODeviceTree", 1u, &iterator);
  if (v5)
  {
    unsigned int v6 = v5;
    io_registry_entry_t v7 = sub_100015FB8();
    int v8 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v7, v8))
    {
      os_log_t v9 = _os_log_pack_size(8LL);
      uint64_t v10 = (char *)&v23 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v11 = __error();
      uint64_t v12 = (_DWORD *)_os_log_pack_fill( v10,  v9,  *v11,  &_mh_execute_header,  "IORegistryCreateIterator failed %d",  v23);
      char *v12 = 67109120;
      v12[1] = v6;
      __SC_log_send(5LL, v7, v8, v10);
      int v3 = 1;
      uint64_t v4 = 0LL;
      goto LABEL_26;
    }

    goto LABEL_24;
  }

  uint64_t v13 = IOIteratorNext(iterator);
  if (!v13) {
    goto LABEL_24;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  do
  {
    CFProperty = IORegistryEntryCreateCFProperty(v13, v2, 0LL, 0);
    if (CFProperty)
    {
      int v17 = CFProperty;
      CFTypeID TypeID = CFDataGetTypeID();
      if (CFGetTypeID(v17) == TypeID
        && sub_100015A40((const __CFData *)v17, &value)
        && (!v15 || HIDWORD(value) > v14))
      {
        uint64_t v15 = 1;
        uint64_t v14 = HIDWORD(value);
      }

      CFRelease(v17);
    }

    uint64_t v13 = IOIteratorNext(iterator);
  }

  while (v13);
  if (!v15)
  {
LABEL_24:
    uint64_t v4 = 0LL;
    goto LABEL_25;
  }

  uint64_t v4 = v14 + 1;
LABEL_25:
  int v3 = 1;
LABEL_26:
  if (iterator) {
    IOObjectRelease(iterator);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v3)
  {
    CFMutableArrayRef Mutable = (__CFDictionary *)qword_100079AD8;
    if (!qword_100079AD8)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  (const CFDictionaryValueCallBacks *)&unk_1000798A0);
      qword_100079AD8 = (uint64_t)Mutable;
    }

    CFDictionarySetValue(Mutable, key, (const void *)v4);
  }

  return v4;
}

CFStringRef sub_100015F10(uint64_t a1)
{
  return CFStringCreateWithFormat(0LL, 0LL, @"%u", a1);
}

BOOL sub_100015F6C(int a1, int a2)
{
  return a1 == a2;
}

os_log_t sub_100015FB8()
{
  os_log_t result = (os_log_t)qword_100079AE0;
  if (!qword_100079AE0)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_100079AE0 = (uint64_t)result;
  }

  return result;
}

uint64_t sub_100016028(void *a1)
{
  return pthread_attr_destroy(&v4);
}

uint64_t sub_1000160BC(__CFBundle *a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  uint64_t v3 = sub_1000154D8((uint64_t)Current, (uint64_t)sub_100016474);
  sub_100016474(v3);
  InfoDictionary = CFBundleGetInfoDictionary(a1);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (InfoDictionary && CFGetTypeID(InfoDictionary) == TypeID)
  {
    int Value = CFDictionaryGetValue(InfoDictionary, @"WaitStackTimeout");
    if (Value)
    {
      io_registry_entry_t v7 = Value;
      CFTypeID v8 = CFNumberGetTypeID();
      if (CFGetTypeID(v7) != v8
        || !CFNumberGetValue((CFNumberRef)v7, kCFNumberDoubleType, &qword_1000798C8)
        || *(double *)&qword_1000798C8 <= 0.0)
      {
        os_log_t v9 = (os_log_t)qword_100079AE0;
        if (!qword_100079AE0)
        {
          os_log_t v9 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_100079AE0 = (uint64_t)v9;
        }

        uint64_t v10 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v9, v10))
        {
          uint64_t v11 = _os_log_pack_size(2LL);
          uint64_t v12 = (char *)&v23 - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v13 = __error();
          *(_WORD *)_os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "WaitStackTimeout value error") = 0;
          __SC_log_send(5LL, v9, v10, v12);
        }

        qword_1000798C8 = 0x4072C00000000000LL;
      }
    }

    uint64_t v14 = CFDictionaryGetValue(InfoDictionary, @"WaitQuietTimeout");
    if (v14)
    {
      uint64_t v15 = v14;
      CFTypeID v16 = CFNumberGetTypeID();
      if (CFGetTypeID(v15) != v16
        || !CFNumberGetValue((CFNumberRef)v15, kCFNumberDoubleType, &qword_1000798D0)
        || *(double *)&qword_1000798D0 <= 0.0)
      {
        os_log_t v17 = (os_log_t)qword_100079AE0;
        if (!qword_100079AE0)
        {
          os_log_t v17 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_100079AE0 = (uint64_t)v17;
        }

        uint64_t v18 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v17, v18))
        {
          uint64_t v19 = _os_log_pack_size(2LL);
          uint64_t v20 = (char *)&v23 - ((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v21 = __error();
          *(_WORD *)_os_log_pack_fill(v20, v19, *v21, &_mh_execute_header, "WaitQuietTimeout value error") = 0;
          __SC_log_send(5LL, v17, v18, v20);
        }

        qword_1000798D0 = 0x406E000000000000LL;
      }
    }
  }

  if (!sub_1000166D4() || !sub_1000169EC())
  {
    if (dword_100079AE8)
    {
      IOServiceClose(dword_100079AE8);
      dword_100079AE8 = 0;
    }

    if (qword_100079AF0)
    {
      CFRelease((CFTypeRef)qword_100079AF0);
      qword_100079AF0 = 0LL;
    }

    if (dword_100079AF8)
    {
      IOObjectRelease(dword_100079AF8);
      dword_100079AF8 = 0;
    }

    if (qword_100079B00) {
      IONotificationPortDestroy((IONotificationPortRef)qword_100079B00);
    }
    if (dword_100079B08)
    {
      IOObjectRelease(dword_100079B08);
      dword_100079B08 = 0;
    }

    if (dword_100079B0C)
    {
      IOObjectRelease(dword_100079B0C);
      dword_100079B0C = 0;
    }

    if (qword_100079B10)
    {
      CFRelease((CFTypeRef)qword_100079B10);
      qword_100079B10 = 0LL;
    }

    if (qword_100079B18)
    {
      CFRunLoopTimerInvalidate((CFRunLoopTimerRef)qword_100079B18);
      CFRelease((CFTypeRef)qword_100079B18);
      qword_100079B18 = 0LL;
    }
  }

  CFRelease(a1);
  CFRunLoopRun();
  return 0LL;
}

uint64_t sub_100016474(uint64_t a1)
{
  int v2 = sub_10001552C(a1);
  if (v2 != byte_100079B20)
  {
    int v3 = v2;
    byte_100079B20 = v2;
    os_log_t v4 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v4 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v4;
    }

    uint64_t v5 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v4, v5))
    {
      uint64_t v6 = _os_log_pack_size(12LL);
      io_registry_entry_t v7 = (char *)&v20 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFTypeID v8 = __error();
      uint64_t v9 = _os_log_pack_fill(v7, v6, *v8, &_mh_execute_header, "Allow New Interfaces is %s", v20);
      uint64_t v10 = "enabled";
      if (!v3) {
        uint64_t v10 = "disabled";
      }
      *(_DWORD *)uint64_t v9 = 136315138;
      *(void *)(v9 + 4) = v10;
      __SC_log_send(5LL, v4, v5, v7);
    }
  }

  uint64_t result = sub_1000155A4(a1);
  if ((_DWORD)result != byte_100079B21)
  {
    int v12 = result;
    byte_100079B21 = result;
    os_log_t v13 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v13;
    }

    uint64_t v14 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v13, v14);
    if ((_DWORD)result)
    {
      uint64_t v15 = _os_log_pack_size(12LL);
      CFTypeID v16 = (char *)&v20 - ((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v17 = __error();
      uint64_t v18 = _os_log_pack_fill(v16, v15, *v17, &_mh_execute_header, "Configure New Interfaces is %s", v20);
      uint64_t v19 = "enabled";
      if (!v12) {
        uint64_t v19 = "disabled";
      }
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v18 + 4) = v19;
      return __SC_log_send(5LL, v13, v14, v16);
    }
  }

  return result;
}

uint64_t sub_1000166D4()
{
  dispatch_time_t v0 = SCPreferencesCreate(0LL, @"InterfaceNamer:setup_Virtual", 0LL);
  qword_100079B28 = (uint64_t)v0;
  if (v0)
  {
    if (SCPreferencesSetCallback(v0, (SCPreferencesCallBack)sub_1000171C4, 0LL))
    {
      CFPropertyListRef v1 = (const __SCPreferences *)qword_100079B28;
      CFRunLoopRef Current = CFRunLoopGetCurrent();
      if (SCPreferencesScheduleWithRunLoop(v1, Current, kCFRunLoopDefaultMode) || SCError() == 2002) {
        return 1LL;
      }
      os_log_t v12 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v12 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v12;
      }

      uint64_t v13 = _SC_syslog_os_log_mapping(3LL);
      uint64_t v18 = _os_log_pack_size(12LL);
      uint64_t v15 = (char *)&v23 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v19 = *__error();
      uint64_t v17 = _os_log_pack_fill(v15, v18, v19, &_mh_execute_header, "SCPreferencesScheduleWithRunLoop() failed: %s");
    }

    else
    {
      os_log_t v12 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v12 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v12;
      }

      uint64_t v13 = _SC_syslog_os_log_mapping(3LL);
      uint64_t v14 = _os_log_pack_size(12LL);
      uint64_t v15 = (char *)&v23 - ((__chkstk_darwin(v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v16 = *__error();
      uint64_t v17 = _os_log_pack_fill(v15, v14, v16, &_mh_execute_header, "SCPreferencesSetCallBack() failed: %s");
    }

    uint64_t v20 = v17;
    int v21 = SCError();
    uint64_t v22 = SCErrorString(v21);
    *(_DWORD *)uint64_t v20 = 136315138;
    *(void *)(v20 + 4) = v22;
    __SC_log_send(3LL, v12, v13, v15);
LABEL_19:
    CFRelease((CFTypeRef)qword_100079B28);
    return 0LL;
  }

  os_log_t v4 = (os_log_t)qword_100079AE0;
  if (!qword_100079AE0)
  {
    os_log_t v4 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_100079AE0 = (uint64_t)v4;
  }

  uint64_t v5 = _SC_syslog_os_log_mapping(3LL);
  uint64_t result = __SC_log_enabled(3LL, v4, v5);
  if ((_DWORD)result)
  {
    uint64_t v6 = _os_log_pack_size(12LL);
    io_registry_entry_t v7 = (char *)&v23 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFTypeID v8 = __error();
    uint64_t v9 = _os_log_pack_fill(v7, v6, *v8, &_mh_execute_header, "SCPreferencesCreate() failed: %s", v23);
    int v10 = SCError();
    uint64_t v11 = SCErrorString(v10);
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v9 + 4) = v11;
    __SC_log_send(3LL, v4, v5, v7);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000169EC()
{
  kern_return_t v8;
  kern_return_t v9;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _DWORD *v15;
  os_log_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  kern_return_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_t v28;
  CFAbsoluteTime Current;
  __CFRunLoop *v31;
  IONotificationPort *v32;
  CFDictionaryRef v33;
  kern_return_t v34;
  kern_return_t v35;
  os_log_t v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  int *v41;
  IONotificationPort *v42;
  CFDictionaryRef v43;
  kern_return_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  __CFRunLoop *v50;
  __CFRunLoopSource *RunLoopSource;
  _BYTE v52[4];
  uint32_t busyState;
  qword_100079AF0 = (uint64_t)sub_100017630();
  if (qword_100079AF0)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_100079AF0);
    if (Count >= 1)
    {
      CFIndex v2 = Count;
      for (CFIndex i = 0LL; i != v2; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_100079AF0, i);
        if (CFDictionaryContainsKey(ValueAtIndex, @"Active"))
        {
          MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, ValueAtIndex);
          CFDictionaryRemoveValue(MutableCopy, @"Active");
          CFArraySetValueAtIndex((CFMutableArrayRef)qword_100079AF0, i, MutableCopy);
          CFArrayAppendValue(Mutable, MutableCopy);
          CFRelease(MutableCopy);
        }
      }
    }
  }

  else
  {
    CFMutableArrayRef Mutable = 0LL;
  }

  qword_100079B40 = (uint64_t)Mutable;
  qword_100079B10 = (uint64_t)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  sub_100017910((__CFDictionary *)qword_100079B10, @"*START*");
  qword_100079B00 = (uint64_t)IONotificationPortCreate(kIOMainPortDefault);
  if (!qword_100079B00)
  {
    uint64_t v16 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      uint64_t v16 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v16;
    }

    uint64_t v17 = _SC_syslog_os_log_mapping(3LL);
    uint64_t v18 = _os_log_pack_size(2LL);
    uint64_t v19 = &v52[-((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    uint64_t v20 = *__error();
    int v21 = (_WORD *)_os_log_pack_fill(v19, v18, v20, &_mh_execute_header, "IONotificationPortCreate failed");
    goto LABEL_24;
  }

  io_service_t v6 = IORegistryEntryFromPath(kIOMainPortDefault, "IOService:/");
  if (v6)
  {
    io_service_t v7 = v6;
    CFTypeID v8 = IOServiceAddInterestNotification( (IONotificationPortRef)qword_100079B00,  v6,  "IOBusyInterest",  (IOServiceInterestCallback)sub_100017A94,  (void *)qword_100079B00,  (io_object_t *)&dword_100079B08);
    if (v8)
    {
      uint64_t v9 = v8;
      int v10 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        int v10 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v10;
      }

      uint64_t v11 = _SC_syslog_os_log_mapping(3LL);
      os_log_t v12 = _os_log_pack_size(8LL);
      uint64_t v13 = &v52[-((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      uint64_t v14 = *__error();
      uint64_t v15 = (_DWORD *)_os_log_pack_fill( v13,  v12,  v14,  &_mh_execute_header,  "IOServiceAddInterestNotification returned %d");
    }

    else
    {
      uint64_t v25 = IOServiceGetBusyState(v7, &busyState);
      if (!v25)
      {
        CFRunLoopRef Current = CFAbsoluteTimeGetCurrent();
        qword_100079B18 = (uint64_t)CFRunLoopTimerCreate( 0LL,  Current + *(double *)&qword_1000798C8,  0.0,  0LL,  0LL,  (CFRunLoopTimerCallBack)sub_100017D34,  0LL);
        if (!qword_100079B18)
        {
          uint64_t v37 = (os_log_t)qword_100079AE0;
          if (!qword_100079AE0)
          {
            uint64_t v37 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            qword_100079AE0 = (uint64_t)v37;
          }

          int v38 = _SC_syslog_os_log_mapping(3LL);
          if (__SC_log_enabled(3LL, v37, v38))
          {
            int v39 = _os_log_pack_size(2LL);
            uint64_t v40 = &v52[-((__chkstk_darwin(v39) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
            os_log_t v41 = __error();
            *(_WORD *)_os_log_pack_fill( v40,  v39,  *v41,  &_mh_execute_header,  "CFRunLoopTimerCreate failed") = 0;
            __SC_log_send(3LL, v37, v38, v40);
          }

          goto LABEL_33;
        }

        int v31 = CFRunLoopGetCurrent();
        CFRunLoopAddTimer(v31, (CFRunLoopTimerRef)qword_100079B18, kCFRunLoopDefaultMode);
        os_log_t v32 = (IONotificationPort *)qword_100079B00;
        uint64_t v33 = IOServiceMatching("IONetworkStack");
        uint64_t v34 = IOServiceAddMatchingNotification( v32,  "IOServiceFirstMatch",  v33,  (IOServiceMatchingCallback)sub_100017EAC,  (void *)qword_100079B00,  (io_iterator_t *)&dword_100079B0C);
        if (v34)
        {
          uint64_t v35 = v34;
          uint64_t v36 = (os_log_t)qword_100079AE0;
          if (!qword_100079AE0)
          {
            uint64_t v36 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            qword_100079AE0 = (uint64_t)v36;
          }

          uint64_t v11 = _SC_syslog_os_log_mapping(3LL);
        }

        else
        {
          sub_100017EAC(0, dword_100079B0C);
          uint64_t v42 = (IONotificationPort *)qword_100079B00;
          uint64_t v43 = IOServiceMatching("IONetworkInterface");
          CFNumberRef v44 = IOServiceAddMatchingNotification( v42,  "IOServiceFirstMatch",  v43,  (IOServiceMatchingCallback)sub_100018130,  (void *)qword_100079B00,  (io_iterator_t *)&dword_100079AF8);
          if (!v44)
          {
            sub_100018130(0, dword_100079AF8);
            sub_100017A94(v48, v49, -536870624, busyState);
            uint64_t v50 = CFRunLoopGetCurrent();
            RunLoopSource = IONotificationPortGetRunLoopSource((IONotificationPortRef)qword_100079B00);
            CFRunLoopAddSource(v50, RunLoopSource, kCFRunLoopDefaultMode);
            uint64_t v24 = 1LL;
            goto LABEL_34;
          }

          uint64_t v35 = v44;
          uint64_t v36 = (os_log_t)qword_100079AE0;
          if (!qword_100079AE0)
          {
            uint64_t v36 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            qword_100079AE0 = (uint64_t)v36;
          }

          uint64_t v11 = _SC_syslog_os_log_mapping(3LL);
          if (!__SC_log_enabled(3LL, v36, v11))
          {
LABEL_33:
            uint64_t v24 = 0LL;
LABEL_34:
            IOObjectRelease(v7);
            return v24;
          }
        }

        uint64_t v45 = _os_log_pack_size(8LL);
        uint64_t v13 = &v52[-((__chkstk_darwin(v45) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        int v46 = *__error();
        char v47 = (_DWORD *)_os_log_pack_fill( v13,  v45,  v46,  &_mh_execute_header,  "IOServiceAddMatchingNotification returned %d");
        const char *v47 = 67109120;
        v47[1] = v35;
        uint64_t v28 = v36;
LABEL_32:
        __SC_log_send(3LL, v28, v11, v13);
        goto LABEL_33;
      }

      uint64_t v9 = v25;
      int v10 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        int v10 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v10;
      }

      uint64_t v11 = _SC_syslog_os_log_mapping(3LL);
      uint64_t v26 = _os_log_pack_size(8LL);
      uint64_t v13 = &v52[-((__chkstk_darwin(v26) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      os_log_t v27 = *__error();
      uint64_t v15 = (_DWORD *)_os_log_pack_fill(v13, v26, v27, &_mh_execute_header, "IOServiceGetBusyState returned %d");
    }

    *uint64_t v15 = 67109120;
    v15[1] = v9;
    uint64_t v28 = v10;
    goto LABEL_32;
  }

  uint64_t v16 = (os_log_t)qword_100079AE0;
  if (!qword_100079AE0)
  {
    uint64_t v16 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_100079AE0 = (uint64_t)v16;
  }

  uint64_t v17 = _SC_syslog_os_log_mapping(3LL);
  if (__SC_log_enabled(3LL, v16, v17))
  {
    uint64_t v22 = _os_log_pack_size(2LL);
    uint64_t v19 = &v52[-((__chkstk_darwin(v22) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    uint64_t v23 = *__error();
    int v21 = (_WORD *)_os_log_pack_fill(v19, v22, v23, &_mh_execute_header, "IORegistryEntryFromPath failed");
LABEL_24:
    *int v21 = 0;
    __SC_log_send(3LL, v16, v17, v19);
  }

  return 0LL;
}

void sub_1000171C4(const __SCPreferences *a1, char a2)
{
  if ((a2 & 2) != 0)
  {
    CFIndex v2 = a1;
    if (!a1)
    {
      CFIndex v2 = (const __SCPreferences *)qword_100079B28;
      if (qword_100079B30)
      {
        CFRelease((CFTypeRef)qword_100079B30);
        qword_100079B30 = 0LL;
      }

      if (qword_100079B38)
      {
        CFRelease((CFTypeRef)qword_100079B38);
        qword_100079B38 = 0LL;
      }
    }

    sub_100017288((uint64_t)v2);
    sub_10001745C(v2);
    SCPreferencesSynchronize(v2);
  }

void sub_100017288(uint64_t a1)
{
  CFIndex v2 = (const __CFArray *)SCBridgeInterfaceCopyAll();
  int v3 = v2;
  if (v2 && !CFArrayGetCount(v2))
  {
    CFRelease(v3);
    int v3 = 0LL;
  }

  os_log_t v4 = (const void *)qword_100079B30;
  if ((const __CFArray *)qword_100079B30 == v3)
  {
    if (!v3) {
      return;
    }
    goto LABEL_17;
  }

  if (!v3 || !qword_100079B30) {
    goto LABEL_9;
  }
  if (CFEqual((CFTypeRef)qword_100079B30, v3))
  {
LABEL_17:
    CFRelease(v3);
    return;
  }

  os_log_t v4 = (const void *)qword_100079B30;
LABEL_9:
  if (v4) {
    CFRelease(v4);
  }
  qword_100079B30 = (uint64_t)v3;
  if (!_SCBridgeInterfaceUpdateConfiguration(a1))
  {
    os_log_t v5 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v5 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v5;
    }

    uint64_t v6 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v5, v6))
    {
      uint64_t v7 = _os_log_pack_size(12LL);
      CFTypeID v8 = (char *)&v13 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v9 = __error();
      uint64_t v10 = _os_log_pack_fill( v8,  v7,  *v9,  &_mh_execute_header,  "_SCBridgeInterfaceUpdateConfiguration() failed: %s",  v13);
      int v11 = SCError();
      os_log_t v12 = SCErrorString(v11);
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = v12;
      __SC_log_send(5LL, v5, v6, v8);
    }
  }

void sub_10001745C(const __SCPreferences *a1)
{
  CFIndex v2 = SCVLANInterfaceCopyAll(a1);
  int v3 = v2;
  if (v2 && !CFArrayGetCount(v2))
  {
    CFRelease(v3);
    int v3 = 0LL;
  }

  os_log_t v4 = (const void *)qword_100079B38;
  if ((const __CFArray *)qword_100079B38 == v3)
  {
    if (!v3) {
      return;
    }
    goto LABEL_17;
  }

  if (!v3 || !qword_100079B38) {
    goto LABEL_9;
  }
  if (CFEqual((CFTypeRef)qword_100079B38, v3))
  {
LABEL_17:
    CFRelease(v3);
    return;
  }

  os_log_t v4 = (const void *)qword_100079B38;
LABEL_9:
  if (v4) {
    CFRelease(v4);
  }
  qword_100079B38 = (uint64_t)v3;
  if (!_SCVLANInterfaceUpdateConfiguration(a1))
  {
    os_log_t v5 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v5 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v5;
    }

    uint64_t v6 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v5, v6))
    {
      uint64_t v7 = _os_log_pack_size(12LL);
      CFTypeID v8 = (char *)&v13 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v9 = __error();
      uint64_t v10 = _os_log_pack_fill( v8,  v7,  *v9,  &_mh_execute_header,  "_SCVLANInterfaceUpdateConfiguration() failed: %s",  v13);
      int v11 = SCError();
      os_log_t v12 = SCErrorString(v11);
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = v12;
      __SC_log_send(5LL, v5, v6, v8);
    }
  }

__CFArray *sub_100017630()
{
  dispatch_time_t v0 = SCPreferencesCreate(0LL, @"InterfaceNamer:readInterfaceList", @"NetworkInterfaces.plist");
  if (v0)
  {
    CFPropertyListRef v1 = v0;
    CFPropertyListRef Value = SCPreferencesGetValue(v0, @"Interfaces");
    CFTypeID TypeID = CFArrayGetTypeID();
    if (Value && CFGetTypeID(Value) != TypeID) {
      CFPropertyListRef Value = 0LL;
    }
    CFPropertyListRef v4 = SCPreferencesGetValue(v1, @"Model");
    if (!v4 || (v5 = v4, uint64_t v6 = (const void *)_SC_hw_model(0LL), v5 == v6))
    {
      if (Value) {
        goto LABEL_12;
      }
    }

    else if (v6)
    {
      int v7 = CFEqual(v5, v6);
      CFMutableArrayRef Mutable = 0LL;
      if (!v7 || !Value) {
        goto LABEL_30;
      }
LABEL_12:
      CFIndex Count = CFArrayGetCount((CFArrayRef)Value);
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      if (Count >= 1)
      {
        for (CFIndex i = 0LL; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, i);
          CFTypeID v12 = CFDictionaryGetTypeID();
          if (ValueAtIndex
            && CFGetTypeID(ValueAtIndex) == v12
            && CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, @"IOInterfaceNamePrefix")
            && CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, @"IOInterfaceUnit")
            && CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, @"IOMACAddress"))
          {
            CFArrayAppendValue(Mutable, ValueAtIndex);
          }
        }
      }

      if (Mutable)
      {
        uint64_t v13 = CFArrayGetCount(Mutable);
        if (v13 >= 2)
        {
          v24.length = v13;
          v24.location = 0LL;
          CFArraySortValues(Mutable, v24, (CFComparatorFunction)sub_1000181FC, 0LL);
        }
      }

      goto LABEL_30;
    }

    CFMutableArrayRef Mutable = 0LL;
LABEL_30:
    CFRelease(v1);
    return Mutable;
  }

  os_log_t v14 = (os_log_t)qword_100079AE0;
  if (!qword_100079AE0)
  {
    os_log_t v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_100079AE0 = (uint64_t)v14;
  }

  uint64_t v15 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v14, v15))
  {
    uint64_t v16 = _os_log_pack_size(12LL);
    uint64_t v17 = (char *)&v23 - ((__chkstk_darwin(v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v18 = __error();
    uint64_t v19 = _os_log_pack_fill(v17, v16, *v18, &_mh_execute_header, "SCPreferencesCreate() failed: %s", v23);
    int v20 = SCError();
    int v21 = SCErrorString(v20);
    *(_DWORD *)uint64_t v19 = 136315138;
    *(void *)(v19 + 4) = v21;
    __SC_log_send(5LL, v14, v15, v17);
  }

  return 0LL;
}

void sub_100017910(__CFDictionary *a1, const void *a2)
{
  CFAbsoluteTime valuePtr = CFAbsoluteTimeGetCurrent();
  CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberDoubleType, &valuePtr);
  CFDictionaryAddValue(a1, a2, v4);
  os_log_t v5 = (os_log_t)qword_100079AE0;
  if (!qword_100079AE0)
  {
    os_log_t v5 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_100079AE0 = (uint64_t)v5;
  }

  uint64_t v6 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v5, v6))
  {
    uint64_t v7 = _os_log_pack_size(32LL);
    CFTypeID v8 = (char *)&valuePtr - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v9 = __error();
    uint64_t v10 = _os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "%s: %@: %@");
    *(_DWORD *)uint64_t v10 = 136315650;
    *(void *)(v10 + 4) = "addTimestamp";
    *(_WORD *)(v10 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v10 + 14) = a2;
    *(_WORD *)(v10 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v10 + 24) = v4;
    __SC_log_send(5LL, v5, v6, v8);
  }

  CFRelease(v4);
}

void sub_100017A94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (!a4)
  {
    if (a3 == -536870624)
    {
      sub_100017910((__CFDictionary *)qword_100079B10, @"*QUIET*");
      os_log_t v5 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v5 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v5;
      }

      uint64_t v6 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v5, v6))
      {
        uint64_t v7 = _os_log_pack_size(2LL);
        CFTypeID v8 = (char *)&v16 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v9 = __error();
        *(_WORD *)_os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "IOKit quiet") = 0;
        __SC_log_send(6LL, v5, v6, v8);
      }
    }

    if (dword_100079AE8)
    {
      if (dword_100079B08)
      {
        IOObjectRelease(dword_100079B08);
        dword_100079B08 = 0;
      }

      int v10 = qword_100079B18;
      if (qword_100079B18)
      {
        CFRunLoopTimerInvalidate((CFRunLoopTimerRef)qword_100079B18);
        CFRelease((CFTypeRef)qword_100079B18);
        qword_100079B18 = 0LL;
      }

      sub_100018130(v10, dword_100079AF8);
      if (a3 == -536870624)
      {
        sub_100017910((__CFDictionary *)qword_100079B10, @"*QUIET&NAMED*");
        sub_1000182E8();
        if (qword_100079B48 != -1) {
          dispatch_once(&qword_100079B48, &stru_100072210);
        }
      }
    }

    else
    {
      os_log_t v11 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v11 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v11;
      }

      uint64_t v12 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v11, v12))
      {
        uint64_t v13 = _os_log_pack_size(2LL);
        os_log_t v14 = (char *)&v16 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v15 = __error();
        *(_WORD *)_os_log_pack_fill(v14, v13, *v15, &_mh_execute_header, "No network stack object") = 0;
        __SC_log_send(3LL, v11, v12, v14);
      }
    }
  }

void sub_100017D34()
{
  os_log_t v0 = (os_log_t)qword_100079AE0;
  if (!qword_100079AE0)
  {
    os_log_t v0 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_100079AE0 = (uint64_t)v0;
  }

  uint64_t v1 = _SC_syslog_os_log_mapping(3LL);
  if (__SC_log_enabled(3LL, v0, v1))
  {
    uint64_t v2 = _os_log_pack_size(2LL);
    int v3 = (char *)&v7 - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFNumberRef v4 = __error();
    *(_WORD *)_os_log_pack_fill( v3,  v2,  *v4,  &_mh_execute_header,  "timed out waiting for IOKit to quiesce") = 0;
    __SC_log_send(3LL, v0, v1, v3);
  }

  uint64_t v5 = sub_100018DA0();
  sub_100017A94(v5, v6, 0, 0LL);
  sub_100017910((__CFDictionary *)qword_100079B10, @"*TIMEOUT&NAMED*");
  sub_1000182E8();
  if (qword_100079B48 != -1) {
    dispatch_once(&qword_100079B48, &stru_100072210);
  }
}

uint64_t sub_100017EAC(int a1, io_iterator_t iterator)
{
  kern_return_t v4;
  kern_return_t v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  _DWORD *v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  __CFRunLoopTimer *v17;
  CFAbsoluteTime Current;
  int v19;
  uint64_t result = IOIteratorNext(iterator);
  if ((_DWORD)result)
  {
    io_object_t v3 = result;
    CFNumberRef v4 = IOServiceOpen(result, mach_task_self_, 0, (io_connect_t *)&dword_100079AE8);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        uint64_t v6 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v6;
      }

      uint64_t v7 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v6, v7))
      {
        CFTypeID v8 = _os_log_pack_size(8LL);
        uint64_t v9 = (char *)&v19 - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v10 = __error();
        os_log_t v11 = (_DWORD *)_os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "IOServiceOpen returned %d",  v19);
        const char *v11 = 67109120;
        v11[1] = v5;
        __SC_log_send(3LL, v6, v7, v9);
      }
    }

    else
    {
      sub_100017910((__CFDictionary *)qword_100079B10, @"*STACK*");
      uint64_t v12 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        uint64_t v12 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v12;
      }

      uint64_t v13 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v12, v13))
      {
        os_log_t v14 = _os_log_pack_size(2LL);
        uint64_t v15 = (char *)&v19 - ((__chkstk_darwin(v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v16 = __error();
        *(_WORD *)_os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "IONetworkStack found") = 0;
        __SC_log_send(6LL, v12, v13, v15);
      }

      if (dword_100079B0C)
      {
        IOObjectRelease(dword_100079B0C);
        dword_100079B0C = 0;
      }

      if (qword_100079B18 && CFRunLoopTimerIsValid((CFRunLoopTimerRef)qword_100079B18))
      {
        uint64_t v17 = (__CFRunLoopTimer *)qword_100079B18;
        CFRunLoopRef Current = CFAbsoluteTimeGetCurrent();
        CFRunLoopTimerSetNextFireDate(v17, Current + *(double *)&qword_1000798D0);
      }

      sub_1000197B4();
    }

    return IOObjectRelease(v3);
  }

  return result;
}

void sub_100018130(int a1, io_iterator_t iterator)
{
  uint64_t v3 = IOIteratorNext(iterator);
  if ((_DWORD)v3)
  {
    uint64_t v4 = v3;
    do
    {
      uint64_t v5 = _SCNetworkInterfaceCreateWithIONetworkInterfaceObject(v4);
      if (v5)
      {
        uint64_t v6 = (const void *)v5;
        CFMutableArrayRef Mutable = (__CFArray *)qword_100079B50;
        if (!qword_100079B50)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
          qword_100079B50 = (uint64_t)Mutable;
        }

        CFArrayAppendValue(Mutable, v6);
        CFRelease(v6);
      }

      IOObjectRelease(v4);
      uint64_t v4 = IOIteratorNext(iterator);
    }

    while ((_DWORD)v4);
  }

  sub_1000197B4();
}

CFComparisonResult sub_1000181FC(const __CFDictionary *a1, const __CFDictionary *a2)
{
  CFPropertyListRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"IOInterfaceNamePrefix");
  uint64_t v5 = (const __CFString *)CFDictionaryGetValue(a2, @"IOInterfaceNamePrefix");
  CFComparisonResult result = CFStringCompare(Value, v5, 0LL);
  if (result == kCFCompareEqualTo)
  {
    uint64_t v7 = (const __CFNumber *)CFDictionaryGetValue(a1, @"IOInterfaceUnit");
    CFTypeID v8 = (const __CFNumber *)CFDictionaryGetValue(a2, @"IOInterfaceUnit");
    return CFNumberCompare(v7, v8, 0LL);
  }

  return result;
}

void sub_1000182E8()
{
  os_log_t v0 = SCDynamicStoreKeyCreate(0LL, @"%@InterfaceNamer", kSCDynamicStoreDomainPlugin);
  SCDynamicStoreSetValue(0LL, v0, (CFPropertyListRef)qword_100079B10);
  CFRelease(v0);
}

void sub_100018370(id a1)
{
  keys = @"avoid-deadlock";
  values = kCFBooleanFalse;
  sub_100018630((CFPropertyListRef)qword_100079AF0);
  CFDictionaryRef v1 = CFDictionaryCreate( 0LL,  (const void **)&keys,  (const void **)&values,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  uint64_t v16 = (const char *)SCPreferencesCreateWithOptions( 0LL,  @"InterfaceNamer:upgradeNetworkConfiguration",  @"NetworkInterfaces.plist",  0LL,  v1);
  CFRelease(v1);
  if (v16)
  {
    int v2 = __SCNetworkConfigurationUpgrade(0LL, &v16, 1LL);
    CFRelease(v16);
    if (v2)
    {
      if (qword_100079AF0) {
        CFRelease((CFTypeRef)qword_100079AF0);
      }
      qword_100079AF0 = (uint64_t)sub_100017630();
      sub_100017910((__CFDictionary *)qword_100079B10, @"*UPGRADED*");
      os_log_t v3 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v3 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v3;
      }

      uint64_t v4 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v3, v4))
      {
        uint64_t v5 = _os_log_pack_size(2LL);
        uint64_t v6 = (char *)&v16 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v7 = __error();
        *(_WORD *)_os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "network configuration upgraded") = 0;
        __SC_log_send(6LL, v3, v4, v6);
      }

      sub_1000182E8();
    }
  }

  else
  {
    os_log_t v8 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v8 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v8;
    }

    uint64_t v9 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v8, v9))
    {
      uint64_t v10 = _os_log_pack_size(12LL);
      os_log_t v11 = (char *)&v16 - ((__chkstk_darwin(v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v12 = __error();
      uint64_t v13 = _os_log_pack_fill( v11,  v10,  *v12,  &_mh_execute_header,  "SCPreferencesCreate() failed: %s",  v16);
      int v14 = SCError();
      uint64_t v15 = SCErrorString(v14);
      *(_DWORD *)uint64_t v13 = 136315138;
      *(void *)(v13 + 4) = v15;
      __SC_log_send(5LL, v8, v9, v11);
    }
  }

void sub_100018630(CFPropertyListRef a1)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    os_log_t v3 = SCPreferencesCreate(0LL, @"InterfaceNamer:writeInterfaceList", @"NetworkInterfaces.plist");
    if (v3)
    {
      uint64_t v4 = v3;
      CFPropertyListRef Value = SCPreferencesGetValue(v3, @"Interfaces");
      if (Value != a1)
      {
        CFPropertyListRef v6 = Value;
        if (!Value || !CFEqual(Value, a1))
        {
          CFPropertyListRef v7 = SCPreferencesGetValue(v4, @"Model");
          CFPropertyListRef v8 = (CFPropertyListRef)_SC_hw_model(0LL);
          uint64_t v9 = v8;
          if (v7 && v7 != v8)
          {
            BOOL v10 = v8 && CFEqual(v7, v8) != 0;
            if (v6 && !v10)
            {
              os_log_t v19 = (os_log_t)qword_100079AE0;
              if (!qword_100079AE0)
              {
                os_log_t v19 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                qword_100079AE0 = (uint64_t)v19;
              }

              uint64_t v20 = _SC_syslog_os_log_mapping(5LL);
              if (__SC_log_enabled(5LL, v19, v20))
              {
                uint64_t v21 = _os_log_pack_size(22LL);
                uint64_t v22 = (char *)&v34 - ((__chkstk_darwin(v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                uint64_t v23 = __error();
                uint64_t v24 = _os_log_pack_fill( v22,  v21,  *v23,  &_mh_execute_header,  "Hardware model changed\n  created on %@\n  now on     %@");
                *(_DWORD *)uint64_t v24 = 138412546;
                *(void *)(v24 + 4) = v7;
                *(_WORD *)(v24 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
                *(void *)(v24 + 14) = v9;
                __SC_log_send(5LL, v19, v20, v22);
              }

              sub_100018A74(v4, (uint64_t)v7);
            }
          }

          SCPreferencesSetValue(v4, @"Model", v9);
          SCPreferencesSetValue(v4, @"Interfaces", a1);
          if (!v6)
          {
            HIDWORD(v34) = 20191120;
            CFNumberRef v25 = CFNumberCreate(0LL, kCFNumberIntType, (char *)&v34 + 4);
            SCPreferencesSetValue(v4, kSCPrefVersion, v25);
            CFRelease(v25);
          }

          if (!SCPreferencesCommitChanges(v4) && SCError() != 30)
          {
            os_log_t v26 = (os_log_t)qword_100079AE0;
            if (!qword_100079AE0)
            {
              os_log_t v26 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
              qword_100079AE0 = (uint64_t)v26;
            }

            uint64_t v27 = _SC_syslog_os_log_mapping(5LL);
            if (__SC_log_enabled(5LL, v26, v27))
            {
              uint64_t v28 = _os_log_pack_size(12LL);
              uint64_t v29 = (char *)&v34 - ((__chkstk_darwin(v28) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              int v30 = __error();
              uint64_t v31 = _os_log_pack_fill( v29,  v28,  *v30,  &_mh_execute_header,  "SCPreferencesCommitChanges() failed: %s",  v34);
              int v32 = SCError();
              uint64_t v33 = SCErrorString(v32);
              *(_DWORD *)uint64_t v31 = 136315138;
              *(void *)(v31 + 4) = v33;
              __SC_log_send(5LL, v26, v27, v29);
            }
          }
        }
      }

      CFRelease(v4);
    }

    else
    {
      os_log_t v11 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v11 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v11;
      }

      uint64_t v12 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v11, v12))
      {
        uint64_t v13 = _os_log_pack_size(12LL);
        int v14 = (char *)&v34 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v15 = __error();
        uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "SCPreferencesCreate(NetworkInterfaces.plist) failed: %s",  v34);
        int v17 = SCError();
        uint64_t v18 = SCErrorString(v17);
        *(_DWORD *)uint64_t v16 = 136315138;
        *(void *)(v16 + 4) = v18;
        __SC_log_send(5LL, v11, v12, v14);
      }
    }
  }

void sub_100018A74(const __SCPreferences *a1, uint64_t a2)
{
  os_log_t v3 = CFStringCreateWithFormat(0LL, 0LL, @"%@-%@", @"NetworkInterfaces.plist", a2);
  uint64_t v4 = SCPreferencesCreate(0LL, @"InterfaceNamer:writeInterfaceListForModel", v3);
  CFRelease(v3);
  if (v4)
  {
    CFPropertyListRef Value = SCPreferencesPathGetValue(a1, @"/");
    if (!SCPreferencesPathSetValue(v4, @"/", Value))
    {
      os_log_t v6 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v6 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v6;
      }

      uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v6, v7))
      {
        uint64_t v8 = _os_log_pack_size(12LL);
        uint64_t v9 = (char *)&v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        BOOL v10 = __error();
        uint64_t v11 = _os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "SCPreferencesPathSetValue() failed: %s",  v26);
        int v12 = SCError();
        uint64_t v13 = SCErrorString(v12);
        *(_DWORD *)uint64_t v11 = 136315138;
        *(void *)(v11 + 4) = v13;
        __SC_log_send(5LL, v6, v7, v9);
      }
    }

    int v14 = SCPreferencesCommitChanges(v4);
    CFRelease(v4);
    if (!v14)
    {
      os_log_t v15 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v15 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v15;
      }

      uint64_t v16 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v15, v16))
      {
        uint64_t v17 = _os_log_pack_size(12LL);
        uint64_t v18 = (char *)&v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v19 = *__error();
        uint64_t v20 = _os_log_pack_fill( v18,  v17,  v19,  &_mh_execute_header,  "SCPreferencesCommitChanges(NetworkInterfaces-<model>.plist) failed: %s");
LABEL_16:
        uint64_t v23 = v20;
        int v24 = SCError();
        CFNumberRef v25 = SCErrorString(v24);
        *(_DWORD *)uint64_t v23 = 136315138;
        *(void *)(v23 + 4) = v25;
        __SC_log_send(5LL, v15, v16, v18);
      }
    }
  }

  else
  {
    os_log_t v15 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v15 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v15;
    }

    uint64_t v16 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v15, v16))
    {
      uint64_t v21 = _os_log_pack_size(12LL);
      uint64_t v18 = (char *)&v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v22 = *__error();
      uint64_t v20 = _os_log_pack_fill( v18,  v21,  v22,  &_mh_execute_header,  "SCPreferencesCreate(NetworkInterfaces-<model>.plist) failed: %s");
      goto LABEL_16;
    }
  }

uint64_t sub_100018DA0()
{
  kern_return_t v0;
  __n128 v1;
  kern_return_t v2;
  os_log_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  int *v8;
  _DWORD *v9;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  io_iterator_t iterator[2];
  *(void *)iterator = 0LL;
  os_log_t v0 = IORegistryCreateIterator(kIOMainPortDefault, "IOService", 0, iterator);
  if (v0)
  {
    int v2 = v0;
    os_log_t v3 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v3 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v3;
    }

    uint64_t v4 = _SC_syslog_os_log_mapping(5LL);
    CFComparisonResult result = __SC_log_enabled(5LL, v3, v4);
    if ((_DWORD)result)
    {
      os_log_t v6 = _os_log_pack_size(8LL);
      uint64_t v7 = (char *)iterator - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v8 = __error();
      uint64_t v9 = (_DWORD *)_os_log_pack_fill( v7,  v6,  *v8,  &_mh_execute_header,  "IORegistryCreateIterator() returned %d",  iterator[0]);
      *uint64_t v9 = 67109120;
      v9[1] = v2;
      return __SC_log_send(5LL, v3, v4, v7);
    }
  }

  else
  {
    sub_100018FD0(iterator[0], 0LL, &iterator[1], v1);
    if (!iterator[1])
    {
      BOOL v10 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        BOOL v10 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v10;
      }

      uint64_t v11 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v10, v11))
      {
        int v12 = _os_log_pack_size(2LL);
        uint64_t v13 = (char *)iterator - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v14 = __error();
        *(_WORD *)_os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "w/no busy services") = 0;
        __SC_log_send(3LL, v10, v11, v13);
      }
    }

    return IOObjectRelease(iterator[0]);
  }

  return result;
}

uint64_t sub_100018FD0(uint64_t a1, const __CFArray *a2, _DWORD *a3, __n128 a4)
{
  kern_return_t Name;
  kern_return_t v12;
  os_log_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  _DWORD *v19;
  char *v20;
  kern_return_t v21;
  __CFString *Mutable;
  kern_return_t LocationInPlane;
  kern_return_t BusyStateAndTime;
  os_log_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _DWORD *v30;
  os_log_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  uint64_t v36;
  _DWORD *v37;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int *v43;
  CFStringRef v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int *v49;
  uint64_t v50;
  const char *v51;
  const char *v52;
  const char *v53;
  int v54;
  unint64_t v55;
  char *v56;
  kern_return_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  __n128 v63;
  _DWORD *v64;
  CFArrayRef v65;
  unsigned int v66;
  __n128 v67;
  _BYTE v68[12];
  int v69;
  unint64_t v70;
  char v71[128];
  char v72[128];
  int v64 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  p_base_props = &QoSMarkingController__classData.base_props;
  a4.n128_u64[0] = 67109120LL;
  CFStringRef v67 = a4;
  a4.n128_u64[0] = 138413570LL;
  uint64_t v63 = a4;
  CFStringRef v65 = a2;
  v66 = a1;
  do
  {
    uint64_t result = IOIteratorNext(v5);
    if (!(_DWORD)result) {
      break;
    }
    uint64_t v8 = result;
    if (v4) {
      MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0LL, 0LL, v4);
    }
    else {
      MutableCFArrayRef Copy = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    }
    BOOL v10 = MutableCopy;
    if (!MutableCopy) {
      sub_100061BAC();
    }
    Name = IORegistryEntryGetName(v8, v71);
    if (Name)
    {
      int v12 = Name;
      uint64_t v13 = (os_log_t)p_base_props[348];
      if (!v13)
      {
        uint64_t v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        p_base_props[348] = (__objc2_prop_list *)v13;
      }

      int v14 = _SC_syslog_os_log_mapping(5LL);
      os_log_t v15 = _os_log_pack_size(8LL);
      uint64_t v16 = (char *)&v63 - ((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v17 = __error();
      uint64_t v18 = v15;
      uint64_t v5 = v66;
      uint64_t v19 = (_DWORD *)_os_log_pack_fill( v16,  v18,  *v17,  &_mh_execute_header,  "IORegistryEntryGetName() returned %d",  v63.n128_u32[0]);
      *uint64_t v19 = v67.n128_u32[0];
      v19[1] = v12;
      uint64_t v20 = v16;
      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
      __SC_log_send(5LL, v13, v14, v20);
      uint64_t v21 = 1;
    }

    else
    {
      CFMutableArrayRef Mutable = CFStringCreateMutable(0LL, 0LL);
      CFStringAppendCString(Mutable, v71, 0x8000100u);
      LocationInPlane = IORegistryEntryGetLocationInPlane(v8, "IOService", v72);
      if (LocationInPlane != -536870160)
      {
        uint64_t v21 = LocationInPlane;
        if (LocationInPlane)
        {
          uint64_t v31 = (os_log_t)p_base_props[348];
          if (!v31)
          {
            uint64_t v31 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            p_base_props[348] = (__objc2_prop_list *)v31;
          }

          int v32 = _SC_syslog_os_log_mapping(5LL);
          if (__SC_log_enabled(5LL, v31, v32))
          {
            uint64_t v33 = _os_log_pack_size(8LL);
            uint64_t v34 = (char *)&v63 - ((__chkstk_darwin(v33) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v35 = __error();
            uint64_t v36 = v33;
            p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
            uint64_t v37 = (_DWORD *)_os_log_pack_fill( v34,  v36,  *v35,  &_mh_execute_header,  "IORegistryEntryGetLocationInPlane() returned %d",  v63.n128_u32[0]);
            *uint64_t v37 = v67.n128_u32[0];
            v37[1] = v21;
            __SC_log_send(5LL, v31, v32, v34);
            uint64_t v4 = v65;
          }

          CFRelease(Mutable);
          uint64_t v5 = v66;
          goto LABEL_54;
        }

        CFStringAppendCString(Mutable, "@", 0x8000100u);
        CFStringAppendCString(Mutable, v72, 0x8000100u);
      }

      CFArrayAppendValue(v10, Mutable);
      CFRelease(Mutable);
      BusyStateAndTime = IOServiceGetBusyStateAndTime(v8, v68, &v69, &v70);
      if (BusyStateAndTime)
      {
        uint64_t v21 = BusyStateAndTime;
        CFNumberRef v25 = (os_log_t)p_base_props[348];
        if (!v25)
        {
          CFNumberRef v25 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          p_base_props[348] = (__objc2_prop_list *)v25;
        }

        os_log_t v26 = _SC_syslog_os_log_mapping(5LL);
        uint64_t v27 = _os_log_pack_size(8LL);
        uint64_t v28 = (char *)&v63 - ((__chkstk_darwin(v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v29 = *__error();
        int v30 = (_DWORD *)_os_log_pack_fill( v28,  v27,  v29,  &_mh_execute_header,  "IOServiceGetBusyStateAndTime() returned %d");
LABEL_52:
        *int v30 = v67.n128_u32[0];
        v30[1] = v21;
        CFStringRef v62 = v28;
        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
        __SC_log_send(5LL, v25, v26, v62);
        uint64_t v21 = 1;
        uint64_t v4 = v65;
        goto LABEL_54;
      }

      if (v69)
      {
        if (!(*v64)++)
        {
          int v39 = (os_log_t)p_base_props[348];
          if (!v39)
          {
            int v39 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            p_base_props[348] = (__objc2_prop_list *)v39;
          }

          uint64_t v40 = _SC_syslog_os_log_mapping(3LL);
          if (__SC_log_enabled(3LL, v39, v40))
          {
            os_log_t v41 = _os_log_pack_size(2LL);
            uint64_t v42 = (char *)&v63 - ((__chkstk_darwin(v41) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v43 = __error();
            *(_WORD *)_os_log_pack_fill(v42, v41, *v43, &_mh_execute_header, "Busy services :") = 0;
            __SC_log_send(3LL, v39, v40, v42);
            uint64_t v4 = v65;
          }
        }

        CFNumberRef v44 = CFStringCreateByCombiningStrings(0LL, v10, @"/");
        uint64_t v45 = (os_log_t)p_base_props[348];
        if (!v45)
        {
          uint64_t v45 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          p_base_props[348] = (__objc2_prop_list *)v45;
        }

        int v46 = _SC_syslog_os_log_mapping(3LL);
        if (__SC_log_enabled(3LL, v45, v46))
        {
          char v47 = _os_log_pack_size(58LL);
          os_log_t v48 = (char *)&v63 - ((__chkstk_darwin(v47) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v49 = __error();
          uint64_t v50 = _os_log_pack_fill(v48, v47, *v49, &_mh_execute_header, "  %@ [%s%s%s%u, %llu ms]");
          uint64_t v51 = "!registered, ";
          if ((v68[0] & 2) != 0) {
            uint64_t v51 = "";
          }
          CFMutableDictionaryRef v52 = "!matched, ";
          if ((v68[0] & 4) != 0) {
            CFMutableDictionaryRef v52 = "";
          }
          uint64_t v53 = "inactive, ";
          if ((v68[0] & 1) == 0) {
            uint64_t v53 = "";
          }
          int v54 = v69;
          uint64_t v55 = v70;
          *(_DWORD *)uint64_t v50 = v63.n128_u32[0];
          *(void *)(v50 + 4) = v44;
          *(_WORD *)(v50 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
          *(void *)(v50 + 14) = v51;
          *(_WORD *)(v50 + 2pthread_attr_setdetachstate(&v4, 2) = 2080;
          *(void *)(v50 + 24) = v52;
          *(_WORD *)(v50 + 3pthread_attr_setdetachstate(&v4, 2) = 2080;
          *(void *)(v50 + 34) = v53;
          *(_WORD *)(v50 + 4pthread_attr_setdetachstate(&v4, 2) = 1024;
          *(_DWORD *)(v50 + 44) = v54;
          *(_WORD *)(v50 + 48) = 2048;
          *(void *)(v50 + 5sub_10000F430((uint64_t)__str, 0) = v55 / 0xF4240;
          os_log_t v56 = v48;
          p_base_props = &QoSMarkingController__classData.base_props;
          __SC_log_send(3LL, v45, v46, v56);
          uint64_t v4 = v65;
        }

        CFRelease(v44);
      }

      uint64_t v57 = IORegistryIteratorEnterEntry(v5);
      if (v57)
      {
        uint64_t v21 = v57;
        CFNumberRef v25 = (os_log_t)p_base_props[348];
        if (!v25)
        {
          CFNumberRef v25 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          p_base_props[348] = (__objc2_prop_list *)v25;
        }

        os_log_t v26 = _SC_syslog_os_log_mapping(5LL);
        uint64_t v58 = _os_log_pack_size(8LL);
        uint64_t v28 = (char *)&v63 - ((__chkstk_darwin(v58) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        v59 = *__error();
        int v30 = (_DWORD *)_os_log_pack_fill( v28,  v58,  v59,  &_mh_execute_header,  "IORegistryIteratorEnterEntry() returned %d");
        goto LABEL_52;
      }

      sub_100018FD0(v5, v10, v64);
      uint64_t v21 = IORegistryIteratorExitEntry(v5);
      if (v21)
      {
        CFNumberRef v25 = (os_log_t)p_base_props[348];
        if (!v25)
        {
          CFNumberRef v25 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          p_base_props[348] = (__objc2_prop_list *)v25;
        }

        os_log_t v26 = _SC_syslog_os_log_mapping(5LL);
        if (!__SC_log_enabled(5LL, v25, v26))
        {
LABEL_53:
          uint64_t v21 = 1;
          goto LABEL_54;
        }

        uint64_t v60 = _os_log_pack_size(8LL);
        uint64_t v28 = (char *)&v63 - ((__chkstk_darwin(v60) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v61 = *__error();
        int v30 = (_DWORD *)_os_log_pack_fill( v28,  v60,  v61,  &_mh_execute_header,  "IORegistryIteratorExitEntry() returned %d");
        goto LABEL_52;
      }
    }

LABEL_54:
    CFRelease(v10);
    uint64_t result = IOObjectRelease(v8);
  }

  while (!v21);
  return result;
}

    int v12 = CFDictionaryGetValue(a2, kSCPropInterfaceName);
    goto LABEL_55;
  }

  uint64_t v29 = CFDictionaryContainsKey(Mutable, v40);
  if (a2 && v29 && !v12) {
    goto LABEL_54;
  }
LABEL_70:
  if (!v12)
  {
LABEL_76:
    uint64_t v37 = sub_10003879C(key, kSCEntNetDNS, Mutable);
    if (!Mutable) {
      return v37;
    }
LABEL_77:
    CFRelease(Mutable);
    return v37;
  }

  CFRetain(v12);
  uint64_t v36 = sub_10003879C(key, kSCEntNetDNS, Mutable);
  uint64_t v37 = v36;
  if ((v13 & 2) != 0 && (_DWORD)v36) {
    sub_100034D5C(1, v12);
  }
  CFRelease(v12);
  if (Mutable) {
    goto LABEL_77;
  }
  return v37;
}

void sub_1000197B4()
{
  if (!dword_100079AE8) {
    return;
  }
  os_log_t v0 = (const __CFArray *)qword_100079B50;
  if (qword_100079B50)
  {
    uint64_t Count = CFArrayGetCount((CFArrayRef)qword_100079B50);
    if (Count >= 2)
    {
      v15.length = Count;
      v15.location = 0LL;
      CFArraySortValues((CFMutableArrayRef)qword_100079B50, v15, (CFComparatorFunction)&_SCNetworkInterfaceCompare, 0LL);
    }

    sub_100019A9C((const __CFArray *)qword_100079B50);
    os_log_t v0 = (const __CFArray *)qword_100079B50;
  }

  sub_100019F3C(v0);
  if (&kLockdownNotificationTrustedPTPAttached) {
    BOOL v2 = &kLockdownNotificationTrustedHostAttached == 0LL;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2
    && &kLockdownNotificationHostDetached != 0LL
    && &kLockdownNotificationHostAttached != 0LL
    && &_lockdown_is_host_trusted != 0LL)
  {
    sub_10001A2C0((const __CFArray *)qword_100079B50);
  }

  if (dword_100079B08)
  {
    if (qword_100079B40 && !CFArrayGetCount((CFArrayRef)qword_100079B40))
    {
      sub_100017910((__CFDictionary *)qword_100079B10, @"*COMPLETE*");
      os_log_t v6 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v6 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v6;
      }

      uint64_t v7 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v6, v7))
      {
        uint64_t v8 = _os_log_pack_size(2LL);
        uint64_t v9 = (char *)block - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        BOOL v10 = __error();
        *(_WORD *)_os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "last boot interfaces have been named") = 0;
        __SC_log_send(6LL, v6, v7, v9);
      }

      sub_1000182E8();
      uint64_t v11 = &qword_100079B40;
      CFRelease((CFTypeRef)qword_100079B40);
      goto LABEL_37;
    }

    return;
  }

  sub_10001A6E0();
  sub_100018630((CFPropertyListRef)qword_100079AF0);
  sub_1000171C4(0LL, 2);
  sub_1000182E8();
  if ((os_variant_is_darwinos("com.apple.SystemConfiguration.InterfaceNamer") & 1) != 0 || byte_100079B21)
  {
    int v12 = (const void *)qword_100079B50;
    if (qword_100079BA0 == -1)
    {
      if (!qword_100079B50) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }

    dispatch_once(&qword_100079BA0, &stru_1000723D0);
    if (v12)
    {
LABEL_32:
      uint64_t v13 = (dispatch_queue_s *)qword_100079BA8;
      CFRetain(v12);
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000LL;
      block[2] = sub_10001F55C;
      block[3] = &unk_100072390;
      block[4] = v12;
      dispatch_async(v13, block);
    }
  }

LABEL_33:
  sub_10001AA30();
  if (qword_100079B40)
  {
    CFRelease((CFTypeRef)qword_100079B40);
    qword_100079B40 = 0LL;
  }

  if (qword_100079B50)
  {
    CFRelease((CFTypeRef)qword_100079B50);
    uint64_t v11 = &qword_100079B50;
LABEL_37:
    uint64_t *v11 = 0LL;
  }

      if (ArrayBySeparatingStrings) {
        CFRelease(ArrayBySeparatingStrings);
      }
      if (v13) {
        CFRelease(v13);
      }
    }

    else if (HasSuffix)
    {
      return 1LL;
    }

    else
    {
      return -1LL;
    }
  }

  return v8;
}

  free(v4);
}

  uint64_t v28 = 0;
  if (v7) {
LABEL_34:
  }
    [v4 updateAgentData:v7];
LABEL_35:

  return v28;
}

void sub_100019A9C(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0LL;
    *(void *)&__int128 v3 = 136315650LL;
    __int128 v30 = v3;
    do
    {
      ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(a1, v5);
      os_log_t v7 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v7 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v7;
      }

      uint64_t v8 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v7, v8))
      {
        uint64_t v9 = _os_log_pack_size(28LL);
        BOOL v10 = (char *)&v30 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v11 = __error();
        uint64_t v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "%s: %d. %@");
        *(_DWORD *)uint64_t v12 = v30;
        *(void *)(v12 + 4) = "nameInterfaces";
        *(_WORD *)(v12 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
        *(_DWORD *)(v12 + 14) = v5;
        *(_WORD *)(v12 + 18) = 2112;
        *(void *)(v12 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = ValueAtIndex;
        __SC_log_send(6LL, v7, v8, v10);
      }

      if (_SCNetworkInterfaceIsSelfNamed(ValueAtIndex))
      {
        os_log_t v13 = (os_log_t)qword_100079AE0;
        if (!qword_100079AE0)
        {
          os_log_t v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_100079AE0 = (uint64_t)v13;
        }

        uint64_t v14 = _SC_syslog_os_log_mapping(6LL);
        if (__SC_log_enabled(6LL, v13, v14))
        {
          uint64_t v15 = _os_log_pack_size(2LL);
          uint64_t v16 = (char *)&v30 - ((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v17 = __error();
          *(_WORD *)_os_log_pack_fill( v16,  v15,  *v17,  &_mh_execute_header,  "Ignoring self-named interface") = 0;
          __SC_log_send(6LL, v13, v14, v16);
        }
      }

      else
      {
        if (_SCNetworkInterfaceGetIOInterfaceUnit(ValueAtIndex))
        {
          CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
          if (!BSDName || !CFDictionaryContainsKey((CFDictionaryRef)qword_100079B10, BSDName))
          {
            os_log_t v19 = (os_log_t)qword_100079AE0;
            if (!qword_100079AE0)
            {
              os_log_t v19 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
              qword_100079AE0 = (uint64_t)v19;
            }

            uint64_t v20 = _SC_syslog_os_log_mapping(6LL);
            if (__SC_log_enabled(6LL, v19, v20))
            {
              uint64_t v21 = _os_log_pack_size(2LL);
              uint64_t v22 = (char *)&v30 - ((__chkstk_darwin(v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              uint64_t v23 = __error();
              *(_WORD *)_os_log_pack_fill( v22,  v21,  *v23,  &_mh_execute_header,  "Interface already has a unit number") = 0;
              __SC_log_send(6LL, v19, v20, v22);
            }

            sub_10001AD28(ValueAtIndex);
          }

          goto LABEL_23;
        }

        int v24 = (const __SCNetworkInterface *)sub_10001B53C(ValueAtIndex, a1, v5);
        if (v24)
        {
          ValueAtIndex = v24;
          sub_10001AD28(v24);
          CFArraySetValueAtIndex(a1, v5, ValueAtIndex);
          CFRelease(ValueAtIndex);
          if (_SCNetworkInterfaceIsBuiltin(ValueAtIndex)
            && qword_100079B40
            && sub_10001C2FC((const __CFArray *)qword_100079B40, (uint64_t)ValueAtIndex, &v31))
          {
            os_log_t v25 = (os_log_t)qword_100079AE0;
            if (!qword_100079AE0)
            {
              os_log_t v25 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
              qword_100079AE0 = (uint64_t)v25;
            }

            uint64_t v26 = _SC_syslog_os_log_mapping(7LL);
            if (__SC_log_enabled(7LL, v25, v26))
            {
              uint64_t v27 = _os_log_pack_size(2LL);
              uint64_t v28 = (char *)&v30 - ((__chkstk_darwin(v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              uint64_t v29 = __error();
              *(_WORD *)_os_log_pack_fill( v28,  v27,  *v29,  &_mh_execute_header,  "  and updated database (new address)") = 0;
              __SC_log_send(7LL, v25, v26, v28);
            }

LABEL_22:
            CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_100079B40, v31);
          }

  CFPropertyListRef Value = SCDynamicStoreCopyLocalHostName(a1);
  if (!Value)
  {
    sub_100045024((uint64_t)@"localhost");
    if (!ValueAtIndex) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }

  uint64_t v26 = sub_10002E39C();
  uint64_t v27 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v26, v27))
  {
    uint64_t v28 = _os_log_pack_size(12LL);
    uint64_t v29 = (char *)&v39 - ((__chkstk_darwin(v28) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __int128 v30 = __error();
    CFIndex v31 = _os_log_pack_fill(v29, v28, *v30, &_mh_execute_header, "hostname (multicast DNS) = %@");
    *(_DWORD *)CFIndex v31 = 138412290;
    *(void *)(v31 + 4) = Value;
    __SC_log_send(6LL, v26, v27, v29);
  }

  MutableCFArrayRef Copy = CFStringCreateMutableCopy(0LL, 0LL, Value);
  if (!MutableCopy) {
    sub_100061DD8();
  }
  uint64_t v33 = MutableCopy;
  CFStringAppend(MutableCopy, @".local");
  sub_100045024((uint64_t)v33);
  CFRelease(v33);
  if (ValueAtIndex) {
LABEL_29:
  }
    CFRelease(ValueAtIndex);
LABEL_30:
  if (!Value)
  {
    if (!v13) {
      return;
    }
    goto LABEL_32;
  }

LABEL_23:
        }
      }

      ++v5;
    }

    while (v4 != v5);
  }

  uint64_t v20 = sub_10002E39C();
  uint64_t v21 = _SC_syslog_os_log_mapping(5LL);
  uint64_t result = __SC_log_enabled(5LL, v20, v21);
  if ((_DWORD)result)
  {
    uint64_t v22 = _os_log_pack_size(44LL);
    uint64_t v23 = (char *)&v28 - ((__chkstk_darwin(v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    int v24 = __error();
    os_log_t v25 = _os_log_pack_fill( v23,  v22,  *v24,  &_mh_execute_header,  "%s[%d] SetInterfaceRank(%s) = %s (%u)",  v28,  v29,  v30,  v31,  v32);
    uint64_t v26 = context[4];
    uint64_t v27 = *((_DWORD *)context + 6);
    *(_DWORD *)os_log_t v25 = 136316162;
    *(void *)(v25 + 4) = v26;
    *(_WORD *)(v25 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v25 + 14) = v27;
    *(_WORD *)(v25 + 18) = 2080;
    *(void *)(v25 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v13;
    *(_WORD *)(v25 + 28) = 2080;
    *(void *)(v25 + 3sub_10000F430((uint64_t)__str, 0) = v16;
    *(_WORD *)(v25 + 38) = 1024;
    *(_DWORD *)(v25 + 4sub_10000F430((uint64_t)__str, 0) = v15;
    __SC_log_send(5LL, v20, v21, v23);
    return 0LL;
  }

  return result;
}

void sub_100019F3C(const __CFArray *a1)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      int v5 = 0;
      CFIndex v6 = 0LL;
      p_base_props = &QoSMarkingController__classData.base_props;
      uint64_t v8 = &QoSMarkingController__classData.base_props;
      *(void *)&__int128 v3 = 138412290LL;
      __int128 v34 = v3;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
        if (_SCNetworkInterfaceIsApplePreconfigured(ValueAtIndex))
        {
          if (!sub_10001DE18((BOOL)p_base_props[365], ValueAtIndex))
          {
            BOOL v10 = sub_10001DEF4(ValueAtIndex, (uint64_t)sub_10001E0D4);
            if (v10) {
              break;
            }
          }
        }

LABEL_24:
        if (v4 == ++v6)
        {
          if (v5) {
            sub_10001E3F8();
          }
          return;
        }
      }

      uint64_t v11 = v10;
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)ValueAtIndex);
      os_log_t v13 = (os_log_t)v8[348];
      if (BSDName)
      {
        CFStringRef v14 = BSDName;
        if (!v13)
        {
          os_log_t v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          v8[348] = (__objc2_prop_list *)v13;
        }

        uint64_t v15 = _SC_syslog_os_log_mapping(6LL);
        uint64_t v16 = _os_log_pack_size(12LL);
        uint64_t v17 = (char *)&v34 - ((__chkstk_darwin(v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v18 = __error();
        uint64_t v19 = _os_log_pack_fill( v17,  v16,  *v18,  &_mh_execute_header,  "watching [pre-configured] interface: %@");
        *(_DWORD *)uint64_t v19 = v34;
        *(void *)(v19 + 4) = v14;
        os_log_t v20 = v13;
        uint64_t v21 = v15;
      }

      else
      {
        if (!v13)
        {
          os_log_t v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          v8[348] = (__objc2_prop_list *)v13;
        }

        uint64_t v22 = _SC_syslog_os_log_mapping(6LL);
        if (__SC_log_enabled(6LL, v13, v22))
        {
          uint64_t v23 = _os_log_pack_size(2LL);
          int v24 = (char *)&v34 - ((__chkstk_darwin(v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          os_log_t v25 = __error();
          uint64_t v26 = v23;
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          *(_WORD *)_os_log_pack_fill( v24,  v26,  *v25,  &_mh_execute_header,  "watching [pre-configured] interface w/no BSD name") = 0;
          uint64_t v27 = v24;
          uint64_t v8 = &QoSMarkingController__classData.base_props;
          __SC_log_send(6LL, v13, v22, v27);
        }

        os_log_t v28 = (os_log_t)v8[348];
        if (!v28)
        {
          os_log_t v28 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          v8[348] = (__objc2_prop_list *)v28;
        }

        uint64_t v29 = _SC_syslog_os_log_mapping(6LL);
        uint64_t v30 = _os_log_pack_size(12LL);
        uint64_t v17 = (char *)&v34 - ((__chkstk_darwin(v30) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFIndex v31 = __error();
        uint64_t v32 = _os_log_pack_fill(v17, v30, *v31, &_mh_execute_header, "  interface = %@");
        *(_DWORD *)uint64_t v32 = v34;
        *(void *)(v32 + 4) = ValueAtIndex;
        os_log_t v20 = v28;
        uint64_t v21 = v29;
      }

      __SC_log_send(6LL, v20, v21, v17);
      p_base_props = &QoSMarkingController__classData.base_props;
      uint64_t v8 = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
LABEL_21:
      CFMutableArrayRef Mutable = (__CFArray *)p_base_props[365];
      if (!Mutable)
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
        p_base_props[365] = (__objc2_prop_list *)Mutable;
      }

      CFArrayAppendValue(Mutable, v11);
      CFRelease(v11);
      int v5 = 1;
      goto LABEL_24;
    }
  }

  CFStringRef v14 = v8;
LABEL_25:
  uint64_t v8 = v14;
LABEL_26:
  CFRelease(Mutable);
  a1[18] = bswap32(v8);
}

  if (Mutable)
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  Mutable,  200LL,  0LL,  0LL));
    CFRelease(Mutable);
    return v16;
  }

  return 0LL;
}

void sub_10001A2C0(const __CFArray *a1)
{
  if (!a1) {
    return;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return;
  }
  CFIndex v4 = Count;
  int v5 = 0;
  CFIndex v6 = 0LL;
  p_base_props = &QoSMarkingController__classData.base_props;
  uint64_t v8 = &QoSMarkingController__classData.base_props;
  *(void *)&__int128 v3 = 138412290LL;
  __int128 v35 = v3;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
    if (sub_10001DE18((BOOL)p_base_props[366], ValueAtIndex)) {
      goto LABEL_24;
    }
    BOOL v10 = sub_10001DEF4(ValueAtIndex, (uint64_t)sub_10001E900);
    if (!v10) {
      goto LABEL_24;
    }
    uint64_t v11 = v10;
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)ValueAtIndex);
    os_log_t v13 = (os_log_t)v8[348];
    if (BSDName)
    {
      CFStringRef v14 = BSDName;
      if (!v13)
      {
        os_log_t v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        v8[348] = (__objc2_prop_list *)v13;
      }

      uint64_t v15 = _SC_syslog_os_log_mapping(6LL);
      uint64_t v16 = _os_log_pack_size(12LL);
      uint64_t v17 = (char *)&block[-2] - ((__chkstk_darwin(v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v18 = __error();
      uint64_t v19 = _os_log_pack_fill( v17,  v16,  *v18,  &_mh_execute_header,  "watching [trust required] interface: %@");
      *(_DWORD *)uint64_t v19 = v35;
      *(void *)(v19 + 4) = v14;
      os_log_t v20 = v13;
      uint64_t v21 = v15;
    }

    else
    {
      if (!v13)
      {
        os_log_t v13 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        v8[348] = (__objc2_prop_list *)v13;
      }

      uint64_t v22 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v13, v22))
      {
        uint64_t v23 = _os_log_pack_size(2LL);
        int v24 = (char *)&block[-2] - ((__chkstk_darwin(v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        os_log_t v25 = __error();
        uint64_t v26 = v23;
        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
        *(_WORD *)_os_log_pack_fill( v24,  v26,  *v25,  &_mh_execute_header,  "watching [trust required] interface w/no BSD name") = 0;
        uint64_t v27 = v24;
        uint64_t v8 = &QoSMarkingController__classData.base_props;
        __SC_log_send(6LL, v13, v22, v27);
      }

      os_log_t v28 = (os_log_t)v8[348];
      if (!v28)
      {
        os_log_t v28 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        v8[348] = (__objc2_prop_list *)v28;
      }

      uint64_t v29 = _SC_syslog_os_log_mapping(6LL);
      uint64_t v30 = _os_log_pack_size(12LL);
      uint64_t v17 = (char *)&block[-2] - ((__chkstk_darwin(v30) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFIndex v31 = __error();
      uint64_t v32 = _os_log_pack_fill(v17, v30, *v31, &_mh_execute_header, "  interface = %@");
      *(_DWORD *)uint64_t v32 = v35;
      *(void *)(v32 + 4) = ValueAtIndex;
      os_log_t v20 = v28;
      uint64_t v21 = v29;
    }

    __SC_log_send(6LL, v20, v21, v17);
    p_base_props = &QoSMarkingController__classData.base_props;
    uint64_t v8 = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
LABEL_21:
    CFMutableArrayRef Mutable = (__CFArray *)p_base_props[366];
    if (!Mutable)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      p_base_props[366] = (__objc2_prop_list *)Mutable;
    }

    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
    int v5 = 1;
LABEL_24:
    ++v6;
  }

  while (v4 != v6);
  if (v5)
  {
    CFRunLoopRef Current = CFRunLoopGetCurrent();
    if (qword_100079B78 != -1) {
      dispatch_once(&qword_100079B78, &stru_100072290);
    }
    CFRetain(Current);
    if (qword_100079B80 != -1) {
      dispatch_once(&qword_100079B80, &stru_100072330);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = sub_10001EE80;
    block[3] = &unk_1000722B0;
    block[4] = Current;
    dispatch_async((dispatch_queue_t)qword_100079B88, block);
  }

void sub_10001A6E0()
{
  if (qword_100079AF0) {
    BOOL v0 = qword_100079B40 == 0;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_100079B40);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      *(void *)&__int128 v2 = 138412290LL;
      __int128 v29 = v2;
      do
      {
        uint64_t v4 = v3--;
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_100079B40, v3);
        CFIndex v6 = CFDictionaryGetValue(ValueAtIndex, @"BSD Name");
        CFTypeID TypeID = CFStringGetTypeID();
        if (v6)
        {
          if (CFGetTypeID(v6) == TypeID)
          {
            uint64_t v8 = CFDictionaryGetValue(ValueAtIndex, @"HiddenConfiguration");
            CFTypeID v9 = CFBooleanGetTypeID();
            if (v8)
            {
              if (CFGetTypeID(v8) == v9 && CFBooleanGetValue((CFBooleanRef)v8))
              {
                if ((v10 = CFDictionaryGetValue(ValueAtIndex, @"IOBuiltin"), CFTypeID v11 = CFBooleanGetTypeID(), v10)
                  && CFGetTypeID(v10) == v11
                  && CFBooleanGetValue((CFBooleanRef)v10)
                  || (int v24 = CFDictionaryGetValue(ValueAtIndex, @"SCNetworkInterfaceInfo"),
                      CFTypeID v25 = CFDictionaryGetTypeID(),
                      v24)
                  && CFGetTypeID(v24) == v25
                  && CFDictionaryGetValueIfPresent((CFDictionaryRef)v24, @"idVendor", (const void **)&value)
                  && (v26 = value, CFTypeID v27 = CFNumberGetTypeID(), v26)
                  && CFGetTypeID(v26) == v27
                  && CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr)
                  && valuePtr == 1452)
                {
                  os_log_t v12 = (os_log_t)qword_100079AE0;
                  if (!qword_100079AE0)
                  {
                    os_log_t v12 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                    qword_100079AE0 = (uint64_t)v12;
                  }

                  uint64_t v13 = _SC_syslog_os_log_mapping(6LL);
                  if (__SC_log_enabled(6LL, v12, v13))
                  {
                    uint64_t v14 = _os_log_pack_size(12LL);
                    v28[1] = v28;
                    uint64_t v15 = (char *)v28 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
                    uint64_t v16 = __error();
                    uint64_t v17 = _os_log_pack_fill( v15,  v14,  *v16,  &_mh_execute_header,  "Removing no-longer-active hidden interface: %@");
                    *(_DWORD *)uint64_t v17 = v29;
                    *(void *)(v17 + 4) = v6;
                    __SC_log_send(6LL, v12, v13, v15);
                  }

                  uint64_t v18 = (const __CFArray *)qword_100079AF0;
                  if (qword_100079AF0)
                  {
                    CFIndex v19 = CFArrayGetCount((CFArrayRef)qword_100079AF0);
                    if (v19 >= 1)
                    {
                      CFIndex v20 = v19;
                      CFIndex v21 = 0LL;
                      while (1)
                      {
                        uint64_t v22 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v21);
                        uint64_t v23 = CFDictionaryGetValue(v22, @"BSD Name");
                        if (v23 == v6 || v23 && CFEqual(v23, v6)) {
                          break;
                        }
                        if (v20 == ++v21) {
                          goto LABEL_37;
                        }
                      }

                      if (v22)
                      {
                        CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_100079AF0, v21);
                        CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_100079B40, v3);
                      }
                    }
                  }
                }
              }
            }
          }
        }

LABEL_37:
        ;
      }

      while (v4 > 1);
    }
  }

      if (++v40 == v12) {
        goto LABEL_3;
      }
    }
  }

  *CFTypeID v9 = a5;
  uint64_t v13 = 1LL;
LABEL_3:
  uint64_t result = sub_10005CD14(v76, v9, v13);
  if (v12 >= 1)
  {
    uint64_t v16 = 0LL;
    *(void *)&uint64_t v15 = 136315650LL;
    uint64_t v73 = v15;
    *(void *)&uint64_t v15 = 136315394LL;
    CFStringRef v72 = v15;
    while (1)
    {
      uint64_t v17 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v77, v16);
      ServiceQoSMarkingPolicy = SCNetworkCategoryGetServiceQoSMarkingPolicy(v74, v75, v17);
      CFIndex v19 = SCNetworkSetAddService(*(SCNetworkSetRef *)(v76 + 8), v17);
      CFIndex v20 = sub_100058E78();
      CFIndex v21 = _SC_syslog_os_log_mapping(5LL);
      uint64_t result = __SC_log_enabled(5LL, v20, v21);
      if (v19) {
        break;
      }
      if ((_DWORD)result)
      {
        __int128 v35 = _os_log_pack_size(32LL);
        uint64_t v30 = (char *)&v71 - ((__chkstk_darwin(v35) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v36 = __error();
        uint64_t v37 = _os_log_pack_fill( v30,  v35,  *v36,  &_mh_execute_header,  "%s: can't add service %@ to set, %s");
        int v38 = SCError();
        int v39 = SCErrorString(v38);
        *(_DWORD *)uint64_t v37 = v73;
        *(void *)(v37 + 4) = "insertCategoryServices";
        *(_WORD *)(v37 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
        *(void *)(v37 + 14) = v17;
        *(_WORD *)(v37 + 2pthread_attr_setdetachstate(&v4, 2) = 2080;
        *(void *)(v37 + 24) = v39;
        __int128 v34 = v20;
LABEL_16:
        uint64_t result = __SC_log_send(5LL, v34, v21, v30);
      }

CFIndex sub_10001AA30()
{
  CFIndex result = qword_100079B40;
  if (qword_100079B40)
  {
    CFIndex result = CFArrayGetCount((CFArrayRef)qword_100079B40);
    unint64_t v24 = result;
    if (result >= 1)
    {
      os_log_t v1 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v1 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v1;
      }

      uint64_t v2 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v1, v2))
      {
        uint64_t v4 = _os_log_pack_size(12LL);
        int v5 = (char *)&v23 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFIndex v6 = __error();
        uint64_t v7 = _os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "Interface%s not [yet] active",  (const char *)v23);
        uint64_t v8 = "s";
        if (v24 <= 1) {
          uint64_t v8 = "";
        }
        *(_DWORD *)uint64_t v7 = 136315138;
        *(void *)(v7 + 4) = v8;
        __SC_log_send(6LL, v1, v2, v5);
      }

      CFIndex v9 = 0LL;
      *(void *)&__int128 v3 = 136316162LL;
      __int128 v23 = v3;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_100079B40, v9);
        CFPropertyListRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"BSD Name");
        os_log_t v12 = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceNamePrefix");
        uint64_t v13 = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceUnit");
        os_log_t v14 = (os_log_t)qword_100079AE0;
        if (!qword_100079AE0)
        {
          os_log_t v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_100079AE0 = (uint64_t)v14;
        }

        uint64_t v15 = _SC_syslog_os_log_mapping(6LL);
        CFIndex result = __SC_log_enabled(6LL, v14, v15);
        if ((_DWORD)result)
        {
          uint64_t v16 = _os_log_pack_size(52LL);
          uint64_t v17 = (char *)&v23 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v18 = __error();
          uint64_t v19 = _os_log_pack_fill(v17, v16, *v18, &_mh_execute_header, "  %s%@%sPrefix: %@, Unit: %@");
          *(_DWORD *)uint64_t v19 = v23;
          CFIndex v20 = "";
          CFIndex v21 = "BSD Name: ";
          if (!Value) {
            CFIndex v21 = "";
          }
          *(void *)(v19 + 4) = v21;
          uint64_t v22 = &stru_100073D90;
          if (Value)
          {
            uint64_t v22 = Value;
            CFIndex v20 = ", ";
          }

          *(_WORD *)(v19 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
          *(void *)(v19 + 14) = v22;
          *(_WORD *)(v19 + 2pthread_attr_setdetachstate(&v4, 2) = 2080;
          *(void *)(v19 + 24) = v20;
          *(_WORD *)(v19 + 3pthread_attr_setdetachstate(&v4, 2) = 2112;
          *(void *)(v19 + 34) = v12;
          *(_WORD *)(v19 + 4pthread_attr_setdetachstate(&v4, 2) = 2112;
          *(void *)(v19 + 44) = v13;
          CFIndex result = __SC_log_send(6LL, v14, v15, v17);
        }

        ++v9;
      }

      while (v24 != v9);
    }
  }

  return result;
}

uint64_t sub_10001AD28(const __SCNetworkInterface *a1)
{
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  uint64_t IOInterfaceUnit = _SCNetworkInterfaceGetIOInterfaceUnit(a1);
  uint64_t IOInterfaceNamePrefix = _SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
  CFStringRef HardwareAddressString = SCNetworkInterfaceGetHardwareAddressString(a1);
  os_log_t v6 = (os_log_t)qword_100079AE0;
  if (!qword_100079AE0)
  {
    os_log_t v6 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_100079AE0 = (uint64_t)v6;
  }

  uint64_t v7 = _SC_syslog_os_log_mapping(6LL);
  uint64_t result = __SC_log_enabled(6LL, v6, v7);
  if ((_DWORD)result)
  {
    uint64_t v9 = _os_log_pack_size(82LL);
    BOOL v10 = (char *)&v20 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFTypeID v11 = __error();
    uint64_t v12 = _os_log_pack_fill( v10,  v9,  *v11,  &_mh_execute_header,  "  %s%@%sPrefix: %@, %s%@%sMAC address: %@");
    uint64_t v13 = "BSD Name: ";
    os_log_t v14 = "";
    *(_DWORD *)uint64_t v12 = 136316930;
    if (!BSDName) {
      uint64_t v13 = "";
    }
    *(void *)(v12 + 4) = v13;
    *(_WORD *)(v12 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
    uint64_t v15 = &stru_100073D90;
    if (BSDName) {
      uint64_t v16 = BSDName;
    }
    else {
      uint64_t v16 = &stru_100073D90;
    }
    *(void *)(v12 + 14) = v16;
    *(_WORD *)(v12 + 2pthread_attr_setdetachstate(&v4, 2) = 2080;
    if (BSDName) {
      uint64_t v17 = ", ";
    }
    else {
      uint64_t v17 = "";
    }
    *(void *)(v12 + 24) = v17;
    *(_WORD *)(v12 + 3pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v12 + 34) = IOInterfaceNamePrefix;
    uint64_t v18 = "Unit: ";
    if (IOInterfaceUnit) {
      uint64_t v15 = (const __CFString *)IOInterfaceUnit;
    }
    else {
      uint64_t v18 = "";
    }
    if (IOInterfaceUnit) {
      os_log_t v14 = ", ";
    }
    *(_WORD *)(v12 + 4pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v12 + 44) = v18;
    *(_WORD *)(v12 + 5pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v12 + 54) = v15;
    if (HardwareAddressString) {
      uint64_t v19 = HardwareAddressString;
    }
    else {
      uint64_t v19 = @"?";
    }
    *(_WORD *)(v12 + 6pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v12 + 64) = v14;
    *(_WORD *)(v12 + 7pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v12 + 74) = v19;
    return __SC_log_send(6LL, v6, v7, v10);
  }

  return result;
}

CFDictionaryRef sub_10001AF24(const __CFArray *a1, uint64_t a2, CFIndex *a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a2);
  uint64_t HardwareAddress = _SCNetworkInterfaceGetHardwareAddress(a2);
  ValueAtIndex = 0LL;
  if (!IOInterfaceNamePrefix) {
    return ValueAtIndex;
  }
  uint64_t v9 = (const void *)HardwareAddress;
  if (!HardwareAddress) {
    return ValueAtIndex;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v11 = Count;
  uint64_t v17 = a3;
  CFIndex v12 = 0LL;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v12);
    CFPropertyListRef Value = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceNamePrefix");
    os_log_t v14 = CFDictionaryGetValue(ValueAtIndex, @"IOMACAddress");
    if (Value)
    {
      uint64_t v15 = v14;
      if (v14)
      {
        if (CFEqual(IOInterfaceNamePrefix, Value) && CFEqual(v9, v15)) {
          break;
        }
      }
    }

    if (v11 == ++v12) {
      return 0LL;
    }
  }

  if (v17) {
    *uint64_t v17 = v12;
  }
  return ValueAtIndex;
}

void sub_10001B068(const __SCNetworkInterface *a1)
{
  CFTypeRef cf = 0LL;
  if (qword_100079AF0)
  {
    sub_10001C440((const __CFArray *)qword_100079AF0, (uint64_t)a1, &cf);
    CFMutableArrayRef Mutable = (const __CFArray *)qword_100079AF0;
    __int128 v3 = (const __CFDictionary *)cf;
  }

  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    __int128 v3 = 0LL;
    qword_100079AF0 = (uint64_t)Mutable;
  }

  CFIndex Count = CFArrayGetCount(Mutable);
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (BSDName) {
    sub_100017910((__CFDictionary *)qword_100079B10, BSDName);
  }
  int IsBuiltin = _SCNetworkInterfaceIsBuiltin(a1);
  uint64_t v7 = 0LL;
  if (v3 && !IsBuiltin)
  {
    CFPropertyListRef Value = (const __CFArray *)CFDictionaryGetValue(v3, @"MatchingMACs");
    uint64_t v7 = Value;
    if (Value) {
      CFRetain(Value);
    }
    uint64_t v9 = CFDictionaryGetValue(v3, @"IOMACAddress");
    uint64_t HardwareAddress = (const void *)_SCNetworkInterfaceGetHardwareAddress(a1);
    if (v9)
    {
      CFIndex v11 = HardwareAddress;
      if (HardwareAddress)
      {
        if (!CFEqual(v9, HardwareAddress))
        {
          if (v7)
          {
            MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0LL, 0LL, v7);
            CFRelease(v7);
            v37.length = CFArrayGetCount(MutableCopy);
            v37.location = 0LL;
            CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(MutableCopy, v37, v11);
            if (FirstIndexOfValue != -1) {
              CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
            }
            v38.length = CFArrayGetCount(MutableCopy);
            v38.location = 0LL;
            CFIndex v14 = CFArrayGetFirstIndexOfValue(MutableCopy, v38, v9);
            if (v14 != -1) {
              CFArrayRemoveValueAtIndex(MutableCopy, v14);
            }
          }

          else
          {
            MutableCFArrayRef Copy = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
          }

          CFArrayInsertValueAtIndex(MutableCopy, 0LL, v9);
          CFIndex v15 = CFArrayGetCount(MutableCopy);
          if (v15 >= 33)
          {
            unint64_t v16 = v15 + 1;
            do
            {
              CFArrayRemoveValueAtIndex(MutableCopy, v16 - 2);
              --v16;
            }

            while (v16 > 0x21);
          }

          uint64_t v7 = MutableCopy;
        }
      }
    }
  }

  uint64_t v17 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v18 = (const void *)_SCNetworkInterfaceCopyInterfaceInfo(a1);
  if (v18)
  {
    uint64_t v19 = v18;
    CFDictionarySetValue(v17, @"SCNetworkInterfaceInfo", v18);
    CFRelease(v19);
  }

  IOPath = (const void *)_SCNetworkInterfaceGetIOPath(a1);
  if (IOPath) {
    CFDictionarySetValue(v17, @"IOPathMatch", IOPath);
  }
  uint64_t IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
  if (IOInterfaceNamePrefix) {
    CFDictionarySetValue(v17, @"IOInterfaceNamePrefix", IOInterfaceNamePrefix);
  }
  IOCFStringRef InterfaceType = (const void *)_SCNetworkInterfaceGetIOInterfaceType(a1);
  if (IOInterfaceType) {
    CFDictionarySetValue(v17, @"IOInterfaceType", IOInterfaceType);
  }
  uint64_t IOInterfaceUnit = (const void *)_SCNetworkInterfaceGetIOInterfaceUnit(a1);
  if (IOInterfaceUnit) {
    CFDictionarySetValue(v17, @"IOInterfaceUnit", IOInterfaceUnit);
  }
  unint64_t v24 = (const void *)_SCNetworkInterfaceGetHardwareAddress(a1);
  if (v24) {
    CFDictionarySetValue(v17, @"IOMACAddress", v24);
  }
  CFStringRef v25 = SCNetworkInterfaceGetBSDName(a1);
  if (v25) {
    CFDictionarySetValue(v17, @"BSD Name", v25);
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
  if (InterfaceType) {
    CFDictionarySetValue(v17, @"SCNetworkInterfaceType", InterfaceType);
  }
  else {
    CFBooleanRef v27 = kCFBooleanFalse;
  }
  CFDictionarySetValue(v17, @"IOBuiltin", v27);
  CFDictionarySetValue(v17, @"Active", kCFBooleanTrue);
  if (v7)
  {
    CFDictionarySetValue(v17, @"MatchingMACs", v7);
    CFRelease(v7);
  }

  os_log_t v28 = (const __CFString *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
  uint64_t v29 = _SCNetworkInterfaceGetIOInterfaceUnit(a1);
  if (v28)
  {
    uint64_t v30 = (const __CFNumber *)v29;
    if (v29)
    {
      if (Count < 1)
      {
LABEL_56:
        CFArrayAppendValue((CFMutableArrayRef)qword_100079AF0, v17);
      }

      else
      {
        CFIndex v31 = 0LL;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v31);
          uint64_t v33 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceNamePrefix");
          __int128 v34 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceUnit");
          CFComparisonResult v35 = CFStringCompare(v28, v33, 0LL);
          if (v35 == kCFCompareEqualTo) {
            CFComparisonResult v35 = CFNumberCompare(v30, v34, 0LL);
          }
          if (v35 == kCFCompareLessThan) {
            break;
          }
          if (Count == ++v31) {
            goto LABEL_56;
          }
        }

        CFArrayInsertValueAtIndex(Mutable, v31, v17);
      }
    }
  }

  CFRelease(v17);
  if (cf) {
    CFRelease(cf);
  }
}

const void *sub_10001B53C(const __SCNetworkInterface *a1, const __CFArray *a2, uint64_t a3)
{
  kern_return_t MatchingServices;
  BOOL v72;
  io_object_t v73;
  io_object_t v74;
  const void *v75;
  CFArrayRef v76;
  CFIndex v77;
  CFIndex v78;
  CFIndex v79;
  CFDictionaryRef v80;
  const void *v81;
  const void *v82;
  const void *v83;
  const void *v84;
  CFIndex v85;
  int v86;
  CFArrayRef v87;
  CFIndex v88;
  CFIndex v89;
  CFIndex i;
  CFDictionaryRef v91;
  const void *v92;
  CFNumberRef v93;
  CFTypeID v94;
  int v95;
  int v96;
  os_log_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  int *v101;
  uint64_t v102;
  const char *v103;
  CFArrayRef v104;
  CFArrayRef v105;
  uint64_t HardwareAddress;
  const void *v107;
  uint64_t v108;
  uint64_t v109;
  os_log_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  char *v114;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  int v119;
  CFTypeRef valuePtr[4];
  CFArrayRef v121;
  io_iterator_t existing;
  void *values;
  CFDictionaryRef v124;
  void *keys;
  CFStringRef v126;
  CFRange v127;
  CFRange v128;
  CFRange v129;
  CFRange v130;
  IOPath = (const void *)_SCNetworkInterfaceGetIOPath(a1);
  uint64_t IOInterfaceNamePrefix = (void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
  int IsBuiltin = _SCNetworkInterfaceIsBuiltin(a1);
  if (_SCNetworkInterfaceIsEphemeral(a1))
  {
    LODWORD(valuePtr[0]) = 0;
    uint64_t v9 = CFNumberCreate(0LL, kCFNumberIntType, valuePtr);
LABEL_3:
    int v10 = 0;
    goto LABEL_19;
  }

  p_base_props = &QoSMarkingController__classData.base_props;
  CFIndex v12 = sub_10001AF24((const __CFArray *)qword_100079AF0, (uint64_t)a1, 0LL);
  if (!v12)
  {
    int ReservedRange = NetworkInterfaceGetReservedRange((uint64_t)a1, &v119);
    if (ReservedRange)
    {
      os_log_t v42 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v42 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v42;
      }

      uint64_t v43 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v42, v43))
      {
        uint64_t v44 = _os_log_pack_size(28LL);
        uint64_t v45 = (char *)&v117 - ((__chkstk_darwin(v44) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v46 = __error();
        uint64_t v47 = _os_log_pack_fill(v45, v44, *v46, &_mh_execute_header, "%s: %@ has reserved unit %u");
        int v48 = v119;
        *(_DWORD *)uint64_t v47 = 136315650;
        *(void *)(v47 + 4) = "assignNameAndCopyInterface";
        *(_WORD *)(v47 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
        *(void *)(v47 + 14) = a1;
        *(_WORD *)(v47 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
        *(_DWORD *)(v47 + 24) = v48;
        __SC_log_send(5LL, v42, v43, v45);
        int IsBuiltin = 1;
        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
      }

      else
      {
        int IsBuiltin = 1;
      }
    }

    else if (dword_100079B08)
    {
      os_log_t v49 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v49 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v49;
      }

      uint64_t v50 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v49, v50))
      {
        uint64_t v51 = _os_log_pack_size(22LL);
        CFMutableDictionaryRef v52 = (char *)&v117 - ((__chkstk_darwin(v51) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v53 = __error();
        uint64_t v54 = _os_log_pack_fill(v52, v51, *v53, &_mh_execute_header, "%s: waiting for quiet %@");
        *(_DWORD *)uint64_t v54 = 136315394;
        *(void *)(v54 + 4) = "assignNameAndCopyInterface";
        *(_WORD *)(v54 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
        *(void *)(v54 + 14) = a1;
        __SC_log_send(5LL, v49, v50, v52);
      }

      sub_100017910((__CFDictionary *)qword_100079B10, IOPath);
      return 0LL;
    }

    os_log_t v56 = (const __CFArray *)p_base_props[350];
    uint64_t v57 = (const void **)(IsBuiltin ? &kCFBooleanTrue : &kCFBooleanFalse);
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
    if (!InterfaceType) {
      goto LABEL_52;
    }
    CFStringRef v59 = InterfaceType;
    uint64_t v60 = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
    if (!v60) {
      goto LABEL_52;
    }
    int v61 = *v57;
    valuePtr[1] = v59;
    valuePtr[2] = v60;
    valuePtr[0] = (CFTypeRef)_SCNetworkInterfaceCopyInterfaceInfo(a1);
    valuePtr[3] = v61;
    v121 = 0LL;
    if (v56)
    {
      v128.length = CFArrayGetCount(v56);
      v128.location = 0LL;
      CFArrayApplyFunction(v56, v128, (CFArrayApplierFunction)sub_10001CB74, valuePtr);
    }

    if (a2)
    {
      CFIndex Count = CFArrayGetCount(a2);
      if (Count > a3 + 1)
      {
        v129.location = a3 + 1;
        v129.length = Count - (a3 + 1);
        CFArrayApplyFunction(a2, v129, (CFArrayApplierFunction)sub_10001CD00, valuePtr);
      }
    }

    if (v121)
    {
      if (CFArrayGetCount(v121) == 1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v121, 0LL);
        CFRelease(v121);
        if (!ValueAtIndex) {
          goto LABEL_124;
        }
        CFPropertyListRef Value = CFDictionaryGetValue(ValueAtIndex, @"BSD Name");
        CFTypeID TypeID = CFStringGetTypeID();
        if (Value)
        {
          if (CFGetTypeID(Value) == TypeID)
          {
            CFStringRef v65 = (void *)CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceNamePrefix");
            v66 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceUnit");
            CFTypeID v67 = CFStringGetTypeID();
            if (v65)
            {
              if (CFGetTypeID(v65) == v67)
              {
                CFTypeID v68 = CFNumberGetTypeID();
                if (v66)
                {
                  if (CFGetTypeID(v66) == v68)
                  {
                    existing = 0;
                    keys = @"IOInterfaceNamePrefix";
                    v126 = @"IOInterfaceUnit";
                    values = v65;
                    v124 = v66;
                    CFDictionaryRef v69 = CFDictionaryCreate( 0LL,  (const void **)&keys,  (const void **)&values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
                    keys = @"IOProviderClass";
                    v126 = @"IOPropertyMatch";
                    values = @"IONetworkInterface";
                    v124 = v69;
                    uint64_t v70 = CFDictionaryCreate( 0LL,  (const void **)&keys,  (const void **)&values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
                    CFRelease(v69);
                    MatchingServices = IOServiceGetMatchingServices(kIOMainPortDefault, v70, &existing);
                    CFStringRef v72 = 0;
                    uint64_t v73 = existing;
                    if (!MatchingServices && existing)
                    {
                      os_log_t v74 = IOIteratorNext(existing);
                      CFStringRef v72 = v74 != 0;
                      if (v74) {
                        IOObjectRelease(v74);
                      }
                      uint64_t v73 = existing;
                    }

                    if (v73) {
                      IOObjectRelease(v73);
                    }
                    if (!v72)
                    {
LABEL_124:
                      if (valuePtr[0]) {
                        CFRelease(valuePtr[0]);
                      }
                      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                      if (ValueAtIndex)
                      {
                        unsigned int v104 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"MatchingMACs");
                        if (!v104) {
                          goto LABEL_11;
                        }
                        os_log_t v105 = v104;
                        uint64_t HardwareAddress = _SCNetworkInterfaceGetHardwareAddress(a1);
                        if (!HardwareAddress) {
                          goto LABEL_11;
                        }
                        uint64_t v107 = (const void *)HardwareAddress;
                        v130.length = CFArrayGetCount(v105);
                        v130.location = 0LL;
                        if (!CFArrayContainsValue(v105, v130, v107)) {
                          goto LABEL_11;
                        }
                        uint64_t v9 = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceUnit");
                        CFRetain(v9);
                        os_log_t v14 = (os_log_t)qword_100079AE0;
                        if (!qword_100079AE0)
                        {
                          os_log_t v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                          qword_100079AE0 = (uint64_t)v14;
                        }

                        uint64_t v15 = _SC_syslog_os_log_mapping(6LL);
                        v108 = _os_log_pack_size(12LL);
                        uint64_t v17 = (char *)&v117 - ((__chkstk_darwin(v108) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                        v109 = *__error();
                        uint64_t v19 = _os_log_pack_fill( v17,  v108,  v109,  &_mh_execute_header,  "Interface assigned unit %@ (updating database w/previously used interface)");
                        goto LABEL_9;
                      }

LABEL_52:
                      LODWORD(keys) = 0;
                      if (IsBuiltin)
                      {
                        v118 = IOInterfaceNamePrefix;
                        if (ReservedRange) {
                          int v55 = v119;
                        }
                        else {
                          int v55 = sub_10001C610(a2, a3, IOInterfaceNamePrefix);
                        }
                        LODWORD(keys) = v55;
                        uint64_t v9 = CFNumberCreate(0LL, kCFNumberIntType, &keys);
                        int v75 = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a1);
                        __int128 v76 = (const __CFArray *)p_base_props[350];
                        if (!v76) {
                          goto LABEL_101;
                        }
                        v77 = CFArrayGetCount(v76);
                        if (v77 < 1) {
                          goto LABEL_101;
                        }
                        v78 = v77;
                        uint64_t v79 = 0LL;
                        while (1)
                        {
                          os_log_t v80 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_100079AF0, v79);
                          uint64_t v81 = CFDictionaryGetValue(v80, @"IOInterfaceNamePrefix");
                          if (v75 == v81 || v75 && v81 && CFEqual(v75, v81))
                          {
                            uint64_t v82 = CFDictionaryGetValue(v80, @"IOInterfaceUnit");
                            if (v82 == v9 || v9 && v82 && CFEqual(v9, v82)) {
                              break;
                            }
                          }

                          if (v78 == ++v79) {
                            goto LABEL_101;
                          }
                        }

                        __int128 v83 = (const void *)_SCNetworkInterfaceGetIOPath(a1);
                        __int128 v84 = CFDictionaryGetValue(v80, @"IOPathMatch");
                        if (v83 == v84 || v83 && v84 && CFEqual(v83, v84))
                        {
LABEL_101:
                          uint64_t IOInterfaceNamePrefix = v118;
                          p_base_props = &QoSMarkingController__classData.base_props;
                          if (v9)
                          {
LABEL_116:
                            uint64_t v97 = (os_log_t)qword_100079AE0;
                            if (!qword_100079AE0)
                            {
                              uint64_t v97 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                              qword_100079AE0 = (uint64_t)v97;
                            }

                            os_log_t v98 = _SC_syslog_os_log_mapping(6LL);
                            if (__SC_log_enabled(6LL, v97, v98))
                            {
                              uint64_t v99 = _os_log_pack_size(22LL);
                              uint64_t v100 = (char *)&v117 - ((__chkstk_darwin(v99) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                              v101 = __error();
                              v102 = _os_log_pack_fill( v100,  v99,  *v101,  &_mh_execute_header,  "Interface assigned unit %@ (%s)");
                              uint64_t v103 = "built-in";
                              if (!IsBuiltin) {
                                uint64_t v103 = "next available";
                              }
                              *(_DWORD *)v102 = 138412546;
                              *(void *)(v102 + 4) = v9;
                              *(_WORD *)(v102 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
                              *(void *)(v102 + 14) = v103;
                              __SC_log_send(6LL, v97, v98, v100);
                            }

                            goto LABEL_3;
                          }
                        }

                        else
                        {
                          uint64_t v110 = (os_log_t)qword_100079AE0;
                          if (!qword_100079AE0)
                          {
                            uint64_t v110 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                            qword_100079AE0 = (uint64_t)v110;
                          }

                          v111 = _SC_syslog_os_log_mapping(6LL);
                          uint64_t v112 = __SC_log_enabled(6LL, v110, v111);
                          uint64_t IOInterfaceNamePrefix = v118;
                          if (v112)
                          {
                            CFIndex v113 = _os_log_pack_size(12LL);
                            os_log_t v114 = (char *)&v117 - ((__chkstk_darwin(v113) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                            uint64_t v115 = __error();
                            uint64_t v116 = _os_log_pack_fill( v114,  v113,  *v115,  &_mh_execute_header,  "Interface not assigned [built-in] unit %@");
                            *(_DWORD *)uint64_t v116 = 138412290;
                            *(void *)(v116 + 4) = v9;
                            __SC_log_send(6LL, v110, v111, v114);
                          }

                          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                          if (v9) {
                            CFRelease(v9);
                          }
                        }
                      }

                      uint64_t v85 = CFArrayGetCount(a2);
                      os_log_t v86 = sub_10001C610(a2, v85, IOInterfaceNamePrefix);
                      LODWORD(keys) = v86;
                      uint64_t v87 = (const __CFArray *)p_base_props[350];
                      if (v87)
                      {
                        uint64_t v88 = CFArrayGetCount(v87);
                        if (v88 >= 1)
                        {
                          __int128 v89 = v88;
                          for (CFIndex i = 0LL; i != v89; ++i)
                          {
                            uint64_t v91 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)p_base_props[350], i);
                            os_log_t v92 = CFDictionaryGetValue(v91, @"IOInterfaceNamePrefix");
                            if (CFEqual(v92, IOInterfaceNamePrefix))
                            {
                              uint64_t v93 = (const __CFNumber *)CFDictionaryGetValue(v91, @"IOInterfaceUnit");
                              uint64_t v94 = CFNumberGetTypeID();
                              if (v93 && CFGetTypeID(v93) == v94)
                              {
                                __int128 v95 = CFNumberGetValue(v93, kCFNumberIntType, valuePtr);
                                sigaction v96 = (int)valuePtr[0];
                                if (!v95) {
                                  sigaction v96 = 0;
                                }
                              }

                              else
                              {
                                sigaction v96 = 0;
                              }

                              p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                              if (v96 == v86) {
                                ++v86;
                              }
                            }
                          }
                        }
                      }

                      LODWORD(keys) = v86;
                      uint64_t v9 = CFNumberCreate(0LL, kCFNumberIntType, &keys);
                      goto LABEL_116;
                    }
                  }
                }
              }
            }
          }
        }
      }

      else
      {
        CFRelease(v121);
      }
    }

    ValueAtIndex = 0LL;
    goto LABEL_124;
  }

  ValueAtIndex = v12;
  uint64_t v9 = CFDictionaryGetValue(v12, @"IOInterfaceUnit");
  CFRetain(v9);
  os_log_t v14 = (os_log_t)qword_100079AE0;
  if (!qword_100079AE0)
  {
    os_log_t v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_100079AE0 = (uint64_t)v14;
  }

  uint64_t v15 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v14, v15))
  {
    uint64_t v16 = _os_log_pack_size(12LL);
    uint64_t v17 = (char *)&v117 - ((__chkstk_darwin(v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v18 = *__error();
    uint64_t v19 = _os_log_pack_fill(v17, v16, v18, &_mh_execute_header, "Interface assigned unit %@ (from database)");
LABEL_9:
    *(_DWORD *)uint64_t v19 = 138412290;
    *(void *)(v19 + 4) = v9;
    __SC_log_send(6LL, v14, v15, v17);
  }

  uint64_t v87 = sub_10002E39C();
  uint64_t v88 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v87, v88))
  {
    __int128 v89 = _os_log_pack_size(12LL);
    __int128 v90 = (char *)&v124 - ((__chkstk_darwin(v89) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v91 = __error();
    os_log_t v92 = _os_log_pack_fill(v90, v89, *v91, &_mh_execute_header, "%@");
    *(_DWORD *)os_log_t v92 = 138412290;
    *(void *)(v92 + 4) = Mutable;
    __SC_log_send(6LL, v87, v88, v90);
  }

  CFRelease(Mutable);
  uint64_t v93 = *((_DWORD *)a2 + 18);
  uint64_t v94 = snprintf(__str, 0x64uLL, "0x%08x (", v93);
  if (v93 || v94 > 0x53)
  {
    sigaction v96 = v94;
    __int128 v95 = v94;
    uint64_t v97 = v93;
    if ((v93 & 2) != 0)
    {
      __int128 v95 = v94;
      uint64_t v97 = v93;
      if (v94 <= 0x57)
      {
        __int128 v95 = __strlcat_chk(__str, "Reachable,", 99LL, 100LL);
        uint64_t v97 = v93 & 0xFFFFFFFD;
      }
    }

    if ((v97 & 1) != 0 && v95 <= 0x4C)
    {
      __int128 v95 = __strlcat_chk(__str, "Transient Connection,", 99LL, 100LL);
      v97 &= ~1u;
    }

    if ((v97 & 4) != 0 && v95 <= 0x4D)
    {
      __int128 v95 = __strlcat_chk(__str, "Connection Required,", 99LL, 100LL);
      v97 &= ~4u;
    }

    if ((v97 & 8) != 0 && v95 <= 0x41)
    {
      __int128 v95 = __strlcat_chk(__str, "Automatic Connection On Traffic,", 99LL, 100LL);
      v97 &= ~8u;
    }

    if ((v97 & 0x20) != 0 && v95 <= 0x42)
    {
      __int128 v95 = __strlcat_chk(__str, "Automatic Connection On Demand,", 99LL, 100LL);
      v97 &= ~0x20u;
    }

    if ((v97 & 0x10) != 0 && v95 < 0x4C)
    {
      __int128 v95 = __strlcat_chk(__str, "Intervention Required,", 99LL, 100LL);
      v97 &= ~0x10u;
    }

    if ((v97 & 0x10000) != 0 && v95 < 0x54)
    {
      __int128 v95 = __strlcat_chk(__str, "Local Address,", 99LL, 100LL);
      v97 &= ~0x10000u;
    }

    if ((v97 & 0x20000) != 0 && v95 <= 0x46)
    {
      __int128 v95 = __strlcat_chk(__str, "Directly Reachable Address,", 99LL, 100LL);
      v97 &= ~0x20000u;
    }

    if ((v97 & 0x40000) != 0 && v95 <= 0x5C)
    {
      __int128 v95 = __strlcat_chk(__str, "WWAN,", 99LL, 100LL);
      v97 &= ~0x40000u;
    }

    if (v97)
    {
      if (v95 >= 0x57)
      {
        __str[v96] = 0;
        __int128 v95 = v96;
        uint64_t v97 = v93;
      }

      v95 += snprintf(&__str[v95], 99 - v95, "0x%08x,", v97);
    }
  }

  else
  {
    __int128 v95 = __strlcat_chk(__str, "Not Reachable,", 99LL, 100LL);
  }

  if (v95) {
    __str[v95 - 1] = 41;
  }
  os_log_t v98 = sub_10002E39C();
  uint64_t v99 = _SC_syslog_os_log_mapping(6LL);
  uint64_t result = __SC_log_enabled(6LL, v98, v99);
  if ((_DWORD)result)
  {
    v101 = _os_log_pack_size(12LL);
    v102 = (char *)&v124 - ((__chkstk_darwin(v101) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v103 = __error();
    unsigned int v104 = _os_log_pack_fill(v102, v101, *v103, &_mh_execute_header, "  reach    : %s", v124);
    *(_DWORD *)unsigned int v104 = 136315138;
    *(void *)(v104 + 4) = __str;
    uint64_t result = __SC_log_send(6LL, v98, v99, v102);
  }

  if (*((_DWORD *)a2 + 15))
  {
    os_log_t v105 = sub_10002E39C();
    uint64_t v106 = _SC_syslog_os_log_mapping(6LL);
    uint64_t result = __SC_log_enabled(6LL, v105, v106);
    if ((_DWORD)result)
    {
      uint64_t v107 = _os_log_pack_size(8LL);
      v108 = (char *)&v124 - ((__chkstk_darwin(v107) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v109 = __error();
      uint64_t v110 = (_DWORD *)_os_log_pack_fill( v108,  v107,  *v109,  &_mh_execute_header,  "  order    : %u",  (_DWORD)v124);
      v111 = *((_DWORD *)a2 + 15);
      *uint64_t v110 = 67109120;
      v110[1] = v111;
      uint64_t result = __SC_log_send(6LL, v105, v106, v108);
    }
  }

  if (a2[10])
  {
    uint64_t v112 = sub_10002E39C();
    CFIndex v113 = _SC_syslog_os_log_mapping(6LL);
    uint64_t result = __SC_log_enabled(6LL, v112, v113);
    if ((_DWORD)result)
    {
      os_log_t v114 = _os_log_pack_size(12LL);
      uint64_t v115 = (char *)&v124 - ((__chkstk_darwin(v114) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v116 = __error();
      v117 = _os_log_pack_fill(v115, v114, *v116, &_mh_execute_header, "  config id: %s", v124);
      v118 = a2[10];
      *(_DWORD *)v117 = 136315138;
      *(void *)(v117 + 4) = v118;
      return __SC_log_send(6LL, v112, v113, v115);
    }
  }

  return result;
}

LABEL_36:
  if (v9) {
    CFRelease(v9);
  }
  return v30;
}

        BOOL v32 = v124;
        uint64_t v33 = (const __CFDictionary *)sub_10002E790(*(void **)v124, v117);
        os_log_t v34 = sub_100030AC8(v33);
        if (!v34) {
          goto LABEL_135;
        }
        uint64_t v35 = v34;
        uint64_t v36 = *(_DWORD *)(v32 + 40);
        CFRange v37 = v36 & 0xFFFFFF | 0x3000000;
        if (v123) {
          CFRange v37 = *(_DWORD *)(v32 + 40);
        }
        v127 = v37;
        if (v116) {
          v130 = CFSetContainsValue(v116, *(const void **)v32);
        }
        else {
          v130 = 0;
        }
        uint64_t v119 = v18;
        CFRange v38 = v25(0LL);
        if (*(int *)v35 >= 1)
        {
          uint64_t v39 = 0;
          v131 = v36 & 0xFFFFFF;
          uint64_t v40 = &v35[v38];
          v129 = v35;
          while (1)
          {
            if (v39 || (os_log_t v41 = *((_WORD *)v35 + 4), v133 = v127, (v41 & 2) == 0)) {
              v133 = v131 | (v40[15] << 24);
            }
            if (!v19)
            {
              os_log_t v42 = v25(v125);
              uint64_t v19 = (int *)malloc(v42);
              bzero(v19, v42);
              v19[1] = v126;
            }

            uint64_t v43 = v25(0LL);
            LODWORD(v44) = *v19;
            if (*v19 >= 1) {
              break;
            }
            uint64_t v47 = 0;
            CFStringRef v65 = -1LL;
LABEL_91:
            if (v19[1] == (_DWORD)v44)
            {
              v66 = 2 * v44;
              CFTypeID v67 = v25(2 * (int)v44);
              CFTypeID v68 = (int *)reallocf(v19, v67);
              uint64_t v19 = v68;
              if (!v68) {
                goto LABEL_114;
              }
              v68[1] = v66;
            }

            if (v65 == -1)
            {
              uint64_t v70 = (char *)v19 + v25(*v19);
            }

            else
            {
              CFDictionaryRef v69 = v25(v65);
              uint64_t v70 = (char *)v19 + v69;
              memmove((char *)v19 + v69 + v28, (char *)v19 + v69, (*v19 - v65) * v28);
            }

            memcpy(v70, v40, v28);
            int v71 = *v19 + 1LL;
            *uint64_t v19 = v71;
            *((_DWORD *)v70 + 3) = v133;
            if (v130) {
              *((_WORD *)v70 + 9) |= 4u;
            }
            if (v47 == 2)
            {
              if (!(_DWORD)v71 || v65 + 1 >= v71) {
                goto LABEL_114;
              }
              uint64_t v70 = (char *)v19 + ((uint64_t (*)(void))v25)();
            }

            else if (v47 != 1 && HIBYTE(v133) != 3)
            {
              goto LABEL_114;
            }

            if (v70) {
              *((_WORD *)v70 + 8) |= 1u;
            }
LABEL_114:
            ++v39;
            v40 += v28;
            if (v39 >= *(_DWORD *)v35) {
              goto LABEL_129;
            }
          }

          v132 = v39;
          uint64_t v45 = 0LL;
          int v46 = 0LL;
          uint64_t v47 = 0;
          int v48 = (int *)((char *)v19 + v43);
          v134 = -1LL;
          while (2)
          {
            os_log_t v49 = v19;
            uint64_t v50 = v28;
            uint64_t v51 = v48[3];
            CFMutableDictionaryRef v52 = v135;
            uint64_t v53 = (const void *)v135((uint64_t)v40);
            uint64_t v54 = (const void *)v52((uint64_t)v48);
            int v55 = memcmp(v53, v54, v136);
            if (!v55 && (int v55 = *(_DWORD *)v40 - *v48, *(_DWORD *)v40 == *v48))
            {
              int v61 = *((_DWORD *)v40 + 1);
              CFStringRef v62 = v48[1];
              uint64_t v63 = v61 - v62;
              uint64_t v19 = v49;
              if (v61 == v62 || (!v61 || !v62) && (*((_WORD *)v40 + 8) & 1) == 0 && (v48[4] & 1) == 0)
              {
LABEL_96:
                if (v134 == -1 || v48[1] != *((_DWORD *)v40 + 1) || v48[2] || *((_DWORD *)v40 + 2))
                {
                  uint64_t v25 = v128;
                  int v28 = v50;
                  if (*((_DWORD *)v40 + 2))
                  {
                    uint64_t v35 = v129;
                    uint64_t v39 = v132;
                  }

                  else
                  {
                    uint64_t v35 = v129;
                    uint64_t v39 = v132;
                    if (v48[2] || v48[3] > v133)
                    {
                      CFStringRef v72 = v48[1];
                      if (!v72) {
                        CFStringRef v72 = *((_DWORD *)v40 + 1);
                      }
                      uint64_t v73 = *((_WORD *)v48 + 8);
                      memcpy(v48, v40, v28);
                      os_log_t v74 = v133;
                      v48[2] = 0;
                      v48[3] = v74;
                      v48[1] = v72;
                      if ((v73 & 1) != 0) {
                        *((_WORD *)v48 + 8) |= 1u;
                      }
                      if (v130) {
                        *((_WORD *)v48 + 9) |= 4u;
                      }
                    }
                  }

                  goto LABEL_114;
                }

                LODWORD(v44) = *v19;
                uint64_t v25 = v128;
                int v28 = v50;
                if (*v19)
                {
                  uint64_t v35 = v129;
                  uint64_t v39 = v132;
                  if (v45 < (int)v44)
                  {
                    int v75 = (int)v44 - 1LL;
                    *uint64_t v19 = v75;
                    if (v75 == v45)
                    {
                      LODWORD(v44) = v44 - 1;
                    }

                    else
                    {
                      __int128 v76 = v25(v45);
                      memmove((char *)v19 + v76, (char *)v19 + v76 + v28, (*v19 - v45) * v28);
                      LODWORD(v44) = *v19;
                    }
                  }

                  goto LABEL_90;
                }

    if (ArrayBySeparatingStrings) {
      CFRelease(ArrayBySeparatingStrings);
    }
    if (Count == ++v6) {
      goto LABEL_55;
    }
  }

  uint64_t v44 = 262151;
  uint64_t v45 = sub_10003EB68((const __CFDictionary *)Value, @"AvailableProtocols", 0LL);
  int v46 = 262151;
  if (v45)
  {
    int v46 = (v45 << 30 >> 31) & 0x40007;
    if ((v45 & 1) == 0) {
      uint64_t v44 = 0;
    }
  }

  *v71 |= v44;
  uint64_t v47 = (os_log_t)p_base_props[399];
  if (!v47)
  {
    uint64_t v47 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    p_base_props[399] = (__objc2_prop_list *)v47;
  }

  int v48 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v47, v48))
  {
    os_log_t v49 = _os_log_pack_size(18LL);
    uint64_t v50 = (char *)&v62 - ((__chkstk_darwin(v49) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v51 = __error();
    CFMutableDictionaryRef v52 = _os_log_pack_fill( v50,  v49,  *v51,  &_mh_execute_header,  "Service %@ setting ipv4 reach flags: %u");
    uint64_t v53 = *v71;
    *(_DWORD *)CFMutableDictionaryRef v52 = v66;
    *(void *)(v52 + 4) = v10;
    *(_WORD *)(v52 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v52 + 14) = v53;
    uint64_t v54 = v50;
    p_base_props = &QoSMarkingController__classData.base_props;
    __SC_log_send(7LL, v47, v48, v54);
  }

  *v72 |= v46;
  int v55 = (os_log_t)p_base_props[399];
  if (!v55)
  {
    int v55 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    p_base_props[399] = (__objc2_prop_list *)v55;
  }

  os_log_t v56 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v55, v56))
  {
    uint64_t v57 = _os_log_pack_size(18LL);
    uint64_t v58 = (char *)&v62 - ((__chkstk_darwin(v57) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFStringRef v59 = __error();
    uint64_t v60 = _os_log_pack_fill( v58,  v57,  *v59,  &_mh_execute_header,  "Service %@ setting ipv6 reach flags: %u");
    int v61 = *v72;
    *(_DWORD *)uint64_t v60 = v66;
    *(void *)(v60 + 4) = v10;
    *(_WORD *)(v60 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v60 + 14) = v61;
    __SC_log_send(7LL, v55, v56, v58);
  }

  CFMutableArrayRef Mutable = v65;
LABEL_53:
  if (ArrayBySeparatingStrings) {
    CFRelease(ArrayBySeparatingStrings);
  }
LABEL_55:
  CFRelease(Mutable);
}

  CFRelease(Value);
  if (v13) {
LABEL_32:
  }
    CFRelease(v13);
}
}

CFDictionaryRef sub_10001C2FC(const __CFArray *a1, uint64_t a2, CFIndex *a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(a2);
  uint64_t IOInterfaceUnit = _SCNetworkInterfaceGetIOInterfaceUnit(a2);
  ValueAtIndex = 0LL;
  if (!IOInterfaceNamePrefix) {
    return ValueAtIndex;
  }
  uint64_t v9 = (const void *)IOInterfaceUnit;
  if (!IOInterfaceUnit) {
    return ValueAtIndex;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v11 = Count;
  uint64_t v17 = a3;
  CFIndex v12 = 0LL;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v12);
    CFPropertyListRef Value = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceNamePrefix");
    os_log_t v14 = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceUnit");
    if (Value)
    {
      uint64_t v15 = v14;
      if (v14)
      {
        if (CFEqual(IOInterfaceNamePrefix, Value) && CFEqual(v9, v15)) {
          break;
        }
      }
    }

    if (v11 == ++v12) {
      return 0LL;
    }
  }

  if (v17) {
    *uint64_t v17 = v12;
  }
  return ValueAtIndex;
}

CFDictionaryRef sub_10001C440(const __CFArray *a1, uint64_t a2, CFTypeRef *a3)
{
  os_log_t v6 = sub_10001AF24(a1, a2, &v15);
  for (i = 0; v6; os_log_t v6 = sub_10001AF24(a1, a2, &v15))
  {
    if (a3 && !*a3) {
      *a3 = CFRetain(v6);
    }
    CFArrayRemoveValueAtIndex(a1, v15);
    ++i;
  }

  while (1)
  {
    uint64_t result = sub_10001C2FC(a1, a2, &v15);
    if (!result) {
      break;
    }
    if (a3 && !*a3) {
      *a3 = CFRetain(result);
    }
    CFArrayRemoveValueAtIndex(a1, v15);
    ++i;
  }

  if (i >= 2)
  {
    os_log_t v9 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v9 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v9;
    }

    uint64_t v10 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = (const __CFDictionary *)__SC_log_enabled(3LL, v9, v10);
    if ((_DWORD)result)
    {
      uint64_t v11 = _os_log_pack_size(18LL);
      CFIndex v12 = (char *)&v15 - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v13 = __error();
      uint64_t v14 = _os_log_pack_fill( v12,  v11,  *v13,  &_mh_execute_header,  "Multiple interfaces removed from database (n = %d, %@)");
      *(_DWORD *)uint64_t v14 = 67109378;
      *(_DWORD *)(v14 + 4) = i;
      *(_WORD *)(v14 + 8) = 2112;
      *(void *)(v14 + 1sub_10000F430((uint64_t)__str, 0) = a2;
      return (const __CFDictionary *)__SC_log_send(3LL, v9, v10, v12);
    }
  }

  return result;
}

uint64_t sub_10001C610(CFArrayRef theArray, uint64_t a2, void *a3)
{
  if (a2 < 1)
  {
    unsigned int v7 = 0;
  }

  else
  {
    CFIndex v6 = 0LL;
    unsigned int v7 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
      uint64_t IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix(ValueAtIndex);
      ++v6;
    }

    while (a2 != v6);
  }

  unsigned int ReservedUnits = NetworkInterfacePrefixGetReservedUnits(a3);
  os_log_t v11 = (os_log_t)qword_100079AE0;
  if (!qword_100079AE0)
  {
    os_log_t v11 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_100079AE0 = (uint64_t)v11;
  }

  uint64_t v12 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v11, v12))
  {
    uint64_t v13 = _os_log_pack_size(18LL);
    uint64_t v14 = (char *)&v18 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFIndex v15 = __error();
    uint64_t v16 = _os_log_pack_fill(v14, v13, *v15, &_mh_execute_header, "%@: has %u reserved units");
    *(_DWORD *)uint64_t v16 = 138412546;
    *(void *)(v16 + 4) = a3;
    *(_WORD *)(v16 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v16 + 14) = ReservedUnits;
    __SC_log_send(5LL, v11, v12, v14);
  }

  if (v7 <= ReservedUnits) {
    return ReservedUnits;
  }
  else {
    return v7;
  }
}

uint64_t sub_10001C7C0(const void *a1, const void *a2)
{
  kern_return_t v9;
  kern_return_t v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t result;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  UInt8 *BytePtr;
  int v25;
  __CFArray *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t IORegistryEntryID = _SCNetworkInterfaceGetIORegistryEntryID(a1);
  int v5 = IORegistryEntryIDMatching(IORegistryEntryID);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v5);
  if (MatchingService)
  {
    io_service_t v7 = MatchingService;
    CFMutableDataRef Mutable = CFDataCreateMutable(0LL, 32LL);
    os_log_t v9 = IOServiceAddInterestNotification( (IONotificationPortRef)qword_100079B00,  v7,  "IOGeneralInterest",  (IOServiceInterestCallback)sub_10001D42C,  Mutable,  (io_object_t *)&v29 + 1);
    if (v9)
    {
      uint64_t v10 = v9;
      os_log_t v11 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v11 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v11;
      }

      uint64_t v12 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v11, v12))
      {
        uint64_t v13 = _os_log_pack_size(18LL);
        uint64_t v14 = (char *)&v29 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFIndex v15 = __error();
        uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "%s: IOServiceAddInterestNotification() failed, kr =  %d",  v29,  v30);
        *(_DWORD *)uint64_t v16 = 136315394;
        *(void *)(v16 + 4) = "addNamingRequest";
        *(_WORD *)(v16 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
        *(_DWORD *)(v16 + 14) = v10;
        __SC_log_send(3LL, v11, v12, v14);
      }

      CFRelease(Mutable);
      return IOObjectRelease(v7);
    }

    CFDataSetLength(Mutable, 32LL);
    BytePtr = (UInt8 *)CFDataGetBytePtr(Mutable);
    *(_OWORD *)BytePtr = 0u;
    *((_OWORD *)BytePtr + pthread_attr_setscope(&v4, 1) = 0u;
    *(void *)BytePtr = CFRetain(a1);
    *((void *)BytePtr + pthread_attr_setdetachstate(&v4, 2) = CFRetain(a2);
    uint64_t v25 = HIDWORD(v29);
    *((_DWORD *)BytePtr + pthread_attr_setdetachstate(&v4, 2) = v7;
    *((_DWORD *)BytePtr + 3) = v25;
    uint64_t v26 = (__CFArray *)qword_100079B58;
    if (!qword_100079B58)
    {
      qword_100079B58 = (uint64_t)CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      sub_10001D86C();
      uint64_t v26 = (__CFArray *)qword_100079B58;
    }

    CFArrayAppendValue(v26, Mutable);
    CFRelease(Mutable);
    uint64_t v18 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      uint64_t v18 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v18;
    }

    uint64_t v19 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v18, v19);
    if ((_DWORD)result)
    {
      CFBooleanRef v27 = _os_log_pack_size(32LL);
      uint64_t v21 = (char *)&v29 - ((__chkstk_darwin(v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v28 = *__error();
      __int128 v23 = _os_log_pack_fill(v21, v27, v28, &_mh_execute_header, "%s: interface %@ unit %@");
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v18 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      uint64_t v18 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v18;
    }

    uint64_t v19 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v18, v19);
    if ((_DWORD)result)
    {
      os_log_t v20 = _os_log_pack_size(32LL);
      uint64_t v21 = (char *)&v29 - ((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v22 = *__error();
      __int128 v23 = _os_log_pack_fill(v21, v20, v22, &_mh_execute_header, "%s: interface %@ unit %@ no longer exists");
LABEL_18:
      *(_DWORD *)__int128 v23 = 136315650;
      *(void *)(v23 + 4) = "addNamingRequest";
      *(_WORD *)(v23 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v23 + 14) = a1;
      *(_WORD *)(v23 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v23 + 24) = a2;
      return __SC_log_send(5LL, v18, v19, v21);
    }
  }

  return result;
}

void sub_10001CB74(const __CFDictionary *a1, uint64_t a2)
{
  CFPropertyListRef Value = CFDictionaryGetValue(a1, @"IOInterfaceNamePrefix");
  int v5 = *(const void **)(a2 + 16);
  if (Value == v5 || Value && v5 && CFEqual(Value, v5))
  {
    CFIndex v6 = CFDictionaryGetValue(a1, @"SCNetworkInterfaceType");
    io_service_t v7 = *(const void **)(a2 + 8);
    if (v6 == v7 || v6 && v7 && CFEqual(v6, v7))
    {
      uint64_t v8 = CFDictionaryGetValue(a1, @"SCNetworkInterfaceInfo");
      os_log_t v9 = *(const void **)a2;
      if (v8 == *(const void **)a2 || v8 && v9 && CFEqual(v8, v9))
      {
        if (!*(void *)(a2 + 24)) {
          goto LABEL_21;
        }
        uint64_t v10 = CFDictionaryGetValue(a1, @"IOBuiltin");
        CFTypeID TypeID = CFBooleanGetTypeID();
        if (!v10 || CFGetTypeID(v10) != TypeID) {
          uint64_t v10 = kCFBooleanFalse;
        }
        uint64_t v12 = *(const void **)(a2 + 24);
        if (v10 == v12 || v10 && v12 && CFEqual(v10, v12))
        {
LABEL_21:
          CFMutableDataRef Mutable = *(__CFArray **)(a2 + 32);
          if (!Mutable)
          {
            CFMutableDataRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
            *(void *)(a2 + 3pthread_attr_setdetachstate(&v4, 2) = Mutable;
          }

          CFArrayAppendValue(Mutable, a1);
        }
      }
    }
  }

void sub_10001CD00(const __SCNetworkInterface *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    return;
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
  CFStringRef v5 = *(CFStringRef *)(a2 + 8);
  if (InterfaceType != v5 && (!InterfaceType || !v5 || !CFEqual(InterfaceType, v5))) {
    return;
  }
  CFIndex v6 = (const void *)_SCNetworkInterfaceCopyInterfaceInfo(a1);
  io_service_t v7 = v6;
  uint64_t v8 = *(const void **)a2;
  if (v6 == *(const void **)a2)
  {
    int v9 = 1;
  }

  else
  {
    int v9 = 0;
    if (v6 && v8)
    {
      int v9 = CFEqual(v6, v8);
LABEL_12:
      CFRelease(v7);
      goto LABEL_13;
    }
  }

  if (v6) {
    goto LABEL_12;
  }
LABEL_13:
  if (v9)
  {
    if (!*(void *)(a2 + 24)) {
      goto LABEL_21;
    }
    int IsBuiltin = _SCNetworkInterfaceIsBuiltin(a1);
    os_log_t v11 = &kCFBooleanTrue;
    if (!IsBuiltin) {
      os_log_t v11 = &kCFBooleanFalse;
    }
    CFBooleanRef v12 = *v11;
    uint64_t v13 = *(const void **)(a2 + 24);
    if (*(const void **)v11 == v13 || v12 && v13 && CFEqual(v12, v13))
    {
LABEL_21:
      CFRelease(*(CFTypeRef *)(a2 + 32));
      *(void *)(a2 + 3pthread_attr_setdetachstate(&v4, 2) = 0LL;
    }
  }

const void *sub_10001CE20(const __SCNetworkInterface *a1, int a2, const void *a3)
{
  kern_return_t v12;
  uint64_t v13;
  const void *v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  const char *v21;
  os_log_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v30;
  BOOL valuePtr;
  UInt8 bytes[8];
  uint64_t IOPath = _SCNetworkInterfaceGetIOPath(a1);
  uint64_t IORegistryEntryID = _SCNetworkInterfaceGetIORegistryEntryID(a1);
  io_connect_t v8 = dword_100079AE8;
  *(void *)bytes = IORegistryEntryID;
  int valuePtr = a2 == 0;
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v10 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(Mutable, @"IONetworkStackUserCommand", v10);
  CFRelease(v10);
  CFDataRef v11 = CFDataCreate(0LL, bytes, 8LL);
  CFDictionarySetValue(Mutable, @"IORegistryEntryID", v11);
  CFRelease(v11);
  CFDictionarySetValue(Mutable, @"IOInterfaceUnit", a3);
  CFBooleanRef v12 = IOConnectSetCFProperties(v8, Mutable);
  CFRelease(Mutable);
  uint64_t v13 = sub_10001D1AC(IORegistryEntryID);
  if (v13)
  {
    uint64_t v14 = (const void *)v13;
    if (_SCNetworkInterfaceGetIOInterfaceUnit(v13))
    {
      CFIndex v15 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        CFIndex v15 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v15;
      }

      uint64_t v16 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v15, v16))
      {
        uint64_t v17 = _os_log_pack_size(32LL);
        uint64_t v18 = (char *)&v30 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v19 = __error();
        os_log_t v20 = _os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "%s interface named\n  path = %@\n  unit = %@");
        uint64_t v21 = "Known";
        *(_DWORD *)os_log_t v20 = 136315650;
        if (!a2) {
          uint64_t v21 = "New";
        }
        *(void *)(v20 + 4) = v21;
        *(_WORD *)(v20 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
        *(void *)(v20 + 14) = IOPath;
        *(_WORD *)(v20 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
        *(void *)(v20 + 24) = a3;
        __SC_log_send(5LL, v15, v16, v18);
      }

      return v14;
    }

    CFRelease(v14);
  }

  uint64_t v22 = (os_log_t)qword_100079AE0;
  if (!qword_100079AE0)
  {
    uint64_t v22 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_100079AE0 = (uint64_t)v22;
  }

  __int128 v23 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v22, v23))
  {
    unint64_t v24 = _os_log_pack_size(48LL);
    uint64_t v30 = (uint64_t)&v30;
    uint64_t v25 = (char *)&v30 - ((__chkstk_darwin(v24) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v26 = __error();
    CFBooleanRef v27 = _os_log_pack_fill( v25,  v24,  *v26,  &_mh_execute_header,  "failed to name %s interface, kr=%d\n  path = %@\n  id   = 0x%llx\n  unit = %@");
    *(_DWORD *)CFBooleanRef v27 = 136316162;
    int v28 = "Known";
    if (!a2) {
      int v28 = "New";
    }
    *(void *)(v27 + 4) = v28;
    *(_WORD *)(v27 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v27 + 14) = v12;
    *(_WORD *)(v27 + 18) = 2112;
    *(void *)(v27 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = IOPath;
    *(_WORD *)(v27 + 28) = 2048;
    *(void *)(v27 + 3sub_10000F430((uint64_t)__str, 0) = IORegistryEntryID;
    *(_WORD *)(v27 + 38) = 2112;
    *(void *)(v27 + 4sub_10000F430((uint64_t)__str, 0) = a3;
    __SC_log_send(5LL, v22, v23, v25);
  }

  sub_10001AD28(a1);
  return 0LL;
}

uint64_t sub_10001D1AC(uint64_t a1)
{
  kern_return_t MatchingServices;
  BOOL v4;
  os_log_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  int v11;
  io_object_t v12;
  io_object_t v13;
  uint64_t v14;
  os_log_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  HIDWORD(v2pthread_attr_setdetachstate(&v4, 2) = 0;
  uint64_t v2 = IORegistryEntryIDMatching(a1);
  MatchingServices = IOServiceGetMatchingServices(kIOMainPortDefault, v2, (io_iterator_t *)&v22 + 1);
  if (MatchingServices) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = HIDWORD(v22) == 0;
  }
  if (v4)
  {
    CFStringRef v5 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      CFStringRef v5 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v5;
    }

    CFIndex v6 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v5, v6))
    {
      io_service_t v7 = _os_log_pack_size(24LL);
      io_connect_t v8 = (char *)&v22 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v9 = __error();
      CFNumberRef v10 = _os_log_pack_fill( v8,  v7,  *v9,  &_mh_execute_header,  "IOServiceGetMatchingServices(0x%llx) returned %d/%u",  v22,  v23,  v24);
      CFDataRef v11 = HIDWORD(v22);
      *(_DWORD *)CFNumberRef v10 = 134218496;
      *(void *)(v10 + 4) = a1;
      *(_WORD *)(v10 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v10 + 14) = MatchingServices;
      *(_WORD *)(v10 + 18) = 1024;
      *(_DWORD *)(v10 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v11;
      __SC_log_send(5LL, v5, v6, v8);
    }
  }

  else
  {
    CFBooleanRef v12 = IOIteratorNext(HIDWORD(v22));
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = _SCNetworkInterfaceCreateWithIONetworkInterfaceObject();
      IOObjectRelease(v13);
      goto LABEL_17;
    }

    CFIndex v15 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      CFIndex v15 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v15;
    }

    uint64_t v16 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v15, v16))
    {
      uint64_t v17 = _os_log_pack_size(12LL);
      uint64_t v18 = (char *)&v22 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v19 = __error();
      os_log_t v20 = _os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "IORegistryEntryIDMatching(0x%llx) failed",  v22);
      *(_DWORD *)os_log_t v20 = 134217984;
      *(void *)(v20 + 4) = a1;
      __SC_log_send(5LL, v15, v16, v18);
    }
  }

  uint64_t v14 = 0LL;
LABEL_17:
  if (HIDWORD(v22)) {
    IOObjectRelease(HIDWORD(v22));
  }
  return v14;
}

CFDataRef sub_10001D42C(const __CFData *result, uint64_t a2, int a3)
{
  if (a3 == -536870896)
  {
    __int128 v3 = result;
    BytePtr = CFDataGetBytePtr(result);
    os_log_t v5 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v5 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v5;
    }

    uint64_t v6 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v5, v6))
    {
      uint64_t v7 = _os_log_pack_size(32LL);
      io_connect_t v8 = (char *)&v14 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v9 = __error();
      uint64_t v10 = _os_log_pack_fill( v8,  v7,  *v9,  &_mh_execute_header,  "%s: interface %@ unit %@ interface removed");
      uint64_t v11 = *(void *)BytePtr;
      uint64_t v12 = *((void *)BytePtr + 2);
      *(_DWORD *)uint64_t v10 = 136315650;
      *(void *)(v10 + 4) = "entryForNamingRequestChanged";
      *(_WORD *)(v10 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v10 + 14) = v11;
      *(_WORD *)(v10 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v10 + 24) = v12;
      __SC_log_send(5LL, v5, v6, v8);
    }

    sub_10001D5D0((uint64_t)BytePtr);
    if (qword_100079B58)
    {
      v15.length = CFArrayGetCount((CFArrayRef)qword_100079B58);
      v15.location = 0LL;
      CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)qword_100079B58, v15, v3);
    }

    else
    {
      CFIndex FirstIndexOfValue = -1LL;
    }

    return (const __CFData *)sub_10001D660(FirstIndexOfValue);
  }

  return result;
}

uint64_t sub_10001D5D0(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(void *)a1 = 0LL;
  }

  __int128 v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 16) = 0LL;
  }

  io_object_t v4 = *(_DWORD *)(a1 + 12);
  if (v4)
  {
    IOObjectRelease(v4);
    *(_DWORD *)(a1 + 1pthread_attr_setdetachstate(&v4, 2) = 0;
  }

  uint64_t result = *(unsigned int *)(a1 + 8);
  if ((_DWORD)result)
  {
    uint64_t result = IOObjectRelease(result);
    *(_DWORD *)(a1 + 8) = 0;
  }

  return result;
}

CFIndex sub_10001D660(CFIndex a1)
{
  if (!qword_100079B58) {
    sub_100061BD4();
  }
  if (CFArrayGetCount((CFArrayRef)qword_100079B58) <= a1) {
    sub_100061BFC();
  }
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_100079B58, a1);
  CFIndex result = CFArrayGetCount((CFArrayRef)qword_100079B58);
  if (!result)
  {
    if (qword_100079B58)
    {
      CFRelease((CFTypeRef)qword_100079B58);
      qword_100079B58 = 0LL;
    }

    return sub_10001D720();
  }

  return result;
}

uint64_t sub_10001D720()
{
  uint64_t result = qword_100079B60;
  if (qword_100079B60)
  {
    CFRunLoopTimerInvalidate((CFRunLoopTimerRef)qword_100079B60);
    if (qword_100079B60)
    {
      CFRelease((CFTypeRef)qword_100079B60);
      qword_100079B60 = 0LL;
    }

    os_log_t v1 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v1 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v1;
    }

    uint64_t v2 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v1, v2);
    if ((_DWORD)result)
    {
      uint64_t v3 = _os_log_pack_size(12LL);
      io_object_t v4 = (char *)&v7 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v5 = __error();
      uint64_t v6 = _os_log_pack_fill(v4, v3, *v5, &_mh_execute_header, "%s: timer cancelled", v7);
      *(_DWORD *)uint64_t v6 = 136315138;
      *(void *)(v6 + 4) = "disableNamingRequestCallBacks";
      return __SC_log_send(5LL, v1, v2, v4);
    }
  }

  return result;
}

void sub_10001D86C()
{
  if (!qword_100079B60)
  {
    qword_100079B60 = (uint64_t)CFRunLoopTimerCreateWithHandler(0LL, 0.0, 1.0, 0LL, 0LL, &stru_100072250);
    CFRunLoopRef Current = CFRunLoopGetCurrent();
    CFRunLoopAddTimer(Current, (CFRunLoopTimerRef)qword_100079B60, kCFRunLoopDefaultMode);
    os_log_t v1 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v1 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v1;
    }

    uint64_t v2 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v1, v2))
    {
      uint64_t v3 = _os_log_pack_size(12LL);
      io_object_t v4 = (char *)&v7 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v5 = __error();
      uint64_t v6 = _os_log_pack_fill(v4, v3, *v5, &_mh_execute_header, "%s: timer scheduled", v7);
      *(_DWORD *)uint64_t v6 = 136315138;
      *(void *)(v6 + 4) = "enableNamingRequestCallBacks";
      __SC_log_send(5LL, v1, v2, v4);
    }
  }

void sub_10001D9E0(id a1, __CFRunLoopTimer *a2)
{
}

void sub_10001DA24()
{
  p_base_props = &QoSMarkingController__classData.base_props;
  if (qword_100079B58)
  {
    os_log_t v1 = &QoSMarkingController__classData.base_props;
    os_log_t v2 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v2 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v2;
    }

    uint64_t v3 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v2, v3))
    {
      uint64_t v4 = _os_log_pack_size(12LL);
      os_log_t v5 = (char *)&v37 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v6 = __error();
      uint64_t v7 = v4;
      os_log_t v1 = &QoSMarkingController__classData.base_props;
      uint64_t v8 = _os_log_pack_fill(v5, v7, *v6, &_mh_execute_header, "%s", (const char *)v37);
      *(_DWORD *)uint64_t v8 = 136315138;
      *(void *)(v8 + 4) = "handleDeferredNamingRequests";
      __SC_log_send(5LL, v2, v3, v5);
    }

    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_100079B58);
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      int v12 = 0;
      CFIndex v13 = 0LL;
      *(void *)&__int128 v10 = 136315906LL;
      __int128 v37 = v10;
      *(void *)&__int128 v10 = 136315650LL;
      __int128 v38 = v10;
      do
      {
        ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)p_base_props[363], v13);
        BytePtr = CFDataGetBytePtr(ValueAtIndex);
        ++*((_DWORD *)BytePtr + 6);
        uint64_t v16 = sub_10001CE20(*(const __SCNetworkInterface **)BytePtr, 1, *((const void **)BytePtr + 2));
        if (v16)
        {
          uint64_t v17 = v16;
          os_log_t v18 = (os_log_t)v1[348];
          if (!v18)
          {
            os_log_t v18 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            v1[348] = (__objc2_prop_list *)v18;
          }

          uint64_t v19 = _SC_syslog_os_log_mapping(5LL);
          if (__SC_log_enabled(5LL, v18, v19))
          {
            uint64_t v20 = _os_log_pack_size(32LL);
            uint64_t v21 = (char *)&v37 - ((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v22 = __error();
            uint64_t v23 = v20;
            os_log_t v1 = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
            uint64_t v24 = _os_log_pack_fill(v21, v23, *v22, &_mh_execute_header, "%s: %@ unit %@ SUCCESS");
            uint64_t v25 = *(const __SCNetworkInterface **)BytePtr;
            uint64_t v26 = *((void *)BytePtr + 2);
            *(_DWORD *)uint64_t v24 = v38;
            *(void *)(v24 + 4) = "handleDeferredNamingRequests";
            *(_WORD *)(v24 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
            *(void *)(v24 + 14) = v25;
            *(_WORD *)(v24 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
            *(void *)(v24 + 24) = v26;
            __SC_log_send(5LL, v18, v19, v21);
            p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          }

          sub_10001D5D0((uint64_t)BytePtr);
          sub_10001D660(v13);
          --v11;
          CFRelease(v17);
          int v12 = 1;
        }

        else if (*((_DWORD *)BytePtr + 6) >= 0x1Eu)
        {
          os_log_t v27 = (os_log_t)v1[348];
          if (!v27)
          {
            os_log_t v27 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            v1[348] = (__objc2_prop_list *)v27;
          }

          uint64_t v28 = _SC_syslog_os_log_mapping(5LL);
          if (__SC_log_enabled(5LL, v27, v28))
          {
            uint64_t v29 = _os_log_pack_size(38LL);
            uint64_t v30 = (char *)&v37 - ((__chkstk_darwin(v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            CFIndex v31 = __error();
            uint64_t v32 = v29;
            os_log_t v1 = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
            uint64_t v33 = _os_log_pack_fill( v30,  v32,  *v31,  &_mh_execute_header,  "%s: failed to name %@ unit %@ after %u tries");
            os_log_t v34 = *(const __SCNetworkInterface **)BytePtr;
            uint64_t v35 = *((void *)BytePtr + 2);
            int v36 = *((_DWORD *)BytePtr + 6);
            *(_DWORD *)uint64_t v33 = v37;
            *(void *)(v33 + 4) = "handleDeferredNamingRequests";
            *(_WORD *)(v33 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
            *(void *)(v33 + 14) = v34;
            *(_WORD *)(v33 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
            *(void *)(v33 + 24) = v35;
            *(_WORD *)(v33 + 3pthread_attr_setdetachstate(&v4, 2) = 1024;
            *(_DWORD *)(v33 + 34) = v36;
            __SC_log_send(5LL, v27, v28, v30);
            p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          }

          sub_10001D5D0((uint64_t)BytePtr);
          sub_10001D660(v13);
          --v11;
        }

        ++v13;
      }

      while (v13 < v11);
      if (v12) {
        sub_1000197B4();
      }
    }
  }

BOOL sub_10001DE18(BOOL result, const void *a2)
{
  if (result)
  {
    uint64_t v3 = (const __CFArray *)result;
    CFIndex Count = CFArrayGetCount((CFArrayRef)result);
    if (Count < 1)
    {
      return 0LL;
    }

    else
    {
      CFIndex v5 = Count;
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v3, 0LL);
      BytePtr = (CFTypeRef *)CFDataGetBytePtr(ValueAtIndex);
      if (CFEqual(*BytePtr, a2))
      {
        return 1LL;
      }

      else
      {
        CFIndex v8 = 1LL;
        do
        {
          CFIndex v9 = v8;
          if (v5 == v8) {
            break;
          }
          __int128 v10 = (const __CFData *)CFArrayGetValueAtIndex(v3, v8);
          CFIndex v11 = (CFTypeRef *)CFDataGetBytePtr(v10);
          int v12 = CFEqual(*v11, a2);
          CFIndex v8 = v9 + 1;
        }

        while (!v12);
        return v9 < v5;
      }
    }
  }

  return result;
}

__CFData *sub_10001DEF4(const void *a1, uint64_t a2)
{
  kern_return_t v10;
  kern_return_t v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  _DWORD *v17;
  int v19;
  uint64_t IORegistryEntryID = _SCNetworkInterfaceGetIORegistryEntryID(a1);
  CFIndex v5 = IORegistryEntryIDMatching(IORegistryEntryID);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v5);
  if (!MatchingService) {
    return 0LL;
  }
  io_service_t v7 = MatchingService;
  CFMutableDataRef Mutable = CFDataCreateMutable(0LL, 24LL);
  CFDataSetLength(Mutable, 24LL);
  BytePtr = (UInt8 *)CFDataGetBytePtr(Mutable);
  *((void *)BytePtr + pthread_attr_setscope(&v4, 1) = 0LL;
  *((void *)BytePtr + pthread_attr_setdetachstate(&v4, 2) = 0LL;
  *(void *)BytePtr = 0LL;
  *(void *)BytePtr = CFRetain(a1);
  *((_DWORD *)BytePtr + pthread_attr_setdetachstate(&v4, 2) = v7;
  *((void *)BytePtr + pthread_attr_setdetachstate(&v4, 2) = a2;
  __int128 v10 = IOServiceAddInterestNotification( (IONotificationPortRef)qword_100079B00,  v7,  "IOGeneralInterest",  (IOServiceInterestCallback)sub_10001E6A8,  Mutable,  (io_object_t *)BytePtr + 3);
  if (v10)
  {
    CFIndex v11 = v10;
    int v12 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      int v12 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v12;
    }

    CFIndex v13 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v12, v13))
    {
      uint64_t v14 = _os_log_pack_size(8LL);
      CFRange v15 = (char *)&v19 - ((__chkstk_darwin(v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v16 = __error();
      uint64_t v17 = (_DWORD *)_os_log_pack_fill( v15,  v14,  *v16,  &_mh_execute_header,  "IOServiceAddInterestNotification() failed, kr =  %d",  v19);
      *uint64_t v17 = 67109120;
      v17[1] = v11;
      __SC_log_send(3LL, v12, v13, v15);
    }

    sub_10001E87C(Mutable);
    CFRelease(Mutable);
    return 0LL;
  }

  return Mutable;
}

void sub_10001E0D4(const __CFData *a1, int a2)
{
  BytePtr = (SCNetworkInterfaceRef *)CFDataGetBytePtr(a1);
  if (a2 != -536870896) {
    return;
  }
  CFIndex v5 = BytePtr;
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(*BytePtr);
  os_log_t v7 = (os_log_t)qword_100079AE0;
  if (BSDName)
  {
    CFStringRef v8 = BSDName;
    if (!qword_100079AE0)
    {
      os_log_t v7 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v7;
    }

    uint64_t v9 = _SC_syslog_os_log_mapping(6LL);
    uint64_t v10 = _os_log_pack_size(12LL);
    CFIndex v11 = (char *)&v27 - ((__chkstk_darwin(v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    int v12 = __error();
    uint64_t v13 = _os_log_pack_fill(v11, v10, *v12, &_mh_execute_header, "[pre-configured] interface removed: %@");
    *(_DWORD *)uint64_t v13 = 138412290;
    *(void *)(v13 + 4) = v8;
    os_log_t v14 = v7;
    uint64_t v15 = v9;
  }

  else
  {
    if (!qword_100079AE0)
    {
      os_log_t v7 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v7;
    }

    uint64_t v16 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v7, v16))
    {
      uint64_t v17 = _os_log_pack_size(2LL);
      os_log_t v18 = (char *)&v27 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v19 = __error();
      *(_WORD *)_os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "[pre-configured] interface w/no BSD name removed") = 0;
      __SC_log_send(6LL, v7, v16, v18);
    }

    os_log_t v20 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v20 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v20;
    }

    uint64_t v21 = _SC_syslog_os_log_mapping(6LL);
    uint64_t v22 = _os_log_pack_size(12LL);
    CFIndex v11 = (char *)&v27 - ((__chkstk_darwin(v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v23 = __error();
    uint64_t v24 = _os_log_pack_fill(v11, v22, *v23, &_mh_execute_header, "  interface = %@");
    SCNetworkInterfaceRef v25 = *v5;
    *(_DWORD *)uint64_t v24 = 138412290;
    *(void *)(v24 + 4) = v25;
    os_log_t v14 = v20;
    uint64_t v15 = v21;
  }

  __SC_log_send(6LL, v14, v15, v11);
LABEL_16:
  if (qword_100079B68)
  {
    v28.length = CFArrayGetCount((CFArrayRef)qword_100079B68);
    v28.location = 0LL;
    CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)qword_100079B68, v28, a1);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_100079B68, FirstIndexOfValue);
      if (!CFArrayGetCount((CFArrayRef)qword_100079B68))
      {
        CFRelease((CFTypeRef)qword_100079B68);
        qword_100079B68 = 0LL;
      }

      sub_10001E3F8();
    }
  }

void sub_10001E3F8()
{
  p_base_props = &QoSMarkingController__classData.base_props;
  if (qword_100079B68 && (CFIndex Count = CFArrayGetCount((CFArrayRef)qword_100079B68), Count >= 1))
  {
    CFIndex v2 = Count;
    CFMutableDataRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    CFIndex v4 = 0LL;
    *(void *)&__int128 v5 = 138412290LL;
    __int128 v23 = v5;
    do
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)p_base_props[365], v4);
      BytePtr = (SCNetworkInterfaceRef *)CFDataGetBytePtr(ValueAtIndex);
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(*BytePtr);
      if (BSDName)
      {
        CFArrayAppendValue(Mutable, BSDName);
      }

      else
      {
        os_log_t v9 = (os_log_t)qword_100079AE0;
        if (!qword_100079AE0)
        {
          os_log_t v9 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_100079AE0 = (uint64_t)v9;
        }

        uint64_t v10 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v9, v10))
        {
          uint64_t v11 = _os_log_pack_size(2LL);
          int v12 = (char *)&v23 - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v13 = __error();
          *(_WORD *)_os_log_pack_fill( v12,  v11,  *v13,  &_mh_execute_header,  "pre-configured interface w/no BSD name") = 0;
          os_log_t v14 = v12;
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          __SC_log_send(5LL, v9, v10, v14);
        }

        os_log_t v15 = (os_log_t)qword_100079AE0;
        if (!qword_100079AE0)
        {
          os_log_t v15 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_100079AE0 = (uint64_t)v15;
        }

        uint64_t v16 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v15, v16))
        {
          uint64_t v17 = _os_log_pack_size(12LL);
          os_log_t v18 = (char *)&v23 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v19 = __error();
          uint64_t v20 = v17;
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          uint64_t v21 = _os_log_pack_fill(v18, v20, *v19, &_mh_execute_header, "  interface = %@");
          SCNetworkInterfaceRef v22 = *BytePtr;
          *(_DWORD *)uint64_t v21 = v23;
          *(void *)(v21 + 4) = v22;
          __SC_log_send(5LL, v15, v16, v18);
        }
      }

      ++v4;
    }

    while (v2 != v4);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_100079B10, @"_PreConfigured_", Mutable);
    CFRelease(Mutable);
  }

  else
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_100079B10, @"_PreConfigured_");
  }

  sub_1000182E8();
}

void sub_10001E6A8(const __CFData *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == -536870896)
  {
    BytePtr = CFDataGetBytePtr(a1);
    os_log_t v7 = *(const void **)BytePtr;
    if (_SCNetworkInterfaceIsBuiltin(*(void *)BytePtr)
      || !_SCNetworkInterfaceIsApplePreconfigured(v7))
    {
      os_log_t v7 = 0LL;
    }

    else
    {
      CFRetain(v7);
    }

    CFRetain(a1);
    (*((void (**)(const __CFData *, uint64_t, uint64_t))BytePtr + 2))(a1, 3758096400LL, a4);
    sub_10001E87C(a1);
    CFRelease(a1);
    if (v7)
    {
      os_log_t v8 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v8 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v8;
      }

      uint64_t v9 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v8, v9))
      {
        uint64_t v10 = _os_log_pack_size(12LL);
        uint64_t v11 = (char *)&v15 - ((__chkstk_darwin(v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v12 = __error();
        uint64_t v13 = _os_log_pack_fill( v11,  v10,  *v12,  &_mh_execute_header,  "Interface released unit %@ (from database)");
        uint64_t IOInterfaceUnit = _SCNetworkInterfaceGetIOInterfaceUnit(v7);
        *(_DWORD *)uint64_t v13 = 138412290;
        *(void *)(v13 + 4) = IOInterfaceUnit;
        __SC_log_send(6LL, v8, v9, v11);
      }

      sub_10001C440((const __CFArray *)qword_100079AF0, (uint64_t)v7, 0LL);
      CFRelease(v7);
      sub_100018630((CFPropertyListRef)qword_100079AF0);
    }
  }

void sub_10001E87C(const __CFData *a1)
{
  BytePtr = CFDataGetBytePtr(a1);
  io_object_t v2 = *((_DWORD *)BytePtr + 3);
  if (v2)
  {
    IOObjectRelease(v2);
    *((_DWORD *)BytePtr + 3) = 0;
  }

  io_object_t v3 = *((_DWORD *)BytePtr + 2);
  if (v3)
  {
    IOObjectRelease(v3);
    *((_DWORD *)BytePtr + pthread_attr_setdetachstate(&v4, 2) = 0;
  }

  if (*(void *)BytePtr)
  {
    CFRelease(*(CFTypeRef *)BytePtr);
    *(void *)BytePtr = 0LL;
  }

void sub_10001E900(const __CFData *a1, int a2)
{
  BytePtr = CFDataGetBytePtr(a1);
  if (a2 == -536870896)
  {
    __int128 v5 = BytePtr;
    os_log_t v6 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v6 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v6;
    }

    uint64_t v7 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v6, v7))
    {
      uint64_t v8 = _os_log_pack_size(2LL);
      uint64_t v9 = (char *)block - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v10 = __error();
      *(_WORD *)_os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "[trust required] interface removed") = 0;
      __SC_log_send(6LL, v6, v7, v9);
    }

    os_log_t v11 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v11 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v11;
    }

    uint64_t v12 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v11, v12))
    {
      uint64_t v13 = _os_log_pack_size(12LL);
      os_log_t v14 = (char *)block - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v15 = __error();
      uint64_t v16 = _os_log_pack_fill(v14, v13, *v15, &_mh_execute_header, "  path = %@");
      uint64_t IOPath = _SCNetworkInterfaceGetIOPath(*(void *)v5);
      *(_DWORD *)uint64_t v16 = 138412290;
      *(void *)(v16 + 4) = IOPath;
      __SC_log_send(6LL, v11, v12, v14);
    }

    if (qword_100079B70)
    {
      v21.length = CFArrayGetCount((CFArrayRef)qword_100079B70);
      v21.location = 0LL;
      CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)qword_100079B70, v21, a1);
      if (FirstIndexOfValue != -1)
      {
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_100079B70, FirstIndexOfValue);
        if (!CFArrayGetCount((CFArrayRef)qword_100079B70))
        {
          CFRelease((CFTypeRef)qword_100079B70);
          qword_100079B70 = 0LL;
        }

        CFRunLoopRef Current = CFRunLoopGetCurrent();
        CFRetain(Current);
        if (qword_100079B80 != -1) {
          dispatch_once(&qword_100079B80, &stru_100072330);
        }
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000LL;
        block[2] = sub_10001F158;
        block[3] = &unk_1000722D0;
        block[4] = Current;
        dispatch_async((dispatch_queue_t)qword_100079B88, block);
      }
    }
  }

void sub_10001EBD4(id a1)
{
}

void sub_10001EC74(const __CFString *a1, const void *a2)
{
  out_audit_token_t token = -1;
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (!CStringPtr) {
    sub_100061C24();
  }
  os_log_t v6 = CStringPtr;
  CFRetain(Current);
  CFRetain(a2);
  if (qword_100079B80 != -1) {
    dispatch_once(&qword_100079B80, &stru_100072330);
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000LL;
  handler[2] = sub_10001F1BC;
  handler[3] = &unk_1000722F0;
  void handler[4] = Current;
  handler[5] = a2;
  uint32_t v7 = notify_register_dispatch(v6, &out_token, (dispatch_queue_t)qword_100079B88, handler);
  if (v7)
  {
    uint32_t v8 = v7;
    os_log_t v9 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v9 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v9;
    }

    uint64_t v10 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v9, v10))
    {
      uint64_t v11 = _os_log_pack_size(18LL);
      uint64_t v12 = (char *)handler - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v13 = __error();
      uint64_t v14 = _os_log_pack_fill( v12,  v11,  *v13,  &_mh_execute_header,  "notify_register_dispatch(%@) failed: %u");
      *(_DWORD *)uint64_t v14 = 138412546;
      *(void *)(v14 + 4) = a1;
      *(_WORD *)(v14 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v14 + 14) = v8;
      __SC_log_send(3LL, v9, v10, v12);
    }

    CFRelease(Current);
    CFRelease(a2);
  }

void sub_10001EE80(uint64_t a1)
{
}

void sub_10001EEE4(__CFRunLoop *a1, uint64_t a2)
{
  uint64_t v20 = 0LL;
  int is_host_trusted = lockdown_is_host_trusted(@"com.apple.SystemConfiguration.InterfaceNamer", 0LL, &v20);
  if (qword_100079B70) {
    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_100079B70);
  }
  else {
    CFIndex Count = 0LL;
  }
  BOOL v7 = qword_100079B90 == Count && byte_100079B98 == is_host_trusted;
  os_log_t v8 = (os_log_t)qword_100079AE0;
  if (!qword_100079AE0)
  {
    os_log_t v8 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_100079AE0 = (uint64_t)v8;
  }

  uint64_t v9 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v8, v9))
  {
    uint64_t v10 = _os_log_pack_size(72LL);
    v19[1] = v19;
    uint64_t v11 = (char *)v19 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v12 = __error();
    uint64_t v13 = _os_log_pack_fill( v11,  v10,  *v12,  &_mh_execute_header,  "%@, trusted = %s%s%@, %ld interface%s)%s");
    uint64_t v14 = v20;
    uint64_t v15 = "No";
    *(_DWORD *)uint64_t v13 = 138413826;
    *(void *)(v13 + 4) = a2;
    if (is_host_trusted) {
      uint64_t v15 = "Yes";
    }
    uint64_t v16 = ", error = ";
    if (!v14) {
      uint64_t v16 = "";
    }
    *(_WORD *)(v13 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v13 + 14) = v15;
    if (!v14) {
      uint64_t v14 = &stru_100073D90;
    }
    *(_WORD *)(v13 + 2pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v13 + 24) = v16;
    uint64_t v17 = "s";
    if (Count == 1) {
      uint64_t v17 = "";
    }
    *(_WORD *)(v13 + 3pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v13 + 34) = v14;
    os_log_t v18 = " *";
    *(_WORD *)(v13 + 4pthread_attr_setdetachstate(&v4, 2) = 2048;
    *(void *)(v13 + 44) = Count;
    *(_WORD *)(v13 + 5pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v13 + 54) = v17;
    if (v7) {
      os_log_t v18 = "";
    }
    *(_WORD *)(v13 + 6pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v13 + 64) = v18;
    __SC_log_send(6LL, v8, v9, v11);
  }

  if (!v7)
  {
    byte_100079B98 = is_host_trusted;
    qword_100079B90 = Count;
    CFRunLoopPerformBlock(a1, kCFRunLoopDefaultMode, &stru_100072370);
    CFRunLoopWakeUp(a1);
  }

  if (v20) {
    CFRelease(v20);
  }
}

void sub_10001F158(uint64_t a1)
{
}

void sub_10001F1BC(uint64_t a1)
{
}

void sub_10001F200(id a1)
{
  qword_100079B88 = (uint64_t)dispatch_queue_create("Trust Required queue", 0LL);
}

void sub_10001F25C(id a1)
{
}

void sub_10001F2A0()
{
  if (qword_100079B70
    && ((Count = CFArrayGetCount((CFArrayRef)qword_100079B70), Count >= 1) ? (BOOL v1 = byte_100079B98 == 0) : (BOOL v1 = 0), v1))
  {
    CFIndex v2 = Count;
    CFMutableDataRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    CFIndex v4 = 0LL;
    p_base_props = &QoSMarkingController__classData.base_props;
    *(void *)&__int128 v6 = 138412290LL;
    __int128 v24 = v6;
    do
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)qword_100079B70, v4);
      BytePtr = (SCNetworkInterfaceRef *)CFDataGetBytePtr(ValueAtIndex);
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(*BytePtr);
      if (BSDName)
      {
        CFArrayAppendValue(Mutable, BSDName);
      }

      else
      {
        os_log_t v10 = (os_log_t)p_base_props[348];
        if (!v10)
        {
          os_log_t v10 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          p_base_props[348] = (__objc2_prop_list *)v10;
        }

        uint64_t v11 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v10, v11))
        {
          uint64_t v12 = _os_log_pack_size(2LL);
          uint64_t v13 = (char *)&v24 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v14 = __error();
          *(_WORD *)_os_log_pack_fill( v13,  v12,  *v14,  &_mh_execute_header,  "[trust required] interface w/no BSD name not excluded") = 0;
          uint64_t v15 = v13;
          p_base_props = &QoSMarkingController__classData.base_props;
          __SC_log_send(5LL, v10, v11, v15);
        }

        os_log_t v16 = (os_log_t)p_base_props[348];
        if (!v16)
        {
          os_log_t v16 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          p_base_props[348] = (__objc2_prop_list *)v16;
        }

        uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v16, v17))
        {
          uint64_t v18 = _os_log_pack_size(12LL);
          uint64_t v19 = (char *)&v24 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v20 = __error();
          uint64_t v21 = v18;
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          uint64_t v22 = _os_log_pack_fill(v19, v21, *v20, &_mh_execute_header, "  interface = %@");
          SCNetworkInterfaceRef v23 = *BytePtr;
          *(_DWORD *)uint64_t v22 = v24;
          *(void *)(v22 + 4) = v23;
          __SC_log_send(5LL, v16, v17, v19);
        }
      }

      ++v4;
    }

    while (v2 != v4);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_100079B10, @"_Excluded_", Mutable);
    CFRelease(Mutable);
  }

  else
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_100079B10, @"_Excluded_");
  }

  sub_1000182E8();
}

void sub_10001F55C(uint64_t a1)
{
}

void sub_10001F5B8(const __CFArray *a1)
{
  SCPreferencesRef v2 = SCPreferencesCreate(0LL, @"InterfaceNamer:updateNetworkConfiguration", 0LL);
  p_base_props = &QoSMarkingController__classData.base_props;
  os_log_t v4 = (os_log_t)qword_100079AE0;
  if (!v2)
  {
    if (!qword_100079AE0)
    {
      os_log_t v4 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v4;
    }

    uint64_t v22 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v4, v22))
    {
      uint64_t v23 = _os_log_pack_size(12LL);
      __int128 v24 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      SCNetworkInterfaceRef v25 = __error();
      uint64_t v26 = _os_log_pack_fill( v24,  v23,  *v25,  &_mh_execute_header,  "SCPreferencesCreate() failed: %s",  v105);
      int v27 = SCError();
      CFRange v28 = SCErrorString(v27);
      *(_DWORD *)uint64_t v26 = 136315138;
      *(void *)(v26 + 4) = v28;
      __SC_log_send(5LL, v4, v22, v24);
    }

    return;
  }

  __int128 v5 = v2;
  v108 = a1;
  if (!qword_100079AE0)
  {
    os_log_t v4 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_100079AE0 = (uint64_t)v4;
  }

  uint64_t v6 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v4, v6))
  {
    uint64_t v8 = _os_log_pack_size(22LL);
    uint64_t v9 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v10 = __error();
    uint64_t v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "%s: evaluating %@");
    *(_DWORD *)uint64_t v11 = 136315394;
    *(void *)(v11 + 4) = "updateNetworkConfigurationAsync";
    *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v11 + 14) = v108;
    __SC_log_send(5LL, v4, v6, v9);
  }

  int v12 = 0;
  *(void *)&__int128 v7 = 136315650LL;
  __int128 v109 = v7;
  while (!SCPreferencesLock(v5, 1u))
  {
    int v13 = SCError();
    os_log_t v14 = (os_log_t)p_base_props[348];
    if (v13 != 3005)
    {
      if (!v14)
      {
        os_log_t v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        p_base_props[348] = (__objc2_prop_list *)v14;
      }

      uint64_t v69 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v14, v69))
      {
        uint64_t v70 = _os_log_pack_size(22LL);
        int v71 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFStringRef v72 = __error();
        uint64_t v73 = _os_log_pack_fill( v71,  v70,  *v72,  &_mh_execute_header,  "%s: failed to get lock, %s",  v105,  v106);
        int v74 = SCError();
        int v75 = SCErrorString(v74);
        *(_DWORD *)uint64_t v73 = 136315394;
        *(void *)(v73 + 4) = "updateNetworkConfigurationAsync";
        *(_WORD *)(v73 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
        *(void *)(v73 + 14) = v75;
        __SC_log_send(5LL, v14, v69, v71);
        p_base_props = &QoSMarkingController__classData.base_props;
      }

LABEL_58:
      os_log_t v76 = (os_log_t)p_base_props[348];
      if (!v76)
      {
        os_log_t v76 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        p_base_props[348] = (__objc2_prop_list *)v76;
      }

      uint64_t v77 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v76, v77))
      {
        uint64_t v78 = _os_log_pack_size(12LL);
        uint64_t v79 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        os_log_t v80 = __error();
        uint64_t v81 = _os_log_pack_fill( v79,  v78,  *v80,  &_mh_execute_header,  "%s: can't acquire lock, giving up",  v105);
        *(_DWORD *)uint64_t v81 = 136315138;
        *(void *)(v81 + 4) = "updateNetworkConfigurationAsync";
        __SC_log_send(5LL, v76, v77, v79);
      }

      goto LABEL_87;
    }

    if (!v14)
    {
      os_log_t v14 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      p_base_props[348] = (__objc2_prop_list *)v14;
    }

    uint64_t v15 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v14, v15))
    {
      uint64_t v16 = _os_log_pack_size(24LL);
      uint64_t v17 = v5;
      uint64_t v18 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v19 = __error();
      uint64_t v20 = _os_log_pack_fill( v18,  v16,  *v19,  &_mh_execute_header,  "%s: kSCStatusStale, calling Synchronize (try %d of %d)",  v105,  (_DWORD)v106,  (_DWORD)v107);
      *(_DWORD *)uint64_t v20 = v109;
      ++v12;
      *(void *)(v20 + 4) = "updateNetworkConfigurationAsync";
      *(_WORD *)(v20 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v20 + 14) = v12;
      *(_WORD *)(v20 + 18) = 1024;
      *(_DWORD *)(v20 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = 10;
      uint64_t v21 = v18;
      __int128 v5 = v17;
      __SC_log_send(5LL, v14, v15, v21);
      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
    }

    else
    {
      ++v12;
    }

    SCPreferencesSynchronize(v5);
    if (v12 == 10) {
      goto LABEL_58;
    }
  }

  SCNetworkSetRef Default = SCNetworkSetCopyCurrent(v5);
  uint64_t v30 = v108;
  if (!Default)
  {
    os_log_t v31 = (os_log_t)p_base_props[348];
    if (!v31)
    {
      os_log_t v31 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      p_base_props[348] = (__objc2_prop_list *)v31;
    }

    uint64_t v32 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v31, v32))
    {
      uint64_t v33 = _os_log_pack_size(2LL);
      os_log_t v34 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v35 = __error();
      *(_WORD *)_os_log_pack_fill(v34, v33, *v35, &_mh_execute_header, "No current set, adding default") = 0;
      __SC_log_send(5LL, v31, v32, v34);
      p_base_props = &QoSMarkingController__classData.base_props;
    }

    SCNetworkSetRef Default = (SCNetworkSetRef)_SCNetworkSetCreateDefault(v5);
    if (!Default)
    {
      os_log_t v89 = (os_log_t)p_base_props[348];
      if (!v89)
      {
        os_log_t v89 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        p_base_props[348] = (__objc2_prop_list *)v89;
      }

      uint64_t v90 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v89, v90))
      {
        uint64_t v91 = _os_log_pack_size(12LL);
        os_log_t v92 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v93 = __error();
        uint64_t v94 = _os_log_pack_fill( v92,  v91,  *v93,  &_mh_execute_header,  "_SCNetworkSetCreateDefault() failed: %s",  v105);
        int v95 = SCError();
        sigaction v96 = SCErrorString(v95);
        *(_DWORD *)uint64_t v94 = 136315138;
        *(void *)(v94 + 4) = v96;
        __SC_log_send(5LL, v89, v90, v92);
      }

      SCPreferencesUnlock(v5);
      goto LABEL_87;
    }
  }

  if (!v30 || (CFIndex Count = CFArrayGetCount(v30), Count < 1))
  {
    SCPreferencesUnlock(v5);
    goto LABEL_86;
  }

  CFIndex v38 = Count;
  uint64_t v107 = Default;
  uint64_t v39 = v5;
  HIDWORD(v106) = 0;
  CFIndex v40 = 0LL;
  *(void *)&__int128 v37 = 138412290LL;
  __int128 v109 = v37;
  do
  {
    ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v30, v40);
    if (_SCNetworkInterfaceIsHiddenInterface())
    {
      os_log_t v42 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v42 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v42;
      }

      uint64_t v43 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v42, v43))
      {
        uint64_t v44 = _os_log_pack_size(12LL);
        uint64_t v45 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v46 = __error();
        uint64_t v47 = _os_log_pack_fill( v45,  v44,  *v46,  &_mh_execute_header,  "%@: not configuring hidden interface");
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
        *(_DWORD *)uint64_t v47 = v109;
        *(void *)(v47 + 4) = BSDName;
        os_log_t v49 = v42;
        uint64_t v50 = v43;
        uint64_t v51 = v45;
        goto LABEL_50;
      }
    }

    else if (SCNetworkInterfaceGetAutoConfigure(ValueAtIndex))
    {
      int v52 = SCNetworkSetEstablishDefaultInterfaceConfiguration(v107, ValueAtIndex);
      os_log_t v53 = (os_log_t)qword_100079AE0;
      if (v52)
      {
        if (!qword_100079AE0)
        {
          os_log_t v53 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_100079AE0 = (uint64_t)v53;
        }

        uint64_t v54 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v53, v54))
        {
          uint64_t v55 = _os_log_pack_size(12LL);
          os_log_t v56 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v57 = __error();
          uint64_t v58 = _os_log_pack_fill( v56,  v55,  *v57,  &_mh_execute_header,  "added default configuration for %@");
          CFStringRef v59 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
          *(_DWORD *)uint64_t v58 = v109;
          *(void *)(v58 + 4) = v59;
          __SC_log_send(5LL, v53, v54, v56);
        }

        HIDWORD(v106) = 1;
      }

      else
      {
        if (!qword_100079AE0)
        {
          os_log_t v53 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          qword_100079AE0 = (uint64_t)v53;
        }

        uint64_t v60 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v53, v60))
        {
          uint64_t v65 = _os_log_pack_size(12LL);
          CFStringRef v62 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v66 = *__error();
          uint64_t v64 = _os_log_pack_fill( v62,  v65,  v66,  &_mh_execute_header,  "did not configure %@ (it's likely already configured)");
LABEL_49:
          uint64_t v67 = v64;
          CFStringRef v68 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
          *(_DWORD *)uint64_t v67 = v109;
          *(void *)(v67 + 4) = v68;
          os_log_t v49 = v53;
          uint64_t v50 = v60;
          uint64_t v51 = v62;
LABEL_50:
          __SC_log_send(5LL, v49, v50, v51);
        }
      }
    }

    else
    {
      os_log_t v53 = (os_log_t)qword_100079AE0;
      if (!qword_100079AE0)
      {
        os_log_t v53 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v53;
      }

      uint64_t v60 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v53, v60))
      {
        uint64_t v61 = _os_log_pack_size(12LL);
        CFStringRef v62 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v63 = *__error();
        uint64_t v64 = _os_log_pack_fill(v62, v61, v63, &_mh_execute_header, "%@: auto-configure disabled on interface");
        goto LABEL_49;
      }
    }

    ++v40;
  }

  while (v38 != v40);
  __int128 v5 = v39;
  SCNetworkSetRef Default = v107;
  if (!HIDWORD(v106)) {
    goto LABEL_85;
  }
  if (SCPreferencesCommitChanges(v39))
  {
    int v82 = SCPreferencesApplyChanges(v39);
    os_log_t v83 = (os_log_t)qword_100079AE0;
    if (v82)
    {
      if (!qword_100079AE0)
      {
        os_log_t v83 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        qword_100079AE0 = (uint64_t)v83;
      }

      uint64_t v84 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v83, v84))
      {
        uint64_t v85 = _os_log_pack_size(12LL);
        os_log_t v86 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v87 = __error();
        uint64_t v88 = _os_log_pack_fill(v86, v85, *v87, &_mh_execute_header, "%s: configuration saved", v105);
        *(_DWORD *)uint64_t v88 = 136315138;
        *(void *)(v88 + 4) = "updateNetworkConfigurationAsync";
        goto LABEL_84;
      }

      goto LABEL_85;
    }

    if (!qword_100079AE0)
    {
      os_log_t v83 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v83;
    }

    uint64_t v84 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v100 = _os_log_pack_size(12LL);
    os_log_t v86 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v101 = *__error();
    uint64_t v99 = _os_log_pack_fill(v86, v100, v101, &_mh_execute_header, "SCPreferencesApplyChanges() failed: %s");
  }

  else
  {
    os_log_t v83 = (os_log_t)qword_100079AE0;
    if (!qword_100079AE0)
    {
      os_log_t v83 = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      qword_100079AE0 = (uint64_t)v83;
    }

    uint64_t v84 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v97 = _os_log_pack_size(12LL);
    os_log_t v86 = (char *)&v105 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v98 = *__error();
    uint64_t v99 = _os_log_pack_fill(v86, v97, v98, &_mh_execute_header, "SCPreferencesCommitChanges() failed: %s");
  }

  uint64_t v102 = v99;
  int v103 = SCError();
  unsigned int v104 = SCErrorString(v103);
  *(_DWORD *)uint64_t v102 = 136315138;
  *(void *)(v102 + 4) = v104;
LABEL_84:
  __SC_log_send(5LL, v83, v84, v86);
  SCNetworkSetRef Default = v107;
LABEL_85:
  SCPreferencesUnlock(v39);
  if (Default) {
LABEL_86:
  }
    CFRelease(Default);
LABEL_87:
  CFRelease(v5);
}

void sub_1000202A8(id a1)
{
  qword_100079BA8 = (uint64_t)dispatch_queue_create("InterfaceNamerConfigure New Interfaces queue", 0LL);
}

uint64_t sub_100020304( const __CFDictionary *a1, const __CFDictionary *a2, const __CFArray *a3, const __CFString *a4, const __CFArray *a5, CFTypeRef *a6)
{
  v211 = a6;
  CFStringRef v214 = a4;
  CFMutableDataRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  if (!Mutable) {
    sub_100061C4C();
  }
  CFDictionaryRef v210 = a1;
  v215 = Mutable;
  v201 = a2;
  v208 = a3;
  sub_100021B30(Mutable, a2, a3, 0LL, 0LL);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (a5)
  {
    if (CFGetTypeID(a5) == TypeID)
    {
      CFIndex Count = CFArrayGetCount(a5);
      if (Count >= 1)
      {
        CFIndex v13 = Count;
        CFIndex v14 = 0LL;
        CFStringRef v213 = kSCPropNetDNSDomainName;
        CFStringRef v212 = kSCPropNetDNSServerTimeout;
        int v15 = 150000;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a5, v14);
          uint64_t v17 = _SC_trimDomain(ValueAtIndex);
          if (v17)
          {
            uint64_t v18 = (const void *)v17;
            LODWORD(v223) = v15;
            uint64_t v19 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            CFDictionarySetValue(v19, v213, v18);
            CFDictionarySetValue(v19, kSCPropNetDNSOptions, @"pdns");
            CFNumberRef v20 = CFNumberCreate(0LL, kCFNumberIntType, &v223);
            CFDictionarySetValue(v19, kSCPropNetDNSSearchOrder, v20);
            CFRelease(v20);
            if (qword_100079BD8) {
              CFDictionarySetValue(v19, v212, (const void *)qword_100079BD8);
            }
            sub_100023690(v19, (uint64_t)"Private DNS", 0LL, v14);
            sub_10002373C(v215, v19);
            CFRelease(v19);
            CFRelease(v18);
          }

          ++v14;
          v15 += 200;
        }

        while (v13 != v14);
      }
    }
  }

  if (v210
    && (Value = CFDictionaryGetValue(v210, kSCPropNetDNSServerAddresses), CFTypeID v22 = CFArrayGetTypeID(), Value)
    && CFGetTypeID(Value) == v22
    && CFArrayGetCount((CFArrayRef)Value))
  {
    LODWORD(v223) = 200000;
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, v210);
    int v24 = 0;
  }

  else
  {
    LODWORD(v223) = 200000;
    MutableCFArrayRef Copy = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    int v24 = 1;
  }

  if (!MutableCopy) {
    sub_100061C74();
  }
  CFStringRef v212 = kSCPropNetDNSSearchOrder;
  SCNetworkInterfaceRef v25 = CFDictionaryGetValue(MutableCopy, kSCPropNetDNSSearchOrder);
  CFTypeID v26 = CFNumberGetTypeID();
  LODWORD(v213) = v24;
  if (v25 && CFGetTypeID(v25) == v26 && CFNumberGetValue((CFNumberRef)v25, kCFNumberSInt32Type, &v223))
  {
    LODWORD(v21sub_10000F430((uint64_t)__str, 0) = 0;
  }

  else
  {
    LODWORD(v223) = 200000;
    CFNumberRef v27 = CFNumberCreate(0LL, kCFNumberIntType, &v223);
    CFDictionarySetValue(MutableCopy, v212, v27);
    CFRelease(v27);
    LODWORD(v21sub_10000F430((uint64_t)__str, 0) = 1;
  }

  v209 = sub_100023A54(MutableCopy, v215);
  sub_100023690(MutableCopy, (uint64_t)"Default", 0LL, 0LL);
  sub_10002373C(v215, MutableCopy);
  CFRelease(MutableCopy);
  CFTypeID v28 = CFArrayGetTypeID();
  if (v214)
  {
    if (CFGetTypeID(v214) == v28)
    {
      CFIndex v29 = CFArrayGetCount((CFArrayRef)v214);
      if (v29 >= 1)
      {
        CFIndex v30 = v29;
        CFIndex v31 = 0LL;
        int v32 = 300000;
        do
        {
          uint64_t v33 = CFArrayGetValueAtIndex((CFArrayRef)v214, v31);
          uint64_t v34 = _SC_trimDomain(v33);
          if (v34)
          {
            uint64_t v35 = (const void *)v34;
            LODWORD(v223) = v32;
            int v36 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            CFDictionarySetValue(v36, kSCPropNetDNSDomainName, v35);
            CFDictionarySetValue(v36, kSCPropNetDNSOptions, @"mdns");
            CFNumberRef v37 = CFNumberCreate(0LL, kCFNumberIntType, &v223);
            CFDictionarySetValue(v36, v212, v37);
            CFRelease(v37);
            if (qword_100079BD0) {
              CFDictionarySetValue(v36, kSCPropNetDNSServerTimeout, (const void *)qword_100079BD0);
            }
            sub_100023690(v36, (uint64_t)"Multicast DNS", 0LL, v31);
            sub_10002373C(v215, v36);
            CFRelease(v36);
            CFRelease(v35);
          }

          ++v31;
          v32 += 200;
        }

        while (v30 != v31);
      }
    }
  }

  CFTypeID v38 = CFDictionaryGetTypeID();
  uint64_t v39 = v201;
  if (v201)
  {
    if (CFGetTypeID(v201) == v38)
    {
      CFIndex v40 = CFDictionaryGetCount(v201);
      if (v40)
      {
        uint64_t v41 = v40;
        CFTypeID v42 = CFArrayGetTypeID();
        if (v208 && CFGetTypeID(v208) == v42)
        {
          uint64_t v43 = CFArrayGetCount(v208);
          if (v43 >= 1)
          {
            CFMutableArrayRef v44 = CFArrayCreateMutableCopy(0LL, 0LL, v208);
            goto LABEL_41;
          }
        }

        else
        {
          uint64_t v43 = 0LL;
        }

        CFMutableArrayRef v44 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
LABEL_41:
        uint64_t v45 = v44;
        if (v41 < 33)
        {
          int v46 = (const void **)&v223;
          CFDictionaryGetKeysAndValues(v201, (const void **)&v223, 0LL);
          if (v41 < 1)
          {
LABEL_50:
            v207 = CFSetCreateMutable(0LL, 0LL, &kCFTypeSetCallBacks);
            if (v43 >= 1)
            {
              CFIndex v49 = 0LL;
              CFStringRef v214 = kSCPropNetDNSServerAddresses;
              CFStringRef v206 = kSCPropInterfaceName;
              CFStringRef v204 = kSCPropNetDNSSearchDomains;
              CFStringRef v205 = (CFStringRef)kSCPropNetDNSServiceIdentifier;
              CFStringRef v202 = kSCPropNetDNSSupplementalMatchOrders;
              CFStringRef v203 = kSCPropNetDNSSupplementalMatchDomains;
              do
              {
                uint64_t v50 = (const __CFString *)CFArrayGetValueAtIndex(v45, v49);
                uint64_t v51 = (const __CFDictionary *)CFDictionaryGetValue(v201, v50);
                CFTypeID v52 = CFDictionaryGetTypeID();
                if (v51)
                {
                  if (CFGetTypeID(v51) == v52)
                  {
                    os_log_t v53 = (const __CFDictionary *)CFDictionaryGetValue(v51, kSCEntNetDNS);
                    CFTypeID v54 = CFDictionaryGetTypeID();
                    if (v53)
                    {
                      if (CFGetTypeID(v53) == v54)
                      {
                        uint64_t v55 = (const __CFArray *)CFDictionaryGetValue(v53, v214);
                        CFTypeID v56 = CFArrayGetTypeID();
                        if (v55)
                        {
                          if (CFGetTypeID(v55) == v56)
                          {
                            if (CFArrayGetCount(v55))
                            {
                              uint64_t v57 = CFDictionaryGetValue(v53, v206);
                              if (v57)
                              {
                                uint64_t v58 = v57;
                                if (!CFEqual(v57, @"*")
                                  && !CFDictionaryContainsKey(v53, v205)
                                  && !CFSetContainsValue(v207, v58))
                                {
                                  CFSetSetValue(v207, v58);
                                  if (_SC_cfstring_to_cstring(v58, &v219, 16LL, 1536LL))
                                  {
                                    if (sub_100028D68((uint64_t)&v219))
                                    {
                                      CFStringRef v59 = CFDictionaryCreateMutableCopy(0LL, 0LL, v53);
                                      uint64_t v60 = sub_100023A54(v59, 0LL);
                                      if (v60)
                                      {
                                        uint64_t v61 = v60;
                                        CFDictionarySetValue(v59, v204, v60);
                                        CFRelease(v61);
                                      }

                                      int v62 = sub_100023528(v51, 0LL);
                                      if (v62)
                                      {
                                        sub_10002288C(v59, v62 | 0x1000);
                                        CFDictionaryRemoveValue(v59, v203);
                                        CFDictionaryRemoveValue(v59, v202);
                                        sub_100023690(v59, (uint64_t)"Scoped", v50, 0LL);
                                        sub_10002373C(v215, v59);
                                        sub_100021B30(v215, v201, v208, (unint64_t)v58, v51);
                                      }

                                      CFRelease(v59);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }

                ++v49;
              }

              while (v43 != v49);
            }

            CFRelease(v207);
            CFRelease(v45);
            uint64_t v39 = v201;
            goto LABEL_73;
          }
        }

        else
        {
          int v46 = (const void **)CFAllocatorAllocate(0LL, 8 * v41, 0LL);
          CFDictionaryGetKeysAndValues(v201, v46, 0LL);
        }

        for (uint64_t i = 0LL; i != v41; ++i)
        {
          int v48 = v46[i];
          v225.location = 0LL;
          v225.length = v43;
          if (!CFArrayContainsValue(v45, v225, v48))
          {
            CFArrayAppendValue(v45, v48);
            ++v43;
          }
        }

        goto LABEL_50;
      }
    }
  }

LABEL_73:
  uint64_t v63 = v215;
  sub_1000221C0(v215, v39);
  uint64_t v64 = CFArrayGetCount(v215);
  if (v64 < 2)
  {
    int v66 = (int)v210;
  }

  else
  {
    v226.location = 0LL;
    v226.length = v64;
    CFArraySortValues(v215, v226, (CFComparatorFunction)sub_1000225C0, 0LL);
    unint64_t v65 = v64 + 1;
    int v66 = (int)v210;
    do
    {
      uint64_t v67 = (const __CFDictionary *)CFArrayGetValueAtIndex(v215, v65 - 2);
      if (!CFDictionaryContainsKey(v67, kSCPropNetDNSDomainName)
        && !CFDictionaryContainsKey(v67, kSCPropNetDNSSearchDomains)
        && !CFDictionaryContainsKey(v67, kSCPropNetDNSServerAddresses))
      {
        CFArrayRemoveValueAtIndex(v215, v65 - 2);
        --v64;
      }

      --v65;
    }

    while (v65 > 2);
  }

  CFStringRef v68 = (const __CFDictionary *)CFArrayGetValueAtIndex(v215, 0LL);
  uint64_t v69 = CFDictionaryCreateMutableCopy(0LL, 0LL, v68);
  uint64_t v70 = v69;
  if (v209)
  {
    CFDictionarySetValue(v69, kSCPropNetDNSSearchDomains, v209);
    CFRelease(v209);
  }

  if (v64 > 1) {
    int v71 = v66;
  }
  else {
    int v71 = 0;
  }
  if (v71 == 1)
  {
    CFStringRef v72 = (const __CFDictionary *)CFArrayGetValueAtIndex(v215, 1LL);
    if (CFDictionaryContainsKey(v72, kSCPropNetDNSDomainName)
      || v72
      && CFDictionaryGetValueIfPresent(v72, @"__FLAGS__", (const void **)&v223)
      && (void)v223
      && CFNumberGetValue((CFNumberRef)v223, kCFNumberSInt32Type, &v219)
      && (v219 & 0x1000) != 0)
    {
      CFDictionaryRemoveValue(v70, v212);
    }
  }

  CFArraySetValueAtIndex(v215, 0LL, v70);
  CFRelease(v70);
  if (v64 < 2) {
    int v73 = (int)v213;
  }
  else {
    int v73 = 0;
  }
  if (v73 == 1)
  {
    v217 = 0LL;
    goto LABEL_208;
  }

  unsigned int v216 = 0;
  v217 = sub_100025228();
  if (v64 >= 1)
  {
    CFIndex v74 = 0LL;
    LODWORD(v213) = 0;
    v209 = kSCPropNetDNSDomainName;
    v208 = (const __CFArray *)kSCPropNetDNSSearchDomains;
    v207 = (__CFSet *)kSCPropNetDNSServerAddresses;
    CFStringRef v206 = kSCPropNetDNSSortList;
    v200 = (in_addr *)&v219 + 1;
    CFStringRef v205 = kSCPropNetDNSServerPort;
    CFStringRef v203 = kSCPropNetDNSOptions;
    CFStringRef v204 = kSCPropNetDNSServerTimeout;
    CFStringRef v202 = (CFStringRef)kSCPropNetDNSServiceIdentifier;
    CFDictionaryRef v210 = (CFDictionaryRef)v64;
    while (1)
    {
      int v75 = (const __CFDictionary *)CFArrayGetValueAtIndex(v63, v74);
      os_log_t v76 = v75;
      if (v75
        && CFDictionaryGetValueIfPresent(v75, @"__FLAGS__", (const void **)&v223)
        && (void)v223
        && CFNumberGetValue((CFNumberRef)v223, kCFNumberSInt32Type, &v219)
        && ((~(_DWORD)v219 & 6) == 0 || (v219 & 0x3000) != 0))
      {
        char v77 = 1;
      }

      else
      {
        if (!(_DWORD)v213) {
          CFDictionaryApplyFunction(v201, (CFDictionaryApplierFunction)sub_10002281C, &v216);
        }
        os_log_t v76 = CFDictionaryCreateMutableCopy(0LL, 0LL, v76);
        sub_10002288C(v76, v216);
        char v77 = 0;
        LODWORD(v213) = 1;
      }

      if (v211 && !v74) {
        CFTypeRef *v211 = CFRetain(v76);
      }
      v218 = sub_10002589C();
      uint64_t v78 = (const __CFString *)CFDictionaryGetValue(v76, v209);
      CFTypeID v79 = CFStringGetTypeID();
      if (v78
        && CFGetTypeID(v78) == v79
        && CFStringGetLength(v78) >= 1
        && _SC_cfstring_to_cstring(v78, &v223, 1025LL, 134217984LL))
      {
        sub_100025CA4((void **)&v218, (char *)&v223);
      }

      os_log_t v80 = (const __CFArray *)CFDictionaryGetValue(v76, v208);
      CFTypeID v81 = CFArrayGetTypeID();
      if (v80)
      {
        if (CFGetTypeID(v80) == v81)
        {
          CFIndex v82 = CFArrayGetCount(v80);
          if (v82 >= 1)
          {
            CFIndex v83 = v82;
            for (CFIndex j = 0LL; j != v83; ++j)
            {
              uint64_t v85 = (const __CFString *)CFArrayGetValueAtIndex(v80, j);
              CFTypeID v86 = CFStringGetTypeID();
              if (v85
                && CFGetTypeID(v85) == v86
                && CFStringGetLength(v85) >= 1
                && _SC_cfstring_to_cstring(v85, &v223, 1025LL, 134217984LL))
              {
                sub_100025B4C((void **)&v218, (char *)&v223);
              }
            }
          }
        }
      }

      uint64_t v87 = CFDictionaryGetValue(v76, @"__IF_INDEX__");
      CFTypeID v88 = CFNumberGetTypeID();
      if (v87 && CFGetTypeID(v87) == v88 && CFNumberGetValue((CFNumberRef)v87, kCFNumberIntType, &v219))
      {
        if ((_DWORD)v219)
        {
          os_log_t v89 = (char *)sub_100028BF4(v219, (uint64_t)&v223);
          if (v89)
          {
            CFStringRef v214 = CFStringCreateWithCString(0LL, v89, 0x600u);
            unsigned int v90 = v219;
            int v91 = v219;
          }

          else
          {
            int v91 = 0;
            CFStringRef v214 = 0LL;
            unsigned int v90 = v219;
          }
        }

        else
        {
          unsigned int v90 = 0;
          os_log_t v89 = 0LL;
          int v91 = 0;
          CFStringRef v214 = 0LL;
        }

        sub_100025D10((void **)&v218, v90, v89);
      }

      else
      {
        int v91 = 0;
        CFStringRef v214 = 0LL;
      }

      os_log_t v92 = CFDictionaryGetValue(v76, @"__FLAGS__");
      CFTypeID v93 = CFNumberGetTypeID();
      if (v92 && CFGetTypeID(v92) == v93 && CFNumberGetValue((CFNumberRef)v92, kCFNumberSInt32Type, &v223)) {
        sub_100025AFC((uint64_t)&v218, v223);
      }
      uint64_t v94 = (const __CFArray *)CFDictionaryGetValue(v76, v207);
      CFTypeID v95 = CFArrayGetTypeID();
      if (v94)
      {
        if (CFGetTypeID(v94) == v95)
        {
          CFIndex v96 = CFArrayGetCount(v94);
          if (v96 >= 1)
          {
            CFIndex v97 = v96;
            for (CFIndex k = 0LL; k != v97; ++k)
            {
              uint64_t v99 = CFArrayGetValueAtIndex(v94, k);
              CFTypeID v100 = CFStringGetTypeID();
              if (v99
                && CFGetTypeID(v99) == v100
                && _SC_cfstring_to_cstring(v99, &v223, 64LL, 1536LL)
                && _SC_string_to_sockaddr(&v223, 0LL, &v219, 28LL))
              {
                if (BYTE1(v219) == 30 && v220 == 254 && (v221 & 0xC0) == 0x80 && !v222 && v91) {
                  int v222 = v91;
                }
                sub_1000258E8((void **)&v218, (unsigned __int8 *)&v219);
              }
            }
          }
        }
      }

      uint64_t v101 = CFDictionaryGetValue(v76, v212);
      CFTypeID v102 = CFNumberGetTypeID();
      if (v101 && CFGetTypeID(v101) == v102 && CFNumberGetValue((CFNumberRef)v101, kCFNumberSInt32Type, &v223)) {
        sub_100025E20((uint64_t)&v218, v223);
      }
      int v103 = (const __CFArray *)CFDictionaryGetValue(v76, v206);
      CFTypeID v104 = CFArrayGetTypeID();
      if (v103)
      {
        if (CFGetTypeID(v103) == v104)
        {
          CFIndex v105 = CFArrayGetCount(v103);
          if (v105 >= 1) {
            break;
          }
        }
      }

LABEL_176:
      os_log_t v114 = CFDictionaryGetValue(v76, v205);
      CFTypeID v115 = CFNumberGetTypeID();
      uint64_t v63 = v215;
      if (v114 && CFGetTypeID(v114) == v115 && CFNumberGetValue((CFNumberRef)v114, kCFNumberIntType, &v223)) {
        sub_100025E70((uint64_t)&v218, (unsigned __int16)v223);
      }
      uint64_t v116 = CFDictionaryGetValue(v76, v204);
      CFTypeID v117 = CFNumberGetTypeID();
      if (v116 && CFGetTypeID(v116) == v117 && CFNumberGetValue((CFNumberRef)v116, kCFNumberIntType, &v223)) {
        sub_100025EC0((uint64_t)&v218, v223);
      }
      v118 = CFDictionaryGetValue(v76, v203);
      CFTypeID v119 = CFStringGetTypeID();
      if (v118)
      {
        if (CFGetTypeID(v118) == v119)
        {
          v120 = (char *)_SC_cfstring_to_cstring(v118, 0LL, 0LL, 134217984LL);
          if (v120)
          {
            v121 = v120;
            sub_100025DB4((void **)&v218, v120);
            CFAllocatorDeallocate(0LL, v121);
          }
        }
      }

      int v122 = CFDictionaryGetValue(v76, v202);
      CFTypeID v123 = CFNumberGetTypeID();
      if (v122 && CFGetTypeID(v122) == v123 && CFNumberGetValue((CFNumberRef)v122, kCFNumberIntType, &v223)) {
        sub_100025F10((uint64_t)&v218, v223);
      }
      v124 = (const __CFString *)CFDictionaryGetValue(v76, @"__CONFIGURATION_ID__");
      CFTypeID v125 = CFStringGetTypeID();
      if (v124)
      {
        if (CFGetTypeID(v124) == v125 && CFStringGetLength(v124) >= 1)
        {
          v126 = (char *)_SC_cfstring_to_cstring(v124, 0LL, 0LL, 134217984LL);
          if (v126)
          {
            v127 = v126;
            sub_100025C38((void **)&v218, v126);
            CFAllocatorDeallocate(0LL, v127);
          }
        }
      }

      if (v214) {
        CFRelease(v214);
      }
      *(void *)&__int128 v223 = v218;
      sub_10002529C((void **)&v217, v218);
      sub_100025840((void **)&v223);
      if ((v77 & 1) == 0) {
        CFRelease(v76);
      }
      if ((CFDictionaryRef)++v74 == v210) {
        goto LABEL_207;
      }
    }

    CFIndex v106 = v105;
    CFIndex v107 = 0LL;
    while (1)
    {
      v108 = CFArrayGetValueAtIndex(v103, v107);
      CFTypeID v109 = CFStringGetTypeID();
      if (!v108 || CFGetTypeID(v108) != v109 || !_SC_cfstring_to_cstring(v108, &v223, 128LL, 1536LL)) {
        goto LABEL_175;
      }
      uint64_t v110 = strchr((const char *)&v223, 47);
      if (v110) {
        break;
      }
      uint64_t v219 = 0LL;
      if (inet_aton((const char *)&v223, (in_addr *)&v219) == 1)
      {
        unsigned int v112 = bswap32(v219);
        if ((v112 & 0x80000000) == 0)
        {
          unsigned int v113 = -16777216;
          goto LABEL_173;
        }

        if (v112 >> 30 == 2)
        {
          unsigned int v113 = -65536;
          goto LABEL_173;
        }

        if (v112 >> 29 == 6)
        {
          unsigned int v113 = -256;
LABEL_173:
          HIDWORD(v219) = bswap32(v113);
LABEL_174:
          sub_100025BD0((void **)&v218, &v219);
        }
      }

LABEL_175:
      if (v106 == ++v107) {
        goto LABEL_176;
      }
    }

    v111 = v110;
    *uint64_t v110 = 0;
    uint64_t v219 = 0LL;
    goto LABEL_174;
  }

LABEL_207:
  sub_100025F60(v216);
  sub_100025FAC((void **)&v217);
LABEL_208:
  sub_100025764((uint64_t *)&v217, (unsigned __int8 *)&v223, 0x20uLL);
  if ((void)v223 == (void)xmmword_100079BB0
    && *((void *)&v223 + 1) == *((void *)&xmmword_100079BB0 + 1)
    && (void)v224 == qword_100079BC0
    && *((void *)&v224 + 1) == unk_100079BC8)
  {
    uint64_t v188 = 0LL;
  }

  else
  {
    xmmword_100079BB0 = v223;
    *(_OWORD *)&qword_100079BC0 = v224;
    os_log_t v131 = sub_10002E39C();
    uint64_t v132 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v131, v132))
    {
      uint64_t v133 = _os_log_pack_size(2LL);
      v134 = (char *)&v200 - ((__chkstk_darwin(v133) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v135 = __error();
      *(_WORD *)_os_log_pack_fill(v134, v133, *v135, &_mh_execute_header, "Updating DNS configuration") = 0;
      __SC_log_send(6LL, v131, v132, v134);
    }

    if (v217)
    {
      v136 = sub_100022978(v217, bswap32(v217[12]) + 56LL);
      if (v136)
      {
        v137 = v136;
        unsigned int v138 = *((_DWORD *)v136 + 12);
        unsigned int v139 = bswap32(*((_DWORD *)v136 + 13));
        unsigned int v140 = bswap32(*(_DWORD *)v136);
        *(_DWORD *)v136 = v140;
        if (v139 >= 8 * v140)
        {
          unsigned int v141 = bswap32(v138);
          unsigned int v142 = 8 * v140;
          uint64_t v143 = 8 * v140 ? (uint64_t)&v136[v141 + 56] : 0LL;
          unsigned int v144 = v139 - v142;
          *(void *)(v136 + 4) = v143;
          unsigned int v145 = bswap32(*((_DWORD *)v136 + 3));
          *((_DWORD *)v136 + 3) = v145;
          if (v144 >= 8 * v145)
          {
            unsigned int v146 = 8 * v145;
            uint64_t v147 = (uint64_t)&v136[v141 + 56 + v142];
            uint64_t v148 = v146 ? v147 : 0LL;
            unsigned int v149 = v144 - v146;
            *((void *)v136 + pthread_attr_setdetachstate(&v4, 2) = v148;
            unsigned int v150 = bswap32(*((_DWORD *)v136 + 8));
            *((_DWORD *)v136 + 8) = v150;
            if (v149 >= 8 * v150)
            {
              unsigned int v151 = 8 * v150;
              uint64_t v152 = v147 + v146;
              if (8 * v150) {
                uint64_t v153 = v147 + v146;
              }
              else {
                uint64_t v153 = 0LL;
              }
              *(void *)(v136 + 36) = v153;
              if (v141 >= 8)
              {
                int v154 = 0;
                int v155 = 0;
                int v156 = 0;
                v157 = v136 + 56;
                unsigned int v158 = v149 - v151;
                uint64_t v159 = v152 + v151;
                while (1)
                {
                  unsigned int v160 = bswap32(*((_DWORD *)v157 + 1));
                  unsigned int v161 = bswap32(*(_DWORD *)v157);
                  if (v161 - 1 <= 2)
                  {
                    if (v160 - 8 < 0x64) {
                      goto LABEL_296;
                    }
                    *((void *)v157 + pthread_attr_setscope(&v4, 1) = 0LL;
                    unsigned int v162 = bswap32(*((_DWORD *)v157 + 4));
                    *((_DWORD *)v157 + 4) = v162;
                    if (v158 < 8 * v162) {
                      goto LABEL_296;
                    }
                    unsigned int v163 = 8 * v162;
                    uint64_t v164 = 8 * v162 ? v159 : 0LL;
                    unsigned int v165 = v158 - v163;
                    *(void *)(v157 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v164;
                    *((_WORD *)v157 + 14) = bswap32(*((unsigned __int16 *)v157 + 14)) >> 16;
                    unsigned int v166 = bswap32(*((_DWORD *)v157 + 8));
                    *((_DWORD *)v157 + 8) = v166;
                    if (v165 < 8 * v166) {
                      goto LABEL_296;
                    }
                    unsigned int v167 = 8 * v166;
                    uint64_t v168 = v159 + v163;
                    uint64_t v169 = 8 * v166 ? v168 : 0LL;
                    unsigned int v170 = v165 - v167;
                    *(void *)(v157 + 36) = v169;
                    unsigned int v171 = bswap32(*((_DWORD *)v157 + 11));
                    *((_DWORD *)v157 + 1pthread_attr_setscope(&v4, 1) = v171;
                    if (v170 < 8 * v171) {
                      goto LABEL_296;
                    }
                    unsigned int v172 = 8 * v171;
                    uint64_t v173 = v168 + v167;
                    uint64_t v174 = 8 * v171 ? v173 : 0LL;
                    *((void *)v157 + 6) = v174;
                    *((void *)v157 + 7) = 0LL;
                    *((int8x16_t *)v157 + 4) = vrev32q_s8(*((int8x16_t *)v157 + 4));
                    *((int8x8_t *)v157 + 1sub_10000F430((uint64_t)__str, 0) = vrev32_s8(*(int8x8_t *)(v157 + 80));
                    unsigned int v175 = v160 - 108;
                    if (v160 - 108 != bswap32(*((_DWORD *)v157 + 26))) {
                      goto LABEL_296;
                    }
                    v176 = v157 + 8;
                    if (v175 < 8)
                    {
                      int v179 = 0;
                      int v178 = 0;
                      int v177 = 0;
                    }

                    else
                    {
                      int v177 = 0;
                      int v178 = 0;
                      int v179 = 0;
                      v180 = (unsigned int *)(v157 + 108);
                      do
                      {
                        unsigned int v181 = v180[1];
                        switch(bswap32(*v180))
                        {
                          case 0xAu:
                            void *v176 = v180 + 2;
                            break;
                          case 0xBu:
                            uint64_t v182 = *(void *)(v157 + 20);
                            if (!v182) {
                              goto LABEL_296;
                            }
                            *(void *)(v182 + 8LL * v179++) = v180 + 2;
                            break;
                          case 0xCu:
                            uint64_t v183 = *(void *)(v157 + 36);
                            if (!v183) {
                              goto LABEL_296;
                            }
                            *(void *)(v183 + 8LL * v178++) = v180 + 2;
                            break;
                          case 0xDu:
                            uint64_t v184 = *((void *)v157 + 6);
                            if (!v184) {
                              goto LABEL_296;
                            }
                            *(void *)(v184 + 8LL * v177++) = v180 + 2;
                            break;
                          case 0xEu:
                            *((void *)v157 + 7) = v180 + 2;
                            break;
                          case 0xFu:
                            *((void *)v157 + 1pthread_attr_setscope(&v4, 1) = v180 + 2;
                            break;
                          case 0x10u:
                            *((void *)v157 + 1pthread_attr_setdetachstate(&v4, 2) = v180 + 2;
                            break;
                          default:
                            break;
                        }

                        unsigned int v185 = bswap32(v181);
                        v180 = (unsigned int *)((char *)v180 + v185);
                        v175 -= v185;
                      }

                      while (v175 > 7);
                    }

                    if (v179 != v162 || v178 != v166 || v177 != v171) {
                      goto LABEL_296;
                    }
                    uint64_t v159 = v173 + v172;
                    unsigned int v158 = v170 - v172;
                    switch(v161)
                    {
                      case 3u:
                        uint64_t v186 = *(void *)(v137 + 36);
                        if (!v186) {
                          goto LABEL_296;
                        }
                        int v187 = v154++;
                        goto LABEL_279;
                      case 2u:
                        uint64_t v186 = *((void *)v137 + 2);
                        if (!v186) {
                          goto LABEL_296;
                        }
                        int v187 = v155++;
                        goto LABEL_279;
                      case 1u:
                        uint64_t v186 = *(void *)(v137 + 4);
                        if (!v186) {
                          goto LABEL_296;
                        }
                        int v187 = v156++;
LABEL_279:
                        *(void *)(v186 + 8LL * v187) = v176;
                        break;
                    }
                  }

                  v157 += v160;
                  v141 -= v160;
                  if (v141 <= 7)
                  {
                    unsigned int v140 = *(_DWORD *)v137;
                    goto LABEL_292;
                  }
                }
              }

              int v156 = 0;
              int v155 = 0;
              int v154 = 0;
LABEL_292:
              if (v156 == v140 && v155 == *((_DWORD *)v137 + 3) && v154 == *((_DWORD *)v137 + 8)) {
                sub_100022C64((int *)v137);
              }
            }
          }
        }

LABEL_296:
        free(v137);
      }
    }

    else
    {
      os_log_t v189 = sub_10002E39C();
      uint64_t v190 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v189, v190))
      {
        uint64_t v191 = _os_log_pack_size(2LL);
        v192 = (char *)&v200 - ((__chkstk_darwin(v191) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        v193 = __error();
        *(_WORD *)_os_log_pack_fill(v192, v191, *v193, &_mh_execute_header, "*** No DNS configuration") = 0;
        __SC_log_send(6LL, v189, v190, v192);
      }
    }

    if ((sub_1000270DC((CFDataRef *)&v217) & 1) != 0
      || (os_log_t v194 = sub_10002E39C(), v195 = _SC_syslog_os_log_mapping(3LL),
                                  !__SC_log_enabled(3LL, v194, v195)))
    {
      uint64_t v188 = 1LL;
    }

    else
    {
      uint64_t v196 = _os_log_pack_size(2LL);
      v197 = (char *)&v200 - ((__chkstk_darwin(v196) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v198 = __error();
      *(_WORD *)_os_log_pack_fill(v197, v196, *v198, &_mh_execute_header, "could not store configuration") = 0;
      __SC_log_send(3LL, v194, v195, v197);
      uint64_t v188 = 1LL;
    }
  }

  if (v217) {
    sub_100025840((void **)&v217);
  }
  CFRelease(v63);
  return v188;
}

void sub_100021B30( const __CFArray *a1, const __CFDictionary *a2, const __CFArray *a3, unint64_t a4, const __CFDictionary *a5)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      CFIndex Count = CFDictionaryGetCount(a2);
      if (Count)
      {
        uint64_t v12 = Count;
        os_log_t v53 = a1;
        if (Count < 33)
        {
          CFIndex v13 = (const void **)v61;
          CFIndex v14 = (const void **)&v60;
        }

        else
        {
          CFIndex v13 = (const void **)CFAllocatorAllocate(0LL, 8 * Count, 0LL);
          CFIndex v14 = (const void **)CFAllocatorAllocate(0LL, 8 * v12, 0LL);
        }

        CFTypeID v15 = CFArrayGetTypeID();
        unint64_t cf2 = a4;
        CFTypeID v52 = a5;
        CFArrayRef theArray = a3;
        if (a3 && CFGetTypeID(a3) == v15) {
          uint64_t range = CFArrayGetCount(a3);
        }
        else {
          uint64_t range = 0LL;
        }
        CFDictionaryGetKeysAndValues(a2, v13, v14);
        if (v12 >= 1)
        {
          uint64_t v16 = 0LL;
          CFStringRef v17 = kSCEntNetDNS;
          if (a4) {
            uint64_t v18 = "Supplemental/Scoped";
          }
          else {
            uint64_t v18 = "Supplemental";
          }
          uint64_t v49 = (uint64_t)v18;
          while (1)
          {
            uint64_t v19 = v14[v16];
            CFNumberRef v20 = (const __CFString *)v13[v16];
            CFTypeID v21 = CFDictionaryGetTypeID();
            if (!v19) {
              goto LABEL_73;
            }
            if (CFGetTypeID(v19) != v21) {
              goto LABEL_73;
            }
            CFTypeID v22 = CFDictionaryGetValue((CFDictionaryRef)v19, v17);
            CFTypeID v23 = CFDictionaryGetTypeID();
            if (!v22 || CFGetTypeID(v22) != v23) {
              goto LABEL_73;
            }
            unint64_t v24 = (unint64_t)CFDictionaryGetValue((CFDictionaryRef)v22, kSCPropInterfaceName);
            if (cf2)
            {
              if (CFDictionaryContainsKey((CFDictionaryRef)v19, kSCEntNetIPv4)
                || CFDictionaryContainsKey((CFDictionaryRef)v19, kSCEntNetIPv6)
                || (__CFString *)v24 != @"*"
                && (!v24
                 || !CFEqual((CFTypeRef)v24, @"*") && v24 != cf2 && !CFEqual((CFTypeRef)v24, (CFTypeRef)cf2)))
              {
                goto LABEL_73;
              }

              int v25 = sub_100023528(v52, 0LL);
              if (!v25) {
                goto LABEL_73;
              }
            }

            else
            {
              int v25 = 0;
            }

            int theDict = v25;
            int v26 = 200 * v16 + 100000;
            v27.length = range;
            if (range >= 1)
            {
              v27.location = 0LL;
              int v28 = CFArrayContainsValue(theArray, v27, v13[v16]);
              int v29 = 200 * v12;
              if (v28) {
                int v29 = 0;
              }
              v26 += v29;
            }

            int v55 = v26;
            if (!(cf2 | v24)) {
              break;
            }
            MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)v22);
            CFIndex v30 = MutableCopy;
            if (cf2)
            {
              CFDictionarySetValue(MutableCopy, kSCPropInterfaceName, (const void *)cf2);
              int v32 = theDict | 0x5000;
            }

            else
            {
              if (!v24
                || !CFDictionaryGetValueIfPresent( (CFDictionaryRef)v22,  @"__SCOPED_QUERY__",  (const void **)&value)
                || (v33 = value, CFTypeID v34 = CFBooleanGetTypeID(), !v33)
                || CFGetTypeID(v33) != v34
                || !CFBooleanGetValue((CFBooleanRef)value))
              {
                CFDictionaryRemoveValue(v30, kSCPropInterfaceName);
                goto LABEL_46;
              }

              int v32 = sub_100023528((CFDictionaryRef)v19, 0LL) | 0x4000;
            }

LABEL_70:
                              CFDictionaryRemoveValue(v44, kSCPropNetDNSSupplementalMatchDomains);
                              CFDictionaryRemoveValue(v44, kSCPropNetDNSSupplementalMatchOrders);
                              CFDictionaryRemoveValue(v44, kSCPropNetDNSSearchDomains);
                              CFDictionaryRemoveValue(v44, kSCPropNetDNSSortList);
                              sub_100023690(v44, v49, v20, v41);
                              sub_10002373C(v53, v44);
                              CFRelease(v44);
LABEL_71:
                              ++v41;
                              CFIndex v30 = theDicta;
                              if (v56 == v41) {
                                break;
                              }
                              continue;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            CFRelease(v30);
            CFStringRef v17 = kSCEntNetDNS;
LABEL_73:
            if (++v16 == v12) {
              goto LABEL_74;
            }
          }

          CFIndex v30 = (__CFDictionary *)CFRetain(v22);
LABEL_46:
          int v32 = 0x4000;
          goto LABEL_47;
        }

        ++v8;
        uint64_t v9 = kSCNetworkInterfaceTypeIEEE80211;
        if (v8 == v7) {
          goto LABEL_80;
        }
      }

      uint64_t v16 = CFStringCreateWithFormat( 0LL,  0LL,  @"%@%@/%@/%@/%@/%@",  &stru_100073D90,  kSCDynamicStoreDomainSetup,  kSCCompNetwork,  @"Override",  @"InterfaceType",  v9);
      CFStringRef v17 = SCDynamicStoreCopyValue(v3, v16);
      CFRelease(v16);
      uint64_t v18 = CFDictionaryGetTypeID();
      if (!v17)
      {
        sub_100054240(0);
        sub_1000544A8();
        goto LABEL_70;
      }

      if (CFGetTypeID(v17) != v18) {
        goto LABEL_19;
      }
      uint64_t v19 = CFDictionaryGetValue((CFDictionaryRef)v17, @"Expiration");
      CFNumberRef v20 = CFDateGetTypeID();
      if (!v19)
      {
LABEL_20:
        LODWORD(v24) = 0;
        goto LABEL_21;
      }

      if (CFGetTypeID(v19) != v20
        || (CFRunLoopRef Current = CFAbsoluteTimeGetCurrent(),
            CFTypeID v22 = CFDateCreate(0LL, Current),
            CFTypeID v23 = CFDateCompare(v22, (CFDateRef)v19, 0LL),
            CFRelease(v22),
            v23 != kCFCompareLessThan))
      {
LABEL_19:
        uint64_t v19 = 0LL;
        goto LABEL_20;
      }

      unint64_t v24 = CFDictionaryGetValue((CFDictionaryRef)v17, @"Cost");
      int v48 = CFStringGetTypeID();
      if (v24)
      {
        if (CFGetTypeID(v24) != v48) {
          goto LABEL_19;
        }
        if (CFEqual(v24, @"Expensive"))
        {
          LODWORD(v24) = 2;
        }

        else
        {
          if (!CFEqual(v24, @"Inexpensive")) {
            goto LABEL_19;
          }
          LODWORD(v24) = 1;
        }

        uint64_t v19 = CFRetain(v19);
      }

      else
      {
        uint64_t v19 = 0LL;
      }

LABEL_74:
        if (v13 != (const void **)v61)
        {
          CFAllocatorDeallocate(0LL, v13);
          CFAllocatorDeallocate(0LL, v14);
        }
      }
    }
  }

            ++v45;
            int v48 = (_DWORD *)((char *)v48 + v28);
            CFMutableArrayRef v44 = *v19;
            if (v45 >= v44)
            {
              int v25 = v128;
              goto LABEL_89;
            }

            continue;
          }
        }

void sub_1000221C0(const __CFArray *a1, const __CFDictionary *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      CFIndex Count = CFDictionaryGetCount(a2);
      if (Count)
      {
        uint64_t v6 = Count;
        if (Count < 33)
        {
          __int128 v7 = (const __CFString **)v37;
          uint64_t v8 = (CFDictionaryRef *)&v36;
        }

        else
        {
          __int128 v7 = (const __CFString **)CFAllocatorAllocate(kCFAllocatorDefault, 8 * Count, 0LL);
          uint64_t v8 = (CFDictionaryRef *)CFAllocatorAllocate(kCFAllocatorDefault, 8 * v6, 0LL);
        }

        int v32 = v8;
        uint64_t v33 = v7;
        CFDictionaryGetKeysAndValues(a2, (const void **)v7, (const void **)v8);
        CFSetRef Mutable = CFSetCreateMutable(0LL, 0LL, &kCFTypeSetCallBacks);
        if (v6 >= 1)
        {
          uint64_t v35 = (const void *)kSCPropNetDNSServiceIdentifier;
          CFStringRef v27 = kSCPropNetDNSSearchDomains;
          CFStringRef v29 = kSCPropNetDNSSupplementalMatchOrders;
          CFStringRef v30 = kSCPropNetDNSSupplementalMatchDomains;
          CFStringRef v28 = kSCPropInterfaceName;
          CFBooleanRef v26 = kCFBooleanTrue;
          os_log_t v10 = v32;
          uint64_t v9 = v33;
          CFIndex v31 = a1;
          do
          {
            uint64_t v11 = *v9;
            CFPropertyListRef Value = (const __CFDictionary *)CFDictionaryGetValue(*v10, kSCEntNetDNS);
            CFTypeID v13 = CFDictionaryGetTypeID();
            if (Value)
            {
              if (CFGetTypeID(Value) == v13)
              {
                CFIndex v14 = CFDictionaryGetValue(Value, v35);
                CFTypeID v15 = CFNumberGetTypeID();
                if (v14)
                {
                  if (CFGetTypeID(v14) == v15)
                  {
                    uint64_t v16 = Mutable;
                    if (CFSetContainsValue(Mutable, v14))
                    {
                      os_log_t v17 = sub_10002E39C();
                      uint64_t v18 = _SC_syslog_os_log_mapping(3LL);
                      if (__SC_log_enabled(3LL, v17, v18))
                      {
                        uint64_t v19 = _os_log_pack_size(2LL);
                        CFNumberRef v20 = (char *)&v26 - ((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                        CFTypeID v21 = __error();
                        *(_WORD *)_os_log_pack_fill( v20,  v19,  *v21,  &_mh_execute_header,  "add_service_specific_resolvers: got a resolver with a duplicate service identifier, skipping") = 0;
                        __SC_log_send(3LL, v17, v18, v20);
                        a1 = v31;
                      }
                    }

                    else
                    {
                      CFSetSetValue(v16, v14);
                      MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
                      CFTypeID v23 = sub_100023A54(MutableCopy, 0LL);
                      if (v23)
                      {
                        unint64_t v24 = v23;
                        CFDictionarySetValue(MutableCopy, v27, v23);
                        CFRelease(v24);
                      }

                      CFDictionaryRemoveValue(MutableCopy, v30);
                      CFDictionaryRemoveValue(MutableCopy, v29);
                      if (CFDictionaryContainsKey(MutableCopy, v28))
                      {
                        CFDictionarySetValue(MutableCopy, @"__SCOPED_QUERY__", v26);
                        int v25 = CFDictionaryCreateMutableCopy(0LL, 0LL, MutableCopy);
                        sub_10002288C(v25, 4102);
                        CFDictionaryRemoveValue(v25, v35);
                        sub_100023690(v25, (uint64_t)"Service", v11, 0LL);
                        sub_10002373C(a1, v25);
                        CFRelease(v25);
                      }

                      sub_10002288C(MutableCopy, 8198);
                      sub_100023690(MutableCopy, (uint64_t)"Service", v11, 0LL);
                      sub_10002373C(a1, MutableCopy);
                      CFRelease(MutableCopy);
                    }
                  }
                }
              }
            }

            ++v9;
            ++v10;
            --v6;
          }

          while (v6);
        }

        CFRelease(Mutable);
        if (v33 != (const __CFString **)v37)
        {
          CFAllocatorDeallocate(kCFAllocatorDefault, v33);
          CFAllocatorDeallocate(kCFAllocatorDefault, v32);
        }
      }
    }
  }

uint64_t sub_1000225C0(const __CFDictionary *a1, const __CFDictionary *a2)
{
  os_log_t v4 = (const __CFString *)CFDictionaryGetValue(a1, kSCPropNetDNSDomainName);
  __int128 v5 = (const __CFString *)CFDictionaryGetValue(a2, kSCPropNetDNSDomainName);
  if (!v4) {
    return -1LL;
  }
  uint64_t v6 = v5;
  if (!v5) {
    return 1LL;
  }
  if (a1
    && CFDictionaryGetValueIfPresent(a1, @"__FLAGS__", (const void **)&value)
    && value
    && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)
    && (v21 & 0x10) != 0)
  {
    uint64_t v8 = 1LL;
    int v7 = 1;
    if (!a2) {
      goto LABEL_17;
    }
  }

  else
  {
    int v7 = 0;
    uint64_t v8 = -1LL;
    if (!a2) {
      goto LABEL_17;
    }
  }

  if (CFDictionaryGetValueIfPresent(a2, @"__FLAGS__", (const void **)&value)
    && value
    && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)
    && (v21 & 0x10) != 0)
  {
    int v9 = 1;
    goto LABEL_18;
  }

LABEL_17:
  int v9 = 0;
LABEL_18:
  if (v7 == v9)
  {
    int HasSuffix = CFStringHasSuffix(v4, @".arpa");
    if (HasSuffix == CFStringHasSuffix(v6, @".arpa"))
    {
      ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, v4, @".");
      CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
      CFTypeID v13 = CFStringCreateArrayBySeparatingStrings(0LL, v6, @".");
      CFIndex v14 = CFArrayGetCount(v13);
      while (Count >= 1)
      {
        CFIndex v15 = v14 - 1;
        if (v14 < 1) {
          break;
        }
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, Count - 1);
        os_log_t v17 = (const __CFString *)CFArrayGetValueAtIndex(v13, v15);
        uint64_t v8 = CFStringCompare(ValueAtIndex, v17, 1uLL);
        CFIndex v14 = v15;
        --Count;
        if (v8) {
          goto LABEL_33;
        }
      }

      if (Count <= v14)
      {
        if (Count < v14) {
          uint64_t v8 = 1LL;
        }
        else {
          uint64_t v8 = sub_100023EE8(a1, a2);
        }
      }

      else
      {
        uint64_t v8 = -1LL;
      }

  if (!MutableCopy) {
    goto LABEL_50;
  }
  uint64_t v18 = CFArrayGetCount(MutableCopy);
  uint64_t v19 = v18;
  if (v18 < 2)
  {
    if (v18 != 1) {
      goto LABEL_50;
    }
    CFTypeID v37 = 0LL;
    CFTypeID v38 = a1;
  }

  else
  {
    CFTypeID v38 = a1;
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0LL, 0LL, MutableCopy);
    v43.location = 0LL;
    v43.length = v19;
    CFArraySortValues(MutableCopy, v43, (CFComparatorFunction)sub_100023EE8, 0LL);
    CFTypeID v37 = MutableCopy;
  }

  CFNumberRef v20 = 0LL;
  CFTypeID v39 = 0LL;
  char v21 = (const void *)kSCPropNetDNSSupplementalMatchDomainsNoSearch;
  do
  {
    CFTypeID v22 = (const __CFDictionary *)CFArrayGetValueAtIndex(MutableCopy, v20);
    CFTypeID v23 = (const __CFString *)CFDictionaryGetValue(v22, kSCPropNetDNSOptions);
    unint64_t v24 = CFStringGetTypeID();
    if (!v23
      || CFGetTypeID(v23) != v24
      || !CFEqual(v23, @"pdns") && CFStringFind(v23, @"interface=", 0LL).location == -1)
    {
      int v25 = CFDictionaryGetValue(v22, kSCPropNetDNSDomainName);
      CFBooleanRef v26 = _SC_trimDomain(v25);
      if (v26)
      {
        CFStringRef v27 = (const __CFString *)v26;
        CFStringRef v28 = CFDictionaryGetValue(v22, v21);
        CFStringRef v29 = CFNumberGetTypeID();
        if ((!v28 || CFGetTypeID(v28) != v29 || !CFNumberGetValue((CFNumberRef)v28, kCFNumberIntType, &v41) || !v41)
          && !CFStringHasSuffix(v27, @".in-addr.arpa")
          && !CFStringHasSuffix(v27, @".ip6.arpa"))
        {
          v44.length = CFArrayGetCount(Mutable);
          v44.location = 0LL;
          CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(Mutable, v44, v27);
          CFIndex v31 = CFDictionaryGetValue(v22, kSCPropNetDNSSearchOrder);
          int v32 = CFNumberGetTypeID();
          if (v31 && CFGetTypeID(v31) == v32 && CFNumberGetValue((CFNumberRef)v31, kCFNumberSInt32Type, &v40))
          {
            uint64_t v33 = v40;
          }

          else
          {
            uint64_t v33 = 200000;
            CFIndex v40 = 200000;
          }

          if (v33 >= valuePtr)
          {
            if (FirstIndexOfValue == -1) {
              CFArrayAppendValue(Mutable, v27);
            }
          }

          else
          {
            if (FirstIndexOfValue == -1)
            {
              CFTypeID v34 = v39;
            }

            else
            {
              CFArrayRemoveValueAtIndex(Mutable, FirstIndexOfValue);
              CFTypeID v34 = v39 - (FirstIndexOfValue < v39);
            }

            uint64_t v35 = v34;
            CFArrayInsertValueAtIndex(Mutable, v34, v27);
            CFTypeID v39 = v35 + 1;
          }
        }

        CFRelease(v27);
      }
    }

    ++v20;
  }

  while (v19 != v20);
  a1 = v38;
  if (v37) {
    CFRelease(v37);
  }
LABEL_50:
  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    CFSetRef Mutable = 0LL;
  }

  CFDictionaryRemoveValue(a1, kSCPropNetDNSDomainName);
  CFDictionaryRemoveValue(a1, kSCPropNetDNSSearchDomains);
  return Mutable;
}

    CFSetRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    goto LABEL_18;
  }

      if (v12 == ++v16) {
        return result;
      }
    }

    if ((_DWORD)result)
    {
      CFTypeID v22 = _os_log_pack_size(22LL);
      CFTypeID v23 = (char *)&v71 - ((__chkstk_darwin(v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      unint64_t v24 = __error();
      int v25 = _os_log_pack_fill(v23, v22, *v24, &_mh_execute_header, "%s: added service %@ to set");
      *(_DWORD *)int v25 = v72;
      *(void *)(v25 + 4) = "insertCategoryServices";
      *(_WORD *)(v25 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v25 + 14) = v17;
      __SC_log_send(5LL, v20, v21, v23);
    }

    uint64_t result = (uint64_t)SCNetworkServiceGetInterface(v17);
    if (!result) {
      goto LABEL_17;
    }
    if (!ServiceQoSMarkingPolicy) {
      goto LABEL_17;
    }
    CFBooleanRef v26 = result;
    CFStringRef v27 = SCNetworkInterfaceSetQoSMarkingPolicy();
    CFStringRef v28 = sub_100058E78();
    char v21 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v28, v21);
    if (!(_DWORD)result) {
      goto LABEL_17;
    }
    CFStringRef v29 = _os_log_pack_size(32LL);
    CFStringRef v30 = (char *)&v71 - ((__chkstk_darwin(v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFIndex v31 = __error();
    int v32 = _os_log_pack_fill(v30, v29, *v31, &_mh_execute_header, "%s: %sset QoSMarkingPolicy on %@");
    *(_DWORD *)int v32 = v73;
    uint64_t v33 = "";
    if (!v27) {
      uint64_t v33 = "FAILED to ";
    }
    *(void *)(v32 + 4) = "insertCategoryServices";
    *(_WORD *)(v32 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v32 + 14) = v33;
    *(_WORD *)(v32 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v32 + 24) = v26;
    CFTypeID v34 = v28;
    goto LABEL_16;
  }

  return result;
}

uint64_t sub_10002281C(uint64_t a1, const __CFDictionary *a2, _DWORD *a3)
{
  uint64_t result = sub_10002E570(a2);
  if (!(_DWORD)result)
  {
    uint64_t result = sub_100023528(a2, *a3);
    *a3 = result;
  }

  return result;
}

void sub_10002288C(const __CFDictionary *a1, int a2)
{
  if (CFDictionaryGetValueIfPresent(a1, @"__FLAGS__", (const void **)&value)
    && (os_log_t v4 = value, TypeID = CFNumberGetTypeID(), v4)
    && CFGetTypeID(v4) == TypeID)
  {
    int v6 = CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    int v7 = valuePtr;
    if (!v6) {
      int v7 = 0;
    }
  }

  else
  {
    int v7 = 0;
  }

  int valuePtr = v7 | a2;
  value = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(a1, @"__FLAGS__", value);
  CFRelease(value);
}

char *sub_100022978(unsigned int *a1, size_t a2)
{
  uint64_t v3 = bswap32(a1[12]) + 56LL;
  if (v3 == a2)
  {
    size_t v5 = bswap32(a1[13]);
    size_t v6 = 0x100000 - a2;
    if (0x100000 - a2 >= v5)
    {
      size_t v20 = v5 + a2;
      if (v5 + a2 <= 0x100000)
      {
        uint64_t v18 = (char *)malloc(v5 + a2);
        memcpy(v18, a1, a2);
        bzero(&v18[a2], v5);
        return v18;
      }

      os_log_t v21 = sub_10002E39C();
      uint64_t v22 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v21, v22))
      {
        uint64_t v23 = _os_log_pack_size(18LL);
        unint64_t v24 = (char *)&v27 - ((__chkstk_darwin(v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v25 = __error();
        uint64_t v26 = _os_log_pack_fill( v24,  v23,  *v25,  &_mh_execute_header,  "DNS configuration: length error (%zu > %d)",  v27,  v28);
        *(_DWORD *)uint64_t v26 = 134218240;
        *(void *)(v26 + 4) = v20;
        *(_WORD *)(v26 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
        *(_DWORD *)(v26 + 14) = 0x100000;
        __SC_log_send(3LL, v21, v22, v24);
      }
    }

    else
    {
      os_log_t v7 = sub_10002E39C();
      uint64_t v8 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v7, v8))
      {
        uint64_t v9 = _os_log_pack_size(18LL);
        os_log_t v10 = (char *)&v27 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v11 = __error();
        uint64_t v12 = _os_log_pack_fill( v10,  v9,  *v11,  &_mh_execute_header,  "DNS configuration: padding error (%u > %zu)",  v27,  v28);
        *(_DWORD *)uint64_t v12 = 67109376;
        *(_DWORD *)(v12 + 4) = v5;
        *(_WORD *)(v12 + 8) = 2048;
        *(void *)(v12 + 1sub_10000F430((uint64_t)__str, 0) = v6;
        os_log_t v13 = v7;
LABEL_7:
        __SC_log_send(3LL, v13, v8, v10);
      }
    }
  }

  else
  {
    os_log_t v14 = sub_10002E39C();
    uint64_t v8 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v14, v8))
    {
      uint64_t v15 = _os_log_pack_size(22LL);
      os_log_t v10 = (char *)&v27 - ((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v16 = __error();
      uint64_t v17 = _os_log_pack_fill( v10,  v15,  *v16,  &_mh_execute_header,  "DNS configuration: size error (%zu != %zu)",  v27,  v28);
      *(_DWORD *)uint64_t v17 = 134218240;
      *(void *)(v17 + 4) = v3;
      *(_WORD *)(v17 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
      *(void *)(v17 + 14) = a2;
      os_log_t v13 = v14;
      goto LABEL_7;
    }
  }

  return 0LL;
}

uint64_t sub_100022C64(int *a1)
{
  os_log_t v2 = sub_10002E39C();
  uint64_t v3 = _SC_syslog_os_log_mapping(6LL);
  uint64_t result = __SC_log_enabled(6LL, v2, v3);
  if ((_DWORD)result)
  {
    uint64_t v5 = _os_log_pack_size(12LL);
    size_t v6 = (char *)&v39 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v7 = __error();
    uint64_t v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "%s", v39);
    *(_DWORD *)uint64_t v8 = 136315138;
    *(void *)(v8 + 4) = "DNS configuration";
    uint64_t result = __SC_log_send(6LL, v2, v3, v6);
  }

  if (*a1 >= 1)
  {
    uint64_t v9 = 0LL;
    do
    {
      os_log_t v10 = *(uint64_t **)(*(void *)(a1 + 1) + 8 * v9++);
      uint64_t result = sub_1000240B8(a1[11], v10, v9);
    }

    while (v9 < *a1);
  }

  if (a1[3] >= 1 && *((void *)a1 + 2))
  {
    os_log_t v11 = sub_10002E39C();
    uint64_t v12 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v11, v12))
    {
      uint64_t v13 = _os_log_pack_size(12LL);
      os_log_t v14 = (char *)&v39 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v15 = __error();
      uint64_t v16 = _os_log_pack_fill(v14, v13, *v15, &_mh_execute_header, "%s", v39);
      *(_DWORD *)uint64_t v16 = 136315138;
      *(void *)(v16 + 4) = "";
      __SC_log_send(6LL, v11, v12, v14);
    }

    os_log_t v17 = sub_10002E39C();
    uint64_t v18 = _SC_syslog_os_log_mapping(6LL);
    uint64_t result = __SC_log_enabled(6LL, v17, v18);
    if ((_DWORD)result)
    {
      uint64_t v19 = _os_log_pack_size(12LL);
      size_t v20 = (char *)&v39 - ((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v21 = __error();
      uint64_t v22 = _os_log_pack_fill(v20, v19, *v21, &_mh_execute_header, "%s", v39);
      *(_DWORD *)uint64_t v22 = 136315138;
      *(void *)(v22 + 4) = "DNS configuration (for scoped queries)";
      uint64_t result = __SC_log_send(6LL, v17, v18, v20);
    }

    if (a1[3] >= 1)
    {
      uint64_t v23 = 0LL;
      do
      {
        unint64_t v24 = *(uint64_t **)(*((void *)a1 + 2) + 8 * v23++);
        uint64_t result = sub_1000240B8(a1[11], v24, v23);
      }

      while (v23 < a1[3]);
    }
  }

  if (a1[8] >= 1 && *(void *)(a1 + 9))
  {
    os_log_t v25 = sub_10002E39C();
    uint64_t v26 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v25, v26))
    {
      uint64_t v27 = _os_log_pack_size(12LL);
      size_t v28 = (char *)&v39 - ((__chkstk_darwin(v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFStringRef v29 = __error();
      uint64_t v30 = _os_log_pack_fill(v28, v27, *v29, &_mh_execute_header, "%s", v39);
      *(_DWORD *)uint64_t v30 = 136315138;
      *(void *)(v30 + 4) = "";
      __SC_log_send(6LL, v25, v26, v28);
    }

    os_log_t v31 = sub_10002E39C();
    uint64_t v32 = _SC_syslog_os_log_mapping(6LL);
    uint64_t result = __SC_log_enabled(6LL, v31, v32);
    if ((_DWORD)result)
    {
      uint64_t v33 = _os_log_pack_size(12LL);
      CFTypeID v34 = (char *)&v39 - ((__chkstk_darwin(v33) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v35 = __error();
      uint64_t v36 = _os_log_pack_fill(v34, v33, *v35, &_mh_execute_header, "%s", v39);
      *(_DWORD *)uint64_t v36 = 136315138;
      *(void *)(v36 + 4) = "DNS configuration (for service-specific queries)";
      uint64_t result = __SC_log_send(6LL, v31, v32, v34);
    }

    if (a1[8] >= 1)
    {
      uint64_t v37 = 0LL;
      do
      {
        CFTypeID v38 = *(uint64_t **)(*(void *)(a1 + 9) + 8 * v37++);
        uint64_t result = sub_1000240B8(a1[11], v38, v37);
      }

      while (v37 < a1[8]);
    }
  }

  return result;
}

void sub_1000230F8(uint64_t a1, uint64_t a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000LL;
  v2[2] = sub_100023198;
  v2[3] = &unk_1000723F0;
  v2[4] = a1;
  void v2[5] = a2;
  dispatch_queue_t v3 = dispatch_queue_create("dns_configuration_monitor", 0LL);
  dispatch_async(v3, v2);
}

void sub_100023198(uint64_t a1)
{
}

uint64_t sub_1000231F8(dispatch_queue_s *a1, void *a2)
{
  os_log_t v7 = strrchr((const char *)v17, 47);
  if (v7)
  {
    uint64_t v8 = v7;
    char *v7 = 0;
    if (realpath_DARWIN_EXTSN((const char *)v17, v16))
    {
      __strlcat_chk(v16, "/", 1024LL, 1024LL);
      __strlcat_chk(v16, v8 + 1, 1024LL, 1024LL);
LABEL_2:
      v15.info = a2;
      v17[0] = CFStringCreateWithCString(0LL, v16, 0x8000100u);
      os_log_t v4 = CFArrayCreate(0LL, v17, 1LL, &kCFTypeArrayCallBacks);
      CFRelease(v17[0]);
      uint64_t v5 = FSEventStreamCreate(0LL, (FSEventStreamCallback)sub_1000250F8, &v15, v4, 0xFFFFFFFFFFFFFFFFLL, 0.0, 0x15u);
      CFRelease(v4);
      FSEventStreamSetDispatchQueue(v5, a1);
      return FSEventStreamStart(v5);
    }
  }

  os_log_t v9 = sub_10002E39C();
  uint64_t v10 = _SC_syslog_os_log_mapping(3LL);
  uint64_t result = __SC_log_enabled(3LL, v9, v10);
  if ((_DWORD)result)
  {
    uint64_t v11 = _os_log_pack_size(12LL);
    uint64_t v12 = (char *)&v15 - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v13 = __error();
    uint64_t v14 = _os_log_pack_fill( v12,  v11,  *v13,  &_mh_execute_header,  "Not monitoring %s, could not resolve directory path",  (const char *)v15.version);
    *(_DWORD *)uint64_t v14 = 136315138;
    *(void *)(v14 + 4) = "/Library/Preferences/SystemConfiguration/resolver";
    return __SC_log_send(3LL, v9, v10, v12);
  }

  return result;
}

CFTypeID sub_100023428(__CFBundle *a1)
{
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a1);
  CFTypeID result = CFDictionaryGetTypeID();
  if (InfoDictionary)
  {
    CFTypeID v3 = result;
    CFTypeID result = CFGetTypeID(InfoDictionary);
    if (result == v3)
    {
      CFPropertyListRef Value = CFDictionaryGetValue(InfoDictionary, @"mdns_timeout");
      qword_100079BD0 = (uint64_t)Value;
      CFTypeID TypeID = CFNumberGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID) {
          uint64_t v6 = (uint64_t)Value;
        }
        else {
          uint64_t v6 = 0LL;
        }
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      qword_100079BD0 = v6;
      os_log_t v7 = CFDictionaryGetValue(InfoDictionary, @"pdns_timeout");
      qword_100079BD8 = (uint64_t)v7;
      CFTypeID result = CFNumberGetTypeID();
      if (v7)
      {
        CFTypeID v8 = result;
        CFTypeID result = CFGetTypeID(v7);
        if (result == v8) {
          uint64_t v9 = (uint64_t)v7;
        }
        else {
          uint64_t v9 = 0LL;
        }
      }

      else
      {
        uint64_t v9 = 0LL;
      }

      qword_100079BD8 = v9;
    }
  }

  return result;
}

uint64_t sub_100023528(CFDictionaryRef theDict, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a2 & 2) == 0)
  {
    else {
      uint64_t v2 = v2;
    }
  }

  if ((v2 & 4) == 0)
  {
    else {
      uint64_t v2 = v2;
    }
  }

  if ((~(_DWORD)v2 & 6) != 0)
  {
    CFPropertyListRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, kSCEntNetCommCenter);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID)
      {
        uint64_t v6 = (const __CFBoolean *)CFDictionaryGetValue(Value, kSCPropNetCommCenterAvailable);
        CFTypeID v7 = CFBooleanGetTypeID();
        if (v6)
        {
          if (CFGetTypeID(v6) == v7)
          {
            if (CFBooleanGetValue(v6))
            {
              CFTypeID v8 = (const __CFNumber *)CFDictionaryGetValue(Value, @"AvailableProtocols");
              CFTypeID v9 = CFNumberGetTypeID();
              if (v8)
              {
                if (CFGetTypeID(v8) == v9)
                {
                  int valuePtr = 0;
                  CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
                  return (2 * (valuePtr & 3)) | v2;
                }
              }
            }
          }
        }
      }
    }
  }

  return v2;
}

void sub_100023690(__CFDictionary *a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  if (a3) {
    uint64_t v5 = " ";
  }
  else {
    uint64_t v5 = "";
  }
  uint64_t v6 = &stru_100073D90;
  if (a3) {
    uint64_t v6 = a3;
  }
  CFStringRef v7 = CFStringCreateWithFormat(0LL, 0LL, @"%s:%s%@ %ld", a2, v5, v6, a4);
  CFDictionarySetValue(a1, @"__CONFIGURATION_ID__", v7);
  CFRelease(v7);
}

void sub_10002373C(const __CFArray *a1, CFDictionaryRef theDict)
{
  unsigned int valuePtr = 0;
  os_log_t v4 = CFDictionaryGetValue(theDict, kSCPropNetDNSSearchOrder);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!v4 || CFGetTypeID(v4) != TypeID || !CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
  {
    os_log_t v4 = 0LL;
    unsigned int valuePtr = 0;
  }

  CFIndex Count = CFArrayGetCount(a1);
  CFIndex v26 = Count;
  if (Count < 1)
  {
LABEL_11:
    CFNumberRef v12 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v26);
    CFDictionarySetValue(theDict, @"__ORDER__", v12);
    CFRelease(v12);
    uint64_t v13 = CFDictionaryGetValue(theDict, kSCPropInterfaceName);
    if (v13)
    {
      uint64_t v14 = v13;
      if (!CFEqual(v13, @"*"))
      {
        if (_SC_cfstring_to_cstring(v14, v27, 16LL, 1536LL))
        {
          int v23 = sub_100028D68((uint64_t)v27);
          if (v23)
          {
            if (CFDictionaryGetValueIfPresent(theDict, @"__FLAGS__", (const void **)&value)
              && (os_log_t v17 = value, v18 = CFNumberGetTypeID(), v17)
              && CFGetTypeID(v17) == v18
              && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, v24)
              && (v24[1] & 0x10) != 0
              || CFDictionaryGetValueIfPresent(theDict, @"__SCOPED_QUERY__", (const void **)&BOOLean)
              && (CFBooleanRef v19 = BOOLean, v20 = CFBooleanGetTypeID(), v19)
              && CFGetTypeID(v19) == v20
              && CFBooleanGetValue(BOOLean))
            {
              value = CFNumberCreate(0LL, kCFNumberIntType, &v23);
              CFDictionarySetValue(theDict, @"__IF_INDEX__", value);
              CFRelease(value);
            }
          }
        }
      }
    }

    CFArrayAppendValue(a1, theDict);
  }

  else
  {
    CFIndex v7 = Count;
    CFIndex v8 = 0LL;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
      if (CFEqual(theDict, ValueAtIndex)) {
        break;
      }
      if (v4)
      {
        MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)ValueAtIndex);
        CFDictionarySetValue(MutableCopy, kSCPropNetDNSSearchOrder, v4);
        int v11 = CFEqual(theDict, MutableCopy);
        CFRelease(MutableCopy);
        if (v11)
        {
          v27[0] = 0;
          FSEventStreamContext v15 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, kSCPropNetDNSSearchOrder);
          CFTypeID v16 = CFNumberGetTypeID();
          if (v15
            && CFGetTypeID(v15) == v16
            && CFNumberGetValue((CFNumberRef)v15, kCFNumberSInt32Type, v27)
            && valuePtr < v27[0])
          {
            CFArraySetValueAtIndex(a1, v8, theDict);
          }

          return;
        }
      }

      if (++v8 >= v7) {
        goto LABEL_11;
      }
    }
  }

__CFArray *sub_100023A54(const __CFDictionary *a1, const __CFArray *MutableCopy)
{
  unsigned int valuePtr = 200000;
  CFSetRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  if (a1)
  {
    CFPropertyListRef Value = CFDictionaryGetValue(a1, kSCPropNetDNSSearchOrder);
    CFTypeID TypeID = CFNumberGetTypeID();
    if (!Value || CFGetTypeID(Value) != TypeID || !CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr)) {
      unsigned int valuePtr = 200000;
    }
    CFIndex v7 = CFDictionaryGetValue(a1, kSCPropNetDNSDomainName);
    CFIndex v8 = (const __CFArray *)CFDictionaryGetValue(a1, kSCPropNetDNSSearchDomains);
    CFTypeID v9 = CFArrayGetTypeID();
    if (v8 && CFGetTypeID(v8) == v9)
    {
      CFIndex Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        CFIndex v11 = Count;
        for (CFIndex i = 0LL; i != v11; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v8, i);
          uint64_t v14 = (const void *)_SC_trimDomain(ValueAtIndex);
          if (v14)
          {
            FSEventStreamContext v15 = v14;
            CFArrayAppendValue(Mutable, v14);
            CFRelease(v15);
          }
        }
      }

      goto LABEL_17;
    }
  }

  else
  {
    CFArrayGetTypeID();
    CFIndex v7 = 0LL;
  }

  CFTypeID v16 = (const void *)_SC_trimDomain(v7);
  if (v16)
  {
    os_log_t v17 = v16;
    CFArrayAppendValue(Mutable, v16);
    CFRelease(v17);
  }

uint64_t sub_100023EE8(const __CFDictionary *a1, const __CFDictionary *a2)
{
  unsigned int v4 = 200000;
  unsigned int v15 = 200000;
  unsigned int valuePtr = 200000;
  uint64_t v5 = (void *)CFDictionaryGetValue(a1, kSCPropNetDNSSearchOrder);
  value = v5;
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!v5 || CFGetTypeID(v5) != TypeID || !CFNumberGetValue((CFNumberRef)v5, kCFNumberSInt32Type, &valuePtr)) {
    unsigned int valuePtr = 200000;
  }
  CFIndex v7 = (const __CFNumber *)CFDictionaryGetValue(a2, kSCPropNetDNSSearchOrder);
  CFNumberRef number = v7;
  CFTypeID v8 = CFNumberGetTypeID();
  if (v7 && CFGetTypeID(v7) == v8 && CFNumberGetValue(v7, kCFNumberSInt32Type, &v15)) {
    unsigned int v4 = v15;
  }
  else {
    unsigned int v15 = 200000;
  }
  BOOL v9 = valuePtr >= v4;
  if (valuePtr == v4)
  {
    uint64_t v10 = value;
    CFTypeID v11 = CFNumberGetTypeID();
    if (!v10) {
      return 0LL;
    }
    if (CFGetTypeID(v10) != v11) {
      return 0LL;
    }
    CFNumberRef v12 = number;
    CFTypeID v13 = CFNumberGetTypeID();
    if (!v12) {
      return 0LL;
    }
    if (CFGetTypeID(v12) != v13) {
      return 0LL;
    }
    if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)) {
      return 0LL;
    }
    if (!CFNumberGetValue(number, kCFNumberSInt32Type, &v15)) {
      return 0LL;
    }
    BOOL v9 = valuePtr >= v15;
    if (valuePtr == v15) {
      return 0LL;
    }
  }

  if (v9) {
    return 1LL;
  }
  return -1LL;
}

uint64_t sub_1000240B8(int a1, uint64_t *a2, int a3)
{
  HIDWORD(v125) = a1;
  os_log_t v5 = sub_10002E39C();
  uint64_t v6 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v5, v6))
  {
    uint64_t v7 = _os_log_pack_size(12LL);
    CFTypeID v8 = (char *)&v124 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    BOOL v9 = __error();
    uint64_t v10 = _os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "%s", v124);
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)(v10 + 4) = "";
    __SC_log_send(6LL, v5, v6, v8);
  }

  os_log_t v11 = sub_10002E39C();
  uint64_t v12 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v11, v12))
  {
    uint64_t v14 = _os_log_pack_size(8LL);
    unsigned int v15 = (char *)&v124 - ((__chkstk_darwin(v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFTypeID v16 = __error();
    os_log_t v17 = (_DWORD *)_os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "resolver #%d", (_DWORD)v124);
    *os_log_t v17 = 67109120;
    v17[1] = a3;
    __SC_log_send(6LL, v11, v12, v15);
  }

  if (*a2)
  {
    os_log_t v18 = sub_10002E39C();
    uint64_t v19 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v18, v19))
    {
      uint64_t v20 = _os_log_pack_size(12LL);
      os_log_t v21 = (char *)&v124 - ((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v22 = __error();
      uint64_t v23 = _os_log_pack_fill(v21, v20, *v22, &_mh_execute_header, "  domain   : %s", v124);
      uint64_t v24 = *a2;
      *(_DWORD *)uint64_t v23 = 136315138;
      *(void *)(v23 + 4) = v24;
      __SC_log_send(6LL, v18, v19, v21);
    }
  }

  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v25 = 0LL;
    *(void *)&__int128 v13 = 67109378LL;
    __int128 v126 = v13;
    do
    {
      os_log_t v26 = sub_10002E39C();
      uint64_t v27 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v26, v27))
      {
        uint64_t v28 = _os_log_pack_size(18LL);
        CFTypeID v29 = (char *)&v124 - ((__chkstk_darwin(v28) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v30 = __error();
        uint64_t v31 = _os_log_pack_fill( v29,  v28,  *v30,  &_mh_execute_header,  "  search domain[%d] : %s",  (_DWORD)v124,  v125);
        uint64_t v32 = *(void *)(*(uint64_t *)((char *)a2 + 28) + 8 * v25);
        *(_DWORD *)uint64_t v31 = v126;
        *(_DWORD *)(v31 + 4) = v25;
        *(_WORD *)(v31 + 8) = 2080;
        *(void *)(v31 + 1sub_10000F430((uint64_t)__str, 0) = v32;
        __SC_log_send(6LL, v26, v27, v29);
      }

      ++v25;
    }

    while (v25 < *((int *)a2 + 6));
  }

  if (*((int *)a2 + 2) >= 1)
  {
    uint64_t v33 = 0LL;
    *(void *)&__int128 v13 = 67109378LL;
    __int128 v126 = v13;
    do
    {
      _SC_sockaddr_to_string(*(void *)(*(uint64_t *)((char *)a2 + 12) + 8 * v33), __str, 128LL);
      os_log_t v34 = sub_10002E39C();
      uint64_t v35 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v34, v35))
      {
        uint64_t v36 = _os_log_pack_size(18LL);
        uint64_t v37 = (char *)&v124 - ((__chkstk_darwin(v36) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFTypeID v38 = __error();
        uint64_t v39 = _os_log_pack_fill( v37,  v36,  *v38,  &_mh_execute_header,  "  nameserver[%d] : %s",  (_DWORD)v124,  v125);
        *(_DWORD *)uint64_t v39 = v126;
        *(_DWORD *)(v39 + 4) = v33;
        *(_WORD *)(v39 + 8) = 2080;
        *(void *)(v39 + 1sub_10000F430((uint64_t)__str, 0) = __str;
        __SC_log_send(6LL, v34, v35, v37);
      }

      ++v33;
    }

    while (v33 < *((int *)a2 + 2));
  }

  if (*((int *)a2 + 9) >= 1)
  {
    uint64_t v40 = 0LL;
    *(void *)&__int128 v13 = 67109634LL;
    __int128 v126 = v13;
    do
    {
      inet_ntop(2, *(const void **)(a2[5] + 8 * v40), __str, 0x20u);
      inet_ntop(2, (const void *)(*(void *)(a2[5] + 8 * v40) + 4LL), v127, 0x20u);
      os_log_t v41 = sub_10002E39C();
      uint64_t v42 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v41, v42))
      {
        uint64_t v43 = _os_log_pack_size(28LL);
        CFRange v44 = (char *)&v124 - ((__chkstk_darwin(v43) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v45 = __error();
        uint64_t v46 = _os_log_pack_fill( v44,  v43,  *v45,  &_mh_execute_header,  "  sortaddr[%d] : %s/%s",  (_DWORD)v124,  v125,  (const char *)v126);
        *(_DWORD *)uint64_t v46 = v126;
        *(_DWORD *)(v46 + 4) = v40;
        *(_WORD *)(v46 + 8) = 2080;
        *(void *)(v46 + 1sub_10000F430((uint64_t)__str, 0) = __str;
        *(_WORD *)(v46 + 18) = 2080;
        *(void *)(v46 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v127;
        __SC_log_send(6LL, v41, v42, v44);
      }

      ++v40;
    }

    while (v40 < *((int *)a2 + 9));
  }

  if (a2[6])
  {
    os_log_t v47 = sub_10002E39C();
    uint64_t v48 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v47, v48))
    {
      uint64_t v49 = _os_log_pack_size(12LL);
      uint64_t v50 = (char *)&v124 - ((__chkstk_darwin(v49) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v51 = __error();
      uint64_t v52 = _os_log_pack_fill(v50, v49, *v51, &_mh_execute_header, "  options  : %s", v124);
      uint64_t v53 = a2[6];
      *(_DWORD *)uint64_t v52 = 136315138;
      *(void *)(v52 + 4) = v53;
      __SC_log_send(6LL, v47, v48, v50);
    }
  }

  if (*((_WORD *)a2 + 10))
  {
    os_log_t v54 = sub_10002E39C();
    uint64_t v55 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v54, v55))
    {
      uint64_t v56 = _os_log_pack_size(8LL);
      uint64_t v57 = (char *)&v124 - ((__chkstk_darwin(v56) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v58 = __error();
      CFStringRef v59 = (_DWORD *)_os_log_pack_fill( v57,  v56,  *v58,  &_mh_execute_header,  "  port     : %hu",  (_DWORD)v124);
      int v60 = *((unsigned __int16 *)a2 + 10);
      _DWORD *v59 = 67109120;
      v59[1] = v60;
      __SC_log_send(6LL, v54, v55, v57);
    }
  }

  if (*((_DWORD *)a2 + 14))
  {
    os_log_t v61 = sub_10002E39C();
    uint64_t v62 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v61, v62))
    {
      uint64_t v63 = _os_log_pack_size(8LL);
      uint64_t v64 = (char *)&v124 - ((__chkstk_darwin(v63) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      unint64_t v65 = __error();
      int v66 = (_DWORD *)_os_log_pack_fill( v64,  v63,  *v65,  &_mh_execute_header,  "  timeout  : %u",  (_DWORD)v124);
      int v67 = *((_DWORD *)a2 + 14);
      _DWORD *v66 = 67109120;
      v66[1] = v67;
      __SC_log_send(6LL, v61, v62, v64);
    }
  }

  unsigned int v68 = *((_DWORD *)a2 + 16);
  if (v68)
  {
    os_log_t v70 = sub_10002E39C();
    uint64_t v71 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v70, v71))
    {
      uint64_t v72 = _os_log_pack_size(18LL);
      int v73 = (char *)&v124 - ((__chkstk_darwin(v72) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFIndex v74 = __error();
      uint64_t v75 = _os_log_pack_fill( v73,  v72,  *v74,  &_mh_execute_header,  "  if_index : %u (%s)",  (_DWORD)v124,  v125);
      int v76 = *((_DWORD *)a2 + 16);
      char v77 = "?";
      if (v69) {
        char v77 = v69;
      }
      *(_DWORD *)uint64_t v75 = 67109378;
      *(_DWORD *)(v75 + 4) = v76;
      *(_WORD *)(v75 + 8) = 2080;
      *(void *)(v75 + 1sub_10000F430((uint64_t)__str, 0) = v77;
      __SC_log_send(6LL, v70, v71, v73);
    }
  }

  if (*((_DWORD *)a2 + 19))
  {
    os_log_t v78 = sub_10002E39C();
    uint64_t v79 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v78, v79))
    {
      uint64_t v80 = _os_log_pack_size(8LL);
      CFTypeID v81 = (char *)&v124 - ((__chkstk_darwin(v80) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFIndex v82 = __error();
      CFIndex v83 = (_DWORD *)_os_log_pack_fill( v81,  v80,  *v82,  &_mh_execute_header,  "  service_identifier : %u",  (_DWORD)v124);
      int v84 = *((_DWORD *)a2 + 19);
      *CFIndex v83 = 67109120;
      v83[1] = v84;
      __SC_log_send(6LL, v78, v79, v81);
    }
  }

  uint64_t v85 = *((unsigned int *)a2 + 17);
  CFSetRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppend(Mutable, @"  flags    : ");
  CFStringAppendFormat(Mutable, 0LL, @"0x%08x", v85);
  if ((_DWORD)v85)
  {
    CFStringAppendFormat(Mutable, 0LL, @" (");
    if ((v85 & 0x1000) != 0)
    {
      uint64_t v85 = v85 & 0xFFFFEFFF;
      CFTypeID v119 = "";
      if ((_DWORD)v85) {
        CFTypeID v119 = ", ";
      }
      CFStringAppendFormat(Mutable, 0LL, @"Scoped%s", v119);
      if ((v85 & 0x2000) == 0)
      {
LABEL_46:
        if ((v85 & 0x4000) == 0) {
          goto LABEL_47;
        }
        goto LABEL_105;
      }
    }

    else if ((v85 & 0x2000) == 0)
    {
      goto LABEL_46;
    }

    uint64_t v85 = v85 & 0xFFFFDFFF;
    v120 = "";
    if ((_DWORD)v85) {
      v120 = ", ";
    }
    CFStringAppendFormat(Mutable, 0LL, @"Service-specific%s", v120);
    if ((v85 & 0x4000) == 0)
    {
LABEL_47:
      if ((v85 & 2) == 0) {
        goto LABEL_48;
      }
      goto LABEL_108;
    }

LABEL_105:
    uint64_t v85 = v85 & 0xFFFFBFFF;
    v121 = "";
    if ((_DWORD)v85) {
      v121 = ", ";
    }
    CFStringAppendFormat(Mutable, 0LL, @"Supplemental%s", v121);
    if ((v85 & 2) == 0)
    {
LABEL_48:
      if ((v85 & 4) == 0) {
        goto LABEL_49;
      }
      goto LABEL_111;
    }

LABEL_108:
    uint64_t v85 = v85 & 0xFFFFFFFD;
    int v122 = "";
    if ((_DWORD)v85) {
      int v122 = ", ";
    }
    CFStringAppendFormat(Mutable, 0LL, @"Request A records%s", v122);
    if ((v85 & 4) == 0)
    {
LABEL_49:
      if (!(_DWORD)v85)
      {
LABEL_51:
        CFStringAppend(Mutable, @""));
        goto LABEL_52;
      }

LABEL_50:
      CFStringAppendFormat(Mutable, 0LL, @"0x%08x", v85);
      goto LABEL_51;
    }

LABEL_111:
    uint64_t v85 = v85 & 0xFFFFFFFB;
    CFTypeID v123 = "";
    if ((_DWORD)v85) {
      CFTypeID v123 = ", ";
    }
    CFStringAppendFormat(Mutable, 0LL, @"Request AAAA records%s", v123);
    if (!(_DWORD)v85) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }

uint64_t sub_1000250F8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = stat("/Library/Preferences/SystemConfiguration/resolver", &v11);
  if (byte_100079BE0) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = (_DWORD)result == 0;
  }
  if (v4)
  {
    byte_100079BE0 = (_DWORD)result == 0;
    os_log_t v5 = sub_10002E39C();
    uint64_t v6 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v5, v6))
    {
      uint64_t v7 = _os_log_pack_size(2LL);
      CFTypeID v8 = (char *)&v10 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      BOOL v9 = __error();
      *(_WORD *)_os_log_pack_fill( v8,  v7,  *v9,  &_mh_execute_header,  "/Library/Preferences/SystemConfiguration/resolver changed") = 0;
      __SC_log_send(5LL, v5, v6, v8);
    }

    return a2();
  }

  return result;
}

_DWORD *sub_100025228()
{
  BOOL v0 = calloc(1uLL, 0x2000uLL);
  v0[11] = 20170629;
  *((void *)v0 + 3) = mach_absolute_time();
  return v0;
}

void sub_10002529C(void **a1, _DWORD *a2)
{
  BOOL v4 = (char *)*a1;
  sub_100025380(a2);
  unsigned int v5 = a2[2];
  unsigned int v6 = a2[6];
  unsigned int v7 = a2[9];
  int v8 = a2[17];
  uint64_t v9 = 32LL * ((v8 & 0x200000u) >> 21);
  if ((v8 & 0x200000) != 0) {
    int v10 = 3;
  }
  else {
    int v10 = 1;
  }
  BOOL v11 = (v8 & 0x100000) == 0;
  uint64_t v12 = 12LL;
  if (v11)
  {
    uint64_t v12 = v9;
    unsigned int v13 = v10;
  }

  else
  {
    unsigned int v13 = 2;
  }

  *(_DWORD *)&v4[v12] = bswap32(bswap32(*(_DWORD *)&v4[v12]) + 1);
  sub_100025634(a1, v13, bswap32(a2[24]) + 100, a2, 8 * (bswap32(v5) + bswap32(v6) + bswap32(v7)) + 8);
}

void sub_100025380(_DWORD *a1)
{
  if (!a1[2]) {
    return;
  }
  CFSetRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  unsigned int v3 = a1[16];
  if (v3 && if_indextoname(bswap32(v3), cStr))
  {
    CFStringRef v4 = CFStringCreateWithCString(0LL, cStr, 0x600u);
    CFDictionarySetValue(Mutable, @"interface", v4);
    CFRelease(v4);
  }

  unsigned int v5 = bswap32(a1[24]);
  if (v5 < 8)
  {
    unsigned int v8 = 2;
    goto LABEL_26;
  }

  int v6 = 0;
  unsigned int v7 = (const UInt8 *)(a1 + 25);
  unsigned int v8 = 2;
  while (1)
  {
    unsigned int v9 = *((_DWORD *)v7 + 1);
    if (*(_DWORD *)v7 != 184549376) {
      goto LABEL_17;
    }
    CFDataRef v10 = CFDataCreate(0LL, v7 + 8, v7[8]);
    CFDictionarySetValue(Mutable, @"remote-address", v10);
    CFRelease(v10);
    BOOL v11 = (const __SCNetworkReachability *)SCNetworkReachabilityCreateWithOptions(0LL, Mutable);
    if (!v11) {
      break;
    }
    uint64_t v12 = v11;
    int Flags = SCNetworkReachabilityGetFlags(v11, (SCNetworkReachabilityFlags *)cStr);
    CFRelease(v12);
    if (!Flags) {
      goto LABEL_24;
    }
    unsigned int v14 = *(_DWORD *)cStr;
    if (!v6) {
      goto LABEL_29;
    }
    BOOL v15 = (v8 & 2) == 0;
    if ((cStr[0] & 4) == 0) {
      BOOL v15 = (v8 & 6) != 2;
    }
    if ((cStr[0] & 2) != 0 && v15)
    {
LABEL_29:
      unsigned int v8 = *(_DWORD *)cStr;
      if ((cStr[0] & 6) == 2) {
        goto LABEL_25;
      }
    }

    ++v6;
LABEL_17:
    unsigned int v16 = bswap32(v9);
    v7 += v16;
    v5 -= v16;
    if (v5 <= 7) {
      goto LABEL_26;
    }
  }

  CFDictionaryRemoveValue(Mutable, @"interface");
  os_log_t v17 = (const void *)SCNetworkReachabilityCreateWithOptions(0LL, Mutable);
  if (v17)
  {
    CFRelease(v17);
    unsigned int v14 = 0;
    goto LABEL_25;
  }

  os_log_t v18 = sub_10002E39C();
  uint64_t v19 = _SC_syslog_os_log_mapping(3LL);
  if (__SC_log_enabled(3LL, v18, v19))
  {
    uint64_t v20 = _os_log_pack_size(12LL);
    os_log_t v21 = &cStr[-((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
    uint64_t v22 = __error();
    uint64_t v23 = _os_log_pack_fill( v21,  v20,  *v22,  &_mh_execute_header,  "_dns_resolver_set_reach_flags SCNetworkReachabilityCreateWithOptions() failed:\n  options = %@");
    *(_DWORD *)uint64_t v23 = 138412290;
    *(void *)(v23 + 4) = Mutable;
    __SC_log_send(3LL, v18, v19, v21);
  }

void sub_100025634(void **a1, unsigned int a2, unsigned int a3, const void *a4, int a5)
{
  CFDataRef v10 = *a1;
  uint64_t v11 = bswap32(*((_DWORD *)*a1 + 12));
  size_t v12 = a3;
  if ((a3 & 3) != 0) {
    unsigned int v13 = (a3 | 3) + 1;
  }
  else {
    unsigned int v13 = a3;
  }
  unsigned int v14 = v13 + 8;
  size_t v15 = v13 + v11 + 64;
  if (v15 <= 0x2000)
  {
    unsigned int v16 = v11;
  }

  else
  {
    CFDataRef v10 = realloc(*a1, v15);
    unsigned int v16 = bswap32(v10[12]);
  }

  unsigned int v17 = bswap32(bswap32(v10[13]) + a5);
  v10[12] = bswap32(v16 + v14);
  v10[13] = v17;
  os_log_t v18 = (char *)v10 + v11;
  *((_DWORD *)v18 + 14) = bswap32(a2);
  *((_DWORD *)v18 + 15) = bswap32(v14);
  memcpy((char *)v10 + v11 + 64, a4, v12);
  if (v13 > a3) {
    bzero((char *)v10 + v11 + v12 + 64, v13 + ~a3 + 1LL);
  }
  *a1 = v10;
}

void sub_100025764(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  if (a1)
  {
    uint64_t v6 = *a1;
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = 0LL;
      if (a3 <= 0x1F) {
        unsigned int v8 = (unsigned __int8 *)&v9;
      }
      else {
        unsigned int v8 = a2;
      }
      CC_SHA256_Init(&c);
      CC_SHA256_Update(&c, (const void *)v6, bswap32(*(_DWORD *)(v6 + 48)) + 56);
      CC_SHA256_Final(v8, &c);
      if (v8 != a2) {
        memcpy(a2, v8, a3);
      }
      *(void *)(v6 + 24) = v7;
    }
  }

void sub_100025840(void **a1)
{
  *a1 = 0LL;
}

void *sub_10002589C()
{
  return calloc(1uLL, 0x400uLL);
}

void sub_1000258E8(void **a1, unsigned __int8 *a2)
{
  unsigned int v3 = *a1;
  int v4 = a2[1];
  if (v4 == 30)
  {
    if (!*((_DWORD *)a2 + 2) && !*((_DWORD *)a2 + 3) && !*((_DWORD *)a2 + 4))
    {
      int v5 = *((_DWORD *)a2 + 5);
      int v6 = 0x1000000;
LABEL_4:
      BOOL v7 = v5 != v6;
      if (v5 == v6) {
        int v8 = 100663296;
      }
      else {
        int v8 = 0;
      }
      goto LABEL_11;
    }
  }

  else if (v4 == 2)
  {
    int v5 = *((_DWORD *)a2 + 1);
    int v6 = 16777343;
    goto LABEL_4;
  }

  int v8 = 0;
  BOOL v7 = 1;
LABEL_11:
  int v9 = v3[17];
  v3[2] = bswap32(bswap32(v3[2]) + 1);
  sub_1000259E0(a1, 0xBu, *a2, a2);
  if (!v7) {
    *((_DWORD *)*a1 + 17) = v8 | v9;
  }
}

void sub_1000259E0(void **a1, unsigned int a2, unsigned int a3, const void *a4)
{
  int v8 = *a1;
  uint64_t v9 = bswap32(*((_DWORD *)*a1 + 24));
  size_t v10 = a3;
  if ((a3 & 3) != 0) {
    unsigned int v11 = (a3 | 3) + 1;
  }
  else {
    unsigned int v11 = a3;
  }
  unsigned int v12 = v11 + 8;
  size_t v13 = v11 + v9 + 108;
  if (v13 < 0x401)
  {
    unsigned int v14 = v9;
  }

  else
  {
    int v8 = realloc(*a1, v13);
    unsigned int v14 = bswap32(v8[24]);
  }

  v8[24] = bswap32(v14 + v12);
  size_t v15 = (char *)v8 + v9;
  *((_DWORD *)v15 + 25) = bswap32(a2);
  *((_DWORD *)v15 + 26) = bswap32(v12);
  memcpy((char *)v8 + v9 + 108, a4, v10);
  if (v11 > a3) {
    bzero((char *)v8 + v9 + v10 + 108, v11 + ~a3 + 1LL);
  }
  *a1 = v8;
}

uint64_t sub_100025AFC(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(void *)result + 68LL) = bswap32(a2);
  return result;
}

void sub_100025B4C(void **a1, char *__s)
{
  *((_DWORD *)*a1 + 6) = bswap32(bswap32(*((_DWORD *)*a1 + 6)) + 1);
  unsigned int v4 = strlen(__s) + 1;
  sub_1000259E0(a1, 0xCu, v4, __s);
}

void sub_100025BD0(void **a1, const void *a2)
{
  *((_DWORD *)*a1 + 9) = bswap32(bswap32(*((_DWORD *)*a1 + 9)) + 1);
  sub_1000259E0(a1, 0xDu, 8u, a2);
}

void sub_100025C38(void **a1, char *__s)
{
  unsigned int v4 = strlen(__s) + 1;
  sub_1000259E0(a1, 0xFu, v4, __s);
}

void sub_100025CA4(void **a1, char *__s)
{
  unsigned int v4 = strlen(__s) + 1;
  sub_1000259E0(a1, 0xAu, v4, __s);
}

void sub_100025D10(void **a1, unsigned int a2, char *__s)
{
  *((_DWORD *)*a1 + 16) = bswap32(a2);
  if (__s)
  {
    unsigned int v5 = strlen(__s);
    sub_1000259E0(a1, 0x10u, v5, __s);
  }

void sub_100025DB4(void **a1, char *__s)
{
  unsigned int v4 = strlen(__s) + 1;
  sub_1000259E0(a1, 0xEu, v4, __s);
}

uint64_t sub_100025E20(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(void *)result + 60LL) = bswap32(a2);
  return result;
}

uint64_t sub_100025E70(uint64_t result, unsigned int a2)
{
  *(_WORD *)(*(void *)result + 20LL) = __rev16(a2);
  return result;
}

uint64_t sub_100025EC0(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(void *)result + 56LL) = bswap32(a2);
  return result;
}

uint64_t sub_100025F10(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(void *)result + 76LL) = bswap32(a2);
  return result;
}

uint64_t sub_100025F60(uint64_t result)
{
  dword_100079BE4 = result;
  return result;
}

DIR *sub_100025FAC(void **a1)
{
  uint64_t result = opendir("/Library/Preferences/SystemConfiguration/resolver");
  if (result)
  {
    unsigned int v3 = result;
    for (CFIndex i = readdir(result); i; CFIndex i = readdir(v3))
    {
      d_name = i->d_name;
      if (strcmp(i->d_name, ".") && strcmp(d_name, ".."))
      {
        int v6 = sub_100026094(d_name);
        BOOL v7 = v6;
        if (v6)
        {
          sub_10002529C(a1, v6);
          sub_100025840((void **)&v7);
        }
      }
    }

    return (DIR *)closedir(v3);
  }

  return result;
}

FILE *sub_100026094(const char *a1)
{
  os_log_t v61 = 0LL;
  size_t v62 = 0LL;
  uint64_t v64 = 0LL;
  memset(v63, 0, sizeof(v63));
  v65[0] = 0;
  __strlcpy_chk(v65, "/Library/Preferences/SystemConfiguration/resolver", 1024LL, 1024LL);
  __strlcat_chk(v65, "/", 1024LL, 1024LL);
  CFStringRef v59 = a1;
  __strlcat_chk(v65, a1, 1024LL, 1024LL);
  uint64_t result = fopen(v65, "r");
  if (result)
  {
    unsigned int v3 = result;
    unsigned int v4 = fgetln(result, &v62);
    if (v4)
    {
      int v6 = v4;
      uint64_t v7 = 0LL;
      int v8 = 0LL;
      uint64_t v9 = " \t";
      *(void *)&__int128 v5 = 136315394LL;
      __int128 v58 = v5;
      do
      {
        size_t v10 = v62;
        if (v62)
        {
          if (v6[v62 - 1] == 10)
          {
            v6[v62 - 1] = 0;
            size_t v10 = v62;
          }

          unsigned int v11 = (char *)reallocf(v8, v10 + 1);
          int v8 = v11;
          if (v11)
          {
            strlcpy(v11, v6, v62 + 1);
            int v60 = v8;
            unsigned int v12 = strsep(&v60, v9);
            if (v12)
            {
              size_t v13 = v12;
              int v14 = *v12;
              if (v14 != 35 && v14 != 59)
              {
                uint64_t v15 = 0LL;
                while (strcasecmp(v13, (&off_100072410)[v15]))
                {
                  v15 += 2LL;
                  if (v15 == 20)
                  {
                    os_log_t v16 = sub_10002E39C();
                    uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
                    if (__SC_log_enabled(5LL, v16, v17))
                    {
                      os_log_t v18 = v9;
                      uint64_t v19 = v7;
                      uint64_t v20 = _os_log_pack_size(22LL);
                      uint64_t v57 = &v56;
                      os_log_t v21 = (char *)&v56 - ((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                      uint64_t v22 = __error();
                      uint64_t v23 = v20;
                      uint64_t v7 = v19;
                      uint64_t v9 = v18;
                      uint64_t v24 = _os_log_pack_fill( v21,  v23,  *v22,  &_mh_execute_header,  "Unrecognized token (%s) found in: %s",  v56,  (const char *)v57);
                      *(_DWORD *)uint64_t v24 = v58;
                      *(void *)(v24 + 4) = v13;
                      *(_WORD *)(v24 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
                      *(void *)(v24 + 14) = v65;
                      __SC_log_send(5LL, v16, v17, v21);
                    }

                    goto LABEL_85;
                  }
                }

                int v25 = *((_DWORD *)&off_100072410 + 2 * v15 + 3);
                uint64_t v26 = SLODWORD((&off_100072410)[v15 + 1]);
                uint64_t v27 = strsep(&v60, v9);
                if (v27)
                {
                  int v28 = *((_DWORD *)v63 + v26);
                  *((_DWORD *)v63 + v26) = v28 + 1;
                  if (v28 < v25)
                  {
                    CFTypeID v29 = v27;
                    if (!v61)
                    {
                      os_log_t v61 = sub_10002589C();
                      if (!v61) {
                        goto LABEL_99;
                      }
                    }

                    switch((int)v26)
                    {
                      case 0:
                        size_t v30 = strlen(v29);
                        if (v30)
                        {
                          while (v29[v30 - 1] == 46)
                          {
                            v29[--v30] = 0;
                            if (!v30) {
                              goto LABEL_85;
                            }
                          }

                          sub_100025CA4((void **)&v61, v29);
                        }

                        goto LABEL_85;
                      case 1:
                        do
                        {
                          if (*v29)
                          {
                            if (!strcasecmp(v29, "scoped"))
                            {
                              uint64_t v7 = v7 | 0x1000;
                            }

                            else if (!strcasecmp(v29, "a"))
                            {
                              uint64_t v7 = v7 | 2;
                            }

                            else if (!strcasecmp(v29, "aaaa"))
                            {
                              uint64_t v7 = v7 | 4;
                            }

                            else
                            {
                              uint64_t v7 = v7;
                            }
                          }

                          CFTypeID v29 = strsep(&v60, v9);
                        }

                        while (v29);
                        goto LABEL_85;
                      case 2:
                        unsigned int v31 = if_nametoindex(v29);
                        if (v31) {
                          sub_100025D10((void **)&v61, v31, v29);
                        }
                        goto LABEL_85;
                      case 3:
                        uint64_t v32 = sub_100026768(v29);
                        if (v32)
                        {
                          uint64_t v33 = (char *)v32;
                          sub_1000258E8((void **)&v61, v32);
                          goto LABEL_48;
                        }

                        goto LABEL_85;
                      case 4:
                        uint64_t v33 = 0LL;
                        do
                        {
                          if (*v29)
                          {
                            size_t v34 = v62 + 1;
                            if (v33)
                            {
                              strlcat(v33, " ", v62 + 1);
                              strlcat(v33, v29, v62 + 1);
                            }

                            else
                            {
                              uint64_t v35 = (char *)malloc(v62 + 1);
                              if (!v35) {
                                goto LABEL_85;
                              }
                              uint64_t v33 = v35;
                              strlcpy(v35, v29, v34);
                            }
                          }

                          CFTypeID v29 = strsep(&v60, v9);
                        }

                        while (v29);
                        if (v33)
                        {
                          sub_100025DB4((void **)&v61, v33);
LABEL_48:
                          uint64_t v36 = v33;
                          goto LABEL_49;
                        }

                        goto LABEL_85;
                      case 5:
                        unint64_t v37 = strtol(v29, 0LL, 0);
                        if (!(v37 >> 16)) {
                          sub_100025E70((uint64_t)&v61, (unsigned __int16)v37);
                        }
                        goto LABEL_85;
                      case 6:
                        int v38 = 0;
                        do
                        {
                          if (v38 == 6) {
                            break;
                          }
                          size_t v39 = strlen(v29);
                          if (v39)
                          {
                            while (v29[v39 - 1] == 46)
                            {
                              v29[--v39] = 0;
                              if (!v39) {
                                goto LABEL_59;
                              }
                            }

                            sub_100025B4C((void **)&v61, v29);
                          }

LABEL_59:
                          ++v38;
                          CFTypeID v29 = strsep(&v60, v9);
                        }

                        while (v29);
                        goto LABEL_85;
                      case 7:
                        unint64_t v40 = strtol(v29, 0LL, 0);
                        if (!HIDWORD(v40)) {
                          sub_100025E20((uint64_t)&v61, v40);
                        }
                        goto LABEL_85;
                      case 8:
                        int v41 = 11;
                        break;
                      case 9:
                        unint64_t v49 = strtol(v29, 0LL, 0);
                        if (!HIDWORD(v49)) {
                          sub_100025EC0((uint64_t)&v61, v49);
                        }
                        goto LABEL_85;
                      default:
                        goto LABEL_85;
                    }

                    do
                    {
                      if (!--v41) {
                        break;
                      }
                      uint64_t v42 = strchr(v29, 47);
                      uint64_t v43 = v42;
                      if (v42) {
                        *uint64_t v42 = 0;
                      }
                      uint64_t v36 = sub_100026830(v29);
                      if (!v36) {
                        break;
                      }
                      if (*((_BYTE *)v36 + 1) != 2) {
                        goto LABEL_49;
                      }
                      unsigned int v44 = *((_DWORD *)v36 + 1);
                      free(v36);
                      if (v43)
                      {
                        uint64_t v36 = sub_100026830(v43 + 1);
                        if (!v36) {
                          break;
                        }
                        if (*((_BYTE *)v36 + 1) != 2)
                        {
LABEL_49:
                          free(v36);
                          break;
                        }

                        unsigned int v45 = *((_DWORD *)v36 + 1);
                        free(v36);
                      }

                      else
                      {
                        unsigned int v46 = bswap32(v44);
                        if ((v46 & 0x80000000) != 0)
                        {
                          if (v46 >> 30 == 2)
                          {
                            unsigned int v47 = -65536;
                          }

                          else
                          {
                            if (v46 >> 29 != 6) {
                              break;
                            }
                            unsigned int v47 = -256;
                          }
                        }

                        else
                        {
                          unsigned int v47 = -16777216;
                        }

                        unsigned int v45 = bswap32(v47);
                      }

                      uint64_t v48 = malloc(8uLL);
                      _DWORD *v48 = v44;
                      v48[1] = v45;
                      sub_100025BD0((void **)&v61, v48);
                      free(v48);
                      CFTypeID v29 = strsep(&v60, v9);
                    }

                    while (v29);
                  }
                }
              }
            }
          }
        }

LABEL_85:
        int v6 = fgetln(v3, &v62);
      }

      while (v6);
      BOOL v50 = LODWORD(v63[0]) == 0;
    }

    else
    {
      int v8 = 0LL;
      LODWORD(v7) = 0;
      BOOL v50 = 1;
    }

    uint64_t v51 = v61;
    if (v61 && v50)
    {
      uint64_t v52 = v59;
      uint64_t v53 = strrchr(v59, 47);
      if (v53) {
        os_log_t v54 = v53 + 1;
      }
      else {
        os_log_t v54 = (char *)v52;
      }
      sub_100025CA4((void **)&v61, v54);
      uint64_t v51 = v61;
    }

    if (v51)
    {
      if ((_DWORD)v7) {
        unsigned int v55 = v7;
      }
      else {
        unsigned int v55 = bswap32(v51[17]) | dword_100079BE4;
      }
      sub_100025AFC((uint64_t)&v61, v55);
    }

LABEL_99:
    if (v8) {
      free(v8);
    }
    fclose(v3);
    return (FILE *)v61;
  }

  return result;
}

unsigned __int8 *sub_100026768(const char *a1)
{
  uint64_t result = (unsigned __int8 *)sub_100026830(a1);
  if (!result)
  {
    uint64_t result = (unsigned __int8 *)strrchr(a1, 46);
    if (result)
    {
      unsigned int v3 = result;
      unint64_t v4 = strtol((const char *)result + 1, 0LL, 10);
      uint64_t result = 0LL;
      if (!(v4 >> 16))
      {
        _BYTE *v3 = 0;
        uint64_t result = (unsigned __int8 *)sub_100026830(a1);
        if (result)
        {
          int v5 = result[1];
          if (v5 == 30 || v5 == 2) {
            *((_WORD *)result + pthread_attr_setscope(&v4, 1) = bswap32(v4) >> 16;
          }
        }
      }
    }
  }

  return result;
}

void *sub_100026830(const char *a1)
{
  v7.ai_flags = 4;
  BOOL v1 = 0LL;
  if (!getaddrinfo(a1, 0LL, &v7, &v8))
  {
    uint64_t v2 = v8;
    int ai_family = v8->ai_family;
    if (ai_family == 30 || ai_family == 2)
    {
      size_t ai_addrlen = v8->ai_addrlen;
      BOOL v1 = malloc(ai_addrlen);
      memcpy(v1, v2->ai_addr, ai_addrlen);
    }

    else
    {
      BOOL v1 = 0LL;
    }

    freeaddrinfo(v2);
  }

  return v1;
}

uint64_t sub_1000268F4(uint64_t a1, const void *a2)
{
  qword_100079C08 = (uint64_t)_Block_copy(a2);
  unsigned int v3 = "com.apple.SystemConfiguration.DNSConfiguration";
  unint64_t v4 = getenv("com.apple.SystemConfiguration.DNSConfiguration");
  if (v4) {
    unsigned int v3 = v4;
  }
  if (qword_100079C10 != -1) {
    dispatch_once(&qword_100079C10, &stru_100072550);
  }
  mach_service = (char *)xpc_connection_create_mach_service(v3, (dispatch_queue_t)qword_100079C18, 1uLL);
  handler[0] = (const char *)_NSConcreteStackBlock;
  handler[1] = (const char *)0x40000000;
  handler[2] = (const char *)sub_100026BEC;
  handler[3] = (const char *)&unk_1000724B0;
  void handler[4] = mach_service;
  xpc_connection_set_event_handler((xpc_connection_t)mach_service, handler);
  xpc_connection_resume((xpc_connection_t)mach_service);
  os_log_t v6 = sub_10002E39C();
  uint64_t v7 = _SC_syslog_os_log_mapping(7LL);
  uint64_t result = __SC_log_enabled(7LL, v6, v7);
  if ((_DWORD)result)
  {
    uint64_t v9 = _os_log_pack_size(12LL);
    size_t v10 = (char *)handler - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    unsigned int v11 = __error();
    uint64_t v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "XPC server %s started", handler[0]);
    *(_DWORD *)uint64_t v12 = 136315138;
    *(void *)(v12 + 4) = v3;
    return __SC_log_send(7LL, v6, v7, v10);
  }

  return result;
}

uint64_t sub_100026AB4()
{
  if (qword_100079C10 != -1) {
    dispatch_once(&qword_100079C10, &stru_100072550);
  }
  uint64_t result = os_state_add_handler(qword_100079C18, &stru_100072510);
  if (!result)
  {
    os_log_t v1 = sub_10002E39C();
    uint64_t v2 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = __SC_log_enabled(3LL, v1, v2);
    if ((_DWORD)result)
    {
      uint64_t v3 = _os_log_pack_size(2LL);
      unint64_t v4 = (char *)&v6 - ((__chkstk_darwin(v3) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v5 = __error();
      *(_WORD *)_os_log_pack_fill( v4,  v3,  *v5,  &_mh_execute_header,  "DNS configuration: os_state_add_handler() failed") = 0;
      return __SC_log_send(3LL, v1, v2, v4);
    }
  }

  return result;
}

void sub_100026BEC(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    sub_100026F30((_xpc_connection_s *)object);
  }

  else
  {
    string = (const char *)type;
    if (type == (xpc_type_t)&_xpc_type_error)
    {
      string = xpc_dictionary_get_string(object, _xpc_error_key_description);
      if (object == &_xpc_error_connection_invalid)
      {
        os_log_t v18 = sub_10002E39C();
        uint64_t v19 = _SC_syslog_os_log_mapping(3LL);
        if (__SC_log_enabled(3LL, v18, v19))
        {
          uint64_t v20 = _os_log_pack_size(12LL);
          os_log_t v21 = (char *)v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v22 = __error();
          uint64_t v23 = _os_log_pack_fill( v21,  v20,  *v22,  &_mh_execute_header,  "DNS configuration server: %s",  (const char *)v26[0]);
          *(_DWORD *)uint64_t v23 = 136315138;
          *(void *)(v23 + 4) = string;
          __SC_log_send(3LL, v18, v19, v21);
        }

        xpc_release(*(xpc_object_t *)(a1 + 32));
      }

      else
      {
        os_log_t v6 = sub_10002E39C();
        uint64_t v7 = _SC_syslog_os_log_mapping(3LL);
        int v13 = __SC_log_enabled(3LL, v6, v7);
        if (object == &_xpc_error_connection_interrupted)
        {
          if (v13)
          {
            uint64_t v24 = _os_log_pack_size(12LL);
            uint64_t v9 = (char *)v26 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            int v25 = __error();
            uint64_t v11 = _os_log_pack_fill( v9,  v24,  *v25,  &_mh_execute_header,  "DNS configuration server: %s",  (const char *)v26[0]);
            int v12 = 136315138;
            goto LABEL_5;
          }
        }

        else if (v13)
        {
          uint64_t v14 = _os_log_pack_size(22LL);
          uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          os_log_t v16 = __error();
          uint64_t v17 = _os_log_pack_fill( v15,  v14,  *v16,  &_mh_execute_header,  "DNS configuration server: Connection error: %p : %s",  v26[0],  (const char *)v26[1]);
          *(_DWORD *)uint64_t v17 = 134218242;
          *(void *)(v17 + 4) = object;
          *(_WORD *)(v17 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
          *(void *)(v17 + 14) = string;
          __SC_log_send(3LL, v6, v7, v15);
        }
      }
    }

    else
    {
      os_log_t v6 = sub_10002E39C();
      uint64_t v7 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v6, v7))
      {
        uint64_t v8 = _os_log_pack_size(12LL);
        uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        size_t v10 = __error();
        uint64_t v11 = _os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "DNS configuration server: unknown event type : %p",  v26[0]);
        int v12 = 134217984;
LABEL_5:
        *(_DWORD *)uint64_t v11 = v12;
        *(void *)(v11 + 4) = string;
        __SC_log_send(3LL, v6, v7, v9);
      }
    }
  }

void sub_100026F30(_xpc_connection_s *a1)
{
  os_log_t v2 = sub_10002E39C();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(18LL);
    int v5 = (char *)&handler - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "<%p:%d> DNS configuration session: open",  handler,  v10);
    pid_t pid = xpc_connection_get_pid(a1);
    *(_DWORD *)uint64_t v7 = 134218240;
    *(void *)(v7 + 4) = a1;
    *(_WORD *)(v7 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v7 + 14) = pid;
    __SC_log_send(7LL, v2, v3, v5);
  }

  sub_100052094((uint64_t)&qword_100079BE8, a1);
  if (qword_100079C10 != -1) {
    dispatch_once(&qword_100079C10, &stru_100072550);
  }
  xpc_connection_set_target_queue(a1, (dispatch_queue_t)qword_100079C18);
  handler = _NSConcreteStackBlock;
  uint64_t v10 = 0x40000000LL;
  uint64_t v11 = sub_10002766C;
  int v12 = &unk_100072570;
  int v13 = a1;
  xpc_connection_set_event_handler(a1, &handler);
  xpc_connection_resume(a1);
}

uint64_t sub_1000270DC(CFDataRef *a1)
{
  CFDataRef v1 = *a1;
  if (*a1)
  {
    uint64_t v2 = *((void *)v1 + 3);
    os_log_t v3 = sub_10002E39C();
    uint64_t v4 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v3, v4))
    {
      uint64_t v5 = _os_log_pack_size(12LL);
      os_log_t v6 = (char *)&block[-1] - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v7 = __error();
      uint64_t v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "DNS configuration updated: %llu", v19);
      *(_DWORD *)uint64_t v8 = 134217984;
      *(void *)(v8 + 4) = v2;
      __SC_log_send(6LL, v3, v4, v6);
    }

    CFDataRef v1 = CFDataCreate(0LL, (const UInt8 *)v1, bswap32(*((_DWORD *)v1 + 12)) + 56LL);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  if (qword_100079C10 != -1) {
    dispatch_once(&qword_100079C10, &stru_100072550);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100027370;
  block[3] = &unk_1000724D0;
  block[4] = v1;
  void block[5] = v2;
  dispatch_sync((dispatch_queue_t)qword_100079C18, block);
  if (v1) {
    CFRelease(v1);
  }
  sub_100052044((uint64_t)&qword_100079BE8);
  if (qword_100079C08) {
    (*(void (**)(void))(qword_100079C08 + 16))();
  }
  uint64_t v9 = (const char *)dns_configuration_notify_key();
  if (v9)
  {
    uint32_t v10 = notify_post(v9);
    if (v10)
    {
      uint32_t v11 = v10;
      os_log_t v12 = sub_10002E39C();
      uint64_t v13 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v12, v13))
      {
        uint64_t v14 = _os_log_pack_size(8LL);
        uint64_t v15 = (char *)&block[-1] - ((__chkstk_darwin(v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        os_log_t v16 = __error();
        uint64_t v17 = (_DWORD *)_os_log_pack_fill( v15,  v14,  *v16,  &_mh_execute_header,  "notify_post() failed: %u",  v19);
        *uint64_t v17 = 67109120;
        v17[1] = v11;
        __SC_log_send(3LL, v12, v13, v15);
      }
    }
  }

  return 1LL;
}

void sub_100027370(uint64_t a1)
{
}

os_state_data_s *__cdecl sub_1000273C0(id a1, os_state_hints_s *a2)
{
  if (qword_100079BE8)
  {
    CFIndex Length = CFDataGetLength((CFDataRef)qword_100079BE8);
    size_t v3 = Length + 200;
    if ((unint64_t)(Length + 200) > 0x8000)
    {
      os_log_t v4 = sub_10002E39C();
      uint64_t v5 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v4, v5))
      {
        uint64_t v6 = _os_log_pack_size(22LL);
        uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v8 = __error();
        uint64_t v9 = _os_log_pack_fill( v7,  v6,  *v8,  &_mh_execute_header,  "DNS configuration: state data too large (%zu > %zu)",  v20[0],  v20[1]);
        *(_DWORD *)uint64_t v9 = 134218240;
        *(void *)(v9 + 4) = v3;
        *(_WORD *)(v9 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
        *(void *)(v9 + 14) = 0x8000LL;
        __SC_log_send(3LL, v4, v5, v7);
      }

      return 0LL;
    }

    int64_t v10 = Length;
  }

  else
  {
    int64_t v10 = 0LL;
    size_t v3 = 200LL;
  }

  uint32_t v11 = (os_state_data_s *)calloc(1uLL, v3);
  if (!v11)
  {
    os_log_t v14 = sub_10002E39C();
    uint64_t v15 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v14, v15))
    {
      uint64_t v16 = _os_log_pack_size(2LL);
      uint64_t v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v18 = __error();
      *(_WORD *)_os_log_pack_fill( v17,  v16,  *v18,  &_mh_execute_header,  "DNS configuration: could not allocate state data") = 0;
      __SC_log_send(3LL, v14, v15, v17);
    }

    return 0LL;
  }

  os_log_t v12 = v11;
  v11->var0 = 3;
  v11->var1.var1 = v10;
  __strlcpy_chk(&v11->var2, "SystemConfiguration", 64LL, 64LL);
  __strlcpy_chk(v12->var2.var1, "dnsinfo", 64LL, 64LL);
  __strlcpy_chk(v12->var3, "DNS Configuration", 64LL, 64LL);
  if (v10 >= 1)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)qword_100079BE8);
    memcpy(v12->var4, BytePtr, v10);
  }

  return v12;
}

void sub_100027610(id a1)
{
  qword_100079C18 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.DNSConfiguration.server", 0LL);
}

void sub_10002766C(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    sub_100027A78(*(_xpc_connection_s **)(a1 + 32), object);
    return;
  }

  uint64_t v5 = type;
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    os_log_t v6 = sub_10002E39C();
    uint64_t v7 = _SC_syslog_os_log_mapping(3LL);
    uint64_t v8 = _os_log_pack_size(28LL);
    uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    int64_t v10 = __error();
    uint64_t v11 = _os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "<%p:%d> unknown event type : %p",  v35,  v36,  v37);
    os_log_t v12 = *(_xpc_connection_s **)(a1 + 32);
    pid_t pid = xpc_connection_get_pid(v12);
    *(_DWORD *)uint64_t v11 = 134218496;
    *(void *)(v11 + 4) = v12;
    *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v11 + 14) = pid;
    __int16 v14 = 2048;
    goto LABEL_5;
  }

  string = xpc_dictionary_get_string(object, _xpc_error_key_description);
  if (object == &_xpc_error_connection_invalid)
  {
    os_log_t v23 = sub_10002E39C();
    uint64_t v24 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v23, v24))
    {
      uint64_t v25 = _os_log_pack_size(18LL);
      uint64_t v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v27 = __error();
      uint64_t v28 = _os_log_pack_fill( v26,  v25,  *v27,  &_mh_execute_header,  "<%p:%d> DNS configuration session: close",  v35,  v36);
      CFTypeID v29 = *(_xpc_connection_s **)(a1 + 32);
      pid_t v30 = xpc_connection_get_pid(v29);
      *(_DWORD *)uint64_t v28 = 134218240;
      *(void *)(v28 + 4) = v29;
      *(_WORD *)(v28 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v28 + 14) = v30;
      __SC_log_send(7LL, v23, v24, v26);
    }

    if (sub_1000523F0((uint64_t)&qword_100079BE8, *(void *)(a1 + 32)))
    {
      sub_100052044((uint64_t)&qword_100079BE8);
      if (qword_100079C08) {
        (*(void (**)(void))(qword_100079C08 + 16))();
      }
    }
  }

  else
  {
    uint64_t v5 = (void *)string;
    os_log_t v6 = sub_10002E39C();
    uint64_t v7 = _SC_syslog_os_log_mapping(3LL);
    int v16 = __SC_log_enabled(3LL, v6, v7);
    if (object == &_xpc_error_connection_interrupted)
    {
      if (v16)
      {
        uint64_t v31 = _os_log_pack_size(28LL);
        uint64_t v9 = (char *)&v35 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v32 = __error();
        uint64_t v11 = _os_log_pack_fill(v9, v31, *v32, &_mh_execute_header, "<%p:%d> %s", v35, v36, v37);
        uint64_t v33 = *(_xpc_connection_s **)(a1 + 32);
        pid_t v34 = xpc_connection_get_pid(v33);
        *(_DWORD *)uint64_t v11 = 134218498;
        *(void *)(v11 + 4) = v33;
        *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
        *(_DWORD *)(v11 + 14) = v34;
        __int16 v14 = 2080;
LABEL_5:
        *(_WORD *)(v11 + 18) = v14;
        *(void *)(v11 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v5;
        __SC_log_send(3LL, v6, v7, v9);
      }
    }

    else if (v16)
    {
      uint64_t v17 = _os_log_pack_size(38LL);
      os_log_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v19 = __error();
      uint64_t v20 = _os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "<%p:%d> Connection error: %p : %s",  v35,  v36,  v37,  v38);
      os_log_t v21 = *(_xpc_connection_s **)(a1 + 32);
      pid_t v22 = xpc_connection_get_pid(v21);
      *(_DWORD *)uint64_t v20 = 134218754;
      *(void *)(v20 + 4) = v21;
      *(_WORD *)(v20 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v20 + 14) = v22;
      *(_WORD *)(v20 + 18) = 2048;
      *(void *)(v20 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = object;
      *(_WORD *)(v20 + 28) = 2080;
      *(void *)(v20 + 3sub_10000F430((uint64_t)__str, 0) = v5;
      __SC_log_send(3LL, v6, v7, v18);
    }
  }

void sub_100027A78(_xpc_connection_s *a1, xpc_object_t xdict)
{
  int64_t int64 = xpc_dictionary_get_int64(xdict, "request_op");
  if (int64 == 65538)
  {
    sub_100027ED4(a1, xdict);
  }

  else
  {
    int64_t v5 = int64;
    if (int64 == 65537)
    {
      sub_100027C3C(a1, xdict);
    }

    else
    {
      os_log_t v6 = sub_10002E39C();
      uint64_t v7 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v6, v7))
      {
        uint64_t v8 = _os_log_pack_size(22LL);
        uint64_t v9 = (char *)v12 - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int64_t v10 = __error();
        uint64_t v11 = _os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "<%p> unknown request : %lld",  v12[0],  v12[1]);
        *(_DWORD *)uint64_t v11 = 134218240;
        *(void *)(v11 + 4) = a1;
        *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
        *(void *)(v11 + 14) = v5;
        __SC_log_send(3LL, v6, v7, v9);
      }
    }
  }

void sub_100027C3C(_xpc_connection_s *a1, xpc_object_t xdict)
{
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    os_log_t v6 = reply;
    uint64_t v7 = (const __CFData *)sub_100052164((uint64_t)&qword_100079BE8, (uint64_t)a1, v26);
    string = xpc_dictionary_get_string(xdict, "proc_name");
    os_log_t v9 = sub_10002E39C();
    uint64_t v10 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v9, v10))
    {
      if (string) {
        uint64_t v11 = string;
      }
      else {
        uint64_t v11 = "???";
      }
      uint64_t v12 = _os_log_pack_size(38LL);
      uint64_t v13 = (char *)v26 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __int16 v14 = __error();
      uint64_t v15 = _os_log_pack_fill( v13,  v12,  *v14,  &_mh_execute_header,  "<%p:%s[%d]> DNS configuration copy: %llu",  v26[0],  (const char *)v26[1],  v27,  v28);
      pid_t pid = xpc_connection_get_pid(a1);
      uint64_t v17 = v26[0];
      *(_DWORD *)uint64_t v15 = 134218754;
      *(void *)(v15 + 4) = a1;
      *(_WORD *)(v15 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v15 + 14) = v11;
      *(_WORD *)(v15 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v15 + 24) = pid;
      *(_WORD *)(v15 + 28) = 2048;
      *(void *)(v15 + 3sub_10000F430((uint64_t)__str, 0) = v17;
      __SC_log_send(7LL, v9, v10, v13);
    }

    if (v7)
    {
      BytePtr = CFDataGetBytePtr(v7);
      size_t Length = CFDataGetLength(v7);
      xpc_dictionary_set_data(v6, "configuration", BytePtr, Length);
    }

    xpc_connection_send_message(remote_connection, v6);
    xpc_release(v6);
  }

  else
  {
    os_log_t v20 = sub_10002E39C();
    uint64_t v21 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v20, v21))
    {
      uint64_t v22 = _os_log_pack_size(12LL);
      os_log_t v23 = (char *)v26 - ((__chkstk_darwin(v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v24 = __error();
      uint64_t v25 = _os_log_pack_fill( v23,  v22,  *v24,  &_mh_execute_header,  "<%p> _dnsinfo_copy: xpc_dictionary_create_reply: failed",  v26[0]);
      *(_DWORD *)uint64_t v25 = 134217984;
      *(void *)(v25 + 4) = a1;
      __SC_log_send(3LL, v20, v21, v23);
    }
  }

uint64_t sub_100027ED4(_xpc_connection_s *a1, xpc_object_t xdict)
{
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, "generation");
  os_log_t v4 = sub_10002E39C();
  uint64_t v5 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v4, v5))
  {
    uint64_t v6 = _os_log_pack_size(28LL);
    uint64_t v7 = (char *)&v12 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v8 = __error();
    uint64_t v9 = _os_log_pack_fill( v7,  v6,  *v8,  &_mh_execute_header,  "<%p:%d> DNS configuration ack: %llu",  v12,  v13,  v14);
    pid_t pid = xpc_connection_get_pid(a1);
    *(_DWORD *)uint64_t v9 = 134218496;
    *(void *)(v9 + 4) = a1;
    *(_WORD *)(v9 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v9 + 14) = pid;
    *(_WORD *)(v9 + 18) = 2048;
    *(void *)(v9 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = uint64;
    __SC_log_send(7LL, v4, v5, v7);
  }

  sub_100052210((uint64_t)&qword_100079BE8, a1, uint64);
  sub_100052044((uint64_t)&qword_100079BE8);
  uint64_t result = qword_100079C08;
  if (qword_100079C08) {
    return (*(uint64_t (**)(void))(qword_100079C08 + 16))();
  }
  return result;
}

void sub_100028778()
{
  if (qword_100079C20)
  {
    os_log_t v0 = sub_10002E39C();
    uint64_t v1 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v0, v1))
    {
      uint64_t v2 = _os_log_pack_size(22LL);
      size_t v3 = (char *)v7 - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v4 = __error();
      uint64_t v5 = _os_log_pack_fill(v3, v2, *v4, &_mh_execute_header, "%s: count %ld", v7[0], v7[1]);
      CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_100079C20);
      *(_DWORD *)uint64_t v5 = 136315394;
      *(void *)(v5 + 4) = "effective_ifindex_free";
      *(_WORD *)(v5 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
      *(void *)(v5 + 14) = Count;
      __SC_log_send(7LL, v0, v1, v3);
    }

    if (qword_100079C20)
    {
      CFRelease((CFTypeRef)qword_100079C20);
      qword_100079C20 = 0LL;
    }
  }

uint64_t sub_1000288B8(uint64_t a1, void *key)
{
  if ((_DWORD)key
    && qword_100079C20
    && (unsigned int Value = CFDictionaryGetValue((CFDictionaryRef)qword_100079C20, (const void *)key)) != 0)
  {
    if (Value == -1) {
      return 0LL;
    }
    else {
      return Value;
    }
  }

  else
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __strlcpy_chk(&v16, a1, 16LL, 16LL);
    int v6 = sub_100028AB0();
    if (v6 == -1 || ioctl(v6, 0xC020699DuLL, &v16) == -1)
    {
      return 0LL;
    }

    else
    {
      uint64_t v7 = v17;
      if ((_DWORD)v17 && sub_100028BF4(v17, (uint64_t)v15))
      {
        os_log_t v8 = sub_10002E39C();
        uint64_t v9 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v8, v9))
        {
          uint64_t v10 = _os_log_pack_size(44LL);
          uint64_t v11 = (char *)v15 - ((__chkstk_darwin(v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v12 = __error();
          uint64_t v13 = _os_log_pack_fill( v11,  v10,  *v12,  &_mh_execute_header,  "%s: %s (%u): effective %s (%u)",  v15[0],  v15[1],  (_DWORD)v16,  *((const char **)&v16 + 1),  (_DWORD)v17);
          *(_DWORD *)uint64_t v13 = 136316162;
          *(void *)(v13 + 4) = "effective_ifindex_get";
          *(_WORD *)(v13 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
          *(void *)(v13 + 14) = a1;
          *(_WORD *)(v13 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
          *(_DWORD *)(v13 + 24) = (_DWORD)key;
          *(_WORD *)(v13 + 28) = 2080;
          *(void *)(v13 + 3sub_10000F430((uint64_t)__str, 0) = v15;
          *(_WORD *)(v13 + 38) = 1024;
          *(_DWORD *)(v13 + 4sub_10000F430((uint64_t)__str, 0) = v7;
          __SC_log_send(5LL, v8, v9, v11);
        }

        uint64_t v5 = v7;
      }

      else
      {
        uint64_t v5 = 0LL;
        uint64_t v7 = 0xFFFFFFFFLL;
      }

      sub_100028CDC(key, (void *)v7);
    }
  }

  return v5;
}

uint64_t sub_100028AB0()
{
  if (dword_1000798D8 == -1)
  {
    dword_1000798D8 = socket(2, 2, 0);
    if (dword_1000798D8 == -1)
    {
      os_log_t v0 = sub_10002E39C();
      uint64_t v1 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v0, v1))
      {
        uint64_t v2 = _os_log_pack_size(12LL);
        size_t v3 = (char *)&v9 - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        os_log_t v4 = __error();
        uint64_t v5 = _os_log_pack_fill(v3, v2, *v4, &_mh_execute_header, "socket() failed: %s", v9);
        int v6 = __error();
        uint64_t v7 = strerror(*v6);
        *(_DWORD *)uint64_t v5 = 136315138;
        *(void *)(v5 + 4) = v7;
        __SC_log_send(3LL, v0, v1, v3);
      }
    }
  }

  return dword_1000798D8;
}

uint64_t sub_100028BF4(int a1, uint64_t a2)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000LL;
  uint64_t v9 = 0LL;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  v4[2] = sub_100028EFC;
  v4[3] = &unk_1000725C0;
  int v5 = a1;
  v4[4] = &v6;
  v4[5] = a2;
  if (qword_100079C38 != -1) {
    dispatch_once(&qword_100079C38, &stru_100072680);
  }
  dispatch_sync((dispatch_queue_t)qword_100079C40, v4);
  uint64_t v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_100028CDC(void *key, void *value)
{
  unsigned int v2 = value;
  unsigned int v3 = key;
  CFSetRef Mutable = (__CFDictionary *)qword_100079C20;
  if (!qword_100079C20)
  {
    CFSetRef Mutable = CFDictionaryCreateMutable( 0LL,  0LL,  (const CFDictionaryKeyCallBacks *)&unk_1000798E0,  (const CFDictionaryValueCallBacks *)&unk_100079910);
    qword_100079C20 = (uint64_t)Mutable;
  }

  CFDictionarySetValue(Mutable, (const void *)v3, (const void *)v2);
}

uint64_t sub_100028D68(uint64_t a1)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000LL;
  int v8 = 0;
  if (qword_100079C38 != -1) {
    dispatch_once(&qword_100079C38, &stru_100072680);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100028E54;
  block[3] = &unk_100072598;
  block[4] = &v5;
  void block[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_100079C40, block);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100028E54(uint64_t result)
{
  uint64_t v1 = result;
  if (qword_100079C28)
  {
    int v2 = *(_DWORD *)qword_100079C28;
    if (*(_DWORD *)qword_100079C28)
    {
      unsigned int v3 = (_DWORD *)(qword_100079C28 + 16);
      do
      {
        uint64_t result = *((void *)v3 - 1);
        if (!result) {
          break;
        }
        uint64_t result = strcmp((const char *)result, *(const char **)(v1 + 40));
        if (!(_DWORD)result) {
          goto LABEL_9;
        }
        int v4 = *v3;
        v3 += 4;
        int v2 = v4;
      }

      while (v4);
    }
  }

  else
  {
    uint64_t result = if_nametoindex(*(const char **)(result + 40));
    int v2 = result;
LABEL_9:
    *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8LL) + 24LL) = v2;
  }

  return result;
}

char *sub_100028EFC(char *result)
{
  uint64_t v1 = result;
  if (qword_100079C28)
  {
    int v2 = *(_DWORD *)qword_100079C28;
    if (*(_DWORD *)qword_100079C28)
    {
      for (uint64_t i = qword_100079C28 + 8; *(void *)i; i += 16LL)
      {
        if (v2 == *((_DWORD *)result + 12))
        {
          *(void *)(*(void *)(*((void *)result + 4) + 8LL) + 24LL) = *((void *)result + 5);
          return (char *)strlcpy(*((char **)result + 5), *(const char **)i, 0x10uLL);
        }

        int v2 = *(_DWORD *)(i + 8);
        if (!v2) {
          return result;
        }
      }
    }
  }

  else
  {
    uint64_t result = if_indextoname(*((_DWORD *)result + 12), *((char **)result + 5));
    *(void *)(*(void *)(*((void *)v1 + 4) + 8LL) + 24LL) = result;
  }

  return result;
}

void sub_100028FE0()
{
  if (qword_100079C38 != -1) {
    dispatch_once(&qword_100079C38, &stru_100072680);
  }
  dispatch_sync((dispatch_queue_t)qword_100079C40, &stru_100072600);
}

void sub_10002905C(id a1)
{
  if (qword_100079C28)
  {
    if_freenameindex((if_nameindex *)qword_100079C28);
    qword_100079C28 = 0LL;
  }

void sub_1000290BC()
{
  if (qword_100079C38 != -1) {
    dispatch_once(&qword_100079C38, &stru_100072680);
  }
  dispatch_sync((dispatch_queue_t)qword_100079C40, &stru_100072640);
}

void sub_100029138(id a1)
{
  if (qword_100079C28)
  {
    if_freenameindex((if_nameindex *)qword_100079C28);
    qword_100079C28 = 0LL;
  }

  qword_100079C28 = (uint64_t)if_nameindex();
}

char *sub_1000291A0(int a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  int v2 = (char *)a2;
  if (!sub_100028BF4(a1, a2)) {
    snprintf(v2, 0x10uLL, "[%u]", a1);
  }
  return v2;
}

uint64_t sub_100029224()
{
  uint64_t result = dword_100079C30;
  if (!dword_100079C30)
  {
    uint64_t result = sub_100028D68((uint64_t)"lo0");
    dword_100079C30 = result;
  }

  return result;
}

uint64_t sub_10002928C()
{
  uint64_t result = dword_1000798D8;
  if (dword_1000798D8 != -1)
  {
    uint64_t result = close(dword_1000798D8);
    dword_1000798D8 = -1;
  }

  return result;
}

uint64_t sub_1000292F4()
{
  if (dword_1000798DC == -1)
  {
    dword_1000798DC = socket(30, 2, 0);
    if (dword_1000798DC == -1)
    {
      os_log_t v0 = sub_10002E39C();
      uint64_t v1 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v0, v1))
      {
        uint64_t v2 = _os_log_pack_size(12LL);
        unsigned int v3 = (char *)&v9 - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v4 = __error();
        uint64_t v5 = _os_log_pack_fill(v3, v2, *v4, &_mh_execute_header, "socket() failed: %s", v9);
        uint64_t v6 = __error();
        uint64_t v7 = strerror(*v6);
        *(_DWORD *)uint64_t v5 = 136315138;
        *(void *)(v5 + 4) = v7;
        __SC_log_send(3LL, v0, v1, v3);
      }
    }
  }

  return dword_1000798DC;
}

uint64_t sub_100029438()
{
  uint64_t result = dword_1000798DC;
  if (dword_1000798DC != -1)
  {
    uint64_t result = close(dword_1000798DC);
    dword_1000798DC = -1;
  }

  return result;
}

uint64_t sub_1000294A0(int a1, __int16 a2, _OWORD *a3, char a4)
{
  __int128 v6 = 0u;
  LOWORD(v5[0]) = 7708;
  *(_OWORD *)((char *)v5 + 8) = *a3;
  BYTE12(v5[1]) = a4;
  WORD4(v6) = a2;
  return ioctl(a1, 0xC0307586uLL, v5);
}

uint64_t sub_10002951C(int a1, __int16 a2, _OWORD *a3)
{
  __int128 v5 = 0u;
  LOWORD(v4[0]) = 7708;
  *(_OWORD *)((char *)v4 + 8) = *a3;
  WORD4(v5) = a2;
  return ioctl(a1, 0xC0307587uLL, v4);
}

uint64_t sub_100029594(int a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  uint64_t v13 = 0LL;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __strlcpy_chk(&v11, a2, 16LL, 16LL);
  LOBYTE(v1pthread_attr_setdetachstate(&v4, 2) = a3;
  if (a5)
  {
    if (a5 >= 0x14) {
      char v9 = 20;
    }
    else {
      char v9 = a5;
    }
    BYTE1(v1pthread_attr_setdetachstate(&v4, 2) = v9;
    __memcpy_chk((char *)&v12 + 4, a4);
  }

  return ioctl(a1, 0xC02869AEuLL, &v11);
}

uint64_t sub_10002965C(unsigned int a1)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  uint64_t v13 = 0LL;
  __strlcpy_chk(v12, "lo0", 16LL, 16LL);
  if (!a1)
  {
    a1 = dword_100079C30;
    if (!dword_100079C30)
    {
      a1 = sub_100028D68((uint64_t)"lo0");
      dword_100079C30 = a1;
    }
  }

  uint64_t v13 = a1;
  int v2 = sub_1000292F4();
  if (v2 < 0) {
    return 0LL;
  }
  if (ioctl(v2, 0xC0186955uLL, v12) != -1) {
    return 1LL;
  }
  os_log_t v4 = sub_10002E39C();
  uint64_t v5 = _SC_syslog_os_log_mapping(3LL);
  uint64_t result = __SC_log_enabled(3LL, v4, v5);
  if ((_DWORD)result)
  {
    uint64_t v6 = _os_log_pack_size(12LL);
    uint64_t v7 = (char *)v12 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    int v8 = __error();
    uint64_t v9 = _os_log_pack_fill( v7,  v6,  *v8,  &_mh_execute_header,  "ioctl(SIOCSDEFIFACE_IN6) failed: %s",  v12[0]);
    uint64_t v10 = __error();
    __int128 v11 = strerror(*v10);
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v9 + 4) = v11;
    __SC_log_send(3LL, v4, v5, v7);
    return 0LL;
  }

  return result;
}

CFStringRef sub_1000297F4(uint64_t a1)
{
  return CFStringCreateWithFormat(0LL, 0LL, @"%u", a1);
}

BOOL sub_100029850(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_10002989C(uint64_t result)
{
  return result;
}

void sub_1000298E4(id a1)
{
  qword_100079C40 = (uint64_t)dispatch_queue_create("my_if_nametoindex queue", 0LL);
}

uint64_t sub_100029940(uint64_t a1, void *a2)
{
  uint64_t result = sub_100029ADC(a1, a2);
  if ((_DWORD)result)
  {
    unsigned int v3 = dispatch_queue_create("IPMonitorControlServer", 0LL);
    mach_service = xpc_connection_create_mach_service("com.apple.SystemConfiguration.IPMonitorControl", v3, 1uLL);
    if (mach_service)
    {
      uint64_t v5 = mach_service;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 0x40000000LL;
      handler[2] = sub_100029E4C;
      handler[3] = &unk_1000726C8;
      void handler[4] = mach_service;
      qword_100079C68 = (uint64_t)v3;
      xpc_connection_set_event_handler(mach_service, handler);
      xpc_connection_resume(v5);
      os_state_add_handler(qword_100079C68, &stru_100072750);
      return 1LL;
    }

    else
    {
      os_log_t v6 = sub_10002E39C();
      uint64_t v7 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v6, v7))
      {
        uint64_t v8 = _os_log_pack_size(2LL);
        uint64_t v9 = (char *)handler - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v10 = __error();
        *(_WORD *)_os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "IPMonitorControlServer: failed to create server") = 0;
        __SC_log_send(3LL, v6, v7, v9);
      }

      dispatch_release(v3);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100029ADC(uint64_t a1, void *aBlock)
{
  if (qword_100079C48)
  {
    os_log_t v2 = sub_10002E39C();
    uint64_t v3 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v2, v3);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v5 = _os_log_pack_size(12LL);
    os_log_t v6 = (char *)&v11 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v7 = *__error();
    uint64_t v8 = _os_log_pack_fill(v6, v5, v7, &_mh_execute_header, "%s: already called");
    goto LABEL_9;
  }

  if (a1 && aBlock)
  {
    qword_100079C48 = a1;
    qword_100079C50 = (uint64_t)_Block_copy(aBlock);
    return 1LL;
  }

  os_log_t v2 = sub_10002E39C();
  uint64_t v3 = _SC_syslog_os_log_mapping(5LL);
  uint64_t result = __SC_log_enabled(5LL, v2, v3);
  if ((_DWORD)result)
  {
    uint64_t v9 = _os_log_pack_size(12LL);
    os_log_t v6 = (char *)&v11 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v10 = *__error();
    uint64_t v8 = _os_log_pack_fill(v6, v9, v10, &_mh_execute_header, "%s: queue or handler are NULL");
LABEL_9:
    *(_DWORD *)uint64_t v8 = 136315138;
    *(void *)(v8 + 4) = "SetNotificationInfo";
    __SC_log_send(5LL, v2, v3, v6);
    return 0LL;
  }

  return result;
}

uint64_t sub_100029C94(void *a1)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000LL;
  uint64_t v5 = 0LL;
  os_log_t v6 = &v5;
  uint64_t v7 = 0x2000000000LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100029D74;
  block[3] = &unk_1000726A8;
  block[4] = &v5;
  void block[5] = &v8;
  dispatch_sync((dispatch_queue_t)qword_100079C68, block);
  *a1 = v6[3];
  uint64_t v2 = v9[3];
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(&v8, 8);
  return v2;
}

void sub_100029D74(uint64_t a1)
{
  uint64_t v7 = 0LL;
  uint64_t v2 = (void *)S_ControlSessions;
  if (S_ControlSessions)
  {
    do
    {
      uint64_t v3 = (const __CFDictionary *)v2[6];
      if (v3) {
        CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)sub_10002BE3C, &v7);
      }
      os_log_t v4 = (const __CFDictionary *)v2[5];
      if (v4) {
        CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)sub_10002BF20, &v7);
      }
      uint64_t v2 = (void *)*v2;
    }

    while (v2);
    uint64_t v5 = v7;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5;
  uint64_t v6 = qword_100079C58;
  qword_100079C58 = 0LL;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v6;
}

void sub_100029E4C(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    handler[0] = _NSConcreteStackBlock;
    handler[1] = (const void *)0x40000000;
    handler[2] = sub_10002A138;
    handler[3] = &unk_1000726E8;
    void handler[4] = object;
    xpc_connection_set_event_handler((xpc_connection_t)object, handler);
    xpc_connection_set_target_queue((xpc_connection_t)object, (dispatch_queue_t)qword_100079C68);
    xpc_connection_resume((xpc_connection_t)object);
    return;
  }

  xpc_type_t v5 = type;
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    os_log_t v6 = sub_10002E39C();
    uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v8 = _os_log_pack_size(12LL);
    uint64_t v9 = (char *)handler - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v10 = __error();
    uint64_t v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "unknown event %p", handler[0]);
    *(_DWORD *)uint64_t v11 = 134217984;
    *(void *)(v11 + 4) = v5;
    os_log_t v12 = v6;
LABEL_9:
    __SC_log_send(5LL, v12, v7, v9);
    return;
  }

  string = xpc_dictionary_get_string(object, _xpc_error_key_description);
  os_log_t v14 = sub_10002E39C();
  uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
  int v15 = __SC_log_enabled(5LL, v14, v7);
  if (object != &_xpc_error_connection_invalid)
  {
    if (!v15) {
      return;
    }
    uint64_t v16 = _os_log_pack_size(12LL);
    uint64_t v9 = (char *)handler - ((__chkstk_darwin(v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __int128 v17 = __error();
    uint64_t v18 = _os_log_pack_fill(v9, v16, *v17, &_mh_execute_header, "%s", (const char *)handler[0]);
    *(_DWORD *)uint64_t v18 = 136315138;
    *(void *)(v18 + 4) = string;
    os_log_t v12 = v14;
    goto LABEL_9;
  }

  if (v15)
  {
    uint64_t v19 = _os_log_pack_size(12LL);
    os_log_t v20 = (char *)handler - ((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v21 = __error();
    uint64_t v22 = _os_log_pack_fill(v20, v19, *v21, &_mh_execute_header, "%s", (const char *)handler[0]);
    *(_DWORD *)uint64_t v22 = 136315138;
    *(void *)(v22 + 4) = string;
    __SC_log_send(5LL, v14, v7, v20);
  }

  xpc_release(*(xpc_object_t *)(a1 + 32));
}

void sub_10002A138(uint64_t a1, void *a2)
{
}

void sub_10002A180(_xpc_connection_s *a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    int int64 = xpc_dictionary_get_int64(object, "Type");
    xpc_object_t reply = xpc_dictionary_create_reply(object);
    uint64_t v13 = reply;
    switch(int64)
    {
      case 1:
        unsigned int v14 = sub_10002A860(a1, object);
        goto LABEL_83;
      case 2:
        if (!reply) {
          return;
        }
        uint64_t context = xpc_connection_get_context(a1);
        if (!context) {
          goto LABEL_77;
        }
        uint64_t v18 = context;
        string = xpc_dictionary_get_string(object, "InterfaceName");
        if (string)
        {
          LODWORD(valuePtr) = 0;
          if (*((void *)v18 + 5)
            && (CFStringRef v20 = CFStringCreateWithCString(0LL, string, 0x8000100u),
                unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(*((CFDictionaryRef *)v18 + 5), v20),
                CFRelease(v20),
                Value))
          {
            CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
            int64_t v22 = valuePtr;
          }

          else
          {
            int64_t v22 = 0LL;
          }

          xpc_dictionary_set_int64(v13, "PrimaryRank", v22);
          unsigned int v14 = 0;
        }

        else
        {
LABEL_74:
          unsigned int v14 = 22;
        }

        goto LABEL_84;
      case 3:
        unsigned int v14 = sub_10002ABDC(a1, object);
        goto LABEL_83;
      case 4:
        if (!reply) {
          return;
        }
        os_log_t v23 = xpc_dictionary_get_string(object, "InterfaceName");
        if (!v23) {
          goto LABEL_74;
        }
        CFStringRef v24 = CFStringCreateWithCString(0LL, v23, 0x8000100u);
        int v25 = xpc_dictionary_get_int64(object, "Advisory");
        uint64_t v26 = (void *)S_ControlSessions;
        if (!S_ControlSessions) {
          goto LABEL_30;
        }
        int v27 = v25;
        break;
      case 5:
        if (!reply) {
          return;
        }
        uint64_t v31 = &S_ControlSessions;
        do
          uint64_t v31 = (uint64_t *)*v31;
        while (v31 && !v31[6]);
        xpc_dictionary_set_BOOL(reply, "AdvisoryIsSet", v31 != 0LL);
        goto LABEL_82;
      case 6:
        if (!reply) {
          return;
        }
        uint64_t v32 = xpc_dictionary_get_string(object, "InterfaceName");
        if (!v32) {
          goto LABEL_74;
        }
        CFStringRef v33 = CFStringCreateWithCString(0LL, v32, 0x8000100u);
        uint64_t v34 = S_ControlSessions;
        if (!S_ControlSessions) {
          goto LABEL_76;
        }
        xpc_object_t empty = 0LL;
        do
        {
          uint64_t v36 = *(const __CFDictionary **)(v34 + 40);
          if (v36)
          {
            unint64_t v37 = (const __CFNumber *)CFDictionaryGetValue(v36, v33);
            if (v37)
            {
              CFNumberGetValue(v37, kCFNumberSInt32Type, &valuePtr);
              if (!empty) {
                xpc_object_t empty = xpc_array_create_empty();
              }
              int v38 = *(const char **)(v34 + 32);
              int64_t v39 = *(int *)(v34 + 24);
              int64_t v40 = valuePtr;
              xpc_object_t v41 = xpc_dictionary_create_empty();
              xpc_dictionary_set_string(v41, "ProcessName", v38);
              xpc_dictionary_set_int64(v41, "ProcessID", v39);
              xpc_dictionary_set_int64(v41, "PrimaryRank", v40);
              xpc_array_append_value(empty, v41);
              xpc_release(v41);
            }
          }

          uint64_t v34 = *(void *)v34;
        }

        while (v34);
        CFRelease(v33);
        if (!empty) {
          goto LABEL_75;
        }
        uint64_t v42 = "RankAssertionInfo";
        goto LABEL_73;
      case 7:
        if (!reply) {
          return;
        }
        uint64_t v43 = xpc_dictionary_get_string(object, "InterfaceName");
        if (!v43) {
          goto LABEL_74;
        }
        CFStringRef v33 = CFStringCreateWithCString(0LL, v43, 0x8000100u);
        uint64_t v44 = S_ControlSessions;
        if (!S_ControlSessions)
        {
LABEL_76:
          CFRelease(v33);
LABEL_77:
          unsigned int v14 = 2;
          goto LABEL_84;
        }

        xpc_object_t empty = 0LL;
        do
        {
          unsigned int v45 = *(const __CFDictionary **)(v44 + 48);
          if (v45)
          {
            unsigned int v46 = (const __CFNumber *)CFDictionaryGetValue(v45, v33);
            if (v46)
            {
              CFNumberGetValue(v46, kCFNumberSInt32Type, &valuePtr);
              if (!empty) {
                xpc_object_t empty = xpc_array_create_empty();
              }
              unsigned int v47 = *(const char **)(v44 + 32);
              int64_t v48 = *(int *)(v44 + 24);
              int64_t v49 = valuePtr;
              xpc_object_t v50 = xpc_dictionary_create_empty();
              xpc_dictionary_set_string(v50, "ProcessName", v47);
              xpc_dictionary_set_int64(v50, "ProcessID", v48);
              xpc_dictionary_set_int64(v50, "Advisory", v49);
              xpc_array_append_value(empty, v50);
              xpc_release(v50);
            }
          }

          uint64_t v44 = *(void *)v44;
        }

        while (v44);
        CFRelease(v33);
        if (!empty)
        {
LABEL_75:
          unsigned int v14 = 2;
          goto LABEL_83;
        }

        uint64_t v42 = "AdvisoryInfo";
LABEL_73:
        xpc_dictionary_set_value(v13, v42, empty);
        xpc_release(empty);
        goto LABEL_82;
      case 8:
        if (!reply) {
          return;
        }
        unsigned int valuePtr = 0LL;
        uint64_t v51 = (void *)S_ControlSessions;
        if (!S_ControlSessions) {
          goto LABEL_77;
        }
        do
        {
          uint64_t v52 = (const __CFDictionary *)v51[5];
          if (v52) {
            CFDictionaryApplyFunction(v52, (CFDictionaryApplierFunction)sub_10002B5B0, &valuePtr);
          }
          uint64_t v51 = (void *)*v51;
        }

        while (v51);
        goto LABEL_71;
      case 9:
        if (!reply) {
          return;
        }
        unsigned int valuePtr = 0LL;
        uint64_t v53 = (void *)S_ControlSessions;
        if (!S_ControlSessions) {
          goto LABEL_77;
        }
        do
        {
          os_log_t v54 = (const __CFDictionary *)v53[6];
          if (v54) {
            CFDictionaryApplyFunction(v54, (CFDictionaryApplierFunction)sub_10002B5B0, &valuePtr);
          }
          uint64_t v53 = (void *)*v53;
        }

        while (v53);
LABEL_71:
        xpc_object_t empty = valuePtr;
        if (!valuePtr) {
          goto LABEL_75;
        }
        uint64_t v42 = "InterfaceNames";
        goto LABEL_73;
      default:
        unsigned int v14 = 22;
        goto LABEL_83;
    }

    while (1)
    {
      uint64_t v28 = (const __CFDictionary *)v26[6];
      if (v28)
      {
        CFTypeID v29 = (const __CFNumber *)CFDictionaryGetValue(v28, v24);
        if (v29)
        {
          if (!v27) {
            break;
          }
          CFNumberGetValue(v29, kCFNumberSInt32Type, &valuePtr);
          if ((_DWORD)valuePtr == v27) {
            break;
          }
        }
      }

      uint64_t v26 = (void *)*v26;
      if (!v26)
      {
LABEL_30:
        BOOL v30 = 0;
        goto LABEL_81;
      }
    }

    BOOL v30 = 1;
LABEL_81:
    xpc_dictionary_set_BOOL(v13, "AdvisoryIsSet", v30);
    CFRelease(v24);
LABEL_82:
    unsigned int v14 = 0;
LABEL_83:
    if (v13)
    {
LABEL_84:
      xpc_dictionary_set_int64(v13, "Error", v14);
      remote_connection = xpc_dictionary_get_remote_connection(object);
      xpc_connection_send_message(remote_connection, v13);
      xpc_release(v13);
    }
  }

  else
  {
    if (type != (xpc_type_t)&_xpc_type_error)
    {
      os_log_t v5 = sub_10002E39C();
      uint64_t v6 = _SC_syslog_os_log_mapping(5LL);
      uint64_t v7 = _os_log_pack_size(2LL);
      uint64_t v8 = (char *)&valuePtr - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v9 = __error();
      *(_WORD *)_os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "unexpected event") = 0;
      uint64_t v10 = 5LL;
      goto LABEL_5;
    }

    if (object == &_xpc_error_connection_invalid)
    {
      sub_10002AFD4(a1);
    }

    else if (object == &_xpc_error_connection_interrupted)
    {
      os_log_t v5 = sub_10002E39C();
      uint64_t v6 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v5, v6))
      {
        uint64_t v15 = _os_log_pack_size(2LL);
        uint64_t v8 = (char *)&valuePtr - ((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v16 = __error();
        *(_WORD *)_os_log_pack_fill(v8, v15, *v16, &_mh_execute_header, "connection interrupted") = 0;
        uint64_t v10 = 6LL;
LABEL_5:
        __SC_log_send(v10, v5, v6, v8);
      }
    }
  }

uint64_t sub_10002A860(_xpc_connection_s *a1, void *a2)
{
  if (xpc_connection_get_euid(a1))
  {
    os_log_t v4 = sub_10002E39C();
    uint64_t v5 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v4, v5))
    {
      uint64_t v6 = _os_log_pack_size(18LL);
      uint64_t v7 = (char *)&v28 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v8 = __error();
      uint64_t v9 = _os_log_pack_fill( v7,  v6,  *v8,  &_mh_execute_header,  "connection %p pid %d permission denied",  v28,  v29);
      pid_t pid = xpc_connection_get_pid(a1);
      *(_DWORD *)uint64_t v9 = 134218240;
      *(void *)(v9 + 4) = a1;
      *(_WORD *)(v9 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v9 + 14) = pid;
      __SC_log_send(6LL, v4, v5, v7);
    }

    return 1LL;
  }

  string = xpc_dictionary_get_string(a2, "InterfaceName");
  if (!string) {
    return 22LL;
  }
  uint64_t v13 = string;
  unsigned int int64 = xpc_dictionary_get_int64(a2, "PrimaryRank");
  unsigned int v15 = int64;
  uint64_t v16 = off_100072770[int64];
  uint64_t context = (CFMutableDictionaryRef *)xpc_connection_get_context(a1);
  if (!context) {
    uint64_t context = (CFMutableDictionaryRef *)sub_10002B0EC(a1, a2);
  }
  HIDWORD(v28) = v15;
  if (context[5])
  {
    uint64_t v18 = (__CFString *)CFStringCreateWithCString(0LL, v13, 0x8000100u);
    if (!v15)
    {
      CFDictionaryRemoveValue(context[5], v18);
      if (!CFDictionaryGetCount(context[5]))
      {
        CFRelease(context[5]);
        context[5] = 0LL;
      }

      goto LABEL_19;
    }

uint64_t sub_10002ABDC(_xpc_connection_s *a1, void *a2)
{
  if (xpc_connection_get_euid(a1))
  {
    os_log_t v4 = (void *)xpc_connection_copy_entitlement_value( a1,  "com.apple.SystemConfiguration.SCNetworkInterfaceSetAdvisory");
    if (!v4)
    {
LABEL_14:
      os_log_t v15 = sub_10002E39C();
      uint64_t v16 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v15, v16))
      {
        uint64_t v17 = _os_log_pack_size(18LL);
        uint64_t v18 = (char *)&v33 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFNumberRef v19 = __error();
        uint64_t v20 = _os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "connection %p pid %d permission denied",  v33,  v34);
        pid_t pid = xpc_connection_get_pid(a1);
        *(_DWORD *)uint64_t v20 = 134218240;
        *(void *)(v20 + 4) = a1;
        *(_WORD *)(v20 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
        *(_DWORD *)(v20 + 14) = pid;
        __SC_log_send(6LL, v15, v16, v18);
      }

      return 1LL;
    }

    uint64_t v5 = v4;
    if (xpc_get_type(v4) != (xpc_type_t)&_xpc_type_BOOL)
    {
      xpc_release(v5);
      goto LABEL_14;
    }

    BOOL value = xpc_BOOL_get_value(v5);
    xpc_release(v5);
    if (!value) {
      goto LABEL_14;
    }
  }

  string = xpc_dictionary_get_string(a2, "InterfaceName");
  if (!string) {
    return 22LL;
  }
  uint64_t v8 = string;
  uint64_t v9 = xpc_dictionary_get_string(a2, "Reason");
  unsigned int int64 = xpc_dictionary_get_int64(a2, "Advisory");
  unsigned int v11 = int64;
  os_log_t v12 = off_100072798[int64];
  uint64_t context = (CFMutableDictionaryRef *)xpc_connection_get_context(a1);
  if (!context) {
    uint64_t context = (CFMutableDictionaryRef *)sub_10002B0EC(a1, a2);
  }
  HIDWORD(v33) = v11;
  if (context[6])
  {
    unsigned int v14 = (__CFString *)CFStringCreateWithCString(0LL, v8, 0x8000100u);
    if (!v11)
    {
      CFDictionaryRemoveValue(context[6], v14);
      if (!CFDictionaryGetCount(context[6]))
      {
        CFRelease(context[6]);
        context[6] = 0LL;
      }

      goto LABEL_22;
    }

void sub_10002AFD4(_xpc_connection_s *a1)
{
  os_log_t v2 = sub_10002E39C();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(12LL);
    uint64_t v5 = (char *)&v9 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "IPMonitorControlServer: client %p went away",  v9);
    *(_DWORD *)uint64_t v7 = 134217984;
    *(void *)(v7 + 4) = a1;
    __SC_log_send(7LL, v2, v3, v5);
  }

  uint64_t context = (uint64_t *)xpc_connection_get_context(a1);
  if (context) {
    sub_10002B734(context);
  }
}

_OWORD *sub_10002B0EC(_xpc_connection_s *a1, void *a2)
{
  uint64_t v4 = malloc(0x38uLL);
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  _OWORD v4[2] = 0u;
  *((void *)v4 + 6) = 0LL;
  *((void *)v4 + pthread_attr_setdetachstate(&v4, 2) = a1;
  *((_DWORD *)v4 + 6) = xpc_connection_get_pid(a1);
  string = xpc_dictionary_get_string(a2, "ProcessName");
  if (!string) {
    string = "<unknown>";
  }
  *((void *)v4 + 4) = strdup(string);
  xpc_connection_set_finalizer_f(a1, (xpc_finalizer_t)sub_10002B2C0);
  xpc_connection_set_context(a1, v4);
  uint64_t v6 = S_ControlSessions;
  *(void *)uint64_t v4 = S_ControlSessions;
  if (v6) {
    *(void *)(v6 + 8) = v4;
  }
  S_ControlSessions = (uint64_t)v4;
  *((void *)v4 + pthread_attr_setscope(&v4, 1) = &S_ControlSessions;
  os_log_t v7 = sub_10002E39C();
  uint64_t v8 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v7, v8))
  {
    uint64_t v9 = _os_log_pack_size(38LL);
    uint64_t v10 = (char *)&v16 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    unsigned int v11 = __error();
    uint64_t v12 = _os_log_pack_fill( v10,  v9,  *v11,  &_mh_execute_header,  "Created %s [%d] session %p (connection %p)",  v16,  v17,  v18,  v19);
    uint64_t v13 = *((void *)v4 + 4);
    int v14 = *((_DWORD *)v4 + 6);
    *(_DWORD *)uint64_t v12 = 136315906;
    *(void *)(v12 + 4) = v13;
    *(_WORD *)(v12 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v12 + 14) = v14;
    *(_WORD *)(v12 + 18) = 2048;
    *(void *)(v12 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v4;
    *(_WORD *)(v12 + 28) = 2048;
    *(void *)(v12 + 3sub_10000F430((uint64_t)__str, 0) = a1;
    __SC_log_send(7LL, v7, v8, v10);
  }

  return v4;
}

void sub_10002B2C0(uint64_t a1)
{
  os_log_t v2 = sub_10002E39C();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(28LL);
    uint64_t v5 = (char *)&v10 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "Releasing %s [%d] session %p",  v10,  v11,  v12);
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)uint64_t v7 = 136315650;
    *(void *)(v7 + 4) = v8;
    *(_WORD *)(v7 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v7 + 14) = v9;
    *(_WORD *)(v7 + 18) = 2048;
    *(void *)(v7 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = a1;
    __SC_log_send(7LL, v2, v3, v5);
  }

  free(*(void **)(a1 + 32));
  free((void *)a1);
}

void sub_10002B3F8(void *value)
{
  if (qword_100079C58)
  {
    v3.length = qword_100079C60;
    v3.location = 0LL;
    if (CFArrayContainsValue((CFArrayRef)qword_100079C58, v3, value)) {
      return;
    }
    CFArrayAppendValue((CFMutableArrayRef)qword_100079C58, value);
    uint64_t v2 = qword_100079C60 + 1;
  }

  else
  {
    qword_100079C58 = (uint64_t)CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    CFArrayAppendValue((CFMutableArrayRef)qword_100079C58, value);
    uint64_t v2 = 1LL;
  }

  qword_100079C60 = v2;
}

void sub_10002B4B0(CFStringRef ifname)
{
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  ifname,  @"RankAssertion");
  SCDynamicStoreNotifyValue(0LL, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

void sub_10002B530(CFStringRef ifname)
{
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  ifname,  @"Advisory");
  SCDynamicStoreNotifyValue(0LL, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

void sub_10002B5B0(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v4 = (char *)_SC_cfstring_to_cstring(a1, 0LL, 0LL, 134217984LL);
  uint64_t v5 = *a3;
  if (!*a3)
  {
    xpc_object_t empty = xpc_array_create_empty();
    *a3 = empty;
    goto LABEL_5;
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000LL;
  char v12 = 0;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 0x40000000LL;
  applier[2] = sub_10002B6B8;
  applier[3] = &unk_100072710;
  applier[4] = &v9;
  applier[5] = v4;
  xpc_array_apply(v5, applier);
  int v6 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  if (!v6)
  {
    xpc_object_t empty = *a3;
LABEL_5:
    xpc_array_set_string(empty, 0xFFFFFFFFFFFFFFFFLL, v4);
  }

  CFAllocatorDeallocate(0LL, v4);
}

BOOL sub_10002B6B8(uint64_t a1, int a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  int v5 = strcmp(string_ptr, *(const char **)(a1 + 40));
  if (!v5) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  return v5 != 0;
}

void sub_10002B734(uint64_t *a1)
{
  os_log_t v2 = sub_10002E39C();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(12LL);
    int v5 = (char *)&v28 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    int v6 = __error();
    uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "Invalidating %p", v28);
    *(_DWORD *)uint64_t v7 = 134217984;
    *(void *)(v7 + 4) = a1;
    __SC_log_send(7LL, v2, v3, v5);
  }

  uint64_t v8 = *a1;
  if (*a1) {
    *(void *)(v8 + 8) = a1[1];
  }
  *(void *)a1[1] = v8;
  uint64_t v9 = a1[6];
  if (!a1[5])
  {
    if (!v9) {
      return;
    }
    goto LABEL_9;
  }

  if (v9)
  {
LABEL_9:
    os_log_t v10 = sub_10002E39C();
    uint64_t v11 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v10, v11))
    {
      uint64_t v12 = _os_log_pack_size(18LL);
      uint64_t v13 = (char *)&v28 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v14 = __error();
      uint64_t v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "pid %d removing advisories %@");
      pid_t pid = xpc_connection_get_pid((xpc_connection_t)a1[2]);
      uint64_t v17 = a1[6];
      *(_DWORD *)uint64_t v15 = 67109378;
      *(_DWORD *)(v15 + 4) = pid;
      *(_WORD *)(v15 + 8) = 2112;
      *(void *)(v15 + 1sub_10000F430((uint64_t)__str, 0) = v17;
      __SC_log_send(5LL, v10, v11, v13);
    }

    CFDictionaryApplyFunction((CFDictionaryRef)a1[6], (CFDictionaryApplierFunction)sub_10002BA5C, 0LL);
    uint64_t v18 = (const void *)a1[6];
    if (v18)
    {
      CFRelease(v18);
      a1[6] = 0LL;
    }
  }

  if (a1[5])
  {
    os_log_t v19 = sub_10002E39C();
    uint64_t v20 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v19, v20))
    {
      uint64_t v21 = _os_log_pack_size(18LL);
      uint64_t v22 = (char *)&v28 - ((__chkstk_darwin(v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFNumberRef v23 = __error();
      uint64_t v24 = _os_log_pack_fill(v22, v21, *v23, &_mh_execute_header, "pid %d removing assertions %@");
      pid_t v25 = xpc_connection_get_pid((xpc_connection_t)a1[2]);
      uint64_t v26 = a1[5];
      *(_DWORD *)uint64_t v24 = 67109378;
      *(_DWORD *)(v24 + 4) = v25;
      *(_WORD *)(v24 + 8) = 2112;
      *(void *)(v24 + 1sub_10000F430((uint64_t)__str, 0) = v26;
      __SC_log_send(5LL, v19, v20, v22);
    }

    CFDictionaryApplyFunction((CFDictionaryRef)a1[5], (CFDictionaryApplierFunction)sub_10002BAB4, 0LL);
    int v27 = (const void *)a1[5];
    if (v27)
    {
      CFRelease(v27);
      a1[5] = 0LL;
    }
  }

  if (qword_100079C48)
  {
    if (qword_100079C50) {
      dispatch_async((dispatch_queue_t)qword_100079C48, (dispatch_block_t)qword_100079C50);
    }
  }

void sub_10002BA5C(__CFString *a1)
{
}

void sub_10002BAB4(__CFString *a1)
{
}

os_state_data_s *__cdecl sub_10002BB0C(id a1, os_state_hints_s *a2)
{
  return (os_state_data_s *)sub_10002BB50();
}

_DWORD *sub_10002BB50()
{
  CFSetRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  for (uint64_t i = S_ControlSessions; i; uint64_t i = *(void *)i)
  {
    if (*(void *)(i + 40) || *(void *)(i + 48))
    {
      CFNumberRef v2 = CFNumberCreate(0LL, kCFNumberSInt32Type, (const void *)(i + 24));
      CFStringRef v3 = CFStringCreateWithCString(0LL, *(const char **)(i + 32), 0x8000100u);
      keys[0] = @"ProcessID";
      keys[1] = @"ProcessName";
      values = v2;
      CFStringRef v23 = v3;
      uint64_t v4 = *(void *)(i + 40);
      if (v4)
      {
        keys[2] = @"Assertions";
        uint64_t v24 = v4;
        CFIndex v5 = 3LL;
      }

      else
      {
        CFIndex v5 = 2LL;
      }

      int v6 = *(void **)(i + 48);
      if (v6)
      {
        keys[v5] = @"Advisories";
        *(&values + v5++) = v6;
      }

      CFDictionaryRef v7 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)&values,  v5,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      CFRelease(v2);
      CFRelease(v3);
      if (v7)
      {
        CFArrayAppendValue(Mutable, v7);
        CFRelease(v7);
      }
    }
  }

  Data = CFPropertyListCreateData(0LL, Mutable, kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
  CFRelease(Mutable);
  CFIndex Length = CFDataGetLength(Data);
  size_t v10 = Length + 200;
  if ((unint64_t)(Length + 200) <= 0x8000)
  {
    size_t v18 = Length;
    uint64_t v17 = calloc(1uLL, v10);
    *uint64_t v17 = 1;
    v17[1] = v18;
    __strlcpy_chk(v17 + 34, "IPMonitorControl Sessions", 64LL, 64LL);
    BytePtr = CFDataGetBytePtr(Data);
    memcpy(v17 + 50, BytePtr, v18);
  }

  else
  {
    os_log_t v11 = sub_10002E39C();
    uint64_t v12 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v11, v12))
    {
      uint64_t v13 = _os_log_pack_size(28LL);
      int v14 = (char *)&v21 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v15 = __error();
      uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "%s: state data too large (%zu > %d)",  v21,  (size_t)values,  (_DWORD)v23);
      *(_DWORD *)uint64_t v16 = 136315650;
      *(void *)(v16 + 4) = "IPMonitorControlCopyOSStateData";
      *(_WORD *)(v16 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
      *(void *)(v16 + 14) = v10;
      *(_WORD *)(v16 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v16 + 24) = 0x8000;
      __SC_log_send(5LL, v11, v12, v14);
    }

    uint64_t v17 = 0LL;
  }

  CFRelease(Data);
  return v17;
}

void sub_10002BE3C(void *key, uint64_t a2, CFDictionaryRef *a3)
{
  CFNumberRef v5 = (CFNumberRef)qword_100079C70;
  if (!qword_100079C70)
  {
    int valuePtr = 2;
    CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
    qword_100079C70 = (uint64_t)v5;
  }

  if (!*a3)
  {
    CFSetRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    *a3 = Mutable;
    goto LABEL_8;
  }

  unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(*a3, key);
  if (!Value || CFNumberCompare(v5, Value, 0LL) == kCFCompareGreaterThan)
  {
    CFSetRef Mutable = *a3;
LABEL_8:
    CFDictionarySetValue(Mutable, key, v5);
  }

void sub_10002BF20(void *key, const void *a2, CFDictionaryRef *a3)
{
  if (!*a3)
  {
    CFSetRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    *a3 = Mutable;
    goto LABEL_6;
  }

  unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(*a3, key);
  if (!Value || CFNumberCompare((CFNumberRef)a2, Value, 0LL) == kCFCompareGreaterThan)
  {
    CFSetRef Mutable = *a3;
LABEL_6:
    CFDictionarySetValue(Mutable, key, a2);
  }

void *sub_10002D6E8(unsigned int *a1)
{
  if (!a1) {
    return 0LL;
  }
  size_t v2 = 4LL * a1[1] + 224LL * a1[1] + 40;
  CFStringRef v3 = malloc(v2);
  uint64_t v4 = v3;
  if (v3) {
    memcpy(v3, a1, v2);
  }
  return v4;
}

_DWORD *sub_10002D788(_DWORD *a1, unsigned int a2)
{
  if (!a1 && !a2) {
    return 0LL;
  }
  size_t v5 = 4LL * a2 + 224LL * a2 + 40;
  uint64_t v4 = malloc(v5);
  bzero(v4, v5);
  *uint64_t v4 = 538379777;
  v4[1] = a2;
  if (a1)
  {
    uint64_t v6 = a1[3];
    v4[3] = v6;
    uint64_t v7 = a1[2];
    _OWORD v4[2] = v7;
    if ((int)v7 <= 0)
    {
      int v8 = v4[1];
      int v9 = v8 - a1[1];
    }

    else
    {
      memcpy(v4 + 10, a1 + 10, 112 * v7);
      int v8 = v4[1];
      int v9 = v8 - a1[1];
      size_t v10 = v4 + 16;
      do
      {
        if (*v10) {
          *v10 += v9;
        }
        v10 += 28;
        LODWORD(v7) = v7 - 1;
      }

      while ((_DWORD)v7);
    }

    int v11 = v4[3];
    if (v11 >= 1)
    {
      uint64_t v12 = &v4[28 * v8 + 16];
      do
      {
        if (*v12) {
          *v12 -= v9;
        }
        v12 += 28;
        --v11;
      }

      while (v11);
    }

    sub_10002D928(v4);
    free(a1);
  }

  else
  {
    *((void *)v4 + pthread_attr_setscope(&v4, 1) = 0LL;
  }

  return v4;
}

_DWORD *sub_10002D928(_DWORD *result)
{
  uint64_t v1 = result;
  result[4] = 0;
  int v2 = result[1];
  if (v2 < 1)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    int v3 = result[2];
    BOOL v4 = v3 <= 0;
    BOOL v5 = v3 > 0;
    if (v4) {
      uint64_t v6 = 0LL;
    }
    else {
      uint64_t v6 = (uint64_t)(result + 10);
    }
    if ((int)result[3] >= 1)
    {
      uint64_t v7 = (uint64_t)&result[28 * v2 + 10];
      BOOL v8 = 1;
LABEL_10:
      int v9 = 0;
      LODWORD(v1sub_10000F430((uint64_t)__str, 0) = 0;
      while (1)
      {
        if (v5 && v8)
        {
          if (*(_DWORD *)(v6 + 28) > *(_DWORD *)(v7 + 28)) {
            goto LABEL_18;
          }
        }

        else if (!v5)
        {
LABEL_18:
          uint64_t result = (_DWORD *)sub_10003061C((uint64_t)v1, (char *)v7);
          ++v9;
          int v11 = v1[1];
          if (v11 <= v9 || v1[3] <= v9) {
            uint64_t v7 = 0LL;
          }
          else {
            uint64_t v7 = (uint64_t)&v1[28 * v11 + 10 + 28 * v9];
          }
          goto LABEL_23;
        }

        uint64_t result = (_DWORD *)sub_10003061C((uint64_t)v1, (char *)v6);
        uint64_t v10 = (int)v10 + 1LL;
        else {
          uint64_t v6 = (uint64_t)&v1[28 * v10 + 10];
        }
LABEL_23:
        BOOL v5 = v6 != 0;
        BOOL v8 = v7 != 0;
        if (!(v6 | v7)) {
          return result;
        }
      }
    }
  }

  BOOL v5 = v6 != 0;
  if (v6)
  {
    BOOL v8 = 0;
    uint64_t v7 = 0LL;
    goto LABEL_10;
  }

  return result;
}

uint64_t sub_10002DA9C( _DWORD *a1, const char *a2, uint64_t a3, char a4, unsigned int a5, _OWORD *a6, unsigned __int8 *a7, int a8)
{
  if (!a1) {
    sub_100061C9C(0LL, (uint64_t)a2, a3);
  }
  int v8 = a3;
  int v11 = a1 + 3;
  uint64_t v12 = 3LL;
  if ((_DWORD)a3 == 2) {
    uint64_t v12 = 2LL;
  }
  uint64_t v42 = a1 + 2;
  if ((_DWORD)a3 == 2) {
    uint64_t v13 = a1 + 2;
  }
  else {
    uint64_t v13 = a1 + 3;
  }
  int v14 = a1[v12];
  if (v14 <= a1[1] && v14 >= 1)
  {
    for (uint64_t i = 0LL; v14 != (_DWORD)i; ++i)
    {
      int v31 = a1[1];
      if (v8 != 30) {
        int v31 = 0;
      }
      uint64_t v32 = i + v31;
      uint64_t v20 = (uint64_t)&a1[28 * v32 + 10];
      ifname = (const char *)nwi_ifstate_get_ifname(v20);
      if (!strcmp(a2, ifname))
      {
        unsigned int v34 = a5;
        if (a1[28 * v32 + 17] < a5) {
          return 0LL;
        }
        goto LABEL_44;
      }
    }
  }

  if (v8 == 2)
  {
    int v17 = a1[1];
    int v16 = a1[2];
    size_t v18 = v42;
    int v19 = v16;
  }

  else
  {
    int v17 = a1[1];
    int v16 = a1[3];
    int v19 = v16 + v17;
    size_t v18 = v11;
  }

  if (v16 != v17)
  {
    int v21 = v19;
    uint64_t v20 = (uint64_t)&a1[28 * v19 + 10];
    if (v16 >= 1) {
      *(void *)&a1[28 * v19 - 14] &= ~0x1000uLL;
    }
    *(_OWORD *)&a1[28 * v19 + 30] = 0u;
    *(_OWORD *)&a1[28 * v19 + 34] = 0u;
    *(_OWORD *)&a1[28 * v19 + 22] = 0u;
    *(_OWORD *)&a1[28 * v19 + 26] = 0u;
    *(_OWORD *)&a1[28 * v19 + 14] = 0u;
    *(_OWORD *)&a1[28 * v19 + 18] = 0u;
    *(_OWORD *)uint64_t v20 = 0u;
    __strlcpy_chk(&a1[28 * v19 + 10], a2, 16LL, 16LL);
    uint64_t v22 = &a1[28 * v21];
    *((_BYTE *)v22 + 7pthread_attr_setdetachstate(&v4, 2) = v8;
    *((void *)v22 + 7) |= 0x1000uLL;
    ++*v18;
    uint64_t v23 = 2LL;
    else {
      int v11 = v42;
    }
    int v24 = a1[v23];
    if (v24 >= 1 && v24 <= a1[1])
    {
      for (uint64_t j = 0LL; v24 != (_DWORD)j; ++j)
      {
        int v26 = a1[1];
        uint64_t v27 = j + v26;
        uint64_t v28 = (uint64_t)&a1[28 * v27 + 10];
        uint64_t v29 = (const char *)nwi_ifstate_get_ifname(v28);
        if (!strcmp((const char *)v20, v29))
        {
          a1[28 * v21 + 16] = -1227133513 * ((unint64_t)(v28 - v20) >> 4);
          a1[28 * v27 + 16] = -1227133513 * ((unint64_t)(v20 - v28) >> 4);
          break;
        }
      }
    }

    unsigned int v34 = a5;
LABEL_44:
    if (a6)
    {
      if (v8 == 30)
      {
        *(_OWORD *)(v20 + 36) = *a6;
        if (!a7) {
          goto LABEL_53;
        }
LABEL_49:
        if (a7[1])
        {
          size_t v35 = *a7;
          goto LABEL_54;
        }

LABEL_53:
        *(void *)(v20 + 64) = 0LL;
        *(void *)(v20 + 7pthread_attr_setdetachstate(&v4, 2) = 0LL;
        *(_DWORD *)(v20 + 88) = 0;
        *(void *)(v20 + 8sub_10000F430((uint64_t)__str, 0) = 0LL;
LABEL_54:
        *(_DWORD *)(v20 + 6sub_10000F430((uint64_t)__str, 0) = a8;
        *(_DWORD *)(v20 + 28) = v34;
        *(_BYTE *)(v20 + 16) = a4;
        return v20;
      }

      if (v8 == 2) {
        *(_DWORD *)(v20 + 36) = *(_DWORD *)a6;
      }
    }

    if (!a7) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }

  syslog(3, "nwi_state_add_ifstate: full at count %d\n", v17);
  return 0LL;
}

int *sub_10002DDD8(int *a1, int *a2)
{
  if (a1)
  {
    if (a1[2] <= a1[3]) {
      unsigned int v4 = a1[3];
    }
    else {
      unsigned int v4 = a1[2];
    }
    if (!a2)
    {
      if (v4)
      {
        BOOL v5 = sub_10002D788(0LL, v4);
LABEL_20:
        if (a1[2] >= 1)
        {
          int v12 = 0;
          uint64_t v13 = (__int128 *)(a1 + 10);
          do
          {
            sub_100030940(v5, v13);
            ++v12;
            v13 += 7;
          }

          while (v12 < a1[2]);
        }

        if (a1[3] >= 1)
        {
          int v14 = 0;
          uint64_t v15 = (__int128 *)&a1[28 * a1[1] + 10];
          do
          {
            sub_100030940(v5, v15);
            ++v14;
            v15 += 7;
          }

          while (v14 < a1[3]);
        }

        return v5;
      }

      return 0LL;
    }
  }

  else
  {
    if (!a2) {
      return 0LL;
    }
    unsigned int v4 = 0;
  }

  int v6 = a2[2];
  if (v6 <= a2[3]) {
    int v6 = a2[3];
  }
  unsigned int v7 = v6 + v4;
  if (!v7) {
    return 0LL;
  }
  BOOL v5 = sub_10002D788(0LL, v7);
  if (a2[2] >= 1)
  {
    int v8 = 0;
    int v9 = (__int128 *)(a2 + 10);
    do
    {
      sub_1000306FC(v5, (uint64_t)a1, v9);
      ++v8;
      v9 += 7;
    }

    while (v8 < a2[2]);
  }

  if (a2[3] >= 1)
  {
    int v10 = 0;
    int v11 = (__int128 *)&a2[28 * a2[1] + 10];
    do
    {
      sub_1000306FC(v5, (uint64_t)a1, v11);
      ++v10;
      v11 += 7;
    }

    while (v10 < a2[3]);
  }

  if (a1) {
    goto LABEL_20;
  }
  return v5;
}

uint64_t sub_10002DF8C(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (a2 && a3)
  {
    BOOL v5 = (_DWORD *)result;
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v23 = a2 + 40;
    if (*(int *)(a2 + 8) >= 1)
    {
      int v7 = 0;
      uint64_t v8 = a2 + 40;
      do
      {
        uint64_t result = sub_10002E198(a3, (const char *)v8);
        uint64_t v9 = v6;
        if (!(_DWORD)result)
        {
          if (!v5 || ((v10 = v5[2], (int)v10 >= 1) ? (BOOL v11 = (int)v10 <= v5[1]) : (BOOL v11 = 0), !v11)) {
LABEL_37:
          }
            sub_100061CC0();
          uint64_t v12 = 0LL;
          uint64_t v13 = (uint64_t *)(v5 + 23);
          while (1)
          {
            ifname = (const char *)nwi_ifstate_get_ifname((char *)v13 - 52);
            uint64_t result = strcmp((const char *)v8, ifname);
            if (!(_DWORD)result) {
              break;
            }
            ++v12;
            v13 += 14;
            if (v10 == v12) {
              goto LABEL_37;
            }
          }

          uint64_t v9 = *v13;
        }

        *(void *)(v8 + 5pthread_attr_setdetachstate(&v4, 2) = v9;
        ++v7;
        v8 += 112LL;
      }

      while (v7 < *(_DWORD *)(a2 + 8));
    }

    if (*(int *)(a2 + 12) >= 1)
    {
      int v15 = 0;
      uint64_t v16 = v23 + 112LL * *(int *)(a2 + 4);
      do
      {
        uint64_t result = nwi_ifstate_get_generation(v16);
        if (result != v6)
        {
          uint64_t result = sub_10002E198(a3, (const char *)v16);
          uint64_t v17 = v6;
          if (!(_DWORD)result)
          {
            if (!v5 || (int v18 = v5[3], v18 < 1) || v18 > v5[1]) {
LABEL_38:
            }
              sub_100061CE8();
            int v19 = 0;
            while (1)
            {
              int v20 = v5[1];
              if (v20 <= v19 || v5[3] <= v19) {
                goto LABEL_38;
              }
              int v21 = v19 + v20;
              uint64_t v22 = (const char *)nwi_ifstate_get_ifname(&v5[28 * v19 + 10 + 28 * v20]);
              uint64_t result = strcmp((const char *)v16, v22);
              if (!(_DWORD)result) {
                break;
              }
              if (v18 == ++v19) {
                goto LABEL_38;
              }
            }

            uint64_t v17 = *(void *)&v5[28 * v21 + 23];
          }

          *(void *)(v16 + 5pthread_attr_setdetachstate(&v4, 2) = v17;
        }

        ++v15;
        v16 += 112LL;
      }

      while (v15 < *(_DWORD *)(a2 + 12));
    }
  }

  return result;
}

BOOL sub_10002E198(_DWORD *a1, const char *a2)
{
  if (a1)
  {
    uint64_t v4 = a1[2];
    if ((int)v4 >= 1 && (int)v4 <= a1[1])
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = a1 + 10;
      while (v9 < (int)a1[1] && v9 < (int)a1[2])
      {
        ifname = (const char *)nwi_ifstate_get_ifname(v10);
        if (!strcmp(a2, ifname))
        {
          if ((*((_BYTE *)v10 + 17) & 0xF) == 0) {
            break;
          }
          return 1LL;
        }

        ++v9;
        v10 += 28;
        if (v4 == v9) {
          break;
        }
      }
    }

    int v6 = a1[3];
    if (v6 >= 1 && v6 <= a1[1])
    {
      for (int i = 0; v6 != i; ++i)
      {
        int v13 = a1[1];
        if (v13 <= i || a1[3] <= i) {
          break;
        }
        int v14 = i + v13;
        int v15 = (const char *)nwi_ifstate_get_ifname(&a1[28 * i + 10 + 28 * v13]);
        if (!strcmp(a2, v15)) {
          return (a1[28 * v14 + 14] & 0xF00) != 0;
        }
      }
    }
  }

  return 0LL;
}

double sub_10002E2F4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 3pthread_attr_setdetachstate(&v4, 2) = 0LL;
    CC_SHA256_Init(&v6);
    CC_SHA256_Update(&v6, (const void *)a1, 228 * *(_DWORD *)(a1 + 4) + 40);
    CC_SHA256_Final((unsigned __int8 *)a2, &v6);
    *(void *)(a1 + 3pthread_attr_setdetachstate(&v4, 2) = v4;
  }

  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

  return result;
}

os_log_t sub_10002E39C()
{
  os_log_t result = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)result;
  }

  return result;
}

uint64_t sub_10002E40C(int a1, const void *a2, void *a3, size_t a4)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2
    || CFGetTypeID(a2) != TypeID
    || a1 != 2 && (a1 != 30 || a4 < 0x10)
    || (_SC_cfstring_to_cstring(a2, v10, 128LL, 1536LL), uint64_t result = inet_pton(a1, v10, a3), (_DWORD)result != 1))
  {
    bzero(a3, a4);
    return 0LL;
  }

  return result;
}

CFDictionaryRef sub_10002E4E8(const __CFDictionary *a1, int a2)
{
  int v2 = (const void **)&kSCEntNetIPv6;
  if (a2 == 2) {
    int v2 = (const void **)&kSCEntNetIPv4;
  }
  uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(a1, *v2);
  if (result)
  {
    uint64_t result = (const __CFDictionary *)sub_100030AC8(result);
    if (result)
    {
      __int16 v4 = *((_WORD *)result + 4);
      if ((v4 & 2) != 0) {
        return (v4 & 1 == 0);
      }
      else {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_10002E570(const __CFDictionary *a1)
{
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, kSCEntNetIPv4);
  if (result || (uint64_t result = (uint64_t)CFDictionaryGetValue(a1, kSCEntNetIPv6)) != 0)
  {
    uint64_t result = (uint64_t)sub_10002E66C((const __CFDictionary *)result);
    if (result)
    {
      uint64_t result = CFStringGetCString((CFStringRef)result, buffer, 16LL, 0x8000100u);
      if ((_DWORD)result)
      {
        uint64_t result = nwi_state_get_ifstate(qword_100079C80, buffer);
        if (result)
        {
          uint64_t v3 = *(void *)(result + 16);
          if ((v3 & 8) != 0)
          {
            return 1LL;
          }

          else
          {
            int v4 = *(unsigned __int8 *)(result + 32);
            if (v4 == 2) {
              int v5 = 30;
            }
            else {
              int v5 = 2;
            }
            if (v5 == v4) {
              return (v3 >> 3) & 1;
            }
            int v6 = *(_DWORD *)(result + 24);
            if (v6)
            {
              uint64_t v3 = *(void *)(result + 112LL * v6 + 16);
              return (v3 >> 3) & 1;
            }

            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

const void *sub_10002E66C(const __CFDictionary *a1)
{
  if (a1 && (unsigned int Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Service")) != 0LL) {
    return CFDictionaryGetValue(Value, kSCPropInterfaceName);
  }
  else {
    return 0LL;
  }
}

const void *sub_10002E6F8(void *a1)
{
  uint64_t v1 = (const __CFDictionary *)sub_10002E790(a1, kSCEntNetIPv4);
  if (!v1) {
    return 0LL;
  }
  unsigned int Value = (const __CFDictionary *)CFDictionaryGetValue(v1, @"Service");
  if (!Value) {
    return 0LL;
  }
  uint64_t v3 = CFDictionaryGetValue(Value, @"Hostname");
  int v4 = v3;
  if (v3) {
    CFRetain(v3);
  }
  return v4;
}

const void *sub_10002E790(void *key, const void *a2)
{
  if (qword_100079CA0
    && (unsigned int Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_100079CA0, key)) != 0LL)
  {
    return CFDictionaryGetValue(Value, a2);
  }

  else
  {
    return 0LL;
  }

BOOL sub_10002E828(void *a1)
{
  int v2 = (const __CFDictionary *)sub_10002E790(a1, kSCEntNetIPv4);
  if (!v2)
  {
    int v2 = (const __CFDictionary *)sub_10002E790(a1, kSCEntNetIPv6);
    if (!v2) {
      return 0LL;
    }
  }

  uint64_t v3 = (const __CFString *)sub_10002E66C(v2);
  if (!v3) {
    return 0LL;
  }
  NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v3,  kSCEntNetLink);
  CFPropertyListRef v5 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_100079C88, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  if (!v5) {
    return 0LL;
  }
  BOOL v6 = sub_100030B48(v5);
  CFRelease(v5);
  return v6;
}

void sub_10002E92C()
{
  if (qword_100079C88)
  {
    if (qword_100079DB8 != -1) {
      dispatch_once(&qword_100079DB8, &stru_100072AF0);
    }
    dispatch_async((dispatch_queue_t)qword_100079DC0, &stru_100072808);
    process_AgentMonitor();
  }

void sub_10002E9EC(const void *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a3)
  {
    if (a1 && a2)
    {
      CFSetRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (*((_DWORD *)v3 + 10))
      {
        CFStringRef v7 = CFStringCreateWithFormat( 0LL,  0LL,  @"%d.%d.%d.%d",  *((_DWORD *)v3 + 10),  BYTE1(*((_DWORD *)v3 + 10)),  BYTE2(*((_DWORD *)v3 + 10)),  HIBYTE(*((_DWORD *)v3 + 10)));
        CFDictionarySetValue(Mutable, kSCPropNetIPv4Router, v7);
        CFRelease(v7);
      }

      uint64_t v8 = (const char *)sub_100028BF4(*((_DWORD *)v3 + 4), (uint64_t)v29);
      if (v8)
      {
        CFStringRef v9 = CFStringCreateWithCString(0LL, v8, 0x600u);
        if (v9)
        {
          CFStringRef v10 = v9;
          CFDictionarySetValue(Mutable, kSCDynamicStorePropNetPrimaryInterface, v9);
          CFRelease(v10);
        }
      }

      CFDictionarySetValue(Mutable, kSCDynamicStorePropNetPrimaryService, a1);
      sub_100030C00(a3, (const void *)qword_100079CA8, Mutable);
      CFRelease(Mutable);
    }

    else
    {
      BOOL v11 = (const void *)qword_100079CA8;
      sub_100030F28(*(const __CFArray **)(a3 + 8), (const void *)qword_100079CA8);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 16), v11);
    }
  }

  unsigned int v12 = sub_100030CA0();
  if (v12 != -1)
  {
    unsigned int v13 = v12;
    if (v3)
    {
      sub_100030FC8((uint64_t)off_1000728E8, (int *)v3);
    }

    else
    {
      uint64_t v3 = (char *)malloc(0x30uLL);
      *(_OWORD *)(v3 + 24) = 0u;
      *(_OWORD *)(v3 + 8) = 0u;
      *((void *)v3 + 5) = 0LL;
      *(void *)uint64_t v3 = 0x100000001LL;
      *((void *)v3 + 4) = 0xFFFFFF000000E0LL;
      *((_DWORD *)v3 + 3) = 24;
      *((_DWORD *)v3 + 4) = sub_100029224();
    }

    if (byte_100079C94 == 1)
    {
      os_log_t v14 = (os_log_t)qword_100079C78;
      if (qword_100079CB0)
      {
        if (!qword_100079C78)
        {
          os_log_t v14 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_100079C78 = (uint64_t)v14;
        }

        uint64_t v15 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v14, v15))
        {
          uint64_t v16 = _os_log_pack_size(2LL);
          uint64_t v17 = &v29[-((__chkstk_darwin(v16) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
          int v18 = __error();
          *(_WORD *)_os_log_pack_fill(v17, v16, *v18, &_mh_execute_header, "Old Routes = ") = 0;
          __SC_log_send(7LL, v14, v15, v17);
        }

        sub_100030DF4((unsigned int *)qword_100079CB0);
      }

      else
      {
        if (!qword_100079C78)
        {
          os_log_t v14 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_100079C78 = (uint64_t)v14;
        }

        uint64_t v19 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v14, v19))
        {
          uint64_t v20 = _os_log_pack_size(2LL);
          int v21 = &v29[-((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
          uint64_t v22 = __error();
          *(_WORD *)_os_log_pack_fill(v21, v20, *v22, &_mh_execute_header, "Old Routes = <none>") = 0;
          __SC_log_send(7LL, v14, v19, v21);
        }
      }

      os_log_t v23 = (os_log_t)qword_100079C78;
      if (!qword_100079C78)
      {
        os_log_t v23 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_100079C78 = (uint64_t)v23;
      }

      uint64_t v24 = _SC_syslog_os_log_mapping(7LL);
      if (__SC_log_enabled(7LL, v23, v24))
      {
        uint64_t v25 = _os_log_pack_size(2LL);
        int v26 = &v29[-((__chkstk_darwin(v25) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
        uint64_t v27 = __error();
        *(_WORD *)_os_log_pack_fill(v26, v25, *v27, &_mh_execute_header, "New Routes = ") = 0;
        __SC_log_send(7LL, v23, v24, v26);
      }

      sub_100030DF4((unsigned int *)v3);
    }

    sub_100031FDC((uint64_t (**)(void))off_1000728E8, qword_100079CB0, (int *)v3, v13);
    close(v13);
  }

  if (qword_100079CB0) {
    free((void *)qword_100079CB0);
  }
  qword_100079CB0 = (uint64_t)v3;
}

void sub_10002EE80(id a1)
{
}

void sub_10002EEC4()
{
  values[0] = (void *)qword_100079CC0;
  values[1] = (void *)qword_100079CC8;
  values[2] = (void *)qword_100079CD0;
  os_log_t v0 = CFArrayCreate(0LL, (const void **)values, 3LL, &kCFTypeArrayCallBacks);
  CFSetRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  sub_100032964(kSCCompAnyRegex, Mutable);
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  kSCDynamicStoreDomainSetup,  kSCCompAnyRegex,  kSCEntNetPPP);
  CFArrayAppendValue(Mutable, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFStringRef v3 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetVPN);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v3);
  CFStringRef v4 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetInterface);
  CFArrayAppendValue(Mutable, v4);
  CFRelease(v4);
  sub_100032AE8(kSCCompAnyRegex, Mutable);
  sub_100046150(Mutable);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  kSCCompAnyRegex,  kSCEntNetInterfaceDelegation);
  CFArrayAppendValue(Mutable, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  if (SCDynamicStoreSetNotificationKeys((SCDynamicStoreRef)qword_100079C88, v0, Mutable))
  {
    BOOL v6 = (const __SCDynamicStore *)qword_100079C88;
    if (qword_100079DB8 != -1) {
      dispatch_once(&qword_100079DB8, &stru_100072AF0);
    }
    if (SCDynamicStoreSetDispatchQueue(v6, (dispatch_queue_t)qword_100079DC0))
    {
      sub_100032674(v0, Mutable);
      goto LABEL_15;
    }

    os_log_t v7 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v7;
    }

    uint64_t v8 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v7, v8))
    {
      uint64_t v13 = _os_log_pack_size(12LL);
      CFStringRef v10 = (char *)values - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v14 = *__error();
      uint64_t v12 = _os_log_pack_fill(v10, v13, v14, &_mh_execute_header, "SCDynamicStoreSetDispatchQueue() failed: %s");
      goto LABEL_14;
    }
  }

  else
  {
    os_log_t v7 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v7;
    }

    uint64_t v8 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v7, v8))
    {
      uint64_t v9 = _os_log_pack_size(12LL);
      CFStringRef v10 = (char *)values - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v11 = *__error();
      uint64_t v12 = _os_log_pack_fill(v10, v9, v11, &_mh_execute_header, "SCDynamicStoreSetNotificationKeys() failed: %s");
LABEL_14:
      uint64_t v15 = v12;
      int v16 = SCError();
      uint64_t v17 = SCErrorString(v16);
      *(_DWORD *)uint64_t v15 = 136315138;
      *(void *)(v15 + 4) = v17;
      __SC_log_send(3LL, v7, v8, v10);
    }
  }

void sub_10002F270(CFBundleRef bundle, int a2)
{
  if (qword_100079DB8 != -1) {
    dispatch_once(&qword_100079DB8, &stru_100072AF0);
  }
  CFStringRef v4 = (dispatch_queue_s *)qword_100079DC0;
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(bundle);
  if (InfoDictionary)
  {
    unsigned int Value = (const __CFBoolean *)CFDictionaryGetValue(InfoDictionary, @"AppendStateArrayToSetupArray");
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID) {
      int v8 = CFBooleanGetValue(Value);
    }
    else {
      int v8 = 0;
    }
    dword_100079C90 = v8;
  }

  if (a2)
  {
    byte_100079C94 = 1;
    byte_100079C95 = 1;
  }

  if (qword_100079DB8 != -1) {
    dispatch_once(&qword_100079DB8, &stru_100072AF0);
  }
  sub_100052ED0(qword_100079DC0, (uint64_t)sub_1000407B8);
  sub_1000407B8();
  sub_1000268F4((uint64_t)bundle, &stru_100072848);
  sub_1000417C4((uint64_t)bundle, &stru_1000728A8);
  sub_100023428(bundle);
  sub_1000443C0(bundle);
  sub_10002FF1C();
  sub_100030440();
  if (qword_100079C88) {
    sub_1000230F8((uint64_t)v4, (uint64_t)sub_100030598);
  }
  sub_100044554(v4);
}

void sub_10002F41C(id a1, unsigned __int8 a2)
{
  if (qword_100079DC8 != -1) {
    dispatch_once(&qword_100079DC8, &stru_100072B30);
  }
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000LL;
  v3[2] = sub_10002F4D4;
  v3[3] = &unk_100072868;
  unsigned __int8 v4 = a2;
  dispatch_async((dispatch_queue_t)qword_100079DD0, v3);
}

void sub_10002F4D4(uint64_t a1)
{
  byte_100079998 = *(_BYTE *)(a1 + 32);
  if (!byte_100079998 || (dword_100079C98 & 2) != 0) {
    sub_10002F6D0();
  }
  else {
    sub_10002F55C(2);
  }
}

void sub_10002F55C(int a1)
{
  if (qword_100079DC8 != -1) {
    dispatch_once(&qword_100079DC8, &stru_100072B30);
  }
  dispatch_assert_queue_V2((dispatch_queue_t)qword_100079DD0);
  int v2 = dword_100079C98;
  if (!dword_100079C98)
  {
    gettimeofday((timeval *)&qword_100079DD8, 0LL);
    int v2 = dword_100079C98;
  }

  dword_100079C98 = v2 | a1;
  if (qword_100079DE8)
  {
    dispatch_source_cancel((dispatch_source_t)qword_100079DE8);
    dispatch_release((dispatch_object_t)qword_100079DE8);
    qword_100079DE8 = 0LL;
    byte_100079DF0 = 0;
  }

  if (!byte_100079998 || !byte_100079999)
  {
    if (qword_100079DC8 != -1) {
      dispatch_once(&qword_100079DC8, &stru_100072B30);
    }
    qword_100079DE8 = (uint64_t)dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)qword_100079DD0);
    dispatch_source_set_event_handler((dispatch_source_t)qword_100079DE8, &stru_100072B70);
    CFStringRef v3 = (dispatch_source_s *)qword_100079DE8;
    dispatch_time_t v4 = dispatch_time(0LL, 5000000000LL);
    dispatch_source_set_timer(v3, v4, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
    dispatch_resume((dispatch_object_t)qword_100079DE8);
  }

  sub_10002F6D0();
}

void sub_10002F6D0()
{
  if (qword_100079DC8 != -1) {
    dispatch_once(&qword_100079DC8, &stru_100072B30);
  }
  dispatch_assert_queue_V2((dispatch_queue_t)qword_100079DD0);
  if (dword_100079C98)
  {
    if ((byte_100079DF0 & 1) != 0 || byte_100079998 && byte_100079999)
    {
      if (qword_100079DE8)
      {
        dispatch_source_cancel((dispatch_source_t)qword_100079DE8);
        dispatch_release((dispatch_object_t)qword_100079DE8);
        qword_100079DE8 = 0LL;
        byte_100079DF0 = 0;
      }

      gettimeofday(&v57, 0LL);
      tv_seCC_SHA256_CTX c = v57.tv_sec;
      uint64_t v1 = qword_100079DD8;
      int v2 = v57.tv_usec - dword_100079DE0;
      if (v57.tv_usec >= dword_100079DE0) {
        int v3 = v57.tv_usec - dword_100079DE0;
      }
      else {
        int v3 = v57.tv_usec - dword_100079DE0 + 1000000;
      }
      os_log_t v4 = (os_log_t)qword_100079C78;
      if (!qword_100079C78)
      {
        os_log_t v4 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_100079C78 = (uint64_t)v4;
      }

      uint64_t v5 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v4, v5))
      {
        __darwin_time_t v6 = tv_sec - v1 + (v2 >> 31);
        uint64_t v7 = _os_log_pack_size(34LL);
        int v8 = (char *)&v56 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v9 = __error();
        uint64_t v10 = _os_log_pack_fill( v8,  v7,  *v9,  &_mh_execute_header,  "Post com.apple.system.config.network_change (%s: %ld.%6.6d: 0x%x)",  v56,  v57.tv_sec,  v57.tv_usec,  v58);
        uint64_t v11 = "delayed";
        BOOL v12 = byte_100079DF0 == 0;
        int v13 = dword_100079C98;
        *(_DWORD *)uint64_t v10 = 136315906;
        if (!v12) {
          uint64_t v11 = "timeout";
        }
        *(void *)(v10 + 4) = v11;
        *(_WORD *)(v10 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
        *(void *)(v10 + 14) = v6;
        *(_WORD *)(v10 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
        *(_DWORD *)(v10 + 24) = v3;
        *(_WORD *)(v10 + 28) = 1024;
        *(_DWORD *)(v10 + 3sub_10000F430((uint64_t)__str, 0) = v13;
        __SC_log_send(6LL, v4, v5, v8);
      }

      char v14 = dword_100079C98;
      if ((dword_100079C98 & 2) != 0)
      {
        process_AgentMonitor_DNS();
        char v14 = dword_100079C98;
      }

      if ((v14 & 1) != 0)
      {
        uint32_t v15 = notify_post("com.apple.system.config.network_change.nwi");
        if (v15)
        {
          uint32_t v16 = v15;
          os_log_t v17 = (os_log_t)qword_100079C78;
          if (!qword_100079C78)
          {
            os_log_t v17 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_100079C78 = (uint64_t)v17;
          }

          uint64_t v18 = _SC_syslog_os_log_mapping(3LL);
          if (__SC_log_enabled(3LL, v17, v18))
          {
            uint64_t v19 = _os_log_pack_size(8LL);
            uint64_t v20 = (char *)&v56 - ((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            int v21 = __error();
            uint64_t v22 = (_DWORD *)_os_log_pack_fill( v20,  v19,  *v21,  &_mh_execute_header,  "notify_post(com.apple.system.config.network_change.nwi) failed: error=%d",  (_DWORD)v56);
            *uint64_t v22 = 67109120;
            v22[1] = v16;
            __SC_log_send(3LL, v17, v18, v20);
          }
        }
      }

      if ((dword_100079C98 & 2) != 0)
      {
        uint32_t v23 = notify_post("com.apple.system.config.network_change.dns");
        if (v23)
        {
          uint32_t v24 = v23;
          os_log_t v25 = (os_log_t)qword_100079C78;
          if (!qword_100079C78)
          {
            os_log_t v25 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_100079C78 = (uint64_t)v25;
          }

          uint64_t v26 = _SC_syslog_os_log_mapping(3LL);
          if (__SC_log_enabled(3LL, v25, v26))
          {
            uint64_t v27 = _os_log_pack_size(8LL);
            uint64_t v28 = (char *)&v56 - ((__chkstk_darwin(v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v29 = __error();
            CFMutableDictionaryRef v30 = (_DWORD *)_os_log_pack_fill( v28,  v27,  *v29,  &_mh_execute_header,  "notify_post(com.apple.system.config.network_change.dns) failed: error=%d",  (_DWORD)v56);
            *CFMutableDictionaryRef v30 = 67109120;
            v30[1] = v24;
            __SC_log_send(3LL, v25, v26, v28);
          }
        }
      }

      if ((dword_100079C98 & 4) != 0)
      {
        process_AgentMonitor_Proxy();
        uint32_t v31 = notify_post("com.apple.system.config.proxy_change");
        if (v31)
        {
          uint32_t v32 = v31;
          os_log_t v33 = (os_log_t)qword_100079C78;
          if (!qword_100079C78)
          {
            os_log_t v33 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_100079C78 = (uint64_t)v33;
          }

          uint64_t v34 = _SC_syslog_os_log_mapping(3LL);
          if (__SC_log_enabled(3LL, v33, v34))
          {
            uint64_t v35 = _os_log_pack_size(8LL);
            uint64_t v36 = (char *)&v56 - ((__chkstk_darwin(v35) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v37 = __error();
            int v38 = (_DWORD *)_os_log_pack_fill( v36,  v35,  *v37,  &_mh_execute_header,  "notify_post(com.apple.system.config.proxy_change) failed: error=%d",  (_DWORD)v56);
            _DWORD *v38 = 67109120;
            v38[1] = v32;
            __SC_log_send(3LL, v33, v34, v36);
          }
        }
      }

      unsigned int v39 = dword_100079C98;
      if ((dword_100079C98 & 0x10) != 0)
      {
        if (qword_100079D30 || qword_100079D38 || qword_100079D40)
        {
          sub_1000461E0((CFTypeRef)qword_100079D30, (CFTypeRef)qword_100079D38, (CFTypeRef)qword_100079D40);
          if (qword_100079D30)
          {
            CFRelease((CFTypeRef)qword_100079D30);
            qword_100079D30 = 0LL;
          }

          if (qword_100079D38)
          {
            CFRelease((CFTypeRef)qword_100079D38);
            qword_100079D38 = 0LL;
          }

          if (qword_100079D40)
          {
            CFRelease((CFTypeRef)qword_100079D40);
            qword_100079D40 = 0LL;
          }
        }

        unsigned int v39 = dword_100079C98 & 0xFFFFFFEF;
        dword_100079C98 &= ~0x10u;
      }

      if (v39)
      {
        uint32_t v40 = notify_post("com.apple.system.config.network_change");
        if (v40)
        {
          uint32_t v41 = v40;
          os_log_t v42 = (os_log_t)qword_100079C78;
          if (!qword_100079C78)
          {
            os_log_t v42 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_100079C78 = (uint64_t)v42;
          }

          uint64_t v43 = _SC_syslog_os_log_mapping(3LL);
          if (__SC_log_enabled(3LL, v42, v43))
          {
            uint64_t v44 = _os_log_pack_size(8LL);
            unsigned int v45 = (char *)&v56 - ((__chkstk_darwin(v44) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            unsigned int v46 = __error();
            unsigned int v47 = (_DWORD *)_os_log_pack_fill( v45,  v44,  *v46,  &_mh_execute_header,  "notify_post(com.apple.system.config.network_change) failed: error=%d",  (_DWORD)v56);
            _DWORD *v47 = 67109120;
            v47[1] = v41;
            __SC_log_send(3LL, v42, v43, v45);
          }
        }
      }

      dword_100079C98 = 0;
    }

    else
    {
      os_log_t v48 = (os_log_t)qword_100079C78;
      if (!qword_100079C78)
      {
        os_log_t v48 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_100079C78 = (uint64_t)v48;
      }

      uint64_t v49 = _SC_syslog_os_log_mapping(7LL);
      if (__SC_log_enabled(7LL, v48, v49))
      {
        uint64_t v50 = _os_log_pack_size(22LL);
        uint64_t v51 = (char *)&v56 - ((__chkstk_darwin(v50) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v52 = __error();
        uint64_t v53 = _os_log_pack_fill( v51,  v50,  *v52,  &_mh_execute_header,  "Defer com.apple.system.config.network_change (%s, %s)",  v56,  (const char *)v57.tv_sec);
        if (byte_100079998) {
          os_log_t v54 = "DNS";
        }
        else {
          os_log_t v54 = "!DNS";
        }
        unsigned int v55 = "nwi";
        if (!byte_100079999) {
          unsigned int v55 = "!nwi";
        }
        *(_DWORD *)uint64_t v53 = 136315394;
        *(void *)(v53 + 4) = v54;
        *(_WORD *)(v53 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
        *(void *)(v53 + 14) = v55;
        __SC_log_send(7LL, v48, v49, v51);
      }
    }
  }

void sub_10002FE14(id a1, unsigned __int8 a2)
{
  if (qword_100079DC8 != -1) {
    dispatch_once(&qword_100079DC8, &stru_100072B30);
  }
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000LL;
  v3[2] = sub_10002FECC;
  v3[3] = &unk_1000728C8;
  unsigned __int8 v4 = a2;
  dispatch_async((dispatch_queue_t)qword_100079DD0, v3);
}

void sub_10002FECC(uint64_t a1)
{
  byte_100079999 = *(_BYTE *)(a1 + 32);
  sub_10002F6D0();
}

char *sub_10002FF1C()
{
  HIDWORD(v19) = 0;
  *(void *)int v21 = 0x2800000001LL;
  size_t v20 = 4LL;
  sysctl(v21, 2u, (char *)&v19 + 4, &v20, 0LL, 0LL);
  if (HIDWORD(v19))
  {
    byte_100079CB8 = 1;
  }

  else
  {
    if (sub_100040B94())
    {
      if (qword_100079DF8 != -1) {
        dispatch_once(&qword_100079DF8, &stru_100072BB0);
      }
      BOOL v1 = (byte_100079DF4 & 1) == 0;
    }

    else
    {
      BOOL v1 = 1;
    }

    os_log_t v10 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v10 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v10;
    }

    uint64_t v11 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v10, v11))
    {
      uint64_t v12 = _os_log_pack_size(12LL);
      int v13 = (char *)&v19 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      char v14 = __error();
      uint64_t v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%sflushing IPv4 routes", v19);
      uint32_t v16 = "";
      if (!v1) {
        uint32_t v16 = "not ";
      }
      *(_DWORD *)uint64_t v15 = 136315138;
      *(void *)(v15 + 4) = v16;
      __SC_log_send(5LL, v10, v11, v13);
    }

    if (v1)
    {
      uint64_t v17 = sub_100030CA0();
      if ((_DWORD)v17 != -1)
      {
        int v18 = v17;
        sub_100041100(v17);
        close(v18);
      }
    }
  }

  qword_100079C88 = (uint64_t)SCDynamicStoreCreate(0LL, @"IPMonitor", (SCDynamicStoreCallBack)sub_100040B4C, 0LL);
  if (qword_100079C88)
  {
    qword_100079CA8 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity( 0LL,  kSCDynamicStoreDomainState,  kSCEntNetIPv4);
    qword_100079D60 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity( 0LL,  kSCDynamicStoreDomainState,  kSCEntNetIPv6);
    qword_100079D98 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity(0LL, kSCDynamicStoreDomainState, kSCEntNetDNS);
    qword_100079DB0 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity( 0LL,  kSCDynamicStoreDomainState,  kSCEntNetProxies);
    qword_100079CC0 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity( 0LL,  kSCDynamicStoreDomainSetup,  kSCEntNetIPv4);
    qword_100079CF0 = (uint64_t)SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  kSCDynamicStoreDomainState,  &stru_100073D90,  0LL);
    qword_100079CF8 = (uint64_t)SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  kSCDynamicStoreDomainSetup,  &stru_100073D90,  0LL);
    qword_100079CE8 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0LL, kSCDynamicStoreDomainState);
    qword_100079CA0 = (uint64_t)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    qword_100079D20 = (uint64_t)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    qword_100079D28 = (uint64_t)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    qword_100079CD0 = (uint64_t)SCDynamicStoreKeyCreate( 0LL,  @"%@/%@/%@",  kSCDynamicStoreDomainState,  kSCCompNetwork,  @"MulticastDNS");
    qword_100079CC8 = (uint64_t)SCDynamicStoreKeyCreate( 0LL,  @"%@/%@/%@",  kSCDynamicStoreDomainState,  kSCCompNetwork,  @"PrivateDNS");
    sub_100020304(0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_100079C88, (CFStringRef)qword_100079D98);
    qword_100079E00 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.IPMonitor.proxy", 0LL);
    return _scprefs_observer_watch(2, "com.apple.SystemConfiguration.plist", qword_100079E00, &stru_100072BF0);
  }

  else
  {
    os_log_t v2 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v2 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v2;
    }

    uint64_t v3 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = (char *)__SC_log_enabled(3LL, v2, v3);
    if ((_DWORD)result)
    {
      uint64_t v4 = _os_log_pack_size(12LL);
      uint64_t v5 = (char *)&v19 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __darwin_time_t v6 = __error();
      uint64_t v7 = _os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "IPMonitor ip_plugin_init SCDynamicStoreCreate failed: %s",  v19);
      int v8 = SCError();
      uint64_t v9 = SCErrorString(v8);
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v7 + 4) = v9;
      return (char *)__SC_log_send(3LL, v2, v3, v5);
    }
  }

  return result;
}

uint64_t sub_100030440()
{
  if (qword_100079DB8 != -1) {
    dispatch_once(&qword_100079DB8, &stru_100072AF0);
  }
  uint64_t result = sub_100029940(qword_100079DC0, &stru_100072C30);
  if (!(_DWORD)result)
  {
    os_log_t v1 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v1 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v1;
    }

    uint64_t v2 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = __SC_log_enabled(3LL, v1, v2);
    if ((_DWORD)result)
    {
      uint64_t v3 = _os_log_pack_size(2LL);
      uint64_t v4 = (char *)&v6 - ((__chkstk_darwin(v3) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v5 = __error();
      *(_WORD *)_os_log_pack_fill(v4, v3, *v5, &_mh_execute_header, "IPMonitorControlServerStart failed") = 0;
      return __SC_log_send(3LL, v1, v2, v4);
    }
  }

  return result;
}

void sub_100030598()
{
  os_log_t v0 = CFArrayCreate(0LL, (const void **)&off_100072C50, 1LL, &kCFTypeArrayCallBacks);
  sub_100032C68((const __SCDynamicStore *)qword_100079C88, v0, 0LL);
  CFRelease(v0);
}

uint64_t sub_10003061C(uint64_t result, char *__s2)
{
  if ((__s2[16] & 0x20) == 0)
  {
    uint64_t v2 = result;
    int v3 = *(_DWORD *)(result + 16);
    int v4 = *(_DWORD *)(result + 4);
    if (v3 < v4)
    {
      uint64_t v6 = (int *)(result + 224LL * v4 + 40);
      if (v3 < 1)
      {
LABEL_6:
        *uint64_t v6 = -1227133513 * ((unint64_t)&__s2[-v2 - 40] >> 4);
        ++*(_DWORD *)(v2 + 16);
      }

      else
      {
        while (1)
        {
          uint64_t result = strcmp((const char *)(v2 + 40 + 112LL * *v6), __s2);
          if (!(_DWORD)result) {
            break;
          }
          ++v6;
          if (!--v3) {
            goto LABEL_6;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000306FC(_DWORD *a1, uint64_t a2, __int128 *a3)
{
  int v6 = *((unsigned __int8 *)a3 + 32);
  uint64_t result = nwi_ifstate_get_ifname(a3);
  if (a2)
  {
    uint64_t v10 = v6 == 2 ? 8LL : 12LL;
    int v11 = *(_DWORD *)(a2 + v10);
    if (v11 <= *(_DWORD *)(a2 + 4) && v11 >= 1)
    {
      uint64_t v12 = (const char *)result;
      for (uint64_t i = 0LL; v11 != (_DWORD)i; ++i)
      {
        int v14 = *(_DWORD *)(a2 + 4);
        if (v6 != 30) {
          int v14 = 0;
        }
        uint64_t v15 = a2 + 112 * (i + v14) + 40;
        ifname = (const char *)nwi_ifstate_get_ifname(v15);
        uint64_t result = strcmp(v12, ifname);
        if (!(_DWORD)result) {
          goto LABEL_15;
        }
      }
    }
  }

  uint64_t v15 = 0LL;
LABEL_15:
  if (!a1) {
    sub_100061C9C(result, v8, v9);
  }
  if (*((_BYTE *)a3 + 32) == 2)
  {
    uint64_t v17 = a1 + 2;
    int v18 = a1[2];
  }

  else
  {
    uint64_t v17 = a1 + 3;
    int v18 = a1[3] + a1[1];
  }

  int v19 = v18;
  size_t v20 = &a1[28 * v18];
  __int128 v21 = a3[3];
  __int128 v22 = a3[4];
  __int128 v23 = a3[5];
  *(_OWORD *)(v20 + 34) = a3[6];
  *(_OWORD *)(v20 + 3sub_10000F430((uint64_t)__str, 0) = v23;
  __int128 v24 = *a3;
  __int128 v25 = a3[1];
  *(_OWORD *)(v20 + 18) = a3[2];
  *(_OWORD *)(v20 + 14) = v25;
  *(_OWORD *)(v20 + 1sub_10000F430((uint64_t)__str, 0) = v24;
  *(_OWORD *)(v20 + 26) = v22;
  *(_OWORD *)(v20 + 2pthread_attr_setdetachstate(&v4, 2) = v21;
  ++*v17;
  if (v15)
  {
    uint64_t v26 = &a1[28 * v19];
    uint64_t v29 = *((void *)v26 + 7);
    uint64_t v27 = (unint64_t *)(v26 + 14);
    uint64_t v28 = v29;
    if (v29 != *(_BYTE *)(v15 + 16))
    {
LABEL_21:
      unint64_t v30 = v28 & 0xFFFFFFFFFFFFF0FFLL | 0x300;
LABEL_22:
      unint64_t *v27 = v30;
      return result;
    }

    uint32_t v31 = &a1[28 * v19 + 19];
    if (*(_BYTE *)(v15 + 32) == 2)
    {
      if (*(_DWORD *)(v15 + 36) != *v31) {
        goto LABEL_21;
      }
    }

    else if (*(void *)(v15 + 36) != *(void *)v31 || *(void *)(v15 + 44) != *(void *)&a1[28 * v19 + 21])
    {
      goto LABEL_21;
    }

    unsigned int v33 = *(_DWORD *)(v15 + 28);
    unsigned int v34 = a1[28 * v19 + 17];
    BOOL v35 = v33 > v34;
    if (v33 >= v34)
    {
      unint64_t v30 = v28 & 0xFFFFFFFFFFFFF0FFLL;
      if (v35) {
        v30 |= 0x400uLL;
      }
      goto LABEL_22;
    }

    unint64_t *v27 = v28 & 0xFFFFFFFFFFFFF0FFLL | 0x500;
  }

  else
  {
    *(void *)&a1[28 * v19 + 14] = *(void *)&a1[28 * v19 + 14] & 0xFFFFFFFFFFFFF0FFLL | 0x100;
  }

  return result;
}

uint64_t sub_100030940(int *a1, __int128 *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 32);
  uint64_t result = nwi_ifstate_get_ifname(a2);
  if (!a1) {
    sub_100061C9C(result, v6, v7);
  }
  uint64_t v8 = a1 + 2;
  uint64_t v9 = 3LL;
  if (v4 == 2)
  {
    uint64_t v9 = 2LL;
    uint64_t v10 = a1 + 2;
  }

  else
  {
    uint64_t v10 = a1 + 3;
  }

  int v11 = a1[v9];
  if (v11 <= a1[1] && v11 >= 1)
  {
    size_t v20 = (const char *)result;
    for (uint64_t i = 0LL; v11 != (_DWORD)i; ++i)
    {
      int v22 = a1[1];
      if (v4 != 30) {
        int v22 = 0;
      }
      ifname = (const char *)nwi_ifstate_get_ifname(&a1[28 * i + 10 + 28 * v22]);
      uint64_t result = strcmp(v20, ifname);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  if (*((_BYTE *)a2 + 32) == 2)
  {
    int v13 = *v8;
  }

  else
  {
    int v13 = a1[3] + a1[1];
    uint64_t v8 = a1 + 3;
  }

  int v14 = &a1[28 * v13];
  __int128 v15 = a2[3];
  __int128 v16 = a2[4];
  __int128 v17 = a2[5];
  *(_OWORD *)(v14 + 34) = a2[6];
  *(_OWORD *)(v14 + 3sub_10000F430((uint64_t)__str, 0) = v17;
  __int128 v18 = a2[2];
  __int128 v19 = *a2;
  *(_OWORD *)(v14 + 14) = a2[1];
  *(_OWORD *)(v14 + 18) = v18;
  *(_OWORD *)(v14 + 1sub_10000F430((uint64_t)__str, 0) = v19;
  *(_OWORD *)(v14 + 26) = v16;
  *(_OWORD *)(v14 + 2pthread_attr_setdetachstate(&v4, 2) = v15;
  ++*v8;
  *((void *)v14 + 7) = *((void *)v14 + 7) & 0xFFFFFFFFFFFFF0FFLL | 0x200;
  return result;
}

const UInt8 *sub_100030AC8(const __CFDictionary *a1)
{
  if (a1 && (unsigned int Value = (const __CFData *)CFDictionaryGetValue(a1, @"Routes")) != 0LL) {
    return CFDataGetBytePtr(Value);
  }
  else {
    return 0LL;
  }
}

BOOL sub_100030B48(const void *a1)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a1
    && CFGetTypeID(a1) == TypeID
    && (unsigned int Value = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetLinkExpensive),
        CFTypeID v4 = CFBooleanGetTypeID(),
        Value)
    && CFGetTypeID(Value) == v4)
  {
    return CFBooleanGetValue(Value) != 0;
  }

  else
  {
    return 0LL;
  }

void sub_100030C00(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6 = *(const __CFArray **)(a1 + 8);
  v8.length = CFArrayGetCount(v6);
  v8.location = 0LL;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v8, a2);
  if (FirstIndexOfValue != -1) {
    CFArrayRemoveValueAtIndex(v6, FirstIndexOfValue);
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), a2, a3);
}

uint64_t sub_100030CA0()
{
  uint64_t v0 = socket(17, 3, 17);
  if ((_DWORD)v0 == -1)
  {
    os_log_t v1 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v1 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v1;
    }

    uint64_t v2 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v1, v2))
    {
      uint64_t v3 = _os_log_pack_size(12LL);
      CFTypeID v4 = (char *)&v10 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v5 = __error();
      uint64_t v6 = _os_log_pack_fill(v4, v3, *v5, &_mh_execute_header, "socket() failed: %s", v10);
      uint64_t v7 = __error();
      CFRange v8 = strerror(*v7);
      *(_DWORD *)uint64_t v6 = 136315138;
      *(void *)(v6 + 4) = v8;
      __SC_log_send(3LL, v1, v2, v4);
    }
  }

  return v0;
}

void sub_100030DF4(unsigned int *a1)
{
  os_log_t v1 = sub_100031EF0(a1);
  os_log_t v2 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    os_log_t v2 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v2;
  }

  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(12LL);
    uint64_t v5 = (char *)&v8 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%@");
    *(_DWORD *)uint64_t v7 = 138412290;
    *(void *)(v7 + 4) = v1;
    __SC_log_send(7LL, v2, v3, v5);
  }

  CFRelease(v1);
}

void sub_100030F28(const __CFArray *a1, const void *a2)
{
  v4.length = CFArrayGetCount(a1);
  v4.location = 0LL;
  if (!CFArrayContainsValue(a1, v4, a2)) {
    CFArrayAppendValue(a1, a2);
  }
}

uint64_t sub_100030FC8(uint64_t result, int *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = (*(uint64_t (**)(void))result)(0LL);
    if (*a2 >= 1)
    {
      int v5 = 0;
      uint64_t v6 = (char *)a2 + result;
      *(void *)&__int128 v4 = 136315394LL;
      __int128 v23 = v4;
      do
      {
        uint64_t result = *((unsigned int *)v6 + 2);
        if (!(_DWORD)result) {
          goto LABEL_25;
        }
        int v7 = *((_DWORD *)v6 + 1);
        if (!v7)
        {
          if (!sub_100028BF4(result, (uint64_t)v25)
            || (int v9 = sub_1000288B8((uint64_t)v25, (void *)*((unsigned int *)v6 + 2))) == 0)
          {
            int v7 = *((_DWORD *)v6 + 2);
            int v8 = 1;
            goto LABEL_11;
          }

          int v7 = v9;
        }

        int v8 = 0;
LABEL_11:
        uint64_t v10 = (const void *)(*(uint64_t (**)(char *))(v3 + 40))(v6);
        uint64_t result = (uint64_t)sub_100031278(v3, a2, v10, *(_DWORD *)v6, v7, v8);
        if (!v8 && !result)
        {
          int v11 = *((_DWORD *)v6 + 2);
          os_log_t v12 = (os_log_t)qword_100079C78;
          if (!qword_100079C78)
          {
            os_log_t v12 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_100079C78 = (uint64_t)v12;
          }

          uint64_t v13 = _SC_syslog_os_log_mapping(7LL);
          if (__SC_log_enabled(7LL, v12, v13))
          {
            uint64_t v14 = _os_log_pack_size(18LL);
            __int128 v24 = &v23;
            __int128 v15 = (char *)&v23 - ((__chkstk_darwin(v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __int128 v16 = __error();
            uint64_t v17 = _os_log_pack_fill( v15,  v14,  *v16,  &_mh_execute_header,  "%s: trying again excluding %u",  (const char *)v23,  DWORD2(v23));
            *(_DWORD *)uint64_t v17 = v23;
            *(void *)(v17 + 4) = "RouteListFinalize";
            *(_WORD *)(v17 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
            *(_DWORD *)(v17 + 14) = v11;
            __SC_log_send(7LL, v12, v13, v15);
          }

          __int128 v18 = (const void *)(*(uint64_t (**)(char *))(v3 + 40))(v6);
          uint64_t result = (uint64_t)sub_100031278(v3, a2, v18, *(_DWORD *)v6, v11, 1);
        }

        if (result)
        {
          *((_DWORD *)v6 + pthread_attr_setscope(&v4, 1) = *(_DWORD *)(result + 4);
          if ((*(_WORD *)(result + 16) & 2) == 0)
          {
            __int16 v19 = *((_WORD *)v6 + 8) & 0xFFF9;
LABEL_24:
            *((_WORD *)v6 + 8) = v19;
            goto LABEL_25;
          }

          size_t v20 = *(uint64_t (**)(char *, uint64_t))(v3 + 32);
          uint64_t v21 = (*(uint64_t (**)(void))(v3 + 24))();
          uint64_t result = v20(v6, v21);
          __int16 v22 = *((_WORD *)v6 + 8);
          *((_WORD *)v6 + 8) = v22 | 2;
          if (*(_DWORD *)v6 == *(_DWORD *)(v3 + 80))
          {
            __int16 v19 = v22 | 6;
            goto LABEL_24;
          }
        }

        else
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, char *, const char *))(v3 + 56))( 5LL,  v6,  "can't resolve excluded route");
        }

char *sub_100031278(uint64_t a1, int *a2, const void *a3, int a4, int a5, char a6)
{
  uint64_t v12 = (*(uint64_t (**)(void))a1)(0LL);
  if (*a2 < 1) {
    return 0LL;
  }
  int v13 = 0;
  uint64_t v14 = 0LL;
  __int128 v15 = (char *)a2 + v12;
  while (1)
  {
    int v16 = *((_DWORD *)v15 + 1);
    if (!v16 || *((_DWORD *)v15 + 2)) {
      goto LABEL_5;
    }
    if ((a6 & 1) != 0)
    {
      if (v16 == a5) {
        goto LABEL_5;
      }
    }

    else if (v16 != a5)
    {
      goto LABEL_5;
    }

    __int16 v17 = *((_WORD *)v15 + 8);
    if ((v17 & 2) != 0)
    {
      __int128 v18 = (const void *)(*(uint64_t (**)(char *))(a1 + 24))(v15);
      __int16 v17 = *((_WORD *)v15 + 8);
    }

    if ((v17 & 4) != 0) {
      break;
    }
    if ((*(unsigned int (**)(char *, const void *))(a1 + 48))(v15, a3))
    {
      int v19 = *(_DWORD *)v15;
      if (*(_DWORD *)v15 == a4) {
        return v15;
      }
      if (v19 <= a4 && (!v14 || v19 > *(_DWORD *)v14)) {
        uint64_t v14 = v15;
      }
    }

LABEL_5:
    ++v13;
    v15 += *(int *)(a1 + 72);
    if (v13 >= *a2) {
      return v14;
    }
  }

  if (*(_DWORD *)(a1 + 80) != a4) {
    goto LABEL_5;
  }
  size_t v20 = (const void *)(*(uint64_t (**)(char *))(a1 + 40))(v15);
  return v15;
}

uint64_t sub_100031400(uint64_t a1)
{
  return 36 * a1 + 12;
}

BOOL sub_100031450(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16);
}

uint64_t sub_1000314FC(uint64_t a1, char a2, int __fd)
{
  if (byte_100079CB8 == 1 && !*(_DWORD *)(a1 + 20)) {
    return 1001LL;
  }
  __int16 v4 = *(_WORD *)(a1 + 16);
  if ((v4 & 8) != 0) {
    return 1001LL;
  }
  int v5 = *(_DWORD *)(a1 + 4);
  if (v5)
  {
    if (__fd == -1) {
      return 9LL;
    }
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    BYTE3(v24) = a2;
    BYTE2(v24) = 5;
    int v6 = ++dword_100079CBC;
    int v7 = *(_DWORD *)(a1 + 32);
    if (v7) {
      int v8 = 51;
    }
    else {
      int v8 = 19;
    }
    int v33 = 0;
    __int128 v31 = 0uLL;
    memset(v32, 0, sizeof(v32));
    __int128 v29 = 0uLL;
    __int128 v30 = 0uLL;
    __int128 v27 = 0uLL;
    __int128 v28 = 0uLL;
    __int128 v26 = 0uLL;
    DWORD1(v25) = v6;
    HIDWORD(v24) = v8;
    if ((v4 & 4) != 0)
    {
      int v9 = 2053;
      DWORD2(v24) = 2053;
      if ((v4 & 2) == 0)
      {
LABEL_24:
        if ((v4 & 1) != 0)
        {
          WORD2(v24) = v5;
          v9 |= 0x1000000u;
          DWORD2(v24) = v9;
        }

        WORD6(v29) = 528;
        LODWORD(v3sub_10000F430((uint64_t)__str, 0) = *(_DWORD *)(a1 + 20);
        if ((v9 & 2) != 0)
        {
          LODWORD(v3pthread_attr_setscope(&v4, 1) = *(_DWORD *)(a1 + 28);
          uint64_t v21 = (char *)&v31 + 12;
          char v22 = 2;
          char v23 = 16;
        }

        else
        {
          HIWORD(v3sub_10000F430((uint64_t)__str, 0) = v5;
          uint64_t v21 = v32;
          char v22 = 18;
          char v23 = 20;
        }

        BYTE12(v3sub_10000F430((uint64_t)__str, 0) = v23;
        BYTE13(v3sub_10000F430((uint64_t)__str, 0) = v22;
        if ((v8 & 4) != 0)
        {
          *(_WORD *)uint64_t v21 = 528;
          *((_DWORD *)v21 + pthread_attr_setscope(&v4, 1) = *(_DWORD *)(a1 + 24);
          v21 += 16;
          LOBYTE(v8) = BYTE12(v24);
        }

        if ((v8 & 0x10) != 0)
        {
          *(_WORD *)uint64_t v21 = 4628;
          *((_WORD *)v21 + pthread_attr_setscope(&v4, 1) = v5;
          v21 += 20;
        }

        if ((v8 & 0x20) != 0)
        {
          *(_WORD *)uint64_t v21 = 528;
          *((_DWORD *)v21 + pthread_attr_setscope(&v4, 1) = v7;
          LODWORD(v2pthread_attr_setscope(&v4, 1) = (_DWORD)v21 + 16;
        }

        LOWORD(v24) = (_WORD)v21 - (unsigned __int16)&v24;
        else {
          return 0LL;
        }
      }

      int v9 = 2055;
    }

    else
    {
      v8 |= 4u;
      HIDWORD(v24) = v8;
      if ((v4 & 2) != 0) {
        int v9 = 2051;
      }
      else {
        int v9 = 2305;
      }
    }

    DWORD2(v24) = v9;
    goto LABEL_24;
  }

  os_log_t v11 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    os_log_t v11 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v11;
  }

  uint64_t v12 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v11, v12))
  {
    uint64_t v13 = _os_log_pack_size(26LL);
    uint64_t v14 = (char *)&v24 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __int128 v15 = __error();
    uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "%d.%d.%d.%d no interface specified, ignoring",  (_DWORD)v24,  DWORD2(v24),  (_DWORD)v25,  DWORD2(v25));
    int v17 = *(unsigned __int8 *)(a1 + 20);
    int v18 = *(unsigned __int8 *)(a1 + 21);
    int v19 = *(unsigned __int8 *)(a1 + 22);
    int v20 = *(unsigned __int8 *)(a1 + 23);
    *(_DWORD *)uint64_t v16 = 67109888;
    *(_DWORD *)(v16 + 4) = v17;
    *(_WORD *)(v16 + 8) = 1024;
    *(_DWORD *)(v16 + 1sub_10000F430((uint64_t)__str, 0) = v18;
    *(_WORD *)(v16 + 14) = 1024;
    *(_DWORD *)(v16 + 16) = v19;
    *(_WORD *)(v16 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = 1024;
    *(_DWORD *)(v16 + 2pthread_attr_setdetachstate(&v4, 2) = v20;
    __SC_log_send(5LL, v11, v12, v14);
  }

  return 6LL;
}

uint64_t sub_10003181C(uint64_t a1)
{
  return a1 + 28;
}

uint64_t sub_100031864(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 28) = *a2;
  return result;
}

uint64_t sub_1000318B0(uint64_t a1)
{
  return a1 + 20;
}

BOOL sub_1000318F8(uint64_t a1, _DWORD *a2)
{
  return (*(_DWORD *)(a1 + 24) & *a2) == *(_DWORD *)(a1 + 20);
}

void sub_100031950(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  CFSetRef Mutable = CFStringCreateMutable(0LL, 0LL);
  sub_100031BE8(a2, Mutable);
  os_log_t v7 = (os_log_t)qword_100079C78;
  if (a3)
  {
    if (!qword_100079C78)
    {
      os_log_t v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v7;
    }

    uint64_t v8 = _SC_syslog_os_log_mapping(a1);
    if (__SC_log_enabled(a1, v7, v8))
    {
      uint64_t v9 = _os_log_pack_size(22LL);
      uint64_t v10 = (char *)&v22 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v11 = __error();
      uint64_t v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "%s: %@");
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)(v12 + 4) = a3;
      *(_WORD *)(v12 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v12 + 14) = Mutable;
      uint64_t v13 = a1;
      os_log_t v14 = v7;
      uint64_t v15 = v8;
      uint64_t v16 = v10;
LABEL_10:
      __SC_log_send(v13, v14, v15, v16);
    }
  }

  else
  {
    if (!qword_100079C78)
    {
      os_log_t v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v7;
    }

    uint64_t v17 = _SC_syslog_os_log_mapping(a1);
    if (__SC_log_enabled(a1, v7, v17))
    {
      uint64_t v18 = _os_log_pack_size(12LL);
      int v19 = (char *)&v22 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v20 = __error();
      uint64_t v21 = _os_log_pack_fill(v19, v18, *v20, &_mh_execute_header, "%@");
      *(_DWORD *)uint64_t v21 = 138412290;
      *(void *)(v21 + 4) = Mutable;
      uint64_t v13 = a1;
      os_log_t v14 = v7;
      uint64_t v15 = v17;
      uint64_t v16 = v19;
      goto LABEL_10;
    }
  }

  CFRelease(Mutable);
}

__CFString *sub_100031B78(unsigned int *a1)
{
  CFSetRef Mutable = CFStringCreateMutable(0LL, 0LL);
  sub_100031BE8(a1, Mutable);
  return Mutable;
}

void sub_100031BE8(unsigned int *a1, CFMutableStringRef theString)
{
  uint64_t v4 = *((unsigned __int8 *)a1 + 20);
  uint64_t v5 = *((unsigned __int8 *)a1 + 21);
  uint64_t v6 = *((unsigned __int8 *)a1 + 23);
  if ((a1[4] & 4) != 0)
  {
    CFStringAppendFormat(theString, 0LL, @"Host %d.%d.%d.%d", v4, v5, *((unsigned __int8 *)a1 + 22), v6);
  }

  else
  {
    CFStringAppendFormat(theString, 0LL, @"Net %d.%d.%d.%d", v4, v5, *((unsigned __int8 *)a1 + 22), v6);
    CFStringAppendFormat(theString, 0LL, @"/%d", *a1, v7, v8, v9);
  }

  if ((a1[4] & 2) != 0) {
    CFStringAppendFormat( theString,  0LL,  @" Gate %d.%d.%d.%d",  *((unsigned __int8 *)a1 + 28),  *((unsigned __int8 *)a1 + 29),  *((unsigned __int8 *)a1 + 30),  *((unsigned __int8 *)a1 + 31));
  }
  sub_100031D1C((uint64_t)a1, theString);
  if (a1[8]) {
    CFStringAppendFormat( theString,  0LL,  @" Ifa %d.%d.%d.%d",  a1[8],  BYTE1(a1[8]),  BYTE2(a1[8]),  HIBYTE(a1[8]));
  }
  sub_100031DD0((uint64_t)a1, theString);
}

void sub_100031D1C(uint64_t a1, __CFString *a2)
{
}

void sub_100031DD0(uint64_t a1, CFMutableStringRef theString)
{
  if ((*(_WORD *)(a1 + 16) & 8) != 0)
  {
    uint64_t v6 = @" [null]";
LABEL_16:
    CFStringAppend(theString, v6);
    return;
  }

  int v4 = *(unsigned __int8 *)(a1 + 15) << 24;
  if (v4)
  {
    if (v4 == 50331648)
    {
      uint64_t v5 = @" [never]";
    }

    else
    {
      if (v4 != 0x2000000) {
        goto LABEL_10;
      }
      uint64_t v5 = @" [last]";
    }
  }

  else
  {
    uint64_t v5 = @" [first]";
  }

  CFStringAppend(theString, v5);
LABEL_10:
  __int16 v7 = *(_WORD *)(a1 + 16);
  if ((v7 & 0x10) != 0)
  {
    CFStringAppend(theString, @" [kern]");
    __int16 v7 = *(_WORD *)(a1 + 16);
  }

  if ((v7 & 1) != 0) {
    CFStringAppend(theString, @" [SCOPED]");
  }
  if ((*(_WORD *)(a1 + 18) & 4) != 0)
  {
    uint64_t v6 = @" [force]";
    goto LABEL_16;
  }

__CFString *sub_100031EF0(unsigned int *a1)
{
  CFSetRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<IPv4RouteList[%d]> = {", *a1);
  if ((int)*a1 >= 1)
  {
    uint64_t v3 = 0LL;
    int v4 = a1 + 3;
    do
    {
      CFStringAppendFormat(Mutable, 0LL, @"\n%2d. ", v3);
      sub_100031BE8(v4, Mutable);
      uint64_t v3 = (v3 + 1);
      v4 += 9;
    }

    while ((int)v3 < (int)*a1);
  }

  CFStringAppend(Mutable, @"\n}");
  return Mutable;
}

uint64_t (**sub_100031FDC( uint64_t (**result)(void), unint64_t a2, int *a3, unsigned int a4))(void)
{
  uint64_t v6 = result;
  size_t v20[2] = a3;
  v20[3] = a4;
  v20[0] = result;
  v20[1] = a2;
  if (!a2)
  {
    if (!a3) {
      return result;
    }
    goto LABEL_30;
  }

  uint64_t result = (uint64_t (**)(void))(*result)(0LL);
  if (*(int *)a2 >= 1)
  {
    int v7 = 0;
    uint64_t v8 = (uint64_t)result + a2;
    do
    {
      if (!a3) {
        goto LABEL_12;
      }
      uint64_t result = (uint64_t (**)(void))(*v6)(0LL);
      if (*a3 < 1) {
        goto LABEL_12;
      }
      int v9 = 0;
      uint64_t v10 = (char *)result + (void)a3;
      while (1)
      {
        uint64_t result = (uint64_t (**)(void))((uint64_t (*)(char *, uint64_t))v6[1])(v10, v8);
        if ((_DWORD)result) {
          break;
        }
        ++v9;
        v10 += *((int *)v6 + 18);
        if (v9 >= *a3) {
          goto LABEL_12;
        }
      }

      if (!v10)
      {
LABEL_12:
        if ((*(_WORD *)(v8 + 18) & 2) != 0) {
          uint64_t result = (uint64_t (**)(void))sub_100032228(v8, 1, (uint64_t)v20);
        }
      }

      ++v7;
      v8 += *((int *)v6 + 18);
    }

    while (v7 < *(_DWORD *)a2);
  }

  if (a3)
  {
    uint64_t v11 = (*v6)(0LL);
    if (*a3 >= 1)
    {
      int v12 = 0;
      uint64_t v13 = (char *)a3 + v11;
      do
      {
        uint64_t v14 = (*v6)(0LL);
        if (*(int *)a2 >= 1)
        {
          int v15 = 0;
          uint64_t v16 = (char *)(a2 + v14);
          while (!((unsigned int (*)(char *, char *))v6[1])(v16, v13))
          {
            ++v15;
            v16 += *((int *)v6 + 18);
            if (v15 >= *(_DWORD *)a2) {
              goto LABEL_27;
            }
          }

          if (v16)
          {
            if ((*((_WORD *)v13 + 9) & 4) != 0) {
              ((void (*)(uint64_t, char *, const char *))v6[7])(5LL, v13, "Re-applying route");
            }
            else {
              *((_WORD *)v13 + 9) = *((_WORD *)v16 + 9) & 3;
            }
          }
        }

LABEL_27:
        ++v12;
        v13 += *((int *)v6 + 18);
      }

      while (v12 < *a3);
    }

  if (v23 == v24) {
    goto LABEL_30;
  }
  if (v27 == 1)
  {
    uint64_t v19 = (int)sa_dst_compare_no_dependencies(&v41, v40) >= 0;
    goto LABEL_30;
  }

  uint64_t v19 = 0LL;
LABEL_28:

  return v19;
}

    int v12 = 0LL;
  }

  else
  {
    __int128 v31 = 0u;
    uint32_t v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    uint64_t v5 = v3;
    uint64_t v6 = -[os_log_s countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v29,  v28,  16LL);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = *(void *)v30;
      while (2)
      {
        int v9 = 0LL;
        do
        {
          if (*(void *)v30 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)v9);
          if (v10)
          {
            uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSString);
            if ((objc_opt_isKindOfClass(v10, v11) & 1) == 0 || ![v10 length])
            {
              uint64_t v13 = sub_10005DC2C();
              uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
              int v15 = _SC_syslog_os_log_mapping(3LL);
              if (__SC_log_enabled(3LL, v14, v15))
              {
                unsigned int v47 = 0u;
                os_log_t v48 = 0u;
                unsigned int v45 = 0u;
                unsigned int v46 = 0u;
                uint64_t v43 = 0u;
                uint64_t v44 = 0u;
                uint32_t v41 = 0u;
                os_log_t v42 = 0u;
                unsigned int v39 = 0u;
                uint32_t v40 = 0u;
                uint64_t v37 = 0u;
                int v38 = 0u;
                BOOL v35 = 0u;
                uint64_t v36 = 0u;
                int v33 = 0u;
                unsigned int v34 = 0u;
                uint64_t v16 = (_sc_log > 0) | 2;
                if (os_log_type_enabled(v14, (os_log_type_t)v15)) {
                  int v17 = v16;
                }
                else {
                  int v17 = 2LL;
                }
                v27[0] = 0;
                __int128 v25 = 2;
                int v18 = (__int128 *)_os_log_send_and_compose_impl( v17,  0LL,  &v33,  256LL,  &_mh_execute_header,  v14,  v15,  "QoSMarkingAllowListAppIdentifiers not valid",  v27,  v25);
                __SC_log_send2(3LL, v14, v15, 0LL, v18);
                if (v18 != &v33) {
                  free(v18);
                }
              }

              goto LABEL_27;
            }
          }

          int v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        int v7 = -[os_log_s countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v29,  v28,  16LL);
        if (v7) {
          continue;
        }
        break;
      }
    }

    int v12 = v5;
  }

  return v12;
}

LABEL_30:
    uint64_t result = (uint64_t (**)(void))(*v6)(0LL);
    int v17 = *a3;
    if (*a3 >= 1)
    {
      int v18 = 0;
      uint64_t v19 = (uint64_t)result + (void)a3;
      do
      {
        if ((*(_WORD *)(v19 + 18) & 1) == 0)
        {
          uint64_t result = (uint64_t (**)(void))sub_100032228(v19, 0, (uint64_t)v20);
          int v17 = *a3;
        }

        ++v18;
        v19 += *((int *)v6 + 18);
      }

      while (v18 < v17);
    }
  }

  return result;
}

uint64_t sub_100032228(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a3;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, char *))(*(void *)a3 + 56LL);
  int v7 = *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 16LL);
  if (a2 == 1)
  {
    int v14 = v7(a1, 2LL, *(unsigned int *)(a3 + 24));
    int v15 = v14;
    if (v14)
    {
      if (v14 != 1001 && v14 != 3)
      {
        os_log_t v26 = (os_log_t)qword_100079C78;
        if (!qword_100079C78)
        {
          os_log_t v26 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_100079C78 = (uint64_t)v26;
        }

        uint64_t v27 = _SC_syslog_os_log_mapping(5LL);
        uint64_t v28 = _os_log_pack_size(12LL);
        __int128 v29 = &__str[-((__chkstk_darwin(v28) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
        uint64_t v30 = *__error();
        uint64_t v31 = _os_log_pack_fill(v29, v28, v30, &_mh_execute_header, "failed to remove route, %s");
LABEL_42:
        uint64_t v39 = v31;
        uint32_t v40 = strerror(v15);
        *(_DWORD *)uint64_t v39 = 136315138;
        *(void *)(v39 + 4) = v40;
        __SC_log_send(5LL, v26, v27, v29);
LABEL_43:
        uint64_t v23 = 5LL;
        uint64_t v24 = a1;
        uint64_t v22 = 0LL;
LABEL_44:
        v6(v23, v24, v22);
        return 1LL;
      }
    }

    if (byte_100079C94 == 1)
    {
      if (v14 == 1001) {
        int v17 = "!";
      }
      else {
        int v17 = "";
      }
      uint64_t v19 = *(void *)a3;
      uint64_t v18 = *(void *)(a3 + 8);
      uint64_t v20 = (*(uint64_t (**)(void))v19)(0LL);
      uint64_t v21 = "(ESRCH)";
      if (v15 != 3) {
        uint64_t v21 = "";
      }
      snprintf(__str, 0x40uLL, "%sRemove old[%ld]%s", v17, (a1 - v18 - v20) / *(int *)(v19 + 72), v21);
      uint64_t v22 = __str;
      uint64_t v23 = 7LL;
      uint64_t v24 = a1;
      goto LABEL_44;
    }

    return 1LL;
  }

  if (a2) {
    return 1LL;
  }
  unsigned int v8 = *(unsigned __int16 *)(a1 + 18);
  if ((v8 & 1) != 0) {
    return (v8 >> 1) & 1;
  }
  int v9 = *(uint64_t (**)(uint64_t))(v5 + 24);
  *(_WORD *)(a1 + 18) = v8 | 1;
  if ((*(_WORD *)(a1 + 16) & 2) == 0) {
    goto LABEL_28;
  }
  uint64_t v10 = *(int **)(a3 + 16);
  uint64_t v11 = (const void *)v9(a1);
  if (!sub_100031278(v5, v10, v11, *(_DWORD *)(*(void *)a3 + 80LL), *(_DWORD *)(a1 + 4), 0))
  {
    v6(5LL, a1, "no gateway route");
LABEL_28:
    int v15 = v7(a1, 1LL, *(unsigned int *)(a3 + 24));
    if (v15 == 17)
    {
      v7(a1, 2LL, *(unsigned int *)(a3 + 24));
      int v15 = v7(a1, 1LL, *(unsigned int *)(a3 + 24));
    }

    if (!v15 || v15 == 1001)
    {
      if (byte_100079C94 == 1)
      {
        if (v15 == 1001) {
          int v33 = "!";
        }
        else {
          int v33 = "";
        }
        uint64_t v34 = *(void *)a3;
        uint64_t v35 = *(void *)(a3 + 16);
        uint64_t v36 = (*(uint64_t (**)(void))v34)(0LL);
        snprintf(__str, 0x40uLL, "%sAdd new[%ld]", v33, (a1 - v35 - v36) / *(int *)(v34 + 72));
        v6(7LL, a1, __str);
      }

      *(_WORD *)(a1 + 18) |= 2u;
      return 1LL;
    }

    os_log_t v26 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v26 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v26;
    }

    uint64_t v27 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v37 = _os_log_pack_size(12LL);
    __int128 v29 = &__str[-((__chkstk_darwin(v37) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
    uint64_t v38 = *__error();
    uint64_t v31 = _os_log_pack_fill(v29, v37, v38, &_mh_execute_header, "failed to add route, %s:");
    goto LABEL_42;
  }

  int v12 = *(_DWORD *)(a3 + 28);
  if (v12 != 10)
  {
    *(_DWORD *)(a3 + 28) = v12 + 1;
    int v32 = sub_100032228();
    --*(_DWORD *)(a3 + 28);
    if (!v32)
    {
      uint64_t v13 = "failed to add";
      goto LABEL_47;
    }

    goto LABEL_28;
  }

  uint64_t v13 = "routing loop detected, not adding";
LABEL_47:
  v6(5LL, a1, (char *)v13);
  return 0LL;
}

void sub_100032674(CFArrayRef keys, CFArrayRef patterns)
{
  os_log_t v2 = SCDynamicStoreCopyMultiple((SCDynamicStoreRef)qword_100079C88, keys, patterns);
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = sub_100032BA0(v2);
    CFRelease(v3);
    os_log_t v5 = (os_log_t)qword_100079C78;
    if (v4)
    {
      if (!qword_100079C78)
      {
        os_log_t v5 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_100079C78 = (uint64_t)v5;
      }

      uint64_t v6 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v5, v6))
      {
        uint64_t v7 = _os_log_pack_size(22LL);
        unsigned int v8 = (char *)&v19 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v9 = __error();
        uint64_t v10 = _os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "IPMonitor prime %ld keys %@");
        CFIndex Count = CFArrayGetCount(v4);
        *(_DWORD *)uint64_t v10 = 134218242;
        *(void *)(v10 + 4) = Count;
        *(_WORD *)(v10 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
        *(void *)(v10 + 14) = v4;
        __SC_log_send(5LL, v5, v6, v8);
      }

      sub_100032C68((const __SCDynamicStore *)qword_100079C88, v4, 0LL);
      CFRelease(v4);
      return;
    }

    if (!qword_100079C78)
    {
      os_log_t v5 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v5;
    }

    uint64_t v12 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v5, v12))
    {
      uint64_t v17 = _os_log_pack_size(12LL);
      int v14 = (char *)&v19 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v18 = *__error();
      uint64_t v16 = _os_log_pack_fill(v14, v17, v18, &_mh_execute_header, "%s: no keys");
      goto LABEL_16;
    }
  }

  else
  {
    os_log_t v5 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v5 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v5;
    }

    uint64_t v12 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v5, v12))
    {
      uint64_t v13 = _os_log_pack_size(12LL);
      int v14 = (char *)&v19 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v15 = *__error();
      uint64_t v16 = _os_log_pack_fill(v14, v13, v15, &_mh_execute_header, "%s: no content");
LABEL_16:
      *(_DWORD *)uint64_t v16 = 136315138;
      *(void *)(v16 + 4) = "prime_notifications";
      __SC_log_send(5LL, v5, v12, v14);
    }
  }

void sub_100032964(CFStringRef serviceID, const __CFArray *a2)
{
  for (uint64_t i = 0LL; i != 40; i += 8LL)
  {
    os_log_t v5 = **(const __CFString ***)((char *)&off_100072940 + i);
    CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainSetup, serviceID, v5);
    sub_100030F28(a2, NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    CFStringRef v7 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainState, serviceID, v5);
    sub_100030F28(a2, v7);
    CFRelease(v7);
  }

  CFStringRef v8 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainState, serviceID, kSCEntNetDHCP);
  sub_100030F28(a2, v8);
  CFRelease(v8);
  CFStringRef v9 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainSetup, serviceID, 0LL);
  sub_100030F28(a2, v9);
  CFRelease(v9);
  CFStringRef v10 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainState, serviceID, 0LL);
  sub_100030F28(a2, v10);
  CFRelease(v10);
}

void sub_100032AE8(CFStringRef serviceID, const __CFArray *a2)
{
  for (uint64_t i = 0LL; i != 48; i += 16LL)
  {
    CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  kSCDynamicStoreDomainState,  serviceID,  **(CFStringRef **)((char *)&off_100072968 + i));
    sub_100030F28(a2, NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
  }

CFArrayRef sub_100032BA0(const __CFDictionary *a1)
{
  CFIndex Count = CFDictionaryGetCount(a1);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v3 = Count;
  __chkstk_darwin();
  os_log_t v5 = (const void **)((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  CFDictionaryGetKeysAndValues(a1, v5, 0LL);
  return CFArrayCreate(0LL, v5, v3, &kCFTypeArrayCallBacks);
}

void sub_100032C68(const __SCDynamicStore *a1, const __CFArray *a2, const __CFArray *a3)
{
  unsigned int v216 = a1;
  v236 = 0LL;
  v237 = 0LL;
  sub_1000290BC();
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(a2);
    if (byte_100079C94 == 1)
    {
      os_log_t v6 = (os_log_t)qword_100079C78;
      if (!qword_100079C78)
      {
        os_log_t v6 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_100079C78 = (uint64_t)v6;
      }

      uint64_t v7 = _SC_syslog_os_log_mapping(7LL);
      if (__SC_log_enabled(7LL, v6, v7))
      {
        uint64_t v8 = _os_log_pack_size(22LL);
        CFStringRef v9 = (char *)&v213 - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFStringRef v10 = __error();
        uint64_t v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "changed keys %@ (%ld)");
        *(_DWORD *)uint64_t v11 = 138412546;
        *(void *)(v11 + 4) = a2;
        *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
        *(void *)(v11 + 14) = Count;
        __SC_log_send(7LL, v6, v7, v9);
      }
    }
  }

  else
  {
    CFIndex Count = 0LL;
  }

  if (a3 || Count)
  {
    else {
      CFDictionaryRef Copy = 0LL;
    }
    if (qword_100079CE0
      && (int v14 = (const __CFDictionary *)sub_10002E790((void *)qword_100079CE0, kSCEntNetProxies)) != 0LL)
    {
      CFDictionaryRef v15 = CFDictionaryCreateCopy(0LL, v14);
    }

    else
    {
      CFDictionaryRef v15 = 0LL;
    }

    CFArrayRef v227 = a3;
    CFSetRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    v234 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    v235 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    __int128 v224 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    p_base_props = &QoSMarkingController__classData.base_props;
    CFDictionaryRef v213 = Copy;
    CFDictionaryRef v214 = v15;
    if (Count >= 1)
    {
      int v17 = 0;
      int v229 = 0;
      int v225 = 0;
      int v215 = 0;
      CFIndex v18 = 0LL;
      CFStringRef v228 = kSCEntNetIPv4;
      uint64_t v19 = (const __CFString *)kSCEntNetInterfaceDelegation;
      *(void *)&__int128 v226 = kSCEntNetIPv6;
      while (1)
      {
        valuePtr[0] = 0LL;
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v18);
        if (CFEqual(ValueAtIndex, (CFTypeRef)qword_100079CC0))
        {
          int v229 = 1;
        }

        else
        {
          if (!CFEqual(ValueAtIndex, p_base_props[410])
            && !CFEqual(ValueAtIndex, (CFTypeRef)qword_100079CC8)
            && !CFEqual(ValueAtIndex, @"/Library/Preferences/SystemConfiguration/resolver"))
          {
            if (!CFStringHasPrefix(ValueAtIndex, (CFStringRef)qword_100079CE8) || !CFStringHasSuffix(ValueAtIndex, v19))
            {
              if (!CFStringHasPrefix(ValueAtIndex, (CFStringRef)qword_100079CF0))
              {
                if (CFStringHasPrefix(ValueAtIndex, (CFStringRef)qword_100079CF8))
                {
                  uint64_t v24 = sub_100034C10(ValueAtIndex, 0LL);
                  if (v24)
                  {
                    __int128 v25 = v24;
                    sub_100030F28(v224, v24);
                    CFRelease(v25);
                  }

                  char v26 = 0;
                  uint64_t v27 = 0LL;
                  do
                  {
                    char v28 = v26;
                    int HasSuffix = CFStringHasSuffix(ValueAtIndex, *(CFStringRef *)*(&off_100072998 + v27));
                    if (HasSuffix) {
                      break;
                    }
                    char v26 = 1;
                    uint64_t v27 = 1LL;
                  }

                  while ((v28 & 1) == 0);
                  if (HasSuffix) {
                    int v30 = 1;
                  }
                  else {
                    int v30 = v215;
                  }
                  if (CFStringHasSuffix(ValueAtIndex, kSCEntNetInterface)) {
                    int v31 = 1;
                  }
                  else {
                    int v31 = v30;
                  }
                  int v215 = v31;
                  p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                }

                else if (sub_100045FEC(ValueAtIndex, valuePtr))
                {
                  sub_100034D5C(0, valuePtr[0]);
                  int v225 = 1;
                }

                goto LABEL_26;
              }

              CFTypeRef v232 = 0LL;
              uint64_t v21 = (void *)sub_100034C10(ValueAtIndex, &v232);
              if (v21)
              {
                uint64_t v22 = v21;
                sub_100030F28(v224, v21);
                if (v232)
                {
                  if (CFEqual(v232, v228))
                  {
                    uint64_t v23 = &v237;
                    goto LABEL_53;
                  }

                  if (CFEqual(v232, (CFTypeRef)v226))
                  {
                    uint64_t v23 = &v236;
LABEL_53:
                    sub_100034CE8(v23, v22);
                  }
                }

                CFRelease(v22);
              }

              if (v232) {
                CFRelease(v232);
              }
              goto LABEL_26;
            }

            int v215 = 1;
            int v229 = 1;
          }

          int v17 = 1;
        }

LABEL_204:
    v129 = sub_10002DDD8((int *)v102, (int *)qword_100079C80);
    if (v229 || v128 || v215)
    {
      if (qword_100079C80)
      {
        int v132 = v229 | v215;
        uint64_t v133 = mach_absolute_time();
        uint64_t v134 = qword_100079C80;
        *(void *)(qword_100079C80 + 3pthread_attr_setdetachstate(&v4, 2) = v133;
        if (v132)
        {
          LODWORD(valuePtr[0]) = 0;
          LODWORD(v23pthread_attr_setdetachstate(&v4, 2) = 0;
          sub_1000369D4(v57, (int *)valuePtr, (int *)&v232);
          uint64_t v134 = qword_100079C80;
          int v135 = (int)v232;
          *(_DWORD *)(qword_100079C80 + 24) = valuePtr[0];
          *(_DWORD *)(v134 + 28) = v135;
        }

        sub_10002DF8C((uint64_t)v102, v134, v129);
        v136 = (unsigned int *)qword_100079C80;
      }

      else
      {
        v136 = 0LL;
      }

      int v131 = sub_1000371A0(v136);
      if (v131) {
        int v130 = 1;
      }
      else {
        int v130 = v126;
      }
    }

    else
    {
      int v130 = 0;
      int v131 = 0;
    }

    if (!v127) {
      goto LABEL_232;
    }
    if (qword_100079CD8
      && (v137 = (const __CFDictionary *)CFDictionaryGetValue( (CFDictionaryRef)qword_100079CA0,  (const void *)qword_100079CD8)) != 0LL)
    {
      unsigned int v138 = CFDictionaryGetValue(v137, kSCEntNetDNS);
    }

    else
    {
      unsigned int v138 = 0LL;
    }

    unsigned int v139 = (const void *)qword_100079D90;
    if ((const void *)qword_100079D90 == v138)
    {
      BOOL v140 = 0;
    }

    else
    {
      BOOL v140 = 1;
      if (v138 && qword_100079D90)
      {
        BOOL v140 = CFEqual((CFTypeRef)qword_100079D90, v138) == 0;
LABEL_227:
        CFRetain(v138);
        unsigned int v139 = (const void *)qword_100079D90;
LABEL_228:
        if (v139) {
          CFRelease(v139);
        }
        qword_100079D90 = (uint64_t)v138;
        if (v140)
        {
          v131 |= 2u;
          *(_DWORD *)&v221[4] = 1;
          goto LABEL_233;
        }

LABEL_232:
        *(_DWORD *)&v221[4] = 0;
        BOOL v141 = 0;
        if (!v130) {
          goto LABEL_253;
        }
LABEL_233:
        unsigned int v142 = (const void *)qword_100079CD8;
        valuePtr[0] = 0LL;
        uint64_t v143 = (const __CFString *)CFDictionaryGetValue(v57, (const void *)qword_100079CD0);
        unsigned int v144 = (const __CFArray *)CFDictionaryGetValue(v57, (const void *)qword_100079CC8);
        if (v142)
        {
          unsigned int v145 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_100079CA0, v142);
          if (v145) {
            unsigned int v145 = (const __CFDictionary *)CFDictionaryGetValue(v145, kSCEntNetDNS);
          }
        }

        else
        {
          unsigned int v145 = 0LL;
        }

        int v146 = sub_100020304(v145, (const __CFDictionary *)qword_100079CA0, v218, v143, v144, valuePtr);
        if (!v146) {
          goto LABEL_249;
        }
        uint64_t v147 = (const __CFDictionary *)valuePtr[0];
        uint64_t v148 = (const void *)qword_100079DA0;
        if ((CFTypeRef)qword_100079DA0 == valuePtr[0]) {
          goto LABEL_242;
        }
        if (valuePtr[0] && qword_100079DA0)
        {
          if (CFEqual((CFTypeRef)qword_100079DA0, valuePtr[0]))
          {
LABEL_242:
            sub_100030F28(Mutable, (const void *)qword_100079D98);
LABEL_249:
            if (valuePtr[0]) {
              CFRelease(valuePtr[0]);
            }
            BOOL v141 = v146 != 0;
            if (v146) {
              v131 |= 2u;
            }
LABEL_253:
            if (!v124)
            {
              int v153 = 0;
              goto LABEL_274;
            }

            if (qword_100079CE0)
            {
              uint64_t v152 = (const __CFDictionary *)CFDictionaryGetValue( (CFDictionaryRef)qword_100079CA0,  (const void *)qword_100079CE0);
              if (v152) {
                uint64_t v152 = (const __CFDictionary *)CFDictionaryGetValue(v152, kSCEntNetProxies);
              }
            }

            else
            {
              uint64_t v152 = 0LL;
            }

            int v154 = sub_1000431E8(v152, (const __CFDictionary *)qword_100079CA0, v218, v57);
            if ((__CFDictionary *)qword_100079DA8 == v154)
            {
              int v153 = 0;
              int v155 = v154;
              if (!v154)
              {
LABEL_272:
                qword_100079DA8 = (uint64_t)v154;
                if (v153) {
                  v131 |= 4u;
                }
LABEL_274:
                if (v225) {
                  int v157 = v131 | 0x10;
                }
                else {
                  int v157 = v131;
                }
                if (v224) {
                  CFRelease(v224);
                }
                CFRelease(v57);
                if (v237)
                {
                  CFRelease(v237);
                  v237 = 0LL;
                }

                *(_DWORD *)char v221 = v141;
                if (v236)
                {
                  CFRelease(v236);
                  v236 = 0LL;
                }

                *(void *)&__int128 v226 = v129;
                if (!v157)
                {
                  sub_10003749C(&Mutable, v216);
                  if (v213) {
                    CFRelease(v213);
                  }
                  if (v214) {
                    CFRelease(v214);
                  }
                  CFMutableStringRef v162 = 0LL;
                  char v163 = 1;
                  CFSetRef v164 = v222;
                  goto LABEL_377;
                }

                LODWORD(v219) = v153;
                LODWORD(v2snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v157;
                uint64_t v223 = (uint64_t)CFStringCreateMutable(0LL, 0LL);
                if (!v129)
                {
LABEL_330:
                  int v186 = *(_DWORD *)v221;
                  if (!*(void *)v221)
                  {
                    CFDictionaryRef v189 = v213;
                    CFDictionaryRef v187 = v214;
                    CFMutableStringRef v162 = (CFMutableStringRef)v223;
                    if (qword_100079CD8) {
                      CFStringAppend((CFMutableStringRef)v223, @" DNS");
                    }
LABEL_349:
                    if (!(_DWORD)v219)
                    {
                      CFSetRef v164 = v222;
                      if (qword_100079CE0) {
                        CFStringAppend(v162, @" Proxy");
                      }
LABEL_363:
                      sub_10003749C(&Mutable, v216);
                      if (v189) {
                        CFRelease(v189);
                      }
                      if (v187) {
                        CFRelease(v187);
                      }
                      int v194 = (int)v220;
                      if (qword_100079DC8 != -1) {
                        dispatch_once(&qword_100079DC8, &stru_100072B30);
                      }
                      block[0] = _NSConcreteStackBlock;
                      block[1] = 0x40000000LL;
                      block[2] = sub_1000377D4;
                      block[3] = &unk_1000729A8;
                      int v231 = v194;
                      dispatch_async((dispatch_queue_t)qword_100079DD0, block);
                      if (v162)
                      {
                        if (CFStringGetLength(v162))
                        {
                          os_log_t v195 = (os_log_t)qword_100079C78;
                          if (!qword_100079C78)
                          {
                            os_log_t v195 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                            qword_100079C78 = (uint64_t)v195;
                          }

                          uint64_t v196 = _SC_syslog_os_log_mapping(5LL);
                          if (__SC_log_enabled(5LL, v195, v196))
                          {
                            uint64_t v197 = _os_log_pack_size(12LL);
                            v198 = (char *)&v213 - ((__chkstk_darwin(v197) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                            v199 = __error();
                            uint64_t v200 = _os_log_pack_fill( v198,  v197,  *v199,  &_mh_execute_header,  "network changed:%@");
                            *(_DWORD *)uint64_t v200 = 138412290;
                            *(void *)(v200 + 4) = v223;
                            __SC_log_send(5LL, v195, v196, v198);
                          }

                          goto LABEL_387;
                        }

                        char v163 = 0;
                      }

                      else
                      {
                        char v163 = 1;
                      }

LABEL_377:
                      CFIndex v201 = CFDictionaryGetCount(v235);
                      uint64_t v223 = (uint64_t)v162;
                      if (v201 <= 0 && CFArrayGetCount(v234) <= 0 && CFArrayGetCount(Mutable) < 1)
                      {
                        os_log_t v202 = (os_log_t)qword_100079C78;
                        if (v225)
                        {
                          if (!qword_100079C78)
                          {
                            os_log_t v202 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                            qword_100079C78 = (uint64_t)v202;
                          }

                          uint64_t v203 = _SC_syslog_os_log_mapping(5LL);
                          if (__SC_log_enabled(5LL, v202, v203))
                          {
                            uint64_t v209 = _os_log_pack_size(2LL);
                            CFStringRef v205 = (char *)&v213 - ((__chkstk_darwin(v209) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                            uint64_t v210 = *__error();
                            v207 = (_WORD *)_os_log_pack_fill( v205,  v209,  v210,  &_mh_execute_header,  "nat64 update",  v213);
                            goto LABEL_384;
                          }
                        }

                        else
                        {
                          if (!qword_100079C78)
                          {
                            os_log_t v202 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                            qword_100079C78 = (uint64_t)v202;
                          }

                          uint64_t v203 = _SC_syslog_os_log_mapping(6LL);
                          if (__SC_log_enabled(6LL, v202, v203))
                          {
                            uint64_t v211 = _os_log_pack_size(2LL);
                            CFStringRef v205 = (char *)&v213 - ((__chkstk_darwin(v211) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                            CFStringRef v212 = __error();
                            *(_WORD *)_os_log_pack_fill( v205,  v211,  *v212,  &_mh_execute_header,  "network event w/no changes") = 0;
                            uint64_t v208 = 6LL;
                            goto LABEL_385;
                          }
                        }
                      }

                      else
                      {
                        os_log_t v202 = (os_log_t)qword_100079C78;
                        if (!qword_100079C78)
                        {
                          os_log_t v202 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                          qword_100079C78 = (uint64_t)v202;
                        }

                        uint64_t v203 = _SC_syslog_os_log_mapping(5LL);
                        if (__SC_log_enabled(5LL, v202, v203))
                        {
                          uint64_t v204 = _os_log_pack_size(2LL);
                          CFStringRef v205 = (char *)&v213 - ((__chkstk_darwin(v204) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                          uint64_t v206 = *__error();
                          v207 = (_WORD *)_os_log_pack_fill( v205,  v204,  v206,  &_mh_execute_header,  "network changed",  v213);
LABEL_384:
                          _WORD *v207 = 0;
                          uint64_t v208 = 5LL;
LABEL_385:
                          __SC_log_send(v208, v202, v203, v205);
                        }
                      }

                      if ((v163 & 1) != 0)
                      {
LABEL_388:
                        if ((void)v226) {
                          free((void *)v226);
                        }
                        if (v164) {
                          free(v164);
                        }
                        if (Mutable)
                        {
                          CFRelease(Mutable);
                          CFSetRef Mutable = 0LL;
                        }

                        if (v234)
                        {
                          CFRelease(v234);
                          v234 = 0LL;
                        }

                        if (v235)
                        {
                          CFRelease(v235);
                          v235 = 0LL;
                        }

                        sub_100028FE0();
                        sub_100028778();
                        sub_10002928C();
                        sub_100029438();
                        return;
                      }

LABEL_387:
                      CFRelease((CFTypeRef)v223);
                      goto LABEL_388;
                    }

                    CFSetRef v164 = v222;
                    if (qword_100079CE0)
                    {
                      v192 = sub_10002E790((void *)qword_100079CE0, kSCEntNetProxies);
                      if (!v187)
                      {
                        if (v192)
                        {
                          v193 = "+";
                          goto LABEL_362;
                        }

                        goto LABEL_361;
                      }

                      if (v192)
                      {
                        if (!CFEqual(v187, v192))
                        {
                          v193 = "!";
LABEL_362:
                          CFStringAppendFormat(v162, 0LL, @" Proxy%s", v193);
                          goto LABEL_363;
                        }

LABEL_361:
                        v193 = "";
                        goto LABEL_362;
                      }
                    }

                    else if (!v187)
                    {
                      goto LABEL_361;
                    }

                    v193 = "-";
                    goto LABEL_362;
                  }

                  CFDictionaryRef v187 = v214;
                  if (qword_100079CD8)
                  {
                    uint64_t v188 = sub_10002E790((void *)qword_100079CD8, kSCEntNetDNS);
                    CFDictionaryRef v189 = v213;
                    if (!v213)
                    {
                      CFMutableStringRef v162 = (CFMutableStringRef)v223;
                      if (v188)
                      {
                        uint64_t v190 = "+";
                        goto LABEL_343;
                      }

                      goto LABEL_342;
                    }

                    CFMutableStringRef v162 = (CFMutableStringRef)v223;
                    if (v188)
                    {
                      if (!CFEqual(v213, v188))
                      {
                        uint64_t v190 = "!";
LABEL_343:
                        if (*v190) {
                          BOOL v191 = 1;
                        }
                        else {
                          BOOL v191 = v186 == 0;
                        }
                        if (!v191) {
                          uint64_t v190 = "*";
                        }
                        CFStringAppendFormat(v162, 0LL, @" DNS%s", v190);
                        goto LABEL_349;
                      }

LABEL_342:
                      uint64_t v190 = "";
                      goto LABEL_343;
                    }
                  }

                  else
                  {
                    CFDictionaryRef v189 = v213;
                    CFMutableStringRef v162 = (CFMutableStringRef)v223;
                    if (!v213) {
                      goto LABEL_342;
                    }
                  }

                  uint64_t v190 = "-";
                  goto LABEL_343;
                }

                uint64_t v158 = qword_100079C80;
                int v159 = sub_100028AB0();
                CFSetRef v160 = v222;
                if (v222)
                {
                  if (v158)
                  {
                    int v165 = *(_DWORD *)(v158 + 16);
                    if (v165 == *((_DWORD *)v222 + 4))
                    {
                      if (v165 < 1)
                      {
LABEL_286:
                        BOOL v161 = v159 != -1;
                        goto LABEL_302;
                      }

                      unsigned int v166 = (int *)((char *)v222 + 224 * *((int *)v222 + 1) + 40);
                      unsigned int v167 = (int *)(v158 + 224LL * *(int *)(v158 + 4) + 40);
                      while (!strcmp((const char *)(v158 + 112LL * *v167 + 40), (const char *)v160 + 112 * *v166 + 40))
                      {
                        ++v167;
                        ++v166;
                        if (!--v165) {
                          goto LABEL_286;
                        }
                      }
                    }
                  }
                }

                if (v159 == -1)
                {
                  LODWORD(v227) = 0;
LABEL_303:
                  uint64_t v168 = v226;
                  uint64_t v169 = 0LL;
                  __int128 v224 = (const __CFArray *)(v226 + 40);
                  int v170 = 1;
                  uint64_t v171 = 52LL;
                  do
                  {
                    CFStringRef v228 = (CFStringRef)v171;
                    int v172 = v170;
                    uint64_t v173 = byte_10006582C[v169];
                    if ((_DWORD)v227)
                    {
                      uint64_t v174 = 12LL;
                      if ((v172 & 1) != 0) {
                        uint64_t v174 = 8LL;
                      }
                      unsigned int v175 = v224;
                      if (!v172) {
                        unsigned int v175 = (const __CFArray *)((char *)v224 + 112 * *(int *)(v168 + 4));
                      }
                      int v176 = *(_DWORD *)(v168 + v174);
                      if (v176 >= 1)
                      {
                        do
                        {
                          sub_100040330((uint64_t)v175, v173, v159);
                          unsigned int v175 = (const __CFArray *)((char *)v175 + 112);
                          --v176;
                        }

                        while (v176);
                      }
                    }

                    int v229 = v172;
                    uint64_t first_ifstate = nwi_state_get_first_ifstate(v168, v173);
                    if (first_ifstate)
                    {
                      uint64_t next = first_ifstate;
                      int v179 = 0LL;
                      CFMutableStringRef v180 = 0LL;
                      do
                      {
                        unsigned int v181 = "?";
                        if ((*(void *)(next + 16) & 0xE00uLL) <= 0x5FF) {
                          unsigned int v181 = (const char *)*((void *)&off_1000727B8 + ((*(void *)(next + 16) >> 8) & 0xFLL));
                        }
                        uint64_t v182 = inet_ntop( *(unsigned __int8 *)(next + 32),  (const void *)(next + 36),  (char *)valuePtr,  0x2Eu);
                        if (v179)
                        {
                          if (!v180) {
                            CFMutableStringRef v180 = CFStringCreateMutable(0LL, 0LL);
                          }
                          uint64_t ifname = nwi_ifstate_get_ifname(next);
                          CFStringAppendFormat(v180, 0LL, @", %s", ifname);
                          if (*v181) {
                            CFStringAppendFormat(v180, 0LL, @"%s:%s", v181, v182);
                          }
                        }

                        else
                        {
                          int v179 = CFStringCreateMutable(0LL, 0LL);
                          uint64_t v184 = nwi_ifstate_get_ifname(next);
                          CFStringAppendFormat(v179, 0LL, @"%s%s:%s", v184, v181, v182);
                        }

                        uint64_t next = nwi_ifstate_get_next(next, *(unsigned __int8 *)(next + 32));
                      }

                      while (next);
                      uint64_t v168 = v226;
                      if (v179)
                      {
                        unsigned int v185 = (__CFString *)v223;
                        CFStringAppendFormat((CFMutableStringRef)v223, 0LL, @" v%c(%@"), v228, v179;
                        if (v180)
                        {
                          if (CFStringGetLength(v180)) {
                            CFStringAppendFormat(v185, 0LL, @"%@", v180);
                          }
                          CFStringAppend(v185, @""));
                          CFRelease(v179);
                        }

                        else
                        {
                          CFStringAppend(v185, @""));
                          CFMutableStringRef v180 = v179;
                        }

                        CFRelease(v180);
                      }
                    }

                    int v170 = 0;
                    uint64_t v171 = 54LL;
                    uint64_t v169 = &_mh_execute_header.magic + 1;
                  }

                  while ((v229 & 1) != 0);
                  goto LABEL_330;
                }

                sub_100040070(v158, v159);
                BOOL v161 = 1;
LABEL_302:
                LODWORD(v227) = v161;
                goto LABEL_303;
              }

LABEL_271:
              CFRelease(v155);
              goto LABEL_272;
            }

            if (v154 && qword_100079DA8)
            {
              if (CFEqual((CFTypeRef)qword_100079DA8, v154))
              {
                int v153 = 0;
                goto LABEL_270;
              }
            }

            else if (!v154)
            {
              int v156 = (const void *)qword_100079DB0;
              sub_100030F28(v234, (const void *)qword_100079DB0);
              CFDictionaryRemoveValue(v235, v156);
              goto LABEL_269;
            }

            sub_100030C00((uint64_t)&Mutable, (const void *)qword_100079DB0, v154);
LABEL_269:
            int v153 = 1;
LABEL_270:
            int v155 = (__CFDictionary *)qword_100079DA8;
            if (!qword_100079DA8) {
              goto LABEL_272;
            }
            goto LABEL_271;
          }
        }

        else if (!valuePtr[0])
        {
          int v149 = 1;
          if (!qword_100079DA0)
          {
LABEL_246:
            qword_100079DA0 = (uint64_t)v147;
            if (v149)
            {
              unsigned int v150 = (const void *)qword_100079D98;
              sub_100030F28(v234, (const void *)qword_100079D98);
              CFDictionaryRemoveValue(v235, v150);
            }

            else
            {
              MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, v147);
              CFDictionaryRemoveValue(MutableCopy, kSCPropInterfaceName);
              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSupplementalMatchDomains);
              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSupplementalMatchOrders);
              CFDictionaryRemoveValue(MutableCopy, @"__SCOPED_QUERY__");
              sub_100030C00((uint64_t)&Mutable, (const void *)qword_100079D98, MutableCopy);
              CFRelease(MutableCopy);
            }

            goto LABEL_249;
          }

LABEL_245:
          CFRelease(v148);
          goto LABEL_246;
        }

        CFRetain(v147);
        int v149 = 0;
        uint64_t v148 = (const void *)qword_100079DA0;
        if (!qword_100079DA0) {
          goto LABEL_246;
        }
        goto LABEL_245;
      }
    }

    if (!v138) {
      goto LABEL_228;
    }
    goto LABEL_227;
  }

const void *sub_100034C10(CFStringRef theString, void *a2)
{
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, theString, @"/");
  CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
  os_log_t v5 = 0LL;
  if (Count < 4
    || (CFIndex v6 = Count, v5 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3LL), CFRetain(v5), !a2)
    || v6 == 4)
  {
    if (!a2) {
      goto LABEL_8;
    }
    ValueAtIndex = 0LL;
  }

  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 4LL);
    CFRetain(ValueAtIndex);
  }

  *a2 = ValueAtIndex;
LABEL_8:
  if (ArrayBySeparatingStrings) {
    CFRelease(ArrayBySeparatingStrings);
  }
  return v5;
}

void sub_100034CE8(__CFSet **a1, void *value)
{
  CFSetRef Mutable = *a1;
  if (!Mutable)
  {
    CFSetRef Mutable = CFSetCreateMutable(0LL, 0LL, &kCFTypeSetCallBacks);
    *a1 = Mutable;
  }

  CFSetAddValue(Mutable, value);
}

void sub_100034D5C(__int16 a1, CFTypeRef cf)
{
  if (qword_100079DC8 != -1) {
    dispatch_once(&qword_100079DC8, &stru_100072B30);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10003781C;
  block[3] = &unk_1000729C8;
  __int16 v5 = a1;
  void block[4] = cf;
  dispatch_async((dispatch_queue_t)qword_100079DD0, block);
}

void sub_100034E24(const __CFArray *a1, const void *a2)
{
  uint64_t v24 = a1;
  if (qword_100079CA0)
  {
    CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_100079CA0);
    if (Count >= 11)
    {
      CFIndex v3 = (const void **)malloc(16 * Count);
      CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_100079CA0, v3, &v3[Count]);
    }

    else
    {
      CFIndex v3 = (const void **)keys;
      CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_100079CA0, (const void **)keys, (const void **)&keys[Count]);
      if (Count < 1) {
        return;
      }
    }

    uint64_t v5 = 0LL;
    CFStringRef v6 = kSCEntNetIPv4;
    CFStringRef v25 = kSCEntNetIPv6;
    uint64_t v7 = &v3[Count];
    *(void *)&__int128 v4 = 138412546LL;
    __int128 v21 = v4;
    CFStringRef v23 = kSCEntNetIPv4;
    uint64_t v22 = v3;
    do
    {
      uint64_t v8 = v3[v5];
      CFStringRef v9 = (const __CFDictionary *)v7[v5];
      unsigned int Value = (const __CFDictionary *)CFDictionaryGetValue(v9, v6);
      if (Value || (unsigned int Value = (const __CFDictionary *)CFDictionaryGetValue(v9, v25)) != 0LL)
      {
        uint64_t v11 = sub_10002E66C(Value);
        if (v11)
        {
          if (CFEqual(v11, a2))
          {
            os_log_t v12 = (os_log_t)qword_100079C78;
            if (!qword_100079C78)
            {
              os_log_t v12 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
              qword_100079C78 = (uint64_t)v12;
            }

            uint64_t v13 = _SC_syslog_os_log_mapping(7LL);
            if (__SC_log_enabled(7LL, v12, v13))
            {
              int v14 = v7;
              CFDictionaryRef v15 = a2;
              uint64_t v16 = _os_log_pack_size(22LL);
              int v17 = (char *)&v21 - ((__chkstk_darwin(v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              CFIndex v18 = __error();
              uint64_t v19 = v16;
              a2 = v15;
              uint64_t v7 = v14;
              uint64_t v20 = _os_log_pack_fill( v17,  v19,  *v18,  &_mh_execute_header,  "Found IP service %@ on interface %@");
              *(_DWORD *)uint64_t v20 = v21;
              *(void *)(v20 + 4) = v8;
              *(_WORD *)(v20 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
              *(void *)(v20 + 14) = a2;
              __SC_log_send(7LL, v12, v13, v17);
              CFIndex v3 = v22;
              CFStringRef v6 = v23;
            }

            sub_100030F28(v24, v8);
          }
        }
      }

      ++v5;
    }

    while (Count != v5);
  }

const void *sub_1000350BC(const void *a1, CFStringRef serviceID, CFStringRef entity)
{
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainState, serviceID, entity);
  uint64_t v5 = sub_100037C50(a1, NetworkServiceEntity);
  if (NetworkServiceEntity) {
    CFRelease(NetworkServiceEntity);
  }
  return v5;
}

void sub_10003514C(CFTypeRef *a1)
{
  if (*((int *)a1 + 1) >= 1)
  {
    int v2 = 0;
    CFIndex v3 = a1 + 15;
    do
    {
      __int128 v4 = *(v3 - 13);
      if (v4)
      {
        CFRelease(v4);
        *(v3 - 13) = 0LL;
      }

      uint64_t v5 = *(v3 - 12);
      if (v5)
      {
        CFRelease(v5);
        *(v3 - 1pthread_attr_setdetachstate(&v4, 2) = 0LL;
      }

      if (*v3)
      {
        CFRelease(*v3);
        CFTypeRef *v3 = 0LL;
      }

      ++v2;
      v3 += 14;
    }

    while (v2 < *((_DWORD *)a1 + 1));
  }

  free(a1);
}

void *sub_100035200(int a1, const __CFArray *a2)
{
  unsigned int Count = CFDictionaryGetCount((CFDictionaryRef)qword_100079CA0);
  unsigned int v5 = Count;
  if (!Count) {
    return 0LL;
  }
  v9[0] = a1;
  CFStringRef v6 = &qword_100079D20;
  if (a1 != 2) {
    CFStringRef v6 = &qword_100079D28;
  }
  uint64_t v13 = *v6;
  uint64_t v7 = malloc(112LL * Count + 16);
  _DWORD *v7 = a1;
  v7[1] = 0;
  v7[2] = v5;
  v9[1] = v5;
  os_log_t v12 = v7;
  CFStringRef v10 = a2;
  if (a2) {
    CFIndex v11 = CFArrayGetCount(a2);
  }
  else {
    CFStringRef v10 = 0LL;
  }
  CFDictionaryApplyFunction((CFDictionaryRef)qword_100079CA0, (CFDictionaryApplierFunction)sub_10003D2A4, v9);
  uint64_t result = v12;
  if (!*((_DWORD *)v12 + 1))
  {
    sub_10003514C((CFTypeRef *)v12);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000352FC(int *a1, uint64_t a2)
{
  os_log_t v3 = (os_log_t)qword_100079C78;
  if (a1)
  {
    if (!qword_100079C78)
    {
      os_log_t v3 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v3;
    }

    uint64_t v5 = _SC_syslog_os_log_mapping(6LL);
    uint64_t result = __SC_log_enabled(6LL, v3, v5);
    if ((_DWORD)result)
    {
      uint64_t v8 = _os_log_pack_size(18LL);
      CFStringRef v9 = &v31[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL) - 6];
      CFStringRef v10 = __error();
      uint64_t v11 = _os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "%s: %d candidates",  (const char *)v30,  DWORD2(v30));
      int v12 = a1[1];
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)(v11 + 4) = a2;
      *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v11 + 14) = v12;
      uint64_t result = __SC_log_send(6LL, v3, v5, v9);
    }

    if (a1[1] >= 1)
    {
      int v13 = 0;
      int v14 = (char *)(a1 + 19);
      *(void *)&__int128 v7 = 67110402LL;
      __int128 v30 = v7;
      do
      {
        inet_ntop(*a1, v14, v31, 0x2Eu);
        os_log_t v15 = (os_log_t)qword_100079C78;
        if (!qword_100079C78)
        {
          os_log_t v15 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_100079C78 = (uint64_t)v15;
        }

        uint64_t v16 = _SC_syslog_os_log_mapping(6LL);
        uint64_t result = __SC_log_enabled(6LL, v15, v16);
        if ((_DWORD)result)
        {
          uint64_t v17 = _os_log_pack_size(54LL);
          CFIndex v18 = &v31[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL) - 6];
          uint64_t v19 = __error();
          uint64_t v20 = _os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "%d. %@ serviceID=%@ addr=%s rank=0x%x%s");
          uint64_t v21 = *(void *)(v14 - 52);
          uint64_t v22 = *(void *)(v14 - 60);
          int v23 = *((_DWORD *)v14 - 5);
          uint64_t v24 = " [ineligible]";
          if (!*((_DWORD *)v14 - 2)) {
            uint64_t v24 = "";
          }
          *(_DWORD *)uint64_t v20 = v30;
          *(_DWORD *)(v20 + 4) = v13;
          *(_WORD *)(v20 + 8) = 2112;
          *(void *)(v20 + 1sub_10000F430((uint64_t)__str, 0) = v21;
          *(_WORD *)(v20 + 18) = 2112;
          *(void *)(v20 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v22;
          *(_WORD *)(v20 + 28) = 2080;
          *(void *)(v20 + 3sub_10000F430((uint64_t)__str, 0) = v31;
          *(_WORD *)(v20 + 38) = 1024;
          *(_DWORD *)(v20 + 4sub_10000F430((uint64_t)__str, 0) = v23;
          *(_WORD *)(v20 + 44) = 2080;
          *(void *)(v20 + 46) = v24;
          uint64_t result = __SC_log_send(6LL, v15, v16, v18);
        }

        ++v13;
        v14 += 112;
      }

      while (v13 < a1[1]);
    }
  }

  else
  {
    if (!qword_100079C78)
    {
      os_log_t v3 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v3;
    }

    uint64_t v25 = _SC_syslog_os_log_mapping(6LL);
    uint64_t result = __SC_log_enabled(6LL, v3, v25);
    if ((_DWORD)result)
    {
      uint64_t v26 = _os_log_pack_size(12LL);
      uint64_t v27 = &v31[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL) - 6];
      char v28 = __error();
      uint64_t v29 = _os_log_pack_fill(v27, v26, *v28, &_mh_execute_header, "%s: no candidates", (const char *)v30);
      *(_DWORD *)uint64_t v29 = 136315138;
      *(void *)(v29 + 4) = a2;
      return __SC_log_send(6LL, v3, v25, v27);
    }
  }

  return result;
}

int *sub_100035680( int *result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, const __CFSet *a7)
{
  if (!a6) {
    sub_100061D38();
  }
  if (result)
  {
    uint64_t v114 = a2;
    CFSetRef v116 = a7;
    uint64_t v7 = __chkstk_darwin(result);
    int v14 = (uint64_t *)((char *)&v105 - ((v13 + 15) & 0xFFFFFFFF0LL));
    int v15 = *(_DWORD *)(v7 + 4);
    if (v9 == 2) {
      int v16 = 5;
    }
    else {
      int v16 = 3;
    }
    uint64_t v17 = &kSCEntNetIPv4;
    if (v9 != 2) {
      uint64_t v17 = &kSCEntNetIPv6;
    }
    if (v15 >= 1)
    {
      uint64_t v108 = v11;
      uint64_t v111 = v8;
      os_log_t v113 = v10;
      uint64_t v109 = a5;
      uint64_t v120 = 0LL;
      int v18 = 0;
      uint64_t v19 = 0LL;
      int v110 = 0;
      int v122 = 0;
      uint64_t v20 = (v15 * v16);
      CFStringRef v117 = *v17;
      uint64_t v118 = v7;
      uint64_t v21 = v7 + 16;
      unsigned int v112 = v9;
      if (v9 == 2) {
        int v22 = 52;
      }
      else {
        int v22 = 54;
      }
      int v107 = v22;
      if (v9 == 2) {
        int v23 = 54;
      }
      else {
        int v23 = 52;
      }
      int v106 = v23;
      uint64_t v125 = (int)v20;
      uint64_t v126 = v20;
      uint64_t v24 = off_100072A78;
      if (v9 == 2)
      {
        uint64_t v24 = off_1000728E8;
        uint64_t v25 = sub_100031400;
      }

      else
      {
        uint64_t v25 = sub_10003B8A8;
      }

      uint64_t v26 = sub_10003E5F4;
      if (v9 == 2) {
        uint64_t v26 = sub_1000318B0;
      }
      int v135 = v26;
      size_t v27 = 16LL;
      if (v9 == 2) {
        size_t v27 = 4LL;
      }
      size_t v136 = v27;
      size_t v28 = *((int *)v24 + 18);
      *(void *)&__int128 v12 = 67110402LL;
      __int128 v105 = v12;
      uint64_t v115 = v14;
      BOOL v128 = v25;
      while (1)
      {
        if (*(_DWORD *)(v21 + 52)) {
          BOOL v29 = 0;
        }
        else {
          BOOL v29 = v120 == 0;
        }
        uint64_t v124 = v21;
        if (!v29) {
          goto LABEL_30;
        }
        unsigned int v30 = *(_DWORD *)(v21 + 40);
        if (HIBYTE(v30) == 3)
        {
          uint64_t v120 = 0LL;
LABEL_30:
          int v123 = 1;
          int v121 = 1;
          goto LABEL_36;
        }

        if (!v114) {
          break;
        }
        if (*(_DWORD *)(v114 + 52)) {
          break;
        }
        unsigned int v31 = *(_DWORD *)(v114 + 40);
        if (HIBYTE(v31) == 3) {
          break;
        }
        if (*(_DWORD *)(v124 + 44))
        {
          int v121 = 0;
          int v123 = 1;
          uint64_t v120 = v124;
        }

        else
        {
          if (*(_DWORD *)(v114 + 44)) {
            break;
          }
          int v81 = *(_DWORD *)(v124 + 48);
          if ((v81 || *(_DWORD *)(v114 + 48))
            && (int v82 = *(_DWORD *)(v114 + 32), v83 = *(_DWORD *)(v124 + 32), v82 != v83))
          {
            if (*(_DWORD *)(v114 + 36) == v83) {
              break;
            }
            int v121 = 0;
            int v123 = 1;
            if (v30 < v31 || *(_DWORD *)(v124 + 36) == v82) {
              goto LABEL_35;
            }
            int v84 = *(_DWORD *)(v114 + 48);
            if (v81)
            {
              if (v30 == v31 && v84) {
                break;
              }
            }

            else
            {
              int v121 = 0;
              int v123 = 1;
              if (v30 == v31 || !v84) {
                goto LABEL_35;
              }
            }

            uint64_t v134 = (uint64_t)v19;
            size_t v85 = v28;
            os_log_t v86 = (os_log_t)qword_100079C78;
            if (!qword_100079C78)
            {
              os_log_t v86 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
              qword_100079C78 = (uint64_t)v86;
            }

            uint64_t v87 = _SC_syslog_os_log_mapping(5LL);
            int v88 = __SC_log_enabled(5LL, v86, v87);
            uint64_t v89 = v124;
            if (v88)
            {
              uint64_t v90 = _os_log_pack_size(46LL);
              int v91 = (char *)&v105 - ((__chkstk_darwin(v90) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              CFTypeID v92 = __error();
              uint64_t v93 = _os_log_pack_fill( v91,  v90,  *v92,  &_mh_execute_header,  "IPv%c over %@ (rank 0x%x) demoted: primary IPv%c %@ (rank 0x%x)");
              uint64_t v94 = *(void *)(v89 + 8);
              int v95 = *(_DWORD *)(v89 + 40);
              uint64_t v96 = *(void *)(v114 + 8);
              int v97 = *(_DWORD *)(v114 + 40);
              *(_DWORD *)uint64_t v93 = v105;
              *(_DWORD *)(v93 + 4) = v107;
              *(_WORD *)(v93 + 8) = 2112;
              *(void *)(v93 + 1sub_10000F430((uint64_t)__str, 0) = v94;
              *(_WORD *)(v93 + 18) = 1024;
              *(_DWORD *)(v93 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v95;
              *(_WORD *)(v93 + 24) = 1024;
              *(_DWORD *)(v93 + 26) = v106;
              *(_WORD *)(v93 + 3sub_10000F430((uint64_t)__str, 0) = 2112;
              *(void *)(v93 + 3pthread_attr_setdetachstate(&v4, 2) = v96;
              *(_WORD *)(v93 + 4sub_10000F430((uint64_t)__str, 0) = 1024;
              *(_DWORD *)(v93 + 4pthread_attr_setdetachstate(&v4, 2) = v97;
              int v98 = v91;
              int v14 = v115;
              __SC_log_send(5LL, v86, v87, v98);
            }

            int v123 = 0;
            uint64_t v120 = 0LL;
            int v99 = v110;
            v14[v110] = v89;
            int v121 = 1;
            int v110 = v99 + 1;
            size_t v28 = v85;
            uint64_t v19 = (int *)v134;
          }

          else
          {
            int v121 = 0;
            int v123 = 1;
            uint64_t v120 = v124;
          }
        }

LABEL_89:
                __int128 v35 = v129;
                int v39 = v132;
LABEL_90:
                uint64_t v65 = v134;
                goto LABEL_91;
              }

              int v57 = 0;
              if (v51 > v133) {
                int v64 = -1;
              }
              else {
                int v64 = 1;
              }
              if (v51 == v133) {
                int v55 = v63;
              }
              else {
                int v55 = v64;
              }
              int v56 = 1;
            }

            else
            {
              int v56 = 0;
              int v57 = 1;
              uint64_t v19 = v49;
            }

            if (v55 < 0)
            {
              size_t v28 = v50;
              if (v134 != -1) {
                goto LABEL_74;
              }
              if (v46) {
                int v59 = v56;
              }
              else {
                int v59 = 0;
              }
              if (v59 == 1)
              {
                __int16 v60 = *((_WORD *)v46 + 8);
                uint64_t v134 = v45;
                if ((v60 & 1) != 0) {
                  goto LABEL_74;
                }
                if ((v48[4] & 1) != 0) {
                  unsigned int v47 = 1;
                }
                else {
                  unsigned int v47 = 2;
                }
              }

              uint64_t v134 = v45;
            }

            else
            {
              if (!v55) {
                goto LABEL_96;
              }
              if (v47 <= 1) {
                int v58 = 1;
              }
              else {
                int v58 = v47;
              }
              if (!v57) {
                unsigned int v47 = v58;
              }
              size_t v28 = v50;
            }

LABEL_129:
        char v77 = v123;
        if ((*((_WORD *)v35 + 4) & 1) != 0) {
          char v77 = 0;
        }
        if ((v77 & 1) == 0)
        {
          int v18 = v119;
          int v14 = v115;
LABEL_135:
          if (!v121) {
            int v18 = 1;
          }
          goto LABEL_137;
        }

        uint64_t v78 = v124;
        int v18 = v119;
        int v14 = v115;
        if (!*(_DWORD *)(v124 + 52))
        {
          uint64_t v79 = v112;
          sub_10003DC1C(v124, v113, v112);
          sub_10003DFF4(v111, v79, v78, v18, (v35[8] >> 2) & 1);
        }

LABEL_137:
        uint64_t v21 = v124 + 112;
        int v80 = *(_DWORD *)(v118 + 4);
        if (++v122 >= v80)
        {
          int v100 = v113;
          uint64_t v101 = v112;
          CFTypeID v102 = v111;
          if (v110 >= 1)
          {
            uint64_t v103 = v110;
            do
            {
              uint64_t v104 = *v14++;
              sub_10003DC1C(v104, v100, v101);
              sub_10003DFF4(v102, v101, v104, 1, 0);
              --v103;
            }

            while (v103);
          }

          a5 = v109;
          if (v109)
          {
            uint64_t result = (int *)v120;
            goto LABEL_168;
          }

          if (v19) {
            free(v19);
          }
          uint64_t result = (int *)v120;
LABEL_169:
          if ((_BYTE)v18) {
            return 0LL;
          }
          return result;
        }
      }

      int v121 = 0;
      int v123 = 1;
LABEL_35:
      uint64_t v120 = v124;
      goto LABEL_36;
    }

    uint64_t result = 0LL;
  }

  if (a5)
  {
    LOBYTE(v18) = 0;
    uint64_t v19 = result;
LABEL_168:
    *a5 = v19;
    goto LABEL_169;
  }

  return result;
}

uint64_t sub_1000360C4(CFTypeRef *a1, CFTypeRef cf, uint64_t a3)
{
  CFTypeRef v5 = *a1;
  if (!cf)
  {
    if (!v5) {
      return 0LL;
    }
    os_log_t v14 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v14 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v14;
    }

    uint64_t v15 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v14, v15))
    {
      uint64_t v16 = _os_log_pack_size(22LL);
      uint64_t v17 = (char *)&v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v18 = __error();
      uint64_t v19 = _os_log_pack_fill(v17, v16, *v18, &_mh_execute_header, "%@ is no longer primary %s");
      *(_DWORD *)uint64_t v19 = 138412546;
      *(void *)(v19 + 4) = v5;
      *(_WORD *)(v19 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v19 + 14) = a3;
      __SC_log_send(6LL, v14, v15, v17);
    }

    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0LL;
    }

    return 1LL;
  }

  if (!v5)
  {
LABEL_18:
    *a1 = CFRetain(cf);
    os_log_t v20 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v20 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v20;
    }

    uint64_t v21 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v20, v21))
    {
      uint64_t v22 = _os_log_pack_size(22LL);
      int v23 = (char *)&v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v24 = __error();
      uint64_t v25 = _os_log_pack_fill(v23, v22, *v24, &_mh_execute_header, "%@ is the new primary %s");
      *(_DWORD *)uint64_t v25 = 138412546;
      *(void *)(v25 + 4) = cf;
      *(_WORD *)(v25 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v25 + 14) = a3;
      __SC_log_send(6LL, v20, v21, v23);
      return 1LL;
    }

    return 1LL;
  }

  if (!CFEqual(cf, v5))
  {
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0LL;
    }

    goto LABEL_18;
  }

  os_log_t v7 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    os_log_t v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v7;
  }

  uint64_t v8 = _SC_syslog_os_log_mapping(6LL);
  uint64_t result = __SC_log_enabled(6LL, v7, v8);
  if ((_DWORD)result)
  {
    uint64_t v10 = _os_log_pack_size(22LL);
    uint64_t v11 = (char *)&v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __int128 v12 = __error();
    uint64_t v13 = _os_log_pack_fill(v11, v10, *v12, &_mh_execute_header, "%@ is still primary %s");
    *(_DWORD *)uint64_t v13 = 138412546;
    *(void *)(v13 + 4) = cf;
    *(_WORD *)(v13 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v13 + 14) = a3;
    __SC_log_send(6LL, v7, v8, v11);
    return 0LL;
  }

  return result;
}

void sub_100036418(const void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (a1 && a2)
    {
      CFSetRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if ((*(_WORD *)(a2 + 28) & 2) != 0)
      {
        inet_ntop(30, (const void *)(a2 + 48), v33, 0x2Eu);
        CFStringRef v7 = CFStringCreateWithFormat(0LL, 0LL, @"%s", v33);
        CFDictionarySetValue(Mutable, kSCPropNetIPv6Router, v7);
        CFRelease(v7);
      }

      uint64_t v8 = (const char *)sub_100028BF4(*(_DWORD *)(a2 + 16), (uint64_t)v33);
      if (v8)
      {
        CFStringRef v9 = CFStringCreateWithCString(0LL, v8, 0x600u);
        if (v9)
        {
          CFStringRef v10 = v9;
          CFDictionarySetValue(Mutable, kSCDynamicStorePropNetPrimaryInterface, v9);
          CFRelease(v10);
        }
      }

      CFDictionarySetValue(Mutable, kSCDynamicStorePropNetPrimaryService, a1);
      sub_100030C00(a3, (const void *)qword_100079D60, Mutable);
      CFRelease(Mutable);
      sub_10002965C(*(_DWORD *)(a2 + 16));
    }

    else
    {
      sub_10002965C(0);
      uint64_t v11 = (const void *)qword_100079D60;
      sub_100030F28(*(const __CFArray **)(a3 + 8), (const void *)qword_100079D60);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 16), v11);
    }
  }

  unsigned int v12 = sub_100030CA0();
  if (v12 != -1)
  {
    unsigned int v13 = v12;
    sub_100030FC8((uint64_t)off_100072A78, (int *)a2);
    if (byte_100079C94 == 1)
    {
      os_log_t v14 = (os_log_t)qword_100079C78;
      if (qword_100079D68)
      {
        if (!qword_100079C78)
        {
          os_log_t v14 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_100079C78 = (uint64_t)v14;
        }

        uint64_t v15 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v14, v15))
        {
          uint64_t v16 = _os_log_pack_size(2LL);
          uint64_t v17 = &v32[-((__chkstk_darwin(v16) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
          int v18 = __error();
          *(_WORD *)_os_log_pack_fill(v17, v16, *v18, &_mh_execute_header, "Old Routes = ") = 0;
          __SC_log_send(7LL, v14, v15, v17);
        }

        sub_10003E95C((unsigned int *)qword_100079D68);
      }

      else
      {
        if (!qword_100079C78)
        {
          os_log_t v14 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_100079C78 = (uint64_t)v14;
        }

        uint64_t v19 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v14, v19))
        {
          uint64_t v20 = _os_log_pack_size(2LL);
          uint64_t v21 = &v32[-((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
          uint64_t v22 = __error();
          *(_WORD *)_os_log_pack_fill(v21, v20, *v22, &_mh_execute_header, "Old Routes = <none>") = 0;
          __SC_log_send(7LL, v14, v19, v21);
        }
      }

      os_log_t v23 = (os_log_t)qword_100079C78;
      if (a2)
      {
        if (!qword_100079C78)
        {
          os_log_t v23 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_100079C78 = (uint64_t)v23;
        }

        uint64_t v24 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v23, v24))
        {
          uint64_t v25 = _os_log_pack_size(2LL);
          uint64_t v26 = &v32[-((__chkstk_darwin(v25) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
          size_t v27 = __error();
          *(_WORD *)_os_log_pack_fill(v26, v25, *v27, &_mh_execute_header, "New Routes = ") = 0;
          __SC_log_send(7LL, v23, v24, v26);
        }

        sub_10003E95C((unsigned int *)a2);
      }

      else
      {
        if (!qword_100079C78)
        {
          os_log_t v23 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_100079C78 = (uint64_t)v23;
        }

        uint64_t v28 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v23, v28))
        {
          uint64_t v29 = _os_log_pack_size(2LL);
          unsigned int v30 = &v32[-((__chkstk_darwin(v29) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
          unsigned int v31 = __error();
          *(_WORD *)_os_log_pack_fill(v30, v29, *v31, &_mh_execute_header, "New Routes = <none>") = 0;
          __SC_log_send(7LL, v23, v28, v30);
        }
      }
    }

    sub_100031FDC((uint64_t (**)(void))off_100072A78, qword_100079D68, (int *)a2, v13);
    close(v13);
  }

  if (qword_100079D68) {
    free((void *)qword_100079D68);
  }
  qword_100079D68 = a2;
}

uint64_t sub_100036930(const __CFDictionary *a1, void *key, const void *a3)
{
  uint64_t v5 = 0x1FFFFFFLL;
  if (sub_10002E790(key, a3))
  {
    unsigned int valuePtr = 0x1FFFFFF;
    unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(a1, key);
    if (Value)
    {
      if (CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr)) {
        return valuePtr;
      }
      else {
        return 0x1000000LL;
      }
    }
  }

  return v5;
}

void sub_1000369D4(const __CFDictionary *a1, int *a2, int *a3)
{
  uint64_t v71 = a2;
  int v72 = a3;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  CFDictionaryRef v77 = a1;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_10003EA90, Mutable);
  CFIndex Count = CFArrayGetCount(Mutable);
  if (Count < 1) {
    goto LABEL_55;
  }
  CFIndex v6 = 0LL;
  CFStringRef v76 = (CFStringRef)kSCEntNetCommCenter;
  CFStringRef v73 = kSCDynamicStoreDomainState;
  size_t v67 = (const void *)kSCPropNetCommCenterAvailable;
  CFStringRef v74 = kSCEntNetPPP;
  CFStringRef v75 = kSCDynamicStoreDomainSetup;
  CFStringRef v70 = kSCEntNetInterface;
  p_base_props = &QoSMarkingController__classData.base_props;
  CFStringRef v64 = kSCPropNetInterfaceDeviceName;
  CFStringRef v63 = kSCPropNetPPPDialOnDemand;
  CFStringRef v68 = kSCEntNetIPv6;
  CFStringRef v69 = kSCEntNetIPv4;
  *(void *)&__int128 v5 = 138412546LL;
  __int128 v66 = v5;
  uint64_t v65 = Mutable;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Mutable, v6);
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, ValueAtIndex, @"/");
    if (CFArrayGetCount(ArrayBySeparatingStrings) != 5) {
      goto LABEL_36;
    }
    CFStringRef v10 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3LL);
    uint64_t v11 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 4LL);
    if (CFEqual(v11, v76))
    {
      CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, v73, v10, v76);
      unsigned int Value = CFDictionaryGetValue(v77, NetworkServiceEntity);
      CFRelease(NetworkServiceEntity);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (!Value || CFGetTypeID(Value) != TypeID) {
        goto LABEL_36;
      }
      uint64_t v15 = (const __CFDictionary *)CFDictionaryGetValue(v77, ValueAtIndex);
      if ((int)sub_10003EB68(v15, v67, 0xFFFFFFFFLL) >= 1)
      {
      }
    }

    if (CFEqual(v11, v74))
    {
      CFStringRef v16 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, v75, v10, v70);
      uint64_t v17 = CFDictionaryGetValue(v77, v16);
      CFRelease(v16);
      CFTypeID v18 = CFDictionaryGetTypeID();
      if (v17 && CFGetTypeID(v17) == v18 && CFDictionaryContainsKey((CFDictionaryRef)v17, v64))
      {
        if (CFEqual(v11, v74)
          && (uint64_t v19 = CFDictionaryGetValue(v77, ValueAtIndex), v20 = CFDictionaryGetTypeID(), v19)
          && CFGetTypeID(v19) == v20
          && (uint64_t v21 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v19, v63), v22 = CFNumberGetTypeID(), v21)
          && CFGetTypeID(v21) == v22)
        {
          int v23 = CFNumberGetValue(v21, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr) {
            BOOL v24 = v23 == 0;
          }
          else {
            BOOL v24 = 1;
          }
          if (v24) {
            int v25 = 7;
          }
          else {
            int v25 = 15;
          }
        }

        else
        {
          int v25 = 7;
        }
      }

      else
      {
        int v25 = 0;
      }

      CFStringRef v26 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, v75, v10, v69);
      if (CFDictionaryContainsKey(v77, v26))
      {
        *v71 |= v25;
        os_log_t v27 = (os_log_t)p_base_props[399];
        if (!v27)
        {
          os_log_t v27 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          p_base_props[399] = (__objc2_prop_list *)v27;
        }

        uint64_t v28 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v27, v28))
        {
          uint64_t v29 = _os_log_pack_size(18LL);
          unsigned int v30 = (char *)&v62 - ((__chkstk_darwin(v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          unsigned int v31 = __error();
          uint64_t v32 = _os_log_pack_fill( v30,  v29,  *v31,  &_mh_execute_header,  "Service %@ setting ipv4 reach flags: %u");
          int v33 = *v71;
          *(_DWORD *)uint64_t v32 = v66;
          *(void *)(v32 + 4) = v10;
          *(_WORD *)(v32 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
          *(_DWORD *)(v32 + 14) = v33;
          CFIndex v34 = v30;
          CFMutableArrayRef Mutable = v65;
          __SC_log_send(7LL, v27, v28, v34);
          p_base_props = &QoSMarkingController__classData.base_props;
        }
      }

      CFRelease(v26);
      CFStringRef v35 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, v75, v10, v68);
      if (CFDictionaryContainsKey(v77, v35))
      {
        *v72 |= v25;
        os_log_t v36 = (os_log_t)p_base_props[399];
        if (!v36)
        {
          os_log_t v36 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          p_base_props[399] = (__objc2_prop_list *)v36;
        }

        uint64_t v37 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v36, v37))
        {
          uint64_t v38 = _os_log_pack_size(18LL);
          int v39 = (char *)&v62 - ((__chkstk_darwin(v38) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v40 = __error();
          uint64_t v41 = v38;
          CFMutableArrayRef Mutable = v65;
          uint64_t v42 = _os_log_pack_fill( v39,  v41,  *v40,  &_mh_execute_header,  "Service %@ setting ipv6 reach flags: %u");
          int v43 = *v72;
          *(_DWORD *)uint64_t v42 = v66;
          *(void *)(v42 + 4) = v10;
          *(_WORD *)(v42 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
          *(_DWORD *)(v42 + 14) = v43;
          __SC_log_send(7LL, v36, v37, v39);
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
        }
      }

      CFRelease(v35);
      if (v25) {
        goto LABEL_53;
      }
    }

uint64_t sub_1000371A0(unsigned int *a1)
{
  if ((void)v22 == (void)xmmword_100079D70
    && *((void *)&v22 + 1) == *((void *)&xmmword_100079D70 + 1)
    && (void)v23 == qword_100079D80
    && *((void *)&v23 + 1) == unk_100079D88)
  {
    os_log_t v16 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v16 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v16;
    }

    uint64_t v17 = _SC_syslog_os_log_mapping(7LL);
    uint64_t result = __SC_log_enabled(7LL, v16, v17);
    if ((_DWORD)result)
    {
      uint64_t v18 = _os_log_pack_size(2LL);
      uint64_t v19 = (char *)&v21 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFTypeID v20 = __error();
      *(_WORD *)_os_log_pack_fill(v19, v18, *v20, &_mh_execute_header, "Not updating network information") = 0;
      __SC_log_send(7LL, v16, v17, v19);
      return 0LL;
    }
  }

  else
  {
    xmmword_100079D70 = v22;
    *(_OWORD *)&qword_100079D80 = v23;
    os_log_t v5 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v5 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v5;
    }

    uint64_t v6 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v5, v6))
    {
      uint64_t v7 = _os_log_pack_size(2LL);
      uint64_t v8 = (char *)&v21 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFStringRef v9 = __error();
      *(_WORD *)_os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "Updating network information") = 0;
      __SC_log_send(6LL, v5, v6, v8);
    }

    sub_10003EC00(a1);
    if ((sub_100041FAC((const __CFData *)a1) & 1) != 0) {
      return 1LL;
    }
    os_log_t v10 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v10 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v10;
    }

    uint64_t v11 = _SC_syslog_os_log_mapping(3LL);
    if (!__SC_log_enabled(3LL, v10, v11))
    {
      return 1LL;
    }

    else
    {
      uint64_t v12 = _os_log_pack_size(2LL);
      unsigned int v13 = (char *)&v21 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v14 = __error();
      *(_WORD *)_os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "Notifying nwi_state_store failed") = 0;
      __SC_log_send(3LL, v10, v11, v13);
      return 1LL;
    }
  }

  return result;
}

CFIndex sub_10003749C(const __CFArray **a1, const __SCDynamicStore *a2)
{
  os_log_t v3 = *a1;
  __int128 v4 = a1[1];
  os_log_t v5 = a1[2];
  if (!CFArrayGetCount(*a1)) {
    os_log_t v3 = 0LL;
  }
  if (!CFArrayGetCount(v4)) {
    __int128 v4 = 0LL;
  }
  CFIndex result = CFDictionaryGetCount(v5);
  if (!result) {
    os_log_t v5 = 0LL;
  }
  if (v3) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v5 == 0LL;
  }
  if (!v7 || v4 != 0LL)
  {
    if (byte_100079C94 == 1)
    {
      if (v5)
      {
        os_log_t v9 = (os_log_t)qword_100079C78;
        if (!qword_100079C78)
        {
          os_log_t v9 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_100079C78 = (uint64_t)v9;
        }

        uint64_t v10 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v9, v10))
        {
          uint64_t v11 = _os_log_pack_size(12LL);
          uint64_t v12 = (char *)&v27 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
          unsigned int v13 = __error();
          uint64_t v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "Setting:\n%@");
          *(_DWORD *)uint64_t v14 = 138412290;
          *(void *)(v14 + 4) = v5;
          __SC_log_send(7LL, v9, v10, v12);
        }
      }

      if (v4)
      {
        os_log_t v15 = (os_log_t)qword_100079C78;
        if (!qword_100079C78)
        {
          os_log_t v15 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_100079C78 = (uint64_t)v15;
        }

        uint64_t v16 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v15, v16))
        {
          uint64_t v17 = _os_log_pack_size(12LL);
          uint64_t v18 = (char *)&v27 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v19 = __error();
          uint64_t v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "Removing:\n%@");
          *(_DWORD *)uint64_t v20 = 138412290;
          *(void *)(v20 + 4) = v4;
          __SC_log_send(7LL, v15, v16, v18);
        }
      }

      if (v3)
      {
        os_log_t v21 = (os_log_t)qword_100079C78;
        if (!qword_100079C78)
        {
          os_log_t v21 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_100079C78 = (uint64_t)v21;
        }

        uint64_t v22 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v21, v22))
        {
          uint64_t v23 = _os_log_pack_size(12LL);
          BOOL v24 = (char *)&v27 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
          int v25 = __error();
          uint64_t v26 = _os_log_pack_fill(v24, v23, *v25, &_mh_execute_header, "Notifying:\n%@");
          *(_DWORD *)uint64_t v26 = 138412290;
          *(void *)(v26 + 4) = v3;
          __SC_log_send(7LL, v21, v22, v24);
        }
      }
    }

    return SCDynamicStoreSetMultiple(a2, v5, v4, v3);
  }

  return result;
}

void sub_1000377D4(uint64_t a1)
{
}

void sub_10003781C(uint64_t a1)
{
}

void sub_10003787C(int a1, void *a2)
{
  if (a1 == 2)
  {
    os_log_t v9 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v9 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v9;
    }

    uint64_t v10 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v9, v10))
    {
      uint64_t v11 = _os_log_pack_size(12LL);
      uint64_t v12 = (char *)&v21 - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      unsigned int v13 = __error();
      uint64_t v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "NAT64 Cancel %@");
      *(_DWORD *)uint64_t v14 = 138412290;
      *(void *)(v14 + 4) = a2;
      __SC_log_send(6LL, v9, v10, v12);
    }

    sub_100037BD8((CFTypeRef *)&qword_100079D30, a2);
    sub_100037BD8((CFTypeRef *)&qword_100079D38, a2);
    sub_100034CE8((__CFSet **)&qword_100079D40, a2);
  }

  else
  {
    if (a1 == 1)
    {
      os_log_t v15 = (os_log_t)qword_100079C78;
      if (!qword_100079C78)
      {
        os_log_t v15 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_100079C78 = (uint64_t)v15;
      }

      uint64_t v16 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v15, v16))
      {
        uint64_t v17 = _os_log_pack_size(12LL);
        uint64_t v18 = (char *)&v21 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v19 = __error();
        uint64_t v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "NAT64 Update %@");
        *(_DWORD *)uint64_t v20 = 138412290;
        *(void *)(v20 + 4) = a2;
        __SC_log_send(6LL, v15, v16, v18);
      }

      if (!qword_100079D30 || !CFSetContainsValue((CFSetRef)qword_100079D30, a2)) {
        sub_100034CE8((__CFSet **)&qword_100079D38, a2);
      }
    }

    else
    {
      if (a1) {
        return;
      }
      os_log_t v3 = (os_log_t)qword_100079C78;
      if (!qword_100079C78)
      {
        os_log_t v3 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_100079C78 = (uint64_t)v3;
      }

      uint64_t v4 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v3, v4))
      {
        uint64_t v5 = _os_log_pack_size(12LL);
        uint64_t v6 = (char *)&v21 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        BOOL v7 = __error();
        uint64_t v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "NAT64 Start %@");
        *(_DWORD *)uint64_t v8 = 138412290;
        *(void *)(v8 + 4) = a2;
        __SC_log_send(6LL, v3, v4, v6);
      }

      sub_100034CE8((__CFSet **)&qword_100079D30, a2);
      sub_100037BD8((CFTypeRef *)&qword_100079D38, a2);
    }

    sub_100037BD8((CFTypeRef *)&qword_100079D40, a2);
  }

void sub_100037BD8(CFTypeRef *a1, const void *a2)
{
  os_log_t v3 = (__CFSet *)*a1;
  if (v3)
  {
    CFSetRemoveValue(v3, a2);
    if (!CFSetGetCount((CFSetRef)*a1))
    {
      if (*a1)
      {
        CFRelease(*a1);
        *a1 = 0LL;
      }
    }
  }

const void *sub_100037C50(const void *a1, const void *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1) {
    return 0LL;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  unsigned int Value = CFDictionaryGetValue((CFDictionaryRef)a1, a2);
  CFTypeID v6 = CFDictionaryGetTypeID();
  if (!Value) {
    return 0LL;
  }
  if (CFGetTypeID(Value) == v6) {
    return Value;
  }
  return 0LL;
}

uint64_t sub_100037CFC( __CFString *serviceID, const __CFDictionary *a2, const __CFDictionary *a3, const void *a4)
{
  unsigned int v58 = 0x1000000;
  uint64_t v8 = (const __CFDictionary *)sub_1000383EC(a4, serviceID, kSCEntNetCommCenter);
  os_log_t v9 = v8;
  if (v8)
  {
    if (CFDictionaryGetValueIfPresent(v8, kSCPropNetCommCenterAvailable, (const void **)&value))
    {
      uint64_t v10 = value;
      CFTypeID TypeID = CFNumberGetTypeID();
      if (v10)
      {
        if (CFGetTypeID(v10) == TypeID
          && CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr)
          && valuePtr < 1)
        {
          a3 = 0LL;
          BOOL v12 = 0;
          unsigned int v58 = 0x4000000;
LABEL_76:
          BOOL v49 = a3 != 0LL;
          BOOL v50 = v12;
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          goto LABEL_82;
        }
      }
    }

    int v13 = 1;
  }

  else
  {
    int v13 = 0;
  }

  if (a3)
  {
    unint64_t v14 = (unint64_t)CFDictionaryGetValue(a3, kSCPropNetServicePrimaryRank);
    CFTypeID v15 = CFStringGetTypeID();
    if (v14)
    {
      if (CFGetTypeID((CFTypeRef)v14) != v15) {
        unint64_t v14 = 0LL;
      }
      if (v9) {
        BOOL v16 = v14 == 0;
      }
      else {
        BOOL v16 = 1;
      }
      if (!v16)
      {
        os_log_t v17 = (os_log_t)qword_100079C78;
        if (!qword_100079C78)
        {
          os_log_t v17 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          qword_100079C78 = (uint64_t)v17;
        }

        uint64_t v18 = _SC_syslog_os_log_mapping(7LL);
        if (__SC_log_enabled(7LL, v17, v18))
        {
          uint64_t v19 = _os_log_pack_size(22LL);
          v55[1] = v55;
          uint64_t v20 = (char *)v55 - ((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v21 = __error();
          uint64_t v22 = _os_log_pack_fill( v20,  v19,  *v21,  &_mh_execute_header,  "%@ ignoring Setup PrimaryRank = %@");
          *(_DWORD *)uint64_t v22 = 138412546;
          *(void *)(v22 + 4) = serviceID;
          *(_WORD *)(v22 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
          *(void *)(v22 + 14) = v14;
          __SC_log_send(7LL, v17, v18, v20);
        }

        unint64_t v14 = 0LL;
      }
    }

    uint64_t v23 = CFDictionaryGetValue(a3, @"IPIsCoupled");
    CFTypeID v24 = CFBooleanGetTypeID();
    if (v23 && CFGetTypeID(v23) == v24 && CFBooleanGetValue((CFBooleanRef)v23)) {
      int v13 = 1;
    }
    a3 = (const __CFDictionary *)sub_10003847C(a3, (uint64_t)serviceID, (uint64_t)kSCDynamicStoreDomainSetup, 0LL);
    if (a2)
    {
LABEL_28:
      unint64_t v25 = (unint64_t)CFDictionaryGetValue(a2, kSCPropNetServicePrimaryRank);
      CFTypeID v26 = CFStringGetTypeID();
      if (v25 && CFGetTypeID((CFTypeRef)v25) != v26) {
        unint64_t v25 = 0LL;
      }
      uint64_t v27 = CFDictionaryGetValue(a2, @"IPIsCoupled");
      CFTypeID v28 = CFBooleanGetTypeID();
      if (v27 && CFGetTypeID(v27) == v28 && CFBooleanGetValue((CFBooleanRef)v27)) {
        int v13 = 1;
      }
      if (!a3) {
        a3 = (const __CFDictionary *)sub_10003847C(a2, (uint64_t)serviceID, (uint64_t)kSCDynamicStoreDomainState, 0LL);
      }
      if (v13) {
        goto LABEL_38;
      }
      goto LABEL_41;
    }
  }

  else
  {
    unint64_t v14 = 0LL;
    if (a2) {
      goto LABEL_28;
    }
  }

  unint64_t v25 = 0LL;
  if (v13)
  {
LABEL_38:
    BOOL v12 = 1;
    goto LABEL_44;
  }

LABEL_41:
  uint64_t v29 = (const __CFString *)sub_1000386E0(a4, serviceID);
  if (v29)
  {
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v29,  kSCEntNetLink);
    unsigned int v31 = CFDictionaryGetValue((CFDictionaryRef)a4, NetworkInterfaceEntity);
    CFRelease(NetworkInterfaceEntity);
    BOOL v12 = sub_100030B48(v31);
  }

  else
  {
    BOOL v12 = 0;
  }

  CFRelease(theArray);
  uint64_t v18 = (const __CFArray *)CFRetain((CFTypeRef)a2);
  a1 = v35;
  a5 = v33;
  a4 = v34;
  a7 = v32;
  CFTypeID v15 = v30;
  LOBYTE(a6) = v31;
LABEL_42:
  sub_10003CC64(v18, a6, Mutable, a7);
  CFRelease(v18);
LABEL_43:
  if (CFArrayGetCount(Mutable))
  {
    CFDictionarySetValue(a1, kSCPropNetDNSServerAddresses, Mutable);
    uint64_t v29 = a5 != 0;
    if (a4) {
      uint64_t v29 = v15;
    }
    if (v29) {
      CFDictionarySetValue(a1, @"__SCOPED_QUERY__", kCFBooleanTrue);
    }
  }

  if (Mutable) {
    CFRelease(Mutable);
  }
}

LABEL_44:
  if (v14 | v25)
  {
    LOBYTE(value) = 0;
    LOBYTE(valuePtr) = 0;
    unsigned int v32 = sub_100038630((CFTypeRef)v14, &value);
    unsigned int v33 = sub_100038630((CFTypeRef)v25, &valuePtr);
    if ((_BYTE)value && (_BYTE)valuePtr)
    {
      if (v32 <= v33) {
        unsigned int v34 = v33;
      }
      else {
        unsigned int v34 = v32;
      }
      unsigned int v58 = v34;
      goto LABEL_55;
    }

    if ((_BYTE)value)
    {
      unsigned int v58 = v32;
LABEL_55:
      int v35 = 1;
      goto LABEL_57;
    }

    if ((_BYTE)valuePtr)
    {
      unsigned int v58 = v33;
      goto LABEL_55;
    }
  }

  int v35 = 0;
LABEL_57:
  os_log_t v36 = sub_1000386E0(a4, serviceID);
  if (v36)
  {
    uint64_t v37 = v36;
    if (qword_100079D50)
    {
      uint64_t v38 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)qword_100079D50, v36);
      if (v38)
      {
        if (CFNumberGetValue(v38, kCFNumberSInt32Type, &value) && (_DWORD)value)
        {
          if ((_DWORD)value == 1) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = (_DWORD)value << 24;
          }
          if (!v35 || v39 > v58)
          {
            unsigned int v58 = v39;
            uint64_t v40 = "Interface";
LABEL_70:
            os_log_t v41 = (os_log_t)qword_100079C78;
            if (!qword_100079C78)
            {
              os_log_t v41 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
              qword_100079C78 = (uint64_t)v41;
            }

            uint64_t v42 = _SC_syslog_os_log_mapping(6LL);
            if (__SC_log_enabled(6LL, v41, v42))
            {
              uint64_t v43 = _os_log_pack_size(48LL);
              int v44 = (char *)v55 - ((__chkstk_darwin(v43) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              int v45 = __error();
              uint64_t v46 = _os_log_pack_fill( v44,  v43,  *v45,  &_mh_execute_header,  "serviceID %@ interface %@ rank = 0x%x (source=%s)%s");
              unsigned int v47 = v58;
              uint64_t v48 = " [coupled]";
              *(_DWORD *)uint64_t v46 = 138413314;
              *(void *)(v46 + 4) = serviceID;
              if (!v12) {
                uint64_t v48 = "";
              }
              *(_WORD *)(v46 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
              *(void *)(v46 + 14) = v37;
              *(_WORD *)(v46 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
              *(_DWORD *)(v46 + 24) = v47;
              *(_WORD *)(v46 + 28) = 2080;
              *(void *)(v46 + 3sub_10000F430((uint64_t)__str, 0) = v40;
              *(_WORD *)(v46 + 38) = 2080;
              *(void *)(v46 + 4sub_10000F430((uint64_t)__str, 0) = v48;
              __SC_log_send(6LL, v41, v42, v44);
            }

            goto LABEL_76;
          }

        if (ArrayBySeparatingStrings) {
          CFRelease(ArrayBySeparatingStrings);
        }
        if (v11) {
          CFRelease(v11);
        }
      }

      else if (HasSuffix)
      {
        return 1LL;
      }

      else
      {
        return -1LL;
      }
    }

    else
    {
      return 1LL;
    }
  }

  else if (v6)
  {
    return -1LL;
  }

  else
  {
    return 0LL;
  }

  return v16;
}
}

LABEL_69:
          uint64_t v40 = "Service";
          goto LABEL_70;
        }
      }
    }

    if (v35) {
      goto LABEL_69;
    }
  }

  BOOL v49 = a3 != 0LL;
  BOOL v50 = v12;
  if (!a3 && !v35 && !v12) {
    return sub_10003879C(serviceID, kSCEntNetService, 0LL);
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v35)
  {
LABEL_82:
    CFNumberRef v53 = CFNumberCreate(0LL, kCFNumberSInt32Type, &v58);
    CFDictionarySetValue(Mutable, @"RankAssertion", v53);
    CFRelease(v53);
    if (!v50) {
      goto LABEL_83;
    }
LABEL_86:
    CFDictionarySetValue(Mutable, @"IPIsCoupled", kCFBooleanTrue);
    if (!v49) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }

  if (v12) {
    goto LABEL_86;
  }
LABEL_83:
  if (v49) {
LABEL_87:
  }
    CFDictionarySetValue(Mutable, kSCPropNetServiceServiceIndex, a3);
LABEL_88:
  uint64_t v52 = sub_10003879C(serviceID, kSCEntNetService, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v52;
}

const void *sub_1000383EC(const void *a1, CFStringRef serviceID, CFStringRef entity)
{
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, kSCDynamicStoreDomainSetup, serviceID, entity);
  uint64_t v5 = sub_100037C50(a1, NetworkServiceEntity);
  if (NetworkServiceEntity) {
    CFRelease(NetworkServiceEntity);
  }
  return v5;
}

const void *sub_10003847C(const __CFDictionary *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (!a1) {
    return 0LL;
  }
  unsigned int Value = CFDictionaryGetValue(a1, kSCPropNetServiceServiceIndex);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!Value) {
    return Value;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return 0LL;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    os_log_t v10 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v10 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v10;
    }

    uint64_t v11 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v10, v11))
    {
      uint64_t v12 = _os_log_pack_size(32LL);
      int v13 = (char *)&v17 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      unint64_t v14 = __error();
      uint64_t v15 = _os_log_pack_fill( v13,  v12,  *v14,  &_mh_execute_header,  "%@%@ ServiceIndex %@ is invalid, ignoring");
      *(_DWORD *)uint64_t v15 = 138412802;
      *(void *)(v15 + 4) = a3;
      *(_WORD *)(v15 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v15 + 14) = a2;
      *(_WORD *)(v15 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v15 + 24) = Value;
      __SC_log_send(5LL, v10, v11, v13);
    }

    return 0LL;
  }

  if (a4) {
    *a4 = HIDWORD(v17);
  }
  return Value;
}

uint64_t sub_100038630(CFTypeRef cf1, _BYTE *a2)
{
  if (cf1)
  {
    uint64_t v4 = 0LL;
    while (!CFEqual(cf1, **(CFTypeRef **)((char *)&off_100072A38 + v4)))
    {
      v4 += 16LL;
      if (v4 == 64) {
        goto LABEL_5;
      }
    }

    if (a2) {
      *a2 = 1;
    }
    return *(unsigned int *)((char *)&off_100072A38 + v4 + 8);
  }

  else
  {
LABEL_5:
    if (a2) {
      *a2 = 0;
    }
    return 0x1000000LL;
  }

const void *sub_1000386E0(const void *a1, const __CFString *a2)
{
  uint64_t v4 = (const __CFDictionary *)sub_1000350BC(a1, a2, kSCEntNetIPv4);
  if (v4) {
    return CFDictionaryGetValue(v4, kSCPropInterfaceName);
  }
  uint64_t v4 = (const __CFDictionary *)sub_1000350BC(a1, a2, kSCEntNetIPv6);
  if (v4) {
    return CFDictionaryGetValue(v4, kSCPropInterfaceName);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10003879C(void *key, const void *a2, const __CFDictionary *a3)
{
  unsigned int Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_100079CA0, key);
  if (Value) {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
  }
  else {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  uint64_t v8 = MutableCopy;
  BOOL v9 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, a2);
  os_log_t v10 = v9;
  if (a3)
  {
    if (!v9 || !CFEqual(a3, v9))
    {
      if (byte_100079C94 == 1)
      {
        sub_100038940((uint64_t)key, a2, (uint64_t)@"Changed: old", v10);
        sub_100038940((uint64_t)key, a2, (uint64_t)@"Changed: new", a3);
      }

      CFDictionarySetValue(v8, a2, a3);
LABEL_14:
      uint64_t v11 = 1LL;
      goto LABEL_16;
    }
  }

  else if (v9)
  {
    if (byte_100079C94 == 1) {
      sub_100038940((uint64_t)key, a2, (uint64_t)@"Removed:", v9);
    }
    CFDictionaryRemoveValue(v8, a2);
    goto LABEL_14;
  }

  uint64_t v11 = 0LL;
LABEL_16:
  if (!CFDictionaryGetCount(v8))
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_100079CA0, key);
    if (!v8) {
      return v11;
    }
    goto LABEL_18;
  }

  CFDictionarySetValue((CFMutableDictionaryRef)qword_100079CA0, key, v8);
  if (v8) {
LABEL_18:
  }
    CFRelease(v8);
  return v11;
}

void sub_100038940(uint64_t a1, CFTypeRef cf1, uint64_t a3, const __CFDictionary *a4)
{
  uint64_t v4 = a4;
  if (!a4) {
    goto LABEL_11;
  }
  if (!CFEqual(cf1, kSCEntNetIPv4))
  {
    if (CFEqual(cf1, kSCEntNetIPv6))
    {
      os_log_t v10 = (unsigned int *)sub_100030AC8(v4);
      if (v10)
      {
        BOOL v9 = sub_100038B54(v10);
        goto LABEL_8;
      }
    }

__CFString *sub_100038B54(unsigned int *a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<IPv6RouteList[%d]> = {", *a1);
  if ((int)*a1 >= 1)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = a1 + 3;
    do
    {
      CFStringAppendFormat(Mutable, 0LL, @"\n%2d. ", v3);
      sub_100038C40(v4, Mutable);
      uint64_t v3 = (v3 + 1);
      v4 += 17;
    }

    while ((int)v3 < (int)*a1);
  }

  CFStringAppend(Mutable, @"\n}");
  return Mutable;
}

void sub_100038C40(unsigned int *a1, CFMutableStringRef theString)
{
  uint64_t v4 = a1 + 5;
  if ((a1[4] & 4) != 0)
  {
    CFStringAppend(theString, @"Host ");
    CFTypeID v6 = inet_ntop(30, v4, v10, 0x2Eu);
    CFStringAppendCString(theString, v6, 0x600u);
  }

  else
  {
    CFStringAppend(theString, @"Net ");
    uint64_t v5 = inet_ntop(30, v4, v10, 0x2Eu);
    CFStringAppendCString(theString, v5, 0x600u);
    CFStringAppendFormat(theString, 0LL, @"/%d", *a1);
  }

  if ((a1[4] & 2) != 0)
  {
    CFStringAppend(theString, @" Gate ");
    BOOL v7 = inet_ntop(30, a1 + 9, v10, 0x2Eu);
    CFStringAppendCString(theString, v7, 0x600u);
  }

  sub_100031D1C((uint64_t)a1, theString);
  if (*(void *)(a1 + 13) != *(void *)in6addr_any.__u6_addr8
    || *(void *)(a1 + 15) != *(void *)&in6addr_any.__u6_addr32[2])
  {
    CFStringAppend(theString, @" Ifa ");
    BOOL v9 = inet_ntop(30, a1 + 13, v10, 0x2Eu);
    CFStringAppendCString(theString, v9, 0x600u);
  }

  sub_100031DD0((uint64_t)a1, theString);
}

uint64_t sub_100038DDC(void *key, const __CFDictionary *a2, const __CFDictionary *a3)
{
  if (!a2)
  {
    uint64_t v8 = sub_10003879C(key, kSCEntNetIPv4, 0LL);
LABEL_8:
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_100079D20, key);
    return v8;
  }

  CFTypeID v6 = (const __CFDictionary *)sub_10002E790(key, kSCEntNetService);
  if (v6) {
    unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(v6, @"RankAssertion");
  }
  else {
    unsigned int Value = 0LL;
  }
  BOOL v9 = sub_100039F88(2, a2, a3, Value);
  uint64_t v8 = sub_10003879C(key, kSCEntNetIPv4, v9);
  if (!v9) {
    goto LABEL_8;
  }
  CFRelease(v9);
  return v8;
}

uint64_t sub_100038EE4(void *key, const __CFDictionary *a2, const __CFDictionary *a3)
{
  if (!a2)
  {
    uint64_t v8 = 0LL;
LABEL_9:
    int v11 = 1;
    goto LABEL_10;
  }

  CFTypeID v6 = (const __CFDictionary *)sub_10002E790(key, kSCEntNetService);
  if (v6) {
    unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(v6, @"RankAssertion");
  }
  else {
    unsigned int Value = 0LL;
  }
  BOOL v9 = sub_100039F88(30, a2, a3, Value);
  uint64_t v8 = v9;
  if (!v9) {
    goto LABEL_9;
  }
  os_log_t v10 = sub_10002E66C(v9);
  int v11 = 0;
  if (v10)
  {
LABEL_15:
    CFRetain(v10);
    CFStringRef v14 = kSCEntNetIPv6;
    goto LABEL_16;
  }

uint64_t sub_1000390EC(__CFString *key, const __CFDictionary *a2, const __CFDictionary *a3, const void *a4)
{
  CFStringRef v44 = kSCPropNetDNSSearchDomains;
  int v45 = 0;
  v46[0] = 0;
  CFStringRef v47 = kSCPropNetDNSSortList;
  int v48 = 0;
  char v49 = 0;
  CFStringRef v50 = kSCPropNetDNSSupplementalMatchDomains;
  int v51 = 1;
  char v52 = 1;
  CFStringRef v53 = kSCPropNetDNSSupplementalMatchOrders;
  int v54 = 0;
  char v55 = 1;
  v43[0] = kSCPropNetDNSDomainName;
  v43[1] = kSCPropNetDNSOptions;
  v43[2] = kSCPropNetDNSSearchOrder;
  v43[3] = kSCPropNetDNSServerPort;
  v43[4] = kSCPropNetDNSServerTimeout;
  v43[5] = kSCPropNetDNSServiceIdentifier;
  v43[6] = kSCPropNetDNSSupplementalMatchDomainsNoSearch;
  if (!((unint64_t)a2 | (unint64_t)a3))
  {
    CFMutableArrayRef Mutable = 0LL;
    goto LABEL_76;
  }

  uint64_t v40 = (void *)kSCPropNetDNSServiceIdentifier;
  BOOL v9 = (const __CFDictionary *)sub_10002E790(key, kSCEntNetIPv4);
  os_log_t v10 = sub_100030AC8(v9);
  if (v10 && (*((_WORD *)v10 + 4) & 3) == 2)
  {
    BOOL v11 = sub_1000383EC(a4, key, kSCEntNetIPv4) != 0LL;
    uint64_t v12 = sub_10002E66C(v9);
    int v13 = 1;
  }

  else
  {
    uint64_t v12 = 0LL;
    BOOL v11 = 0;
    int v13 = 0;
  }

  CFStringRef v14 = (const __CFDictionary *)sub_10002E790(key, kSCEntNetIPv6);
  uint64_t v15 = sub_100030AC8(v14);
  if (v15
    && (*((_WORD *)v15 + 4) & 3) == 2
    && (!v11 ? (BOOL v11 = sub_1000383EC(a4, key, kSCEntNetIPv6) != 0LL) : (BOOL v11 = 1), v13 |= 2u, !v12))
  {
    uint64_t v12 = sub_10002E66C(v14);
    if (v11) {
      goto LABEL_14;
    }
  }

  else if (v11)
  {
LABEL_14:
    BOOL v16 = 1;
    goto LABEL_17;
  }

  BOOL v16 = sub_1000383EC(a4, key, kSCEntNetCommCenter) != 0LL;
LABEL_17:
  if (v13) {
    uint64_t v17 = a3;
  }
  else {
    uint64_t v17 = 0LL;
  }
  if (!a2 && !v13)
  {
    CFMutableArrayRef Mutable = 0LL;
    goto LABEL_70;
  }

  int v41 = v13;
  int v39 = v16;
  if (a2)
  {
    BOOL value = 0LL;
    if (CFDictionaryGetValueIfPresent(a2, kSCPropNetDNSConfirmedServiceID, (const void **)&value))
    {
      __int16 v18 = value;
      CFTypeID TypeID = CFStringGetTypeID();
      if (!v18)
      {
LABEL_30:
        uint64_t v20 = (uint64_t)v12;
        goto LABEL_31;
      }

      if (CFGetTypeID(v18) == TypeID)
      {
        LODWORD(v18) = CFEqual(key, value) != 0;
        goto LABEL_30;
      }
    }

    LODWORD(v18) = 0;
    goto LABEL_30;
  }

  uint64_t v20 = (uint64_t)v12;
  LODWORD(v18) = 0;
LABEL_31:
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v21 = sub_10003C95C(a2, kSCPropNetDNSServerAddresses);
  if (v41)
  {
    uint64_t v22 = (const __CFArray *)sub_10003C95C(a3, kSCPropNetDNSServerAddresses);
    uint64_t v12 = (const void *)v20;
    sub_10003C5DC(Mutable, (unint64_t)v21, v22, v39, (int)v18, v41, v20);
  }

  else
  {
    sub_10003C5DC(Mutable, (unint64_t)v21, 0LL, 0, (int)v18, 3, 0LL);
    uint64_t v12 = (const void *)v20;
  }

  for (uint64_t i = 0LL; i != 64; i += 16LL)
    sub_10003CA08( Mutable,  *(void **)((char *)&v44 + i),  a2,  v17,  *(_DWORD *)((char *)&v44 + i + 8),  v46[i]);
  uint64_t v24 = 0LL;
  LOBYTE(v13) = v41;
  do
  {
    unint64_t v25 = (const void *)v43[v24];
    if (v17)
    {
      CFTypeID v26 = (__CFString *)CFDictionaryGetValue(v17, (const void *)v43[v24]);
      CFMutableStringRef v27 = sub_10003D104(v26, 0);
      if (!a2) {
        goto LABEL_43;
      }
    }

    else
    {
      CFMutableStringRef v27 = 0LL;
      if (!a2) {
        goto LABEL_43;
      }
    }

    if (!v27)
    {
      CFTypeID v28 = (__CFString *)CFDictionaryGetValue(a2, v25);
      CFMutableStringRef v27 = sub_10003D104(v28, 0);
    }

LABEL_43:
    if (v27)
    {
      CFDictionarySetValue(Mutable, v25, v27);
      CFRelease(v27);
    }

    ++v24;
  }

  while (v24 != 7);
  if (v41) {
    goto LABEL_55;
  }
  if (CFDictionaryContainsKey(Mutable, kSCPropNetDNSSupplementalMatchDomains))
  {
    CFDictionaryRemoveValue(Mutable, kSCPropNetDNSDomainName);
    CFDictionaryRemoveValue(Mutable, kSCPropNetDNSSearchDomains);
    CFDictionaryRemoveValue(Mutable, kSCPropNetDNSSearchOrder);
    CFDictionaryRemoveValue(Mutable, kSCPropNetDNSSortList);
    if (!a2 || v12)
    {
LABEL_55:
      if (CFDictionaryGetCount(Mutable))
      {
        if (v12) {
          CFDictionarySetValue(Mutable, kSCPropInterfaceName, v12);
        }
        if (!dword_100079C90) {
          goto LABEL_69;
        }
        unsigned int v30 = CFDictionaryGetValue(Mutable, kSCPropNetDNSDomainName);
        CFTypeID v31 = CFStringGetTypeID();
        if (!v30) {
          goto LABEL_69;
        }
        if (CFGetTypeID(v30) != v31) {
          goto LABEL_69;
        }
        unsigned int v32 = CFDictionaryGetValue(Mutable, kSCPropNetDNSSearchDomains);
        CFTypeID v33 = CFArrayGetTypeID();
        if (!v32
          || CFGetTypeID(v32) != v33
          || (v56.length = CFArrayGetCount((CFArrayRef)v32),
              v56.location = 0LL,
              CFArrayContainsValue((CFArrayRef)v32, v56, v30))
          || (MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(0LL, 0LL, (CFArrayRef)v32),
              CFArrayAppendValue(MutableCopy, v30),
              CFDictionarySetValue(Mutable, kSCPropNetDNSSearchDomains, MutableCopy),
              int v35 = Mutable,
              !MutableCopy))
        {
LABEL_69:
          LOBYTE(v13) = v41;
          goto LABEL_70;
        }

  if (CFEqual(v10, kSCEntNetPPP))
  {
    CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  kSCDynamicStoreDomainSetup,  v5,  kSCEntNetPPP);
    uint64_t v21 = (const __CFDictionary *)CFDictionaryGetValue(a2, NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    uint64_t v22 = CFDictionaryGetTypeID();
    if (v21)
    {
      if (CFGetTypeID(v21) == v22)
      {
        if (CFDictionaryGetValueIfPresent(v21, kSCPropNetPPPDialOnDemand, (const void **)buffer))
        {
          uint64_t v23 = *(CFNumberRef *)buffer;
          uint64_t v24 = CFNumberGetTypeID();
          if (v23)
          {
            if (CFGetTypeID(v23) == v24 && CFNumberGetValue(*(CFNumberRef *)buffer, kCFNumberIntType, &v26) && v26)
            {
              if (valuePtr) {
                unint64_t v25 = 8;
              }
              else {
                unint64_t v25 = 24;
              }
              v13 |= v25;
            }
          }
        }
      }
    }
  }

LABEL_67:
        CFRelease(MutableCopy);
      }

      else
      {
        int v35 = 0LL;
        MutableCFDictionaryRef Copy = Mutable;
        if (Mutable) {
          goto LABEL_67;
        }
      }

      CFMutableArrayRef Mutable = v35;
      goto LABEL_69;
    }

          sub_100053FA8(v28, Value);
LABEL_68:
          int v29 = v28;
LABEL_69:
          CFRelease(v29);
        }

uint64_t sub_100039730(__CFString *key, const __CFDictionary *a2, const __CFDictionary *a3, const void *a4)
{
  v54[0] = kSCPropNetProxiesFTPEnable;
  v54[1] = kSCPropNetProxiesFTPProxy;
  v54[2] = kSCPropNetProxiesFTPPort;
  v54[3] = kSCPropNetProxiesGopherEnable;
  v54[4] = kSCPropNetProxiesGopherProxy;
  v54[5] = kSCPropNetProxiesGopherPort;
  v54[6] = kSCPropNetProxiesHTTPEnable;
  v54[7] = kSCPropNetProxiesHTTPProxy;
  v54[8] = kSCPropNetProxiesHTTPPort;
  v54[9] = kSCPropNetProxiesHTTPSEnable;
  v54[10] = kSCPropNetProxiesHTTPSProxy;
  v54[11] = kSCPropNetProxiesHTTPSPort;
  v54[12] = kSCPropNetProxiesRTSPEnable;
  v54[13] = kSCPropNetProxiesRTSPProxy;
  v54[14] = kSCPropNetProxiesRTSPPort;
  v54[15] = kSCPropNetProxiesSOCKSEnable;
  v54[16] = kSCPropNetProxiesSOCKSProxy;
  v54[17] = kSCPropNetProxiesSOCKSPort;
  v54[18] = kSCPropNetProxiesTransportConverterEnable;
  v54[19] = kSCPropNetProxiesTransportConverterProxy;
  v54[20] = kSCPropNetProxiesTransportConverterPort;
  v54[21] = kSCPropNetProxiesProxyAutoConfigEnable;
  CFStringRef v5 = kSCPropNetProxiesProxyAutoConfigURLString;
  v54[22] = kSCPropNetProxiesProxyAutoConfigURLString;
  v54[23] = kSCPropNetProxiesProxyAutoConfigJavaScript;
  CFStringRef v6 = kSCPropNetProxiesProxyAutoDiscoveryEnable;
  v54[25] = 0LL;
  v54[26] = 0LL;
  v54[24] = kSCPropNetProxiesProxyAutoDiscoveryEnable;
  BOOL v7 = a3;
  BOOL v9 = (const __CFDictionary *)sub_10002E790(key, kSCEntNetIPv4);
  os_log_t v10 = sub_100030AC8(v9);
  if (v10 && (*((_WORD *)v10 + 4) & 3) == 2)
  {
    BOOL value = (void *)sub_10002E66C(v9);
    int v11 = 1;
  }

  else
  {
    BOOL value = 0LL;
    int v11 = 0;
  }

  uint64_t v12 = (const __CFDictionary *)sub_10002E790(key, kSCEntNetIPv6);
  int v13 = sub_100030AC8(v12);
  if (v13 && (*((_WORD *)v13 + 4) & 3) == 2)
  {
    if (!value) {
      BOOL value = (void *)sub_10002E66C(v12);
    }
    goto LABEL_16;
  }

  if (a2) {
    int v14 = 1;
  }
  else {
    int v14 = v11;
  }
  if (!v11) {
    BOOL v7 = 0LL;
  }
  if (v14 != 1) {
    return sub_10003879C(key, kSCEntNetProxies, 0LL);
  }
LABEL_16:
  if (!a2 || !v7)
  {
    if (v7)
    {
      CFMutableStringRef v27 = v7;
    }

    else
    {
      if (!a2) {
        return sub_10003879C(key, kSCEntNetProxies, 0LL);
      }
      CFMutableStringRef v27 = a2;
    }

    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, v27);
    if (MutableCopy) {
      goto LABEL_44;
    }
    return sub_10003879C(key, kSCEntNetProxies, 0LL);
  }

  uint64_t v15 = (void *)kSCPropNetProxiesSupplementalMatchDomains;
  BOOL v16 = (void *)kSCPropNetProxiesSupplementalMatchOrders;
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, a2);
  sub_10003CA08(MutableCopy, v15, a2, v7, 1, 1);
  sub_10003CA08(MutableCopy, v16, a2, v7, 0, 1);
  __int16 v18 = CFDictionaryCreateMutableCopy(0LL, 0LL, v7);
  for (uint64_t i = 0LL; i != 27; i += 3LL)
  {
    uint64_t v20 = (const void *)v54[i];
    if (CFDictionaryContainsKey(v18, v20))
    {
      CFDictionaryRemoveValue(MutableCopy, v20);
      uint64_t v21 = (const void *)v54[i + 1];
      if (v21) {
        CFDictionaryRemoveValue(MutableCopy, v21);
      }
      uint64_t v22 = (const void *)v54[i + 2];
      if (v22)
      {
        uint64_t v23 = MutableCopy;
LABEL_29:
        CFDictionaryRemoveValue(v23, v22);
        continue;
      }
    }

    else if (CFDictionaryContainsKey(a2, v20) {
           || (unint64_t v25 = (const void *)v54[i + 1]) != 0LL && CFDictionaryContainsKey(a2, v25)
    }
           || (CFTypeID v26 = (const void *)v54[i + 2]) != 0LL && CFDictionaryContainsKey(a2, v26))
    {
      CFDictionaryRemoveValue(v18, v20);
      uint64_t v24 = (const void *)v54[i + 1];
      if (v24) {
        CFDictionaryRemoveValue(v18, v24);
      }
      uint64_t v22 = (const void *)v54[i + 2];
      if (v22)
      {
        uint64_t v23 = v18;
        goto LABEL_29;
      }
    }
  }

  CFDictionaryApplyFunction(v18, (CFDictionaryApplierFunction)sub_10003D1C0, MutableCopy);
  CFRelease(v18);
  CFStringRef v5 = kSCPropNetProxiesProxyAutoConfigURLString;
  CFStringRef v6 = kSCPropNetProxiesProxyAutoDiscoveryEnable;
  if (!MutableCopy) {
    return sub_10003879C(key, kSCEntNetProxies, 0LL);
  }
LABEL_44:
  if (!CFDictionaryGetCount(MutableCopy))
  {
    CFRelease(MutableCopy);
    return sub_10003879C(key, kSCEntNetProxies, 0LL);
  }

  if (value) {
    CFDictionarySetValue(MutableCopy, kSCPropInterfaceName, value);
  }
  int valuePtr = 0;
  if (CFDictionaryGetValueIfPresent(MutableCopy, v6, (const void **)&number)
    && (CFNumberRef v28 = number, TypeID = CFNumberGetTypeID(), v28)
    && CFGetTypeID(v28) == TypeID)
  {
    CFNumberRef v30 = number;
    if (!CFNumberGetValue(number, kCFNumberIntType, &valuePtr)) {
      goto LABEL_82;
    }
  }

  else
  {
    CFNumberRef v30 = 0LL;
  }

  if (!valuePtr)
  {
LABEL_79:
    if (!v30) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }

  int v51 = 0;
  CFTypeID v31 = (const __CFNumber *)CFDictionaryGetValue(MutableCopy, kSCPropNetProxiesProxyAutoConfigEnable);
  CFNumberRef number = v31;
  CFTypeID v32 = CFNumberGetTypeID();
  if (!v31 || CFGetTypeID(v31) != v32 || !CFNumberGetValue(number, kCFNumberIntType, &v51))
  {
LABEL_67:
    int v51 = 0;
    goto LABEL_68;
  }

  if (!v51) {
    goto LABEL_68;
  }
  CFTypeID v33 = (const __CFString *)CFDictionaryGetValue(MutableCopy, v5);
  if (!v33)
  {
    unsigned int v34 = (const __CFString *)CFDictionaryGetValue(MutableCopy, kSCPropNetProxiesProxyAutoConfigJavaScript);
    CFTypeID v35 = CFStringGetTypeID();
    if (v34) {
      goto LABEL_63;
    }
    goto LABEL_67;
  }

  unsigned int v34 = v33;
  CFTypeID v35 = CFStringGetTypeID();
LABEL_63:
  if (CFGetTypeID(v34) != v35 || !CFStringGetLength(v34)) {
    goto LABEL_67;
  }
  if (v51) {
    goto LABEL_82;
  }
LABEL_68:
  uint64_t v37 = (const __CFDictionary *)sub_1000350BC(a4, key, kSCEntNetDHCP);
  if (v37)
  {
    OptionData = DHCPInfoGetOptionData(v37, 0xFCu);
    if (OptionData)
    {
      int v39 = OptionData;
      BytePtr = CFDataGetBytePtr(OptionData);
      CFIndex Length = CFDataGetLength(v39);
      while (1)
      {
        CFIndex v42 = Length - 1;
        if (Length < 1) {
          break;
        }
        if (BytePtr[--Length])
        {
          CFStringRef v44 = CFURLCreateWithBytes(0LL, BytePtr, v42 + 1, 0x8000100u, 0LL);
          if (!v44) {
            break;
          }
          int v45 = v44;
          CFStringRef v46 = CFURLGetString(v44);
          if (v46)
          {
            CFStringRef v47 = v46;
            CFRetain(v46);
            CFRelease(v45);
            goto LABEL_78;
          }

          CFRelease(v45);
          break;
        }
      }
    }
  }

  CFStringRef v47 = sub_10003D214();
  if (v47)
  {
LABEL_78:
    int v51 = 1;
    CFNumberRef number = CFNumberCreate(0LL, kCFNumberIntType, &v51);
    CFDictionarySetValue(MutableCopy, kSCPropNetProxiesProxyAutoConfigEnable, number);
    CFRelease(number);
    CFDictionarySetValue(MutableCopy, v5, v47);
    CFRelease(v47);
    goto LABEL_79;
  }

LABEL_82:
  int valuePtr = 0;
  if (v30)
  {
LABEL_80:
    CFNumberRef number = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(MutableCopy, v6, number);
    CFRelease(number);
  }

LABEL_81:
  uint64_t v48 = sub_10003879C(key, kSCEntNetProxies, MutableCopy);
  CFRelease(MutableCopy);
  return v48;
}

uint64_t sub_100039E54(__CFString *serviceID, int a2, int a3, const void *a4)
{
  CFStringRef v5 = (const void *)kSCEntNetCommCenter;
  CFStringRef v6 = (const __CFDictionary *)sub_1000350BC(a4, serviceID, kSCEntNetCommCenter);
  if (!v6)
  {
    CFNumberGetTypeID();
    return sub_10003879C(serviceID, v5, 0LL);
  }

  unsigned int Value = CFDictionaryGetValue(v6, @"AvailableProtocols");
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return sub_10003879C(serviceID, v5, 0LL);
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, @"AvailableProtocols", Value);
  uint64_t v10 = sub_10003879C(serviceID, v5, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v10;
}

CFDictionaryRef sub_100039F88( int a1, const __CFDictionary *a2, CFDictionaryRef theDict, const __CFNumber *a4)
{
  if (theDict)
  {
    uint64_t v8 = &kSCPropNetIPv4Router;
    if (a1 != 2) {
      uint64_t v8 = &kSCPropNetIPv6Router;
    }
    CFStringRef v9 = *v8;
    uint64_t v10 = (const void **)&kSCPropNetIPv4AdditionalRoutes;
    if (a1 != 2) {
      uint64_t v10 = (const void **)&kSCPropNetIPv6AdditionalRoutes;
    }
    int v11 = *v10;
    unsigned int Value = CFDictionaryGetValue(theDict, v9);
    if (Value)
    {
      unint64_t v13 = (unint64_t)Value;
      else {
        unint64_t v14 = 0LL;
      }
    }

    else
    {
      unint64_t v14 = 0LL;
    }

    BOOL v16 = (const __CFArray *)CFDictionaryGetValue(theDict, v11);
    CFTypeID TypeID = CFArrayGetTypeID();
    if (v16)
    {
      if (CFGetTypeID(v16) == TypeID) {
        __int16 v18 = v16;
      }
      else {
        __int16 v18 = 0LL;
      }
    }

    else
    {
      __int16 v18 = 0LL;
    }

    if (v14 | (unint64_t)v18)
    {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, a2);
      uint64_t v20 = MutableCopy;
      if (v14) {
        CFDictionarySetValue(MutableCopy, v9, (const void *)v14);
      }
      if (v18)
      {
        uint64_t v21 = (const __CFArray *)CFDictionaryGetValue(a2, v11);
        CFTypeID v22 = CFArrayGetTypeID();
        if (v21 && CFGetTypeID(v21) == v22)
        {
          uint64_t v23 = CFArrayCreateMutableCopy(0LL, 0LL, v18);
          v87.length = CFArrayGetCount(v21);
          v87.location = 0LL;
          CFArrayAppendArray(v23, v21, v87);
          CFDictionarySetValue(v20, v11, v23);
          if (v23) {
            CFRelease(v23);
          }
        }

        else
        {
          CFDictionarySetValue(v20, v11, v18);
        }
      }

      uint64_t v15 = v20;
    }

    else
    {
      uint64_t v15 = 0LL;
      uint64_t v20 = a2;
    }

    a2 = v20;
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  if (a1 == 2)
  {
    keys = (void *)0x500000000LL;
    LOWORD(v76) = 0;
    uint64_t v24 = (const UInt8 *)sub_10003A7FC(&keys, a2, a4);
    if (v24)
    {
      unint64_t v25 = (void **)v24;
      CFDataRef v26 = CFDataCreate(0LL, v24, 36LL * *(int *)v24 + 12);
      if (v25 == &keys) {
        goto LABEL_90;
      }
      CFMutableStringRef v27 = v25;
      goto LABEL_33;
    }

    goto LABEL_89;
  }

  keys = (void *)0x300000000LL;
  LOWORD(v76) = 0;
  int valuePtr = 0x1000000;
  unsigned int v74 = 0;
  int32x4_t v82 = (int32x4_t)in6addr_any;
  if (!a2) {
    goto LABEL_89;
  }
  CFNumberRef v28 = sub_10003AEF4(a2, kSCPropInterfaceName, v83);
  if (!v28) {
    goto LABEL_89;
  }
  int v29 = v28;
  int v30 = sub_100028D68((uint64_t)v83);
  if (!v30) {
    goto LABEL_89;
  }
  int v31 = v30;
  int v32 = sub_10003AF98(a2, v29);
  CFTypeID v33 = CFDictionaryGetValue(a2, kSCPropNetIPv6Router);
  if (!sub_10003B8F8(a2, kSCPropNetIPv6Addresses, &v84)
    || (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v84, v84))) & 1) == 0)
  {
    goto LABEL_89;
  }

  unsigned int v34 = (const __CFArray *)CFDictionaryGetValue(a2, kSCPropNetIPv6PrefixLength);
  CFTypeID v35 = CFArrayGetTypeID();
  if (v34)
  {
    if (CFGetTypeID(v34) == v35 && CFArrayGetCount(v34) >= 1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v34, 0LL);
      if (sub_10003BE94(ValueAtIndex, &v74))
      {
        if (v84.u8[0] == 254)
        {
          if ((v84.i8[1] & 0xC0) != 0x80 && v74 <= 0x80) {
            goto LABEL_48;
          }
        }

        else if (v74 < 0x81)
        {
LABEL_48:
          char v68 = 0;
          int v37 = 1;
          goto LABEL_51;
        }
      }
    }
  }

  int v37 = 0;
  unsigned int v74 = 0;
  char v68 = 1;
LABEL_51:
  if (a4) {
    CFNumberGetValue(a4, kCFNumberSInt32Type, &valuePtr);
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v82, v82))) & 1) != 0)
  {
    int v38 = sub_100029224();
    BOOL v71 = v31 != v38;
    if (v31 != v38) {
      ++v37;
    }
    if (v74 != 128 && v82.i64[1] == v84.i64[1] && v82.i64[0] == v84.i64[0]) {
      __int16 v41 = 0;
    }
    else {
      __int16 v41 = 2;
    }
  }

  else
  {
    __int16 v41 = 0;
    BOOL v71 = 0;
  }

  int v42 = sub_10003B27C(a2, @"IsNULL");
  if (v42) {
    v41 |= 8u;
  }
  int v43 = valuePtr;
  if (valuePtr == 50331648)
  {
    char v67 = 0;
    v41 |= 1u;
    int v43 = 0x2000000;
  }

  else if (valuePtr == 0x4000000)
  {
    int v43 = 50331648;
    int valuePtr = 50331648;
    v41 |= 1u;
    char v67 = 1;
  }

  else
  {
    char v67 = 0;
  }

  int v69 = v42;
  if (!v32)
  {
    CFArrayRef theArray = 0LL;
    CFIndex Count = 0LL;
    CFIndex range = 0LL;
    int v51 = 0LL;
    if (v37) {
      goto LABEL_86;
    }
LABEL_89:
    CFDataRef v26 = 0LL;
    goto LABEL_90;
  }

  __int16 v44 = v41;
  int v45 = (const __CFArray *)CFDictionaryGetValue(a2, kSCPropNetIPv6AdditionalRoutes);
  CFTypeID v46 = CFArrayGetTypeID();
  if (v45 && CFGetTypeID(v45) == v46)
  {
    CFStringRef v47 = v45;
    CFIndex range = CFArrayGetCount(v45);
    v37 += range;
  }

  else
  {
    CFStringRef v47 = 0LL;
    CFIndex range = 0LL;
  }

  __int16 v41 = v44;
  uint64_t v48 = (const __CFArray *)CFDictionaryGetValue(a2, kSCPropNetIPv6ExcludedRoutes);
  CFTypeID v49 = CFArrayGetTypeID();
  if (v48 && CFGetTypeID(v48) == v49)
  {
    CFArrayRef theArray = v48;
    CFIndex Count = CFArrayGetCount(v48);
    v37 += Count;
  }

  else
  {
    CFArrayRef theArray = 0LL;
    CFIndex Count = 0LL;
  }

  int v51 = v47;
  if (!v37) {
    goto LABEL_89;
  }
LABEL_86:
  CFIndex v65 = Count;
  unsigned int v52 = v37 + 1;
  if (v37 >= 3)
  {
    p_keys = (int32x4_t *)malloc(68LL * v52 + 12);
    bzero(p_keys, 68LL * v52 + 12);
    p_keys->i32[1] = v52;
  }

  else
  {
    p_keys = (int32x4_t *)&keys;
    __memset_chk((char *)&v76 + 4, 0LL, 68LL * (int)v52, 204LL);
  }

  p_keys->i32[0] = v52;
  char v56 = v67 ^ 1;
  if (v69) {
    char v56 = 0;
  }
  if ((v56 & 1) == 0)
  {
    if (v69) {
      __int16 v57 = 1;
    }
    else {
      __int16 v57 = 4;
    }
    p_keys->i16[4] |= v57;
  }

  if (v71)
  {
    p_keys->i16[4] |= 2u;
    p_keys[1].i32[0] = v31;
    int32x4_t v58 = v84;
    int v59 = &v82;
    if ((v41 & 2) == 0) {
      int v59 = &v84;
    }
    p_keys[3] = *v59;
    p_keys[4] = v58;
    p_keys[1].i32[2] = valuePtr;
    p_keys[1].i16[6] = v41 | 0x10;
    i32 = p_keys[5].i32;
  }

  else
  {
    i32 = &p_keys->i32[3];
  }

  *((_WORD *)i32 + 1sub_10000F430((uint64_t)__str, 0) = -32514;
  int *i32 = 64;
  i32[1] = v31;
  i32[3] = v43;
  *((_WORD *)i32 + 8) |= 0x10u;
  int v72 = (unsigned int *)(i32 + 17);
  if ((v68 & 1) == 0)
  {
    *((_WORD *)i32 + 42) |= v41 & 8 | 0x10;
    i32[18] = v31;
    int32x4_t v61 = v84;
    *(int32x4_t *)(i32 + 26) = v84;
    uint64_t v62 = i32 + 22;
    *(int32x4_t *)(i32 + 2pthread_attr_setdetachstate(&v4, 2) = v61;
    sub_10003BF24(&values, v74);
    for (uint64_t i = 0LL; i != 16; ++i)
      *((_BYTE *)v62 + i) &= *((_BYTE *)&values + i);
    CFStringRef v64 = v72;
    *int v72 = v74;
    *(int32x4_t *)(v64 + 13) = v84;
    v64[3] = v43;
    int v72 = v64 + 17;
  }

  if ((unint64_t)theArray | (unint64_t)v51)
  {
    values = 0LL;
    uint64_t v79 = 0LL;
    __int128 v81 = 0u;
    CFDataRef v78 = (CFDataRef)p_keys;
    int v80 = &v72;
    LODWORD(v8pthread_attr_setscope(&v4, 1) = v43;
    if (v51)
    {
      LODWORD(v79) = v31;
      values = &v84;
      *((void *)&v81 + pthread_attr_setscope(&v4, 1) = "AdditionalRoutes";
      v85.location = 0LL;
      v85.length = range;
      CFArrayApplyFunction(v51, v85, (CFArrayApplierFunction)sub_10003B9B4, &values);
    }

    if (theArray)
    {
      *((void *)&v81 + pthread_attr_setscope(&v4, 1) = "ExcludedRoutes";
      LODWORD(v79) = 0;
      HIDWORD(v79) = v31;
      values = 0LL;
      v86.location = 0LL;
      v86.length = v65;
      CFArrayApplyFunction(theArray, v86, (CFArrayApplierFunction)sub_10003B9B4, &values);
    }
  }

  CFDataRef v26 = CFDataCreate(0LL, (const UInt8 *)p_keys, 68LL * p_keys->i32[0] + 12);
  if (p_keys != (int32x4_t *)&keys)
  {
    CFMutableStringRef v27 = (void **)p_keys;
LABEL_33:
    free(v27);
  }

LABEL_90:
  if (!v26)
  {
    CFDictionaryRef v54 = 0LL;
    if (!v15) {
      return v54;
    }
    goto LABEL_92;
  }

  keys = @"Service";
  CFStringRef v76 = @"Routes";
  values = a2;
  CFDataRef v78 = v26;
  CFDictionaryRef v54 = CFDictionaryCreate( 0LL,  (const void **)&keys,  (const void **)&values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFRelease(v26);
  if (v15) {
LABEL_92:
  }
    CFRelease(v15);
  return v54;
}

_DWORD *sub_10003A7FC(_DWORD *a1, const __CFDictionary *a2, const __CFNumber *a3)
{
  uint64_t v73 = 0LL;
  int valuePtr = 0x1000000;
  int v70 = 0;
  if (!a2) {
    return 0LL;
  }
  CFStringRef v6 = sub_10003AEF4(a2, kSCPropInterfaceName, v74);
  if (!v6) {
    return 0LL;
  }
  BOOL v7 = v6;
  int v8 = sub_100028D68((uint64_t)v74);
  if (!v8) {
    return 0LL;
  }
  int v9 = v8;
  int v10 = sub_10003AF98(a2, v7);
  unsigned int Value = CFDictionaryGetValue(a2, kSCPropNetIPv4Router);
  if (!sub_10003B034(a2, kSCPropNetIPv4Addresses, (char *)&v73 + 4)
    || !sub_10003B034(a2, kSCPropNetIPv4SubnetMasks, &v73))
  {
    int v13 = 0;
    int v12 = 0;
LABEL_11:
    int v15 = 0;
    int v14 = 1;
    goto LABEL_12;
  }

  int v12 = v73 & HIDWORD(v73);
  int v13 = sub_10003B0F0(v73);
  if ((v13 & 0x80000000) == 0)
  {
    int v14 = 0;
    int v15 = 1;
    goto LABEL_12;
  }

  os_log_t v28 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    os_log_t v28 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v28;
  }

  uint64_t v29 = _SC_syslog_os_log_mapping(5LL);
  int v30 = v13;
  uint64_t v31 = _os_log_pack_size(36LL);
  CFStringRef v64 = &Count;
  uint64_t v32 = __chkstk_darwin(v31);
  int v65 = v12;
  CFTypeID v33 = (char *)&Count - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v34 = __error();
  uint64_t v35 = v31;
  int v13 = v30;
  uint64_t v36 = _os_log_pack_fill( v33,  v35,  *v34,  &_mh_execute_header,  "ignoring bad subnet mask %d.%d.%d.%d on %s",  Count,  v58,  v60,  v62,  (const char *)v64);
  int v37 = v73;
  int v38 = BYTE1(v73);
  int v39 = BYTE2(v73);
  int v40 = BYTE3(v73);
  *(_DWORD *)uint64_t v36 = 67110146;
  *(_DWORD *)(v36 + 4) = v37;
  *(_WORD *)(v36 + 8) = 1024;
  *(_DWORD *)(v36 + 1sub_10000F430((uint64_t)__str, 0) = v38;
  *(_WORD *)(v36 + 14) = 1024;
  *(_DWORD *)(v36 + 16) = v39;
  *(_WORD *)(v36 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = 1024;
  *(_DWORD *)(v36 + 2pthread_attr_setdetachstate(&v4, 2) = v40;
  *(_WORD *)(v36 + 26) = 2080;
  *(void *)(v36 + 28) = v74;
  __int16 v41 = v33;
  int v12 = v65;
  __SC_log_send(5LL, v28, v29, v41);
  int v14 = 1;
  int v15 = 0;
LABEL_12:
  if (!HIDWORD(v73)) {
    return 0LL;
  }
  if (a3) {
    CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
  }
  int v59 = v13;
  if (v70)
  {
    if ((_DWORD)v73 != -1 && HIDWORD(v73) == v70) {
      __int16 v17 = 0;
    }
    else {
      __int16 v17 = 2;
    }
  }

  else
  {
    __int16 v17 = 0;
    if (valuePtr != 0x2000000 && valuePtr != 50331648 && valuePtr != 0x4000000)
    {
      __int16 v17 = 0;
      int valuePtr = 0x2000000;
    }
  }

  int v19 = sub_10003B27C(a2, @"IsNULL");
  if (v19) {
    __int16 v20 = v17 | 8;
  }
  else {
    __int16 v20 = v17;
  }
  int v21 = valuePtr;
  int v65 = v14;
  int v63 = v19;
  if (valuePtr == 50331648)
  {
    int v60 = 0;
    v20 |= 1u;
    int v21 = 0x2000000;
  }

  else if (valuePtr == 0x4000000)
  {
    int v21 = 50331648;
    int valuePtr = 50331648;
    v20 |= 1u;
    int v60 = 1;
  }

  else
  {
    int v60 = 0;
  }

  LODWORD(v64) = v20 & 2;
  signed int v22 = v15 + (v64 >> 1);
  int v62 = sub_100029224();
  if (v9 == v62)
  {
    BOOL v61 = 0;
    if (v10) {
      goto LABEL_41;
    }
LABEL_48:
    CFIndex v26 = 0LL;
    CFMutableStringRef v27 = 0LL;
    CFIndex Count = 0LL;
    uint64_t v23 = 0LL;
    if (!a1) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }

  BOOL v61 = v70 != 0;
  if (v70) {
    int v25 = v22 + 1;
  }
  else {
    int v25 = v15 + ((v20 & 2) >> 1);
  }
  signed int v22 = v25 + 2;
  if (!v10) {
    goto LABEL_48;
  }
LABEL_41:
  uint64_t v23 = (const __CFArray *)CFDictionaryGetValue(a2, kSCPropNetIPv4AdditionalRoutes);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (v23)
  {
    if (CFGetTypeID(v23) == TypeID)
    {
      CFIndex Count = CFArrayGetCount(v23);
      v22 += Count;
      goto LABEL_56;
    }

    uint64_t v23 = 0LL;
  }

  CFIndex Count = 0LL;
LABEL_56:
  CFMutableStringRef v27 = (const __CFArray *)CFDictionaryGetValue(a2, kSCPropNetIPv4ExcludedRoutes);
  CFTypeID v42 = CFArrayGetTypeID();
  if (v27)
  {
    if (CFGetTypeID(v27) == v42)
    {
      CFIndex v26 = CFArrayGetCount(v27);
      v22 += v26;
      if (!a1) {
        goto LABEL_64;
      }
    }

    else
    {
      CFIndex v26 = 0LL;
      CFMutableStringRef v27 = 0LL;
      if (!a1)
      {
LABEL_64:
        a1 = malloc(36LL * v22 + 12);
        bzero(a1, 36LL * v22 + 12);
        a1[1] = v22;
        goto LABEL_66;
      }
    }
  }

  else
  {
    CFIndex v26 = 0LL;
    if (!a1) {
      goto LABEL_64;
    }
  }

LABEL_63:
  if (a1[1] < v22) {
    goto LABEL_64;
  }
  bzero(a1 + 3, 36LL * v22);
LABEL_66:
  int v43 = v63;
  int v44 = (int)v64;
  *a1 = v22;
  char v45 = v60 ^ 1;
  if (v43) {
    char v45 = 0;
  }
  if ((v45 & 1) == 0)
  {
    if (v43) {
      __int16 v46 = 1;
    }
    else {
      __int16 v46 = 4;
    }
    *((_WORD *)a1 + 4) |= v46;
  }

  CFStringRef v47 = a1 + 3;
  BOOL v71 = a1 + 3;
  char v48 = v65;
  if (v61)
  {
    *((_WORD *)a1 + 4) |= 2u;
    a1[4] = v9;
    int v49 = HIDWORD(v73);
    *((_WORD *)a1 + 14) = v20;
    int v50 = v70;
    if (!v44) {
      int v50 = v49;
    }
    a1[10] = v50;
    a1[11] = v49;
    a1[6] = valuePtr;
    CFStringRef v47 = a1 + 12;
    BOOL v71 = a1 + 12;
  }

  if (v9 == v62)
  {
    if ((v48 & 1) != 0) {
      goto LABEL_79;
    }
LABEL_86:
    if ((v20 & 8) != 0) {
      *((_WORD *)v47 + 8) |= 8u;
    }
    int v53 = v73;
    int v52 = HIDWORD(v73);
    v47[5] = v12;
    v47[6] = v53;
    _DWORD *v47 = v59;
    v47[1] = v9;
    int v54 = HIDWORD(v73);
    v47[7] = v52;
    v47[8] = v54;
    v47[3] = v21;
    v47 += 9;
    BOOL v71 = v47;
    if (!v44) {
      goto LABEL_92;
    }
    goto LABEL_89;
  }

  if ((v20 & 8) != 0) {
    *((_WORD *)v47 + 8) |= 8u;
  }
  *(void *)(v47 + 5) = -1LL;
  _DWORD *v47 = 32;
  v47[1] = v9;
  int v51 = HIDWORD(v73);
  v47[8] = HIDWORD(v73);
  v47[3] = v21;
  if ((v20 & 8) != 0) {
    *((_WORD *)v47 + 26) |= 8u;
  }
  *((void *)v47 + 7) = 0xF0000000E0LL;
  v47[9] = 4;
  v47[10] = v9;
  v47[17] = v51;
  v47[12] = v21;
  v47 += 18;
  BOOL v71 = v47;
  if ((v48 & 1) == 0) {
    goto LABEL_86;
  }
LABEL_79:
  if (v44)
  {
LABEL_89:
    if ((v20 & 8) != 0) {
      *((_WORD *)v47 + 8) |= 8u;
    }
    int v55 = HIDWORD(v73);
    v47[5] = v70;
    v47[6] = -1;
    _DWORD *v47 = 32;
    v47[1] = v9;
    int v56 = HIDWORD(v73);
    v47[7] = v55;
    v47[8] = v56;
    v47[3] = v21;
    BOOL v71 = v47 + 9;
  }

LABEL_92:
  if ((unint64_t)v27 | (unint64_t)v23)
  {
    context[0] = 0LL;
    uint64_t v67 = 0LL;
    __int128 v69 = 0u;
    context[1] = a1;
    char v68 = &v71;
    LODWORD(v69) = v21;
    if (v23)
    {
      LODWORD(v67) = v9;
      LODWORD(context[0]) = HIDWORD(v73);
      *((void *)&v69 + pthread_attr_setscope(&v4, 1) = "AdditionalRoutes";
      v75.location = 0LL;
      v75.length = Count;
      CFArrayApplyFunction(v23, v75, (CFArrayApplierFunction)sub_10003B320, context);
    }

    if (v27)
    {
      *((void *)&v69 + pthread_attr_setscope(&v4, 1) = "ExcludedRoutes";
      LODWORD(v67) = 0;
      HIDWORD(v67) = v9;
      v76.location = 0LL;
      v76.length = v26;
      CFArrayApplyFunction(v27, v76, (CFArrayApplierFunction)sub_10003B320, context);
    }
  }

  return a1;
}

      goto LABEL_101;
    }

    LOBYTE(v7pthread_attr_setscope(&v4, 1) = 0;
LABEL_101:
    enabledAV = self->_enabledAV;
    if (v116)
    {
      if (!-[NSMutableDictionary count](enabledAV, "count")) {
        sub_100061580("net.qos.policy.restrict_avapps", 0);
      }
      -[NSMutableDictionary setObject:forKeyedSubscript:](self->_enabledAV, "setObject:forKeyedSubscript:", v6, v7);
      CFStringRef v117 = (char)v71;
      unsigned int v112 = v61;
      uint64_t v108 = v15;
      unsigned int v127 = 0u;
      BOOL v128 = 0u;
      uint64_t v125 = 0u;
      uint64_t v126 = 0u;
      CFDataRef v78 = (id)qword_100079FF0;
      uint64_t v79 = [v78 countByEnumeratingWithState:&v125 objects:v124 count:16];
      if (v79)
      {
        int v80 = v79;
        __int128 v81 = *(void *)v126;
        int32x4_t v82 = 1000LL;
        do
        {
          for (uint64_t j = 0LL; j != v80; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v126 != v81) {
              objc_enumerationMutation(v78);
            }
            -[QoSMarkingController addAllowListAppIdentifierPolicy:forApp:order:]( self,  "addAllowListAppIdentifierPolicy:forApp:order:",  v7,  *(void *)(*((void *)&v125 + 1) + 8LL * (void)j),  (char *)j + v82);
          }

          int v80 = [v78 countByEnumeratingWithState:&v125 objects:v124 count:16];
          int32x4_t v82 = (v82 + (_DWORD)j);
        }

        while (v80);
      }

      int v122 = 0u;
      int v123 = 0u;
      uint64_t v120 = 0u;
      int v121 = 0u;
      BOOL v71 = (id)qword_100079FF8;
      int32x4_t v84 = [v71 countByEnumeratingWithState:&v120 objects:v119 count:16];
      if (v84)
      {
        CFRange v85 = v84;
        CFRange v86 = *(void *)v121;
        CFRange v87 = 1500LL;
        do
        {
          for (CFIndex k = 0LL; k != v85; CFIndex k = (char *)k + 1)
          {
            if (*(void *)v121 != v86) {
              objc_enumerationMutation(v71);
            }
            -[QoSMarkingController addAllowListPathPolicy:forPath:order:]( self,  "addAllowListPathPolicy:forPath:order:",  v7,  *(void *)(*((void *)&v120 + 1) + 8LL * (void)k),  (char *)k + v87);
          }

          CFRange v85 = [v71 countByEnumeratingWithState:&v120 objects:v119 count:16];
          CFRange v87 = (v87 + (_DWORD)k);
        }

        while (v85);
      }

      int v15 = v108;
      BOOL v61 = v112;
      int v52 = v115;
      LOBYTE(v7pthread_attr_setscope(&v4, 1) = v117;
    }

    else
    {
      -[NSMutableDictionary removeObjectForKey:](enabledAV, "removeObjectForKey:", v7);
      if (!-[NSMutableDictionary count](self->_enabledAV, "count")) {
        sub_100061580("net.qos.policy.restrict_avapps", 1);
      }
    }

    if ((v71 & 1) == 0 && ([v61 apply] & 1) == 0)
    {
      uint64_t v89 = sub_10005DC2C();
      uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
      int v91 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v90, v91))
      {
        os_log_t v113 = v61;
        CFTypeID v92 = v15;
        uint64_t v93 = v8;
        uint64_t v152 = 0u;
        int v153 = 0u;
        unsigned int v150 = 0u;
        unsigned int v151 = 0u;
        uint64_t v148 = 0u;
        int v149 = 0u;
        int v146 = 0u;
        uint64_t v147 = 0u;
        unsigned int v144 = 0u;
        unsigned int v145 = 0u;
        unsigned int v142 = 0u;
        uint64_t v143 = 0u;
        BOOL v140 = 0u;
        BOOL v141 = 0u;
        unsigned int v138 = 0u;
        unsigned int v139 = 0u;
        uint64_t v94 = (_sc_log > 0) | 2;
        if (os_log_type_enabled(v90, (os_log_type_t)v91)) {
          int v95 = v94;
        }
        else {
          int v95 = 2LL;
        }
        LODWORD(v154[0]) = 138412290;
        *(void *)((char *)v154 + 4) = v7;
        LODWORD(v105) = 12;
        uint64_t v96 = (__int128 *)_os_log_send_and_compose_impl( v95,  0LL,  &v138,  256LL,  &_mh_execute_header,  v90,  v91,  "%@: could not apply new policies",  v154,  v105);
        __SC_log_send2(3LL, v90, v91, 0LL, v96);
        if (v96 != &v138) {
          free(v96);
        }
        int v8 = v93;
        int v15 = v92;
        BOOL v61 = v113;
        int v52 = v115;
      }
    }

CFStringRef sub_10003AEF4(const __CFDictionary *a1, const void *a2, char *a3)
{
  unsigned int Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return 0LL;
  }
  if (CFStringGetCString(Value, a3, 16LL, 0x8000100u)) {
    return Value;
  }
  return 0LL;
}

uint64_t sub_10003AF98(const __CFDictionary *a1, const void *a2)
{
  unsigned int Value = CFDictionaryGetValue(a1, kSCPropConfirmedInterfaceName);
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID) {
    return CFEqual(Value, a2);
  }
  else {
    return 1LL;
  }
}

BOOL sub_10003B034(const __CFDictionary *a1, const void *a2, void *a3)
{
  unsigned int Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFArrayGetTypeID();
  BOOL result = 0;
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID && CFArrayGetCount(Value) >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(Value, 0LL);
    }
  }

  return result;
}

uint64_t sub_10003B0F0(unsigned int a1)
{
  uint64_t v1 = 0LL;
  if (a1)
  {
    unsigned int v2 = a1;
    do
    {
      if (((0x2EFEuLL >> (v2 & 0xF)) & 1) != 0) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v1 = (v1 + byte_100065800[v2 & 0xF]);
      BOOL v3 = v2 > 0xF;
      v2 >>= 4;
    }

    while (v3);
    if ((v1 & 0x80000000) != 0) {
      return v1;
    }
  }

  uint64_t v4 = 0xFFFFFFFFLL;
  else {
    int v5 = 0;
  }
  if (bswap32(a1) == v5) {
    return v1;
  }
  return v4;
}

uint64_t sub_10003B1A8(const __CFDictionary *a1)
{
  unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(a1, kSCPropNetOverridePrimary);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      int valuePtr = 0;
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (!valuePtr) {
        return 0LL;
      }
    }

    else
    {
      CFTypeID v3 = CFBooleanGetTypeID();
      if (CFGetTypeID(Value) != v3 || !CFBooleanGetValue(Value)) {
        return 0LL;
      }
    }

    return 1LL;
  }

  CFBooleanGetTypeID();
  return 0LL;
}

uint64_t sub_10003B27C(const __CFDictionary *a1, const void *a2)
{
  if (a1
    && (Value = (const __CFBoolean *)CFDictionaryGetValue(a1, a2), CFTypeID TypeID = CFBooleanGetTypeID(), Value)
    && CFGetTypeID(Value) == TypeID)
  {
    return CFBooleanGetValue(Value);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_10003B320(const void *a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a2 + 24);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID)
  {
    os_log_t v12 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v12 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v12;
    }

    uint64_t v13 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v12, v13);
    if ((_DWORD)result)
    {
      uint64_t v14 = _os_log_pack_size(12LL);
      int v15 = &v35[-((__chkstk_darwin(v14) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
      BOOL v16 = __error();
      uint64_t v17 = _os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "%s route is not a dictionary", v34);
      uint64_t v18 = *(void *)(a2 + 40);
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = v18;
      uint64_t result = __SC_log_send(5LL, v12, v13, v15);
    }

    goto LABEL_21;
  }

  unsigned int Value = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv4RouteDestinationAddress);
  if (sub_10002E40C(2, Value, (void *)(v4 + 20), 4uLL)
    && (BOOL v7 = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv4RouteSubnetMask),
        sub_10002E40C(2, v7, (void *)(v4 + 24), 4uLL)))
  {
    uint64_t result = sub_10003B0F0(*(_DWORD *)(v4 + 24));
    if ((result & 0x80000000) == 0)
    {
      *(_DWORD *)uint64_t v4 = result;
      *(_DWORD *)(v4 + 1pthread_attr_setdetachstate(&v4, 2) = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 20);
      int v9 = *(_DWORD *)(a2 + 16);
      if (v9)
      {
        *(_DWORD *)(v4 + 4) = v9;
        *(_DWORD *)(v4 + 3pthread_attr_setdetachstate(&v4, 2) = *(_DWORD *)a2;
        if (!*(_DWORD *)(a2 + 20))
        {
          int v10 = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv4RouteGatewayAddress);
          uint64_t result = sub_10002E40C(2, v10, (void *)(v4 + 28), 4uLL);
          if ((_DWORD)result)
          {
            __int16 v11 = *(_WORD *)(v4 + 16);
            *(_WORD *)(v4 + 16) = v11 | 2;
            if (*(_DWORD *)v4 == 32) {
              *(_WORD *)(v4 + 16) = v11 | 6;
            }
          }
        }

        goto LABEL_40;
      }

      uint64_t result = (uint64_t)sub_10003AEF4((const __CFDictionary *)a1, kSCPropNetIPv4RouteInterfaceName, v35);
      if (result)
      {
        uint64_t result = sub_100028D68((uint64_t)v35);
        if (!(_DWORD)result)
        {
          os_log_t v19 = (os_log_t)qword_100079C78;
          if (!qword_100079C78)
          {
            os_log_t v19 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_100079C78 = (uint64_t)v19;
          }

          uint64_t v20 = _SC_syslog_os_log_mapping(5LL);
          uint64_t result = __SC_log_enabled(5LL, v19, v20);
          if (!(_DWORD)result) {
            goto LABEL_21;
          }
          uint64_t v31 = _os_log_pack_size(32LL);
          signed int v22 = &v35[-((__chkstk_darwin(v31) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
          uint64_t v32 = *__error();
          uint64_t v30 = _os_log_pack_fill(v22, v31, v32, &_mh_execute_header, "%s: interface %s does not exist, %@");
LABEL_38:
          uint64_t v33 = *(void *)(a2 + 40);
          *(_DWORD *)uint64_t v30 = 136315650;
          *(void *)(v30 + 4) = v33;
          *(_WORD *)(v30 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
          *(void *)(v30 + 14) = v35;
          *(_WORD *)(v30 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
          *(void *)(v30 + 24) = a1;
          goto LABEL_20;
        }

        if ((_DWORD)result == *(_DWORD *)(a2 + 16))
        {
          os_log_t v19 = (os_log_t)qword_100079C78;
          if (!qword_100079C78)
          {
            os_log_t v19 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_100079C78 = (uint64_t)v19;
          }

          uint64_t v20 = _SC_syslog_os_log_mapping(5LL);
          uint64_t result = __SC_log_enabled(5LL, v19, v20);
          if (!(_DWORD)result) {
            goto LABEL_21;
          }
          uint64_t v28 = _os_log_pack_size(32LL);
          signed int v22 = &v35[-((__chkstk_darwin(v28) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
          uint64_t v29 = *__error();
          uint64_t v30 = _os_log_pack_fill(v22, v28, v29, &_mh_execute_header, "%s: interface %s unexpected, %@");
          goto LABEL_38;
        }

        *(_DWORD *)(v4 + 4) = result;
      }

LABEL_40:
      **(void **)(a2 + 24) += 36LL;
      return result;
    }

    os_log_t v19 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v19 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v19;
    }

    uint64_t v20 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v19, v20);
    if (!(_DWORD)result) {
      goto LABEL_21;
    }
    uint64_t v26 = _os_log_pack_size(22LL);
    signed int v22 = &v35[-((__chkstk_darwin(v26) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
    uint64_t v27 = *__error();
    uint64_t v24 = _os_log_pack_fill(v22, v26, v27, &_mh_execute_header, "%s route has invalid subnet mask, %@");
  }

  else
  {
    os_log_t v19 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v19 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v19;
    }

    uint64_t v20 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v19, v20);
    if (!(_DWORD)result) {
      goto LABEL_21;
    }
    uint64_t v21 = _os_log_pack_size(22LL);
    signed int v22 = &v35[-((__chkstk_darwin(v21) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
    uint64_t v23 = *__error();
    uint64_t v24 = _os_log_pack_fill(v22, v21, v23, &_mh_execute_header, "%s route is invalid, %@");
  }

  uint64_t v25 = *(void *)(a2 + 40);
  *(_DWORD *)uint64_t v24 = 136315394;
  *(void *)(v24 + 4) = v25;
  *(_WORD *)(v24 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
  *(void *)(v24 + 14) = a1;
LABEL_20:
  uint64_t result = __SC_log_send(5LL, v19, v20, v22);
LABEL_21:
  --**(_DWORD **)(a2 + 8);
  return result;
}
}

uint64_t sub_10003B8A8(uint64_t a1)
{
  return 68 * a1 + 12;
}

BOOL sub_10003B8F8(const __CFDictionary *a1, const void *a2, void *a3)
{
  unsigned int Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFArrayGetTypeID();
  BOOL result = 0;
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID && CFArrayGetCount(Value) >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(Value, 0LL);
    }
  }

  return result;
}

uint64_t sub_10003B9B4(const void *a1, uint64_t a2)
{
  uint64_t v4 = **(_DWORD ***)(a2 + 24);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID)
  {
    os_log_t v16 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v16 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v16;
    }

    uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v16, v17);
    if ((_DWORD)result)
    {
      uint64_t v18 = _os_log_pack_size(12LL);
      os_log_t v19 = &v33[-((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
      uint64_t v20 = __error();
      uint64_t v21 = _os_log_pack_fill(v19, v18, *v20, &_mh_execute_header, "%s route is not a dictionary", v32);
      uint64_t v22 = *(void *)(a2 + 40);
      *(_DWORD *)uint64_t v21 = 136315138;
      *(void *)(v21 + 4) = v22;
      uint64_t result = __SC_log_send(5LL, v16, v17, v19);
    }

    goto LABEL_15;
  }

  unsigned int Value = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv6RouteDestinationAddress);
  if (sub_10002E40C(30, Value, v4 + 5, 0x10uLL))
  {
    BOOL v7 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv6RoutePrefixLength);
    uint64_t result = sub_10003BE94(v7, v4);
    if ((_DWORD)result)
    {
      if (*v4 <= 0x80u)
      {
        v4[3] = *(_DWORD *)(a2 + 32);
        _OWORD v4[2] = *(_DWORD *)(a2 + 20);
        int v23 = *(_DWORD *)(a2 + 16);
        if (v23)
        {
          v4[1] = v23;
          *(_OWORD *)(v4 + 13) = *(_OWORD *)*(void *)a2;
          if (!*(_DWORD *)(a2 + 20))
          {
            uint64_t v24 = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv6RouteGatewayAddress);
            uint64_t result = sub_10002E40C(30, v24, v4 + 9, 0x10uLL);
            if ((_DWORD)result)
            {
              __int16 v25 = *((_WORD *)v4 + 8);
              *((_WORD *)v4 + 8) = v25 | 2;
              if (*v4 == 128) {
                *((_WORD *)v4 + 8) = v25 | 6;
              }
            }
          }

          goto LABEL_35;
        }

        uint64_t result = (uint64_t)sub_10003AEF4((const __CFDictionary *)a1, kSCPropNetIPv6RouteInterfaceName, v33);
        if (result)
        {
          uint64_t result = sub_100028D68((uint64_t)v33);
          if (!(_DWORD)result)
          {
            os_log_t v9 = (os_log_t)qword_100079C78;
            if (!qword_100079C78)
            {
              os_log_t v9 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
              qword_100079C78 = (uint64_t)v9;
            }

            uint64_t v10 = _SC_syslog_os_log_mapping(5LL);
            uint64_t result = __SC_log_enabled(5LL, v9, v10);
            if (!(_DWORD)result) {
              goto LABEL_15;
            }
            uint64_t v29 = _os_log_pack_size(32LL);
            os_log_t v12 = &v33[-((__chkstk_darwin(v29) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
            uint64_t v30 = *__error();
            uint64_t v28 = _os_log_pack_fill(v12, v29, v30, &_mh_execute_header, "%s: interface %s does not exist, %@");
LABEL_33:
            uint64_t v31 = *(void *)(a2 + 40);
            *(_DWORD *)uint64_t v28 = 136315650;
            *(void *)(v28 + 4) = v31;
            *(_WORD *)(v28 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
            *(void *)(v28 + 14) = v33;
            *(_WORD *)(v28 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
            *(void *)(v28 + 24) = a1;
            goto LABEL_10;
          }

          if ((_DWORD)result == *(_DWORD *)(a2 + 16))
          {
            os_log_t v9 = (os_log_t)qword_100079C78;
            if (!qword_100079C78)
            {
              os_log_t v9 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
              qword_100079C78 = (uint64_t)v9;
            }

            uint64_t v10 = _SC_syslog_os_log_mapping(5LL);
            uint64_t result = __SC_log_enabled(5LL, v9, v10);
            if (!(_DWORD)result) {
              goto LABEL_15;
            }
            uint64_t v26 = _os_log_pack_size(32LL);
            os_log_t v12 = &v33[-((__chkstk_darwin(v26) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
            uint64_t v27 = *__error();
            uint64_t v28 = _os_log_pack_fill(v12, v26, v27, &_mh_execute_header, "%s: interface %s unexpected, %@");
            goto LABEL_33;
          }

          v4[1] = result;
        }

LABEL_35:
        **(void **)(a2 + 24) += 68LL;
        return result;
      }
    }
  }

  os_log_t v9 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    os_log_t v9 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v9;
  }

  uint64_t v10 = _SC_syslog_os_log_mapping(5LL);
  uint64_t result = __SC_log_enabled(5LL, v9, v10);
  if (!(_DWORD)result) {
    goto LABEL_15;
  }
  uint64_t v11 = _os_log_pack_size(22LL);
  os_log_t v12 = &v33[-((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = __error();
  uint64_t v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "%s route is invalid, %@");
  uint64_t v15 = *(void *)(a2 + 40);
  *(_DWORD *)uint64_t v14 = 136315394;
  *(void *)(v14 + 4) = v15;
  *(_WORD *)(v14 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
  *(void *)(v14 + 14) = a1;
LABEL_10:
  uint64_t result = __SC_log_send(5LL, v9, v10, v12);
LABEL_15:
  --**(_DWORD **)(a2 + 8);
  return result;
}

uint64_t sub_10003BE94(const __CFNumber *a1, void *a2)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID) {
    return CFNumberGetValue(a1, kCFNumberIntType, a2);
  }
  else {
    return 0LL;
  }
}

void *sub_10003BF24(void *__b, int a2)
{
  CFTypeID v3 = __b;
  size_t v4 = 0LL;
  *__b = 0LL;
  __b[1] = 0LL;
  if (a2 >= 8)
  {
    size_t v4 = (a2 >> 3) - 1 + 1LL;
    __b = memset(__b, 255, v4);
  }

  if (a2 <= 0) {
    int v5 = -(-a2 & 7);
  }
  else {
    int v5 = a2 & 7;
  }
  if (v5) {
    *((_BYTE *)v3 + v4) = 0xFF00u >> v5;
  }
  return __b;
}

uint64_t sub_10003BFCC(void *a1, const __CFDictionary *a2)
{
  int v59 = 0;
  int v58 = 0LL;
  CFTypeID v3 = (const __CFDictionary *)sub_10002E790(a1, kSCEntNetIPv6);
  size_t v4 = (UInt8 *)sub_10003C530(v3, &v59, &v58);
  uint64_t result = (uint64_t)sub_10003C530(a2, &v59, &v58);
  CFStringRef v6 = v58;
  __int16 v7 = v59;
  if (v58) {
    BOOL v8 = v59 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return result;
  }
  uint64_t v9 = result;
  uint64_t result = sub_1000292F4();
  if ((result & 0x80000000) != 0) {
    return result;
  }
  int v10 = result;
  if (v4)
  {
    if (v9)
    {
      if (*(void *)v4 == *(void *)v9 && *((void *)v4 + 1) == *(void *)(v9 + 8)) {
        goto LABEL_34;
      }
    }

    int v12 = sub_10002951C(result, v7, v4);
    os_log_t v13 = (os_log_t)qword_100079C78;
    if (v12 < 0)
    {
      if (!qword_100079C78)
      {
        os_log_t v13 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_100079C78 = (uint64_t)v13;
      }

      if (*__error() == 22) {
        uint64_t v24 = 7LL;
      }
      else {
        uint64_t v24 = 3LL;
      }
      uint64_t v25 = _SC_syslog_os_log_mapping(v24);
      if (*__error() == 22) {
        uint64_t v26 = 7LL;
      }
      else {
        uint64_t v26 = 3LL;
      }
      uint64_t result = __SC_log_enabled(v26, v13, v25);
      if ((_DWORD)result)
      {
        uint64_t v27 = _os_log_pack_size(32LL);
        uint64_t v57 = (uint64_t)&v57;
        uint64_t v28 = (char *)&v57 - ((__chkstk_darwin(v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v29 = __error();
        uint64_t v30 = _os_log_pack_fill(v28, v27, *v29, &_mh_execute_header, "siocdrdel_in6(%@, %s) failed: %s");
        uint64_t v31 = inet_ntop(30, v4, v60, 0x2Eu);
        uint64_t v32 = __error();
        uint64_t v33 = strerror(*v32);
        *(_DWORD *)uint64_t v30 = 138412802;
        *(void *)(v30 + 4) = v6;
        *(_WORD *)(v30 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
        *(void *)(v30 + 14) = v31;
        *(_WORD *)(v30 + 2pthread_attr_setdetachstate(&v4, 2) = 2080;
        *(void *)(v30 + 24) = v33;
        if (*__error() == 22) {
          uint64_t v20 = 7LL;
        }
        else {
          uint64_t v20 = 3LL;
        }
        os_log_t v21 = v13;
        uint64_t v22 = v25;
        int v23 = v28;
        goto LABEL_32;
      }
    }

    else
    {
      if (!qword_100079C78)
      {
        os_log_t v13 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_100079C78 = (uint64_t)v13;
      }

      uint64_t v14 = _SC_syslog_os_log_mapping(6LL);
      uint64_t result = __SC_log_enabled(6LL, v13, v14);
      if ((_DWORD)result)
      {
        uint64_t v15 = _os_log_pack_size(22LL);
        os_log_t v16 = (char *)&v57 - ((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v17 = __error();
        uint64_t v18 = _os_log_pack_fill(v16, v15, *v17, &_mh_execute_header, "%@ removed default route %s");
        os_log_t v19 = inet_ntop(30, v4, v60, 0x2Eu);
        *(_DWORD *)uint64_t v18 = 138412546;
        *(void *)(v18 + 4) = v6;
        *(_WORD *)(v18 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
        *(void *)(v18 + 14) = v19;
        uint64_t v20 = 6LL;
        os_log_t v21 = v13;
        uint64_t v22 = v14;
        int v23 = v16;
LABEL_32:
        uint64_t result = __SC_log_send(v20, v21, v22, v23);
      }
    }

    if (!v9) {
      return result;
    }
LABEL_34:
    if (*(void *)v4 == *(void *)v9 && *((void *)v4 + 1) == *(void *)(v9 + 8)) {
      return result;
    }
    goto LABEL_38;
  }

  if (!v9) {
    return result;
  }
LABEL_38:
  int v35 = sub_1000294A0(v10, v7, (_OWORD *)v9, 0);
  os_log_t v36 = (os_log_t)qword_100079C78;
  if (v35 < 0)
  {
    if (!qword_100079C78)
    {
      os_log_t v36 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v36;
    }

    if (*__error() == 22) {
      uint64_t v47 = 7LL;
    }
    else {
      uint64_t v47 = 3LL;
    }
    uint64_t v48 = _SC_syslog_os_log_mapping(v47);
    if (*__error() == 22) {
      uint64_t v49 = 7LL;
    }
    else {
      uint64_t v49 = 3LL;
    }
    uint64_t result = __SC_log_enabled(v49, v36, v48);
    if ((_DWORD)result)
    {
      uint64_t v50 = _os_log_pack_size(32LL);
      int v51 = (char *)&v57 - ((__chkstk_darwin(v50) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v52 = __error();
      uint64_t v53 = _os_log_pack_fill(v51, v50, *v52, &_mh_execute_header, "siocdradd_in6(%@, %s) failed: %s");
      int v54 = inet_ntop(30, (const void *)v9, v60, 0x2Eu);
      int v55 = __error();
      int v56 = strerror(*v55);
      *(_DWORD *)uint64_t v53 = 138412802;
      *(void *)(v53 + 4) = v6;
      *(_WORD *)(v53 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v53 + 14) = v54;
      *(_WORD *)(v53 + 2pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v53 + 24) = v56;
      if (*__error() == 22) {
        uint64_t v43 = 7LL;
      }
      else {
        uint64_t v43 = 3LL;
      }
      os_log_t v44 = v36;
      uint64_t v45 = v48;
      __int16 v46 = v51;
      return __SC_log_send(v43, v44, v45, v46);
    }
  }

  else
  {
    if (!qword_100079C78)
    {
      os_log_t v36 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v36;
    }

    uint64_t v37 = _SC_syslog_os_log_mapping(6LL);
    uint64_t result = __SC_log_enabled(6LL, v36, v37);
    if ((_DWORD)result)
    {
      uint64_t v38 = _os_log_pack_size(22LL);
      int v39 = (char *)&v57 - ((__chkstk_darwin(v38) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v40 = __error();
      uint64_t v41 = _os_log_pack_fill(v39, v38, *v40, &_mh_execute_header, "%@ added default route %s");
      CFTypeID v42 = inet_ntop(30, (const void *)v9, v60, 0x2Eu);
      *(_DWORD *)uint64_t v41 = 138412546;
      *(void *)(v41 + 4) = v6;
      *(_WORD *)(v41 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v41 + 14) = v42;
      uint64_t v43 = 6LL;
      os_log_t v44 = v36;
      uint64_t v45 = v37;
      __int16 v46 = v39;
      return __SC_log_send(v43, v44, v45, v46);
    }
  }

  return result;
}

const UInt8 *sub_10003C530(const __CFDictionary *a1, _DWORD *a2, const void **a3)
{
  CFStringRef v6 = sub_100030AC8(a1);
  if (!v6 || (*((_WORD *)v6 + 4) & 3) != 2) {
    return 0LL;
  }
  __int16 v7 = v6 + 48;
  if (!*a2) {
    *a2 = *((_DWORD *)v6 + 4);
  }
  if (!*a3) {
    *a3 = sub_10002E66C(a1);
  }
  return v7;
}

void sub_10003C5DC( __CFDictionary *a1, unint64_t a2, const __CFArray *a3, int a4, int a5, int a6, uint64_t a7)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  if (a3)
  {
    sub_10003CC64(a3, a6, Mutable, a7);
    BOOL v15 = CFArrayGetCount(Mutable) < 1;
  }

  else
  {
    BOOL v15 = 1;
  }

  if (CFArrayGetCount(Mutable)) {
    BOOL v16 = dword_100079C90 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  int v17 = !v16;
  if (!a2 || !v17) {
    goto LABEL_43;
  }
  __int128 v41 = xmmword_1000657F0;
  v40[0] = xmmword_100065810;
  *(_OWORD *)((char *)v40 + 1pthread_attr_setdetachstate(&v4, 2) = *(__int128 *)((char *)&xmmword_100065810 + 12);
  if ((~a6 & 3) != 0)
  {
    uint64_t v18 = (const __CFArray *)CFRetain((CFTypeRef)a2);
    goto LABEL_42;
  }

  uint64_t v18 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
  if (Count < 1) {
    goto LABEL_42;
  }
  CFArrayRef theArray = v18;
  BOOL v30 = v15;
  char v31 = a6;
  uint64_t v32 = a7;
  int v33 = a5;
  int v34 = a4;
  int v35 = a1;
  BOOL v19 = 0;
  CFIndex v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  int v23 = 1;
  while (1)
  {
    int v24 = v23;
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v20);
    int v26 = sub_10002E40C(2, ValueAtIndex, &v38, 4uLL);
    if (v26) {
      break;
    }
    if (v21)
    {
      uint64_t v27 = v21 + 1;
      int v23 = 2;
      ++v21;
      if (!v20) {
        goto LABEL_30;
      }
      goto LABEL_27;
    }

    *(_OWORD *)((char *)v40 + 8) = v39;
    int v23 = 2;
    uint64_t v27 = 1LL;
    uint64_t v21 = 1LL;
    if (v20) {
      goto LABEL_27;
    }
LABEL_30:
    if (v26 && v19)
    {
      CFIndex v28 = v22 - 1;
    }

    else
    {
      if (v26 || v19)
      {
        CFArrayAppendValue(theArray, ValueAtIndex);
        goto LABEL_38;
      }

      CFIndex v28 = v21 - 1;
    }

    CFArrayInsertValueAtIndex(theArray, v28, ValueAtIndex);
LABEL_38:
    if (Count == ++v20)
    {
      a1 = v35;
      a5 = v33;
      a4 = v34;
      a7 = v32;
      BOOL v15 = v30;
      LOBYTE(a6) = v31;
      uint64_t v18 = theArray;
      goto LABEL_42;
    }
  }

  if (v22)
  {
    uint64_t v27 = v22 + 1;
    int v23 = 1;
    ++v22;
    if (!v20) {
      goto LABEL_30;
    }
  }

  else
  {
    DWORD1(v4pthread_attr_setscope(&v4, 1) = v38;
    uint64_t v27 = 1LL;
    uint64_t v22 = 1LL;
    int v23 = 1;
    if (!v20) {
      goto LABEL_30;
    }
  }

const void *sub_10003C95C(const void *a1, const void *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1) {
    return 0LL;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  unsigned int Value = CFDictionaryGetValue((CFDictionaryRef)a1, a2);
  CFTypeID v6 = CFArrayGetTypeID();
  if (!Value) {
    return 0LL;
  }
  if (CFGetTypeID(Value) == v6) {
    return Value;
  }
  return 0LL;
}

void sub_10003CA08( __CFDictionary *a1, void *key, const __CFDictionary *a3, CFDictionaryRef theDict, char a5, int a6)
{
  if (theDict && (Value = (const __CFArray *)CFDictionaryGetValue(theDict, key), CFTypeID TypeID = CFArrayGetTypeID(), Value))
  {
    if (CFGetTypeID(Value) == TypeID) {
      os_log_t v13 = Value;
    }
    else {
      os_log_t v13 = 0LL;
    }
    if (!a3) {
      goto LABEL_13;
    }
  }

  else
  {
    os_log_t v13 = 0LL;
    if (!a3)
    {
LABEL_13:
      BOOL v16 = 0LL;
      goto LABEL_14;
    }
  }

  uint64_t v14 = (const __CFArray *)CFDictionaryGetValue(a3, key);
  CFTypeID v15 = CFArrayGetTypeID();
  if (!v14) {
    goto LABEL_13;
  }
  if (CFGetTypeID(v14) == v15) {
    BOOL v16 = v14;
  }
  else {
    BOOL v16 = 0LL;
  }
LABEL_14:
  if ((unint64_t)v13 | (unint64_t)v16)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    if (v13)
    {
      CFIndex Count = CFArrayGetCount(v13);
      if (Count >= 1)
      {
        CFIndex v19 = Count;
        for (CFIndex i = 0LL; i != v19; ++i)
        {
          ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v13, i);
          CFMutableStringRef v22 = sub_10003D104(ValueAtIndex, a5);
          if (v22)
          {
            CFMutableStringRef v23 = v22;
            CFArrayAppendValue(Mutable, v22);
            CFRelease(v23);
          }
        }
      }
    }

    if (v16 && (!v13 || dword_100079C90))
    {
      CFIndex v24 = CFArrayGetCount(Mutable);
      CFIndex v25 = CFArrayGetCount(v16);
      if (v25 >= 1)
      {
        CFIndex v26 = v25;
        for (CFIndex j = 0LL; j != v26; ++j)
        {
          CFIndex v28 = (__CFString *)CFArrayGetValueAtIndex(v16, j);
          CFMutableStringRef v29 = sub_10003D104(v28, a5);
          if (v29)
          {
            CFMutableStringRef v30 = v29;
            if (a6 || (v31.location = 0LL, v31.length = v24, !CFArrayContainsValue(Mutable, v31, v29))) {
              CFArrayAppendValue(Mutable, v30);
            }
            CFRelease(v30);
          }
        }
      }
    }

    if (CFArrayGetCount(Mutable) >= 1) {
      CFDictionarySetValue(a1, key, Mutable);
    }
    CFRelease(Mutable);
  }

void sub_10003CC64(const __CFArray *a1, char a2, __CFArray *a3, uint64_t a4)
{
  uint64_t v39 = a4;
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v9 = Count;
    CFIndex v10 = 0LL;
    p_base_props = &QoSMarkingController__classData.base_props;
    *(void *)&__int128 v8 = 138412290LL;
    __int128 v37 = v8;
    *((void *)&v12 + pthread_attr_setscope(&v4, 1) = 0x100000000000000LL;
    int32x4_t v40 = (int32x4_t)xmmword_1000657D0;
    *(void *)&__int128 v12 = 136315138LL;
    __int128 v36 = v12;
    CFIndex v38 = Count;
    do
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v10);
      if (!ValueAtIndex) {
        sub_100061D60();
      }
      CFStringRef v14 = ValueAtIndex;
      if (sub_10002E40C(2, ValueAtIndex, &v41, 4uLL))
      {
        if ((a2 & 1) != 0 || v41 == 16777343) {
          goto LABEL_32;
        }
        os_log_t v15 = (os_log_t)p_base_props[399];
        if (!v15)
        {
          os_log_t v15 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          p_base_props[399] = (__objc2_prop_list *)v15;
        }

        uint64_t v16 = _SC_syslog_os_log_mapping(6LL);
        uint64_t v17 = _os_log_pack_size(26LL);
        uint64_t v18 = (char *)&v36 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFIndex v19 = __error();
        uint64_t v20 = _os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "no IPv4 connectivity, ignoring DNS server address %d.%d.%d.%d",  (_DWORD)v36,  DWORD2(v36),  (_DWORD)v37,  DWORD2(v37));
        int v21 = v41;
        int v22 = BYTE1(v41);
        int v23 = BYTE2(v41);
        int v24 = HIBYTE(v41);
        *(_DWORD *)uint64_t v20 = 67109888;
        *(_DWORD *)(v20 + 4) = v21;
        *(_WORD *)(v20 + 8) = 1024;
        *(_DWORD *)(v20 + 1sub_10000F430((uint64_t)__str, 0) = v22;
        *(_WORD *)(v20 + 14) = 1024;
        *(_DWORD *)(v20 + 16) = v23;
        *(_WORD *)(v20 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = 1024;
        *(_DWORD *)(v20 + 2pthread_attr_setdetachstate(&v4, 2) = v24;
      }

      else
      {
        if (!sub_10002E40C(30, v14, &v43, 0x10uLL))
        {
          os_log_t v29 = (os_log_t)p_base_props[399];
          if (!v29)
          {
            os_log_t v29 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            p_base_props[399] = (__objc2_prop_list *)v29;
          }

          uint64_t v30 = _SC_syslog_os_log_mapping(5LL);
          if (__SC_log_enabled(5LL, v29, v30))
          {
            uint64_t v31 = _os_log_pack_size(12LL);
            uint64_t v32 = (char *)&v36 - ((__chkstk_darwin(v31) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            int v33 = __error();
            uint64_t v34 = _os_log_pack_fill( v32,  v31,  *v33,  &_mh_execute_header,  "ignoring bad DNS server address '%@'");
            *(_DWORD *)uint64_t v34 = v37;
            *(void *)(v34 + 4) = v14;
            int v35 = v32;
            p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
            __SC_log_send(5LL, v29, v30, v35);
            CFIndex v9 = v38;
          }

          goto LABEL_34;
        }

        if ((a2 & 2) != 0)
        {
          if (v43.u8[0] == 255)
          {
            if ((v43.i8[1] & 0xF0) != 0x30 && v39 && (v43.i8[1] & 0xF) == 2) {
              goto LABEL_31;
            }
LABEL_32:
            CFRetain(v14);
          }

          else
          {
            if (v43.u8[0] != 254 || !v39 || (v43.i8[1] & 0xC0) != 0x80) {
              goto LABEL_32;
            }
LABEL_31:
            if (CFStringFind(v14, @"%", 0LL).location != -1) {
              goto LABEL_32;
            }
            CFStringRef v14 = CFStringCreateWithFormat(0LL, 0LL, @"%@%%%@", v14, v39);
          }

          CFArrayAppendValue(a3, v14);
          CFRelease(v14);
          goto LABEL_34;
        }

        os_log_t v15 = (os_log_t)p_base_props[399];
        if (!v15)
        {
          os_log_t v15 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          p_base_props[399] = (__objc2_prop_list *)v15;
        }

        uint64_t v16 = _SC_syslog_os_log_mapping(6LL);
        uint64_t v25 = _os_log_pack_size(12LL);
        uint64_t v18 = (char *)&v36 - ((__chkstk_darwin(v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFIndex v26 = __error();
        uint64_t v27 = _os_log_pack_fill( v18,  v25,  *v26,  &_mh_execute_header,  "no IPv6 connectivity, ignoring DNS server address %s",  (const char *)v36);
        CFIndex v28 = inet_ntop(30, &v43, v42, 0x2Eu);
        *(_DWORD *)uint64_t v27 = v36;
        *(void *)(v27 + 4) = v28;
      }

      __SC_log_send(6LL, v15, v16, v18);
      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
LABEL_34:
      ++v10;
    }

    while (v9 != v10);
  }

CFMutableStringRef sub_10003D104(__CFString *a1, char a2)
{
  MutableCFDictionaryRef Copy = a1;
  if (a1)
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (CFGetTypeID(MutableCopy) == TypeID)
    {
      MutableCFDictionaryRef Copy = CFStringCreateMutableCopy(0LL, 0LL, MutableCopy);
      CFStringTrimWhitespace(MutableCopy);
      if ((a2 & 1) == 0 && !CFStringGetLength(MutableCopy))
      {
        CFRelease(MutableCopy);
        return 0LL;
      }
    }

    else
    {
      CFRetain(MutableCopy);
    }
  }

  return MutableCopy;
}

void sub_10003D1C0(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

CFStringRef sub_10003D214()
{
  uint64_t v0 = CFURLCreateWithString(0LL, @"http://wpad/wpad.dat", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFStringRef v2 = CFURLGetString(v0);
  CFStringRef v3 = v2;
  if (v2) {
    CFRetain(v2);
  }
  CFRelease(v1);
  return v3;
}

uint64_t sub_10003D2A4(uint64_t a1, CFDictionaryRef theDict, uint64_t a3)
{
  CFTypeID v6 = (const void **)&kSCEntNetIPv4;
  if (*(_DWORD *)a3 != 2) {
    CFTypeID v6 = (const void **)&kSCEntNetIPv6;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, *v6);
  if (result)
  {
    __int128 v8 = (const __CFDictionary *)result;
    CFIndex v9 = sub_100030AC8((const __CFDictionary *)result);
    uint64_t result = (uint64_t)CFDictionaryGetValue(v8, @"Service");
    if (v9 && result != 0)
    {
      uint64_t v11 = (const __CFDictionary *)result;
      uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, kSCPropInterfaceName);
      if (result)
      {
        __int128 v12 = (const __CFString *)result;
        uint64_t result = CFEqual((CFTypeRef)result, @"lo0");
        if (!(_DWORD)result)
        {
          __int128 v41 = 0u;
          memset(v40, 0, sizeof(v40));
          __int128 v38 = 0u;
          __int128 v39 = 0u;
          __int128 v37 = 0u;
          if (CFStringGetCString(v12, (char *)&v38, 16LL, 0x8000100u))
          {
            *(void *)&__int128 v37 = a1;
            if ((*((_WORD *)v9 + 4) & 2) == 0) {
              DWORD1(v40[0]) = 1;
            }
            unsigned int Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, kSCEntNetService);
            uint64_t v14 = sub_10003D6A4(Value, *(const __CFArray **)(a3 + 8), *(void *)(a3 + 16), (const void *)v37);
            int v15 = *((_DWORD *)v9 + 6);
            if (*(_DWORD *)a3 == 2) {
              HIDWORD(v40[0]) = *((_DWORD *)v9 + 11);
            }
            else {
              *(_OWORD *)((char *)v40 + 1pthread_attr_setdetachstate(&v4, 2) = *((_OWORD *)v9 + 4);
            }
            unsigned int v22 = v15 & 0xFF000000;
            DWORD2(v39) = v22 | v14 & 0xFFFFFF;
            if (!CFStringHasPrefix(v12, @"stf") && !CFStringHasPrefix(v12, @"gif"))
            {
              if (sub_10003D898((void *)v37))
              {
                int v24 = 0;
                BOOL v23 = 1;
                goto LABEL_26;
              }

              if (*(_DWORD *)a3 == 2) {
                int v33 = 30;
              }
              else {
                int v33 = 2;
              }
              if (!sub_10003D904(theDict, v33, &v35) || v35 == v15)
              {
                int v24 = 0;
                BOOL v23 = byte_100079D58 == 0;
                goto LABEL_26;
              }
            }

            BOOL v23 = 0;
            int v24 = 1;
LABEL_26:
            *((void *)&v37 + pthread_attr_setscope(&v4, 1) = v12;
            uint64_t v25 = (void *)sub_100028D68((uint64_t)&v38);
            HIDWORD(v39) = v24;
            LODWORD(v40[0]) = v23;
            LODWORD(v39) = (_DWORD)v25;
            DWORD1(v39) = sub_1000288B8((uint64_t)&v38, v25);
            CFIndex v26 = *(__CFDictionary **)(a3 + 32);
            uint64_t v27 = (const void *)v37;
            int valuePtr = DWORD2(v39);
            CFNumberRef v28 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
            if (v28)
            {
              CFNumberRef v29 = v28;
              CFDictionarySetValue(v26, v27, v28);
              CFRelease(v29);
            }

            uint64_t v30 = CFDictionaryGetValue(v11, kSCPropInterfaceName);
            CFTypeID TypeID = CFStringGetTypeID();
            else {
              uint64_t v32 = 0LL;
            }
            *((void *)&v41 + pthread_attr_setscope(&v4, 1) = v32;
            return (uint64_t)sub_10003D99C(*(int **)(a3 + 24), (uint64_t)&v37);
          }

          os_log_t v16 = (os_log_t)qword_100079C78;
          if (!qword_100079C78)
          {
            os_log_t v16 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            qword_100079C78 = (uint64_t)v16;
          }

          uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
          uint64_t result = __SC_log_enabled(5LL, v16, v17);
          if ((_DWORD)result)
          {
            uint64_t v18 = _os_log_pack_size(22LL);
            CFIndex v19 = (char *)&v34 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v20 = __error();
            uint64_t v21 = _os_log_pack_fill( v19,  v18,  *v20,  &_mh_execute_header,  "%s: failed to convert %@ to string\n");
            *(_DWORD *)uint64_t v21 = 136315394;
            *(void *)(v21 + 4) = "elect_ip";
            *(_WORD *)(v21 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
            *(void *)(v21 + 14) = v12;
            return __SC_log_send(5LL, v16, v17, v19);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_10003D6A4(const __CFDictionary *a1, const __CFArray *a2, uint64_t a3, const void *a4)
{
  HIDWORD(vsnprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = 0xFFFFFF;
  __int16 v7 = sub_10003847C(a1, (uint64_t)a4, (uint64_t)&stru_100073D90, (_DWORD *)&v20 + 1);
  if (v7)
  {
    __int128 v8 = v7;
    HIDWORD(v20) += a3;
    os_log_t v9 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v9 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v9;
    }

    uint64_t v10 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v9, v10))
    {
      uint64_t v11 = _os_log_pack_size(28LL);
      __int128 v12 = (char *)&v20 - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v13 = __error();
      uint64_t v14 = _os_log_pack_fill( v12,  v11,  *v13,  &_mh_execute_header,  "%@ specifies ServiceIndex %@, effective index is %u");
      int v15 = HIDWORD(v20);
      *(_DWORD *)uint64_t v14 = 138412802;
      *(void *)(v14 + 4) = a4;
      *(_WORD *)(v14 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v14 + 14) = v8;
      *(_WORD *)(v14 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v14 + 24) = v15;
      __SC_log_send(6LL, v9, v10, v12);
    }
  }

  else if (a3 >= 1 && a2 && a4)
  {
    CFIndex v16 = 0LL;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v16);
      CFTypeID TypeID = CFStringGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == TypeID && CFEqual(a4, ValueAtIndex)) {
          break;
        }
      }

      if (a3 == ++v16) {
        return HIDWORD(v20);
      }
    }

    HIDWORD(vsnprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v16 + 1;
  }

  return HIDWORD(v20);
}

CFDictionaryRef sub_10003D898(void *a1)
{
  uint64_t result = (const __CFDictionary *)sub_10002E790(a1, kSCEntNetService);
  if (result) {
    return CFDictionaryContainsKey(result, @"IPIsCoupled" != 0);
  }
  return result;
}

uint64_t sub_10003D904(const __CFDictionary *a1, int a2, _DWORD *a3)
{
  size_t v4 = (const void **)&kSCEntNetIPv6;
  if (a2 == 2) {
    size_t v4 = (const void **)&kSCEntNetIPv4;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, *v4);
  if (result)
  {
    uint64_t result = (uint64_t)sub_100030AC8((const __CFDictionary *)result);
    if (result)
    {
      if ((*(_WORD *)(result + 8) & 2) != 0)
      {
        *a3 = *(_DWORD *)(result + 24);
        return 1LL;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

CFTypeRef sub_10003D99C(int *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  if ((_DWORD)v2 == a1[2])
  {
    os_log_t v3 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v3 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v3;
    }

    uint64_t v4 = _SC_syslog_os_log_mapping(5LL);
    CFTypeRef result = (CFTypeRef)__SC_log_enabled(5LL, v3, v4);
    if ((_DWORD)result)
    {
      uint64_t v6 = _os_log_pack_size(2LL);
      __int16 v7 = (char *)&v17 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __int128 v8 = __error();
      *(_WORD *)_os_log_pack_fill(v7, v6, *v8, &_mh_execute_header, "can't fit another candidate") = 0;
      return (CFTypeRef)__SC_log_send(5LL, v3, v4, v7);
    }
  }

  else
  {
    if ((int)v2 < 1)
    {
LABEL_10:
      uint64_t v12 = (uint64_t)&a1[28 * (int)v2 + 4];
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = a1 + 14;
      while (*(_DWORD *)(a2 + 40) >= *v11)
      {
        ++v10;
        v11 += 28;
        if (v2 == v10) {
          goto LABEL_10;
        }
      }

      if (v10 < v2)
      {
        os_log_t v13 = &a1[28 * (int)v2 + 4];
        do
        {
          --v2;
          __int128 v14 = *((_OWORD *)v13 - 2);
          *((_OWORD *)v13 + 4) = *((_OWORD *)v13 - 3);
          *((_OWORD *)v13 + 5) = v14;
          *((_OWORD *)v13 + 6) = *((_OWORD *)v13 - 1);
          __int128 v15 = *((_OWORD *)v13 - 6);
          *(_OWORD *)os_log_t v13 = *((_OWORD *)v13 - 7);
          *((_OWORD *)v13 + pthread_attr_setscope(&v4, 1) = v15;
          __int128 v16 = *((_OWORD *)v13 - 4);
          *((_OWORD *)v13 + pthread_attr_setdetachstate(&v4, 2) = *((_OWORD *)v13 - 5);
          *((_OWORD *)v13 + 3) = v16;
          v13 -= 28;
        }

        while (v2 > v10);
      }

      uint64_t v12 = (uint64_t)(v11 - 10);
    }

    CFTypeRef result = sub_10003DB64(v12, (__int128 *)a2);
    ++a1[1];
  }

  return result;
}

CFTypeRef sub_10003DB64(uint64_t a1, __int128 *a2)
{
  __int128 v3 = a2[2];
  __int128 v4 = *a2;
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 3pthread_attr_setdetachstate(&v4, 2) = v3;
  *(_OWORD *)a1 = v4;
  __int128 v5 = a2[3];
  __int128 v6 = a2[4];
  __int128 v7 = a2[6];
  *(_OWORD *)(a1 + 8sub_10000F430((uint64_t)__str, 0) = a2[5];
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  __int128 v8 = *(const void **)a1;
  if (v8) {
    CFRetain(v8);
  }
  os_log_t v9 = *(const void **)(a1 + 8);
  if (v9) {
    CFRetain(v9);
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 104);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_10003DC1C(uint64_t a1, const __CFDictionary *a2, int a3)
{
  if (!a1) {
    sub_100061D88();
  }
  if (!a2) {
    sub_100061DB0();
  }
  __int128 v5 = *(__CFString **)a1;
  __int128 v6 = (const void **)&kSCEntNetIPv4;
  int valuePtr = 0;
  if (a3 != 2) {
    __int128 v6 = (const void **)&kSCEntNetIPv6;
  }
  __int128 v7 = (const __CFDictionary *)sub_10002E790(v5, *v6);
  if (!v7) {
    goto LABEL_11;
  }
  unsigned int Value = (const __CFDictionary *)CFDictionaryGetValue(v7, @"Service");
  if (!Value)
  {
LABEL_12:
    int v13 = 2;
    goto LABEL_13;
  }

  uint64_t v9 = 0LL;
  while (1)
  {
    uint64_t v10 = **(const void ***)((char *)&off_100072968 + v9);
    uint64_t v11 = sub_10002E790(v5, v10);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (v11)
    {
      if (CFGetTypeID(v11) == TypeID) {
        break;
      }
    }

    v9 += 16LL;
    if (v9 == 48) {
      goto LABEL_11;
    }
  }

  if (!v10)
  {
LABEL_11:
    unsigned int Value = 0LL;
    goto LABEL_12;
  }

  unsigned int Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"ServerAddress");
  CFTypeID v16 = CFStringGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == v16) {
      CFRetain(Value);
    }
    else {
      unsigned int Value = 0LL;
    }
  }

  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)v11, kSCPropNetVPNStatus, (const void **)buffer)
    || (CFNumberRef v17 = *(CFNumberRef *)buffer, v18 = CFNumberGetTypeID(), !v17)
    || CFGetTypeID(v17) != v18
    || !CFNumberGetValue(*(CFNumberRef *)buffer, kCFNumberIntType, &valuePtr))
  {
    int v13 = 3;
    goto LABEL_13;
  }

  uint64_t v19 = valuePtr;
  if (CFEqual(v10, kSCEntNetPPP))
  {
    if ((int)v19 <= 7 || (int v13 = 3, (_DWORD)v19 != 8) && (_DWORD)v19 != 12) {
LABEL_42:
    }
      int v13 = 7;
  }

  else if (CFEqual(v10, kSCEntNetIPSec))
  {
    if ((_DWORD)v19 == 6) {
      int v13 = 3;
    }
    else {
      int v13 = 7;
    }
  }

  else
  {
    if (!CFEqual(v10, kSCEntNetVPN))
    {
      int v13 = 3;
      goto LABEL_43;
    }

    int v13 = dword_100065830[v19];
  }

double sub_10003DFF4(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a1)
  {
    if (a4 || *(_BYTE *)(a3 + 43) == 3) {
      char v8 = 8;
    }
    else {
      char v8 = 0;
    }
    if (a5) {
      char v9 = v8 | 0x20;
    }
    else {
      char v9 = v8;
    }
    if ((_DWORD)a2 == 2)
    {
      uint64_t v10 = (const __CFDictionary *)sub_10002E790(*(void **)a3, kSCEntNetIPv4);
      if (v10)
      {
        *(void *)value.count = 0LL;
        uint64_t v11 = (const __CFDictionary *)CFDictionaryGetValue(v10, @"Service");
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (v11)
        {
          if (CFGetTypeID(v11) == TypeID)
          {
            if (CFDictionaryGetValueIfPresent(v11, kSCPropNetIPv4CLAT46, (const void **)&value))
            {
              int v13 = *(const void **)value.count;
              CFTypeID v14 = CFBooleanGetTypeID();
              if (v13)
              {
                if (CFGetTypeID(v13) == v14 && CFBooleanGetValue(*(CFBooleanRef *)value.count)) {
                  v9 |= 0x40u;
                }
              }
            }
          }
        }
      }
    }

    CFStringGetCString(*(CFStringRef *)(a3 + 8), buffer, 16LL, 0x600u);
    uint64_t v15 = sub_10002DA9C( a1,  buffer,  a2,  v9,  *(_DWORD *)(a3 + 40),  (_OWORD *)(a3 + 60),  (unsigned __int8 *)(a3 + 76),  *(_DWORD *)(a3 + 56));
    if (v15)
    {
      CFNumberRef v17 = *(const __CFString **)(a3 + 104);
      if (v17)
      {
        uint64_t v18 = v15;
        ExternalRepresentation = CFStringCreateExternalRepresentation(0LL, v17, 0x8000100u, 0);
        CC_SHA256_Init(&value);
        BytePtr = CFDataGetBytePtr(ExternalRepresentation);
        CC_LONG Length = CFDataGetLength(ExternalRepresentation);
        CC_SHA256_Update(&value, BytePtr, Length);
        CC_SHA256_Final((unsigned __int8 *)&v22, &value);
        CFRelease(ExternalRepresentation);
        double result = *(double *)&v22;
        *(_OWORD *)(v18 + 9pthread_attr_setdetachstate(&v4, 2) = v22;
        *(_DWORD *)(v18 + 108) = v23;
        *(void *)(v18 + 16) |= 0x10uLL;
      }
    }
  }

  return result;
}

BOOL sub_10003E200(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16))
  {
    return 0LL;
  }

  if (*(void *)(a1 + 20) != *(void *)(a2 + 20) || *(void *)(a1 + 28) != *(void *)(a2 + 28)) {
    return 0LL;
  }
  if (*(void *)(a1 + 52) != *(void *)(a2 + 52) || *(void *)(a1 + 60) != *(void *)(a2 + 60)) {
    return 0LL;
  }
  return *(void *)(a1 + 36) == *(void *)(a2 + 36) && *(void *)(a1 + 44) == *(void *)(a2 + 44);
}

uint64_t sub_10003E2D0(uint64_t a1, char a2, int __fd)
{
  __int16 v3 = *(_WORD *)(a1 + 16);
  if ((v3 & 0x18) != 0) {
    return 1001LL;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 4);
  if (!v6)
  {
    sub_10003E6C4(5LL, (unsigned int *)a1, (uint64_t)"no interface specified");
    return 6LL;
  }

  if (__fd == -1) {
    return 9LL;
  }
  __int128 v17 = 0u;
  memset(v18, 0, sizeof(v18));
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  BYTE3(v13) = a2;
  BYTE2(v13) = 5;
  DWORD1(v14) = ++dword_100079CBC;
  HIDWORD(v13) = 19;
  char v8 = (_OWORD *)(a1 + 52);
  if (*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 56) || *(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 64))
  {
    int v9 = 51;
    HIDWORD(v13) = 51;
    if ((v3 & 4) == 0) {
      goto LABEL_11;
    }
  }

  else
  {
    int v9 = 19;
    if ((v3 & 4) == 0)
    {
LABEL_11:
      v9 |= 4u;
      HIDWORD(v13) = v9;
      if ((v3 & 2) != 0) {
        int v10 = 2051;
      }
      else {
        int v10 = 2305;
      }
      goto LABEL_19;
    }
  }

  int v10 = 2053;
  DWORD2(v13) = 2053;
  if ((v3 & 2) != 0)
  {
    int v10 = 2055;
LABEL_19:
    DWORD2(v13) = v10;
  }

  if ((v3 & 1) != 0)
  {
    WORD2(v13) = v6;
    v10 |= 0x1000000u;
    DWORD2(v13) = v10;
  }

  WORD6(v18[0]) = 7708;
  *(_OWORD *)((char *)&v18[1] + 4) = *(_OWORD *)(a1 + 20);
  if (BYTE4(v18[1]) == 254 && (BYTE5(v18[1]) & 0xC0) == 0x80) {
    WORD3(v18[1]) = bswap32(v6) >> 16;
  }
  if ((v10 & 2) != 0)
  {
    WORD4(v18[2]) = 7708;
    v18[3] = *(_OWORD *)(a1 + 36);
    if (LOBYTE(v18[3]) == 254 && (BYTE1(v18[3]) & 0xC0) == 0x80) {
      WORD1(v18[3]) = bswap32(v6) >> 16;
    }
    uint64_t v11 = (char *)&v18[4] + 4;
  }

  else
  {
    WORD4(v18[2]) = 4628;
    WORD5(v18[2]) = v6;
    uint64_t v11 = (char *)&v18[3] + 12;
  }

  if ((v9 & 4) != 0)
  {
    uint64_t v12 = v11 + 8;
    *(_WORD *)uint64_t v11 = 7708;
    v11 += 28;
    sub_10003BF24(v12, *(_DWORD *)a1);
    LOBYTE(v9) = BYTE12(v13);
  }

  if ((v9 & 0x10) != 0)
  {
    *(_WORD *)uint64_t v11 = 4628;
    *((_WORD *)v11 + pthread_attr_setscope(&v4, 1) = v6;
    v11 += 20;
  }

  if ((v9 & 0x20) != 0)
  {
    *(_WORD *)uint64_t v11 = 7708;
    *(_OWORD *)(v11 + 8) = *v8;
    LODWORD(v1pthread_attr_setscope(&v4, 1) = (_DWORD)v11 + 28;
  }

  LOWORD(v13) = (_WORD)v11 - ((unsigned __int16)v18 + 12) + 92;
  else {
    return 0LL;
  }
}

uint64_t sub_10003E560(uint64_t a1)
{
  return a1 + 36;
}

__n128 sub_10003E5A8(uint64_t a1, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)(a1 + 36) = *a2;
  return result;
}

uint64_t sub_10003E5F4(uint64_t a1)
{
  return a1 + 20;
}

BOOL sub_10003E63C(uint64_t a1, int8x16_t *a2)
{
  int8x16_t v6 = *a2;
  sub_10003BF24(&__b, *(_DWORD *)a1);
  int8x16_t v3 = vandq_s8(v6, __b);
  return v3.i64[0] == *(void *)(a1 + 20) && v3.i64[1] == *(void *)(a1 + 28);
}

void sub_10003E6C4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0LL, 0LL);
  sub_100038C40(a2, Mutable);
  os_log_t v7 = (os_log_t)qword_100079C78;
  if (a3)
  {
    if (!qword_100079C78)
    {
      os_log_t v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v7;
    }

    uint64_t v8 = _SC_syslog_os_log_mapping(a1);
    if (__SC_log_enabled(a1, v7, v8))
    {
      uint64_t v9 = _os_log_pack_size(22LL);
      int v10 = (char *)&v22 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v11 = __error();
      uint64_t v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "%s: %@");
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)(v12 + 4) = a3;
      *(_WORD *)(v12 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v12 + 14) = Mutable;
      uint64_t v13 = a1;
      os_log_t v14 = v7;
      uint64_t v15 = v8;
      __int128 v16 = v10;
LABEL_10:
      __SC_log_send(v13, v14, v15, v16);
    }
  }

  else
  {
    if (!qword_100079C78)
    {
      os_log_t v7 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v7;
    }

    uint64_t v17 = _SC_syslog_os_log_mapping(a1);
    if (__SC_log_enabled(a1, v7, v17))
    {
      uint64_t v18 = _os_log_pack_size(12LL);
      uint64_t v19 = (char *)&v22 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v20 = __error();
      uint64_t v21 = _os_log_pack_fill(v19, v18, *v20, &_mh_execute_header, "%@");
      *(_DWORD *)uint64_t v21 = 138412290;
      *(void *)(v21 + 4) = Mutable;
      uint64_t v13 = a1;
      os_log_t v14 = v7;
      uint64_t v15 = v17;
      __int128 v16 = v19;
      goto LABEL_10;
    }
  }

  CFRelease(Mutable);
}

__CFString *sub_10003E8EC(unsigned int *a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0LL, 0LL);
  sub_100038C40(a1, Mutable);
  return Mutable;
}

void sub_10003E95C(unsigned int *a1)
{
  uint64_t v1 = sub_100038B54(a1);
  os_log_t v2 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    os_log_t v2 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v2;
  }

  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(12LL);
    __int128 v5 = (char *)&v8 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    int8x16_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%@");
    *(_DWORD *)uint64_t v7 = 138412290;
    *(void *)(v7 + 4) = v1;
    __SC_log_send(7LL, v2, v3, v5);
  }

  CFRelease(v1);
}

void sub_10003EA90(const __CFString *a1, uint64_t a2, const __CFArray *a3)
{
  if (CFStringHasPrefix(a1, kSCDynamicStoreDomainSetup))
  {
    uint64_t v5 = 0LL;
    for (char i = 1; ; char i = 0)
    {
      char v7 = i;
      if (CFStringHasSuffix(a1, *(CFStringRef *)*(&off_100072998 + v5))) {
        break;
      }
      uint64_t v5 = 1LL;
      if ((v7 & 1) == 0) {
        return;
      }
    }

    sub_100030F28(a3, a1);
  }

uint64_t sub_10003EB68(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int valuePtr = a3;
  unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    return valuePtr;
  }

  return v3;
}

uint64_t sub_10003EC00(unsigned int *a1)
{
  os_log_t v2 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    os_log_t v2 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v2;
  }

  uint64_t v3 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(22LL);
    uint64_t v5 = (char *)v52 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    int8x16_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "Network information (generation %llu size=%lu)",  v52[0],  v52[1]);
    uint64_t generation = nwi_state_get_generation(a1);
    uint64_t v9 = 4LL * a1[1] + 224LL * a1[1] + 40;
    *(_DWORD *)uint64_t v7 = 134218240;
    *(void *)(v7 + 4) = generation;
    *(_WORD *)(v7 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
    *(void *)(v7 + 14) = v9;
    __SC_log_send(6LL, v2, v3, v5);
  }

  os_log_t v10 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    os_log_t v10 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v10;
  }

  uint64_t v11 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v10, v11))
  {
    uint64_t v12 = _os_log_pack_size(12LL);
    uint64_t v13 = (char *)v52 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v14 = __error();
    uint64_t v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%s", v52[0]);
    *(_DWORD *)uint64_t v15 = 136315138;
    *(void *)(v15 + 4) = "IPv4 network interface information";
    __SC_log_send(6LL, v10, v11, v13);
  }

  if ((int)a1[2] < 1)
  {
    os_log_t v18 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v18 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v18;
    }

    uint64_t v19 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v18, v19))
    {
      uint64_t v20 = _os_log_pack_size(12LL);
      uint64_t v21 = (char *)v52 - ((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v22 = __error();
      uint64_t v23 = _os_log_pack_fill(v21, v20, *v22, &_mh_execute_header, "%s", v52[0]);
      *(_DWORD *)uint64_t v23 = 136315138;
      *(void *)(v23 + 4) = "   No IPv4 states found";
      __SC_log_send(6LL, v18, v19, v21);
    }
  }

  else
  {
    signed int v16 = 0;
    uint64_t v17 = (uint64_t)(a1 + 10);
    do
    {
      sub_10003F2AC(v17);
      ++v16;
      v17 += 112LL;
    }

    while (v16 < (int)a1[2]);
  }

  sub_10003FC94();
  os_log_t v24 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    os_log_t v24 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v24;
  }

  uint64_t v25 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v24, v25))
  {
    uint64_t v26 = _os_log_pack_size(12LL);
    uint64_t v27 = (char *)v52 - ((__chkstk_darwin(v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFNumberRef v28 = __error();
    uint64_t v29 = _os_log_pack_fill(v27, v26, *v28, &_mh_execute_header, "%s", v52[0]);
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)(v29 + 4) = "IPv6 network interface information";
    __SC_log_send(6LL, v24, v25, v27);
  }

  if ((int)a1[3] < 1)
  {
    os_log_t v32 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v32 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v32;
    }

    uint64_t v33 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v32, v33))
    {
      uint64_t v34 = _os_log_pack_size(12LL);
      int v35 = (char *)v52 - ((__chkstk_darwin(v34) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __int128 v36 = __error();
      uint64_t v37 = _os_log_pack_fill(v35, v34, *v36, &_mh_execute_header, "%s", v52[0]);
      *(_DWORD *)uint64_t v37 = 136315138;
      *(void *)(v37 + 4) = "   No IPv6 states found\n";
      __SC_log_send(6LL, v32, v33, v35);
    }
  }

  else
  {
    signed int v30 = 0;
    uint64_t v31 = (uint64_t)&a1[28 * a1[1] + 10];
    do
    {
      sub_10003F2AC(v31);
      ++v30;
      v31 += 112LL;
    }

    while (v30 < (int)a1[3]);
  }

  sub_10003FC94();
  uint64_t result = nwi_state_get_interface_names(a1, 0LL, 0LL);
  if ((_DWORD)result)
  {
    __chkstk_darwin(result);
    int32x4_t v40 = (char *)v52 - v39;
    uint64_t result = nwi_state_get_interface_names(a1, (char *)v52 - v39, v41);
    if ((_DWORD)result)
    {
      unsigned int v42 = result;
      size_t v43 = (17 * result);
      __chkstk_darwin(result);
      os_log_t v44 = (char *)v52 - ((v43 + 15) & 0x1FFFFFFF0LL);
      bzero(v44, v43);
      uint64_t v45 = 0LL;
      do
      {
        if (v45) {
          strlcat((char *)v52 - ((v43 + 15) & 0x1FFFFFFF0LL), " ", v43);
        }
        strlcat((char *)v52 - ((v43 + 15) & 0x1FFFFFFF0LL), *(const char **)&v40[v45], v43);
        v45 += 8LL;
      }

      while (8LL * v42 != v45);
      os_log_t v46 = (os_log_t)qword_100079C78;
      if (!qword_100079C78)
      {
        os_log_t v46 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_100079C78 = (uint64_t)v46;
      }

      uint64_t v47 = _SC_syslog_os_log_mapping(6LL);
      uint64_t result = __SC_log_enabled(6LL, v46, v47);
      if ((_DWORD)result)
      {
        uint64_t v48 = _os_log_pack_size(12LL);
        uint64_t v49 = (char *)v52 - ((__chkstk_darwin(v48) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v50 = __error();
        uint64_t v51 = _os_log_pack_fill(v49, v48, *v50, &_mh_execute_header, "Network interfaces: %s", v52[0]);
        *(_DWORD *)uint64_t v51 = 136315138;
        *(void *)(v51 + 4) = v44;
        return __SC_log_send(6LL, v46, v47, v49);
      }
    }
  }

  return result;
}

uint64_t sub_10003F2AC(uint64_t a1)
{
  uint64_t flags = nwi_ifstate_get_flags();
  uint64_t v3 = *(void *)(a1 + 16) & 0xEFLL;
  unint64_t v4 = v3 | flags & 0xFFFFFFFFFFFFFFEFLL;
  unint64_t v5 = (v3 | flags & 0xEF);
  if (!(v3 | flags & 0xEF))
  {
    v66[0] = 0;
    goto LABEL_31;
  }

  unint64_t v6 = __strlcpy_chk(v66, "(", 99LL, 100LL);
  unint64_t v7 = v6;
  if ((v4 & 1) != 0 && v6 <= 0x62)
  {
    unint64_t v8 = v5;
    if (v6 <= 0x5C)
    {
      unint64_t v7 = __strlcat_chk(v66, "IPv4,", 99LL, 100LL);
      unint64_t v8 = v4 & 0xEE;
    }

    if ((v8 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }

  unint64_t v8 = v5;
  if ((v5 & 2) != 0)
  {
LABEL_7:
    if (v7 <= 0x5C)
    {
      unint64_t v7 = __strlcat_chk(v66, "IPv6,", 99LL, 100LL);
      unint64_t v8 = v8 & 0xED;
    }
  }

uint64_t sub_10003FC94()
{
  reachability_uint64_t flags = nwi_state_get_reachability_flags();
  sub_10003FDC8(reachability_flags, (char *)v8 + 4);
  os_log_t v1 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    os_log_t v1 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v1;
  }

  uint64_t v2 = _SC_syslog_os_log_mapping(6LL);
  uint64_t result = __SC_log_enabled(6LL, v1, v2);
  if ((_DWORD)result)
  {
    uint64_t v4 = _os_log_pack_size(12LL);
    unint64_t v5 = (char *)v8 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    unint64_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "   REACH : flags %s", v8[0]);
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = (char *)v8 + 4;
    return __SC_log_send(6LL, v1, v2, v5);
  }

  return result;
}

unint64_t sub_10003FDC8(unsigned int a1, char *__str)
{
  unint64_t result = snprintf(__str, 0x64uLL, "0x%08x (", a1);
  if (a1 || result > 0x53)
  {
    unint64_t v6 = (int)result;
    unint64_t v5 = (int)result;
    unsigned int v7 = a1;
    if ((a1 & 2) != 0)
    {
      unint64_t v5 = (int)result;
      unsigned int v7 = a1;
      if (result <= 0x57)
      {
        unint64_t result = strlcat(__str, "Reachable,", 0x63uLL);
        unint64_t v5 = result;
        unsigned int v7 = a1 & 0xFFFFFFFD;
      }
    }

    if ((v7 & 1) != 0 && v5 <= 0x4C)
    {
      unint64_t result = strlcat(__str, "Transient Connection,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~1u;
    }

    if ((v7 & 4) != 0 && v5 <= 0x4D)
    {
      unint64_t result = strlcat(__str, "Connection Required,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~4u;
    }

    if ((v7 & 8) != 0 && v5 <= 0x41)
    {
      unint64_t result = strlcat(__str, "Automatic Connection On Traffic,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~8u;
    }

    if ((v7 & 0x20) != 0 && v5 <= 0x42)
    {
      unint64_t result = strlcat(__str, "Automatic Connection On Demand,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~0x20u;
    }

    if ((v7 & 0x10) != 0 && v5 < 0x4C)
    {
      unint64_t result = strlcat(__str, "Intervention Required,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~0x10u;
    }

    if ((v7 & 0x10000) != 0 && v5 < 0x54)
    {
      unint64_t result = strlcat(__str, "Local Address,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~0x10000u;
    }

    if ((v7 & 0x20000) != 0 && v5 <= 0x46)
    {
      unint64_t result = strlcat(__str, "Directly Reachable Address,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~0x20000u;
    }

    if ((v7 & 0x40000) != 0 && v5 <= 0x5C)
    {
      unint64_t result = strlcat(__str, "WWAN,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~0x40000u;
    }

    if (v7)
    {
      if (v5 >= 0x57)
      {
        __str[v6] = 0;
        unint64_t v5 = v6;
        unsigned int v7 = a1;
      }

      unint64_t result = snprintf(&__str[v5], 99 - v5, "0x%08x,", v7);
      v5 += (int)result;
    }
  }

  else
  {
    unint64_t result = strlcat(__str, "Not Reachable,", 0x63uLL);
    unint64_t v5 = result;
  }

  if (v5) {
    __str[v5 - 1] = 41;
  }
  return result;
}

void sub_100040070(uint64_t a1, int a2)
{
  size_t v4 = *(unsigned int *)(a1 + 16);
  LODWORD(v3pthread_attr_setscope(&v4, 1) = v4;
  unint64_t v5 = calloc(v4, 4uLL);
  uint64_t v32 = v5;
  if (v5 && *(int *)(a1 + 16) >= 1)
  {
    unint64_t v6 = v5;
    uint64_t v7 = 0LL;
    uint64_t v8 = a1 + 224LL * *(int *)(a1 + 4) + 40;
    do
    {
      v6[v7] = sub_100028D68(a1 + 112LL * *(int *)(v8 + 4 * v7) + 40);
      ++v7;
    }

    while (v7 < *(int *)(a1 + 16));
  }

  int v9 = ioctl(a2, 0xC01069B2uLL, &v31);
  os_log_t v10 = (os_log_t)qword_100079C78;
  if (v9)
  {
    if (!qword_100079C78)
    {
      os_log_t v10 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v10;
    }

    uint64_t v11 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v10, v11))
    {
      uint64_t v12 = _os_log_pack_size(34LL);
      uint64_t v13 = (char *)&v30 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v14 = __error();
      uint64_t v15 = _os_log_pack_fill( v13,  v12,  *v14,  &_mh_execute_header,  "SIOCSIFORDER for %u(%p) failed on %d: %s",  v30,  v31,  (_DWORD)v32,  v33);
      int v16 = (int)v31;
      os_log_t v17 = v32;
      uint64_t v18 = __error();
      uint64_t v19 = strerror(*v18);
      *(_DWORD *)uint64_t v15 = 67109890;
      *(_DWORD *)(v15 + 4) = v16;
      *(_WORD *)(v15 + 8) = 2048;
      *(void *)(v15 + 1sub_10000F430((uint64_t)__str, 0) = v17;
      *(_WORD *)(v15 + 18) = 1024;
      *(_DWORD *)(v15 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = a2;
      *(_WORD *)(v15 + 24) = 2080;
      *(void *)(v15 + 26) = v19;
      uint64_t v20 = 3LL;
      os_log_t v21 = v10;
      uint64_t v22 = v11;
      uint64_t v23 = v13;
LABEL_14:
      __SC_log_send(v20, v21, v22, v23);
    }
  }

  else
  {
    if (!qword_100079C78)
    {
      os_log_t v10 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v10;
    }

    uint64_t v24 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v10, v24))
    {
      uint64_t v25 = _os_log_pack_size(8LL);
      uint64_t v26 = (char *)&v30 - ((__chkstk_darwin(v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v27 = __error();
      CFNumberRef v28 = (_DWORD *)_os_log_pack_fill( v26,  v25,  *v27,  &_mh_execute_header,  "Set kernel interface order for %u interfaces",  v30);
      int v29 = (int)v31;
      *CFNumberRef v28 = 67109120;
      v28[1] = v29;
      uint64_t v20 = 6LL;
      os_log_t v21 = v10;
      uint64_t v22 = v24;
      uint64_t v23 = v26;
      goto LABEL_14;
    }
  }

  if (v32) {
    free(v32);
  }
}

uint64_t sub_100040330(uint64_t result, int a2, int a3)
{
  uint64_t v4 = result;
  unsigned int v5 = (*(void *)(result + 16) >> 8) & 0xF;
  if (v5 != 3)
  {
    if (v5 == 2)
    {
      LOBYTE(v7) = 0;
      unsigned int v8 = 0;
      goto LABEL_8;
    }

    if (v5 != 1) {
      return result;
    }
  }

  unint64_t v6 = *(void *)(result + 16) & 0x10LL;
  unint64_t v7 = v6 >> 4;
  if (v6) {
    unsigned int v8 = 20;
  }
  else {
    unsigned int v8 = 0;
  }
LABEL_8:
  uint64_t v9 = v8;
  int v10 = sub_100029594(a3, result, a2, result + 92, v8);
  os_log_t v11 = (os_log_t)qword_100079C78;
  if (v10 < 0)
  {
    if (!qword_100079C78)
    {
      os_log_t v11 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v11;
    }

    uint64_t v29 = _SC_syslog_os_log_mapping(3LL);
    unint64_t result = __SC_log_enabled(3LL, v11, v29);
    if ((_DWORD)result)
    {
      uint64_t v30 = _os_log_pack_size(34LL);
      uint64_t v31 = (char *)&v37 - ((__chkstk_darwin(v30) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v32 = __error();
      uint64_t v33 = _os_log_pack_fill( v31,  v30,  *v32,  &_mh_execute_header,  "siocsifnetsignature(%s, IPv%c, %d) failed: %s",  v37,  v38,  (_DWORD)v39,  v40);
      if (a2 == 2) {
        int v34 = 52;
      }
      else {
        int v34 = 54;
      }
      uint64_t v35 = __error();
      unsigned int v36 = strerror(*v35);
      *(_DWORD *)uint64_t v33 = 136315906;
      *(void *)(v33 + 4) = v4;
      *(_WORD *)(v33 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v33 + 14) = v34;
      *(_WORD *)(v33 + 18) = 1024;
      *(_DWORD *)(v33 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v8;
      *(_WORD *)(v33 + 24) = 2080;
      *(void *)(v33 + 26) = v36;
      return __SC_log_send(3LL, v11, v29, v31);
    }
  }

  else
  {
    if (!qword_100079C78)
    {
      os_log_t v11 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v11;
    }

    uint64_t v12 = _SC_syslog_os_log_mapping(7LL);
    unint64_t result = __SC_log_enabled(7LL, v11, v12);
    if ((_DWORD)result)
    {
      uint64_t v13 = _os_log_pack_size(28LL);
      os_log_t v14 = (char *)&v37 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v15 = __error();
      uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "IPv%c Network Signature %s %s",  v37,  v38,  v39);
      if (a2 == 2) {
        int v17 = 52;
      }
      else {
        int v17 = 54;
      }
      uint64_t v18 = "Cleared";
      *(_DWORD *)uint64_t v16 = 67109634;
      *(_DWORD *)(v16 + 4) = v17;
      *(_WORD *)(v16 + 8) = 2080;
      if ((v7 & 1) != 0) {
        uint64_t v18 = "Set";
      }
      *(void *)(v16 + 1sub_10000F430((uint64_t)__str, 0) = v18;
      *(_WORD *)(v16 + 18) = 2080;
      *(void *)(v16 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v4;
      unint64_t result = __SC_log_send(7LL, v11, v12, v14);
    }

    if ((v7 & 1) != 0 && byte_100079C94 == 1)
    {
      __chkstk_darwin(result);
      uint64_t v20 = (char *)&v37 - v19;
      *((_BYTE *)&v37 - v19) = 0;
      if (v8)
      {
        os_log_t v21 = (unsigned __int8 *)(v4 + 92);
        do
        {
          int v22 = *v21++;
          snprintf((char *)&v37 + 4, 4uLL, "%02x ", v22);
          strlcat(v20, (const char *)&v37 + 4, (3 * v8) | 1);
          --v9;
        }

        while (v9);
      }

      os_log_t v23 = (os_log_t)qword_100079C78;
      if (!qword_100079C78)
      {
        os_log_t v23 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        qword_100079C78 = (uint64_t)v23;
      }

      uint64_t v24 = _SC_syslog_os_log_mapping(7LL);
      unint64_t result = __SC_log_enabled(7LL, v23, v24);
      if ((_DWORD)result)
      {
        uint64_t v25 = _os_log_pack_size(12LL);
        uint64_t v26 = (char *)&v37 - ((__chkstk_darwin(v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v27 = __error();
        uint64_t v28 = _os_log_pack_fill(v26, v25, *v27, &_mh_execute_header, "Signature Bytes: %s", v37);
        *(_DWORD *)uint64_t v28 = 136315138;
        *(void *)(v28 + 4) = v20;
        return __SC_log_send(7LL, v23, v24, v26);
      }
    }
  }

  return result;
}

void sub_10004075C(id a1)
{
  qword_100079DC0 = (uint64_t)dispatch_queue_create("IPMonitorQueue", 0LL);
}

uint64_t sub_1000407B8()
{
  if ((byte_100079C95 & 1) != 0 || sub_100052F24())
  {
    byte_100079C94 = 1;
    os_log_t v0 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v0 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v0;
    }

    uint64_t v1 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v0, v1))
    {
      uint64_t v2 = _os_log_pack_size(2LL);
      uint64_t v3 = (char *)&v18 - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v4 = __error();
      *(_WORD *)_os_log_pack_fill(v3, v2, *v4, &_mh_execute_header, "Setting logging verbose mode on") = 0;
      __SC_log_send(7LL, v0, v1, v3);
    }
  }

  else
  {
    os_log_t v5 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      os_log_t v5 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v5;
    }

    uint64_t v6 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v5, v6))
    {
      uint64_t v7 = _os_log_pack_size(2LL);
      unsigned int v8 = (char *)&v18 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v9 = __error();
      *(_WORD *)_os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "Setting logging verbose mode off") = 0;
      __SC_log_send(7LL, v5, v6, v8);
    }

    byte_100079C94 = 0;
  }

  byte_100079D58 = sub_100052FCC();
  os_log_t v10 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    os_log_t v10 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v10;
  }

  uint64_t v11 = _SC_syslog_os_log_mapping(7LL);
  uint64_t result = __SC_log_enabled(7LL, v10, v11);
  if ((_DWORD)result)
  {
    uint64_t v13 = _os_log_pack_size(12LL);
    os_log_t v14 = (char *)&v18 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v15 = __error();
    uint64_t v16 = _os_log_pack_fill(v14, v13, *v15, &_mh_execute_header, "Service coupling is %s", v18);
    if (byte_100079D58) {
      int v17 = "disabled";
    }
    else {
      int v17 = "enabled";
    }
    *(_DWORD *)uint64_t v16 = 136315138;
    *(void *)(v16 + 4) = v17;
    return __SC_log_send(7LL, v10, v11, v14);
  }

  return result;
}

void sub_100040AA0(id a1)
{
  qword_100079DD0 = (uint64_t)dispatch_queue_create("network change queue", 0LL);
}

void sub_100040AFC(id a1)
{
  byte_100079DF0 = 1;
  sub_10002F6D0();
}

void sub_100040B4C(const __SCDynamicStore *a1, const __CFArray *a2)
{
}

uint64_t sub_100040B94()
{
  kern_return_t multiuser_config_flags;
  mach_error_t v2;
  os_log_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  os_log_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  const char *v19;
  const char *v20;
  HIDWORD(v19) = 0;
  mach_port_t v0 = mach_host_self();
  multiuser_config_uint64_t flags = host_get_multiuser_config_flags(v0, (uint32_t *)&v19 + 1);
  if (multiuser_config_flags)
  {
    uint64_t v2 = multiuser_config_flags;
    uint64_t v3 = (os_log_t)qword_100079C78;
    if (!qword_100079C78)
    {
      uint64_t v3 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v3;
    }

    uint64_t v4 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v3, v4))
    {
      os_log_t v5 = _os_log_pack_size(18LL);
      uint64_t v6 = (char *)&v19 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v7 = __error();
      unsigned int v8 = _os_log_pack_fill( v6,  v5,  *v7,  &_mh_execute_header,  "host_get_multiuser_config_flags() failed, %s (%d)",  v19,  (_DWORD)v20);
      uint64_t v9 = mach_error_string(v2);
      *(_DWORD *)unsigned int v8 = 136315394;
      *(void *)(v8 + 4) = v9;
      *(_WORD *)(v8 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v8 + 14) = v2;
      __SC_log_send(3LL, v3, v4, v6);
      os_log_t v10 = "false";
      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v11 = 0LL;
      os_log_t v10 = "false";
    }
  }

  else
  {
    if (SHIDWORD(v19) >= 0) {
      os_log_t v10 = "false";
    }
    else {
      os_log_t v10 = "true";
    }
    uint64_t v11 = HIDWORD(v19) >> 31;
  }

  uint64_t v12 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    uint64_t v12 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v12;
  }

  uint64_t v13 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v12, v13))
  {
    os_log_t v14 = _os_log_pack_size(22LL);
    uint64_t v15 = (char *)&v19 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v16 = __error();
    int v17 = _os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "%s: %s", v19, v20);
    *(_DWORD *)int v17 = 136315394;
    *(void *)(v17 + 4) = "host_is_multiuser";
    *(_WORD *)(v17 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v17 + 14) = v10;
    __SC_log_send(5LL, v12, v13, v15);
  }

  return v11;
}

void sub_100040E10(id a1)
{
  uint64_t v1 = sem_open("com.apple.configd.first-boot", 0);
  if (v1 == (sem_t *)-1LL)
  {
    byte_100079DF4 = 1;
    sub_100040E9C();
  }

  else
  {
    sem_close(v1);
  }

uint64_t sub_100040E9C()
{
  mach_port_t v0 = sem_open("com.apple.configd.first-boot", 512, 256LL);
  os_log_t v1 = (os_log_t)qword_100079C78;
  if (v0 == (sem_t *)-1LL)
  {
    if (!qword_100079C78)
    {
      os_log_t v1 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v1;
    }

    uint64_t v9 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = __SC_log_enabled(3LL, v1, v9);
    if ((_DWORD)result)
    {
      uint64_t v10 = _os_log_pack_size(32LL);
      uint64_t v11 = (char *)&v16 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v12 = __error();
      uint64_t v13 = _os_log_pack_fill( v11,  v10,  *v12,  &_mh_execute_header,  "%s: failed to create %s, %s",  v16,  v17,  v18);
      os_log_t v14 = __error();
      uint64_t v15 = strerror(*v14);
      *(_DWORD *)uint64_t v13 = 136315650;
      *(void *)(v13 + 4) = "my_sem_establish";
      *(_WORD *)(v13 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v13 + 14) = "com.apple.configd.first-boot";
      *(_WORD *)(v13 + 2pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v13 + 24) = v15;
      return __SC_log_send(3LL, v1, v9, v11);
    }
  }

  else
  {
    uint64_t v2 = v0;
    if (!qword_100079C78)
    {
      os_log_t v1 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      qword_100079C78 = (uint64_t)v1;
    }

    uint64_t v3 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v1, v3))
    {
      uint64_t v4 = _os_log_pack_size(22LL);
      os_log_t v5 = (char *)&v16 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v6 = __error();
      uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%s: created %s", v16, v17);
      *(_DWORD *)uint64_t v7 = 136315394;
      *(void *)(v7 + 4) = "my_sem_establish";
      *(_WORD *)(v7 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v7 + 14) = "com.apple.configd.first-boot";
      __SC_log_send(5LL, v1, v3, v5);
    }

    return sem_close(v2);
  }

  return result;
}

void sub_100041100(uint64_t a1)
{
  size_t v47 = 0LL;
  *(_OWORD *)CFDataRef v48 = xmmword_1000657E0;
  uint64_t v49 = 0x81000000002LL;
  int v2 = 3;
  while (1)
  {
    if (sysctl(v48, 6u, 0LL, &v47, 0LL, 0LL) < 0) {
      return;
    }
    uint64_t v3 = (unsigned __int16 *)malloc(v47);
    if (!v3) {
      return;
    }
    uint64_t v4 = v3;
    if ((sysctl(v48, 6u, v3, &v47, 0LL, 0LL) & 0x80000000) == 0) {
      break;
    }
    free(v4);
    if (!--v2) {
      return;
    }
  }

  if ((uint64_t)v47 >= 1)
  {
    unint64_t v6 = (unint64_t)v4 + v47;
    p_base_props = &QoSMarkingController__classData.base_props;
    *(void *)&__int128 v5 = 67110146LL;
    __int128 v43 = v5;
    unsigned int v8 = v4;
    size_t v45 = (size_t)v4 + v47;
    while (1)
    {
      unsigned int v9 = bswap32(*((_DWORD *)v8 + 24));
      if (HIBYTE(v9) != 127) {
        break;
      }
      os_log_t v10 = (os_log_t)p_base_props[399];
      if (!v10)
      {
        os_log_t v10 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        p_base_props[399] = (__objc2_prop_list *)v10;
      }

      uint64_t v11 = _SC_syslog_os_log_mapping(7LL);
      uint64_t v12 = _os_log_pack_size(2LL);
      uint64_t v13 = (char *)&v43 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v14 = __error();
      *(_WORD *)_os_log_pack_fill( v13,  v12,  *v14,  &_mh_execute_header,  "flush_routes: ignoring loopback route") = 0;
      uint64_t v15 = 7LL;
      os_log_t v16 = v10;
      uint64_t v17 = v11;
      uint64_t v18 = v13;
LABEL_26:
      __SC_log_send(v15, v16, v17, v18);
LABEL_27:
      unsigned int v8 = (unsigned __int16 *)((char *)v8 + *v8);
    }

    if (v9 >> 8 == 14680064)
    {
      os_log_t v19 = (os_log_t)p_base_props[399];
      if (!v19)
      {
        os_log_t v19 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        p_base_props[399] = (__objc2_prop_list *)v19;
      }

      uint64_t v20 = _SC_syslog_os_log_mapping(7LL);
      uint64_t v21 = _os_log_pack_size(2LL);
      int v22 = (char *)&v43 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v23 = __error();
      *(_WORD *)_os_log_pack_fill( v22,  v21,  *v23,  &_mh_execute_header,  "flush_routes: ignoring multicast route") = 0;
    }

    else
    {
      *((_BYTE *)v8 + 3) = 2;
      *((_DWORD *)v8 + 5) = ++dword_100079CBC;
      ssize_t v24 = write(a1, v8, *v8);
      os_log_t v19 = (os_log_t)p_base_props[399];
      if (v24 < 0)
      {
        if (!v19)
        {
          os_log_t v19 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          p_base_props[399] = (__objc2_prop_list *)v19;
        }

        uint64_t v32 = _SC_syslog_os_log_mapping(5LL);
        int v33 = v32;
        uint64_t v34 = _os_log_pack_size(36LL);
        HIDWORD(v46) = v33;
        int v22 = (char *)&v43 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v35 = __error();
        uint64_t v36 = _os_log_pack_fill( v22,  v34,  *v35,  &_mh_execute_header,  "flush_routes: removing route for %d.%d.%d.%d failed: %s",  (_DWORD)v43,  DWORD2(v43),  v44,  v45,  v46);
        uint64_t v37 = a1;
        int v38 = *((unsigned __int8 *)v8 + 96);
        int v39 = *((unsigned __int8 *)v8 + 97);
        int v40 = *((unsigned __int8 *)v8 + 98);
        LODWORD(v46) = *((unsigned __int8 *)v8 + 99);
        uint64_t v41 = __error();
        unsigned int v42 = strerror(*v41);
        *(_DWORD *)uint64_t v36 = v43;
        *(_DWORD *)(v36 + 4) = v38;
        a1 = v37;
        *(_WORD *)(v36 + 8) = 1024;
        *(_DWORD *)(v36 + 1sub_10000F430((uint64_t)__str, 0) = v39;
        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
        *(_WORD *)(v36 + 14) = 1024;
        *(_DWORD *)(v36 + 16) = v40;
        unint64_t v6 = v45;
        *(_WORD *)(v36 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = 1024;
        uint64_t v17 = HIDWORD(v46);
        *(_DWORD *)(v36 + 2pthread_attr_setdetachstate(&v4, 2) = (_DWORD)v46;
        *(_WORD *)(v36 + 26) = 2080;
        *(void *)(v36 + 28) = v42;
        uint64_t v15 = 5LL;
        os_log_t v16 = v19;
        goto LABEL_25;
      }

      if (!v19)
      {
        os_log_t v19 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        p_base_props[399] = (__objc2_prop_list *)v19;
      }

      uint64_t v20 = _SC_syslog_os_log_mapping(7LL);
      uint64_t v25 = _os_log_pack_size(26LL);
      int v22 = (char *)&v43 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v26 = __error();
      uint64_t v27 = _os_log_pack_fill( v22,  v25,  *v26,  &_mh_execute_header,  "flush_routes: removed route for %d.%d.%d.%d",  (_DWORD)v43,  DWORD2(v43),  v44,  v45);
      int v28 = *((unsigned __int8 *)v8 + 96);
      int v29 = *((unsigned __int8 *)v8 + 97);
      int v30 = *((unsigned __int8 *)v8 + 98);
      int v31 = *((unsigned __int8 *)v8 + 99);
      *(_DWORD *)uint64_t v27 = 67109888;
      *(_DWORD *)(v27 + 4) = v28;
      *(_WORD *)(v27 + 8) = 1024;
      *(_DWORD *)(v27 + 1sub_10000F430((uint64_t)__str, 0) = v29;
      *(_WORD *)(v27 + 14) = 1024;
      *(_DWORD *)(v27 + 16) = v30;
      *(_WORD *)(v27 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = 1024;
      *(_DWORD *)(v27 + 2pthread_attr_setdetachstate(&v4, 2) = v31;
    }

    uint64_t v15 = 7LL;
    os_log_t v16 = v19;
    uint64_t v17 = v20;
LABEL_25:
    uint64_t v18 = v22;
    goto LABEL_26;
  }

void sub_1000415E0(id a1)
{
  os_log_t v1 = (os_log_t)qword_100079C78;
  if (!qword_100079C78)
  {
    os_log_t v1 = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_100079C78 = (uint64_t)v1;
  }

  uint64_t v2 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v1, v2))
  {
    uint64_t v3 = _os_log_pack_size(12LL);
    uint64_t v4 = (char *)&v8 - ((__chkstk_darwin(v3) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __int128 v5 = __error();
    uint64_t v6 = _os_log_pack_fill(v4, v3, *v5, &_mh_execute_header, "Notifying:\n%@");
    uint64_t v7 = qword_100079DB0;
    *(_DWORD *)uint64_t v6 = 138412290;
    *(void *)(v6 + 4) = v7;
    __SC_log_send(6LL, v1, v2, v4);
  }

void sub_100041728(id a1)
{
  uint64_t v2 = 0LL;
  os_log_t v1 = (const __CFArray *)sub_100029C94(&v2);
  if (qword_100079D50) {
    CFRelease((CFTypeRef)qword_100079D50);
  }
  qword_100079D50 = v2;
  if (v1)
  {
    sub_100032C68((const __SCDynamicStore *)qword_100079C88, 0LL, v1);
    CFRelease(v1);
  }

void sub_1000417BC(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000417C4(uint64_t a1, const void *a2)
{
  qword_100079E28 = (uint64_t)_Block_copy(a2);
  uint64_t v3 = "com.apple.SystemConfiguration.NetworkInformation";
  uint64_t v4 = getenv("com.apple.SystemConfiguration.NetworkInformation");
  if (v4) {
    uint64_t v3 = v4;
  }
  if (qword_100079E30 != -1) {
    dispatch_once(&qword_100079E30, &stru_100072D20);
  }
  mach_service = (char *)xpc_connection_create_mach_service(v3, (dispatch_queue_t)qword_100079E38, 1uLL);
  handler[0] = (const char *)_NSConcreteStackBlock;
  handler[1] = (const char *)0x40000000;
  handler[2] = (const char *)sub_100041ABC;
  handler[3] = (const char *)&unk_100072C80;
  void handler[4] = mach_service;
  xpc_connection_set_event_handler((xpc_connection_t)mach_service, handler);
  xpc_connection_resume((xpc_connection_t)mach_service);
  os_log_t v6 = sub_10002E39C();
  uint64_t v7 = _SC_syslog_os_log_mapping(7LL);
  uint64_t result = __SC_log_enabled(7LL, v6, v7);
  if ((_DWORD)result)
  {
    uint64_t v9 = _os_log_pack_size(12LL);
    os_log_t v10 = (char *)handler - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v11 = __error();
    uint64_t v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "XPC server %s started", handler[0]);
    *(_DWORD *)uint64_t v12 = 136315138;
    *(void *)(v12 + 4) = v3;
    return __SC_log_send(7LL, v6, v7, v10);
  }

  return result;
}

uint64_t sub_100041984()
{
  if (qword_100079E30 != -1) {
    dispatch_once(&qword_100079E30, &stru_100072D20);
  }
  uint64_t result = os_state_add_handler(qword_100079E38, &stru_100072CE0);
  if (!result)
  {
    os_log_t v1 = sub_10002E39C();
    uint64_t v2 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = __SC_log_enabled(3LL, v1, v2);
    if ((_DWORD)result)
    {
      uint64_t v3 = _os_log_pack_size(2LL);
      uint64_t v4 = (char *)&v6 - ((__chkstk_darwin(v3) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __int128 v5 = __error();
      *(_WORD *)_os_log_pack_fill( v4,  v3,  *v5,  &_mh_execute_header,  "Network information: os_state_add_handler() failed") = 0;
      return __SC_log_send(3LL, v1, v2, v4);
    }
  }

  return result;
}

void sub_100041ABC(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    sub_100041E00((_xpc_connection_s *)object);
  }

  else
  {
    string = (const char *)type;
    if (type == (xpc_type_t)&_xpc_type_error)
    {
      string = xpc_dictionary_get_string(object, _xpc_error_key_description);
      if (object == &_xpc_error_connection_invalid)
      {
        os_log_t v18 = sub_10002E39C();
        uint64_t v19 = _SC_syslog_os_log_mapping(3LL);
        if (__SC_log_enabled(3LL, v18, v19))
        {
          uint64_t v20 = _os_log_pack_size(12LL);
          uint64_t v21 = (char *)v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          int v22 = __error();
          uint64_t v23 = _os_log_pack_fill( v21,  v20,  *v22,  &_mh_execute_header,  "Network information server: %s",  (const char *)v26[0]);
          *(_DWORD *)uint64_t v23 = 136315138;
          *(void *)(v23 + 4) = string;
          __SC_log_send(3LL, v18, v19, v21);
        }

        xpc_release(*(xpc_object_t *)(a1 + 32));
      }

      else
      {
        os_log_t v6 = sub_10002E39C();
        uint64_t v7 = _SC_syslog_os_log_mapping(3LL);
        int v13 = __SC_log_enabled(3LL, v6, v7);
        if (object == &_xpc_error_connection_interrupted)
        {
          if (v13)
          {
            uint64_t v24 = _os_log_pack_size(12LL);
            uint64_t v9 = (char *)v26 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v25 = __error();
            uint64_t v11 = _os_log_pack_fill( v9,  v24,  *v25,  &_mh_execute_header,  "Network information server: %s",  (const char *)v26[0]);
            int v12 = 136315138;
            goto LABEL_5;
          }
        }

        else if (v13)
        {
          uint64_t v14 = _os_log_pack_size(22LL);
          uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          os_log_t v16 = __error();
          uint64_t v17 = _os_log_pack_fill( v15,  v14,  *v16,  &_mh_execute_header,  "Network information server: Connection error: %p : %s",  v26[0],  (const char *)v26[1]);
          *(_DWORD *)uint64_t v17 = 134218242;
          *(void *)(v17 + 4) = object;
          *(_WORD *)(v17 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
          *(void *)(v17 + 14) = string;
          __SC_log_send(3LL, v6, v7, v15);
        }
      }
    }

    else
    {
      os_log_t v6 = sub_10002E39C();
      uint64_t v7 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v6, v7))
      {
        uint64_t v8 = _os_log_pack_size(12LL);
        uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        os_log_t v10 = __error();
        uint64_t v11 = _os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "Network information server: unknown event type : %p",  v26[0]);
        int v12 = 134217984;
LABEL_5:
        *(_DWORD *)uint64_t v11 = v12;
        *(void *)(v11 + 4) = string;
        __SC_log_send(3LL, v6, v7, v9);
      }
    }
  }

void sub_100041E00(_xpc_connection_s *a1)
{
  os_log_t v2 = sub_10002E39C();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(18LL);
    __int128 v5 = (char *)&handler - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "<%p:%d> Network information session: open",  handler,  v10);
    pid_t pid = xpc_connection_get_pid(a1);
    *(_DWORD *)uint64_t v7 = 134218240;
    *(void *)(v7 + 4) = a1;
    *(_WORD *)(v7 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v7 + 14) = pid;
    __SC_log_send(7LL, v2, v3, v5);
  }

  sub_100052094((uint64_t)&qword_100079E08, a1);
  if (qword_100079E30 != -1) {
    dispatch_once(&qword_100079E30, &stru_100072D20);
  }
  xpc_connection_set_target_queue(a1, (dispatch_queue_t)qword_100079E38);
  handler = _NSConcreteStackBlock;
  uint64_t v10 = 0x40000000LL;
  uint64_t v11 = sub_100042554;
  int v12 = &unk_100072D40;
  int v13 = a1;
  xpc_connection_set_event_handler(a1, &handler);
  xpc_connection_resume(a1);
}

uint64_t sub_100041FAC(const __CFData *a1)
{
  CFDataRef v1 = a1;
  if (a1)
  {
    uint64_t v2 = *((void *)a1 + 4);
    os_log_t v3 = sub_10002E39C();
    uint64_t v4 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v3, v4))
    {
      uint64_t v5 = _os_log_pack_size(12LL);
      os_log_t v6 = (char *)&block[-1] - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v7 = __error();
      uint64_t v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "Network information updated: %llu", v20);
      *(_DWORD *)uint64_t v8 = 134217984;
      *(void *)(v8 + 4) = v2;
      __SC_log_send(7LL, v3, v4, v6);
    }

    CFDataRef v1 = CFDataCreate( 0LL,  (const UInt8 *)v1,  4LL * *((unsigned int *)v1 + 1) + 112LL * (2 * *((_DWORD *)v1 + 1)) + 40);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  if (qword_100079E30 != -1) {
    dispatch_once(&qword_100079E30, &stru_100072D20);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100042258;
  block[3] = &unk_100072CA0;
  void block[4] = v1;
  void block[5] = v2;
  dispatch_sync((dispatch_queue_t)qword_100079E38, block);
  if (v1) {
    CFRelease(v1);
  }
  sub_100052044((uint64_t)&qword_100079E08);
  if (qword_100079E28) {
    (*(void (**)(void))(qword_100079E28 + 16))();
  }
  uint64_t notify_key = nwi_state_get_notify_key();
  if (notify_key)
  {
    uint64_t v10 = (const char *)notify_key;
    _nwi_state_force_refresh();
    uint32_t v11 = notify_post(v10);
    if (v11)
    {
      uint32_t v12 = v11;
      os_log_t v13 = sub_10002E39C();
      uint64_t v14 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v13, v14))
      {
        uint64_t v15 = _os_log_pack_size(8LL);
        os_log_t v16 = (char *)&block[-1] - ((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v17 = __error();
        os_log_t v18 = (_DWORD *)_os_log_pack_fill( v16,  v15,  *v17,  &_mh_execute_header,  "notify_post() failed: %u",  v20);
        *os_log_t v18 = 67109120;
        v18[1] = v12;
        __SC_log_send(3LL, v13, v14, v16);
      }
    }
  }

  return 1LL;
}

void sub_100042258(uint64_t a1)
{
}

os_state_data_s *__cdecl sub_1000422A8(id a1, os_state_hints_s *a2)
{
  if (qword_100079E08[0])
  {
    CFIndex Length = CFDataGetLength((CFDataRef)qword_100079E08[0]);
    size_t v3 = Length + 200;
    if ((unint64_t)(Length + 200) > 0x8000)
    {
      os_log_t v4 = sub_10002E39C();
      uint64_t v5 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v4, v5))
      {
        uint64_t v6 = _os_log_pack_size(22LL);
        uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v8 = __error();
        uint64_t v9 = _os_log_pack_fill( v7,  v6,  *v8,  &_mh_execute_header,  "Network information : state data too large (%zu > %zu)",  v20[0],  v20[1]);
        *(_DWORD *)uint64_t v9 = 134218240;
        *(void *)(v9 + 4) = v3;
        *(_WORD *)(v9 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
        *(void *)(v9 + 14) = 0x8000LL;
        __SC_log_send(3LL, v4, v5, v7);
      }

      return 0LL;
    }

    int64_t v10 = Length;
  }

  else
  {
    int64_t v10 = 0LL;
    size_t v3 = 200LL;
  }

  uint32_t v11 = (os_state_data_s *)calloc(1uLL, v3);
  if (!v11)
  {
    os_log_t v14 = sub_10002E39C();
    uint64_t v15 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v14, v15))
    {
      uint64_t v16 = _os_log_pack_size(2LL);
      uint64_t v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v18 = __error();
      *(_WORD *)_os_log_pack_fill( v17,  v16,  *v18,  &_mh_execute_header,  "Network information: could not allocate state data") = 0;
      __SC_log_send(3LL, v14, v15, v17);
    }

    return 0LL;
  }

  uint32_t v12 = v11;
  v11->var0 = 3;
  v11->var1.var1 = v10;
  __strlcpy_chk(&v11->var2, "SystemConfiguration", 64LL, 64LL);
  __strlcpy_chk(v12->var2.var1, "nwi", 64LL, 64LL);
  __strlcpy_chk(v12->var3, "Network information", 64LL, 64LL);
  if (v10 >= 1)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)qword_100079E08[0]);
    memcpy(v12->var4, BytePtr, v10);
  }

  return v12;
}

void sub_1000424F8(id a1)
{
  qword_100079E38 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.NetworkInformation.server", 0LL);
}

void sub_100042554(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    sub_100042960(*(_xpc_connection_s **)(a1 + 32), object);
    return;
  }

  uint64_t v5 = type;
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    os_log_t v6 = sub_10002E39C();
    uint64_t v7 = _SC_syslog_os_log_mapping(3LL);
    uint64_t v8 = _os_log_pack_size(28LL);
    uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    int64_t v10 = __error();
    uint64_t v11 = _os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "<%p:%d> unknown event type : %p",  v35,  v36,  v37);
    uint32_t v12 = *(_xpc_connection_s **)(a1 + 32);
    pid_t pid = xpc_connection_get_pid(v12);
    *(_DWORD *)uint64_t v11 = 134218496;
    *(void *)(v11 + 4) = v12;
    *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v11 + 14) = pid;
    __int16 v14 = 2048;
    goto LABEL_5;
  }

  string = xpc_dictionary_get_string(object, _xpc_error_key_description);
  if (object == &_xpc_error_connection_invalid)
  {
    os_log_t v23 = sub_10002E39C();
    uint64_t v24 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v23, v24))
    {
      uint64_t v25 = _os_log_pack_size(18LL);
      uint64_t v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v27 = __error();
      uint64_t v28 = _os_log_pack_fill( v26,  v25,  *v27,  &_mh_execute_header,  "<%p:%d> Network information session: close",  v35,  v36);
      int v29 = *(_xpc_connection_s **)(a1 + 32);
      pid_t v30 = xpc_connection_get_pid(v29);
      *(_DWORD *)uint64_t v28 = 134218240;
      *(void *)(v28 + 4) = v29;
      *(_WORD *)(v28 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v28 + 14) = v30;
      __SC_log_send(7LL, v23, v24, v26);
    }

    if (sub_1000523F0((uint64_t)&qword_100079E08, *(void *)(a1 + 32)))
    {
      sub_100052044((uint64_t)&qword_100079E08);
      if (qword_100079E28) {
        (*(void (**)(void))(qword_100079E28 + 16))();
      }
    }
  }

  else
  {
    uint64_t v5 = (void *)string;
    os_log_t v6 = sub_10002E39C();
    uint64_t v7 = _SC_syslog_os_log_mapping(3LL);
    int v16 = __SC_log_enabled(3LL, v6, v7);
    if (object == &_xpc_error_connection_interrupted)
    {
      if (v16)
      {
        uint64_t v31 = _os_log_pack_size(28LL);
        uint64_t v9 = (char *)&v35 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v32 = __error();
        uint64_t v11 = _os_log_pack_fill(v9, v31, *v32, &_mh_execute_header, "<%p:%d> %s", v35, v36, v37);
        int v33 = *(_xpc_connection_s **)(a1 + 32);
        pid_t v34 = xpc_connection_get_pid(v33);
        *(_DWORD *)uint64_t v11 = 134218498;
        *(void *)(v11 + 4) = v33;
        *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
        *(_DWORD *)(v11 + 14) = v34;
        __int16 v14 = 2080;
LABEL_5:
        *(_WORD *)(v11 + 18) = v14;
        *(void *)(v11 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v5;
        __SC_log_send(3LL, v6, v7, v9);
      }
    }

    else if (v16)
    {
      uint64_t v17 = _os_log_pack_size(38LL);
      os_log_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v19 = __error();
      uint64_t v20 = _os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "<%p:%d> Connection error: %p : %s",  v35,  v36,  v37,  v38);
      uint64_t v21 = *(_xpc_connection_s **)(a1 + 32);
      pid_t v22 = xpc_connection_get_pid(v21);
      *(_DWORD *)uint64_t v20 = 134218754;
      *(void *)(v20 + 4) = v21;
      *(_WORD *)(v20 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v20 + 14) = v22;
      *(_WORD *)(v20 + 18) = 2048;
      *(void *)(v20 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = object;
      *(_WORD *)(v20 + 28) = 2080;
      *(void *)(v20 + 3sub_10000F430((uint64_t)__str, 0) = v5;
      __SC_log_send(3LL, v6, v7, v18);
    }
  }

void sub_100042960(_xpc_connection_s *a1, xpc_object_t xdict)
{
  int64_t int64 = xpc_dictionary_get_int64(xdict, "request_op");
  if (int64 == 131075)
  {
    sub_100042F90(a1, xdict);
  }

  else
  {
    int64_t v5 = int64;
    if (int64 == 131074)
    {
      sub_100042E08(a1, xdict);
    }

    else if (int64 == 131073)
    {
      sub_100042B70(a1, xdict);
    }

    else
    {
      os_log_t v6 = sub_10002E39C();
      uint64_t v7 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v6, v7))
      {
        uint64_t v8 = _os_log_pack_size(22LL);
        uint64_t v9 = (char *)v12 - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int64_t v10 = __error();
        uint64_t v11 = _os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "<%p> unknown request : %lld",  v12[0],  v12[1]);
        *(_DWORD *)uint64_t v11 = 134218240;
        *(void *)(v11 + 4) = a1;
        *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
        *(void *)(v11 + 14) = v5;
        __SC_log_send(3LL, v6, v7, v9);
      }
    }
  }

void sub_100042B70(_xpc_connection_s *a1, xpc_object_t xdict)
{
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    os_log_t v6 = reply;
    uint64_t v7 = (const __CFData *)sub_100052164((uint64_t)&qword_100079E08, (uint64_t)a1, v26);
    string = xpc_dictionary_get_string(xdict, "proc_name");
    os_log_t v9 = sub_10002E39C();
    uint64_t v10 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v9, v10))
    {
      if (string) {
        uint64_t v11 = string;
      }
      else {
        uint64_t v11 = "???";
      }
      uint64_t v12 = _os_log_pack_size(38LL);
      os_log_t v13 = (char *)v26 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __int16 v14 = __error();
      uint64_t v15 = _os_log_pack_fill( v13,  v12,  *v14,  &_mh_execute_header,  "<%p:%s[%d]> Network information copy: %llu",  v26[0],  (const char *)v26[1],  v27,  v28);
      pid_t pid = xpc_connection_get_pid(a1);
      uint64_t v17 = v26[0];
      *(_DWORD *)uint64_t v15 = 134218754;
      *(void *)(v15 + 4) = a1;
      *(_WORD *)(v15 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v15 + 14) = v11;
      *(_WORD *)(v15 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v15 + 24) = pid;
      *(_WORD *)(v15 + 28) = 2048;
      *(void *)(v15 + 3sub_10000F430((uint64_t)__str, 0) = v17;
      __SC_log_send(7LL, v9, v10, v13);
    }

    if (v7)
    {
      BytePtr = CFDataGetBytePtr(v7);
      size_t Length = CFDataGetLength(v7);
      xpc_dictionary_set_data(v6, "configuration", BytePtr, Length);
    }

    xpc_connection_send_message(remote_connection, v6);
    xpc_release(v6);
  }

  else
  {
    os_log_t v20 = sub_10002E39C();
    uint64_t v21 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v20, v21))
    {
      uint64_t v22 = _os_log_pack_size(12LL);
      os_log_t v23 = (char *)v26 - ((__chkstk_darwin(v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v24 = __error();
      uint64_t v25 = _os_log_pack_fill( v23,  v22,  *v24,  &_mh_execute_header,  "<%p> _nwi_state_copy: xpc_dictionary_create_reply: failed",  v26[0]);
      *(_DWORD *)uint64_t v25 = 134217984;
      *(void *)(v25 + 4) = a1;
      __SC_log_send(3LL, v20, v21, v23);
    }
  }

uint64_t sub_100042E08(_xpc_connection_s *a1, xpc_object_t xdict)
{
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, "generation");
  os_log_t v4 = sub_10002E39C();
  uint64_t v5 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v4, v5))
  {
    uint64_t v6 = _os_log_pack_size(28LL);
    uint64_t v7 = (char *)&v12 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v8 = __error();
    uint64_t v9 = _os_log_pack_fill( v7,  v6,  *v8,  &_mh_execute_header,  "<%p:%d> Network information ack: %llu",  v12,  v13,  v14);
    pid_t pid = xpc_connection_get_pid(a1);
    *(_DWORD *)uint64_t v9 = 134218496;
    *(void *)(v9 + 4) = a1;
    *(_WORD *)(v9 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v9 + 14) = pid;
    *(_WORD *)(v9 + 18) = 2048;
    *(void *)(v9 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = uint64;
    __SC_log_send(7LL, v4, v5, v7);
  }

  uint64_t result = sub_100052210((uint64_t)&qword_100079E08, a1, uint64);
  if ((_DWORD)result)
  {
    sub_100052044((uint64_t)&qword_100079E08);
    uint64_t result = qword_100079E28;
    if (qword_100079E28) {
      return (*(uint64_t (**)(void))(qword_100079E28 + 16))();
    }
  }

  return result;
}

void sub_100042F90(_xpc_connection_s *a1, xpc_object_t xdict)
{
  os_log_t v20 = 0LL;
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uuid = xpc_dictionary_get_uuid(xdict, "AgentUUID");
  if (!uuid || (uuid_copy(dst, uuid), (string = xpc_dictionary_get_string(xdict, "AgentType")) == 0LL))
  {
    os_log_t v18 = 0LL;
    if (!reply) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  uint64_t v8 = string;
  uint64_t v9 = xpc_dictionary_get_string(xdict, "proc_name");
  os_log_t v10 = sub_10002E39C();
  uint64_t v11 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v10, v11))
  {
    if (v9) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = "???";
    }
    uint64_t v13 = _os_log_pack_size(28LL);
    uint64_t v14 = &dst[-((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
    uint64_t v15 = __error();
    uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "<%p:%s[%d]> Config agent information copy",  v20,  *(const char **)dst,  *(_DWORD *)&dst[8]);
    pid_t pid = xpc_connection_get_pid(a1);
    *(_DWORD *)uint64_t v16 = 134218498;
    *(void *)(v16 + 4) = a1;
    *(_WORD *)(v16 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v16 + 14) = v12;
    *(_WORD *)(v16 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v16 + 24) = pid;
    __SC_log_send(7LL, v10, v11, v14);
  }

  if (!strcmp(v8, "DNSAgent"))
  {
    uint64_t v19 = (void *)copy_dns_information_for_agent_uuid((uint64_t)dst, (uint64_t)&v20);
  }

  else
  {
    if (strcmp(v8, "ProxyAgent"))
    {
      os_log_t v18 = 0LL;
      goto LABEL_21;
    }

    uint64_t v19 = (void *)copy_proxy_information_for_agent_uuid((uint64_t)dst, (uint64_t)&v20);
  }

  os_log_t v18 = v19;
  if (v19 && v20) {
    xpc_dictionary_set_data(reply, "AgentData", v19, (size_t)v20);
  }
LABEL_21:
  xpc_connection_send_message(remote_connection, reply);
  if (reply) {
LABEL_12:
  }
    xpc_release(reply);
LABEL_13:
  if (v18) {
    free(v18);
  }
}

__CFDictionary *sub_1000431E8( const __CFDictionary *a1, const __CFDictionary *a2, const __CFArray *a3, const void *a4)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  int v132 = a3;
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      CFIndex Count = CFDictionaryGetCount(a2);
      if (Count)
      {
        uint64_t v10 = Count;
        if (Count < 33)
        {
          uint64_t v11 = valuePtr;
          values = (void **)&v139;
        }

        else
        {
          uint64_t v11 = (const void **)CFAllocatorAllocate(0LL, 8 * Count, 0LL);
          values = (void **)CFAllocatorAllocate(0LL, 8 * v10, 0LL);
        }

        CFTypeID v12 = CFArrayGetTypeID();
        int v119 = a1;
        if (a3 && CFGetTypeID(a3) == v12) {
          uint64_t range = CFArrayGetCount(a3);
        }
        else {
          uint64_t range = 0LL;
        }
        uint64_t v13 = values;
        CFDictionaryGetKeysAndValues(a2, v11, (const void **)values);
        if (v10 >= 1)
        {
          uint64_t v14 = 0LL;
          uint64_t v126 = (void *)kSCPropNetProxiesSupplementalMatchDomains;
          int v121 = (void *)kSCPropNetProxiesSupplementalMatchOrders;
          uint64_t v120 = (void *)kSCPropNetProxiesSupplementalMatchDomain;
          int v122 = v11;
          int v123 = a2;
          while (1)
          {
            uint64_t v15 = (const __CFDictionary *)v13[v14];
            CFTypeID v16 = CFDictionaryGetTypeID();
            if (v15)
            {
              if (CFGetTypeID(v15) == v16)
              {
                MutableCFDictionaryRef Copy = (void *)CFDictionaryGetValue(v15, kSCEntNetProxies);
                CFTypeID v18 = CFDictionaryGetTypeID();
                if (MutableCopy)
                {
                  if (CFGetTypeID(MutableCopy) == v18) {
                    break;
                  }
                }
              }
            }

LABEL_61:
            if (++v14 == v10) {
              goto LABEL_65;
            }
          }

          if (G_supplemental_proxies_follow_dns
            && CFBooleanGetValue((CFBooleanRef)G_supplemental_proxies_follow_dns)
            && !CFDictionaryContainsKey((CFDictionaryRef)MutableCopy, v126)
            && CFDictionaryGetValueIfPresent(v15, kSCEntNetDNS, (const void **)&value)
            && (v32 = value, CFTypeID v33 = CFDictionaryGetTypeID(), v32)
            && CFGetTypeID(v32) == v33
            && CFDictionaryGetValueIfPresent( (CFDictionaryRef)value,  kSCPropNetDNSSupplementalMatchDomains,  (const void **)&v137)
            && (v34 = v137, CFTypeID v35 = CFArrayGetTypeID(), v34)
            && CFGetTypeID(v34) == v35)
          {
            MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)MutableCopy);
            CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, v126, v137);
            if (CFDictionaryGetValueIfPresent( (CFDictionaryRef)value,  kSCPropNetDNSSupplementalMatchOrders,  (const void **)&v136)
              && (uint64_t v36 = v136, v37 = CFArrayGetTypeID(), v36)
              && CFGetTypeID(v36) == v37)
            {
              CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, v121, v136);
            }

            else
            {
              CFDictionaryRemoveValue((CFMutableDictionaryRef)MutableCopy, v121);
            }

            CFTypeRef cf = MutableCopy;
          }

          else
          {
            CFTypeRef cf = 0LL;
          }

          v19.length = range;
          int v20 = 200 * v14 + 100000;
          if (range >= 1)
          {
            v19.location = 0LL;
            int v21 = CFArrayContainsValue(a3, v19, v11[v14]);
            int v22 = 200 * v10;
            if (v21) {
              int v22 = 0;
            }
            v20 += v22;
          }

          LODWORD(CFDictionarySetValue(theDict, key, value) = v20;
          os_log_t v23 = CFDictionaryGetValue((CFDictionaryRef)MutableCopy, v126);
          CFTypeID v24 = CFArrayGetTypeID();
          uint64_t v13 = values;
          if (!v23) {
            goto LABEL_59;
          }
          if (CFGetTypeID(v23) != v24) {
            goto LABEL_59;
          }
          CFIndex v25 = CFArrayGetCount((CFArrayRef)v23);
          if (!v25) {
            goto LABEL_59;
          }
          uint64_t v26 = v25;
          uint64_t v27 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)MutableCopy, v121);
          CFArrayRef theArray = v27;
          if (!v27)
          {
            if (v26 >= 1) {
              goto LABEL_45;
            }
            goto LABEL_59;
          }

          uint64_t v28 = v27;
          CFTypeID v29 = CFArrayGetTypeID();
          BOOL v30 = CFGetTypeID(v28) == v29;
          uint64_t v13 = values;
          if (!v30 || (CFIndex v31 = CFArrayGetCount(theArray), v26 < 1) || v26 != v31)
          {
LABEL_59:
            uint64_t v11 = v122;
            a2 = v123;
            a3 = v132;
            if (cf) {
              CFRelease(cf);
            }
            goto LABEL_61;
          }

LABEL_45:
          CFIndex v38 = 0LL;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v23, v38);
            CFTypeID v40 = CFStringGetTypeID();
            if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v40) {
              goto LABEL_58;
            }
            uint64_t v41 = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)MutableCopy);
            unsigned int v42 = (const void *)_SC_trimDomain(ValueAtIndex);
            if (v42)
            {
              __int128 v43 = v42;
              CFDictionarySetValue(v41, v120, v42);
              CFRelease(v43);
            }

            else
            {
              CFDictionaryRemoveValue(v41, v120);
            }

            if (!theArray) {
              break;
            }
            int v44 = CFArrayGetValueAtIndex(theArray, v38);
            CFTypeID v45 = CFNumberGetTypeID();
            if (!v44 || CFGetTypeID(v44) != v45) {
              goto LABEL_56;
            }
            CFDictionarySetValue(v41, @"__MATCH_ORDER__", v44);
LABEL_57:
            uint64_t v13 = values;
            CFDictionaryRemoveValue(v41, v126);
            CFDictionaryRemoveValue(v41, v121);
            CFDictionaryRemoveValue(v41, kSCPropInterfaceName);
            sub_10004447C(Mutable, v41);
            CFRelease(v41);
LABEL_58:
            if (v26 == ++v38) {
              goto LABEL_59;
            }
          }

          CFNumberGetTypeID();
LABEL_56:
          CFNumberRef v46 = CFNumberCreate(0LL, kCFNumberIntType, &value);
          CFDictionarySetValue(v41, @"__MATCH_ORDER__", v46);
          CFRelease(v46);
          LODWORD(CFDictionarySetValue(theDict, key, value) = (_DWORD)value + 1;
          goto LABEL_57;
        }

LABEL_65:
        a1 = v119;
        if (v11 != valuePtr)
        {
          CFAllocatorDeallocate(0LL, v11);
          CFAllocatorDeallocate(0LL, v13);
        }
      }
    }
  }

  LODWORD(valuePtr[0]) = 200000;
  if (a1)
  {
    size_t v47 = CFDictionaryCreateMutableCopy(0LL, 0LL, a1);
    CFDictionaryRemoveValue(v47, kSCPropInterfaceName);
    CFDataRef v48 = CFDictionaryGetValue(v47, @"__MATCH_ORDER__");
    CFTypeID v49 = CFNumberGetTypeID();
    if (v48 && CFGetTypeID(v48) == v49 && CFNumberGetValue((CFNumberRef)v48, kCFNumberSInt32Type, valuePtr))
    {
      int v50 = 0;
      goto LABEL_74;
    }
  }

  else
  {
    size_t v47 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFNumberGetTypeID();
  }

  LODWORD(valuePtr[0]) = 200000;
  CFNumberRef v51 = CFNumberCreate(0LL, kCFNumberIntType, valuePtr);
  CFDictionarySetValue(v47, @"__MATCH_ORDER__", v51);
  CFRelease(v51);
  int v50 = 1;
LABEL_74:
  sub_10004447C(Mutable, v47);
  CFRelease(v47);
  uint64_t v52 = CFArrayGetCount(Mutable);
  uint64_t v53 = v52;
  if (v52 < 2)
  {
    if (v52 != 1) {
      goto LABEL_83;
    }
  }

  else
  {
    v141.location = 0LL;
    v141.length = v52;
    CFArraySortValues(Mutable, v141, (CFComparatorFunction)sub_1000440A4, 0LL);
  }

  uint64_t v54 = (const void *)kSCPropNetProxiesSupplementalMatchDomain;
  CFIndex v55 = v53 - 1;
  do
  {
    os_log_t v56 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v55);
    uint64_t v57 = v56;
    if (v55 && !CFDictionaryContainsKey(v56, v54))
    {
      CFArrayRemoveValueAtIndex(Mutable, v55);
      --v53;
    }

    else
    {
      int v58 = CFDictionaryCreateMutableCopy(0LL, 0LL, v57);
      CFDictionaryRemoveValue(v58, @"__MATCH_ORDER__");
      CFDictionaryRemoveValue(v58, @"__ORDER__");
      CFArraySetValueAtIndex(Mutable, v55, v58);
      CFRelease(v58);
    }

    unint64_t v59 = v55-- + 1;
  }

  while (v59 > 1);
LABEL_83:
  int v60 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, 0LL);
  BOOL v61 = CFDictionaryCreateMutableCopy(0LL, 0LL, v60);
  if (v53 > 1) {
    int v62 = v50;
  }
  else {
    int v62 = 0;
  }
  if (v62 == 1)
  {
    int v63 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, 1LL);
    if (CFDictionaryContainsKey(v63, kSCPropNetProxiesSupplementalMatchDomain)) {
      CFDictionaryRemoveValue(v61, @"__MATCH_ORDER__");
    }
  }

  CFArraySetValueAtIndex(Mutable, 0LL, v61);
  CFRelease(v61);
  if (v53 < 1)
  {
    __int128 v66 = 0LL;
    goto LABEL_162;
  }

  CFStringRef v64 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, 0LL);
  int v65 = (const void *)kSCPropNetProxiesSupplementalMatchDomain;
  if (CFDictionaryContainsKey(v64, kSCPropNetProxiesSupplementalMatchDomain))
  {
    __int128 v66 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }

  else
  {
    __int128 v66 = CFDictionaryCreateMutableCopy(0LL, 0LL, v64);
    CFDictionaryRemoveValue(v66, kSCPropNetProxiesSupplementalMatchDomains);
    CFDictionaryRemoveValue(v66, kSCPropNetProxiesSupplementalMatchOrders);
  }

  CFTypeID v67 = CFDictionaryGetTypeID();
  if (!a2 || CFGetTypeID(a2) != v67 || (CFIndex v68 = CFDictionaryGetCount(a2)) == 0)
  {
    uint64_t v73 = 0LL;
    goto LABEL_102;
  }

  uint64_t v69 = v68;
  CFTypeID v70 = CFArrayGetTypeID();
  if (!v132 || CFGetTypeID(v132) != v70)
  {
    uint64_t v71 = 0LL;
    goto LABEL_164;
  }

  uint64_t v71 = CFArrayGetCount(v132);
  if (v71 < 1)
  {
LABEL_164:
    CFMutableArrayRef v72 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    goto LABEL_165;
  }

  CFMutableArrayRef v72 = CFArrayCreateMutableCopy(0LL, 0LL, v132);
LABEL_165:
  uint64_t v73 = v72;
  if (v69 >= 33)
  {
    uint64_t v115 = (const void **)CFAllocatorAllocate(0LL, 8 * v69, 0LL);
    CFDictionaryGetKeysAndValues(a2, v115, 0LL);
    goto LABEL_168;
  }

  uint64_t v115 = valuePtr;
  CFDictionaryGetKeysAndValues(a2, valuePtr, 0LL);
  if (v69 >= 1)
  {
LABEL_168:
    for (uint64_t i = 0LL; i != v69; ++i)
    {
      CFStringRef v117 = v115[i];
      v142.location = 0LL;
      v142.length = v71;
      if (!CFArrayContainsValue(v73, v142, v117))
      {
        CFArrayAppendValue(v73, v117);
        ++v71;
      }
    }

    if (v115 != valuePtr) {
      CFAllocatorDeallocate(0LL, v115);
    }
  }

LABEL_102:
  CFTypeID v74 = CFArrayGetTypeID();
  if (Mutable)
  {
    if (CFGetTypeID(Mutable) == v74)
    {
      CFIndex v75 = CFArrayGetCount(Mutable);
      if (v75 >= 1)
      {
        CFIndex v76 = v75;
        CFDictionaryRef v77 = a2;
        CFIndex v78 = 0LL;
        uint64_t v79 = 0LL;
        do
        {
          int v80 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v78);
          if (v80)
          {
            __int128 v81 = v80;
            if (CFDictionaryContainsKey(v80, v65))
            {
              if (!v79) {
                uint64_t v79 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
              }
              CFArrayAppendValue(v79, v81);
            }
          }

          ++v78;
        }

        while (v76 != v78);
        a2 = v77;
        if (v79)
        {
          CFDictionarySetValue(v66, kSCPropNetProxiesSupplemental, v79);
          CFRelease(v79);
        }
      }
    }
  }

  CFTypeID v82 = CFArrayGetTypeID();
  if (v73)
  {
    if (CFGetTypeID(v73) == v82)
    {
      CFIndex v83 = CFArrayGetCount(v73);
      if (v83 >= 1)
      {
        CFIndex v84 = v83;
        CFIndex v85 = 0LL;
        CFRange v86 = 0LL;
        valuesa = (void **)kSCPropNetProxiesSupplementalMatchOrders;
        key = (void *)kSCPropNetProxiesSupplementalMatchDomains;
        do
        {
          CFRange v87 = CFArrayGetValueAtIndex(v73, v85);
          int v88 = (const __CFDictionary *)CFDictionaryGetValue(a2, v87);
          CFTypeID v89 = CFDictionaryGetTypeID();
          if (v88)
          {
            if (CFGetTypeID(v88) == v89)
            {
              uint64_t v90 = (const __CFDictionary *)CFDictionaryGetValue(v88, kSCEntNetProxies);
              CFTypeID v91 = CFDictionaryGetTypeID();
              if (v90)
              {
                if (CFGetTypeID(v90) == v91)
                {
                  CFTypeID v92 = a2;
                  uint64_t v93 = CFDictionaryGetValue(v90, kSCPropInterfaceName);
                  if (v93)
                  {
                    uint64_t v94 = v93;
                    if ((!v86 || !CFDictionaryContainsKey(v86, v93))
                      && _SC_cfstring_to_cstring(v94, valuePtr, 16LL, 1536LL)
                      && sub_100028D68((uint64_t)valuePtr))
                    {
                      CFRetain(v94);
                      int v95 = CFDictionaryCreateMutableCopy(0LL, 0LL, v90);
                      CFDictionaryRemoveValue(v95, key);
                      CFDictionaryRemoveValue(v95, valuesa);
                      CFDictionaryRemoveValue(v95, kSCPropInterfaceName);
                      if (!v86) {
                        CFRange v86 = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
                      }
                      CFDictionarySetValue(v86, v94, v95);
                      CFRelease(v95);
                      CFRelease(v94);
                    }
                  }

                  a2 = v92;
                }
              }
            }
          }

          ++v85;
        }

        while (v84 != v85);
        if (v86)
        {
          CFDictionarySetValue(v66, kSCPropNetProxiesScoped, v86);
          CFRelease(v86);
        }
      }
    }
  }

  CFTypeID v96 = CFDictionaryGetTypeID();
  if (a4 && CFGetTypeID(a4) == v96)
  {
    CFTypeID v97 = CFArrayGetTypeID();
    if (!v73) {
      goto LABEL_162;
    }
    if (CFGetTypeID(v73) != v97) {
      goto LABEL_161;
    }
    CFIndex v98 = CFArrayGetCount(v73);
    if (v98 < 1) {
      goto LABEL_161;
    }
    CFIndex v99 = v98;
    unsigned int v133 = 0LL;
    CFIndex v100 = 0LL;
    CFTypeRef v135 = (CFTypeRef)kSCPropNetProxiesServiceSpecific;
    valuesb = (void **)kSCPropNetProxiesSupplementalMatchDomains;
    unsigned int v127 = (void *)kSCPropNetProxiesSupplementalMatchOrders;
    do
    {
      LODWORD(valuePtr[0]) = 0;
      uint64_t v101 = CFArrayGetValueAtIndex(v73, v100);
      CFTypeID v102 = (const __CFDictionary *)CFDictionaryGetValue(a2, v101);
      CFTypeID v103 = CFDictionaryGetTypeID();
      if (v102 && CFGetTypeID(v102) == v103)
      {
        uint64_t v104 = a2;
        __int128 v105 = (const __CFDictionary *)CFDictionaryGetValue(v102, kSCEntNetProxies);
        CFTypeID v106 = CFDictionaryGetTypeID();
        if (v105)
        {
          if (CFGetTypeID(v105) == v106)
          {
            int v107 = (const __CFNumber *)CFDictionaryGetValue(v105, v135);
            CFTypeID v108 = CFNumberGetTypeID();
            if (v107)
            {
              if (CFGetTypeID(v107) == v108)
              {
                if (CFNumberGetValue(v107, kCFNumberIntType, valuePtr))
                {
                  if (LODWORD(valuePtr[0]))
                  {
                    CFStringRef v109 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%d", LODWORD(valuePtr[0]));
                    if (v109)
                    {
                      CFStringRef v110 = v109;
                      uint64_t v111 = v133;
                      if (v133 && CFDictionaryContainsKey(v133, v109))
                      {
                        unsigned int v112 = (__CFDictionary *)v110;
                      }

                      else
                      {
                        os_log_t v113 = CFDictionaryCreateMutableCopy(0LL, 0LL, v105);
                        CFDictionaryRemoveValue(v113, valuesb);
                        CFDictionaryRemoveValue(v113, v127);
                        CFDictionaryRemoveValue(v113, v135);
                        if (!v133) {
                          uint64_t v111 = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
                        }
                        unsigned int v133 = v111;
                        CFDictionarySetValue(v111, v110, v113);
                        CFRelease(v110);
                        unsigned int v112 = v113;
                      }

                      CFRelease(v112);
                    }
                  }
                }
              }
            }
          }
        }

        a2 = v104;
      }

      ++v100;
    }

    while (v99 != v100);
    if (v133)
    {
      CFDictionarySetValue(v66, kSCPropNetProxiesServices, v133);
      CFRelease(v133);
    }
  }

  if (v73) {
LABEL_161:
  }
    CFRelease(v73);
LABEL_162:
  CFRelease(Mutable);
  return v66;
}

uint64_t sub_1000440A4(const __CFDictionary *a1, const __CFDictionary *a2)
{
  os_log_t v4 = (const void *)kSCPropNetProxiesSupplementalMatchDomain;
  uint64_t v5 = (const __CFString *)CFDictionaryGetValue(a1, kSCPropNetProxiesSupplementalMatchDomain);
  uint64_t v6 = (const __CFString *)CFDictionaryGetValue(a2, v4);
  uint64_t v7 = v6;
  if (v5)
  {
    if (v6)
    {
      int HasSuffix = CFStringHasSuffix(v5, @".arpa");
      if (HasSuffix == CFStringHasSuffix(v7, @".arpa"))
      {
        ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, v5, @".");
        CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
        uint64_t v11 = CFStringCreateArrayBySeparatingStrings(0LL, v7, @".");
        CFIndex v12 = CFArrayGetCount(v11);
        while (Count >= 1)
        {
          CFIndex v13 = v12 - 1;
          if (v12 < 1) {
            break;
          }
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, Count - 1);
          uint64_t v15 = (const __CFString *)CFArrayGetValueAtIndex(v11, v13);
          CFComparisonResult v16 = CFStringCompare(ValueAtIndex, v15, 1uLL);
          CFIndex v12 = v13;
          --Count;
          if (v16) {
            goto LABEL_44;
          }
        }

        if (Count <= v12)
        {
          if (Count < v12)
          {
            CFComparisonResult v16 = kCFCompareGreaterThan;
          }

          else
          {
            unsigned int v17 = 200000;
            unsigned int v28 = 200000;
            unsigned int valuePtr = 200000;
            CFTypeID v18 = (void *)CFDictionaryGetValue(a1, @"__MATCH_ORDER__");
            CC_SHA256_CTX value = v18;
            CFTypeID TypeID = CFNumberGetTypeID();
            if (!v18
              || CFGetTypeID(v18) != TypeID
              || !CFNumberGetValue((CFNumberRef)v18, kCFNumberSInt32Type, &valuePtr))
            {
              unsigned int valuePtr = 200000;
            }

            int v20 = (const __CFNumber *)CFDictionaryGetValue(a2, @"__MATCH_ORDER__");
            CFNumberRef number = v20;
            CFTypeID v21 = CFNumberGetTypeID();
            if (v20 && CFGetTypeID(v20) == v21 && CFNumberGetValue(v20, kCFNumberSInt32Type, &v28)) {
              unsigned int v17 = v28;
            }
            else {
              unsigned int v28 = 200000;
            }
            BOOL v22 = valuePtr >= v17;
            if (valuePtr != v17
              || CFDictionaryGetValueIfPresent(a1, @"__ORDER__", (const void **)&value)
              && CFDictionaryGetValueIfPresent(a2, @"__ORDER__", (const void **)&number)
              && (os_log_t v23 = value, v24 = CFNumberGetTypeID(), v23)
              && CFGetTypeID(v23) == v24
              && (CFNumberRef v25 = number, v26 = CFNumberGetTypeID(), v25)
              && CFGetTypeID(v25) == v26
              && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)
              && CFNumberGetValue(number, kCFNumberSInt32Type, &v28)
              && (BOOL v22 = valuePtr >= v28, valuePtr != v28))
            {
              if (v22) {
                CFComparisonResult v16 = kCFCompareGreaterThan;
              }
              else {
                CFComparisonResult v16 = kCFCompareLessThan;
              }
            }

            else
            {
              CFComparisonResult v16 = kCFCompareEqualTo;
            }
          }
        }

        else
        {
          CFComparisonResult v16 = kCFCompareLessThan;
        }

CFTypeID sub_1000443C0(__CFBundle *a1)
{
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a1);
  CFTypeID result = CFDictionaryGetTypeID();
  if (InfoDictionary)
  {
    CFTypeID v3 = result;
    CFTypeID result = CFGetTypeID(InfoDictionary);
    if (result == v3)
    {
      unsigned int Value = CFDictionaryGetValue(InfoDictionary, @"SupplementalProxiesFollowSupplementalDNS");
      G_supplemental_proxies_follow_dns = (uint64_t)Value;
      CFTypeID result = CFBooleanGetTypeID();
      if (Value)
      {
        CFTypeID v5 = result;
        CFTypeID result = CFGetTypeID(Value);
        if (result == v5) {
          uint64_t v6 = (uint64_t)Value;
        }
        else {
          uint64_t v6 = 0LL;
        }
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      G_supplemental_proxies_follow_dns = v6;
    }
  }

  return result;
}

void sub_10004447C(const __CFArray *a1, __CFDictionary *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  CFIndex v9 = Count;
  if (Count < 1)
  {
LABEL_5:
    CFNumberRef v8 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v9);
    CFDictionarySetValue(a2, @"__ORDER__", v8);
    CFRelease(v8);
    CFArrayAppendValue(a1, a2);
  }

  else
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0LL;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
      if (CFEqual(a2, ValueAtIndex)) {
        break;
      }
      if (v5 == ++v6) {
        goto LABEL_5;
      }
    }
  }

void sub_100044554(dispatch_queue_s *a1)
{
  qword_100079E40 = (uint64_t)a1;
  qword_100079E48 = (uint64_t)SCDynamicStoreCreate( 0LL,  @"set-hostname",  (SCDynamicStoreCallBack)sub_100044960,  0LL);
  if (!qword_100079E48)
  {
    os_log_t v18 = sub_10002E39C();
    uint64_t v19 = _SC_syslog_os_log_mapping(3LL);
    uint64_t v20 = _os_log_pack_size(12LL);
    CFTypeID v21 = (char *)&v31 - ((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v22 = *__error();
    uint64_t v23 = _os_log_pack_fill(v21, v20, v22, &_mh_execute_header, "SCDynamicStoreCreate() failed: %s");
LABEL_13:
    uint64_t v28 = v23;
    int v29 = SCError();
    BOOL v30 = SCErrorString(v29);
    *(_DWORD *)uint64_t v28 = 136315138;
    *(void *)(v28 + 4) = v30;
    os_log_t v15 = v18;
    uint64_t v16 = v19;
    unsigned int v17 = v21;
    goto LABEL_14;
  }

  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  CFTypeID v3 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  kSCDynamicStoreDomainState,  kSCCompAnyRegex,  kSCEntNetDHCP);
  CFArrayAppendValue(v3, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFStringRef ComputerName = SCDynamicStoreKeyCreateComputerName(0LL);
  CFArrayAppendValue(Mutable, ComputerName);
  CFRelease(ComputerName);
  CFStringRef HostNames = SCDynamicStoreKeyCreateHostNames(0LL);
  CFArrayAppendValue(Mutable, HostNames);
  CFRelease(HostNames);
  LODWORD(HostNames) = SCDynamicStoreSetNotificationKeys((SCDynamicStoreRef)qword_100079E48, Mutable, v3);
  CFRelease(Mutable);
  CFRelease(v3);
  if (!(_DWORD)HostNames)
  {
    os_log_t v18 = sub_10002E39C();
    uint64_t v19 = _SC_syslog_os_log_mapping(3LL);
    uint64_t v24 = _os_log_pack_size(12LL);
    CFTypeID v21 = (char *)&v31 - ((__chkstk_darwin(v24) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v25 = *__error();
    uint64_t v23 = _os_log_pack_fill(v21, v24, v25, &_mh_execute_header, "SCDynamicStoreSetNotificationKeys() failed: %s");
    goto LABEL_13;
  }

  if (!SCDynamicStoreSetDispatchQueue((SCDynamicStoreRef)qword_100079E48, a1))
  {
    os_log_t v18 = sub_10002E39C();
    uint64_t v19 = _SC_syslog_os_log_mapping(3LL);
    uint64_t v26 = _os_log_pack_size(12LL);
    CFTypeID v21 = (char *)&v31 - ((__chkstk_darwin(v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v27 = *__error();
    uint64_t v23 = _os_log_pack_fill(v21, v26, v27, &_mh_execute_header, "SCDynamicStoreSetDispatchQueue() failed: %s");
    goto LABEL_13;
  }

  uint32_t v7 = notify_register_dispatch("com.apple.system.config.network_change", &out_token, a1, &stru_100072D80);
  if (!v7) {
    return;
  }
  uint32_t v8 = v7;
  os_log_t v9 = sub_10002E39C();
  uint64_t v10 = _SC_syslog_os_log_mapping(3LL);
  if (__SC_log_enabled(3LL, v9, v10))
  {
    uint64_t v11 = _os_log_pack_size(8LL);
    CFIndex v12 = (char *)&v31 - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFIndex v13 = __error();
    uint64_t v14 = (_DWORD *)_os_log_pack_fill( v12,  v11,  *v13,  &_mh_execute_header,  "notify_register_dispatch() failed: %u",  v31);
    *uint64_t v14 = 67109120;
    v14[1] = v8;
    os_log_t v15 = v9;
    uint64_t v16 = v10;
    unsigned int v17 = v12;
LABEL_14:
    __SC_log_send(3LL, v15, v16, v17);
  }

void sub_100044960(const __SCDynamicStore *a1)
{
  if (qword_100079E50) {
    sub_100044EF8();
  }
  CFStringRef ComputerName = SCDynamicStoreKeyCreateComputerName(0LL);
  CFTypeID v3 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, ComputerName);
  CFRelease(ComputerName);
  if (v3)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v3) == TypeID)
    {
      unsigned int Value = (const __CFString *)CFDictionaryGetValue(v3, kSCPropSystemHostName);
      CFTypeID v6 = CFStringGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == v6)
        {
          CFRetain(Value);
          CFRelease(v3);
          os_log_t v7 = sub_10002E39C();
          uint64_t v8 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v7, v8))
          {
            uint64_t v9 = _os_log_pack_size(12LL);
            uint64_t v10 = (char *)&v39 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v11 = __error();
            uint64_t v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "hostname (prefs) = %@");
            *(_DWORD *)uint64_t v12 = 138412290;
            *(void *)(v12 + 4) = Value;
            __SC_log_send(6LL, v7, v8, v10);
          }

          CFIndex v13 = 0LL;
LABEL_35:
          sub_100045024((uint64_t)Value);
          goto LABEL_36;
        }
      }
    }

    CFRelease(v3);
  }

  NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0LL, kSCDynamicStoreDomainState, kSCEntNetIPv4);
  CFPropertyListRef v15 = SCDynamicStoreCopyValue(a1, NetworkGlobalEntity);
  CFRelease(NetworkGlobalEntity);
  if (!v15)
  {
    CFIndex v13 = 0LL;
    goto LABEL_21;
  }

  CFTypeID v16 = CFDictionaryGetTypeID();
  if (CFGetTypeID(v15) != v16) {
    goto LABEL_18;
  }
  CFIndex v13 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)v15, kSCDynamicStorePropNetPrimaryService);
  CFTypeID v17 = CFStringGetTypeID();
  if (!v13)
  {
LABEL_19:
    CFRelease(v15);
LABEL_21:
    ValueAtIndex = 0LL;
    goto LABEL_22;
  }

  if (CFGetTypeID(v13) != v17)
  {
LABEL_18:
    CFIndex v13 = 0LL;
    goto LABEL_19;
  }

  CFRetain(v13);
  CFRelease(v15);
  os_log_t v18 = (const __CFString *)sub_10002E6F8(v13);
  if (v18)
  {
    unsigned int Value = v18;
    os_log_t v19 = sub_10002E39C();
    uint64_t v20 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v19, v20))
    {
      uint64_t v21 = _os_log_pack_size(12LL);
      uint64_t v22 = (char *)&v39 - ((__chkstk_darwin(v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v23 = __error();
      uint64_t v24 = _os_log_pack_fill(v22, v21, *v23, &_mh_execute_header, "hostname (DHCP) = %@");
      *(_DWORD *)uint64_t v24 = 138412290;
      *(void *)(v24 + 4) = Value;
      __SC_log_send(6LL, v19, v20, v22);
    }

    goto LABEL_35;
  }

  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  kSCDynamicStoreDomainState,  v13,  kSCEntNetIPv4);
  CFPropertyListRef v15 = SCDynamicStoreCopyValue(a1, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  if (!v15) {
    goto LABEL_21;
  }
  CFTypeID v35 = CFDictionaryGetTypeID();
  if (CFGetTypeID(v15) != v35) {
    goto LABEL_19;
  }
  uint64_t v36 = CFDictionaryGetValue((CFDictionaryRef)v15, kSCPropNetIPv4Addresses);
  CFTypeID v37 = CFArrayGetTypeID();
  if (!v36) {
    goto LABEL_19;
  }
  if (CFGetTypeID(v36) != v37) {
    goto LABEL_19;
  }
  if (CFArrayGetCount((CFArrayRef)v36) < 1) {
    goto LABEL_19;
  }
  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v36, 0LL);
  CFTypeID v38 = CFStringGetTypeID();
  if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v38) {
    goto LABEL_19;
  }
  CFRetain(ValueAtIndex);
  CFRelease(v15);
  if (!sub_10002E828(v13) && sub_100045498((uint64_t)ValueAtIndex))
  {
    unsigned int Value = 0LL;
    goto LABEL_29;
  }

void sub_100044EAC(id a1, int a2)
{
}

void sub_100044EF8()
{
  if (qword_100079E50)
  {
    os_log_t v0 = sub_10002E39C();
    uint64_t v1 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v0, v1))
    {
      uint64_t v2 = _os_log_pack_size(2LL);
      CFTypeID v3 = (char *)&v5 - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v4 = __error();
      *(_WORD *)_os_log_pack_fill(v3, v2, *v4, &_mh_execute_header, "hostname: ptr query stop") = 0;
      __SC_log_send(6LL, v0, v1, v3);
    }

    SCNetworkReachabilitySetCallback((SCNetworkReachabilityRef)qword_100079E50, 0LL, 0LL);
    SCNetworkReachabilitySetDispatchQueue((SCNetworkReachabilityRef)qword_100079E50, 0LL);
    CFRelease((CFTypeRef)qword_100079E50);
    qword_100079E50 = 0LL;
  }

uint64_t sub_100045024(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (gethostname(v44, 0x100uLL) == -1)
    {
      os_log_t v2 = sub_10002E39C();
      uint64_t v3 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v2, v3))
      {
        uint64_t v4 = _os_log_pack_size(12LL);
        uint64_t v5 = (char *)&v42[-1] - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        CFTypeID v6 = __error();
        uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "gethostname() failed: %s", v41);
        uint64_t v8 = __error();
        uint64_t v9 = strerror(*v8);
        *(_DWORD *)uint64_t v7 = 136315138;
        *(void *)(v7 + 4) = v9;
        __SC_log_send(3LL, v2, v3, v5);
      }

      v44[0] = 0;
    }

    if (!_SC_cfstring_to_cstring(v1, v42, 256LL, 134217984LL))
    {
      os_log_t v10 = sub_10002E39C();
      uint64_t v11 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v10, v11))
      {
        uint64_t v12 = _os_log_pack_size(2LL);
        CFIndex v13 = (char *)&v42[-1] - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v14 = __error();
        *(_WORD *)_os_log_pack_fill( v13,  v12,  *v14,  &_mh_execute_header,  "could not convert [new] hostname") = 0;
        __SC_log_send(5LL, v10, v11, v13);
      }

      LOBYTE(v42[0]) = 0;
    }

    v44[255] = 0;
    char v43 = 0;
    CFTypeID result = strcmp(v44, (const char *)v42);
    if ((_DWORD)result)
    {
      int v15 = strlen((const char *)v42);
      int v16 = sethostname((const char *)v42, v15);
      os_log_t v17 = sub_10002E39C();
      if (v16)
      {
        uint64_t v18 = _SC_syslog_os_log_mapping(3LL);
        CFTypeID result = __SC_log_enabled(3LL, v17, v18);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v19 = _os_log_pack_size(32LL);
        uint64_t v20 = (char *)&v42[-1] - ((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v21 = __error();
        uint64_t v22 = _os_log_pack_fill( v20,  v19,  *v21,  &_mh_execute_header,  "sethostname(%s, %lu) failed: %s",  v41,  v42[0],  (const char *)v42[1]);
        size_t v23 = strlen((const char *)v42);
        uint64_t v24 = __error();
        uint64_t v25 = strerror(*v24);
        *(_DWORD *)uint64_t v22 = 136315650;
        *(void *)(v22 + 4) = v42;
        *(_WORD *)(v22 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
        *(void *)(v22 + 14) = v23;
        *(_WORD *)(v22 + 2pthread_attr_setdetachstate(&v4, 2) = 2080;
        *(void *)(v22 + 24) = v25;
        os_log_t v26 = v17;
        uint64_t v27 = v18;
        uint64_t v28 = v20;
        return __SC_log_send(3LL, v26, v27, v28);
      }

      uint64_t v29 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v17, v29))
      {
        uint64_t v30 = _os_log_pack_size(12LL);
        uint64_t v31 = (char *)&v42[-1] - ((__chkstk_darwin(v30) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v32 = __error();
        uint64_t v33 = _os_log_pack_fill(v31, v30, *v32, &_mh_execute_header, "setting hostname to %s", v41);
        *(_DWORD *)uint64_t v33 = 136315138;
        *(void *)(v33 + 4) = v42;
        __SC_log_send(5LL, v17, v29, v31);
      }

      CFTypeID result = notify_post("com.apple.system.hostname");
      if ((_DWORD)result)
      {
        int v34 = result;
        os_log_t v35 = sub_10002E39C();
        uint64_t v36 = _SC_syslog_os_log_mapping(3LL);
        CFTypeID result = __SC_log_enabled(3LL, v35, v36);
        if ((_DWORD)result)
        {
          uint64_t v37 = _os_log_pack_size(8LL);
          CFTypeID v38 = (char *)&v42[-1] - ((__chkstk_darwin(v37) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v39 = __error();
          CFTypeID v40 = (_DWORD *)_os_log_pack_fill( v38,  v37,  *v39,  &_mh_execute_header,  "notify_post(com.apple.system.hostname) failed: error=%u",  (_DWORD)v41);
          _DWORD *v40 = 67109120;
          v40[1] = v34;
          os_log_t v26 = v35;
          uint64_t v27 = v36;
          uint64_t v28 = v38;
          return __SC_log_send(3LL, v26, v27, v28);
        }
      }
    }
  }

  return result;
}

uint64_t sub_100045498(uint64_t a1)
{
  if (!_SC_cfstring_to_cstring(a1, v20, 64LL, 1536LL))
  {
    os_log_t v4 = sub_10002E39C();
    uint64_t v10 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = __SC_log_enabled(3LL, v4, v10);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v11 = _os_log_pack_size(2LL);
    uint64_t v12 = &v19[-((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    uint64_t v13 = *__error();
    uint64_t v14 = (_WORD *)_os_log_pack_fill(v12, v11, v13, &_mh_execute_header, "could not convert [primary] address string");
LABEL_13:
    *uint64_t v14 = 0;
    __SC_log_send(3LL, v4, v10, v12);
    return 0LL;
  }

  if (!_SC_string_to_sockaddr(v20, 0LL, bytes, 28LL))
  {
    os_log_t v4 = sub_10002E39C();
    uint64_t v10 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = __SC_log_enabled(3LL, v4, v10);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v15 = _os_log_pack_size(2LL);
    uint64_t v12 = &v19[-((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    uint64_t v16 = *__error();
    uint64_t v14 = (_WORD *)_os_log_pack_fill(v12, v15, v16, &_mh_execute_header, "could not convert [primary] address");
    goto LABEL_13;
  }

  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDataRef v2 = CFDataCreate(0LL, bytes, bytes[0]);
  CFDictionarySetValue(Mutable, @"ptr-address", v2);
  CFRelease(v2);
  qword_100079E50 = SCNetworkReachabilityCreateWithOptions(0LL, Mutable);
  CFRelease(Mutable);
  uint64_t v3 = qword_100079E50;
  os_log_t v4 = sub_10002E39C();
  if (!v3)
  {
    uint64_t v10 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = __SC_log_enabled(3LL, v4, v10);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v17 = _os_log_pack_size(2LL);
    uint64_t v12 = &v19[-((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    uint64_t v18 = *__error();
    uint64_t v14 = (_WORD *)_os_log_pack_fill(v12, v17, v18, &_mh_execute_header, "could not resolve [primary] address");
    goto LABEL_13;
  }

  uint64_t v5 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v4, v5))
  {
    uint64_t v6 = _os_log_pack_size(2LL);
    uint64_t v7 = &v19[-((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    uint64_t v8 = __error();
    *(_WORD *)_os_log_pack_fill(v7, v6, *v8, &_mh_execute_header, "hostname: ptr query start") = 0;
    __SC_log_send(6LL, v4, v5, v7);
  }

  gettimeofday((timeval *)&qword_100079E58, 0LL);
  SCNetworkReachabilitySetCallback( (SCNetworkReachabilityRef)qword_100079E50,  (SCNetworkReachabilityCallBack)sub_1000457F4,  0LL);
  SCNetworkReachabilitySetDispatchQueue((SCNetworkReachabilityRef)qword_100079E50, (dispatch_queue_t)qword_100079E40);
  return 1LL;
}

void sub_1000457F4(uint64_t a1, char a2)
{
  __darwin_time_t v4 = v58.tv_sec - qword_100079E58 + ((v58.tv_usec - dword_100079E60) >> 31);
  if (v58.tv_usec >= dword_100079E60) {
    int v5 = v58.tv_usec - dword_100079E60;
  }
  else {
    int v5 = v58.tv_usec - dword_100079E60 + 1000000;
  }
  if ((a2 & 2) == 0)
  {
    os_log_t v6 = sub_10002E39C();
    uint64_t v7 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v6, v7))
    {
      uint64_t v8 = _os_log_pack_size(18LL);
      uint64_t v9 = (char *)&v57 - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v10 = __error();
      uint64_t v11 = _os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "hostname: ptr query complete, host not found (query time = %ld.%3.3d)",  v57,  LODWORD(v58.tv_sec));
      *(_DWORD *)uint64_t v11 = 134218240;
      *(void *)(v11 + 4) = v4;
      *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v11 + 14) = v5 / 1000;
      __SC_log_send(6LL, v6, v7, v9);
    }

LABEL_31:
    int v44 = SCDynamicStoreCopyLocalHostName((SCDynamicStoreRef)qword_100079E48);
    os_log_t v45 = sub_10002E39C();
    uint64_t v46 = _SC_syslog_os_log_mapping(6LL);
    int v47 = __SC_log_enabled(6LL, v45, v46);
    if (v44)
    {
      if (v47)
      {
        uint64_t v48 = _os_log_pack_size(12LL);
        CFTypeID v49 = (char *)&v57 - ((__chkstk_darwin(v48) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v50 = __error();
        uint64_t v51 = _os_log_pack_fill(v49, v48, *v50, &_mh_execute_header, "hostname (multicast DNS) = %@");
        *(_DWORD *)uint64_t v51 = 138412290;
        *(void *)(v51 + 4) = v44;
        __SC_log_send(6LL, v45, v46, v49);
      }

      MutableCFDictionaryRef Copy = CFStringCreateMutableCopy(0LL, 0LL, v44);
      if (!MutableCopy) {
        sub_100061E00();
      }
      uint64_t v53 = MutableCopy;
      CFStringAppend(MutableCopy, @".local");
      sub_100045024((uint64_t)v53);
      CFRelease(v53);
      CFRelease(v44);
    }

    else
    {
      if (v47)
      {
        uint64_t v54 = _os_log_pack_size(2LL);
        CFIndex v55 = (char *)&v57 - ((__chkstk_darwin(v54) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        os_log_t v56 = __error();
        *(_WORD *)_os_log_pack_fill(v55, v54, *v56, &_mh_execute_header, "hostname (localhost)") = 0;
        __SC_log_send(6LL, v45, v46, v55);
      }

      sub_100045024((uint64_t)@"localhost");
    }

LABEL_39:
    sub_100044EF8();
    return;
  }

  uint64_t v12 = (const __CFArray *)SCNetworkReachabilityCopyResolvedAddress(a1, (char *)&v57 + 4);
  if (v12)
  {
    uint64_t v13 = v12;
    CFIndex Count = CFArrayGetCount(v12);
    os_log_t v15 = sub_10002E39C();
    uint64_t v16 = _SC_syslog_os_log_mapping(6LL);
    int v17 = __SC_log_enabled(6LL, v15, v16);
    if (Count < 1)
    {
      if (v17)
      {
        uint64_t v32 = _os_log_pack_size(18LL);
        uint64_t v33 = (char *)&v57 - ((__chkstk_darwin(v32) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v34 = __error();
        uint64_t v35 = _os_log_pack_fill( v33,  v32,  *v34,  &_mh_execute_header,  "hostname: ptr query complete w/no hosts (query time = %ld.%3.3d)",  v57,  LODWORD(v58.tv_sec));
        *(_DWORD *)uint64_t v35 = 134218240;
        *(void *)(v35 + 4) = v4;
        *(_WORD *)(v35 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
        *(_DWORD *)(v35 + 14) = v5 / 1000;
        __SC_log_send(6LL, v15, v16, v33);
      }

      CFRelease(v13);
      goto LABEL_31;
    }

    if (v17)
    {
      uint64_t v18 = _os_log_pack_size(18LL);
      uint64_t v19 = (char *)&v57 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v20 = __error();
      uint64_t v21 = _os_log_pack_fill( v19,  v18,  *v20,  &_mh_execute_header,  "hostname: ptr query complete (query time = %ld.%3.3d)",  v57,  LODWORD(v58.tv_sec));
      *(_DWORD *)uint64_t v21 = 134218240;
      *(void *)(v21 + 4) = v4;
      *(_WORD *)(v21 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v21 + 14) = v5 / 1000;
      __SC_log_send(6LL, v15, v16, v19);
    }

    uint64_t v22 = _SCPreferencesCopyComputerName(0LL, 0LL);
    if (v22)
    {
      size_t v23 = (const __CFString *)v22;
      if (_SC_CFStringIsValidDNSName())
      {
        if ((unint64_t)CFStringFind(v23, @".", 0LL).length)
        {
          CFIndex v24 = 0LL;
          while (1)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, v24);
            if (CFStringCompare(ValueAtIndex, v23, 1uLL) == kCFCompareEqualTo) {
              break;
            }
            if (Count == ++v24) {
              goto LABEL_17;
            }
          }
        }

        else
        {
          ValueAtIndex = sub_100045F08(v13, Count, v23);
        }

        CFRelease(v23);
        if (ValueAtIndex)
        {
LABEL_28:
          os_log_t v38 = sub_10002E39C();
          uint64_t v39 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v38, v39))
          {
            uint64_t v40 = _os_log_pack_size(12LL);
            uint64_t v41 = (char *)&v57 - ((__chkstk_darwin(v40) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            unsigned int v42 = __error();
            uint64_t v43 = _os_log_pack_fill( v41,  v40,  *v42,  &_mh_execute_header,  "hostname (reverse DNS query) = %@");
            *(_DWORD *)uint64_t v43 = 138412290;
            *(void *)(v43 + 4) = ValueAtIndex;
            __SC_log_send(6LL, v38, v39, v41);
          }

          sub_100045024((uint64_t)ValueAtIndex);
          CFRelease(v13);
          if (ValueAtIndex) {
            goto LABEL_39;
          }
          goto LABEL_31;
        }
      }

      else
      {
LABEL_17:
        CFRelease(v23);
      }
    }

    uint64_t v36 = SCDynamicStoreCopyLocalHostName((SCDynamicStoreRef)qword_100079E48);
    if (!v36 || (uint64_t v37 = v36, ValueAtIndex = sub_100045F08(v13, Count, v36), CFRelease(v37), !ValueAtIndex)) {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, 0LL);
    }
    goto LABEL_28;
  }

  os_log_t v26 = sub_10002E39C();
  uint64_t v27 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v26, v27))
  {
    uint64_t v28 = _os_log_pack_size(18LL);
    uint64_t v29 = (char *)&v57 - ((__chkstk_darwin(v28) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v30 = __error();
    uint64_t v31 = _os_log_pack_fill( v29,  v28,  *v30,  &_mh_execute_header,  "hostname: ptr query reply w/no hosts (query time = %ld.%3.3d)",  v57,  LODWORD(v58.tv_sec));
    *(_DWORD *)uint64_t v31 = 134218240;
    *(void *)(v31 + 4) = v4;
    *(_WORD *)(v31 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v31 + 14) = v5 / 1000;
    __SC_log_send(6LL, v26, v27, v29);
  }

CFStringRef sub_100045F08(CFArrayRef theArray, uint64_t a2, const __CFString *a3)
{
  if (a2 < 1) {
    return 0LL;
  }
  CFIndex v6 = 0LL;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v6);
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, ValueAtIndex, @".");
    if (ArrayBySeparatingStrings)
    {
      uint64_t v9 = ArrayBySeparatingStrings;
      uint64_t v10 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0LL);
      CFComparisonResult v11 = CFStringCompare(v10, a3, 1uLL);
      CFRelease(v9);
      if (v11 == kCFCompareEqualTo) {
        break;
      }
    }

    if (a2 == ++v6) {
      return 0LL;
    }
  }

  return ValueAtIndex;
}

uint64_t sub_100045FEC(CFStringRef theString, void *a2)
{
  if (qword_100079E70 != -1) {
    dispatch_once(&qword_100079E70, &stru_100072DC0);
  }
  *a2 = 0LL;
  if (!CFStringHasPrefix(theString, (CFStringRef)qword_100079E68)
    || !CFStringHasSuffix(theString, kSCEntNetNAT64PrefixRequest))
  {
    return 0LL;
  }

  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, theString, @"/");
  if (CFArrayGetCount(ArrayBySeparatingStrings) == 5)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3LL);
    *a2 = ValueAtIndex;
    CFRetain(ValueAtIndex);
    uint64_t v6 = 1LL;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  CFRelease(ArrayBySeparatingStrings);
  return v6;
}

void sub_1000460F0(id a1)
{
  qword_100079E68 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0LL, kSCDynamicStoreDomainState);
}

void sub_100046150(__CFArray *a1)
{
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  kSCCompAnyRegex,  kSCEntNetNAT64PrefixRequest);
  CFArrayAppendValue(a1, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

void sub_1000461E0(CFTypeRef cf, CFTypeRef a2, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  v6[2] = sub_1000462D0;
  v6[3] = &unk_100072DE0;
  v6[4] = cf;
  v6[5] = a2;
  v6[6] = a3;
  if (qword_100079E80 != -1) {
    dispatch_once(&qword_100079E80, &stru_100072E60);
  }
  dispatch_async((dispatch_queue_t)qword_100079E88, v6);
}

void sub_1000462D0(void *a1)
{
  os_log_t v2 = sub_10002E39C();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(32LL);
    int v5 = (char *)&v17 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "NAT64 requests %@ updates %@ cancellations %@");
    uint64_t v8 = a1[4];
    uint64_t v9 = a1[5];
    uint64_t v10 = a1[6];
    *(_DWORD *)uint64_t v7 = 138412802;
    *(void *)(v7 + 4) = v8;
    *(_WORD *)(v7 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v7 + 14) = v9;
    *(_WORD *)(v7 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v7 + 24) = v10;
    __SC_log_send(7LL, v2, v3, v5);
  }

  CFComparisonResult v11 = (const __CFSet *)a1[4];
  uint64_t v12 = (const __CFSet *)a1[5];
  uint64_t v13 = (const __CFSet *)a1[6];
  if (v13) {
    CFSetApplyFunction(v13, (CFSetApplierFunction)sub_100046464, 0LL);
  }
  if (v12) {
    CFSetApplyFunction(v12, (CFSetApplierFunction)sub_100046684, 0LL);
  }
  if (v11) {
    CFSetApplyFunction(v11, (CFSetApplierFunction)sub_1000468A8, 0LL);
  }
  uint64_t v14 = (const void *)a1[4];
  if (v14) {
    CFRelease(v14);
  }
  os_log_t v15 = (const void *)a1[5];
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = (const void *)a1[6];
  if (v16) {
    CFRelease(v16);
  }
}

void sub_100046464(CFTypeRef cf1)
{
  os_log_t v2 = &qword_100079E78;
  while (1)
  {
    os_log_t v2 = (uint64_t *)*v2;
    if (!v2) {
      break;
    }
    if (CFEqual(cf1, (CFTypeRef)v2[4]))
    {
      os_log_t v3 = sub_10002E39C();
      uint64_t v4 = _SC_syslog_os_log_mapping(7LL);
      if (__SC_log_enabled(7LL, v3, v4))
      {
        uint64_t v5 = _os_log_pack_size(22LL);
        uint64_t v6 = (char *)v16 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v7 = __error();
        uint64_t v8 = _os_log_pack_fill( v6,  v5,  *v7,  &_mh_execute_header,  "%s %s: removing NAT64 request",  v16[0],  v16[1]);
        uint64_t v9 = v2[3];
        *(_DWORD *)uint64_t v8 = 136315394;
        *(void *)(v8 + 4) = v9;
        *(_WORD *)(v8 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
        *(void *)(v8 + 14) = "_nat64_process_cancel_request";
        __SC_log_send(7LL, v3, v4, v6);
      }

      sub_100046950(v2[3], 0, 0LL);
      sub_100046EBC((uint64_t)v2);
      sub_10004700C((uint64_t)v2);
      return;
    }
  }

  os_log_t v10 = sub_10002E39C();
  uint64_t v11 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v10, v11))
  {
    uint64_t v12 = _os_log_pack_size(22LL);
    uint64_t v13 = (char *)v16 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v14 = __error();
    uint64_t v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%@ %s: no active NAT64 request");
    *(_DWORD *)uint64_t v15 = 138412546;
    *(void *)(v15 + 4) = cf1;
    *(_WORD *)(v15 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v15 + 14) = "_nat64_process_cancel_request";
    __SC_log_send(7LL, v10, v11, v13);
  }

void *sub_100046684(CFTypeRef cf1)
{
  os_log_t v2 = &qword_100079E78;
  while (1)
  {
    os_log_t v2 = (uint64_t *)*v2;
    if (!v2) {
      break;
    }
    if (CFEqual(cf1, (CFTypeRef)v2[4]))
    {
      os_log_t v3 = sub_10002E39C();
      uint64_t v4 = _SC_syslog_os_log_mapping(6LL);
      if (__SC_log_enabled(6LL, v3, v4))
      {
        uint64_t v5 = _os_log_pack_size(22LL);
        uint64_t v6 = (char *)&v16 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v7 = __error();
        uint64_t v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "%@: %s");
        *(_DWORD *)uint64_t v8 = 138412546;
        *(void *)(v8 + 4) = cf1;
        *(_WORD *)(v8 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
        *(void *)(v8 + 14) = "_nat64_process_prefix_update";
        __SC_log_send(6LL, v3, v4, v6);
      }

      sub_100046EBC((uint64_t)v2);
      sub_10004700C((uint64_t)v2);
      uint64_t result = sub_100047458(cf1);
      if (result) {
        return (void *)sub_100047784((uint64_t)result);
      }
      return result;
    }
  }

  os_log_t v10 = sub_10002E39C();
  uint64_t v11 = _SC_syslog_os_log_mapping(7LL);
  uint64_t result = (void *)__SC_log_enabled(7LL, v10, v11);
  if ((_DWORD)result)
  {
    uint64_t v12 = _os_log_pack_size(22LL);
    uint64_t v13 = (char *)&v16 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v14 = __error();
    uint64_t v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%@ %s: no existing request");
    *(_DWORD *)uint64_t v15 = 138412546;
    *(void *)(v15 + 4) = cf1;
    *(_WORD *)(v15 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v15 + 14) = "_nat64_process_prefix_update";
    return (void *)__SC_log_send(7LL, v10, v11, v13);
  }

  return result;
}

uint64_t sub_1000468A8(CFTypeRef cf1)
{
  os_log_t v2 = &qword_100079E78;
  while (1)
  {
    os_log_t v2 = (uint64_t *)*v2;
    if (!v2) {
      break;
    }
    uint64_t result = CFEqual(cf1, (CFTypeRef)v2[4]);
    if ((_DWORD)result) {
      return result;
    }
  }

  uint64_t result = (uint64_t)sub_100047458(cf1);
  if (result) {
    return sub_100047784(result);
  }
  return result;
}

int *sub_100046950(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v55 = a1;
  __strlcpy_chk(v58, a1, 16LL, 16LL);
  HIDWORD(v53) = a2;
  if (a2)
  {
    if (a2 >= 1)
    {
      unint64_t v6 = 0LL;
      uint64_t v7 = HIDWORD(v53);
      uint64_t v8 = v59;
      *(void *)&__int128 v5 = 136315650LL;
      __int128 v54 = v5;
      do
      {
        __int16 v57 = 0;
        memset(v56, 0, sizeof(v56));
        nw_nat64_write_prefix_to_string(a3, v56, 50LL);
        os_log_t v9 = sub_10002E39C();
        uint64_t v10 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v9, v10))
        {
          uint64_t v11 = _os_log_pack_size(28LL);
          uint64_t v12 = (char *)&v52 - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v13 = __error();
          uint64_t v14 = _os_log_pack_fill( v12,  v11,  *v13,  &_mh_execute_header,  "%s: nat64 prefix[%d] = %s",  v52,  (_DWORD)v53,  (const char *)v54);
          *(_DWORD *)uint64_t v14 = v54;
          *(void *)(v14 + 4) = v55;
          *(_WORD *)(v14 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
          *(_DWORD *)(v14 + 14) = v6;
          *(_WORD *)(v14 + 18) = 2080;
          *(void *)(v14 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v56;
          __SC_log_send(5LL, v9, v10, v12);
        }

        if (v6 <= 3)
        {
          *uint64_t v8 = *(_DWORD *)a3;
          *((void *)v8 - pthread_attr_setdetachstate(&v4, 2) = *(void *)(a3 + 4);
          *(v8 - pthread_attr_setdetachstate(&v4, 2) = *(_DWORD *)(a3 + 12);
        }

        ++v6;
        a3 += 16LL;
        v8 += 5;
      }

      while (v7 != v6);
    }
  }

  else
  {
    os_log_t v15 = sub_10002E39C();
    uint64_t v16 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v15, v16))
    {
      uint64_t v17 = _os_log_pack_size(12LL);
      uint64_t v18 = (char *)&v52 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v19 = __error();
      uint64_t v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "%s: nat64 prefix unavailable", v52);
      *(_DWORD *)uint64_t v20 = 136315138;
      *(void *)(v20 + 4) = v55;
      __SC_log_send(5LL, v15, v16, v18);
    }
  }

  int v21 = socket(2, 2, 0);
  if (v21 == -1)
  {
    os_log_t v36 = sub_10002E39C();
    uint64_t v37 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = (int *)__SC_log_enabled(3LL, v36, v37);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v38 = _os_log_pack_size(12LL);
    uint64_t v39 = (char *)&v52 - ((__chkstk_darwin(v38) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v40 = __error();
    uint64_t v41 = _os_log_pack_fill(v39, v38, *v40, &_mh_execute_header, "socket() failed: %s", v52);
    unsigned int v42 = __error();
    uint64_t v43 = strerror(*v42);
    *(_DWORD *)uint64_t v41 = 136315138;
    *(void *)(v41 + 4) = v43;
    uint64_t v32 = 3LL;
    os_log_t v33 = v36;
    uint64_t v34 = v37;
    uint64_t v35 = v39;
    return (int *)__SC_log_send(v32, v33, v34, v35);
  }

  int v22 = v21;
  int v23 = ioctl(v21, 0xC06069C2uLL, v58);
  close(v22);
  if (v23 != -1)
  {
    os_log_t v24 = sub_10002E39C();
    uint64_t v25 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = (int *)__SC_log_enabled(5LL, v24, v25);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v27 = _os_log_pack_size(22LL);
    uint64_t v28 = (char *)&v52 - ((__chkstk_darwin(v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v29 = __error();
    uint64_t v30 = _os_log_pack_fill(v28, v27, *v29, &_mh_execute_header, "%s: nat64 prefix%s updated", v52, v53);
    uint64_t v31 = "es";
    if (HIDWORD(v53) == 1) {
      uint64_t v31 = "";
    }
    *(_DWORD *)uint64_t v30 = 136315394;
    *(void *)(v30 + 4) = v55;
    *(_WORD *)(v30 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v30 + 14) = v31;
    uint64_t v32 = 5LL;
    os_log_t v33 = v24;
    uint64_t v34 = v25;
    uint64_t v35 = v28;
    return (int *)__SC_log_send(v32, v33, v34, v35);
  }

  uint64_t result = __error();
  if (HIDWORD(v53) || *result != 2)
  {
    os_log_t v44 = sub_10002E39C();
    uint64_t v45 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = (int *)__SC_log_enabled(3LL, v44, v45);
    if ((_DWORD)result)
    {
      uint64_t v46 = _os_log_pack_size(22LL);
      int v47 = (char *)&v52 - ((__chkstk_darwin(v46) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v48 = __error();
      uint64_t v49 = _os_log_pack_fill( v47,  v46,  *v48,  &_mh_execute_header,  "%s: ioctl(SIOCSIFNAT64PREFIX) failed: %s",  v52,  v53);
      int v50 = __error();
      uint64_t v51 = strerror(*v50);
      *(_DWORD *)uint64_t v49 = 136315394;
      *(void *)(v49 + 4) = v55;
      *(_WORD *)(v49 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v49 + 14) = v51;
      uint64_t v32 = 3LL;
      os_log_t v33 = v44;
      uint64_t v34 = v45;
      uint64_t v35 = v47;
      return (int *)__SC_log_send(v32, v33, v34, v35);
    }
  }

  return result;
}

void sub_100046EBC(uint64_t a1)
{
  os_log_t v2 = sub_10002E39C();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(22LL);
    __int128 v5 = (char *)v11 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    unint64_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%s: %s", v11[0], v11[1]);
    uint64_t v8 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t v7 = 136315394;
    *(void *)(v7 + 4) = v8;
    *(_WORD *)(v7 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v7 + 14) = "NAT64PrefixRequestInvalidate";
    __SC_log_send(7LL, v2, v3, v5);
  }

  sub_10004731C(a1);
  __int16 v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 1) != 0)
  {
    *(_WORD *)(a1 + 48) = v9 & 0xFFFE;
    uint64_t v10 = *(void *)a1;
    if (*(void *)a1) {
      *(void *)(v10 + 8) = *(void *)(a1 + 8);
    }
    **(void **)(a1 + 8) = v10;
  }

void sub_10004700C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 44);
  if (v2)
  {
    *(_DWORD *)(a1 + 44) = v2 - 1;
    os_log_t v3 = sub_10002E39C();
    uint64_t v4 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v3, v4))
    {
      uint64_t v5 = _os_log_pack_size(38LL);
      unint64_t v6 = (char *)&v26 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v7 = __error();
      uint64_t v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "%s: %s %p %u", v26, v27, v28, v29);
      uint64_t v9 = *(void *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)uint64_t v8 = 136315906;
      *(void *)(v8 + 4) = v9;
      *(_WORD *)(v8 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v8 + 14) = "NAT64PrefixRequestRelease";
      *(_WORD *)(v8 + 2pthread_attr_setdetachstate(&v4, 2) = 2048;
      *(void *)(v8 + 24) = a1;
      *(_WORD *)(v8 + 3pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v8 + 34) = v10;
      __SC_log_send(7LL, v3, v4, v6);
    }

    if (!*(_DWORD *)(a1 + 44))
    {
      sub_100046EBC(a1);
      os_log_t v11 = sub_10002E39C();
      uint64_t v12 = _SC_syslog_os_log_mapping(7LL);
      if (__SC_log_enabled(7LL, v11, v12))
      {
        uint64_t v13 = _os_log_pack_size(32LL);
        uint64_t v14 = (char *)&v26 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        os_log_t v15 = __error();
        uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "%s %s: deallocate %p",  v26,  v27,  v28);
        uint64_t v17 = *(void *)(a1 + 24);
        *(_DWORD *)uint64_t v16 = 136315650;
        *(void *)(v16 + 4) = v17;
        *(_WORD *)(v16 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
        *(void *)(v16 + 14) = "NAT64PrefixRequestRelease";
        *(_WORD *)(v16 + 2pthread_attr_setdetachstate(&v4, 2) = 2048;
        *(void *)(v16 + 24) = a1;
        __SC_log_send(7LL, v11, v12, v14);
      }

      uint64_t v18 = *(const void **)(a1 + 32);
      if (v18)
      {
        CFRelease(v18);
        *(void *)(a1 + 3pthread_attr_setdetachstate(&v4, 2) = 0LL;
      }

      uint64_t v19 = *(void **)(a1 + 24);
      if (v19) {
        CFAllocatorDeallocate(0LL, v19);
      }
      free((void *)a1);
    }
  }

  else
  {
    os_log_t v20 = sub_10002E39C();
    uint64_t v21 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v20, v21))
    {
      uint64_t v22 = _os_log_pack_size(22LL);
      int v23 = (char *)&v26 - ((__chkstk_darwin(v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v24 = __error();
      uint64_t v25 = _os_log_pack_fill( v23,  v22,  *v24,  &_mh_execute_header,  "%s: retain count is zero %p",  v26,  v27);
      *(_DWORD *)uint64_t v25 = 136315394;
      *(void *)(v25 + 4) = "NAT64PrefixRequestRelease";
      *(_WORD *)(v25 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
      *(void *)(v25 + 14) = a1;
      __SC_log_send(3LL, v20, v21, v23);
    }
  }

void sub_10004731C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    os_log_t v2 = sub_10002E39C();
    uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v2, v3))
    {
      uint64_t v4 = _os_log_pack_size(22LL);
      uint64_t v5 = (char *)v9 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      unint64_t v6 = __error();
      uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%s: %s", v9[0], v9[1]);
      uint64_t v8 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t v7 = 136315394;
      *(void *)(v7 + 4) = v8;
      *(_WORD *)(v7 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v7 + 14) = "NAT64PrefixRequestStopResolver";
      __SC_log_send(7LL, v2, v3, v5);
    }

    nw_nat64_prefixes_resolver_cancel(*(void *)(a1 + 16));
    nw_release(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
  }

void *sub_100047458(const void *a1)
{
  uint64_t v2 = _SC_cfstring_to_cstring(a1, 0LL, 0LL, 1536LL);
  if (!v2)
  {
    os_log_t v15 = sub_10002E39C();
    uint64_t v16 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v15, v16))
    {
      uint64_t v17 = _os_log_pack_size(12LL);
      uint64_t v18 = (char *)&v28 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v19 = __error();
      uint64_t v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "%@: could not convert interface name");
      *(_DWORD *)uint64_t v20 = 138412290;
      *(void *)(v20 + 4) = a1;
      __SC_log_send(3LL, v15, v16, v18);
    }

    return 0LL;
  }

  uint64_t v3 = (void *)v2;
  int v4 = sub_100028D68(v2);
  if (!v4)
  {
    os_log_t v21 = sub_10002E39C();
    uint64_t v22 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v21, v22))
    {
      uint64_t v23 = _os_log_pack_size(12LL);
      os_log_t v24 = (char *)&v28 - ((__chkstk_darwin(v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v25 = __error();
      uint64_t v26 = _os_log_pack_fill(v24, v23, *v25, &_mh_execute_header, "%s: interface does not exist", v28);
      *(_DWORD *)uint64_t v26 = 136315138;
      *(void *)(v26 + 4) = v3;
      __SC_log_send(5LL, v21, v22, v24);
    }

    CFAllocatorDeallocate(0LL, v3);
    return 0LL;
  }

  int v5 = v4;
  unint64_t v6 = malloc(0x38uLL);
  os_log_t v7 = sub_10002E39C();
  uint64_t v8 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v7, v8))
  {
    uint64_t v9 = _os_log_pack_size(32LL);
    int v10 = (char *)&v28 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v11 = __error();
    uint64_t v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "%@: %s %p");
    *(_DWORD *)uint64_t v12 = 138412802;
    *(void *)(v12 + 4) = a1;
    *(_WORD *)(v12 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v12 + 14) = "NAT64PrefixRequestCreate";
    *(_WORD *)(v12 + 2pthread_attr_setdetachstate(&v4, 2) = 2048;
    *(void *)(v12 + 24) = v6;
    __SC_log_send(7LL, v7, v8, v10);
  }

  v6[6] = 0LL;
  *((_OWORD *)v6 + pthread_attr_setscope(&v4, 1) = 0u;
  *((_OWORD *)v6 + pthread_attr_setdetachstate(&v4, 2) = 0u;
  *(_OWORD *)unint64_t v6 = 0u;
  CFTypeRef v13 = CFRetain(a1);
  v6[3] = v3;
  v6[4] = v13;
  *((_DWORD *)v6 + 1sub_10000F430((uint64_t)__str, 0) = v5;
  uint64_t v14 = qword_100079E78;
  *unint64_t v6 = qword_100079E78;
  if (v14) {
    *(void *)(v14 + 8) = v6;
  }
  qword_100079E78 = (uint64_t)v6;
  v6[1] = &qword_100079E78;
  *((_WORD *)v6 + 24) |= 1u;
  sub_100047A38((uint64_t)v6);
  return v6;
}

uint64_t sub_100047784(uint64_t a1)
{
  os_log_t v2 = sub_10002E39C();
  uint64_t v3 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(22LL);
    int v5 = (char *)&v19 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    unint64_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%s: %s", v19, v20);
    uint64_t v8 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t v7 = 136315394;
    *(void *)(v7 + 4) = v8;
    *(_WORD *)(v7 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v7 + 14) = "NAT64PrefixRequestStart";
    __SC_log_send(6LL, v2, v3, v5);
  }

  if (*(void *)(a1 + 16))
  {
    os_log_t v9 = sub_10002E39C();
    uint64_t v10 = _SC_syslog_os_log_mapping(7LL);
    uint64_t result = __SC_log_enabled(7LL, v9, v10);
    if ((_DWORD)result)
    {
      uint64_t v12 = _os_log_pack_size(22LL);
      CFTypeRef v13 = (char *)&v19 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v14 = __error();
      uint64_t v15 = _os_log_pack_fill( v13,  v12,  *v14,  &_mh_execute_header,  "%s %s: resolver is already active",  v19,  v20);
      uint64_t v16 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t v15 = 136315394;
      *(void *)(v15 + 4) = v16;
      *(_WORD *)(v15 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v15 + 14) = "NAT64PrefixRequestStart";
      return __SC_log_send(7LL, v9, v10, v13);
    }
  }

  else
  {
    uint64_t result = sub_100047B80(*(unsigned int *)(a1 + 40));
    if (result)
    {
      uint64_t v17 = result;
      sub_100047A38(a1);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 0x40000000LL;
      v25[2] = sub_100047CF8;
      v25[3] = &unk_100072E00;
      v25[4] = a1;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      uint64_t v19 = (const char *)_NSConcreteStackBlock;
      uint64_t v20 = (const char *)0x40000000;
      os_log_t v21 = sub_100047E00;
      uint64_t v22 = &unk_100072E20;
      uint64_t v23 = a1;
      CFAbsoluteTime v24 = Current;
      nw_nat64_prefixes_resolver_set_cancel_handler(v17, v25);
      if (qword_100079E80 != -1) {
        dispatch_once(&qword_100079E80, &stru_100072E60);
      }
      nw_nat64_prefixes_resolver_set_update_handler(v17, qword_100079E88, &v19);
      uint64_t result = nw_nat64_prefixes_resolver_start(v17);
      *(void *)(a1 + 16) = v17;
    }
  }

  return result;
}

uint64_t sub_100047A38(uint64_t a1)
{
  os_log_t v2 = sub_10002E39C();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  uint64_t result = __SC_log_enabled(7LL, v2, v3);
  if ((_DWORD)result)
  {
    uint64_t v5 = _os_log_pack_size(38LL);
    unint64_t v6 = (char *)v11 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v7 = __error();
    uint64_t v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "%s: %s %p %u", v11[0], v11[1], v11[2], v12);
    uint64_t v9 = *(void *)(a1 + 24);
    int v10 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)uint64_t v8 = 136315906;
    *(void *)(v8 + 4) = v9;
    *(_WORD *)(v8 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v8 + 14) = "NAT64PrefixRequestRetain";
    *(_WORD *)(v8 + 2pthread_attr_setdetachstate(&v4, 2) = 2048;
    *(void *)(v8 + 24) = a1;
    *(_WORD *)(v8 + 3pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v8 + 34) = v10;
    return __SC_log_send(7LL, v2, v3, v6);
  }

  return result;
}

uint64_t sub_100047B80(uint64_t a1)
{
  os_log_t v2 = nw_parameters_create();
  uint64_t v3 = (nw_interface *)nw_interface_create_with_index(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    nw_parameters_require_interface(v2, v3);
    nw_parameters_set_required_address_family(v2, 30LL);
    nw_release(v4);
    uint64_t v5 = nw_nat64_prefixes_resolver_create(v2);
    nw_release(v2);
    return v5;
  }

  else
  {
    os_log_t v7 = sub_10002E39C();
    uint64_t v8 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v7, v8))
    {
      uint64_t v9 = _os_log_pack_size(8LL);
      int v10 = (char *)&v13 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v11 = __error();
      uint64_t v12 = (_DWORD *)_os_log_pack_fill( v10,  v9,  *v11,  &_mh_execute_header,  "nw_interface_create_with_index(%u) failed",  v13);
      _DWORD *v12 = 67109120;
      v12[1] = a1;
      __SC_log_send(5LL, v7, v8, v10);
    }

    return 0LL;
  }

void sub_100047CF8(uint64_t a1)
{
  os_log_t v2 = sub_10002E39C();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(12LL);
    uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    unint64_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%s: NAT64 resolver cancelled", v9);
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 24LL);
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = v8;
    __SC_log_send(7LL, v2, v3, v5);
  }

  sub_10004700C(*(void *)(a1 + 32));
}

void sub_100047E00(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if ((*(_WORD *)(v4 + 48) & 1) != 0)
  {
    if (a3)
    {
      sub_100046950(*(void *)(v4 + 24), a2, a3);
    }

    else
    {
      os_log_t v15 = sub_10002E39C();
      uint64_t v16 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v15, v16))
      {
        uint64_t v17 = _os_log_pack_size(12LL);
        uint64_t v18 = (char *)v22 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v19 = __error();
        uint64_t v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "%s: NAT64 no prefixes", v22[0]);
        uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 24LL);
        *(_DWORD *)uint64_t v20 = 136315138;
        *(void *)(v20 + 4) = v21;
        __SC_log_send(3LL, v15, v16, v18);
      }
    }

    sub_100048030(*(CFStringRef *)(*(void *)(a1 + 32) + 32LL), a2, a3, *(CFAbsoluteTime *)(a1 + 40));
    if (a3)
    {
      sub_100046EBC(*(void *)(a1 + 32));
      sub_10004700C(*(void *)(a1 + 32));
    }
  }

  else
  {
    os_log_t v5 = sub_10002E39C();
    uint64_t v6 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v5, v6))
    {
      uint64_t v7 = _os_log_pack_size(22LL);
      uint64_t v8 = (char *)v22 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v9 = __error();
      uint64_t v10 = _os_log_pack_fill( v8,  v7,  *v9,  &_mh_execute_header,  "%s: NAT64 request is stale %p",  v22[0],  v22[1]);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(v11 + 24);
      *(_DWORD *)uint64_t v10 = 136315394;
      *(void *)(v10 + 4) = v12;
      *(_WORD *)(v10 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
      *(void *)(v10 + 14) = v11;
      __SC_log_send(6LL, v5, v6, v8);
    }
  }

void sub_100048030(CFStringRef ifname, unsigned int a2, uint64_t a3, CFAbsoluteTime a4)
{
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  ifname,  kSCEntNetNAT64);
  if ((a2 & 0x80000000) != 0)
  {
    SCDynamicStoreRemoveValue(0LL, NetworkInterfaceEntity);
  }

  else
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (a2)
    {
      uint64_t v10 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      uint64_t v11 = a2;
      do
      {
        __int16 v25 = 0;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        *(_OWORD *)cStr = 0u;
        nw_nat64_write_prefix_to_string(a3, cStr, 50LL);
        CFStringRef v12 = CFStringCreateWithCString(0LL, cStr, 0x600u);
        CFArrayAppendValue(v10, v12);
        CFRelease(v12);
        a3 += 16LL;
        --v11;
      }

      while (v11);
      CFDictionarySetValue(Mutable, kSCPropNetNAT64PrefixList, v10);
      CFRelease(v10);
    }

    CFDateRef v13 = CFDateCreate(0LL, a4);
    CFDictionarySetValue(Mutable, kSCPropNetNAT64PLATDiscoveryStartTime, v13);
    CFRelease(v13);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v15 = CFDateCreate(0LL, Current);
    CFDictionarySetValue(Mutable, kSCPropNetNAT64PLATDiscoveryCompletionTime, v15);
    CFRelease(v15);
    SCDynamicStoreSetValue(0LL, NetworkInterfaceEntity, Mutable);
    os_log_t v16 = sub_10002E39C();
    uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v16, v17))
    {
      uint64_t v18 = _os_log_pack_size(22LL);
      uint64_t v19 = &cStr[-((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      uint64_t v20 = __error();
      uint64_t v21 = _os_log_pack_fill(v19, v18, *v20, &_mh_execute_header, "%@: PLAT discovery complete %@");
      *(_DWORD *)uint64_t v21 = 138412546;
      *(void *)(v21 + 4) = ifname;
      *(_WORD *)(v21 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v21 + 14) = Mutable;
      __SC_log_send(5LL, v16, v17, v19);
    }

    CFRelease(Mutable);
  }

  CFRelease(NetworkInterfaceEntity);
}

void sub_1000482D0(id a1)
{
  qword_100079E88 = (uint64_t)dispatch_queue_create("nat64 prefix request queue", 0LL);
}

void sub_1000483F4(_Unwind_Exception *a1)
{
}

void sub_100048408(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AgentController);
  os_log_t v2 = (void *)qword_100079E90;
  qword_100079E90 = (uint64_t)v1;
}

LABEL_49:
        }

        unsigned int v42 = [obj countByEnumeratingWithState:&v123 objects:v122 count:16];
      }

      while (v42);
    }

    uint64_t v120 = 0u;
    int v121 = 0u;
    uint64_t v118 = 0u;
    int v119 = 0u;
    uint64_t v20 = v107;
    __int16 v57 = [v20 countByEnumeratingWithState:&v118 objects:v117 count:16];
    CFTypeID v108 = v20;
    if (v57)
    {
      timeval v58 = v57;
      unint64_t v59 = *(void *)v119;
      do
      {
        for (CFIndex k = 0LL; k != v58; CFIndex k = (char *)k + 1)
        {
          if (*(void *)v119 != v59) {
            objc_enumerationMutation(v108);
          }
          BOOL v61 = *(void **)(*((void *)&v118 + 1) + 8LL * (void)k);
          int v62 = sub_10002E39C();
          int v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
          CFStringRef v64 = _SC_syslog_os_log_mapping(6LL);
          if (__SC_log_enabled(6LL, v63, v64))
          {
            int v149 = 0u;
            uint64_t v148 = 0u;
            uint64_t v147 = 0u;
            int v146 = 0u;
            unsigned int v145 = 0u;
            unsigned int v144 = 0u;
            uint64_t v143 = 0u;
            CFRange v142 = 0u;
            CFRange v141 = 0u;
            char v139 = 0u;
            BOOL v140 = 0u;
            v137 = 0u;
            unsigned int v138 = 0u;
            size_t v136 = 0u;
            int v65 = (_sc_log > 0) | 2;
            uint64_t v134 = 0u;
            CFTypeRef v135 = 0u;
            __int128 v66 = os_log_type_enabled(v63, (os_log_type_t)v64) ? v65 : 2LL;
            CFTypeID v67 = v63;
            CFIndex v68 = (void *)objc_claimAutoreleasedReturnValue([v61 getAgentName]);
            int v132 = 138412290;
            unsigned int v133 = v68;
            LODWORD(v97) = 12;
            uint64_t v69 = (__int128 *)_os_log_send_and_compose_impl( v66,  0LL,  &v134,  256LL,  &_mh_execute_header,  v67,  v64,  "Destroying agent %@ because something changed!",  &v132,  v97);

            __SC_log_send2(6LL, v67, v64, 0LL, v69);
            if (v69 != &v134) {
              free(v69);
            }
          }

          -[AgentController destroyFloatingAgent:](self, "destroyFloatingAgent:", v61);
        }

        uint64_t v20 = v108;
        timeval v58 = [v108 countByEnumeratingWithState:&v118 objects:v117 count:16];
      }

      while (v58);
    }

    uint64_t v115 = 0u;
    CFSetRef v116 = 0u;
    os_log_t v113 = 0u;
    uint64_t v114 = 0u;
    os_log_t v16 = v104;
    CFTypeID v70 = [v16 countByEnumeratingWithState:&v113 objects:v112 count:16];
    uint64_t v18 = v106;
    if (v70)
    {
      uint64_t v71 = v70;
      CFMutableArrayRef v72 = *(void *)v114;
      do
      {
        for (m = 0LL; m != v71; m = (char *)m + 1)
        {
          if (*(void *)v114 != v72) {
            objc_enumerationMutation(v16);
          }
          -[AgentController publishToAgent:]( self,  "publishToAgent:",  *(void *)(*((void *)&v113 + 1) + 8LL * (void)m));
        }

        uint64_t v71 = [v16 countByEnumeratingWithState:&v113 objects:v112 count:16];
      }

      while (v71);
    }

    if (v103 < 1)
    {
      uint64_t v19 = v101;
      uint64_t v17 = obj;
    }

    else
    {
      CFTypeID v74 = 0LL;
      CFIndex v75 = (const void *)kSCPropNetProxiesSupplementalMatchDomain;
      uint64_t v19 = v101;
      __int128 v105 = (const void *)kSCPropNetProxiesSupplementalMatchDomain;
      do
      {
        CFIndex v76 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v74);
        CFDictionaryRef v77 = CFDictionaryGetValue(v76, v75);
        if (v77)
        {
          CFIndex v78 = v77;
          uint64_t v79 = [v18 indexOfObject:v77];
          if (v79 != (id)0x7FFFFFFFFFFFFFFFLL)
          {
            int v80 = v79;
            __int128 v81 = -[NSCountedSet countForObject:](v19, "countForObject:", v78);
            if (v81)
            {
              CFTypeID v82 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ #%lu",  v78,  v81 + 1));
              CFIndex v83 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController dataForProxyDictionary:](self, "dataForProxyDictionary:", v76));
              if (-[AgentController spawnFloatingAgent:entity:agentSubType:addPolicyOfType:publishData:]( self,  "spawnFloatingAgent:entity:agentSubType:addPolicyOfType:publishData:",  objc_opt_class(&OBJC_CLASS___ProxyAgent),  v82,  2LL,  6LL,  v83))
              {
                CFIndex v84 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController floatingProxyAgentList](self, "floatingProxyAgentList"));
                CFIndex v100 = v82;
                CFIndex v85 = (void *)objc_claimAutoreleasedReturnValue([v84 objectForKey:v82]);

                CFRange v86 = sub_10002E39C();
                CFRange v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
                int v88 = _SC_syslog_os_log_mapping(6LL);
                typea = v88;
                if (__SC_log_enabled(6LL, v87, v88))
                {
                  int v149 = 0u;
                  uint64_t v148 = 0u;
                  uint64_t v147 = 0u;
                  int v146 = 0u;
                  unsigned int v145 = 0u;
                  unsigned int v144 = 0u;
                  uint64_t v143 = 0u;
                  CFRange v142 = 0u;
                  CFRange v141 = 0u;
                  char v139 = 0u;
                  BOOL v140 = 0u;
                  v137 = 0u;
                  unsigned int v138 = 0u;
                  size_t v136 = 0u;
                  CFTypeID v89 = v87;
                  uint64_t v90 = (_sc_log > 0) | 2;
                  uint64_t v134 = 0u;
                  CFTypeRef v135 = 0u;
                  if (os_log_type_enabled(v89, (os_log_type_t)typea)) {
                    CFTypeID v91 = v90;
                  }
                  else {
                    CFTypeID v91 = 2LL;
                  }
                  CFIndex v99 = v89;
                  CFTypeID v92 = v89;
                  uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue([v85 getAgentName]);
                  int v132 = 138412290;
                  unsigned int v133 = v93;
                  LODWORD(v98) = 12;
                  uint64_t v94 = (__int128 *)_os_log_send_and_compose_impl( v91,  0LL,  &v134,  256LL,  &_mh_execute_header,  v92,  typea,  "Duplicate Proxy agent %@",  &v132,  v98);

                  __SC_log_send2(6LL, v92, typea, 0LL, v94);
                  if (v94 != &v134) {
                    free(v94);
                  }
                  CFIndex v75 = v105;
                  uint64_t v18 = v106;
                  CFRange v87 = v99;
                }

                CFTypeID v82 = v100;
                uint64_t v19 = v101;
              }
            }

            else
            {
              CFIndex v83 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController dataForProxyDictionary:](self, "dataForProxyDictionary:", v76));
              int v95 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController floatingProxyAgentList](self, "floatingProxyAgentList"));
              CFTypeID v96 = (void *)objc_claimAutoreleasedReturnValue( -[AgentController getAgentWithSameDataAndSubType:data:subType:]( self,  "getAgentWithSameDataAndSubType:data:subType:",  v95,  v83,  2LL));

              if (v96)
              {
                -[AgentController spawnMappedFloatingAgent:entity:agentSubType:addPolicyOfType:updateData:]( self,  "spawnMappedFloatingAgent:entity:agentSubType:addPolicyOfType:updateData:",  v96,  v78,  2LL,  6LL,  v83);
              }

              else
              {
                -[AgentController spawnFloatingAgent:entity:agentSubType:addPolicyOfType:publishData:]( self,  "spawnFloatingAgent:entity:agentSubType:addPolicyOfType:publishData:",  objc_opt_class(&OBJC_CLASS___ProxyAgent),  v78,  2LL,  6LL,  v83);
              }

              uint64_t v19 = v101;
              CFIndex v75 = v105;
            }

            [v18 removeObjectAtIndex:v80];
            -[NSCountedSet addObject:](v19, "addObject:", v78);
          }
        }

        ++v74;
      }

      while (v103 != v74);
      uint64_t v20 = v108;
      uint64_t v17 = obj;
    }
  }

  else
  {
    uint64_t v10 = sub_10002E39C();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    CFStringRef v12 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v11, v12))
    {
      int v149 = 0u;
      uint64_t v148 = 0u;
      uint64_t v147 = 0u;
      int v146 = 0u;
      unsigned int v145 = 0u;
      unsigned int v144 = 0u;
      uint64_t v143 = 0u;
      CFRange v142 = 0u;
      CFRange v141 = 0u;
      char v139 = 0u;
      BOOL v140 = 0u;
      v137 = 0u;
      unsigned int v138 = 0u;
      CFTypeRef v135 = 0u;
      size_t v136 = 0u;
      uint64_t v134 = 0u;
      CFDateRef v13 = (_sc_log > 0) | 2;
      uint64_t v14 = os_log_type_enabled(v11, (os_log_type_t)v12) ? v13 : 2LL;
      LOWORD(v13pthread_attr_setdetachstate(&v4, 2) = 0;
      CFDateRef v15 = (__int128 *)_os_log_send_and_compose_impl( v14,  0LL,  &v134,  256LL,  &_mh_execute_header,  v11,  v12,  "No proxy config to process",  &v132,  2);
      __SC_log_send2(6LL, v11, v12, 0LL, v15);
      if (v15 != &v134) {
        free(v15);
      }
    }

    os_log_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
  }
}

LABEL_29:
      uint64_t v26 = v7;
LABEL_30:

      goto LABEL_31;
    }

    uint64_t v19 = sub_10002E39C();
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    uint64_t v21 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v20, v21))
    {
      int v47 = 0u;
      uint64_t v48 = 0u;
      uint64_t v45 = 0u;
      uint64_t v46 = 0u;
      uint64_t v43 = 0u;
      os_log_t v44 = 0u;
      uint64_t v41 = 0u;
      unsigned int v42 = 0u;
      uint64_t v40 = 0u;
      uint64_t v38 = 0u;
      uint64_t v39 = 0u;
      os_log_t v36 = 0u;
      uint64_t v37 = 0u;
      uint64_t v34 = 0u;
      uint64_t v35 = 0u;
      os_log_t v33 = 0u;
      uint64_t v22 = (_sc_log > 0) | 2;
      __int128 v23 = os_log_type_enabled(v20, (os_log_type_t)v21) ? v22 : 2LL;
      v32[0] = 0;
      __int128 v24 = (__int128 *)_os_log_send_and_compose_impl( v23,  0LL,  &v33,  256LL,  &_mh_execute_header,  v20,  v21,  "Proxy settings on defaultProxy are generic. Skipping",  v32,  2);
      __SC_log_send2(6LL, v20, v21, 0LL, v24);
      if (v24 != &v33) {
        free(v24);
      }
    }
  }

  CFRelease(values);
  __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController floatingProxyAgentList](self, "floatingProxyAgentList"));
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKey:@"_defaultProxy"]);

  if (v26) {
    -[AgentController destroyFloatingAgent:](self, "destroyFloatingAgent:", v26);
  }
LABEL_31:

  CFRelease(v4);
}

void sub_10004A968(int a1)
{
  int v12 = a1;
  if (sysctlbyname("net.inet.mptcp.allow_aggregate", 0LL, 0LL, &v12, 4uLL) == -1)
  {
    if (*__error() == 2) {
      return;
    }
    os_log_t v8 = sub_10002E39C();
    os_log_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v3 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v2, v3))
    {
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      __int128 v22 = 0u;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v15 = 0u;
      LODWORD(v9) = (_sc_log > 0) | 2;
      if (os_log_type_enabled(v2, (os_log_type_t)v3)) {
        uint64_t v9 = v9;
      }
      else {
        uint64_t v9 = 2LL;
      }
      os_log_t v2 = v2;
      uint64_t v10 = __error();
      uint64_t v11 = strerror(*v10);
      int v13 = 136315138;
      uint64_t v14 = v11;
      uint64_t v6 = (__int128 *)_os_log_send_and_compose_impl( v9,  0LL,  &v15,  256LL,  &_mh_execute_header,  v2,  v3,  "sysctlbyname(net.inet.mptcp.allow_aggregate) failed: %s",  (const char *)&v13);

      uint64_t v7 = 3LL;
      goto LABEL_13;
    }
  }

  else
  {
    os_log_t v1 = sub_10002E39C();
    os_log_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    uint64_t v3 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v2, v3))
    {
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      __int128 v22 = 0u;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v15 = 0u;
      unsigned int v4 = (_sc_log > 0) | 2;
      if (os_log_type_enabled(v2, (os_log_type_t)v3)) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 2LL;
      }
      int v13 = 67109120;
      LODWORD(v14) = v12;
      uint64_t v6 = (__int128 *)_os_log_send_and_compose_impl( v5,  0LL,  &v15,  256LL,  &_mh_execute_header,  v2,  v3,  "Transport Converter Proxy: sysctl net.inet.mptcp.allow_aggregate=%d",  &v13);
      uint64_t v7 = 5LL;
LABEL_13:
      __SC_log_send2(v7, v2, v3, 0LL, v6);
      if (v6 != &v15) {
        free(v6);
      }
    }
  }
}

LABEL_34:
      }

      __int128 v21 = [obj countByEnumeratingWithState:&v116 objects:v115 count:16];
    }

    while (v21);
  }

  os_log_t v113 = 0u;
  uint64_t v114 = 0u;
  uint64_t v111 = 0u;
  unsigned int v112 = 0u;
  CFTypeID v82 = type;
  os_log_t v36 = [v82 countByEnumeratingWithState:&v111 objects:v110 count:16];
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v38 = *(void *)v112;
    do
    {
      for (CFIndex k = 0LL; k != v37; CFIndex k = (char *)k + 1)
      {
        if (*(void *)v112 != v38) {
          objc_enumerationMutation(v82);
        }
        uint64_t v40 = *(void **)(*((void *)&v111 + 1) + 8LL * (void)k);
        uint64_t v41 = sub_10002E39C();
        unsigned int v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
        uint64_t v43 = _SC_syslog_os_log_mapping(6LL);
        if (__SC_log_enabled(6LL, v42, v43))
        {
          CFTypeID v108 = 0u;
          CFStringRef v109 = 0u;
          CFTypeID v106 = 0u;
          int v107 = 0u;
          uint64_t v104 = 0u;
          __int128 v105 = 0u;
          CFTypeID v102 = 0u;
          CFTypeID v103 = 0u;
          CFIndex v100 = 0u;
          uint64_t v101 = 0u;
          CFIndex v98 = 0u;
          CFIndex v99 = 0u;
          CFTypeID v96 = 0u;
          CFTypeID v97 = 0u;
          LODWORD(v44) = (_sc_log > 0) | 2;
          uint64_t v94 = 0u;
          int v95 = 0u;
          os_log_t v44 = os_log_type_enabled(v42, (os_log_type_t)v43) ? v44 : 2LL;
          uint64_t v45 = v42;
          uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v40 getAgentName]);
          CFTypeID v92 = 138412290;
          uint64_t v93 = v46;
          LODWORD(v75) = 12;
          int v47 = (__int128 *)_os_log_send_and_compose_impl( v44,  0LL,  &v94,  256LL,  &_mh_execute_header,  v45,  v43,  "Destroying agent %@ because something changed!",  &v92,  v75);

          __SC_log_send2(6LL, v45, v43, 0LL, v47);
          if (v47 != &v94) {
            free(v47);
          }
        }

        -[AgentController destroyFloatingAgent:](self, "destroyFloatingAgent:", v40);
      }

      uint64_t v37 = [v82 countByEnumeratingWithState:&v111 objects:v110 count:16];
    }

    while (v37);
  }

  uint64_t v90 = 0u;
  CFTypeID v91 = 0u;
  int v88 = 0u;
  CFTypeID v89 = 0u;
  uint64_t v48 = v80;
  uint64_t v49 = [v48 countByEnumeratingWithState:&v88 objects:v87 count:16];
  int v50 = v86;
  uint64_t v51 = v81;
  if (v49)
  {
    uint64_t v52 = v49;
    uint64_t v53 = *(void *)v89;
    do
    {
      for (m = 0LL; m != v52; m = (char *)m + 1)
      {
        if (*(void *)v89 != v53) {
          objc_enumerationMutation(v48);
        }
        -[AgentController publishToAgent:]( self,  "publishToAgent:",  *(void *)(*((void *)&v88 + 1) + 8LL * (void)m));
      }

      uint64_t v52 = [v48 countByEnumeratingWithState:&v88 objects:v87 count:16];
    }

    while (v52);
  }

  uint64_t v55 = v79;
  if (v86->var0 >= 1)
  {
    os_log_t v56 = 0LL;
    do
    {
      __int16 v57 = *(void **)(*(void *)(&v50->var0 + 1) + 8 * v56);
      if (*v57
        && !-[AgentController isResolverPrivate:]( self,  "isResolverPrivate:",  *(void *)(*(void *)(&v50->var0 + 1) + 8 * v56))
        && !-[AgentController isResolverMulticast:](self, "isResolverMulticast:", v57))
      {
        timeval v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *v57));
        unint64_t v59 = [v51 indexOfObject:v58];
        if (v59 != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          int v60 = v59;
          BOOL v61 = -[NSCountedSet countForObject:](v55, "countForObject:", v58);
          if (v61)
          {
            int v62 = v61 + 1;
            int v63 = objc_claimAutoreleasedReturnValue(-[AgentController dataForResolver:](self, "dataForResolver:", v57));
            CFStringRef v64 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ #%lu",  v58,  v62));
            if (-[AgentController spawnFloatingAgent:entity:agentSubType:addPolicyOfType:publishData:]( self,  "spawnFloatingAgent:entity:agentSubType:addPolicyOfType:publishData:",  objc_opt_class(&OBJC_CLASS___DNSAgent),  v64,  2LL,  6LL,  v63))
            {
              int v65 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController floatingDNSAgentList](self, "floatingDNSAgentList"));
              __int128 v66 = (void *)objc_claimAutoreleasedReturnValue([v65 objectForKey:v64]);

              CFTypeID v67 = sub_10002E39C();
              CFIndex v68 = objc_claimAutoreleasedReturnValue(v67);
              uint64_t v69 = _SC_syslog_os_log_mapping(6LL);
              typea = v69;
              if (__SC_log_enabled(6LL, v68, v69))
              {
                CFTypeID v108 = 0u;
                CFStringRef v109 = 0u;
                CFTypeID v106 = 0u;
                int v107 = 0u;
                uint64_t v104 = 0u;
                __int128 v105 = 0u;
                CFTypeID v102 = 0u;
                CFTypeID v103 = 0u;
                CFIndex v100 = 0u;
                uint64_t v101 = 0u;
                CFIndex v98 = 0u;
                CFIndex v99 = 0u;
                CFTypeID v96 = 0u;
                CFTypeID v97 = 0u;
                CFTypeID v70 = (os_log_s *)v68;
                LODWORD(v68) = (_sc_log > 0) | 2;
                uint64_t v94 = 0u;
                int v95 = 0u;
                if (os_log_type_enabled(v70, (os_log_type_t)typea)) {
                  CFIndex v68 = v68;
                }
                else {
                  CFIndex v68 = 2LL;
                }
                CFIndex v78 = v70;
                uint64_t v71 = v70;
                CFDictionaryRef v77 = (void *)objc_claimAutoreleasedReturnValue([v66 getAgentName]);
                CFTypeID v92 = 138412290;
                uint64_t v93 = v77;
                LODWORD(v76) = 12;
                CFMutableArrayRef v72 = (__int128 *)_os_log_send_and_compose_impl( v68,  0LL,  &v94,  256LL,  &_mh_execute_header,  v71,  typea,  "Duplicate DNS agent %@",  &v92,  v76);

                __SC_log_send2(6LL, v71, typea, 0LL, v72);
                if (v72 != &v94) {
                  free(v72);
                }
                uint64_t v55 = v79;
                CFIndex v68 = (uint64_t)v78;
              }
            }
          }

          else
          {
            int v63 = objc_claimAutoreleasedReturnValue(-[AgentController dataForResolver:](self, "dataForResolver:", v57));
            uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(-[AgentController floatingDNSAgentList](self, "floatingDNSAgentList"));
            CFTypeID v74 = (void *)objc_claimAutoreleasedReturnValue( -[AgentController getAgentWithSameDataAndSubType:data:subType:]( self,  "getAgentWithSameDataAndSubType:data:subType:",  v73,  v63,  2LL));

            if (v74)
            {
              -[AgentController spawnMappedFloatingAgent:entity:agentSubType:addPolicyOfType:updateData:]( self,  "spawnMappedFloatingAgent:entity:agentSubType:addPolicyOfType:updateData:",  v74,  v58,  2LL,  6LL,  v63);
            }

            else
            {
              -[AgentController spawnFloatingAgent:entity:agentSubType:addPolicyOfType:publishData:]( self,  "spawnFloatingAgent:entity:agentSubType:addPolicyOfType:publishData:",  objc_opt_class(&OBJC_CLASS___DNSAgent),  v58,  2LL,  6LL,  v63);
            }
          }

          [v81 removeObjectAtIndex:v60];
          -[NSCountedSet addObject:](v55, "addObject:", v58);

          timeval v58 = (void *)v63;
          int v50 = v86;
        }

        uint64_t v51 = v81;
      }

      ++v56;
    }

    while (v56 < v50->var0);
  }
}

LABEL_16:
    uint64_t v5 = 0;
    goto LABEL_17;
  }

  if (([v3 unregisterNetworkAgent] & 1) == 0)
  {
    int v12 = sub_10002E39C();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    os_log_t v8 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v7, v8))
    {
      uint64_t v32 = 0u;
      os_log_t v33 = 0u;
      __int128 v30 = 0u;
      uint64_t v31 = 0u;
      __int128 v28 = 0u;
      __int128 v29 = 0u;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      int v13 = (_sc_log > 0) | 2;
      if (os_log_type_enabled(v7, (os_log_type_t)v8)) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 2LL;
      }
      LOWORD(v17[0]) = 0;
      uint64_t v11 = _os_log_send_and_compose_impl( v14,  0LL,  &v18,  256LL,  &_mh_execute_header,  v7,  v8,  "Could not unregister config agent",  v17,  2,  v17[0]);
LABEL_14:
      __int128 v15 = (__int128 *)v11;
      __SC_log_send2(5LL, v7, v8, 0LL, v11);
      if (v15 != &v18) {
        free(v15);
      }
      goto LABEL_16;
    }

    goto LABEL_16;
  }

  uint64_t v5 = 1;
LABEL_17:

  return v5;
}
}

void process_AgentMonitor()
{
  if (objc_opt_class(&OBJC_CLASS___NEPolicy))
  {
    os_log_t v0 = sub_10002E39C();
    os_log_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
    uint64_t v2 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v1, v2))
    {
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      unsigned int v3 = (_sc_log > 0) | 2;
      uint64_t v4 = os_log_type_enabled(v1, (os_log_type_t)v2) ? v3 : 2LL;
      v16[0] = 0;
      uint64_t v5 = (__int128 *)_os_log_send_and_compose_impl( v4,  0LL,  &v17,  256LL,  &_mh_execute_header,  v1,  v2,  "Triggering AgentMonitor",  v16,  2);
      __SC_log_send2(7LL, v1, v2, 0LL, v5);
      if (v5 != &v17) {
        free(v5);
      }
    }

    uint64_t v6 = objc_autoreleasePoolPush();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](&OBJC_CLASS___AgentController, "sharedController"));
    os_log_t v8 = v7;
    if (v7)
    {
      uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v7 controllerQueue]);
      dispatch_sync(v9, &stru_100072EA0);
    }

    else
    {
      os_log_t v10 = sub_10002E39C();
      uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
      uint64_t v11 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v9, v11))
      {
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        __int128 v27 = 0u;
        __int128 v28 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        __int128 v21 = 0u;
        __int128 v22 = 0u;
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        unsigned int v12 = (_sc_log > 0) | 2;
        if (os_log_type_enabled((os_log_t)v9, (os_log_type_t)v11)) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 2LL;
        }
        v16[0] = 0;
        LODWORD(v15) = 2;
        uint64_t v14 = (__int128 *)_os_log_send_and_compose_impl( v13,  0LL,  &v17,  256LL,  &_mh_execute_header,  v9,  v11,  "AgentController could not be initialized",  v16,  v15);
        __SC_log_send2(3LL, v9, v11, 0LL, v14);
        if (v14 != &v17) {
          free(v14);
        }
      }
    }

    objc_autoreleasePoolPop(v6);
  }

void sub_10005131C(id a1)
{
  os_log_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](&OBJC_CLASS___AgentController, "sharedController"));
  [v1 processDNSChanges];

  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](&OBJC_CLASS___AgentController, "sharedController"));
  [v2 processProxyChanges];
}

void process_AgentMonitor_DNS()
{
  if (objc_opt_class(&OBJC_CLASS___NEPolicy))
  {
    os_log_t v0 = sub_10002E39C();
    os_log_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
    uint64_t v2 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v1, v2))
    {
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      unsigned int v3 = (_sc_log > 0) | 2;
      uint64_t v4 = os_log_type_enabled(v1, (os_log_type_t)v2) ? v3 : 2LL;
      v16[0] = 0;
      uint64_t v5 = (__int128 *)_os_log_send_and_compose_impl( v4,  0LL,  &v17,  256LL,  &_mh_execute_header,  v1,  v2,  "Triggering AgentMonitor for DNS",  v16,  2);
      __SC_log_send2(7LL, v1, v2, 0LL, v5);
      if (v5 != &v17) {
        free(v5);
      }
    }

    uint64_t v6 = objc_autoreleasePoolPush();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](&OBJC_CLASS___AgentController, "sharedController"));
    os_log_t v8 = v7;
    if (v7)
    {
      uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v7 controllerQueue]);
      dispatch_sync(v9, &stru_100072EC0);
    }

    else
    {
      os_log_t v10 = sub_10002E39C();
      uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
      uint64_t v11 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v9, v11))
      {
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        __int128 v27 = 0u;
        __int128 v28 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        __int128 v21 = 0u;
        __int128 v22 = 0u;
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        unsigned int v12 = (_sc_log > 0) | 2;
        if (os_log_type_enabled((os_log_t)v9, (os_log_type_t)v11)) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 2LL;
        }
        v16[0] = 0;
        LODWORD(v15) = 2;
        uint64_t v14 = (__int128 *)_os_log_send_and_compose_impl( v13,  0LL,  &v17,  256LL,  &_mh_execute_header,  v9,  v11,  "AgentController could not be initialized",  v16,  v15);
        __SC_log_send2(3LL, v9, v11, 0LL, v14);
        if (v14 != &v17) {
          free(v14);
        }
      }
    }

    objc_autoreleasePoolPop(v6);
  }

void sub_100051634(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](&OBJC_CLASS___AgentController, "sharedController"));
  [v1 processDNSChanges];
}

void process_AgentMonitor_Proxy()
{
  if (objc_opt_class(&OBJC_CLASS___NEPolicy))
  {
    os_log_t v0 = sub_10002E39C();
    id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
    uint64_t v2 = _SC_syslog_os_log_mapping(7LL);
    if (__SC_log_enabled(7LL, v1, v2))
    {
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      unsigned int v3 = (_sc_log > 0) | 2;
      uint64_t v4 = os_log_type_enabled(v1, (os_log_type_t)v2) ? v3 : 2LL;
      v16[0] = 0;
      uint64_t v5 = (__int128 *)_os_log_send_and_compose_impl( v4,  0LL,  &v17,  256LL,  &_mh_execute_header,  v1,  v2,  "Triggering AgentMonitor for Proxy",  v16,  2);
      __SC_log_send2(7LL, v1, v2, 0LL, v5);
      if (v5 != &v17) {
        free(v5);
      }
    }

    uint64_t v6 = objc_autoreleasePoolPush();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](&OBJC_CLASS___AgentController, "sharedController"));
    os_log_t v8 = v7;
    if (v7)
    {
      uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v7 controllerQueue]);
      dispatch_sync(v9, &stru_100072EE0);
    }

    else
    {
      os_log_t v10 = sub_10002E39C();
      uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
      uint64_t v11 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v9, v11))
      {
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        __int128 v27 = 0u;
        __int128 v28 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        __int128 v21 = 0u;
        __int128 v22 = 0u;
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        unsigned int v12 = (_sc_log > 0) | 2;
        if (os_log_type_enabled((os_log_t)v9, (os_log_type_t)v11)) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 2LL;
        }
        v16[0] = 0;
        LODWORD(v15) = 2;
        uint64_t v14 = (__int128 *)_os_log_send_and_compose_impl( v13,  0LL,  &v17,  256LL,  &_mh_execute_header,  v9,  v11,  "AgentController could not be initialized",  v16,  v15);
        __SC_log_send2(3LL, v9, v11, 0LL, v14);
        if (v14 != &v17) {
          free(v14);
        }
      }
    }

    objc_autoreleasePoolPop(v6);
  }

void sub_10005192C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](&OBJC_CLASS___AgentController, "sharedController"));
  [v1 processProxyChanges];
}

uint64_t copy_proxy_information_for_agent_uuid(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = 0LL;
  __int128 v17 = &v16;
  uint64_t v18 = 0x2020000000LL;
  uint64_t v19 = 0LL;
  if (!objc_opt_class(&OBJC_CLASS___NEPolicy)) {
    goto LABEL_6;
  }
  uint64_t v4 = objc_autoreleasePoolPush();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](&OBJC_CLASS___AgentController, "sharedController"));
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v5 controllerQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100051BE4;
    block[3] = &unk_100072F08;
    void block[4] = &v16;
    void block[5] = a1;
    void block[6] = a2;
    dispatch_sync(v7, block);
  }

  else
  {
    os_log_t v10 = sub_10002E39C();
    uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v11 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v7, v11))
    {
      memset(v21, 0, sizeof(v21));
      unsigned int v12 = (_sc_log > 0) | 2;
      if (os_log_type_enabled((os_log_t)v7, (os_log_type_t)v11)) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 2LL;
      }
      v20[0] = 0;
      uint64_t v14 = (_OWORD *)_os_log_send_and_compose_impl( v13,  0LL,  v21,  256LL,  &_mh_execute_header,  v7,  v11,  "AgentController could not be initialized",  v20,  2);
      __SC_log_send2(3LL, v7, v11, 0LL, v14);
      if (v14 != v21) {
        free(v14);
      }
    }
  }

  objc_autoreleasePoolPop(v4);
  if (v6) {
    uint64_t v8 = v17[3];
  }
  else {
LABEL_6:
  }
    uint64_t v8 = 0LL;
  _Block_object_dispose(&v16, 8);
  return v8;
}

void sub_100051BB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100051BE4(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](&OBJC_CLASS___AgentController, "sharedController"));
  *(void *)(*(void *)(a1[4] + 8) + 24) = [v2 copyProxyAgentData:a1[5] length:a1[6]];
}

uint64_t copy_dns_information_for_agent_uuid(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = 0LL;
  __int128 v17 = &v16;
  uint64_t v18 = 0x2020000000LL;
  uint64_t v19 = 0LL;
  if (!objc_opt_class(&OBJC_CLASS___NEPolicy)) {
    goto LABEL_6;
  }
  uint64_t v4 = objc_autoreleasePoolPush();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](&OBJC_CLASS___AgentController, "sharedController"));
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v5 controllerQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100051EB8;
    block[3] = &unk_100072F08;
    void block[4] = &v16;
    void block[5] = a1;
    void block[6] = a2;
    dispatch_sync(v7, block);
  }

  else
  {
    os_log_t v10 = sub_10002E39C();
    uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v11 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v7, v11))
    {
      memset(v21, 0, sizeof(v21));
      unsigned int v12 = (_sc_log > 0) | 2;
      if (os_log_type_enabled((os_log_t)v7, (os_log_type_t)v11)) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 2LL;
      }
      v20[0] = 0;
      uint64_t v14 = (_OWORD *)_os_log_send_and_compose_impl( v13,  0LL,  v21,  256LL,  &_mh_execute_header,  v7,  v11,  "AgentController could not be initialized",  v20,  2);
      __SC_log_send2(3LL, v7, v11, 0LL, v14);
      if (v14 != v21) {
        free(v14);
      }
    }
  }

  objc_autoreleasePoolPop(v4);
  if (v6) {
    uint64_t v8 = v17[3];
  }
  else {
LABEL_6:
  }
    uint64_t v8 = 0LL;
  _Block_object_dispose(&v16, 8);
  return v8;
}

void sub_100051E88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100051EB8(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AgentController sharedController](&OBJC_CLASS___AgentController, "sharedController"));
  *(void *)(*(void *)(a1[4] + 8) + 24) = [v2 copyDNSAgentData:a1[5] length:a1[6]];
}

CFMutableDictionaryRef sub_100051F34(_OWORD *a1)
{
  *a1 = 0u;
  a1[1] = 0u;
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *((void *)a1 + pthread_attr_setdetachstate(&v4, 2) = result;
  return result;
}

void sub_100051FAC(uint64_t a1, CFTypeRef cf, unint64_t a3)
{
  uint64_t v6 = *(const void **)a1;
  if (v6)
  {
    CFRelease(v6);
    *(void *)a1 = 0LL;
  }

  if (cf)
  {
    CFRetain(cf);
    *(void *)a1 = cf;
  }

  if (a3 <= 1) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = a3;
  }
  *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
  *(_DWORD *)(a1 + 24) += *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
}

BOOL sub_100052044(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) == 0;
}

void sub_100052094(uint64_t a1, _xpc_connection_s *a2)
{
  uint64_t v7 = a2;
  CFDataRef v4 = CFDataCreate(0LL, (const UInt8 *)&v7, 8LL);
  CFMutableArrayRef Mutable = CFDataCreateMutable(0LL, 24LL);
  CFDataSetLength(Mutable, 24LL);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  *(_DWORD *)MutableBytePtr = xpc_connection_get_pid(a2);
  *((void *)MutableBytePtr + pthread_attr_setscope(&v4, 1) = 0LL;
  *((void *)MutableBytePtr + pthread_attr_setdetachstate(&v4, 2) = 0LL;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v4, Mutable);
  CFRelease(v4);
  CFRelease(Mutable);
}

uint64_t sub_100052164(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = a2;
  CFDataRef v5 = CFDataCreate(0LL, (const UInt8 *)&v10, 8LL);
  unsigned int Value = (__CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v5);
  CFRelease(v5);
  MutableBytePtr = CFDataGetMutableBytePtr(Value);
  uint64_t v8 = *(void *)(a1 + 8);
  *((void *)MutableBytePtr + pthread_attr_setscope(&v4, 1) = v8;
  if (v8 == 1) {
    uint64_t v8 = 0LL;
  }
  *a3 = v8;
  return *(void *)a1;
}

uint64_t sub_100052210(uint64_t a1, _xpc_connection_s *a2, uint64_t a3)
{
  uint64_t v6 = (void *)xpc_connection_copy_entitlement_value(a2, "com.apple.SystemConfiguration.trailing-edge-agent");
  if (!v6) {
    goto LABEL_9;
  }
  uint64_t v7 = v6;
  if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_BOOL)
  {
    BOOL value = xpc_BOOL_get_value(v7);
    xpc_release(v7);
    if (!value) {
      goto LABEL_9;
    }
    v16[0] = a2;
    CFDataRef v9 = CFDataCreate(0LL, (const UInt8 *)v16, 8LL);
    uint64_t v10 = (__CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v9);
    CFRelease(v9);
    MutableBytePtr = CFDataGetMutableBytePtr(v10);
    uint64_t v12 = *((void *)MutableBytePtr + 2);
    if (v12)
    {
      if (v12 != a3 && *(void *)(a1 + 8) == a3)
      {
        *(int32x2_t *)(a1 + 24) = vadd_s32(*(int32x2_t *)(a1 + 24), (int32x2_t)0x1FFFFFFFFLL);
LABEL_17:
        uint64_t v14 = 1LL;
        goto LABEL_18;
      }

      uint64_t v14 = 0LL;
    }

    else
    {
      if (*(void *)(a1 + 8) != a3)
      {
        ++*(_DWORD *)(a1 + 24);
        goto LABEL_17;
      }

      uint64_t v14 = 0LL;
      ++*(_DWORD *)(a1 + 28);
    }

uint64_t sub_1000523F0(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  CFDataRef v3 = CFDataCreate(0LL, (const UInt8 *)&v8, 8LL);
  unsigned int Value = (__CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v3);
  if (Value && (uint64_t v5 = *((void *)CFDataGetMutableBytePtr(Value) + 2)) != 0)
  {
    if (v5 == *(void *)(a1 + 8))
    {
      uint64_t v6 = 0LL;
      --*(_DWORD *)(a1 + 28);
    }

    else
    {
      --*(_DWORD *)(a1 + 24);
      uint64_t v6 = 1LL;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), v3);
  CFRelease(v3);
  return v6;
}

void sub_1000524CC(id a1)
{
  qword_100079EB8 = (uint64_t)CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  qword_100079EC0 = (uint64_t)dispatch_queue_create("handle unentitled ack", 0LL);
}

void sub_10005254C(uint64_t a1)
{
  id v1 = (int *)(a1 + 32);
  CFNumberRef v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 32));
  CFDataRef v3 = (const __CFArray *)qword_100079EB8;
  v13.length = CFArrayGetCount((CFArrayRef)qword_100079EB8);
  v13.location = 0LL;
  if (!CFArrayContainsValue(v3, v13, v2))
  {
    CFArrayAppendValue((CFMutableArrayRef)qword_100079EB8, v2);
    os_log_t v4 = sub_10002E39C();
    uint64_t v5 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v4, v5))
    {
      uint64_t v6 = _os_log_pack_size(8LL);
      uint64_t v7 = (char *)&v12 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v8 = __error();
      CFDataRef v9 = (_DWORD *)_os_log_pack_fill( v7,  v6,  *v8,  &_mh_execute_header,  "DNS/nwi dropping ack w/no entitlement, pid = %d",  v12);
      int v10 = *v1;
      *CFDataRef v9 = 67109120;
      v9[1] = v10;
      __SC_log_send(6LL, v4, v5, v7);
    }

    if ((byte_100079EA8 & 1) == 0)
    {
      byte_100079EA8 = 1;
      dispatch_time_t v11 = dispatch_time(0LL, 180000000000LL);
      dispatch_after(v11, (dispatch_queue_t)qword_100079EC0, &stru_100072F88);
    }
  }

  CFRelease(v2);
}

void sub_1000526F8(id a1)
{
  byte_100079EA8 = 0;
}

char *_scprefs_observer_watch(int a1, char *__s, uint64_t a3, const void *a4)
{
  if (qword_100079EC8 != -1) {
    dispatch_once(&qword_100079EC8, &stru_100072FE8);
  }
  size_t v8 = strlen(__s);
  size_t v9 = v8 + 1;
  int v10 = (char *)malloc(v8 + 41);
  *(_OWORD *)int v10 = 0u;
  *((_OWORD *)v10 + pthread_attr_setscope(&v4, 1) = 0u;
  *((void *)v10 + 4) = 0LL;
  *(_DWORD *)int v10 = a1;
  strlcpy(v10 + 40, __s, v9);
  *((void *)v10 + 4) = a3;
  *((void *)v10 + pthread_attr_setscope(&v4, 1) = _Block_copy(a4);
  os_log_t v11 = sub_10002E39C();
  uint64_t v12 = _SC_syslog_os_log_mapping(6LL);
  if (__SC_log_enabled(6LL, v11, v12))
  {
    uint64_t v13 = _os_log_pack_size(12LL);
    uint64_t v14 = (char *)block - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v15 = __error();
    uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "Created a new element to watch for %s",  block[0]);
    *(_DWORD *)uint64_t v16 = 136315138;
    *(void *)(v16 + 4) = v10 + 40;
    __SC_log_send(6LL, v11, v12, v14);
  }

  block[0] = (const char *)_NSConcreteStackBlock;
  block[1] = (const char *)0x40000000;
  block[2] = (const char *)sub_100052AB4;
  block[3] = (const char *)&unk_100073008;
  void block[4] = v10;
  dispatch_sync((dispatch_queue_t)qword_100079ED0, block);
  return v10;
}

void sub_100052924(id a1)
{
}

uint64_t sub_100052968()
{
  qword_100079ED0 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.SCPreferencesObserver", 0LL);
  qword_100079ED8 = 0LL;
  uint64_t result = notify_register_dispatch( "com.apple.ManagedConfiguration.profileListChanged",  (int *)&unk_100079EE0,  (dispatch_queue_t)qword_100079ED0,  &stru_100073048);
  if ((_DWORD)result)
  {
    int v1 = result;
    os_log_t v2 = sub_10002E39C();
    uint64_t v3 = _SC_syslog_os_log_mapping(6LL);
    uint64_t result = __SC_log_enabled(6LL, v2, v3);
    if ((_DWORD)result)
    {
      uint64_t v4 = _os_log_pack_size(8LL);
      uint64_t v5 = (char *)&v8 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v6 = __error();
      uint64_t v7 = (_DWORD *)_os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "notify_register_dispatch() failed: %u",  v8);
      _DWORD *v7 = 67109120;
      v7[1] = v1;
      return __SC_log_send(6LL, v2, v3, v5);
    }
  }

  return result;
}

uint64_t sub_100052AB4(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 24LL) = qword_100079ED8;
  qword_100079ED8 = *(void *)(result + 32);
  return result;
}

void sub_100052B10(id a1, int a2)
{
}

void sub_100052B54()
{
  os_log_t v0 = sub_10002E39C();
  uint64_t v1 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v0, v1))
  {
    uint64_t v2 = _os_log_pack_size(2LL);
    uint64_t v3 = (char *)&v6 - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v4 = __error();
    *(_WORD *)_os_log_pack_fill(v3, v2, *v4, &_mh_execute_header, "PrefsObserver notification received") = 0;
    __SC_log_send(7LL, v0, v1, v3);
  }

  for (uint64_t i = qword_100079ED8; i; uint64_t i = *(void *)(i + 24))
  {
    if (sub_100052C78(i)) {
      dispatch_async(*(dispatch_queue_t *)(i + 32), *(dispatch_block_t *)(i + 8));
    }
  }

BOOL sub_100052C78(uint64_t a1)
{
  uint64_t v2 = (const char *)(a1 + 40);
  if (*(_DWORD *)a1 == 2) {
    uint64_t v3 = "/Library/Managed Preferences/mobile";
  }
  else {
    uint64_t v3 = 0LL;
  }
  CC_SHA256_Init(&v18);
  snprintf((char *)v20, 0x400uLL, "%s/%s", v3, v2);
  if (stat((const char *)v20, &v19) || (v19.st_mode & 0xF000) != 0x8000)
  {
    CC_SHA256_Final(v20, &v18);
    CFDataRef v5 = 0LL;
  }

  else
  {
    CC_LONG v4 = strlen((const char *)v20);
    CC_SHA256_Update(&v18, v20, v4);
    CC_SHA256_Update(&v18, &v19.st_mtimespec, 0x10u);
    CC_SHA256_Final(v20, &v18);
    CFDataRef v5 = CFDataCreate(0LL, v20, 32LL);
  }

  CFDataRef v6 = *(CFDataRef *)(a1 + 16);
  if (v5 == v6)
  {
    BOOL v7 = 0LL;
    CFDataRef v6 = v5;
    if (v5) {
LABEL_13:
    }
      CFRelease(v6);
  }

  else
  {
    BOOL v7 = 1LL;
    if (v5 && v6)
    {
      int v8 = CFEqual(v5, v6);
      CFDataRef v6 = *(CFDataRef *)(a1 + 16);
      BOOL v7 = v8 == 0;
    }

    if (v6) {
      goto LABEL_13;
    }
  }

  *(void *)(a1 + 16) = v5;
  os_log_t v9 = sub_10002E39C();
  if (v7) {
    uint64_t v10 = 6LL;
  }
  else {
    uint64_t v10 = 7LL;
  }
  uint64_t v11 = _SC_syslog_os_log_mapping(v10);
  if (__SC_log_enabled(v10, v9, v11))
  {
    uint64_t v12 = _os_log_pack_size(22LL);
    uint64_t v13 = (char *)&v18 - ((__chkstk_darwin(v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v14 = __error();
    uint64_t v15 = _os_log_pack_fill( v13,  v12,  *v14,  &_mh_execute_header,  "preferences file: %s %s",  *(const char **)v18.count,  *(const char **)v18.hash);
    uint64_t v16 = "did not change";
    if (v7) {
      uint64_t v16 = "changed";
    }
    *(_DWORD *)uint64_t v15 = 136315394;
    *(void *)(v15 + 4) = v2;
    *(_WORD *)(v15 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v15 + 14) = v16;
    __SC_log_send(v10, v9, v11, v13);
  }

  return v7;
}

uint64_t sub_100052ED0(uint64_t a1, uint64_t a2)
{
  return _SCControlPrefsCreateWithQueue("com.apple.IPMonitor.control.plist", a1, a2);
}

uint64_t sub_100052F24()
{
  if (qword_100079EE8) {
    return _SCControlPrefsGetBoolean();
  }
  qword_100079EE8 = _SCControlPrefsCreateWithQueue("com.apple.IPMonitor.control.plist", 0LL, 0LL);
  if (qword_100079EE8) {
    return _SCControlPrefsGetBoolean();
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100052FCC()
{
  if (qword_100079EE8) {
    return _SCControlPrefsGetBoolean();
  }
  qword_100079EE8 = _SCControlPrefsCreateWithQueue("com.apple.IPMonitor.control.plist", 0LL, 0LL);
  if (qword_100079EE8) {
    return _SCControlPrefsGetBoolean();
  }
  else {
    return 0LL;
  }
}

void sub_100053074(__CFBundle *a1)
{
  os_log_t v2 = (os_log_t)qword_100079F10;
  if (!qword_100079F10)
  {
    os_log_t v2 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    qword_100079F10 = (uint64_t)v2;
  }

  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(2LL);
    CFDataRef v5 = (char *)&v40 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFDataRef v6 = __error();
    *(_WORD *)_os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "load() called") = 0;
    __SC_log_send(7LL, v2, v3, v5);
  }

  os_log_t v7 = (os_log_t)qword_100079F10;
  if (!qword_100079F10)
  {
    os_log_t v7 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    qword_100079F10 = (uint64_t)v7;
  }

  uint64_t v8 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v7, v8))
  {
    uint64_t v9 = _os_log_pack_size(12LL);
    uint64_t v10 = (char *)&v40 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v11 = __error();
    uint64_t v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "  bundle ID = %@");
    CFStringRef Identifier = CFBundleGetIdentifier(a1);
    *(_DWORD *)uint64_t v12 = 138412290;
    *(void *)(v12 + 4) = Identifier;
    __SC_log_send(7LL, v7, v8, v10);
  }

  qword_100079EF0 = (uint64_t)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  qword_100079EF8 = (uint64_t)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  qword_100079F00 = (uint64_t)SCDynamicStoreCreate( 0LL,  @"Link Configuraton plug-in",  (SCDynamicStoreCallBack)sub_10005370C,  0LL);
  if (!qword_100079F00)
  {
    os_log_t v23 = (os_log_t)qword_100079F10;
    if (!qword_100079F10)
    {
      os_log_t v23 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_100079F10 = (uint64_t)v23;
    }

    uint64_t v24 = _SC_syslog_os_log_mapping(3LL);
    uint64_t v29 = _os_log_pack_size(12LL);
    __int128 v26 = (char *)&v40 - ((__chkstk_darwin(v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __int128 v30 = __error();
    uint64_t v31 = _os_log_pack_fill(v26, v29, *v30, &_mh_execute_header, "SCDynamicStoreCreate() failed: %s", v40);
    int v32 = SCError();
    os_log_t v33 = SCErrorString(v32);
    *(_DWORD *)uint64_t v31 = 136315138;
    *(void *)(v31 + 4) = v33;
    uint64_t v34 = 3LL;
    goto LABEL_29;
  }

  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  uint64_t v15 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  qword_100079F08 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0LL, kSCDynamicStoreDomainState);
  CFArrayAppendValue(Mutable, (const void *)qword_100079F08);
  CFStringRef v16 = CFStringCreateWithFormat( 0LL,  0LL,  @"%@%@/%@/%@/%@/%@",  &stru_100073D90,  kSCDynamicStoreDomainSetup,  kSCCompNetwork,  @"Override",  @"InterfaceType",  kSCNetworkInterfaceTypeIEEE80211);
  CFArrayAppendValue(Mutable, v16);
  CFRelease(v16);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainSetup,  kSCCompAnyRegex,  kSCEntNetAirPort);
  CFArrayAppendValue(v15, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  CFStringRef v18 = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainSetup,  kSCCompAnyRegex,  kSCEntNetEthernet);
  CFArrayAppendValue(v15, v18);
  CFRelease(v18);
  if (_os_feature_enabled_impl("Network", "low_data_mode"))
  {
    CFStringRef v19 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0LL, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, 0LL);
    CFArrayAppendValue(v15, v19);
    CFRelease(v19);
  }

  int v20 = SCDynamicStoreSetNotificationKeys((SCDynamicStoreRef)qword_100079F00, Mutable, v15);
  CFRelease(Mutable);
  CFRelease(v15);
  if (!v20)
  {
    os_log_t v23 = (os_log_t)qword_100079F10;
    if (!qword_100079F10)
    {
      os_log_t v23 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_100079F10 = (uint64_t)v23;
    }

    uint64_t v24 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v35 = _os_log_pack_size(12LL);
    __int128 v26 = (char *)&v40 - ((__chkstk_darwin(v35) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v36 = *__error();
    uint64_t v28 = _os_log_pack_fill(v26, v35, v36, &_mh_execute_header, "SCDynamicStoreSetNotificationKeys() failed: %s");
LABEL_28:
    uint64_t v37 = v28;
    int v38 = SCError();
    uint64_t v39 = SCErrorString(v38);
    *(_DWORD *)uint64_t v37 = 136315138;
    *(void *)(v37 + 4) = v39;
    uint64_t v34 = 5LL;
LABEL_29:
    __SC_log_send(v34, v23, v24, v26);
LABEL_30:
    if (qword_100079EF0) {
      CFRelease((CFTypeRef)qword_100079EF0);
    }
    if (qword_100079EF8) {
      CFRelease((CFTypeRef)qword_100079EF8);
    }
    if (qword_100079F00) {
      CFRelease((CFTypeRef)qword_100079F00);
    }
    return;
  }

  __int128 v21 = (const __SCDynamicStore *)qword_100079F00;
  __int128 v22 = (dispatch_queue_s *)qword_100079F30;
  if (!qword_100079F30)
  {
    __int128 v22 = dispatch_queue_create("com.apple.SystemConfiguration.LinkConfiguration", 0LL);
    qword_100079F30 = (uint64_t)v22;
  }

  if (!SCDynamicStoreSetDispatchQueue(v21, v22))
  {
    os_log_t v23 = (os_log_t)qword_100079F10;
    if (!qword_100079F10)
    {
      os_log_t v23 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_100079F10 = (uint64_t)v23;
    }

    uint64_t v24 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v25 = _os_log_pack_size(12LL);
    __int128 v26 = (char *)&v40 - ((__chkstk_darwin(v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v27 = *__error();
    uint64_t v28 = _os_log_pack_fill(v26, v25, v27, &_mh_execute_header, "SCDynamicStoreSetDispatchQueue() failed: %s");
    goto LABEL_28;
  }

uint64_t sub_10005370C(const __SCDynamicStore *a1, const __CFArray *a2)
{
  os_log_t v2 = a2;
  uint64_t v3 = a1;
  CFDictionaryRef v4 = SCDynamicStoreCopyMultiple(a1, a2, 0LL);
  if (v4)
  {
    CFDataRef v5 = v4;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0LL;
      uint64_t v9 = kSCNetworkInterfaceTypeIEEE80211;
      uint64_t v52 = v2;
      store = v3;
      CFIndex v50 = Count;
      uint64_t v51 = v5;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v2, v8);
        unsigned int Value = (void *)CFDictionaryGetValue(v5, ValueAtIndex);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (Value && CFGetTypeID(Value) != TypeID) {
          unsigned int Value = 0LL;
        }
        if (CFEqual(ValueAtIndex, (CFTypeRef)qword_100079F08))
        {
          if (!Value) {
            goto LABEL_70;
          }
          uint64_t v13 = CFDictionaryGetValue((CFDictionaryRef)Value, kSCPropNetInterfaces);
          CFTypeID v14 = CFArrayGetTypeID();
          if (!v13 || CFGetTypeID(v13) != v14) {
            goto LABEL_70;
          }
          if (qword_100079F18) {
            CFIndex v15 = CFArrayGetCount((CFArrayRef)qword_100079F18);
          }
          else {
            CFIndex v15 = 0LL;
          }
          CFIndex v30 = CFArrayGetCount((CFArrayRef)v13);
          int v31 = _os_feature_enabled_impl("Network", "low_data_mode");
          CFDictionaryRef v32 = 0LL;
          CFMutableArrayRef Mutable = 0LL;
          if (v31 && v30 >= 1)
          {
            uint64_t v34 = CFArrayGetCount((CFArrayRef)v13);
            CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, v34, &kCFTypeArrayCallBacks);
            if (v34 >= 1)
            {
              for (CFIndex i = 0LL; i != v34; ++i)
              {
                uint64_t v36 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, i);
                CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainSetup,  v36,  0LL);
                CFArrayAppendValue(Mutable, NetworkInterfaceEntity);
                CFRelease(NetworkInterfaceEntity);
              }
            }

            CFDictionaryRef v32 = SCDynamicStoreCopyMultiple(store, Mutable, 0LL);
          }

          int theDict = v32;
          if (v30 >= 1)
          {
            CFIndex v39 = 0LL;
            if (Mutable) {
              BOOL v40 = v32 == 0LL;
            }
            else {
              BOOL v40 = 1;
            }
            int v41 = !v40;
            do
            {
              unsigned int v42 = (__CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, v39);
              if (!CFStringHasPrefix(v42, @"pktap"))
              {
                if (!v15
                  || (v55.location = 0LL, v55.length = v15, !CFArrayContainsValue((CFArrayRef)qword_100079F18, v55, v42)))
                {
                  uint64_t v43 = (void *)CFDictionaryGetValue((CFDictionaryRef)qword_100079EF8, v42);
                  sub_100053D10(v42, v43);
                  if (v41)
                  {
                    os_log_t v44 = CFArrayGetValueAtIndex(Mutable, v39);
                    uint64_t v45 = CFDictionaryGetValue(theDict, v44);
                    CFTypeID v46 = CFDictionaryGetTypeID();
                    if (v45)
                    {
                      if (CFGetTypeID(v45) == v46) {
                        int v47 = v45;
                      }
                      else {
                        int v47 = 0LL;
                      }
                    }

                    else
                    {
                      int v47 = 0LL;
                    }

                    sub_100053FA8(v42, v47);
                  }
                }
              }

              ++v39;
            }

            while (v30 != v39);
          }

          if (qword_100079F18) {
            CFRelease((CFTypeRef)qword_100079F18);
          }
          qword_100079F18 = (uint64_t)CFRetain(v13);
          os_log_t v2 = v52;
          uint64_t v3 = store;
          if (Mutable) {
            CFRelease(Mutable);
          }
          CFIndex v7 = v50;
          CFDataRef v5 = v51;
          uint64_t v29 = theDict;
          if (!theDict) {
            goto LABEL_70;
          }
          goto LABEL_69;
        }

        if (CFStringHasSuffix(ValueAtIndex, v9)) {
          break;
        }
        ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, ValueAtIndex, @"/");
        CFIndex v26 = CFArrayGetCount(ArrayBySeparatingStrings);
        if (v26 <= 3)
        {
          uint64_t v29 = ArrayBySeparatingStrings;
          goto LABEL_69;
        }

        CFIndex v27 = v26;
        uint64_t v28 = (__CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3LL);
        CFRetain(v28);
        if (v27 == 4)
        {
          CFRelease(ArrayBySeparatingStrings);
          if (!v28) {
            goto LABEL_70;
          }
          goto LABEL_67;
        }

        int v38 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 4LL);
        CFRetain(v38);
        CFRelease(ArrayBySeparatingStrings);
        if (v28)
        {
          if (v38)
          {
            sub_100053D10(v28, Value);
            CFRelease(v38);
            goto LABEL_68;
          }

LABEL_80:
    CFRelease(v5);
  }

  uint64_t result = dword_10007999C;
  if ((dword_10007999C & 0x80000000) == 0)
  {
    uint64_t result = close(dword_10007999C);
    dword_10007999C = -1;
  }

  return result;
}

void sub_100053D10(void *key, void *value)
{
  if (value)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)qword_100079EF8, key, value);
    uint64_t v4 = _SCNetworkInterfaceCreateWithBSDName(0LL, key, 0xFFFFFFFFLL);
    if (!v4) {
      return;
    }
    CFDataRef v5 = (const __SCNetworkInterface *)v4;
    if (!CFDictionaryContainsKey((CFDictionaryRef)qword_100079EF0, key))
    {
      int valuePtr = -1;
      CFDictionaryRef current = 0LL;
      int mtu_cur = -1;
      MutableCFDictionaryRef Copy = 0LL;
      if (SCNetworkInterfaceCopyMediaOptions(v5, &current, 0LL, 0LL, 0) && current)
      {
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, current);
        CFRelease(current);
      }

      if (SCNetworkInterfaceCopyMTU(v5, &mtu_cur, 0LL, 0LL) && mtu_cur != -1)
      {
        if (!MutableCopy) {
          MutableCFDictionaryRef Copy = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        }
        CFNumberRef v7 = CFNumberCreate(0LL, kCFNumberIntType, &mtu_cur);
        CFDictionaryAddValue(MutableCopy, kSCPropNetEthernetMTU, v7);
        CFRelease(v7);
      }

      int valuePtr = __SCNetworkInterfaceCreateCapabilities(v5, 0xFFFFFFFFLL, 0LL);
      if (valuePtr != -1)
      {
        if (!MutableCopy) {
          MutableCFDictionaryRef Copy = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        }
        CFNumberRef v8 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
        CFDictionaryAddValue(MutableCopy, @"_CAPABILITIES_", v8);
        CFRelease(v8);
      }

      if (MutableCopy)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)qword_100079EF0, key, MutableCopy);
        CFRelease(MutableCopy);
      }
    }

    sub_100055090(v5, (uint64_t)value);
    sub_1000552AC(v5, value);
    sub_100055A70(v5, value);
  }

  else
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_100079EF8, key);
    uint64_t v9 = _SCNetworkInterfaceCreateWithBSDName(0LL, key, 0xFFFFFFFFLL);
    if (!v9) {
      return;
    }
    CFDataRef v5 = (const __SCNetworkInterface *)v9;
    uint64_t v10 = CFDictionaryGetValue((CFDictionaryRef)qword_100079EF0, key);
    if (v10)
    {
      uint64_t v11 = v10;
      sub_100055090(v5, (uint64_t)v10);
      sub_1000552AC(v5, v11);
      sub_100055A70(v5, v11);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_100079EF0, key);
    }
  }

  CFRelease(v5);
}

uint64_t sub_100053FA8(const __CFString *a1, const void *a2)
{
  uint64_t v4 = _SCNetworkInterfaceCreateWithBSDName(0LL, a1, 0LL);
  if (v4)
  {
    CFDataRef v5 = (const void *)v4;
    int v6 = SCNetworkInterfaceSupportsLowDataMode(v4);
    CFRelease(v5);
    if (v6)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      int v10 = a2
         && CFGetTypeID(a2) == TypeID
         && (int valuePtr = 0,
             unsigned int Value = CFDictionaryGetValue((CFDictionaryRef)a2, kSCPropEnableLowDataMode),
             CFTypeID v9 = CFNumberGetTypeID(),
             Value)
         && CFGetTypeID(Value) == v9
         && CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr)
         && valuePtr != 0;
      return sub_100056038(a1, v10);
    }

    os_log_t v11 = (os_log_t)qword_100079F10;
    if (!qword_100079F10)
    {
      os_log_t v11 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_100079F10 = (uint64_t)v11;
    }

    uint64_t v12 = _SC_syslog_os_log_mapping(6LL);
    uint64_t result = __SC_log_enabled(6LL, v11, v12);
    if ((_DWORD)result)
    {
      uint64_t v19 = _os_log_pack_size(12LL);
      CFIndex v15 = &v22[-((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      CFTypeID v20 = __error();
      uint64_t v21 = _os_log_pack_fill(v15, v19, *v20, &_mh_execute_header, "LowDataMode not supported with %@");
      *(_DWORD *)uint64_t v21 = 138412290;
      *(void *)(v21 + 4) = a1;
      uint64_t v18 = 6LL;
      return __SC_log_send(v18, v11, v12, v15);
    }
  }

  else
  {
    os_log_t v11 = (os_log_t)qword_100079F10;
    if (!qword_100079F10)
    {
      os_log_t v11 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_100079F10 = (uint64_t)v11;
    }

    uint64_t v12 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v11, v12);
    if ((_DWORD)result)
    {
      uint64_t v14 = _os_log_pack_size(12LL);
      CFIndex v15 = &v22[-((__chkstk_darwin(v14) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      CFStringRef v16 = __error();
      uint64_t v17 = _os_log_pack_fill( v15,  v14,  *v16,  &_mh_execute_header,  "Failed to create SCNetworkInterface for %@");
      *(_DWORD *)uint64_t v17 = 138412290;
      *(void *)(v17 + 4) = a1;
      uint64_t v18 = 5LL;
      return __SC_log_send(v18, v11, v12, v15);
    }
  }

  return result;
}

uint64_t sub_100054240(int a1)
{
  uint64_t result = sub_100054898();
  if (result)
  {
    uint64_t v3 = (const __CFString *)result;
    if (a1)
    {
      int v4 = a1 == 2;
      os_log_t v5 = (os_log_t)qword_100079F10;
      if (!qword_100079F10)
      {
        os_log_t v5 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_100079F10 = (uint64_t)v5;
      }

      uint64_t v6 = _SC_syslog_os_log_mapping(5LL);
      uint64_t v7 = _os_log_pack_size(22LL);
      CFNumberRef v8 = (char *)&v22 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFTypeID v9 = __error();
      uint64_t v10 = _os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "%@: Wi-Fi using %sexpensive override");
      os_log_t v11 = "in";
      if (a1 == 2) {
        os_log_t v11 = "";
      }
      *(_DWORD *)uint64_t v10 = 138412546;
      *(void *)(v10 + 4) = v3;
      *(_WORD *)(v10 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v10 + 14) = v11;
      os_log_t v12 = v5;
      uint64_t v13 = v6;
      uint64_t v14 = v8;
    }

    else
    {
      int v4 = sub_10005645C();
      os_log_t v15 = (os_log_t)qword_100079F10;
      if (!qword_100079F10)
      {
        os_log_t v15 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_100079F10 = (uint64_t)v15;
      }

      uint64_t v16 = _SC_syslog_os_log_mapping(5LL);
      uint64_t v17 = _os_log_pack_size(22LL);
      uint64_t v18 = (char *)&v22 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v19 = __error();
      uint64_t v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "%@: Wi-Fi is %sexpensive");
      uint64_t v21 = "";
      if (!v4) {
        uint64_t v21 = "in";
      }
      *(_DWORD *)uint64_t v20 = 138412546;
      *(void *)(v20 + 4) = v3;
      *(_WORD *)(v20 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v20 + 14) = v21;
      os_log_t v12 = v15;
      uint64_t v13 = v16;
      uint64_t v14 = v18;
    }

    __SC_log_send(5LL, v12, v13, v14);
    return sub_100054A88(v3, v4);
  }

  return result;
}

void sub_1000544A8()
{
  if (qword_100079F28)
  {
    os_log_t v0 = (os_log_t)qword_100079F10;
    if (!qword_100079F10)
    {
      os_log_t v0 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_100079F10 = (uint64_t)v0;
    }

    uint64_t v1 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v0, v1))
    {
      uint64_t v2 = _os_log_pack_size(2LL);
      uint64_t v3 = (char *)&v5 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v4 = __error();
      *(_WORD *)_os_log_pack_fill(v3, v2, *v4, &_mh_execute_header, "Wi-Fi expensive timer cancelled") = 0;
      __SC_log_send(5LL, v0, v1, v3);
    }

    dispatch_source_cancel((dispatch_source_t)qword_100079F28);
    dispatch_release((dispatch_object_t)qword_100079F28);
    qword_100079F28 = 0LL;
  }

void sub_1000545E0(const __CFDate *a1)
{
  os_log_t v2 = (os_log_t)qword_100079F10;
  if (!qword_100079F10)
  {
    os_log_t v2 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    qword_100079F10 = (uint64_t)v2;
  }

  uint64_t v3 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(12LL);
    uint64_t v5 = (char *)v19 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "Wi-Fi expensive expiration time %@");
    *(_DWORD *)uint64_t v7 = 138412290;
    *(void *)(v7 + 4) = a1;
    __SC_log_send(5LL, v2, v3, v5);
  }

  double Current = CFAbsoluteTimeGetCurrent();
  double AbsoluteTime = CFDateGetAbsoluteTime(a1);
  os_log_t v10 = (os_log_t)qword_100079F10;
  if (!qword_100079F10)
  {
    os_log_t v10 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    qword_100079F10 = (uint64_t)v10;
  }

  double v11 = AbsoluteTime - Current;
  uint64_t v12 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v10, v12))
  {
    uint64_t v13 = _os_log_pack_size(32LL);
    uint64_t v14 = (char *)v19 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    os_log_t v15 = __error();
    uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "expiration %g - now %g = %g",  v19[0],  v19[1],  v19[2]);
    *(_DWORD *)uint64_t v16 = 134218496;
    *(double *)(v16 + 4) = AbsoluteTime;
    *(_WORD *)(v16 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
    *(double *)(v16 + 14) = Current;
    *(_WORD *)(v16 + 2pthread_attr_setdetachstate(&v4, 2) = 2048;
    *(double *)(v16 + 24) = v11;
    __SC_log_send(7LL, v10, v12, v14);
  }

  dispatch_time_t v17 = dispatch_time(0xFFFFFFFFFFFFFFFELL, (uint64_t)(v11 * 1000000000.0));
  uint64_t v18 = (dispatch_queue_s *)qword_100079F30;
  if (!qword_100079F30)
  {
    uint64_t v18 = dispatch_queue_create("com.apple.SystemConfiguration.LinkConfiguration", 0LL);
    qword_100079F30 = (uint64_t)v18;
  }

  qword_100079F28 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, v18);
  dispatch_source_set_event_handler((dispatch_source_t)qword_100079F28, &stru_100073088);
  dispatch_source_set_timer((dispatch_source_t)qword_100079F28, v17, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  dispatch_resume((dispatch_object_t)qword_100079F28);
}

uint64_t sub_100054898()
{
  if (qword_100079F20) {
    return qword_100079F20;
  }
  os_log_t v0 = SCNetworkInterfaceCopyAll();
  if (!v0)
  {
LABEL_10:
    qword_100079F20 = 0LL;
    return qword_100079F20;
  }

  uint64_t v1 = v0;
  CFIndex Count = CFArrayGetCount(v0);
  if (Count < 1)
  {
LABEL_9:
    CFRelease(v1);
    goto LABEL_10;
  }

  CFIndex v3 = Count;
  CFIndex v4 = 0LL;
  while (1)
  {
    ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v1, v4);
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(ValueAtIndex);
    if (CFEqual(InterfaceType, kSCNetworkInterfaceTypeIEEE80211))
    {
      if (BSDName && CFStringHasPrefix(BSDName, @"en")) {
        break;
      }
    }

    if (v3 == ++v4) {
      goto LABEL_9;
    }
  }

  CFStringRef v9 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
  CFRetain(v9);
  CFRelease(v1);
  qword_100079F20 = (uint64_t)v9;
  if (v9)
  {
    os_log_t v10 = (os_log_t)qword_100079F10;
    if (!qword_100079F10)
    {
      os_log_t v10 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_100079F10 = (uint64_t)v10;
    }

    uint64_t v11 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v10, v11))
    {
      uint64_t v12 = _os_log_pack_size(12LL);
      uint64_t v13 = (char *)&v17 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v14 = __error();
      uint64_t v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "Wi-Fi is %@");
      uint64_t v16 = qword_100079F20;
      *(_DWORD *)uint64_t v15 = 138412290;
      *(void *)(v15 + 4) = v16;
      __SC_log_send(5LL, v10, v11, v13);
    }
  }

  return qword_100079F20;
}

uint64_t sub_100054A88(const __CFString *a1, int a2)
{
  uint64_t result = sub_100054CFC((uint64_t)"set_expensive");
  if ((result & 0x80000000) == 0)
  {
    int v5 = result;
    if (CFStringGetCString(a1, buffer, 16LL, 0x8000100u))
    {
      uint64_t result = sub_100054E70(v5, (uint64_t)buffer, a2);
      if ((result & 0x80000000) == 0)
      {
        os_log_t v6 = (os_log_t)qword_100079F10;
        if (!qword_100079F10)
        {
          os_log_t v6 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
          qword_100079F10 = (uint64_t)v6;
        }

        uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
        uint64_t result = __SC_log_enabled(5LL, v6, v7);
        if ((_DWORD)result)
        {
          uint64_t v8 = _os_log_pack_size(22LL);
          CFStringRef v9 = &buffer[-((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
          os_log_t v10 = __error();
          uint64_t v11 = _os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "%s expensive on %s success",  v22,  *(const char **)buffer);
          uint64_t v12 = "enable";
          if (!a2) {
            uint64_t v12 = "disable";
          }
          *(_DWORD *)uint64_t v11 = 136315394;
          *(void *)(v11 + 4) = v12;
          *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
          *(void *)(v11 + 14) = buffer;
          os_log_t v13 = v6;
          uint64_t v14 = v7;
          uint64_t v15 = v9;
          return __SC_log_send(5LL, v13, v14, v15);
        }
      }
    }

    else
    {
      os_log_t v16 = (os_log_t)qword_100079F10;
      if (!qword_100079F10)
      {
        os_log_t v16 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_100079F10 = (uint64_t)v16;
      }

      uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
      uint64_t result = __SC_log_enabled(5LL, v16, v17);
      if ((_DWORD)result)
      {
        uint64_t v18 = _os_log_pack_size(22LL);
        uint64_t v19 = &buffer[-((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
        uint64_t v20 = __error();
        uint64_t v21 = _os_log_pack_fill(v19, v18, *v20, &_mh_execute_header, "%s: can't convert %@ to string");
        *(_DWORD *)uint64_t v21 = 136315394;
        *(void *)(v21 + 4) = "set_expensive";
        *(_WORD *)(v21 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
        *(void *)(v21 + 14) = a1;
        os_log_t v13 = v16;
        uint64_t v14 = v17;
        uint64_t v15 = v19;
        return __SC_log_send(5LL, v13, v14, v15);
      }
    }
  }

  return result;
}

uint64_t sub_100054CFC(uint64_t a1)
{
  if (dword_10007999C < 0)
  {
    dword_10007999C = socket(2, 2, 0);
    if (dword_10007999C < 0)
    {
      os_log_t v2 = (os_log_t)qword_100079F10;
      if (!qword_100079F10)
      {
        os_log_t v2 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_100079F10 = (uint64_t)v2;
      }

      uint64_t v3 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v2, v3))
      {
        uint64_t v4 = _os_log_pack_size(22LL);
        int v5 = (char *)v11 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        os_log_t v6 = __error();
        uint64_t v7 = _os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "%s: socket() failed: %s",  v11[0],  v11[1]);
        uint64_t v8 = __error();
        CFStringRef v9 = strerror(*v8);
        *(_DWORD *)uint64_t v7 = 136315394;
        *(void *)(v7 + 4) = a1;
        *(_WORD *)(v7 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
        *(void *)(v7 + 14) = v9;
        __SC_log_send(3LL, v2, v3, v5);
      }
    }
  }

  return dword_10007999C;
}

uint64_t sub_100054E70(int a1, uint64_t a2, int a3)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __strlcpy_chk(&v17, a2, 16LL, 16LL);
  LODWORD(v1_Block_object_dispose(va, 8) = a3 != 0;
  uint64_t v6 = ioctl(a1, 0xC02069A1uLL, &v17);
  if ((v6 & 0x80000000) != 0)
  {
    os_log_t v7 = (os_log_t)qword_100079F10;
    if (!qword_100079F10)
    {
      os_log_t v7 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_100079F10 = (uint64_t)v7;
    }

    uint64_t v8 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v7, v8))
    {
      uint64_t v9 = _os_log_pack_size(28LL);
      os_log_t v10 = (char *)&v17 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v11 = __error();
      uint64_t v12 = _os_log_pack_fill( v10,  v9,  *v11,  &_mh_execute_header,  "ioctl(%s, SIOCSIFEXPENSIVE %u failed, %s",  (const char *)v17,  DWORD2(v17),  (const char *)v18);
      int v13 = v18;
      uint64_t v14 = __error();
      uint64_t v15 = strerror(*v14);
      *(_DWORD *)uint64_t v12 = 136315650;
      *(void *)(v12 + 4) = a2;
      *(_WORD *)(v12 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v12 + 14) = v13;
      *(_WORD *)(v12 + 1_Block_object_dispose(va, 8) = 2080;
      *(void *)(v12 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v15;
      __SC_log_send(3LL, v7, v8, v10);
    }
  }

  return v6;
}

void sub_100055020(id a1)
{
  if ((dword_10007999C & 0x80000000) == 0)
  {
    close(dword_10007999C);
    dword_10007999C = -1;
  }

uint64_t sub_100055090(const __SCNetworkInterface *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)SCNetworkInterfaceGetBSDName(a1);
  if (result)
  {
    int v5 = (const void *)result;
    uint64_t result = __SCNetworkInterfaceCreateCapabilities(a1, 0xFFFFFFFFLL, 0LL);
    if ((_DWORD)result != -1)
    {
      uint64_t v6 = result;
      unsigned int valuePtr = result;
      unsigned int Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_100079EF0, v5);
      uint64_t v8 = v6;
      if (Value)
      {
        uint64_t v9 = (const __CFNumber *)CFDictionaryGetValue(Value, @"_CAPABILITIES_");
        uint64_t v8 = v6;
        if (v9)
        {
          CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
          uint64_t v8 = valuePtr;
        }
      }

      uint64_t result = __SCNetworkInterfaceCreateCapabilities(a1, v8, a2);
      if ((_DWORD)result != (_DWORD)v6)
      {
        unsigned int v10 = result;
        __int128 v21 = 0u;
        __int128 v22 = 0u;
        _SC_cfstring_to_cstring(v5, &v21, 16LL, 1536LL);
        *(void *)&__int128 v22 = __PAIR64__(v6, v10);
        uint64_t result = sub_100054CFC((uint64_t)"_SCNetworkInterfaceSetCapabilities");
        if ((_DWORD)result != -1)
        {
          uint64_t result = ioctl(result, 0x8020695AuLL, &v21);
          if ((_DWORD)result == -1)
          {
            os_log_t v11 = (os_log_t)qword_100079F10;
            if (!qword_100079F10)
            {
              os_log_t v11 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
              qword_100079F10 = (uint64_t)v11;
            }

            uint64_t v12 = _SC_syslog_os_log_mapping(3LL);
            uint64_t result = __SC_log_enabled(3LL, v11, v12);
            if ((_DWORD)result)
            {
              uint64_t v13 = _os_log_pack_size(22LL);
              uint64_t v14 = (char *)&v19 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              uint64_t v15 = __error();
              uint64_t v16 = _os_log_pack_fill( v14,  v13,  *v15,  &_mh_execute_header,  "%@: ioctl(SIOCSIFCAP) failed: %s");
              __int128 v17 = __error();
              __int128 v18 = strerror(*v17);
              *(_DWORD *)uint64_t v16 = 138412546;
              *(void *)(v16 + 4) = v5;
              *(_WORD *)(v16 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
              *(void *)(v16 + 14) = v18;
              return __SC_log_send(3LL, v11, v12, v14);
            }
          }
        }
      }
    }
  }

  return result;
}

void sub_1000552AC(const void *a1, const void *a2)
{
  CFDictionaryRef current = 0LL;
  CFArrayRef available = 0LL;
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID)
  {
    _SCErrorSet(1002LL);
    return;
  }

  CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1);
  if (BSDName)
  {
    CFStringRef v6 = BSDName;
    if (SCNetworkInterfaceCopyMediaOptions((SCNetworkInterfaceRef)a1, &current, 0LL, &available, 0))
    {
      os_log_t v7 = sub_100055C9C(a2);
      if (!v7)
      {
        unsigned int Value = CFDictionaryGetValue((CFDictionaryRef)qword_100079EF0, v6);
        os_log_t v7 = sub_100055C9C(Value);
        if (!v7)
        {
          os_log_t v7 = sub_100055C9C(current);
          if (!v7)
          {
            char v56 = 1;
            goto LABEL_48;
          }
        }
      }

      if (!current || !CFEqual(current, v7))
      {
        uint64_t v9 = available;
        v63.length = CFArrayGetCount(available);
        v63.location = 0LL;
        if (CFArrayContainsValue(v9, v63, v7))
        {
          unsigned int MediaOptions = __SCNetworkInterfaceCreateMediaOptions(a1, v7);
          if (MediaOptions == -1) {
            goto LABEL_47;
          }
          unsigned int v11 = MediaOptions;
          int v12 = sub_100054CFC((uint64_t)"_SCNetworkInterfaceSetMediaOptions");
          if (v12 == -1) {
            goto LABEL_47;
          }
          int v13 = v12;
          memset(v62, 0, 44);
          _SC_cfstring_to_cstring(v6, v62, 16LL, 1536LL);
          if (ioctl(v13, 0xC02C6948uLL, v62) == -1)
          {
            os_log_t v29 = (os_log_t)qword_100079F10;
            if (!qword_100079F10)
            {
              os_log_t v29 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
              qword_100079F10 = (uint64_t)v29;
            }

            uint64_t v30 = _SC_syslog_os_log_mapping(3LL);
            uint64_t v51 = _os_log_pack_size(22LL);
            CFDictionaryRef v32 = (char *)&current - ((__chkstk_darwin(v51) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v52 = *__error();
            uint64_t v34 = _os_log_pack_fill(v32, v51, v52, &_mh_execute_header, "%@: ioctl(SIOCGIFXMEDIA) failed: %s", current);
          }

          else
          {
            uint64_t v61 = 0LL;
            __int128 v59 = v62[0];
            unsigned int v14 = v62[1] & 0xF0000000 | v11;
            unint64_t v60 = v62[1] & 0xF0000000 | (unint64_t)v11;
            os_log_t v15 = (os_log_t)qword_100079F10;
            if (!qword_100079F10)
            {
              os_log_t v15 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
              qword_100079F10 = (uint64_t)v15;
            }

            uint64_t v16 = _SC_syslog_os_log_mapping(6LL);
            if (__SC_log_enabled(6LL, v15, v16))
            {
              uint64_t v17 = _os_log_pack_size(14LL);
              __int128 v18 = (char *)&current - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              uint64_t v19 = __error();
              uint64_t v20 = _os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "old media settings: 0x%8.8x (0x%8.8x)",  (_DWORD)current,  (_DWORD)available);
              int v21 = v62[1];
              int v22 = HIDWORD(v62[1]);
              *(_DWORD *)uint64_t v20 = 67109376;
              *(_DWORD *)(v20 + 4) = v21;
              *(_WORD *)(v20 + _Block_object_dispose(va, 8) = 1024;
              *(_DWORD *)(v20 + 1sub_10000F430((uint64_t)__str, 0) = v22;
              __SC_log_send(6LL, v15, v16, v18);
            }

            os_log_t v23 = (os_log_t)qword_100079F10;
            if (!qword_100079F10)
            {
              os_log_t v23 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
              qword_100079F10 = (uint64_t)v23;
            }

            uint64_t v24 = _SC_syslog_os_log_mapping(6LL);
            if (__SC_log_enabled(6LL, v23, v24))
            {
              uint64_t v25 = _os_log_pack_size(8LL);
              CFIndex v26 = (char *)&current - ((__chkstk_darwin(v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              CFIndex v27 = __error();
              uint64_t v28 = (_DWORD *)_os_log_pack_fill( v26,  v25,  *v27,  &_mh_execute_header,  "new media settings: 0x%8.8x",  (_DWORD)current);
              *uint64_t v28 = 67109120;
              v28[1] = v14;
              __SC_log_send(6LL, v23, v24, v26);
            }

            if (ioctl(v13, 0xC0206937uLL, &v59) != -1) {
              goto LABEL_47;
            }
            os_log_t v29 = (os_log_t)qword_100079F10;
            if (!qword_100079F10)
            {
              os_log_t v29 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
              qword_100079F10 = (uint64_t)v29;
            }

            uint64_t v30 = _SC_syslog_os_log_mapping(3LL);
            uint64_t v31 = _os_log_pack_size(22LL);
            CFDictionaryRef v32 = (char *)&current - ((__chkstk_darwin(v31) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v33 = *__error();
            uint64_t v34 = _os_log_pack_fill(v32, v31, v33, &_mh_execute_header, "%@: ioctl(SIOCSIFMEDIA) failed: %s", current);
          }

          uint64_t v53 = v34;
          __int128 v54 = __error();
          CFRange v55 = strerror(*v54);
          *(_DWORD *)uint64_t v53 = 138412546;
          *(void *)(v53 + 4) = v6;
          *(_WORD *)(v53 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
          *(void *)(v53 + 14) = v55;
          uint64_t v50 = 3LL;
        }

        else
        {
          os_log_t v29 = (os_log_t)qword_100079F10;
          if (!qword_100079F10)
          {
            os_log_t v29 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
            qword_100079F10 = (uint64_t)v29;
          }

          uint64_t v30 = _SC_syslog_os_log_mapping(6LL);
          uint64_t v47 = _os_log_pack_size(12LL);
          CFDictionaryRef v32 = (char *)&current - ((__chkstk_darwin(v47) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          CFTypeID v48 = __error();
          uint64_t v49 = _os_log_pack_fill( v32,  v47,  *v48,  &_mh_execute_header,  "requested media settings unavailable for %@");
          *(_DWORD *)uint64_t v49 = 138412290;
          *(void *)(v49 + 4) = v6;
          uint64_t v50 = 6LL;
        }

        __SC_log_send(v50, v29, v30, v32);
      }

void sub_100055A70(const __SCNetworkInterface *a1, const void *a2)
{
  int mtu_max = -1;
  int mtu_cur = -1;
  int mtu_min = -1;
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (BSDName)
  {
    CFStringRef v5 = BSDName;
    if (SCNetworkInterfaceCopyMTU(a1, &mtu_cur, &mtu_min, &mtu_max))
    {
      if ((CFTypeID TypeID = CFDictionaryGetTypeID(), a2)
        && CFGetTypeID(a2) == TypeID
        && (unsigned int Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, kSCPropNetEthernetMTU),
            CFTypeID v8 = CFNumberGetTypeID(),
            Value)
        && CFGetTypeID(Value) == v8
        || (uint64_t v9 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_100079EF0, v5)) != 0LL
        && (unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(v9, kSCPropNetEthernetMTU)) != 0LL)
      {
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
        if (valuePtr != mtu_cur && (mtu_min < 0 || valuePtr >= mtu_min) && (mtu_max < 0 || valuePtr <= mtu_max))
        {
          CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
          if (CFEqual(InterfaceType, kSCNetworkInterfaceTypeBridge)
            && (MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(a1)) != 0LL
            && (int v12 = MemberInterfaces, CFArrayGetCount(MemberInterfaces)))
          {
            CFRetain(v12);
            if (SCBridgeInterfaceSetMemberInterfaces(a1, 0LL)
              && _SCBridgeInterfaceUpdateConfiguration(*((void *)a1 + 10)))
            {
              sub_100055DD0((uint64_t)v5, valuePtr);
              char v13 = 0;
            }

            else
            {
              char v13 = 1;
            }

            CFIndex Count = CFArrayGetCount(v12);
            if (Count >= 1)
            {
              CFIndex v15 = Count;
              for (CFIndex i = 0LL; i != v15; ++i)
              {
                ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v12, i);
                CFStringRef v18 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
                sub_100055DD0((uint64_t)v18, valuePtr);
              }
            }

            SCBridgeInterfaceSetMemberInterfaces(a1, v12);
            CFRelease(v12);
            if ((v13 & 1) == 0) {
              _SCBridgeInterfaceUpdateConfiguration(*((void *)a1 + 10));
            }
          }

          else
          {
            sub_100055DD0((uint64_t)v5, valuePtr);
          }
        }
      }
    }
  }

__CFDictionary *sub_100055C9C(const void *a1)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1) {
    return 0LL;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  unsigned int Value = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetEthernetMediaSubType);
  CFTypeID v4 = CFStringGetTypeID();
  if (!Value || CFGetTypeID(Value) != v4) {
    return 0LL;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, kSCPropNetEthernetMediaSubType, Value);
  CFStringRef v6 = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetEthernetMediaOptions);
  CFTypeID v7 = CFArrayGetTypeID();
  if (!v6 || CFGetTypeID(v6) != v7)
  {
    CFRelease(Mutable);
    return 0LL;
  }

  CFDictionaryAddValue(Mutable, kSCPropNetEthernetMediaOptions, v6);
  return Mutable;
}

uint64_t sub_100055DD0(uint64_t a1, int a2)
{
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  _SC_cfstring_to_cstring(a1, &v23, 16LL, 1536LL);
  LODWORD(v24) = a2;
  uint64_t result = sub_100054CFC((uint64_t)"interfaceSetMTU");
  if ((_DWORD)result != -1)
  {
    int v5 = ioctl(result, 0x80206934uLL, &v23);
    os_log_t v6 = (os_log_t)qword_100079F10;
    if (v5 == -1)
    {
      if (!qword_100079F10)
      {
        os_log_t v6 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_100079F10 = (uint64_t)v6;
      }

      uint64_t v16 = _SC_syslog_os_log_mapping(3LL);
      uint64_t result = __SC_log_enabled(3LL, v6, v16);
      if ((_DWORD)result)
      {
        uint64_t v17 = _os_log_pack_size(22LL);
        CFStringRef v18 = (char *)&v23 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v19 = __error();
        uint64_t v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "%@: ioctl(SIOCSIFMTU) failed: %s");
        int v21 = __error();
        int v22 = strerror(*v21);
        *(_DWORD *)uint64_t v20 = 138412546;
        *(void *)(v20 + 4) = a1;
        *(_WORD *)(v20 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
        *(void *)(v20 + 14) = v22;
        uint64_t v12 = 3LL;
        os_log_t v13 = v6;
        uint64_t v14 = v16;
        CFIndex v15 = v18;
        return __SC_log_send(v12, v13, v14, v15);
      }
    }

    else
    {
      if (!qword_100079F10)
      {
        os_log_t v6 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_100079F10 = (uint64_t)v6;
      }

      uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
      uint64_t result = __SC_log_enabled(5LL, v6, v7);
      if ((_DWORD)result)
      {
        uint64_t v8 = _os_log_pack_size(18LL);
        uint64_t v9 = (char *)&v23 - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        unsigned int v10 = __error();
        uint64_t v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "%@: set MTU to %d");
        *(_DWORD *)uint64_t v11 = 138412546;
        *(void *)(v11 + 4) = a1;
        *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
        *(_DWORD *)(v11 + 14) = a2;
        uint64_t v12 = 5LL;
        os_log_t v13 = v6;
        uint64_t v14 = v7;
        CFIndex v15 = v9;
        return __SC_log_send(v12, v13, v14, v15);
      }
    }
  }

  return result;
}

uint64_t sub_100056038(const __CFString *a1, int a2)
{
  uint64_t result = sub_100054CFC((uint64_t)"set_low_data_mode");
  if ((result & 0x80000000) == 0)
  {
    int v5 = result;
    if (CFStringGetCString(a1, buffer, 16LL, 0x8000100u))
    {
      uint64_t result = sub_1000562AC(v5, (uint64_t)buffer, a2);
      if ((result & 0x80000000) == 0)
      {
        os_log_t v6 = (os_log_t)qword_100079F10;
        if (!qword_100079F10)
        {
          os_log_t v6 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
          qword_100079F10 = (uint64_t)v6;
        }

        uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
        uint64_t result = __SC_log_enabled(5LL, v6, v7);
        if ((_DWORD)result)
        {
          uint64_t v8 = _os_log_pack_size(22LL);
          uint64_t v9 = &buffer[-((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
          unsigned int v10 = __error();
          uint64_t v11 = _os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "%s LowDataMode on %s",  v22,  *(const char **)buffer);
          uint64_t v12 = "enable";
          if (!a2) {
            uint64_t v12 = "disable";
          }
          *(_DWORD *)uint64_t v11 = 136315394;
          *(void *)(v11 + 4) = v12;
          *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
          *(void *)(v11 + 14) = buffer;
          os_log_t v13 = v6;
          uint64_t v14 = v7;
          CFIndex v15 = v9;
          return __SC_log_send(5LL, v13, v14, v15);
        }
      }
    }

    else
    {
      os_log_t v16 = (os_log_t)qword_100079F10;
      if (!qword_100079F10)
      {
        os_log_t v16 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        qword_100079F10 = (uint64_t)v16;
      }

      uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
      uint64_t result = __SC_log_enabled(5LL, v16, v17);
      if ((_DWORD)result)
      {
        uint64_t v18 = _os_log_pack_size(22LL);
        uint64_t v19 = &buffer[-((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
        uint64_t v20 = __error();
        uint64_t v21 = _os_log_pack_fill(v19, v18, *v20, &_mh_execute_header, "%s: can't convert %@ to string");
        *(_DWORD *)uint64_t v21 = 136315394;
        *(void *)(v21 + 4) = "set_low_data_mode";
        *(_WORD *)(v21 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
        *(void *)(v21 + 14) = a1;
        os_log_t v13 = v16;
        uint64_t v14 = v17;
        CFIndex v15 = v19;
        return __SC_log_send(5LL, v13, v14, v15);
      }
    }
  }

  return result;
}

uint64_t sub_1000562AC(int a1, uint64_t a2, int a3)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __strlcpy_chk(&v17, a2, 16LL, 16LL);
  LODWORD(v1_Block_object_dispose(va, 8) = a3 != 0;
  uint64_t v6 = ioctl(a1, 0xC02069CDuLL, &v17);
  if ((v6 & 0x80000000) != 0)
  {
    os_log_t v7 = (os_log_t)qword_100079F10;
    if (!qword_100079F10)
    {
      os_log_t v7 = os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      qword_100079F10 = (uint64_t)v7;
    }

    uint64_t v8 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v7, v8))
    {
      uint64_t v9 = _os_log_pack_size(28LL);
      unsigned int v10 = (char *)&v17 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v11 = __error();
      uint64_t v12 = _os_log_pack_fill( v10,  v9,  *v11,  &_mh_execute_header,  "ioctl(%s, SIOCSIFCONSTRAINED %u failed, %s",  (const char *)v17,  DWORD2(v17),  (const char *)v18);
      int v13 = v18;
      uint64_t v14 = __error();
      CFIndex v15 = strerror(*v14);
      *(_DWORD *)uint64_t v12 = 136315650;
      *(void *)(v12 + 4) = a2;
      *(_WORD *)(v12 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v12 + 14) = v13;
      *(_WORD *)(v12 + 1_Block_object_dispose(va, 8) = 2080;
      *(void *)(v12 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v15;
      __SC_log_send(3LL, v7, v8, v10);
    }
  }

  return v6;
}

id sub_10005645C()
{
  if (!objc_opt_class(&OBJC_CLASS___CWFInterface)) {
    return 0LL;
  }
  os_log_t v0 = objc_autoreleasePoolPush();
  id v1 = objc_alloc_init(&OBJC_CLASS___CWFInterface);
  [v1 activate];
  id v2 = objc_msgSend(objc_msgSend(v1, "currentScanResult"), "isMetered");
  [v1 invalidate];

  objc_autoreleasePoolPop(v0);
  return v2;
}

uint64_t sub_100056508(uint64_t a1, uint64_t a2)
{
  qword_100079F38 = a1;
  qword_100079F40 = a2;
  id v2 = (dispatch_queue_s *)qword_100079F48;
  if (!qword_100079F48)
  {
    id v2 = dispatch_queue_create("CategoryManagerServer", 0LL);
    qword_100079F48 = (uint64_t)v2;
  }

  mach_service = xpc_connection_create_mach_service("com.apple.SystemConfiguration.NetworkCategoryManager", v2, 1uLL);
  if (mach_service)
  {
    CFTypeID v4 = mach_service;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000LL;
    handler[2] = sub_1000569D0;
    handler[3] = &unk_1000730F0;
    void handler[4] = mach_service;
    xpc_connection_set_event_handler(mach_service, handler);
    xpc_connection_activate(v4);
    dispatch_queue_t v5 = (dispatch_queue_t)qword_100079F48;
    if (!qword_100079F48)
    {
      dispatch_queue_t v5 = dispatch_queue_create("CategoryManagerServer", 0LL);
      qword_100079F48 = (uint64_t)v5;
    }

    os_state_add_handler(v5, &stru_100073150);
    return 1LL;
  }

  else
  {
    qword_100079F38 = 0LL;
    qword_100079F40 = 0LL;
    os_log_t v7 = sub_100058E78();
    uint64_t v8 = _SC_syslog_os_log_mapping(3LL);
    uint64_t result = __SC_log_enabled(3LL, v7, v8);
    if ((_DWORD)result)
    {
      uint64_t v9 = _os_log_pack_size(2LL);
      unsigned int v10 = (char *)handler - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v11 = __error();
      *(_WORD *)_os_log_pack_fill( v10,  v9,  *v11,  &_mh_execute_header,  "CategoryManagerServer: failed to create server") = 0;
      __SC_log_send(3LL, v7, v8, v10);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000566C4()
{
  uint64_t v4 = 0LL;
  dispatch_queue_t v5 = &v4;
  uint64_t v6 = 0x2000000000LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000LL;
  v3[2] = sub_100056794;
  v3[3] = &unk_1000730B0;
  void v3[4] = &v4;
  os_log_t v0 = (dispatch_queue_s *)qword_100079F48;
  if (!qword_100079F48)
  {
    os_log_t v0 = dispatch_queue_create("CategoryManagerServer", 0LL);
    qword_100079F48 = (uint64_t)v0;
  }

  dispatch_sync(v0, v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100056794(uint64_t a1)
{
  id v2 = (void *)S_CategorySessions;
  if (S_CategorySessions)
  {
    CFMutableArrayRef Mutable = 0LL;
    do
    {
      CFDictionaryRef v4 = sub_10005877C(v2);
      if (!Mutable) {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      }
      CFArrayAppendValue(Mutable, v4);
      CFRelease(v4);
      id v2 = (void *)*v2;
    }

    while (v2);
  }

  else
  {
    CFMutableArrayRef Mutable = 0LL;
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = Mutable;
}

void sub_100056860(uint64_t a1)
{
  if (a1)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 0x40000000LL;
    v2[2] = sub_100056908;
    v2[3] = &unk_1000730D0;
    v2[4] = a1;
    uint64_t v1 = (dispatch_queue_s *)qword_100079F48;
    if (!qword_100079F48)
    {
      uint64_t v1 = dispatch_queue_create("CategoryManagerServer", 0LL);
      qword_100079F48 = (uint64_t)v1;
    }

    dispatch_sync(v1, v2);
  }

CFIndex sub_100056908(uint64_t a1)
{
  uint64_t v1 = *(const __CFArray **)(a1 + 32);
  CFIndex result = CFArrayGetCount(v1);
  if (result >= 1)
  {
    CFIndex v3 = result;
    int v4 = 0;
    for (CFIndex i = 0LL; i != v3; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v1, i);
      CFIndex result = sub_1000589E4(ValueAtIndex);
      if ((_DWORD)result) {
        int v4 = 1;
      }
    }

    if (v4) {
      return sub_100058D48();
    }
  }

  return result;
}

void sub_1000569D0(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    handler[0] = _NSConcreteStackBlock;
    handler[1] = (const void *)0x40000000;
    handler[2] = sub_100056CD4;
    handler[3] = &unk_100073110;
    void handler[4] = object;
    xpc_connection_set_event_handler((xpc_connection_t)object, handler);
    int v13 = (dispatch_queue_s *)qword_100079F48;
    if (!qword_100079F48)
    {
      int v13 = dispatch_queue_create("CategoryManagerServer", 0LL);
      qword_100079F48 = (uint64_t)v13;
    }

    xpc_connection_set_target_queue((xpc_connection_t)object, v13);
    xpc_connection_activate((xpc_connection_t)object);
  }

  else
  {
    xpc_type_t v5 = type;
    if (type != (xpc_type_t)&_xpc_type_error)
    {
      os_log_t v6 = sub_100058E78();
      uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
      uint64_t v8 = _os_log_pack_size(12LL);
      uint64_t v9 = (char *)handler - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      unsigned int v10 = __error();
      uint64_t v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "unknown event %p", handler[0]);
      *(_DWORD *)uint64_t v11 = 134217984;
      *(void *)(v11 + 4) = v5;
      os_log_t v12 = v6;
LABEL_11:
      __SC_log_send(5LL, v12, v7, v9);
      return;
    }

    string = xpc_dictionary_get_string(object, _xpc_error_key_description);
    os_log_t v15 = sub_100058E78();
    uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
    int v16 = __SC_log_enabled(5LL, v15, v7);
    if (object != &_xpc_error_connection_invalid)
    {
      if (!v16) {
        return;
      }
      uint64_t v17 = _os_log_pack_size(12LL);
      uint64_t v9 = (char *)handler - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __int128 v18 = __error();
      uint64_t v19 = _os_log_pack_fill(v9, v17, *v18, &_mh_execute_header, "%s", (const char *)handler[0]);
      *(_DWORD *)uint64_t v19 = 136315138;
      *(void *)(v19 + 4) = string;
      os_log_t v12 = v15;
      goto LABEL_11;
    }

    if (v16)
    {
      uint64_t v20 = _os_log_pack_size(12LL);
      uint64_t v21 = (char *)handler - ((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int v22 = __error();
      uint64_t v23 = _os_log_pack_fill(v21, v20, *v22, &_mh_execute_header, "%s", (const char *)handler[0]);
      *(_DWORD *)uint64_t v23 = 136315138;
      *(void *)(v23 + 4) = string;
      __SC_log_send(5LL, v15, v7, v21);
    }

    xpc_release(*(xpc_object_t *)(a1 + 32));
  }

void sub_100056CD4(uint64_t a1, void *a2)
{
}

void sub_100056D1C(_xpc_connection_s *a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    int int64 = xpc_dictionary_get_int64(object, "Type");
    xpc_object_t reply = xpc_dictionary_create_reply(object);
    int v13 = reply;
    switch(int64)
    {
      case 3:
        if (!reply) {
          return;
        }
        CFBooleanRef context = (CFBooleanRef)xpc_connection_get_context(a1);
        if (context)
        {
          if (context != kCFBooleanTrue && context != kCFBooleanFalse) {
            goto LABEL_21;
          }
        }

        if (!sub_100057FAC(a1))
        {
          unsigned int v14 = 1;
          break;
        }

        string = xpc_dictionary_get_string(object, "Category");
        if (!string)
        {
          unsigned int v14 = 22;
          break;
        }

        int v22 = (char *)string;
        uint64_t v23 = xpc_dictionary_get_string(object, "InterfaceName");
        CFBooleanRef context = (CFBooleanRef)sub_10005796C(v22, v23);
        if (context)
        {
LABEL_21:
          uint64_t v19 = (const char *)*((void *)context + 9);
          if (v19) {
            xpc_dictionary_set_string(v13, "ActiveValue", v19);
          }
          unsigned int v14 = 0;
          break;
        }

        unsigned int v14 = 2;
        break;
      case 2:
        unsigned int v14 = sub_100057554(a1, object);
        if (!v13) {
          return;
        }
        break;
      case 1:
        unsigned int v14 = sub_100057084(a1, object);
        if (!v13) {
          return;
        }
        break;
      default:
        unsigned int v14 = 22;
        if (!v13) {
          return;
        }
        break;
    }

    xpc_dictionary_set_int64(v13, "Error", v14);
    remote_connection = xpc_dictionary_get_remote_connection(object);
    xpc_connection_send_message(remote_connection, v13);
    xpc_release(v13);
    return;
  }

  if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (object == &_xpc_error_connection_invalid)
    {
      sub_100057830(a1);
    }

    else if (object == &_xpc_error_connection_interrupted)
    {
      os_log_t v5 = sub_100058E78();
      uint64_t v6 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v5, v6))
      {
        uint64_t v15 = _os_log_pack_size(2LL);
        uint64_t v8 = (char *)&v24 - ((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v16 = *__error();
        unsigned int v10 = (_WORD *)_os_log_pack_fill(v8, v15, v16, &_mh_execute_header, "connection interrupted");
        goto LABEL_5;
      }
    }
  }

  else
  {
    os_log_t v5 = sub_100058E78();
    uint64_t v6 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v5, v6))
    {
      uint64_t v7 = _os_log_pack_size(2LL);
      uint64_t v8 = (char *)&v24 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v9 = *__error();
      unsigned int v10 = (_WORD *)_os_log_pack_fill(v8, v7, v9, &_mh_execute_header, "unexpected event");
LABEL_5:
      _WORD *v10 = 0;
      __SC_log_send(5LL, v5, v6, v8);
    }
  }

uint64_t sub_100057084(_xpc_connection_s *a1, void *a2)
{
  if (xpc_connection_get_context(a1))
  {
    os_log_t v4 = sub_100058E78();
    uint64_t v5 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v4, v5))
    {
      uint64_t v6 = _os_log_pack_size(28LL);
      uint64_t v7 = (char *)&v43 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v8 = __error();
      uint64_t v9 = _os_log_pack_fill( v7,  v6,  *v8,  &_mh_execute_header,  "%s: connection %p pid %d trying to register again",  v43,  v44,  (_DWORD)v45);
      pid_t pid = xpc_connection_get_pid(a1);
      *(_DWORD *)uint64_t v9 = 136315650;
      *(void *)(v9 + 4) = "HandleRegister";
      *(_WORD *)(v9 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
      *(void *)(v9 + 14) = a1;
      *(_WORD *)(v9 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v9 + 24) = pid;
      __SC_log_send(5LL, v4, v5, v7);
      return 22LL;
    }

    return 22LL;
  }

  if (sub_100057D60(a1, (uint64_t)"com.apple.private.SCNetworkCategoryManager.manager"))
  {
    string = xpc_dictionary_get_string(a2, "Category");
    if (!string) {
      return 22LL;
    }
    int v13 = (char *)string;
    unsigned int v14 = xpc_dictionary_get_string(a2, "InterfaceName");
    int int64 = xpc_dictionary_get_int64(a2, "Flags");
    if (!int64 || (uint64_t result = 22LL, int64 == 1) && v14)
    {
      if (sub_10005796C(v13, v14))
      {
        os_log_t v16 = sub_100058E78();
        uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v16, v17))
        {
          uint64_t v18 = _os_log_pack_size(28LL);
          uint64_t v19 = (char *)&v43 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v20 = __error();
          uint64_t v21 = _os_log_pack_fill( v19,  v18,  *v20,  &_mh_execute_header,  "connection %p pid %d category %s already exists",  v43,  (_DWORD)v44,  v45);
          pid_t v22 = xpc_connection_get_pid(a1);
          *(_DWORD *)uint64_t v21 = 134218498;
          *(void *)(v21 + 4) = a1;
          *(_WORD *)(v21 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
          *(_DWORD *)(v21 + 14) = v22;
          *(_WORD *)(v21 + 1_Block_object_dispose(va, 8) = 2080;
          *(void *)(v21 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v13;
          __SC_log_send(5LL, v16, v17, v19);
        }

        return 17LL;
      }

      else
      {
        uint64_t v30 = xpc_dictionary_get_string(a2, "ProcessName");
        uint64_t v31 = sub_100057A08(a1, v30, v13, v14, int64);
        os_log_t v32 = sub_100058E78();
        uint64_t v33 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v32, v33))
        {
          uint64_t v34 = _os_log_pack_size(48LL);
          os_log_t v35 = (char *)&v43 - ((__chkstk_darwin(v34) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v36 = __error();
          uint64_t v37 = _os_log_pack_fill( v35,  v34,  *v36,  &_mh_execute_header,  "CategoryManager[Register]: %s[%d] category %s interface %s%s",  v43,  (_DWORD)v44,  v45,  v46,  v47);
          int v38 = *((_DWORD *)v31 + 7);
          uint64_t v39 = *((void *)v31 + 4);
          uint64_t v40 = *((void *)v31 + 5);
          os_log_t v41 = "<any>";
          if (v14) {
            os_log_t v41 = v14;
          }
          *(_DWORD *)uint64_t v37 = 136316162;
          *(void *)(v37 + 4) = v39;
          else {
            uint64_t v42 = "";
          }
          *(_WORD *)(v37 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
          *(_DWORD *)(v37 + 14) = v38;
          *(_WORD *)(v37 + 1_Block_object_dispose(va, 8) = 2080;
          *(void *)(v37 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v40;
          *(_WORD *)(v37 + 2_Block_object_dispose(va, 8) = 2080;
          *(void *)(v37 + 3sub_10000F430((uint64_t)__str, 0) = v41;
          *(_WORD *)(v37 + 3_Block_object_dispose(va, 8) = 2080;
          *(void *)(v37 + 4sub_10000F430((uint64_t)__str, 0) = v42;
          __SC_log_send(5LL, v32, v33, v35);
        }

        sub_100057C34();
        return 0LL;
      }
    }
  }

  else
  {
    os_log_t v23 = sub_100058E78();
    uint64_t v24 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v23, v24))
    {
      uint64_t v25 = _os_log_pack_size(28LL);
      CFIndex v26 = (char *)&v43 - ((__chkstk_darwin(v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFIndex v27 = __error();
      uint64_t v28 = _os_log_pack_fill( v26,  v25,  *v27,  &_mh_execute_header,  "%s: connection %p pid %d permission denied",  v43,  v44,  (_DWORD)v45);
      pid_t v29 = xpc_connection_get_pid(a1);
      *(_DWORD *)uint64_t v28 = 136315650;
      *(void *)(v28 + 4) = "HandleRegister";
      *(_WORD *)(v28 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
      *(void *)(v28 + 14) = a1;
      *(_WORD *)(v28 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v28 + 24) = v29;
      __SC_log_send(5LL, v23, v24, v26);
    }

    xpc_connection_set_context(a1, kCFBooleanFalse);
    return 1LL;
  }

  return result;
}

uint64_t sub_100057554(_xpc_connection_s *a1, void *a2)
{
  CFBooleanRef context = (const __CFBoolean *)xpc_connection_get_context(a1);
  if (context)
  {
    uint64_t v5 = context;
    if (context != kCFBooleanTrue && context != kCFBooleanFalse)
    {
      string = xpc_dictionary_get_string(a2, "Value");
      uint64_t v8 = string;
      unint64_t v9 = *((void *)v5 + 8);
      if (string && v9)
      {
        BOOL v10 = strcmp(*((const char **)v5 + 8), string) != 0;
      }

      else
      {
        BOOL v10 = ((unint64_t)string | v9) != 0;
        if (!string)
        {
          uint64_t v18 = 0LL;
          int v19 = 1;
          if (!v9) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
      }

      uint64_t v18 = strdup(v8);
      int v19 = 0;
      if (!v9)
      {
LABEL_15:
        *((void *)v5 + _Block_object_dispose(va, 8) = v18;
        if (v10)
        {
          uint64_t v20 = (const char *)*((void *)v5 + 6);
          os_log_t v21 = sub_100058E78();
          uint64_t v22 = _SC_syslog_os_log_mapping(5LL);
          if (__SC_log_enabled(5LL, v21, v22))
          {
            uint64_t v23 = _os_log_pack_size(48LL);
            uint64_t v24 = (char *)&v32 - ((__chkstk_darwin(v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v25 = __error();
            uint64_t v26 = _os_log_pack_fill( v24,  v23,  *v25,  &_mh_execute_header,  "CategoryManager[ActivateValue]: %s[%d] category %s interface %s value %s",  v32,  v33,  v34,  v35,  v36);
            int v27 = *((_DWORD *)v5 + 7);
            uint64_t v28 = *((void *)v5 + 4);
            uint64_t v29 = *((void *)v5 + 5);
            uint64_t v30 = "<any>";
            if (v20) {
              uint64_t v30 = v20;
            }
            uint64_t v31 = "<none>";
            *(_DWORD *)uint64_t v26 = 136316162;
            if (!v19) {
              uint64_t v31 = v8;
            }
            *(void *)(v26 + 4) = v28;
            *(_WORD *)(v26 + 1pthread_attr_setdetachstate(&v4, 2) = 1024;
            *(_DWORD *)(v26 + 14) = v27;
            *(_WORD *)(v26 + 1_Block_object_dispose(va, 8) = 2080;
            *(void *)(v26 + snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_100079AC4, 20) = v29;
            *(_WORD *)(v26 + 2_Block_object_dispose(va, 8) = 2080;
            *(void *)(v26 + 3sub_10000F430((uint64_t)__str, 0) = v30;
            *(_WORD *)(v26 + 3_Block_object_dispose(va, 8) = 2080;
            *(void *)(v26 + 4sub_10000F430((uint64_t)__str, 0) = v31;
            __SC_log_send(5LL, v21, v22, v24);
          }

          sub_100057C34();
        }

        return 0LL;
      }

void sub_100057830(_xpc_connection_s *a1)
{
  os_log_t v2 = sub_100058E78();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(12LL);
    uint64_t v5 = (char *)&v10 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v6 = __error();
    uint64_t v7 = _os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "CategoryManagerServer: client %p went away",  v10);
    *(_DWORD *)uint64_t v7 = 134217984;
    *(void *)(v7 + 4) = a1;
    __SC_log_send(7LL, v2, v3, v5);
  }

  CFBooleanRef context = (uint64_t *)xpc_connection_get_context(a1);
  if (context)
  {
  }

uint64_t sub_10005796C(char *__s2, const char *a2)
{
  for (uint64_t i = S_CategorySessions; i; uint64_t i = *(void *)i)
  {
    if (!strcmp(*(const char **)(i + 40), __s2))
    {
      if (!a2) {
        break;
      }
      uint64_t v5 = *(const char **)(i + 48);
      if (!v5 || !strcmp(a2, v5)) {
        break;
      }
    }
  }

  return i;
}

_OWORD *sub_100057A08(_xpc_connection_s *a1, const char *a2, const char *a3, const char *a4, int a5)
{
  BOOL v10 = malloc(0x50uLL);
  _OWORD *v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  *((void *)v10 + pthread_attr_setdetachstate(&v4, 2) = a1;
  *((_DWORD *)v10 + 7) = xpc_connection_get_pid(a1);
  if (a2) {
    os_log_t v11 = a2;
  }
  else {
    os_log_t v11 = "<unknown>";
  }
  *((void *)v10 + 4) = strdup(v11);
  *((void *)v10 + 5) = strdup(a3);
  *((_DWORD *)v10 + 14) = a5;
  if (a4) {
    *((void *)v10 + 6) = strdup(a4);
  }
  xpc_connection_set_finalizer_f(a1, (xpc_finalizer_t)sub_100057E18);
  xpc_connection_set_context(a1, v10);
  uint64_t v12 = S_CategorySessions;
  *(void *)BOOL v10 = S_CategorySessions;
  if (v12) {
    *(void *)(v12 + _Block_object_dispose(va, 8) = v10;
  }
  S_CategorySessions = (uint64_t)v10;
  *((void *)v10 + pthread_attr_setscope(&v4, 1) = &S_CategorySessions;
  *((_BYTE *)v10 + 24) = 1;
  os_log_t v13 = sub_100058E78();
  uint64_t v14 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v13, v14))
  {
    uint64_t v15 = _os_log_pack_size(68LL);
    uint64_t v16 = (char *)v24 - ((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v17 = __error();
    uint64_t v18 = _os_log_pack_fill( v16,  v15,  *v17,  &_mh_execute_header,  "%s: created %s [%d] category %s ifname %s session %p (connection %p)",  v24[0],  v24[1],  v25,  v26,  v27,  v28,  v29);
    int v19 = *((_DWORD *)v10 + 7);
    uint64_t v20 = "<any>";
    uint64_t v21 = *((void *)v10 + 4);
    uint64_t v22 = *((void *)v10 + 5);
    if (a4) {
      uint64_t v20 = a4;
    }
    *(_DWORD *)uint64_t v18 = 136316674;
    *(void *)(v18 + 4) = "CategorySessionCreate";
    *(_WORD *)(v18 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v18 + 14) = v21;
    *(_WORD *)(v18 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v18 + 24) = v19;
    *(_WORD *)(v18 + 2_Block_object_dispose(va, 8) = 2080;
    *(void *)(v18 + 3sub_10000F430((uint64_t)__str, 0) = v22;
    *(_WORD *)(v18 + 3_Block_object_dispose(va, 8) = 2080;
    *(void *)(v18 + 4sub_10000F430((uint64_t)__str, 0) = v20;
    *(_WORD *)(v18 + 4_Block_object_dispose(va, 8) = 2048;
    *(void *)(v18 + 5sub_10000F430((uint64_t)__str, 0) = v10;
    *(_WORD *)(v18 + 5_Block_object_dispose(va, 8) = 2048;
    *(void *)(v18 + 6sub_10000F430((uint64_t)__str, 0) = a1;
    __SC_log_send(7LL, v13, v14, v16);
  }

  return v10;
}

void sub_100057C34()
{
  os_log_t v0 = sub_100058E78();
  uint64_t v1 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v0, v1))
  {
    uint64_t v2 = _os_log_pack_size(12LL);
    uint64_t v3 = (char *)&v6 - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v4 = __error();
    uint64_t v5 = _os_log_pack_fill(v3, v2, *v4, &_mh_execute_header, "%s\n", v6);
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v5 + 4) = "SendNotification";
    __SC_log_send(5LL, v0, v1, v3);
  }

  if (qword_100079F40)
  {
    CFRunLoopSourceSignal((CFRunLoopSourceRef)qword_100079F40);
    if (qword_100079F38) {
      CFRunLoopWakeUp((CFRunLoopRef)qword_100079F38);
    }
  }

BOOL sub_100057D60(_xpc_connection_s *a1, uint64_t a2)
{
  if (!xpc_connection_get_euid(a1)) {
    return 1LL;
  }
  uint64_t v4 = (void *)xpc_connection_copy_entitlement_value(a1, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    BOOL v6 = xpc_get_type(v4) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v5);
    xpc_release(v5);
  }

  else
  {
    return 0;
  }

  return v6;
}

void sub_100057E18(uint64_t a1)
{
  os_log_t v2 = sub_100058E78();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(48LL);
    uint64_t v5 = (char *)v14 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    BOOL v6 = __error();
    uint64_t v7 = _os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "%s: releasing %s [%d] %s session %p",  v14[0],  v14[1],  v15,  v16,  v17);
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t v7 = 136316162;
    *(void *)(v7 + 4) = "CategorySessionRelease";
    *(_WORD *)(v7 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v7 + 14) = v9;
    *(_WORD *)(v7 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
    *(_DWORD *)(v7 + 24) = v8;
    *(_WORD *)(v7 + 2_Block_object_dispose(va, 8) = 2080;
    *(void *)(v7 + 3sub_10000F430((uint64_t)__str, 0) = v10;
    *(_WORD *)(v7 + 3_Block_object_dispose(va, 8) = 2048;
    *(void *)(v7 + 4sub_10000F430((uint64_t)__str, 0) = a1;
    __SC_log_send(7LL, v2, v3, v5);
  }

  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 40));
  os_log_t v11 = *(void **)(a1 + 48);
  if (v11) {
    free(v11);
  }
  uint64_t v12 = *(void **)(a1 + 64);
  if (v12) {
    free(v12);
  }
  *(void *)(a1 + 64) = 0LL;
  os_log_t v13 = *(void **)(a1 + 72);
  if (v13) {
    free(v13);
  }
  *(void *)(a1 + 7pthread_attr_setdetachstate(&v4, 2) = 0LL;
  if (*(_BYTE *)(a1 + 24)) {
    sub_100061E28();
  }
  free((void *)a1);
}

uint64_t sub_100057FAC(_xpc_connection_s *a1)
{
  CFBooleanRef context = (const __CFBoolean *)xpc_connection_get_context(a1);
  if (context)
  {
    if (context == kCFBooleanFalse)
    {
      os_log_t v19 = sub_100058E78();
      uint64_t v20 = _SC_syslog_os_log_mapping(5LL);
      uint64_t result = __SC_log_enabled(5LL, v19, v20);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v21 = _os_log_pack_size(28LL);
      uint64_t v22 = (char *)&v32 - ((__chkstk_darwin(v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v23 = __error();
      uint64_t v24 = _os_log_pack_fill( v22,  v21,  *v23,  &_mh_execute_header,  "%s: connection %p pid %d permission denied",  v32,  v33,  v34);
      pid_t pid = xpc_connection_get_pid(a1);
      *(_DWORD *)uint64_t v24 = 136315650;
      *(void *)(v24 + 4) = "connectionAllowManagerObserverAccess";
      *(_WORD *)(v24 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
      *(void *)(v24 + 14) = a1;
      *(_WORD *)(v24 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v24 + 24) = pid;
      __SC_log_send(5LL, v19, v20, v22);
    }

    else if (context == kCFBooleanTrue)
    {
      os_log_t v3 = sub_100058E78();
      uint64_t v4 = _SC_syslog_os_log_mapping(7LL);
      if (__SC_log_enabled(7LL, v3, v4))
      {
        uint64_t v5 = _os_log_pack_size(28LL);
        BOOL v6 = (char *)&v32 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v7 = __error();
        uint64_t v8 = _os_log_pack_fill( v6,  v5,  *v7,  &_mh_execute_header,  "%s: connection %p pid %d access is allowed",  v32,  v33,  v34);
        pid_t v9 = xpc_connection_get_pid(a1);
        *(_DWORD *)uint64_t v8 = 136315650;
        *(void *)(v8 + 4) = "connectionAllowManagerObserverAccess";
        *(_WORD *)(v8 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
        *(void *)(v8 + 14) = a1;
        *(_WORD *)(v8 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
        *(_DWORD *)(v8 + 24) = v9;
        __SC_log_send(7LL, v3, v4, v6);
        return 1LL;
      }

      return 1LL;
    }
  }

  else
  {
    BOOL v11 = sub_100057D60(a1, (uint64_t)"com.apple.private.SCNetworkCategoryManager.observer");
    os_log_t v12 = sub_100058E78();
    if (v11)
    {
      uint64_t v13 = _SC_syslog_os_log_mapping(7LL);
      if (__SC_log_enabled(7LL, v12, v13))
      {
        uint64_t v14 = _os_log_pack_size(28LL);
        uint64_t v15 = (char *)&v32 - ((__chkstk_darwin(v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v16 = __error();
        uint64_t v17 = _os_log_pack_fill( v15,  v14,  *v16,  &_mh_execute_header,  "%s: connection %p pid %d connection allowed access",  v32,  v33,  v34);
        pid_t v18 = xpc_connection_get_pid(a1);
        *(_DWORD *)uint64_t v17 = 136315650;
        *(void *)(v17 + 4) = "connectionAllowManagerObserverAccess";
        *(_WORD *)(v17 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
        *(void *)(v17 + 14) = a1;
        *(_WORD *)(v17 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
        *(_DWORD *)(v17 + 24) = v18;
        __SC_log_send(7LL, v12, v13, v15);
      }

      xpc_connection_set_context(a1, kCFBooleanTrue);
      return 1LL;
    }

    uint64_t v26 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v12, v26))
    {
      uint64_t v27 = _os_log_pack_size(28LL);
      uint64_t v28 = (char *)&v32 - ((__chkstk_darwin(v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v29 = __error();
      uint64_t v30 = _os_log_pack_fill( v28,  v27,  *v29,  &_mh_execute_header,  "%s: connection %p pid %d missing entitlement, permission denied",  v32,  v33,  v34);
      pid_t v31 = xpc_connection_get_pid(a1);
      *(_DWORD *)uint64_t v30 = 136315650;
      *(void *)(v30 + 4) = "connectionAllowManagerObserverAccess";
      *(_WORD *)(v30 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
      *(void *)(v30 + 14) = a1;
      *(_WORD *)(v30 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v30 + 24) = v31;
      __SC_log_send(5LL, v12, v26, v28);
    }

    xpc_connection_set_context(a1, kCFBooleanFalse);
  }

  return 0LL;
}

void sub_1000583DC(uint64_t *a1)
{
  os_log_t v2 = sub_100058E78();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(22LL);
    uint64_t v5 = (char *)v9 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    BOOL v6 = __error();
    uint64_t v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%s: invalidating %p", v9[0], v9[1]);
    *(_DWORD *)uint64_t v7 = 136315394;
    *(void *)(v7 + 4) = "CategorySessionInvalidate";
    *(_WORD *)(v7 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
    *(void *)(v7 + 14) = a1;
    __SC_log_send(7LL, v2, v3, v5);
  }

  if (*((_BYTE *)a1 + 24))
  {
    uint64_t v8 = *a1;
    if (*a1) {
      *(void *)(v8 + _Block_object_dispose(va, 8) = a1[1];
    }
    *(void *)a1[1] = v8;
    *((_BYTE *)a1 + 24) = 0;
  }

  sub_100057C34();
}

os_state_data_s *__cdecl sub_100058520(id a1, os_state_hints_s *a2)
{
  return (os_state_data_s *)sub_100058564();
}

_DWORD *sub_100058564()
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  uint64_t v1 = (void *)S_CategorySessions;
  if (S_CategorySessions)
  {
    do
    {
      CFDictionaryRef v2 = sub_10005877C(v1);
      if (v2)
      {
        CFDictionaryRef v3 = v2;
        CFArrayAppendValue(Mutable, v2);
        CFRelease(v3);
      }

      uint64_t v1 = (void *)*v1;
    }

    while (v1);
  }

  Data = CFPropertyListCreateData(0LL, Mutable, kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
  CFRelease(Mutable);
  CFIndex Length = CFDataGetLength(Data);
  size_t v6 = Length + 200;
  if ((unint64_t)(Length + 200) <= 0x8000)
  {
    size_t v14 = Length;
    uint64_t v13 = calloc(1uLL, v6);
    _DWORD *v13 = 1;
    v13[1] = v14;
    __strlcpy_chk(v13 + 34, "CategoryManager Sessions", 64LL, 64LL);
    BytePtr = CFDataGetBytePtr(Data);
    memcpy(v13 + 50, BytePtr, v14);
  }

  else
  {
    os_log_t v7 = sub_100058E78();
    uint64_t v8 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v7, v8))
    {
      uint64_t v9 = _os_log_pack_size(28LL);
      uint64_t v10 = (char *)v17 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      BOOL v11 = __error();
      uint64_t v12 = _os_log_pack_fill( v10,  v9,  *v11,  &_mh_execute_header,  "%s: state data too large (%zu > %d)",  v17[0],  (size_t)v17[1],  v18);
      *(_DWORD *)uint64_t v12 = 136315650;
      *(void *)(v12 + 4) = "CategoryManagerCopyOSStateData";
      *(_WORD *)(v12 + 1pthread_attr_setdetachstate(&v4, 2) = 2048;
      *(void *)(v12 + 14) = v6;
      *(_WORD *)(v12 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
      *(_DWORD *)(v12 + 24) = 0x8000;
      __SC_log_send(5LL, v7, v8, v10);
    }

    uint64_t v13 = 0LL;
  }

  CFRelease(Data);
  return v13;
}

CFDictionaryRef sub_10005877C(void *a1)
{
  CFNumberRef v2 = CFNumberCreate(0LL, kCFNumberSInt32Type, (char *)a1 + 28);
  CFDictionaryRef v3 = (const char *)a1[4];
  if (v3) {
    CFStringRef v4 = CFStringCreateWithCString(0LL, v3, 0x8000100u);
  }
  else {
    CFStringRef v4 = 0LL;
  }
  uint64_t v5 = (const char *)a1[5];
  if (v5) {
    CFStringRef v6 = CFStringCreateWithCString(0LL, v5, 0x8000100u);
  }
  else {
    CFStringRef v6 = 0LL;
  }
  os_log_t v7 = (const char *)a1[8];
  if (v7) {
    CFStringRef v8 = CFStringCreateWithCString(0LL, v7, 0x8000100u);
  }
  else {
    CFStringRef v8 = 0LL;
  }
  uint64_t v9 = (const char *)a1[9];
  if (v9) {
    CFStringRef v10 = CFStringCreateWithCString(0LL, v9, 0x8000100u);
  }
  else {
    CFStringRef v10 = 0LL;
  }
  BOOL v11 = (const char *)a1[6];
  if (v11) {
    CFStringRef v12 = CFStringCreateWithCString(0LL, v11, 0x8000100u);
  }
  else {
    CFStringRef v12 = 0LL;
  }
  CFIndex v13 = 3LL;
  CFNumberRef v14 = CFNumberCreate(0LL, kCFNumberSInt32Type, a1 + 7);
  CFNumberRef v15 = v14;
  keys[0] = @"ProcessID";
  keys[1] = @"ProcessName";
  values[0] = v2;
  values[1] = (void *)v4;
  keys[2] = @"Category";
  values[2] = (void *)v6;
  if (v12)
  {
    keys[3] = @"InterfaceName";
    values[3] = (void *)v12;
    CFIndex v13 = 4LL;
  }

  if (v8)
  {
    keys[v13] = @"Value";
    values[v13++] = (void *)v8;
  }

  if (v10)
  {
    keys[v13] = @"ActiveValue";
    values[v13++] = (void *)v10;
  }

  if (v14)
  {
    keys[v13] = @"Flags";
    values[v13++] = v14;
  }

  CFDictionaryRef v16 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)values,  v13,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v16;
}

uint64_t sub_1000589E4(const __CFDictionary *a1)
{
  unsigned int Value = CFDictionaryGetValue(a1, @"Category");
  if (!Value)
  {
    os_log_t v6 = sub_100058E78();
    uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v6, v7))
    {
      uint64_t v8 = _os_log_pack_size(32LL);
      uint64_t v9 = (char *)v27 - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFStringRef v10 = __error();
      uint64_t v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "%s: %@ missing %@");
      *(_DWORD *)uint64_t v11 = 136315650;
      *(void *)(v11 + 4) = "CategoryManagerServerAckOne";
      *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v11 + 14) = a1;
      *(_WORD *)(v11 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v11 + 24) = @"Category";
      os_log_t v12 = v6;
LABEL_19:
      __SC_log_send(5LL, v12, v7, v9);
    }

    return 0LL;
  }

  CFDictionaryRef v3 = (char *)_SC_cfstring_to_cstring(Value, 0LL, 0LL, 134217984LL);
  CFStringRef v4 = CFDictionaryGetValue(a1, @"InterfaceName");
  if (v4) {
    uint64_t v5 = (char *)_SC_cfstring_to_cstring(v4, 0LL, 0LL, 134217984LL);
  }
  else {
    uint64_t v5 = 0LL;
  }
  CFIndex v13 = CFDictionaryGetValue(a1, @"Value");
  if (v13) {
    unint64_t v14 = _SC_cfstring_to_cstring(v13, 0LL, 0LL, 134217984LL);
  }
  else {
    unint64_t v14 = 0LL;
  }
  uint64_t v15 = sub_10005796C(v3, v5);
  if (!v15)
  {
    os_log_t v18 = sub_100058E78();
    uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v18, v7))
    {
      uint64_t v19 = _os_log_pack_size(32LL);
      uint64_t v9 = (char *)v27 - ((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v20 = __error();
      uint64_t v21 = _os_log_pack_fill( v9,  v19,  *v20,  &_mh_execute_header,  "%s: no session for %s/%s",  v27[0],  v27[1],  v27[2]);
      uint64_t v22 = "<any>";
      *(_DWORD *)uint64_t v21 = 136315650;
      *(void *)(v21 + 4) = "CategoryManagerServerAckOne";
      *(_WORD *)(v21 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      if (v5) {
        uint64_t v22 = v5;
      }
      *(void *)(v21 + 14) = v3;
      *(_WORD *)(v21 + 2pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v21 + 24) = v22;
      os_log_t v12 = v18;
      goto LABEL_19;
    }

    return 0LL;
  }

  uint64_t v16 = v15;
  unint64_t v17 = *(void *)(v15 + 72);
  if (v14 && v17)
  {
    if (!strcmp(*(const char **)(v15 + 72), (const char *)v14))
    {
LABEL_32:
      uint64_t v23 = 0LL;
      if (!v3) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }

    goto LABEL_23;
  }

  if (!(v14 | v17)) {
    goto LABEL_32;
  }
  if (v14)
  {
LABEL_23:
    uint64_t v24 = strdup((const char *)v14);
    if (!v17) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  uint64_t v24 = 0LL;
  if (v17) {
LABEL_24:
  }
    free((void *)v17);
LABEL_25:
  *(void *)(v16 + 7pthread_attr_setdetachstate(&v4, 2) = v24;
  xpc_object_t v25 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_connection_send_message(*(xpc_connection_t *)(v16 + 16), v25);
  xpc_release(v25);
  uint64_t v23 = 1LL;
  if (v3) {
LABEL_26:
  }
    CFAllocatorDeallocate(0LL, v3);
LABEL_27:
  if (v5) {
    CFAllocatorDeallocate(0LL, v5);
  }
  if (v14) {
    CFAllocatorDeallocate(0LL, (void *)v14);
  }
  return v23;
}

uint64_t sub_100058D48()
{
  os_log_t v0 = sub_100058E78();
  uint64_t v1 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v0, v1))
  {
    uint64_t v2 = _os_log_pack_size(22LL);
    CFDictionaryRef v3 = (char *)&v7 - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFStringRef v4 = __error();
    uint64_t v5 = _os_log_pack_fill(v3, v2, *v4, &_mh_execute_header, "%s: %@");
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v5 + 4) = "CategoryManagerServerNotifyStore";
    *(_WORD *)(v5 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v5 + 14) = @"com.apple.scnetworkcategory";
    __SC_log_send(5LL, v0, v1, v3);
  }

  return SCDynamicStoreNotifyValue(0LL, @"com.apple.scnetworkcategory");
}

os_log_t sub_100058E78()
{
  os_log_t result = (os_log_t)qword_100079F50;
  if (!qword_100079F50)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "PreferencesMonitor");
    qword_100079F50 = (uint64_t)result;
  }

  return result;
}

const void *sub_100058EE8(const __CFDictionary *a1)
{
  unsigned int Value = CFDictionaryGetValue(a1, @"Category");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value) {
    return 0LL;
  }
  if (CFGetTypeID(Value) == TypeID) {
    return Value;
  }
  return 0LL;
}

const void *sub_100058F68(const __CFDictionary *a1)
{
  unsigned int Value = CFDictionaryGetValue(a1, @"InterfaceName");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value) {
    return 0LL;
  }
  if (CFGetTypeID(Value) == TypeID) {
    return Value;
  }
  return 0LL;
}

const void *sub_100058FE8(const __CFDictionary *a1)
{
  unsigned int Value = CFDictionaryGetValue(a1, @"Value");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value) {
    return 0LL;
  }
  if (CFGetTypeID(Value) == TypeID) {
    return Value;
  }
  return 0LL;
}

uint64_t sub_100059068(const __CFDictionary *a1)
{
  unsigned int valuePtr = 0;
  unsigned int Value = CFDictionaryGetValue(a1, @"Flags");
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return 0LL;
  }
  CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr);
  return valuePtr;
}

void sub_100059100()
{
  os_log_t v0 = sub_100058E78();
  uint64_t v1 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v0, v1))
  {
    uint64_t v2 = _os_log_pack_size(2LL);
    CFDictionaryRef v3 = (char *)&v10 - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFStringRef v4 = __error();
    *(_WORD *)_os_log_pack_fill(v3, v2, *v4, &_mh_execute_header, "prime() called") = 0;
    __SC_log_send(7LL, v0, v1, v3);
  }

  if (sub_1000592AC())
  {
    os_log_t v5 = sub_100058E78();
    uint64_t v6 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v5, v6))
    {
      uint64_t v7 = _os_log_pack_size(2LL);
      uint64_t v8 = (char *)&v10 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v9 = __error();
      *(_WORD *)_os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "CategoryManagerServer started") = 0;
      __SC_log_send(5LL, v5, v6, v8);
    }
  }

  sub_100059414((SCPreferencesRef)qword_100079F58, 2);
}

uint64_t sub_1000592AC()
{
  context.perform = (void (__cdecl *)(void *))sub_10005A418;
  os_log_t v0 = CFRunLoopSourceCreate(0LL, 0LL, &context);
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  uint64_t v2 = sub_100056508((uint64_t)Current, (uint64_t)v0);
  if ((_DWORD)v2)
  {
    CFDictionaryRef v3 = CFRunLoopGetCurrent();
    CFRunLoopAddSource(v3, v0, kCFRunLoopDefaultMode);
  }

  else
  {
    os_log_t v4 = sub_100058E78();
    uint64_t v5 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v4, v5))
    {
      uint64_t v6 = _os_log_pack_size(2LL);
      uint64_t v7 = (char *)&context - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v8 = __error();
      *(_WORD *)_os_log_pack_fill(v7, v6, *v8, &_mh_execute_header, "CategoryManagerServerStart failed") = 0;
      __SC_log_send(3LL, v4, v5, v7);
    }
  }

  CFRelease(v0);
  return v2;
}

void sub_100059414(SCPreferencesRef prefs, char a2)
{
  if ((a2 & 1) != 0 && (byte_100079F78 & 1) == 0) {
    SCPreferencesSynchronize(prefs);
  }
  if ((a2 & 2) != 0)
  {
    os_log_t v4 = sub_100058E78();
    uint64_t v5 = _SC_syslog_os_log_mapping(6LL);
    if (__SC_log_enabled(6LL, v4, v5))
    {
      uint64_t v6 = _os_log_pack_size(2LL);
      uint64_t v7 = (char *)&v13 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v8 = __error();
      *(_WORD *)_os_log_pack_fill(v7, v6, *v8, &_mh_execute_header, "updating configuration") = 0;
      __SC_log_send(6LL, v4, v5, v7);
    }

    if (qword_100079F70)
    {
      SCPreferencesRef v13 = 0LL;
      CFTypeRef v14 = 0LL;
      CFTypeRef v15 = 0LL;
      if (sub_10005B994(&v13, prefs))
      {
        CFIndex Count = CFArrayGetCount((CFArrayRef)qword_100079F70);
        if (Count >= 1)
        {
          CFIndex v10 = Count;
          for (CFIndex i = 0LL; i != v10; ++i)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_100079F70, i);
            sub_10005BAC4(&v13, ValueAtIndex);
          }
        }

        if (v13) {
          CFRelease(v13);
        }
        if (v15) {
          CFRelease(v15);
        }
        if (v14) {
          CFRelease(v14);
        }
      }
    }

    sub_10005A5A4(prefs);
    sub_10005A930(prefs);
    sub_10005ABD4((const __SCDynamicStore *)qword_100079F60, prefs);
    if ((byte_100079F78 & 1) == 0) {
      SCPreferencesSynchronize(prefs);
    }
  }

void sub_1000595EC(__CFBundle *a1)
{
  *(_OWORD *)keys = *(_OWORD *)&off_100073170;
  values = kCFBooleanTrue;
  CFBooleanRef v43 = kCFBooleanFalse;
  os_log_t v2 = sub_100058E78();
  uint64_t v3 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v2, v3))
  {
    uint64_t v4 = _os_log_pack_size(2LL);
    uint64_t v5 = (char *)&values - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v6 = __error();
    *(_WORD *)_os_log_pack_fill( v5,  v4,  *v6,  &_mh_execute_header,  "load() called",  values,  v43,  keys[0],  keys[1]) = 0;
    __SC_log_send(7LL, v2, v3, v5);
  }

  os_log_t v7 = sub_100058E78();
  uint64_t v8 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v7, v8))
  {
    uint64_t v9 = _os_log_pack_size(12LL);
    CFIndex v10 = (char *)&values - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v11 = __error();
    uint64_t v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "  bundle ID = %@");
    CFStringRef Identifier = CFBundleGetIdentifier(a1);
    *(_DWORD *)uint64_t v12 = 138412290;
    *(void *)(v12 + 4) = Identifier;
    __SC_log_send(7LL, v7, v8, v10);
  }

  qword_100079F60 = (uint64_t)SCDynamicStoreCreate( 0LL,  @"PreferencesMonitor.bundle",  (SCDynamicStoreCallBack)sub_100059C24,  0LL);
  if (!qword_100079F60)
  {
    os_log_t v19 = sub_100058E78();
    uint64_t v20 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v21 = _os_log_pack_size(12LL);
    uint64_t v22 = (char *)&values - ((__chkstk_darwin(v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v23 = *__error();
    uint64_t v24 = _os_log_pack_fill(v22, v21, v23, &_mh_execute_header, "SCDynamicStoreCreate() failed: %s");
LABEL_27:
    uint64_t v39 = v24;
    int v40 = SCError();
    os_log_t v41 = SCErrorString(v40);
    *(_DWORD *)uint64_t v39 = 136315138;
    *(void *)(v39 + 4) = v41;
    __SC_log_send(5LL, v19, v20, v22);
    goto LABEL_28;
  }

  CFDictionaryRef v14 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)&values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  qword_100079F58 = SCPreferencesCreateWithOptions( 0LL,  @"com.apple.SystemConfiguration.PreferencesMonitor",  0LL,  0LL,  v14);
  CFRelease(v14);
  if (!qword_100079F58)
  {
    os_log_t v19 = sub_100058E78();
    uint64_t v20 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v25 = _os_log_pack_size(12LL);
    uint64_t v22 = (char *)&values - ((__chkstk_darwin(v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v26 = *__error();
    uint64_t v24 = _os_log_pack_fill(v22, v25, v26, &_mh_execute_header, "SCPreferencesCreate() failed: %s");
    goto LABEL_27;
  }

  __SCNetworkConfigurationUpgrade(&qword_100079F58, 0LL, 1LL);
  CFPropertyListRef Value = SCPreferencesGetValue((SCPreferencesRef)qword_100079F58, @"Model");
  CFPropertyListRef v16 = (CFPropertyListRef)_SC_hw_model(0LL);
  if (!Value || (CFPropertyListRef v17 = v16, Value == v16) || v16 && CFEqual(Value, v16))
  {
    SCNetworkSetRef v18 = SCNetworkSetCopyCurrent((SCPreferencesRef)qword_100079F58);
    if (v18)
    {
      byte_100079F68 = 1;
      CFRelease(v18);
    }
  }

  else
  {
    os_log_t v27 = sub_100058E78();
    uint64_t v28 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v27, v28))
    {
      uint64_t v29 = _os_log_pack_size(22LL);
      uint64_t v30 = (char *)&values - ((__chkstk_darwin(v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      pid_t v31 = __error();
      uint64_t v32 = _os_log_pack_fill( v30,  v29,  *v31,  &_mh_execute_header,  "Hardware model changed\n  created on %@\n  now on     %@");
      *(_DWORD *)uint64_t v32 = 138412546;
      *(void *)(v32 + 4) = Value;
      *(_WORD *)(v32 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v32 + 14) = v17;
      __SC_log_send(5LL, v27, v28, v30);
    }

    sub_10005A0E4((const __SCPreferences *)qword_100079F58, (uint64_t)Value);
  }

  if (!SCPreferencesSetCallback((SCPreferencesRef)qword_100079F58, (SCPreferencesCallBack)sub_100059414, 0LL))
  {
    os_log_t v19 = sub_100058E78();
    uint64_t v20 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v35 = _os_log_pack_size(12LL);
    uint64_t v22 = (char *)&values - ((__chkstk_darwin(v35) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v36 = *__error();
    uint64_t v24 = _os_log_pack_fill(v22, v35, v36, &_mh_execute_header, "SCPreferencesSetCallBack() failed: %s");
    goto LABEL_27;
  }

  uint64_t v33 = (const __SCPreferences *)qword_100079F58;
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  if (SCPreferencesScheduleWithRunLoop(v33, Current, kCFRunLoopDefaultMode))
  {
    sub_10005A1B4((const __SCDynamicStore *)qword_100079F60);
    sub_100059C24((const __SCDynamicStore *)qword_100079F60, 0LL);
    return;
  }

  os_log_t v19 = sub_100058E78();
  uint64_t v20 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v19, v20))
  {
    uint64_t v37 = _os_log_pack_size(12LL);
    uint64_t v22 = (char *)&values - ((__chkstk_darwin(v37) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v38 = *__error();
    uint64_t v24 = _os_log_pack_fill(v22, v37, v38, &_mh_execute_header, "SCPreferencesScheduleWithRunLoop() failed: %s");
    goto LABEL_27;
  }

LABEL_28:
  if (qword_100079F60) {
    CFRelease((CFTypeRef)qword_100079F60);
  }
  if (qword_100079F58) {
    CFRelease((CFTypeRef)qword_100079F58);
  }
  byte_100079F68 = 1;
}

void sub_100059C24(const __SCDynamicStore *a1, uint64_t a2)
{
  uint64_t v3 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, (CFStringRef)qword_100079FD0);
  if (v3)
  {
    uint64_t v4 = v3;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v4) == TypeID)
    {
      BOOL v6 = CFDictionaryContainsKey(v4, @"*QUIET*") != 0;
      BOOL v7 = CFDictionaryContainsKey(v4, @"*TIMEOUT*") != 0;
      CFPropertyListRef Value = CFDictionaryGetValue(v4, @"_Excluded_");
      CFTypeID v9 = CFArrayGetTypeID();
      if (Value && CFGetTypeID(Value) != v9) {
        CFPropertyListRef Value = 0LL;
      }
      if (Value == (const void *)qword_100079F88
        || Value && qword_100079F88 && CFEqual(Value, (CFTypeRef)qword_100079F88)
        || !sub_10005D42C((const __CFArray *)Value, &qword_100079FD8, (CFArrayRef *)&qword_100079F88))
      {
        int v12 = 0;
      }

      else
      {
        if (qword_100079F88)
        {
          CFStringRef v10 = CFStringCreateByCombiningStrings(0LL, (CFArrayRef)qword_100079F88, @",");
        }

        else
        {
          CFStringRef v10 = @"<empty>";
          CFRetain(@"<empty>");
        }

        os_log_t v13 = sub_100058E78();
        uint64_t v14 = _SC_syslog_os_log_mapping(6LL);
        if (__SC_log_enabled(6LL, v13, v14))
        {
          uint64_t v15 = _os_log_pack_size(12LL);
          CFPropertyListRef v16 = (char *)&v34 - ((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          CFPropertyListRef v17 = __error();
          uint64_t v18 = _os_log_pack_fill( v16,  v15,  *v17,  &_mh_execute_header,  "excluded interface list changed: %@");
          *(_DWORD *)uint64_t v18 = 138412290;
          *(void *)(v18 + 4) = v10;
          __SC_log_send(6LL, v13, v14, v16);
        }

        CFRelease(v10);
        int v12 = 1;
      }

      os_log_t v19 = CFDictionaryGetValue(v4, @"_PreConfigured_");
      CFTypeID v20 = CFArrayGetTypeID();
      if (v19 && CFGetTypeID(v19) != v20) {
        os_log_t v19 = 0LL;
      }
      if (v19 == (const void *)qword_100079F80
        || v19 && qword_100079F80 && CFEqual(v19, (CFTypeRef)qword_100079F80)
        || !sub_10005D42C( (const __CFArray *)v19,  (CFTypeRef *)&qword_100079FB0,  (CFArrayRef *)&qword_100079F80))
      {
        int v11 = 0;
      }

      else
      {
        if (qword_100079F80)
        {
          CFStringRef v21 = CFStringCreateByCombiningStrings(0LL, (CFArrayRef)qword_100079F80, @",");
        }

        else
        {
          CFStringRef v21 = @"<empty>";
          CFRetain(@"<empty>");
        }

        os_log_t v22 = sub_100058E78();
        uint64_t v23 = _SC_syslog_os_log_mapping(6LL);
        if (__SC_log_enabled(6LL, v22, v23))
        {
          uint64_t v24 = _os_log_pack_size(12LL);
          uint64_t v34 = (uint64_t)&v34;
          uint64_t v25 = (char *)&v34 - ((__chkstk_darwin(v24) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v26 = __error();
          uint64_t v27 = _os_log_pack_fill( v25,  v24,  *v26,  &_mh_execute_header,  "pre-configured interface list changed: %@");
          *(_DWORD *)uint64_t v27 = 138412290;
          *(void *)(v27 + 4) = v21;
          __SC_log_send(6LL, v22, v23, v25);
        }

        CFRelease(v21);
        int v11 = 1;
      }
    }

    else
    {
      int v11 = 0;
      int v12 = 0;
      BOOL v7 = 0;
      BOOL v6 = 0;
    }

    CFRelease(v4);
  }

  else
  {
    int v11 = 0;
    int v12 = 0;
    BOOL v7 = 0;
    BOOL v6 = 0;
  }

  if ((byte_100079F68 & 1) == 0 && (v7 || v6))
  {
    if (v6) {
      byte_100079F68 = 1;
    }
    sub_10005D778((const __SCPreferences *)qword_100079F58);
    if (v7 && !dword_100079FE0++)
    {
      os_log_t v29 = sub_100058E78();
      uint64_t v30 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v29, v30))
      {
        uint64_t v31 = _os_log_pack_size(2LL);
        uint64_t v32 = (char *)&v34 - ((__chkstk_darwin(v31) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v33 = __error();
        *(_WORD *)_os_log_pack_fill( v32,  v31,  *v33,  &_mh_execute_header,  "Network configuration creation timed out waiting for IORegistry") = 0;
        __SC_log_send(3LL, v29, v30, v32);
      }
    }
  }

  if (a2)
  {
    if (v11 | v12) {
      sub_100059414((SCPreferencesRef)qword_100079F58, 2);
    }
  }

void sub_10005A0E4(const __SCPreferences *a1, uint64_t a2)
{
  CFPropertyListRef Value = SCPreferencesGetValue(a1, kSCPrefSystem);
  if (Value)
  {
    uint64_t v5 = Value;
    CFRetain(Value);
    __SCNetworkConfigurationSaveModel(a1, a2);
    SCPreferencesSetValue(a1, kSCPrefSystem, v5);
    CFRelease(v5);
  }

  else
  {
    __SCNetworkConfigurationSaveModel(a1, a2);
  }

void sub_10005A1B4(const __SCDynamicStore *a1)
{
  qword_100079FE8 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0LL, kSCDynamicStoreDomainState);
  qword_100079FD0 = (uint64_t)SCDynamicStoreKeyCreate(0LL, @"%@InterfaceNamer", kSCDynamicStoreDomainPlugin);
  CFRunLoopSourceRef RunLoopSource = SCDynamicStoreCreateRunLoopSource(0LL, a1, 0LL);
  if (RunLoopSource)
  {
    uint64_t v3 = RunLoopSource;
    CFRunLoopRef Current = CFRunLoopGetCurrent();
    CFRunLoopAddSource(Current, v3, kCFRunLoopDefaultMode);
    CFRelease(v3);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(Mutable, (const void *)qword_100079FE8);
    CFArrayAppendValue(Mutable, (const void *)qword_100079FD0);
    int v6 = SCDynamicStoreSetNotificationKeys(a1, Mutable, 0LL);
    CFRelease(Mutable);
    if (v6) {
      return;
    }
    os_log_t v7 = sub_100058E78();
    uint64_t v8 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v7, v8))
    {
      uint64_t v9 = _os_log_pack_size(12LL);
      CFStringRef v10 = (char *)&v18 - ((__chkstk_darwin(v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v11 = *__error();
      uint64_t v12 = _os_log_pack_fill(v10, v9, v11, &_mh_execute_header, "SCDynamicStoreSetNotificationKeys() failed: %s");
LABEL_7:
      uint64_t v15 = v12;
      int v16 = SCError();
      CFPropertyListRef v17 = SCErrorString(v16);
      *(_DWORD *)uint64_t v15 = 136315138;
      *(void *)(v15 + 4) = v17;
      __SC_log_send(5LL, v7, v8, v10);
    }
  }

  else
  {
    os_log_t v7 = sub_100058E78();
    uint64_t v8 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v7, v8))
    {
      uint64_t v13 = _os_log_pack_size(12LL);
      CFStringRef v10 = (char *)&v18 - ((__chkstk_darwin(v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v14 = *__error();
      uint64_t v12 = _os_log_pack_fill(v10, v13, v14, &_mh_execute_header, "SCDynamicStoreCreateRunLoopSource() failed: %s");
      goto LABEL_7;
    }
  }

  byte_100079F68 = 1;
}

void sub_10005A418()
{
  os_log_t v0 = (const void *)sub_1000566C4();
  os_log_t v1 = sub_100058E78();
  uint64_t v2 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v1, v2))
  {
    uint64_t v3 = _os_log_pack_size(22LL);
    uint64_t v4 = (char *)&v10 - ((__chkstk_darwin(v3) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v5 = __error();
    uint64_t v6 = _os_log_pack_fill(v4, v3, *v5, &_mh_execute_header, "%s: info %@");
    *(_DWORD *)uint64_t v6 = 136315394;
    *(void *)(v6 + 4) = "categoryInformationChanged";
    *(_WORD *)(v6 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v6 + 14) = v0;
    __SC_log_send(5LL, v1, v2, v4);
  }

  os_log_t v7 = (const void *)qword_100079F70;
  if ((const void *)qword_100079F70 == v0)
  {
    BOOL v8 = 0;
    os_log_t v7 = v0;
    if (v0) {
LABEL_8:
    }
      CFRelease(v7);
  }

  else
  {
    BOOL v8 = 1;
    if (v0 && qword_100079F70)
    {
      int v9 = CFEqual((CFTypeRef)qword_100079F70, v0);
      os_log_t v7 = (const void *)qword_100079F70;
      BOOL v8 = v9 == 0;
    }

    if (v7) {
      goto LABEL_8;
    }
  }

  qword_100079F70 = (uint64_t)v0;
  if (v8)
  {
    sub_100059414((SCPreferencesRef)qword_100079F58, 2);
    sub_100056860((uint64_t)v0);
  }

void sub_10005A5A4(const __SCPreferences *a1)
{
  p_base_props = &QoSMarkingController__classData.base_props;
  if (qword_100079F80)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_100079F80);
    if (Count)
    {
      CFIndex v4 = Count;
      SCNetworkSetRef v5 = SCNetworkSetCopyCurrent(a1);
      if (v5)
      {
        SCNetworkSetRef v6 = v5;
        os_log_t v7 = SCNetworkServiceCopyAll(a1);
        if (v7)
        {
          BOOL v8 = v7;
          CFIndex v9 = CFArrayGetCount(v7);
          if (v9 < 1)
          {
            CFRelease(v8);
          }

          else
          {
            CFIndex v11 = v9;
            uint64_t v42 = (const char *)a1;
            CFBooleanRef v43 = v6;
            int v12 = 0;
            CFIndex v13 = 0LL;
            *(void *)&__int128 v10 = 136315138LL;
            __int128 v44 = v10;
            *(void *)&__int128 v10 = 138412290LL;
            __int128 v45 = v10;
            CFIndex v46 = v4;
            do
            {
              ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v8, v13);
              Interface = SCNetworkServiceGetInterface(ValueAtIndex);
              if (Interface)
              {
                CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
                if (BSDName)
                {
                  CFStringRef v17 = BSDName;
                  v47.location = 0LL;
                  v47.length = v4;
                  if (CFArrayContainsValue((CFArrayRef)p_base_props[496], v47, BSDName))
                  {
                    os_log_t v18 = sub_100058E78();
                    uint64_t v19 = _SC_syslog_os_log_mapping(5LL);
                    if (__SC_log_enabled(5LL, v18, v19))
                    {
                      uint64_t v20 = _os_log_pack_size(12LL);
                      CFStringRef v21 = (char *)&v42 - ((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                      os_log_t v22 = __error();
                      uint64_t v23 = _os_log_pack_fill( v21,  v20,  *v22,  &_mh_execute_header,  "removing network service for %@");
                      *(_DWORD *)uint64_t v23 = v45;
                      *(void *)(v23 + 4) = v17;
                      uint64_t v24 = v21;
                      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                      __SC_log_send(5LL, v18, v19, v24);
                      CFIndex v4 = v46;
                    }

                    if (SCNetworkServiceRemove(ValueAtIndex)
                      || (os_log_t v25 = sub_100058E78(),
                          uint64_t v26 = _SC_syslog_os_log_mapping(3LL),
                          !__SC_log_enabled(3LL, v25, v26)))
                    {
                      int v12 = 1;
                    }

                    else
                    {
                      uint64_t v27 = _os_log_pack_size(12LL);
                      uint64_t v28 = (char *)&v42 - ((__chkstk_darwin(v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                      os_log_t v29 = __error();
                      uint64_t v30 = _os_log_pack_fill( v28,  v27,  *v29,  &_mh_execute_header,  "SCNetworkServiceRemove() failed: %s",  v42);
                      int v31 = SCError();
                      uint64_t v32 = SCErrorString(v31);
                      *(_DWORD *)uint64_t v30 = v44;
                      *(void *)(v30 + 4) = v32;
                      uint64_t v33 = v28;
                      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                      __SC_log_send(3LL, v25, v26, v33);
                      int v12 = 1;
                      CFIndex v4 = v46;
                    }
                  }
                }
              }

              ++v13;
            }

            while (v11 != v13);
            CFRelease(v8);
            SCNetworkSetRef v6 = v43;
            if (v12 && !SCPreferencesCommitChanges((SCPreferencesRef)v42) && SCError() != 30)
            {
              os_log_t v34 = sub_100058E78();
              uint64_t v35 = _SC_syslog_os_log_mapping(3LL);
              if (__SC_log_enabled(3LL, v34, v35))
              {
                uint64_t v36 = _os_log_pack_size(12LL);
                uint64_t v37 = (char *)&v42 - ((__chkstk_darwin(v36) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                uint64_t v38 = __error();
                uint64_t v39 = _os_log_pack_fill( v37,  v36,  *v38,  &_mh_execute_header,  "SCPreferencesCommitChanges() failed: %s",  v42);
                int v40 = SCError();
                os_log_t v41 = SCErrorString(v40);
                *(_DWORD *)uint64_t v39 = v44;
                *(void *)(v39 + 4) = v41;
                __SC_log_send(3LL, v34, v35, v37);
              }
            }
          }
        }

        CFRelease(v6);
      }
    }
  }

void sub_10005A930(const __SCPreferences *a1)
{
  p_base_props = &QoSMarkingController__classData.base_props;
  if (qword_100079F88)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_100079F88);
    if (Count)
    {
      CFIndex v4 = Count;
      SCNetworkSetRef v5 = SCNetworkSetCopyCurrent(a1);
      if (v5)
      {
        SCNetworkSetRef v6 = v5;
        os_log_t v7 = SCNetworkSetCopyServices(v5);
        if (v7)
        {
          BOOL v8 = v7;
          CFIndex v9 = CFArrayGetCount(v7);
          if (v9 >= 1)
          {
            CFIndex v11 = v9;
            CFIndex v12 = 0LL;
            *(void *)&__int128 v10 = 136315138LL;
            __int128 v34 = v10;
            *(void *)&__int128 v10 = 138412290LL;
            __int128 v35 = v10;
            CFIndex v36 = v4;
            uint64_t v37 = v6;
            do
            {
              ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v8, v12);
              Interface = SCNetworkServiceGetInterface(ValueAtIndex);
              if (Interface)
              {
                CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
                if (BSDName)
                {
                  CFStringRef v16 = BSDName;
                  v38.location = 0LL;
                  v38.length = v4;
                  if (CFArrayContainsValue((CFArrayRef)p_base_props[497], v38, BSDName))
                  {
                    os_log_t v17 = sub_100058E78();
                    uint64_t v18 = _SC_syslog_os_log_mapping(5LL);
                    if (__SC_log_enabled(5LL, v17, v18))
                    {
                      uint64_t v19 = _os_log_pack_size(12LL);
                      uint64_t v20 = (char *)&v34 - ((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                      CFStringRef v21 = __error();
                      uint64_t v22 = v19;
                      CFIndex v4 = v36;
                      uint64_t v23 = _os_log_pack_fill( v20,  v22,  *v21,  &_mh_execute_header,  "excluding network service for %@");
                      *(_DWORD *)uint64_t v23 = v35;
                      *(void *)(v23 + 4) = v16;
                      uint64_t v24 = v20;
                      SCNetworkSetRef v6 = v37;
                      __SC_log_send(5LL, v17, v18, v24);
                      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                    }

                    if (!SCNetworkSetRemoveService(v6, ValueAtIndex))
                    {
                      os_log_t v25 = sub_100058E78();
                      uint64_t v26 = _SC_syslog_os_log_mapping(3LL);
                      if (__SC_log_enabled(3LL, v25, v26))
                      {
                        uint64_t v27 = _os_log_pack_size(12LL);
                        uint64_t v28 = (char *)&v34 - ((__chkstk_darwin(v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                        os_log_t v29 = __error();
                        uint64_t v30 = _os_log_pack_fill( v28,  v27,  *v29,  &_mh_execute_header,  "SCNetworkSetRemoveService() failed: %s",  (const char *)v34);
                        int v31 = SCError();
                        uint64_t v32 = SCErrorString(v31);
                        *(_DWORD *)uint64_t v30 = v34;
                        *(void *)(v30 + 4) = v32;
                        uint64_t v33 = v28;
                        CFIndex v4 = v36;
                        SCNetworkSetRef v6 = v37;
                        __SC_log_send(3LL, v25, v26, v33);
                        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                      }
                    }
                  }
                }
              }

              ++v12;
            }

            while (v11 != v12);
          }

          CFRelease(v8);
        }

        CFRelease(v6);
      }
    }
  }

void sub_10005ABD4(const __SCDynamicStore *a1, const __SCPreferences *a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  CFStringRef v5 = CFStringCreateWithFormat(0LL, 0LL, @"^%@.*", kSCDynamicStoreDomainSetup);
  CFArrayAppendValue(Mutable, v5);
  SCDynamicStoreRef v97 = a1;
  SCNetworkSetRef v6 = SCDynamicStoreCopyMultiple(a1, 0LL, Mutable);
  CFRelease(Mutable);
  CFRelease(v5);
  if (v6)
  {
    qword_100079F90 = (uint64_t)CFDictionaryCreateMutableCopy(0LL, 0LL, v6);
    CFRelease(v6);
  }

  else
  {
    qword_100079F90 = (uint64_t)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  }

  qword_100079F98 = (uint64_t)CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_100079F90);
  if (Count < 1)
  {
    qword_100079FA0 = (uint64_t)CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  }

  else
  {
    CFIndex v8 = Count;
    CFIndex v9 = (const void **)CFAllocatorAllocate(0LL, 8 * Count, 0LL);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_100079F90, v9, 0LL);
    __int128 v10 = CFArrayCreate(0LL, v9, v8, &kCFTypeArrayCallBacks);
    qword_100079FA0 = (uint64_t)CFArrayCreateMutableCopy(0LL, 0LL, v10);
    CFRelease(v10);
    CFAllocatorDeallocate(0LL, v9);
  }

  qword_100079FA8 = (uint64_t)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFIndex v11 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFIndex v13 = (const char *)CFDateCreate(0LL, Current);
  uint64_t v14 = SCPreferencesCopyKeyList(a2);
  int v95 = v14;
  if (!v14 || !CFArrayGetCount(v14))
  {
    os_log_t v24 = sub_100058E78();
    uint64_t v25 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v26 = _os_log_pack_size(2LL);
    uint64_t v27 = (char *)&v94 - ((__chkstk_darwin(v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v28 = __error();
    *(_WORD *)_os_log_pack_fill( v27,  v26,  *v28,  &_mh_execute_header,  "updateConfiguration(): no preferences") = 0;
    os_log_t v29 = v24;
    uint64_t v30 = v25;
    int v31 = v27;
LABEL_24:
    __SC_log_send(5LL, v29, v30, v31);
    goto LABEL_25;
  }

  CFStringRef v15 = kSCPrefSystem;
  CFPropertyListRef Value = SCPreferencesGetValue(a2, kSCPrefSystem);
  if (Value)
  {
    os_log_t v17 = Value;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v17) != TypeID)
    {
      os_log_t v32 = sub_100058E78();
      uint64_t v33 = _SC_syslog_os_log_mapping(5LL);
      goto LABEL_20;
    }

    sub_10005CFF0(a2, @"/", (const __CFDictionary *)v17);
  }

  uint64_t v19 = (const __CFString *)SCPreferencesGetValue(a2, kSCPrefCurrentSet);
  if (v19)
  {
    CFStringRef v15 = v19;
    CFTypeID v20 = CFStringGetTypeID();
    if (CFGetTypeID(v15) != v20)
    {
      os_log_t v38 = sub_100058E78();
      uint64_t v39 = _SC_syslog_os_log_mapping(5LL);
      uint64_t v40 = _os_log_pack_size(12LL);
      __int128 v35 = (char *)&v94 - ((__chkstk_darwin(v40) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      os_log_t v41 = __error();
      uint64_t v42 = _os_log_pack_fill( v35,  v40,  *v41,  &_mh_execute_header,  "updateConfiguration(): %@ is not a string");
      *(_DWORD *)uint64_t v42 = 138412290;
      *(void *)(v42 + 4) = kSCPrefCurrentSet;
      os_log_t v29 = v38;
      uint64_t v30 = v39;
      goto LABEL_23;
    }

    CFDictionaryRef v21 = SCPreferencesPathGetValue(a2, v15);
    if (!v21)
    {
      os_log_t v87 = sub_100058E78();
      uint64_t v88 = _SC_syslog_os_log_mapping(5LL);
      uint64_t v89 = _os_log_pack_size(22LL);
      uint64_t v90 = v13;
      CFTypeID v91 = (char *)&v94 - ((__chkstk_darwin(v89) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      CFTypeID v92 = __error();
      uint64_t v93 = _os_log_pack_fill(v91, v89, *v92, &_mh_execute_header, "%@ value (%@) not valid");
      *(_DWORD *)uint64_t v93 = 138412546;
      *(void *)(v93 + 4) = kSCPrefCurrentSet;
      *(_WORD *)(v93 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
      *(void *)(v93 + 14) = v15;
      os_log_t v29 = v87;
      uint64_t v30 = v88;
      int v31 = v91;
      CFIndex v13 = v90;
      goto LABEL_24;
    }

    uint64_t v22 = v21;
    CFTypeID v23 = CFDictionaryGetTypeID();
    if (CFGetTypeID(v22) == v23)
    {
      sub_10005CFF0(a2, @"/", v22);
      CFDictionarySetValue(v11, kSCDynamicStorePropSetupCurrentSet, v15);
      goto LABEL_25;
    }

    os_log_t v32 = sub_100058E78();
    uint64_t v33 = _SC_syslog_os_log_mapping(5LL);
LABEL_20:
    uint64_t v34 = _os_log_pack_size(12LL);
    __int128 v35 = (char *)&v94 - ((__chkstk_darwin(v34) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v36 = *__error();
    uint64_t v37 = _os_log_pack_fill(v35, v34, v36, &_mh_execute_header, "updateConfiguration(): %@ is not a dictionary");
    *(_DWORD *)uint64_t v37 = 138412290;
    *(void *)(v37 + 4) = v15;
    os_log_t v29 = v32;
    uint64_t v30 = v33;
LABEL_23:
    int v31 = v35;
    goto LABEL_24;
  }

uint64_t sub_10005B994(void *a1, SCPreferencesRef prefs)
{
  CFIndex v4 = SCNetworkSetCopyCurrent(prefs);
  a1[1] = v4;
  if (v4)
  {
    a1[2] = SCNetworkSetCopyServices(v4);
    *a1 = prefs;
    CFRetain(prefs);
    return 1LL;
  }

  else
  {
    os_log_t v6 = sub_100058E78();
    uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v6, v7);
    if ((_DWORD)result)
    {
      uint64_t v8 = _os_log_pack_size(2LL);
      CFIndex v9 = (char *)&v11 - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __int128 v10 = __error();
      *(_WORD *)_os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "No default set") = 0;
      __SC_log_send(5LL, v6, v7, v9);
      return 0LL;
    }
  }

  return result;
}

void sub_10005BAC4(SCPreferencesRef *a1, const __CFDictionary *a2)
{
  CFIndex v4 = sub_100058EE8(a2);
  if (!v4)
  {
    os_log_t v9 = sub_100058E78();
    uint64_t v10 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v11 = _os_log_pack_size(12LL);
    CFIndex v12 = (char *)&v19 - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v13 = *__error();
    uint64_t v14 = _os_log_pack_fill(v12, v11, v13, &_mh_execute_header, "%s: no category");
LABEL_9:
    *(_DWORD *)uint64_t v14 = 136315138;
    *(void *)(v14 + 4) = "handleCategoryInfo";
    __SC_log_send(5LL, v9, v10, v12);
    return;
  }

  uint64_t v5 = SCNetworkCategoryCreate(*a1, v4);
  if (!v5)
  {
    os_log_t v9 = sub_100058E78();
    uint64_t v10 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v15 = _os_log_pack_size(12LL);
    CFIndex v12 = (char *)&v19 - ((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v16 = *__error();
    uint64_t v14 = _os_log_pack_fill(v12, v15, v16, &_mh_execute_header, "%s: failed to allocate category");
    goto LABEL_9;
  }

  os_log_t v6 = (const void *)v5;
  uint64_t v7 = sub_100058FE8(a2);
  if (v7) {
    uint64_t v8 = (const __CFArray *)SCNetworkCategoryCopyServices(v6, v7);
  }
  else {
    uint64_t v8 = 0LL;
  }
  char v17 = sub_100059068(a2);
  uint64_t v18 = sub_100058F68(a2);
  if (v7 && v8)
  {
    sub_10005C180((uint64_t)a1, (uint64_t)v6, (uint64_t)v7, v8, v18);
    CFRelease(v6);
LABEL_19:
    CFRelease(v8);
    return;
  }

  if (v18)
  {
    if ((v17 & 1) != 0) {
      sub_10005BD2C(a1, v18);
    }
  }

  CFRelease(v6);
  if (v8) {
    goto LABEL_19;
  }
}

void sub_10005BD2C(SCPreferencesRef *a1, const void *a2)
{
  uint64_t v3 = a1[2];
  if (v3)
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count < 1) {
      goto LABEL_21;
    }
    CFIndex v7 = Count;
    uint64_t v8 = 0LL;
    CFIndex v9 = 0LL;
    *(void *)&__int128 v6 = 136315650LL;
    __int128 v46 = v6;
    *(void *)&__int128 v6 = 136315906LL;
    __int128 v48 = v6;
    CFRange v47 = a2;
    do
    {
      ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(a1[2], v9);
      Interface = SCNetworkServiceGetInterface(ValueAtIndex);
      if (Interface)
      {
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
        if (BSDName)
        {
          CFStringRef v13 = BSDName;
          if (CFEqual(a2, BSDName))
          {
            if (v8)
            {
              int v14 = SCNetworkSetRemoveService(a1[1], ValueAtIndex);
              os_log_t v15 = sub_100058E78();
              uint64_t v16 = _SC_syslog_os_log_mapping(5LL);
              if (__SC_log_enabled(5LL, v15, v16))
              {
                uint64_t v17 = _os_log_pack_size(42LL);
                int v49 = v14;
                uint64_t v18 = v8;
                uint64_t v19 = v17;
                CFStringRef v50 = &v46;
                CFTypeID v20 = (char *)&v46 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                CFDictionaryRef v21 = __error();
                uint64_t v22 = v19;
                uint64_t v8 = v18;
                uint64_t v23 = _os_log_pack_fill( v20,  v22,  *v21,  &_mh_execute_header,  "%s: remove service %@ (%@): %s");
                *(_DWORD *)uint64_t v23 = v48;
                os_log_t v24 = "SUCCESS";
                if (!v49) {
                  os_log_t v24 = "FAILED";
                }
                *(void *)(v23 + 4) = "ensureDefaultServiceExistsForInterface";
                *(_WORD *)(v23 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
                *(void *)(v23 + 14) = ValueAtIndex;
                *(_WORD *)(v23 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
                *(void *)(v23 + 24) = v13;
                *(_WORD *)(v23 + 3pthread_attr_setdetachstate(&v4, 2) = 2080;
                *(void *)(v23 + 34) = v24;
                uint64_t v25 = v20;
                a2 = v47;
                __SC_log_send(5LL, v15, v16, v25);
              }
            }

            else
            {
              os_log_t v26 = sub_100058E78();
              uint64_t v27 = _SC_syslog_os_log_mapping(5LL);
              if (__SC_log_enabled(5LL, v26, v27))
              {
                uint64_t v28 = _os_log_pack_size(32LL);
                CFStringRef v50 = &v46;
                os_log_t v29 = (char *)&v46 - ((__chkstk_darwin(v28) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                uint64_t v30 = __error();
                uint64_t v31 = _os_log_pack_fill(v29, v28, *v30, &_mh_execute_header, "%s: found service %@ (%@)");
                *(_DWORD *)uint64_t v31 = v46;
                *(void *)(v31 + 4) = "ensureDefaultServiceExistsForInterface";
                *(_WORD *)(v31 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
                *(void *)(v31 + 14) = ValueAtIndex;
                *(_WORD *)(v31 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
                *(void *)(v31 + 24) = v13;
                __SC_log_send(5LL, v26, v27, v29);
              }

              uint64_t v8 = ValueAtIndex;
            }
          }
        }
      }

      ++v9;
    }

    while (v7 != v9);
    if (!v8)
    {
LABEL_21:
      sub_10005C8A0(a1, (uint64_t)a2);
      return;
    }

    os_log_t v32 = sub_100058E78();
    uint64_t v33 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v34 = a2;
    uint64_t v35 = _os_log_pack_size(22LL);
    uint64_t v36 = (char *)&v46 - ((__chkstk_darwin(v35) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v37 = __error();
    uint64_t v38 = _os_log_pack_fill(v36, v35, *v37, &_mh_execute_header, "%s: TBD: ensure defaults for %@");
    *(_DWORD *)uint64_t v38 = 136315394;
    *(void *)(v38 + 4) = "ensureDefaultServiceExistsForInterface";
    *(_WORD *)(v38 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v38 + 14) = v34;
    os_log_t v39 = v32;
    uint64_t v40 = v33;
  }

  else
  {
    os_log_t v41 = sub_100058E78();
    uint64_t v42 = _SC_syslog_os_log_mapping(5LL);
    uint64_t v43 = _os_log_pack_size(12LL);
    uint64_t v36 = (char *)&v46 - ((__chkstk_darwin(v43) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    CFIndex v44 = __error();
    uint64_t v45 = _os_log_pack_fill(v36, v43, *v44, &_mh_execute_header, "%s: no services", (const char *)v46);
    *(_DWORD *)uint64_t v45 = 136315138;
    *(void *)(v45 + 4) = "ensureDefaultServiceExistsForInterface";
    os_log_t v39 = v41;
    uint64_t v40 = v42;
  }

  __SC_log_send(5LL, v39, v40, v36);
}

uint64_t sub_10005C180(uint64_t a1, uint64_t a2, uint64_t a3, CFArrayRef theArray, const void *a5)
{
  uint64_t v74 = a2;
  uint64_t v75 = a3;
  uint64_t v76 = a1;
  CFIndex Count = CFArrayGetCount(theArray);
  __chkstk_darwin(Count);
  CFIndex v9 = (CFTypeRef *)((char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  CFArrayRef v77 = theArray;
  CFIndex v10 = CFArrayGetCount(theArray);
  uint64_t v12 = v10;
  if (!a5)
  {
    if (v10 < 1) {
      return sub_10005CD14(v76, v9, 0LL);
    }
    uint64_t v13 = 0LL;
    CFIndex v40 = 0LL;
    *(void *)&__int128 v11 = 136315138LL;
    __int128 v72 = v11;
    *(void *)&__int128 v11 = 136315394LL;
    __int128 v73 = v11;
    *(void *)&__int128 v11 = 136315650LL;
    __int128 v71 = v11;
    while (1)
    {
      ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v77, v40);
      os_log_t v42 = sub_100058E78();
      uint64_t v43 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v42, v43))
      {
        uint64_t v44 = _os_log_pack_size(22LL);
        uint64_t v45 = (char *)&v71 - ((__chkstk_darwin(v44) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __int128 v46 = __error();
        uint64_t v47 = _os_log_pack_fill(v45, v44, *v46, &_mh_execute_header, "%s: service %@");
        *(_DWORD *)uint64_t v47 = v73;
        *(void *)(v47 + 4) = "insertCategoryServices";
        *(_WORD *)(v47 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
        *(void *)(v47 + 14) = ValueAtIndex;
        __SC_log_send(5LL, v42, v43, v45);
      }

      Interface = SCNetworkServiceGetInterface(ValueAtIndex);
      if (Interface)
      {
        int v49 = Interface;
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
        if (BSDName)
        {
          CFStringRef v51 = BSDName;
          if (v13 < 1)
          {
LABEL_29:
            uint64_t v53 = v13 + 1;
            v9[v13] = v51;
            os_log_t v54 = sub_100058E78();
            uint64_t v55 = _SC_syslog_os_log_mapping(5LL);
            if (__SC_log_enabled(5LL, v54, v55))
            {
              uint64_t v56 = _os_log_pack_size(28LL);
              CFStringRef v57 = (char *)&v71 - ((__chkstk_darwin(v56) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              CFDictionaryRef v58 = __error();
              uint64_t v59 = _os_log_pack_fill(v57, v56, *v58, &_mh_execute_header, "%s: added %@, count %d");
              *(_DWORD *)uint64_t v59 = v71;
              *(void *)(v59 + 4) = "insertCategoryServices";
              *(_WORD *)(v59 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
              *(void *)(v59 + 14) = v51;
              *(_WORD *)(v59 + 2pthread_attr_setdetachstate(&v4, 2) = 1024;
              *(_DWORD *)(v59 + 24) = v53;
              __SC_log_send(5LL, v54, v55, v57);
            }

            uint64_t v13 = v53;
          }

          else
          {
            uint64_t v52 = 0LL;
            while (!CFEqual(v9[v52], v51))
            {
              if (v13 == ++v52) {
                goto LABEL_29;
              }
            }
          }

          goto LABEL_37;
        }

        os_log_t v67 = sub_100058E78();
        uint64_t v61 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v67, v61))
        {
          uint64_t v68 = _os_log_pack_size(22LL);
          CFDictionaryRef v63 = (char *)&v71 - ((__chkstk_darwin(v68) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          CFTypeID v69 = __error();
          uint64_t v70 = _os_log_pack_fill(v63, v68, *v69, &_mh_execute_header, "%s: no name %@");
          *(_DWORD *)uint64_t v70 = v73;
          *(void *)(v70 + 4) = "insertCategoryServices";
          *(_WORD *)(v70 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
          *(void *)(v70 + 14) = v49;
          os_log_t v66 = v67;
          goto LABEL_36;
        }
      }

      else
      {
        os_log_t v60 = sub_100058E78();
        uint64_t v61 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v60, v61))
        {
          uint64_t v62 = _os_log_pack_size(12LL);
          CFDictionaryRef v63 = (char *)&v71 - ((__chkstk_darwin(v62) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          CFStringRef v64 = __error();
          uint64_t v65 = _os_log_pack_fill(v63, v62, *v64, &_mh_execute_header, "%s: no netif", (const char *)v71);
          *(_DWORD *)uint64_t v65 = v72;
          *(void *)(v65 + 4) = "insertCategoryServices";
          os_log_t v66 = v60;
LABEL_36:
          __SC_log_send(5LL, v66, v61, v63);
        }
      }

void sub_10005C8A0(SCPreferencesRef *a1, uint64_t a2)
{
  os_log_t v4 = sub_100058E78();
  uint64_t v5 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v4, v5))
  {
    uint64_t v6 = _os_log_pack_size(22LL);
    CFIndex v7 = (char *)&v38 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v8 = __error();
    uint64_t v9 = _os_log_pack_fill(v7, v6, *v8, &_mh_execute_header, "%s: %@");
    *(_DWORD *)uint64_t v9 = 136315394;
    *(void *)(v9 + 4) = "establishServiceForInterface";
    *(_WORD *)(v9 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v9 + 14) = a2;
    __SC_log_send(5LL, v4, v5, v7);
  }

  CFIndex v10 = (const __SCNetworkInterface *)_SCNetworkInterfaceCreateWithBSDName(0LL, a2, 0xFFFFFFFFLL);
  if (v10)
  {
    __int128 v11 = v10;
    uint64_t v12 = SCNetworkServiceCreate(*a1, v10);
    uint64_t v13 = _SC_copyInterfaceUUID(a2);
    if (v13)
    {
      int v14 = (const void *)v13;
      if (!_SCNetworkServiceSetServiceID(v12, v13))
      {
        os_log_t v15 = sub_100058E78();
        uint64_t v16 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v15, v16))
        {
          uint64_t v17 = _os_log_pack_size(22LL);
          uint64_t v18 = (char *)&v38 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          int v19 = __error();
          uint64_t v20 = _os_log_pack_fill( v18,  v17,  *v19,  &_mh_execute_header,  "%s: failed to set serviceID for %@");
          *(_DWORD *)uint64_t v20 = 136315394;
          *(void *)(v20 + 4) = "establishServiceForInterface";
          *(_WORD *)(v20 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
          *(void *)(v20 + 14) = a2;
          __SC_log_send(5LL, v15, v16, v18);
        }
      }

      CFRelease(v14);
    }

    if (SCNetworkServiceEstablishDefaultConfiguration(v12))
    {
      if (SCNetworkSetAddService(a1[1], v12)) {
        goto LABEL_18;
      }
      os_log_t v21 = sub_100058E78();
      uint64_t v22 = _SC_syslog_os_log_mapping(5LL);
      uint64_t v23 = _os_log_pack_size(32LL);
      os_log_t v24 = (char *)&v38 - ((__chkstk_darwin(v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v25 = *__error();
      uint64_t v26 = _os_log_pack_fill(v24, v23, v25, &_mh_execute_header, "%s: can't add service for %@ to set, %s");
    }

    else
    {
      os_log_t v21 = sub_100058E78();
      uint64_t v22 = _SC_syslog_os_log_mapping(5LL);
      if (!__SC_log_enabled(5LL, v21, v22))
      {
LABEL_18:
        CFRelease(v12);
        CFRelease(v11);
        return;
      }

      uint64_t v33 = _os_log_pack_size(32LL);
      os_log_t v24 = (char *)&v38 - ((__chkstk_darwin(v33) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v34 = *__error();
      uint64_t v26 = _os_log_pack_fill(v24, v33, v34, &_mh_execute_header, "%s: %@ failed to establish default, %s");
    }

    uint64_t v35 = v26;
    int v36 = SCError();
    uint64_t v37 = SCErrorString(v36);
    *(_DWORD *)uint64_t v35 = 136315650;
    *(void *)(v35 + 4) = "establishServiceForInterface";
    *(_WORD *)(v35 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v35 + 14) = a2;
    *(_WORD *)(v35 + 2pthread_attr_setdetachstate(&v4, 2) = 2080;
    *(void *)(v35 + 24) = v37;
    __SC_log_send(5LL, v21, v22, v24);
    goto LABEL_18;
  }

  os_log_t v27 = sub_100058E78();
  uint64_t v28 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v27, v28))
  {
    uint64_t v29 = _os_log_pack_size(22LL);
    uint64_t v30 = (char *)&v38 - ((__chkstk_darwin(v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v31 = __error();
    uint64_t v32 = _os_log_pack_fill(v30, v29, *v31, &_mh_execute_header, "%s: can't create netif for %@");
    *(_DWORD *)uint64_t v32 = 136315394;
    *(void *)(v32 + 4) = "establishServiceForInterface";
    *(_WORD *)(v32 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
    *(void *)(v32 + 14) = a2;
    __SC_log_send(5LL, v27, v28, v30);
  }

uint64_t sub_10005CD14(uint64_t a1, CFTypeRef *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  os_log_t v4 = *(const __CFArray **)(a1 + 16);
  if (v4)
  {
    uint64_t result = CFArrayGetCount(v4);
    if (result >= 1)
    {
      uint64_t v9 = result;
      CFIndex v10 = 0LL;
      *(void *)&__int128 v8 = 136315906LL;
      __int128 v32 = v8;
      uint64_t v33 = v3;
      do
      {
        ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 16), v10);
        uint64_t result = (uint64_t)SCNetworkServiceGetInterface(ValueAtIndex);
        if (result)
        {
          uint64_t result = (uint64_t)SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)result);
          if (a3 >= 1)
          {
            uint64_t v12 = (const void *)result;
            if (result)
            {
              uint64_t result = CFEqual(*a2, (CFTypeRef)result);
              if ((_DWORD)result) {
                goto LABEL_12;
              }
              uint64_t v13 = 1LL;
              do
              {
                uint64_t v14 = v13;
                if (a3 == v13) {
                  break;
                }
                uint64_t result = CFEqual(a2[v13], v12);
                uint64_t v13 = v14 + 1;
              }

              while (!(_DWORD)result);
              if (v14 < a3)
              {
LABEL_12:
                int v15 = SCNetworkSetRemoveService(*(SCNetworkSetRef *)(v3 + 8), ValueAtIndex);
                os_log_t v16 = sub_100058E78();
                uint64_t v17 = _SC_syslog_os_log_mapping(5LL);
                uint64_t result = __SC_log_enabled(5LL, v16, v17);
                if ((_DWORD)result)
                {
                  uint64_t v18 = v9;
                  uint64_t v19 = _os_log_pack_size(42LL);
                  uint64_t v35 = &v32;
                  uint64_t v20 = __chkstk_darwin(v19);
                  int v34 = v15;
                  os_log_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  uint64_t v22 = __error();
                  uint64_t v23 = v19;
                  uint64_t v9 = v18;
                  uint64_t v3 = v33;
                  uint64_t v24 = _os_log_pack_fill( v21,  v23,  *v22,  &_mh_execute_header,  "%s: remove service %@ (%@): %s");
                  *(_DWORD *)uint64_t v24 = v32;
                  uint64_t v25 = "SUCCESS";
                  if (!v34) {
                    uint64_t v25 = "FAILED";
                  }
                  *(void *)(v24 + 4) = "removeServicesForInterfaces";
                  *(_WORD *)(v24 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
                  *(void *)(v24 + 14) = ValueAtIndex;
                  *(_WORD *)(v24 + 2pthread_attr_setdetachstate(&v4, 2) = 2112;
                  *(void *)(v24 + 24) = v12;
                  *(_WORD *)(v24 + 3pthread_attr_setdetachstate(&v4, 2) = 2080;
                  *(void *)(v24 + 34) = v25;
                  uint64_t result = __SC_log_send(5LL, v16, v17, v21);
                }
              }
            }
          }
        }

        ++v10;
      }

      while (v10 != v9);
    }
  }

  else
  {
    os_log_t v26 = sub_100058E78();
    uint64_t v27 = _SC_syslog_os_log_mapping(5LL);
    uint64_t result = __SC_log_enabled(5LL, v26, v27);
    if ((_DWORD)result)
    {
      uint64_t v28 = _os_log_pack_size(12LL);
      uint64_t v29 = (char *)&v32 - ((__chkstk_darwin(v28) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v30 = __error();
      uint64_t v31 = _os_log_pack_fill(v29, v28, *v30, &_mh_execute_header, "%s: no services", (const char *)v32);
      *(_DWORD *)uint64_t v31 = 136315138;
      *(void *)(v31 + 4) = "removeServicesForInterfaces";
      return __SC_log_send(5LL, v26, v27, v29);
    }
  }

  return result;
}

void sub_10005CFF0(const __SCPreferences *a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t v3 = a3;
  if (CFDictionaryGetValueIfPresent(a3, kSCResvLink, (const void **)&value)
    && (uint64_t v3 = SCPreferencesPathGetValue(a1, (CFStringRef)value)) == 0LL)
  {
    os_log_t v9 = sub_100058E78();
    uint64_t v10 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v9, v10))
    {
      uint64_t v11 = _os_log_pack_size(22LL);
      uint64_t v12 = (char *)&v30 - ((__chkstk_darwin(v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v13 = __error();
      uint64_t v14 = _os_log_pack_fill( v12,  v11,  *v13,  &_mh_execute_header,  "SCPreferencesPathGetValue(,%@,) failed: %s");
      int v15 = value;
      int v16 = SCError();
      uint64_t v17 = SCErrorString(v16);
      *(_DWORD *)uint64_t v14 = 138412546;
      *(void *)(v14 + 4) = v15;
      *(_WORD *)(v14 + 1pthread_attr_setdetachstate(&v4, 2) = 2080;
      *(void *)(v14 + 14) = v17;
      __SC_log_send(5LL, v9, v10, v12);
    }
  }

  else if (!CFDictionaryContainsKey(v3, kSCResvInactive))
  {
    CFStringRef v6 = CFStringCreateWithFormat(0LL, 0LL, @"%@%@", kSCDynamicStoreDomainSetup, a2);
    CFIndex v7 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_100079FA8, v6);
    if (v7) {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0LL, 0LL, v7);
    }
    else {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    }
    uint64_t v18 = MutableCopy;
    CFIndex Count = CFDictionaryGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v20 = Count;
      uint64_t v31 = v6;
      CFIndex v21 = 8 * Count;
      uint64_t v22 = (const void **)CFAllocatorAllocate(0LL, 8 * Count, 0LL);
      uint64_t v23 = (const void **)CFAllocatorAllocate(0LL, v21, 0LL);
      CFDictionaryGetKeysAndValues(v3, v22, v23);
      for (uint64_t i = 0LL; i != v20; ++i)
      {
        uint64_t v25 = v23[i];
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (v25 && CFGetTypeID(v25) == TypeID)
        {
          int v27 = CFEqual(a2, @"/");
          uint64_t v28 = "";
          if (!v27) {
            uint64_t v28 = "/";
          }
          CFStringRef v29 = CFStringCreateWithFormat(0LL, 0LL, @"%@%s%@", a2, v28, v22[i]);
          sub_10005CFF0(a1, v29, v23[i]);
          CFRelease(v29);
        }

        else
        {
          CFDictionarySetValue(v18, v22[i], v23[i]);
        }
      }

      CFAllocatorDeallocate(0LL, v22);
      CFAllocatorDeallocate(0LL, v23);
      CFStringRef v6 = v31;
    }

    if (CFDictionaryGetCount(v18) >= 1) {
      CFDictionarySetValue((CFMutableDictionaryRef)qword_100079FA8, v6, v18);
    }
    CFRelease(v18);
    CFRelease(v6);
  }

void sub_10005D340(void *key, const void *a2)
{
  CFPropertyListRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_100079F90, key);
  if (Value && CFEqual(Value, a2)) {
    CFArrayAppendValue((CFMutableArrayRef)qword_100079F98, key);
  }
  uint64_t v5 = (const __CFArray *)qword_100079FA0;
  v7.length = CFArrayGetCount((CFArrayRef)qword_100079FA0);
  v7.location = 0LL;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v5, v7, key);
  if (FirstIndexOfValue != -1) {
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_100079FA0, FirstIndexOfValue);
  }
}

uint64_t sub_10005D42C(const __CFArray *a1, CFTypeRef *a2, CFArrayRef *a3)
{
  if (*a2)
  {
    CFRelease(*a2);
    *a2 = 0LL;
  }

  if (*a3)
  {
    CFIndex Count = CFArrayGetCount(*a3);
    CFRelease(*a3);
    *a3 = 0LL;
  }

  else
  {
    CFIndex Count = 0LL;
  }

  uint64_t v33 = a3;
  if (!a1 || (CFIndex v35 = CFArrayGetCount(a1), v35 < 1))
  {
    int v31 = 0;
    goto LABEL_29;
  }

  __int128 v32 = (__CFArray **)a2;
  int v31 = 0;
  CFIndex v7 = 0LL;
  *(void *)&__int128 v6 = 138412290LL;
  __int128 v36 = v6;
  int v34 = a1;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
    int v9 = 10;
    while (1)
    {
      if (v9 != 10) {
        usleep(0x4E20u);
      }
      uint64_t v10 = _SCNetworkInterfaceCreateWithBSDName(0LL, ValueAtIndex, 0LL);
      if (!v10)
      {
        os_log_t v18 = sub_100058E78();
        uint64_t v19 = _SC_syslog_os_log_mapping(3LL);
        if (__SC_log_enabled(3LL, v18, v19))
        {
          uint64_t v20 = _os_log_pack_size(12LL);
          CFIndex v21 = (char *)&Count - ((__chkstk_darwin(v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v22 = __error();
          uint64_t v23 = _os_log_pack_fill( v21,  v20,  *v22,  &_mh_execute_header,  "could not create network interface for %@");
          *(_DWORD *)uint64_t v23 = v36;
          *(void *)(v23 + 4) = ValueAtIndex;
          __SC_log_send(3LL, v18, v19, v21);
        }

        goto LABEL_19;
      }

      uint64_t v11 = (const void *)v10;
      if (_SCNetworkInterfaceGetIOPath(v10)) {
        break;
      }
      os_log_t v12 = sub_100058E78();
      uint64_t v13 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v12, v13))
      {
        uint64_t v14 = _os_log_pack_size(12LL);
        int v15 = (char *)&Count - ((__chkstk_darwin(v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v16 = __error();
        uint64_t v17 = _os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "could not get IOPath for %@");
        *(_DWORD *)uint64_t v17 = v36;
        *(void *)(v17 + 4) = ValueAtIndex;
        __SC_log_send(3LL, v12, v13, v15);
      }

      CFRelease(v11);
LABEL_19:
      if (!--v9)
      {
        a1 = v34;
        goto LABEL_26;
      }
    }

    CFMutableArrayRef Mutable = *v33;
    if (!*v33)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      CFArrayRef *v33 = Mutable;
    }

    CFArrayAppendValue(Mutable, ValueAtIndex);
    uint64_t v25 = *v32;
    a1 = v34;
    if (!*v32)
    {
      uint64_t v25 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      const char *v32 = v25;
    }

    CFArrayAppendValue(v25, v11);
    CFRelease(v11);
    int v31 = 1;
LABEL_26:
    ++v7;
  }

  while (v7 != v35);
LABEL_29:
  if (*v33) {
    BOOL v26 = CFArrayGetCount(*v33) == 0;
  }
  else {
    BOOL v26 = 1;
  }
  BOOL v27 = Count <= 0 || !v26;
  unsigned __int8 v28 = v31;
  if (!v27) {
    return 1;
  }
  return v28;
}

void sub_10005D778(const __SCPreferences *a1)
{
  for (uint64_t i = a1; ; a1 = i)
  {
    if (SCPreferencesLock(a1, 1u))
    {
      CFPropertyListRef Value = SCPreferencesGetValue(i, @"Model");
      CFPropertyListRef v4 = (CFPropertyListRef)_SC_hw_model(0LL);
      if (Value)
      {
        CFPropertyListRef v5 = v4;
        if (Value != v4 && (!v4 || !CFEqual(Value, v4)))
        {
          os_log_t v6 = sub_100058E78();
          uint64_t v7 = _SC_syslog_os_log_mapping(5LL);
          if (__SC_log_enabled(5LL, v6, v7))
          {
            uint64_t v8 = _os_log_pack_size(22LL);
            int v9 = (char *)&v39 - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            uint64_t v10 = __error();
            uint64_t v11 = _os_log_pack_fill( v9,  v8,  *v10,  &_mh_execute_header,  "Hardware model changed\n  created on %@\n  now on     %@");
            *(_DWORD *)uint64_t v11 = 138412546;
            *(void *)(v11 + 4) = Value;
            *(_WORD *)(v11 + 1pthread_attr_setdetachstate(&v4, 2) = 2112;
            *(void *)(v11 + 14) = v5;
            __SC_log_send(5LL, v6, v7, v9);
          }

          sub_10005A0E4(i, (uint64_t)Value);
        }
      }

      SCNetworkSetRef v12 = SCNetworkSetCopyCurrent(i);
      SCNetworkSetRef Default = v12;
      if (v12 || (SCNetworkSetRef Default = (SCNetworkSetRef)_SCNetworkSetCreateDefault(i)) != 0LL)
      {
        if (SCNetworkSetEstablishDefaultConfiguration(Default))
        {
          if (SCPreferencesCommitChanges(i))
          {
            os_log_t v14 = sub_100058E78();
            uint64_t v15 = _SC_syslog_os_log_mapping(5LL);
            if (__SC_log_enabled(5LL, v14, v15))
            {
              uint64_t v16 = _os_log_pack_size(2LL);
              uint64_t v17 = (char *)&v39 - ((__chkstk_darwin(v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              os_log_t v18 = __error();
              *(_WORD *)_os_log_pack_fill( v17,  v16,  *v18,  &_mh_execute_header,  "New network configuration saved") = 0;
              __SC_log_send(5LL, v14, v15, v17);
            }

            goto LABEL_24;
          }

          int v28 = SCError();
          if (v28 == 30)
          {
            byte_100079F78 = 1;
LABEL_24:
            SCPreferencesApplyChanges(i);
            SCPreferencesUnlock(i);
LABEL_34:
            CFRelease(Default);
            return;
          }

          int v19 = v28;
          SCPreferencesApplyChanges(i);
        }

        else
        {
          int v19 = SCError();
          if (!v12) {
            SCNetworkSetRemove(Default);
          }
        }
      }

      else
      {
        int v19 = SCError();
      }

      os_log_t v29 = sub_100058E78();
      uint64_t v30 = _SC_syslog_os_log_mapping(5LL);
      int v31 = __SC_log_enabled(5LL, v29, v30);
      if (v19)
      {
        if (!v31) {
          goto LABEL_33;
        }
        uint64_t v32 = _os_log_pack_size(12LL);
        uint64_t v33 = (char *)&v39 - ((__chkstk_darwin(v32) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        int v34 = __error();
        uint64_t v35 = _os_log_pack_fill( v33,  v32,  *v34,  &_mh_execute_header,  "Could not establish network configuration: %s",  v39);
        __int128 v36 = SCErrorString(v19);
        *(_DWORD *)uint64_t v35 = 136315138;
        *(void *)(v35 + 4) = v36;
      }

      else
      {
        if (!v31) {
          goto LABEL_33;
        }
        uint64_t v37 = _os_log_pack_size(2LL);
        uint64_t v33 = (char *)&v39 - ((__chkstk_darwin(v37) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v38 = __error();
        *(_WORD *)_os_log_pack_fill( v33,  v37,  *v38,  &_mh_execute_header,  "Network configuration not updated") = 0;
      }

      __SC_log_send(5LL, v29, v30, v33);
LABEL_33:
      SCPreferencesUnlock(i);
      if (!Default) {
        return;
      }
      goto LABEL_34;
    }

    int v2 = SCError();
    if (v2 != 3005) {
      break;
    }
    SCPreferencesSynchronize(i);
  }

  int v20 = v2;
  os_log_t v21 = sub_100058E78();
  uint64_t v22 = _SC_syslog_os_log_mapping(5LL);
  if (__SC_log_enabled(5LL, v21, v22))
  {
    uint64_t v23 = _os_log_pack_size(12LL);
    uint64_t v24 = (char *)&v39 - ((__chkstk_darwin(v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v25 = __error();
    uint64_t v26 = _os_log_pack_fill( v24,  v23,  *v25,  &_mh_execute_header,  "Could not acquire network configuration lock: %s",  v39);
    BOOL v27 = SCErrorString(v20);
    *(_DWORD *)uint64_t v26 = 136315138;
    *(void *)(v26 + 4) = v27;
    __SC_log_send(5LL, v21, v22, v24);
  }

id sub_10005DC2C()
{
  os_log_t v0 = (void *)qword_10007A000;
  if (!qword_10007A000)
  {
    os_log_t v1 = os_log_create("com.apple.SystemConfiguration", "QoSMarking");
    int v2 = (void *)qword_10007A000;
    qword_10007A000 = (uint64_t)v1;

    os_log_t v0 = (void *)qword_10007A000;
  }

  return v0;
}

LABEL_132:
LABEL_133:
    LOBYTE(v1pthread_attr_setdetachstate(&v4, 2) = v118;
    goto LABEL_134;
  }

  CFIndex v114 = v11;
  if ((_DWORD)v12)
  {

    uint64_t v8 = 0LL;
  }

  else
  {
    if (!v6 && v8)
    {
      uint64_t v16 = sub_10005DC2C();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      os_log_t v18 = _SC_syslog_os_log_mapping(5LL);
      if (__SC_log_enabled(5LL, v17, v18))
      {
        uint64_t v152 = 0u;
        int v153 = 0u;
        unsigned int v150 = 0u;
        unsigned int v151 = 0u;
        uint64_t v148 = 0u;
        int v149 = 0u;
        int v146 = 0u;
        uint64_t v147 = 0u;
        unsigned int v144 = 0u;
        unsigned int v145 = 0u;
        CFRange v142 = 0u;
        uint64_t v143 = 0u;
        BOOL v140 = 0u;
        CFRange v141 = 0u;
        unsigned int v138 = 0u;
        char v139 = 0u;
        int v19 = (_sc_log > 0) | 2;
        if (os_log_type_enabled(v17, (os_log_type_t)v18)) {
          int v20 = v19;
        }
        else {
          int v20 = 2LL;
        }
        LODWORD(v154[0]) = 138412290;
        *(void *)((char *)v154 + 4) = v7;
        os_log_t v21 = (__int128 *)_os_log_send_and_compose_impl( v20,  0LL,  &v138,  256LL,  &_mh_execute_header,  v17,  v18,  "QoS marking policy: %@: remove",  v154,  12);
        __SC_log_send2(5LL, v17, v18, 0LL, v21);
        if (v21 != &v138) {
          free(v21);
        }
        LODWORD(v1pthread_attr_setdetachstate(&v4, 2) = v118;
      }
    }

    -[NSMutableDictionary removeObjectForKey:](self->_policySessions, "removeObjectForKey:", v7);
    -[NSMutableDictionary removeObjectForKey:](self->_enabled, "removeObjectForKey:", v7);
    -[NSMutableDictionary removeObjectForKey:](self->_enabledAV, "removeObjectForKey:", v7);
  }

  uint64_t v22 = socket(2, 2, 0);
  if (v22 == -1)
  {
    uint64_t v43 = sub_10005DC2C();
    uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    uint64_t v45 = _SC_syslog_os_log_mapping(3LL);
    if (__SC_log_enabled(3LL, v44, v45))
    {
      CFStringRef v109 = v8;
      uint64_t v152 = 0u;
      int v153 = 0u;
      unsigned int v150 = 0u;
      unsigned int v151 = 0u;
      uint64_t v148 = 0u;
      int v149 = 0u;
      int v146 = 0u;
      uint64_t v147 = 0u;
      unsigned int v144 = 0u;
      unsigned int v145 = 0u;
      CFRange v142 = 0u;
      uint64_t v143 = 0u;
      BOOL v140 = 0u;
      CFRange v141 = 0u;
      unsigned int v138 = 0u;
      char v139 = 0u;
      __int128 v46 = (_sc_log > 0) | 2;
      if (os_log_type_enabled(v44, (os_log_type_t)v45)) {
        uint64_t v47 = v46;
      }
      else {
        uint64_t v47 = 2LL;
      }
      __int128 v48 = v44;
      int v49 = __error();
      CFStringRef v50 = strerror(*v49);
      LODWORD(v154[0]) = 136315138;
      *(void *)((char *)v154 + 4) = v50;
      CFStringRef v51 = (__int128 *)_os_log_send_and_compose_impl( v47,  0LL,  &v138,  256LL,  &_mh_execute_header,  v48,  v45,  "socket() failed: %s",  (const char *)v154);

      __SC_log_send2(3LL, v48, v45, 0LL, v51);
      if (v51 != &v138) {
        free(v51);
      }
      uint64_t v8 = v109;
      LODWORD(v1pthread_attr_setdetachstate(&v4, 2) = v118;
      uint64_t v11 = v114;
    }

    uint64_t v15 = 1;
    if ((_DWORD)v12) {
      goto LABEL_60;
    }
  }

  else
  {
    uint64_t v23 = v22;
    uint64_t v24 = v12 | (v6 == 0LL);
    uint64_t v25 = sub_10005DC2C();
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    BOOL v27 = _SC_syslog_os_log_mapping(5LL);
    if (__SC_log_enabled(5LL, v26, v27))
    {
      uint64_t v152 = 0u;
      int v153 = 0u;
      unsigned int v150 = 0u;
      unsigned int v151 = 0u;
      uint64_t v148 = 0u;
      int v149 = 0u;
      int v146 = 0u;
      uint64_t v147 = 0u;
      unsigned int v144 = 0u;
      unsigned int v145 = 0u;
      CFRange v142 = 0u;
      uint64_t v143 = 0u;
      BOOL v140 = 0u;
      CFRange v141 = 0u;
      unsigned int v138 = 0u;
      char v139 = 0u;
      int v28 = (_sc_log > 0) | 2;
      if (os_log_type_enabled(v26, (os_log_type_t)v27)) {
        os_log_t v29 = v28;
      }
      else {
        os_log_t v29 = 2LL;
      }
      if (v24) {
        uint64_t v30 = "enable";
      }
      else {
        uint64_t v30 = "disable";
      }
      int v31 = " (default)";
      LODWORD(v154[0]) = 138412802;
      *(void *)((char *)v154 + 4) = v7;
      *(void *)((char *)v154 + 14) = v30;
      WORD6(v154[0]) = 2080;
      if (v6) {
        int v31 = "";
      }
      WORD3(v154[1]) = 2080;
      *((void *)&v154[1] + pthread_attr_setscope(&v4, 1) = v31;
      LODWORD(v105) = 32;
      uint64_t v32 = (__int128 *)_os_log_send_and_compose_impl( v29,  0LL,  &v138,  256LL,  &_mh_execute_header,  v26,  v27,  "QoS marking policy: %@: %s%s",  v154,  v105);
      __SC_log_send2(5LL, v26, v27, 0LL, v32);
      if (v32 != &v138) {
        free(v32);
      }
      uint64_t v11 = v114;
    }

    uint64_t v33 = -[__CFString UTF8String](v7, "UTF8String");
    memset(v154, 0, sizeof(v154));
    __strlcpy_chk(v154, v33, 16LL, 16LL);
    LODWORD(v154[1]) = v24;
    if (ioctl(v23, 0xC02069B5uLL, v154) == -1)
    {
      int v34 = sub_10005DC2C();
      uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      __int128 v36 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v35, v36))
      {
        uint64_t v152 = 0u;
        int v153 = 0u;
        unsigned int v150 = 0u;
        unsigned int v151 = 0u;
        uint64_t v148 = 0u;
        int v149 = 0u;
        int v146 = 0u;
        uint64_t v147 = 0u;
        unsigned int v144 = 0u;
        unsigned int v145 = 0u;
        CFRange v142 = 0u;
        uint64_t v143 = 0u;
        BOOL v140 = 0u;
        CFRange v141 = 0u;
        unsigned int v138 = 0u;
        char v139 = 0u;
        uint64_t v37 = (_sc_log > 0) | 2;
        uint64_t v38 = os_log_type_enabled(v35, (os_log_type_t)v36) ? v37 : 2;
        CFStringRef v106 = v38;
        os_log_t v39 = v35;
        CFIndex v40 = __error();
        os_log_t v41 = strerror(*v40);
        uint64_t v134 = 136315394;
        CFTypeRef v135 = v33;
        size_t v136 = 2080;
        v137 = v41;
        LODWORD(v105) = 22;
        os_log_t v42 = (__int128 *)_os_log_send_and_compose_impl( v106,  0LL,  &v138,  256LL,  &_mh_execute_header,  v39,  v36,  "%s: ioctl(SIOCSQOSMARKINGENABLED) failed: %s",  (const char *)&v134,  v105);

        __SC_log_send2(3LL, v39, v36, 0LL, v42);
        if (v42 != &v138) {
          free(v42);
        }
      }

      uint64_t v11 = v114;
    }

    close(v23);
    uint64_t v15 = 1;
    LOBYTE(v1pthread_attr_setdetachstate(&v4, 2) = v118;
    if (v118) {
      goto LABEL_60;
    }
  }

LABEL_134:
  if (-[NSMutableDictionary count](self->_enabled, "count"))
  {
    if (!v15) {
      goto LABEL_144;
    }
  }

  else
  {
    sub_100061580("net.qos.policy.restrict_avapps", 0);
    sub_100061580("net.qos.policy.restricted", 0);
    if (!v15) {
      goto LABEL_144;
    }
  }

  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainState,  v7,  kSCEntNetQoSMarkingPolicy);
  CFIndex v98 = v12 ^ 1;
  if (!v6) {
    CFIndex v98 = 1;
  }
  if ((v98 & 1) != 0) {
    SCDynamicStoreRemoveValue(0LL, NetworkInterfaceEntity);
  }
  else {
    SCDynamicStoreSetValue(0LL, NetworkInterfaceEntity, v6);
  }
  CFRelease(NetworkInterfaceEntity);
LABEL_144:
}

void sub_100060204(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___QoSMarkingController);
  int v2 = (void *)qword_10007A008;
  qword_10007A008 = (uint64_t)v1;
}

void sub_100060A9C(__CFBundle *a1)
{
  id v2 = sub_10005DC2C();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v3, v4))
  {
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    __int128 v62 = 0u;
    __int128 v63 = 0u;
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    unsigned int v5 = (_sc_log > 0) | 2;
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    uint64_t v6 = os_log_type_enabled(v3, (os_log_type_t)v4) ? v5 : 2LL;
    LOWORD(v5sub_10000F430((uint64_t)__str, 0) = 0;
    uint64_t v7 = (__int128 *)_os_log_send_and_compose_impl( v6,  0LL,  &v52,  256LL,  &_mh_execute_header,  v3,  v4,  "load() called",  &v50,  2);
    __SC_log_send2(7LL, v3, v4, 0LL, v7);
    if (v7 != &v52) {
      free(v7);
    }
  }

  id v8 = sub_10005DC2C();
  int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = _SC_syslog_os_log_mapping(7LL);
  if (__SC_log_enabled(7LL, v9, v10))
  {
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    __int128 v62 = 0u;
    __int128 v63 = 0u;
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    LODWORD(v1pthread_attr_setscope(&v4, 1) = (_sc_log > 0) | 2;
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    uint64_t v11 = os_log_type_enabled(v9, (os_log_type_t)v10) ? v11 : 2LL;
    SCNetworkSetRef v12 = v9;
    CFStringRef Identifier = CFBundleGetIdentifier(a1);
    int v50 = 138412290;
    CFStringRef v51 = (void *)Identifier;
    LODWORD(v49) = 12;
    os_log_t v14 = (__int128 *)_os_log_send_and_compose_impl( v11,  0LL,  &v52,  256LL,  &_mh_execute_header,  v12,  v10,  "  bundle ID = %@",  &v50,  v49);

    __SC_log_send2(7LL, v12, v10, 0LL, v14);
    if (v14 != &v52) {
      free(v14);
    }
  }

  if (objc_opt_class(&OBJC_CLASS___NEPolicy))
  {
    qword_10007A018 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0LL, kSCDynamicStoreDomainState);
    CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a1);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (InfoDictionary && CFGetTypeID(InfoDictionary) == TypeID)
    {
      CFPropertyListRef Value = (void *)CFDictionaryGetValue(InfoDictionary, @"QoSMarking_AppleAudioVideoCalls_BundleIDs");
      CFTypeID v18 = CFArrayGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == v18) {
          int v19 = Value;
        }
        else {
          int v19 = 0LL;
        }
      }

      else
      {
        int v19 = 0LL;
      }

      objc_storeStrong((id *)&qword_100079FF0, v19);
      int v20 = (void *)CFDictionaryGetValue(InfoDictionary, @"QoSMarking_AppleAudioVideoCalls_ExecutablePaths");
      CFTypeID v21 = CFArrayGetTypeID();
      if (v20)
      {
        if (CFGetTypeID(v20) == v21) {
          uint64_t v22 = v20;
        }
        else {
          uint64_t v22 = 0LL;
        }
      }

      else
      {
        uint64_t v22 = 0LL;
      }

      objc_storeStrong((id *)&qword_100079FF8, v22);
    }

    SCDynamicStoreRef v23 = SCDynamicStoreCreate( 0LL,  @"QoS Marking Configuraton plug-in",  (SCDynamicStoreCallBack)sub_1000611B8,  0LL);
    if (v23)
    {
      uint64_t v24 = v23;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      uint64_t v26 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      CFArrayAppendValue(Mutable, (const void *)qword_10007A018);
      CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  kSCDynamicStoreDomainSetup,  kSCCompAnyRegex,  kSCEntNetQoSMarkingPolicy);
      CFArrayAppendValue(v26, NetworkInterfaceEntity);
      CFRelease(NetworkInterfaceEntity);
      LODWORD(NetworkInterfaceEntity) = SCDynamicStoreSetNotificationKeys(v24, Mutable, v26);
      CFRelease(Mutable);
      CFRelease(v26);
      if (!(_DWORD)NetworkInterfaceEntity)
      {
        id v45 = sub_10005DC2C();
        uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
        uint64_t v33 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v32, v33))
        {
          __int128 v66 = 0u;
          __int128 v67 = 0u;
          __int128 v64 = 0u;
          __int128 v65 = 0u;
          __int128 v62 = 0u;
          __int128 v63 = 0u;
          __int128 v60 = 0u;
          __int128 v61 = 0u;
          __int128 v58 = 0u;
          __int128 v59 = 0u;
          __int128 v56 = 0u;
          __int128 v57 = 0u;
          __int128 v54 = 0u;
          __int128 v55 = 0u;
          LODWORD(v46) = (_sc_log > 0) | 2;
          __int128 v52 = 0u;
          __int128 v53 = 0u;
          if (os_log_type_enabled(v32, (os_log_type_t)v33)) {
            uint64_t v46 = v46;
          }
          else {
            uint64_t v46 = 2LL;
          }
          uint64_t v32 = v32;
          int v47 = SCError();
          SCErrorString(v47);
          uint64_t v36 = _os_log_send_and_compose_impl( v46,  0LL,  &v52,  256LL,  &_mh_execute_header,  v32,  v33,  "SCDynamicStoreSetNotificationKeys() failed: %s",  &v50);
          goto LABEL_49;
        }

LABEL_51:
        CFRelease(v24);
        return;
      }

      int v28 = (dispatch_queue_s *)qword_10007A038;
      if (!qword_10007A038)
      {
        dispatch_queue_t v29 = dispatch_queue_create("com.apple.SystemConfiguration.QoSMarking", 0LL);
        uint64_t v30 = (void *)qword_10007A038;
        qword_10007A038 = (uint64_t)v29;

        int v28 = (dispatch_queue_s *)qword_10007A038;
      }

      if (!SCDynamicStoreSetDispatchQueue(v24, v28))
      {
        id v31 = sub_10005DC2C();
        uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
        uint64_t v33 = _SC_syslog_os_log_mapping(5LL);
        if (__SC_log_enabled(5LL, v32, v33))
        {
          __int128 v66 = 0u;
          __int128 v67 = 0u;
          __int128 v64 = 0u;
          __int128 v65 = 0u;
          __int128 v62 = 0u;
          __int128 v63 = 0u;
          __int128 v60 = 0u;
          __int128 v61 = 0u;
          __int128 v58 = 0u;
          __int128 v59 = 0u;
          __int128 v56 = 0u;
          __int128 v57 = 0u;
          __int128 v54 = 0u;
          __int128 v55 = 0u;
          LODWORD(v34) = (_sc_log > 0) | 2;
          __int128 v52 = 0u;
          __int128 v53 = 0u;
          if (os_log_type_enabled(v32, (os_log_type_t)v33)) {
            uint64_t v34 = v34;
          }
          else {
            uint64_t v34 = 2LL;
          }
          uint64_t v32 = v32;
          int v35 = SCError();
          SCErrorString(v35);
          uint64_t v36 = _os_log_send_and_compose_impl( v34,  0LL,  &v52,  256LL,  &_mh_execute_header,  v32,  v33,  "SCDynamicStoreSetDispatchQueue() failed: %s",  &v50);
LABEL_49:
          __int128 v48 = (__int128 *)v36;

          __SC_log_send2(5LL, v32, v33, 0LL, v48);
          if (v48 != &v52) {
            free(v48);
          }
          goto LABEL_51;
        }

        goto LABEL_51;
      }
    }

    else
    {
      id v37 = sub_10005DC2C();
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      uint64_t v39 = _SC_syslog_os_log_mapping(3LL);
      if (__SC_log_enabled(3LL, v38, v39))
      {
        __int128 v66 = 0u;
        __int128 v67 = 0u;
        __int128 v64 = 0u;
        __int128 v65 = 0u;
        __int128 v62 = 0u;
        __int128 v63 = 0u;
        __int128 v60 = 0u;
        __int128 v61 = 0u;
        __int128 v58 = 0u;
        __int128 v59 = 0u;
        __int128 v56 = 0u;
        __int128 v57 = 0u;
        __int128 v54 = 0u;
        __int128 v55 = 0u;
        LODWORD(v4sub_10000F430((uint64_t)__str, 0) = (_sc_log > 0) | 2;
        __int128 v52 = 0u;
        __int128 v53 = 0u;
        uint64_t v40 = os_log_type_enabled(v38, (os_log_type_t)v39) ? v40 : 2LL;
        os_log_t v41 = v38;
        int v42 = SCError();
        uint64_t v43 = SCErrorString(v42);
        int v50 = 136315138;
        CFStringRef v51 = (void *)v43;
        uint64_t v44 = (__int128 *)_os_log_send_and_compose_impl( v40,  0LL,  &v52,  256LL,  &_mh_execute_header,  v41,  v39,  "SCDynamicStoreCreate() failed: %s",  (const char *)&v50);

        __SC_log_send2(3LL, v41, v39, 0LL, v44);
        if (v44 != &v52) {
          free(v44);
        }
      }
    }
  }

void sub_1000611B8(SCDynamicStoreRef store, CFArrayRef keys)
{
  if (!qword_10007A030) {
    qword_10007A030 = (uint64_t)SCDynamicStoreKeyCreate( 0LL,  @"%@/%@/%@/",  kSCDynamicStoreDomainSetup,  kSCCompNetwork,  kSCCompInterface);
  }
  uint64_t v4 = SCDynamicStoreCopyMultiple(store, keys, 0LL);
  CFIndex Count = CFArrayGetCount(keys);
  if (Count >= 1)
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0LL;
    int v28 = (void *)kSCPropNetQoSMarkingWhitelistedAppIdentifiers;
    BOOL v27 = (void *)kSCPropNetQoSMarkingAllowListAppIdentifiers;
    do
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(keys, v7);
      if (CFEqual(ValueAtIndex, (CFTypeRef)qword_10007A018))
      {
        if (v4)
        {
          CFPropertyListRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, ValueAtIndex);
          CFTypeID TypeID = CFDictionaryGetTypeID();
          if (Value)
          {
            if (CFGetTypeID(Value) == TypeID)
            {
              uint64_t v11 = CFDictionaryGetValue(Value, kSCPropNetInterfaces);
              CFTypeID v12 = CFArrayGetTypeID();
              if (v11)
              {
                if (CFGetTypeID(v11) == v12)
                {
                  uint64_t v13 = objc_autoreleasePoolPush();
                  os_log_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[QoSMarkingController sharedController]( &OBJC_CLASS___QoSMarkingController,  "sharedController"));
                  [v14 setInterfaces:v11];

                  objc_autoreleasePoolPop(v13);
                }
              }
            }
          }
        }

        else
        {
          CFDictionaryGetTypeID();
        }
      }

      else
      {
        uint64_t v15 = (const __CFString *)qword_10007A030;
        if (CFStringHasPrefix(ValueAtIndex, (CFStringRef)qword_10007A030))
        {
          MutableCFDictionaryRef Copy = CFStringCreateMutableCopy(0LL, 0LL, ValueAtIndex);
          v29.length = CFStringGetLength(v15);
          v29.CFIndex location = 0LL;
          CFStringDelete(MutableCopy, v29);
          CFIndex location = CFStringFind(MutableCopy, @"/", 0LL).location;
          if (location != -1)
          {
            CFIndex v18 = location;
            v30.length = CFStringGetLength(MutableCopy) - location;
            v30.CFIndex location = v18;
            CFStringDelete(MutableCopy, v30);
          }

          if (MutableCopy)
          {
            if (v4)
            {
              int v19 = (const __CFDictionary *)CFDictionaryGetValue(v4, ValueAtIndex);
              int v20 = v19;
              if (v19)
              {
                CFTypeID v21 = CFDictionaryGetValue(v19, v28);
                if (v21)
                {
                  uint64_t v22 = v21;
                  SCDynamicStoreRef v23 = CFDictionaryGetValue(v20, v27);
                  uint64_t v24 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v20);
                  int v20 = v24;
                  if (!v23) {
                    CFDictionarySetValue(v24, v27, v22);
                  }
                  CFDictionaryRemoveValue(v20, v28);
                }

                else
                {
                  CFRetain(v20);
                }
              }
            }

            else
            {
              int v20 = 0LL;
            }

            uint64_t v25 = objc_autoreleasePoolPush();
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[QoSMarkingController sharedController]( &OBJC_CLASS___QoSMarkingController,  "sharedController"));
            [v26 setPolicy:v20 forInterface:MutableCopy];

            objc_autoreleasePoolPop(v25);
            if (v20) {
              CFRelease(v20);
            }
            CFRelease(MutableCopy);
          }
        }
      }

      ++v7;
    }

    while (v6 != v7);
  }

  if (v4) {
    CFRelease(v4);
  }
}

void sub_100061528(id a1)
{
  byte_10007A020 = os_variant_has_internal_content("com.apple.SystemConfiguration");
}

void sub_100061580(const char *a1, int a2)
{
  int v16 = a2;
  if (sysctlbyname(a1, 0LL, 0LL, &v16, 4uLL) != -1)
  {
    id v3 = sub_10005DC2C();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = _SC_syslog_os_log_mapping(5LL);
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    unsigned int v6 = (_sc_log > 0) | 2;
    uint64_t v7 = os_log_type_enabled(v4, (os_log_type_t)v5) ? v6 : 2LL;
    int v17 = 136315394;
    CFIndex v18 = (void *)a1;
    __int16 v19 = 1024;
    int v20 = v16;
    id v8 = (__int128 *)_os_log_send_and_compose_impl( v7,  0LL,  &v21,  256LL,  &_mh_execute_header,  v4,  v5,  "QoS marking policy: sysctl %s=%d",  (const char *)&v17,  18);
    __SC_log_send2(5LL, v4, v5, 0LL, v8);
    if (v8 == &v21) {
      goto LABEL_16;
    }
    int v9 = v8;
    goto LABEL_15;
  }

  if (*__error() == 2) {
    return;
  }
  id v10 = sub_10005DC2C();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v11 = _SC_syslog_os_log_mapping(3LL);
  if (__SC_log_enabled(3LL, v4, v11))
  {
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    LODWORD(v1pthread_attr_setdetachstate(&v4, 2) = (_sc_log > 0) | 2;
    uint64_t v12 = os_log_type_enabled(v4, (os_log_type_t)v11) ? v12 : 2LL;
    uint64_t v4 = v4;
    uint64_t v13 = __error();
    os_log_t v14 = strerror(*v13);
    int v17 = 136315138;
    CFIndex v18 = v14;
    uint64_t v15 = (__int128 *)_os_log_send_and_compose_impl( v12,  0LL,  &v21,  256LL,  &_mh_execute_header,  v4,  v11,  "sysctlbyname() failed: %s",  (const char *)&v17);

    __SC_log_send2(3LL, v4, v11, 0LL, v15);
    if (v15 != &v21)
    {
      int v9 = v15;
LABEL_15:
      free(v9);
    }
  }

void sub_100061834()
{
  __assert_rtn("pushNotifications", "_SCD.c", 525, "theSession != NULL");
}

void sub_10006185C()
{
  __assert_rtn("getSession", "session.c", 334, "server != MACH_PORT_NULL");
}

void sub_100061884(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "cleanup : %5u", (uint8_t *)v2, 8u);
}

void sub_1000618F8()
{
  __assert_rtn("patternRemoveSession", "pattern.c", 423, "pInfo != NULL");
}

void sub_100061920(int *a1, uint64_t *a2, os_log_t log)
{
  int v3 = *a1;
  uint64_t v4 = *a2;
  v5[0] = 67109378;
  v5[1] = v3;
  __int16 v6 = 2112;
  uint64_t v7 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "open    : %5u : %@", (uint8_t *)v5, 0x12u);
}

void sub_1000619AC(uint64_t a1, os_log_s *a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "close   : %5u", (uint8_t *)v3, 8u);
}

void sub_100061A24(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = *(unsigned __int8 *)(a1 + 44);
  int v4 = *(_DWORD *)(a1 + 40);
  int v6 = 136315650;
  if (v3) {
    uint64_t v5 = "t ";
  }
  else {
    uint64_t v5 = "  ";
  }
  uint64_t v7 = v5;
  __int16 v8 = 1024;
  int v9 = v4;
  __int16 v10 = 2112;
  uint64_t v11 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "add  %s : %5u : %@", (uint8_t *)&v6, 0x1Cu);
}

void sub_100061AD4()
{
}

void sub_100061B44()
{
}

void sub_100061BAC()
{
  __assert_rtn("iterateRegistryBusy", "ifnamer.c", 4007, "newNodes != NULL");
}

void sub_100061BD4()
{
  __assert_rtn("removeNamingRequestAtIndex", "ifnamer.c", 2947, "S_deferred_list != NULL");
}

void sub_100061BFC()
{
}

void sub_100061C24()
{
  __assert_rtn("watchTrustedStatus", "ifnamer.c", 2484, "key != NULL");
}

void sub_100061C4C()
{
  __assert_rtn("dns_configuration_set", "dns-configuration.c", 1631, "resolvers != NULL");
}

void sub_100061C74()
{
  __assert_rtn("add_default_resolver", "dns-configuration.c", 1202, "myDefault != NULL");
}

void sub_100061C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000417BC("nwi_state_get_last_ifstate", "network_state_information_priv.c", a3, "state != NULL");
}

void sub_100061CC0()
{
  __assert_rtn( "_nwi_state_update_interface_generations",  "network_state_information_priv.c",  669,  "old_ifstate != NULL");
}

void sub_100061CE8()
{
  __assert_rtn( "_nwi_state_update_interface_generations",  "network_state_information_priv.c",  693,  "old_ifstate != NULL");
}

void sub_100061D10()
{
  __assert_rtn("IPMonitorProcessChanges", "ip_plugin.c", 8608, "services_info != NULL");
}

void sub_100061D38()
{
  __assert_rtn("ElectionResultsGetPrimary", "ip_plugin.c", 7467, "services_info != NULL");
}

void sub_100061D60()
{
  __assert_rtn("accumulate_dns_servers", "ip_plugin.c", 4630, "addr != NULL");
}

void sub_100061D88()
{
  __assert_rtn("add_reachability_flags_to_candidate", "ip_plugin.c", 7414, "candidate != NULL");
}

void sub_100061DB0()
{
  __assert_rtn("add_reachability_flags_to_candidate", "ip_plugin.c", 7415, "services_info != NULL");
}

void sub_100061DD8()
{
  __assert_rtn("update_hostname", "set-hostname.c", 522, "localHostName != NULL");
}

void sub_100061E00()
{
  __assert_rtn("ptr_query_callback", "set-hostname.c", 381, "localHostName != NULL");
}

void sub_100061E28()
{
  __assert_rtn("CategorySessionRelease", "CategoryManagerServer.c", 287, "session->in_list == false");
}

id objc_msgSend_addPolicyToFloatingAgent_domain_agentUUIDToUse_policyType_useControlPolicySession_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPolicyToFloatingAgent:domain:agentUUIDToUse:policyType:useControlPolicySession:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForKey:");
}